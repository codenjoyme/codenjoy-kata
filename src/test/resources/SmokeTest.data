1: 1:BoardData {
1: 1:  'description': 'Write a method that takes a single String argument and return the string 'world' if 'hello' came in, and 'hello' if 'world', otherwise the algorithm should return the same string that came in.\nThis is the first and simplest algorithm - its purpose is to check if everything works well and how you understand the problem.',
1: 1:  'expectedAnswer': 'world',
1: 1:  'history': [],
1: 1:  'level': 0,
1: 1:  'nextQuestion': 'hello',
1: 1:  'questions': ['hello']
1: 1:}
1: 1:Scores: 0
1: 1:Answer: message('['world']')
1: 1:Fire Event: PassTest{complexity=0, testCount=5}
------------------------------------------
2: 1:BoardData {
2: 1:  'description': 'Write a method that takes a single String argument and return the string 'world' if 'hello' came in, and 'hello' if 'world', otherwise the algorithm should return the same string that came in.\nThis is the first and simplest algorithm - its purpose is to check if everything works well and how you understand the problem.',
2: 1:  'expectedAnswer': 'hello',
2: 1:  'history': [{
2: 1:    'answer': 'world',
2: 1:    'question': 'hello',
2: 1:    'valid': true
2: 1:  }],
2: 1:  'level': 0,
2: 1:  'nextQuestion': 'world',
2: 1:  'questions': [
2: 1:    'hello',
2: 1:    'world'
2: 1:  ]
2: 1:}
2: 1:Scores: 1
2: 1:Answer: message('['world', 'hello']')
2: 1:Fire Event: PassTest{complexity=0, testCount=5}
------------------------------------------
3: 1:BoardData {
3: 1:  'description': 'Write a method that takes a single String argument and return the string 'world' if 'hello' came in, and 'hello' if 'world', otherwise the algorithm should return the same string that came in.\nThis is the first and simplest algorithm - its purpose is to check if everything works well and how you understand the problem.',
3: 1:  'expectedAnswer': 'qwe',
3: 1:  'history': [
3: 1:    {
3: 1:      'answer': 'world',
3: 1:      'question': 'hello',
3: 1:      'valid': true
3: 1:    },
3: 1:    {
3: 1:      'answer': 'hello',
3: 1:      'question': 'world',
3: 1:      'valid': true
3: 1:    }
3: 1:  ],
3: 1:  'level': 0,
3: 1:  'nextQuestion': 'qwe',
3: 1:  'questions': [
3: 1:    'hello',
3: 1:    'world',
3: 1:    'qwe'
3: 1:  ]
3: 1:}
3: 1:Scores: 2
3: 1:Answer: message('['world', 'hello', 'qwe']')
3: 1:Fire Event: PassTest{complexity=0, testCount=5}
------------------------------------------
4: 1:BoardData {
4: 1:  'description': 'Write a method that takes a single String argument and return the string 'world' if 'hello' came in, and 'hello' if 'world', otherwise the algorithm should return the same string that came in.\nThis is the first and simplest algorithm - its purpose is to check if everything works well and how you understand the problem.',
4: 1:  'expectedAnswer': 'asd',
4: 1:  'history': [
4: 1:    {
4: 1:      'answer': 'world',
4: 1:      'question': 'hello',
4: 1:      'valid': true
4: 1:    },
4: 1:    {
4: 1:      'answer': 'hello',
4: 1:      'question': 'world',
4: 1:      'valid': true
4: 1:    },
4: 1:    {
4: 1:      'answer': 'qwe',
4: 1:      'question': 'qwe',
4: 1:      'valid': true
4: 1:    }
4: 1:  ],
4: 1:  'level': 0,
4: 1:  'nextQuestion': 'asd',
4: 1:  'questions': [
4: 1:    'hello',
4: 1:    'world',
4: 1:    'qwe',
4: 1:    'asd'
4: 1:  ]
4: 1:}
4: 1:Scores: 3
4: 1:Answer: message('['world', 'hello', 'qwe', 'asd']')
4: 1:Fire Event: PassTest{complexity=0, testCount=5}
------------------------------------------
5: 1:BoardData {
5: 1:  'description': 'Write a method that takes a single String argument and return the string 'world' if 'hello' came in, and 'hello' if 'world', otherwise the algorithm should return the same string that came in.\nThis is the first and simplest algorithm - its purpose is to check if everything works well and how you understand the problem.',
5: 1:  'expectedAnswer': 'zxc',
5: 1:  'history': [
5: 1:    {
5: 1:      'answer': 'world',
5: 1:      'question': 'hello',
5: 1:      'valid': true
5: 1:    },
5: 1:    {
5: 1:      'answer': 'hello',
5: 1:      'question': 'world',
5: 1:      'valid': true
5: 1:    },
5: 1:    {
5: 1:      'answer': 'qwe',
5: 1:      'question': 'qwe',
5: 1:      'valid': true
5: 1:    },
5: 1:    {
5: 1:      'answer': 'asd',
5: 1:      'question': 'asd',
5: 1:      'valid': true
5: 1:    }
5: 1:  ],
5: 1:  'level': 0,
5: 1:  'nextQuestion': 'zxc',
5: 1:  'questions': [
5: 1:    'hello',
5: 1:    'world',
5: 1:    'qwe',
5: 1:    'asd',
5: 1:    'zxc'
5: 1:  ]
5: 1:}
5: 1:Scores: 4
5: 1:Answer: message('['world', 'hello', 'qwe', 'asd', 'zxc']')
5: 1:Fire Event: PassTest{complexity=0, testCount=5}
5: 1:Fire Event: NextAlgorithm{complexity=0, time=0}
------------------------------------------
6: 1:BoardData {
6: 1:  'description': 'Wait for next level. Please send 'message('StartNextLevel')' command.',
6: 1:  'history': [
6: 1:    {
6: 1:      'answer': 'world',
6: 1:      'question': 'hello',
6: 1:      'valid': true
6: 1:    },
6: 1:    {
6: 1:      'answer': 'hello',
6: 1:      'question': 'world',
6: 1:      'valid': true
6: 1:    },
6: 1:    {
6: 1:      'answer': 'qwe',
6: 1:      'question': 'qwe',
6: 1:      'valid': true
6: 1:    },
6: 1:    {
6: 1:      'answer': 'asd',
6: 1:      'question': 'asd',
6: 1:      'valid': true
6: 1:    },
6: 1:    {
6: 1:      'answer': 'zxc',
6: 1:      'question': 'zxc',
6: 1:      'valid': true
6: 1:    }
6: 1:  ],
6: 1:  'level': 0,
6: 1:  'questions': []
6: 1:}
6: 1:Scores: 5
6: 1:Answer: message('StartNextLevel')
6: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
7: 1:BoardData {
7: 1:  'description': 'Write a method that takes one int argument and that returns a String. For those numbers that are divisible by 3, the method should return 'Fizz', for those numbers divisible by 5 it should return 'Buzz', for those numbers divisible by both 3 and 5 - 'FizzBuzz', and for all others - the number itself.',
7: 1:  'expectedAnswer': '1',
7: 1:  'history': [],
7: 1:  'level': 1,
7: 1:  'nextQuestion': '1',
7: 1:  'questions': ['1']
7: 1:}
7: 1:Scores: 5
7: 1:Answer: message('['1']')
7: 1:Fire Event: PassTest{complexity=5, testCount=25}
------------------------------------------
8: 1:BoardData {
8: 1:  'description': 'Write a method that takes one int argument and that returns a String. For those numbers that are divisible by 3, the method should return 'Fizz', for those numbers divisible by 5 it should return 'Buzz', for those numbers divisible by both 3 and 5 - 'FizzBuzz', and for all others - the number itself.',
8: 1:  'expectedAnswer': '2',
8: 1:  'history': [{
8: 1:    'answer': '1',
8: 1:    'question': '1',
8: 1:    'valid': true
8: 1:  }],
8: 1:  'level': 1,
8: 1:  'nextQuestion': '2',
8: 1:  'questions': [
8: 1:    '1',
8: 1:    '2'
8: 1:  ]
8: 1:}
8: 1:Scores: 7
8: 1:Answer: message('['1', '2']')
8: 1:Fire Event: PassTest{complexity=5, testCount=25}
------------------------------------------
9: 1:BoardData {
9: 1:  'description': 'Write a method that takes one int argument and that returns a String. For those numbers that are divisible by 3, the method should return 'Fizz', for those numbers divisible by 5 it should return 'Buzz', for those numbers divisible by both 3 and 5 - 'FizzBuzz', and for all others - the number itself.',
9: 1:  'expectedAnswer': 'Fizz',
9: 1:  'history': [
9: 1:    {
9: 1:      'answer': '1',
9: 1:      'question': '1',
9: 1:      'valid': true
9: 1:    },
9: 1:    {
9: 1:      'answer': '2',
9: 1:      'question': '2',
9: 1:      'valid': true
9: 1:    }
9: 1:  ],
9: 1:  'level': 1,
9: 1:  'nextQuestion': '3',
9: 1:  'questions': [
9: 1:    '1',
9: 1:    '2',
9: 1:    '3'
9: 1:  ]
9: 1:}
9: 1:Scores: 9
9: 1:Answer: message('['1', '2', 'Fizz']')
9: 1:Fire Event: PassTest{complexity=5, testCount=25}
------------------------------------------
10: 1:BoardData {
10: 1:  'description': 'Write a method that takes one int argument and that returns a String. For those numbers that are divisible by 3, the method should return 'Fizz', for those numbers divisible by 5 it should return 'Buzz', for those numbers divisible by both 3 and 5 - 'FizzBuzz', and for all others - the number itself.',
10: 1:  'expectedAnswer': '4',
10: 1:  'history': [
10: 1:    {
10: 1:      'answer': '1',
10: 1:      'question': '1',
10: 1:      'valid': true
10: 1:    },
10: 1:    {
10: 1:      'answer': '2',
10: 1:      'question': '2',
10: 1:      'valid': true
10: 1:    },
10: 1:    {
10: 1:      'answer': 'Fizz',
10: 1:      'question': '3',
10: 1:      'valid': true
10: 1:    }
10: 1:  ],
10: 1:  'level': 1,
10: 1:  'nextQuestion': '4',
10: 1:  'questions': [
10: 1:    '1',
10: 1:    '2',
10: 1:    '3',
10: 1:    '4'
10: 1:  ]
10: 1:}
10: 1:Scores: 11
10: 1:Answer: message('['1', '2', 'Fizz', '4']')
10: 1:Fire Event: PassTest{complexity=5, testCount=25}
------------------------------------------
11: 1:BoardData {
11: 1:  'description': 'Write a method that takes one int argument and that returns a String. For those numbers that are divisible by 3, the method should return 'Fizz', for those numbers divisible by 5 it should return 'Buzz', for those numbers divisible by both 3 and 5 - 'FizzBuzz', and for all others - the number itself.',
11: 1:  'expectedAnswer': 'Buzz',
11: 1:  'history': [
11: 1:    {
11: 1:      'answer': '1',
11: 1:      'question': '1',
11: 1:      'valid': true
11: 1:    },
11: 1:    {
11: 1:      'answer': '2',
11: 1:      'question': '2',
11: 1:      'valid': true
11: 1:    },
11: 1:    {
11: 1:      'answer': 'Fizz',
11: 1:      'question': '3',
11: 1:      'valid': true
11: 1:    },
11: 1:    {
11: 1:      'answer': '4',
11: 1:      'question': '4',
11: 1:      'valid': true
11: 1:    }
11: 1:  ],
11: 1:  'level': 1,
11: 1:  'nextQuestion': '5',
11: 1:  'questions': [
11: 1:    '1',
11: 1:    '2',
11: 1:    '3',
11: 1:    '4',
11: 1:    '5'
11: 1:  ]
11: 1:}
11: 1:Scores: 13
11: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz']')
11: 1:Fire Event: PassTest{complexity=5, testCount=25}
------------------------------------------
12: 1:BoardData {
12: 1:  'description': 'Write a method that takes one int argument and that returns a String. For those numbers that are divisible by 3, the method should return 'Fizz', for those numbers divisible by 5 it should return 'Buzz', for those numbers divisible by both 3 and 5 - 'FizzBuzz', and for all others - the number itself.',
12: 1:  'expectedAnswer': 'Fizz',
12: 1:  'history': [
12: 1:    {
12: 1:      'answer': '1',
12: 1:      'question': '1',
12: 1:      'valid': true
12: 1:    },
12: 1:    {
12: 1:      'answer': '2',
12: 1:      'question': '2',
12: 1:      'valid': true
12: 1:    },
12: 1:    {
12: 1:      'answer': 'Fizz',
12: 1:      'question': '3',
12: 1:      'valid': true
12: 1:    },
12: 1:    {
12: 1:      'answer': '4',
12: 1:      'question': '4',
12: 1:      'valid': true
12: 1:    },
12: 1:    {
12: 1:      'answer': 'Buzz',
12: 1:      'question': '5',
12: 1:      'valid': true
12: 1:    }
12: 1:  ],
12: 1:  'level': 1,
12: 1:  'nextQuestion': '6',
12: 1:  'questions': [
12: 1:    '1',
12: 1:    '2',
12: 1:    '3',
12: 1:    '4',
12: 1:    '5',
12: 1:    '6'
12: 1:  ]
12: 1:}
12: 1:Scores: 15
12: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz']')
12: 1:Fire Event: PassTest{complexity=5, testCount=25}
------------------------------------------
13: 1:BoardData {
13: 1:  'description': 'Write a method that takes one int argument and that returns a String. For those numbers that are divisible by 3, the method should return 'Fizz', for those numbers divisible by 5 it should return 'Buzz', for those numbers divisible by both 3 and 5 - 'FizzBuzz', and for all others - the number itself.',
13: 1:  'expectedAnswer': '7',
13: 1:  'history': [
13: 1:    {
13: 1:      'answer': '1',
13: 1:      'question': '1',
13: 1:      'valid': true
13: 1:    },
13: 1:    {
13: 1:      'answer': '2',
13: 1:      'question': '2',
13: 1:      'valid': true
13: 1:    },
13: 1:    {
13: 1:      'answer': 'Fizz',
13: 1:      'question': '3',
13: 1:      'valid': true
13: 1:    },
13: 1:    {
13: 1:      'answer': '4',
13: 1:      'question': '4',
13: 1:      'valid': true
13: 1:    },
13: 1:    {
13: 1:      'answer': 'Buzz',
13: 1:      'question': '5',
13: 1:      'valid': true
13: 1:    },
13: 1:    {
13: 1:      'answer': 'Fizz',
13: 1:      'question': '6',
13: 1:      'valid': true
13: 1:    }
13: 1:  ],
13: 1:  'level': 1,
13: 1:  'nextQuestion': '7',
13: 1:  'questions': [
13: 1:    '1',
13: 1:    '2',
13: 1:    '3',
13: 1:    '4',
13: 1:    '5',
13: 1:    '6',
13: 1:    '7'
13: 1:  ]
13: 1:}
13: 1:Scores: 17
13: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7']')
13: 1:Fire Event: PassTest{complexity=5, testCount=25}
------------------------------------------
14: 1:BoardData {
14: 1:  'description': 'Write a method that takes one int argument and that returns a String. For those numbers that are divisible by 3, the method should return 'Fizz', for those numbers divisible by 5 it should return 'Buzz', for those numbers divisible by both 3 and 5 - 'FizzBuzz', and for all others - the number itself.',
14: 1:  'expectedAnswer': '8',
14: 1:  'history': [
14: 1:    {
14: 1:      'answer': '1',
14: 1:      'question': '1',
14: 1:      'valid': true
14: 1:    },
14: 1:    {
14: 1:      'answer': '2',
14: 1:      'question': '2',
14: 1:      'valid': true
14: 1:    },
14: 1:    {
14: 1:      'answer': 'Fizz',
14: 1:      'question': '3',
14: 1:      'valid': true
14: 1:    },
14: 1:    {
14: 1:      'answer': '4',
14: 1:      'question': '4',
14: 1:      'valid': true
14: 1:    },
14: 1:    {
14: 1:      'answer': 'Buzz',
14: 1:      'question': '5',
14: 1:      'valid': true
14: 1:    },
14: 1:    {
14: 1:      'answer': 'Fizz',
14: 1:      'question': '6',
14: 1:      'valid': true
14: 1:    },
14: 1:    {
14: 1:      'answer': '7',
14: 1:      'question': '7',
14: 1:      'valid': true
14: 1:    }
14: 1:  ],
14: 1:  'level': 1,
14: 1:  'nextQuestion': '8',
14: 1:  'questions': [
14: 1:    '1',
14: 1:    '2',
14: 1:    '3',
14: 1:    '4',
14: 1:    '5',
14: 1:    '6',
14: 1:    '7',
14: 1:    '8'
14: 1:  ]
14: 1:}
14: 1:Scores: 19
14: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8']')
14: 1:Fire Event: PassTest{complexity=5, testCount=25}
------------------------------------------
15: 1:BoardData {
15: 1:  'description': 'Write a method that takes one int argument and that returns a String. For those numbers that are divisible by 3, the method should return 'Fizz', for those numbers divisible by 5 it should return 'Buzz', for those numbers divisible by both 3 and 5 - 'FizzBuzz', and for all others - the number itself.',
15: 1:  'expectedAnswer': 'Fizz',
15: 1:  'history': [
15: 1:    {
15: 1:      'answer': '1',
15: 1:      'question': '1',
15: 1:      'valid': true
15: 1:    },
15: 1:    {
15: 1:      'answer': '2',
15: 1:      'question': '2',
15: 1:      'valid': true
15: 1:    },
15: 1:    {
15: 1:      'answer': 'Fizz',
15: 1:      'question': '3',
15: 1:      'valid': true
15: 1:    },
15: 1:    {
15: 1:      'answer': '4',
15: 1:      'question': '4',
15: 1:      'valid': true
15: 1:    },
15: 1:    {
15: 1:      'answer': 'Buzz',
15: 1:      'question': '5',
15: 1:      'valid': true
15: 1:    },
15: 1:    {
15: 1:      'answer': 'Fizz',
15: 1:      'question': '6',
15: 1:      'valid': true
15: 1:    },
15: 1:    {
15: 1:      'answer': '7',
15: 1:      'question': '7',
15: 1:      'valid': true
15: 1:    },
15: 1:    {
15: 1:      'answer': '8',
15: 1:      'question': '8',
15: 1:      'valid': true
15: 1:    }
15: 1:  ],
15: 1:  'level': 1,
15: 1:  'nextQuestion': '9',
15: 1:  'questions': [
15: 1:    '1',
15: 1:    '2',
15: 1:    '3',
15: 1:    '4',
15: 1:    '5',
15: 1:    '6',
15: 1:    '7',
15: 1:    '8',
15: 1:    '9'
15: 1:  ]
15: 1:}
15: 1:Scores: 21
15: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz']')
15: 1:Fire Event: PassTest{complexity=5, testCount=25}
------------------------------------------
16: 1:BoardData {
16: 1:  'description': 'Write a method that takes one int argument and that returns a String. For those numbers that are divisible by 3, the method should return 'Fizz', for those numbers divisible by 5 it should return 'Buzz', for those numbers divisible by both 3 and 5 - 'FizzBuzz', and for all others - the number itself.',
16: 1:  'expectedAnswer': 'Buzz',
16: 1:  'history': [
16: 1:    {
16: 1:      'answer': '1',
16: 1:      'question': '1',
16: 1:      'valid': true
16: 1:    },
16: 1:    {
16: 1:      'answer': '2',
16: 1:      'question': '2',
16: 1:      'valid': true
16: 1:    },
16: 1:    {
16: 1:      'answer': 'Fizz',
16: 1:      'question': '3',
16: 1:      'valid': true
16: 1:    },
16: 1:    {
16: 1:      'answer': '4',
16: 1:      'question': '4',
16: 1:      'valid': true
16: 1:    },
16: 1:    {
16: 1:      'answer': 'Buzz',
16: 1:      'question': '5',
16: 1:      'valid': true
16: 1:    },
16: 1:    {
16: 1:      'answer': 'Fizz',
16: 1:      'question': '6',
16: 1:      'valid': true
16: 1:    },
16: 1:    {
16: 1:      'answer': '7',
16: 1:      'question': '7',
16: 1:      'valid': true
16: 1:    },
16: 1:    {
16: 1:      'answer': '8',
16: 1:      'question': '8',
16: 1:      'valid': true
16: 1:    },
16: 1:    {
16: 1:      'answer': 'Fizz',
16: 1:      'question': '9',
16: 1:      'valid': true
16: 1:    }
16: 1:  ],
16: 1:  'level': 1,
16: 1:  'nextQuestion': '10',
16: 1:  'questions': [
16: 1:    '1',
16: 1:    '2',
16: 1:    '3',
16: 1:    '4',
16: 1:    '5',
16: 1:    '6',
16: 1:    '7',
16: 1:    '8',
16: 1:    '9',
16: 1:    '10'
16: 1:  ]
16: 1:}
16: 1:Scores: 23
16: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz']')
16: 1:Fire Event: PassTest{complexity=5, testCount=25}
------------------------------------------
17: 1:BoardData {
17: 1:  'description': 'Write a method that takes one int argument and that returns a String. For those numbers that are divisible by 3, the method should return 'Fizz', for those numbers divisible by 5 it should return 'Buzz', for those numbers divisible by both 3 and 5 - 'FizzBuzz', and for all others - the number itself.',
17: 1:  'expectedAnswer': '11',
17: 1:  'history': [
17: 1:    {
17: 1:      'answer': '1',
17: 1:      'question': '1',
17: 1:      'valid': true
17: 1:    },
17: 1:    {
17: 1:      'answer': '2',
17: 1:      'question': '2',
17: 1:      'valid': true
17: 1:    },
17: 1:    {
17: 1:      'answer': 'Fizz',
17: 1:      'question': '3',
17: 1:      'valid': true
17: 1:    },
17: 1:    {
17: 1:      'answer': '4',
17: 1:      'question': '4',
17: 1:      'valid': true
17: 1:    },
17: 1:    {
17: 1:      'answer': 'Buzz',
17: 1:      'question': '5',
17: 1:      'valid': true
17: 1:    },
17: 1:    {
17: 1:      'answer': 'Fizz',
17: 1:      'question': '6',
17: 1:      'valid': true
17: 1:    },
17: 1:    {
17: 1:      'answer': '7',
17: 1:      'question': '7',
17: 1:      'valid': true
17: 1:    },
17: 1:    {
17: 1:      'answer': '8',
17: 1:      'question': '8',
17: 1:      'valid': true
17: 1:    },
17: 1:    {
17: 1:      'answer': 'Fizz',
17: 1:      'question': '9',
17: 1:      'valid': true
17: 1:    },
17: 1:    {
17: 1:      'answer': 'Buzz',
17: 1:      'question': '10',
17: 1:      'valid': true
17: 1:    }
17: 1:  ],
17: 1:  'level': 1,
17: 1:  'nextQuestion': '11',
17: 1:  'questions': [
17: 1:    '1',
17: 1:    '2',
17: 1:    '3',
17: 1:    '4',
17: 1:    '5',
17: 1:    '6',
17: 1:    '7',
17: 1:    '8',
17: 1:    '9',
17: 1:    '10',
17: 1:    '11'
17: 1:  ]
17: 1:}
17: 1:Scores: 25
17: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11']')
17: 1:Fire Event: PassTest{complexity=5, testCount=25}
------------------------------------------
18: 1:BoardData {
18: 1:  'description': 'Write a method that takes one int argument and that returns a String. For those numbers that are divisible by 3, the method should return 'Fizz', for those numbers divisible by 5 it should return 'Buzz', for those numbers divisible by both 3 and 5 - 'FizzBuzz', and for all others - the number itself.',
18: 1:  'expectedAnswer': 'Fizz',
18: 1:  'history': [
18: 1:    {
18: 1:      'answer': '1',
18: 1:      'question': '1',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': '2',
18: 1:      'question': '2',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': 'Fizz',
18: 1:      'question': '3',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': '4',
18: 1:      'question': '4',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': 'Buzz',
18: 1:      'question': '5',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': 'Fizz',
18: 1:      'question': '6',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': '7',
18: 1:      'question': '7',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': '8',
18: 1:      'question': '8',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': 'Fizz',
18: 1:      'question': '9',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': 'Buzz',
18: 1:      'question': '10',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': '11',
18: 1:      'question': '11',
18: 1:      'valid': true
18: 1:    }
18: 1:  ],
18: 1:  'level': 1,
18: 1:  'nextQuestion': '12',
18: 1:  'questions': [
18: 1:    '1',
18: 1:    '2',
18: 1:    '3',
18: 1:    '4',
18: 1:    '5',
18: 1:    '6',
18: 1:    '7',
18: 1:    '8',
18: 1:    '9',
18: 1:    '10',
18: 1:    '11',
18: 1:    '12'
18: 1:  ]
18: 1:}
18: 1:Scores: 27
18: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz']')
18: 1:Fire Event: PassTest{complexity=5, testCount=25}
------------------------------------------
19: 1:BoardData {
19: 1:  'description': 'Write a method that takes one int argument and that returns a String. For those numbers that are divisible by 3, the method should return 'Fizz', for those numbers divisible by 5 it should return 'Buzz', for those numbers divisible by both 3 and 5 - 'FizzBuzz', and for all others - the number itself.',
19: 1:  'expectedAnswer': '13',
19: 1:  'history': [
19: 1:    {
19: 1:      'answer': '1',
19: 1:      'question': '1',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': '2',
19: 1:      'question': '2',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': 'Fizz',
19: 1:      'question': '3',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': '4',
19: 1:      'question': '4',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': 'Buzz',
19: 1:      'question': '5',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': 'Fizz',
19: 1:      'question': '6',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': '7',
19: 1:      'question': '7',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': '8',
19: 1:      'question': '8',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': 'Fizz',
19: 1:      'question': '9',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': 'Buzz',
19: 1:      'question': '10',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': '11',
19: 1:      'question': '11',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': 'Fizz',
19: 1:      'question': '12',
19: 1:      'valid': true
19: 1:    }
19: 1:  ],
19: 1:  'level': 1,
19: 1:  'nextQuestion': '13',
19: 1:  'questions': [
19: 1:    '1',
19: 1:    '2',
19: 1:    '3',
19: 1:    '4',
19: 1:    '5',
19: 1:    '6',
19: 1:    '7',
19: 1:    '8',
19: 1:    '9',
19: 1:    '10',
19: 1:    '11',
19: 1:    '12',
19: 1:    '13'
19: 1:  ]
19: 1:}
19: 1:Scores: 29
19: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13']')
19: 1:Fire Event: PassTest{complexity=5, testCount=25}
------------------------------------------
20: 1:BoardData {
20: 1:  'description': 'Write a method that takes one int argument and that returns a String. For those numbers that are divisible by 3, the method should return 'Fizz', for those numbers divisible by 5 it should return 'Buzz', for those numbers divisible by both 3 and 5 - 'FizzBuzz', and for all others - the number itself.',
20: 1:  'expectedAnswer': '14',
20: 1:  'history': [
20: 1:    {
20: 1:      'answer': '1',
20: 1:      'question': '1',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': '2',
20: 1:      'question': '2',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': 'Fizz',
20: 1:      'question': '3',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': '4',
20: 1:      'question': '4',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': 'Buzz',
20: 1:      'question': '5',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': 'Fizz',
20: 1:      'question': '6',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': '7',
20: 1:      'question': '7',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': '8',
20: 1:      'question': '8',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': 'Fizz',
20: 1:      'question': '9',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': 'Buzz',
20: 1:      'question': '10',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': '11',
20: 1:      'question': '11',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': 'Fizz',
20: 1:      'question': '12',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': '13',
20: 1:      'question': '13',
20: 1:      'valid': true
20: 1:    }
20: 1:  ],
20: 1:  'level': 1,
20: 1:  'nextQuestion': '14',
20: 1:  'questions': [
20: 1:    '1',
20: 1:    '2',
20: 1:    '3',
20: 1:    '4',
20: 1:    '5',
20: 1:    '6',
20: 1:    '7',
20: 1:    '8',
20: 1:    '9',
20: 1:    '10',
20: 1:    '11',
20: 1:    '12',
20: 1:    '13',
20: 1:    '14'
20: 1:  ]
20: 1:}
20: 1:Scores: 31
20: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14']')
20: 1:Fire Event: PassTest{complexity=5, testCount=25}
------------------------------------------
21: 1:BoardData {
21: 1:  'description': 'Write a method that takes one int argument and that returns a String. For those numbers that are divisible by 3, the method should return 'Fizz', for those numbers divisible by 5 it should return 'Buzz', for those numbers divisible by both 3 and 5 - 'FizzBuzz', and for all others - the number itself.',
21: 1:  'expectedAnswer': 'FizzBuzz',
21: 1:  'history': [
21: 1:    {
21: 1:      'answer': '1',
21: 1:      'question': '1',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': '2',
21: 1:      'question': '2',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': 'Fizz',
21: 1:      'question': '3',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': '4',
21: 1:      'question': '4',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': 'Buzz',
21: 1:      'question': '5',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': 'Fizz',
21: 1:      'question': '6',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': '7',
21: 1:      'question': '7',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': '8',
21: 1:      'question': '8',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': 'Fizz',
21: 1:      'question': '9',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': 'Buzz',
21: 1:      'question': '10',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': '11',
21: 1:      'question': '11',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': 'Fizz',
21: 1:      'question': '12',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': '13',
21: 1:      'question': '13',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': '14',
21: 1:      'question': '14',
21: 1:      'valid': true
21: 1:    }
21: 1:  ],
21: 1:  'level': 1,
21: 1:  'nextQuestion': '15',
21: 1:  'questions': [
21: 1:    '1',
21: 1:    '2',
21: 1:    '3',
21: 1:    '4',
21: 1:    '5',
21: 1:    '6',
21: 1:    '7',
21: 1:    '8',
21: 1:    '9',
21: 1:    '10',
21: 1:    '11',
21: 1:    '12',
21: 1:    '13',
21: 1:    '14',
21: 1:    '15'
21: 1:  ]
21: 1:}
21: 1:Scores: 33
21: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz']')
21: 1:Fire Event: PassTest{complexity=5, testCount=25}
------------------------------------------
22: 1:BoardData {
22: 1:  'description': 'Write a method that takes one int argument and that returns a String. For those numbers that are divisible by 3, the method should return 'Fizz', for those numbers divisible by 5 it should return 'Buzz', for those numbers divisible by both 3 and 5 - 'FizzBuzz', and for all others - the number itself.',
22: 1:  'expectedAnswer': '16',
22: 1:  'history': [
22: 1:    {
22: 1:      'answer': '1',
22: 1:      'question': '1',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': '2',
22: 1:      'question': '2',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'Fizz',
22: 1:      'question': '3',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': '4',
22: 1:      'question': '4',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'Buzz',
22: 1:      'question': '5',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'Fizz',
22: 1:      'question': '6',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': '7',
22: 1:      'question': '7',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': '8',
22: 1:      'question': '8',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'Fizz',
22: 1:      'question': '9',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'Buzz',
22: 1:      'question': '10',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': '11',
22: 1:      'question': '11',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'Fizz',
22: 1:      'question': '12',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': '13',
22: 1:      'question': '13',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': '14',
22: 1:      'question': '14',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'FizzBuzz',
22: 1:      'question': '15',
22: 1:      'valid': true
22: 1:    }
22: 1:  ],
22: 1:  'level': 1,
22: 1:  'nextQuestion': '16',
22: 1:  'questions': [
22: 1:    '1',
22: 1:    '2',
22: 1:    '3',
22: 1:    '4',
22: 1:    '5',
22: 1:    '6',
22: 1:    '7',
22: 1:    '8',
22: 1:    '9',
22: 1:    '10',
22: 1:    '11',
22: 1:    '12',
22: 1:    '13',
22: 1:    '14',
22: 1:    '15',
22: 1:    '16'
22: 1:  ]
22: 1:}
22: 1:Scores: 35
22: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16']')
22: 1:Fire Event: PassTest{complexity=5, testCount=25}
------------------------------------------
23: 1:BoardData {
23: 1:  'description': 'Write a method that takes one int argument and that returns a String. For those numbers that are divisible by 3, the method should return 'Fizz', for those numbers divisible by 5 it should return 'Buzz', for those numbers divisible by both 3 and 5 - 'FizzBuzz', and for all others - the number itself.',
23: 1:  'expectedAnswer': '17',
23: 1:  'history': [
23: 1:    {
23: 1:      'answer': '1',
23: 1:      'question': '1',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': '2',
23: 1:      'question': '2',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'Fizz',
23: 1:      'question': '3',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': '4',
23: 1:      'question': '4',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'Buzz',
23: 1:      'question': '5',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'Fizz',
23: 1:      'question': '6',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': '7',
23: 1:      'question': '7',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': '8',
23: 1:      'question': '8',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'Fizz',
23: 1:      'question': '9',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'Buzz',
23: 1:      'question': '10',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': '11',
23: 1:      'question': '11',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'Fizz',
23: 1:      'question': '12',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': '13',
23: 1:      'question': '13',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': '14',
23: 1:      'question': '14',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'FizzBuzz',
23: 1:      'question': '15',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': '16',
23: 1:      'question': '16',
23: 1:      'valid': true
23: 1:    }
23: 1:  ],
23: 1:  'level': 1,
23: 1:  'nextQuestion': '17',
23: 1:  'questions': [
23: 1:    '1',
23: 1:    '2',
23: 1:    '3',
23: 1:    '4',
23: 1:    '5',
23: 1:    '6',
23: 1:    '7',
23: 1:    '8',
23: 1:    '9',
23: 1:    '10',
23: 1:    '11',
23: 1:    '12',
23: 1:    '13',
23: 1:    '14',
23: 1:    '15',
23: 1:    '16',
23: 1:    '17'
23: 1:  ]
23: 1:}
23: 1:Scores: 37
23: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17']')
23: 1:Fire Event: PassTest{complexity=5, testCount=25}
------------------------------------------
24: 1:BoardData {
24: 1:  'description': 'Write a method that takes one int argument and that returns a String. For those numbers that are divisible by 3, the method should return 'Fizz', for those numbers divisible by 5 it should return 'Buzz', for those numbers divisible by both 3 and 5 - 'FizzBuzz', and for all others - the number itself.',
24: 1:  'expectedAnswer': 'Fizz',
24: 1:  'history': [
24: 1:    {
24: 1:      'answer': '1',
24: 1:      'question': '1',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': '2',
24: 1:      'question': '2',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'Fizz',
24: 1:      'question': '3',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': '4',
24: 1:      'question': '4',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'Buzz',
24: 1:      'question': '5',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'Fizz',
24: 1:      'question': '6',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': '7',
24: 1:      'question': '7',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': '8',
24: 1:      'question': '8',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'Fizz',
24: 1:      'question': '9',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'Buzz',
24: 1:      'question': '10',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': '11',
24: 1:      'question': '11',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'Fizz',
24: 1:      'question': '12',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': '13',
24: 1:      'question': '13',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': '14',
24: 1:      'question': '14',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'FizzBuzz',
24: 1:      'question': '15',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': '16',
24: 1:      'question': '16',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': '17',
24: 1:      'question': '17',
24: 1:      'valid': true
24: 1:    }
24: 1:  ],
24: 1:  'level': 1,
24: 1:  'nextQuestion': '18',
24: 1:  'questions': [
24: 1:    '1',
24: 1:    '2',
24: 1:    '3',
24: 1:    '4',
24: 1:    '5',
24: 1:    '6',
24: 1:    '7',
24: 1:    '8',
24: 1:    '9',
24: 1:    '10',
24: 1:    '11',
24: 1:    '12',
24: 1:    '13',
24: 1:    '14',
24: 1:    '15',
24: 1:    '16',
24: 1:    '17',
24: 1:    '18'
24: 1:  ]
24: 1:}
24: 1:Scores: 39
24: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz']')
24: 1:Fire Event: PassTest{complexity=5, testCount=25}
------------------------------------------
25: 1:BoardData {
25: 1:  'description': 'Write a method that takes one int argument and that returns a String. For those numbers that are divisible by 3, the method should return 'Fizz', for those numbers divisible by 5 it should return 'Buzz', for those numbers divisible by both 3 and 5 - 'FizzBuzz', and for all others - the number itself.',
25: 1:  'expectedAnswer': '19',
25: 1:  'history': [
25: 1:    {
25: 1:      'answer': '1',
25: 1:      'question': '1',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': '2',
25: 1:      'question': '2',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'Fizz',
25: 1:      'question': '3',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': '4',
25: 1:      'question': '4',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'Buzz',
25: 1:      'question': '5',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'Fizz',
25: 1:      'question': '6',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': '7',
25: 1:      'question': '7',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': '8',
25: 1:      'question': '8',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'Fizz',
25: 1:      'question': '9',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'Buzz',
25: 1:      'question': '10',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': '11',
25: 1:      'question': '11',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'Fizz',
25: 1:      'question': '12',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': '13',
25: 1:      'question': '13',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': '14',
25: 1:      'question': '14',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'FizzBuzz',
25: 1:      'question': '15',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': '16',
25: 1:      'question': '16',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': '17',
25: 1:      'question': '17',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'Fizz',
25: 1:      'question': '18',
25: 1:      'valid': true
25: 1:    }
25: 1:  ],
25: 1:  'level': 1,
25: 1:  'nextQuestion': '19',
25: 1:  'questions': [
25: 1:    '1',
25: 1:    '2',
25: 1:    '3',
25: 1:    '4',
25: 1:    '5',
25: 1:    '6',
25: 1:    '7',
25: 1:    '8',
25: 1:    '9',
25: 1:    '10',
25: 1:    '11',
25: 1:    '12',
25: 1:    '13',
25: 1:    '14',
25: 1:    '15',
25: 1:    '16',
25: 1:    '17',
25: 1:    '18',
25: 1:    '19'
25: 1:  ]
25: 1:}
25: 1:Scores: 41
25: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19']')
25: 1:Fire Event: PassTest{complexity=5, testCount=25}
------------------------------------------
26: 1:BoardData {
26: 1:  'description': 'Write a method that takes one int argument and that returns a String. For those numbers that are divisible by 3, the method should return 'Fizz', for those numbers divisible by 5 it should return 'Buzz', for those numbers divisible by both 3 and 5 - 'FizzBuzz', and for all others - the number itself.',
26: 1:  'expectedAnswer': 'Buzz',
26: 1:  'history': [
26: 1:    {
26: 1:      'answer': '1',
26: 1:      'question': '1',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': '2',
26: 1:      'question': '2',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'Fizz',
26: 1:      'question': '3',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': '4',
26: 1:      'question': '4',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'Buzz',
26: 1:      'question': '5',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'Fizz',
26: 1:      'question': '6',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': '7',
26: 1:      'question': '7',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': '8',
26: 1:      'question': '8',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'Fizz',
26: 1:      'question': '9',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'Buzz',
26: 1:      'question': '10',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': '11',
26: 1:      'question': '11',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'Fizz',
26: 1:      'question': '12',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': '13',
26: 1:      'question': '13',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': '14',
26: 1:      'question': '14',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'FizzBuzz',
26: 1:      'question': '15',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': '16',
26: 1:      'question': '16',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': '17',
26: 1:      'question': '17',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'Fizz',
26: 1:      'question': '18',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': '19',
26: 1:      'question': '19',
26: 1:      'valid': true
26: 1:    }
26: 1:  ],
26: 1:  'level': 1,
26: 1:  'nextQuestion': '20',
26: 1:  'questions': [
26: 1:    '1',
26: 1:    '2',
26: 1:    '3',
26: 1:    '4',
26: 1:    '5',
26: 1:    '6',
26: 1:    '7',
26: 1:    '8',
26: 1:    '9',
26: 1:    '10',
26: 1:    '11',
26: 1:    '12',
26: 1:    '13',
26: 1:    '14',
26: 1:    '15',
26: 1:    '16',
26: 1:    '17',
26: 1:    '18',
26: 1:    '19',
26: 1:    '20'
26: 1:  ]
26: 1:}
26: 1:Scores: 43
26: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz']')
26: 1:Fire Event: PassTest{complexity=5, testCount=25}
------------------------------------------
27: 1:BoardData {
27: 1:  'description': 'Write a method that takes one int argument and that returns a String. For those numbers that are divisible by 3, the method should return 'Fizz', for those numbers divisible by 5 it should return 'Buzz', for those numbers divisible by both 3 and 5 - 'FizzBuzz', and for all others - the number itself.',
27: 1:  'expectedAnswer': 'Fizz',
27: 1:  'history': [
27: 1:    {
27: 1:      'answer': '1',
27: 1:      'question': '1',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': '2',
27: 1:      'question': '2',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'Fizz',
27: 1:      'question': '3',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': '4',
27: 1:      'question': '4',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'Buzz',
27: 1:      'question': '5',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'Fizz',
27: 1:      'question': '6',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': '7',
27: 1:      'question': '7',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': '8',
27: 1:      'question': '8',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'Fizz',
27: 1:      'question': '9',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'Buzz',
27: 1:      'question': '10',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': '11',
27: 1:      'question': '11',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'Fizz',
27: 1:      'question': '12',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': '13',
27: 1:      'question': '13',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': '14',
27: 1:      'question': '14',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'FizzBuzz',
27: 1:      'question': '15',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': '16',
27: 1:      'question': '16',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': '17',
27: 1:      'question': '17',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'Fizz',
27: 1:      'question': '18',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': '19',
27: 1:      'question': '19',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'Buzz',
27: 1:      'question': '20',
27: 1:      'valid': true
27: 1:    }
27: 1:  ],
27: 1:  'level': 1,
27: 1:  'nextQuestion': '21',
27: 1:  'questions': [
27: 1:    '1',
27: 1:    '2',
27: 1:    '3',
27: 1:    '4',
27: 1:    '5',
27: 1:    '6',
27: 1:    '7',
27: 1:    '8',
27: 1:    '9',
27: 1:    '10',
27: 1:    '11',
27: 1:    '12',
27: 1:    '13',
27: 1:    '14',
27: 1:    '15',
27: 1:    '16',
27: 1:    '17',
27: 1:    '18',
27: 1:    '19',
27: 1:    '20',
27: 1:    '21'
27: 1:  ]
27: 1:}
27: 1:Scores: 45
27: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz']')
27: 1:Fire Event: PassTest{complexity=5, testCount=25}
------------------------------------------
28: 1:BoardData {
28: 1:  'description': 'Write a method that takes one int argument and that returns a String. For those numbers that are divisible by 3, the method should return 'Fizz', for those numbers divisible by 5 it should return 'Buzz', for those numbers divisible by both 3 and 5 - 'FizzBuzz', and for all others - the number itself.',
28: 1:  'expectedAnswer': '22',
28: 1:  'history': [
28: 1:    {
28: 1:      'answer': '1',
28: 1:      'question': '1',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': '2',
28: 1:      'question': '2',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Fizz',
28: 1:      'question': '3',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': '4',
28: 1:      'question': '4',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Buzz',
28: 1:      'question': '5',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Fizz',
28: 1:      'question': '6',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': '7',
28: 1:      'question': '7',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': '8',
28: 1:      'question': '8',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Fizz',
28: 1:      'question': '9',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Buzz',
28: 1:      'question': '10',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': '11',
28: 1:      'question': '11',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Fizz',
28: 1:      'question': '12',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': '13',
28: 1:      'question': '13',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': '14',
28: 1:      'question': '14',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'FizzBuzz',
28: 1:      'question': '15',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': '16',
28: 1:      'question': '16',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': '17',
28: 1:      'question': '17',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Fizz',
28: 1:      'question': '18',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': '19',
28: 1:      'question': '19',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Buzz',
28: 1:      'question': '20',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Fizz',
28: 1:      'question': '21',
28: 1:      'valid': true
28: 1:    }
28: 1:  ],
28: 1:  'level': 1,
28: 1:  'nextQuestion': '22',
28: 1:  'questions': [
28: 1:    '1',
28: 1:    '2',
28: 1:    '3',
28: 1:    '4',
28: 1:    '5',
28: 1:    '6',
28: 1:    '7',
28: 1:    '8',
28: 1:    '9',
28: 1:    '10',
28: 1:    '11',
28: 1:    '12',
28: 1:    '13',
28: 1:    '14',
28: 1:    '15',
28: 1:    '16',
28: 1:    '17',
28: 1:    '18',
28: 1:    '19',
28: 1:    '20',
28: 1:    '21',
28: 1:    '22'
28: 1:  ]
28: 1:}
28: 1:Scores: 47
28: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22']')
28: 1:Fire Event: PassTest{complexity=5, testCount=25}
------------------------------------------
29: 1:BoardData {
29: 1:  'description': 'Write a method that takes one int argument and that returns a String. For those numbers that are divisible by 3, the method should return 'Fizz', for those numbers divisible by 5 it should return 'Buzz', for those numbers divisible by both 3 and 5 - 'FizzBuzz', and for all others - the number itself.',
29: 1:  'expectedAnswer': '23',
29: 1:  'history': [
29: 1:    {
29: 1:      'answer': '1',
29: 1:      'question': '1',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': '2',
29: 1:      'question': '2',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Fizz',
29: 1:      'question': '3',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': '4',
29: 1:      'question': '4',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Buzz',
29: 1:      'question': '5',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Fizz',
29: 1:      'question': '6',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': '7',
29: 1:      'question': '7',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': '8',
29: 1:      'question': '8',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Fizz',
29: 1:      'question': '9',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Buzz',
29: 1:      'question': '10',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': '11',
29: 1:      'question': '11',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Fizz',
29: 1:      'question': '12',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': '13',
29: 1:      'question': '13',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': '14',
29: 1:      'question': '14',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'FizzBuzz',
29: 1:      'question': '15',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': '16',
29: 1:      'question': '16',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': '17',
29: 1:      'question': '17',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Fizz',
29: 1:      'question': '18',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': '19',
29: 1:      'question': '19',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Buzz',
29: 1:      'question': '20',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Fizz',
29: 1:      'question': '21',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': '22',
29: 1:      'question': '22',
29: 1:      'valid': true
29: 1:    }
29: 1:  ],
29: 1:  'level': 1,
29: 1:  'nextQuestion': '23',
29: 1:  'questions': [
29: 1:    '1',
29: 1:    '2',
29: 1:    '3',
29: 1:    '4',
29: 1:    '5',
29: 1:    '6',
29: 1:    '7',
29: 1:    '8',
29: 1:    '9',
29: 1:    '10',
29: 1:    '11',
29: 1:    '12',
29: 1:    '13',
29: 1:    '14',
29: 1:    '15',
29: 1:    '16',
29: 1:    '17',
29: 1:    '18',
29: 1:    '19',
29: 1:    '20',
29: 1:    '21',
29: 1:    '22',
29: 1:    '23'
29: 1:  ]
29: 1:}
29: 1:Scores: 49
29: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23']')
29: 1:Fire Event: PassTest{complexity=5, testCount=25}
------------------------------------------
30: 1:BoardData {
30: 1:  'description': 'Write a method that takes one int argument and that returns a String. For those numbers that are divisible by 3, the method should return 'Fizz', for those numbers divisible by 5 it should return 'Buzz', for those numbers divisible by both 3 and 5 - 'FizzBuzz', and for all others - the number itself.',
30: 1:  'expectedAnswer': 'Fizz',
30: 1:  'history': [
30: 1:    {
30: 1:      'answer': '1',
30: 1:      'question': '1',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': '2',
30: 1:      'question': '2',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Fizz',
30: 1:      'question': '3',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': '4',
30: 1:      'question': '4',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Buzz',
30: 1:      'question': '5',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Fizz',
30: 1:      'question': '6',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': '7',
30: 1:      'question': '7',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': '8',
30: 1:      'question': '8',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Fizz',
30: 1:      'question': '9',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Buzz',
30: 1:      'question': '10',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': '11',
30: 1:      'question': '11',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Fizz',
30: 1:      'question': '12',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': '13',
30: 1:      'question': '13',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': '14',
30: 1:      'question': '14',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'FizzBuzz',
30: 1:      'question': '15',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': '16',
30: 1:      'question': '16',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': '17',
30: 1:      'question': '17',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Fizz',
30: 1:      'question': '18',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': '19',
30: 1:      'question': '19',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Buzz',
30: 1:      'question': '20',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Fizz',
30: 1:      'question': '21',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': '22',
30: 1:      'question': '22',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': '23',
30: 1:      'question': '23',
30: 1:      'valid': true
30: 1:    }
30: 1:  ],
30: 1:  'level': 1,
30: 1:  'nextQuestion': '24',
30: 1:  'questions': [
30: 1:    '1',
30: 1:    '2',
30: 1:    '3',
30: 1:    '4',
30: 1:    '5',
30: 1:    '6',
30: 1:    '7',
30: 1:    '8',
30: 1:    '9',
30: 1:    '10',
30: 1:    '11',
30: 1:    '12',
30: 1:    '13',
30: 1:    '14',
30: 1:    '15',
30: 1:    '16',
30: 1:    '17',
30: 1:    '18',
30: 1:    '19',
30: 1:    '20',
30: 1:    '21',
30: 1:    '22',
30: 1:    '23',
30: 1:    '24'
30: 1:  ]
30: 1:}
30: 1:Scores: 51
30: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz']')
30: 1:Fire Event: PassTest{complexity=5, testCount=25}
------------------------------------------
31: 1:BoardData {
31: 1:  'description': 'Write a method that takes one int argument and that returns a String. For those numbers that are divisible by 3, the method should return 'Fizz', for those numbers divisible by 5 it should return 'Buzz', for those numbers divisible by both 3 and 5 - 'FizzBuzz', and for all others - the number itself.',
31: 1:  'expectedAnswer': 'Buzz',
31: 1:  'history': [
31: 1:    {
31: 1:      'answer': '1',
31: 1:      'question': '1',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': '2',
31: 1:      'question': '2',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Fizz',
31: 1:      'question': '3',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': '4',
31: 1:      'question': '4',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Buzz',
31: 1:      'question': '5',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Fizz',
31: 1:      'question': '6',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': '7',
31: 1:      'question': '7',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': '8',
31: 1:      'question': '8',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Fizz',
31: 1:      'question': '9',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Buzz',
31: 1:      'question': '10',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': '11',
31: 1:      'question': '11',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Fizz',
31: 1:      'question': '12',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': '13',
31: 1:      'question': '13',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': '14',
31: 1:      'question': '14',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'FizzBuzz',
31: 1:      'question': '15',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': '16',
31: 1:      'question': '16',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': '17',
31: 1:      'question': '17',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Fizz',
31: 1:      'question': '18',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': '19',
31: 1:      'question': '19',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Buzz',
31: 1:      'question': '20',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Fizz',
31: 1:      'question': '21',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': '22',
31: 1:      'question': '22',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': '23',
31: 1:      'question': '23',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Fizz',
31: 1:      'question': '24',
31: 1:      'valid': true
31: 1:    }
31: 1:  ],
31: 1:  'level': 1,
31: 1:  'nextQuestion': '25',
31: 1:  'questions': [
31: 1:    '1',
31: 1:    '2',
31: 1:    '3',
31: 1:    '4',
31: 1:    '5',
31: 1:    '6',
31: 1:    '7',
31: 1:    '8',
31: 1:    '9',
31: 1:    '10',
31: 1:    '11',
31: 1:    '12',
31: 1:    '13',
31: 1:    '14',
31: 1:    '15',
31: 1:    '16',
31: 1:    '17',
31: 1:    '18',
31: 1:    '19',
31: 1:    '20',
31: 1:    '21',
31: 1:    '22',
31: 1:    '23',
31: 1:    '24',
31: 1:    '25'
31: 1:  ]
31: 1:}
31: 1:Scores: 53
31: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz']')
31: 1:Fire Event: PassTest{complexity=5, testCount=25}
31: 1:Fire Event: NextAlgorithm{complexity=5, time=0}
------------------------------------------
32: 1:BoardData {
32: 1:  'description': 'Wait for next level. Please send 'message('StartNextLevel')' command.',
32: 1:  'history': [
32: 1:    {
32: 1:      'answer': '1',
32: 1:      'question': '1',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': '2',
32: 1:      'question': '2',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Fizz',
32: 1:      'question': '3',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': '4',
32: 1:      'question': '4',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Buzz',
32: 1:      'question': '5',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Fizz',
32: 1:      'question': '6',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': '7',
32: 1:      'question': '7',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': '8',
32: 1:      'question': '8',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Fizz',
32: 1:      'question': '9',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Buzz',
32: 1:      'question': '10',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': '11',
32: 1:      'question': '11',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Fizz',
32: 1:      'question': '12',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': '13',
32: 1:      'question': '13',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': '14',
32: 1:      'question': '14',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'FizzBuzz',
32: 1:      'question': '15',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': '16',
32: 1:      'question': '16',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': '17',
32: 1:      'question': '17',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Fizz',
32: 1:      'question': '18',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': '19',
32: 1:      'question': '19',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Buzz',
32: 1:      'question': '20',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Fizz',
32: 1:      'question': '21',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': '22',
32: 1:      'question': '22',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': '23',
32: 1:      'question': '23',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Fizz',
32: 1:      'question': '24',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Buzz',
32: 1:      'question': '25',
32: 1:      'valid': true
32: 1:    }
32: 1:  ],
32: 1:  'level': 1,
32: 1:  'questions': []
32: 1:}
32: 1:Scores: 729
32: 1:Answer: message('StartNextLevel')
32: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
33: 1:BoardData {
33: 1:  'description': 'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.',
33: 1:  'expectedAnswer': '0',
33: 1:  'history': [],
33: 1:  'level': 2,
33: 1:  'nextQuestion': '1',
33: 1:  'questions': ['1']
33: 1:}
33: 1:Scores: 729
33: 1:Answer: message('['0']')
33: 1:Fire Event: PassTest{complexity=10, testCount=25}
------------------------------------------
34: 1:BoardData {
34: 1:  'description': 'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.',
34: 1:  'expectedAnswer': '4',
34: 1:  'history': [{
34: 1:    'answer': '0',
34: 1:    'question': '1',
34: 1:    'valid': true
34: 1:  }],
34: 1:  'level': 2,
34: 1:  'nextQuestion': '2',
34: 1:  'questions': [
34: 1:    '1',
34: 1:    '2'
34: 1:  ]
34: 1:}
34: 1:Scores: 733
34: 1:Answer: message('['0', '4']')
34: 1:Fire Event: PassTest{complexity=10, testCount=25}
------------------------------------------
35: 1:BoardData {
35: 1:  'description': 'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.',
35: 1:  'expectedAnswer': '22',
35: 1:  'history': [
35: 1:    {
35: 1:      'answer': '0',
35: 1:      'question': '1',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': '4',
35: 1:      'question': '2',
35: 1:      'valid': true
35: 1:    }
35: 1:  ],
35: 1:  'level': 2,
35: 1:  'nextQuestion': '3',
35: 1:  'questions': [
35: 1:    '1',
35: 1:    '2',
35: 1:    '3'
35: 1:  ]
35: 1:}
35: 1:Scores: 737
35: 1:Answer: message('['0', '4', '22']')
35: 1:Fire Event: PassTest{complexity=10, testCount=25}
------------------------------------------
36: 1:BoardData {
36: 1:  'description': 'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.',
36: 1:  'expectedAnswer': '70',
36: 1:  'history': [
36: 1:    {
36: 1:      'answer': '0',
36: 1:      'question': '1',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': '4',
36: 1:      'question': '2',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': '22',
36: 1:      'question': '3',
36: 1:      'valid': true
36: 1:    }
36: 1:  ],
36: 1:  'level': 2,
36: 1:  'nextQuestion': '4',
36: 1:  'questions': [
36: 1:    '1',
36: 1:    '2',
36: 1:    '3',
36: 1:    '4'
36: 1:  ]
36: 1:}
36: 1:Scores: 741
36: 1:Answer: message('['0', '4', '22', '70']')
36: 1:Fire Event: PassTest{complexity=10, testCount=25}
------------------------------------------
37: 1:BoardData {
37: 1:  'description': 'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.',
37: 1:  'expectedAnswer': '170',
37: 1:  'history': [
37: 1:    {
37: 1:      'answer': '0',
37: 1:      'question': '1',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': '4',
37: 1:      'question': '2',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': '22',
37: 1:      'question': '3',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': '70',
37: 1:      'question': '4',
37: 1:      'valid': true
37: 1:    }
37: 1:  ],
37: 1:  'level': 2,
37: 1:  'nextQuestion': '5',
37: 1:  'questions': [
37: 1:    '1',
37: 1:    '2',
37: 1:    '3',
37: 1:    '4',
37: 1:    '5'
37: 1:  ]
37: 1:}
37: 1:Scores: 745
37: 1:Answer: message('['0', '4', '22', '70', '170']')
37: 1:Fire Event: PassTest{complexity=10, testCount=25}
------------------------------------------
38: 1:BoardData {
38: 1:  'description': 'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.',
38: 1:  'expectedAnswer': '350',
38: 1:  'history': [
38: 1:    {
38: 1:      'answer': '0',
38: 1:      'question': '1',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': '4',
38: 1:      'question': '2',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': '22',
38: 1:      'question': '3',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': '70',
38: 1:      'question': '4',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': '170',
38: 1:      'question': '5',
38: 1:      'valid': true
38: 1:    }
38: 1:  ],
38: 1:  'level': 2,
38: 1:  'nextQuestion': '6',
38: 1:  'questions': [
38: 1:    '1',
38: 1:    '2',
38: 1:    '3',
38: 1:    '4',
38: 1:    '5',
38: 1:    '6'
38: 1:  ]
38: 1:}
38: 1:Scores: 749
38: 1:Answer: message('['0', '4', '22', '70', '170', '350']')
38: 1:Fire Event: PassTest{complexity=10, testCount=25}
------------------------------------------
39: 1:BoardData {
39: 1:  'description': 'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.',
39: 1:  'expectedAnswer': '644',
39: 1:  'history': [
39: 1:    {
39: 1:      'answer': '0',
39: 1:      'question': '1',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': '4',
39: 1:      'question': '2',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': '22',
39: 1:      'question': '3',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': '70',
39: 1:      'question': '4',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': '170',
39: 1:      'question': '5',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': '350',
39: 1:      'question': '6',
39: 1:      'valid': true
39: 1:    }
39: 1:  ],
39: 1:  'level': 2,
39: 1:  'nextQuestion': '7',
39: 1:  'questions': [
39: 1:    '1',
39: 1:    '2',
39: 1:    '3',
39: 1:    '4',
39: 1:    '5',
39: 1:    '6',
39: 1:    '7'
39: 1:  ]
39: 1:}
39: 1:Scores: 753
39: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644']')
39: 1:Fire Event: PassTest{complexity=10, testCount=25}
------------------------------------------
40: 1:BoardData {
40: 1:  'description': 'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.',
40: 1:  'expectedAnswer': '1092',
40: 1:  'history': [
40: 1:    {
40: 1:      'answer': '0',
40: 1:      'question': '1',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': '4',
40: 1:      'question': '2',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': '22',
40: 1:      'question': '3',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': '70',
40: 1:      'question': '4',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': '170',
40: 1:      'question': '5',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': '350',
40: 1:      'question': '6',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': '644',
40: 1:      'question': '7',
40: 1:      'valid': true
40: 1:    }
40: 1:  ],
40: 1:  'level': 2,
40: 1:  'nextQuestion': '8',
40: 1:  'questions': [
40: 1:    '1',
40: 1:    '2',
40: 1:    '3',
40: 1:    '4',
40: 1:    '5',
40: 1:    '6',
40: 1:    '7',
40: 1:    '8'
40: 1:  ]
40: 1:}
40: 1:Scores: 757
40: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092']')
40: 1:Fire Event: PassTest{complexity=10, testCount=25}
------------------------------------------
41: 1:BoardData {
41: 1:  'description': 'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.',
41: 1:  'expectedAnswer': '1740',
41: 1:  'history': [
41: 1:    {
41: 1:      'answer': '0',
41: 1:      'question': '1',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': '4',
41: 1:      'question': '2',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': '22',
41: 1:      'question': '3',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': '70',
41: 1:      'question': '4',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': '170',
41: 1:      'question': '5',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': '350',
41: 1:      'question': '6',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': '644',
41: 1:      'question': '7',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': '1092',
41: 1:      'question': '8',
41: 1:      'valid': true
41: 1:    }
41: 1:  ],
41: 1:  'level': 2,
41: 1:  'nextQuestion': '9',
41: 1:  'questions': [
41: 1:    '1',
41: 1:    '2',
41: 1:    '3',
41: 1:    '4',
41: 1:    '5',
41: 1:    '6',
41: 1:    '7',
41: 1:    '8',
41: 1:    '9'
41: 1:  ]
41: 1:}
41: 1:Scores: 761
41: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740']')
41: 1:Fire Event: PassTest{complexity=10, testCount=25}
------------------------------------------
42: 1:BoardData {
42: 1:  'description': 'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.',
42: 1:  'expectedAnswer': '2640',
42: 1:  'history': [
42: 1:    {
42: 1:      'answer': '0',
42: 1:      'question': '1',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': '4',
42: 1:      'question': '2',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': '22',
42: 1:      'question': '3',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': '70',
42: 1:      'question': '4',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': '170',
42: 1:      'question': '5',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': '350',
42: 1:      'question': '6',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': '644',
42: 1:      'question': '7',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': '1092',
42: 1:      'question': '8',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': '1740',
42: 1:      'question': '9',
42: 1:      'valid': true
42: 1:    }
42: 1:  ],
42: 1:  'level': 2,
42: 1:  'nextQuestion': '10',
42: 1:  'questions': [
42: 1:    '1',
42: 1:    '2',
42: 1:    '3',
42: 1:    '4',
42: 1:    '5',
42: 1:    '6',
42: 1:    '7',
42: 1:    '8',
42: 1:    '9',
42: 1:    '10'
42: 1:  ]
42: 1:}
42: 1:Scores: 765
42: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640']')
42: 1:Fire Event: PassTest{complexity=10, testCount=25}
------------------------------------------
43: 1:BoardData {
43: 1:  'description': 'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.',
43: 1:  'expectedAnswer': '3850',
43: 1:  'history': [
43: 1:    {
43: 1:      'answer': '0',
43: 1:      'question': '1',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': '4',
43: 1:      'question': '2',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': '22',
43: 1:      'question': '3',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': '70',
43: 1:      'question': '4',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': '170',
43: 1:      'question': '5',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': '350',
43: 1:      'question': '6',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': '644',
43: 1:      'question': '7',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': '1092',
43: 1:      'question': '8',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': '1740',
43: 1:      'question': '9',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': '2640',
43: 1:      'question': '10',
43: 1:      'valid': true
43: 1:    }
43: 1:  ],
43: 1:  'level': 2,
43: 1:  'nextQuestion': '11',
43: 1:  'questions': [
43: 1:    '1',
43: 1:    '2',
43: 1:    '3',
43: 1:    '4',
43: 1:    '5',
43: 1:    '6',
43: 1:    '7',
43: 1:    '8',
43: 1:    '9',
43: 1:    '10',
43: 1:    '11'
43: 1:  ]
43: 1:}
43: 1:Scores: 769
43: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850']')
43: 1:Fire Event: PassTest{complexity=10, testCount=25}
------------------------------------------
44: 1:BoardData {
44: 1:  'description': 'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.',
44: 1:  'expectedAnswer': '5434',
44: 1:  'history': [
44: 1:    {
44: 1:      'answer': '0',
44: 1:      'question': '1',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': '4',
44: 1:      'question': '2',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': '22',
44: 1:      'question': '3',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': '70',
44: 1:      'question': '4',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': '170',
44: 1:      'question': '5',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': '350',
44: 1:      'question': '6',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': '644',
44: 1:      'question': '7',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': '1092',
44: 1:      'question': '8',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': '1740',
44: 1:      'question': '9',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': '2640',
44: 1:      'question': '10',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': '3850',
44: 1:      'question': '11',
44: 1:      'valid': true
44: 1:    }
44: 1:  ],
44: 1:  'level': 2,
44: 1:  'nextQuestion': '12',
44: 1:  'questions': [
44: 1:    '1',
44: 1:    '2',
44: 1:    '3',
44: 1:    '4',
44: 1:    '5',
44: 1:    '6',
44: 1:    '7',
44: 1:    '8',
44: 1:    '9',
44: 1:    '10',
44: 1:    '11',
44: 1:    '12'
44: 1:  ]
44: 1:}
44: 1:Scores: 773
44: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434']')
44: 1:Fire Event: PassTest{complexity=10, testCount=25}
------------------------------------------
45: 1:BoardData {
45: 1:  'description': 'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.',
45: 1:  'expectedAnswer': '7462',
45: 1:  'history': [
45: 1:    {
45: 1:      'answer': '0',
45: 1:      'question': '1',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': '4',
45: 1:      'question': '2',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': '22',
45: 1:      'question': '3',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': '70',
45: 1:      'question': '4',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': '170',
45: 1:      'question': '5',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': '350',
45: 1:      'question': '6',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': '644',
45: 1:      'question': '7',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': '1092',
45: 1:      'question': '8',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': '1740',
45: 1:      'question': '9',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': '2640',
45: 1:      'question': '10',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': '3850',
45: 1:      'question': '11',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': '5434',
45: 1:      'question': '12',
45: 1:      'valid': true
45: 1:    }
45: 1:  ],
45: 1:  'level': 2,
45: 1:  'nextQuestion': '13',
45: 1:  'questions': [
45: 1:    '1',
45: 1:    '2',
45: 1:    '3',
45: 1:    '4',
45: 1:    '5',
45: 1:    '6',
45: 1:    '7',
45: 1:    '8',
45: 1:    '9',
45: 1:    '10',
45: 1:    '11',
45: 1:    '12',
45: 1:    '13'
45: 1:  ]
45: 1:}
45: 1:Scores: 777
45: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462']')
45: 1:Fire Event: PassTest{complexity=10, testCount=25}
------------------------------------------
46: 1:BoardData {
46: 1:  'description': 'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.',
46: 1:  'expectedAnswer': '10010',
46: 1:  'history': [
46: 1:    {
46: 1:      'answer': '0',
46: 1:      'question': '1',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': '4',
46: 1:      'question': '2',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': '22',
46: 1:      'question': '3',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': '70',
46: 1:      'question': '4',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': '170',
46: 1:      'question': '5',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': '350',
46: 1:      'question': '6',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': '644',
46: 1:      'question': '7',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': '1092',
46: 1:      'question': '8',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': '1740',
46: 1:      'question': '9',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': '2640',
46: 1:      'question': '10',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': '3850',
46: 1:      'question': '11',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': '5434',
46: 1:      'question': '12',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': '7462',
46: 1:      'question': '13',
46: 1:      'valid': true
46: 1:    }
46: 1:  ],
46: 1:  'level': 2,
46: 1:  'nextQuestion': '14',
46: 1:  'questions': [
46: 1:    '1',
46: 1:    '2',
46: 1:    '3',
46: 1:    '4',
46: 1:    '5',
46: 1:    '6',
46: 1:    '7',
46: 1:    '8',
46: 1:    '9',
46: 1:    '10',
46: 1:    '11',
46: 1:    '12',
46: 1:    '13',
46: 1:    '14'
46: 1:  ]
46: 1:}
46: 1:Scores: 781
46: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010']')
46: 1:Fire Event: PassTest{complexity=10, testCount=25}
------------------------------------------
47: 1:BoardData {
47: 1:  'description': 'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.',
47: 1:  'expectedAnswer': '13160',
47: 1:  'history': [
47: 1:    {
47: 1:      'answer': '0',
47: 1:      'question': '1',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': '4',
47: 1:      'question': '2',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': '22',
47: 1:      'question': '3',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': '70',
47: 1:      'question': '4',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': '170',
47: 1:      'question': '5',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': '350',
47: 1:      'question': '6',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': '644',
47: 1:      'question': '7',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': '1092',
47: 1:      'question': '8',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': '1740',
47: 1:      'question': '9',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': '2640',
47: 1:      'question': '10',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': '3850',
47: 1:      'question': '11',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': '5434',
47: 1:      'question': '12',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': '7462',
47: 1:      'question': '13',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': '10010',
47: 1:      'question': '14',
47: 1:      'valid': true
47: 1:    }
47: 1:  ],
47: 1:  'level': 2,
47: 1:  'nextQuestion': '15',
47: 1:  'questions': [
47: 1:    '1',
47: 1:    '2',
47: 1:    '3',
47: 1:    '4',
47: 1:    '5',
47: 1:    '6',
47: 1:    '7',
47: 1:    '8',
47: 1:    '9',
47: 1:    '10',
47: 1:    '11',
47: 1:    '12',
47: 1:    '13',
47: 1:    '14',
47: 1:    '15'
47: 1:  ]
47: 1:}
47: 1:Scores: 785
47: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160']')
47: 1:Fire Event: PassTest{complexity=10, testCount=25}
------------------------------------------
48: 1:BoardData {
48: 1:  'description': 'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.',
48: 1:  'expectedAnswer': '17000',
48: 1:  'history': [
48: 1:    {
48: 1:      'answer': '0',
48: 1:      'question': '1',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': '4',
48: 1:      'question': '2',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': '22',
48: 1:      'question': '3',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': '70',
48: 1:      'question': '4',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': '170',
48: 1:      'question': '5',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': '350',
48: 1:      'question': '6',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': '644',
48: 1:      'question': '7',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': '1092',
48: 1:      'question': '8',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': '1740',
48: 1:      'question': '9',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': '2640',
48: 1:      'question': '10',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': '3850',
48: 1:      'question': '11',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': '5434',
48: 1:      'question': '12',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': '7462',
48: 1:      'question': '13',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': '10010',
48: 1:      'question': '14',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': '13160',
48: 1:      'question': '15',
48: 1:      'valid': true
48: 1:    }
48: 1:  ],
48: 1:  'level': 2,
48: 1:  'nextQuestion': '16',
48: 1:  'questions': [
48: 1:    '1',
48: 1:    '2',
48: 1:    '3',
48: 1:    '4',
48: 1:    '5',
48: 1:    '6',
48: 1:    '7',
48: 1:    '8',
48: 1:    '9',
48: 1:    '10',
48: 1:    '11',
48: 1:    '12',
48: 1:    '13',
48: 1:    '14',
48: 1:    '15',
48: 1:    '16'
48: 1:  ]
48: 1:}
48: 1:Scores: 789
48: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000']')
48: 1:Fire Event: PassTest{complexity=10, testCount=25}
------------------------------------------
49: 1:BoardData {
49: 1:  'description': 'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.',
49: 1:  'expectedAnswer': '21624',
49: 1:  'history': [
49: 1:    {
49: 1:      'answer': '0',
49: 1:      'question': '1',
49: 1:      'valid': true
49: 1:    },
49: 1:    {
49: 1:      'answer': '4',
49: 1:      'question': '2',
49: 1:      'valid': true
49: 1:    },
49: 1:    {
49: 1:      'answer': '22',
49: 1:      'question': '3',
49: 1:      'valid': true
49: 1:    },
49: 1:    {
49: 1:      'answer': '70',
49: 1:      'question': '4',
49: 1:      'valid': true
49: 1:    },
49: 1:    {
49: 1:      'answer': '170',
49: 1:      'question': '5',
49: 1:      'valid': true
49: 1:    },
49: 1:    {
49: 1:      'answer': '350',
49: 1:      'question': '6',
49: 1:      'valid': true
49: 1:    },
49: 1:    {
49: 1:      'answer': '644',
49: 1:      'question': '7',
49: 1:      'valid': true
49: 1:    },
49: 1:    {
49: 1:      'answer': '1092',
49: 1:      'question': '8',
49: 1:      'valid': true
49: 1:    },
49: 1:    {
49: 1:      'answer': '1740',
49: 1:      'question': '9',
49: 1:      'valid': true
49: 1:    },
49: 1:    {
49: 1:      'answer': '2640',
49: 1:      'question': '10',
49: 1:      'valid': true
49: 1:    },
49: 1:    {
49: 1:      'answer': '3850',
49: 1:      'question': '11',
49: 1:      'valid': true
49: 1:    },
49: 1:    {
49: 1:      'answer': '5434',
49: 1:      'question': '12',
49: 1:      'valid': true
49: 1:    },
49: 1:    {
49: 1:      'answer': '7462',
49: 1:      'question': '13',
49: 1:      'valid': true
49: 1:    },
49: 1:    {
49: 1:      'answer': '10010',
49: 1:      'question': '14',
49: 1:      'valid': true
49: 1:    },
49: 1:    {
49: 1:      'answer': '13160',
49: 1:      'question': '15',
49: 1:      'valid': true
49: 1:    },
49: 1:    {
49: 1:      'answer': '17000',
49: 1:      'question': '16',
49: 1:      'valid': true
49: 1:    }
49: 1:  ],
49: 1:  'level': 2,
49: 1:  'nextQuestion': '17',
49: 1:  'questions': [
49: 1:    '1',
49: 1:    '2',
49: 1:    '3',
49: 1:    '4',
49: 1:    '5',
49: 1:    '6',
49: 1:    '7',
49: 1:    '8',
49: 1:    '9',
49: 1:    '10',
49: 1:    '11',
49: 1:    '12',
49: 1:    '13',
49: 1:    '14',
49: 1:    '15',
49: 1:    '16',
49: 1:    '17'
49: 1:  ]
49: 1:}
49: 1:Scores: 793
49: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000', '21624']')
49: 1:Fire Event: PassTest{complexity=10, testCount=25}
------------------------------------------
50: 1:BoardData {
50: 1:  'description': 'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.',
50: 1:  'expectedAnswer': '27132',
50: 1:  'history': [
50: 1:    {
50: 1:      'answer': '0',
50: 1:      'question': '1',
50: 1:      'valid': true
50: 1:    },
50: 1:    {
50: 1:      'answer': '4',
50: 1:      'question': '2',
50: 1:      'valid': true
50: 1:    },
50: 1:    {
50: 1:      'answer': '22',
50: 1:      'question': '3',
50: 1:      'valid': true
50: 1:    },
50: 1:    {
50: 1:      'answer': '70',
50: 1:      'question': '4',
50: 1:      'valid': true
50: 1:    },
50: 1:    {
50: 1:      'answer': '170',
50: 1:      'question': '5',
50: 1:      'valid': true
50: 1:    },
50: 1:    {
50: 1:      'answer': '350',
50: 1:      'question': '6',
50: 1:      'valid': true
50: 1:    },
50: 1:    {
50: 1:      'answer': '644',
50: 1:      'question': '7',
50: 1:      'valid': true
50: 1:    },
50: 1:    {
50: 1:      'answer': '1092',
50: 1:      'question': '8',
50: 1:      'valid': true
50: 1:    },
50: 1:    {
50: 1:      'answer': '1740',
50: 1:      'question': '9',
50: 1:      'valid': true
50: 1:    },
50: 1:    {
50: 1:      'answer': '2640',
50: 1:      'question': '10',
50: 1:      'valid': true
50: 1:    },
50: 1:    {
50: 1:      'answer': '3850',
50: 1:      'question': '11',
50: 1:      'valid': true
50: 1:    },
50: 1:    {
50: 1:      'answer': '5434',
50: 1:      'question': '12',
50: 1:      'valid': true
50: 1:    },
50: 1:    {
50: 1:      'answer': '7462',
50: 1:      'question': '13',
50: 1:      'valid': true
50: 1:    },
50: 1:    {
50: 1:      'answer': '10010',
50: 1:      'question': '14',
50: 1:      'valid': true
50: 1:    },
50: 1:    {
50: 1:      'answer': '13160',
50: 1:      'question': '15',
50: 1:      'valid': true
50: 1:    },
50: 1:    {
50: 1:      'answer': '17000',
50: 1:      'question': '16',
50: 1:      'valid': true
50: 1:    },
50: 1:    {
50: 1:      'answer': '21624',
50: 1:      'question': '17',
50: 1:      'valid': true
50: 1:    }
50: 1:  ],
50: 1:  'level': 2,
50: 1:  'nextQuestion': '18',
50: 1:  'questions': [
50: 1:    '1',
50: 1:    '2',
50: 1:    '3',
50: 1:    '4',
50: 1:    '5',
50: 1:    '6',
50: 1:    '7',
50: 1:    '8',
50: 1:    '9',
50: 1:    '10',
50: 1:    '11',
50: 1:    '12',
50: 1:    '13',
50: 1:    '14',
50: 1:    '15',
50: 1:    '16',
50: 1:    '17',
50: 1:    '18'
50: 1:  ]
50: 1:}
50: 1:Scores: 797
50: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000', '21624', '27132']')
50: 1:Fire Event: PassTest{complexity=10, testCount=25}
------------------------------------------
51: 1:BoardData {
51: 1:  'description': 'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.',
51: 1:  'expectedAnswer': '33630',
51: 1:  'history': [
51: 1:    {
51: 1:      'answer': '0',
51: 1:      'question': '1',
51: 1:      'valid': true
51: 1:    },
51: 1:    {
51: 1:      'answer': '4',
51: 1:      'question': '2',
51: 1:      'valid': true
51: 1:    },
51: 1:    {
51: 1:      'answer': '22',
51: 1:      'question': '3',
51: 1:      'valid': true
51: 1:    },
51: 1:    {
51: 1:      'answer': '70',
51: 1:      'question': '4',
51: 1:      'valid': true
51: 1:    },
51: 1:    {
51: 1:      'answer': '170',
51: 1:      'question': '5',
51: 1:      'valid': true
51: 1:    },
51: 1:    {
51: 1:      'answer': '350',
51: 1:      'question': '6',
51: 1:      'valid': true
51: 1:    },
51: 1:    {
51: 1:      'answer': '644',
51: 1:      'question': '7',
51: 1:      'valid': true
51: 1:    },
51: 1:    {
51: 1:      'answer': '1092',
51: 1:      'question': '8',
51: 1:      'valid': true
51: 1:    },
51: 1:    {
51: 1:      'answer': '1740',
51: 1:      'question': '9',
51: 1:      'valid': true
51: 1:    },
51: 1:    {
51: 1:      'answer': '2640',
51: 1:      'question': '10',
51: 1:      'valid': true
51: 1:    },
51: 1:    {
51: 1:      'answer': '3850',
51: 1:      'question': '11',
51: 1:      'valid': true
51: 1:    },
51: 1:    {
51: 1:      'answer': '5434',
51: 1:      'question': '12',
51: 1:      'valid': true
51: 1:    },
51: 1:    {
51: 1:      'answer': '7462',
51: 1:      'question': '13',
51: 1:      'valid': true
51: 1:    },
51: 1:    {
51: 1:      'answer': '10010',
51: 1:      'question': '14',
51: 1:      'valid': true
51: 1:    },
51: 1:    {
51: 1:      'answer': '13160',
51: 1:      'question': '15',
51: 1:      'valid': true
51: 1:    },
51: 1:    {
51: 1:      'answer': '17000',
51: 1:      'question': '16',
51: 1:      'valid': true
51: 1:    },
51: 1:    {
51: 1:      'answer': '21624',
51: 1:      'question': '17',
51: 1:      'valid': true
51: 1:    },
51: 1:    {
51: 1:      'answer': '27132',
51: 1:      'question': '18',
51: 1:      'valid': true
51: 1:    }
51: 1:  ],
51: 1:  'level': 2,
51: 1:  'nextQuestion': '19',
51: 1:  'questions': [
51: 1:    '1',
51: 1:    '2',
51: 1:    '3',
51: 1:    '4',
51: 1:    '5',
51: 1:    '6',
51: 1:    '7',
51: 1:    '8',
51: 1:    '9',
51: 1:    '10',
51: 1:    '11',
51: 1:    '12',
51: 1:    '13',
51: 1:    '14',
51: 1:    '15',
51: 1:    '16',
51: 1:    '17',
51: 1:    '18',
51: 1:    '19'
51: 1:  ]
51: 1:}
51: 1:Scores: 801
51: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000', '21624', '27132', '33630']')
51: 1:Fire Event: PassTest{complexity=10, testCount=25}
------------------------------------------
52: 1:BoardData {
52: 1:  'description': 'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.',
52: 1:  'expectedAnswer': '41230',
52: 1:  'history': [
52: 1:    {
52: 1:      'answer': '0',
52: 1:      'question': '1',
52: 1:      'valid': true
52: 1:    },
52: 1:    {
52: 1:      'answer': '4',
52: 1:      'question': '2',
52: 1:      'valid': true
52: 1:    },
52: 1:    {
52: 1:      'answer': '22',
52: 1:      'question': '3',
52: 1:      'valid': true
52: 1:    },
52: 1:    {
52: 1:      'answer': '70',
52: 1:      'question': '4',
52: 1:      'valid': true
52: 1:    },
52: 1:    {
52: 1:      'answer': '170',
52: 1:      'question': '5',
52: 1:      'valid': true
52: 1:    },
52: 1:    {
52: 1:      'answer': '350',
52: 1:      'question': '6',
52: 1:      'valid': true
52: 1:    },
52: 1:    {
52: 1:      'answer': '644',
52: 1:      'question': '7',
52: 1:      'valid': true
52: 1:    },
52: 1:    {
52: 1:      'answer': '1092',
52: 1:      'question': '8',
52: 1:      'valid': true
52: 1:    },
52: 1:    {
52: 1:      'answer': '1740',
52: 1:      'question': '9',
52: 1:      'valid': true
52: 1:    },
52: 1:    {
52: 1:      'answer': '2640',
52: 1:      'question': '10',
52: 1:      'valid': true
52: 1:    },
52: 1:    {
52: 1:      'answer': '3850',
52: 1:      'question': '11',
52: 1:      'valid': true
52: 1:    },
52: 1:    {
52: 1:      'answer': '5434',
52: 1:      'question': '12',
52: 1:      'valid': true
52: 1:    },
52: 1:    {
52: 1:      'answer': '7462',
52: 1:      'question': '13',
52: 1:      'valid': true
52: 1:    },
52: 1:    {
52: 1:      'answer': '10010',
52: 1:      'question': '14',
52: 1:      'valid': true
52: 1:    },
52: 1:    {
52: 1:      'answer': '13160',
52: 1:      'question': '15',
52: 1:      'valid': true
52: 1:    },
52: 1:    {
52: 1:      'answer': '17000',
52: 1:      'question': '16',
52: 1:      'valid': true
52: 1:    },
52: 1:    {
52: 1:      'answer': '21624',
52: 1:      'question': '17',
52: 1:      'valid': true
52: 1:    },
52: 1:    {
52: 1:      'answer': '27132',
52: 1:      'question': '18',
52: 1:      'valid': true
52: 1:    },
52: 1:    {
52: 1:      'answer': '33630',
52: 1:      'question': '19',
52: 1:      'valid': true
52: 1:    }
52: 1:  ],
52: 1:  'level': 2,
52: 1:  'nextQuestion': '20',
52: 1:  'questions': [
52: 1:    '1',
52: 1:    '2',
52: 1:    '3',
52: 1:    '4',
52: 1:    '5',
52: 1:    '6',
52: 1:    '7',
52: 1:    '8',
52: 1:    '9',
52: 1:    '10',
52: 1:    '11',
52: 1:    '12',
52: 1:    '13',
52: 1:    '14',
52: 1:    '15',
52: 1:    '16',
52: 1:    '17',
52: 1:    '18',
52: 1:    '19',
52: 1:    '20'
52: 1:  ]
52: 1:}
52: 1:Scores: 805
52: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000', '21624', '27132', '33630', '41230']')
52: 1:Fire Event: PassTest{complexity=10, testCount=25}
------------------------------------------
53: 1:BoardData {
53: 1:  'description': 'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.',
53: 1:  'expectedAnswer': '50050',
53: 1:  'history': [
53: 1:    {
53: 1:      'answer': '0',
53: 1:      'question': '1',
53: 1:      'valid': true
53: 1:    },
53: 1:    {
53: 1:      'answer': '4',
53: 1:      'question': '2',
53: 1:      'valid': true
53: 1:    },
53: 1:    {
53: 1:      'answer': '22',
53: 1:      'question': '3',
53: 1:      'valid': true
53: 1:    },
53: 1:    {
53: 1:      'answer': '70',
53: 1:      'question': '4',
53: 1:      'valid': true
53: 1:    },
53: 1:    {
53: 1:      'answer': '170',
53: 1:      'question': '5',
53: 1:      'valid': true
53: 1:    },
53: 1:    {
53: 1:      'answer': '350',
53: 1:      'question': '6',
53: 1:      'valid': true
53: 1:    },
53: 1:    {
53: 1:      'answer': '644',
53: 1:      'question': '7',
53: 1:      'valid': true
53: 1:    },
53: 1:    {
53: 1:      'answer': '1092',
53: 1:      'question': '8',
53: 1:      'valid': true
53: 1:    },
53: 1:    {
53: 1:      'answer': '1740',
53: 1:      'question': '9',
53: 1:      'valid': true
53: 1:    },
53: 1:    {
53: 1:      'answer': '2640',
53: 1:      'question': '10',
53: 1:      'valid': true
53: 1:    },
53: 1:    {
53: 1:      'answer': '3850',
53: 1:      'question': '11',
53: 1:      'valid': true
53: 1:    },
53: 1:    {
53: 1:      'answer': '5434',
53: 1:      'question': '12',
53: 1:      'valid': true
53: 1:    },
53: 1:    {
53: 1:      'answer': '7462',
53: 1:      'question': '13',
53: 1:      'valid': true
53: 1:    },
53: 1:    {
53: 1:      'answer': '10010',
53: 1:      'question': '14',
53: 1:      'valid': true
53: 1:    },
53: 1:    {
53: 1:      'answer': '13160',
53: 1:      'question': '15',
53: 1:      'valid': true
53: 1:    },
53: 1:    {
53: 1:      'answer': '17000',
53: 1:      'question': '16',
53: 1:      'valid': true
53: 1:    },
53: 1:    {
53: 1:      'answer': '21624',
53: 1:      'question': '17',
53: 1:      'valid': true
53: 1:    },
53: 1:    {
53: 1:      'answer': '27132',
53: 1:      'question': '18',
53: 1:      'valid': true
53: 1:    },
53: 1:    {
53: 1:      'answer': '33630',
53: 1:      'question': '19',
53: 1:      'valid': true
53: 1:    },
53: 1:    {
53: 1:      'answer': '41230',
53: 1:      'question': '20',
53: 1:      'valid': true
53: 1:    }
53: 1:  ],
53: 1:  'level': 2,
53: 1:  'nextQuestion': '21',
53: 1:  'questions': [
53: 1:    '1',
53: 1:    '2',
53: 1:    '3',
53: 1:    '4',
53: 1:    '5',
53: 1:    '6',
53: 1:    '7',
53: 1:    '8',
53: 1:    '9',
53: 1:    '10',
53: 1:    '11',
53: 1:    '12',
53: 1:    '13',
53: 1:    '14',
53: 1:    '15',
53: 1:    '16',
53: 1:    '17',
53: 1:    '18',
53: 1:    '19',
53: 1:    '20',
53: 1:    '21'
53: 1:  ]
53: 1:}
53: 1:Scores: 809
53: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000', '21624', '27132', '33630', '41230', '50050']')
53: 1:Fire Event: PassTest{complexity=10, testCount=25}
------------------------------------------
54: 1:BoardData {
54: 1:  'description': 'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.',
54: 1:  'expectedAnswer': '60214',
54: 1:  'history': [
54: 1:    {
54: 1:      'answer': '0',
54: 1:      'question': '1',
54: 1:      'valid': true
54: 1:    },
54: 1:    {
54: 1:      'answer': '4',
54: 1:      'question': '2',
54: 1:      'valid': true
54: 1:    },
54: 1:    {
54: 1:      'answer': '22',
54: 1:      'question': '3',
54: 1:      'valid': true
54: 1:    },
54: 1:    {
54: 1:      'answer': '70',
54: 1:      'question': '4',
54: 1:      'valid': true
54: 1:    },
54: 1:    {
54: 1:      'answer': '170',
54: 1:      'question': '5',
54: 1:      'valid': true
54: 1:    },
54: 1:    {
54: 1:      'answer': '350',
54: 1:      'question': '6',
54: 1:      'valid': true
54: 1:    },
54: 1:    {
54: 1:      'answer': '644',
54: 1:      'question': '7',
54: 1:      'valid': true
54: 1:    },
54: 1:    {
54: 1:      'answer': '1092',
54: 1:      'question': '8',
54: 1:      'valid': true
54: 1:    },
54: 1:    {
54: 1:      'answer': '1740',
54: 1:      'question': '9',
54: 1:      'valid': true
54: 1:    },
54: 1:    {
54: 1:      'answer': '2640',
54: 1:      'question': '10',
54: 1:      'valid': true
54: 1:    },
54: 1:    {
54: 1:      'answer': '3850',
54: 1:      'question': '11',
54: 1:      'valid': true
54: 1:    },
54: 1:    {
54: 1:      'answer': '5434',
54: 1:      'question': '12',
54: 1:      'valid': true
54: 1:    },
54: 1:    {
54: 1:      'answer': '7462',
54: 1:      'question': '13',
54: 1:      'valid': true
54: 1:    },
54: 1:    {
54: 1:      'answer': '10010',
54: 1:      'question': '14',
54: 1:      'valid': true
54: 1:    },
54: 1:    {
54: 1:      'answer': '13160',
54: 1:      'question': '15',
54: 1:      'valid': true
54: 1:    },
54: 1:    {
54: 1:      'answer': '17000',
54: 1:      'question': '16',
54: 1:      'valid': true
54: 1:    },
54: 1:    {
54: 1:      'answer': '21624',
54: 1:      'question': '17',
54: 1:      'valid': true
54: 1:    },
54: 1:    {
54: 1:      'answer': '27132',
54: 1:      'question': '18',
54: 1:      'valid': true
54: 1:    },
54: 1:    {
54: 1:      'answer': '33630',
54: 1:      'question': '19',
54: 1:      'valid': true
54: 1:    },
54: 1:    {
54: 1:      'answer': '41230',
54: 1:      'question': '20',
54: 1:      'valid': true
54: 1:    },
54: 1:    {
54: 1:      'answer': '50050',
54: 1:      'question': '21',
54: 1:      'valid': true
54: 1:    }
54: 1:  ],
54: 1:  'level': 2,
54: 1:  'nextQuestion': '22',
54: 1:  'questions': [
54: 1:    '1',
54: 1:    '2',
54: 1:    '3',
54: 1:    '4',
54: 1:    '5',
54: 1:    '6',
54: 1:    '7',
54: 1:    '8',
54: 1:    '9',
54: 1:    '10',
54: 1:    '11',
54: 1:    '12',
54: 1:    '13',
54: 1:    '14',
54: 1:    '15',
54: 1:    '16',
54: 1:    '17',
54: 1:    '18',
54: 1:    '19',
54: 1:    '20',
54: 1:    '21',
54: 1:    '22'
54: 1:  ]
54: 1:}
54: 1:Scores: 813
54: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000', '21624', '27132', '33630', '41230', '50050', '60214']')
54: 1:Fire Event: PassTest{complexity=10, testCount=25}
------------------------------------------
55: 1:BoardData {
55: 1:  'description': 'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.',
55: 1:  'expectedAnswer': '71852',
55: 1:  'history': [
55: 1:    {
55: 1:      'answer': '0',
55: 1:      'question': '1',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': '4',
55: 1:      'question': '2',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': '22',
55: 1:      'question': '3',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': '70',
55: 1:      'question': '4',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': '170',
55: 1:      'question': '5',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': '350',
55: 1:      'question': '6',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': '644',
55: 1:      'question': '7',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': '1092',
55: 1:      'question': '8',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': '1740',
55: 1:      'question': '9',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': '2640',
55: 1:      'question': '10',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': '3850',
55: 1:      'question': '11',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': '5434',
55: 1:      'question': '12',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': '7462',
55: 1:      'question': '13',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': '10010',
55: 1:      'question': '14',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': '13160',
55: 1:      'question': '15',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': '17000',
55: 1:      'question': '16',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': '21624',
55: 1:      'question': '17',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': '27132',
55: 1:      'question': '18',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': '33630',
55: 1:      'question': '19',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': '41230',
55: 1:      'question': '20',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': '50050',
55: 1:      'question': '21',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': '60214',
55: 1:      'question': '22',
55: 1:      'valid': true
55: 1:    }
55: 1:  ],
55: 1:  'level': 2,
55: 1:  'nextQuestion': '23',
55: 1:  'questions': [
55: 1:    '1',
55: 1:    '2',
55: 1:    '3',
55: 1:    '4',
55: 1:    '5',
55: 1:    '6',
55: 1:    '7',
55: 1:    '8',
55: 1:    '9',
55: 1:    '10',
55: 1:    '11',
55: 1:    '12',
55: 1:    '13',
55: 1:    '14',
55: 1:    '15',
55: 1:    '16',
55: 1:    '17',
55: 1:    '18',
55: 1:    '19',
55: 1:    '20',
55: 1:    '21',
55: 1:    '22',
55: 1:    '23'
55: 1:  ]
55: 1:}
55: 1:Scores: 817
55: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000', '21624', '27132', '33630', '41230', '50050', '60214', '71852']')
55: 1:Fire Event: PassTest{complexity=10, testCount=25}
------------------------------------------
56: 1:BoardData {
56: 1:  'description': 'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.',
56: 1:  'expectedAnswer': '85100',
56: 1:  'history': [
56: 1:    {
56: 1:      'answer': '0',
56: 1:      'question': '1',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': '4',
56: 1:      'question': '2',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': '22',
56: 1:      'question': '3',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': '70',
56: 1:      'question': '4',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': '170',
56: 1:      'question': '5',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': '350',
56: 1:      'question': '6',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': '644',
56: 1:      'question': '7',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': '1092',
56: 1:      'question': '8',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': '1740',
56: 1:      'question': '9',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': '2640',
56: 1:      'question': '10',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': '3850',
56: 1:      'question': '11',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': '5434',
56: 1:      'question': '12',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': '7462',
56: 1:      'question': '13',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': '10010',
56: 1:      'question': '14',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': '13160',
56: 1:      'question': '15',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': '17000',
56: 1:      'question': '16',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': '21624',
56: 1:      'question': '17',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': '27132',
56: 1:      'question': '18',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': '33630',
56: 1:      'question': '19',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': '41230',
56: 1:      'question': '20',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': '50050',
56: 1:      'question': '21',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': '60214',
56: 1:      'question': '22',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': '71852',
56: 1:      'question': '23',
56: 1:      'valid': true
56: 1:    }
56: 1:  ],
56: 1:  'level': 2,
56: 1:  'nextQuestion': '24',
56: 1:  'questions': [
56: 1:    '1',
56: 1:    '2',
56: 1:    '3',
56: 1:    '4',
56: 1:    '5',
56: 1:    '6',
56: 1:    '7',
56: 1:    '8',
56: 1:    '9',
56: 1:    '10',
56: 1:    '11',
56: 1:    '12',
56: 1:    '13',
56: 1:    '14',
56: 1:    '15',
56: 1:    '16',
56: 1:    '17',
56: 1:    '18',
56: 1:    '19',
56: 1:    '20',
56: 1:    '21',
56: 1:    '22',
56: 1:    '23',
56: 1:    '24'
56: 1:  ]
56: 1:}
56: 1:Scores: 821
56: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000', '21624', '27132', '33630', '41230', '50050', '60214', '71852', '85100']')
56: 1:Fire Event: PassTest{complexity=10, testCount=25}
------------------------------------------
57: 1:BoardData {
57: 1:  'description': 'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.',
57: 1:  'expectedAnswer': '100100',
57: 1:  'history': [
57: 1:    {
57: 1:      'answer': '0',
57: 1:      'question': '1',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': '4',
57: 1:      'question': '2',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': '22',
57: 1:      'question': '3',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': '70',
57: 1:      'question': '4',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': '170',
57: 1:      'question': '5',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': '350',
57: 1:      'question': '6',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': '644',
57: 1:      'question': '7',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': '1092',
57: 1:      'question': '8',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': '1740',
57: 1:      'question': '9',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': '2640',
57: 1:      'question': '10',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': '3850',
57: 1:      'question': '11',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': '5434',
57: 1:      'question': '12',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': '7462',
57: 1:      'question': '13',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': '10010',
57: 1:      'question': '14',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': '13160',
57: 1:      'question': '15',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': '17000',
57: 1:      'question': '16',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': '21624',
57: 1:      'question': '17',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': '27132',
57: 1:      'question': '18',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': '33630',
57: 1:      'question': '19',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': '41230',
57: 1:      'question': '20',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': '50050',
57: 1:      'question': '21',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': '60214',
57: 1:      'question': '22',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': '71852',
57: 1:      'question': '23',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': '85100',
57: 1:      'question': '24',
57: 1:      'valid': true
57: 1:    }
57: 1:  ],
57: 1:  'level': 2,
57: 1:  'nextQuestion': '25',
57: 1:  'questions': [
57: 1:    '1',
57: 1:    '2',
57: 1:    '3',
57: 1:    '4',
57: 1:    '5',
57: 1:    '6',
57: 1:    '7',
57: 1:    '8',
57: 1:    '9',
57: 1:    '10',
57: 1:    '11',
57: 1:    '12',
57: 1:    '13',
57: 1:    '14',
57: 1:    '15',
57: 1:    '16',
57: 1:    '17',
57: 1:    '18',
57: 1:    '19',
57: 1:    '20',
57: 1:    '21',
57: 1:    '22',
57: 1:    '23',
57: 1:    '24',
57: 1:    '25'
57: 1:  ]
57: 1:}
57: 1:Scores: 825
57: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000', '21624', '27132', '33630', '41230', '50050', '60214', '71852', '85100', '100100']')
57: 1:Fire Event: PassTest{complexity=10, testCount=25}
57: 1:Fire Event: NextAlgorithm{complexity=10, time=0}
------------------------------------------
58: 1:BoardData {
58: 1:  'description': 'Wait for next level. Please send 'message('StartNextLevel')' command.',
58: 1:  'history': [
58: 1:    {
58: 1:      'answer': '0',
58: 1:      'question': '1',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': '4',
58: 1:      'question': '2',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': '22',
58: 1:      'question': '3',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': '70',
58: 1:      'question': '4',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': '170',
58: 1:      'question': '5',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': '350',
58: 1:      'question': '6',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': '644',
58: 1:      'question': '7',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': '1092',
58: 1:      'question': '8',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': '1740',
58: 1:      'question': '9',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': '2640',
58: 1:      'question': '10',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': '3850',
58: 1:      'question': '11',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': '5434',
58: 1:      'question': '12',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': '7462',
58: 1:      'question': '13',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': '10010',
58: 1:      'question': '14',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': '13160',
58: 1:      'question': '15',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': '17000',
58: 1:      'question': '16',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': '21624',
58: 1:      'question': '17',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': '27132',
58: 1:      'question': '18',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': '33630',
58: 1:      'question': '19',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': '41230',
58: 1:      'question': '20',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': '50050',
58: 1:      'question': '21',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': '60214',
58: 1:      'question': '22',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': '71852',
58: 1:      'question': '23',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': '85100',
58: 1:      'question': '24',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': '100100',
58: 1:      'question': '25',
58: 1:      'valid': true
58: 1:    }
58: 1:  ],
58: 1:  'level': 2,
58: 1:  'questions': []
58: 1:}
58: 1:Scores: 2178
58: 1:Answer: message('StartNextLevel')
58: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
59: 1:BoardData {
59: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
59: 1:  'expectedAnswer': '1',
59: 1:  'history': [],
59: 1:  'level': 3,
59: 1:  'nextQuestion': '0',
59: 1:  'questions': ['0']
59: 1:}
59: 1:Scores: 2178
59: 1:Answer: message('['1']')
59: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
60: 1:BoardData {
60: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
60: 1:  'expectedAnswer': '0',
60: 1:  'history': [{
60: 1:    'answer': '1',
60: 1:    'question': '0',
60: 1:    'valid': true
60: 1:  }],
60: 1:  'level': 3,
60: 1:  'nextQuestion': '1',
60: 1:  'questions': [
60: 1:    '0',
60: 1:    '1'
60: 1:  ]
60: 1:}
60: 1:Scores: 2180
60: 1:Answer: message('['1', '0']')
60: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
61: 1:BoardData {
61: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
61: 1:  'expectedAnswer': '3',
61: 1:  'history': [
61: 1:    {
61: 1:      'answer': '1',
61: 1:      'question': '0',
61: 1:      'valid': true
61: 1:    },
61: 1:    {
61: 1:      'answer': '0',
61: 1:      'question': '1',
61: 1:      'valid': true
61: 1:    }
61: 1:  ],
61: 1:  'level': 3,
61: 1:  'nextQuestion': '2',
61: 1:  'questions': [
61: 1:    '0',
61: 1:    '1',
61: 1:    '2'
61: 1:  ]
61: 1:}
61: 1:Scores: 2182
61: 1:Answer: message('['1', '0', '3']')
61: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
62: 1:BoardData {
62: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
62: 1:  'expectedAnswer': '2',
62: 1:  'history': [
62: 1:    {
62: 1:      'answer': '1',
62: 1:      'question': '0',
62: 1:      'valid': true
62: 1:    },
62: 1:    {
62: 1:      'answer': '0',
62: 1:      'question': '1',
62: 1:      'valid': true
62: 1:    },
62: 1:    {
62: 1:      'answer': '3',
62: 1:      'question': '2',
62: 1:      'valid': true
62: 1:    }
62: 1:  ],
62: 1:  'level': 3,
62: 1:  'nextQuestion': '3',
62: 1:  'questions': [
62: 1:    '0',
62: 1:    '1',
62: 1:    '2',
62: 1:    '3'
62: 1:  ]
62: 1:}
62: 1:Scores: 2184
62: 1:Answer: message('['1', '0', '3', '2']')
62: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
63: 1:BoardData {
63: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
63: 1:  'expectedAnswer': '4',
63: 1:  'history': [
63: 1:    {
63: 1:      'answer': '1',
63: 1:      'question': '0',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': '0',
63: 1:      'question': '1',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': '3',
63: 1:      'question': '2',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': '2',
63: 1:      'question': '3',
63: 1:      'valid': true
63: 1:    }
63: 1:  ],
63: 1:  'level': 3,
63: 1:  'nextQuestion': '5',
63: 1:  'questions': [
63: 1:    '0',
63: 1:    '1',
63: 1:    '2',
63: 1:    '3',
63: 1:    '5'
63: 1:  ]
63: 1:}
63: 1:Scores: 2186
63: 1:Answer: message('['1', '0', '3', '2', '4']')
63: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
64: 1:BoardData {
64: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
64: 1:  'expectedAnswer': '6',
64: 1:  'history': [
64: 1:    {
64: 1:      'answer': '1',
64: 1:      'question': '0',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': '0',
64: 1:      'question': '1',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': '3',
64: 1:      'question': '2',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': '2',
64: 1:      'question': '3',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': '4',
64: 1:      'question': '5',
64: 1:      'valid': true
64: 1:    }
64: 1:  ],
64: 1:  'level': 3,
64: 1:  'nextQuestion': '7',
64: 1:  'questions': [
64: 1:    '0',
64: 1:    '1',
64: 1:    '2',
64: 1:    '3',
64: 1:    '5',
64: 1:    '7'
64: 1:  ]
64: 1:}
64: 1:Scores: 2188
64: 1:Answer: message('['1', '0', '3', '2', '4', '6']')
64: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
65: 1:BoardData {
65: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
65: 1:  'expectedAnswer': '8',
65: 1:  'history': [
65: 1:    {
65: 1:      'answer': '1',
65: 1:      'question': '0',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': '0',
65: 1:      'question': '1',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': '3',
65: 1:      'question': '2',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': '2',
65: 1:      'question': '3',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': '4',
65: 1:      'question': '5',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': '6',
65: 1:      'question': '7',
65: 1:      'valid': true
65: 1:    }
65: 1:  ],
65: 1:  'level': 3,
65: 1:  'nextQuestion': '9',
65: 1:  'questions': [
65: 1:    '0',
65: 1:    '1',
65: 1:    '2',
65: 1:    '3',
65: 1:    '5',
65: 1:    '7',
65: 1:    '9'
65: 1:  ]
65: 1:}
65: 1:Scores: 2190
65: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8']')
65: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
66: 1:BoardData {
66: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
66: 1:  'expectedAnswer': '10',
66: 1:  'history': [
66: 1:    {
66: 1:      'answer': '1',
66: 1:      'question': '0',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': '0',
66: 1:      'question': '1',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': '3',
66: 1:      'question': '2',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': '2',
66: 1:      'question': '3',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': '4',
66: 1:      'question': '5',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': '6',
66: 1:      'question': '7',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': '8',
66: 1:      'question': '9',
66: 1:      'valid': true
66: 1:    }
66: 1:  ],
66: 1:  'level': 3,
66: 1:  'nextQuestion': '11',
66: 1:  'questions': [
66: 1:    '0',
66: 1:    '1',
66: 1:    '2',
66: 1:    '3',
66: 1:    '5',
66: 1:    '7',
66: 1:    '9',
66: 1:    '11'
66: 1:  ]
66: 1:}
66: 1:Scores: 2192
66: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10']')
66: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
67: 1:BoardData {
67: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
67: 1:  'expectedAnswer': '15',
67: 1:  'history': [
67: 1:    {
67: 1:      'answer': '1',
67: 1:      'question': '0',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': '0',
67: 1:      'question': '1',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': '3',
67: 1:      'question': '2',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': '2',
67: 1:      'question': '3',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': '4',
67: 1:      'question': '5',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': '6',
67: 1:      'question': '7',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': '8',
67: 1:      'question': '9',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': '10',
67: 1:      'question': '11',
67: 1:      'valid': true
67: 1:    }
67: 1:  ],
67: 1:  'level': 3,
67: 1:  'nextQuestion': '14',
67: 1:  'questions': [
67: 1:    '0',
67: 1:    '1',
67: 1:    '2',
67: 1:    '3',
67: 1:    '5',
67: 1:    '7',
67: 1:    '9',
67: 1:    '11',
67: 1:    '14'
67: 1:  ]
67: 1:}
67: 1:Scores: 2194
67: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15']')
67: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
68: 1:BoardData {
68: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
68: 1:  'expectedAnswer': '16',
68: 1:  'history': [
68: 1:    {
68: 1:      'answer': '1',
68: 1:      'question': '0',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': '0',
68: 1:      'question': '1',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': '3',
68: 1:      'question': '2',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': '2',
68: 1:      'question': '3',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': '4',
68: 1:      'question': '5',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': '6',
68: 1:      'question': '7',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': '8',
68: 1:      'question': '9',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': '10',
68: 1:      'question': '11',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': '15',
68: 1:      'question': '14',
68: 1:      'valid': true
68: 1:    }
68: 1:  ],
68: 1:  'level': 3,
68: 1:  'nextQuestion': '17',
68: 1:  'questions': [
68: 1:    '0',
68: 1:    '1',
68: 1:    '2',
68: 1:    '3',
68: 1:    '5',
68: 1:    '7',
68: 1:    '9',
68: 1:    '11',
68: 1:    '14',
68: 1:    '17'
68: 1:  ]
68: 1:}
68: 1:Scores: 2196
68: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16']')
68: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
69: 1:BoardData {
69: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
69: 1:  'expectedAnswer': '21',
69: 1:  'history': [
69: 1:    {
69: 1:      'answer': '1',
69: 1:      'question': '0',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': '0',
69: 1:      'question': '1',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': '3',
69: 1:      'question': '2',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': '2',
69: 1:      'question': '3',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': '4',
69: 1:      'question': '5',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': '6',
69: 1:      'question': '7',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': '8',
69: 1:      'question': '9',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': '10',
69: 1:      'question': '11',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': '15',
69: 1:      'question': '14',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': '16',
69: 1:      'question': '17',
69: 1:      'valid': true
69: 1:    }
69: 1:  ],
69: 1:  'level': 3,
69: 1:  'nextQuestion': '20',
69: 1:  'questions': [
69: 1:    '0',
69: 1:    '1',
69: 1:    '2',
69: 1:    '3',
69: 1:    '5',
69: 1:    '7',
69: 1:    '9',
69: 1:    '11',
69: 1:    '14',
69: 1:    '17',
69: 1:    '20'
69: 1:  ]
69: 1:}
69: 1:Scores: 2198
69: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21']')
69: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
70: 1:BoardData {
70: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
70: 1:  'expectedAnswer': '22',
70: 1:  'history': [
70: 1:    {
70: 1:      'answer': '1',
70: 1:      'question': '0',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': '0',
70: 1:      'question': '1',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': '3',
70: 1:      'question': '2',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': '2',
70: 1:      'question': '3',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': '4',
70: 1:      'question': '5',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': '6',
70: 1:      'question': '7',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': '8',
70: 1:      'question': '9',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': '10',
70: 1:      'question': '11',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': '15',
70: 1:      'question': '14',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': '16',
70: 1:      'question': '17',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': '21',
70: 1:      'question': '20',
70: 1:      'valid': true
70: 1:    }
70: 1:  ],
70: 1:  'level': 3,
70: 1:  'nextQuestion': '23',
70: 1:  'questions': [
70: 1:    '0',
70: 1:    '1',
70: 1:    '2',
70: 1:    '3',
70: 1:    '5',
70: 1:    '7',
70: 1:    '9',
70: 1:    '11',
70: 1:    '14',
70: 1:    '17',
70: 1:    '20',
70: 1:    '23'
70: 1:  ]
70: 1:}
70: 1:Scores: 2200
70: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22']')
70: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
71: 1:BoardData {
71: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
71: 1:  'expectedAnswer': '27',
71: 1:  'history': [
71: 1:    {
71: 1:      'answer': '1',
71: 1:      'question': '0',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': '0',
71: 1:      'question': '1',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': '3',
71: 1:      'question': '2',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': '2',
71: 1:      'question': '3',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': '4',
71: 1:      'question': '5',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': '6',
71: 1:      'question': '7',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': '8',
71: 1:      'question': '9',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': '10',
71: 1:      'question': '11',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': '15',
71: 1:      'question': '14',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': '16',
71: 1:      'question': '17',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': '21',
71: 1:      'question': '20',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': '22',
71: 1:      'question': '23',
71: 1:      'valid': true
71: 1:    }
71: 1:  ],
71: 1:  'level': 3,
71: 1:  'nextQuestion': '26',
71: 1:  'questions': [
71: 1:    '0',
71: 1:    '1',
71: 1:    '2',
71: 1:    '3',
71: 1:    '5',
71: 1:    '7',
71: 1:    '9',
71: 1:    '11',
71: 1:    '14',
71: 1:    '17',
71: 1:    '20',
71: 1:    '23',
71: 1:    '26'
71: 1:  ]
71: 1:}
71: 1:Scores: 2202
71: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27']')
71: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
72: 1:BoardData {
72: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
72: 1:  'expectedAnswer': '28',
72: 1:  'history': [
72: 1:    {
72: 1:      'answer': '1',
72: 1:      'question': '0',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': '0',
72: 1:      'question': '1',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': '3',
72: 1:      'question': '2',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': '2',
72: 1:      'question': '3',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': '4',
72: 1:      'question': '5',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': '6',
72: 1:      'question': '7',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': '8',
72: 1:      'question': '9',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': '10',
72: 1:      'question': '11',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': '15',
72: 1:      'question': '14',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': '16',
72: 1:      'question': '17',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': '21',
72: 1:      'question': '20',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': '22',
72: 1:      'question': '23',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': '27',
72: 1:      'question': '26',
72: 1:      'valid': true
72: 1:    }
72: 1:  ],
72: 1:  'level': 3,
72: 1:  'nextQuestion': '29',
72: 1:  'questions': [
72: 1:    '0',
72: 1:    '1',
72: 1:    '2',
72: 1:    '3',
72: 1:    '5',
72: 1:    '7',
72: 1:    '9',
72: 1:    '11',
72: 1:    '14',
72: 1:    '17',
72: 1:    '20',
72: 1:    '23',
72: 1:    '26',
72: 1:    '29'
72: 1:  ]
72: 1:}
72: 1:Scores: 2204
72: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28']')
72: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
73: 1:BoardData {
73: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
73: 1:  'expectedAnswer': '32',
73: 1:  'history': [
73: 1:    {
73: 1:      'answer': '1',
73: 1:      'question': '0',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': '0',
73: 1:      'question': '1',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': '3',
73: 1:      'question': '2',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': '2',
73: 1:      'question': '3',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': '4',
73: 1:      'question': '5',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': '6',
73: 1:      'question': '7',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': '8',
73: 1:      'question': '9',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': '10',
73: 1:      'question': '11',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': '15',
73: 1:      'question': '14',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': '16',
73: 1:      'question': '17',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': '21',
73: 1:      'question': '20',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': '22',
73: 1:      'question': '23',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': '27',
73: 1:      'question': '26',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': '28',
73: 1:      'question': '29',
73: 1:      'valid': true
73: 1:    }
73: 1:  ],
73: 1:  'level': 3,
73: 1:  'nextQuestion': '33',
73: 1:  'questions': [
73: 1:    '0',
73: 1:    '1',
73: 1:    '2',
73: 1:    '3',
73: 1:    '5',
73: 1:    '7',
73: 1:    '9',
73: 1:    '11',
73: 1:    '14',
73: 1:    '17',
73: 1:    '20',
73: 1:    '23',
73: 1:    '26',
73: 1:    '29',
73: 1:    '33'
73: 1:  ]
73: 1:}
73: 1:Scores: 2206
73: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32']')
73: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
74: 1:BoardData {
74: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
74: 1:  'expectedAnswer': '36',
74: 1:  'history': [
74: 1:    {
74: 1:      'answer': '1',
74: 1:      'question': '0',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': '0',
74: 1:      'question': '1',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': '3',
74: 1:      'question': '2',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': '2',
74: 1:      'question': '3',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': '4',
74: 1:      'question': '5',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': '6',
74: 1:      'question': '7',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': '8',
74: 1:      'question': '9',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': '10',
74: 1:      'question': '11',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': '15',
74: 1:      'question': '14',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': '16',
74: 1:      'question': '17',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': '21',
74: 1:      'question': '20',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': '22',
74: 1:      'question': '23',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': '27',
74: 1:      'question': '26',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': '28',
74: 1:      'question': '29',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': '32',
74: 1:      'question': '33',
74: 1:      'valid': true
74: 1:    }
74: 1:  ],
74: 1:  'level': 3,
74: 1:  'nextQuestion': '37',
74: 1:  'questions': [
74: 1:    '0',
74: 1:    '1',
74: 1:    '2',
74: 1:    '3',
74: 1:    '5',
74: 1:    '7',
74: 1:    '9',
74: 1:    '11',
74: 1:    '14',
74: 1:    '17',
74: 1:    '20',
74: 1:    '23',
74: 1:    '26',
74: 1:    '29',
74: 1:    '33',
74: 1:    '37'
74: 1:  ]
74: 1:}
74: 1:Scores: 2208
74: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36']')
74: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
75: 1:BoardData {
75: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
75: 1:  'expectedAnswer': '40',
75: 1:  'history': [
75: 1:    {
75: 1:      'answer': '1',
75: 1:      'question': '0',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': '0',
75: 1:      'question': '1',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': '3',
75: 1:      'question': '2',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': '2',
75: 1:      'question': '3',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': '4',
75: 1:      'question': '5',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': '6',
75: 1:      'question': '7',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': '8',
75: 1:      'question': '9',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': '10',
75: 1:      'question': '11',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': '15',
75: 1:      'question': '14',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': '16',
75: 1:      'question': '17',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': '21',
75: 1:      'question': '20',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': '22',
75: 1:      'question': '23',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': '27',
75: 1:      'question': '26',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': '28',
75: 1:      'question': '29',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': '32',
75: 1:      'question': '33',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': '36',
75: 1:      'question': '37',
75: 1:      'valid': true
75: 1:    }
75: 1:  ],
75: 1:  'level': 3,
75: 1:  'nextQuestion': '41',
75: 1:  'questions': [
75: 1:    '0',
75: 1:    '1',
75: 1:    '2',
75: 1:    '3',
75: 1:    '5',
75: 1:    '7',
75: 1:    '9',
75: 1:    '11',
75: 1:    '14',
75: 1:    '17',
75: 1:    '20',
75: 1:    '23',
75: 1:    '26',
75: 1:    '29',
75: 1:    '33',
75: 1:    '37',
75: 1:    '41'
75: 1:  ]
75: 1:}
75: 1:Scores: 2210
75: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40']')
75: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
76: 1:BoardData {
76: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
76: 1:  'expectedAnswer': '44',
76: 1:  'history': [
76: 1:    {
76: 1:      'answer': '1',
76: 1:      'question': '0',
76: 1:      'valid': true
76: 1:    },
76: 1:    {
76: 1:      'answer': '0',
76: 1:      'question': '1',
76: 1:      'valid': true
76: 1:    },
76: 1:    {
76: 1:      'answer': '3',
76: 1:      'question': '2',
76: 1:      'valid': true
76: 1:    },
76: 1:    {
76: 1:      'answer': '2',
76: 1:      'question': '3',
76: 1:      'valid': true
76: 1:    },
76: 1:    {
76: 1:      'answer': '4',
76: 1:      'question': '5',
76: 1:      'valid': true
76: 1:    },
76: 1:    {
76: 1:      'answer': '6',
76: 1:      'question': '7',
76: 1:      'valid': true
76: 1:    },
76: 1:    {
76: 1:      'answer': '8',
76: 1:      'question': '9',
76: 1:      'valid': true
76: 1:    },
76: 1:    {
76: 1:      'answer': '10',
76: 1:      'question': '11',
76: 1:      'valid': true
76: 1:    },
76: 1:    {
76: 1:      'answer': '15',
76: 1:      'question': '14',
76: 1:      'valid': true
76: 1:    },
76: 1:    {
76: 1:      'answer': '16',
76: 1:      'question': '17',
76: 1:      'valid': true
76: 1:    },
76: 1:    {
76: 1:      'answer': '21',
76: 1:      'question': '20',
76: 1:      'valid': true
76: 1:    },
76: 1:    {
76: 1:      'answer': '22',
76: 1:      'question': '23',
76: 1:      'valid': true
76: 1:    },
76: 1:    {
76: 1:      'answer': '27',
76: 1:      'question': '26',
76: 1:      'valid': true
76: 1:    },
76: 1:    {
76: 1:      'answer': '28',
76: 1:      'question': '29',
76: 1:      'valid': true
76: 1:    },
76: 1:    {
76: 1:      'answer': '32',
76: 1:      'question': '33',
76: 1:      'valid': true
76: 1:    },
76: 1:    {
76: 1:      'answer': '36',
76: 1:      'question': '37',
76: 1:      'valid': true
76: 1:    },
76: 1:    {
76: 1:      'answer': '40',
76: 1:      'question': '41',
76: 1:      'valid': true
76: 1:    }
76: 1:  ],
76: 1:  'level': 3,
76: 1:  'nextQuestion': '45',
76: 1:  'questions': [
76: 1:    '0',
76: 1:    '1',
76: 1:    '2',
76: 1:    '3',
76: 1:    '5',
76: 1:    '7',
76: 1:    '9',
76: 1:    '11',
76: 1:    '14',
76: 1:    '17',
76: 1:    '20',
76: 1:    '23',
76: 1:    '26',
76: 1:    '29',
76: 1:    '33',
76: 1:    '37',
76: 1:    '41',
76: 1:    '45'
76: 1:  ]
76: 1:}
76: 1:Scores: 2212
76: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44']')
76: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
77: 1:BoardData {
77: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
77: 1:  'expectedAnswer': '51',
77: 1:  'history': [
77: 1:    {
77: 1:      'answer': '1',
77: 1:      'question': '0',
77: 1:      'valid': true
77: 1:    },
77: 1:    {
77: 1:      'answer': '0',
77: 1:      'question': '1',
77: 1:      'valid': true
77: 1:    },
77: 1:    {
77: 1:      'answer': '3',
77: 1:      'question': '2',
77: 1:      'valid': true
77: 1:    },
77: 1:    {
77: 1:      'answer': '2',
77: 1:      'question': '3',
77: 1:      'valid': true
77: 1:    },
77: 1:    {
77: 1:      'answer': '4',
77: 1:      'question': '5',
77: 1:      'valid': true
77: 1:    },
77: 1:    {
77: 1:      'answer': '6',
77: 1:      'question': '7',
77: 1:      'valid': true
77: 1:    },
77: 1:    {
77: 1:      'answer': '8',
77: 1:      'question': '9',
77: 1:      'valid': true
77: 1:    },
77: 1:    {
77: 1:      'answer': '10',
77: 1:      'question': '11',
77: 1:      'valid': true
77: 1:    },
77: 1:    {
77: 1:      'answer': '15',
77: 1:      'question': '14',
77: 1:      'valid': true
77: 1:    },
77: 1:    {
77: 1:      'answer': '16',
77: 1:      'question': '17',
77: 1:      'valid': true
77: 1:    },
77: 1:    {
77: 1:      'answer': '21',
77: 1:      'question': '20',
77: 1:      'valid': true
77: 1:    },
77: 1:    {
77: 1:      'answer': '22',
77: 1:      'question': '23',
77: 1:      'valid': true
77: 1:    },
77: 1:    {
77: 1:      'answer': '27',
77: 1:      'question': '26',
77: 1:      'valid': true
77: 1:    },
77: 1:    {
77: 1:      'answer': '28',
77: 1:      'question': '29',
77: 1:      'valid': true
77: 1:    },
77: 1:    {
77: 1:      'answer': '32',
77: 1:      'question': '33',
77: 1:      'valid': true
77: 1:    },
77: 1:    {
77: 1:      'answer': '36',
77: 1:      'question': '37',
77: 1:      'valid': true
77: 1:    },
77: 1:    {
77: 1:      'answer': '40',
77: 1:      'question': '41',
77: 1:      'valid': true
77: 1:    },
77: 1:    {
77: 1:      'answer': '44',
77: 1:      'question': '45',
77: 1:      'valid': true
77: 1:    }
77: 1:  ],
77: 1:  'level': 3,
77: 1:  'nextQuestion': '50',
77: 1:  'questions': [
77: 1:    '0',
77: 1:    '1',
77: 1:    '2',
77: 1:    '3',
77: 1:    '5',
77: 1:    '7',
77: 1:    '9',
77: 1:    '11',
77: 1:    '14',
77: 1:    '17',
77: 1:    '20',
77: 1:    '23',
77: 1:    '26',
77: 1:    '29',
77: 1:    '33',
77: 1:    '37',
77: 1:    '41',
77: 1:    '45',
77: 1:    '50'
77: 1:  ]
77: 1:}
77: 1:Scores: 2214
77: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51']')
77: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
78: 1:BoardData {
78: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
78: 1:  'expectedAnswer': '54',
78: 1:  'history': [
78: 1:    {
78: 1:      'answer': '1',
78: 1:      'question': '0',
78: 1:      'valid': true
78: 1:    },
78: 1:    {
78: 1:      'answer': '0',
78: 1:      'question': '1',
78: 1:      'valid': true
78: 1:    },
78: 1:    {
78: 1:      'answer': '3',
78: 1:      'question': '2',
78: 1:      'valid': true
78: 1:    },
78: 1:    {
78: 1:      'answer': '2',
78: 1:      'question': '3',
78: 1:      'valid': true
78: 1:    },
78: 1:    {
78: 1:      'answer': '4',
78: 1:      'question': '5',
78: 1:      'valid': true
78: 1:    },
78: 1:    {
78: 1:      'answer': '6',
78: 1:      'question': '7',
78: 1:      'valid': true
78: 1:    },
78: 1:    {
78: 1:      'answer': '8',
78: 1:      'question': '9',
78: 1:      'valid': true
78: 1:    },
78: 1:    {
78: 1:      'answer': '10',
78: 1:      'question': '11',
78: 1:      'valid': true
78: 1:    },
78: 1:    {
78: 1:      'answer': '15',
78: 1:      'question': '14',
78: 1:      'valid': true
78: 1:    },
78: 1:    {
78: 1:      'answer': '16',
78: 1:      'question': '17',
78: 1:      'valid': true
78: 1:    },
78: 1:    {
78: 1:      'answer': '21',
78: 1:      'question': '20',
78: 1:      'valid': true
78: 1:    },
78: 1:    {
78: 1:      'answer': '22',
78: 1:      'question': '23',
78: 1:      'valid': true
78: 1:    },
78: 1:    {
78: 1:      'answer': '27',
78: 1:      'question': '26',
78: 1:      'valid': true
78: 1:    },
78: 1:    {
78: 1:      'answer': '28',
78: 1:      'question': '29',
78: 1:      'valid': true
78: 1:    },
78: 1:    {
78: 1:      'answer': '32',
78: 1:      'question': '33',
78: 1:      'valid': true
78: 1:    },
78: 1:    {
78: 1:      'answer': '36',
78: 1:      'question': '37',
78: 1:      'valid': true
78: 1:    },
78: 1:    {
78: 1:      'answer': '40',
78: 1:      'question': '41',
78: 1:      'valid': true
78: 1:    },
78: 1:    {
78: 1:      'answer': '44',
78: 1:      'question': '45',
78: 1:      'valid': true
78: 1:    },
78: 1:    {
78: 1:      'answer': '51',
78: 1:      'question': '50',
78: 1:      'valid': true
78: 1:    }
78: 1:  ],
78: 1:  'level': 3,
78: 1:  'nextQuestion': '55',
78: 1:  'questions': [
78: 1:    '0',
78: 1:    '1',
78: 1:    '2',
78: 1:    '3',
78: 1:    '5',
78: 1:    '7',
78: 1:    '9',
78: 1:    '11',
78: 1:    '14',
78: 1:    '17',
78: 1:    '20',
78: 1:    '23',
78: 1:    '26',
78: 1:    '29',
78: 1:    '33',
78: 1:    '37',
78: 1:    '41',
78: 1:    '45',
78: 1:    '50',
78: 1:    '55'
78: 1:  ]
78: 1:}
78: 1:Scores: 2216
78: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54']')
78: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
79: 1:BoardData {
79: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
79: 1:  'expectedAnswer': '61',
79: 1:  'history': [
79: 1:    {
79: 1:      'answer': '1',
79: 1:      'question': '0',
79: 1:      'valid': true
79: 1:    },
79: 1:    {
79: 1:      'answer': '0',
79: 1:      'question': '1',
79: 1:      'valid': true
79: 1:    },
79: 1:    {
79: 1:      'answer': '3',
79: 1:      'question': '2',
79: 1:      'valid': true
79: 1:    },
79: 1:    {
79: 1:      'answer': '2',
79: 1:      'question': '3',
79: 1:      'valid': true
79: 1:    },
79: 1:    {
79: 1:      'answer': '4',
79: 1:      'question': '5',
79: 1:      'valid': true
79: 1:    },
79: 1:    {
79: 1:      'answer': '6',
79: 1:      'question': '7',
79: 1:      'valid': true
79: 1:    },
79: 1:    {
79: 1:      'answer': '8',
79: 1:      'question': '9',
79: 1:      'valid': true
79: 1:    },
79: 1:    {
79: 1:      'answer': '10',
79: 1:      'question': '11',
79: 1:      'valid': true
79: 1:    },
79: 1:    {
79: 1:      'answer': '15',
79: 1:      'question': '14',
79: 1:      'valid': true
79: 1:    },
79: 1:    {
79: 1:      'answer': '16',
79: 1:      'question': '17',
79: 1:      'valid': true
79: 1:    },
79: 1:    {
79: 1:      'answer': '21',
79: 1:      'question': '20',
79: 1:      'valid': true
79: 1:    },
79: 1:    {
79: 1:      'answer': '22',
79: 1:      'question': '23',
79: 1:      'valid': true
79: 1:    },
79: 1:    {
79: 1:      'answer': '27',
79: 1:      'question': '26',
79: 1:      'valid': true
79: 1:    },
79: 1:    {
79: 1:      'answer': '28',
79: 1:      'question': '29',
79: 1:      'valid': true
79: 1:    },
79: 1:    {
79: 1:      'answer': '32',
79: 1:      'question': '33',
79: 1:      'valid': true
79: 1:    },
79: 1:    {
79: 1:      'answer': '36',
79: 1:      'question': '37',
79: 1:      'valid': true
79: 1:    },
79: 1:    {
79: 1:      'answer': '40',
79: 1:      'question': '41',
79: 1:      'valid': true
79: 1:    },
79: 1:    {
79: 1:      'answer': '44',
79: 1:      'question': '45',
79: 1:      'valid': true
79: 1:    },
79: 1:    {
79: 1:      'answer': '51',
79: 1:      'question': '50',
79: 1:      'valid': true
79: 1:    },
79: 1:    {
79: 1:      'answer': '54',
79: 1:      'question': '55',
79: 1:      'valid': true
79: 1:    }
79: 1:  ],
79: 1:  'level': 3,
79: 1:  'nextQuestion': '60',
79: 1:  'questions': [
79: 1:    '0',
79: 1:    '1',
79: 1:    '2',
79: 1:    '3',
79: 1:    '5',
79: 1:    '7',
79: 1:    '9',
79: 1:    '11',
79: 1:    '14',
79: 1:    '17',
79: 1:    '20',
79: 1:    '23',
79: 1:    '26',
79: 1:    '29',
79: 1:    '33',
79: 1:    '37',
79: 1:    '41',
79: 1:    '45',
79: 1:    '50',
79: 1:    '55',
79: 1:    '60'
79: 1:  ]
79: 1:}
79: 1:Scores: 2218
79: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61']')
79: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
80: 1:BoardData {
80: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
80: 1:  'expectedAnswer': '64',
80: 1:  'history': [
80: 1:    {
80: 1:      'answer': '1',
80: 1:      'question': '0',
80: 1:      'valid': true
80: 1:    },
80: 1:    {
80: 1:      'answer': '0',
80: 1:      'question': '1',
80: 1:      'valid': true
80: 1:    },
80: 1:    {
80: 1:      'answer': '3',
80: 1:      'question': '2',
80: 1:      'valid': true
80: 1:    },
80: 1:    {
80: 1:      'answer': '2',
80: 1:      'question': '3',
80: 1:      'valid': true
80: 1:    },
80: 1:    {
80: 1:      'answer': '4',
80: 1:      'question': '5',
80: 1:      'valid': true
80: 1:    },
80: 1:    {
80: 1:      'answer': '6',
80: 1:      'question': '7',
80: 1:      'valid': true
80: 1:    },
80: 1:    {
80: 1:      'answer': '8',
80: 1:      'question': '9',
80: 1:      'valid': true
80: 1:    },
80: 1:    {
80: 1:      'answer': '10',
80: 1:      'question': '11',
80: 1:      'valid': true
80: 1:    },
80: 1:    {
80: 1:      'answer': '15',
80: 1:      'question': '14',
80: 1:      'valid': true
80: 1:    },
80: 1:    {
80: 1:      'answer': '16',
80: 1:      'question': '17',
80: 1:      'valid': true
80: 1:    },
80: 1:    {
80: 1:      'answer': '21',
80: 1:      'question': '20',
80: 1:      'valid': true
80: 1:    },
80: 1:    {
80: 1:      'answer': '22',
80: 1:      'question': '23',
80: 1:      'valid': true
80: 1:    },
80: 1:    {
80: 1:      'answer': '27',
80: 1:      'question': '26',
80: 1:      'valid': true
80: 1:    },
80: 1:    {
80: 1:      'answer': '28',
80: 1:      'question': '29',
80: 1:      'valid': true
80: 1:    },
80: 1:    {
80: 1:      'answer': '32',
80: 1:      'question': '33',
80: 1:      'valid': true
80: 1:    },
80: 1:    {
80: 1:      'answer': '36',
80: 1:      'question': '37',
80: 1:      'valid': true
80: 1:    },
80: 1:    {
80: 1:      'answer': '40',
80: 1:      'question': '41',
80: 1:      'valid': true
80: 1:    },
80: 1:    {
80: 1:      'answer': '44',
80: 1:      'question': '45',
80: 1:      'valid': true
80: 1:    },
80: 1:    {
80: 1:      'answer': '51',
80: 1:      'question': '50',
80: 1:      'valid': true
80: 1:    },
80: 1:    {
80: 1:      'answer': '54',
80: 1:      'question': '55',
80: 1:      'valid': true
80: 1:    },
80: 1:    {
80: 1:      'answer': '61',
80: 1:      'question': '60',
80: 1:      'valid': true
80: 1:    }
80: 1:  ],
80: 1:  'level': 3,
80: 1:  'nextQuestion': '65',
80: 1:  'questions': [
80: 1:    '0',
80: 1:    '1',
80: 1:    '2',
80: 1:    '3',
80: 1:    '5',
80: 1:    '7',
80: 1:    '9',
80: 1:    '11',
80: 1:    '14',
80: 1:    '17',
80: 1:    '20',
80: 1:    '23',
80: 1:    '26',
80: 1:    '29',
80: 1:    '33',
80: 1:    '37',
80: 1:    '41',
80: 1:    '45',
80: 1:    '50',
80: 1:    '55',
80: 1:    '60',
80: 1:    '65'
80: 1:  ]
80: 1:}
80: 1:Scores: 2220
80: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64']')
80: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
81: 1:BoardData {
81: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
81: 1:  'expectedAnswer': '71',
81: 1:  'history': [
81: 1:    {
81: 1:      'answer': '1',
81: 1:      'question': '0',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': '0',
81: 1:      'question': '1',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': '3',
81: 1:      'question': '2',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': '2',
81: 1:      'question': '3',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': '4',
81: 1:      'question': '5',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': '6',
81: 1:      'question': '7',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': '8',
81: 1:      'question': '9',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': '10',
81: 1:      'question': '11',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': '15',
81: 1:      'question': '14',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': '16',
81: 1:      'question': '17',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': '21',
81: 1:      'question': '20',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': '22',
81: 1:      'question': '23',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': '27',
81: 1:      'question': '26',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': '28',
81: 1:      'question': '29',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': '32',
81: 1:      'question': '33',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': '36',
81: 1:      'question': '37',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': '40',
81: 1:      'question': '41',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': '44',
81: 1:      'question': '45',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': '51',
81: 1:      'question': '50',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': '54',
81: 1:      'question': '55',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': '61',
81: 1:      'question': '60',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': '64',
81: 1:      'question': '65',
81: 1:      'valid': true
81: 1:    }
81: 1:  ],
81: 1:  'level': 3,
81: 1:  'nextQuestion': '70',
81: 1:  'questions': [
81: 1:    '0',
81: 1:    '1',
81: 1:    '2',
81: 1:    '3',
81: 1:    '5',
81: 1:    '7',
81: 1:    '9',
81: 1:    '11',
81: 1:    '14',
81: 1:    '17',
81: 1:    '20',
81: 1:    '23',
81: 1:    '26',
81: 1:    '29',
81: 1:    '33',
81: 1:    '37',
81: 1:    '41',
81: 1:    '45',
81: 1:    '50',
81: 1:    '55',
81: 1:    '60',
81: 1:    '65',
81: 1:    '70'
81: 1:  ]
81: 1:}
81: 1:Scores: 2222
81: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64', '71']')
81: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
82: 1:BoardData {
82: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
82: 1:  'expectedAnswer': '74',
82: 1:  'history': [
82: 1:    {
82: 1:      'answer': '1',
82: 1:      'question': '0',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '0',
82: 1:      'question': '1',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '3',
82: 1:      'question': '2',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '2',
82: 1:      'question': '3',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '4',
82: 1:      'question': '5',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '6',
82: 1:      'question': '7',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '8',
82: 1:      'question': '9',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '10',
82: 1:      'question': '11',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '15',
82: 1:      'question': '14',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '16',
82: 1:      'question': '17',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '21',
82: 1:      'question': '20',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '22',
82: 1:      'question': '23',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '27',
82: 1:      'question': '26',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '28',
82: 1:      'question': '29',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '32',
82: 1:      'question': '33',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '36',
82: 1:      'question': '37',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '40',
82: 1:      'question': '41',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '44',
82: 1:      'question': '45',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '51',
82: 1:      'question': '50',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '54',
82: 1:      'question': '55',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '61',
82: 1:      'question': '60',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '64',
82: 1:      'question': '65',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '71',
82: 1:      'question': '70',
82: 1:      'valid': true
82: 1:    }
82: 1:  ],
82: 1:  'level': 3,
82: 1:  'nextQuestion': '75',
82: 1:  'questions': [
82: 1:    '0',
82: 1:    '1',
82: 1:    '2',
82: 1:    '3',
82: 1:    '5',
82: 1:    '7',
82: 1:    '9',
82: 1:    '11',
82: 1:    '14',
82: 1:    '17',
82: 1:    '20',
82: 1:    '23',
82: 1:    '26',
82: 1:    '29',
82: 1:    '33',
82: 1:    '37',
82: 1:    '41',
82: 1:    '45',
82: 1:    '50',
82: 1:    '55',
82: 1:    '60',
82: 1:    '65',
82: 1:    '70',
82: 1:    '75'
82: 1:  ]
82: 1:}
82: 1:Scores: 2224
82: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64', '71', '74']')
82: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
83: 1:BoardData {
83: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
83: 1:  'expectedAnswer': '80',
83: 1:  'history': [
83: 1:    {
83: 1:      'answer': '1',
83: 1:      'question': '0',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '0',
83: 1:      'question': '1',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '3',
83: 1:      'question': '2',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '2',
83: 1:      'question': '3',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '4',
83: 1:      'question': '5',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '6',
83: 1:      'question': '7',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '8',
83: 1:      'question': '9',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '10',
83: 1:      'question': '11',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '15',
83: 1:      'question': '14',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '16',
83: 1:      'question': '17',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '21',
83: 1:      'question': '20',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '22',
83: 1:      'question': '23',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '27',
83: 1:      'question': '26',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '28',
83: 1:      'question': '29',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '32',
83: 1:      'question': '33',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '36',
83: 1:      'question': '37',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '40',
83: 1:      'question': '41',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '44',
83: 1:      'question': '45',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '51',
83: 1:      'question': '50',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '54',
83: 1:      'question': '55',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '61',
83: 1:      'question': '60',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '64',
83: 1:      'question': '65',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '71',
83: 1:      'question': '70',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '74',
83: 1:      'question': '75',
83: 1:      'valid': true
83: 1:    }
83: 1:  ],
83: 1:  'level': 3,
83: 1:  'nextQuestion': '81',
83: 1:  'questions': [
83: 1:    '0',
83: 1:    '1',
83: 1:    '2',
83: 1:    '3',
83: 1:    '5',
83: 1:    '7',
83: 1:    '9',
83: 1:    '11',
83: 1:    '14',
83: 1:    '17',
83: 1:    '20',
83: 1:    '23',
83: 1:    '26',
83: 1:    '29',
83: 1:    '33',
83: 1:    '37',
83: 1:    '41',
83: 1:    '45',
83: 1:    '50',
83: 1:    '55',
83: 1:    '60',
83: 1:    '65',
83: 1:    '70',
83: 1:    '75',
83: 1:    '81'
83: 1:  ]
83: 1:}
83: 1:Scores: 2226
83: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64', '71', '74', '80']')
83: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
84: 1:BoardData {
84: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
84: 1:  'expectedAnswer': '86',
84: 1:  'history': [
84: 1:    {
84: 1:      'answer': '1',
84: 1:      'question': '0',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '0',
84: 1:      'question': '1',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '3',
84: 1:      'question': '2',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '2',
84: 1:      'question': '3',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '4',
84: 1:      'question': '5',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '6',
84: 1:      'question': '7',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '8',
84: 1:      'question': '9',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '10',
84: 1:      'question': '11',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '15',
84: 1:      'question': '14',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '16',
84: 1:      'question': '17',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '21',
84: 1:      'question': '20',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '22',
84: 1:      'question': '23',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '27',
84: 1:      'question': '26',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '28',
84: 1:      'question': '29',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '32',
84: 1:      'question': '33',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '36',
84: 1:      'question': '37',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '40',
84: 1:      'question': '41',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '44',
84: 1:      'question': '45',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '51',
84: 1:      'question': '50',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '54',
84: 1:      'question': '55',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '61',
84: 1:      'question': '60',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '64',
84: 1:      'question': '65',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '71',
84: 1:      'question': '70',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '74',
84: 1:      'question': '75',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '80',
84: 1:      'question': '81',
84: 1:      'valid': true
84: 1:    }
84: 1:  ],
84: 1:  'level': 3,
84: 1:  'nextQuestion': '87',
84: 1:  'questions': [
84: 1:    '0',
84: 1:    '1',
84: 1:    '2',
84: 1:    '3',
84: 1:    '5',
84: 1:    '7',
84: 1:    '9',
84: 1:    '11',
84: 1:    '14',
84: 1:    '17',
84: 1:    '20',
84: 1:    '23',
84: 1:    '26',
84: 1:    '29',
84: 1:    '33',
84: 1:    '37',
84: 1:    '41',
84: 1:    '45',
84: 1:    '50',
84: 1:    '55',
84: 1:    '60',
84: 1:    '65',
84: 1:    '70',
84: 1:    '75',
84: 1:    '81',
84: 1:    '87'
84: 1:  ]
84: 1:}
84: 1:Scores: 2228
84: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64', '71', '74', '80', '86']')
84: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
85: 1:BoardData {
85: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
85: 1:  'expectedAnswer': '92',
85: 1:  'history': [
85: 1:    {
85: 1:      'answer': '1',
85: 1:      'question': '0',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '0',
85: 1:      'question': '1',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '3',
85: 1:      'question': '2',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '2',
85: 1:      'question': '3',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '4',
85: 1:      'question': '5',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '6',
85: 1:      'question': '7',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '8',
85: 1:      'question': '9',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '10',
85: 1:      'question': '11',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '15',
85: 1:      'question': '14',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '16',
85: 1:      'question': '17',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '21',
85: 1:      'question': '20',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '22',
85: 1:      'question': '23',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '27',
85: 1:      'question': '26',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '28',
85: 1:      'question': '29',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '32',
85: 1:      'question': '33',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '36',
85: 1:      'question': '37',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '40',
85: 1:      'question': '41',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '44',
85: 1:      'question': '45',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '51',
85: 1:      'question': '50',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '54',
85: 1:      'question': '55',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '61',
85: 1:      'question': '60',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '64',
85: 1:      'question': '65',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '71',
85: 1:      'question': '70',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '74',
85: 1:      'question': '75',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '80',
85: 1:      'question': '81',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '86',
85: 1:      'question': '87',
85: 1:      'valid': true
85: 1:    }
85: 1:  ],
85: 1:  'level': 3,
85: 1:  'nextQuestion': '93',
85: 1:  'questions': [
85: 1:    '0',
85: 1:    '1',
85: 1:    '2',
85: 1:    '3',
85: 1:    '5',
85: 1:    '7',
85: 1:    '9',
85: 1:    '11',
85: 1:    '14',
85: 1:    '17',
85: 1:    '20',
85: 1:    '23',
85: 1:    '26',
85: 1:    '29',
85: 1:    '33',
85: 1:    '37',
85: 1:    '41',
85: 1:    '45',
85: 1:    '50',
85: 1:    '55',
85: 1:    '60',
85: 1:    '65',
85: 1:    '70',
85: 1:    '75',
85: 1:    '81',
85: 1:    '87',
85: 1:    '93'
85: 1:  ]
85: 1:}
85: 1:Scores: 2230
85: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64', '71', '74', '80', '86', '92']')
85: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
86: 1:BoardData {
86: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
86: 1:  'expectedAnswer': '98',
86: 1:  'history': [
86: 1:    {
86: 1:      'answer': '1',
86: 1:      'question': '0',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '0',
86: 1:      'question': '1',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '3',
86: 1:      'question': '2',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '2',
86: 1:      'question': '3',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '4',
86: 1:      'question': '5',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '6',
86: 1:      'question': '7',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '8',
86: 1:      'question': '9',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '10',
86: 1:      'question': '11',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '15',
86: 1:      'question': '14',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '16',
86: 1:      'question': '17',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '21',
86: 1:      'question': '20',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '22',
86: 1:      'question': '23',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '27',
86: 1:      'question': '26',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '28',
86: 1:      'question': '29',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '32',
86: 1:      'question': '33',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '36',
86: 1:      'question': '37',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '40',
86: 1:      'question': '41',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '44',
86: 1:      'question': '45',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '51',
86: 1:      'question': '50',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '54',
86: 1:      'question': '55',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '61',
86: 1:      'question': '60',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '64',
86: 1:      'question': '65',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '71',
86: 1:      'question': '70',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '74',
86: 1:      'question': '75',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '80',
86: 1:      'question': '81',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '86',
86: 1:      'question': '87',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '92',
86: 1:      'question': '93',
86: 1:      'valid': true
86: 1:    }
86: 1:  ],
86: 1:  'level': 3,
86: 1:  'nextQuestion': '99',
86: 1:  'questions': [
86: 1:    '0',
86: 1:    '1',
86: 1:    '2',
86: 1:    '3',
86: 1:    '5',
86: 1:    '7',
86: 1:    '9',
86: 1:    '11',
86: 1:    '14',
86: 1:    '17',
86: 1:    '20',
86: 1:    '23',
86: 1:    '26',
86: 1:    '29',
86: 1:    '33',
86: 1:    '37',
86: 1:    '41',
86: 1:    '45',
86: 1:    '50',
86: 1:    '55',
86: 1:    '60',
86: 1:    '65',
86: 1:    '70',
86: 1:    '75',
86: 1:    '81',
86: 1:    '87',
86: 1:    '93',
86: 1:    '99'
86: 1:  ]
86: 1:}
86: 1:Scores: 2232
86: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64', '71', '74', '80', '86', '92', '98']')
86: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
87: 1:BoardData {
87: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
87: 1:  'expectedAnswer': '107',
87: 1:  'history': [
87: 1:    {
87: 1:      'answer': '1',
87: 1:      'question': '0',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '0',
87: 1:      'question': '1',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '3',
87: 1:      'question': '2',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '2',
87: 1:      'question': '3',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '4',
87: 1:      'question': '5',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '6',
87: 1:      'question': '7',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '8',
87: 1:      'question': '9',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '10',
87: 1:      'question': '11',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '15',
87: 1:      'question': '14',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '16',
87: 1:      'question': '17',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '21',
87: 1:      'question': '20',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '22',
87: 1:      'question': '23',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '27',
87: 1:      'question': '26',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '28',
87: 1:      'question': '29',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '32',
87: 1:      'question': '33',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '36',
87: 1:      'question': '37',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '40',
87: 1:      'question': '41',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '44',
87: 1:      'question': '45',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '51',
87: 1:      'question': '50',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '54',
87: 1:      'question': '55',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '61',
87: 1:      'question': '60',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '64',
87: 1:      'question': '65',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '71',
87: 1:      'question': '70',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '74',
87: 1:      'question': '75',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '80',
87: 1:      'question': '81',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '86',
87: 1:      'question': '87',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '92',
87: 1:      'question': '93',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '98',
87: 1:      'question': '99',
87: 1:      'valid': true
87: 1:    }
87: 1:  ],
87: 1:  'level': 3,
87: 1:  'nextQuestion': '106',
87: 1:  'questions': [
87: 1:    '0',
87: 1:    '1',
87: 1:    '2',
87: 1:    '3',
87: 1:    '5',
87: 1:    '7',
87: 1:    '9',
87: 1:    '11',
87: 1:    '14',
87: 1:    '17',
87: 1:    '20',
87: 1:    '23',
87: 1:    '26',
87: 1:    '29',
87: 1:    '33',
87: 1:    '37',
87: 1:    '41',
87: 1:    '45',
87: 1:    '50',
87: 1:    '55',
87: 1:    '60',
87: 1:    '65',
87: 1:    '70',
87: 1:    '75',
87: 1:    '81',
87: 1:    '87',
87: 1:    '93',
87: 1:    '99',
87: 1:    '106'
87: 1:  ]
87: 1:}
87: 1:Scores: 2234
87: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64', '71', '74', '80', '86', '92', '98', '107']')
87: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
88: 1:BoardData {
88: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
88: 1:  'expectedAnswer': '112',
88: 1:  'history': [
88: 1:    {
88: 1:      'answer': '1',
88: 1:      'question': '0',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '0',
88: 1:      'question': '1',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '3',
88: 1:      'question': '2',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '2',
88: 1:      'question': '3',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '4',
88: 1:      'question': '5',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '6',
88: 1:      'question': '7',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '8',
88: 1:      'question': '9',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '10',
88: 1:      'question': '11',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '15',
88: 1:      'question': '14',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '16',
88: 1:      'question': '17',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '21',
88: 1:      'question': '20',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '22',
88: 1:      'question': '23',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '27',
88: 1:      'question': '26',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '28',
88: 1:      'question': '29',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '32',
88: 1:      'question': '33',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '36',
88: 1:      'question': '37',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '40',
88: 1:      'question': '41',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '44',
88: 1:      'question': '45',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '51',
88: 1:      'question': '50',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '54',
88: 1:      'question': '55',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '61',
88: 1:      'question': '60',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '64',
88: 1:      'question': '65',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '71',
88: 1:      'question': '70',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '74',
88: 1:      'question': '75',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '80',
88: 1:      'question': '81',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '86',
88: 1:      'question': '87',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '92',
88: 1:      'question': '93',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '98',
88: 1:      'question': '99',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '107',
88: 1:      'question': '106',
88: 1:      'valid': true
88: 1:    }
88: 1:  ],
88: 1:  'level': 3,
88: 1:  'nextQuestion': '113',
88: 1:  'questions': [
88: 1:    '0',
88: 1:    '1',
88: 1:    '2',
88: 1:    '3',
88: 1:    '5',
88: 1:    '7',
88: 1:    '9',
88: 1:    '11',
88: 1:    '14',
88: 1:    '17',
88: 1:    '20',
88: 1:    '23',
88: 1:    '26',
88: 1:    '29',
88: 1:    '33',
88: 1:    '37',
88: 1:    '41',
88: 1:    '45',
88: 1:    '50',
88: 1:    '55',
88: 1:    '60',
88: 1:    '65',
88: 1:    '70',
88: 1:    '75',
88: 1:    '81',
88: 1:    '87',
88: 1:    '93',
88: 1:    '99',
88: 1:    '106',
88: 1:    '113'
88: 1:  ]
88: 1:}
88: 1:Scores: 2236
88: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64', '71', '74', '80', '86', '92', '98', '107', '112']')
88: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
89: 1:BoardData {
89: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
89: 1:  'expectedAnswer': '121',
89: 1:  'history': [
89: 1:    {
89: 1:      'answer': '1',
89: 1:      'question': '0',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '0',
89: 1:      'question': '1',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '3',
89: 1:      'question': '2',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '2',
89: 1:      'question': '3',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '4',
89: 1:      'question': '5',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '6',
89: 1:      'question': '7',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '8',
89: 1:      'question': '9',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '10',
89: 1:      'question': '11',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '15',
89: 1:      'question': '14',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '16',
89: 1:      'question': '17',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '21',
89: 1:      'question': '20',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '22',
89: 1:      'question': '23',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '27',
89: 1:      'question': '26',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '28',
89: 1:      'question': '29',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '32',
89: 1:      'question': '33',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '36',
89: 1:      'question': '37',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '40',
89: 1:      'question': '41',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '44',
89: 1:      'question': '45',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '51',
89: 1:      'question': '50',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '54',
89: 1:      'question': '55',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '61',
89: 1:      'question': '60',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '64',
89: 1:      'question': '65',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '71',
89: 1:      'question': '70',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '74',
89: 1:      'question': '75',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '80',
89: 1:      'question': '81',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '86',
89: 1:      'question': '87',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '92',
89: 1:      'question': '93',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '98',
89: 1:      'question': '99',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '107',
89: 1:      'question': '106',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '112',
89: 1:      'question': '113',
89: 1:      'valid': true
89: 1:    }
89: 1:  ],
89: 1:  'level': 3,
89: 1:  'nextQuestion': '120',
89: 1:  'questions': [
89: 1:    '0',
89: 1:    '1',
89: 1:    '2',
89: 1:    '3',
89: 1:    '5',
89: 1:    '7',
89: 1:    '9',
89: 1:    '11',
89: 1:    '14',
89: 1:    '17',
89: 1:    '20',
89: 1:    '23',
89: 1:    '26',
89: 1:    '29',
89: 1:    '33',
89: 1:    '37',
89: 1:    '41',
89: 1:    '45',
89: 1:    '50',
89: 1:    '55',
89: 1:    '60',
89: 1:    '65',
89: 1:    '70',
89: 1:    '75',
89: 1:    '81',
89: 1:    '87',
89: 1:    '93',
89: 1:    '99',
89: 1:    '106',
89: 1:    '113',
89: 1:    '120'
89: 1:  ]
89: 1:}
89: 1:Scores: 2238
89: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64', '71', '74', '80', '86', '92', '98', '107', '112', '121']')
89: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
90: 1:BoardData {
90: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
90: 1:  'expectedAnswer': '126',
90: 1:  'history': [
90: 1:    {
90: 1:      'answer': '1',
90: 1:      'question': '0',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '0',
90: 1:      'question': '1',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '3',
90: 1:      'question': '2',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '2',
90: 1:      'question': '3',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '4',
90: 1:      'question': '5',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '6',
90: 1:      'question': '7',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '8',
90: 1:      'question': '9',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '10',
90: 1:      'question': '11',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '15',
90: 1:      'question': '14',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '16',
90: 1:      'question': '17',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '21',
90: 1:      'question': '20',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '22',
90: 1:      'question': '23',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '27',
90: 1:      'question': '26',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '28',
90: 1:      'question': '29',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '32',
90: 1:      'question': '33',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '36',
90: 1:      'question': '37',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '40',
90: 1:      'question': '41',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '44',
90: 1:      'question': '45',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '51',
90: 1:      'question': '50',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '54',
90: 1:      'question': '55',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '61',
90: 1:      'question': '60',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '64',
90: 1:      'question': '65',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '71',
90: 1:      'question': '70',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '74',
90: 1:      'question': '75',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '80',
90: 1:      'question': '81',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '86',
90: 1:      'question': '87',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '92',
90: 1:      'question': '93',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '98',
90: 1:      'question': '99',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '107',
90: 1:      'question': '106',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '112',
90: 1:      'question': '113',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '121',
90: 1:      'question': '120',
90: 1:      'valid': true
90: 1:    }
90: 1:  ],
90: 1:  'level': 3,
90: 1:  'nextQuestion': '127',
90: 1:  'questions': [
90: 1:    '0',
90: 1:    '1',
90: 1:    '2',
90: 1:    '3',
90: 1:    '5',
90: 1:    '7',
90: 1:    '9',
90: 1:    '11',
90: 1:    '14',
90: 1:    '17',
90: 1:    '20',
90: 1:    '23',
90: 1:    '26',
90: 1:    '29',
90: 1:    '33',
90: 1:    '37',
90: 1:    '41',
90: 1:    '45',
90: 1:    '50',
90: 1:    '55',
90: 1:    '60',
90: 1:    '65',
90: 1:    '70',
90: 1:    '75',
90: 1:    '81',
90: 1:    '87',
90: 1:    '93',
90: 1:    '99',
90: 1:    '106',
90: 1:    '113',
90: 1:    '120',
90: 1:    '127'
90: 1:  ]
90: 1:}
90: 1:Scores: 2240
90: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64', '71', '74', '80', '86', '92', '98', '107', '112', '121', '126']')
90: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
91: 1:BoardData {
91: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
91: 1:  'expectedAnswer': '135',
91: 1:  'history': [
91: 1:    {
91: 1:      'answer': '1',
91: 1:      'question': '0',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '0',
91: 1:      'question': '1',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '3',
91: 1:      'question': '2',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '2',
91: 1:      'question': '3',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '4',
91: 1:      'question': '5',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '6',
91: 1:      'question': '7',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '8',
91: 1:      'question': '9',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '10',
91: 1:      'question': '11',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '15',
91: 1:      'question': '14',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '16',
91: 1:      'question': '17',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '21',
91: 1:      'question': '20',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '22',
91: 1:      'question': '23',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '27',
91: 1:      'question': '26',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '28',
91: 1:      'question': '29',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '32',
91: 1:      'question': '33',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '36',
91: 1:      'question': '37',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '40',
91: 1:      'question': '41',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '44',
91: 1:      'question': '45',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '51',
91: 1:      'question': '50',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '54',
91: 1:      'question': '55',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '61',
91: 1:      'question': '60',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '64',
91: 1:      'question': '65',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '71',
91: 1:      'question': '70',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '74',
91: 1:      'question': '75',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '80',
91: 1:      'question': '81',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '86',
91: 1:      'question': '87',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '92',
91: 1:      'question': '93',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '98',
91: 1:      'question': '99',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '107',
91: 1:      'question': '106',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '112',
91: 1:      'question': '113',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '121',
91: 1:      'question': '120',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '126',
91: 1:      'question': '127',
91: 1:      'valid': true
91: 1:    }
91: 1:  ],
91: 1:  'level': 3,
91: 1:  'nextQuestion': '134',
91: 1:  'questions': [
91: 1:    '0',
91: 1:    '1',
91: 1:    '2',
91: 1:    '3',
91: 1:    '5',
91: 1:    '7',
91: 1:    '9',
91: 1:    '11',
91: 1:    '14',
91: 1:    '17',
91: 1:    '20',
91: 1:    '23',
91: 1:    '26',
91: 1:    '29',
91: 1:    '33',
91: 1:    '37',
91: 1:    '41',
91: 1:    '45',
91: 1:    '50',
91: 1:    '55',
91: 1:    '60',
91: 1:    '65',
91: 1:    '70',
91: 1:    '75',
91: 1:    '81',
91: 1:    '87',
91: 1:    '93',
91: 1:    '99',
91: 1:    '106',
91: 1:    '113',
91: 1:    '120',
91: 1:    '127',
91: 1:    '134'
91: 1:  ]
91: 1:}
91: 1:Scores: 2242
91: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64', '71', '74', '80', '86', '92', '98', '107', '112', '121', '126', '135']')
91: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
92: 1:BoardData {
92: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
92: 1:  'expectedAnswer': '140',
92: 1:  'history': [
92: 1:    {
92: 1:      'answer': '1',
92: 1:      'question': '0',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '0',
92: 1:      'question': '1',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '3',
92: 1:      'question': '2',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '2',
92: 1:      'question': '3',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '4',
92: 1:      'question': '5',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '6',
92: 1:      'question': '7',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '8',
92: 1:      'question': '9',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '10',
92: 1:      'question': '11',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '15',
92: 1:      'question': '14',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '16',
92: 1:      'question': '17',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '21',
92: 1:      'question': '20',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '22',
92: 1:      'question': '23',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '27',
92: 1:      'question': '26',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '28',
92: 1:      'question': '29',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '32',
92: 1:      'question': '33',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '36',
92: 1:      'question': '37',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '40',
92: 1:      'question': '41',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '44',
92: 1:      'question': '45',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '51',
92: 1:      'question': '50',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '54',
92: 1:      'question': '55',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '61',
92: 1:      'question': '60',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '64',
92: 1:      'question': '65',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '71',
92: 1:      'question': '70',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '74',
92: 1:      'question': '75',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '80',
92: 1:      'question': '81',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '86',
92: 1:      'question': '87',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '92',
92: 1:      'question': '93',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '98',
92: 1:      'question': '99',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '107',
92: 1:      'question': '106',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '112',
92: 1:      'question': '113',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '121',
92: 1:      'question': '120',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '126',
92: 1:      'question': '127',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '135',
92: 1:      'question': '134',
92: 1:      'valid': true
92: 1:    }
92: 1:  ],
92: 1:  'level': 3,
92: 1:  'nextQuestion': '141',
92: 1:  'questions': [
92: 1:    '0',
92: 1:    '1',
92: 1:    '2',
92: 1:    '3',
92: 1:    '5',
92: 1:    '7',
92: 1:    '9',
92: 1:    '11',
92: 1:    '14',
92: 1:    '17',
92: 1:    '20',
92: 1:    '23',
92: 1:    '26',
92: 1:    '29',
92: 1:    '33',
92: 1:    '37',
92: 1:    '41',
92: 1:    '45',
92: 1:    '50',
92: 1:    '55',
92: 1:    '60',
92: 1:    '65',
92: 1:    '70',
92: 1:    '75',
92: 1:    '81',
92: 1:    '87',
92: 1:    '93',
92: 1:    '99',
92: 1:    '106',
92: 1:    '113',
92: 1:    '120',
92: 1:    '127',
92: 1:    '134',
92: 1:    '141'
92: 1:  ]
92: 1:}
92: 1:Scores: 2244
92: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64', '71', '74', '80', '86', '92', '98', '107', '112', '121', '126', '135', '140']')
92: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
93: 1:BoardData {
93: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
93: 1:  'expectedAnswer': '148',
93: 1:  'history': [
93: 1:    {
93: 1:      'answer': '1',
93: 1:      'question': '0',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '0',
93: 1:      'question': '1',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '3',
93: 1:      'question': '2',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '2',
93: 1:      'question': '3',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '4',
93: 1:      'question': '5',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '6',
93: 1:      'question': '7',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '8',
93: 1:      'question': '9',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '10',
93: 1:      'question': '11',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '15',
93: 1:      'question': '14',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '16',
93: 1:      'question': '17',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '21',
93: 1:      'question': '20',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '22',
93: 1:      'question': '23',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '27',
93: 1:      'question': '26',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '28',
93: 1:      'question': '29',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '32',
93: 1:      'question': '33',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '36',
93: 1:      'question': '37',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '40',
93: 1:      'question': '41',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '44',
93: 1:      'question': '45',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '51',
93: 1:      'question': '50',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '54',
93: 1:      'question': '55',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '61',
93: 1:      'question': '60',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '64',
93: 1:      'question': '65',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '71',
93: 1:      'question': '70',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '74',
93: 1:      'question': '75',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '80',
93: 1:      'question': '81',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '86',
93: 1:      'question': '87',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '92',
93: 1:      'question': '93',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '98',
93: 1:      'question': '99',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '107',
93: 1:      'question': '106',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '112',
93: 1:      'question': '113',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '121',
93: 1:      'question': '120',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '126',
93: 1:      'question': '127',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '135',
93: 1:      'question': '134',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '140',
93: 1:      'question': '141',
93: 1:      'valid': true
93: 1:    }
93: 1:  ],
93: 1:  'level': 3,
93: 1:  'nextQuestion': '149',
93: 1:  'questions': [
93: 1:    '0',
93: 1:    '1',
93: 1:    '2',
93: 1:    '3',
93: 1:    '5',
93: 1:    '7',
93: 1:    '9',
93: 1:    '11',
93: 1:    '14',
93: 1:    '17',
93: 1:    '20',
93: 1:    '23',
93: 1:    '26',
93: 1:    '29',
93: 1:    '33',
93: 1:    '37',
93: 1:    '41',
93: 1:    '45',
93: 1:    '50',
93: 1:    '55',
93: 1:    '60',
93: 1:    '65',
93: 1:    '70',
93: 1:    '75',
93: 1:    '81',
93: 1:    '87',
93: 1:    '93',
93: 1:    '99',
93: 1:    '106',
93: 1:    '113',
93: 1:    '120',
93: 1:    '127',
93: 1:    '134',
93: 1:    '141',
93: 1:    '149'
93: 1:  ]
93: 1:}
93: 1:Scores: 2246
93: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64', '71', '74', '80', '86', '92', '98', '107', '112', '121', '126', '135', '140', '148']')
93: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
94: 1:BoardData {
94: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
94: 1:  'expectedAnswer': '156',
94: 1:  'history': [
94: 1:    {
94: 1:      'answer': '1',
94: 1:      'question': '0',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '0',
94: 1:      'question': '1',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '3',
94: 1:      'question': '2',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '2',
94: 1:      'question': '3',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '4',
94: 1:      'question': '5',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '6',
94: 1:      'question': '7',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '8',
94: 1:      'question': '9',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '10',
94: 1:      'question': '11',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '15',
94: 1:      'question': '14',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '16',
94: 1:      'question': '17',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '21',
94: 1:      'question': '20',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '22',
94: 1:      'question': '23',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '27',
94: 1:      'question': '26',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '28',
94: 1:      'question': '29',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '32',
94: 1:      'question': '33',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '36',
94: 1:      'question': '37',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '40',
94: 1:      'question': '41',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '44',
94: 1:      'question': '45',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '51',
94: 1:      'question': '50',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '54',
94: 1:      'question': '55',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '61',
94: 1:      'question': '60',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '64',
94: 1:      'question': '65',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '71',
94: 1:      'question': '70',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '74',
94: 1:      'question': '75',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '80',
94: 1:      'question': '81',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '86',
94: 1:      'question': '87',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '92',
94: 1:      'question': '93',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '98',
94: 1:      'question': '99',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '107',
94: 1:      'question': '106',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '112',
94: 1:      'question': '113',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '121',
94: 1:      'question': '120',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '126',
94: 1:      'question': '127',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '135',
94: 1:      'question': '134',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '140',
94: 1:      'question': '141',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '148',
94: 1:      'question': '149',
94: 1:      'valid': true
94: 1:    }
94: 1:  ],
94: 1:  'level': 3,
94: 1:  'nextQuestion': '157',
94: 1:  'questions': [
94: 1:    '0',
94: 1:    '1',
94: 1:    '2',
94: 1:    '3',
94: 1:    '5',
94: 1:    '7',
94: 1:    '9',
94: 1:    '11',
94: 1:    '14',
94: 1:    '17',
94: 1:    '20',
94: 1:    '23',
94: 1:    '26',
94: 1:    '29',
94: 1:    '33',
94: 1:    '37',
94: 1:    '41',
94: 1:    '45',
94: 1:    '50',
94: 1:    '55',
94: 1:    '60',
94: 1:    '65',
94: 1:    '70',
94: 1:    '75',
94: 1:    '81',
94: 1:    '87',
94: 1:    '93',
94: 1:    '99',
94: 1:    '106',
94: 1:    '113',
94: 1:    '120',
94: 1:    '127',
94: 1:    '134',
94: 1:    '141',
94: 1:    '149',
94: 1:    '157'
94: 1:  ]
94: 1:}
94: 1:Scores: 2248
94: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64', '71', '74', '80', '86', '92', '98', '107', '112', '121', '126', '135', '140', '148', '156']')
94: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
95: 1:BoardData {
95: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
95: 1:  'expectedAnswer': '164',
95: 1:  'history': [
95: 1:    {
95: 1:      'answer': '1',
95: 1:      'question': '0',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '0',
95: 1:      'question': '1',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '3',
95: 1:      'question': '2',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '2',
95: 1:      'question': '3',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '4',
95: 1:      'question': '5',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '6',
95: 1:      'question': '7',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '8',
95: 1:      'question': '9',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '10',
95: 1:      'question': '11',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '15',
95: 1:      'question': '14',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '16',
95: 1:      'question': '17',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '21',
95: 1:      'question': '20',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '22',
95: 1:      'question': '23',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '27',
95: 1:      'question': '26',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '28',
95: 1:      'question': '29',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '32',
95: 1:      'question': '33',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '36',
95: 1:      'question': '37',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '40',
95: 1:      'question': '41',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '44',
95: 1:      'question': '45',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '51',
95: 1:      'question': '50',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '54',
95: 1:      'question': '55',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '61',
95: 1:      'question': '60',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '64',
95: 1:      'question': '65',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '71',
95: 1:      'question': '70',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '74',
95: 1:      'question': '75',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '80',
95: 1:      'question': '81',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '86',
95: 1:      'question': '87',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '92',
95: 1:      'question': '93',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '98',
95: 1:      'question': '99',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '107',
95: 1:      'question': '106',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '112',
95: 1:      'question': '113',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '121',
95: 1:      'question': '120',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '126',
95: 1:      'question': '127',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '135',
95: 1:      'question': '134',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '140',
95: 1:      'question': '141',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '148',
95: 1:      'question': '149',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '156',
95: 1:      'question': '157',
95: 1:      'valid': true
95: 1:    }
95: 1:  ],
95: 1:  'level': 3,
95: 1:  'nextQuestion': '165',
95: 1:  'questions': [
95: 1:    '0',
95: 1:    '1',
95: 1:    '2',
95: 1:    '3',
95: 1:    '5',
95: 1:    '7',
95: 1:    '9',
95: 1:    '11',
95: 1:    '14',
95: 1:    '17',
95: 1:    '20',
95: 1:    '23',
95: 1:    '26',
95: 1:    '29',
95: 1:    '33',
95: 1:    '37',
95: 1:    '41',
95: 1:    '45',
95: 1:    '50',
95: 1:    '55',
95: 1:    '60',
95: 1:    '65',
95: 1:    '70',
95: 1:    '75',
95: 1:    '81',
95: 1:    '87',
95: 1:    '93',
95: 1:    '99',
95: 1:    '106',
95: 1:    '113',
95: 1:    '120',
95: 1:    '127',
95: 1:    '134',
95: 1:    '141',
95: 1:    '149',
95: 1:    '157',
95: 1:    '165'
95: 1:  ]
95: 1:}
95: 1:Scores: 2250
95: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64', '71', '74', '80', '86', '92', '98', '107', '112', '121', '126', '135', '140', '148', '156', '164']')
95: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
96: 1:BoardData {
96: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
96: 1:  'expectedAnswer': '172',
96: 1:  'history': [
96: 1:    {
96: 1:      'answer': '1',
96: 1:      'question': '0',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '0',
96: 1:      'question': '1',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '3',
96: 1:      'question': '2',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '2',
96: 1:      'question': '3',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '4',
96: 1:      'question': '5',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '6',
96: 1:      'question': '7',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '8',
96: 1:      'question': '9',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '10',
96: 1:      'question': '11',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '15',
96: 1:      'question': '14',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '16',
96: 1:      'question': '17',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '21',
96: 1:      'question': '20',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '22',
96: 1:      'question': '23',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '27',
96: 1:      'question': '26',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '28',
96: 1:      'question': '29',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '32',
96: 1:      'question': '33',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '36',
96: 1:      'question': '37',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '40',
96: 1:      'question': '41',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '44',
96: 1:      'question': '45',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '51',
96: 1:      'question': '50',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '54',
96: 1:      'question': '55',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '61',
96: 1:      'question': '60',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '64',
96: 1:      'question': '65',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '71',
96: 1:      'question': '70',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '74',
96: 1:      'question': '75',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '80',
96: 1:      'question': '81',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '86',
96: 1:      'question': '87',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '92',
96: 1:      'question': '93',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '98',
96: 1:      'question': '99',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '107',
96: 1:      'question': '106',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '112',
96: 1:      'question': '113',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '121',
96: 1:      'question': '120',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '126',
96: 1:      'question': '127',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '135',
96: 1:      'question': '134',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '140',
96: 1:      'question': '141',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '148',
96: 1:      'question': '149',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '156',
96: 1:      'question': '157',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '164',
96: 1:      'question': '165',
96: 1:      'valid': true
96: 1:    }
96: 1:  ],
96: 1:  'level': 3,
96: 1:  'nextQuestion': '173',
96: 1:  'questions': [
96: 1:    '0',
96: 1:    '1',
96: 1:    '2',
96: 1:    '3',
96: 1:    '5',
96: 1:    '7',
96: 1:    '9',
96: 1:    '11',
96: 1:    '14',
96: 1:    '17',
96: 1:    '20',
96: 1:    '23',
96: 1:    '26',
96: 1:    '29',
96: 1:    '33',
96: 1:    '37',
96: 1:    '41',
96: 1:    '45',
96: 1:    '50',
96: 1:    '55',
96: 1:    '60',
96: 1:    '65',
96: 1:    '70',
96: 1:    '75',
96: 1:    '81',
96: 1:    '87',
96: 1:    '93',
96: 1:    '99',
96: 1:    '106',
96: 1:    '113',
96: 1:    '120',
96: 1:    '127',
96: 1:    '134',
96: 1:    '141',
96: 1:    '149',
96: 1:    '157',
96: 1:    '165',
96: 1:    '173'
96: 1:  ]
96: 1:}
96: 1:Scores: 2252
96: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64', '71', '74', '80', '86', '92', '98', '107', '112', '121', '126', '135', '140', '148', '156', '164', '172']')
96: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
97: 1:BoardData {
97: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
97: 1:  'expectedAnswer': '183',
97: 1:  'history': [
97: 1:    {
97: 1:      'answer': '1',
97: 1:      'question': '0',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '0',
97: 1:      'question': '1',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '3',
97: 1:      'question': '2',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '2',
97: 1:      'question': '3',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '4',
97: 1:      'question': '5',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '6',
97: 1:      'question': '7',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '8',
97: 1:      'question': '9',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '10',
97: 1:      'question': '11',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '15',
97: 1:      'question': '14',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '16',
97: 1:      'question': '17',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '21',
97: 1:      'question': '20',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '22',
97: 1:      'question': '23',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '27',
97: 1:      'question': '26',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '28',
97: 1:      'question': '29',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '32',
97: 1:      'question': '33',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '36',
97: 1:      'question': '37',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '40',
97: 1:      'question': '41',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '44',
97: 1:      'question': '45',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '51',
97: 1:      'question': '50',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '54',
97: 1:      'question': '55',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '61',
97: 1:      'question': '60',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '64',
97: 1:      'question': '65',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '71',
97: 1:      'question': '70',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '74',
97: 1:      'question': '75',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '80',
97: 1:      'question': '81',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '86',
97: 1:      'question': '87',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '92',
97: 1:      'question': '93',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '98',
97: 1:      'question': '99',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '107',
97: 1:      'question': '106',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '112',
97: 1:      'question': '113',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '121',
97: 1:      'question': '120',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '126',
97: 1:      'question': '127',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '135',
97: 1:      'question': '134',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '140',
97: 1:      'question': '141',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '148',
97: 1:      'question': '149',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '156',
97: 1:      'question': '157',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '164',
97: 1:      'question': '165',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '172',
97: 1:      'question': '173',
97: 1:      'valid': true
97: 1:    }
97: 1:  ],
97: 1:  'level': 3,
97: 1:  'nextQuestion': '182',
97: 1:  'questions': [
97: 1:    '0',
97: 1:    '1',
97: 1:    '2',
97: 1:    '3',
97: 1:    '5',
97: 1:    '7',
97: 1:    '9',
97: 1:    '11',
97: 1:    '14',
97: 1:    '17',
97: 1:    '20',
97: 1:    '23',
97: 1:    '26',
97: 1:    '29',
97: 1:    '33',
97: 1:    '37',
97: 1:    '41',
97: 1:    '45',
97: 1:    '50',
97: 1:    '55',
97: 1:    '60',
97: 1:    '65',
97: 1:    '70',
97: 1:    '75',
97: 1:    '81',
97: 1:    '87',
97: 1:    '93',
97: 1:    '99',
97: 1:    '106',
97: 1:    '113',
97: 1:    '120',
97: 1:    '127',
97: 1:    '134',
97: 1:    '141',
97: 1:    '149',
97: 1:    '157',
97: 1:    '165',
97: 1:    '173',
97: 1:    '182'
97: 1:  ]
97: 1:}
97: 1:Scores: 2254
97: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64', '71', '74', '80', '86', '92', '98', '107', '112', '121', '126', '135', '140', '148', '156', '164', '172', '183']')
97: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
98: 1:BoardData {
98: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
98: 1:  'expectedAnswer': '190',
98: 1:  'history': [
98: 1:    {
98: 1:      'answer': '1',
98: 1:      'question': '0',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '0',
98: 1:      'question': '1',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '3',
98: 1:      'question': '2',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '2',
98: 1:      'question': '3',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '4',
98: 1:      'question': '5',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '6',
98: 1:      'question': '7',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '8',
98: 1:      'question': '9',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '10',
98: 1:      'question': '11',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '15',
98: 1:      'question': '14',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '16',
98: 1:      'question': '17',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '21',
98: 1:      'question': '20',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '22',
98: 1:      'question': '23',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '27',
98: 1:      'question': '26',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '28',
98: 1:      'question': '29',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '32',
98: 1:      'question': '33',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '36',
98: 1:      'question': '37',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '40',
98: 1:      'question': '41',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '44',
98: 1:      'question': '45',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '51',
98: 1:      'question': '50',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '54',
98: 1:      'question': '55',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '61',
98: 1:      'question': '60',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '64',
98: 1:      'question': '65',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '71',
98: 1:      'question': '70',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '74',
98: 1:      'question': '75',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '80',
98: 1:      'question': '81',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '86',
98: 1:      'question': '87',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '92',
98: 1:      'question': '93',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '98',
98: 1:      'question': '99',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '107',
98: 1:      'question': '106',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '112',
98: 1:      'question': '113',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '121',
98: 1:      'question': '120',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '126',
98: 1:      'question': '127',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '135',
98: 1:      'question': '134',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '140',
98: 1:      'question': '141',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '148',
98: 1:      'question': '149',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '156',
98: 1:      'question': '157',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '164',
98: 1:      'question': '165',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '172',
98: 1:      'question': '173',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '183',
98: 1:      'question': '182',
98: 1:      'valid': true
98: 1:    }
98: 1:  ],
98: 1:  'level': 3,
98: 1:  'nextQuestion': '191',
98: 1:  'questions': [
98: 1:    '0',
98: 1:    '1',
98: 1:    '2',
98: 1:    '3',
98: 1:    '5',
98: 1:    '7',
98: 1:    '9',
98: 1:    '11',
98: 1:    '14',
98: 1:    '17',
98: 1:    '20',
98: 1:    '23',
98: 1:    '26',
98: 1:    '29',
98: 1:    '33',
98: 1:    '37',
98: 1:    '41',
98: 1:    '45',
98: 1:    '50',
98: 1:    '55',
98: 1:    '60',
98: 1:    '65',
98: 1:    '70',
98: 1:    '75',
98: 1:    '81',
98: 1:    '87',
98: 1:    '93',
98: 1:    '99',
98: 1:    '106',
98: 1:    '113',
98: 1:    '120',
98: 1:    '127',
98: 1:    '134',
98: 1:    '141',
98: 1:    '149',
98: 1:    '157',
98: 1:    '165',
98: 1:    '173',
98: 1:    '182',
98: 1:    '191'
98: 1:  ]
98: 1:}
98: 1:Scores: 2256
98: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64', '71', '74', '80', '86', '92', '98', '107', '112', '121', '126', '135', '140', '148', '156', '164', '172', '183', '190']')
98: 1:Fire Event: PassTest{complexity=11, testCount=41}
------------------------------------------
99: 1:BoardData {
99: 1:  'description': 'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?',
99: 1:  'expectedAnswer': '201',
99: 1:  'history': [
99: 1:    {
99: 1:      'answer': '1',
99: 1:      'question': '0',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '0',
99: 1:      'question': '1',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '3',
99: 1:      'question': '2',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '2',
99: 1:      'question': '3',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '4',
99: 1:      'question': '5',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '6',
99: 1:      'question': '7',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '8',
99: 1:      'question': '9',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '10',
99: 1:      'question': '11',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '15',
99: 1:      'question': '14',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '16',
99: 1:      'question': '17',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '21',
99: 1:      'question': '20',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '22',
99: 1:      'question': '23',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '27',
99: 1:      'question': '26',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '28',
99: 1:      'question': '29',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '32',
99: 1:      'question': '33',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '36',
99: 1:      'question': '37',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '40',
99: 1:      'question': '41',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '44',
99: 1:      'question': '45',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '51',
99: 1:      'question': '50',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '54',
99: 1:      'question': '55',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '61',
99: 1:      'question': '60',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '64',
99: 1:      'question': '65',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '71',
99: 1:      'question': '70',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '74',
99: 1:      'question': '75',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '80',
99: 1:      'question': '81',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '86',
99: 1:      'question': '87',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '92',
99: 1:      'question': '93',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '98',
99: 1:      'question': '99',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '107',
99: 1:      'question': '106',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '112',
99: 1:      'question': '113',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '121',
99: 1:      'question': '120',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '126',
99: 1:      'question': '127',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '135',
99: 1:      'question': '134',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '140',
99: 1:      'question': '141',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '148',
99: 1:      'question': '149',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '156',
99: 1:      'question': '157',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '164',
99: 1:      'question': '165',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '172',
99: 1:      'question': '173',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '183',
99: 1:      'question': '182',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '190',
99: 1:      'question': '191',
99: 1:      'valid': true
99: 1:    }
99: 1:  ],
99: 1:  'level': 3,
99: 1:  'nextQuestion': '200',
99: 1:  'questions': [
99: 1:    '0',
99: 1:    '1',
99: 1:    '2',
99: 1:    '3',
99: 1:    '5',
99: 1:    '7',
99: 1:    '9',
99: 1:    '11',
99: 1:    '14',
99: 1:    '17',
99: 1:    '20',
99: 1:    '23',
99: 1:    '26',
99: 1:    '29',
99: 1:    '33',
99: 1:    '37',
99: 1:    '41',
99: 1:    '45',
99: 1:    '50',
99: 1:    '55',
99: 1:    '60',
99: 1:    '65',
99: 1:    '70',
99: 1:    '75',
99: 1:    '81',
99: 1:    '87',
99: 1:    '93',
99: 1:    '99',
99: 1:    '106',
99: 1:    '113',
99: 1:    '120',
99: 1:    '127',
99: 1:    '134',
99: 1:    '141',
99: 1:    '149',
99: 1:    '157',
99: 1:    '165',
99: 1:    '173',
99: 1:    '182',
99: 1:    '191',
99: 1:    '200'
99: 1:  ]
99: 1:}
99: 1:Scores: 2258
99: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64', '71', '74', '80', '86', '92', '98', '107', '112', '121', '126', '135', '140', '148', '156', '164', '172', '183', '190', '201']')
99: 1:Fire Event: PassTest{complexity=11, testCount=41}
99: 1:Fire Event: NextAlgorithm{complexity=11, time=0}
------------------------------------------
100: 1:BoardData {
100: 1:  'description': 'Wait for next level. Please send 'message('StartNextLevel')' command.',
100: 1:  'history': [
100: 1:    {
100: 1:      'answer': '1',
100: 1:      'question': '0',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '0',
100: 1:      'question': '1',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '3',
100: 1:      'question': '2',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '2',
100: 1:      'question': '3',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '4',
100: 1:      'question': '5',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '6',
100: 1:      'question': '7',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '8',
100: 1:      'question': '9',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '10',
100: 1:      'question': '11',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '15',
100: 1:      'question': '14',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '16',
100: 1:      'question': '17',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '21',
100: 1:      'question': '20',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '22',
100: 1:      'question': '23',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '27',
100: 1:      'question': '26',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '28',
100: 1:      'question': '29',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '32',
100: 1:      'question': '33',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '36',
100: 1:      'question': '37',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '40',
100: 1:      'question': '41',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '44',
100: 1:      'question': '45',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '51',
100: 1:      'question': '50',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '54',
100: 1:      'question': '55',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '61',
100: 1:      'question': '60',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '64',
100: 1:      'question': '65',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '71',
100: 1:      'question': '70',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '74',
100: 1:      'question': '75',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '80',
100: 1:      'question': '81',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '86',
100: 1:      'question': '87',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '92',
100: 1:      'question': '93',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '98',
100: 1:      'question': '99',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '107',
100: 1:      'question': '106',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '112',
100: 1:      'question': '113',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '121',
100: 1:      'question': '120',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '126',
100: 1:      'question': '127',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '135',
100: 1:      'question': '134',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '140',
100: 1:      'question': '141',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '148',
100: 1:      'question': '149',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '156',
100: 1:      'question': '157',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '164',
100: 1:      'question': '165',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '172',
100: 1:      'question': '173',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '183',
100: 1:      'question': '182',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '190',
100: 1:      'question': '191',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '201',
100: 1:      'question': '200',
100: 1:      'valid': true
100: 1:    }
100: 1:  ],
100: 1:  'level': 3,
100: 1:  'questions': []
100: 1:}
100: 1:Scores: 3744
100: 1:Answer: message('StartNextLevel')
100: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
101: 1:BoardData {
101: 1:  'description': 'The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...',
101: 1:  'expectedAnswer': 'cab',
101: 1:  'history': [],
101: 1:  'level': 4,
101: 1:  'nextQuestion': 'abc',
101: 1:  'questions': ['abc']
101: 1:}
101: 1:Scores: 3744
101: 1:Answer: message('['cab']')
101: 1:Fire Event: PassTest{complexity=12, testCount=21}
------------------------------------------
102: 1:BoardData {
102: 1:  'description': 'The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...',
102: 1:  'expectedAnswer': 'dca',
102: 1:  'history': [{
102: 1:    'answer': 'cab',
102: 1:    'question': 'abc',
102: 1:    'valid': true
102: 1:  }],
102: 1:  'level': 4,
102: 1:  'nextQuestion': 'cad',
102: 1:  'questions': [
102: 1:    'abc',
102: 1:    'cad'
102: 1:  ]
102: 1:}
102: 1:Scores: 3749
102: 1:Answer: message('['cab', 'dca']')
102: 1:Fire Event: PassTest{complexity=12, testCount=21}
------------------------------------------
103: 1:BoardData {
103: 1:  'description': 'The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...',
103: 1:  'expectedAnswer': 'das',
103: 1:  'history': [
103: 1:    {
103: 1:      'answer': 'cab',
103: 1:      'question': 'abc',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': 'dca',
103: 1:      'question': 'cad',
103: 1:      'valid': true
103: 1:    }
103: 1:  ],
103: 1:  'level': 4,
103: 1:  'nextQuestion': 'asd',
103: 1:  'questions': [
103: 1:    'abc',
103: 1:    'cad',
103: 1:    'asd'
103: 1:  ]
103: 1:}
103: 1:Scores: 3754
103: 1:Answer: message('['cab', 'dca', 'das']')
103: 1:Fire Event: PassTest{complexity=12, testCount=21}
------------------------------------------
104: 1:BoardData {
104: 1:  'description': 'The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...',
104: 1:  'expectedAnswer': 'zxy',
104: 1:  'history': [
104: 1:    {
104: 1:      'answer': 'cab',
104: 1:      'question': 'abc',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': 'dca',
104: 1:      'question': 'cad',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': 'das',
104: 1:      'question': 'asd',
104: 1:      'valid': true
104: 1:    }
104: 1:  ],
104: 1:  'level': 4,
104: 1:  'nextQuestion': 'xyz',
104: 1:  'questions': [
104: 1:    'abc',
104: 1:    'cad',
104: 1:    'asd',
104: 1:    'xyz'
104: 1:  ]
104: 1:}
104: 1:Scores: 3759
104: 1:Answer: message('['cab', 'dca', 'das', 'zxy']')
104: 1:Fire Event: PassTest{complexity=12, testCount=21}
------------------------------------------
105: 1:BoardData {
105: 1:  'description': 'The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...',
105: 1:  'expectedAnswer': 'aaa',
105: 1:  'history': [
105: 1:    {
105: 1:      'answer': 'cab',
105: 1:      'question': 'abc',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'dca',
105: 1:      'question': 'cad',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'das',
105: 1:      'question': 'asd',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'zxy',
105: 1:      'question': 'xyz',
105: 1:      'valid': true
105: 1:    }
105: 1:  ],
105: 1:  'level': 4,
105: 1:  'nextQuestion': 'aaa',
105: 1:  'questions': [
105: 1:    'abc',
105: 1:    'cad',
105: 1:    'asd',
105: 1:    'xyz',
105: 1:    'aaa'
105: 1:  ]
105: 1:}
105: 1:Scores: 3764
105: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa']')
105: 1:Fire Event: PassTest{complexity=12, testCount=21}
------------------------------------------
106: 1:BoardData {
106: 1:  'description': 'The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...',
106: 1:  'expectedAnswer': '312',
106: 1:  'history': [
106: 1:    {
106: 1:      'answer': 'cab',
106: 1:      'question': 'abc',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'dca',
106: 1:      'question': 'cad',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'das',
106: 1:      'question': 'asd',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'zxy',
106: 1:      'question': 'xyz',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'aaa',
106: 1:      'question': 'aaa',
106: 1:      'valid': true
106: 1:    }
106: 1:  ],
106: 1:  'level': 4,
106: 1:  'nextQuestion': '123',
106: 1:  'questions': [
106: 1:    'abc',
106: 1:    'cad',
106: 1:    'asd',
106: 1:    'xyz',
106: 1:    'aaa',
106: 1:    '123'
106: 1:  ]
106: 1:}
106: 1:Scores: 3769
106: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312']')
106: 1:Fire Event: PassTest{complexity=12, testCount=21}
------------------------------------------
107: 1:BoardData {
107: 1:  'description': 'The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...',
107: 1:  'expectedAnswer': 'fdE',
107: 1:  'history': [
107: 1:    {
107: 1:      'answer': 'cab',
107: 1:      'question': 'abc',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'dca',
107: 1:      'question': 'cad',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'das',
107: 1:      'question': 'asd',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'zxy',
107: 1:      'question': 'xyz',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'aaa',
107: 1:      'question': 'aaa',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '312',
107: 1:      'question': '123',
107: 1:      'valid': true
107: 1:    }
107: 1:  ],
107: 1:  'level': 4,
107: 1:  'nextQuestion': 'dEf',
107: 1:  'questions': [
107: 1:    'abc',
107: 1:    'cad',
107: 1:    'asd',
107: 1:    'xyz',
107: 1:    'aaa',
107: 1:    '123',
107: 1:    'dEf'
107: 1:  ]
107: 1:}
107: 1:Scores: 3774
107: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE']')
107: 1:Fire Event: PassTest{complexity=12, testCount=21}
------------------------------------------
108: 1:BoardData {
108: 1:  'description': 'The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...',
108: 1:  'expectedAnswer': 'czx',
108: 1:  'history': [
108: 1:    {
108: 1:      'answer': 'cab',
108: 1:      'question': 'abc',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'dca',
108: 1:      'question': 'cad',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'das',
108: 1:      'question': 'asd',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'zxy',
108: 1:      'question': 'xyz',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'aaa',
108: 1:      'question': 'aaa',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '312',
108: 1:      'question': '123',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'fdE',
108: 1:      'question': 'dEf',
108: 1:      'valid': true
108: 1:    }
108: 1:  ],
108: 1:  'level': 4,
108: 1:  'nextQuestion': 'zxc',
108: 1:  'questions': [
108: 1:    'abc',
108: 1:    'cad',
108: 1:    'asd',
108: 1:    'xyz',
108: 1:    'aaa',
108: 1:    '123',
108: 1:    'dEf',
108: 1:    'zxc'
108: 1:  ]
108: 1:}
108: 1:Scores: 3779
108: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx']')
108: 1:Fire Event: PassTest{complexity=12, testCount=21}
------------------------------------------
109: 1:BoardData {
109: 1:  'description': 'The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...',
109: 1:  'expectedAnswer': 'eqw',
109: 1:  'history': [
109: 1:    {
109: 1:      'answer': 'cab',
109: 1:      'question': 'abc',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'dca',
109: 1:      'question': 'cad',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'das',
109: 1:      'question': 'asd',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'zxy',
109: 1:      'question': 'xyz',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'aaa',
109: 1:      'question': 'aaa',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '312',
109: 1:      'question': '123',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'fdE',
109: 1:      'question': 'dEf',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'czx',
109: 1:      'question': 'zxc',
109: 1:      'valid': true
109: 1:    }
109: 1:  ],
109: 1:  'level': 4,
109: 1:  'nextQuestion': 'qwe',
109: 1:  'questions': [
109: 1:    'abc',
109: 1:    'cad',
109: 1:    'asd',
109: 1:    'xyz',
109: 1:    'aaa',
109: 1:    '123',
109: 1:    'dEf',
109: 1:    'zxc',
109: 1:    'qwe'
109: 1:  ]
109: 1:}
109: 1:Scores: 3784
109: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw']')
109: 1:Fire Event: PassTest{complexity=12, testCount=21}
------------------------------------------
110: 1:BoardData {
110: 1:  'description': 'The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...',
110: 1:  'expectedAnswer': 'yrt',
110: 1:  'history': [
110: 1:    {
110: 1:      'answer': 'cab',
110: 1:      'question': 'abc',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'dca',
110: 1:      'question': 'cad',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'das',
110: 1:      'question': 'asd',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'zxy',
110: 1:      'question': 'xyz',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'aaa',
110: 1:      'question': 'aaa',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '312',
110: 1:      'question': '123',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'fdE',
110: 1:      'question': 'dEf',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'czx',
110: 1:      'question': 'zxc',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'eqw',
110: 1:      'question': 'qwe',
110: 1:      'valid': true
110: 1:    }
110: 1:  ],
110: 1:  'level': 4,
110: 1:  'nextQuestion': 'rty',
110: 1:  'questions': [
110: 1:    'abc',
110: 1:    'cad',
110: 1:    'asd',
110: 1:    'xyz',
110: 1:    'aaa',
110: 1:    '123',
110: 1:    'dEf',
110: 1:    'zxc',
110: 1:    'qwe',
110: 1:    'rty'
110: 1:  ]
110: 1:}
110: 1:Scores: 3789
110: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt']')
110: 1:Fire Event: PassTest{complexity=12, testCount=21}
------------------------------------------
111: 1:BoardData {
111: 1:  'description': 'The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...',
111: 1:  'expectedAnswer': 'bmn',
111: 1:  'history': [
111: 1:    {
111: 1:      'answer': 'cab',
111: 1:      'question': 'abc',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'dca',
111: 1:      'question': 'cad',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'das',
111: 1:      'question': 'asd',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'zxy',
111: 1:      'question': 'xyz',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'aaa',
111: 1:      'question': 'aaa',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '312',
111: 1:      'question': '123',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'fdE',
111: 1:      'question': 'dEf',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'czx',
111: 1:      'question': 'zxc',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'eqw',
111: 1:      'question': 'qwe',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'yrt',
111: 1:      'question': 'rty',
111: 1:      'valid': true
111: 1:    }
111: 1:  ],
111: 1:  'level': 4,
111: 1:  'nextQuestion': 'mnb',
111: 1:  'questions': [
111: 1:    'abc',
111: 1:    'cad',
111: 1:    'asd',
111: 1:    'xyz',
111: 1:    'aaa',
111: 1:    '123',
111: 1:    'dEf',
111: 1:    'zxc',
111: 1:    'qwe',
111: 1:    'rty',
111: 1:    'mnb'
111: 1:  ]
111: 1:}
111: 1:Scores: 3794
111: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn']')
111: 1:Fire Event: PassTest{complexity=12, testCount=21}
------------------------------------------
112: 1:BoardData {
112: 1:  'description': 'The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...',
112: 1:  'expectedAnswer': 'nvb',
112: 1:  'history': [
112: 1:    {
112: 1:      'answer': 'cab',
112: 1:      'question': 'abc',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'dca',
112: 1:      'question': 'cad',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'das',
112: 1:      'question': 'asd',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'zxy',
112: 1:      'question': 'xyz',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'aaa',
112: 1:      'question': 'aaa',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '312',
112: 1:      'question': '123',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'fdE',
112: 1:      'question': 'dEf',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'czx',
112: 1:      'question': 'zxc',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'eqw',
112: 1:      'question': 'qwe',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'yrt',
112: 1:      'question': 'rty',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'bmn',
112: 1:      'question': 'mnb',
112: 1:      'valid': true
112: 1:    }
112: 1:  ],
112: 1:  'level': 4,
112: 1:  'nextQuestion': 'vbn',
112: 1:  'questions': [
112: 1:    'abc',
112: 1:    'cad',
112: 1:    'asd',
112: 1:    'xyz',
112: 1:    'aaa',
112: 1:    '123',
112: 1:    'dEf',
112: 1:    'zxc',
112: 1:    'qwe',
112: 1:    'rty',
112: 1:    'mnb',
112: 1:    'vbn'
112: 1:  ]
112: 1:}
112: 1:Scores: 3799
112: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb']')
112: 1:Fire Event: PassTest{complexity=12, testCount=21}
------------------------------------------
113: 1:BoardData {
113: 1:  'description': 'The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...',
113: 1:  'expectedAnswer': 'hfg',
113: 1:  'history': [
113: 1:    {
113: 1:      'answer': 'cab',
113: 1:      'question': 'abc',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'dca',
113: 1:      'question': 'cad',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'das',
113: 1:      'question': 'asd',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'zxy',
113: 1:      'question': 'xyz',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'aaa',
113: 1:      'question': 'aaa',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '312',
113: 1:      'question': '123',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'fdE',
113: 1:      'question': 'dEf',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'czx',
113: 1:      'question': 'zxc',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'eqw',
113: 1:      'question': 'qwe',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'yrt',
113: 1:      'question': 'rty',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'bmn',
113: 1:      'question': 'mnb',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'nvb',
113: 1:      'question': 'vbn',
113: 1:      'valid': true
113: 1:    }
113: 1:  ],
113: 1:  'level': 4,
113: 1:  'nextQuestion': 'fgh',
113: 1:  'questions': [
113: 1:    'abc',
113: 1:    'cad',
113: 1:    'asd',
113: 1:    'xyz',
113: 1:    'aaa',
113: 1:    '123',
113: 1:    'dEf',
113: 1:    'zxc',
113: 1:    'qwe',
113: 1:    'rty',
113: 1:    'mnb',
113: 1:    'vbn',
113: 1:    'fgh'
113: 1:  ]
113: 1:}
113: 1:Scores: 3804
113: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb', 'hfg']')
113: 1:Fire Event: PassTest{complexity=12, testCount=21}
------------------------------------------
114: 1:BoardData {
114: 1:  'description': 'The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...',
114: 1:  'expectedAnswer': 'kij',
114: 1:  'history': [
114: 1:    {
114: 1:      'answer': 'cab',
114: 1:      'question': 'abc',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'dca',
114: 1:      'question': 'cad',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'das',
114: 1:      'question': 'asd',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'zxy',
114: 1:      'question': 'xyz',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'aaa',
114: 1:      'question': 'aaa',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '312',
114: 1:      'question': '123',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'fdE',
114: 1:      'question': 'dEf',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'czx',
114: 1:      'question': 'zxc',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'eqw',
114: 1:      'question': 'qwe',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'yrt',
114: 1:      'question': 'rty',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'bmn',
114: 1:      'question': 'mnb',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'nvb',
114: 1:      'question': 'vbn',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'hfg',
114: 1:      'question': 'fgh',
114: 1:      'valid': true
114: 1:    }
114: 1:  ],
114: 1:  'level': 4,
114: 1:  'nextQuestion': 'ijk',
114: 1:  'questions': [
114: 1:    'abc',
114: 1:    'cad',
114: 1:    'asd',
114: 1:    'xyz',
114: 1:    'aaa',
114: 1:    '123',
114: 1:    'dEf',
114: 1:    'zxc',
114: 1:    'qwe',
114: 1:    'rty',
114: 1:    'mnb',
114: 1:    'vbn',
114: 1:    'fgh',
114: 1:    'ijk'
114: 1:  ]
114: 1:}
114: 1:Scores: 3809
114: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb', 'hfg', 'kij']')
114: 1:Fire Event: PassTest{complexity=12, testCount=21}
------------------------------------------
115: 1:BoardData {
115: 1:  'description': 'The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...',
115: 1:  'expectedAnswer': 'nlm',
115: 1:  'history': [
115: 1:    {
115: 1:      'answer': 'cab',
115: 1:      'question': 'abc',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'dca',
115: 1:      'question': 'cad',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'das',
115: 1:      'question': 'asd',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'zxy',
115: 1:      'question': 'xyz',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'aaa',
115: 1:      'question': 'aaa',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '312',
115: 1:      'question': '123',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'fdE',
115: 1:      'question': 'dEf',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'czx',
115: 1:      'question': 'zxc',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'eqw',
115: 1:      'question': 'qwe',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'yrt',
115: 1:      'question': 'rty',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'bmn',
115: 1:      'question': 'mnb',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'nvb',
115: 1:      'question': 'vbn',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'hfg',
115: 1:      'question': 'fgh',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'kij',
115: 1:      'question': 'ijk',
115: 1:      'valid': true
115: 1:    }
115: 1:  ],
115: 1:  'level': 4,
115: 1:  'nextQuestion': 'lmn',
115: 1:  'questions': [
115: 1:    'abc',
115: 1:    'cad',
115: 1:    'asd',
115: 1:    'xyz',
115: 1:    'aaa',
115: 1:    '123',
115: 1:    'dEf',
115: 1:    'zxc',
115: 1:    'qwe',
115: 1:    'rty',
115: 1:    'mnb',
115: 1:    'vbn',
115: 1:    'fgh',
115: 1:    'ijk',
115: 1:    'lmn'
115: 1:  ]
115: 1:}
115: 1:Scores: 3814
115: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb', 'hfg', 'kij', 'nlm']')
115: 1:Fire Event: PassTest{complexity=12, testCount=21}
------------------------------------------
116: 1:BoardData {
116: 1:  'description': 'The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...',
116: 1:  'expectedAnswer': 'rpq',
116: 1:  'history': [
116: 1:    {
116: 1:      'answer': 'cab',
116: 1:      'question': 'abc',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'dca',
116: 1:      'question': 'cad',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'das',
116: 1:      'question': 'asd',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'zxy',
116: 1:      'question': 'xyz',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'aaa',
116: 1:      'question': 'aaa',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '312',
116: 1:      'question': '123',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'fdE',
116: 1:      'question': 'dEf',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'czx',
116: 1:      'question': 'zxc',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'eqw',
116: 1:      'question': 'qwe',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'yrt',
116: 1:      'question': 'rty',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'bmn',
116: 1:      'question': 'mnb',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'nvb',
116: 1:      'question': 'vbn',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'hfg',
116: 1:      'question': 'fgh',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'kij',
116: 1:      'question': 'ijk',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'nlm',
116: 1:      'question': 'lmn',
116: 1:      'valid': true
116: 1:    }
116: 1:  ],
116: 1:  'level': 4,
116: 1:  'nextQuestion': 'pqr',
116: 1:  'questions': [
116: 1:    'abc',
116: 1:    'cad',
116: 1:    'asd',
116: 1:    'xyz',
116: 1:    'aaa',
116: 1:    '123',
116: 1:    'dEf',
116: 1:    'zxc',
116: 1:    'qwe',
116: 1:    'rty',
116: 1:    'mnb',
116: 1:    'vbn',
116: 1:    'fgh',
116: 1:    'ijk',
116: 1:    'lmn',
116: 1:    'pqr'
116: 1:  ]
116: 1:}
116: 1:Scores: 3819
116: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb', 'hfg', 'kij', 'nlm', 'rpq']')
116: 1:Fire Event: PassTest{complexity=12, testCount=21}
------------------------------------------
117: 1:BoardData {
117: 1:  'description': 'The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...',
117: 1:  'expectedAnswer': 'ust',
117: 1:  'history': [
117: 1:    {
117: 1:      'answer': 'cab',
117: 1:      'question': 'abc',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'dca',
117: 1:      'question': 'cad',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'das',
117: 1:      'question': 'asd',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'zxy',
117: 1:      'question': 'xyz',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'aaa',
117: 1:      'question': 'aaa',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '312',
117: 1:      'question': '123',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'fdE',
117: 1:      'question': 'dEf',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'czx',
117: 1:      'question': 'zxc',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'eqw',
117: 1:      'question': 'qwe',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'yrt',
117: 1:      'question': 'rty',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'bmn',
117: 1:      'question': 'mnb',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'nvb',
117: 1:      'question': 'vbn',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'hfg',
117: 1:      'question': 'fgh',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'kij',
117: 1:      'question': 'ijk',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'nlm',
117: 1:      'question': 'lmn',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'rpq',
117: 1:      'question': 'pqr',
117: 1:      'valid': true
117: 1:    }
117: 1:  ],
117: 1:  'level': 4,
117: 1:  'nextQuestion': 'stu',
117: 1:  'questions': [
117: 1:    'abc',
117: 1:    'cad',
117: 1:    'asd',
117: 1:    'xyz',
117: 1:    'aaa',
117: 1:    '123',
117: 1:    'dEf',
117: 1:    'zxc',
117: 1:    'qwe',
117: 1:    'rty',
117: 1:    'mnb',
117: 1:    'vbn',
117: 1:    'fgh',
117: 1:    'ijk',
117: 1:    'lmn',
117: 1:    'pqr',
117: 1:    'stu'
117: 1:  ]
117: 1:}
117: 1:Scores: 3824
117: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb', 'hfg', 'kij', 'nlm', 'rpq', 'ust']')
117: 1:Fire Event: PassTest{complexity=12, testCount=21}
------------------------------------------
118: 1:BoardData {
118: 1:  'description': 'The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...',
118: 1:  'expectedAnswer': 'ywx',
118: 1:  'history': [
118: 1:    {
118: 1:      'answer': 'cab',
118: 1:      'question': 'abc',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'dca',
118: 1:      'question': 'cad',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'das',
118: 1:      'question': 'asd',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'zxy',
118: 1:      'question': 'xyz',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'aaa',
118: 1:      'question': 'aaa',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '312',
118: 1:      'question': '123',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'fdE',
118: 1:      'question': 'dEf',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'czx',
118: 1:      'question': 'zxc',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'eqw',
118: 1:      'question': 'qwe',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'yrt',
118: 1:      'question': 'rty',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'bmn',
118: 1:      'question': 'mnb',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'nvb',
118: 1:      'question': 'vbn',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'hfg',
118: 1:      'question': 'fgh',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'kij',
118: 1:      'question': 'ijk',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'nlm',
118: 1:      'question': 'lmn',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'rpq',
118: 1:      'question': 'pqr',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'ust',
118: 1:      'question': 'stu',
118: 1:      'valid': true
118: 1:    }
118: 1:  ],
118: 1:  'level': 4,
118: 1:  'nextQuestion': 'wxy',
118: 1:  'questions': [
118: 1:    'abc',
118: 1:    'cad',
118: 1:    'asd',
118: 1:    'xyz',
118: 1:    'aaa',
118: 1:    '123',
118: 1:    'dEf',
118: 1:    'zxc',
118: 1:    'qwe',
118: 1:    'rty',
118: 1:    'mnb',
118: 1:    'vbn',
118: 1:    'fgh',
118: 1:    'ijk',
118: 1:    'lmn',
118: 1:    'pqr',
118: 1:    'stu',
118: 1:    'wxy'
118: 1:  ]
118: 1:}
118: 1:Scores: 3829
118: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb', 'hfg', 'kij', 'nlm', 'rpq', 'ust', 'ywx']')
118: 1:Fire Event: PassTest{complexity=12, testCount=21}
------------------------------------------
119: 1:BoardData {
119: 1:  'description': 'The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...',
119: 1:  'expectedAnswer': '222',
119: 1:  'history': [
119: 1:    {
119: 1:      'answer': 'cab',
119: 1:      'question': 'abc',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'dca',
119: 1:      'question': 'cad',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'das',
119: 1:      'question': 'asd',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'zxy',
119: 1:      'question': 'xyz',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'aaa',
119: 1:      'question': 'aaa',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '312',
119: 1:      'question': '123',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'fdE',
119: 1:      'question': 'dEf',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'czx',
119: 1:      'question': 'zxc',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'eqw',
119: 1:      'question': 'qwe',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'yrt',
119: 1:      'question': 'rty',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'bmn',
119: 1:      'question': 'mnb',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'nvb',
119: 1:      'question': 'vbn',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'hfg',
119: 1:      'question': 'fgh',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'kij',
119: 1:      'question': 'ijk',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'nlm',
119: 1:      'question': 'lmn',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'rpq',
119: 1:      'question': 'pqr',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'ust',
119: 1:      'question': 'stu',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'ywx',
119: 1:      'question': 'wxy',
119: 1:      'valid': true
119: 1:    }
119: 1:  ],
119: 1:  'level': 4,
119: 1:  'nextQuestion': '222',
119: 1:  'questions': [
119: 1:    'abc',
119: 1:    'cad',
119: 1:    'asd',
119: 1:    'xyz',
119: 1:    'aaa',
119: 1:    '123',
119: 1:    'dEf',
119: 1:    'zxc',
119: 1:    'qwe',
119: 1:    'rty',
119: 1:    'mnb',
119: 1:    'vbn',
119: 1:    'fgh',
119: 1:    'ijk',
119: 1:    'lmn',
119: 1:    'pqr',
119: 1:    'stu',
119: 1:    'wxy',
119: 1:    '222'
119: 1:  ]
119: 1:}
119: 1:Scores: 3834
119: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb', 'hfg', 'kij', 'nlm', 'rpq', 'ust', 'ywx', '222']')
119: 1:Fire Event: PassTest{complexity=12, testCount=21}
------------------------------------------
120: 1:BoardData {
120: 1:  'description': 'The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...',
120: 1:  'expectedAnswer': '978',
120: 1:  'history': [
120: 1:    {
120: 1:      'answer': 'cab',
120: 1:      'question': 'abc',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'dca',
120: 1:      'question': 'cad',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'das',
120: 1:      'question': 'asd',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'zxy',
120: 1:      'question': 'xyz',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'aaa',
120: 1:      'question': 'aaa',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '312',
120: 1:      'question': '123',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'fdE',
120: 1:      'question': 'dEf',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'czx',
120: 1:      'question': 'zxc',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'eqw',
120: 1:      'question': 'qwe',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'yrt',
120: 1:      'question': 'rty',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'bmn',
120: 1:      'question': 'mnb',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'nvb',
120: 1:      'question': 'vbn',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'hfg',
120: 1:      'question': 'fgh',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'kij',
120: 1:      'question': 'ijk',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'nlm',
120: 1:      'question': 'lmn',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'rpq',
120: 1:      'question': 'pqr',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'ust',
120: 1:      'question': 'stu',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'ywx',
120: 1:      'question': 'wxy',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '222',
120: 1:      'question': '222',
120: 1:      'valid': true
120: 1:    }
120: 1:  ],
120: 1:  'level': 4,
120: 1:  'nextQuestion': '789',
120: 1:  'questions': [
120: 1:    'abc',
120: 1:    'cad',
120: 1:    'asd',
120: 1:    'xyz',
120: 1:    'aaa',
120: 1:    '123',
120: 1:    'dEf',
120: 1:    'zxc',
120: 1:    'qwe',
120: 1:    'rty',
120: 1:    'mnb',
120: 1:    'vbn',
120: 1:    'fgh',
120: 1:    'ijk',
120: 1:    'lmn',
120: 1:    'pqr',
120: 1:    'stu',
120: 1:    'wxy',
120: 1:    '222',
120: 1:    '789'
120: 1:  ]
120: 1:}
120: 1:Scores: 3839
120: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb', 'hfg', 'kij', 'nlm', 'rpq', 'ust', 'ywx', '222', '978']')
120: 1:Fire Event: PassTest{complexity=12, testCount=21}
------------------------------------------
121: 1:BoardData {
121: 1:  'description': 'The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...',
121: 1:  'expectedAnswer': '009',
121: 1:  'history': [
121: 1:    {
121: 1:      'answer': 'cab',
121: 1:      'question': 'abc',
121: 1:      'valid': true
121: 1:    },
121: 1:    {
121: 1:      'answer': 'dca',
121: 1:      'question': 'cad',
121: 1:      'valid': true
121: 1:    },
121: 1:    {
121: 1:      'answer': 'das',
121: 1:      'question': 'asd',
121: 1:      'valid': true
121: 1:    },
121: 1:    {
121: 1:      'answer': 'zxy',
121: 1:      'question': 'xyz',
121: 1:      'valid': true
121: 1:    },
121: 1:    {
121: 1:      'answer': 'aaa',
121: 1:      'question': 'aaa',
121: 1:      'valid': true
121: 1:    },
121: 1:    {
121: 1:      'answer': '312',
121: 1:      'question': '123',
121: 1:      'valid': true
121: 1:    },
121: 1:    {
121: 1:      'answer': 'fdE',
121: 1:      'question': 'dEf',
121: 1:      'valid': true
121: 1:    },
121: 1:    {
121: 1:      'answer': 'czx',
121: 1:      'question': 'zxc',
121: 1:      'valid': true
121: 1:    },
121: 1:    {
121: 1:      'answer': 'eqw',
121: 1:      'question': 'qwe',
121: 1:      'valid': true
121: 1:    },
121: 1:    {
121: 1:      'answer': 'yrt',
121: 1:      'question': 'rty',
121: 1:      'valid': true
121: 1:    },
121: 1:    {
121: 1:      'answer': 'bmn',
121: 1:      'question': 'mnb',
121: 1:      'valid': true
121: 1:    },
121: 1:    {
121: 1:      'answer': 'nvb',
121: 1:      'question': 'vbn',
121: 1:      'valid': true
121: 1:    },
121: 1:    {
121: 1:      'answer': 'hfg',
121: 1:      'question': 'fgh',
121: 1:      'valid': true
121: 1:    },
121: 1:    {
121: 1:      'answer': 'kij',
121: 1:      'question': 'ijk',
121: 1:      'valid': true
121: 1:    },
121: 1:    {
121: 1:      'answer': 'nlm',
121: 1:      'question': 'lmn',
121: 1:      'valid': true
121: 1:    },
121: 1:    {
121: 1:      'answer': 'rpq',
121: 1:      'question': 'pqr',
121: 1:      'valid': true
121: 1:    },
121: 1:    {
121: 1:      'answer': 'ust',
121: 1:      'question': 'stu',
121: 1:      'valid': true
121: 1:    },
121: 1:    {
121: 1:      'answer': 'ywx',
121: 1:      'question': 'wxy',
121: 1:      'valid': true
121: 1:    },
121: 1:    {
121: 1:      'answer': '222',
121: 1:      'question': '222',
121: 1:      'valid': true
121: 1:    },
121: 1:    {
121: 1:      'answer': '978',
121: 1:      'question': '789',
121: 1:      'valid': true
121: 1:    }
121: 1:  ],
121: 1:  'level': 4,
121: 1:  'nextQuestion': '090',
121: 1:  'questions': [
121: 1:    'abc',
121: 1:    'cad',
121: 1:    'asd',
121: 1:    'xyz',
121: 1:    'aaa',
121: 1:    '123',
121: 1:    'dEf',
121: 1:    'zxc',
121: 1:    'qwe',
121: 1:    'rty',
121: 1:    'mnb',
121: 1:    'vbn',
121: 1:    'fgh',
121: 1:    'ijk',
121: 1:    'lmn',
121: 1:    'pqr',
121: 1:    'stu',
121: 1:    'wxy',
121: 1:    '222',
121: 1:    '789',
121: 1:    '090'
121: 1:  ]
121: 1:}
121: 1:Scores: 3844
121: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb', 'hfg', 'kij', 'nlm', 'rpq', 'ust', 'ywx', '222', '978', '009']')
121: 1:Fire Event: PassTest{complexity=12, testCount=21}
121: 1:Fire Event: NextAlgorithm{complexity=12, time=0}
------------------------------------------
122: 1:BoardData {
122: 1:  'description': 'Wait for next level. Please send 'message('StartNextLevel')' command.',
122: 1:  'history': [
122: 1:    {
122: 1:      'answer': 'cab',
122: 1:      'question': 'abc',
122: 1:      'valid': true
122: 1:    },
122: 1:    {
122: 1:      'answer': 'dca',
122: 1:      'question': 'cad',
122: 1:      'valid': true
122: 1:    },
122: 1:    {
122: 1:      'answer': 'das',
122: 1:      'question': 'asd',
122: 1:      'valid': true
122: 1:    },
122: 1:    {
122: 1:      'answer': 'zxy',
122: 1:      'question': 'xyz',
122: 1:      'valid': true
122: 1:    },
122: 1:    {
122: 1:      'answer': 'aaa',
122: 1:      'question': 'aaa',
122: 1:      'valid': true
122: 1:    },
122: 1:    {
122: 1:      'answer': '312',
122: 1:      'question': '123',
122: 1:      'valid': true
122: 1:    },
122: 1:    {
122: 1:      'answer': 'fdE',
122: 1:      'question': 'dEf',
122: 1:      'valid': true
122: 1:    },
122: 1:    {
122: 1:      'answer': 'czx',
122: 1:      'question': 'zxc',
122: 1:      'valid': true
122: 1:    },
122: 1:    {
122: 1:      'answer': 'eqw',
122: 1:      'question': 'qwe',
122: 1:      'valid': true
122: 1:    },
122: 1:    {
122: 1:      'answer': 'yrt',
122: 1:      'question': 'rty',
122: 1:      'valid': true
122: 1:    },
122: 1:    {
122: 1:      'answer': 'bmn',
122: 1:      'question': 'mnb',
122: 1:      'valid': true
122: 1:    },
122: 1:    {
122: 1:      'answer': 'nvb',
122: 1:      'question': 'vbn',
122: 1:      'valid': true
122: 1:    },
122: 1:    {
122: 1:      'answer': 'hfg',
122: 1:      'question': 'fgh',
122: 1:      'valid': true
122: 1:    },
122: 1:    {
122: 1:      'answer': 'kij',
122: 1:      'question': 'ijk',
122: 1:      'valid': true
122: 1:    },
122: 1:    {
122: 1:      'answer': 'nlm',
122: 1:      'question': 'lmn',
122: 1:      'valid': true
122: 1:    },
122: 1:    {
122: 1:      'answer': 'rpq',
122: 1:      'question': 'pqr',
122: 1:      'valid': true
122: 1:    },
122: 1:    {
122: 1:      'answer': 'ust',
122: 1:      'question': 'stu',
122: 1:      'valid': true
122: 1:    },
122: 1:    {
122: 1:      'answer': 'ywx',
122: 1:      'question': 'wxy',
122: 1:      'valid': true
122: 1:    },
122: 1:    {
122: 1:      'answer': '222',
122: 1:      'question': '222',
122: 1:      'valid': true
122: 1:    },
122: 1:    {
122: 1:      'answer': '978',
122: 1:      'question': '789',
122: 1:      'valid': true
122: 1:    },
122: 1:    {
122: 1:      'answer': '009',
122: 1:      'question': '090',
122: 1:      'valid': true
122: 1:    }
122: 1:  ],
122: 1:  'level': 4,
122: 1:  'questions': []
122: 1:}
122: 1:Scores: 5468
122: 1:Answer: message('StartNextLevel')
122: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
123: 1:BoardData {
123: 1:  'description': 'Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702',
123: 1:  'expectedAnswer': '222',
123: 1:  'history': [],
123: 1:  'level': 5,
123: 1:  'nextQuestion': '111',
123: 1:  'questions': ['111']
123: 1:}
123: 1:Scores: 5468
123: 1:Answer: message('['222']')
123: 1:Fire Event: PassTest{complexity=13, testCount=12}
------------------------------------------
124: 1:BoardData {
124: 1:  'description': 'Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702',
124: 1:  'expectedAnswer': '333',
124: 1:  'history': [{
124: 1:    'answer': '222',
124: 1:    'question': '111',
124: 1:    'valid': true
124: 1:  }],
124: 1:  'level': 5,
124: 1:  'nextQuestion': '222',
124: 1:  'questions': [
124: 1:    '111',
124: 1:    '222'
124: 1:  ]
124: 1:}
124: 1:Scores: 5478
124: 1:Answer: message('['222', '333']')
124: 1:Fire Event: PassTest{complexity=13, testCount=12}
------------------------------------------
125: 1:BoardData {
125: 1:  'description': 'Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702',
125: 1:  'expectedAnswer': '444',
125: 1:  'history': [
125: 1:    {
125: 1:      'answer': '222',
125: 1:      'question': '111',
125: 1:      'valid': true
125: 1:    },
125: 1:    {
125: 1:      'answer': '333',
125: 1:      'question': '222',
125: 1:      'valid': true
125: 1:    }
125: 1:  ],
125: 1:  'level': 5,
125: 1:  'nextQuestion': '333',
125: 1:  'questions': [
125: 1:    '111',
125: 1:    '222',
125: 1:    '333'
125: 1:  ]
125: 1:}
125: 1:Scores: 5488
125: 1:Answer: message('['222', '333', '444']')
125: 1:Fire Event: PassTest{complexity=13, testCount=12}
------------------------------------------
126: 1:BoardData {
126: 1:  'description': 'Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702',
126: 1:  'expectedAnswer': '555',
126: 1:  'history': [
126: 1:    {
126: 1:      'answer': '222',
126: 1:      'question': '111',
126: 1:      'valid': true
126: 1:    },
126: 1:    {
126: 1:      'answer': '333',
126: 1:      'question': '222',
126: 1:      'valid': true
126: 1:    },
126: 1:    {
126: 1:      'answer': '444',
126: 1:      'question': '333',
126: 1:      'valid': true
126: 1:    }
126: 1:  ],
126: 1:  'level': 5,
126: 1:  'nextQuestion': '444',
126: 1:  'questions': [
126: 1:    '111',
126: 1:    '222',
126: 1:    '333',
126: 1:    '444'
126: 1:  ]
126: 1:}
126: 1:Scores: 5498
126: 1:Answer: message('['222', '333', '444', '555']')
126: 1:Fire Event: PassTest{complexity=13, testCount=12}
------------------------------------------
127: 1:BoardData {
127: 1:  'description': 'Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702',
127: 1:  'expectedAnswer': '666',
127: 1:  'history': [
127: 1:    {
127: 1:      'answer': '222',
127: 1:      'question': '111',
127: 1:      'valid': true
127: 1:    },
127: 1:    {
127: 1:      'answer': '333',
127: 1:      'question': '222',
127: 1:      'valid': true
127: 1:    },
127: 1:    {
127: 1:      'answer': '444',
127: 1:      'question': '333',
127: 1:      'valid': true
127: 1:    },
127: 1:    {
127: 1:      'answer': '555',
127: 1:      'question': '444',
127: 1:      'valid': true
127: 1:    }
127: 1:  ],
127: 1:  'level': 5,
127: 1:  'nextQuestion': '555',
127: 1:  'questions': [
127: 1:    '111',
127: 1:    '222',
127: 1:    '333',
127: 1:    '444',
127: 1:    '555'
127: 1:  ]
127: 1:}
127: 1:Scores: 5508
127: 1:Answer: message('['222', '333', '444', '555', '666']')
127: 1:Fire Event: PassTest{complexity=13, testCount=12}
------------------------------------------
128: 1:BoardData {
128: 1:  'description': 'Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702',
128: 1:  'expectedAnswer': '121',
128: 1:  'history': [
128: 1:    {
128: 1:      'answer': '222',
128: 1:      'question': '111',
128: 1:      'valid': true
128: 1:    },
128: 1:    {
128: 1:      'answer': '333',
128: 1:      'question': '222',
128: 1:      'valid': true
128: 1:    },
128: 1:    {
128: 1:      'answer': '444',
128: 1:      'question': '333',
128: 1:      'valid': true
128: 1:    },
128: 1:    {
128: 1:      'answer': '555',
128: 1:      'question': '444',
128: 1:      'valid': true
128: 1:    },
128: 1:    {
128: 1:      'answer': '666',
128: 1:      'question': '555',
128: 1:      'valid': true
128: 1:    }
128: 1:  ],
128: 1:  'level': 5,
128: 1:  'nextQuestion': '100',
128: 1:  'questions': [
128: 1:    '111',
128: 1:    '222',
128: 1:    '333',
128: 1:    '444',
128: 1:    '555',
128: 1:    '100'
128: 1:  ]
128: 1:}
128: 1:Scores: 5518
128: 1:Answer: message('['222', '333', '444', '555', '666', '121']')
128: 1:Fire Event: PassTest{complexity=13, testCount=12}
------------------------------------------
129: 1:BoardData {
129: 1:  'description': 'Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702',
129: 1:  'expectedAnswer': '423',
129: 1:  'history': [
129: 1:    {
129: 1:      'answer': '222',
129: 1:      'question': '111',
129: 1:      'valid': true
129: 1:    },
129: 1:    {
129: 1:      'answer': '333',
129: 1:      'question': '222',
129: 1:      'valid': true
129: 1:    },
129: 1:    {
129: 1:      'answer': '444',
129: 1:      'question': '333',
129: 1:      'valid': true
129: 1:    },
129: 1:    {
129: 1:      'answer': '555',
129: 1:      'question': '444',
129: 1:      'valid': true
129: 1:    },
129: 1:    {
129: 1:      'answer': '666',
129: 1:      'question': '555',
129: 1:      'valid': true
129: 1:    },
129: 1:    {
129: 1:      'answer': '121',
129: 1:      'question': '100',
129: 1:      'valid': true
129: 1:    }
129: 1:  ],
129: 1:  'level': 5,
129: 1:  'nextQuestion': '123',
129: 1:  'questions': [
129: 1:    '111',
129: 1:    '222',
129: 1:    '333',
129: 1:    '444',
129: 1:    '555',
129: 1:    '100',
129: 1:    '123'
129: 1:  ]
129: 1:}
129: 1:Scores: 5528
129: 1:Answer: message('['222', '333', '444', '555', '666', '121', '423']')
129: 1:Fire Event: PassTest{complexity=13, testCount=12}
------------------------------------------
130: 1:BoardData {
130: 1:  'description': 'Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702',
130: 1:  'expectedAnswer': '000',
130: 1:  'history': [
130: 1:    {
130: 1:      'answer': '222',
130: 1:      'question': '111',
130: 1:      'valid': true
130: 1:    },
130: 1:    {
130: 1:      'answer': '333',
130: 1:      'question': '222',
130: 1:      'valid': true
130: 1:    },
130: 1:    {
130: 1:      'answer': '444',
130: 1:      'question': '333',
130: 1:      'valid': true
130: 1:    },
130: 1:    {
130: 1:      'answer': '555',
130: 1:      'question': '444',
130: 1:      'valid': true
130: 1:    },
130: 1:    {
130: 1:      'answer': '666',
130: 1:      'question': '555',
130: 1:      'valid': true
130: 1:    },
130: 1:    {
130: 1:      'answer': '121',
130: 1:      'question': '100',
130: 1:      'valid': true
130: 1:    },
130: 1:    {
130: 1:      'answer': '423',
130: 1:      'question': '123',
130: 1:      'valid': true
130: 1:    }
130: 1:  ],
130: 1:  'level': 5,
130: 1:  'nextQuestion': '999',
130: 1:  'questions': [
130: 1:    '111',
130: 1:    '222',
130: 1:    '333',
130: 1:    '444',
130: 1:    '555',
130: 1:    '100',
130: 1:    '123',
130: 1:    '999'
130: 1:  ]
130: 1:}
130: 1:Scores: 5538
130: 1:Answer: message('['222', '333', '444', '555', '666', '121', '423', '000']')
130: 1:Fire Event: PassTest{complexity=13, testCount=12}
------------------------------------------
131: 1:BoardData {
131: 1:  'description': 'Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702',
131: 1:  'expectedAnswer': '089',
131: 1:  'history': [
131: 1:    {
131: 1:      'answer': '222',
131: 1:      'question': '111',
131: 1:      'valid': true
131: 1:    },
131: 1:    {
131: 1:      'answer': '333',
131: 1:      'question': '222',
131: 1:      'valid': true
131: 1:    },
131: 1:    {
131: 1:      'answer': '444',
131: 1:      'question': '333',
131: 1:      'valid': true
131: 1:    },
131: 1:    {
131: 1:      'answer': '555',
131: 1:      'question': '444',
131: 1:      'valid': true
131: 1:    },
131: 1:    {
131: 1:      'answer': '666',
131: 1:      'question': '555',
131: 1:      'valid': true
131: 1:    },
131: 1:    {
131: 1:      'answer': '121',
131: 1:      'question': '100',
131: 1:      'valid': true
131: 1:    },
131: 1:    {
131: 1:      'answer': '423',
131: 1:      'question': '123',
131: 1:      'valid': true
131: 1:    },
131: 1:    {
131: 1:      'answer': '000',
131: 1:      'question': '999',
131: 1:      'valid': true
131: 1:    }
131: 1:  ],
131: 1:  'level': 5,
131: 1:  'nextQuestion': '789',
131: 1:  'questions': [
131: 1:    '111',
131: 1:    '222',
131: 1:    '333',
131: 1:    '444',
131: 1:    '555',
131: 1:    '100',
131: 1:    '123',
131: 1:    '999',
131: 1:    '789'
131: 1:  ]
131: 1:}
131: 1:Scores: 5548
131: 1:Answer: message('['222', '333', '444', '555', '666', '121', '423', '000', '089']')
131: 1:Fire Event: PassTest{complexity=13, testCount=12}
------------------------------------------
132: 1:BoardData {
132: 1:  'description': 'Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702',
132: 1:  'expectedAnswer': '111',
132: 1:  'history': [
132: 1:    {
132: 1:      'answer': '222',
132: 1:      'question': '111',
132: 1:      'valid': true
132: 1:    },
132: 1:    {
132: 1:      'answer': '333',
132: 1:      'question': '222',
132: 1:      'valid': true
132: 1:    },
132: 1:    {
132: 1:      'answer': '444',
132: 1:      'question': '333',
132: 1:      'valid': true
132: 1:    },
132: 1:    {
132: 1:      'answer': '555',
132: 1:      'question': '444',
132: 1:      'valid': true
132: 1:    },
132: 1:    {
132: 1:      'answer': '666',
132: 1:      'question': '555',
132: 1:      'valid': true
132: 1:    },
132: 1:    {
132: 1:      'answer': '121',
132: 1:      'question': '100',
132: 1:      'valid': true
132: 1:    },
132: 1:    {
132: 1:      'answer': '423',
132: 1:      'question': '123',
132: 1:      'valid': true
132: 1:    },
132: 1:    {
132: 1:      'answer': '000',
132: 1:      'question': '999',
132: 1:      'valid': true
132: 1:    },
132: 1:    {
132: 1:      'answer': '089',
132: 1:      'question': '789',
132: 1:      'valid': true
132: 1:    }
132: 1:  ],
132: 1:  'level': 5,
132: 1:  'nextQuestion': '000',
132: 1:  'questions': [
132: 1:    '111',
132: 1:    '222',
132: 1:    '333',
132: 1:    '444',
132: 1:    '555',
132: 1:    '100',
132: 1:    '123',
132: 1:    '999',
132: 1:    '789',
132: 1:    '000'
132: 1:  ]
132: 1:}
132: 1:Scores: 5558
132: 1:Answer: message('['222', '333', '444', '555', '666', '121', '423', '000', '089', '111']')
132: 1:Fire Event: PassTest{complexity=13, testCount=12}
------------------------------------------
133: 1:BoardData {
133: 1:  'description': 'Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702',
133: 1:  'expectedAnswer': '001',
133: 1:  'history': [
133: 1:    {
133: 1:      'answer': '222',
133: 1:      'question': '111',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '333',
133: 1:      'question': '222',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '444',
133: 1:      'question': '333',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '555',
133: 1:      'question': '444',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '666',
133: 1:      'question': '555',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '121',
133: 1:      'question': '100',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '423',
133: 1:      'question': '123',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '000',
133: 1:      'question': '999',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '089',
133: 1:      'question': '789',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '111',
133: 1:      'question': '000',
133: 1:      'valid': true
133: 1:    }
133: 1:  ],
133: 1:  'level': 5,
133: 1:  'nextQuestion': '909',
133: 1:  'questions': [
133: 1:    '111',
133: 1:    '222',
133: 1:    '333',
133: 1:    '444',
133: 1:    '555',
133: 1:    '100',
133: 1:    '123',
133: 1:    '999',
133: 1:    '789',
133: 1:    '000',
133: 1:    '909'
133: 1:  ]
133: 1:}
133: 1:Scores: 5568
133: 1:Answer: message('['222', '333', '444', '555', '666', '121', '423', '000', '089', '111', '001']')
133: 1:Fire Event: PassTest{complexity=13, testCount=12}
------------------------------------------
134: 1:BoardData {
134: 1:  'description': 'Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702',
134: 1:  'expectedAnswer': '110',
134: 1:  'history': [
134: 1:    {
134: 1:      'answer': '222',
134: 1:      'question': '111',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '333',
134: 1:      'question': '222',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '444',
134: 1:      'question': '333',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '555',
134: 1:      'question': '444',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '666',
134: 1:      'question': '555',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '121',
134: 1:      'question': '100',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '423',
134: 1:      'question': '123',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '000',
134: 1:      'question': '999',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '089',
134: 1:      'question': '789',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '111',
134: 1:      'question': '000',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '001',
134: 1:      'question': '909',
134: 1:      'valid': true
134: 1:    }
134: 1:  ],
134: 1:  'level': 5,
134: 1:  'nextQuestion': '090',
134: 1:  'questions': [
134: 1:    '111',
134: 1:    '222',
134: 1:    '333',
134: 1:    '444',
134: 1:    '555',
134: 1:    '100',
134: 1:    '123',
134: 1:    '999',
134: 1:    '789',
134: 1:    '000',
134: 1:    '909',
134: 1:    '090'
134: 1:  ]
134: 1:}
134: 1:Scores: 5578
134: 1:Answer: message('['222', '333', '444', '555', '666', '121', '423', '000', '089', '111', '001', '110']')
134: 1:Fire Event: PassTest{complexity=13, testCount=12}
134: 1:Fire Event: NextAlgorithm{complexity=13, time=0}
------------------------------------------
135: 1:BoardData {
135: 1:  'description': 'Wait for next level. Please send 'message('StartNextLevel')' command.',
135: 1:  'history': [
135: 1:    {
135: 1:      'answer': '222',
135: 1:      'question': '111',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '333',
135: 1:      'question': '222',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '444',
135: 1:      'question': '333',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '555',
135: 1:      'question': '444',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '666',
135: 1:      'question': '555',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '121',
135: 1:      'question': '100',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '423',
135: 1:      'question': '123',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '000',
135: 1:      'question': '999',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '089',
135: 1:      'question': '789',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '111',
135: 1:      'question': '000',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '001',
135: 1:      'question': '909',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '110',
135: 1:      'question': '090',
135: 1:      'valid': true
135: 1:    }
135: 1:  ],
135: 1:  'level': 5,
135: 1:  'questions': []
135: 1:}
135: 1:Scores: 7342
135: 1:Answer: message('StartNextLevel')
135: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
136: 1:BoardData {
136: 1:  'description': 'Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture',
136: 1:  'expectedAnswer': '101',
136: 1:  'history': [],
136: 1:  'level': 6,
136: 1:  'nextQuestion': '1',
136: 1:  'questions': ['1']
136: 1:}
136: 1:Scores: 7342
136: 1:Answer: message('['101']')
136: 1:Fire Event: PassTest{complexity=15, testCount=25}
------------------------------------------
137: 1:BoardData {
137: 1:  'description': 'Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture',
137: 1:  'expectedAnswer': '112',
137: 1:  'history': [{
137: 1:    'answer': '101',
137: 1:    'question': '1',
137: 1:    'valid': true
137: 1:  }],
137: 1:  'level': 6,
137: 1:  'nextQuestion': '2',
137: 1:  'questions': [
137: 1:    '1',
137: 1:    '2'
137: 1:  ]
137: 1:}
137: 1:Scores: 7348
137: 1:Answer: message('['101', '112']')
137: 1:Fire Event: PassTest{complexity=15, testCount=25}
------------------------------------------
138: 1:BoardData {
138: 1:  'description': 'Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture',
138: 1:  'expectedAnswer': '131',
138: 1:  'history': [
138: 1:    {
138: 1:      'answer': '101',
138: 1:      'question': '1',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '112',
138: 1:      'question': '2',
138: 1:      'valid': true
138: 1:    }
138: 1:  ],
138: 1:  'level': 6,
138: 1:  'nextQuestion': '3',
138: 1:  'questions': [
138: 1:    '1',
138: 1:    '2',
138: 1:    '3'
138: 1:  ]
138: 1:}
138: 1:Scores: 7354
138: 1:Answer: message('['101', '112', '131']')
138: 1:Fire Event: PassTest{complexity=15, testCount=25}
------------------------------------------
139: 1:BoardData {
139: 1:  'description': 'Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture',
139: 1:  'expectedAnswer': '415',
139: 1:  'history': [
139: 1:    {
139: 1:      'answer': '101',
139: 1:      'question': '1',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '112',
139: 1:      'question': '2',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '131',
139: 1:      'question': '3',
139: 1:      'valid': true
139: 1:    }
139: 1:  ],
139: 1:  'level': 6,
139: 1:  'nextQuestion': '4',
139: 1:  'questions': [
139: 1:    '1',
139: 1:    '2',
139: 1:    '3',
139: 1:    '4'
139: 1:  ]
139: 1:}
139: 1:Scores: 7360
139: 1:Answer: message('['101', '112', '131', '415']')
139: 1:Fire Event: PassTest{complexity=15, testCount=25}
------------------------------------------
140: 1:BoardData {
140: 1:  'description': 'Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture',
140: 1:  'expectedAnswer': '161',
140: 1:  'history': [
140: 1:    {
140: 1:      'answer': '101',
140: 1:      'question': '1',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '112',
140: 1:      'question': '2',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '131',
140: 1:      'question': '3',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '415',
140: 1:      'question': '4',
140: 1:      'valid': true
140: 1:    }
140: 1:  ],
140: 1:  'level': 6,
140: 1:  'nextQuestion': '5',
140: 1:  'questions': [
140: 1:    '1',
140: 1:    '2',
140: 1:    '3',
140: 1:    '4',
140: 1:    '5'
140: 1:  ]
140: 1:}
140: 1:Scores: 7366
140: 1:Answer: message('['101', '112', '131', '415', '161']')
140: 1:Fire Event: PassTest{complexity=15, testCount=25}
------------------------------------------
141: 1:BoardData {
141: 1:  'description': 'Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture',
141: 1:  'expectedAnswer': '718',
141: 1:  'history': [
141: 1:    {
141: 1:      'answer': '101',
141: 1:      'question': '1',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '112',
141: 1:      'question': '2',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '131',
141: 1:      'question': '3',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '415',
141: 1:      'question': '4',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '161',
141: 1:      'question': '5',
141: 1:      'valid': true
141: 1:    }
141: 1:  ],
141: 1:  'level': 6,
141: 1:  'nextQuestion': '6',
141: 1:  'questions': [
141: 1:    '1',
141: 1:    '2',
141: 1:    '3',
141: 1:    '4',
141: 1:    '5',
141: 1:    '6'
141: 1:  ]
141: 1:}
141: 1:Scores: 7372
141: 1:Answer: message('['101', '112', '131', '415', '161', '718']')
141: 1:Fire Event: PassTest{complexity=15, testCount=25}
------------------------------------------
142: 1:BoardData {
142: 1:  'description': 'Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture',
142: 1:  'expectedAnswer': '192',
142: 1:  'history': [
142: 1:    {
142: 1:      'answer': '101',
142: 1:      'question': '1',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '112',
142: 1:      'question': '2',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '131',
142: 1:      'question': '3',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '415',
142: 1:      'question': '4',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '161',
142: 1:      'question': '5',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '718',
142: 1:      'question': '6',
142: 1:      'valid': true
142: 1:    }
142: 1:  ],
142: 1:  'level': 6,
142: 1:  'nextQuestion': '7',
142: 1:  'questions': [
142: 1:    '1',
142: 1:    '2',
142: 1:    '3',
142: 1:    '4',
142: 1:    '5',
142: 1:    '6',
142: 1:    '7'
142: 1:  ]
142: 1:}
142: 1:Scores: 7378
142: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192']')
142: 1:Fire Event: PassTest{complexity=15, testCount=25}
------------------------------------------
143: 1:BoardData {
143: 1:  'description': 'Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture',
143: 1:  'expectedAnswer': '021',
143: 1:  'history': [
143: 1:    {
143: 1:      'answer': '101',
143: 1:      'question': '1',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '112',
143: 1:      'question': '2',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '131',
143: 1:      'question': '3',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '415',
143: 1:      'question': '4',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '161',
143: 1:      'question': '5',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '718',
143: 1:      'question': '6',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '192',
143: 1:      'question': '7',
143: 1:      'valid': true
143: 1:    }
143: 1:  ],
143: 1:  'level': 6,
143: 1:  'nextQuestion': '8',
143: 1:  'questions': [
143: 1:    '1',
143: 1:    '2',
143: 1:    '3',
143: 1:    '4',
143: 1:    '5',
143: 1:    '6',
143: 1:    '7',
143: 1:    '8'
143: 1:  ]
143: 1:}
143: 1:Scores: 7384
143: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021']')
143: 1:Fire Event: PassTest{complexity=15, testCount=25}
------------------------------------------
144: 1:BoardData {
144: 1:  'description': 'Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture',
144: 1:  'expectedAnswer': '222',
144: 1:  'history': [
144: 1:    {
144: 1:      'answer': '101',
144: 1:      'question': '1',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '112',
144: 1:      'question': '2',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '131',
144: 1:      'question': '3',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '415',
144: 1:      'question': '4',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '161',
144: 1:      'question': '5',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '718',
144: 1:      'question': '6',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '192',
144: 1:      'question': '7',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '021',
144: 1:      'question': '8',
144: 1:      'valid': true
144: 1:    }
144: 1:  ],
144: 1:  'level': 6,
144: 1:  'nextQuestion': '9',
144: 1:  'questions': [
144: 1:    '1',
144: 1:    '2',
144: 1:    '3',
144: 1:    '4',
144: 1:    '5',
144: 1:    '6',
144: 1:    '7',
144: 1:    '8',
144: 1:    '9'
144: 1:  ]
144: 1:}
144: 1:Scores: 7390
144: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222']')
144: 1:Fire Event: PassTest{complexity=15, testCount=25}
------------------------------------------
145: 1:BoardData {
145: 1:  'description': 'Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture',
145: 1:  'expectedAnswer': '324',
145: 1:  'history': [
145: 1:    {
145: 1:      'answer': '101',
145: 1:      'question': '1',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '112',
145: 1:      'question': '2',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '131',
145: 1:      'question': '3',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '415',
145: 1:      'question': '4',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '161',
145: 1:      'question': '5',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '718',
145: 1:      'question': '6',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '192',
145: 1:      'question': '7',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '021',
145: 1:      'question': '8',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '222',
145: 1:      'question': '9',
145: 1:      'valid': true
145: 1:    }
145: 1:  ],
145: 1:  'level': 6,
145: 1:  'nextQuestion': '10',
145: 1:  'questions': [
145: 1:    '1',
145: 1:    '2',
145: 1:    '3',
145: 1:    '4',
145: 1:    '5',
145: 1:    '6',
145: 1:    '7',
145: 1:    '8',
145: 1:    '9',
145: 1:    '10'
145: 1:  ]
145: 1:}
145: 1:Scores: 7396
145: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324']')
145: 1:Fire Event: PassTest{complexity=15, testCount=25}
------------------------------------------
146: 1:BoardData {
146: 1:  'description': 'Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture',
146: 1:  'expectedAnswer': '252',
146: 1:  'history': [
146: 1:    {
146: 1:      'answer': '101',
146: 1:      'question': '1',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '112',
146: 1:      'question': '2',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '131',
146: 1:      'question': '3',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '415',
146: 1:      'question': '4',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '161',
146: 1:      'question': '5',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '718',
146: 1:      'question': '6',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '192',
146: 1:      'question': '7',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '021',
146: 1:      'question': '8',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '222',
146: 1:      'question': '9',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '324',
146: 1:      'question': '10',
146: 1:      'valid': true
146: 1:    }
146: 1:  ],
146: 1:  'level': 6,
146: 1:  'nextQuestion': '11',
146: 1:  'questions': [
146: 1:    '1',
146: 1:    '2',
146: 1:    '3',
146: 1:    '4',
146: 1:    '5',
146: 1:    '6',
146: 1:    '7',
146: 1:    '8',
146: 1:    '9',
146: 1:    '10',
146: 1:    '11'
146: 1:  ]
146: 1:}
146: 1:Scores: 7402
146: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252']')
146: 1:Fire Event: PassTest{complexity=15, testCount=25}
------------------------------------------
147: 1:BoardData {
147: 1:  'description': 'Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture',
147: 1:  'expectedAnswer': '627',
147: 1:  'history': [
147: 1:    {
147: 1:      'answer': '101',
147: 1:      'question': '1',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '112',
147: 1:      'question': '2',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '131',
147: 1:      'question': '3',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '415',
147: 1:      'question': '4',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '161',
147: 1:      'question': '5',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '718',
147: 1:      'question': '6',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '192',
147: 1:      'question': '7',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '021',
147: 1:      'question': '8',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '222',
147: 1:      'question': '9',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '324',
147: 1:      'question': '10',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '252',
147: 1:      'question': '11',
147: 1:      'valid': true
147: 1:    }
147: 1:  ],
147: 1:  'level': 6,
147: 1:  'nextQuestion': '12',
147: 1:  'questions': [
147: 1:    '1',
147: 1:    '2',
147: 1:    '3',
147: 1:    '4',
147: 1:    '5',
147: 1:    '6',
147: 1:    '7',
147: 1:    '8',
147: 1:    '9',
147: 1:    '10',
147: 1:    '11',
147: 1:    '12'
147: 1:  ]
147: 1:}
147: 1:Scores: 7408
147: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627']')
147: 1:Fire Event: PassTest{complexity=15, testCount=25}
------------------------------------------
148: 1:BoardData {
148: 1:  'description': 'Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture',
148: 1:  'expectedAnswer': '282',
148: 1:  'history': [
148: 1:    {
148: 1:      'answer': '101',
148: 1:      'question': '1',
148: 1:      'valid': true
148: 1:    },
148: 1:    {
148: 1:      'answer': '112',
148: 1:      'question': '2',
148: 1:      'valid': true
148: 1:    },
148: 1:    {
148: 1:      'answer': '131',
148: 1:      'question': '3',
148: 1:      'valid': true
148: 1:    },
148: 1:    {
148: 1:      'answer': '415',
148: 1:      'question': '4',
148: 1:      'valid': true
148: 1:    },
148: 1:    {
148: 1:      'answer': '161',
148: 1:      'question': '5',
148: 1:      'valid': true
148: 1:    },
148: 1:    {
148: 1:      'answer': '718',
148: 1:      'question': '6',
148: 1:      'valid': true
148: 1:    },
148: 1:    {
148: 1:      'answer': '192',
148: 1:      'question': '7',
148: 1:      'valid': true
148: 1:    },
148: 1:    {
148: 1:      'answer': '021',
148: 1:      'question': '8',
148: 1:      'valid': true
148: 1:    },
148: 1:    {
148: 1:      'answer': '222',
148: 1:      'question': '9',
148: 1:      'valid': true
148: 1:    },
148: 1:    {
148: 1:      'answer': '324',
148: 1:      'question': '10',
148: 1:      'valid': true
148: 1:    },
148: 1:    {
148: 1:      'answer': '252',
148: 1:      'question': '11',
148: 1:      'valid': true
148: 1:    },
148: 1:    {
148: 1:      'answer': '627',
148: 1:      'question': '12',
148: 1:      'valid': true
148: 1:    }
148: 1:  ],
148: 1:  'level': 6,
148: 1:  'nextQuestion': '13',
148: 1:  'questions': [
148: 1:    '1',
148: 1:    '2',
148: 1:    '3',
148: 1:    '4',
148: 1:    '5',
148: 1:    '6',
148: 1:    '7',
148: 1:    '8',
148: 1:    '9',
148: 1:    '10',
148: 1:    '11',
148: 1:    '12',
148: 1:    '13'
148: 1:  ]
148: 1:}
148: 1:Scores: 7414
148: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282']')
148: 1:Fire Event: PassTest{complexity=15, testCount=25}
------------------------------------------
149: 1:BoardData {
149: 1:  'description': 'Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture',
149: 1:  'expectedAnswer': '930',
149: 1:  'history': [
149: 1:    {
149: 1:      'answer': '101',
149: 1:      'question': '1',
149: 1:      'valid': true
149: 1:    },
149: 1:    {
149: 1:      'answer': '112',
149: 1:      'question': '2',
149: 1:      'valid': true
149: 1:    },
149: 1:    {
149: 1:      'answer': '131',
149: 1:      'question': '3',
149: 1:      'valid': true
149: 1:    },
149: 1:    {
149: 1:      'answer': '415',
149: 1:      'question': '4',
149: 1:      'valid': true
149: 1:    },
149: 1:    {
149: 1:      'answer': '161',
149: 1:      'question': '5',
149: 1:      'valid': true
149: 1:    },
149: 1:    {
149: 1:      'answer': '718',
149: 1:      'question': '6',
149: 1:      'valid': true
149: 1:    },
149: 1:    {
149: 1:      'answer': '192',
149: 1:      'question': '7',
149: 1:      'valid': true
149: 1:    },
149: 1:    {
149: 1:      'answer': '021',
149: 1:      'question': '8',
149: 1:      'valid': true
149: 1:    },
149: 1:    {
149: 1:      'answer': '222',
149: 1:      'question': '9',
149: 1:      'valid': true
149: 1:    },
149: 1:    {
149: 1:      'answer': '324',
149: 1:      'question': '10',
149: 1:      'valid': true
149: 1:    },
149: 1:    {
149: 1:      'answer': '252',
149: 1:      'question': '11',
149: 1:      'valid': true
149: 1:    },
149: 1:    {
149: 1:      'answer': '627',
149: 1:      'question': '12',
149: 1:      'valid': true
149: 1:    },
149: 1:    {
149: 1:      'answer': '282',
149: 1:      'question': '13',
149: 1:      'valid': true
149: 1:    }
149: 1:  ],
149: 1:  'level': 6,
149: 1:  'nextQuestion': '14',
149: 1:  'questions': [
149: 1:    '1',
149: 1:    '2',
149: 1:    '3',
149: 1:    '4',
149: 1:    '5',
149: 1:    '6',
149: 1:    '7',
149: 1:    '8',
149: 1:    '9',
149: 1:    '10',
149: 1:    '11',
149: 1:    '12',
149: 1:    '13',
149: 1:    '14'
149: 1:  ]
149: 1:}
149: 1:Scores: 7420
149: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930']')
149: 1:Fire Event: PassTest{complexity=15, testCount=25}
------------------------------------------
150: 1:BoardData {
150: 1:  'description': 'Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture',
150: 1:  'expectedAnswer': '313',
150: 1:  'history': [
150: 1:    {
150: 1:      'answer': '101',
150: 1:      'question': '1',
150: 1:      'valid': true
150: 1:    },
150: 1:    {
150: 1:      'answer': '112',
150: 1:      'question': '2',
150: 1:      'valid': true
150: 1:    },
150: 1:    {
150: 1:      'answer': '131',
150: 1:      'question': '3',
150: 1:      'valid': true
150: 1:    },
150: 1:    {
150: 1:      'answer': '415',
150: 1:      'question': '4',
150: 1:      'valid': true
150: 1:    },
150: 1:    {
150: 1:      'answer': '161',
150: 1:      'question': '5',
150: 1:      'valid': true
150: 1:    },
150: 1:    {
150: 1:      'answer': '718',
150: 1:      'question': '6',
150: 1:      'valid': true
150: 1:    },
150: 1:    {
150: 1:      'answer': '192',
150: 1:      'question': '7',
150: 1:      'valid': true
150: 1:    },
150: 1:    {
150: 1:      'answer': '021',
150: 1:      'question': '8',
150: 1:      'valid': true
150: 1:    },
150: 1:    {
150: 1:      'answer': '222',
150: 1:      'question': '9',
150: 1:      'valid': true
150: 1:    },
150: 1:    {
150: 1:      'answer': '324',
150: 1:      'question': '10',
150: 1:      'valid': true
150: 1:    },
150: 1:    {
150: 1:      'answer': '252',
150: 1:      'question': '11',
150: 1:      'valid': true
150: 1:    },
150: 1:    {
150: 1:      'answer': '627',
150: 1:      'question': '12',
150: 1:      'valid': true
150: 1:    },
150: 1:    {
150: 1:      'answer': '282',
150: 1:      'question': '13',
150: 1:      'valid': true
150: 1:    },
150: 1:    {
150: 1:      'answer': '930',
150: 1:      'question': '14',
150: 1:      'valid': true
150: 1:    }
150: 1:  ],
150: 1:  'level': 6,
150: 1:  'nextQuestion': '15',
150: 1:  'questions': [
150: 1:    '1',
150: 1:    '2',
150: 1:    '3',
150: 1:    '4',
150: 1:    '5',
150: 1:    '6',
150: 1:    '7',
150: 1:    '8',
150: 1:    '9',
150: 1:    '10',
150: 1:    '11',
150: 1:    '12',
150: 1:    '13',
150: 1:    '14',
150: 1:    '15'
150: 1:  ]
150: 1:}
150: 1:Scores: 7426
150: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313']')
150: 1:Fire Event: PassTest{complexity=15, testCount=25}
------------------------------------------
151: 1:BoardData {
151: 1:  'description': 'Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture',
151: 1:  'expectedAnswer': '233',
151: 1:  'history': [
151: 1:    {
151: 1:      'answer': '101',
151: 1:      'question': '1',
151: 1:      'valid': true
151: 1:    },
151: 1:    {
151: 1:      'answer': '112',
151: 1:      'question': '2',
151: 1:      'valid': true
151: 1:    },
151: 1:    {
151: 1:      'answer': '131',
151: 1:      'question': '3',
151: 1:      'valid': true
151: 1:    },
151: 1:    {
151: 1:      'answer': '415',
151: 1:      'question': '4',
151: 1:      'valid': true
151: 1:    },
151: 1:    {
151: 1:      'answer': '161',
151: 1:      'question': '5',
151: 1:      'valid': true
151: 1:    },
151: 1:    {
151: 1:      'answer': '718',
151: 1:      'question': '6',
151: 1:      'valid': true
151: 1:    },
151: 1:    {
151: 1:      'answer': '192',
151: 1:      'question': '7',
151: 1:      'valid': true
151: 1:    },
151: 1:    {
151: 1:      'answer': '021',
151: 1:      'question': '8',
151: 1:      'valid': true
151: 1:    },
151: 1:    {
151: 1:      'answer': '222',
151: 1:      'question': '9',
151: 1:      'valid': true
151: 1:    },
151: 1:    {
151: 1:      'answer': '324',
151: 1:      'question': '10',
151: 1:      'valid': true
151: 1:    },
151: 1:    {
151: 1:      'answer': '252',
151: 1:      'question': '11',
151: 1:      'valid': true
151: 1:    },
151: 1:    {
151: 1:      'answer': '627',
151: 1:      'question': '12',
151: 1:      'valid': true
151: 1:    },
151: 1:    {
151: 1:      'answer': '282',
151: 1:      'question': '13',
151: 1:      'valid': true
151: 1:    },
151: 1:    {
151: 1:      'answer': '930',
151: 1:      'question': '14',
151: 1:      'valid': true
151: 1:    },
151: 1:    {
151: 1:      'answer': '313',
151: 1:      'question': '15',
151: 1:      'valid': true
151: 1:    }
151: 1:  ],
151: 1:  'level': 6,
151: 1:  'nextQuestion': '16',
151: 1:  'questions': [
151: 1:    '1',
151: 1:    '2',
151: 1:    '3',
151: 1:    '4',
151: 1:    '5',
151: 1:    '6',
151: 1:    '7',
151: 1:    '8',
151: 1:    '9',
151: 1:    '10',
151: 1:    '11',
151: 1:    '12',
151: 1:    '13',
151: 1:    '14',
151: 1:    '15',
151: 1:    '16'
151: 1:  ]
151: 1:}
151: 1:Scores: 7432
151: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233']')
151: 1:Fire Event: PassTest{complexity=15, testCount=25}
------------------------------------------
152: 1:BoardData {
152: 1:  'description': 'Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture',
152: 1:  'expectedAnswer': '343',
152: 1:  'history': [
152: 1:    {
152: 1:      'answer': '101',
152: 1:      'question': '1',
152: 1:      'valid': true
152: 1:    },
152: 1:    {
152: 1:      'answer': '112',
152: 1:      'question': '2',
152: 1:      'valid': true
152: 1:    },
152: 1:    {
152: 1:      'answer': '131',
152: 1:      'question': '3',
152: 1:      'valid': true
152: 1:    },
152: 1:    {
152: 1:      'answer': '415',
152: 1:      'question': '4',
152: 1:      'valid': true
152: 1:    },
152: 1:    {
152: 1:      'answer': '161',
152: 1:      'question': '5',
152: 1:      'valid': true
152: 1:    },
152: 1:    {
152: 1:      'answer': '718',
152: 1:      'question': '6',
152: 1:      'valid': true
152: 1:    },
152: 1:    {
152: 1:      'answer': '192',
152: 1:      'question': '7',
152: 1:      'valid': true
152: 1:    },
152: 1:    {
152: 1:      'answer': '021',
152: 1:      'question': '8',
152: 1:      'valid': true
152: 1:    },
152: 1:    {
152: 1:      'answer': '222',
152: 1:      'question': '9',
152: 1:      'valid': true
152: 1:    },
152: 1:    {
152: 1:      'answer': '324',
152: 1:      'question': '10',
152: 1:      'valid': true
152: 1:    },
152: 1:    {
152: 1:      'answer': '252',
152: 1:      'question': '11',
152: 1:      'valid': true
152: 1:    },
152: 1:    {
152: 1:      'answer': '627',
152: 1:      'question': '12',
152: 1:      'valid': true
152: 1:    },
152: 1:    {
152: 1:      'answer': '282',
152: 1:      'question': '13',
152: 1:      'valid': true
152: 1:    },
152: 1:    {
152: 1:      'answer': '930',
152: 1:      'question': '14',
152: 1:      'valid': true
152: 1:    },
152: 1:    {
152: 1:      'answer': '313',
152: 1:      'question': '15',
152: 1:      'valid': true
152: 1:    },
152: 1:    {
152: 1:      'answer': '233',
152: 1:      'question': '16',
152: 1:      'valid': true
152: 1:    }
152: 1:  ],
152: 1:  'level': 6,
152: 1:  'nextQuestion': '17',
152: 1:  'questions': [
152: 1:    '1',
152: 1:    '2',
152: 1:    '3',
152: 1:    '4',
152: 1:    '5',
152: 1:    '6',
152: 1:    '7',
152: 1:    '8',
152: 1:    '9',
152: 1:    '10',
152: 1:    '11',
152: 1:    '12',
152: 1:    '13',
152: 1:    '14',
152: 1:    '15',
152: 1:    '16',
152: 1:    '17'
152: 1:  ]
152: 1:}
152: 1:Scores: 7438
152: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233', '343']')
152: 1:Fire Event: PassTest{complexity=15, testCount=25}
------------------------------------------
153: 1:BoardData {
153: 1:  'description': 'Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture',
153: 1:  'expectedAnswer': '536',
153: 1:  'history': [
153: 1:    {
153: 1:      'answer': '101',
153: 1:      'question': '1',
153: 1:      'valid': true
153: 1:    },
153: 1:    {
153: 1:      'answer': '112',
153: 1:      'question': '2',
153: 1:      'valid': true
153: 1:    },
153: 1:    {
153: 1:      'answer': '131',
153: 1:      'question': '3',
153: 1:      'valid': true
153: 1:    },
153: 1:    {
153: 1:      'answer': '415',
153: 1:      'question': '4',
153: 1:      'valid': true
153: 1:    },
153: 1:    {
153: 1:      'answer': '161',
153: 1:      'question': '5',
153: 1:      'valid': true
153: 1:    },
153: 1:    {
153: 1:      'answer': '718',
153: 1:      'question': '6',
153: 1:      'valid': true
153: 1:    },
153: 1:    {
153: 1:      'answer': '192',
153: 1:      'question': '7',
153: 1:      'valid': true
153: 1:    },
153: 1:    {
153: 1:      'answer': '021',
153: 1:      'question': '8',
153: 1:      'valid': true
153: 1:    },
153: 1:    {
153: 1:      'answer': '222',
153: 1:      'question': '9',
153: 1:      'valid': true
153: 1:    },
153: 1:    {
153: 1:      'answer': '324',
153: 1:      'question': '10',
153: 1:      'valid': true
153: 1:    },
153: 1:    {
153: 1:      'answer': '252',
153: 1:      'question': '11',
153: 1:      'valid': true
153: 1:    },
153: 1:    {
153: 1:      'answer': '627',
153: 1:      'question': '12',
153: 1:      'valid': true
153: 1:    },
153: 1:    {
153: 1:      'answer': '282',
153: 1:      'question': '13',
153: 1:      'valid': true
153: 1:    },
153: 1:    {
153: 1:      'answer': '930',
153: 1:      'question': '14',
153: 1:      'valid': true
153: 1:    },
153: 1:    {
153: 1:      'answer': '313',
153: 1:      'question': '15',
153: 1:      'valid': true
153: 1:    },
153: 1:    {
153: 1:      'answer': '233',
153: 1:      'question': '16',
153: 1:      'valid': true
153: 1:    },
153: 1:    {
153: 1:      'answer': '343',
153: 1:      'question': '17',
153: 1:      'valid': true
153: 1:    }
153: 1:  ],
153: 1:  'level': 6,
153: 1:  'nextQuestion': '18',
153: 1:  'questions': [
153: 1:    '1',
153: 1:    '2',
153: 1:    '3',
153: 1:    '4',
153: 1:    '5',
153: 1:    '6',
153: 1:    '7',
153: 1:    '8',
153: 1:    '9',
153: 1:    '10',
153: 1:    '11',
153: 1:    '12',
153: 1:    '13',
153: 1:    '14',
153: 1:    '15',
153: 1:    '16',
153: 1:    '17',
153: 1:    '18'
153: 1:  ]
153: 1:}
153: 1:Scores: 7444
153: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233', '343', '536']')
153: 1:Fire Event: PassTest{complexity=15, testCount=25}
------------------------------------------
154: 1:BoardData {
154: 1:  'description': 'Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture',
154: 1:  'expectedAnswer': '373',
154: 1:  'history': [
154: 1:    {
154: 1:      'answer': '101',
154: 1:      'question': '1',
154: 1:      'valid': true
154: 1:    },
154: 1:    {
154: 1:      'answer': '112',
154: 1:      'question': '2',
154: 1:      'valid': true
154: 1:    },
154: 1:    {
154: 1:      'answer': '131',
154: 1:      'question': '3',
154: 1:      'valid': true
154: 1:    },
154: 1:    {
154: 1:      'answer': '415',
154: 1:      'question': '4',
154: 1:      'valid': true
154: 1:    },
154: 1:    {
154: 1:      'answer': '161',
154: 1:      'question': '5',
154: 1:      'valid': true
154: 1:    },
154: 1:    {
154: 1:      'answer': '718',
154: 1:      'question': '6',
154: 1:      'valid': true
154: 1:    },
154: 1:    {
154: 1:      'answer': '192',
154: 1:      'question': '7',
154: 1:      'valid': true
154: 1:    },
154: 1:    {
154: 1:      'answer': '021',
154: 1:      'question': '8',
154: 1:      'valid': true
154: 1:    },
154: 1:    {
154: 1:      'answer': '222',
154: 1:      'question': '9',
154: 1:      'valid': true
154: 1:    },
154: 1:    {
154: 1:      'answer': '324',
154: 1:      'question': '10',
154: 1:      'valid': true
154: 1:    },
154: 1:    {
154: 1:      'answer': '252',
154: 1:      'question': '11',
154: 1:      'valid': true
154: 1:    },
154: 1:    {
154: 1:      'answer': '627',
154: 1:      'question': '12',
154: 1:      'valid': true
154: 1:    },
154: 1:    {
154: 1:      'answer': '282',
154: 1:      'question': '13',
154: 1:      'valid': true
154: 1:    },
154: 1:    {
154: 1:      'answer': '930',
154: 1:      'question': '14',
154: 1:      'valid': true
154: 1:    },
154: 1:    {
154: 1:      'answer': '313',
154: 1:      'question': '15',
154: 1:      'valid': true
154: 1:    },
154: 1:    {
154: 1:      'answer': '233',
154: 1:      'question': '16',
154: 1:      'valid': true
154: 1:    },
154: 1:    {
154: 1:      'answer': '343',
154: 1:      'question': '17',
154: 1:      'valid': true
154: 1:    },
154: 1:    {
154: 1:      'answer': '536',
154: 1:      'question': '18',
154: 1:      'valid': true
154: 1:    }
154: 1:  ],
154: 1:  'level': 6,
154: 1:  'nextQuestion': '19',
154: 1:  'questions': [
154: 1:    '1',
154: 1:    '2',
154: 1:    '3',
154: 1:    '4',
154: 1:    '5',
154: 1:    '6',
154: 1:    '7',
154: 1:    '8',
154: 1:    '9',
154: 1:    '10',
154: 1:    '11',
154: 1:    '12',
154: 1:    '13',
154: 1:    '14',
154: 1:    '15',
154: 1:    '16',
154: 1:    '17',
154: 1:    '18',
154: 1:    '19'
154: 1:  ]
154: 1:}
154: 1:Scores: 7450
154: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233', '343', '536', '373']')
154: 1:Fire Event: PassTest{complexity=15, testCount=25}
------------------------------------------
155: 1:BoardData {
155: 1:  'description': 'Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture',
155: 1:  'expectedAnswer': '839',
155: 1:  'history': [
155: 1:    {
155: 1:      'answer': '101',
155: 1:      'question': '1',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': '112',
155: 1:      'question': '2',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': '131',
155: 1:      'question': '3',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': '415',
155: 1:      'question': '4',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': '161',
155: 1:      'question': '5',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': '718',
155: 1:      'question': '6',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': '192',
155: 1:      'question': '7',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': '021',
155: 1:      'question': '8',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': '222',
155: 1:      'question': '9',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': '324',
155: 1:      'question': '10',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': '252',
155: 1:      'question': '11',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': '627',
155: 1:      'question': '12',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': '282',
155: 1:      'question': '13',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': '930',
155: 1:      'question': '14',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': '313',
155: 1:      'question': '15',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': '233',
155: 1:      'question': '16',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': '343',
155: 1:      'question': '17',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': '536',
155: 1:      'question': '18',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': '373',
155: 1:      'question': '19',
155: 1:      'valid': true
155: 1:    }
155: 1:  ],
155: 1:  'level': 6,
155: 1:  'nextQuestion': '20',
155: 1:  'questions': [
155: 1:    '1',
155: 1:    '2',
155: 1:    '3',
155: 1:    '4',
155: 1:    '5',
155: 1:    '6',
155: 1:    '7',
155: 1:    '8',
155: 1:    '9',
155: 1:    '10',
155: 1:    '11',
155: 1:    '12',
155: 1:    '13',
155: 1:    '14',
155: 1:    '15',
155: 1:    '16',
155: 1:    '17',
155: 1:    '18',
155: 1:    '19',
155: 1:    '20'
155: 1:  ]
155: 1:}
155: 1:Scores: 7456
155: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233', '343', '536', '373', '839']')
155: 1:Fire Event: PassTest{complexity=15, testCount=25}
------------------------------------------
156: 1:BoardData {
156: 1:  'description': 'Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture',
156: 1:  'expectedAnswer': '404',
156: 1:  'history': [
156: 1:    {
156: 1:      'answer': '101',
156: 1:      'question': '1',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': '112',
156: 1:      'question': '2',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': '131',
156: 1:      'question': '3',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': '415',
156: 1:      'question': '4',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': '161',
156: 1:      'question': '5',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': '718',
156: 1:      'question': '6',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': '192',
156: 1:      'question': '7',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': '021',
156: 1:      'question': '8',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': '222',
156: 1:      'question': '9',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': '324',
156: 1:      'question': '10',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': '252',
156: 1:      'question': '11',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': '627',
156: 1:      'question': '12',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': '282',
156: 1:      'question': '13',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': '930',
156: 1:      'question': '14',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': '313',
156: 1:      'question': '15',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': '233',
156: 1:      'question': '16',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': '343',
156: 1:      'question': '17',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': '536',
156: 1:      'question': '18',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': '373',
156: 1:      'question': '19',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': '839',
156: 1:      'question': '20',
156: 1:      'valid': true
156: 1:    }
156: 1:  ],
156: 1:  'level': 6,
156: 1:  'nextQuestion': '21',
156: 1:  'questions': [
156: 1:    '1',
156: 1:    '2',
156: 1:    '3',
156: 1:    '4',
156: 1:    '5',
156: 1:    '6',
156: 1:    '7',
156: 1:    '8',
156: 1:    '9',
156: 1:    '10',
156: 1:    '11',
156: 1:    '12',
156: 1:    '13',
156: 1:    '14',
156: 1:    '15',
156: 1:    '16',
156: 1:    '17',
156: 1:    '18',
156: 1:    '19',
156: 1:    '20',
156: 1:    '21'
156: 1:  ]
156: 1:}
156: 1:Scores: 7462
156: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233', '343', '536', '373', '839', '404']')
156: 1:Fire Event: PassTest{complexity=15, testCount=25}
------------------------------------------
157: 1:BoardData {
157: 1:  'description': 'Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture',
157: 1:  'expectedAnswer': '142',
157: 1:  'history': [
157: 1:    {
157: 1:      'answer': '101',
157: 1:      'question': '1',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': '112',
157: 1:      'question': '2',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': '131',
157: 1:      'question': '3',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': '415',
157: 1:      'question': '4',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': '161',
157: 1:      'question': '5',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': '718',
157: 1:      'question': '6',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': '192',
157: 1:      'question': '7',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': '021',
157: 1:      'question': '8',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': '222',
157: 1:      'question': '9',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': '324',
157: 1:      'question': '10',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': '252',
157: 1:      'question': '11',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': '627',
157: 1:      'question': '12',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': '282',
157: 1:      'question': '13',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': '930',
157: 1:      'question': '14',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': '313',
157: 1:      'question': '15',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': '233',
157: 1:      'question': '16',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': '343',
157: 1:      'question': '17',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': '536',
157: 1:      'question': '18',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': '373',
157: 1:      'question': '19',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': '839',
157: 1:      'question': '20',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': '404',
157: 1:      'question': '21',
157: 1:      'valid': true
157: 1:    }
157: 1:  ],
157: 1:  'level': 6,
157: 1:  'nextQuestion': '22',
157: 1:  'questions': [
157: 1:    '1',
157: 1:    '2',
157: 1:    '3',
157: 1:    '4',
157: 1:    '5',
157: 1:    '6',
157: 1:    '7',
157: 1:    '8',
157: 1:    '9',
157: 1:    '10',
157: 1:    '11',
157: 1:    '12',
157: 1:    '13',
157: 1:    '14',
157: 1:    '15',
157: 1:    '16',
157: 1:    '17',
157: 1:    '18',
157: 1:    '19',
157: 1:    '20',
157: 1:    '21',
157: 1:    '22'
157: 1:  ]
157: 1:}
157: 1:Scores: 7468
157: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233', '343', '536', '373', '839', '404', '142']')
157: 1:Fire Event: PassTest{complexity=15, testCount=25}
------------------------------------------
158: 1:BoardData {
158: 1:  'description': 'Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture',
158: 1:  'expectedAnswer': '434',
158: 1:  'history': [
158: 1:    {
158: 1:      'answer': '101',
158: 1:      'question': '1',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '112',
158: 1:      'question': '2',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '131',
158: 1:      'question': '3',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '415',
158: 1:      'question': '4',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '161',
158: 1:      'question': '5',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '718',
158: 1:      'question': '6',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '192',
158: 1:      'question': '7',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '021',
158: 1:      'question': '8',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '222',
158: 1:      'question': '9',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '324',
158: 1:      'question': '10',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '252',
158: 1:      'question': '11',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '627',
158: 1:      'question': '12',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '282',
158: 1:      'question': '13',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '930',
158: 1:      'question': '14',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '313',
158: 1:      'question': '15',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '233',
158: 1:      'question': '16',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '343',
158: 1:      'question': '17',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '536',
158: 1:      'question': '18',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '373',
158: 1:      'question': '19',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '839',
158: 1:      'question': '20',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '404',
158: 1:      'question': '21',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '142',
158: 1:      'question': '22',
158: 1:      'valid': true
158: 1:    }
158: 1:  ],
158: 1:  'level': 6,
158: 1:  'nextQuestion': '23',
158: 1:  'questions': [
158: 1:    '1',
158: 1:    '2',
158: 1:    '3',
158: 1:    '4',
158: 1:    '5',
158: 1:    '6',
158: 1:    '7',
158: 1:    '8',
158: 1:    '9',
158: 1:    '10',
158: 1:    '11',
158: 1:    '12',
158: 1:    '13',
158: 1:    '14',
158: 1:    '15',
158: 1:    '16',
158: 1:    '17',
158: 1:    '18',
158: 1:    '19',
158: 1:    '20',
158: 1:    '21',
158: 1:    '22',
158: 1:    '23'
158: 1:  ]
158: 1:}
158: 1:Scores: 7474
158: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233', '343', '536', '373', '839', '404', '142', '434']')
158: 1:Fire Event: PassTest{complexity=15, testCount=25}
------------------------------------------
159: 1:BoardData {
159: 1:  'description': 'Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture',
159: 1:  'expectedAnswer': '445',
159: 1:  'history': [
159: 1:    {
159: 1:      'answer': '101',
159: 1:      'question': '1',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '112',
159: 1:      'question': '2',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '131',
159: 1:      'question': '3',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '415',
159: 1:      'question': '4',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '161',
159: 1:      'question': '5',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '718',
159: 1:      'question': '6',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '192',
159: 1:      'question': '7',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '021',
159: 1:      'question': '8',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '222',
159: 1:      'question': '9',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '324',
159: 1:      'question': '10',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '252',
159: 1:      'question': '11',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '627',
159: 1:      'question': '12',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '282',
159: 1:      'question': '13',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '930',
159: 1:      'question': '14',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '313',
159: 1:      'question': '15',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '233',
159: 1:      'question': '16',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '343',
159: 1:      'question': '17',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '536',
159: 1:      'question': '18',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '373',
159: 1:      'question': '19',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '839',
159: 1:      'question': '20',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '404',
159: 1:      'question': '21',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '142',
159: 1:      'question': '22',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '434',
159: 1:      'question': '23',
159: 1:      'valid': true
159: 1:    }
159: 1:  ],
159: 1:  'level': 6,
159: 1:  'nextQuestion': '24',
159: 1:  'questions': [
159: 1:    '1',
159: 1:    '2',
159: 1:    '3',
159: 1:    '4',
159: 1:    '5',
159: 1:    '6',
159: 1:    '7',
159: 1:    '8',
159: 1:    '9',
159: 1:    '10',
159: 1:    '11',
159: 1:    '12',
159: 1:    '13',
159: 1:    '14',
159: 1:    '15',
159: 1:    '16',
159: 1:    '17',
159: 1:    '18',
159: 1:    '19',
159: 1:    '20',
159: 1:    '21',
159: 1:    '22',
159: 1:    '23',
159: 1:    '24'
159: 1:  ]
159: 1:}
159: 1:Scores: 7480
159: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233', '343', '536', '373', '839', '404', '142', '434', '445']')
159: 1:Fire Event: PassTest{complexity=15, testCount=25}
------------------------------------------
160: 1:BoardData {
160: 1:  'description': 'Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture',
160: 1:  'expectedAnswer': '464',
160: 1:  'history': [
160: 1:    {
160: 1:      'answer': '101',
160: 1:      'question': '1',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '112',
160: 1:      'question': '2',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '131',
160: 1:      'question': '3',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '415',
160: 1:      'question': '4',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '161',
160: 1:      'question': '5',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '718',
160: 1:      'question': '6',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '192',
160: 1:      'question': '7',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '021',
160: 1:      'question': '8',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '222',
160: 1:      'question': '9',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '324',
160: 1:      'question': '10',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '252',
160: 1:      'question': '11',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '627',
160: 1:      'question': '12',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '282',
160: 1:      'question': '13',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '930',
160: 1:      'question': '14',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '313',
160: 1:      'question': '15',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '233',
160: 1:      'question': '16',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '343',
160: 1:      'question': '17',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '536',
160: 1:      'question': '18',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '373',
160: 1:      'question': '19',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '839',
160: 1:      'question': '20',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '404',
160: 1:      'question': '21',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '142',
160: 1:      'question': '22',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '434',
160: 1:      'question': '23',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '445',
160: 1:      'question': '24',
160: 1:      'valid': true
160: 1:    }
160: 1:  ],
160: 1:  'level': 6,
160: 1:  'nextQuestion': '25',
160: 1:  'questions': [
160: 1:    '1',
160: 1:    '2',
160: 1:    '3',
160: 1:    '4',
160: 1:    '5',
160: 1:    '6',
160: 1:    '7',
160: 1:    '8',
160: 1:    '9',
160: 1:    '10',
160: 1:    '11',
160: 1:    '12',
160: 1:    '13',
160: 1:    '14',
160: 1:    '15',
160: 1:    '16',
160: 1:    '17',
160: 1:    '18',
160: 1:    '19',
160: 1:    '20',
160: 1:    '21',
160: 1:    '22',
160: 1:    '23',
160: 1:    '24',
160: 1:    '25'
160: 1:  ]
160: 1:}
160: 1:Scores: 7486
160: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233', '343', '536', '373', '839', '404', '142', '434', '445', '464']')
160: 1:Fire Event: PassTest{complexity=15, testCount=25}
160: 1:Fire Event: NextAlgorithm{complexity=15, time=0}
------------------------------------------
161: 1:BoardData {
161: 1:  'description': 'Wait for next level. Please send 'message('StartNextLevel')' command.',
161: 1:  'history': [
161: 1:    {
161: 1:      'answer': '101',
161: 1:      'question': '1',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '112',
161: 1:      'question': '2',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '131',
161: 1:      'question': '3',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '415',
161: 1:      'question': '4',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '161',
161: 1:      'question': '5',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '718',
161: 1:      'question': '6',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '192',
161: 1:      'question': '7',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '021',
161: 1:      'question': '8',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '222',
161: 1:      'question': '9',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '324',
161: 1:      'question': '10',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '252',
161: 1:      'question': '11',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '627',
161: 1:      'question': '12',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '282',
161: 1:      'question': '13',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '930',
161: 1:      'question': '14',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '313',
161: 1:      'question': '15',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '233',
161: 1:      'question': '16',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '343',
161: 1:      'question': '17',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '536',
161: 1:      'question': '18',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '373',
161: 1:      'question': '19',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '839',
161: 1:      'question': '20',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '404',
161: 1:      'question': '21',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '142',
161: 1:      'question': '22',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '434',
161: 1:      'question': '23',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '445',
161: 1:      'question': '24',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '464',
161: 1:      'question': '25',
161: 1:      'valid': true
161: 1:    }
161: 1:  ],
161: 1:  'level': 6,
161: 1:  'questions': []
161: 1:}
161: 1:Scores: 9516
161: 1:Answer: message('StartNextLevel')
161: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
162: 1:BoardData {
162: 1:  'description': 'Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
162: 1:  'expectedAnswer': '1',
162: 1:  'history': [],
162: 1:  'level': 7,
162: 1:  'nextQuestion': '1',
162: 1:  'questions': ['1']
162: 1:}
162: 1:Scores: 9516
162: 1:Answer: message('['1']')
162: 1:Fire Event: PassTest{complexity=20, testCount=25}
------------------------------------------
163: 1:BoardData {
163: 1:  'description': 'Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
163: 1:  'expectedAnswer': '1',
163: 1:  'history': [{
163: 1:    'answer': '1',
163: 1:    'question': '1',
163: 1:    'valid': true
163: 1:  }],
163: 1:  'level': 7,
163: 1:  'nextQuestion': '2',
163: 1:  'questions': [
163: 1:    '1',
163: 1:    '2'
163: 1:  ]
163: 1:}
163: 1:Scores: 9524
163: 1:Answer: message('['1', '1']')
163: 1:Fire Event: PassTest{complexity=20, testCount=25}
------------------------------------------
164: 1:BoardData {
164: 1:  'description': 'Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
164: 1:  'expectedAnswer': '2',
164: 1:  'history': [
164: 1:    {
164: 1:      'answer': '1',
164: 1:      'question': '1',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': '1',
164: 1:      'question': '2',
164: 1:      'valid': true
164: 1:    }
164: 1:  ],
164: 1:  'level': 7,
164: 1:  'nextQuestion': '3',
164: 1:  'questions': [
164: 1:    '1',
164: 1:    '2',
164: 1:    '3'
164: 1:  ]
164: 1:}
164: 1:Scores: 9532
164: 1:Answer: message('['1', '1', '2']')
164: 1:Fire Event: PassTest{complexity=20, testCount=25}
------------------------------------------
165: 1:BoardData {
165: 1:  'description': 'Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
165: 1:  'expectedAnswer': '3',
165: 1:  'history': [
165: 1:    {
165: 1:      'answer': '1',
165: 1:      'question': '1',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': '1',
165: 1:      'question': '2',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': '2',
165: 1:      'question': '3',
165: 1:      'valid': true
165: 1:    }
165: 1:  ],
165: 1:  'level': 7,
165: 1:  'nextQuestion': '4',
165: 1:  'questions': [
165: 1:    '1',
165: 1:    '2',
165: 1:    '3',
165: 1:    '4'
165: 1:  ]
165: 1:}
165: 1:Scores: 9540
165: 1:Answer: message('['1', '1', '2', '3']')
165: 1:Fire Event: PassTest{complexity=20, testCount=25}
------------------------------------------
166: 1:BoardData {
166: 1:  'description': 'Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
166: 1:  'expectedAnswer': '5',
166: 1:  'history': [
166: 1:    {
166: 1:      'answer': '1',
166: 1:      'question': '1',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': '1',
166: 1:      'question': '2',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': '2',
166: 1:      'question': '3',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': '3',
166: 1:      'question': '4',
166: 1:      'valid': true
166: 1:    }
166: 1:  ],
166: 1:  'level': 7,
166: 1:  'nextQuestion': '5',
166: 1:  'questions': [
166: 1:    '1',
166: 1:    '2',
166: 1:    '3',
166: 1:    '4',
166: 1:    '5'
166: 1:  ]
166: 1:}
166: 1:Scores: 9548
166: 1:Answer: message('['1', '1', '2', '3', '5']')
166: 1:Fire Event: PassTest{complexity=20, testCount=25}
------------------------------------------
167: 1:BoardData {
167: 1:  'description': 'Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
167: 1:  'expectedAnswer': '8',
167: 1:  'history': [
167: 1:    {
167: 1:      'answer': '1',
167: 1:      'question': '1',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': '1',
167: 1:      'question': '2',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': '2',
167: 1:      'question': '3',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': '3',
167: 1:      'question': '4',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': '5',
167: 1:      'question': '5',
167: 1:      'valid': true
167: 1:    }
167: 1:  ],
167: 1:  'level': 7,
167: 1:  'nextQuestion': '6',
167: 1:  'questions': [
167: 1:    '1',
167: 1:    '2',
167: 1:    '3',
167: 1:    '4',
167: 1:    '5',
167: 1:    '6'
167: 1:  ]
167: 1:}
167: 1:Scores: 9556
167: 1:Answer: message('['1', '1', '2', '3', '5', '8']')
167: 1:Fire Event: PassTest{complexity=20, testCount=25}
------------------------------------------
168: 1:BoardData {
168: 1:  'description': 'Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
168: 1:  'expectedAnswer': '13',
168: 1:  'history': [
168: 1:    {
168: 1:      'answer': '1',
168: 1:      'question': '1',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': '1',
168: 1:      'question': '2',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': '2',
168: 1:      'question': '3',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': '3',
168: 1:      'question': '4',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': '5',
168: 1:      'question': '5',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': '8',
168: 1:      'question': '6',
168: 1:      'valid': true
168: 1:    }
168: 1:  ],
168: 1:  'level': 7,
168: 1:  'nextQuestion': '7',
168: 1:  'questions': [
168: 1:    '1',
168: 1:    '2',
168: 1:    '3',
168: 1:    '4',
168: 1:    '5',
168: 1:    '6',
168: 1:    '7'
168: 1:  ]
168: 1:}
168: 1:Scores: 9564
168: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13']')
168: 1:Fire Event: PassTest{complexity=20, testCount=25}
------------------------------------------
169: 1:BoardData {
169: 1:  'description': 'Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
169: 1:  'expectedAnswer': '21',
169: 1:  'history': [
169: 1:    {
169: 1:      'answer': '1',
169: 1:      'question': '1',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': '1',
169: 1:      'question': '2',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': '2',
169: 1:      'question': '3',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': '3',
169: 1:      'question': '4',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': '5',
169: 1:      'question': '5',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': '8',
169: 1:      'question': '6',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': '13',
169: 1:      'question': '7',
169: 1:      'valid': true
169: 1:    }
169: 1:  ],
169: 1:  'level': 7,
169: 1:  'nextQuestion': '8',
169: 1:  'questions': [
169: 1:    '1',
169: 1:    '2',
169: 1:    '3',
169: 1:    '4',
169: 1:    '5',
169: 1:    '6',
169: 1:    '7',
169: 1:    '8'
169: 1:  ]
169: 1:}
169: 1:Scores: 9572
169: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21']')
169: 1:Fire Event: PassTest{complexity=20, testCount=25}
------------------------------------------
170: 1:BoardData {
170: 1:  'description': 'Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
170: 1:  'expectedAnswer': '34',
170: 1:  'history': [
170: 1:    {
170: 1:      'answer': '1',
170: 1:      'question': '1',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': '1',
170: 1:      'question': '2',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': '2',
170: 1:      'question': '3',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': '3',
170: 1:      'question': '4',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': '5',
170: 1:      'question': '5',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': '8',
170: 1:      'question': '6',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': '13',
170: 1:      'question': '7',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': '21',
170: 1:      'question': '8',
170: 1:      'valid': true
170: 1:    }
170: 1:  ],
170: 1:  'level': 7,
170: 1:  'nextQuestion': '9',
170: 1:  'questions': [
170: 1:    '1',
170: 1:    '2',
170: 1:    '3',
170: 1:    '4',
170: 1:    '5',
170: 1:    '6',
170: 1:    '7',
170: 1:    '8',
170: 1:    '9'
170: 1:  ]
170: 1:}
170: 1:Scores: 9580
170: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34']')
170: 1:Fire Event: PassTest{complexity=20, testCount=25}
------------------------------------------
171: 1:BoardData {
171: 1:  'description': 'Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
171: 1:  'expectedAnswer': '55',
171: 1:  'history': [
171: 1:    {
171: 1:      'answer': '1',
171: 1:      'question': '1',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '1',
171: 1:      'question': '2',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '2',
171: 1:      'question': '3',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '3',
171: 1:      'question': '4',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '5',
171: 1:      'question': '5',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '8',
171: 1:      'question': '6',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '13',
171: 1:      'question': '7',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '21',
171: 1:      'question': '8',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '34',
171: 1:      'question': '9',
171: 1:      'valid': true
171: 1:    }
171: 1:  ],
171: 1:  'level': 7,
171: 1:  'nextQuestion': '10',
171: 1:  'questions': [
171: 1:    '1',
171: 1:    '2',
171: 1:    '3',
171: 1:    '4',
171: 1:    '5',
171: 1:    '6',
171: 1:    '7',
171: 1:    '8',
171: 1:    '9',
171: 1:    '10'
171: 1:  ]
171: 1:}
171: 1:Scores: 9588
171: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55']')
171: 1:Fire Event: PassTest{complexity=20, testCount=25}
------------------------------------------
172: 1:BoardData {
172: 1:  'description': 'Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
172: 1:  'expectedAnswer': '89',
172: 1:  'history': [
172: 1:    {
172: 1:      'answer': '1',
172: 1:      'question': '1',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '1',
172: 1:      'question': '2',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '2',
172: 1:      'question': '3',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '3',
172: 1:      'question': '4',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '5',
172: 1:      'question': '5',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '8',
172: 1:      'question': '6',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '13',
172: 1:      'question': '7',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '21',
172: 1:      'question': '8',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '34',
172: 1:      'question': '9',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '55',
172: 1:      'question': '10',
172: 1:      'valid': true
172: 1:    }
172: 1:  ],
172: 1:  'level': 7,
172: 1:  'nextQuestion': '11',
172: 1:  'questions': [
172: 1:    '1',
172: 1:    '2',
172: 1:    '3',
172: 1:    '4',
172: 1:    '5',
172: 1:    '6',
172: 1:    '7',
172: 1:    '8',
172: 1:    '9',
172: 1:    '10',
172: 1:    '11'
172: 1:  ]
172: 1:}
172: 1:Scores: 9596
172: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89']')
172: 1:Fire Event: PassTest{complexity=20, testCount=25}
------------------------------------------
173: 1:BoardData {
173: 1:  'description': 'Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
173: 1:  'expectedAnswer': '144',
173: 1:  'history': [
173: 1:    {
173: 1:      'answer': '1',
173: 1:      'question': '1',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '1',
173: 1:      'question': '2',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '2',
173: 1:      'question': '3',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '3',
173: 1:      'question': '4',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '5',
173: 1:      'question': '5',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '8',
173: 1:      'question': '6',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '13',
173: 1:      'question': '7',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '21',
173: 1:      'question': '8',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '34',
173: 1:      'question': '9',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '55',
173: 1:      'question': '10',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '89',
173: 1:      'question': '11',
173: 1:      'valid': true
173: 1:    }
173: 1:  ],
173: 1:  'level': 7,
173: 1:  'nextQuestion': '12',
173: 1:  'questions': [
173: 1:    '1',
173: 1:    '2',
173: 1:    '3',
173: 1:    '4',
173: 1:    '5',
173: 1:    '6',
173: 1:    '7',
173: 1:    '8',
173: 1:    '9',
173: 1:    '10',
173: 1:    '11',
173: 1:    '12'
173: 1:  ]
173: 1:}
173: 1:Scores: 9604
173: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144']')
173: 1:Fire Event: PassTest{complexity=20, testCount=25}
------------------------------------------
174: 1:BoardData {
174: 1:  'description': 'Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
174: 1:  'expectedAnswer': '233',
174: 1:  'history': [
174: 1:    {
174: 1:      'answer': '1',
174: 1:      'question': '1',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': '1',
174: 1:      'question': '2',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': '2',
174: 1:      'question': '3',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': '3',
174: 1:      'question': '4',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': '5',
174: 1:      'question': '5',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': '8',
174: 1:      'question': '6',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': '13',
174: 1:      'question': '7',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': '21',
174: 1:      'question': '8',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': '34',
174: 1:      'question': '9',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': '55',
174: 1:      'question': '10',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': '89',
174: 1:      'question': '11',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': '144',
174: 1:      'question': '12',
174: 1:      'valid': true
174: 1:    }
174: 1:  ],
174: 1:  'level': 7,
174: 1:  'nextQuestion': '13',
174: 1:  'questions': [
174: 1:    '1',
174: 1:    '2',
174: 1:    '3',
174: 1:    '4',
174: 1:    '5',
174: 1:    '6',
174: 1:    '7',
174: 1:    '8',
174: 1:    '9',
174: 1:    '10',
174: 1:    '11',
174: 1:    '12',
174: 1:    '13'
174: 1:  ]
174: 1:}
174: 1:Scores: 9612
174: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233']')
174: 1:Fire Event: PassTest{complexity=20, testCount=25}
------------------------------------------
175: 1:BoardData {
175: 1:  'description': 'Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
175: 1:  'expectedAnswer': '377',
175: 1:  'history': [
175: 1:    {
175: 1:      'answer': '1',
175: 1:      'question': '1',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': '1',
175: 1:      'question': '2',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': '2',
175: 1:      'question': '3',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': '3',
175: 1:      'question': '4',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': '5',
175: 1:      'question': '5',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': '8',
175: 1:      'question': '6',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': '13',
175: 1:      'question': '7',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': '21',
175: 1:      'question': '8',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': '34',
175: 1:      'question': '9',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': '55',
175: 1:      'question': '10',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': '89',
175: 1:      'question': '11',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': '144',
175: 1:      'question': '12',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': '233',
175: 1:      'question': '13',
175: 1:      'valid': true
175: 1:    }
175: 1:  ],
175: 1:  'level': 7,
175: 1:  'nextQuestion': '14',
175: 1:  'questions': [
175: 1:    '1',
175: 1:    '2',
175: 1:    '3',
175: 1:    '4',
175: 1:    '5',
175: 1:    '6',
175: 1:    '7',
175: 1:    '8',
175: 1:    '9',
175: 1:    '10',
175: 1:    '11',
175: 1:    '12',
175: 1:    '13',
175: 1:    '14'
175: 1:  ]
175: 1:}
175: 1:Scores: 9620
175: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377']')
175: 1:Fire Event: PassTest{complexity=20, testCount=25}
------------------------------------------
176: 1:BoardData {
176: 1:  'description': 'Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
176: 1:  'expectedAnswer': '610',
176: 1:  'history': [
176: 1:    {
176: 1:      'answer': '1',
176: 1:      'question': '1',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': '1',
176: 1:      'question': '2',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': '2',
176: 1:      'question': '3',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': '3',
176: 1:      'question': '4',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': '5',
176: 1:      'question': '5',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': '8',
176: 1:      'question': '6',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': '13',
176: 1:      'question': '7',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': '21',
176: 1:      'question': '8',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': '34',
176: 1:      'question': '9',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': '55',
176: 1:      'question': '10',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': '89',
176: 1:      'question': '11',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': '144',
176: 1:      'question': '12',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': '233',
176: 1:      'question': '13',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': '377',
176: 1:      'question': '14',
176: 1:      'valid': true
176: 1:    }
176: 1:  ],
176: 1:  'level': 7,
176: 1:  'nextQuestion': '15',
176: 1:  'questions': [
176: 1:    '1',
176: 1:    '2',
176: 1:    '3',
176: 1:    '4',
176: 1:    '5',
176: 1:    '6',
176: 1:    '7',
176: 1:    '8',
176: 1:    '9',
176: 1:    '10',
176: 1:    '11',
176: 1:    '12',
176: 1:    '13',
176: 1:    '14',
176: 1:    '15'
176: 1:  ]
176: 1:}
176: 1:Scores: 9628
176: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610']')
176: 1:Fire Event: PassTest{complexity=20, testCount=25}
------------------------------------------
177: 1:BoardData {
177: 1:  'description': 'Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
177: 1:  'expectedAnswer': '987',
177: 1:  'history': [
177: 1:    {
177: 1:      'answer': '1',
177: 1:      'question': '1',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': '1',
177: 1:      'question': '2',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': '2',
177: 1:      'question': '3',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': '3',
177: 1:      'question': '4',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': '5',
177: 1:      'question': '5',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': '8',
177: 1:      'question': '6',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': '13',
177: 1:      'question': '7',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': '21',
177: 1:      'question': '8',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': '34',
177: 1:      'question': '9',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': '55',
177: 1:      'question': '10',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': '89',
177: 1:      'question': '11',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': '144',
177: 1:      'question': '12',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': '233',
177: 1:      'question': '13',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': '377',
177: 1:      'question': '14',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': '610',
177: 1:      'question': '15',
177: 1:      'valid': true
177: 1:    }
177: 1:  ],
177: 1:  'level': 7,
177: 1:  'nextQuestion': '16',
177: 1:  'questions': [
177: 1:    '1',
177: 1:    '2',
177: 1:    '3',
177: 1:    '4',
177: 1:    '5',
177: 1:    '6',
177: 1:    '7',
177: 1:    '8',
177: 1:    '9',
177: 1:    '10',
177: 1:    '11',
177: 1:    '12',
177: 1:    '13',
177: 1:    '14',
177: 1:    '15',
177: 1:    '16'
177: 1:  ]
177: 1:}
177: 1:Scores: 9636
177: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987']')
177: 1:Fire Event: PassTest{complexity=20, testCount=25}
------------------------------------------
178: 1:BoardData {
178: 1:  'description': 'Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
178: 1:  'expectedAnswer': '1597',
178: 1:  'history': [
178: 1:    {
178: 1:      'answer': '1',
178: 1:      'question': '1',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': '1',
178: 1:      'question': '2',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': '2',
178: 1:      'question': '3',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': '3',
178: 1:      'question': '4',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': '5',
178: 1:      'question': '5',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': '8',
178: 1:      'question': '6',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': '13',
178: 1:      'question': '7',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': '21',
178: 1:      'question': '8',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': '34',
178: 1:      'question': '9',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': '55',
178: 1:      'question': '10',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': '89',
178: 1:      'question': '11',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': '144',
178: 1:      'question': '12',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': '233',
178: 1:      'question': '13',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': '377',
178: 1:      'question': '14',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': '610',
178: 1:      'question': '15',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': '987',
178: 1:      'question': '16',
178: 1:      'valid': true
178: 1:    }
178: 1:  ],
178: 1:  'level': 7,
178: 1:  'nextQuestion': '17',
178: 1:  'questions': [
178: 1:    '1',
178: 1:    '2',
178: 1:    '3',
178: 1:    '4',
178: 1:    '5',
178: 1:    '6',
178: 1:    '7',
178: 1:    '8',
178: 1:    '9',
178: 1:    '10',
178: 1:    '11',
178: 1:    '12',
178: 1:    '13',
178: 1:    '14',
178: 1:    '15',
178: 1:    '16',
178: 1:    '17'
178: 1:  ]
178: 1:}
178: 1:Scores: 9644
178: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597']')
178: 1:Fire Event: PassTest{complexity=20, testCount=25}
------------------------------------------
179: 1:BoardData {
179: 1:  'description': 'Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
179: 1:  'expectedAnswer': '2584',
179: 1:  'history': [
179: 1:    {
179: 1:      'answer': '1',
179: 1:      'question': '1',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': '1',
179: 1:      'question': '2',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': '2',
179: 1:      'question': '3',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': '3',
179: 1:      'question': '4',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': '5',
179: 1:      'question': '5',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': '8',
179: 1:      'question': '6',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': '13',
179: 1:      'question': '7',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': '21',
179: 1:      'question': '8',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': '34',
179: 1:      'question': '9',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': '55',
179: 1:      'question': '10',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': '89',
179: 1:      'question': '11',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': '144',
179: 1:      'question': '12',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': '233',
179: 1:      'question': '13',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': '377',
179: 1:      'question': '14',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': '610',
179: 1:      'question': '15',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': '987',
179: 1:      'question': '16',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': '1597',
179: 1:      'question': '17',
179: 1:      'valid': true
179: 1:    }
179: 1:  ],
179: 1:  'level': 7,
179: 1:  'nextQuestion': '18',
179: 1:  'questions': [
179: 1:    '1',
179: 1:    '2',
179: 1:    '3',
179: 1:    '4',
179: 1:    '5',
179: 1:    '6',
179: 1:    '7',
179: 1:    '8',
179: 1:    '9',
179: 1:    '10',
179: 1:    '11',
179: 1:    '12',
179: 1:    '13',
179: 1:    '14',
179: 1:    '15',
179: 1:    '16',
179: 1:    '17',
179: 1:    '18'
179: 1:  ]
179: 1:}
179: 1:Scores: 9652
179: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597', '2584']')
179: 1:Fire Event: PassTest{complexity=20, testCount=25}
------------------------------------------
180: 1:BoardData {
180: 1:  'description': 'Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
180: 1:  'expectedAnswer': '4181',
180: 1:  'history': [
180: 1:    {
180: 1:      'answer': '1',
180: 1:      'question': '1',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': '1',
180: 1:      'question': '2',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': '2',
180: 1:      'question': '3',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': '3',
180: 1:      'question': '4',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': '5',
180: 1:      'question': '5',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': '8',
180: 1:      'question': '6',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': '13',
180: 1:      'question': '7',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': '21',
180: 1:      'question': '8',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': '34',
180: 1:      'question': '9',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': '55',
180: 1:      'question': '10',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': '89',
180: 1:      'question': '11',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': '144',
180: 1:      'question': '12',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': '233',
180: 1:      'question': '13',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': '377',
180: 1:      'question': '14',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': '610',
180: 1:      'question': '15',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': '987',
180: 1:      'question': '16',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': '1597',
180: 1:      'question': '17',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': '2584',
180: 1:      'question': '18',
180: 1:      'valid': true
180: 1:    }
180: 1:  ],
180: 1:  'level': 7,
180: 1:  'nextQuestion': '19',
180: 1:  'questions': [
180: 1:    '1',
180: 1:    '2',
180: 1:    '3',
180: 1:    '4',
180: 1:    '5',
180: 1:    '6',
180: 1:    '7',
180: 1:    '8',
180: 1:    '9',
180: 1:    '10',
180: 1:    '11',
180: 1:    '12',
180: 1:    '13',
180: 1:    '14',
180: 1:    '15',
180: 1:    '16',
180: 1:    '17',
180: 1:    '18',
180: 1:    '19'
180: 1:  ]
180: 1:}
180: 1:Scores: 9660
180: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597', '2584', '4181']')
180: 1:Fire Event: PassTest{complexity=20, testCount=25}
------------------------------------------
181: 1:BoardData {
181: 1:  'description': 'Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
181: 1:  'expectedAnswer': '6765',
181: 1:  'history': [
181: 1:    {
181: 1:      'answer': '1',
181: 1:      'question': '1',
181: 1:      'valid': true
181: 1:    },
181: 1:    {
181: 1:      'answer': '1',
181: 1:      'question': '2',
181: 1:      'valid': true
181: 1:    },
181: 1:    {
181: 1:      'answer': '2',
181: 1:      'question': '3',
181: 1:      'valid': true
181: 1:    },
181: 1:    {
181: 1:      'answer': '3',
181: 1:      'question': '4',
181: 1:      'valid': true
181: 1:    },
181: 1:    {
181: 1:      'answer': '5',
181: 1:      'question': '5',
181: 1:      'valid': true
181: 1:    },
181: 1:    {
181: 1:      'answer': '8',
181: 1:      'question': '6',
181: 1:      'valid': true
181: 1:    },
181: 1:    {
181: 1:      'answer': '13',
181: 1:      'question': '7',
181: 1:      'valid': true
181: 1:    },
181: 1:    {
181: 1:      'answer': '21',
181: 1:      'question': '8',
181: 1:      'valid': true
181: 1:    },
181: 1:    {
181: 1:      'answer': '34',
181: 1:      'question': '9',
181: 1:      'valid': true
181: 1:    },
181: 1:    {
181: 1:      'answer': '55',
181: 1:      'question': '10',
181: 1:      'valid': true
181: 1:    },
181: 1:    {
181: 1:      'answer': '89',
181: 1:      'question': '11',
181: 1:      'valid': true
181: 1:    },
181: 1:    {
181: 1:      'answer': '144',
181: 1:      'question': '12',
181: 1:      'valid': true
181: 1:    },
181: 1:    {
181: 1:      'answer': '233',
181: 1:      'question': '13',
181: 1:      'valid': true
181: 1:    },
181: 1:    {
181: 1:      'answer': '377',
181: 1:      'question': '14',
181: 1:      'valid': true
181: 1:    },
181: 1:    {
181: 1:      'answer': '610',
181: 1:      'question': '15',
181: 1:      'valid': true
181: 1:    },
181: 1:    {
181: 1:      'answer': '987',
181: 1:      'question': '16',
181: 1:      'valid': true
181: 1:    },
181: 1:    {
181: 1:      'answer': '1597',
181: 1:      'question': '17',
181: 1:      'valid': true
181: 1:    },
181: 1:    {
181: 1:      'answer': '2584',
181: 1:      'question': '18',
181: 1:      'valid': true
181: 1:    },
181: 1:    {
181: 1:      'answer': '4181',
181: 1:      'question': '19',
181: 1:      'valid': true
181: 1:    }
181: 1:  ],
181: 1:  'level': 7,
181: 1:  'nextQuestion': '20',
181: 1:  'questions': [
181: 1:    '1',
181: 1:    '2',
181: 1:    '3',
181: 1:    '4',
181: 1:    '5',
181: 1:    '6',
181: 1:    '7',
181: 1:    '8',
181: 1:    '9',
181: 1:    '10',
181: 1:    '11',
181: 1:    '12',
181: 1:    '13',
181: 1:    '14',
181: 1:    '15',
181: 1:    '16',
181: 1:    '17',
181: 1:    '18',
181: 1:    '19',
181: 1:    '20'
181: 1:  ]
181: 1:}
181: 1:Scores: 9668
181: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597', '2584', '4181', '6765']')
181: 1:Fire Event: PassTest{complexity=20, testCount=25}
------------------------------------------
182: 1:BoardData {
182: 1:  'description': 'Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
182: 1:  'expectedAnswer': '10946',
182: 1:  'history': [
182: 1:    {
182: 1:      'answer': '1',
182: 1:      'question': '1',
182: 1:      'valid': true
182: 1:    },
182: 1:    {
182: 1:      'answer': '1',
182: 1:      'question': '2',
182: 1:      'valid': true
182: 1:    },
182: 1:    {
182: 1:      'answer': '2',
182: 1:      'question': '3',
182: 1:      'valid': true
182: 1:    },
182: 1:    {
182: 1:      'answer': '3',
182: 1:      'question': '4',
182: 1:      'valid': true
182: 1:    },
182: 1:    {
182: 1:      'answer': '5',
182: 1:      'question': '5',
182: 1:      'valid': true
182: 1:    },
182: 1:    {
182: 1:      'answer': '8',
182: 1:      'question': '6',
182: 1:      'valid': true
182: 1:    },
182: 1:    {
182: 1:      'answer': '13',
182: 1:      'question': '7',
182: 1:      'valid': true
182: 1:    },
182: 1:    {
182: 1:      'answer': '21',
182: 1:      'question': '8',
182: 1:      'valid': true
182: 1:    },
182: 1:    {
182: 1:      'answer': '34',
182: 1:      'question': '9',
182: 1:      'valid': true
182: 1:    },
182: 1:    {
182: 1:      'answer': '55',
182: 1:      'question': '10',
182: 1:      'valid': true
182: 1:    },
182: 1:    {
182: 1:      'answer': '89',
182: 1:      'question': '11',
182: 1:      'valid': true
182: 1:    },
182: 1:    {
182: 1:      'answer': '144',
182: 1:      'question': '12',
182: 1:      'valid': true
182: 1:    },
182: 1:    {
182: 1:      'answer': '233',
182: 1:      'question': '13',
182: 1:      'valid': true
182: 1:    },
182: 1:    {
182: 1:      'answer': '377',
182: 1:      'question': '14',
182: 1:      'valid': true
182: 1:    },
182: 1:    {
182: 1:      'answer': '610',
182: 1:      'question': '15',
182: 1:      'valid': true
182: 1:    },
182: 1:    {
182: 1:      'answer': '987',
182: 1:      'question': '16',
182: 1:      'valid': true
182: 1:    },
182: 1:    {
182: 1:      'answer': '1597',
182: 1:      'question': '17',
182: 1:      'valid': true
182: 1:    },
182: 1:    {
182: 1:      'answer': '2584',
182: 1:      'question': '18',
182: 1:      'valid': true
182: 1:    },
182: 1:    {
182: 1:      'answer': '4181',
182: 1:      'question': '19',
182: 1:      'valid': true
182: 1:    },
182: 1:    {
182: 1:      'answer': '6765',
182: 1:      'question': '20',
182: 1:      'valid': true
182: 1:    }
182: 1:  ],
182: 1:  'level': 7,
182: 1:  'nextQuestion': '21',
182: 1:  'questions': [
182: 1:    '1',
182: 1:    '2',
182: 1:    '3',
182: 1:    '4',
182: 1:    '5',
182: 1:    '6',
182: 1:    '7',
182: 1:    '8',
182: 1:    '9',
182: 1:    '10',
182: 1:    '11',
182: 1:    '12',
182: 1:    '13',
182: 1:    '14',
182: 1:    '15',
182: 1:    '16',
182: 1:    '17',
182: 1:    '18',
182: 1:    '19',
182: 1:    '20',
182: 1:    '21'
182: 1:  ]
182: 1:}
182: 1:Scores: 9676
182: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597', '2584', '4181', '6765', '10946']')
182: 1:Fire Event: PassTest{complexity=20, testCount=25}
------------------------------------------
183: 1:BoardData {
183: 1:  'description': 'Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
183: 1:  'expectedAnswer': '17711',
183: 1:  'history': [
183: 1:    {
183: 1:      'answer': '1',
183: 1:      'question': '1',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': '1',
183: 1:      'question': '2',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': '2',
183: 1:      'question': '3',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': '3',
183: 1:      'question': '4',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': '5',
183: 1:      'question': '5',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': '8',
183: 1:      'question': '6',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': '13',
183: 1:      'question': '7',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': '21',
183: 1:      'question': '8',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': '34',
183: 1:      'question': '9',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': '55',
183: 1:      'question': '10',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': '89',
183: 1:      'question': '11',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': '144',
183: 1:      'question': '12',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': '233',
183: 1:      'question': '13',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': '377',
183: 1:      'question': '14',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': '610',
183: 1:      'question': '15',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': '987',
183: 1:      'question': '16',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': '1597',
183: 1:      'question': '17',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': '2584',
183: 1:      'question': '18',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': '4181',
183: 1:      'question': '19',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': '6765',
183: 1:      'question': '20',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': '10946',
183: 1:      'question': '21',
183: 1:      'valid': true
183: 1:    }
183: 1:  ],
183: 1:  'level': 7,
183: 1:  'nextQuestion': '22',
183: 1:  'questions': [
183: 1:    '1',
183: 1:    '2',
183: 1:    '3',
183: 1:    '4',
183: 1:    '5',
183: 1:    '6',
183: 1:    '7',
183: 1:    '8',
183: 1:    '9',
183: 1:    '10',
183: 1:    '11',
183: 1:    '12',
183: 1:    '13',
183: 1:    '14',
183: 1:    '15',
183: 1:    '16',
183: 1:    '17',
183: 1:    '18',
183: 1:    '19',
183: 1:    '20',
183: 1:    '21',
183: 1:    '22'
183: 1:  ]
183: 1:}
183: 1:Scores: 9684
183: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597', '2584', '4181', '6765', '10946', '17711']')
183: 1:Fire Event: PassTest{complexity=20, testCount=25}
------------------------------------------
184: 1:BoardData {
184: 1:  'description': 'Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
184: 1:  'expectedAnswer': '28657',
184: 1:  'history': [
184: 1:    {
184: 1:      'answer': '1',
184: 1:      'question': '1',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': '1',
184: 1:      'question': '2',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': '2',
184: 1:      'question': '3',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': '3',
184: 1:      'question': '4',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': '5',
184: 1:      'question': '5',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': '8',
184: 1:      'question': '6',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': '13',
184: 1:      'question': '7',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': '21',
184: 1:      'question': '8',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': '34',
184: 1:      'question': '9',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': '55',
184: 1:      'question': '10',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': '89',
184: 1:      'question': '11',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': '144',
184: 1:      'question': '12',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': '233',
184: 1:      'question': '13',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': '377',
184: 1:      'question': '14',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': '610',
184: 1:      'question': '15',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': '987',
184: 1:      'question': '16',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': '1597',
184: 1:      'question': '17',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': '2584',
184: 1:      'question': '18',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': '4181',
184: 1:      'question': '19',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': '6765',
184: 1:      'question': '20',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': '10946',
184: 1:      'question': '21',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': '17711',
184: 1:      'question': '22',
184: 1:      'valid': true
184: 1:    }
184: 1:  ],
184: 1:  'level': 7,
184: 1:  'nextQuestion': '23',
184: 1:  'questions': [
184: 1:    '1',
184: 1:    '2',
184: 1:    '3',
184: 1:    '4',
184: 1:    '5',
184: 1:    '6',
184: 1:    '7',
184: 1:    '8',
184: 1:    '9',
184: 1:    '10',
184: 1:    '11',
184: 1:    '12',
184: 1:    '13',
184: 1:    '14',
184: 1:    '15',
184: 1:    '16',
184: 1:    '17',
184: 1:    '18',
184: 1:    '19',
184: 1:    '20',
184: 1:    '21',
184: 1:    '22',
184: 1:    '23'
184: 1:  ]
184: 1:}
184: 1:Scores: 9692
184: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597', '2584', '4181', '6765', '10946', '17711', '28657']')
184: 1:Fire Event: PassTest{complexity=20, testCount=25}
------------------------------------------
185: 1:BoardData {
185: 1:  'description': 'Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
185: 1:  'expectedAnswer': '46368',
185: 1:  'history': [
185: 1:    {
185: 1:      'answer': '1',
185: 1:      'question': '1',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': '1',
185: 1:      'question': '2',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': '2',
185: 1:      'question': '3',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': '3',
185: 1:      'question': '4',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': '5',
185: 1:      'question': '5',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': '8',
185: 1:      'question': '6',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': '13',
185: 1:      'question': '7',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': '21',
185: 1:      'question': '8',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': '34',
185: 1:      'question': '9',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': '55',
185: 1:      'question': '10',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': '89',
185: 1:      'question': '11',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': '144',
185: 1:      'question': '12',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': '233',
185: 1:      'question': '13',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': '377',
185: 1:      'question': '14',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': '610',
185: 1:      'question': '15',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': '987',
185: 1:      'question': '16',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': '1597',
185: 1:      'question': '17',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': '2584',
185: 1:      'question': '18',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': '4181',
185: 1:      'question': '19',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': '6765',
185: 1:      'question': '20',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': '10946',
185: 1:      'question': '21',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': '17711',
185: 1:      'question': '22',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': '28657',
185: 1:      'question': '23',
185: 1:      'valid': true
185: 1:    }
185: 1:  ],
185: 1:  'level': 7,
185: 1:  'nextQuestion': '24',
185: 1:  'questions': [
185: 1:    '1',
185: 1:    '2',
185: 1:    '3',
185: 1:    '4',
185: 1:    '5',
185: 1:    '6',
185: 1:    '7',
185: 1:    '8',
185: 1:    '9',
185: 1:    '10',
185: 1:    '11',
185: 1:    '12',
185: 1:    '13',
185: 1:    '14',
185: 1:    '15',
185: 1:    '16',
185: 1:    '17',
185: 1:    '18',
185: 1:    '19',
185: 1:    '20',
185: 1:    '21',
185: 1:    '22',
185: 1:    '23',
185: 1:    '24'
185: 1:  ]
185: 1:}
185: 1:Scores: 9700
185: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597', '2584', '4181', '6765', '10946', '17711', '28657', '46368']')
185: 1:Fire Event: PassTest{complexity=20, testCount=25}
------------------------------------------
186: 1:BoardData {
186: 1:  'description': 'Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
186: 1:  'expectedAnswer': '75025',
186: 1:  'history': [
186: 1:    {
186: 1:      'answer': '1',
186: 1:      'question': '1',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': '1',
186: 1:      'question': '2',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': '2',
186: 1:      'question': '3',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': '3',
186: 1:      'question': '4',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': '5',
186: 1:      'question': '5',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': '8',
186: 1:      'question': '6',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': '13',
186: 1:      'question': '7',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': '21',
186: 1:      'question': '8',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': '34',
186: 1:      'question': '9',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': '55',
186: 1:      'question': '10',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': '89',
186: 1:      'question': '11',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': '144',
186: 1:      'question': '12',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': '233',
186: 1:      'question': '13',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': '377',
186: 1:      'question': '14',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': '610',
186: 1:      'question': '15',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': '987',
186: 1:      'question': '16',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': '1597',
186: 1:      'question': '17',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': '2584',
186: 1:      'question': '18',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': '4181',
186: 1:      'question': '19',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': '6765',
186: 1:      'question': '20',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': '10946',
186: 1:      'question': '21',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': '17711',
186: 1:      'question': '22',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': '28657',
186: 1:      'question': '23',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': '46368',
186: 1:      'question': '24',
186: 1:      'valid': true
186: 1:    }
186: 1:  ],
186: 1:  'level': 7,
186: 1:  'nextQuestion': '25',
186: 1:  'questions': [
186: 1:    '1',
186: 1:    '2',
186: 1:    '3',
186: 1:    '4',
186: 1:    '5',
186: 1:    '6',
186: 1:    '7',
186: 1:    '8',
186: 1:    '9',
186: 1:    '10',
186: 1:    '11',
186: 1:    '12',
186: 1:    '13',
186: 1:    '14',
186: 1:    '15',
186: 1:    '16',
186: 1:    '17',
186: 1:    '18',
186: 1:    '19',
186: 1:    '20',
186: 1:    '21',
186: 1:    '22',
186: 1:    '23',
186: 1:    '24',
186: 1:    '25'
186: 1:  ]
186: 1:}
186: 1:Scores: 9708
186: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597', '2584', '4181', '6765', '10946', '17711', '28657', '46368', '75025']')
186: 1:Fire Event: PassTest{complexity=20, testCount=25}
186: 1:Fire Event: NextAlgorithm{complexity=20, time=0}
------------------------------------------
187: 1:BoardData {
187: 1:  'description': 'Wait for next level. Please send 'message('StartNextLevel')' command.',
187: 1:  'history': [
187: 1:    {
187: 1:      'answer': '1',
187: 1:      'question': '1',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '1',
187: 1:      'question': '2',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '2',
187: 1:      'question': '3',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '3',
187: 1:      'question': '4',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '5',
187: 1:      'question': '5',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '8',
187: 1:      'question': '6',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '13',
187: 1:      'question': '7',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '21',
187: 1:      'question': '8',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '34',
187: 1:      'question': '9',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '55',
187: 1:      'question': '10',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '89',
187: 1:      'question': '11',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '144',
187: 1:      'question': '12',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '233',
187: 1:      'question': '13',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '377',
187: 1:      'question': '14',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '610',
187: 1:      'question': '15',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '987',
187: 1:      'question': '16',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '1597',
187: 1:      'question': '17',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '2584',
187: 1:      'question': '18',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '4181',
187: 1:      'question': '19',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '6765',
187: 1:      'question': '20',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '10946',
187: 1:      'question': '21',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '17711',
187: 1:      'question': '22',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '28657',
187: 1:      'question': '23',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '46368',
187: 1:      'question': '24',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '75025',
187: 1:      'question': '25',
187: 1:      'valid': true
187: 1:    }
187: 1:  ],
187: 1:  'level': 7,
187: 1:  'questions': []
187: 1:}
187: 1:Scores: 12415
187: 1:Answer: message('StartNextLevel')
187: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
188: 1:BoardData {
188: 1:  'description': 'Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...',
188: 1:  'expectedAnswer': '[1]',
188: 1:  'history': [],
188: 1:  'level': 8,
188: 1:  'nextQuestion': '1',
188: 1:  'questions': ['1']
188: 1:}
188: 1:Scores: 12415
188: 1:Answer: message('['[1]']')
188: 1:Fire Event: PassTest{complexity=25, testCount=25}
------------------------------------------
189: 1:BoardData {
189: 1:  'description': 'Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...',
189: 1:  'expectedAnswer': '[2]',
189: 1:  'history': [{
189: 1:    'answer': '[1]',
189: 1:    'question': '1',
189: 1:    'valid': true
189: 1:  }],
189: 1:  'level': 8,
189: 1:  'nextQuestion': '2',
189: 1:  'questions': [
189: 1:    '1',
189: 1:    '2'
189: 1:  ]
189: 1:}
189: 1:Scores: 12425
189: 1:Answer: message('['[1]', '[2]']')
189: 1:Fire Event: PassTest{complexity=25, testCount=25}
------------------------------------------
190: 1:BoardData {
190: 1:  'description': 'Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...',
190: 1:  'expectedAnswer': '[3]',
190: 1:  'history': [
190: 1:    {
190: 1:      'answer': '[1]',
190: 1:      'question': '1',
190: 1:      'valid': true
190: 1:    },
190: 1:    {
190: 1:      'answer': '[2]',
190: 1:      'question': '2',
190: 1:      'valid': true
190: 1:    }
190: 1:  ],
190: 1:  'level': 8,
190: 1:  'nextQuestion': '3',
190: 1:  'questions': [
190: 1:    '1',
190: 1:    '2',
190: 1:    '3'
190: 1:  ]
190: 1:}
190: 1:Scores: 12435
190: 1:Answer: message('['[1]', '[2]', '[3]']')
190: 1:Fire Event: PassTest{complexity=25, testCount=25}
------------------------------------------
191: 1:BoardData {
191: 1:  'description': 'Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...',
191: 1:  'expectedAnswer': '[2,2]',
191: 1:  'history': [
191: 1:    {
191: 1:      'answer': '[1]',
191: 1:      'question': '1',
191: 1:      'valid': true
191: 1:    },
191: 1:    {
191: 1:      'answer': '[2]',
191: 1:      'question': '2',
191: 1:      'valid': true
191: 1:    },
191: 1:    {
191: 1:      'answer': '[3]',
191: 1:      'question': '3',
191: 1:      'valid': true
191: 1:    }
191: 1:  ],
191: 1:  'level': 8,
191: 1:  'nextQuestion': '4',
191: 1:  'questions': [
191: 1:    '1',
191: 1:    '2',
191: 1:    '3',
191: 1:    '4'
191: 1:  ]
191: 1:}
191: 1:Scores: 12445
191: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]']')
191: 1:Fire Event: PassTest{complexity=25, testCount=25}
------------------------------------------
192: 1:BoardData {
192: 1:  'description': 'Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...',
192: 1:  'expectedAnswer': '[5]',
192: 1:  'history': [
192: 1:    {
192: 1:      'answer': '[1]',
192: 1:      'question': '1',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': '[2]',
192: 1:      'question': '2',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': '[3]',
192: 1:      'question': '3',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': '[2,2]',
192: 1:      'question': '4',
192: 1:      'valid': true
192: 1:    }
192: 1:  ],
192: 1:  'level': 8,
192: 1:  'nextQuestion': '5',
192: 1:  'questions': [
192: 1:    '1',
192: 1:    '2',
192: 1:    '3',
192: 1:    '4',
192: 1:    '5'
192: 1:  ]
192: 1:}
192: 1:Scores: 12455
192: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]']')
192: 1:Fire Event: PassTest{complexity=25, testCount=25}
------------------------------------------
193: 1:BoardData {
193: 1:  'description': 'Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...',
193: 1:  'expectedAnswer': '[2,3]',
193: 1:  'history': [
193: 1:    {
193: 1:      'answer': '[1]',
193: 1:      'question': '1',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': '[2]',
193: 1:      'question': '2',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': '[3]',
193: 1:      'question': '3',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': '[2,2]',
193: 1:      'question': '4',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': '[5]',
193: 1:      'question': '5',
193: 1:      'valid': true
193: 1:    }
193: 1:  ],
193: 1:  'level': 8,
193: 1:  'nextQuestion': '6',
193: 1:  'questions': [
193: 1:    '1',
193: 1:    '2',
193: 1:    '3',
193: 1:    '4',
193: 1:    '5',
193: 1:    '6'
193: 1:  ]
193: 1:}
193: 1:Scores: 12465
193: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]']')
193: 1:Fire Event: PassTest{complexity=25, testCount=25}
------------------------------------------
194: 1:BoardData {
194: 1:  'description': 'Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...',
194: 1:  'expectedAnswer': '[7]',
194: 1:  'history': [
194: 1:    {
194: 1:      'answer': '[1]',
194: 1:      'question': '1',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': '[2]',
194: 1:      'question': '2',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': '[3]',
194: 1:      'question': '3',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': '[2,2]',
194: 1:      'question': '4',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': '[5]',
194: 1:      'question': '5',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': '[2,3]',
194: 1:      'question': '6',
194: 1:      'valid': true
194: 1:    }
194: 1:  ],
194: 1:  'level': 8,
194: 1:  'nextQuestion': '7',
194: 1:  'questions': [
194: 1:    '1',
194: 1:    '2',
194: 1:    '3',
194: 1:    '4',
194: 1:    '5',
194: 1:    '6',
194: 1:    '7'
194: 1:  ]
194: 1:}
194: 1:Scores: 12475
194: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]']')
194: 1:Fire Event: PassTest{complexity=25, testCount=25}
------------------------------------------
195: 1:BoardData {
195: 1:  'description': 'Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...',
195: 1:  'expectedAnswer': '[2,2,2]',
195: 1:  'history': [
195: 1:    {
195: 1:      'answer': '[1]',
195: 1:      'question': '1',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': '[2]',
195: 1:      'question': '2',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': '[3]',
195: 1:      'question': '3',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': '[2,2]',
195: 1:      'question': '4',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': '[5]',
195: 1:      'question': '5',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': '[2,3]',
195: 1:      'question': '6',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': '[7]',
195: 1:      'question': '7',
195: 1:      'valid': true
195: 1:    }
195: 1:  ],
195: 1:  'level': 8,
195: 1:  'nextQuestion': '8',
195: 1:  'questions': [
195: 1:    '1',
195: 1:    '2',
195: 1:    '3',
195: 1:    '4',
195: 1:    '5',
195: 1:    '6',
195: 1:    '7',
195: 1:    '8'
195: 1:  ]
195: 1:}
195: 1:Scores: 12485
195: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]']')
195: 1:Fire Event: PassTest{complexity=25, testCount=25}
------------------------------------------
196: 1:BoardData {
196: 1:  'description': 'Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...',
196: 1:  'expectedAnswer': '[3,3]',
196: 1:  'history': [
196: 1:    {
196: 1:      'answer': '[1]',
196: 1:      'question': '1',
196: 1:      'valid': true
196: 1:    },
196: 1:    {
196: 1:      'answer': '[2]',
196: 1:      'question': '2',
196: 1:      'valid': true
196: 1:    },
196: 1:    {
196: 1:      'answer': '[3]',
196: 1:      'question': '3',
196: 1:      'valid': true
196: 1:    },
196: 1:    {
196: 1:      'answer': '[2,2]',
196: 1:      'question': '4',
196: 1:      'valid': true
196: 1:    },
196: 1:    {
196: 1:      'answer': '[5]',
196: 1:      'question': '5',
196: 1:      'valid': true
196: 1:    },
196: 1:    {
196: 1:      'answer': '[2,3]',
196: 1:      'question': '6',
196: 1:      'valid': true
196: 1:    },
196: 1:    {
196: 1:      'answer': '[7]',
196: 1:      'question': '7',
196: 1:      'valid': true
196: 1:    },
196: 1:    {
196: 1:      'answer': '[2,2,2]',
196: 1:      'question': '8',
196: 1:      'valid': true
196: 1:    }
196: 1:  ],
196: 1:  'level': 8,
196: 1:  'nextQuestion': '9',
196: 1:  'questions': [
196: 1:    '1',
196: 1:    '2',
196: 1:    '3',
196: 1:    '4',
196: 1:    '5',
196: 1:    '6',
196: 1:    '7',
196: 1:    '8',
196: 1:    '9'
196: 1:  ]
196: 1:}
196: 1:Scores: 12495
196: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]']')
196: 1:Fire Event: PassTest{complexity=25, testCount=25}
------------------------------------------
197: 1:BoardData {
197: 1:  'description': 'Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...',
197: 1:  'expectedAnswer': '[2,5]',
197: 1:  'history': [
197: 1:    {
197: 1:      'answer': '[1]',
197: 1:      'question': '1',
197: 1:      'valid': true
197: 1:    },
197: 1:    {
197: 1:      'answer': '[2]',
197: 1:      'question': '2',
197: 1:      'valid': true
197: 1:    },
197: 1:    {
197: 1:      'answer': '[3]',
197: 1:      'question': '3',
197: 1:      'valid': true
197: 1:    },
197: 1:    {
197: 1:      'answer': '[2,2]',
197: 1:      'question': '4',
197: 1:      'valid': true
197: 1:    },
197: 1:    {
197: 1:      'answer': '[5]',
197: 1:      'question': '5',
197: 1:      'valid': true
197: 1:    },
197: 1:    {
197: 1:      'answer': '[2,3]',
197: 1:      'question': '6',
197: 1:      'valid': true
197: 1:    },
197: 1:    {
197: 1:      'answer': '[7]',
197: 1:      'question': '7',
197: 1:      'valid': true
197: 1:    },
197: 1:    {
197: 1:      'answer': '[2,2,2]',
197: 1:      'question': '8',
197: 1:      'valid': true
197: 1:    },
197: 1:    {
197: 1:      'answer': '[3,3]',
197: 1:      'question': '9',
197: 1:      'valid': true
197: 1:    }
197: 1:  ],
197: 1:  'level': 8,
197: 1:  'nextQuestion': '10',
197: 1:  'questions': [
197: 1:    '1',
197: 1:    '2',
197: 1:    '3',
197: 1:    '4',
197: 1:    '5',
197: 1:    '6',
197: 1:    '7',
197: 1:    '8',
197: 1:    '9',
197: 1:    '10'
197: 1:  ]
197: 1:}
197: 1:Scores: 12505
197: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]']')
197: 1:Fire Event: PassTest{complexity=25, testCount=25}
------------------------------------------
198: 1:BoardData {
198: 1:  'description': 'Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...',
198: 1:  'expectedAnswer': '[11]',
198: 1:  'history': [
198: 1:    {
198: 1:      'answer': '[1]',
198: 1:      'question': '1',
198: 1:      'valid': true
198: 1:    },
198: 1:    {
198: 1:      'answer': '[2]',
198: 1:      'question': '2',
198: 1:      'valid': true
198: 1:    },
198: 1:    {
198: 1:      'answer': '[3]',
198: 1:      'question': '3',
198: 1:      'valid': true
198: 1:    },
198: 1:    {
198: 1:      'answer': '[2,2]',
198: 1:      'question': '4',
198: 1:      'valid': true
198: 1:    },
198: 1:    {
198: 1:      'answer': '[5]',
198: 1:      'question': '5',
198: 1:      'valid': true
198: 1:    },
198: 1:    {
198: 1:      'answer': '[2,3]',
198: 1:      'question': '6',
198: 1:      'valid': true
198: 1:    },
198: 1:    {
198: 1:      'answer': '[7]',
198: 1:      'question': '7',
198: 1:      'valid': true
198: 1:    },
198: 1:    {
198: 1:      'answer': '[2,2,2]',
198: 1:      'question': '8',
198: 1:      'valid': true
198: 1:    },
198: 1:    {
198: 1:      'answer': '[3,3]',
198: 1:      'question': '9',
198: 1:      'valid': true
198: 1:    },
198: 1:    {
198: 1:      'answer': '[2,5]',
198: 1:      'question': '10',
198: 1:      'valid': true
198: 1:    }
198: 1:  ],
198: 1:  'level': 8,
198: 1:  'nextQuestion': '11',
198: 1:  'questions': [
198: 1:    '1',
198: 1:    '2',
198: 1:    '3',
198: 1:    '4',
198: 1:    '5',
198: 1:    '6',
198: 1:    '7',
198: 1:    '8',
198: 1:    '9',
198: 1:    '10',
198: 1:    '11'
198: 1:  ]
198: 1:}
198: 1:Scores: 12515
198: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]']')
198: 1:Fire Event: PassTest{complexity=25, testCount=25}
------------------------------------------
199: 1:BoardData {
199: 1:  'description': 'Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...',
199: 1:  'expectedAnswer': '[2,2,3]',
199: 1:  'history': [
199: 1:    {
199: 1:      'answer': '[1]',
199: 1:      'question': '1',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '[2]',
199: 1:      'question': '2',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '[3]',
199: 1:      'question': '3',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '[2,2]',
199: 1:      'question': '4',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '[5]',
199: 1:      'question': '5',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '[2,3]',
199: 1:      'question': '6',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '[7]',
199: 1:      'question': '7',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '[2,2,2]',
199: 1:      'question': '8',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '[3,3]',
199: 1:      'question': '9',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '[2,5]',
199: 1:      'question': '10',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '[11]',
199: 1:      'question': '11',
199: 1:      'valid': true
199: 1:    }
199: 1:  ],
199: 1:  'level': 8,
199: 1:  'nextQuestion': '12',
199: 1:  'questions': [
199: 1:    '1',
199: 1:    '2',
199: 1:    '3',
199: 1:    '4',
199: 1:    '5',
199: 1:    '6',
199: 1:    '7',
199: 1:    '8',
199: 1:    '9',
199: 1:    '10',
199: 1:    '11',
199: 1:    '12'
199: 1:  ]
199: 1:}
199: 1:Scores: 12525
199: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]']')
199: 1:Fire Event: PassTest{complexity=25, testCount=25}
------------------------------------------
200: 1:BoardData {
200: 1:  'description': 'Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...',
200: 1:  'expectedAnswer': '[13]',
200: 1:  'history': [
200: 1:    {
200: 1:      'answer': '[1]',
200: 1:      'question': '1',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '[2]',
200: 1:      'question': '2',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '[3]',
200: 1:      'question': '3',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '[2,2]',
200: 1:      'question': '4',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '[5]',
200: 1:      'question': '5',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '[2,3]',
200: 1:      'question': '6',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '[7]',
200: 1:      'question': '7',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '[2,2,2]',
200: 1:      'question': '8',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '[3,3]',
200: 1:      'question': '9',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '[2,5]',
200: 1:      'question': '10',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '[11]',
200: 1:      'question': '11',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '[2,2,3]',
200: 1:      'question': '12',
200: 1:      'valid': true
200: 1:    }
200: 1:  ],
200: 1:  'level': 8,
200: 1:  'nextQuestion': '13',
200: 1:  'questions': [
200: 1:    '1',
200: 1:    '2',
200: 1:    '3',
200: 1:    '4',
200: 1:    '5',
200: 1:    '6',
200: 1:    '7',
200: 1:    '8',
200: 1:    '9',
200: 1:    '10',
200: 1:    '11',
200: 1:    '12',
200: 1:    '13'
200: 1:  ]
200: 1:}
200: 1:Scores: 12535
200: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]']')
200: 1:Fire Event: PassTest{complexity=25, testCount=25}
------------------------------------------
201: 1:BoardData {
201: 1:  'description': 'Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...',
201: 1:  'expectedAnswer': '[2,7]',
201: 1:  'history': [
201: 1:    {
201: 1:      'answer': '[1]',
201: 1:      'question': '1',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '[2]',
201: 1:      'question': '2',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '[3]',
201: 1:      'question': '3',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '[2,2]',
201: 1:      'question': '4',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '[5]',
201: 1:      'question': '5',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '[2,3]',
201: 1:      'question': '6',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '[7]',
201: 1:      'question': '7',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '[2,2,2]',
201: 1:      'question': '8',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '[3,3]',
201: 1:      'question': '9',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '[2,5]',
201: 1:      'question': '10',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '[11]',
201: 1:      'question': '11',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '[2,2,3]',
201: 1:      'question': '12',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '[13]',
201: 1:      'question': '13',
201: 1:      'valid': true
201: 1:    }
201: 1:  ],
201: 1:  'level': 8,
201: 1:  'nextQuestion': '14',
201: 1:  'questions': [
201: 1:    '1',
201: 1:    '2',
201: 1:    '3',
201: 1:    '4',
201: 1:    '5',
201: 1:    '6',
201: 1:    '7',
201: 1:    '8',
201: 1:    '9',
201: 1:    '10',
201: 1:    '11',
201: 1:    '12',
201: 1:    '13',
201: 1:    '14'
201: 1:  ]
201: 1:}
201: 1:Scores: 12545
201: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]']')
201: 1:Fire Event: PassTest{complexity=25, testCount=25}
------------------------------------------
202: 1:BoardData {
202: 1:  'description': 'Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...',
202: 1:  'expectedAnswer': '[3,5]',
202: 1:  'history': [
202: 1:    {
202: 1:      'answer': '[1]',
202: 1:      'question': '1',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '[2]',
202: 1:      'question': '2',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '[3]',
202: 1:      'question': '3',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '[2,2]',
202: 1:      'question': '4',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '[5]',
202: 1:      'question': '5',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '[2,3]',
202: 1:      'question': '6',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '[7]',
202: 1:      'question': '7',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '[2,2,2]',
202: 1:      'question': '8',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '[3,3]',
202: 1:      'question': '9',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '[2,5]',
202: 1:      'question': '10',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '[11]',
202: 1:      'question': '11',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '[2,2,3]',
202: 1:      'question': '12',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '[13]',
202: 1:      'question': '13',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '[2,7]',
202: 1:      'question': '14',
202: 1:      'valid': true
202: 1:    }
202: 1:  ],
202: 1:  'level': 8,
202: 1:  'nextQuestion': '15',
202: 1:  'questions': [
202: 1:    '1',
202: 1:    '2',
202: 1:    '3',
202: 1:    '4',
202: 1:    '5',
202: 1:    '6',
202: 1:    '7',
202: 1:    '8',
202: 1:    '9',
202: 1:    '10',
202: 1:    '11',
202: 1:    '12',
202: 1:    '13',
202: 1:    '14',
202: 1:    '15'
202: 1:  ]
202: 1:}
202: 1:Scores: 12555
202: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]']')
202: 1:Fire Event: PassTest{complexity=25, testCount=25}
------------------------------------------
203: 1:BoardData {
203: 1:  'description': 'Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...',
203: 1:  'expectedAnswer': '[2,2,2,2]',
203: 1:  'history': [
203: 1:    {
203: 1:      'answer': '[1]',
203: 1:      'question': '1',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '[2]',
203: 1:      'question': '2',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '[3]',
203: 1:      'question': '3',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '[2,2]',
203: 1:      'question': '4',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '[5]',
203: 1:      'question': '5',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '[2,3]',
203: 1:      'question': '6',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '[7]',
203: 1:      'question': '7',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '[2,2,2]',
203: 1:      'question': '8',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '[3,3]',
203: 1:      'question': '9',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '[2,5]',
203: 1:      'question': '10',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '[11]',
203: 1:      'question': '11',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '[2,2,3]',
203: 1:      'question': '12',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '[13]',
203: 1:      'question': '13',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '[2,7]',
203: 1:      'question': '14',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '[3,5]',
203: 1:      'question': '15',
203: 1:      'valid': true
203: 1:    }
203: 1:  ],
203: 1:  'level': 8,
203: 1:  'nextQuestion': '16',
203: 1:  'questions': [
203: 1:    '1',
203: 1:    '2',
203: 1:    '3',
203: 1:    '4',
203: 1:    '5',
203: 1:    '6',
203: 1:    '7',
203: 1:    '8',
203: 1:    '9',
203: 1:    '10',
203: 1:    '11',
203: 1:    '12',
203: 1:    '13',
203: 1:    '14',
203: 1:    '15',
203: 1:    '16'
203: 1:  ]
203: 1:}
203: 1:Scores: 12565
203: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]']')
203: 1:Fire Event: PassTest{complexity=25, testCount=25}
------------------------------------------
204: 1:BoardData {
204: 1:  'description': 'Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...',
204: 1:  'expectedAnswer': '[17]',
204: 1:  'history': [
204: 1:    {
204: 1:      'answer': '[1]',
204: 1:      'question': '1',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '[2]',
204: 1:      'question': '2',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '[3]',
204: 1:      'question': '3',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '[2,2]',
204: 1:      'question': '4',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '[5]',
204: 1:      'question': '5',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '[2,3]',
204: 1:      'question': '6',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '[7]',
204: 1:      'question': '7',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '[2,2,2]',
204: 1:      'question': '8',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '[3,3]',
204: 1:      'question': '9',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '[2,5]',
204: 1:      'question': '10',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '[11]',
204: 1:      'question': '11',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '[2,2,3]',
204: 1:      'question': '12',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '[13]',
204: 1:      'question': '13',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '[2,7]',
204: 1:      'question': '14',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '[3,5]',
204: 1:      'question': '15',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '[2,2,2,2]',
204: 1:      'question': '16',
204: 1:      'valid': true
204: 1:    }
204: 1:  ],
204: 1:  'level': 8,
204: 1:  'nextQuestion': '17',
204: 1:  'questions': [
204: 1:    '1',
204: 1:    '2',
204: 1:    '3',
204: 1:    '4',
204: 1:    '5',
204: 1:    '6',
204: 1:    '7',
204: 1:    '8',
204: 1:    '9',
204: 1:    '10',
204: 1:    '11',
204: 1:    '12',
204: 1:    '13',
204: 1:    '14',
204: 1:    '15',
204: 1:    '16',
204: 1:    '17'
204: 1:  ]
204: 1:}
204: 1:Scores: 12575
204: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]', '[17]']')
204: 1:Fire Event: PassTest{complexity=25, testCount=25}
------------------------------------------
205: 1:BoardData {
205: 1:  'description': 'Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...',
205: 1:  'expectedAnswer': '[2,3,3]',
205: 1:  'history': [
205: 1:    {
205: 1:      'answer': '[1]',
205: 1:      'question': '1',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '[2]',
205: 1:      'question': '2',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '[3]',
205: 1:      'question': '3',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '[2,2]',
205: 1:      'question': '4',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '[5]',
205: 1:      'question': '5',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '[2,3]',
205: 1:      'question': '6',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '[7]',
205: 1:      'question': '7',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '[2,2,2]',
205: 1:      'question': '8',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '[3,3]',
205: 1:      'question': '9',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '[2,5]',
205: 1:      'question': '10',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '[11]',
205: 1:      'question': '11',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '[2,2,3]',
205: 1:      'question': '12',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '[13]',
205: 1:      'question': '13',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '[2,7]',
205: 1:      'question': '14',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '[3,5]',
205: 1:      'question': '15',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '[2,2,2,2]',
205: 1:      'question': '16',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '[17]',
205: 1:      'question': '17',
205: 1:      'valid': true
205: 1:    }
205: 1:  ],
205: 1:  'level': 8,
205: 1:  'nextQuestion': '18',
205: 1:  'questions': [
205: 1:    '1',
205: 1:    '2',
205: 1:    '3',
205: 1:    '4',
205: 1:    '5',
205: 1:    '6',
205: 1:    '7',
205: 1:    '8',
205: 1:    '9',
205: 1:    '10',
205: 1:    '11',
205: 1:    '12',
205: 1:    '13',
205: 1:    '14',
205: 1:    '15',
205: 1:    '16',
205: 1:    '17',
205: 1:    '18'
205: 1:  ]
205: 1:}
205: 1:Scores: 12585
205: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]', '[17]', '[2,3,3]']')
205: 1:Fire Event: PassTest{complexity=25, testCount=25}
------------------------------------------
206: 1:BoardData {
206: 1:  'description': 'Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...',
206: 1:  'expectedAnswer': '[19]',
206: 1:  'history': [
206: 1:    {
206: 1:      'answer': '[1]',
206: 1:      'question': '1',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '[2]',
206: 1:      'question': '2',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '[3]',
206: 1:      'question': '3',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '[2,2]',
206: 1:      'question': '4',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '[5]',
206: 1:      'question': '5',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '[2,3]',
206: 1:      'question': '6',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '[7]',
206: 1:      'question': '7',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '[2,2,2]',
206: 1:      'question': '8',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '[3,3]',
206: 1:      'question': '9',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '[2,5]',
206: 1:      'question': '10',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '[11]',
206: 1:      'question': '11',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '[2,2,3]',
206: 1:      'question': '12',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '[13]',
206: 1:      'question': '13',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '[2,7]',
206: 1:      'question': '14',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '[3,5]',
206: 1:      'question': '15',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '[2,2,2,2]',
206: 1:      'question': '16',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '[17]',
206: 1:      'question': '17',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '[2,3,3]',
206: 1:      'question': '18',
206: 1:      'valid': true
206: 1:    }
206: 1:  ],
206: 1:  'level': 8,
206: 1:  'nextQuestion': '19',
206: 1:  'questions': [
206: 1:    '1',
206: 1:    '2',
206: 1:    '3',
206: 1:    '4',
206: 1:    '5',
206: 1:    '6',
206: 1:    '7',
206: 1:    '8',
206: 1:    '9',
206: 1:    '10',
206: 1:    '11',
206: 1:    '12',
206: 1:    '13',
206: 1:    '14',
206: 1:    '15',
206: 1:    '16',
206: 1:    '17',
206: 1:    '18',
206: 1:    '19'
206: 1:  ]
206: 1:}
206: 1:Scores: 12595
206: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]', '[17]', '[2,3,3]', '[19]']')
206: 1:Fire Event: PassTest{complexity=25, testCount=25}
------------------------------------------
207: 1:BoardData {
207: 1:  'description': 'Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...',
207: 1:  'expectedAnswer': '[2,2,5]',
207: 1:  'history': [
207: 1:    {
207: 1:      'answer': '[1]',
207: 1:      'question': '1',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '[2]',
207: 1:      'question': '2',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '[3]',
207: 1:      'question': '3',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '[2,2]',
207: 1:      'question': '4',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '[5]',
207: 1:      'question': '5',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '[2,3]',
207: 1:      'question': '6',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '[7]',
207: 1:      'question': '7',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '[2,2,2]',
207: 1:      'question': '8',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '[3,3]',
207: 1:      'question': '9',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '[2,5]',
207: 1:      'question': '10',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '[11]',
207: 1:      'question': '11',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '[2,2,3]',
207: 1:      'question': '12',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '[13]',
207: 1:      'question': '13',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '[2,7]',
207: 1:      'question': '14',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '[3,5]',
207: 1:      'question': '15',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '[2,2,2,2]',
207: 1:      'question': '16',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '[17]',
207: 1:      'question': '17',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '[2,3,3]',
207: 1:      'question': '18',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '[19]',
207: 1:      'question': '19',
207: 1:      'valid': true
207: 1:    }
207: 1:  ],
207: 1:  'level': 8,
207: 1:  'nextQuestion': '20',
207: 1:  'questions': [
207: 1:    '1',
207: 1:    '2',
207: 1:    '3',
207: 1:    '4',
207: 1:    '5',
207: 1:    '6',
207: 1:    '7',
207: 1:    '8',
207: 1:    '9',
207: 1:    '10',
207: 1:    '11',
207: 1:    '12',
207: 1:    '13',
207: 1:    '14',
207: 1:    '15',
207: 1:    '16',
207: 1:    '17',
207: 1:    '18',
207: 1:    '19',
207: 1:    '20'
207: 1:  ]
207: 1:}
207: 1:Scores: 12605
207: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]', '[17]', '[2,3,3]', '[19]', '[2,2,5]']')
207: 1:Fire Event: PassTest{complexity=25, testCount=25}
------------------------------------------
208: 1:BoardData {
208: 1:  'description': 'Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...',
208: 1:  'expectedAnswer': '[3,7]',
208: 1:  'history': [
208: 1:    {
208: 1:      'answer': '[1]',
208: 1:      'question': '1',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '[2]',
208: 1:      'question': '2',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '[3]',
208: 1:      'question': '3',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '[2,2]',
208: 1:      'question': '4',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '[5]',
208: 1:      'question': '5',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '[2,3]',
208: 1:      'question': '6',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '[7]',
208: 1:      'question': '7',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '[2,2,2]',
208: 1:      'question': '8',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '[3,3]',
208: 1:      'question': '9',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '[2,5]',
208: 1:      'question': '10',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '[11]',
208: 1:      'question': '11',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '[2,2,3]',
208: 1:      'question': '12',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '[13]',
208: 1:      'question': '13',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '[2,7]',
208: 1:      'question': '14',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '[3,5]',
208: 1:      'question': '15',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '[2,2,2,2]',
208: 1:      'question': '16',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '[17]',
208: 1:      'question': '17',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '[2,3,3]',
208: 1:      'question': '18',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '[19]',
208: 1:      'question': '19',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '[2,2,5]',
208: 1:      'question': '20',
208: 1:      'valid': true
208: 1:    }
208: 1:  ],
208: 1:  'level': 8,
208: 1:  'nextQuestion': '21',
208: 1:  'questions': [
208: 1:    '1',
208: 1:    '2',
208: 1:    '3',
208: 1:    '4',
208: 1:    '5',
208: 1:    '6',
208: 1:    '7',
208: 1:    '8',
208: 1:    '9',
208: 1:    '10',
208: 1:    '11',
208: 1:    '12',
208: 1:    '13',
208: 1:    '14',
208: 1:    '15',
208: 1:    '16',
208: 1:    '17',
208: 1:    '18',
208: 1:    '19',
208: 1:    '20',
208: 1:    '21'
208: 1:  ]
208: 1:}
208: 1:Scores: 12615
208: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]', '[17]', '[2,3,3]', '[19]', '[2,2,5]', '[3,7]']')
208: 1:Fire Event: PassTest{complexity=25, testCount=25}
------------------------------------------
209: 1:BoardData {
209: 1:  'description': 'Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...',
209: 1:  'expectedAnswer': '[2,11]',
209: 1:  'history': [
209: 1:    {
209: 1:      'answer': '[1]',
209: 1:      'question': '1',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '[2]',
209: 1:      'question': '2',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '[3]',
209: 1:      'question': '3',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '[2,2]',
209: 1:      'question': '4',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '[5]',
209: 1:      'question': '5',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '[2,3]',
209: 1:      'question': '6',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '[7]',
209: 1:      'question': '7',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '[2,2,2]',
209: 1:      'question': '8',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '[3,3]',
209: 1:      'question': '9',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '[2,5]',
209: 1:      'question': '10',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '[11]',
209: 1:      'question': '11',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '[2,2,3]',
209: 1:      'question': '12',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '[13]',
209: 1:      'question': '13',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '[2,7]',
209: 1:      'question': '14',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '[3,5]',
209: 1:      'question': '15',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '[2,2,2,2]',
209: 1:      'question': '16',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '[17]',
209: 1:      'question': '17',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '[2,3,3]',
209: 1:      'question': '18',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '[19]',
209: 1:      'question': '19',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '[2,2,5]',
209: 1:      'question': '20',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '[3,7]',
209: 1:      'question': '21',
209: 1:      'valid': true
209: 1:    }
209: 1:  ],
209: 1:  'level': 8,
209: 1:  'nextQuestion': '22',
209: 1:  'questions': [
209: 1:    '1',
209: 1:    '2',
209: 1:    '3',
209: 1:    '4',
209: 1:    '5',
209: 1:    '6',
209: 1:    '7',
209: 1:    '8',
209: 1:    '9',
209: 1:    '10',
209: 1:    '11',
209: 1:    '12',
209: 1:    '13',
209: 1:    '14',
209: 1:    '15',
209: 1:    '16',
209: 1:    '17',
209: 1:    '18',
209: 1:    '19',
209: 1:    '20',
209: 1:    '21',
209: 1:    '22'
209: 1:  ]
209: 1:}
209: 1:Scores: 12625
209: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]', '[17]', '[2,3,3]', '[19]', '[2,2,5]', '[3,7]', '[2,11]']')
209: 1:Fire Event: PassTest{complexity=25, testCount=25}
------------------------------------------
210: 1:BoardData {
210: 1:  'description': 'Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...',
210: 1:  'expectedAnswer': '[23]',
210: 1:  'history': [
210: 1:    {
210: 1:      'answer': '[1]',
210: 1:      'question': '1',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '[2]',
210: 1:      'question': '2',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '[3]',
210: 1:      'question': '3',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '[2,2]',
210: 1:      'question': '4',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '[5]',
210: 1:      'question': '5',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '[2,3]',
210: 1:      'question': '6',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '[7]',
210: 1:      'question': '7',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '[2,2,2]',
210: 1:      'question': '8',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '[3,3]',
210: 1:      'question': '9',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '[2,5]',
210: 1:      'question': '10',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '[11]',
210: 1:      'question': '11',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '[2,2,3]',
210: 1:      'question': '12',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '[13]',
210: 1:      'question': '13',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '[2,7]',
210: 1:      'question': '14',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '[3,5]',
210: 1:      'question': '15',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '[2,2,2,2]',
210: 1:      'question': '16',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '[17]',
210: 1:      'question': '17',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '[2,3,3]',
210: 1:      'question': '18',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '[19]',
210: 1:      'question': '19',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '[2,2,5]',
210: 1:      'question': '20',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '[3,7]',
210: 1:      'question': '21',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '[2,11]',
210: 1:      'question': '22',
210: 1:      'valid': true
210: 1:    }
210: 1:  ],
210: 1:  'level': 8,
210: 1:  'nextQuestion': '23',
210: 1:  'questions': [
210: 1:    '1',
210: 1:    '2',
210: 1:    '3',
210: 1:    '4',
210: 1:    '5',
210: 1:    '6',
210: 1:    '7',
210: 1:    '8',
210: 1:    '9',
210: 1:    '10',
210: 1:    '11',
210: 1:    '12',
210: 1:    '13',
210: 1:    '14',
210: 1:    '15',
210: 1:    '16',
210: 1:    '17',
210: 1:    '18',
210: 1:    '19',
210: 1:    '20',
210: 1:    '21',
210: 1:    '22',
210: 1:    '23'
210: 1:  ]
210: 1:}
210: 1:Scores: 12635
210: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]', '[17]', '[2,3,3]', '[19]', '[2,2,5]', '[3,7]', '[2,11]', '[23]']')
210: 1:Fire Event: PassTest{complexity=25, testCount=25}
------------------------------------------
211: 1:BoardData {
211: 1:  'description': 'Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...',
211: 1:  'expectedAnswer': '[2,2,2,3]',
211: 1:  'history': [
211: 1:    {
211: 1:      'answer': '[1]',
211: 1:      'question': '1',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '[2]',
211: 1:      'question': '2',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '[3]',
211: 1:      'question': '3',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '[2,2]',
211: 1:      'question': '4',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '[5]',
211: 1:      'question': '5',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '[2,3]',
211: 1:      'question': '6',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '[7]',
211: 1:      'question': '7',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '[2,2,2]',
211: 1:      'question': '8',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '[3,3]',
211: 1:      'question': '9',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '[2,5]',
211: 1:      'question': '10',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '[11]',
211: 1:      'question': '11',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '[2,2,3]',
211: 1:      'question': '12',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '[13]',
211: 1:      'question': '13',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '[2,7]',
211: 1:      'question': '14',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '[3,5]',
211: 1:      'question': '15',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '[2,2,2,2]',
211: 1:      'question': '16',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '[17]',
211: 1:      'question': '17',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '[2,3,3]',
211: 1:      'question': '18',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '[19]',
211: 1:      'question': '19',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '[2,2,5]',
211: 1:      'question': '20',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '[3,7]',
211: 1:      'question': '21',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '[2,11]',
211: 1:      'question': '22',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '[23]',
211: 1:      'question': '23',
211: 1:      'valid': true
211: 1:    }
211: 1:  ],
211: 1:  'level': 8,
211: 1:  'nextQuestion': '24',
211: 1:  'questions': [
211: 1:    '1',
211: 1:    '2',
211: 1:    '3',
211: 1:    '4',
211: 1:    '5',
211: 1:    '6',
211: 1:    '7',
211: 1:    '8',
211: 1:    '9',
211: 1:    '10',
211: 1:    '11',
211: 1:    '12',
211: 1:    '13',
211: 1:    '14',
211: 1:    '15',
211: 1:    '16',
211: 1:    '17',
211: 1:    '18',
211: 1:    '19',
211: 1:    '20',
211: 1:    '21',
211: 1:    '22',
211: 1:    '23',
211: 1:    '24'
211: 1:  ]
211: 1:}
211: 1:Scores: 12645
211: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]', '[17]', '[2,3,3]', '[19]', '[2,2,5]', '[3,7]', '[2,11]', '[23]', '[2,2,2,3]']')
211: 1:Fire Event: PassTest{complexity=25, testCount=25}
------------------------------------------
212: 1:BoardData {
212: 1:  'description': 'Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...',
212: 1:  'expectedAnswer': '[5,5]',
212: 1:  'history': [
212: 1:    {
212: 1:      'answer': '[1]',
212: 1:      'question': '1',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '[2]',
212: 1:      'question': '2',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '[3]',
212: 1:      'question': '3',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '[2,2]',
212: 1:      'question': '4',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '[5]',
212: 1:      'question': '5',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '[2,3]',
212: 1:      'question': '6',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '[7]',
212: 1:      'question': '7',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '[2,2,2]',
212: 1:      'question': '8',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '[3,3]',
212: 1:      'question': '9',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '[2,5]',
212: 1:      'question': '10',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '[11]',
212: 1:      'question': '11',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '[2,2,3]',
212: 1:      'question': '12',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '[13]',
212: 1:      'question': '13',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '[2,7]',
212: 1:      'question': '14',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '[3,5]',
212: 1:      'question': '15',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '[2,2,2,2]',
212: 1:      'question': '16',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '[17]',
212: 1:      'question': '17',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '[2,3,3]',
212: 1:      'question': '18',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '[19]',
212: 1:      'question': '19',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '[2,2,5]',
212: 1:      'question': '20',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '[3,7]',
212: 1:      'question': '21',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '[2,11]',
212: 1:      'question': '22',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '[23]',
212: 1:      'question': '23',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '[2,2,2,3]',
212: 1:      'question': '24',
212: 1:      'valid': true
212: 1:    }
212: 1:  ],
212: 1:  'level': 8,
212: 1:  'nextQuestion': '25',
212: 1:  'questions': [
212: 1:    '1',
212: 1:    '2',
212: 1:    '3',
212: 1:    '4',
212: 1:    '5',
212: 1:    '6',
212: 1:    '7',
212: 1:    '8',
212: 1:    '9',
212: 1:    '10',
212: 1:    '11',
212: 1:    '12',
212: 1:    '13',
212: 1:    '14',
212: 1:    '15',
212: 1:    '16',
212: 1:    '17',
212: 1:    '18',
212: 1:    '19',
212: 1:    '20',
212: 1:    '21',
212: 1:    '22',
212: 1:    '23',
212: 1:    '24',
212: 1:    '25'
212: 1:  ]
212: 1:}
212: 1:Scores: 12655
212: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]', '[17]', '[2,3,3]', '[19]', '[2,2,5]', '[3,7]', '[2,11]', '[23]', '[2,2,2,3]', '[5,5]']')
212: 1:Fire Event: PassTest{complexity=25, testCount=25}
212: 1:Fire Event: NextAlgorithm{complexity=25, time=0}
------------------------------------------
213: 1:BoardData {
213: 1:  'description': 'Wait for next level. Please send 'message('StartNextLevel')' command.',
213: 1:  'history': [
213: 1:    {
213: 1:      'answer': '[1]',
213: 1:      'question': '1',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '[2]',
213: 1:      'question': '2',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '[3]',
213: 1:      'question': '3',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '[2,2]',
213: 1:      'question': '4',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '[5]',
213: 1:      'question': '5',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '[2,3]',
213: 1:      'question': '6',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '[7]',
213: 1:      'question': '7',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '[2,2,2]',
213: 1:      'question': '8',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '[3,3]',
213: 1:      'question': '9',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '[2,5]',
213: 1:      'question': '10',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '[11]',
213: 1:      'question': '11',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '[2,2,3]',
213: 1:      'question': '12',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '[13]',
213: 1:      'question': '13',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '[2,7]',
213: 1:      'question': '14',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '[3,5]',
213: 1:      'question': '15',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '[2,2,2,2]',
213: 1:      'question': '16',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '[17]',
213: 1:      'question': '17',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '[2,3,3]',
213: 1:      'question': '18',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '[19]',
213: 1:      'question': '19',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '[2,2,5]',
213: 1:      'question': '20',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '[3,7]',
213: 1:      'question': '21',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '[2,11]',
213: 1:      'question': '22',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '[23]',
213: 1:      'question': '23',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '[2,2,2,3]',
213: 1:      'question': '24',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '[5,5]',
213: 1:      'question': '25',
213: 1:      'valid': true
213: 1:    }
213: 1:  ],
213: 1:  'level': 8,
213: 1:  'questions': []
213: 1:}
213: 1:Scores: 16039
213: 1:Answer: message('StartNextLevel')
213: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
214: 1:BoardData {
214: 1:  'description': '2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i? Write a method for calculation that takes int and returns the result as a String',
214: 1:  'expectedAnswer': '2',
214: 1:  'history': [],
214: 1:  'level': 9,
214: 1:  'nextQuestion': '1',
214: 1:  'questions': ['1']
214: 1:}
214: 1:Scores: 16039
214: 1:Answer: message('['2']')
214: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
215: 1:BoardData {
215: 1:  'description': '2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i? Write a method for calculation that takes int and returns the result as a String',
215: 1:  'expectedAnswer': '4',
215: 1:  'history': [{
215: 1:    'answer': '2',
215: 1:    'question': '1',
215: 1:    'valid': true
215: 1:  }],
215: 1:  'level': 9,
215: 1:  'nextQuestion': '2',
215: 1:  'questions': [
215: 1:    '1',
215: 1:    '2'
215: 1:  ]
215: 1:}
215: 1:Scores: 16051
215: 1:Answer: message('['2', '4']')
215: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
216: 1:BoardData {
216: 1:  'description': '2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i? Write a method for calculation that takes int and returns the result as a String',
216: 1:  'expectedAnswer': '8',
216: 1:  'history': [
216: 1:    {
216: 1:      'answer': '2',
216: 1:      'question': '1',
216: 1:      'valid': true
216: 1:    },
216: 1:    {
216: 1:      'answer': '4',
216: 1:      'question': '2',
216: 1:      'valid': true
216: 1:    }
216: 1:  ],
216: 1:  'level': 9,
216: 1:  'nextQuestion': '3',
216: 1:  'questions': [
216: 1:    '1',
216: 1:    '2',
216: 1:    '3'
216: 1:  ]
216: 1:}
216: 1:Scores: 16063
216: 1:Answer: message('['2', '4', '8']')
216: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
217: 1:BoardData {
217: 1:  'description': '2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i? Write a method for calculation that takes int and returns the result as a String',
217: 1:  'expectedAnswer': '7',
217: 1:  'history': [
217: 1:    {
217: 1:      'answer': '2',
217: 1:      'question': '1',
217: 1:      'valid': true
217: 1:    },
217: 1:    {
217: 1:      'answer': '4',
217: 1:      'question': '2',
217: 1:      'valid': true
217: 1:    },
217: 1:    {
217: 1:      'answer': '8',
217: 1:      'question': '3',
217: 1:      'valid': true
217: 1:    }
217: 1:  ],
217: 1:  'level': 9,
217: 1:  'nextQuestion': '4',
217: 1:  'questions': [
217: 1:    '1',
217: 1:    '2',
217: 1:    '3',
217: 1:    '4'
217: 1:  ]
217: 1:}
217: 1:Scores: 16075
217: 1:Answer: message('['2', '4', '8', '7']')
217: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
218: 1:BoardData {
218: 1:  'description': '2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i? Write a method for calculation that takes int and returns the result as a String',
218: 1:  'expectedAnswer': '5',
218: 1:  'history': [
218: 1:    {
218: 1:      'answer': '2',
218: 1:      'question': '1',
218: 1:      'valid': true
218: 1:    },
218: 1:    {
218: 1:      'answer': '4',
218: 1:      'question': '2',
218: 1:      'valid': true
218: 1:    },
218: 1:    {
218: 1:      'answer': '8',
218: 1:      'question': '3',
218: 1:      'valid': true
218: 1:    },
218: 1:    {
218: 1:      'answer': '7',
218: 1:      'question': '4',
218: 1:      'valid': true
218: 1:    }
218: 1:  ],
218: 1:  'level': 9,
218: 1:  'nextQuestion': '5',
218: 1:  'questions': [
218: 1:    '1',
218: 1:    '2',
218: 1:    '3',
218: 1:    '4',
218: 1:    '5'
218: 1:  ]
218: 1:}
218: 1:Scores: 16087
218: 1:Answer: message('['2', '4', '8', '7', '5']')
218: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
219: 1:BoardData {
219: 1:  'description': '2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i? Write a method for calculation that takes int and returns the result as a String',
219: 1:  'expectedAnswer': '10',
219: 1:  'history': [
219: 1:    {
219: 1:      'answer': '2',
219: 1:      'question': '1',
219: 1:      'valid': true
219: 1:    },
219: 1:    {
219: 1:      'answer': '4',
219: 1:      'question': '2',
219: 1:      'valid': true
219: 1:    },
219: 1:    {
219: 1:      'answer': '8',
219: 1:      'question': '3',
219: 1:      'valid': true
219: 1:    },
219: 1:    {
219: 1:      'answer': '7',
219: 1:      'question': '4',
219: 1:      'valid': true
219: 1:    },
219: 1:    {
219: 1:      'answer': '5',
219: 1:      'question': '5',
219: 1:      'valid': true
219: 1:    }
219: 1:  ],
219: 1:  'level': 9,
219: 1:  'nextQuestion': '6',
219: 1:  'questions': [
219: 1:    '1',
219: 1:    '2',
219: 1:    '3',
219: 1:    '4',
219: 1:    '5',
219: 1:    '6'
219: 1:  ]
219: 1:}
219: 1:Scores: 16099
219: 1:Answer: message('['2', '4', '8', '7', '5', '10']')
219: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
220: 1:BoardData {
220: 1:  'description': '2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i? Write a method for calculation that takes int and returns the result as a String',
220: 1:  'expectedAnswer': '11',
220: 1:  'history': [
220: 1:    {
220: 1:      'answer': '2',
220: 1:      'question': '1',
220: 1:      'valid': true
220: 1:    },
220: 1:    {
220: 1:      'answer': '4',
220: 1:      'question': '2',
220: 1:      'valid': true
220: 1:    },
220: 1:    {
220: 1:      'answer': '8',
220: 1:      'question': '3',
220: 1:      'valid': true
220: 1:    },
220: 1:    {
220: 1:      'answer': '7',
220: 1:      'question': '4',
220: 1:      'valid': true
220: 1:    },
220: 1:    {
220: 1:      'answer': '5',
220: 1:      'question': '5',
220: 1:      'valid': true
220: 1:    },
220: 1:    {
220: 1:      'answer': '10',
220: 1:      'question': '6',
220: 1:      'valid': true
220: 1:    }
220: 1:  ],
220: 1:  'level': 9,
220: 1:  'nextQuestion': '7',
220: 1:  'questions': [
220: 1:    '1',
220: 1:    '2',
220: 1:    '3',
220: 1:    '4',
220: 1:    '5',
220: 1:    '6',
220: 1:    '7'
220: 1:  ]
220: 1:}
220: 1:Scores: 16111
220: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11']')
220: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
221: 1:BoardData {
221: 1:  'description': '2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i? Write a method for calculation that takes int and returns the result as a String',
221: 1:  'expectedAnswer': '13',
221: 1:  'history': [
221: 1:    {
221: 1:      'answer': '2',
221: 1:      'question': '1',
221: 1:      'valid': true
221: 1:    },
221: 1:    {
221: 1:      'answer': '4',
221: 1:      'question': '2',
221: 1:      'valid': true
221: 1:    },
221: 1:    {
221: 1:      'answer': '8',
221: 1:      'question': '3',
221: 1:      'valid': true
221: 1:    },
221: 1:    {
221: 1:      'answer': '7',
221: 1:      'question': '4',
221: 1:      'valid': true
221: 1:    },
221: 1:    {
221: 1:      'answer': '5',
221: 1:      'question': '5',
221: 1:      'valid': true
221: 1:    },
221: 1:    {
221: 1:      'answer': '10',
221: 1:      'question': '6',
221: 1:      'valid': true
221: 1:    },
221: 1:    {
221: 1:      'answer': '11',
221: 1:      'question': '7',
221: 1:      'valid': true
221: 1:    }
221: 1:  ],
221: 1:  'level': 9,
221: 1:  'nextQuestion': '8',
221: 1:  'questions': [
221: 1:    '1',
221: 1:    '2',
221: 1:    '3',
221: 1:    '4',
221: 1:    '5',
221: 1:    '6',
221: 1:    '7',
221: 1:    '8'
221: 1:  ]
221: 1:}
221: 1:Scores: 16123
221: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13']')
221: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
222: 1:BoardData {
222: 1:  'description': '2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i? Write a method for calculation that takes int and returns the result as a String',
222: 1:  'expectedAnswer': '8',
222: 1:  'history': [
222: 1:    {
222: 1:      'answer': '2',
222: 1:      'question': '1',
222: 1:      'valid': true
222: 1:    },
222: 1:    {
222: 1:      'answer': '4',
222: 1:      'question': '2',
222: 1:      'valid': true
222: 1:    },
222: 1:    {
222: 1:      'answer': '8',
222: 1:      'question': '3',
222: 1:      'valid': true
222: 1:    },
222: 1:    {
222: 1:      'answer': '7',
222: 1:      'question': '4',
222: 1:      'valid': true
222: 1:    },
222: 1:    {
222: 1:      'answer': '5',
222: 1:      'question': '5',
222: 1:      'valid': true
222: 1:    },
222: 1:    {
222: 1:      'answer': '10',
222: 1:      'question': '6',
222: 1:      'valid': true
222: 1:    },
222: 1:    {
222: 1:      'answer': '11',
222: 1:      'question': '7',
222: 1:      'valid': true
222: 1:    },
222: 1:    {
222: 1:      'answer': '13',
222: 1:      'question': '8',
222: 1:      'valid': true
222: 1:    }
222: 1:  ],
222: 1:  'level': 9,
222: 1:  'nextQuestion': '9',
222: 1:  'questions': [
222: 1:    '1',
222: 1:    '2',
222: 1:    '3',
222: 1:    '4',
222: 1:    '5',
222: 1:    '6',
222: 1:    '7',
222: 1:    '8',
222: 1:    '9'
222: 1:  ]
222: 1:}
222: 1:Scores: 16135
222: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8']')
222: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
223: 1:BoardData {
223: 1:  'description': '2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i? Write a method for calculation that takes int and returns the result as a String',
223: 1:  'expectedAnswer': '7',
223: 1:  'history': [
223: 1:    {
223: 1:      'answer': '2',
223: 1:      'question': '1',
223: 1:      'valid': true
223: 1:    },
223: 1:    {
223: 1:      'answer': '4',
223: 1:      'question': '2',
223: 1:      'valid': true
223: 1:    },
223: 1:    {
223: 1:      'answer': '8',
223: 1:      'question': '3',
223: 1:      'valid': true
223: 1:    },
223: 1:    {
223: 1:      'answer': '7',
223: 1:      'question': '4',
223: 1:      'valid': true
223: 1:    },
223: 1:    {
223: 1:      'answer': '5',
223: 1:      'question': '5',
223: 1:      'valid': true
223: 1:    },
223: 1:    {
223: 1:      'answer': '10',
223: 1:      'question': '6',
223: 1:      'valid': true
223: 1:    },
223: 1:    {
223: 1:      'answer': '11',
223: 1:      'question': '7',
223: 1:      'valid': true
223: 1:    },
223: 1:    {
223: 1:      'answer': '13',
223: 1:      'question': '8',
223: 1:      'valid': true
223: 1:    },
223: 1:    {
223: 1:      'answer': '8',
223: 1:      'question': '9',
223: 1:      'valid': true
223: 1:    }
223: 1:  ],
223: 1:  'level': 9,
223: 1:  'nextQuestion': '10',
223: 1:  'questions': [
223: 1:    '1',
223: 1:    '2',
223: 1:    '3',
223: 1:    '4',
223: 1:    '5',
223: 1:    '6',
223: 1:    '7',
223: 1:    '8',
223: 1:    '9',
223: 1:    '10'
223: 1:  ]
223: 1:}
223: 1:Scores: 16147
223: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7']')
223: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
224: 1:BoardData {
224: 1:  'description': '2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i? Write a method for calculation that takes int and returns the result as a String',
224: 1:  'expectedAnswer': '14',
224: 1:  'history': [
224: 1:    {
224: 1:      'answer': '2',
224: 1:      'question': '1',
224: 1:      'valid': true
224: 1:    },
224: 1:    {
224: 1:      'answer': '4',
224: 1:      'question': '2',
224: 1:      'valid': true
224: 1:    },
224: 1:    {
224: 1:      'answer': '8',
224: 1:      'question': '3',
224: 1:      'valid': true
224: 1:    },
224: 1:    {
224: 1:      'answer': '7',
224: 1:      'question': '4',
224: 1:      'valid': true
224: 1:    },
224: 1:    {
224: 1:      'answer': '5',
224: 1:      'question': '5',
224: 1:      'valid': true
224: 1:    },
224: 1:    {
224: 1:      'answer': '10',
224: 1:      'question': '6',
224: 1:      'valid': true
224: 1:    },
224: 1:    {
224: 1:      'answer': '11',
224: 1:      'question': '7',
224: 1:      'valid': true
224: 1:    },
224: 1:    {
224: 1:      'answer': '13',
224: 1:      'question': '8',
224: 1:      'valid': true
224: 1:    },
224: 1:    {
224: 1:      'answer': '8',
224: 1:      'question': '9',
224: 1:      'valid': true
224: 1:    },
224: 1:    {
224: 1:      'answer': '7',
224: 1:      'question': '10',
224: 1:      'valid': true
224: 1:    }
224: 1:  ],
224: 1:  'level': 9,
224: 1:  'nextQuestion': '11',
224: 1:  'questions': [
224: 1:    '1',
224: 1:    '2',
224: 1:    '3',
224: 1:    '4',
224: 1:    '5',
224: 1:    '6',
224: 1:    '7',
224: 1:    '8',
224: 1:    '9',
224: 1:    '10',
224: 1:    '11'
224: 1:  ]
224: 1:}
224: 1:Scores: 16159
224: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14']')
224: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
225: 1:BoardData {
225: 1:  'description': '2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i? Write a method for calculation that takes int and returns the result as a String',
225: 1:  'expectedAnswer': '19',
225: 1:  'history': [
225: 1:    {
225: 1:      'answer': '2',
225: 1:      'question': '1',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '4',
225: 1:      'question': '2',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '8',
225: 1:      'question': '3',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '7',
225: 1:      'question': '4',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '5',
225: 1:      'question': '5',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '10',
225: 1:      'question': '6',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '11',
225: 1:      'question': '7',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '13',
225: 1:      'question': '8',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '8',
225: 1:      'question': '9',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '7',
225: 1:      'question': '10',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '14',
225: 1:      'question': '11',
225: 1:      'valid': true
225: 1:    }
225: 1:  ],
225: 1:  'level': 9,
225: 1:  'nextQuestion': '12',
225: 1:  'questions': [
225: 1:    '1',
225: 1:    '2',
225: 1:    '3',
225: 1:    '4',
225: 1:    '5',
225: 1:    '6',
225: 1:    '7',
225: 1:    '8',
225: 1:    '9',
225: 1:    '10',
225: 1:    '11',
225: 1:    '12'
225: 1:  ]
225: 1:}
225: 1:Scores: 16171
225: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19']')
225: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
226: 1:BoardData {
226: 1:  'description': '2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i? Write a method for calculation that takes int and returns the result as a String',
226: 1:  'expectedAnswer': '20',
226: 1:  'history': [
226: 1:    {
226: 1:      'answer': '2',
226: 1:      'question': '1',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '4',
226: 1:      'question': '2',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '8',
226: 1:      'question': '3',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '7',
226: 1:      'question': '4',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '5',
226: 1:      'question': '5',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '10',
226: 1:      'question': '6',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '11',
226: 1:      'question': '7',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '13',
226: 1:      'question': '8',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '8',
226: 1:      'question': '9',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '7',
226: 1:      'question': '10',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '14',
226: 1:      'question': '11',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '19',
226: 1:      'question': '12',
226: 1:      'valid': true
226: 1:    }
226: 1:  ],
226: 1:  'level': 9,
226: 1:  'nextQuestion': '13',
226: 1:  'questions': [
226: 1:    '1',
226: 1:    '2',
226: 1:    '3',
226: 1:    '4',
226: 1:    '5',
226: 1:    '6',
226: 1:    '7',
226: 1:    '8',
226: 1:    '9',
226: 1:    '10',
226: 1:    '11',
226: 1:    '12',
226: 1:    '13'
226: 1:  ]
226: 1:}
226: 1:Scores: 16183
226: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20']')
226: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
227: 1:BoardData {
227: 1:  'description': '2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i? Write a method for calculation that takes int and returns the result as a String',
227: 1:  'expectedAnswer': '22',
227: 1:  'history': [
227: 1:    {
227: 1:      'answer': '2',
227: 1:      'question': '1',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '4',
227: 1:      'question': '2',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '8',
227: 1:      'question': '3',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '7',
227: 1:      'question': '4',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '5',
227: 1:      'question': '5',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '10',
227: 1:      'question': '6',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '11',
227: 1:      'question': '7',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '13',
227: 1:      'question': '8',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '8',
227: 1:      'question': '9',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '7',
227: 1:      'question': '10',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '14',
227: 1:      'question': '11',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '19',
227: 1:      'question': '12',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '20',
227: 1:      'question': '13',
227: 1:      'valid': true
227: 1:    }
227: 1:  ],
227: 1:  'level': 9,
227: 1:  'nextQuestion': '14',
227: 1:  'questions': [
227: 1:    '1',
227: 1:    '2',
227: 1:    '3',
227: 1:    '4',
227: 1:    '5',
227: 1:    '6',
227: 1:    '7',
227: 1:    '8',
227: 1:    '9',
227: 1:    '10',
227: 1:    '11',
227: 1:    '12',
227: 1:    '13',
227: 1:    '14'
227: 1:  ]
227: 1:}
227: 1:Scores: 16195
227: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22']')
227: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
228: 1:BoardData {
228: 1:  'description': '2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i? Write a method for calculation that takes int and returns the result as a String',
228: 1:  'expectedAnswer': '26',
228: 1:  'history': [
228: 1:    {
228: 1:      'answer': '2',
228: 1:      'question': '1',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '4',
228: 1:      'question': '2',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '8',
228: 1:      'question': '3',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '7',
228: 1:      'question': '4',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '5',
228: 1:      'question': '5',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '10',
228: 1:      'question': '6',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '11',
228: 1:      'question': '7',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '13',
228: 1:      'question': '8',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '8',
228: 1:      'question': '9',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '7',
228: 1:      'question': '10',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '14',
228: 1:      'question': '11',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '19',
228: 1:      'question': '12',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '20',
228: 1:      'question': '13',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '22',
228: 1:      'question': '14',
228: 1:      'valid': true
228: 1:    }
228: 1:  ],
228: 1:  'level': 9,
228: 1:  'nextQuestion': '15',
228: 1:  'questions': [
228: 1:    '1',
228: 1:    '2',
228: 1:    '3',
228: 1:    '4',
228: 1:    '5',
228: 1:    '6',
228: 1:    '7',
228: 1:    '8',
228: 1:    '9',
228: 1:    '10',
228: 1:    '11',
228: 1:    '12',
228: 1:    '13',
228: 1:    '14',
228: 1:    '15'
228: 1:  ]
228: 1:}
228: 1:Scores: 16207
228: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26']')
228: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
229: 1:BoardData {
229: 1:  'description': '2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i? Write a method for calculation that takes int and returns the result as a String',
229: 1:  'expectedAnswer': '25',
229: 1:  'history': [
229: 1:    {
229: 1:      'answer': '2',
229: 1:      'question': '1',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '4',
229: 1:      'question': '2',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '8',
229: 1:      'question': '3',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '7',
229: 1:      'question': '4',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '5',
229: 1:      'question': '5',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '10',
229: 1:      'question': '6',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '11',
229: 1:      'question': '7',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '13',
229: 1:      'question': '8',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '8',
229: 1:      'question': '9',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '7',
229: 1:      'question': '10',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '14',
229: 1:      'question': '11',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '19',
229: 1:      'question': '12',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '20',
229: 1:      'question': '13',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '22',
229: 1:      'question': '14',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '26',
229: 1:      'question': '15',
229: 1:      'valid': true
229: 1:    }
229: 1:  ],
229: 1:  'level': 9,
229: 1:  'nextQuestion': '16',
229: 1:  'questions': [
229: 1:    '1',
229: 1:    '2',
229: 1:    '3',
229: 1:    '4',
229: 1:    '5',
229: 1:    '6',
229: 1:    '7',
229: 1:    '8',
229: 1:    '9',
229: 1:    '10',
229: 1:    '11',
229: 1:    '12',
229: 1:    '13',
229: 1:    '14',
229: 1:    '15',
229: 1:    '16'
229: 1:  ]
229: 1:}
229: 1:Scores: 16219
229: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25']')
229: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
230: 1:BoardData {
230: 1:  'description': '2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i? Write a method for calculation that takes int and returns the result as a String',
230: 1:  'expectedAnswer': '14',
230: 1:  'history': [
230: 1:    {
230: 1:      'answer': '2',
230: 1:      'question': '1',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '4',
230: 1:      'question': '2',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '8',
230: 1:      'question': '3',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '7',
230: 1:      'question': '4',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '5',
230: 1:      'question': '5',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '10',
230: 1:      'question': '6',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '11',
230: 1:      'question': '7',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '13',
230: 1:      'question': '8',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '8',
230: 1:      'question': '9',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '7',
230: 1:      'question': '10',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '14',
230: 1:      'question': '11',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '19',
230: 1:      'question': '12',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '20',
230: 1:      'question': '13',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '22',
230: 1:      'question': '14',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '26',
230: 1:      'question': '15',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '25',
230: 1:      'question': '16',
230: 1:      'valid': true
230: 1:    }
230: 1:  ],
230: 1:  'level': 9,
230: 1:  'nextQuestion': '17',
230: 1:  'questions': [
230: 1:    '1',
230: 1:    '2',
230: 1:    '3',
230: 1:    '4',
230: 1:    '5',
230: 1:    '6',
230: 1:    '7',
230: 1:    '8',
230: 1:    '9',
230: 1:    '10',
230: 1:    '11',
230: 1:    '12',
230: 1:    '13',
230: 1:    '14',
230: 1:    '15',
230: 1:    '16',
230: 1:    '17'
230: 1:  ]
230: 1:}
230: 1:Scores: 16231
230: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25', '14']')
230: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
231: 1:BoardData {
231: 1:  'description': '2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i? Write a method for calculation that takes int and returns the result as a String',
231: 1:  'expectedAnswer': '19',
231: 1:  'history': [
231: 1:    {
231: 1:      'answer': '2',
231: 1:      'question': '1',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '4',
231: 1:      'question': '2',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '8',
231: 1:      'question': '3',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '7',
231: 1:      'question': '4',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '5',
231: 1:      'question': '5',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '10',
231: 1:      'question': '6',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '11',
231: 1:      'question': '7',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '13',
231: 1:      'question': '8',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '8',
231: 1:      'question': '9',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '7',
231: 1:      'question': '10',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '14',
231: 1:      'question': '11',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '19',
231: 1:      'question': '12',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '20',
231: 1:      'question': '13',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '22',
231: 1:      'question': '14',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '26',
231: 1:      'question': '15',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '25',
231: 1:      'question': '16',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '14',
231: 1:      'question': '17',
231: 1:      'valid': true
231: 1:    }
231: 1:  ],
231: 1:  'level': 9,
231: 1:  'nextQuestion': '18',
231: 1:  'questions': [
231: 1:    '1',
231: 1:    '2',
231: 1:    '3',
231: 1:    '4',
231: 1:    '5',
231: 1:    '6',
231: 1:    '7',
231: 1:    '8',
231: 1:    '9',
231: 1:    '10',
231: 1:    '11',
231: 1:    '12',
231: 1:    '13',
231: 1:    '14',
231: 1:    '15',
231: 1:    '16',
231: 1:    '17',
231: 1:    '18'
231: 1:  ]
231: 1:}
231: 1:Scores: 16243
231: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25', '14', '19']')
231: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
232: 1:BoardData {
232: 1:  'description': '2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i? Write a method for calculation that takes int and returns the result as a String',
232: 1:  'expectedAnswer': '29',
232: 1:  'history': [
232: 1:    {
232: 1:      'answer': '2',
232: 1:      'question': '1',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '4',
232: 1:      'question': '2',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '8',
232: 1:      'question': '3',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '7',
232: 1:      'question': '4',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '5',
232: 1:      'question': '5',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '10',
232: 1:      'question': '6',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '11',
232: 1:      'question': '7',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '13',
232: 1:      'question': '8',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '8',
232: 1:      'question': '9',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '7',
232: 1:      'question': '10',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '14',
232: 1:      'question': '11',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '19',
232: 1:      'question': '12',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '20',
232: 1:      'question': '13',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '22',
232: 1:      'question': '14',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '26',
232: 1:      'question': '15',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '25',
232: 1:      'question': '16',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '14',
232: 1:      'question': '17',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '19',
232: 1:      'question': '18',
232: 1:      'valid': true
232: 1:    }
232: 1:  ],
232: 1:  'level': 9,
232: 1:  'nextQuestion': '19',
232: 1:  'questions': [
232: 1:    '1',
232: 1:    '2',
232: 1:    '3',
232: 1:    '4',
232: 1:    '5',
232: 1:    '6',
232: 1:    '7',
232: 1:    '8',
232: 1:    '9',
232: 1:    '10',
232: 1:    '11',
232: 1:    '12',
232: 1:    '13',
232: 1:    '14',
232: 1:    '15',
232: 1:    '16',
232: 1:    '17',
232: 1:    '18',
232: 1:    '19'
232: 1:  ]
232: 1:}
232: 1:Scores: 16255
232: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25', '14', '19', '29']')
232: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
233: 1:BoardData {
233: 1:  'description': '2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i? Write a method for calculation that takes int and returns the result as a String',
233: 1:  'expectedAnswer': '31',
233: 1:  'history': [
233: 1:    {
233: 1:      'answer': '2',
233: 1:      'question': '1',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '4',
233: 1:      'question': '2',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '8',
233: 1:      'question': '3',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '7',
233: 1:      'question': '4',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '5',
233: 1:      'question': '5',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '10',
233: 1:      'question': '6',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '11',
233: 1:      'question': '7',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '13',
233: 1:      'question': '8',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '8',
233: 1:      'question': '9',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '7',
233: 1:      'question': '10',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '14',
233: 1:      'question': '11',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '19',
233: 1:      'question': '12',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '20',
233: 1:      'question': '13',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '22',
233: 1:      'question': '14',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '26',
233: 1:      'question': '15',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '25',
233: 1:      'question': '16',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '14',
233: 1:      'question': '17',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '19',
233: 1:      'question': '18',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '29',
233: 1:      'question': '19',
233: 1:      'valid': true
233: 1:    }
233: 1:  ],
233: 1:  'level': 9,
233: 1:  'nextQuestion': '20',
233: 1:  'questions': [
233: 1:    '1',
233: 1:    '2',
233: 1:    '3',
233: 1:    '4',
233: 1:    '5',
233: 1:    '6',
233: 1:    '7',
233: 1:    '8',
233: 1:    '9',
233: 1:    '10',
233: 1:    '11',
233: 1:    '12',
233: 1:    '13',
233: 1:    '14',
233: 1:    '15',
233: 1:    '16',
233: 1:    '17',
233: 1:    '18',
233: 1:    '19',
233: 1:    '20'
233: 1:  ]
233: 1:}
233: 1:Scores: 16267
233: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25', '14', '19', '29', '31']')
233: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
234: 1:BoardData {
234: 1:  'description': '2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i? Write a method for calculation that takes int and returns the result as a String',
234: 1:  'expectedAnswer': '26',
234: 1:  'history': [
234: 1:    {
234: 1:      'answer': '2',
234: 1:      'question': '1',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '4',
234: 1:      'question': '2',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '8',
234: 1:      'question': '3',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '7',
234: 1:      'question': '4',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '5',
234: 1:      'question': '5',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '10',
234: 1:      'question': '6',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '11',
234: 1:      'question': '7',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '13',
234: 1:      'question': '8',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '8',
234: 1:      'question': '9',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '7',
234: 1:      'question': '10',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '14',
234: 1:      'question': '11',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '19',
234: 1:      'question': '12',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '20',
234: 1:      'question': '13',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '22',
234: 1:      'question': '14',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '26',
234: 1:      'question': '15',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '25',
234: 1:      'question': '16',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '14',
234: 1:      'question': '17',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '19',
234: 1:      'question': '18',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '29',
234: 1:      'question': '19',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '31',
234: 1:      'question': '20',
234: 1:      'valid': true
234: 1:    }
234: 1:  ],
234: 1:  'level': 9,
234: 1:  'nextQuestion': '21',
234: 1:  'questions': [
234: 1:    '1',
234: 1:    '2',
234: 1:    '3',
234: 1:    '4',
234: 1:    '5',
234: 1:    '6',
234: 1:    '7',
234: 1:    '8',
234: 1:    '9',
234: 1:    '10',
234: 1:    '11',
234: 1:    '12',
234: 1:    '13',
234: 1:    '14',
234: 1:    '15',
234: 1:    '16',
234: 1:    '17',
234: 1:    '18',
234: 1:    '19',
234: 1:    '20',
234: 1:    '21'
234: 1:  ]
234: 1:}
234: 1:Scores: 16279
234: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25', '14', '19', '29', '31', '26']')
234: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
235: 1:BoardData {
235: 1:  'description': '2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i? Write a method for calculation that takes int and returns the result as a String',
235: 1:  'expectedAnswer': '25',
235: 1:  'history': [
235: 1:    {
235: 1:      'answer': '2',
235: 1:      'question': '1',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '4',
235: 1:      'question': '2',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '8',
235: 1:      'question': '3',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '7',
235: 1:      'question': '4',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '5',
235: 1:      'question': '5',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '10',
235: 1:      'question': '6',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '11',
235: 1:      'question': '7',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '13',
235: 1:      'question': '8',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '8',
235: 1:      'question': '9',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '7',
235: 1:      'question': '10',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '14',
235: 1:      'question': '11',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '19',
235: 1:      'question': '12',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '20',
235: 1:      'question': '13',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '22',
235: 1:      'question': '14',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '26',
235: 1:      'question': '15',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '25',
235: 1:      'question': '16',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '14',
235: 1:      'question': '17',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '19',
235: 1:      'question': '18',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '29',
235: 1:      'question': '19',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '31',
235: 1:      'question': '20',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '26',
235: 1:      'question': '21',
235: 1:      'valid': true
235: 1:    }
235: 1:  ],
235: 1:  'level': 9,
235: 1:  'nextQuestion': '22',
235: 1:  'questions': [
235: 1:    '1',
235: 1:    '2',
235: 1:    '3',
235: 1:    '4',
235: 1:    '5',
235: 1:    '6',
235: 1:    '7',
235: 1:    '8',
235: 1:    '9',
235: 1:    '10',
235: 1:    '11',
235: 1:    '12',
235: 1:    '13',
235: 1:    '14',
235: 1:    '15',
235: 1:    '16',
235: 1:    '17',
235: 1:    '18',
235: 1:    '19',
235: 1:    '20',
235: 1:    '21',
235: 1:    '22'
235: 1:  ]
235: 1:}
235: 1:Scores: 16291
235: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25', '14', '19', '29', '31', '26', '25']')
235: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
236: 1:BoardData {
236: 1:  'description': '2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i? Write a method for calculation that takes int and returns the result as a String',
236: 1:  'expectedAnswer': '41',
236: 1:  'history': [
236: 1:    {
236: 1:      'answer': '2',
236: 1:      'question': '1',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '4',
236: 1:      'question': '2',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '8',
236: 1:      'question': '3',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '7',
236: 1:      'question': '4',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '5',
236: 1:      'question': '5',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '10',
236: 1:      'question': '6',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '11',
236: 1:      'question': '7',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '13',
236: 1:      'question': '8',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '8',
236: 1:      'question': '9',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '7',
236: 1:      'question': '10',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '14',
236: 1:      'question': '11',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '19',
236: 1:      'question': '12',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '20',
236: 1:      'question': '13',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '22',
236: 1:      'question': '14',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '26',
236: 1:      'question': '15',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '25',
236: 1:      'question': '16',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '14',
236: 1:      'question': '17',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '19',
236: 1:      'question': '18',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '29',
236: 1:      'question': '19',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '31',
236: 1:      'question': '20',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '26',
236: 1:      'question': '21',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '25',
236: 1:      'question': '22',
236: 1:      'valid': true
236: 1:    }
236: 1:  ],
236: 1:  'level': 9,
236: 1:  'nextQuestion': '23',
236: 1:  'questions': [
236: 1:    '1',
236: 1:    '2',
236: 1:    '3',
236: 1:    '4',
236: 1:    '5',
236: 1:    '6',
236: 1:    '7',
236: 1:    '8',
236: 1:    '9',
236: 1:    '10',
236: 1:    '11',
236: 1:    '12',
236: 1:    '13',
236: 1:    '14',
236: 1:    '15',
236: 1:    '16',
236: 1:    '17',
236: 1:    '18',
236: 1:    '19',
236: 1:    '20',
236: 1:    '21',
236: 1:    '22',
236: 1:    '23'
236: 1:  ]
236: 1:}
236: 1:Scores: 16303
236: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25', '14', '19', '29', '31', '26', '25', '41']')
236: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
237: 1:BoardData {
237: 1:  'description': '2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i? Write a method for calculation that takes int and returns the result as a String',
237: 1:  'expectedAnswer': '37',
237: 1:  'history': [
237: 1:    {
237: 1:      'answer': '2',
237: 1:      'question': '1',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '4',
237: 1:      'question': '2',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '8',
237: 1:      'question': '3',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '7',
237: 1:      'question': '4',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '5',
237: 1:      'question': '5',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '10',
237: 1:      'question': '6',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '11',
237: 1:      'question': '7',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '13',
237: 1:      'question': '8',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '8',
237: 1:      'question': '9',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '7',
237: 1:      'question': '10',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '14',
237: 1:      'question': '11',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '19',
237: 1:      'question': '12',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '20',
237: 1:      'question': '13',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '22',
237: 1:      'question': '14',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '26',
237: 1:      'question': '15',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '25',
237: 1:      'question': '16',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '14',
237: 1:      'question': '17',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '19',
237: 1:      'question': '18',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '29',
237: 1:      'question': '19',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '31',
237: 1:      'question': '20',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '26',
237: 1:      'question': '21',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '25',
237: 1:      'question': '22',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '41',
237: 1:      'question': '23',
237: 1:      'valid': true
237: 1:    }
237: 1:  ],
237: 1:  'level': 9,
237: 1:  'nextQuestion': '24',
237: 1:  'questions': [
237: 1:    '1',
237: 1:    '2',
237: 1:    '3',
237: 1:    '4',
237: 1:    '5',
237: 1:    '6',
237: 1:    '7',
237: 1:    '8',
237: 1:    '9',
237: 1:    '10',
237: 1:    '11',
237: 1:    '12',
237: 1:    '13',
237: 1:    '14',
237: 1:    '15',
237: 1:    '16',
237: 1:    '17',
237: 1:    '18',
237: 1:    '19',
237: 1:    '20',
237: 1:    '21',
237: 1:    '22',
237: 1:    '23',
237: 1:    '24'
237: 1:  ]
237: 1:}
237: 1:Scores: 16315
237: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25', '14', '19', '29', '31', '26', '25', '41', '37']')
237: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
238: 1:BoardData {
238: 1:  'description': '2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i? Write a method for calculation that takes int and returns the result as a String',
238: 1:  'expectedAnswer': '29',
238: 1:  'history': [
238: 1:    {
238: 1:      'answer': '2',
238: 1:      'question': '1',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '4',
238: 1:      'question': '2',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '8',
238: 1:      'question': '3',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '7',
238: 1:      'question': '4',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '5',
238: 1:      'question': '5',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '10',
238: 1:      'question': '6',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '11',
238: 1:      'question': '7',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '13',
238: 1:      'question': '8',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '8',
238: 1:      'question': '9',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '7',
238: 1:      'question': '10',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '14',
238: 1:      'question': '11',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '19',
238: 1:      'question': '12',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '20',
238: 1:      'question': '13',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '22',
238: 1:      'question': '14',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '26',
238: 1:      'question': '15',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '25',
238: 1:      'question': '16',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '14',
238: 1:      'question': '17',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '19',
238: 1:      'question': '18',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '29',
238: 1:      'question': '19',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '31',
238: 1:      'question': '20',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '26',
238: 1:      'question': '21',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '25',
238: 1:      'question': '22',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '41',
238: 1:      'question': '23',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '37',
238: 1:      'question': '24',
238: 1:      'valid': true
238: 1:    }
238: 1:  ],
238: 1:  'level': 9,
238: 1:  'nextQuestion': '25',
238: 1:  'questions': [
238: 1:    '1',
238: 1:    '2',
238: 1:    '3',
238: 1:    '4',
238: 1:    '5',
238: 1:    '6',
238: 1:    '7',
238: 1:    '8',
238: 1:    '9',
238: 1:    '10',
238: 1:    '11',
238: 1:    '12',
238: 1:    '13',
238: 1:    '14',
238: 1:    '15',
238: 1:    '16',
238: 1:    '17',
238: 1:    '18',
238: 1:    '19',
238: 1:    '20',
238: 1:    '21',
238: 1:    '22',
238: 1:    '23',
238: 1:    '24',
238: 1:    '25'
238: 1:  ]
238: 1:}
238: 1:Scores: 16327
238: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25', '14', '19', '29', '31', '26', '25', '41', '37', '29']')
238: 1:Fire Event: PassTest{complexity=30, testCount=25}
238: 1:Fire Event: NextAlgorithm{complexity=30, time=0}
------------------------------------------
239: 1:BoardData {
239: 1:  'description': 'Wait for next level. Please send 'message('StartNextLevel')' command.',
239: 1:  'history': [
239: 1:    {
239: 1:      'answer': '2',
239: 1:      'question': '1',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '4',
239: 1:      'question': '2',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '8',
239: 1:      'question': '3',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '7',
239: 1:      'question': '4',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '5',
239: 1:      'question': '5',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '10',
239: 1:      'question': '6',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '11',
239: 1:      'question': '7',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '13',
239: 1:      'question': '8',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '8',
239: 1:      'question': '9',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '7',
239: 1:      'question': '10',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '14',
239: 1:      'question': '11',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '19',
239: 1:      'question': '12',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '20',
239: 1:      'question': '13',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '22',
239: 1:      'question': '14',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '26',
239: 1:      'question': '15',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '25',
239: 1:      'question': '16',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '14',
239: 1:      'question': '17',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '19',
239: 1:      'question': '18',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '29',
239: 1:      'question': '19',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '31',
239: 1:      'question': '20',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '26',
239: 1:      'question': '21',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '25',
239: 1:      'question': '22',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '41',
239: 1:      'question': '23',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '37',
239: 1:      'question': '24',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '29',
239: 1:      'question': '25',
239: 1:      'valid': true
239: 1:    }
239: 1:  ],
239: 1:  'level': 9,
239: 1:  'questions': []
239: 1:}
239: 1:Scores: 20388
239: 1:Answer: message('StartNextLevel')
239: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
240: 1:BoardData {
240: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
240: 1:  'expectedAnswer': 'true',
240: 1:  'history': [],
240: 1:  'level': 10,
240: 1:  'nextQuestion': '0, 1, 5',
240: 1:  'questions': ['0, 1, 5']
240: 1:}
240: 1:Scores: 20388
240: 1:Answer: message('['true']')
240: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
241: 1:BoardData {
241: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
241: 1:  'expectedAnswer': 'true',
241: 1:  'history': [{
241: 1:    'answer': 'true',
241: 1:    'question': '0, 1, 5',
241: 1:    'valid': true
241: 1:  }],
241: 1:  'level': 10,
241: 1:  'nextQuestion': '1, 0, 1',
241: 1:  'questions': [
241: 1:    '0, 1, 5',
241: 1:    '1, 0, 1'
241: 1:  ]
241: 1:}
241: 1:Scores: 20395
241: 1:Answer: message('['true', 'true']')
241: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
242: 1:BoardData {
242: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
242: 1:  'expectedAnswer': 'false',
242: 1:  'history': [
242: 1:    {
242: 1:      'answer': 'true',
242: 1:      'question': '0, 1, 5',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': 'true',
242: 1:      'question': '1, 0, 1',
242: 1:      'valid': true
242: 1:    }
242: 1:  ],
242: 1:  'level': 10,
242: 1:  'nextQuestion': '1, 0, 2',
242: 1:  'questions': [
242: 1:    '0, 1, 5',
242: 1:    '1, 0, 1',
242: 1:    '1, 0, 2'
242: 1:  ]
242: 1:}
242: 1:Scores: 20402
242: 1:Answer: message('['true', 'true', 'false']')
242: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
243: 1:BoardData {
243: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
243: 1:  'expectedAnswer': 'true',
243: 1:  'history': [
243: 1:    {
243: 1:      'answer': 'true',
243: 1:      'question': '0, 1, 5',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': 'true',
243: 1:      'question': '1, 0, 1',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': 'false',
243: 1:      'question': '1, 0, 2',
243: 1:      'valid': true
243: 1:    }
243: 1:  ],
243: 1:  'level': 10,
243: 1:  'nextQuestion': '3, 1, 7',
243: 1:  'questions': [
243: 1:    '0, 1, 5',
243: 1:    '1, 0, 1',
243: 1:    '1, 0, 2',
243: 1:    '3, 1, 7'
243: 1:  ]
243: 1:}
243: 1:Scores: 20409
243: 1:Answer: message('['true', 'true', 'false', 'true']')
243: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
244: 1:BoardData {
244: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
244: 1:  'expectedAnswer': 'true',
244: 1:  'history': [
244: 1:    {
244: 1:      'answer': 'true',
244: 1:      'question': '0, 1, 5',
244: 1:      'valid': true
244: 1:    },
244: 1:    {
244: 1:      'answer': 'true',
244: 1:      'question': '1, 0, 1',
244: 1:      'valid': true
244: 1:    },
244: 1:    {
244: 1:      'answer': 'false',
244: 1:      'question': '1, 0, 2',
244: 1:      'valid': true
244: 1:    },
244: 1:    {
244: 1:      'answer': 'true',
244: 1:      'question': '3, 1, 7',
244: 1:      'valid': true
244: 1:    }
244: 1:  ],
244: 1:  'level': 10,
244: 1:  'nextQuestion': '4, 2, 14',
244: 1:  'questions': [
244: 1:    '0, 1, 5',
244: 1:    '1, 0, 1',
244: 1:    '1, 0, 2',
244: 1:    '3, 1, 7',
244: 1:    '4, 2, 14'
244: 1:  ]
244: 1:}
244: 1:Scores: 20416
244: 1:Answer: message('['true', 'true', 'false', 'true', 'true']')
244: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
245: 1:BoardData {
245: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
245: 1:  'expectedAnswer': 'false',
245: 1:  'history': [
245: 1:    {
245: 1:      'answer': 'true',
245: 1:      'question': '0, 1, 5',
245: 1:      'valid': true
245: 1:    },
245: 1:    {
245: 1:      'answer': 'true',
245: 1:      'question': '1, 0, 1',
245: 1:      'valid': true
245: 1:    },
245: 1:    {
245: 1:      'answer': 'false',
245: 1:      'question': '1, 0, 2',
245: 1:      'valid': true
245: 1:    },
245: 1:    {
245: 1:      'answer': 'true',
245: 1:      'question': '3, 1, 7',
245: 1:      'valid': true
245: 1:    },
245: 1:    {
245: 1:      'answer': 'true',
245: 1:      'question': '4, 2, 14',
245: 1:      'valid': true
245: 1:    }
245: 1:  ],
245: 1:  'level': 10,
245: 1:  'nextQuestion': '3, 2, 14',
245: 1:  'questions': [
245: 1:    '0, 1, 5',
245: 1:    '1, 0, 1',
245: 1:    '1, 0, 2',
245: 1:    '3, 1, 7',
245: 1:    '4, 2, 14',
245: 1:    '3, 2, 14'
245: 1:  ]
245: 1:}
245: 1:Scores: 20423
245: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false']')
245: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
246: 1:BoardData {
246: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
246: 1:  'expectedAnswer': 'true',
246: 1:  'history': [
246: 1:    {
246: 1:      'answer': 'true',
246: 1:      'question': '0, 1, 5',
246: 1:      'valid': true
246: 1:    },
246: 1:    {
246: 1:      'answer': 'true',
246: 1:      'question': '1, 0, 1',
246: 1:      'valid': true
246: 1:    },
246: 1:    {
246: 1:      'answer': 'false',
246: 1:      'question': '1, 0, 2',
246: 1:      'valid': true
246: 1:    },
246: 1:    {
246: 1:      'answer': 'true',
246: 1:      'question': '3, 1, 7',
246: 1:      'valid': true
246: 1:    },
246: 1:    {
246: 1:      'answer': 'true',
246: 1:      'question': '4, 2, 14',
246: 1:      'valid': true
246: 1:    },
246: 1:    {
246: 1:      'answer': 'false',
246: 1:      'question': '3, 2, 14',
246: 1:      'valid': true
246: 1:    }
246: 1:  ],
246: 1:  'level': 10,
246: 1:  'nextQuestion': '0, 2, 5',
246: 1:  'questions': [
246: 1:    '0, 1, 5',
246: 1:    '1, 0, 1',
246: 1:    '1, 0, 2',
246: 1:    '3, 1, 7',
246: 1:    '4, 2, 14',
246: 1:    '3, 2, 14',
246: 1:    '0, 2, 5'
246: 1:  ]
246: 1:}
246: 1:Scores: 20430
246: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true']')
246: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
247: 1:BoardData {
247: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
247: 1:  'expectedAnswer': 'true',
247: 1:  'history': [
247: 1:    {
247: 1:      'answer': 'true',
247: 1:      'question': '0, 1, 5',
247: 1:      'valid': true
247: 1:    },
247: 1:    {
247: 1:      'answer': 'true',
247: 1:      'question': '1, 0, 1',
247: 1:      'valid': true
247: 1:    },
247: 1:    {
247: 1:      'answer': 'false',
247: 1:      'question': '1, 0, 2',
247: 1:      'valid': true
247: 1:    },
247: 1:    {
247: 1:      'answer': 'true',
247: 1:      'question': '3, 1, 7',
247: 1:      'valid': true
247: 1:    },
247: 1:    {
247: 1:      'answer': 'true',
247: 1:      'question': '4, 2, 14',
247: 1:      'valid': true
247: 1:    },
247: 1:    {
247: 1:      'answer': 'false',
247: 1:      'question': '3, 2, 14',
247: 1:      'valid': true
247: 1:    },
247: 1:    {
247: 1:      'answer': 'true',
247: 1:      'question': '0, 2, 5',
247: 1:      'valid': true
247: 1:    }
247: 1:  ],
247: 1:  'level': 10,
247: 1:  'nextQuestion': '3, 1, 6',
247: 1:  'questions': [
247: 1:    '0, 1, 5',
247: 1:    '1, 0, 1',
247: 1:    '1, 0, 2',
247: 1:    '3, 1, 7',
247: 1:    '4, 2, 14',
247: 1:    '3, 2, 14',
247: 1:    '0, 2, 5',
247: 1:    '3, 1, 6'
247: 1:  ]
247: 1:}
247: 1:Scores: 20437
247: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true']')
247: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
248: 1:BoardData {
248: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
248: 1:  'expectedAnswer': 'false',
248: 1:  'history': [
248: 1:    {
248: 1:      'answer': 'true',
248: 1:      'question': '0, 1, 5',
248: 1:      'valid': true
248: 1:    },
248: 1:    {
248: 1:      'answer': 'true',
248: 1:      'question': '1, 0, 1',
248: 1:      'valid': true
248: 1:    },
248: 1:    {
248: 1:      'answer': 'false',
248: 1:      'question': '1, 0, 2',
248: 1:      'valid': true
248: 1:    },
248: 1:    {
248: 1:      'answer': 'true',
248: 1:      'question': '3, 1, 7',
248: 1:      'valid': true
248: 1:    },
248: 1:    {
248: 1:      'answer': 'true',
248: 1:      'question': '4, 2, 14',
248: 1:      'valid': true
248: 1:    },
248: 1:    {
248: 1:      'answer': 'false',
248: 1:      'question': '3, 2, 14',
248: 1:      'valid': true
248: 1:    },
248: 1:    {
248: 1:      'answer': 'true',
248: 1:      'question': '0, 2, 5',
248: 1:      'valid': true
248: 1:    },
248: 1:    {
248: 1:      'answer': 'true',
248: 1:      'question': '3, 1, 6',
248: 1:      'valid': true
248: 1:    }
248: 1:  ],
248: 1:  'level': 10,
248: 1:  'nextQuestion': '3, 1, 9',
248: 1:  'questions': [
248: 1:    '0, 1, 5',
248: 1:    '1, 0, 1',
248: 1:    '1, 0, 2',
248: 1:    '3, 1, 7',
248: 1:    '4, 2, 14',
248: 1:    '3, 2, 14',
248: 1:    '0, 2, 5',
248: 1:    '3, 1, 6',
248: 1:    '3, 1, 9'
248: 1:  ]
248: 1:}
248: 1:Scores: 20444
248: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false']')
248: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
249: 1:BoardData {
249: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
249: 1:  'expectedAnswer': 'false',
249: 1:  'history': [
249: 1:    {
249: 1:      'answer': 'true',
249: 1:      'question': '0, 1, 5',
249: 1:      'valid': true
249: 1:    },
249: 1:    {
249: 1:      'answer': 'true',
249: 1:      'question': '1, 0, 1',
249: 1:      'valid': true
249: 1:    },
249: 1:    {
249: 1:      'answer': 'false',
249: 1:      'question': '1, 0, 2',
249: 1:      'valid': true
249: 1:    },
249: 1:    {
249: 1:      'answer': 'true',
249: 1:      'question': '3, 1, 7',
249: 1:      'valid': true
249: 1:    },
249: 1:    {
249: 1:      'answer': 'true',
249: 1:      'question': '4, 2, 14',
249: 1:      'valid': true
249: 1:    },
249: 1:    {
249: 1:      'answer': 'false',
249: 1:      'question': '3, 2, 14',
249: 1:      'valid': true
249: 1:    },
249: 1:    {
249: 1:      'answer': 'true',
249: 1:      'question': '0, 2, 5',
249: 1:      'valid': true
249: 1:    },
249: 1:    {
249: 1:      'answer': 'true',
249: 1:      'question': '3, 1, 6',
249: 1:      'valid': true
249: 1:    },
249: 1:    {
249: 1:      'answer': 'false',
249: 1:      'question': '3, 1, 9',
249: 1:      'valid': true
249: 1:    }
249: 1:  ],
249: 1:  'level': 10,
249: 1:  'nextQuestion': '3, 2, 9',
249: 1:  'questions': [
249: 1:    '0, 1, 5',
249: 1:    '1, 0, 1',
249: 1:    '1, 0, 2',
249: 1:    '3, 1, 7',
249: 1:    '4, 2, 14',
249: 1:    '3, 2, 14',
249: 1:    '0, 2, 5',
249: 1:    '3, 1, 6',
249: 1:    '3, 1, 9',
249: 1:    '3, 2, 9'
249: 1:  ]
249: 1:}
249: 1:Scores: 20451
249: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false']')
249: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
250: 1:BoardData {
250: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
250: 1:  'expectedAnswer': 'true',
250: 1:  'history': [
250: 1:    {
250: 1:      'answer': 'true',
250: 1:      'question': '0, 1, 5',
250: 1:      'valid': true
250: 1:    },
250: 1:    {
250: 1:      'answer': 'true',
250: 1:      'question': '1, 0, 1',
250: 1:      'valid': true
250: 1:    },
250: 1:    {
250: 1:      'answer': 'false',
250: 1:      'question': '1, 0, 2',
250: 1:      'valid': true
250: 1:    },
250: 1:    {
250: 1:      'answer': 'true',
250: 1:      'question': '3, 1, 7',
250: 1:      'valid': true
250: 1:    },
250: 1:    {
250: 1:      'answer': 'true',
250: 1:      'question': '4, 2, 14',
250: 1:      'valid': true
250: 1:    },
250: 1:    {
250: 1:      'answer': 'false',
250: 1:      'question': '3, 2, 14',
250: 1:      'valid': true
250: 1:    },
250: 1:    {
250: 1:      'answer': 'true',
250: 1:      'question': '0, 2, 5',
250: 1:      'valid': true
250: 1:    },
250: 1:    {
250: 1:      'answer': 'true',
250: 1:      'question': '3, 1, 6',
250: 1:      'valid': true
250: 1:    },
250: 1:    {
250: 1:      'answer': 'false',
250: 1:      'question': '3, 1, 9',
250: 1:      'valid': true
250: 1:    },
250: 1:    {
250: 1:      'answer': 'false',
250: 1:      'question': '3, 2, 9',
250: 1:      'valid': true
250: 1:    }
250: 1:  ],
250: 1:  'level': 10,
250: 1:  'nextQuestion': '10, 10, 0',
250: 1:  'questions': [
250: 1:    '0, 1, 5',
250: 1:    '1, 0, 1',
250: 1:    '1, 0, 2',
250: 1:    '3, 1, 7',
250: 1:    '4, 2, 14',
250: 1:    '3, 2, 14',
250: 1:    '0, 2, 5',
250: 1:    '3, 1, 6',
250: 1:    '3, 1, 9',
250: 1:    '3, 2, 9',
250: 1:    '10, 10, 0'
250: 1:  ]
250: 1:}
250: 1:Scores: 20458
250: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true']')
250: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
251: 1:BoardData {
251: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
251: 1:  'expectedAnswer': 'false',
251: 1:  'history': [
251: 1:    {
251: 1:      'answer': 'true',
251: 1:      'question': '0, 1, 5',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': 'true',
251: 1:      'question': '1, 0, 1',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': 'false',
251: 1:      'question': '1, 0, 2',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': 'true',
251: 1:      'question': '3, 1, 7',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': 'true',
251: 1:      'question': '4, 2, 14',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': 'false',
251: 1:      'question': '3, 2, 14',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': 'true',
251: 1:      'question': '0, 2, 5',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': 'true',
251: 1:      'question': '3, 1, 6',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': 'false',
251: 1:      'question': '3, 1, 9',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': 'false',
251: 1:      'question': '3, 2, 9',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': 'true',
251: 1:      'question': '10, 10, 0',
251: 1:      'valid': true
251: 1:    }
251: 1:  ],
251: 1:  'level': 10,
251: 1:  'nextQuestion': '0, 0, 1',
251: 1:  'questions': [
251: 1:    '0, 1, 5',
251: 1:    '1, 0, 1',
251: 1:    '1, 0, 2',
251: 1:    '3, 1, 7',
251: 1:    '4, 2, 14',
251: 1:    '3, 2, 14',
251: 1:    '0, 2, 5',
251: 1:    '3, 1, 6',
251: 1:    '3, 1, 9',
251: 1:    '3, 2, 9',
251: 1:    '10, 10, 0',
251: 1:    '0, 0, 1'
251: 1:  ]
251: 1:}
251: 1:Scores: 20465
251: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false']')
251: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
252: 1:BoardData {
252: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
252: 1:  'expectedAnswer': 'false',
252: 1:  'history': [
252: 1:    {
252: 1:      'answer': 'true',
252: 1:      'question': '0, 1, 5',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': 'true',
252: 1:      'question': '1, 0, 1',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': 'false',
252: 1:      'question': '1, 0, 2',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': 'true',
252: 1:      'question': '3, 1, 7',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': 'true',
252: 1:      'question': '4, 2, 14',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': 'false',
252: 1:      'question': '3, 2, 14',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': 'true',
252: 1:      'question': '0, 2, 5',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': 'true',
252: 1:      'question': '3, 1, 6',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': 'false',
252: 1:      'question': '3, 1, 9',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': 'false',
252: 1:      'question': '3, 2, 9',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': 'true',
252: 1:      'question': '10, 10, 0',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': 'false',
252: 1:      'question': '0, 0, 1',
252: 1:      'valid': true
252: 1:    }
252: 1:  ],
252: 1:  'level': 10,
252: 1:  'nextQuestion': '0, 1, 1',
252: 1:  'questions': [
252: 1:    '0, 1, 5',
252: 1:    '1, 0, 1',
252: 1:    '1, 0, 2',
252: 1:    '3, 1, 7',
252: 1:    '4, 2, 14',
252: 1:    '3, 2, 14',
252: 1:    '0, 2, 5',
252: 1:    '3, 1, 6',
252: 1:    '3, 1, 9',
252: 1:    '3, 2, 9',
252: 1:    '10, 10, 0',
252: 1:    '0, 0, 1',
252: 1:    '0, 1, 1'
252: 1:  ]
252: 1:}
252: 1:Scores: 20472
252: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false']')
252: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
253: 1:BoardData {
253: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
253: 1:  'expectedAnswer': 'false',
253: 1:  'history': [
253: 1:    {
253: 1:      'answer': 'true',
253: 1:      'question': '0, 1, 5',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': 'true',
253: 1:      'question': '1, 0, 1',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': 'false',
253: 1:      'question': '1, 0, 2',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': 'true',
253: 1:      'question': '3, 1, 7',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': 'true',
253: 1:      'question': '4, 2, 14',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': 'false',
253: 1:      'question': '3, 2, 14',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': 'true',
253: 1:      'question': '0, 2, 5',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': 'true',
253: 1:      'question': '3, 1, 6',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': 'false',
253: 1:      'question': '3, 1, 9',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': 'false',
253: 1:      'question': '3, 2, 9',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': 'true',
253: 1:      'question': '10, 10, 0',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': 'false',
253: 1:      'question': '0, 0, 1',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': 'false',
253: 1:      'question': '0, 1, 1',
253: 1:      'valid': true
253: 1:    }
253: 1:  ],
253: 1:  'level': 10,
253: 1:  'nextQuestion': '0, 0, 2',
253: 1:  'questions': [
253: 1:    '0, 1, 5',
253: 1:    '1, 0, 1',
253: 1:    '1, 0, 2',
253: 1:    '3, 1, 7',
253: 1:    '4, 2, 14',
253: 1:    '3, 2, 14',
253: 1:    '0, 2, 5',
253: 1:    '3, 1, 6',
253: 1:    '3, 1, 9',
253: 1:    '3, 2, 9',
253: 1:    '10, 10, 0',
253: 1:    '0, 0, 1',
253: 1:    '0, 1, 1',
253: 1:    '0, 0, 2'
253: 1:  ]
253: 1:}
253: 1:Scores: 20479
253: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false']')
253: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
254: 1:BoardData {
254: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
254: 1:  'expectedAnswer': 'true',
254: 1:  'history': [
254: 1:    {
254: 1:      'answer': 'true',
254: 1:      'question': '0, 1, 5',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': 'true',
254: 1:      'question': '1, 0, 1',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': 'false',
254: 1:      'question': '1, 0, 2',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': 'true',
254: 1:      'question': '3, 1, 7',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': 'true',
254: 1:      'question': '4, 2, 14',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': 'false',
254: 1:      'question': '3, 2, 14',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': 'true',
254: 1:      'question': '0, 2, 5',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': 'true',
254: 1:      'question': '3, 1, 6',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': 'false',
254: 1:      'question': '3, 1, 9',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': 'false',
254: 1:      'question': '3, 2, 9',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': 'true',
254: 1:      'question': '10, 10, 0',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': 'false',
254: 1:      'question': '0, 0, 1',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': 'false',
254: 1:      'question': '0, 1, 1',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': 'false',
254: 1:      'question': '0, 0, 2',
254: 1:      'valid': true
254: 1:    }
254: 1:  ],
254: 1:  'level': 10,
254: 1:  'nextQuestion': '2, 0, 2',
254: 1:  'questions': [
254: 1:    '0, 1, 5',
254: 1:    '1, 0, 1',
254: 1:    '1, 0, 2',
254: 1:    '3, 1, 7',
254: 1:    '4, 2, 14',
254: 1:    '3, 2, 14',
254: 1:    '0, 2, 5',
254: 1:    '3, 1, 6',
254: 1:    '3, 1, 9',
254: 1:    '3, 2, 9',
254: 1:    '10, 10, 0',
254: 1:    '0, 0, 1',
254: 1:    '0, 1, 1',
254: 1:    '0, 0, 2',
254: 1:    '2, 0, 2'
254: 1:  ]
254: 1:}
254: 1:Scores: 20486
254: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true']')
254: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
255: 1:BoardData {
255: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
255: 1:  'expectedAnswer': 'false',
255: 1:  'history': [
255: 1:    {
255: 1:      'answer': 'true',
255: 1:      'question': '0, 1, 5',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': 'true',
255: 1:      'question': '1, 0, 1',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': 'false',
255: 1:      'question': '1, 0, 2',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': 'true',
255: 1:      'question': '3, 1, 7',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': 'true',
255: 1:      'question': '4, 2, 14',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': 'false',
255: 1:      'question': '3, 2, 14',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': 'true',
255: 1:      'question': '0, 2, 5',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': 'true',
255: 1:      'question': '3, 1, 6',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': 'false',
255: 1:      'question': '3, 1, 9',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': 'false',
255: 1:      'question': '3, 2, 9',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': 'true',
255: 1:      'question': '10, 10, 0',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': 'false',
255: 1:      'question': '0, 0, 1',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': 'false',
255: 1:      'question': '0, 1, 1',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': 'false',
255: 1:      'question': '0, 0, 2',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': 'true',
255: 1:      'question': '2, 0, 2',
255: 1:      'valid': true
255: 1:    }
255: 1:  ],
255: 1:  'level': 10,
255: 1:  'nextQuestion': '0, 1, 2',
255: 1:  'questions': [
255: 1:    '0, 1, 5',
255: 1:    '1, 0, 1',
255: 1:    '1, 0, 2',
255: 1:    '3, 1, 7',
255: 1:    '4, 2, 14',
255: 1:    '3, 2, 14',
255: 1:    '0, 2, 5',
255: 1:    '3, 1, 6',
255: 1:    '3, 1, 9',
255: 1:    '3, 2, 9',
255: 1:    '10, 10, 0',
255: 1:    '0, 0, 1',
255: 1:    '0, 1, 1',
255: 1:    '0, 0, 2',
255: 1:    '2, 0, 2',
255: 1:    '0, 1, 2'
255: 1:  ]
255: 1:}
255: 1:Scores: 20493
255: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false']')
255: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
256: 1:BoardData {
256: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
256: 1:  'expectedAnswer': 'false',
256: 1:  'history': [
256: 1:    {
256: 1:      'answer': 'true',
256: 1:      'question': '0, 1, 5',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': 'true',
256: 1:      'question': '1, 0, 1',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': 'false',
256: 1:      'question': '1, 0, 2',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': 'true',
256: 1:      'question': '3, 1, 7',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': 'true',
256: 1:      'question': '4, 2, 14',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': 'false',
256: 1:      'question': '3, 2, 14',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': 'true',
256: 1:      'question': '0, 2, 5',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': 'true',
256: 1:      'question': '3, 1, 6',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': 'false',
256: 1:      'question': '3, 1, 9',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': 'false',
256: 1:      'question': '3, 2, 9',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': 'true',
256: 1:      'question': '10, 10, 0',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': 'false',
256: 1:      'question': '0, 0, 1',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': 'false',
256: 1:      'question': '0, 1, 1',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': 'false',
256: 1:      'question': '0, 0, 2',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': 'true',
256: 1:      'question': '2, 0, 2',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': 'false',
256: 1:      'question': '0, 1, 2',
256: 1:      'valid': true
256: 1:    }
256: 1:  ],
256: 1:  'level': 10,
256: 1:  'nextQuestion': '1, 1, 2',
256: 1:  'questions': [
256: 1:    '0, 1, 5',
256: 1:    '1, 0, 1',
256: 1:    '1, 0, 2',
256: 1:    '3, 1, 7',
256: 1:    '4, 2, 14',
256: 1:    '3, 2, 14',
256: 1:    '0, 2, 5',
256: 1:    '3, 1, 6',
256: 1:    '3, 1, 9',
256: 1:    '3, 2, 9',
256: 1:    '10, 10, 0',
256: 1:    '0, 0, 1',
256: 1:    '0, 1, 1',
256: 1:    '0, 0, 2',
256: 1:    '2, 0, 2',
256: 1:    '0, 1, 2',
256: 1:    '1, 1, 2'
256: 1:  ]
256: 1:}
256: 1:Scores: 20500
256: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false']')
256: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
257: 1:BoardData {
257: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
257: 1:  'expectedAnswer': 'false',
257: 1:  'history': [
257: 1:    {
257: 1:      'answer': 'true',
257: 1:      'question': '0, 1, 5',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': 'true',
257: 1:      'question': '1, 0, 1',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': 'false',
257: 1:      'question': '1, 0, 2',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': 'true',
257: 1:      'question': '3, 1, 7',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': 'true',
257: 1:      'question': '4, 2, 14',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': 'false',
257: 1:      'question': '3, 2, 14',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': 'true',
257: 1:      'question': '0, 2, 5',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': 'true',
257: 1:      'question': '3, 1, 6',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': 'false',
257: 1:      'question': '3, 1, 9',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': 'false',
257: 1:      'question': '3, 2, 9',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': 'true',
257: 1:      'question': '10, 10, 0',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': 'false',
257: 1:      'question': '0, 0, 1',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': 'false',
257: 1:      'question': '0, 1, 1',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': 'false',
257: 1:      'question': '0, 0, 2',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': 'true',
257: 1:      'question': '2, 0, 2',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': 'false',
257: 1:      'question': '0, 1, 2',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': 'false',
257: 1:      'question': '1, 1, 2',
257: 1:      'valid': true
257: 1:    }
257: 1:  ],
257: 1:  'level': 10,
257: 1:  'nextQuestion': '2, 1, 3',
257: 1:  'questions': [
257: 1:    '0, 1, 5',
257: 1:    '1, 0, 1',
257: 1:    '1, 0, 2',
257: 1:    '3, 1, 7',
257: 1:    '4, 2, 14',
257: 1:    '3, 2, 14',
257: 1:    '0, 2, 5',
257: 1:    '3, 1, 6',
257: 1:    '3, 1, 9',
257: 1:    '3, 2, 9',
257: 1:    '10, 10, 0',
257: 1:    '0, 0, 1',
257: 1:    '0, 1, 1',
257: 1:    '0, 0, 2',
257: 1:    '2, 0, 2',
257: 1:    '0, 1, 2',
257: 1:    '1, 1, 2',
257: 1:    '2, 1, 3'
257: 1:  ]
257: 1:}
257: 1:Scores: 20507
257: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false']')
257: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
258: 1:BoardData {
258: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
258: 1:  'expectedAnswer': 'false',
258: 1:  'history': [
258: 1:    {
258: 1:      'answer': 'true',
258: 1:      'question': '0, 1, 5',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': 'true',
258: 1:      'question': '1, 0, 1',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': 'false',
258: 1:      'question': '1, 0, 2',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': 'true',
258: 1:      'question': '3, 1, 7',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': 'true',
258: 1:      'question': '4, 2, 14',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': 'false',
258: 1:      'question': '3, 2, 14',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': 'true',
258: 1:      'question': '0, 2, 5',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': 'true',
258: 1:      'question': '3, 1, 6',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': 'false',
258: 1:      'question': '3, 1, 9',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': 'false',
258: 1:      'question': '3, 2, 9',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': 'true',
258: 1:      'question': '10, 10, 0',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': 'false',
258: 1:      'question': '0, 0, 1',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': 'false',
258: 1:      'question': '0, 1, 1',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': 'false',
258: 1:      'question': '0, 0, 2',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': 'true',
258: 1:      'question': '2, 0, 2',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': 'false',
258: 1:      'question': '0, 1, 2',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': 'false',
258: 1:      'question': '1, 1, 2',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': 'false',
258: 1:      'question': '2, 1, 3',
258: 1:      'valid': true
258: 1:    }
258: 1:  ],
258: 1:  'level': 10,
258: 1:  'nextQuestion': '3, 1, 4',
258: 1:  'questions': [
258: 1:    '0, 1, 5',
258: 1:    '1, 0, 1',
258: 1:    '1, 0, 2',
258: 1:    '3, 1, 7',
258: 1:    '4, 2, 14',
258: 1:    '3, 2, 14',
258: 1:    '0, 2, 5',
258: 1:    '3, 1, 6',
258: 1:    '3, 1, 9',
258: 1:    '3, 2, 9',
258: 1:    '10, 10, 0',
258: 1:    '0, 0, 1',
258: 1:    '0, 1, 1',
258: 1:    '0, 0, 2',
258: 1:    '2, 0, 2',
258: 1:    '0, 1, 2',
258: 1:    '1, 1, 2',
258: 1:    '2, 1, 3',
258: 1:    '3, 1, 4'
258: 1:  ]
258: 1:}
258: 1:Scores: 20514
258: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false']')
258: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
259: 1:BoardData {
259: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
259: 1:  'expectedAnswer': 'true',
259: 1:  'history': [
259: 1:    {
259: 1:      'answer': 'true',
259: 1:      'question': '0, 1, 5',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': 'true',
259: 1:      'question': '1, 0, 1',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': 'false',
259: 1:      'question': '1, 0, 2',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': 'true',
259: 1:      'question': '3, 1, 7',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': 'true',
259: 1:      'question': '4, 2, 14',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': 'false',
259: 1:      'question': '3, 2, 14',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': 'true',
259: 1:      'question': '0, 2, 5',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': 'true',
259: 1:      'question': '3, 1, 6',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': 'false',
259: 1:      'question': '3, 1, 9',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': 'false',
259: 1:      'question': '3, 2, 9',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': 'true',
259: 1:      'question': '10, 10, 0',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': 'false',
259: 1:      'question': '0, 0, 1',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': 'false',
259: 1:      'question': '0, 1, 1',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': 'false',
259: 1:      'question': '0, 0, 2',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': 'true',
259: 1:      'question': '2, 0, 2',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': 'false',
259: 1:      'question': '0, 1, 2',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': 'false',
259: 1:      'question': '1, 1, 2',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': 'false',
259: 1:      'question': '2, 1, 3',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': 'false',
259: 1:      'question': '3, 1, 4',
259: 1:      'valid': true
259: 1:    }
259: 1:  ],
259: 1:  'level': 10,
259: 1:  'nextQuestion': '2, 1, 1',
259: 1:  'questions': [
259: 1:    '0, 1, 5',
259: 1:    '1, 0, 1',
259: 1:    '1, 0, 2',
259: 1:    '3, 1, 7',
259: 1:    '4, 2, 14',
259: 1:    '3, 2, 14',
259: 1:    '0, 2, 5',
259: 1:    '3, 1, 6',
259: 1:    '3, 1, 9',
259: 1:    '3, 2, 9',
259: 1:    '10, 10, 0',
259: 1:    '0, 0, 1',
259: 1:    '0, 1, 1',
259: 1:    '0, 0, 2',
259: 1:    '2, 0, 2',
259: 1:    '0, 1, 2',
259: 1:    '1, 1, 2',
259: 1:    '2, 1, 3',
259: 1:    '3, 1, 4',
259: 1:    '2, 1, 1'
259: 1:  ]
259: 1:}
259: 1:Scores: 20521
259: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true']')
259: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
260: 1:BoardData {
260: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
260: 1:  'expectedAnswer': 'true',
260: 1:  'history': [
260: 1:    {
260: 1:      'answer': 'true',
260: 1:      'question': '0, 1, 5',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': 'true',
260: 1:      'question': '1, 0, 1',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': 'false',
260: 1:      'question': '1, 0, 2',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': 'true',
260: 1:      'question': '3, 1, 7',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': 'true',
260: 1:      'question': '4, 2, 14',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': 'false',
260: 1:      'question': '3, 2, 14',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': 'true',
260: 1:      'question': '0, 2, 5',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': 'true',
260: 1:      'question': '3, 1, 6',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': 'false',
260: 1:      'question': '3, 1, 9',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': 'false',
260: 1:      'question': '3, 2, 9',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': 'true',
260: 1:      'question': '10, 10, 0',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': 'false',
260: 1:      'question': '0, 0, 1',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': 'false',
260: 1:      'question': '0, 1, 1',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': 'false',
260: 1:      'question': '0, 0, 2',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': 'true',
260: 1:      'question': '2, 0, 2',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': 'false',
260: 1:      'question': '0, 1, 2',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': 'false',
260: 1:      'question': '1, 1, 2',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': 'false',
260: 1:      'question': '2, 1, 3',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': 'false',
260: 1:      'question': '3, 1, 4',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': 'true',
260: 1:      'question': '2, 1, 1',
260: 1:      'valid': true
260: 1:    }
260: 1:  ],
260: 1:  'level': 10,
260: 1:  'nextQuestion': '2, 2, 6',
260: 1:  'questions': [
260: 1:    '0, 1, 5',
260: 1:    '1, 0, 1',
260: 1:    '1, 0, 2',
260: 1:    '3, 1, 7',
260: 1:    '4, 2, 14',
260: 1:    '3, 2, 14',
260: 1:    '0, 2, 5',
260: 1:    '3, 1, 6',
260: 1:    '3, 1, 9',
260: 1:    '3, 2, 9',
260: 1:    '10, 10, 0',
260: 1:    '0, 0, 1',
260: 1:    '0, 1, 1',
260: 1:    '0, 0, 2',
260: 1:    '2, 0, 2',
260: 1:    '0, 1, 2',
260: 1:    '1, 1, 2',
260: 1:    '2, 1, 3',
260: 1:    '3, 1, 4',
260: 1:    '2, 1, 1',
260: 1:    '2, 2, 6'
260: 1:  ]
260: 1:}
260: 1:Scores: 20528
260: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true']')
260: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
261: 1:BoardData {
261: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
261: 1:  'expectedAnswer': 'true',
261: 1:  'history': [
261: 1:    {
261: 1:      'answer': 'true',
261: 1:      'question': '0, 1, 5',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': 'true',
261: 1:      'question': '1, 0, 1',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': 'false',
261: 1:      'question': '1, 0, 2',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': 'true',
261: 1:      'question': '3, 1, 7',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': 'true',
261: 1:      'question': '4, 2, 14',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': 'false',
261: 1:      'question': '3, 2, 14',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': 'true',
261: 1:      'question': '0, 2, 5',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': 'true',
261: 1:      'question': '3, 1, 6',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': 'false',
261: 1:      'question': '3, 1, 9',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': 'false',
261: 1:      'question': '3, 2, 9',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': 'true',
261: 1:      'question': '10, 10, 0',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': 'false',
261: 1:      'question': '0, 0, 1',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': 'false',
261: 1:      'question': '0, 1, 1',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': 'false',
261: 1:      'question': '0, 0, 2',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': 'true',
261: 1:      'question': '2, 0, 2',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': 'false',
261: 1:      'question': '0, 1, 2',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': 'false',
261: 1:      'question': '1, 1, 2',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': 'false',
261: 1:      'question': '2, 1, 3',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': 'false',
261: 1:      'question': '3, 1, 4',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': 'true',
261: 1:      'question': '2, 1, 1',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': 'true',
261: 1:      'question': '2, 2, 6',
261: 1:      'valid': true
261: 1:    }
261: 1:  ],
261: 1:  'level': 10,
261: 1:  'nextQuestion': '6, 1, 11',
261: 1:  'questions': [
261: 1:    '0, 1, 5',
261: 1:    '1, 0, 1',
261: 1:    '1, 0, 2',
261: 1:    '3, 1, 7',
261: 1:    '4, 2, 14',
261: 1:    '3, 2, 14',
261: 1:    '0, 2, 5',
261: 1:    '3, 1, 6',
261: 1:    '3, 1, 9',
261: 1:    '3, 2, 9',
261: 1:    '10, 10, 0',
261: 1:    '0, 0, 1',
261: 1:    '0, 1, 1',
261: 1:    '0, 0, 2',
261: 1:    '2, 0, 2',
261: 1:    '0, 1, 2',
261: 1:    '1, 1, 2',
261: 1:    '2, 1, 3',
261: 1:    '3, 1, 4',
261: 1:    '2, 1, 1',
261: 1:    '2, 2, 6',
261: 1:    '6, 1, 11'
261: 1:  ]
261: 1:}
261: 1:Scores: 20535
261: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true']')
261: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
262: 1:BoardData {
262: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
262: 1:  'expectedAnswer': 'true',
262: 1:  'history': [
262: 1:    {
262: 1:      'answer': 'true',
262: 1:      'question': '0, 1, 5',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': 'true',
262: 1:      'question': '1, 0, 1',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': 'false',
262: 1:      'question': '1, 0, 2',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': 'true',
262: 1:      'question': '3, 1, 7',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': 'true',
262: 1:      'question': '4, 2, 14',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': 'false',
262: 1:      'question': '3, 2, 14',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': 'true',
262: 1:      'question': '0, 2, 5',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': 'true',
262: 1:      'question': '3, 1, 6',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': 'false',
262: 1:      'question': '3, 1, 9',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': 'false',
262: 1:      'question': '3, 2, 9',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': 'true',
262: 1:      'question': '10, 10, 0',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': 'false',
262: 1:      'question': '0, 0, 1',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': 'false',
262: 1:      'question': '0, 1, 1',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': 'false',
262: 1:      'question': '0, 0, 2',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': 'true',
262: 1:      'question': '2, 0, 2',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': 'false',
262: 1:      'question': '0, 1, 2',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': 'false',
262: 1:      'question': '1, 1, 2',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': 'false',
262: 1:      'question': '2, 1, 3',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': 'false',
262: 1:      'question': '3, 1, 4',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': 'true',
262: 1:      'question': '2, 1, 1',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': 'true',
262: 1:      'question': '2, 2, 6',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': 'true',
262: 1:      'question': '6, 1, 11',
262: 1:      'valid': true
262: 1:    }
262: 1:  ],
262: 1:  'level': 10,
262: 1:  'nextQuestion': '5, 0, 1',
262: 1:  'questions': [
262: 1:    '0, 1, 5',
262: 1:    '1, 0, 1',
262: 1:    '1, 0, 2',
262: 1:    '3, 1, 7',
262: 1:    '4, 2, 14',
262: 1:    '3, 2, 14',
262: 1:    '0, 2, 5',
262: 1:    '3, 1, 6',
262: 1:    '3, 1, 9',
262: 1:    '3, 2, 9',
262: 1:    '10, 10, 0',
262: 1:    '0, 0, 1',
262: 1:    '0, 1, 1',
262: 1:    '0, 0, 2',
262: 1:    '2, 0, 2',
262: 1:    '0, 1, 2',
262: 1:    '1, 1, 2',
262: 1:    '2, 1, 3',
262: 1:    '3, 1, 4',
262: 1:    '2, 1, 1',
262: 1:    '2, 2, 6',
262: 1:    '6, 1, 11',
262: 1:    '5, 0, 1'
262: 1:  ]
262: 1:}
262: 1:Scores: 20542
262: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true']')
262: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
263: 1:BoardData {
263: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
263: 1:  'expectedAnswer': 'true',
263: 1:  'history': [
263: 1:    {
263: 1:      'answer': 'true',
263: 1:      'question': '0, 1, 5',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': 'true',
263: 1:      'question': '1, 0, 1',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': 'false',
263: 1:      'question': '1, 0, 2',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': 'true',
263: 1:      'question': '3, 1, 7',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': 'true',
263: 1:      'question': '4, 2, 14',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': 'false',
263: 1:      'question': '3, 2, 14',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': 'true',
263: 1:      'question': '0, 2, 5',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': 'true',
263: 1:      'question': '3, 1, 6',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': 'false',
263: 1:      'question': '3, 1, 9',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': 'false',
263: 1:      'question': '3, 2, 9',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': 'true',
263: 1:      'question': '10, 10, 0',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': 'false',
263: 1:      'question': '0, 0, 1',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': 'false',
263: 1:      'question': '0, 1, 1',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': 'false',
263: 1:      'question': '0, 0, 2',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': 'true',
263: 1:      'question': '2, 0, 2',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': 'false',
263: 1:      'question': '0, 1, 2',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': 'false',
263: 1:      'question': '1, 1, 2',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': 'false',
263: 1:      'question': '2, 1, 3',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': 'false',
263: 1:      'question': '3, 1, 4',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': 'true',
263: 1:      'question': '2, 1, 1',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': 'true',
263: 1:      'question': '2, 2, 6',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': 'true',
263: 1:      'question': '6, 1, 11',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': 'true',
263: 1:      'question': '5, 0, 1',
263: 1:      'valid': true
263: 1:    }
263: 1:  ],
263: 1:  'level': 10,
263: 1:  'nextQuestion': '3, 1, 8',
263: 1:  'questions': [
263: 1:    '0, 1, 5',
263: 1:    '1, 0, 1',
263: 1:    '1, 0, 2',
263: 1:    '3, 1, 7',
263: 1:    '4, 2, 14',
263: 1:    '3, 2, 14',
263: 1:    '0, 2, 5',
263: 1:    '3, 1, 6',
263: 1:    '3, 1, 9',
263: 1:    '3, 2, 9',
263: 1:    '10, 10, 0',
263: 1:    '0, 0, 1',
263: 1:    '0, 1, 1',
263: 1:    '0, 0, 2',
263: 1:    '2, 0, 2',
263: 1:    '0, 1, 2',
263: 1:    '1, 1, 2',
263: 1:    '2, 1, 3',
263: 1:    '3, 1, 4',
263: 1:    '2, 1, 1',
263: 1:    '2, 2, 6',
263: 1:    '6, 1, 11',
263: 1:    '5, 0, 1',
263: 1:    '3, 1, 8'
263: 1:  ]
263: 1:}
263: 1:Scores: 20549
263: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true']')
263: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
264: 1:BoardData {
264: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
264: 1:  'expectedAnswer': 'true',
264: 1:  'history': [
264: 1:    {
264: 1:      'answer': 'true',
264: 1:      'question': '0, 1, 5',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': 'true',
264: 1:      'question': '1, 0, 1',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': 'false',
264: 1:      'question': '1, 0, 2',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': 'true',
264: 1:      'question': '3, 1, 7',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': 'true',
264: 1:      'question': '4, 2, 14',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': 'false',
264: 1:      'question': '3, 2, 14',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': 'true',
264: 1:      'question': '0, 2, 5',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': 'true',
264: 1:      'question': '3, 1, 6',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': 'false',
264: 1:      'question': '3, 1, 9',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': 'false',
264: 1:      'question': '3, 2, 9',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': 'true',
264: 1:      'question': '10, 10, 0',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': 'false',
264: 1:      'question': '0, 0, 1',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': 'false',
264: 1:      'question': '0, 1, 1',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': 'false',
264: 1:      'question': '0, 0, 2',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': 'true',
264: 1:      'question': '2, 0, 2',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': 'false',
264: 1:      'question': '0, 1, 2',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': 'false',
264: 1:      'question': '1, 1, 2',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': 'false',
264: 1:      'question': '2, 1, 3',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': 'false',
264: 1:      'question': '3, 1, 4',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': 'true',
264: 1:      'question': '2, 1, 1',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': 'true',
264: 1:      'question': '2, 2, 6',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': 'true',
264: 1:      'question': '6, 1, 11',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': 'true',
264: 1:      'question': '5, 0, 1',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': 'true',
264: 1:      'question': '3, 1, 8',
264: 1:      'valid': true
264: 1:    }
264: 1:  ],
264: 1:  'level': 10,
264: 1:  'nextQuestion': '3, 2, 10',
264: 1:  'questions': [
264: 1:    '0, 1, 5',
264: 1:    '1, 0, 1',
264: 1:    '1, 0, 2',
264: 1:    '3, 1, 7',
264: 1:    '4, 2, 14',
264: 1:    '3, 2, 14',
264: 1:    '0, 2, 5',
264: 1:    '3, 1, 6',
264: 1:    '3, 1, 9',
264: 1:    '3, 2, 9',
264: 1:    '10, 10, 0',
264: 1:    '0, 0, 1',
264: 1:    '0, 1, 1',
264: 1:    '0, 0, 2',
264: 1:    '2, 0, 2',
264: 1:    '0, 1, 2',
264: 1:    '1, 1, 2',
264: 1:    '2, 1, 3',
264: 1:    '3, 1, 4',
264: 1:    '2, 1, 1',
264: 1:    '2, 2, 6',
264: 1:    '6, 1, 11',
264: 1:    '5, 0, 1',
264: 1:    '3, 1, 8',
264: 1:    '3, 2, 10'
264: 1:  ]
264: 1:}
264: 1:Scores: 20556
264: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true']')
264: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
265: 1:BoardData {
265: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
265: 1:  'expectedAnswer': 'true',
265: 1:  'history': [
265: 1:    {
265: 1:      'answer': 'true',
265: 1:      'question': '0, 1, 5',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': 'true',
265: 1:      'question': '1, 0, 1',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': 'false',
265: 1:      'question': '1, 0, 2',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': 'true',
265: 1:      'question': '3, 1, 7',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': 'true',
265: 1:      'question': '4, 2, 14',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': 'false',
265: 1:      'question': '3, 2, 14',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': 'true',
265: 1:      'question': '0, 2, 5',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': 'true',
265: 1:      'question': '3, 1, 6',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': 'false',
265: 1:      'question': '3, 1, 9',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': 'false',
265: 1:      'question': '3, 2, 9',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': 'true',
265: 1:      'question': '10, 10, 0',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': 'false',
265: 1:      'question': '0, 0, 1',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': 'false',
265: 1:      'question': '0, 1, 1',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': 'false',
265: 1:      'question': '0, 0, 2',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': 'true',
265: 1:      'question': '2, 0, 2',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': 'false',
265: 1:      'question': '0, 1, 2',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': 'false',
265: 1:      'question': '1, 1, 2',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': 'false',
265: 1:      'question': '2, 1, 3',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': 'false',
265: 1:      'question': '3, 1, 4',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': 'true',
265: 1:      'question': '2, 1, 1',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': 'true',
265: 1:      'question': '2, 2, 6',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': 'true',
265: 1:      'question': '6, 1, 11',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': 'true',
265: 1:      'question': '5, 0, 1',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': 'true',
265: 1:      'question': '3, 1, 8',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': 'true',
265: 1:      'question': '3, 2, 10',
265: 1:      'valid': true
265: 1:    }
265: 1:  ],
265: 1:  'level': 10,
265: 1:  'nextQuestion': '3, 2, 8',
265: 1:  'questions': [
265: 1:    '0, 1, 5',
265: 1:    '1, 0, 1',
265: 1:    '1, 0, 2',
265: 1:    '3, 1, 7',
265: 1:    '4, 2, 14',
265: 1:    '3, 2, 14',
265: 1:    '0, 2, 5',
265: 1:    '3, 1, 6',
265: 1:    '3, 1, 9',
265: 1:    '3, 2, 9',
265: 1:    '10, 10, 0',
265: 1:    '0, 0, 1',
265: 1:    '0, 1, 1',
265: 1:    '0, 0, 2',
265: 1:    '2, 0, 2',
265: 1:    '0, 1, 2',
265: 1:    '1, 1, 2',
265: 1:    '2, 1, 3',
265: 1:    '3, 1, 4',
265: 1:    '2, 1, 1',
265: 1:    '2, 2, 6',
265: 1:    '6, 1, 11',
265: 1:    '5, 0, 1',
265: 1:    '3, 1, 8',
265: 1:    '3, 2, 10',
265: 1:    '3, 2, 8'
265: 1:  ]
265: 1:}
265: 1:Scores: 20563
265: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true']')
265: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
266: 1:BoardData {
266: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
266: 1:  'expectedAnswer': 'false',
266: 1:  'history': [
266: 1:    {
266: 1:      'answer': 'true',
266: 1:      'question': '0, 1, 5',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'true',
266: 1:      'question': '1, 0, 1',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'false',
266: 1:      'question': '1, 0, 2',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'true',
266: 1:      'question': '3, 1, 7',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'true',
266: 1:      'question': '4, 2, 14',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'false',
266: 1:      'question': '3, 2, 14',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'true',
266: 1:      'question': '0, 2, 5',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'true',
266: 1:      'question': '3, 1, 6',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'false',
266: 1:      'question': '3, 1, 9',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'false',
266: 1:      'question': '3, 2, 9',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'true',
266: 1:      'question': '10, 10, 0',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'false',
266: 1:      'question': '0, 0, 1',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'false',
266: 1:      'question': '0, 1, 1',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'false',
266: 1:      'question': '0, 0, 2',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'true',
266: 1:      'question': '2, 0, 2',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'false',
266: 1:      'question': '0, 1, 2',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'false',
266: 1:      'question': '1, 1, 2',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'false',
266: 1:      'question': '2, 1, 3',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'false',
266: 1:      'question': '3, 1, 4',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'true',
266: 1:      'question': '2, 1, 1',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'true',
266: 1:      'question': '2, 2, 6',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'true',
266: 1:      'question': '6, 1, 11',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'true',
266: 1:      'question': '5, 0, 1',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'true',
266: 1:      'question': '3, 1, 8',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'true',
266: 1:      'question': '3, 2, 10',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'true',
266: 1:      'question': '3, 2, 8',
266: 1:      'valid': true
266: 1:    }
266: 1:  ],
266: 1:  'level': 10,
266: 1:  'nextQuestion': '6, 0, 11',
266: 1:  'questions': [
266: 1:    '0, 1, 5',
266: 1:    '1, 0, 1',
266: 1:    '1, 0, 2',
266: 1:    '3, 1, 7',
266: 1:    '4, 2, 14',
266: 1:    '3, 2, 14',
266: 1:    '0, 2, 5',
266: 1:    '3, 1, 6',
266: 1:    '3, 1, 9',
266: 1:    '3, 2, 9',
266: 1:    '10, 10, 0',
266: 1:    '0, 0, 1',
266: 1:    '0, 1, 1',
266: 1:    '0, 0, 2',
266: 1:    '2, 0, 2',
266: 1:    '0, 1, 2',
266: 1:    '1, 1, 2',
266: 1:    '2, 1, 3',
266: 1:    '3, 1, 4',
266: 1:    '2, 1, 1',
266: 1:    '2, 2, 6',
266: 1:    '6, 1, 11',
266: 1:    '5, 0, 1',
266: 1:    '3, 1, 8',
266: 1:    '3, 2, 10',
266: 1:    '3, 2, 8',
266: 1:    '6, 0, 11'
266: 1:  ]
266: 1:}
266: 1:Scores: 20570
266: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false']')
266: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
267: 1:BoardData {
267: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
267: 1:  'expectedAnswer': 'true',
267: 1:  'history': [
267: 1:    {
267: 1:      'answer': 'true',
267: 1:      'question': '0, 1, 5',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'true',
267: 1:      'question': '1, 0, 1',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'false',
267: 1:      'question': '1, 0, 2',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'true',
267: 1:      'question': '3, 1, 7',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'true',
267: 1:      'question': '4, 2, 14',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'false',
267: 1:      'question': '3, 2, 14',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'true',
267: 1:      'question': '0, 2, 5',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'true',
267: 1:      'question': '3, 1, 6',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'false',
267: 1:      'question': '3, 1, 9',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'false',
267: 1:      'question': '3, 2, 9',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'true',
267: 1:      'question': '10, 10, 0',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'false',
267: 1:      'question': '0, 0, 1',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'false',
267: 1:      'question': '0, 1, 1',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'false',
267: 1:      'question': '0, 0, 2',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'true',
267: 1:      'question': '2, 0, 2',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'false',
267: 1:      'question': '0, 1, 2',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'false',
267: 1:      'question': '1, 1, 2',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'false',
267: 1:      'question': '2, 1, 3',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'false',
267: 1:      'question': '3, 1, 4',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'true',
267: 1:      'question': '2, 1, 1',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'true',
267: 1:      'question': '2, 2, 6',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'true',
267: 1:      'question': '6, 1, 11',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'true',
267: 1:      'question': '5, 0, 1',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'true',
267: 1:      'question': '3, 1, 8',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'true',
267: 1:      'question': '3, 2, 10',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'true',
267: 1:      'question': '3, 2, 8',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'false',
267: 1:      'question': '6, 0, 11',
267: 1:      'valid': true
267: 1:    }
267: 1:  ],
267: 1:  'level': 10,
267: 1:  'nextQuestion': '1, 4, 11',
267: 1:  'questions': [
267: 1:    '0, 1, 5',
267: 1:    '1, 0, 1',
267: 1:    '1, 0, 2',
267: 1:    '3, 1, 7',
267: 1:    '4, 2, 14',
267: 1:    '3, 2, 14',
267: 1:    '0, 2, 5',
267: 1:    '3, 1, 6',
267: 1:    '3, 1, 9',
267: 1:    '3, 2, 9',
267: 1:    '10, 10, 0',
267: 1:    '0, 0, 1',
267: 1:    '0, 1, 1',
267: 1:    '0, 0, 2',
267: 1:    '2, 0, 2',
267: 1:    '0, 1, 2',
267: 1:    '1, 1, 2',
267: 1:    '2, 1, 3',
267: 1:    '3, 1, 4',
267: 1:    '2, 1, 1',
267: 1:    '2, 2, 6',
267: 1:    '6, 1, 11',
267: 1:    '5, 0, 1',
267: 1:    '3, 1, 8',
267: 1:    '3, 2, 10',
267: 1:    '3, 2, 8',
267: 1:    '6, 0, 11',
267: 1:    '1, 4, 11'
267: 1:  ]
267: 1:}
267: 1:Scores: 20577
267: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true']')
267: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
268: 1:BoardData {
268: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
268: 1:  'expectedAnswer': 'true',
268: 1:  'history': [
268: 1:    {
268: 1:      'answer': 'true',
268: 1:      'question': '0, 1, 5',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'true',
268: 1:      'question': '1, 0, 1',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'false',
268: 1:      'question': '1, 0, 2',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'true',
268: 1:      'question': '3, 1, 7',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'true',
268: 1:      'question': '4, 2, 14',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'false',
268: 1:      'question': '3, 2, 14',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'true',
268: 1:      'question': '0, 2, 5',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'true',
268: 1:      'question': '3, 1, 6',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'false',
268: 1:      'question': '3, 1, 9',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'false',
268: 1:      'question': '3, 2, 9',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'true',
268: 1:      'question': '10, 10, 0',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'false',
268: 1:      'question': '0, 0, 1',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'false',
268: 1:      'question': '0, 1, 1',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'false',
268: 1:      'question': '0, 0, 2',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'true',
268: 1:      'question': '2, 0, 2',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'false',
268: 1:      'question': '0, 1, 2',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'false',
268: 1:      'question': '1, 1, 2',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'false',
268: 1:      'question': '2, 1, 3',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'false',
268: 1:      'question': '3, 1, 4',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'true',
268: 1:      'question': '2, 1, 1',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'true',
268: 1:      'question': '2, 2, 6',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'true',
268: 1:      'question': '6, 1, 11',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'true',
268: 1:      'question': '5, 0, 1',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'true',
268: 1:      'question': '3, 1, 8',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'true',
268: 1:      'question': '3, 2, 10',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'true',
268: 1:      'question': '3, 2, 8',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'false',
268: 1:      'question': '6, 0, 11',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'true',
268: 1:      'question': '1, 4, 11',
268: 1:      'valid': true
268: 1:    }
268: 1:  ],
268: 1:  'level': 10,
268: 1:  'nextQuestion': '0, 3, 10',
268: 1:  'questions': [
268: 1:    '0, 1, 5',
268: 1:    '1, 0, 1',
268: 1:    '1, 0, 2',
268: 1:    '3, 1, 7',
268: 1:    '4, 2, 14',
268: 1:    '3, 2, 14',
268: 1:    '0, 2, 5',
268: 1:    '3, 1, 6',
268: 1:    '3, 1, 9',
268: 1:    '3, 2, 9',
268: 1:    '10, 10, 0',
268: 1:    '0, 0, 1',
268: 1:    '0, 1, 1',
268: 1:    '0, 0, 2',
268: 1:    '2, 0, 2',
268: 1:    '0, 1, 2',
268: 1:    '1, 1, 2',
268: 1:    '2, 1, 3',
268: 1:    '3, 1, 4',
268: 1:    '2, 1, 1',
268: 1:    '2, 2, 6',
268: 1:    '6, 1, 11',
268: 1:    '5, 0, 1',
268: 1:    '3, 1, 8',
268: 1:    '3, 2, 10',
268: 1:    '3, 2, 8',
268: 1:    '6, 0, 11',
268: 1:    '1, 4, 11',
268: 1:    '0, 3, 10'
268: 1:  ]
268: 1:}
268: 1:Scores: 20584
268: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true']')
268: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
269: 1:BoardData {
269: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
269: 1:  'expectedAnswer': 'false',
269: 1:  'history': [
269: 1:    {
269: 1:      'answer': 'true',
269: 1:      'question': '0, 1, 5',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'true',
269: 1:      'question': '1, 0, 1',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'false',
269: 1:      'question': '1, 0, 2',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'true',
269: 1:      'question': '3, 1, 7',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'true',
269: 1:      'question': '4, 2, 14',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'false',
269: 1:      'question': '3, 2, 14',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'true',
269: 1:      'question': '0, 2, 5',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'true',
269: 1:      'question': '3, 1, 6',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'false',
269: 1:      'question': '3, 1, 9',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'false',
269: 1:      'question': '3, 2, 9',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'true',
269: 1:      'question': '10, 10, 0',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'false',
269: 1:      'question': '0, 0, 1',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'false',
269: 1:      'question': '0, 1, 1',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'false',
269: 1:      'question': '0, 0, 2',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'true',
269: 1:      'question': '2, 0, 2',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'false',
269: 1:      'question': '0, 1, 2',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'false',
269: 1:      'question': '1, 1, 2',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'false',
269: 1:      'question': '2, 1, 3',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'false',
269: 1:      'question': '3, 1, 4',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'true',
269: 1:      'question': '2, 1, 1',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'true',
269: 1:      'question': '2, 2, 6',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'true',
269: 1:      'question': '6, 1, 11',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'true',
269: 1:      'question': '5, 0, 1',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'true',
269: 1:      'question': '3, 1, 8',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'true',
269: 1:      'question': '3, 2, 10',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'true',
269: 1:      'question': '3, 2, 8',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'false',
269: 1:      'question': '6, 0, 11',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'true',
269: 1:      'question': '1, 4, 11',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'true',
269: 1:      'question': '0, 3, 10',
269: 1:      'valid': true
269: 1:    }
269: 1:  ],
269: 1:  'level': 10,
269: 1:  'nextQuestion': '1, 4, 12',
269: 1:  'questions': [
269: 1:    '0, 1, 5',
269: 1:    '1, 0, 1',
269: 1:    '1, 0, 2',
269: 1:    '3, 1, 7',
269: 1:    '4, 2, 14',
269: 1:    '3, 2, 14',
269: 1:    '0, 2, 5',
269: 1:    '3, 1, 6',
269: 1:    '3, 1, 9',
269: 1:    '3, 2, 9',
269: 1:    '10, 10, 0',
269: 1:    '0, 0, 1',
269: 1:    '0, 1, 1',
269: 1:    '0, 0, 2',
269: 1:    '2, 0, 2',
269: 1:    '0, 1, 2',
269: 1:    '1, 1, 2',
269: 1:    '2, 1, 3',
269: 1:    '3, 1, 4',
269: 1:    '2, 1, 1',
269: 1:    '2, 2, 6',
269: 1:    '6, 1, 11',
269: 1:    '5, 0, 1',
269: 1:    '3, 1, 8',
269: 1:    '3, 2, 10',
269: 1:    '3, 2, 8',
269: 1:    '6, 0, 11',
269: 1:    '1, 4, 11',
269: 1:    '0, 3, 10',
269: 1:    '1, 4, 12'
269: 1:  ]
269: 1:}
269: 1:Scores: 20591
269: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false']')
269: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
270: 1:BoardData {
270: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
270: 1:  'expectedAnswer': 'false',
270: 1:  'history': [
270: 1:    {
270: 1:      'answer': 'true',
270: 1:      'question': '0, 1, 5',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'true',
270: 1:      'question': '1, 0, 1',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'false',
270: 1:      'question': '1, 0, 2',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'true',
270: 1:      'question': '3, 1, 7',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'true',
270: 1:      'question': '4, 2, 14',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'false',
270: 1:      'question': '3, 2, 14',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'true',
270: 1:      'question': '0, 2, 5',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'true',
270: 1:      'question': '3, 1, 6',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'false',
270: 1:      'question': '3, 1, 9',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'false',
270: 1:      'question': '3, 2, 9',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'true',
270: 1:      'question': '10, 10, 0',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'false',
270: 1:      'question': '0, 0, 1',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'false',
270: 1:      'question': '0, 1, 1',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'false',
270: 1:      'question': '0, 0, 2',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'true',
270: 1:      'question': '2, 0, 2',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'false',
270: 1:      'question': '0, 1, 2',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'false',
270: 1:      'question': '1, 1, 2',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'false',
270: 1:      'question': '2, 1, 3',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'false',
270: 1:      'question': '3, 1, 4',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'true',
270: 1:      'question': '2, 1, 1',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'true',
270: 1:      'question': '2, 2, 6',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'true',
270: 1:      'question': '6, 1, 11',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'true',
270: 1:      'question': '5, 0, 1',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'true',
270: 1:      'question': '3, 1, 8',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'true',
270: 1:      'question': '3, 2, 10',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'true',
270: 1:      'question': '3, 2, 8',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'false',
270: 1:      'question': '6, 0, 11',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'true',
270: 1:      'question': '1, 4, 11',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'true',
270: 1:      'question': '0, 3, 10',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'false',
270: 1:      'question': '1, 4, 12',
270: 1:      'valid': true
270: 1:    }
270: 1:  ],
270: 1:  'level': 10,
270: 1:  'nextQuestion': '1, 1, 7',
270: 1:  'questions': [
270: 1:    '0, 1, 5',
270: 1:    '1, 0, 1',
270: 1:    '1, 0, 2',
270: 1:    '3, 1, 7',
270: 1:    '4, 2, 14',
270: 1:    '3, 2, 14',
270: 1:    '0, 2, 5',
270: 1:    '3, 1, 6',
270: 1:    '3, 1, 9',
270: 1:    '3, 2, 9',
270: 1:    '10, 10, 0',
270: 1:    '0, 0, 1',
270: 1:    '0, 1, 1',
270: 1:    '0, 0, 2',
270: 1:    '2, 0, 2',
270: 1:    '0, 1, 2',
270: 1:    '1, 1, 2',
270: 1:    '2, 1, 3',
270: 1:    '3, 1, 4',
270: 1:    '2, 1, 1',
270: 1:    '2, 2, 6',
270: 1:    '6, 1, 11',
270: 1:    '5, 0, 1',
270: 1:    '3, 1, 8',
270: 1:    '3, 2, 10',
270: 1:    '3, 2, 8',
270: 1:    '6, 0, 11',
270: 1:    '1, 4, 11',
270: 1:    '0, 3, 10',
270: 1:    '1, 4, 12',
270: 1:    '1, 1, 7'
270: 1:  ]
270: 1:}
270: 1:Scores: 20598
270: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false']')
270: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
271: 1:BoardData {
271: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
271: 1:  'expectedAnswer': 'true',
271: 1:  'history': [
271: 1:    {
271: 1:      'answer': 'true',
271: 1:      'question': '0, 1, 5',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'true',
271: 1:      'question': '1, 0, 1',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'false',
271: 1:      'question': '1, 0, 2',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'true',
271: 1:      'question': '3, 1, 7',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'true',
271: 1:      'question': '4, 2, 14',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'false',
271: 1:      'question': '3, 2, 14',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'true',
271: 1:      'question': '0, 2, 5',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'true',
271: 1:      'question': '3, 1, 6',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'false',
271: 1:      'question': '3, 1, 9',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'false',
271: 1:      'question': '3, 2, 9',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'true',
271: 1:      'question': '10, 10, 0',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'false',
271: 1:      'question': '0, 0, 1',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'false',
271: 1:      'question': '0, 1, 1',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'false',
271: 1:      'question': '0, 0, 2',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'true',
271: 1:      'question': '2, 0, 2',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'false',
271: 1:      'question': '0, 1, 2',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'false',
271: 1:      'question': '1, 1, 2',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'false',
271: 1:      'question': '2, 1, 3',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'false',
271: 1:      'question': '3, 1, 4',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'true',
271: 1:      'question': '2, 1, 1',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'true',
271: 1:      'question': '2, 2, 6',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'true',
271: 1:      'question': '6, 1, 11',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'true',
271: 1:      'question': '5, 0, 1',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'true',
271: 1:      'question': '3, 1, 8',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'true',
271: 1:      'question': '3, 2, 10',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'true',
271: 1:      'question': '3, 2, 8',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'false',
271: 1:      'question': '6, 0, 11',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'true',
271: 1:      'question': '1, 4, 11',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'true',
271: 1:      'question': '0, 3, 10',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'false',
271: 1:      'question': '1, 4, 12',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'false',
271: 1:      'question': '1, 1, 7',
271: 1:      'valid': true
271: 1:    }
271: 1:  ],
271: 1:  'level': 10,
271: 1:  'nextQuestion': '2, 1, 7',
271: 1:  'questions': [
271: 1:    '0, 1, 5',
271: 1:    '1, 0, 1',
271: 1:    '1, 0, 2',
271: 1:    '3, 1, 7',
271: 1:    '4, 2, 14',
271: 1:    '3, 2, 14',
271: 1:    '0, 2, 5',
271: 1:    '3, 1, 6',
271: 1:    '3, 1, 9',
271: 1:    '3, 2, 9',
271: 1:    '10, 10, 0',
271: 1:    '0, 0, 1',
271: 1:    '0, 1, 1',
271: 1:    '0, 0, 2',
271: 1:    '2, 0, 2',
271: 1:    '0, 1, 2',
271: 1:    '1, 1, 2',
271: 1:    '2, 1, 3',
271: 1:    '3, 1, 4',
271: 1:    '2, 1, 1',
271: 1:    '2, 2, 6',
271: 1:    '6, 1, 11',
271: 1:    '5, 0, 1',
271: 1:    '3, 1, 8',
271: 1:    '3, 2, 10',
271: 1:    '3, 2, 8',
271: 1:    '6, 0, 11',
271: 1:    '1, 4, 11',
271: 1:    '0, 3, 10',
271: 1:    '1, 4, 12',
271: 1:    '1, 1, 7',
271: 1:    '2, 1, 7'
271: 1:  ]
271: 1:}
271: 1:Scores: 20605
271: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true']')
271: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
272: 1:BoardData {
272: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
272: 1:  'expectedAnswer': 'true',
272: 1:  'history': [
272: 1:    {
272: 1:      'answer': 'true',
272: 1:      'question': '0, 1, 5',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'true',
272: 1:      'question': '1, 0, 1',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'false',
272: 1:      'question': '1, 0, 2',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'true',
272: 1:      'question': '3, 1, 7',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'true',
272: 1:      'question': '4, 2, 14',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'false',
272: 1:      'question': '3, 2, 14',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'true',
272: 1:      'question': '0, 2, 5',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'true',
272: 1:      'question': '3, 1, 6',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'false',
272: 1:      'question': '3, 1, 9',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'false',
272: 1:      'question': '3, 2, 9',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'true',
272: 1:      'question': '10, 10, 0',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'false',
272: 1:      'question': '0, 0, 1',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'false',
272: 1:      'question': '0, 1, 1',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'false',
272: 1:      'question': '0, 0, 2',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'true',
272: 1:      'question': '2, 0, 2',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'false',
272: 1:      'question': '0, 1, 2',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'false',
272: 1:      'question': '1, 1, 2',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'false',
272: 1:      'question': '2, 1, 3',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'false',
272: 1:      'question': '3, 1, 4',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'true',
272: 1:      'question': '2, 1, 1',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'true',
272: 1:      'question': '2, 2, 6',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'true',
272: 1:      'question': '6, 1, 11',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'true',
272: 1:      'question': '5, 0, 1',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'true',
272: 1:      'question': '3, 1, 8',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'true',
272: 1:      'question': '3, 2, 10',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'true',
272: 1:      'question': '3, 2, 8',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'false',
272: 1:      'question': '6, 0, 11',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'true',
272: 1:      'question': '1, 4, 11',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'true',
272: 1:      'question': '0, 3, 10',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'false',
272: 1:      'question': '1, 4, 12',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'false',
272: 1:      'question': '1, 1, 7',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'true',
272: 1:      'question': '2, 1, 7',
272: 1:      'valid': true
272: 1:    }
272: 1:  ],
272: 1:  'level': 10,
272: 1:  'nextQuestion': '7, 1, 11',
272: 1:  'questions': [
272: 1:    '0, 1, 5',
272: 1:    '1, 0, 1',
272: 1:    '1, 0, 2',
272: 1:    '3, 1, 7',
272: 1:    '4, 2, 14',
272: 1:    '3, 2, 14',
272: 1:    '0, 2, 5',
272: 1:    '3, 1, 6',
272: 1:    '3, 1, 9',
272: 1:    '3, 2, 9',
272: 1:    '10, 10, 0',
272: 1:    '0, 0, 1',
272: 1:    '0, 1, 1',
272: 1:    '0, 0, 2',
272: 1:    '2, 0, 2',
272: 1:    '0, 1, 2',
272: 1:    '1, 1, 2',
272: 1:    '2, 1, 3',
272: 1:    '3, 1, 4',
272: 1:    '2, 1, 1',
272: 1:    '2, 2, 6',
272: 1:    '6, 1, 11',
272: 1:    '5, 0, 1',
272: 1:    '3, 1, 8',
272: 1:    '3, 2, 10',
272: 1:    '3, 2, 8',
272: 1:    '6, 0, 11',
272: 1:    '1, 4, 11',
272: 1:    '0, 3, 10',
272: 1:    '1, 4, 12',
272: 1:    '1, 1, 7',
272: 1:    '2, 1, 7',
272: 1:    '7, 1, 11'
272: 1:  ]
272: 1:}
272: 1:Scores: 20612
272: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true']')
272: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
273: 1:BoardData {
273: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
273: 1:  'expectedAnswer': 'true',
273: 1:  'history': [
273: 1:    {
273: 1:      'answer': 'true',
273: 1:      'question': '0, 1, 5',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'true',
273: 1:      'question': '1, 0, 1',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'false',
273: 1:      'question': '1, 0, 2',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'true',
273: 1:      'question': '3, 1, 7',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'true',
273: 1:      'question': '4, 2, 14',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'false',
273: 1:      'question': '3, 2, 14',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'true',
273: 1:      'question': '0, 2, 5',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'true',
273: 1:      'question': '3, 1, 6',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'false',
273: 1:      'question': '3, 1, 9',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'false',
273: 1:      'question': '3, 2, 9',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'true',
273: 1:      'question': '10, 10, 0',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'false',
273: 1:      'question': '0, 0, 1',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'false',
273: 1:      'question': '0, 1, 1',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'false',
273: 1:      'question': '0, 0, 2',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'true',
273: 1:      'question': '2, 0, 2',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'false',
273: 1:      'question': '0, 1, 2',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'false',
273: 1:      'question': '1, 1, 2',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'false',
273: 1:      'question': '2, 1, 3',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'false',
273: 1:      'question': '3, 1, 4',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'true',
273: 1:      'question': '2, 1, 1',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'true',
273: 1:      'question': '2, 2, 6',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'true',
273: 1:      'question': '6, 1, 11',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'true',
273: 1:      'question': '5, 0, 1',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'true',
273: 1:      'question': '3, 1, 8',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'true',
273: 1:      'question': '3, 2, 10',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'true',
273: 1:      'question': '3, 2, 8',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'false',
273: 1:      'question': '6, 0, 11',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'true',
273: 1:      'question': '1, 4, 11',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'true',
273: 1:      'question': '0, 3, 10',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'false',
273: 1:      'question': '1, 4, 12',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'false',
273: 1:      'question': '1, 1, 7',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'true',
273: 1:      'question': '2, 1, 7',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'true',
273: 1:      'question': '7, 1, 11',
273: 1:      'valid': true
273: 1:    }
273: 1:  ],
273: 1:  'level': 10,
273: 1:  'nextQuestion': '7, 1, 8',
273: 1:  'questions': [
273: 1:    '0, 1, 5',
273: 1:    '1, 0, 1',
273: 1:    '1, 0, 2',
273: 1:    '3, 1, 7',
273: 1:    '4, 2, 14',
273: 1:    '3, 2, 14',
273: 1:    '0, 2, 5',
273: 1:    '3, 1, 6',
273: 1:    '3, 1, 9',
273: 1:    '3, 2, 9',
273: 1:    '10, 10, 0',
273: 1:    '0, 0, 1',
273: 1:    '0, 1, 1',
273: 1:    '0, 0, 2',
273: 1:    '2, 0, 2',
273: 1:    '0, 1, 2',
273: 1:    '1, 1, 2',
273: 1:    '2, 1, 3',
273: 1:    '3, 1, 4',
273: 1:    '2, 1, 1',
273: 1:    '2, 2, 6',
273: 1:    '6, 1, 11',
273: 1:    '5, 0, 1',
273: 1:    '3, 1, 8',
273: 1:    '3, 2, 10',
273: 1:    '3, 2, 8',
273: 1:    '6, 0, 11',
273: 1:    '1, 4, 11',
273: 1:    '0, 3, 10',
273: 1:    '1, 4, 12',
273: 1:    '1, 1, 7',
273: 1:    '2, 1, 7',
273: 1:    '7, 1, 11',
273: 1:    '7, 1, 8'
273: 1:  ]
273: 1:}
273: 1:Scores: 20619
273: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true']')
273: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
274: 1:BoardData {
274: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
274: 1:  'expectedAnswer': 'false',
274: 1:  'history': [
274: 1:    {
274: 1:      'answer': 'true',
274: 1:      'question': '0, 1, 5',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'true',
274: 1:      'question': '1, 0, 1',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'false',
274: 1:      'question': '1, 0, 2',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'true',
274: 1:      'question': '3, 1, 7',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'true',
274: 1:      'question': '4, 2, 14',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'false',
274: 1:      'question': '3, 2, 14',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'true',
274: 1:      'question': '0, 2, 5',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'true',
274: 1:      'question': '3, 1, 6',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'false',
274: 1:      'question': '3, 1, 9',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'false',
274: 1:      'question': '3, 2, 9',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'true',
274: 1:      'question': '10, 10, 0',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'false',
274: 1:      'question': '0, 0, 1',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'false',
274: 1:      'question': '0, 1, 1',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'false',
274: 1:      'question': '0, 0, 2',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'true',
274: 1:      'question': '2, 0, 2',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'false',
274: 1:      'question': '0, 1, 2',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'false',
274: 1:      'question': '1, 1, 2',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'false',
274: 1:      'question': '2, 1, 3',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'false',
274: 1:      'question': '3, 1, 4',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'true',
274: 1:      'question': '2, 1, 1',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'true',
274: 1:      'question': '2, 2, 6',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'true',
274: 1:      'question': '6, 1, 11',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'true',
274: 1:      'question': '5, 0, 1',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'true',
274: 1:      'question': '3, 1, 8',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'true',
274: 1:      'question': '3, 2, 10',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'true',
274: 1:      'question': '3, 2, 8',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'false',
274: 1:      'question': '6, 0, 11',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'true',
274: 1:      'question': '1, 4, 11',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'true',
274: 1:      'question': '0, 3, 10',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'false',
274: 1:      'question': '1, 4, 12',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'false',
274: 1:      'question': '1, 1, 7',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'true',
274: 1:      'question': '2, 1, 7',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'true',
274: 1:      'question': '7, 1, 11',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'true',
274: 1:      'question': '7, 1, 8',
274: 1:      'valid': true
274: 1:    }
274: 1:  ],
274: 1:  'level': 10,
274: 1:  'nextQuestion': '7, 1, 13',
274: 1:  'questions': [
274: 1:    '0, 1, 5',
274: 1:    '1, 0, 1',
274: 1:    '1, 0, 2',
274: 1:    '3, 1, 7',
274: 1:    '4, 2, 14',
274: 1:    '3, 2, 14',
274: 1:    '0, 2, 5',
274: 1:    '3, 1, 6',
274: 1:    '3, 1, 9',
274: 1:    '3, 2, 9',
274: 1:    '10, 10, 0',
274: 1:    '0, 0, 1',
274: 1:    '0, 1, 1',
274: 1:    '0, 0, 2',
274: 1:    '2, 0, 2',
274: 1:    '0, 1, 2',
274: 1:    '1, 1, 2',
274: 1:    '2, 1, 3',
274: 1:    '3, 1, 4',
274: 1:    '2, 1, 1',
274: 1:    '2, 2, 6',
274: 1:    '6, 1, 11',
274: 1:    '5, 0, 1',
274: 1:    '3, 1, 8',
274: 1:    '3, 2, 10',
274: 1:    '3, 2, 8',
274: 1:    '6, 0, 11',
274: 1:    '1, 4, 11',
274: 1:    '0, 3, 10',
274: 1:    '1, 4, 12',
274: 1:    '1, 1, 7',
274: 1:    '2, 1, 7',
274: 1:    '7, 1, 11',
274: 1:    '7, 1, 8',
274: 1:    '7, 1, 13'
274: 1:  ]
274: 1:}
274: 1:Scores: 20626
274: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false']')
274: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
275: 1:BoardData {
275: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
275: 1:  'expectedAnswer': 'true',
275: 1:  'history': [
275: 1:    {
275: 1:      'answer': 'true',
275: 1:      'question': '0, 1, 5',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'true',
275: 1:      'question': '1, 0, 1',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'false',
275: 1:      'question': '1, 0, 2',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'true',
275: 1:      'question': '3, 1, 7',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'true',
275: 1:      'question': '4, 2, 14',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'false',
275: 1:      'question': '3, 2, 14',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'true',
275: 1:      'question': '0, 2, 5',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'true',
275: 1:      'question': '3, 1, 6',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'false',
275: 1:      'question': '3, 1, 9',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'false',
275: 1:      'question': '3, 2, 9',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'true',
275: 1:      'question': '10, 10, 0',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'false',
275: 1:      'question': '0, 0, 1',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'false',
275: 1:      'question': '0, 1, 1',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'false',
275: 1:      'question': '0, 0, 2',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'true',
275: 1:      'question': '2, 0, 2',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'false',
275: 1:      'question': '0, 1, 2',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'false',
275: 1:      'question': '1, 1, 2',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'false',
275: 1:      'question': '2, 1, 3',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'false',
275: 1:      'question': '3, 1, 4',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'true',
275: 1:      'question': '2, 1, 1',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'true',
275: 1:      'question': '2, 2, 6',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'true',
275: 1:      'question': '6, 1, 11',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'true',
275: 1:      'question': '5, 0, 1',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'true',
275: 1:      'question': '3, 1, 8',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'true',
275: 1:      'question': '3, 2, 10',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'true',
275: 1:      'question': '3, 2, 8',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'false',
275: 1:      'question': '6, 0, 11',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'true',
275: 1:      'question': '1, 4, 11',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'true',
275: 1:      'question': '0, 3, 10',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'false',
275: 1:      'question': '1, 4, 12',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'false',
275: 1:      'question': '1, 1, 7',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'true',
275: 1:      'question': '2, 1, 7',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'true',
275: 1:      'question': '7, 1, 11',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'true',
275: 1:      'question': '7, 1, 8',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'false',
275: 1:      'question': '7, 1, 13',
275: 1:      'valid': true
275: 1:    }
275: 1:  ],
275: 1:  'level': 10,
275: 1:  'nextQuestion': '43, 1, 46',
275: 1:  'questions': [
275: 1:    '0, 1, 5',
275: 1:    '1, 0, 1',
275: 1:    '1, 0, 2',
275: 1:    '3, 1, 7',
275: 1:    '4, 2, 14',
275: 1:    '3, 2, 14',
275: 1:    '0, 2, 5',
275: 1:    '3, 1, 6',
275: 1:    '3, 1, 9',
275: 1:    '3, 2, 9',
275: 1:    '10, 10, 0',
275: 1:    '0, 0, 1',
275: 1:    '0, 1, 1',
275: 1:    '0, 0, 2',
275: 1:    '2, 0, 2',
275: 1:    '0, 1, 2',
275: 1:    '1, 1, 2',
275: 1:    '2, 1, 3',
275: 1:    '3, 1, 4',
275: 1:    '2, 1, 1',
275: 1:    '2, 2, 6',
275: 1:    '6, 1, 11',
275: 1:    '5, 0, 1',
275: 1:    '3, 1, 8',
275: 1:    '3, 2, 10',
275: 1:    '3, 2, 8',
275: 1:    '6, 0, 11',
275: 1:    '1, 4, 11',
275: 1:    '0, 3, 10',
275: 1:    '1, 4, 12',
275: 1:    '1, 1, 7',
275: 1:    '2, 1, 7',
275: 1:    '7, 1, 11',
275: 1:    '7, 1, 8',
275: 1:    '7, 1, 13',
275: 1:    '43, 1, 46'
275: 1:  ]
275: 1:}
275: 1:Scores: 20633
275: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true']')
275: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
276: 1:BoardData {
276: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
276: 1:  'expectedAnswer': 'false',
276: 1:  'history': [
276: 1:    {
276: 1:      'answer': 'true',
276: 1:      'question': '0, 1, 5',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'true',
276: 1:      'question': '1, 0, 1',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'false',
276: 1:      'question': '1, 0, 2',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'true',
276: 1:      'question': '3, 1, 7',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'true',
276: 1:      'question': '4, 2, 14',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'false',
276: 1:      'question': '3, 2, 14',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'true',
276: 1:      'question': '0, 2, 5',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'true',
276: 1:      'question': '3, 1, 6',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'false',
276: 1:      'question': '3, 1, 9',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'false',
276: 1:      'question': '3, 2, 9',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'true',
276: 1:      'question': '10, 10, 0',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'false',
276: 1:      'question': '0, 0, 1',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'false',
276: 1:      'question': '0, 1, 1',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'false',
276: 1:      'question': '0, 0, 2',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'true',
276: 1:      'question': '2, 0, 2',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'false',
276: 1:      'question': '0, 1, 2',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'false',
276: 1:      'question': '1, 1, 2',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'false',
276: 1:      'question': '2, 1, 3',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'false',
276: 1:      'question': '3, 1, 4',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'true',
276: 1:      'question': '2, 1, 1',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'true',
276: 1:      'question': '2, 2, 6',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'true',
276: 1:      'question': '6, 1, 11',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'true',
276: 1:      'question': '5, 0, 1',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'true',
276: 1:      'question': '3, 1, 8',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'true',
276: 1:      'question': '3, 2, 10',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'true',
276: 1:      'question': '3, 2, 8',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'false',
276: 1:      'question': '6, 0, 11',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'true',
276: 1:      'question': '1, 4, 11',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'true',
276: 1:      'question': '0, 3, 10',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'false',
276: 1:      'question': '1, 4, 12',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'false',
276: 1:      'question': '1, 1, 7',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'true',
276: 1:      'question': '2, 1, 7',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'true',
276: 1:      'question': '7, 1, 11',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'true',
276: 1:      'question': '7, 1, 8',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'false',
276: 1:      'question': '7, 1, 13',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'true',
276: 1:      'question': '43, 1, 46',
276: 1:      'valid': true
276: 1:    }
276: 1:  ],
276: 1:  'level': 10,
276: 1:  'nextQuestion': '40, 1, 46',
276: 1:  'questions': [
276: 1:    '0, 1, 5',
276: 1:    '1, 0, 1',
276: 1:    '1, 0, 2',
276: 1:    '3, 1, 7',
276: 1:    '4, 2, 14',
276: 1:    '3, 2, 14',
276: 1:    '0, 2, 5',
276: 1:    '3, 1, 6',
276: 1:    '3, 1, 9',
276: 1:    '3, 2, 9',
276: 1:    '10, 10, 0',
276: 1:    '0, 0, 1',
276: 1:    '0, 1, 1',
276: 1:    '0, 0, 2',
276: 1:    '2, 0, 2',
276: 1:    '0, 1, 2',
276: 1:    '1, 1, 2',
276: 1:    '2, 1, 3',
276: 1:    '3, 1, 4',
276: 1:    '2, 1, 1',
276: 1:    '2, 2, 6',
276: 1:    '6, 1, 11',
276: 1:    '5, 0, 1',
276: 1:    '3, 1, 8',
276: 1:    '3, 2, 10',
276: 1:    '3, 2, 8',
276: 1:    '6, 0, 11',
276: 1:    '1, 4, 11',
276: 1:    '0, 3, 10',
276: 1:    '1, 4, 12',
276: 1:    '1, 1, 7',
276: 1:    '2, 1, 7',
276: 1:    '7, 1, 11',
276: 1:    '7, 1, 8',
276: 1:    '7, 1, 13',
276: 1:    '43, 1, 46',
276: 1:    '40, 1, 46'
276: 1:  ]
276: 1:}
276: 1:Scores: 20640
276: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false']')
276: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
277: 1:BoardData {
277: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
277: 1:  'expectedAnswer': 'true',
277: 1:  'history': [
277: 1:    {
277: 1:      'answer': 'true',
277: 1:      'question': '0, 1, 5',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'true',
277: 1:      'question': '1, 0, 1',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'false',
277: 1:      'question': '1, 0, 2',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'true',
277: 1:      'question': '3, 1, 7',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'true',
277: 1:      'question': '4, 2, 14',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'false',
277: 1:      'question': '3, 2, 14',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'true',
277: 1:      'question': '0, 2, 5',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'true',
277: 1:      'question': '3, 1, 6',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'false',
277: 1:      'question': '3, 1, 9',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'false',
277: 1:      'question': '3, 2, 9',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'true',
277: 1:      'question': '10, 10, 0',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'false',
277: 1:      'question': '0, 0, 1',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'false',
277: 1:      'question': '0, 1, 1',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'false',
277: 1:      'question': '0, 0, 2',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'true',
277: 1:      'question': '2, 0, 2',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'false',
277: 1:      'question': '0, 1, 2',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'false',
277: 1:      'question': '1, 1, 2',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'false',
277: 1:      'question': '2, 1, 3',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'false',
277: 1:      'question': '3, 1, 4',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'true',
277: 1:      'question': '2, 1, 1',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'true',
277: 1:      'question': '2, 2, 6',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'true',
277: 1:      'question': '6, 1, 11',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'true',
277: 1:      'question': '5, 0, 1',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'true',
277: 1:      'question': '3, 1, 8',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'true',
277: 1:      'question': '3, 2, 10',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'true',
277: 1:      'question': '3, 2, 8',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'false',
277: 1:      'question': '6, 0, 11',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'true',
277: 1:      'question': '1, 4, 11',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'true',
277: 1:      'question': '0, 3, 10',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'false',
277: 1:      'question': '1, 4, 12',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'false',
277: 1:      'question': '1, 1, 7',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'true',
277: 1:      'question': '2, 1, 7',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'true',
277: 1:      'question': '7, 1, 11',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'true',
277: 1:      'question': '7, 1, 8',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'false',
277: 1:      'question': '7, 1, 13',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'true',
277: 1:      'question': '43, 1, 46',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'false',
277: 1:      'question': '40, 1, 46',
277: 1:      'valid': true
277: 1:    }
277: 1:  ],
277: 1:  'level': 10,
277: 1:  'nextQuestion': '40, 2, 47',
277: 1:  'questions': [
277: 1:    '0, 1, 5',
277: 1:    '1, 0, 1',
277: 1:    '1, 0, 2',
277: 1:    '3, 1, 7',
277: 1:    '4, 2, 14',
277: 1:    '3, 2, 14',
277: 1:    '0, 2, 5',
277: 1:    '3, 1, 6',
277: 1:    '3, 1, 9',
277: 1:    '3, 2, 9',
277: 1:    '10, 10, 0',
277: 1:    '0, 0, 1',
277: 1:    '0, 1, 1',
277: 1:    '0, 0, 2',
277: 1:    '2, 0, 2',
277: 1:    '0, 1, 2',
277: 1:    '1, 1, 2',
277: 1:    '2, 1, 3',
277: 1:    '3, 1, 4',
277: 1:    '2, 1, 1',
277: 1:    '2, 2, 6',
277: 1:    '6, 1, 11',
277: 1:    '5, 0, 1',
277: 1:    '3, 1, 8',
277: 1:    '3, 2, 10',
277: 1:    '3, 2, 8',
277: 1:    '6, 0, 11',
277: 1:    '1, 4, 11',
277: 1:    '0, 3, 10',
277: 1:    '1, 4, 12',
277: 1:    '1, 1, 7',
277: 1:    '2, 1, 7',
277: 1:    '7, 1, 11',
277: 1:    '7, 1, 8',
277: 1:    '7, 1, 13',
277: 1:    '43, 1, 46',
277: 1:    '40, 1, 46',
277: 1:    '40, 2, 47'
277: 1:  ]
277: 1:}
277: 1:Scores: 20647
277: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true']')
277: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
278: 1:BoardData {
278: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
278: 1:  'expectedAnswer': 'true',
278: 1:  'history': [
278: 1:    {
278: 1:      'answer': 'true',
278: 1:      'question': '0, 1, 5',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'true',
278: 1:      'question': '1, 0, 1',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'false',
278: 1:      'question': '1, 0, 2',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'true',
278: 1:      'question': '3, 1, 7',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'true',
278: 1:      'question': '4, 2, 14',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'false',
278: 1:      'question': '3, 2, 14',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'true',
278: 1:      'question': '0, 2, 5',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'true',
278: 1:      'question': '3, 1, 6',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'false',
278: 1:      'question': '3, 1, 9',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'false',
278: 1:      'question': '3, 2, 9',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'true',
278: 1:      'question': '10, 10, 0',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'false',
278: 1:      'question': '0, 0, 1',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'false',
278: 1:      'question': '0, 1, 1',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'false',
278: 1:      'question': '0, 0, 2',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'true',
278: 1:      'question': '2, 0, 2',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'false',
278: 1:      'question': '0, 1, 2',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'false',
278: 1:      'question': '1, 1, 2',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'false',
278: 1:      'question': '2, 1, 3',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'false',
278: 1:      'question': '3, 1, 4',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'true',
278: 1:      'question': '2, 1, 1',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'true',
278: 1:      'question': '2, 2, 6',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'true',
278: 1:      'question': '6, 1, 11',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'true',
278: 1:      'question': '5, 0, 1',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'true',
278: 1:      'question': '3, 1, 8',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'true',
278: 1:      'question': '3, 2, 10',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'true',
278: 1:      'question': '3, 2, 8',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'false',
278: 1:      'question': '6, 0, 11',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'true',
278: 1:      'question': '1, 4, 11',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'true',
278: 1:      'question': '0, 3, 10',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'false',
278: 1:      'question': '1, 4, 12',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'false',
278: 1:      'question': '1, 1, 7',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'true',
278: 1:      'question': '2, 1, 7',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'true',
278: 1:      'question': '7, 1, 11',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'true',
278: 1:      'question': '7, 1, 8',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'false',
278: 1:      'question': '7, 1, 13',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'true',
278: 1:      'question': '43, 1, 46',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'false',
278: 1:      'question': '40, 1, 46',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'true',
278: 1:      'question': '40, 2, 47',
278: 1:      'valid': true
278: 1:    }
278: 1:  ],
278: 1:  'level': 10,
278: 1:  'nextQuestion': '40, 2, 50',
278: 1:  'questions': [
278: 1:    '0, 1, 5',
278: 1:    '1, 0, 1',
278: 1:    '1, 0, 2',
278: 1:    '3, 1, 7',
278: 1:    '4, 2, 14',
278: 1:    '3, 2, 14',
278: 1:    '0, 2, 5',
278: 1:    '3, 1, 6',
278: 1:    '3, 1, 9',
278: 1:    '3, 2, 9',
278: 1:    '10, 10, 0',
278: 1:    '0, 0, 1',
278: 1:    '0, 1, 1',
278: 1:    '0, 0, 2',
278: 1:    '2, 0, 2',
278: 1:    '0, 1, 2',
278: 1:    '1, 1, 2',
278: 1:    '2, 1, 3',
278: 1:    '3, 1, 4',
278: 1:    '2, 1, 1',
278: 1:    '2, 2, 6',
278: 1:    '6, 1, 11',
278: 1:    '5, 0, 1',
278: 1:    '3, 1, 8',
278: 1:    '3, 2, 10',
278: 1:    '3, 2, 8',
278: 1:    '6, 0, 11',
278: 1:    '1, 4, 11',
278: 1:    '0, 3, 10',
278: 1:    '1, 4, 12',
278: 1:    '1, 1, 7',
278: 1:    '2, 1, 7',
278: 1:    '7, 1, 11',
278: 1:    '7, 1, 8',
278: 1:    '7, 1, 13',
278: 1:    '43, 1, 46',
278: 1:    '40, 1, 46',
278: 1:    '40, 2, 47',
278: 1:    '40, 2, 50'
278: 1:  ]
278: 1:}
278: 1:Scores: 20654
278: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true']')
278: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
279: 1:BoardData {
279: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
279: 1:  'expectedAnswer': 'false',
279: 1:  'history': [
279: 1:    {
279: 1:      'answer': 'true',
279: 1:      'question': '0, 1, 5',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'true',
279: 1:      'question': '1, 0, 1',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'false',
279: 1:      'question': '1, 0, 2',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'true',
279: 1:      'question': '3, 1, 7',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'true',
279: 1:      'question': '4, 2, 14',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'false',
279: 1:      'question': '3, 2, 14',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'true',
279: 1:      'question': '0, 2, 5',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'true',
279: 1:      'question': '3, 1, 6',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'false',
279: 1:      'question': '3, 1, 9',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'false',
279: 1:      'question': '3, 2, 9',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'true',
279: 1:      'question': '10, 10, 0',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'false',
279: 1:      'question': '0, 0, 1',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'false',
279: 1:      'question': '0, 1, 1',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'false',
279: 1:      'question': '0, 0, 2',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'true',
279: 1:      'question': '2, 0, 2',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'false',
279: 1:      'question': '0, 1, 2',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'false',
279: 1:      'question': '1, 1, 2',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'false',
279: 1:      'question': '2, 1, 3',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'false',
279: 1:      'question': '3, 1, 4',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'true',
279: 1:      'question': '2, 1, 1',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'true',
279: 1:      'question': '2, 2, 6',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'true',
279: 1:      'question': '6, 1, 11',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'true',
279: 1:      'question': '5, 0, 1',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'true',
279: 1:      'question': '3, 1, 8',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'true',
279: 1:      'question': '3, 2, 10',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'true',
279: 1:      'question': '3, 2, 8',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'false',
279: 1:      'question': '6, 0, 11',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'true',
279: 1:      'question': '1, 4, 11',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'true',
279: 1:      'question': '0, 3, 10',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'false',
279: 1:      'question': '1, 4, 12',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'false',
279: 1:      'question': '1, 1, 7',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'true',
279: 1:      'question': '2, 1, 7',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'true',
279: 1:      'question': '7, 1, 11',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'true',
279: 1:      'question': '7, 1, 8',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'false',
279: 1:      'question': '7, 1, 13',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'true',
279: 1:      'question': '43, 1, 46',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'false',
279: 1:      'question': '40, 1, 46',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'true',
279: 1:      'question': '40, 2, 47',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'true',
279: 1:      'question': '40, 2, 50',
279: 1:      'valid': true
279: 1:    }
279: 1:  ],
279: 1:  'level': 10,
279: 1:  'nextQuestion': '40, 2, 52',
279: 1:  'questions': [
279: 1:    '0, 1, 5',
279: 1:    '1, 0, 1',
279: 1:    '1, 0, 2',
279: 1:    '3, 1, 7',
279: 1:    '4, 2, 14',
279: 1:    '3, 2, 14',
279: 1:    '0, 2, 5',
279: 1:    '3, 1, 6',
279: 1:    '3, 1, 9',
279: 1:    '3, 2, 9',
279: 1:    '10, 10, 0',
279: 1:    '0, 0, 1',
279: 1:    '0, 1, 1',
279: 1:    '0, 0, 2',
279: 1:    '2, 0, 2',
279: 1:    '0, 1, 2',
279: 1:    '1, 1, 2',
279: 1:    '2, 1, 3',
279: 1:    '3, 1, 4',
279: 1:    '2, 1, 1',
279: 1:    '2, 2, 6',
279: 1:    '6, 1, 11',
279: 1:    '5, 0, 1',
279: 1:    '3, 1, 8',
279: 1:    '3, 2, 10',
279: 1:    '3, 2, 8',
279: 1:    '6, 0, 11',
279: 1:    '1, 4, 11',
279: 1:    '0, 3, 10',
279: 1:    '1, 4, 12',
279: 1:    '1, 1, 7',
279: 1:    '2, 1, 7',
279: 1:    '7, 1, 11',
279: 1:    '7, 1, 8',
279: 1:    '7, 1, 13',
279: 1:    '43, 1, 46',
279: 1:    '40, 1, 46',
279: 1:    '40, 2, 47',
279: 1:    '40, 2, 50',
279: 1:    '40, 2, 52'
279: 1:  ]
279: 1:}
279: 1:Scores: 20661
279: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true', 'false']')
279: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
280: 1:BoardData {
280: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
280: 1:  'expectedAnswer': 'false',
280: 1:  'history': [
280: 1:    {
280: 1:      'answer': 'true',
280: 1:      'question': '0, 1, 5',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'true',
280: 1:      'question': '1, 0, 1',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'false',
280: 1:      'question': '1, 0, 2',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'true',
280: 1:      'question': '3, 1, 7',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'true',
280: 1:      'question': '4, 2, 14',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'false',
280: 1:      'question': '3, 2, 14',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'true',
280: 1:      'question': '0, 2, 5',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'true',
280: 1:      'question': '3, 1, 6',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'false',
280: 1:      'question': '3, 1, 9',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'false',
280: 1:      'question': '3, 2, 9',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'true',
280: 1:      'question': '10, 10, 0',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'false',
280: 1:      'question': '0, 0, 1',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'false',
280: 1:      'question': '0, 1, 1',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'false',
280: 1:      'question': '0, 0, 2',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'true',
280: 1:      'question': '2, 0, 2',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'false',
280: 1:      'question': '0, 1, 2',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'false',
280: 1:      'question': '1, 1, 2',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'false',
280: 1:      'question': '2, 1, 3',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'false',
280: 1:      'question': '3, 1, 4',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'true',
280: 1:      'question': '2, 1, 1',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'true',
280: 1:      'question': '2, 2, 6',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'true',
280: 1:      'question': '6, 1, 11',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'true',
280: 1:      'question': '5, 0, 1',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'true',
280: 1:      'question': '3, 1, 8',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'true',
280: 1:      'question': '3, 2, 10',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'true',
280: 1:      'question': '3, 2, 8',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'false',
280: 1:      'question': '6, 0, 11',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'true',
280: 1:      'question': '1, 4, 11',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'true',
280: 1:      'question': '0, 3, 10',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'false',
280: 1:      'question': '1, 4, 12',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'false',
280: 1:      'question': '1, 1, 7',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'true',
280: 1:      'question': '2, 1, 7',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'true',
280: 1:      'question': '7, 1, 11',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'true',
280: 1:      'question': '7, 1, 8',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'false',
280: 1:      'question': '7, 1, 13',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'true',
280: 1:      'question': '43, 1, 46',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'false',
280: 1:      'question': '40, 1, 46',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'true',
280: 1:      'question': '40, 2, 47',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'true',
280: 1:      'question': '40, 2, 50',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'false',
280: 1:      'question': '40, 2, 52',
280: 1:      'valid': true
280: 1:    }
280: 1:  ],
280: 1:  'level': 10,
280: 1:  'nextQuestion': '22, 2, 33',
280: 1:  'questions': [
280: 1:    '0, 1, 5',
280: 1:    '1, 0, 1',
280: 1:    '1, 0, 2',
280: 1:    '3, 1, 7',
280: 1:    '4, 2, 14',
280: 1:    '3, 2, 14',
280: 1:    '0, 2, 5',
280: 1:    '3, 1, 6',
280: 1:    '3, 1, 9',
280: 1:    '3, 2, 9',
280: 1:    '10, 10, 0',
280: 1:    '0, 0, 1',
280: 1:    '0, 1, 1',
280: 1:    '0, 0, 2',
280: 1:    '2, 0, 2',
280: 1:    '0, 1, 2',
280: 1:    '1, 1, 2',
280: 1:    '2, 1, 3',
280: 1:    '3, 1, 4',
280: 1:    '2, 1, 1',
280: 1:    '2, 2, 6',
280: 1:    '6, 1, 11',
280: 1:    '5, 0, 1',
280: 1:    '3, 1, 8',
280: 1:    '3, 2, 10',
280: 1:    '3, 2, 8',
280: 1:    '6, 0, 11',
280: 1:    '1, 4, 11',
280: 1:    '0, 3, 10',
280: 1:    '1, 4, 12',
280: 1:    '1, 1, 7',
280: 1:    '2, 1, 7',
280: 1:    '7, 1, 11',
280: 1:    '7, 1, 8',
280: 1:    '7, 1, 13',
280: 1:    '43, 1, 46',
280: 1:    '40, 1, 46',
280: 1:    '40, 2, 47',
280: 1:    '40, 2, 50',
280: 1:    '40, 2, 52',
280: 1:    '22, 2, 33'
280: 1:  ]
280: 1:}
280: 1:Scores: 20668
280: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true', 'false', 'false']')
280: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
281: 1:BoardData {
281: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
281: 1:  'expectedAnswer': 'true',
281: 1:  'history': [
281: 1:    {
281: 1:      'answer': 'true',
281: 1:      'question': '0, 1, 5',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'true',
281: 1:      'question': '1, 0, 1',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'false',
281: 1:      'question': '1, 0, 2',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'true',
281: 1:      'question': '3, 1, 7',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'true',
281: 1:      'question': '4, 2, 14',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'false',
281: 1:      'question': '3, 2, 14',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'true',
281: 1:      'question': '0, 2, 5',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'true',
281: 1:      'question': '3, 1, 6',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'false',
281: 1:      'question': '3, 1, 9',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'false',
281: 1:      'question': '3, 2, 9',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'true',
281: 1:      'question': '10, 10, 0',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'false',
281: 1:      'question': '0, 0, 1',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'false',
281: 1:      'question': '0, 1, 1',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'false',
281: 1:      'question': '0, 0, 2',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'true',
281: 1:      'question': '2, 0, 2',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'false',
281: 1:      'question': '0, 1, 2',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'false',
281: 1:      'question': '1, 1, 2',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'false',
281: 1:      'question': '2, 1, 3',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'false',
281: 1:      'question': '3, 1, 4',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'true',
281: 1:      'question': '2, 1, 1',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'true',
281: 1:      'question': '2, 2, 6',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'true',
281: 1:      'question': '6, 1, 11',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'true',
281: 1:      'question': '5, 0, 1',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'true',
281: 1:      'question': '3, 1, 8',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'true',
281: 1:      'question': '3, 2, 10',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'true',
281: 1:      'question': '3, 2, 8',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'false',
281: 1:      'question': '6, 0, 11',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'true',
281: 1:      'question': '1, 4, 11',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'true',
281: 1:      'question': '0, 3, 10',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'false',
281: 1:      'question': '1, 4, 12',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'false',
281: 1:      'question': '1, 1, 7',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'true',
281: 1:      'question': '2, 1, 7',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'true',
281: 1:      'question': '7, 1, 11',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'true',
281: 1:      'question': '7, 1, 8',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'false',
281: 1:      'question': '7, 1, 13',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'true',
281: 1:      'question': '43, 1, 46',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'false',
281: 1:      'question': '40, 1, 46',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'true',
281: 1:      'question': '40, 2, 47',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'true',
281: 1:      'question': '40, 2, 50',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'false',
281: 1:      'question': '40, 2, 52',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'false',
281: 1:      'question': '22, 2, 33',
281: 1:      'valid': true
281: 1:    }
281: 1:  ],
281: 1:  'level': 10,
281: 1:  'nextQuestion': '0, 2, 10',
281: 1:  'questions': [
281: 1:    '0, 1, 5',
281: 1:    '1, 0, 1',
281: 1:    '1, 0, 2',
281: 1:    '3, 1, 7',
281: 1:    '4, 2, 14',
281: 1:    '3, 2, 14',
281: 1:    '0, 2, 5',
281: 1:    '3, 1, 6',
281: 1:    '3, 1, 9',
281: 1:    '3, 2, 9',
281: 1:    '10, 10, 0',
281: 1:    '0, 0, 1',
281: 1:    '0, 1, 1',
281: 1:    '0, 0, 2',
281: 1:    '2, 0, 2',
281: 1:    '0, 1, 2',
281: 1:    '1, 1, 2',
281: 1:    '2, 1, 3',
281: 1:    '3, 1, 4',
281: 1:    '2, 1, 1',
281: 1:    '2, 2, 6',
281: 1:    '6, 1, 11',
281: 1:    '5, 0, 1',
281: 1:    '3, 1, 8',
281: 1:    '3, 2, 10',
281: 1:    '3, 2, 8',
281: 1:    '6, 0, 11',
281: 1:    '1, 4, 11',
281: 1:    '0, 3, 10',
281: 1:    '1, 4, 12',
281: 1:    '1, 1, 7',
281: 1:    '2, 1, 7',
281: 1:    '7, 1, 11',
281: 1:    '7, 1, 8',
281: 1:    '7, 1, 13',
281: 1:    '43, 1, 46',
281: 1:    '40, 1, 46',
281: 1:    '40, 2, 47',
281: 1:    '40, 2, 50',
281: 1:    '40, 2, 52',
281: 1:    '22, 2, 33',
281: 1:    '0, 2, 10'
281: 1:  ]
281: 1:}
281: 1:Scores: 20675
281: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true', 'false', 'false', 'true']')
281: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
282: 1:BoardData {
282: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
282: 1:  'expectedAnswer': 'true',
282: 1:  'history': [
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': '0, 1, 5',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': '1, 0, 1',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'false',
282: 1:      'question': '1, 0, 2',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': '3, 1, 7',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': '4, 2, 14',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'false',
282: 1:      'question': '3, 2, 14',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': '0, 2, 5',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': '3, 1, 6',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'false',
282: 1:      'question': '3, 1, 9',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'false',
282: 1:      'question': '3, 2, 9',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': '10, 10, 0',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'false',
282: 1:      'question': '0, 0, 1',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'false',
282: 1:      'question': '0, 1, 1',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'false',
282: 1:      'question': '0, 0, 2',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': '2, 0, 2',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'false',
282: 1:      'question': '0, 1, 2',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'false',
282: 1:      'question': '1, 1, 2',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'false',
282: 1:      'question': '2, 1, 3',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'false',
282: 1:      'question': '3, 1, 4',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': '2, 1, 1',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': '2, 2, 6',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': '6, 1, 11',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': '5, 0, 1',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': '3, 1, 8',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': '3, 2, 10',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': '3, 2, 8',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'false',
282: 1:      'question': '6, 0, 11',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': '1, 4, 11',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': '0, 3, 10',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'false',
282: 1:      'question': '1, 4, 12',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'false',
282: 1:      'question': '1, 1, 7',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': '2, 1, 7',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': '7, 1, 11',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': '7, 1, 8',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'false',
282: 1:      'question': '7, 1, 13',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': '43, 1, 46',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'false',
282: 1:      'question': '40, 1, 46',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': '40, 2, 47',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': '40, 2, 50',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'false',
282: 1:      'question': '40, 2, 52',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'false',
282: 1:      'question': '22, 2, 33',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': '0, 2, 10',
282: 1:      'valid': true
282: 1:    }
282: 1:  ],
282: 1:  'level': 10,
282: 1:  'nextQuestion': '1000000, 1000, 1000100',
282: 1:  'questions': [
282: 1:    '0, 1, 5',
282: 1:    '1, 0, 1',
282: 1:    '1, 0, 2',
282: 1:    '3, 1, 7',
282: 1:    '4, 2, 14',
282: 1:    '3, 2, 14',
282: 1:    '0, 2, 5',
282: 1:    '3, 1, 6',
282: 1:    '3, 1, 9',
282: 1:    '3, 2, 9',
282: 1:    '10, 10, 0',
282: 1:    '0, 0, 1',
282: 1:    '0, 1, 1',
282: 1:    '0, 0, 2',
282: 1:    '2, 0, 2',
282: 1:    '0, 1, 2',
282: 1:    '1, 1, 2',
282: 1:    '2, 1, 3',
282: 1:    '3, 1, 4',
282: 1:    '2, 1, 1',
282: 1:    '2, 2, 6',
282: 1:    '6, 1, 11',
282: 1:    '5, 0, 1',
282: 1:    '3, 1, 8',
282: 1:    '3, 2, 10',
282: 1:    '3, 2, 8',
282: 1:    '6, 0, 11',
282: 1:    '1, 4, 11',
282: 1:    '0, 3, 10',
282: 1:    '1, 4, 12',
282: 1:    '1, 1, 7',
282: 1:    '2, 1, 7',
282: 1:    '7, 1, 11',
282: 1:    '7, 1, 8',
282: 1:    '7, 1, 13',
282: 1:    '43, 1, 46',
282: 1:    '40, 1, 46',
282: 1:    '40, 2, 47',
282: 1:    '40, 2, 50',
282: 1:    '40, 2, 52',
282: 1:    '22, 2, 33',
282: 1:    '0, 2, 10',
282: 1:    '1000000, 1000, 1000100'
282: 1:  ]
282: 1:}
282: 1:Scores: 20682
282: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true']')
282: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
283: 1:BoardData {
283: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
283: 1:  'expectedAnswer': 'false',
283: 1:  'history': [
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': '0, 1, 5',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': '1, 0, 1',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'false',
283: 1:      'question': '1, 0, 2',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': '3, 1, 7',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': '4, 2, 14',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'false',
283: 1:      'question': '3, 2, 14',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': '0, 2, 5',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': '3, 1, 6',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'false',
283: 1:      'question': '3, 1, 9',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'false',
283: 1:      'question': '3, 2, 9',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': '10, 10, 0',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'false',
283: 1:      'question': '0, 0, 1',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'false',
283: 1:      'question': '0, 1, 1',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'false',
283: 1:      'question': '0, 0, 2',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': '2, 0, 2',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'false',
283: 1:      'question': '0, 1, 2',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'false',
283: 1:      'question': '1, 1, 2',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'false',
283: 1:      'question': '2, 1, 3',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'false',
283: 1:      'question': '3, 1, 4',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': '2, 1, 1',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': '2, 2, 6',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': '6, 1, 11',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': '5, 0, 1',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': '3, 1, 8',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': '3, 2, 10',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': '3, 2, 8',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'false',
283: 1:      'question': '6, 0, 11',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': '1, 4, 11',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': '0, 3, 10',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'false',
283: 1:      'question': '1, 4, 12',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'false',
283: 1:      'question': '1, 1, 7',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': '2, 1, 7',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': '7, 1, 11',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': '7, 1, 8',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'false',
283: 1:      'question': '7, 1, 13',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': '43, 1, 46',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'false',
283: 1:      'question': '40, 1, 46',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': '40, 2, 47',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': '40, 2, 50',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'false',
283: 1:      'question': '40, 2, 52',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'false',
283: 1:      'question': '22, 2, 33',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': '0, 2, 10',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': '1000000, 1000, 1000100',
283: 1:      'valid': true
283: 1:    }
283: 1:  ],
283: 1:  'level': 10,
283: 1:  'nextQuestion': '2, 1000000, 100003',
283: 1:  'questions': [
283: 1:    '0, 1, 5',
283: 1:    '1, 0, 1',
283: 1:    '1, 0, 2',
283: 1:    '3, 1, 7',
283: 1:    '4, 2, 14',
283: 1:    '3, 2, 14',
283: 1:    '0, 2, 5',
283: 1:    '3, 1, 6',
283: 1:    '3, 1, 9',
283: 1:    '3, 2, 9',
283: 1:    '10, 10, 0',
283: 1:    '0, 0, 1',
283: 1:    '0, 1, 1',
283: 1:    '0, 0, 2',
283: 1:    '2, 0, 2',
283: 1:    '0, 1, 2',
283: 1:    '1, 1, 2',
283: 1:    '2, 1, 3',
283: 1:    '3, 1, 4',
283: 1:    '2, 1, 1',
283: 1:    '2, 2, 6',
283: 1:    '6, 1, 11',
283: 1:    '5, 0, 1',
283: 1:    '3, 1, 8',
283: 1:    '3, 2, 10',
283: 1:    '3, 2, 8',
283: 1:    '6, 0, 11',
283: 1:    '1, 4, 11',
283: 1:    '0, 3, 10',
283: 1:    '1, 4, 12',
283: 1:    '1, 1, 7',
283: 1:    '2, 1, 7',
283: 1:    '7, 1, 11',
283: 1:    '7, 1, 8',
283: 1:    '7, 1, 13',
283: 1:    '43, 1, 46',
283: 1:    '40, 1, 46',
283: 1:    '40, 2, 47',
283: 1:    '40, 2, 50',
283: 1:    '40, 2, 52',
283: 1:    '22, 2, 33',
283: 1:    '0, 2, 10',
283: 1:    '1000000, 1000, 1000100',
283: 1:    '2, 1000000, 100003'
283: 1:  ]
283: 1:}
283: 1:Scores: 20689
283: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'false']')
283: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
284: 1:BoardData {
284: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
284: 1:  'expectedAnswer': 'true',
284: 1:  'history': [
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': '0, 1, 5',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': '1, 0, 1',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'false',
284: 1:      'question': '1, 0, 2',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': '3, 1, 7',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': '4, 2, 14',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'false',
284: 1:      'question': '3, 2, 14',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': '0, 2, 5',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': '3, 1, 6',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'false',
284: 1:      'question': '3, 1, 9',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'false',
284: 1:      'question': '3, 2, 9',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': '10, 10, 0',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'false',
284: 1:      'question': '0, 0, 1',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'false',
284: 1:      'question': '0, 1, 1',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'false',
284: 1:      'question': '0, 0, 2',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': '2, 0, 2',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'false',
284: 1:      'question': '0, 1, 2',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'false',
284: 1:      'question': '1, 1, 2',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'false',
284: 1:      'question': '2, 1, 3',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'false',
284: 1:      'question': '3, 1, 4',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': '2, 1, 1',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': '2, 2, 6',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': '6, 1, 11',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': '5, 0, 1',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': '3, 1, 8',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': '3, 2, 10',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': '3, 2, 8',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'false',
284: 1:      'question': '6, 0, 11',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': '1, 4, 11',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': '0, 3, 10',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'false',
284: 1:      'question': '1, 4, 12',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'false',
284: 1:      'question': '1, 1, 7',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': '2, 1, 7',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': '7, 1, 11',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': '7, 1, 8',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'false',
284: 1:      'question': '7, 1, 13',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': '43, 1, 46',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'false',
284: 1:      'question': '40, 1, 46',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': '40, 2, 47',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': '40, 2, 50',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'false',
284: 1:      'question': '40, 2, 52',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'false',
284: 1:      'question': '22, 2, 33',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': '0, 2, 10',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': '1000000, 1000, 1000100',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'false',
284: 1:      'question': '2, 1000000, 100003',
284: 1:      'valid': true
284: 1:    }
284: 1:  ],
284: 1:  'level': 10,
284: 1:  'nextQuestion': '20, 0, 19',
284: 1:  'questions': [
284: 1:    '0, 1, 5',
284: 1:    '1, 0, 1',
284: 1:    '1, 0, 2',
284: 1:    '3, 1, 7',
284: 1:    '4, 2, 14',
284: 1:    '3, 2, 14',
284: 1:    '0, 2, 5',
284: 1:    '3, 1, 6',
284: 1:    '3, 1, 9',
284: 1:    '3, 2, 9',
284: 1:    '10, 10, 0',
284: 1:    '0, 0, 1',
284: 1:    '0, 1, 1',
284: 1:    '0, 0, 2',
284: 1:    '2, 0, 2',
284: 1:    '0, 1, 2',
284: 1:    '1, 1, 2',
284: 1:    '2, 1, 3',
284: 1:    '3, 1, 4',
284: 1:    '2, 1, 1',
284: 1:    '2, 2, 6',
284: 1:    '6, 1, 11',
284: 1:    '5, 0, 1',
284: 1:    '3, 1, 8',
284: 1:    '3, 2, 10',
284: 1:    '3, 2, 8',
284: 1:    '6, 0, 11',
284: 1:    '1, 4, 11',
284: 1:    '0, 3, 10',
284: 1:    '1, 4, 12',
284: 1:    '1, 1, 7',
284: 1:    '2, 1, 7',
284: 1:    '7, 1, 11',
284: 1:    '7, 1, 8',
284: 1:    '7, 1, 13',
284: 1:    '43, 1, 46',
284: 1:    '40, 1, 46',
284: 1:    '40, 2, 47',
284: 1:    '40, 2, 50',
284: 1:    '40, 2, 52',
284: 1:    '22, 2, 33',
284: 1:    '0, 2, 10',
284: 1:    '1000000, 1000, 1000100',
284: 1:    '2, 1000000, 100003',
284: 1:    '20, 0, 19'
284: 1:  ]
284: 1:}
284: 1:Scores: 20696
284: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'false', 'true']')
284: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
285: 1:BoardData {
285: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
285: 1:  'expectedAnswer': 'false',
285: 1:  'history': [
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': '0, 1, 5',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': '1, 0, 1',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'false',
285: 1:      'question': '1, 0, 2',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': '3, 1, 7',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': '4, 2, 14',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'false',
285: 1:      'question': '3, 2, 14',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': '0, 2, 5',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': '3, 1, 6',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'false',
285: 1:      'question': '3, 1, 9',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'false',
285: 1:      'question': '3, 2, 9',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': '10, 10, 0',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'false',
285: 1:      'question': '0, 0, 1',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'false',
285: 1:      'question': '0, 1, 1',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'false',
285: 1:      'question': '0, 0, 2',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': '2, 0, 2',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'false',
285: 1:      'question': '0, 1, 2',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'false',
285: 1:      'question': '1, 1, 2',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'false',
285: 1:      'question': '2, 1, 3',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'false',
285: 1:      'question': '3, 1, 4',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': '2, 1, 1',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': '2, 2, 6',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': '6, 1, 11',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': '5, 0, 1',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': '3, 1, 8',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': '3, 2, 10',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': '3, 2, 8',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'false',
285: 1:      'question': '6, 0, 11',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': '1, 4, 11',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': '0, 3, 10',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'false',
285: 1:      'question': '1, 4, 12',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'false',
285: 1:      'question': '1, 1, 7',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': '2, 1, 7',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': '7, 1, 11',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': '7, 1, 8',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'false',
285: 1:      'question': '7, 1, 13',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': '43, 1, 46',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'false',
285: 1:      'question': '40, 1, 46',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': '40, 2, 47',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': '40, 2, 50',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'false',
285: 1:      'question': '40, 2, 52',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'false',
285: 1:      'question': '22, 2, 33',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': '0, 2, 10',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': '1000000, 1000, 1000100',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'false',
285: 1:      'question': '2, 1000000, 100003',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': '20, 0, 19',
285: 1:      'valid': true
285: 1:    }
285: 1:  ],
285: 1:  'level': 10,
285: 1:  'nextQuestion': '20, 0, 21',
285: 1:  'questions': [
285: 1:    '0, 1, 5',
285: 1:    '1, 0, 1',
285: 1:    '1, 0, 2',
285: 1:    '3, 1, 7',
285: 1:    '4, 2, 14',
285: 1:    '3, 2, 14',
285: 1:    '0, 2, 5',
285: 1:    '3, 1, 6',
285: 1:    '3, 1, 9',
285: 1:    '3, 2, 9',
285: 1:    '10, 10, 0',
285: 1:    '0, 0, 1',
285: 1:    '0, 1, 1',
285: 1:    '0, 0, 2',
285: 1:    '2, 0, 2',
285: 1:    '0, 1, 2',
285: 1:    '1, 1, 2',
285: 1:    '2, 1, 3',
285: 1:    '3, 1, 4',
285: 1:    '2, 1, 1',
285: 1:    '2, 2, 6',
285: 1:    '6, 1, 11',
285: 1:    '5, 0, 1',
285: 1:    '3, 1, 8',
285: 1:    '3, 2, 10',
285: 1:    '3, 2, 8',
285: 1:    '6, 0, 11',
285: 1:    '1, 4, 11',
285: 1:    '0, 3, 10',
285: 1:    '1, 4, 12',
285: 1:    '1, 1, 7',
285: 1:    '2, 1, 7',
285: 1:    '7, 1, 11',
285: 1:    '7, 1, 8',
285: 1:    '7, 1, 13',
285: 1:    '43, 1, 46',
285: 1:    '40, 1, 46',
285: 1:    '40, 2, 47',
285: 1:    '40, 2, 50',
285: 1:    '40, 2, 52',
285: 1:    '22, 2, 33',
285: 1:    '0, 2, 10',
285: 1:    '1000000, 1000, 1000100',
285: 1:    '2, 1000000, 100003',
285: 1:    '20, 0, 19',
285: 1:    '20, 0, 21'
285: 1:  ]
285: 1:}
285: 1:Scores: 20703
285: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'false', 'true', 'false']')
285: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
286: 1:BoardData {
286: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
286: 1:  'expectedAnswer': 'false',
286: 1:  'history': [
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': '0, 1, 5',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': '1, 0, 1',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'false',
286: 1:      'question': '1, 0, 2',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': '3, 1, 7',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': '4, 2, 14',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'false',
286: 1:      'question': '3, 2, 14',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': '0, 2, 5',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': '3, 1, 6',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'false',
286: 1:      'question': '3, 1, 9',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'false',
286: 1:      'question': '3, 2, 9',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': '10, 10, 0',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'false',
286: 1:      'question': '0, 0, 1',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'false',
286: 1:      'question': '0, 1, 1',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'false',
286: 1:      'question': '0, 0, 2',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': '2, 0, 2',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'false',
286: 1:      'question': '0, 1, 2',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'false',
286: 1:      'question': '1, 1, 2',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'false',
286: 1:      'question': '2, 1, 3',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'false',
286: 1:      'question': '3, 1, 4',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': '2, 1, 1',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': '2, 2, 6',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': '6, 1, 11',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': '5, 0, 1',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': '3, 1, 8',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': '3, 2, 10',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': '3, 2, 8',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'false',
286: 1:      'question': '6, 0, 11',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': '1, 4, 11',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': '0, 3, 10',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'false',
286: 1:      'question': '1, 4, 12',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'false',
286: 1:      'question': '1, 1, 7',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': '2, 1, 7',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': '7, 1, 11',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': '7, 1, 8',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'false',
286: 1:      'question': '7, 1, 13',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': '43, 1, 46',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'false',
286: 1:      'question': '40, 1, 46',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': '40, 2, 47',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': '40, 2, 50',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'false',
286: 1:      'question': '40, 2, 52',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'false',
286: 1:      'question': '22, 2, 33',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': '0, 2, 10',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': '1000000, 1000, 1000100',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'false',
286: 1:      'question': '2, 1000000, 100003',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': '20, 0, 19',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'false',
286: 1:      'question': '20, 0, 21',
286: 1:      'valid': true
286: 1:    }
286: 1:  ],
286: 1:  'level': 10,
286: 1:  'nextQuestion': '20, 4, 51',
286: 1:  'questions': [
286: 1:    '0, 1, 5',
286: 1:    '1, 0, 1',
286: 1:    '1, 0, 2',
286: 1:    '3, 1, 7',
286: 1:    '4, 2, 14',
286: 1:    '3, 2, 14',
286: 1:    '0, 2, 5',
286: 1:    '3, 1, 6',
286: 1:    '3, 1, 9',
286: 1:    '3, 2, 9',
286: 1:    '10, 10, 0',
286: 1:    '0, 0, 1',
286: 1:    '0, 1, 1',
286: 1:    '0, 0, 2',
286: 1:    '2, 0, 2',
286: 1:    '0, 1, 2',
286: 1:    '1, 1, 2',
286: 1:    '2, 1, 3',
286: 1:    '3, 1, 4',
286: 1:    '2, 1, 1',
286: 1:    '2, 2, 6',
286: 1:    '6, 1, 11',
286: 1:    '5, 0, 1',
286: 1:    '3, 1, 8',
286: 1:    '3, 2, 10',
286: 1:    '3, 2, 8',
286: 1:    '6, 0, 11',
286: 1:    '1, 4, 11',
286: 1:    '0, 3, 10',
286: 1:    '1, 4, 12',
286: 1:    '1, 1, 7',
286: 1:    '2, 1, 7',
286: 1:    '7, 1, 11',
286: 1:    '7, 1, 8',
286: 1:    '7, 1, 13',
286: 1:    '43, 1, 46',
286: 1:    '40, 1, 46',
286: 1:    '40, 2, 47',
286: 1:    '40, 2, 50',
286: 1:    '40, 2, 52',
286: 1:    '22, 2, 33',
286: 1:    '0, 2, 10',
286: 1:    '1000000, 1000, 1000100',
286: 1:    '2, 1000000, 100003',
286: 1:    '20, 0, 19',
286: 1:    '20, 0, 21',
286: 1:    '20, 4, 51'
286: 1:  ]
286: 1:}
286: 1:Scores: 20710
286: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'false', 'true', 'false', 'false']')
286: 1:Fire Event: PassTest{complexity=35, testCount=48}
------------------------------------------
287: 1:BoardData {
287: 1:  'description': 'You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true',
287: 1:  'expectedAnswer': 'true',
287: 1:  'history': [
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': '0, 1, 5',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': '1, 0, 1',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'false',
287: 1:      'question': '1, 0, 2',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': '3, 1, 7',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': '4, 2, 14',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'false',
287: 1:      'question': '3, 2, 14',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': '0, 2, 5',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': '3, 1, 6',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'false',
287: 1:      'question': '3, 1, 9',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'false',
287: 1:      'question': '3, 2, 9',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': '10, 10, 0',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'false',
287: 1:      'question': '0, 0, 1',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'false',
287: 1:      'question': '0, 1, 1',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'false',
287: 1:      'question': '0, 0, 2',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': '2, 0, 2',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'false',
287: 1:      'question': '0, 1, 2',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'false',
287: 1:      'question': '1, 1, 2',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'false',
287: 1:      'question': '2, 1, 3',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'false',
287: 1:      'question': '3, 1, 4',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': '2, 1, 1',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': '2, 2, 6',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': '6, 1, 11',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': '5, 0, 1',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': '3, 1, 8',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': '3, 2, 10',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': '3, 2, 8',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'false',
287: 1:      'question': '6, 0, 11',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': '1, 4, 11',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': '0, 3, 10',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'false',
287: 1:      'question': '1, 4, 12',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'false',
287: 1:      'question': '1, 1, 7',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': '2, 1, 7',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': '7, 1, 11',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': '7, 1, 8',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'false',
287: 1:      'question': '7, 1, 13',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': '43, 1, 46',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'false',
287: 1:      'question': '40, 1, 46',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': '40, 2, 47',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': '40, 2, 50',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'false',
287: 1:      'question': '40, 2, 52',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'false',
287: 1:      'question': '22, 2, 33',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': '0, 2, 10',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': '1000000, 1000, 1000100',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'false',
287: 1:      'question': '2, 1000000, 100003',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': '20, 0, 19',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'false',
287: 1:      'question': '20, 0, 21',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'false',
287: 1:      'question': '20, 4, 51',
287: 1:      'valid': true
287: 1:    }
287: 1:  ],
287: 1:  'level': 10,
287: 1:  'nextQuestion': '20, 4, 39',
287: 1:  'questions': [
287: 1:    '0, 1, 5',
287: 1:    '1, 0, 1',
287: 1:    '1, 0, 2',
287: 1:    '3, 1, 7',
287: 1:    '4, 2, 14',
287: 1:    '3, 2, 14',
287: 1:    '0, 2, 5',
287: 1:    '3, 1, 6',
287: 1:    '3, 1, 9',
287: 1:    '3, 2, 9',
287: 1:    '10, 10, 0',
287: 1:    '0, 0, 1',
287: 1:    '0, 1, 1',
287: 1:    '0, 0, 2',
287: 1:    '2, 0, 2',
287: 1:    '0, 1, 2',
287: 1:    '1, 1, 2',
287: 1:    '2, 1, 3',
287: 1:    '3, 1, 4',
287: 1:    '2, 1, 1',
287: 1:    '2, 2, 6',
287: 1:    '6, 1, 11',
287: 1:    '5, 0, 1',
287: 1:    '3, 1, 8',
287: 1:    '3, 2, 10',
287: 1:    '3, 2, 8',
287: 1:    '6, 0, 11',
287: 1:    '1, 4, 11',
287: 1:    '0, 3, 10',
287: 1:    '1, 4, 12',
287: 1:    '1, 1, 7',
287: 1:    '2, 1, 7',
287: 1:    '7, 1, 11',
287: 1:    '7, 1, 8',
287: 1:    '7, 1, 13',
287: 1:    '43, 1, 46',
287: 1:    '40, 1, 46',
287: 1:    '40, 2, 47',
287: 1:    '40, 2, 50',
287: 1:    '40, 2, 52',
287: 1:    '22, 2, 33',
287: 1:    '0, 2, 10',
287: 1:    '1000000, 1000, 1000100',
287: 1:    '2, 1000000, 100003',
287: 1:    '20, 0, 19',
287: 1:    '20, 0, 21',
287: 1:    '20, 4, 51',
287: 1:    '20, 4, 39'
287: 1:  ]
287: 1:}
287: 1:Scores: 20717
287: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'false', 'true', 'false', 'false', 'true']')
287: 1:Fire Event: PassTest{complexity=35, testCount=48}
287: 1:Fire Event: NextAlgorithm{complexity=35, time=0}
------------------------------------------
288: 1:BoardData {
288: 1:  'description': 'Wait for next level. Please send 'message('StartNextLevel')' command.',
288: 1:  'history': [
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': '0, 1, 5',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': '1, 0, 1',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'false',
288: 1:      'question': '1, 0, 2',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': '3, 1, 7',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': '4, 2, 14',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'false',
288: 1:      'question': '3, 2, 14',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': '0, 2, 5',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': '3, 1, 6',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'false',
288: 1:      'question': '3, 1, 9',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'false',
288: 1:      'question': '3, 2, 9',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': '10, 10, 0',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'false',
288: 1:      'question': '0, 0, 1',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'false',
288: 1:      'question': '0, 1, 1',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'false',
288: 1:      'question': '0, 0, 2',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': '2, 0, 2',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'false',
288: 1:      'question': '0, 1, 2',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'false',
288: 1:      'question': '1, 1, 2',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'false',
288: 1:      'question': '2, 1, 3',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'false',
288: 1:      'question': '3, 1, 4',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': '2, 1, 1',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': '2, 2, 6',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': '6, 1, 11',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': '5, 0, 1',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': '3, 1, 8',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': '3, 2, 10',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': '3, 2, 8',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'false',
288: 1:      'question': '6, 0, 11',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': '1, 4, 11',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': '0, 3, 10',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'false',
288: 1:      'question': '1, 4, 12',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'false',
288: 1:      'question': '1, 1, 7',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': '2, 1, 7',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': '7, 1, 11',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': '7, 1, 8',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'false',
288: 1:      'question': '7, 1, 13',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': '43, 1, 46',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'false',
288: 1:      'question': '40, 1, 46',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': '40, 2, 47',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': '40, 2, 50',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'false',
288: 1:      'question': '40, 2, 52',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'false',
288: 1:      'question': '22, 2, 33',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': '0, 2, 10',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': '1000000, 1000, 1000100',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'false',
288: 1:      'question': '2, 1000000, 100003',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': '20, 0, 19',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'false',
288: 1:      'question': '20, 0, 21',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'false',
288: 1:      'question': '20, 4, 51',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': '20, 4, 39',
288: 1:      'valid': true
288: 1:    }
288: 1:  ],
288: 1:  'level': 10,
288: 1:  'questions': []
288: 1:}
288: 1:Scores: 25448
288: 1:Answer: message('StartNextLevel')
288: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
289: 1:BoardData {
289: 1:  'description': 'Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.',
289: 1:  'expectedAnswer': '1',
289: 1:  'history': [],
289: 1:  'level': 11,
289: 1:  'nextQuestion': '1',
289: 1:  'questions': ['1']
289: 1:}
289: 1:Scores: 25448
289: 1:Answer: message('['1']')
289: 1:Fire Event: PassTest{complexity=40, testCount=25}
------------------------------------------
290: 1:BoardData {
290: 1:  'description': 'Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.',
290: 1:  'expectedAnswer': '2',
290: 1:  'history': [{
290: 1:    'answer': '1',
290: 1:    'question': '1',
290: 1:    'valid': true
290: 1:  }],
290: 1:  'level': 11,
290: 1:  'nextQuestion': '2',
290: 1:  'questions': [
290: 1:    '1',
290: 1:    '2'
290: 1:  ]
290: 1:}
290: 1:Scores: 25464
290: 1:Answer: message('['1', '2']')
290: 1:Fire Event: PassTest{complexity=40, testCount=25}
------------------------------------------
291: 1:BoardData {
291: 1:  'description': 'Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.',
291: 1:  'expectedAnswer': '6',
291: 1:  'history': [
291: 1:    {
291: 1:      'answer': '1',
291: 1:      'question': '1',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': '2',
291: 1:      'question': '2',
291: 1:      'valid': true
291: 1:    }
291: 1:  ],
291: 1:  'level': 11,
291: 1:  'nextQuestion': '3',
291: 1:  'questions': [
291: 1:    '1',
291: 1:    '2',
291: 1:    '3'
291: 1:  ]
291: 1:}
291: 1:Scores: 25480
291: 1:Answer: message('['1', '2', '6']')
291: 1:Fire Event: PassTest{complexity=40, testCount=25}
------------------------------------------
292: 1:BoardData {
292: 1:  'description': 'Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.',
292: 1:  'expectedAnswer': '24',
292: 1:  'history': [
292: 1:    {
292: 1:      'answer': '1',
292: 1:      'question': '1',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': '2',
292: 1:      'question': '2',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': '6',
292: 1:      'question': '3',
292: 1:      'valid': true
292: 1:    }
292: 1:  ],
292: 1:  'level': 11,
292: 1:  'nextQuestion': '4',
292: 1:  'questions': [
292: 1:    '1',
292: 1:    '2',
292: 1:    '3',
292: 1:    '4'
292: 1:  ]
292: 1:}
292: 1:Scores: 25496
292: 1:Answer: message('['1', '2', '6', '24']')
292: 1:Fire Event: PassTest{complexity=40, testCount=25}
------------------------------------------
293: 1:BoardData {
293: 1:  'description': 'Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.',
293: 1:  'expectedAnswer': '120',
293: 1:  'history': [
293: 1:    {
293: 1:      'answer': '1',
293: 1:      'question': '1',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': '2',
293: 1:      'question': '2',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': '6',
293: 1:      'question': '3',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': '24',
293: 1:      'question': '4',
293: 1:      'valid': true
293: 1:    }
293: 1:  ],
293: 1:  'level': 11,
293: 1:  'nextQuestion': '5',
293: 1:  'questions': [
293: 1:    '1',
293: 1:    '2',
293: 1:    '3',
293: 1:    '4',
293: 1:    '5'
293: 1:  ]
293: 1:}
293: 1:Scores: 25512
293: 1:Answer: message('['1', '2', '6', '24', '120']')
293: 1:Fire Event: PassTest{complexity=40, testCount=25}
------------------------------------------
294: 1:BoardData {
294: 1:  'description': 'Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.',
294: 1:  'expectedAnswer': '720',
294: 1:  'history': [
294: 1:    {
294: 1:      'answer': '1',
294: 1:      'question': '1',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': '2',
294: 1:      'question': '2',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': '6',
294: 1:      'question': '3',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': '24',
294: 1:      'question': '4',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': '120',
294: 1:      'question': '5',
294: 1:      'valid': true
294: 1:    }
294: 1:  ],
294: 1:  'level': 11,
294: 1:  'nextQuestion': '6',
294: 1:  'questions': [
294: 1:    '1',
294: 1:    '2',
294: 1:    '3',
294: 1:    '4',
294: 1:    '5',
294: 1:    '6'
294: 1:  ]
294: 1:}
294: 1:Scores: 25528
294: 1:Answer: message('['1', '2', '6', '24', '120', '720']')
294: 1:Fire Event: PassTest{complexity=40, testCount=25}
------------------------------------------
295: 1:BoardData {
295: 1:  'description': 'Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.',
295: 1:  'expectedAnswer': '5040',
295: 1:  'history': [
295: 1:    {
295: 1:      'answer': '1',
295: 1:      'question': '1',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': '2',
295: 1:      'question': '2',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': '6',
295: 1:      'question': '3',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': '24',
295: 1:      'question': '4',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': '120',
295: 1:      'question': '5',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': '720',
295: 1:      'question': '6',
295: 1:      'valid': true
295: 1:    }
295: 1:  ],
295: 1:  'level': 11,
295: 1:  'nextQuestion': '7',
295: 1:  'questions': [
295: 1:    '1',
295: 1:    '2',
295: 1:    '3',
295: 1:    '4',
295: 1:    '5',
295: 1:    '6',
295: 1:    '7'
295: 1:  ]
295: 1:}
295: 1:Scores: 25544
295: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040']')
295: 1:Fire Event: PassTest{complexity=40, testCount=25}
------------------------------------------
296: 1:BoardData {
296: 1:  'description': 'Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.',
296: 1:  'expectedAnswer': '40320',
296: 1:  'history': [
296: 1:    {
296: 1:      'answer': '1',
296: 1:      'question': '1',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': '2',
296: 1:      'question': '2',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': '6',
296: 1:      'question': '3',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': '24',
296: 1:      'question': '4',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': '120',
296: 1:      'question': '5',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': '720',
296: 1:      'question': '6',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': '5040',
296: 1:      'question': '7',
296: 1:      'valid': true
296: 1:    }
296: 1:  ],
296: 1:  'level': 11,
296: 1:  'nextQuestion': '8',
296: 1:  'questions': [
296: 1:    '1',
296: 1:    '2',
296: 1:    '3',
296: 1:    '4',
296: 1:    '5',
296: 1:    '6',
296: 1:    '7',
296: 1:    '8'
296: 1:  ]
296: 1:}
296: 1:Scores: 25560
296: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320']')
296: 1:Fire Event: PassTest{complexity=40, testCount=25}
------------------------------------------
297: 1:BoardData {
297: 1:  'description': 'Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.',
297: 1:  'expectedAnswer': '362880',
297: 1:  'history': [
297: 1:    {
297: 1:      'answer': '1',
297: 1:      'question': '1',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': '2',
297: 1:      'question': '2',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': '6',
297: 1:      'question': '3',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': '24',
297: 1:      'question': '4',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': '120',
297: 1:      'question': '5',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': '720',
297: 1:      'question': '6',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': '5040',
297: 1:      'question': '7',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': '40320',
297: 1:      'question': '8',
297: 1:      'valid': true
297: 1:    }
297: 1:  ],
297: 1:  'level': 11,
297: 1:  'nextQuestion': '9',
297: 1:  'questions': [
297: 1:    '1',
297: 1:    '2',
297: 1:    '3',
297: 1:    '4',
297: 1:    '5',
297: 1:    '6',
297: 1:    '7',
297: 1:    '8',
297: 1:    '9'
297: 1:  ]
297: 1:}
297: 1:Scores: 25576
297: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880']')
297: 1:Fire Event: PassTest{complexity=40, testCount=25}
------------------------------------------
298: 1:BoardData {
298: 1:  'description': 'Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.',
298: 1:  'expectedAnswer': '3628800',
298: 1:  'history': [
298: 1:    {
298: 1:      'answer': '1',
298: 1:      'question': '1',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': '2',
298: 1:      'question': '2',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': '6',
298: 1:      'question': '3',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': '24',
298: 1:      'question': '4',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': '120',
298: 1:      'question': '5',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': '720',
298: 1:      'question': '6',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': '5040',
298: 1:      'question': '7',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': '40320',
298: 1:      'question': '8',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': '362880',
298: 1:      'question': '9',
298: 1:      'valid': true
298: 1:    }
298: 1:  ],
298: 1:  'level': 11,
298: 1:  'nextQuestion': '10',
298: 1:  'questions': [
298: 1:    '1',
298: 1:    '2',
298: 1:    '3',
298: 1:    '4',
298: 1:    '5',
298: 1:    '6',
298: 1:    '7',
298: 1:    '8',
298: 1:    '9',
298: 1:    '10'
298: 1:  ]
298: 1:}
298: 1:Scores: 25592
298: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800']')
298: 1:Fire Event: PassTest{complexity=40, testCount=25}
------------------------------------------
299: 1:BoardData {
299: 1:  'description': 'Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.',
299: 1:  'expectedAnswer': '39916800',
299: 1:  'history': [
299: 1:    {
299: 1:      'answer': '1',
299: 1:      'question': '1',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': '2',
299: 1:      'question': '2',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': '6',
299: 1:      'question': '3',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': '24',
299: 1:      'question': '4',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': '120',
299: 1:      'question': '5',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': '720',
299: 1:      'question': '6',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': '5040',
299: 1:      'question': '7',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': '40320',
299: 1:      'question': '8',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': '362880',
299: 1:      'question': '9',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': '3628800',
299: 1:      'question': '10',
299: 1:      'valid': true
299: 1:    }
299: 1:  ],
299: 1:  'level': 11,
299: 1:  'nextQuestion': '11',
299: 1:  'questions': [
299: 1:    '1',
299: 1:    '2',
299: 1:    '3',
299: 1:    '4',
299: 1:    '5',
299: 1:    '6',
299: 1:    '7',
299: 1:    '8',
299: 1:    '9',
299: 1:    '10',
299: 1:    '11'
299: 1:  ]
299: 1:}
299: 1:Scores: 25608
299: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800']')
299: 1:Fire Event: PassTest{complexity=40, testCount=25}
------------------------------------------
300: 1:BoardData {
300: 1:  'description': 'Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.',
300: 1:  'expectedAnswer': '479001600',
300: 1:  'history': [
300: 1:    {
300: 1:      'answer': '1',
300: 1:      'question': '1',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': '2',
300: 1:      'question': '2',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': '6',
300: 1:      'question': '3',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': '24',
300: 1:      'question': '4',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': '120',
300: 1:      'question': '5',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': '720',
300: 1:      'question': '6',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': '5040',
300: 1:      'question': '7',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': '40320',
300: 1:      'question': '8',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': '362880',
300: 1:      'question': '9',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': '3628800',
300: 1:      'question': '10',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': '39916800',
300: 1:      'question': '11',
300: 1:      'valid': true
300: 1:    }
300: 1:  ],
300: 1:  'level': 11,
300: 1:  'nextQuestion': '12',
300: 1:  'questions': [
300: 1:    '1',
300: 1:    '2',
300: 1:    '3',
300: 1:    '4',
300: 1:    '5',
300: 1:    '6',
300: 1:    '7',
300: 1:    '8',
300: 1:    '9',
300: 1:    '10',
300: 1:    '11',
300: 1:    '12'
300: 1:  ]
300: 1:}
300: 1:Scores: 25624
300: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600']')
300: 1:Fire Event: PassTest{complexity=40, testCount=25}
------------------------------------------
301: 1:BoardData {
301: 1:  'description': 'Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.',
301: 1:  'expectedAnswer': '6227020800',
301: 1:  'history': [
301: 1:    {
301: 1:      'answer': '1',
301: 1:      'question': '1',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': '2',
301: 1:      'question': '2',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': '6',
301: 1:      'question': '3',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': '24',
301: 1:      'question': '4',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': '120',
301: 1:      'question': '5',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': '720',
301: 1:      'question': '6',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': '5040',
301: 1:      'question': '7',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': '40320',
301: 1:      'question': '8',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': '362880',
301: 1:      'question': '9',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': '3628800',
301: 1:      'question': '10',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': '39916800',
301: 1:      'question': '11',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': '479001600',
301: 1:      'question': '12',
301: 1:      'valid': true
301: 1:    }
301: 1:  ],
301: 1:  'level': 11,
301: 1:  'nextQuestion': '13',
301: 1:  'questions': [
301: 1:    '1',
301: 1:    '2',
301: 1:    '3',
301: 1:    '4',
301: 1:    '5',
301: 1:    '6',
301: 1:    '7',
301: 1:    '8',
301: 1:    '9',
301: 1:    '10',
301: 1:    '11',
301: 1:    '12',
301: 1:    '13'
301: 1:  ]
301: 1:}
301: 1:Scores: 25640
301: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800']')
301: 1:Fire Event: PassTest{complexity=40, testCount=25}
------------------------------------------
302: 1:BoardData {
302: 1:  'description': 'Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.',
302: 1:  'expectedAnswer': '87178291200',
302: 1:  'history': [
302: 1:    {
302: 1:      'answer': '1',
302: 1:      'question': '1',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': '2',
302: 1:      'question': '2',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': '6',
302: 1:      'question': '3',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': '24',
302: 1:      'question': '4',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': '120',
302: 1:      'question': '5',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': '720',
302: 1:      'question': '6',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': '5040',
302: 1:      'question': '7',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': '40320',
302: 1:      'question': '8',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': '362880',
302: 1:      'question': '9',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': '3628800',
302: 1:      'question': '10',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': '39916800',
302: 1:      'question': '11',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': '479001600',
302: 1:      'question': '12',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': '6227020800',
302: 1:      'question': '13',
302: 1:      'valid': true
302: 1:    }
302: 1:  ],
302: 1:  'level': 11,
302: 1:  'nextQuestion': '14',
302: 1:  'questions': [
302: 1:    '1',
302: 1:    '2',
302: 1:    '3',
302: 1:    '4',
302: 1:    '5',
302: 1:    '6',
302: 1:    '7',
302: 1:    '8',
302: 1:    '9',
302: 1:    '10',
302: 1:    '11',
302: 1:    '12',
302: 1:    '13',
302: 1:    '14'
302: 1:  ]
302: 1:}
302: 1:Scores: 25656
302: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200']')
302: 1:Fire Event: PassTest{complexity=40, testCount=25}
------------------------------------------
303: 1:BoardData {
303: 1:  'description': 'Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.',
303: 1:  'expectedAnswer': '1307674368000',
303: 1:  'history': [
303: 1:    {
303: 1:      'answer': '1',
303: 1:      'question': '1',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': '2',
303: 1:      'question': '2',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': '6',
303: 1:      'question': '3',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': '24',
303: 1:      'question': '4',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': '120',
303: 1:      'question': '5',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': '720',
303: 1:      'question': '6',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': '5040',
303: 1:      'question': '7',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': '40320',
303: 1:      'question': '8',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': '362880',
303: 1:      'question': '9',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': '3628800',
303: 1:      'question': '10',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': '39916800',
303: 1:      'question': '11',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': '479001600',
303: 1:      'question': '12',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': '6227020800',
303: 1:      'question': '13',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': '87178291200',
303: 1:      'question': '14',
303: 1:      'valid': true
303: 1:    }
303: 1:  ],
303: 1:  'level': 11,
303: 1:  'nextQuestion': '15',
303: 1:  'questions': [
303: 1:    '1',
303: 1:    '2',
303: 1:    '3',
303: 1:    '4',
303: 1:    '5',
303: 1:    '6',
303: 1:    '7',
303: 1:    '8',
303: 1:    '9',
303: 1:    '10',
303: 1:    '11',
303: 1:    '12',
303: 1:    '13',
303: 1:    '14',
303: 1:    '15'
303: 1:  ]
303: 1:}
303: 1:Scores: 25672
303: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000']')
303: 1:Fire Event: PassTest{complexity=40, testCount=25}
------------------------------------------
304: 1:BoardData {
304: 1:  'description': 'Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.',
304: 1:  'expectedAnswer': '20922789888000',
304: 1:  'history': [
304: 1:    {
304: 1:      'answer': '1',
304: 1:      'question': '1',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': '2',
304: 1:      'question': '2',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': '6',
304: 1:      'question': '3',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': '24',
304: 1:      'question': '4',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': '120',
304: 1:      'question': '5',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': '720',
304: 1:      'question': '6',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': '5040',
304: 1:      'question': '7',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': '40320',
304: 1:      'question': '8',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': '362880',
304: 1:      'question': '9',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': '3628800',
304: 1:      'question': '10',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': '39916800',
304: 1:      'question': '11',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': '479001600',
304: 1:      'question': '12',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': '6227020800',
304: 1:      'question': '13',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': '87178291200',
304: 1:      'question': '14',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': '1307674368000',
304: 1:      'question': '15',
304: 1:      'valid': true
304: 1:    }
304: 1:  ],
304: 1:  'level': 11,
304: 1:  'nextQuestion': '16',
304: 1:  'questions': [
304: 1:    '1',
304: 1:    '2',
304: 1:    '3',
304: 1:    '4',
304: 1:    '5',
304: 1:    '6',
304: 1:    '7',
304: 1:    '8',
304: 1:    '9',
304: 1:    '10',
304: 1:    '11',
304: 1:    '12',
304: 1:    '13',
304: 1:    '14',
304: 1:    '15',
304: 1:    '16'
304: 1:  ]
304: 1:}
304: 1:Scores: 25688
304: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000']')
304: 1:Fire Event: PassTest{complexity=40, testCount=25}
------------------------------------------
305: 1:BoardData {
305: 1:  'description': 'Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.',
305: 1:  'expectedAnswer': '355687428096000',
305: 1:  'history': [
305: 1:    {
305: 1:      'answer': '1',
305: 1:      'question': '1',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': '2',
305: 1:      'question': '2',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': '6',
305: 1:      'question': '3',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': '24',
305: 1:      'question': '4',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': '120',
305: 1:      'question': '5',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': '720',
305: 1:      'question': '6',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': '5040',
305: 1:      'question': '7',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': '40320',
305: 1:      'question': '8',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': '362880',
305: 1:      'question': '9',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': '3628800',
305: 1:      'question': '10',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': '39916800',
305: 1:      'question': '11',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': '479001600',
305: 1:      'question': '12',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': '6227020800',
305: 1:      'question': '13',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': '87178291200',
305: 1:      'question': '14',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': '1307674368000',
305: 1:      'question': '15',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': '20922789888000',
305: 1:      'question': '16',
305: 1:      'valid': true
305: 1:    }
305: 1:  ],
305: 1:  'level': 11,
305: 1:  'nextQuestion': '17',
305: 1:  'questions': [
305: 1:    '1',
305: 1:    '2',
305: 1:    '3',
305: 1:    '4',
305: 1:    '5',
305: 1:    '6',
305: 1:    '7',
305: 1:    '8',
305: 1:    '9',
305: 1:    '10',
305: 1:    '11',
305: 1:    '12',
305: 1:    '13',
305: 1:    '14',
305: 1:    '15',
305: 1:    '16',
305: 1:    '17'
305: 1:  ]
305: 1:}
305: 1:Scores: 25704
305: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000', '355687428096000']')
305: 1:Fire Event: PassTest{complexity=40, testCount=25}
------------------------------------------
306: 1:BoardData {
306: 1:  'description': 'Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.',
306: 1:  'expectedAnswer': '6402373705728000',
306: 1:  'history': [
306: 1:    {
306: 1:      'answer': '1',
306: 1:      'question': '1',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': '2',
306: 1:      'question': '2',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': '6',
306: 1:      'question': '3',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': '24',
306: 1:      'question': '4',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': '120',
306: 1:      'question': '5',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': '720',
306: 1:      'question': '6',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': '5040',
306: 1:      'question': '7',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': '40320',
306: 1:      'question': '8',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': '362880',
306: 1:      'question': '9',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': '3628800',
306: 1:      'question': '10',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': '39916800',
306: 1:      'question': '11',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': '479001600',
306: 1:      'question': '12',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': '6227020800',
306: 1:      'question': '13',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': '87178291200',
306: 1:      'question': '14',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': '1307674368000',
306: 1:      'question': '15',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': '20922789888000',
306: 1:      'question': '16',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': '355687428096000',
306: 1:      'question': '17',
306: 1:      'valid': true
306: 1:    }
306: 1:  ],
306: 1:  'level': 11,
306: 1:  'nextQuestion': '18',
306: 1:  'questions': [
306: 1:    '1',
306: 1:    '2',
306: 1:    '3',
306: 1:    '4',
306: 1:    '5',
306: 1:    '6',
306: 1:    '7',
306: 1:    '8',
306: 1:    '9',
306: 1:    '10',
306: 1:    '11',
306: 1:    '12',
306: 1:    '13',
306: 1:    '14',
306: 1:    '15',
306: 1:    '16',
306: 1:    '17',
306: 1:    '18'
306: 1:  ]
306: 1:}
306: 1:Scores: 25720
306: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000', '355687428096000', '6402373705728000']')
306: 1:Fire Event: PassTest{complexity=40, testCount=25}
------------------------------------------
307: 1:BoardData {
307: 1:  'description': 'Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.',
307: 1:  'expectedAnswer': '121645100408832000',
307: 1:  'history': [
307: 1:    {
307: 1:      'answer': '1',
307: 1:      'question': '1',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': '2',
307: 1:      'question': '2',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': '6',
307: 1:      'question': '3',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': '24',
307: 1:      'question': '4',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': '120',
307: 1:      'question': '5',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': '720',
307: 1:      'question': '6',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': '5040',
307: 1:      'question': '7',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': '40320',
307: 1:      'question': '8',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': '362880',
307: 1:      'question': '9',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': '3628800',
307: 1:      'question': '10',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': '39916800',
307: 1:      'question': '11',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': '479001600',
307: 1:      'question': '12',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': '6227020800',
307: 1:      'question': '13',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': '87178291200',
307: 1:      'question': '14',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': '1307674368000',
307: 1:      'question': '15',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': '20922789888000',
307: 1:      'question': '16',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': '355687428096000',
307: 1:      'question': '17',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': '6402373705728000',
307: 1:      'question': '18',
307: 1:      'valid': true
307: 1:    }
307: 1:  ],
307: 1:  'level': 11,
307: 1:  'nextQuestion': '19',
307: 1:  'questions': [
307: 1:    '1',
307: 1:    '2',
307: 1:    '3',
307: 1:    '4',
307: 1:    '5',
307: 1:    '6',
307: 1:    '7',
307: 1:    '8',
307: 1:    '9',
307: 1:    '10',
307: 1:    '11',
307: 1:    '12',
307: 1:    '13',
307: 1:    '14',
307: 1:    '15',
307: 1:    '16',
307: 1:    '17',
307: 1:    '18',
307: 1:    '19'
307: 1:  ]
307: 1:}
307: 1:Scores: 25736
307: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000', '355687428096000', '6402373705728000', '121645100408832000']')
307: 1:Fire Event: PassTest{complexity=40, testCount=25}
------------------------------------------
308: 1:BoardData {
308: 1:  'description': 'Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.',
308: 1:  'expectedAnswer': '2432902008176640000',
308: 1:  'history': [
308: 1:    {
308: 1:      'answer': '1',
308: 1:      'question': '1',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': '2',
308: 1:      'question': '2',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': '6',
308: 1:      'question': '3',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': '24',
308: 1:      'question': '4',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': '120',
308: 1:      'question': '5',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': '720',
308: 1:      'question': '6',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': '5040',
308: 1:      'question': '7',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': '40320',
308: 1:      'question': '8',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': '362880',
308: 1:      'question': '9',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': '3628800',
308: 1:      'question': '10',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': '39916800',
308: 1:      'question': '11',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': '479001600',
308: 1:      'question': '12',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': '6227020800',
308: 1:      'question': '13',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': '87178291200',
308: 1:      'question': '14',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': '1307674368000',
308: 1:      'question': '15',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': '20922789888000',
308: 1:      'question': '16',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': '355687428096000',
308: 1:      'question': '17',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': '6402373705728000',
308: 1:      'question': '18',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': '121645100408832000',
308: 1:      'question': '19',
308: 1:      'valid': true
308: 1:    }
308: 1:  ],
308: 1:  'level': 11,
308: 1:  'nextQuestion': '20',
308: 1:  'questions': [
308: 1:    '1',
308: 1:    '2',
308: 1:    '3',
308: 1:    '4',
308: 1:    '5',
308: 1:    '6',
308: 1:    '7',
308: 1:    '8',
308: 1:    '9',
308: 1:    '10',
308: 1:    '11',
308: 1:    '12',
308: 1:    '13',
308: 1:    '14',
308: 1:    '15',
308: 1:    '16',
308: 1:    '17',
308: 1:    '18',
308: 1:    '19',
308: 1:    '20'
308: 1:  ]
308: 1:}
308: 1:Scores: 25752
308: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000', '355687428096000', '6402373705728000', '121645100408832000', '2432902008176640000']')
308: 1:Fire Event: PassTest{complexity=40, testCount=25}
------------------------------------------
309: 1:BoardData {
309: 1:  'description': 'Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.',
309: 1:  'expectedAnswer': '51090942171709440000',
309: 1:  'history': [
309: 1:    {
309: 1:      'answer': '1',
309: 1:      'question': '1',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': '2',
309: 1:      'question': '2',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': '6',
309: 1:      'question': '3',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': '24',
309: 1:      'question': '4',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': '120',
309: 1:      'question': '5',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': '720',
309: 1:      'question': '6',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': '5040',
309: 1:      'question': '7',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': '40320',
309: 1:      'question': '8',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': '362880',
309: 1:      'question': '9',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': '3628800',
309: 1:      'question': '10',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': '39916800',
309: 1:      'question': '11',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': '479001600',
309: 1:      'question': '12',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': '6227020800',
309: 1:      'question': '13',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': '87178291200',
309: 1:      'question': '14',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': '1307674368000',
309: 1:      'question': '15',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': '20922789888000',
309: 1:      'question': '16',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': '355687428096000',
309: 1:      'question': '17',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': '6402373705728000',
309: 1:      'question': '18',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': '121645100408832000',
309: 1:      'question': '19',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': '2432902008176640000',
309: 1:      'question': '20',
309: 1:      'valid': true
309: 1:    }
309: 1:  ],
309: 1:  'level': 11,
309: 1:  'nextQuestion': '21',
309: 1:  'questions': [
309: 1:    '1',
309: 1:    '2',
309: 1:    '3',
309: 1:    '4',
309: 1:    '5',
309: 1:    '6',
309: 1:    '7',
309: 1:    '8',
309: 1:    '9',
309: 1:    '10',
309: 1:    '11',
309: 1:    '12',
309: 1:    '13',
309: 1:    '14',
309: 1:    '15',
309: 1:    '16',
309: 1:    '17',
309: 1:    '18',
309: 1:    '19',
309: 1:    '20',
309: 1:    '21'
309: 1:  ]
309: 1:}
309: 1:Scores: 25768
309: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000', '355687428096000', '6402373705728000', '121645100408832000', '2432902008176640000', '51090942171709440000']')
309: 1:Fire Event: PassTest{complexity=40, testCount=25}
------------------------------------------
310: 1:BoardData {
310: 1:  'description': 'Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.',
310: 1:  'expectedAnswer': '1124000727777607680000',
310: 1:  'history': [
310: 1:    {
310: 1:      'answer': '1',
310: 1:      'question': '1',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': '2',
310: 1:      'question': '2',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': '6',
310: 1:      'question': '3',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': '24',
310: 1:      'question': '4',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': '120',
310: 1:      'question': '5',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': '720',
310: 1:      'question': '6',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': '5040',
310: 1:      'question': '7',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': '40320',
310: 1:      'question': '8',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': '362880',
310: 1:      'question': '9',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': '3628800',
310: 1:      'question': '10',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': '39916800',
310: 1:      'question': '11',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': '479001600',
310: 1:      'question': '12',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': '6227020800',
310: 1:      'question': '13',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': '87178291200',
310: 1:      'question': '14',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': '1307674368000',
310: 1:      'question': '15',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': '20922789888000',
310: 1:      'question': '16',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': '355687428096000',
310: 1:      'question': '17',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': '6402373705728000',
310: 1:      'question': '18',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': '121645100408832000',
310: 1:      'question': '19',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': '2432902008176640000',
310: 1:      'question': '20',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': '51090942171709440000',
310: 1:      'question': '21',
310: 1:      'valid': true
310: 1:    }
310: 1:  ],
310: 1:  'level': 11,
310: 1:  'nextQuestion': '22',
310: 1:  'questions': [
310: 1:    '1',
310: 1:    '2',
310: 1:    '3',
310: 1:    '4',
310: 1:    '5',
310: 1:    '6',
310: 1:    '7',
310: 1:    '8',
310: 1:    '9',
310: 1:    '10',
310: 1:    '11',
310: 1:    '12',
310: 1:    '13',
310: 1:    '14',
310: 1:    '15',
310: 1:    '16',
310: 1:    '17',
310: 1:    '18',
310: 1:    '19',
310: 1:    '20',
310: 1:    '21',
310: 1:    '22'
310: 1:  ]
310: 1:}
310: 1:Scores: 25784
310: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000', '355687428096000', '6402373705728000', '121645100408832000', '2432902008176640000', '51090942171709440000', '1124000727777607680000']')
310: 1:Fire Event: PassTest{complexity=40, testCount=25}
------------------------------------------
311: 1:BoardData {
311: 1:  'description': 'Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.',
311: 1:  'expectedAnswer': '25852016738884976640000',
311: 1:  'history': [
311: 1:    {
311: 1:      'answer': '1',
311: 1:      'question': '1',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': '2',
311: 1:      'question': '2',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': '6',
311: 1:      'question': '3',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': '24',
311: 1:      'question': '4',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': '120',
311: 1:      'question': '5',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': '720',
311: 1:      'question': '6',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': '5040',
311: 1:      'question': '7',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': '40320',
311: 1:      'question': '8',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': '362880',
311: 1:      'question': '9',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': '3628800',
311: 1:      'question': '10',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': '39916800',
311: 1:      'question': '11',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': '479001600',
311: 1:      'question': '12',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': '6227020800',
311: 1:      'question': '13',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': '87178291200',
311: 1:      'question': '14',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': '1307674368000',
311: 1:      'question': '15',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': '20922789888000',
311: 1:      'question': '16',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': '355687428096000',
311: 1:      'question': '17',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': '6402373705728000',
311: 1:      'question': '18',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': '121645100408832000',
311: 1:      'question': '19',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': '2432902008176640000',
311: 1:      'question': '20',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': '51090942171709440000',
311: 1:      'question': '21',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': '1124000727777607680000',
311: 1:      'question': '22',
311: 1:      'valid': true
311: 1:    }
311: 1:  ],
311: 1:  'level': 11,
311: 1:  'nextQuestion': '23',
311: 1:  'questions': [
311: 1:    '1',
311: 1:    '2',
311: 1:    '3',
311: 1:    '4',
311: 1:    '5',
311: 1:    '6',
311: 1:    '7',
311: 1:    '8',
311: 1:    '9',
311: 1:    '10',
311: 1:    '11',
311: 1:    '12',
311: 1:    '13',
311: 1:    '14',
311: 1:    '15',
311: 1:    '16',
311: 1:    '17',
311: 1:    '18',
311: 1:    '19',
311: 1:    '20',
311: 1:    '21',
311: 1:    '22',
311: 1:    '23'
311: 1:  ]
311: 1:}
311: 1:Scores: 25800
311: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000', '355687428096000', '6402373705728000', '121645100408832000', '2432902008176640000', '51090942171709440000', '1124000727777607680000', '25852016738884976640000']')
311: 1:Fire Event: PassTest{complexity=40, testCount=25}
------------------------------------------
312: 1:BoardData {
312: 1:  'description': 'Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.',
312: 1:  'expectedAnswer': '620448401733239439360000',
312: 1:  'history': [
312: 1:    {
312: 1:      'answer': '1',
312: 1:      'question': '1',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '2',
312: 1:      'question': '2',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '6',
312: 1:      'question': '3',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '24',
312: 1:      'question': '4',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '120',
312: 1:      'question': '5',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '720',
312: 1:      'question': '6',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '5040',
312: 1:      'question': '7',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '40320',
312: 1:      'question': '8',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '362880',
312: 1:      'question': '9',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '3628800',
312: 1:      'question': '10',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '39916800',
312: 1:      'question': '11',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '479001600',
312: 1:      'question': '12',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '6227020800',
312: 1:      'question': '13',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '87178291200',
312: 1:      'question': '14',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '1307674368000',
312: 1:      'question': '15',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '20922789888000',
312: 1:      'question': '16',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '355687428096000',
312: 1:      'question': '17',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '6402373705728000',
312: 1:      'question': '18',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '121645100408832000',
312: 1:      'question': '19',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '2432902008176640000',
312: 1:      'question': '20',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '51090942171709440000',
312: 1:      'question': '21',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '1124000727777607680000',
312: 1:      'question': '22',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '25852016738884976640000',
312: 1:      'question': '23',
312: 1:      'valid': true
312: 1:    }
312: 1:  ],
312: 1:  'level': 11,
312: 1:  'nextQuestion': '24',
312: 1:  'questions': [
312: 1:    '1',
312: 1:    '2',
312: 1:    '3',
312: 1:    '4',
312: 1:    '5',
312: 1:    '6',
312: 1:    '7',
312: 1:    '8',
312: 1:    '9',
312: 1:    '10',
312: 1:    '11',
312: 1:    '12',
312: 1:    '13',
312: 1:    '14',
312: 1:    '15',
312: 1:    '16',
312: 1:    '17',
312: 1:    '18',
312: 1:    '19',
312: 1:    '20',
312: 1:    '21',
312: 1:    '22',
312: 1:    '23',
312: 1:    '24'
312: 1:  ]
312: 1:}
312: 1:Scores: 25816
312: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000', '355687428096000', '6402373705728000', '121645100408832000', '2432902008176640000', '51090942171709440000', '1124000727777607680000', '25852016738884976640000', '620448401733239439360000']')
312: 1:Fire Event: PassTest{complexity=40, testCount=25}
------------------------------------------
313: 1:BoardData {
313: 1:  'description': 'Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.',
313: 1:  'expectedAnswer': '15511210043330985984000000',
313: 1:  'history': [
313: 1:    {
313: 1:      'answer': '1',
313: 1:      'question': '1',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '2',
313: 1:      'question': '2',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '6',
313: 1:      'question': '3',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '24',
313: 1:      'question': '4',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '120',
313: 1:      'question': '5',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '720',
313: 1:      'question': '6',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '5040',
313: 1:      'question': '7',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '40320',
313: 1:      'question': '8',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '362880',
313: 1:      'question': '9',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '3628800',
313: 1:      'question': '10',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '39916800',
313: 1:      'question': '11',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '479001600',
313: 1:      'question': '12',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '6227020800',
313: 1:      'question': '13',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '87178291200',
313: 1:      'question': '14',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '1307674368000',
313: 1:      'question': '15',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '20922789888000',
313: 1:      'question': '16',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '355687428096000',
313: 1:      'question': '17',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '6402373705728000',
313: 1:      'question': '18',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '121645100408832000',
313: 1:      'question': '19',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '2432902008176640000',
313: 1:      'question': '20',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '51090942171709440000',
313: 1:      'question': '21',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '1124000727777607680000',
313: 1:      'question': '22',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '25852016738884976640000',
313: 1:      'question': '23',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '620448401733239439360000',
313: 1:      'question': '24',
313: 1:      'valid': true
313: 1:    }
313: 1:  ],
313: 1:  'level': 11,
313: 1:  'nextQuestion': '25',
313: 1:  'questions': [
313: 1:    '1',
313: 1:    '2',
313: 1:    '3',
313: 1:    '4',
313: 1:    '5',
313: 1:    '6',
313: 1:    '7',
313: 1:    '8',
313: 1:    '9',
313: 1:    '10',
313: 1:    '11',
313: 1:    '12',
313: 1:    '13',
313: 1:    '14',
313: 1:    '15',
313: 1:    '16',
313: 1:    '17',
313: 1:    '18',
313: 1:    '19',
313: 1:    '20',
313: 1:    '21',
313: 1:    '22',
313: 1:    '23',
313: 1:    '24',
313: 1:    '25'
313: 1:  ]
313: 1:}
313: 1:Scores: 25832
313: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000', '355687428096000', '6402373705728000', '121645100408832000', '2432902008176640000', '51090942171709440000', '1124000727777607680000', '25852016738884976640000', '620448401733239439360000', '15511210043330985984000000']')
313: 1:Fire Event: PassTest{complexity=40, testCount=25}
313: 1:Fire Event: NextAlgorithm{complexity=40, time=0}
------------------------------------------
314: 1:BoardData {
314: 1:  'description': 'Wait for next level. Please send 'message('StartNextLevel')' command.',
314: 1:  'history': [
314: 1:    {
314: 1:      'answer': '1',
314: 1:      'question': '1',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '2',
314: 1:      'question': '2',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '6',
314: 1:      'question': '3',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '24',
314: 1:      'question': '4',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '120',
314: 1:      'question': '5',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '720',
314: 1:      'question': '6',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '5040',
314: 1:      'question': '7',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '40320',
314: 1:      'question': '8',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '362880',
314: 1:      'question': '9',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '3628800',
314: 1:      'question': '10',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '39916800',
314: 1:      'question': '11',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '479001600',
314: 1:      'question': '12',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '6227020800',
314: 1:      'question': '13',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '87178291200',
314: 1:      'question': '14',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '1307674368000',
314: 1:      'question': '15',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '20922789888000',
314: 1:      'question': '16',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '355687428096000',
314: 1:      'question': '17',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '6402373705728000',
314: 1:      'question': '18',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '121645100408832000',
314: 1:      'question': '19',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '2432902008176640000',
314: 1:      'question': '20',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '51090942171709440000',
314: 1:      'question': '21',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '1124000727777607680000',
314: 1:      'question': '22',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '25852016738884976640000',
314: 1:      'question': '23',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '620448401733239439360000',
314: 1:      'question': '24',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '15511210043330985984000000',
314: 1:      'question': '25',
314: 1:      'valid': true
314: 1:    }
314: 1:  ],
314: 1:  'level': 11,
314: 1:  'questions': []
314: 1:}
314: 1:Scores: 31247
314: 1:Answer: message('StartNextLevel')
314: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
315: 1:BoardData {
315: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
315: 1:  'expectedAnswer': '2',
315: 1:  'history': [],
315: 1:  'level': 12,
315: 1:  'nextQuestion': '1',
315: 1:  'questions': ['1']
315: 1:}
315: 1:Scores: 31247
315: 1:Answer: message('['2']')
315: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
316: 1:BoardData {
316: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
316: 1:  'expectedAnswer': '4',
316: 1:  'history': [{
316: 1:    'answer': '2',
316: 1:    'question': '1',
316: 1:    'valid': true
316: 1:  }],
316: 1:  'level': 12,
316: 1:  'nextQuestion': '2',
316: 1:  'questions': [
316: 1:    '1',
316: 1:    '2'
316: 1:  ]
316: 1:}
316: 1:Scores: 31261
316: 1:Answer: message('['2', '4']')
316: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
317: 1:BoardData {
317: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
317: 1:  'expectedAnswer': '6',
317: 1:  'history': [
317: 1:    {
317: 1:      'answer': '2',
317: 1:      'question': '1',
317: 1:      'valid': true
317: 1:    },
317: 1:    {
317: 1:      'answer': '4',
317: 1:      'question': '2',
317: 1:      'valid': true
317: 1:    }
317: 1:  ],
317: 1:  'level': 12,
317: 1:  'nextQuestion': '3',
317: 1:  'questions': [
317: 1:    '1',
317: 1:    '2',
317: 1:    '3'
317: 1:  ]
317: 1:}
317: 1:Scores: 31275
317: 1:Answer: message('['2', '4', '6']')
317: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
318: 1:BoardData {
318: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
318: 1:  'expectedAnswer': '8',
318: 1:  'history': [
318: 1:    {
318: 1:      'answer': '2',
318: 1:      'question': '1',
318: 1:      'valid': true
318: 1:    },
318: 1:    {
318: 1:      'answer': '4',
318: 1:      'question': '2',
318: 1:      'valid': true
318: 1:    },
318: 1:    {
318: 1:      'answer': '6',
318: 1:      'question': '3',
318: 1:      'valid': true
318: 1:    }
318: 1:  ],
318: 1:  'level': 12,
318: 1:  'nextQuestion': '4',
318: 1:  'questions': [
318: 1:    '1',
318: 1:    '2',
318: 1:    '3',
318: 1:    '4'
318: 1:  ]
318: 1:}
318: 1:Scores: 31289
318: 1:Answer: message('['2', '4', '6', '8']')
318: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
319: 1:BoardData {
319: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
319: 1:  'expectedAnswer': '11',
319: 1:  'history': [
319: 1:    {
319: 1:      'answer': '2',
319: 1:      'question': '1',
319: 1:      'valid': true
319: 1:    },
319: 1:    {
319: 1:      'answer': '4',
319: 1:      'question': '2',
319: 1:      'valid': true
319: 1:    },
319: 1:    {
319: 1:      'answer': '6',
319: 1:      'question': '3',
319: 1:      'valid': true
319: 1:    },
319: 1:    {
319: 1:      'answer': '8',
319: 1:      'question': '4',
319: 1:      'valid': true
319: 1:    }
319: 1:  ],
319: 1:  'level': 12,
319: 1:  'nextQuestion': '5',
319: 1:  'questions': [
319: 1:    '1',
319: 1:    '2',
319: 1:    '3',
319: 1:    '4',
319: 1:    '5'
319: 1:  ]
319: 1:}
319: 1:Scores: 31303
319: 1:Answer: message('['2', '4', '6', '8', '11']')
319: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
320: 1:BoardData {
320: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
320: 1:  'expectedAnswer': '33',
320: 1:  'history': [
320: 1:    {
320: 1:      'answer': '2',
320: 1:      'question': '1',
320: 1:      'valid': true
320: 1:    },
320: 1:    {
320: 1:      'answer': '4',
320: 1:      'question': '2',
320: 1:      'valid': true
320: 1:    },
320: 1:    {
320: 1:      'answer': '6',
320: 1:      'question': '3',
320: 1:      'valid': true
320: 1:    },
320: 1:    {
320: 1:      'answer': '8',
320: 1:      'question': '4',
320: 1:      'valid': true
320: 1:    },
320: 1:    {
320: 1:      'answer': '11',
320: 1:      'question': '5',
320: 1:      'valid': true
320: 1:    }
320: 1:  ],
320: 1:  'level': 12,
320: 1:  'nextQuestion': '6',
320: 1:  'questions': [
320: 1:    '1',
320: 1:    '2',
320: 1:    '3',
320: 1:    '4',
320: 1:    '5',
320: 1:    '6'
320: 1:  ]
320: 1:}
320: 1:Scores: 31317
320: 1:Answer: message('['2', '4', '6', '8', '11', '33']')
320: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
321: 1:BoardData {
321: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
321: 1:  'expectedAnswer': '55',
321: 1:  'history': [
321: 1:    {
321: 1:      'answer': '2',
321: 1:      'question': '1',
321: 1:      'valid': true
321: 1:    },
321: 1:    {
321: 1:      'answer': '4',
321: 1:      'question': '2',
321: 1:      'valid': true
321: 1:    },
321: 1:    {
321: 1:      'answer': '6',
321: 1:      'question': '3',
321: 1:      'valid': true
321: 1:    },
321: 1:    {
321: 1:      'answer': '8',
321: 1:      'question': '4',
321: 1:      'valid': true
321: 1:    },
321: 1:    {
321: 1:      'answer': '11',
321: 1:      'question': '5',
321: 1:      'valid': true
321: 1:    },
321: 1:    {
321: 1:      'answer': '33',
321: 1:      'question': '6',
321: 1:      'valid': true
321: 1:    }
321: 1:  ],
321: 1:  'level': 12,
321: 1:  'nextQuestion': '7',
321: 1:  'questions': [
321: 1:    '1',
321: 1:    '2',
321: 1:    '3',
321: 1:    '4',
321: 1:    '5',
321: 1:    '6',
321: 1:    '7'
321: 1:  ]
321: 1:}
321: 1:Scores: 31331
321: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55']')
321: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
322: 1:BoardData {
322: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
322: 1:  'expectedAnswer': '99',
322: 1:  'history': [
322: 1:    {
322: 1:      'answer': '2',
322: 1:      'question': '1',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': '4',
322: 1:      'question': '2',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': '6',
322: 1:      'question': '3',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': '8',
322: 1:      'question': '4',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': '11',
322: 1:      'question': '5',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': '33',
322: 1:      'question': '6',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': '55',
322: 1:      'question': '7',
322: 1:      'valid': true
322: 1:    }
322: 1:  ],
322: 1:  'level': 12,
322: 1:  'nextQuestion': '9',
322: 1:  'questions': [
322: 1:    '1',
322: 1:    '2',
322: 1:    '3',
322: 1:    '4',
322: 1:    '5',
322: 1:    '6',
322: 1:    '7',
322: 1:    '9'
322: 1:  ]
322: 1:}
322: 1:Scores: 31345
322: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99']')
322: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
323: 1:BoardData {
323: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
323: 1:  'expectedAnswer': '11',
323: 1:  'history': [
323: 1:    {
323: 1:      'answer': '2',
323: 1:      'question': '1',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': '4',
323: 1:      'question': '2',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': '6',
323: 1:      'question': '3',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': '8',
323: 1:      'question': '4',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': '11',
323: 1:      'question': '5',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': '33',
323: 1:      'question': '6',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': '55',
323: 1:      'question': '7',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': '99',
323: 1:      'question': '9',
323: 1:      'valid': true
323: 1:    }
323: 1:  ],
323: 1:  'level': 12,
323: 1:  'nextQuestion': '10',
323: 1:  'questions': [
323: 1:    '1',
323: 1:    '2',
323: 1:    '3',
323: 1:    '4',
323: 1:    '5',
323: 1:    '6',
323: 1:    '7',
323: 1:    '9',
323: 1:    '10'
323: 1:  ]
323: 1:}
323: 1:Scores: 31359
323: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11']')
323: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
324: 1:BoardData {
324: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
324: 1:  'expectedAnswer': '22',
324: 1:  'history': [
324: 1:    {
324: 1:      'answer': '2',
324: 1:      'question': '1',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '4',
324: 1:      'question': '2',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '6',
324: 1:      'question': '3',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '8',
324: 1:      'question': '4',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '11',
324: 1:      'question': '5',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '33',
324: 1:      'question': '6',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '55',
324: 1:      'question': '7',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '99',
324: 1:      'question': '9',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '11',
324: 1:      'question': '10',
324: 1:      'valid': true
324: 1:    }
324: 1:  ],
324: 1:  'level': 12,
324: 1:  'nextQuestion': '11',
324: 1:  'questions': [
324: 1:    '1',
324: 1:    '2',
324: 1:    '3',
324: 1:    '4',
324: 1:    '5',
324: 1:    '6',
324: 1:    '7',
324: 1:    '9',
324: 1:    '10',
324: 1:    '11'
324: 1:  ]
324: 1:}
324: 1:Scores: 31373
324: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22']')
324: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
325: 1:BoardData {
325: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
325: 1:  'expectedAnswer': '33',
325: 1:  'history': [
325: 1:    {
325: 1:      'answer': '2',
325: 1:      'question': '1',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '4',
325: 1:      'question': '2',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '6',
325: 1:      'question': '3',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '8',
325: 1:      'question': '4',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '11',
325: 1:      'question': '5',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '33',
325: 1:      'question': '6',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '55',
325: 1:      'question': '7',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '99',
325: 1:      'question': '9',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '11',
325: 1:      'question': '10',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '22',
325: 1:      'question': '11',
325: 1:      'valid': true
325: 1:    }
325: 1:  ],
325: 1:  'level': 12,
325: 1:  'nextQuestion': '12',
325: 1:  'questions': [
325: 1:    '1',
325: 1:    '2',
325: 1:    '3',
325: 1:    '4',
325: 1:    '5',
325: 1:    '6',
325: 1:    '7',
325: 1:    '9',
325: 1:    '10',
325: 1:    '11',
325: 1:    '12'
325: 1:  ]
325: 1:}
325: 1:Scores: 31387
325: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33']')
325: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
326: 1:BoardData {
326: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
326: 1:  'expectedAnswer': '444',
326: 1:  'history': [
326: 1:    {
326: 1:      'answer': '2',
326: 1:      'question': '1',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '4',
326: 1:      'question': '2',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '6',
326: 1:      'question': '3',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '8',
326: 1:      'question': '4',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '11',
326: 1:      'question': '5',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '33',
326: 1:      'question': '6',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '55',
326: 1:      'question': '7',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '99',
326: 1:      'question': '9',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '11',
326: 1:      'question': '10',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '22',
326: 1:      'question': '11',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '33',
326: 1:      'question': '12',
326: 1:      'valid': true
326: 1:    }
326: 1:  ],
326: 1:  'level': 12,
326: 1:  'nextQuestion': '123',
326: 1:  'questions': [
326: 1:    '1',
326: 1:    '2',
326: 1:    '3',
326: 1:    '4',
326: 1:    '5',
326: 1:    '6',
326: 1:    '7',
326: 1:    '9',
326: 1:    '10',
326: 1:    '11',
326: 1:    '12',
326: 1:    '123'
326: 1:  ]
326: 1:}
326: 1:Scores: 31401
326: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444']')
326: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
327: 1:BoardData {
327: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
327: 1:  'expectedAnswer': '666',
327: 1:  'history': [
327: 1:    {
327: 1:      'answer': '2',
327: 1:      'question': '1',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '4',
327: 1:      'question': '2',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '6',
327: 1:      'question': '3',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '8',
327: 1:      'question': '4',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '11',
327: 1:      'question': '5',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '33',
327: 1:      'question': '6',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '55',
327: 1:      'question': '7',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '99',
327: 1:      'question': '9',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '11',
327: 1:      'question': '10',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '22',
327: 1:      'question': '11',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '33',
327: 1:      'question': '12',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '444',
327: 1:      'question': '123',
327: 1:      'valid': true
327: 1:    }
327: 1:  ],
327: 1:  'level': 12,
327: 1:  'nextQuestion': '234',
327: 1:  'questions': [
327: 1:    '1',
327: 1:    '2',
327: 1:    '3',
327: 1:    '4',
327: 1:    '5',
327: 1:    '6',
327: 1:    '7',
327: 1:    '9',
327: 1:    '10',
327: 1:    '11',
327: 1:    '12',
327: 1:    '123',
327: 1:    '234'
327: 1:  ]
327: 1:}
327: 1:Scores: 31415
327: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666']')
327: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
328: 1:BoardData {
328: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
328: 1:  'expectedAnswer': '888',
328: 1:  'history': [
328: 1:    {
328: 1:      'answer': '2',
328: 1:      'question': '1',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '4',
328: 1:      'question': '2',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '6',
328: 1:      'question': '3',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '8',
328: 1:      'question': '4',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '11',
328: 1:      'question': '5',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '33',
328: 1:      'question': '6',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '55',
328: 1:      'question': '7',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '99',
328: 1:      'question': '9',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '11',
328: 1:      'question': '10',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '22',
328: 1:      'question': '11',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '33',
328: 1:      'question': '12',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '444',
328: 1:      'question': '123',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '666',
328: 1:      'question': '234',
328: 1:      'valid': true
328: 1:    }
328: 1:  ],
328: 1:  'level': 12,
328: 1:  'nextQuestion': '345',
328: 1:  'questions': [
328: 1:    '1',
328: 1:    '2',
328: 1:    '3',
328: 1:    '4',
328: 1:    '5',
328: 1:    '6',
328: 1:    '7',
328: 1:    '9',
328: 1:    '10',
328: 1:    '11',
328: 1:    '12',
328: 1:    '123',
328: 1:    '234',
328: 1:    '345'
328: 1:  ]
328: 1:}
328: 1:Scores: 31429
328: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888']')
328: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
329: 1:BoardData {
329: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
329: 1:  'expectedAnswer': '1221',
329: 1:  'history': [
329: 1:    {
329: 1:      'answer': '2',
329: 1:      'question': '1',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '4',
329: 1:      'question': '2',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '6',
329: 1:      'question': '3',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '8',
329: 1:      'question': '4',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '11',
329: 1:      'question': '5',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '33',
329: 1:      'question': '6',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '55',
329: 1:      'question': '7',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '99',
329: 1:      'question': '9',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '11',
329: 1:      'question': '10',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '22',
329: 1:      'question': '11',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '33',
329: 1:      'question': '12',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '444',
329: 1:      'question': '123',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '666',
329: 1:      'question': '234',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '888',
329: 1:      'question': '345',
329: 1:      'valid': true
329: 1:    }
329: 1:  ],
329: 1:  'level': 12,
329: 1:  'nextQuestion': '456',
329: 1:  'questions': [
329: 1:    '1',
329: 1:    '2',
329: 1:    '3',
329: 1:    '4',
329: 1:    '5',
329: 1:    '6',
329: 1:    '7',
329: 1:    '9',
329: 1:    '10',
329: 1:    '11',
329: 1:    '12',
329: 1:    '123',
329: 1:    '234',
329: 1:    '345',
329: 1:    '456'
329: 1:  ]
329: 1:}
329: 1:Scores: 31443
329: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221']')
329: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
330: 1:BoardData {
330: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
330: 1:  'expectedAnswer': '3663',
330: 1:  'history': [
330: 1:    {
330: 1:      'answer': '2',
330: 1:      'question': '1',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '4',
330: 1:      'question': '2',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '6',
330: 1:      'question': '3',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '8',
330: 1:      'question': '4',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '11',
330: 1:      'question': '5',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '33',
330: 1:      'question': '6',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '55',
330: 1:      'question': '7',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '99',
330: 1:      'question': '9',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '11',
330: 1:      'question': '10',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '22',
330: 1:      'question': '11',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '33',
330: 1:      'question': '12',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '444',
330: 1:      'question': '123',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '666',
330: 1:      'question': '234',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '888',
330: 1:      'question': '345',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '1221',
330: 1:      'question': '456',
330: 1:      'valid': true
330: 1:    }
330: 1:  ],
330: 1:  'level': 12,
330: 1:  'nextQuestion': '567',
330: 1:  'questions': [
330: 1:    '1',
330: 1:    '2',
330: 1:    '3',
330: 1:    '4',
330: 1:    '5',
330: 1:    '6',
330: 1:    '7',
330: 1:    '9',
330: 1:    '10',
330: 1:    '11',
330: 1:    '12',
330: 1:    '123',
330: 1:    '234',
330: 1:    '345',
330: 1:    '456',
330: 1:    '567'
330: 1:  ]
330: 1:}
330: 1:Scores: 31457
330: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663']')
330: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
331: 1:BoardData {
331: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
331: 1:  'expectedAnswer': '23232',
331: 1:  'history': [
331: 1:    {
331: 1:      'answer': '2',
331: 1:      'question': '1',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '4',
331: 1:      'question': '2',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '6',
331: 1:      'question': '3',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '8',
331: 1:      'question': '4',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '11',
331: 1:      'question': '5',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '33',
331: 1:      'question': '6',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '55',
331: 1:      'question': '7',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '99',
331: 1:      'question': '9',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '11',
331: 1:      'question': '10',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '22',
331: 1:      'question': '11',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '33',
331: 1:      'question': '12',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '444',
331: 1:      'question': '123',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '666',
331: 1:      'question': '234',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '888',
331: 1:      'question': '345',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '1221',
331: 1:      'question': '456',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '3663',
331: 1:      'question': '567',
331: 1:      'valid': true
331: 1:    }
331: 1:  ],
331: 1:  'level': 12,
331: 1:  'nextQuestion': '678',
331: 1:  'questions': [
331: 1:    '1',
331: 1:    '2',
331: 1:    '3',
331: 1:    '4',
331: 1:    '5',
331: 1:    '6',
331: 1:    '7',
331: 1:    '9',
331: 1:    '10',
331: 1:    '11',
331: 1:    '12',
331: 1:    '123',
331: 1:    '234',
331: 1:    '345',
331: 1:    '456',
331: 1:    '567',
331: 1:    '678'
331: 1:  ]
331: 1:}
331: 1:Scores: 31471
331: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232']')
331: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
332: 1:BoardData {
332: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
332: 1:  'expectedAnswer': '66066',
332: 1:  'history': [
332: 1:    {
332: 1:      'answer': '2',
332: 1:      'question': '1',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': '4',
332: 1:      'question': '2',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': '6',
332: 1:      'question': '3',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': '8',
332: 1:      'question': '4',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': '11',
332: 1:      'question': '5',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': '33',
332: 1:      'question': '6',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': '55',
332: 1:      'question': '7',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': '99',
332: 1:      'question': '9',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': '11',
332: 1:      'question': '10',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': '22',
332: 1:      'question': '11',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': '33',
332: 1:      'question': '12',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': '444',
332: 1:      'question': '123',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': '666',
332: 1:      'question': '234',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': '888',
332: 1:      'question': '345',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': '1221',
332: 1:      'question': '456',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': '3663',
332: 1:      'question': '567',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': '23232',
332: 1:      'question': '678',
332: 1:      'valid': true
332: 1:    }
332: 1:  ],
332: 1:  'level': 12,
332: 1:  'nextQuestion': '789',
332: 1:  'questions': [
332: 1:    '1',
332: 1:    '2',
332: 1:    '3',
332: 1:    '4',
332: 1:    '5',
332: 1:    '6',
332: 1:    '7',
332: 1:    '9',
332: 1:    '10',
332: 1:    '11',
332: 1:    '12',
332: 1:    '123',
332: 1:    '234',
332: 1:    '345',
332: 1:    '456',
332: 1:    '567',
332: 1:    '678',
332: 1:    '789'
332: 1:  ]
332: 1:}
332: 1:Scores: 31485
332: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066']')
332: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
333: 1:BoardData {
333: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
333: 1:  'expectedAnswer': '5555',
333: 1:  'history': [
333: 1:    {
333: 1:      'answer': '2',
333: 1:      'question': '1',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': '4',
333: 1:      'question': '2',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': '6',
333: 1:      'question': '3',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': '8',
333: 1:      'question': '4',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': '11',
333: 1:      'question': '5',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': '33',
333: 1:      'question': '6',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': '55',
333: 1:      'question': '7',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': '99',
333: 1:      'question': '9',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': '11',
333: 1:      'question': '10',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': '22',
333: 1:      'question': '11',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': '33',
333: 1:      'question': '12',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': '444',
333: 1:      'question': '123',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': '666',
333: 1:      'question': '234',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': '888',
333: 1:      'question': '345',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': '1221',
333: 1:      'question': '456',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': '3663',
333: 1:      'question': '567',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': '23232',
333: 1:      'question': '678',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': '66066',
333: 1:      'question': '789',
333: 1:      'valid': true
333: 1:    }
333: 1:  ],
333: 1:  'level': 12,
333: 1:  'nextQuestion': '1234',
333: 1:  'questions': [
333: 1:    '1',
333: 1:    '2',
333: 1:    '3',
333: 1:    '4',
333: 1:    '5',
333: 1:    '6',
333: 1:    '7',
333: 1:    '9',
333: 1:    '10',
333: 1:    '11',
333: 1:    '12',
333: 1:    '123',
333: 1:    '234',
333: 1:    '345',
333: 1:    '456',
333: 1:    '567',
333: 1:    '678',
333: 1:    '789',
333: 1:    '1234'
333: 1:  ]
333: 1:}
333: 1:Scores: 31499
333: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555']')
333: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
334: 1:BoardData {
334: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
334: 1:  'expectedAnswer': '7777',
334: 1:  'history': [
334: 1:    {
334: 1:      'answer': '2',
334: 1:      'question': '1',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': '4',
334: 1:      'question': '2',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': '6',
334: 1:      'question': '3',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': '8',
334: 1:      'question': '4',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': '11',
334: 1:      'question': '5',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': '33',
334: 1:      'question': '6',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': '55',
334: 1:      'question': '7',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': '99',
334: 1:      'question': '9',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': '11',
334: 1:      'question': '10',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': '22',
334: 1:      'question': '11',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': '33',
334: 1:      'question': '12',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': '444',
334: 1:      'question': '123',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': '666',
334: 1:      'question': '234',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': '888',
334: 1:      'question': '345',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': '1221',
334: 1:      'question': '456',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': '3663',
334: 1:      'question': '567',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': '23232',
334: 1:      'question': '678',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': '66066',
334: 1:      'question': '789',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': '5555',
334: 1:      'question': '1234',
334: 1:      'valid': true
334: 1:    }
334: 1:  ],
334: 1:  'level': 12,
334: 1:  'nextQuestion': '2345',
334: 1:  'questions': [
334: 1:    '1',
334: 1:    '2',
334: 1:    '3',
334: 1:    '4',
334: 1:    '5',
334: 1:    '6',
334: 1:    '7',
334: 1:    '9',
334: 1:    '10',
334: 1:    '11',
334: 1:    '12',
334: 1:    '123',
334: 1:    '234',
334: 1:    '345',
334: 1:    '456',
334: 1:    '567',
334: 1:    '678',
334: 1:    '789',
334: 1:    '1234',
334: 1:    '2345'
334: 1:  ]
334: 1:}
334: 1:Scores: 31513
334: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777']')
334: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
335: 1:BoardData {
335: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
335: 1:  'expectedAnswer': '9999',
335: 1:  'history': [
335: 1:    {
335: 1:      'answer': '2',
335: 1:      'question': '1',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': '4',
335: 1:      'question': '2',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': '6',
335: 1:      'question': '3',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': '8',
335: 1:      'question': '4',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': '11',
335: 1:      'question': '5',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': '33',
335: 1:      'question': '6',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': '55',
335: 1:      'question': '7',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': '99',
335: 1:      'question': '9',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': '11',
335: 1:      'question': '10',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': '22',
335: 1:      'question': '11',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': '33',
335: 1:      'question': '12',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': '444',
335: 1:      'question': '123',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': '666',
335: 1:      'question': '234',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': '888',
335: 1:      'question': '345',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': '1221',
335: 1:      'question': '456',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': '3663',
335: 1:      'question': '567',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': '23232',
335: 1:      'question': '678',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': '66066',
335: 1:      'question': '789',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': '5555',
335: 1:      'question': '1234',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': '7777',
335: 1:      'question': '2345',
335: 1:      'valid': true
335: 1:    }
335: 1:  ],
335: 1:  'level': 12,
335: 1:  'nextQuestion': '3456',
335: 1:  'questions': [
335: 1:    '1',
335: 1:    '2',
335: 1:    '3',
335: 1:    '4',
335: 1:    '5',
335: 1:    '6',
335: 1:    '7',
335: 1:    '9',
335: 1:    '10',
335: 1:    '11',
335: 1:    '12',
335: 1:    '123',
335: 1:    '234',
335: 1:    '345',
335: 1:    '456',
335: 1:    '567',
335: 1:    '678',
335: 1:    '789',
335: 1:    '1234',
335: 1:    '2345',
335: 1:    '3456'
335: 1:  ]
335: 1:}
335: 1:Scores: 31527
335: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999']')
335: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
336: 1:BoardData {
336: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
336: 1:  'expectedAnswer': '12221',
336: 1:  'history': [
336: 1:    {
336: 1:      'answer': '2',
336: 1:      'question': '1',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': '4',
336: 1:      'question': '2',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': '6',
336: 1:      'question': '3',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': '8',
336: 1:      'question': '4',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': '11',
336: 1:      'question': '5',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': '33',
336: 1:      'question': '6',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': '55',
336: 1:      'question': '7',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': '99',
336: 1:      'question': '9',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': '11',
336: 1:      'question': '10',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': '22',
336: 1:      'question': '11',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': '33',
336: 1:      'question': '12',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': '444',
336: 1:      'question': '123',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': '666',
336: 1:      'question': '234',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': '888',
336: 1:      'question': '345',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': '1221',
336: 1:      'question': '456',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': '3663',
336: 1:      'question': '567',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': '23232',
336: 1:      'question': '678',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': '66066',
336: 1:      'question': '789',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': '5555',
336: 1:      'question': '1234',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': '7777',
336: 1:      'question': '2345',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': '9999',
336: 1:      'question': '3456',
336: 1:      'valid': true
336: 1:    }
336: 1:  ],
336: 1:  'level': 12,
336: 1:  'nextQuestion': '4567',
336: 1:  'questions': [
336: 1:    '1',
336: 1:    '2',
336: 1:    '3',
336: 1:    '4',
336: 1:    '5',
336: 1:    '6',
336: 1:    '7',
336: 1:    '9',
336: 1:    '10',
336: 1:    '11',
336: 1:    '12',
336: 1:    '123',
336: 1:    '234',
336: 1:    '345',
336: 1:    '456',
336: 1:    '567',
336: 1:    '678',
336: 1:    '789',
336: 1:    '1234',
336: 1:    '2345',
336: 1:    '3456',
336: 1:    '4567'
336: 1:  ]
336: 1:}
336: 1:Scores: 31541
336: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221']')
336: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
337: 1:BoardData {
337: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
337: 1:  'expectedAnswer': '48884',
337: 1:  'history': [
337: 1:    {
337: 1:      'answer': '2',
337: 1:      'question': '1',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '4',
337: 1:      'question': '2',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '6',
337: 1:      'question': '3',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '8',
337: 1:      'question': '4',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '11',
337: 1:      'question': '5',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '33',
337: 1:      'question': '6',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '55',
337: 1:      'question': '7',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '99',
337: 1:      'question': '9',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '11',
337: 1:      'question': '10',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '22',
337: 1:      'question': '11',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '33',
337: 1:      'question': '12',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '444',
337: 1:      'question': '123',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '666',
337: 1:      'question': '234',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '888',
337: 1:      'question': '345',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '1221',
337: 1:      'question': '456',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '3663',
337: 1:      'question': '567',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '23232',
337: 1:      'question': '678',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '66066',
337: 1:      'question': '789',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '5555',
337: 1:      'question': '1234',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '7777',
337: 1:      'question': '2345',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '9999',
337: 1:      'question': '3456',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '12221',
337: 1:      'question': '4567',
337: 1:      'valid': true
337: 1:    }
337: 1:  ],
337: 1:  'level': 12,
337: 1:  'nextQuestion': '5678',
337: 1:  'questions': [
337: 1:    '1',
337: 1:    '2',
337: 1:    '3',
337: 1:    '4',
337: 1:    '5',
337: 1:    '6',
337: 1:    '7',
337: 1:    '9',
337: 1:    '10',
337: 1:    '11',
337: 1:    '12',
337: 1:    '123',
337: 1:    '234',
337: 1:    '345',
337: 1:    '456',
337: 1:    '567',
337: 1:    '678',
337: 1:    '789',
337: 1:    '1234',
337: 1:    '2345',
337: 1:    '3456',
337: 1:    '4567',
337: 1:    '5678'
337: 1:  ]
337: 1:}
337: 1:Scores: 31555
337: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221', '48884']')
337: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
338: 1:BoardData {
338: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
338: 1:  'expectedAnswer': '993399',
338: 1:  'history': [
338: 1:    {
338: 1:      'answer': '2',
338: 1:      'question': '1',
338: 1:      'valid': true
338: 1:    },
338: 1:    {
338: 1:      'answer': '4',
338: 1:      'question': '2',
338: 1:      'valid': true
338: 1:    },
338: 1:    {
338: 1:      'answer': '6',
338: 1:      'question': '3',
338: 1:      'valid': true
338: 1:    },
338: 1:    {
338: 1:      'answer': '8',
338: 1:      'question': '4',
338: 1:      'valid': true
338: 1:    },
338: 1:    {
338: 1:      'answer': '11',
338: 1:      'question': '5',
338: 1:      'valid': true
338: 1:    },
338: 1:    {
338: 1:      'answer': '33',
338: 1:      'question': '6',
338: 1:      'valid': true
338: 1:    },
338: 1:    {
338: 1:      'answer': '55',
338: 1:      'question': '7',
338: 1:      'valid': true
338: 1:    },
338: 1:    {
338: 1:      'answer': '99',
338: 1:      'question': '9',
338: 1:      'valid': true
338: 1:    },
338: 1:    {
338: 1:      'answer': '11',
338: 1:      'question': '10',
338: 1:      'valid': true
338: 1:    },
338: 1:    {
338: 1:      'answer': '22',
338: 1:      'question': '11',
338: 1:      'valid': true
338: 1:    },
338: 1:    {
338: 1:      'answer': '33',
338: 1:      'question': '12',
338: 1:      'valid': true
338: 1:    },
338: 1:    {
338: 1:      'answer': '444',
338: 1:      'question': '123',
338: 1:      'valid': true
338: 1:    },
338: 1:    {
338: 1:      'answer': '666',
338: 1:      'question': '234',
338: 1:      'valid': true
338: 1:    },
338: 1:    {
338: 1:      'answer': '888',
338: 1:      'question': '345',
338: 1:      'valid': true
338: 1:    },
338: 1:    {
338: 1:      'answer': '1221',
338: 1:      'question': '456',
338: 1:      'valid': true
338: 1:    },
338: 1:    {
338: 1:      'answer': '3663',
338: 1:      'question': '567',
338: 1:      'valid': true
338: 1:    },
338: 1:    {
338: 1:      'answer': '23232',
338: 1:      'question': '678',
338: 1:      'valid': true
338: 1:    },
338: 1:    {
338: 1:      'answer': '66066',
338: 1:      'question': '789',
338: 1:      'valid': true
338: 1:    },
338: 1:    {
338: 1:      'answer': '5555',
338: 1:      'question': '1234',
338: 1:      'valid': true
338: 1:    },
338: 1:    {
338: 1:      'answer': '7777',
338: 1:      'question': '2345',
338: 1:      'valid': true
338: 1:    },
338: 1:    {
338: 1:      'answer': '9999',
338: 1:      'question': '3456',
338: 1:      'valid': true
338: 1:    },
338: 1:    {
338: 1:      'answer': '12221',
338: 1:      'question': '4567',
338: 1:      'valid': true
338: 1:    },
338: 1:    {
338: 1:      'answer': '48884',
338: 1:      'question': '5678',
338: 1:      'valid': true
338: 1:    }
338: 1:  ],
338: 1:  'level': 12,
338: 1:  'nextQuestion': '6789',
338: 1:  'questions': [
338: 1:    '1',
338: 1:    '2',
338: 1:    '3',
338: 1:    '4',
338: 1:    '5',
338: 1:    '6',
338: 1:    '7',
338: 1:    '9',
338: 1:    '10',
338: 1:    '11',
338: 1:    '12',
338: 1:    '123',
338: 1:    '234',
338: 1:    '345',
338: 1:    '456',
338: 1:    '567',
338: 1:    '678',
338: 1:    '789',
338: 1:    '1234',
338: 1:    '2345',
338: 1:    '3456',
338: 1:    '4567',
338: 1:    '5678',
338: 1:    '6789'
338: 1:  ]
338: 1:}
338: 1:Scores: 31569
338: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221', '48884', '993399']')
338: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
339: 1:BoardData {
339: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
339: 1:  'expectedAnswer': '993399',
339: 1:  'history': [
339: 1:    {
339: 1:      'answer': '2',
339: 1:      'question': '1',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '4',
339: 1:      'question': '2',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '6',
339: 1:      'question': '3',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '8',
339: 1:      'question': '4',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '11',
339: 1:      'question': '5',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '33',
339: 1:      'question': '6',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '55',
339: 1:      'question': '7',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '99',
339: 1:      'question': '9',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '11',
339: 1:      'question': '10',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '22',
339: 1:      'question': '11',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '33',
339: 1:      'question': '12',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '444',
339: 1:      'question': '123',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '666',
339: 1:      'question': '234',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '888',
339: 1:      'question': '345',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '1221',
339: 1:      'question': '456',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '3663',
339: 1:      'question': '567',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '23232',
339: 1:      'question': '678',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '66066',
339: 1:      'question': '789',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '5555',
339: 1:      'question': '1234',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '7777',
339: 1:      'question': '2345',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '9999',
339: 1:      'question': '3456',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '12221',
339: 1:      'question': '4567',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '48884',
339: 1:      'question': '5678',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '993399',
339: 1:      'question': '6789',
339: 1:      'valid': true
339: 1:    }
339: 1:  ],
339: 1:  'level': 12,
339: 1:  'nextQuestion': '7890',
339: 1:  'questions': [
339: 1:    '1',
339: 1:    '2',
339: 1:    '3',
339: 1:    '4',
339: 1:    '5',
339: 1:    '6',
339: 1:    '7',
339: 1:    '9',
339: 1:    '10',
339: 1:    '11',
339: 1:    '12',
339: 1:    '123',
339: 1:    '234',
339: 1:    '345',
339: 1:    '456',
339: 1:    '567',
339: 1:    '678',
339: 1:    '789',
339: 1:    '1234',
339: 1:    '2345',
339: 1:    '3456',
339: 1:    '4567',
339: 1:    '5678',
339: 1:    '6789',
339: 1:    '7890'
339: 1:  ]
339: 1:}
339: 1:Scores: 31583
339: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221', '48884', '993399', '993399']')
339: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
340: 1:BoardData {
340: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
340: 1:  'expectedAnswer': '66666',
340: 1:  'history': [
340: 1:    {
340: 1:      'answer': '2',
340: 1:      'question': '1',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '4',
340: 1:      'question': '2',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '6',
340: 1:      'question': '3',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '8',
340: 1:      'question': '4',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '11',
340: 1:      'question': '5',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '33',
340: 1:      'question': '6',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '55',
340: 1:      'question': '7',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '99',
340: 1:      'question': '9',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '11',
340: 1:      'question': '10',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '22',
340: 1:      'question': '11',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '33',
340: 1:      'question': '12',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '444',
340: 1:      'question': '123',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '666',
340: 1:      'question': '234',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '888',
340: 1:      'question': '345',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '1221',
340: 1:      'question': '456',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '3663',
340: 1:      'question': '567',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '23232',
340: 1:      'question': '678',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '66066',
340: 1:      'question': '789',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '5555',
340: 1:      'question': '1234',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '7777',
340: 1:      'question': '2345',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '9999',
340: 1:      'question': '3456',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '12221',
340: 1:      'question': '4567',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '48884',
340: 1:      'question': '5678',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '993399',
340: 1:      'question': '6789',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '993399',
340: 1:      'question': '7890',
340: 1:      'valid': true
340: 1:    }
340: 1:  ],
340: 1:  'level': 12,
340: 1:  'nextQuestion': '12345',
340: 1:  'questions': [
340: 1:    '1',
340: 1:    '2',
340: 1:    '3',
340: 1:    '4',
340: 1:    '5',
340: 1:    '6',
340: 1:    '7',
340: 1:    '9',
340: 1:    '10',
340: 1:    '11',
340: 1:    '12',
340: 1:    '123',
340: 1:    '234',
340: 1:    '345',
340: 1:    '456',
340: 1:    '567',
340: 1:    '678',
340: 1:    '789',
340: 1:    '1234',
340: 1:    '2345',
340: 1:    '3456',
340: 1:    '4567',
340: 1:    '5678',
340: 1:    '6789',
340: 1:    '7890',
340: 1:    '12345'
340: 1:  ]
340: 1:}
340: 1:Scores: 31597
340: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221', '48884', '993399', '993399', '66666']')
340: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
341: 1:BoardData {
341: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
341: 1:  'expectedAnswer': '777777',
341: 1:  'history': [
341: 1:    {
341: 1:      'answer': '2',
341: 1:      'question': '1',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '4',
341: 1:      'question': '2',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '6',
341: 1:      'question': '3',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '8',
341: 1:      'question': '4',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '11',
341: 1:      'question': '5',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '33',
341: 1:      'question': '6',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '55',
341: 1:      'question': '7',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '99',
341: 1:      'question': '9',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '11',
341: 1:      'question': '10',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '22',
341: 1:      'question': '11',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '33',
341: 1:      'question': '12',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '444',
341: 1:      'question': '123',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '666',
341: 1:      'question': '234',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '888',
341: 1:      'question': '345',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '1221',
341: 1:      'question': '456',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '3663',
341: 1:      'question': '567',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '23232',
341: 1:      'question': '678',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '66066',
341: 1:      'question': '789',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '5555',
341: 1:      'question': '1234',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '7777',
341: 1:      'question': '2345',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '9999',
341: 1:      'question': '3456',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '12221',
341: 1:      'question': '4567',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '48884',
341: 1:      'question': '5678',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '993399',
341: 1:      'question': '6789',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '993399',
341: 1:      'question': '7890',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '66666',
341: 1:      'question': '12345',
341: 1:      'valid': true
341: 1:    }
341: 1:  ],
341: 1:  'level': 12,
341: 1:  'nextQuestion': '123456',
341: 1:  'questions': [
341: 1:    '1',
341: 1:    '2',
341: 1:    '3',
341: 1:    '4',
341: 1:    '5',
341: 1:    '6',
341: 1:    '7',
341: 1:    '9',
341: 1:    '10',
341: 1:    '11',
341: 1:    '12',
341: 1:    '123',
341: 1:    '234',
341: 1:    '345',
341: 1:    '456',
341: 1:    '567',
341: 1:    '678',
341: 1:    '789',
341: 1:    '1234',
341: 1:    '2345',
341: 1:    '3456',
341: 1:    '4567',
341: 1:    '5678',
341: 1:    '6789',
341: 1:    '7890',
341: 1:    '12345',
341: 1:    '123456'
341: 1:  ]
341: 1:}
341: 1:Scores: 31611
341: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221', '48884', '993399', '993399', '66666', '777777']')
341: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
342: 1:BoardData {
342: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
342: 1:  'expectedAnswer': '8888888',
342: 1:  'history': [
342: 1:    {
342: 1:      'answer': '2',
342: 1:      'question': '1',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '4',
342: 1:      'question': '2',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '6',
342: 1:      'question': '3',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '8',
342: 1:      'question': '4',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '11',
342: 1:      'question': '5',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '33',
342: 1:      'question': '6',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '55',
342: 1:      'question': '7',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '99',
342: 1:      'question': '9',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '11',
342: 1:      'question': '10',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '22',
342: 1:      'question': '11',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '33',
342: 1:      'question': '12',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '444',
342: 1:      'question': '123',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '666',
342: 1:      'question': '234',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '888',
342: 1:      'question': '345',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '1221',
342: 1:      'question': '456',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '3663',
342: 1:      'question': '567',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '23232',
342: 1:      'question': '678',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '66066',
342: 1:      'question': '789',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '5555',
342: 1:      'question': '1234',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '7777',
342: 1:      'question': '2345',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '9999',
342: 1:      'question': '3456',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '12221',
342: 1:      'question': '4567',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '48884',
342: 1:      'question': '5678',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '993399',
342: 1:      'question': '6789',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '993399',
342: 1:      'question': '7890',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '66666',
342: 1:      'question': '12345',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '777777',
342: 1:      'question': '123456',
342: 1:      'valid': true
342: 1:    }
342: 1:  ],
342: 1:  'level': 12,
342: 1:  'nextQuestion': '1234567',
342: 1:  'questions': [
342: 1:    '1',
342: 1:    '2',
342: 1:    '3',
342: 1:    '4',
342: 1:    '5',
342: 1:    '6',
342: 1:    '7',
342: 1:    '9',
342: 1:    '10',
342: 1:    '11',
342: 1:    '12',
342: 1:    '123',
342: 1:    '234',
342: 1:    '345',
342: 1:    '456',
342: 1:    '567',
342: 1:    '678',
342: 1:    '789',
342: 1:    '1234',
342: 1:    '2345',
342: 1:    '3456',
342: 1:    '4567',
342: 1:    '5678',
342: 1:    '6789',
342: 1:    '7890',
342: 1:    '12345',
342: 1:    '123456',
342: 1:    '1234567'
342: 1:  ]
342: 1:}
342: 1:Scores: 31625
342: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221', '48884', '993399', '993399', '66666', '777777', '8888888']')
342: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
343: 1:BoardData {
343: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
343: 1:  'expectedAnswer': '99999999',
343: 1:  'history': [
343: 1:    {
343: 1:      'answer': '2',
343: 1:      'question': '1',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '4',
343: 1:      'question': '2',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '6',
343: 1:      'question': '3',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '8',
343: 1:      'question': '4',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '11',
343: 1:      'question': '5',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '33',
343: 1:      'question': '6',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '55',
343: 1:      'question': '7',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '99',
343: 1:      'question': '9',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '11',
343: 1:      'question': '10',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '22',
343: 1:      'question': '11',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '33',
343: 1:      'question': '12',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '444',
343: 1:      'question': '123',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '666',
343: 1:      'question': '234',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '888',
343: 1:      'question': '345',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '1221',
343: 1:      'question': '456',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '3663',
343: 1:      'question': '567',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '23232',
343: 1:      'question': '678',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '66066',
343: 1:      'question': '789',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '5555',
343: 1:      'question': '1234',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '7777',
343: 1:      'question': '2345',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '9999',
343: 1:      'question': '3456',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '12221',
343: 1:      'question': '4567',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '48884',
343: 1:      'question': '5678',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '993399',
343: 1:      'question': '6789',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '993399',
343: 1:      'question': '7890',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '66666',
343: 1:      'question': '12345',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '777777',
343: 1:      'question': '123456',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '8888888',
343: 1:      'question': '1234567',
343: 1:      'valid': true
343: 1:    }
343: 1:  ],
343: 1:  'level': 12,
343: 1:  'nextQuestion': '12345678',
343: 1:  'questions': [
343: 1:    '1',
343: 1:    '2',
343: 1:    '3',
343: 1:    '4',
343: 1:    '5',
343: 1:    '6',
343: 1:    '7',
343: 1:    '9',
343: 1:    '10',
343: 1:    '11',
343: 1:    '12',
343: 1:    '123',
343: 1:    '234',
343: 1:    '345',
343: 1:    '456',
343: 1:    '567',
343: 1:    '678',
343: 1:    '789',
343: 1:    '1234',
343: 1:    '2345',
343: 1:    '3456',
343: 1:    '4567',
343: 1:    '5678',
343: 1:    '6789',
343: 1:    '7890',
343: 1:    '12345',
343: 1:    '123456',
343: 1:    '1234567',
343: 1:    '12345678'
343: 1:  ]
343: 1:}
343: 1:Scores: 31639
343: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221', '48884', '993399', '993399', '66666', '777777', '8888888', '99999999']')
343: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
344: 1:BoardData {
344: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
344: 1:  'expectedAnswer': '1222222221',
344: 1:  'history': [
344: 1:    {
344: 1:      'answer': '2',
344: 1:      'question': '1',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '4',
344: 1:      'question': '2',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '6',
344: 1:      'question': '3',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '8',
344: 1:      'question': '4',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '11',
344: 1:      'question': '5',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '33',
344: 1:      'question': '6',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '55',
344: 1:      'question': '7',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '99',
344: 1:      'question': '9',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '11',
344: 1:      'question': '10',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '22',
344: 1:      'question': '11',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '33',
344: 1:      'question': '12',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '444',
344: 1:      'question': '123',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '666',
344: 1:      'question': '234',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '888',
344: 1:      'question': '345',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '1221',
344: 1:      'question': '456',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '3663',
344: 1:      'question': '567',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '23232',
344: 1:      'question': '678',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '66066',
344: 1:      'question': '789',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '5555',
344: 1:      'question': '1234',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '7777',
344: 1:      'question': '2345',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '9999',
344: 1:      'question': '3456',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '12221',
344: 1:      'question': '4567',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '48884',
344: 1:      'question': '5678',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '993399',
344: 1:      'question': '6789',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '993399',
344: 1:      'question': '7890',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '66666',
344: 1:      'question': '12345',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '777777',
344: 1:      'question': '123456',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '8888888',
344: 1:      'question': '1234567',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '99999999',
344: 1:      'question': '12345678',
344: 1:      'valid': true
344: 1:    }
344: 1:  ],
344: 1:  'level': 12,
344: 1:  'nextQuestion': '123456789',
344: 1:  'questions': [
344: 1:    '1',
344: 1:    '2',
344: 1:    '3',
344: 1:    '4',
344: 1:    '5',
344: 1:    '6',
344: 1:    '7',
344: 1:    '9',
344: 1:    '10',
344: 1:    '11',
344: 1:    '12',
344: 1:    '123',
344: 1:    '234',
344: 1:    '345',
344: 1:    '456',
344: 1:    '567',
344: 1:    '678',
344: 1:    '789',
344: 1:    '1234',
344: 1:    '2345',
344: 1:    '3456',
344: 1:    '4567',
344: 1:    '5678',
344: 1:    '6789',
344: 1:    '7890',
344: 1:    '12345',
344: 1:    '123456',
344: 1:    '1234567',
344: 1:    '12345678',
344: 1:    '123456789'
344: 1:  ]
344: 1:}
344: 1:Scores: 31653
344: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221', '48884', '993399', '993399', '66666', '777777', '8888888', '99999999', '1222222221']')
344: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
345: 1:BoardData {
345: 1:  'description': 'For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444',
345: 1:  'expectedAnswer': '3344444433',
345: 1:  'history': [
345: 1:    {
345: 1:      'answer': '2',
345: 1:      'question': '1',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '4',
345: 1:      'question': '2',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '6',
345: 1:      'question': '3',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '8',
345: 1:      'question': '4',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '11',
345: 1:      'question': '5',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '33',
345: 1:      'question': '6',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '55',
345: 1:      'question': '7',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '99',
345: 1:      'question': '9',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '11',
345: 1:      'question': '10',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '22',
345: 1:      'question': '11',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '33',
345: 1:      'question': '12',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '444',
345: 1:      'question': '123',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '666',
345: 1:      'question': '234',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '888',
345: 1:      'question': '345',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '1221',
345: 1:      'question': '456',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '3663',
345: 1:      'question': '567',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '23232',
345: 1:      'question': '678',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '66066',
345: 1:      'question': '789',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '5555',
345: 1:      'question': '1234',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '7777',
345: 1:      'question': '2345',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '9999',
345: 1:      'question': '3456',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '12221',
345: 1:      'question': '4567',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '48884',
345: 1:      'question': '5678',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '993399',
345: 1:      'question': '6789',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '993399',
345: 1:      'question': '7890',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '66666',
345: 1:      'question': '12345',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '777777',
345: 1:      'question': '123456',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '8888888',
345: 1:      'question': '1234567',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '99999999',
345: 1:      'question': '12345678',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '1222222221',
345: 1:      'question': '123456789',
345: 1:      'valid': true
345: 1:    }
345: 1:  ],
345: 1:  'level': 12,
345: 1:  'nextQuestion': '1234567890',
345: 1:  'questions': [
345: 1:    '1',
345: 1:    '2',
345: 1:    '3',
345: 1:    '4',
345: 1:    '5',
345: 1:    '6',
345: 1:    '7',
345: 1:    '9',
345: 1:    '10',
345: 1:    '11',
345: 1:    '12',
345: 1:    '123',
345: 1:    '234',
345: 1:    '345',
345: 1:    '456',
345: 1:    '567',
345: 1:    '678',
345: 1:    '789',
345: 1:    '1234',
345: 1:    '2345',
345: 1:    '3456',
345: 1:    '4567',
345: 1:    '5678',
345: 1:    '6789',
345: 1:    '7890',
345: 1:    '12345',
345: 1:    '123456',
345: 1:    '1234567',
345: 1:    '12345678',
345: 1:    '123456789',
345: 1:    '1234567890'
345: 1:  ]
345: 1:}
345: 1:Scores: 31667
345: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221', '48884', '993399', '993399', '66666', '777777', '8888888', '99999999', '1222222221', '3344444433']')
345: 1:Fire Event: PassTest{complexity=45, testCount=31}
345: 1:Fire Event: NextAlgorithm{complexity=45, time=0}
------------------------------------------
346: 1:BoardData {
346: 1:  'description': 'Wait for next level. Please send 'message('StartNextLevel')' command.',
346: 1:  'history': [
346: 1:    {
346: 1:      'answer': '2',
346: 1:      'question': '1',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '4',
346: 1:      'question': '2',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '6',
346: 1:      'question': '3',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '8',
346: 1:      'question': '4',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '11',
346: 1:      'question': '5',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '33',
346: 1:      'question': '6',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '55',
346: 1:      'question': '7',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '99',
346: 1:      'question': '9',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '11',
346: 1:      'question': '10',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '22',
346: 1:      'question': '11',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '33',
346: 1:      'question': '12',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '444',
346: 1:      'question': '123',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '666',
346: 1:      'question': '234',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '888',
346: 1:      'question': '345',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '1221',
346: 1:      'question': '456',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '3663',
346: 1:      'question': '567',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '23232',
346: 1:      'question': '678',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '66066',
346: 1:      'question': '789',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '5555',
346: 1:      'question': '1234',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '7777',
346: 1:      'question': '2345',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '9999',
346: 1:      'question': '3456',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '12221',
346: 1:      'question': '4567',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '48884',
346: 1:      'question': '5678',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '993399',
346: 1:      'question': '6789',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '993399',
346: 1:      'question': '7890',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '66666',
346: 1:      'question': '12345',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '777777',
346: 1:      'question': '123456',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '8888888',
346: 1:      'question': '1234567',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '99999999',
346: 1:      'question': '12345678',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '1222222221',
346: 1:      'question': '123456789',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '3344444433',
346: 1:      'question': '1234567890',
346: 1:      'valid': true
346: 1:    }
346: 1:  ],
346: 1:  'level': 12,
346: 1:  'questions': []
346: 1:}
346: 1:Scores: 37755
346: 1:Answer: message('StartNextLevel')
346: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
347: 1:BoardData {
347: 1:  'description': 'Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction',
347: 1:  'expectedAnswer': '971',
347: 1:  'history': [],
347: 1:  'level': 13,
347: 1:  'nextQuestion': '1',
347: 1:  'questions': ['1']
347: 1:}
347: 1:Scores: 37755
347: 1:Answer: message('['971']')
347: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
348: 1:BoardData {
348: 1:  'description': 'Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction',
348: 1:  'expectedAnswer': '874',
348: 1:  'history': [{
348: 1:    'answer': '971',
348: 1:    'question': '1',
348: 1:    'valid': true
348: 1:  }],
348: 1:  'level': 13,
348: 1:  'nextQuestion': '2',
348: 1:  'questions': [
348: 1:    '1',
348: 1:    '2'
348: 1:  ]
348: 1:}
348: 1:Scores: 37775
348: 1:Answer: message('['971', '874']')
348: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
349: 1:BoardData {
349: 1:  'description': 'Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction',
349: 1:  'expectedAnswer': '787',
349: 1:  'history': [
349: 1:    {
349: 1:      'answer': '971',
349: 1:      'question': '1',
349: 1:      'valid': true
349: 1:    },
349: 1:    {
349: 1:      'answer': '874',
349: 1:      'question': '2',
349: 1:      'valid': true
349: 1:    }
349: 1:  ],
349: 1:  'level': 13,
349: 1:  'nextQuestion': '3',
349: 1:  'questions': [
349: 1:    '1',
349: 1:    '2',
349: 1:    '3'
349: 1:  ]
349: 1:}
349: 1:Scores: 37795
349: 1:Answer: message('['971', '874', '787']')
349: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
350: 1:BoardData {
350: 1:  'description': 'Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction',
350: 1:  'expectedAnswer': '709',
350: 1:  'history': [
350: 1:    {
350: 1:      'answer': '971',
350: 1:      'question': '1',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': '874',
350: 1:      'question': '2',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': '787',
350: 1:      'question': '3',
350: 1:      'valid': true
350: 1:    }
350: 1:  ],
350: 1:  'level': 13,
350: 1:  'nextQuestion': '4',
350: 1:  'questions': [
350: 1:    '1',
350: 1:    '2',
350: 1:    '3',
350: 1:    '4'
350: 1:  ]
350: 1:}
350: 1:Scores: 37815
350: 1:Answer: message('['971', '874', '787', '709']')
350: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
351: 1:BoardData {
351: 1:  'description': 'Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction',
351: 1:  'expectedAnswer': '639',
351: 1:  'history': [
351: 1:    {
351: 1:      'answer': '971',
351: 1:      'question': '1',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': '874',
351: 1:      'question': '2',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': '787',
351: 1:      'question': '3',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': '709',
351: 1:      'question': '4',
351: 1:      'valid': true
351: 1:    }
351: 1:  ],
351: 1:  'level': 13,
351: 1:  'nextQuestion': '5',
351: 1:  'questions': [
351: 1:    '1',
351: 1:    '2',
351: 1:    '3',
351: 1:    '4',
351: 1:    '5'
351: 1:  ]
351: 1:}
351: 1:Scores: 37835
351: 1:Answer: message('['971', '874', '787', '709', '639']')
351: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
352: 1:BoardData {
352: 1:  'description': 'Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction',
352: 1:  'expectedAnswer': '576',
352: 1:  'history': [
352: 1:    {
352: 1:      'answer': '971',
352: 1:      'question': '1',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': '874',
352: 1:      'question': '2',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': '787',
352: 1:      'question': '3',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': '709',
352: 1:      'question': '4',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': '639',
352: 1:      'question': '5',
352: 1:      'valid': true
352: 1:    }
352: 1:  ],
352: 1:  'level': 13,
352: 1:  'nextQuestion': '6',
352: 1:  'questions': [
352: 1:    '1',
352: 1:    '2',
352: 1:    '3',
352: 1:    '4',
352: 1:    '5',
352: 1:    '6'
352: 1:  ]
352: 1:}
352: 1:Scores: 37855
352: 1:Answer: message('['971', '874', '787', '709', '639', '576']')
352: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
353: 1:BoardData {
353: 1:  'description': 'Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction',
353: 1:  'expectedAnswer': '519',
353: 1:  'history': [
353: 1:    {
353: 1:      'answer': '971',
353: 1:      'question': '1',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': '874',
353: 1:      'question': '2',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': '787',
353: 1:      'question': '3',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': '709',
353: 1:      'question': '4',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': '639',
353: 1:      'question': '5',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': '576',
353: 1:      'question': '6',
353: 1:      'valid': true
353: 1:    }
353: 1:  ],
353: 1:  'level': 13,
353: 1:  'nextQuestion': '7',
353: 1:  'questions': [
353: 1:    '1',
353: 1:    '2',
353: 1:    '3',
353: 1:    '4',
353: 1:    '5',
353: 1:    '6',
353: 1:    '7'
353: 1:  ]
353: 1:}
353: 1:Scores: 37875
353: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519']')
353: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
354: 1:BoardData {
354: 1:  'description': 'Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction',
354: 1:  'expectedAnswer': '468',
354: 1:  'history': [
354: 1:    {
354: 1:      'answer': '971',
354: 1:      'question': '1',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': '874',
354: 1:      'question': '2',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': '787',
354: 1:      'question': '3',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': '709',
354: 1:      'question': '4',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': '639',
354: 1:      'question': '5',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': '576',
354: 1:      'question': '6',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': '519',
354: 1:      'question': '7',
354: 1:      'valid': true
354: 1:    }
354: 1:  ],
354: 1:  'level': 13,
354: 1:  'nextQuestion': '8',
354: 1:  'questions': [
354: 1:    '1',
354: 1:    '2',
354: 1:    '3',
354: 1:    '4',
354: 1:    '5',
354: 1:    '6',
354: 1:    '7',
354: 1:    '8'
354: 1:  ]
354: 1:}
354: 1:Scores: 37895
354: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468']')
354: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
355: 1:BoardData {
355: 1:  'description': 'Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction',
355: 1:  'expectedAnswer': '422',
355: 1:  'history': [
355: 1:    {
355: 1:      'answer': '971',
355: 1:      'question': '1',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '874',
355: 1:      'question': '2',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '787',
355: 1:      'question': '3',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '709',
355: 1:      'question': '4',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '639',
355: 1:      'question': '5',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '576',
355: 1:      'question': '6',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '519',
355: 1:      'question': '7',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '468',
355: 1:      'question': '8',
355: 1:      'valid': true
355: 1:    }
355: 1:  ],
355: 1:  'level': 13,
355: 1:  'nextQuestion': '9',
355: 1:  'questions': [
355: 1:    '1',
355: 1:    '2',
355: 1:    '3',
355: 1:    '4',
355: 1:    '5',
355: 1:    '6',
355: 1:    '7',
355: 1:    '8',
355: 1:    '9'
355: 1:  ]
355: 1:}
355: 1:Scores: 37915
355: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422']')
355: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
356: 1:BoardData {
356: 1:  'description': 'Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction',
356: 1:  'expectedAnswer': '380',
356: 1:  'history': [
356: 1:    {
356: 1:      'answer': '971',
356: 1:      'question': '1',
356: 1:      'valid': true
356: 1:    },
356: 1:    {
356: 1:      'answer': '874',
356: 1:      'question': '2',
356: 1:      'valid': true
356: 1:    },
356: 1:    {
356: 1:      'answer': '787',
356: 1:      'question': '3',
356: 1:      'valid': true
356: 1:    },
356: 1:    {
356: 1:      'answer': '709',
356: 1:      'question': '4',
356: 1:      'valid': true
356: 1:    },
356: 1:    {
356: 1:      'answer': '639',
356: 1:      'question': '5',
356: 1:      'valid': true
356: 1:    },
356: 1:    {
356: 1:      'answer': '576',
356: 1:      'question': '6',
356: 1:      'valid': true
356: 1:    },
356: 1:    {
356: 1:      'answer': '519',
356: 1:      'question': '7',
356: 1:      'valid': true
356: 1:    },
356: 1:    {
356: 1:      'answer': '468',
356: 1:      'question': '8',
356: 1:      'valid': true
356: 1:    },
356: 1:    {
356: 1:      'answer': '422',
356: 1:      'question': '9',
356: 1:      'valid': true
356: 1:    }
356: 1:  ],
356: 1:  'level': 13,
356: 1:  'nextQuestion': '10',
356: 1:  'questions': [
356: 1:    '1',
356: 1:    '2',
356: 1:    '3',
356: 1:    '4',
356: 1:    '5',
356: 1:    '6',
356: 1:    '7',
356: 1:    '8',
356: 1:    '9',
356: 1:    '10'
356: 1:  ]
356: 1:}
356: 1:Scores: 37935
356: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380']')
356: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
357: 1:BoardData {
357: 1:  'description': 'Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction',
357: 1:  'expectedAnswer': '342',
357: 1:  'history': [
357: 1:    {
357: 1:      'answer': '971',
357: 1:      'question': '1',
357: 1:      'valid': true
357: 1:    },
357: 1:    {
357: 1:      'answer': '874',
357: 1:      'question': '2',
357: 1:      'valid': true
357: 1:    },
357: 1:    {
357: 1:      'answer': '787',
357: 1:      'question': '3',
357: 1:      'valid': true
357: 1:    },
357: 1:    {
357: 1:      'answer': '709',
357: 1:      'question': '4',
357: 1:      'valid': true
357: 1:    },
357: 1:    {
357: 1:      'answer': '639',
357: 1:      'question': '5',
357: 1:      'valid': true
357: 1:    },
357: 1:    {
357: 1:      'answer': '576',
357: 1:      'question': '6',
357: 1:      'valid': true
357: 1:    },
357: 1:    {
357: 1:      'answer': '519',
357: 1:      'question': '7',
357: 1:      'valid': true
357: 1:    },
357: 1:    {
357: 1:      'answer': '468',
357: 1:      'question': '8',
357: 1:      'valid': true
357: 1:    },
357: 1:    {
357: 1:      'answer': '422',
357: 1:      'question': '9',
357: 1:      'valid': true
357: 1:    },
357: 1:    {
357: 1:      'answer': '380',
357: 1:      'question': '10',
357: 1:      'valid': true
357: 1:    }
357: 1:  ],
357: 1:  'level': 13,
357: 1:  'nextQuestion': '11',
357: 1:  'questions': [
357: 1:    '1',
357: 1:    '2',
357: 1:    '3',
357: 1:    '4',
357: 1:    '5',
357: 1:    '6',
357: 1:    '7',
357: 1:    '8',
357: 1:    '9',
357: 1:    '10',
357: 1:    '11'
357: 1:  ]
357: 1:}
357: 1:Scores: 37955
357: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342']')
357: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
358: 1:BoardData {
358: 1:  'description': 'Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction',
358: 1:  'expectedAnswer': '308',
358: 1:  'history': [
358: 1:    {
358: 1:      'answer': '971',
358: 1:      'question': '1',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': '874',
358: 1:      'question': '2',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': '787',
358: 1:      'question': '3',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': '709',
358: 1:      'question': '4',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': '639',
358: 1:      'question': '5',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': '576',
358: 1:      'question': '6',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': '519',
358: 1:      'question': '7',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': '468',
358: 1:      'question': '8',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': '422',
358: 1:      'question': '9',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': '380',
358: 1:      'question': '10',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': '342',
358: 1:      'question': '11',
358: 1:      'valid': true
358: 1:    }
358: 1:  ],
358: 1:  'level': 13,
358: 1:  'nextQuestion': '12',
358: 1:  'questions': [
358: 1:    '1',
358: 1:    '2',
358: 1:    '3',
358: 1:    '4',
358: 1:    '5',
358: 1:    '6',
358: 1:    '7',
358: 1:    '8',
358: 1:    '9',
358: 1:    '10',
358: 1:    '11',
358: 1:    '12'
358: 1:  ]
358: 1:}
358: 1:Scores: 37975
358: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308']')
358: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
359: 1:BoardData {
359: 1:  'description': 'Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction',
359: 1:  'expectedAnswer': '278',
359: 1:  'history': [
359: 1:    {
359: 1:      'answer': '971',
359: 1:      'question': '1',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': '874',
359: 1:      'question': '2',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': '787',
359: 1:      'question': '3',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': '709',
359: 1:      'question': '4',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': '639',
359: 1:      'question': '5',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': '576',
359: 1:      'question': '6',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': '519',
359: 1:      'question': '7',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': '468',
359: 1:      'question': '8',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': '422',
359: 1:      'question': '9',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': '380',
359: 1:      'question': '10',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': '342',
359: 1:      'question': '11',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': '308',
359: 1:      'question': '12',
359: 1:      'valid': true
359: 1:    }
359: 1:  ],
359: 1:  'level': 13,
359: 1:  'nextQuestion': '13',
359: 1:  'questions': [
359: 1:    '1',
359: 1:    '2',
359: 1:    '3',
359: 1:    '4',
359: 1:    '5',
359: 1:    '6',
359: 1:    '7',
359: 1:    '8',
359: 1:    '9',
359: 1:    '10',
359: 1:    '11',
359: 1:    '12',
359: 1:    '13'
359: 1:  ]
359: 1:}
359: 1:Scores: 37995
359: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278']')
359: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
360: 1:BoardData {
360: 1:  'description': 'Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction',
360: 1:  'expectedAnswer': '251',
360: 1:  'history': [
360: 1:    {
360: 1:      'answer': '971',
360: 1:      'question': '1',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': '874',
360: 1:      'question': '2',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': '787',
360: 1:      'question': '3',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': '709',
360: 1:      'question': '4',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': '639',
360: 1:      'question': '5',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': '576',
360: 1:      'question': '6',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': '519',
360: 1:      'question': '7',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': '468',
360: 1:      'question': '8',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': '422',
360: 1:      'question': '9',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': '380',
360: 1:      'question': '10',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': '342',
360: 1:      'question': '11',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': '308',
360: 1:      'question': '12',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': '278',
360: 1:      'question': '13',
360: 1:      'valid': true
360: 1:    }
360: 1:  ],
360: 1:  'level': 13,
360: 1:  'nextQuestion': '14',
360: 1:  'questions': [
360: 1:    '1',
360: 1:    '2',
360: 1:    '3',
360: 1:    '4',
360: 1:    '5',
360: 1:    '6',
360: 1:    '7',
360: 1:    '8',
360: 1:    '9',
360: 1:    '10',
360: 1:    '11',
360: 1:    '12',
360: 1:    '13',
360: 1:    '14'
360: 1:  ]
360: 1:}
360: 1:Scores: 38015
360: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251']')
360: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
361: 1:BoardData {
361: 1:  'description': 'Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction',
361: 1:  'expectedAnswer': '226',
361: 1:  'history': [
361: 1:    {
361: 1:      'answer': '971',
361: 1:      'question': '1',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': '874',
361: 1:      'question': '2',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': '787',
361: 1:      'question': '3',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': '709',
361: 1:      'question': '4',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': '639',
361: 1:      'question': '5',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': '576',
361: 1:      'question': '6',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': '519',
361: 1:      'question': '7',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': '468',
361: 1:      'question': '8',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': '422',
361: 1:      'question': '9',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': '380',
361: 1:      'question': '10',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': '342',
361: 1:      'question': '11',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': '308',
361: 1:      'question': '12',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': '278',
361: 1:      'question': '13',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': '251',
361: 1:      'question': '14',
361: 1:      'valid': true
361: 1:    }
361: 1:  ],
361: 1:  'level': 13,
361: 1:  'nextQuestion': '15',
361: 1:  'questions': [
361: 1:    '1',
361: 1:    '2',
361: 1:    '3',
361: 1:    '4',
361: 1:    '5',
361: 1:    '6',
361: 1:    '7',
361: 1:    '8',
361: 1:    '9',
361: 1:    '10',
361: 1:    '11',
361: 1:    '12',
361: 1:    '13',
361: 1:    '14',
361: 1:    '15'
361: 1:  ]
361: 1:}
361: 1:Scores: 38035
361: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226']')
361: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
362: 1:BoardData {
362: 1:  'description': 'Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction',
362: 1:  'expectedAnswer': '204',
362: 1:  'history': [
362: 1:    {
362: 1:      'answer': '971',
362: 1:      'question': '1',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': '874',
362: 1:      'question': '2',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': '787',
362: 1:      'question': '3',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': '709',
362: 1:      'question': '4',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': '639',
362: 1:      'question': '5',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': '576',
362: 1:      'question': '6',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': '519',
362: 1:      'question': '7',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': '468',
362: 1:      'question': '8',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': '422',
362: 1:      'question': '9',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': '380',
362: 1:      'question': '10',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': '342',
362: 1:      'question': '11',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': '308',
362: 1:      'question': '12',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': '278',
362: 1:      'question': '13',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': '251',
362: 1:      'question': '14',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': '226',
362: 1:      'question': '15',
362: 1:      'valid': true
362: 1:    }
362: 1:  ],
362: 1:  'level': 13,
362: 1:  'nextQuestion': '16',
362: 1:  'questions': [
362: 1:    '1',
362: 1:    '2',
362: 1:    '3',
362: 1:    '4',
362: 1:    '5',
362: 1:    '6',
362: 1:    '7',
362: 1:    '8',
362: 1:    '9',
362: 1:    '10',
362: 1:    '11',
362: 1:    '12',
362: 1:    '13',
362: 1:    '14',
362: 1:    '15',
362: 1:    '16'
362: 1:  ]
362: 1:}
362: 1:Scores: 38055
362: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204']')
362: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
363: 1:BoardData {
363: 1:  'description': 'Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction',
363: 1:  'expectedAnswer': '184',
363: 1:  'history': [
363: 1:    {
363: 1:      'answer': '971',
363: 1:      'question': '1',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': '874',
363: 1:      'question': '2',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': '787',
363: 1:      'question': '3',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': '709',
363: 1:      'question': '4',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': '639',
363: 1:      'question': '5',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': '576',
363: 1:      'question': '6',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': '519',
363: 1:      'question': '7',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': '468',
363: 1:      'question': '8',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': '422',
363: 1:      'question': '9',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': '380',
363: 1:      'question': '10',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': '342',
363: 1:      'question': '11',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': '308',
363: 1:      'question': '12',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': '278',
363: 1:      'question': '13',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': '251',
363: 1:      'question': '14',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': '226',
363: 1:      'question': '15',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': '204',
363: 1:      'question': '16',
363: 1:      'valid': true
363: 1:    }
363: 1:  ],
363: 1:  'level': 13,
363: 1:  'nextQuestion': '17',
363: 1:  'questions': [
363: 1:    '1',
363: 1:    '2',
363: 1:    '3',
363: 1:    '4',
363: 1:    '5',
363: 1:    '6',
363: 1:    '7',
363: 1:    '8',
363: 1:    '9',
363: 1:    '10',
363: 1:    '11',
363: 1:    '12',
363: 1:    '13',
363: 1:    '14',
363: 1:    '15',
363: 1:    '16',
363: 1:    '17'
363: 1:  ]
363: 1:}
363: 1:Scores: 38075
363: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204', '184']')
363: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
364: 1:BoardData {
364: 1:  'description': 'Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction',
364: 1:  'expectedAnswer': '166',
364: 1:  'history': [
364: 1:    {
364: 1:      'answer': '971',
364: 1:      'question': '1',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': '874',
364: 1:      'question': '2',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': '787',
364: 1:      'question': '3',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': '709',
364: 1:      'question': '4',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': '639',
364: 1:      'question': '5',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': '576',
364: 1:      'question': '6',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': '519',
364: 1:      'question': '7',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': '468',
364: 1:      'question': '8',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': '422',
364: 1:      'question': '9',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': '380',
364: 1:      'question': '10',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': '342',
364: 1:      'question': '11',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': '308',
364: 1:      'question': '12',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': '278',
364: 1:      'question': '13',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': '251',
364: 1:      'question': '14',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': '226',
364: 1:      'question': '15',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': '204',
364: 1:      'question': '16',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': '184',
364: 1:      'question': '17',
364: 1:      'valid': true
364: 1:    }
364: 1:  ],
364: 1:  'level': 13,
364: 1:  'nextQuestion': '18',
364: 1:  'questions': [
364: 1:    '1',
364: 1:    '2',
364: 1:    '3',
364: 1:    '4',
364: 1:    '5',
364: 1:    '6',
364: 1:    '7',
364: 1:    '8',
364: 1:    '9',
364: 1:    '10',
364: 1:    '11',
364: 1:    '12',
364: 1:    '13',
364: 1:    '14',
364: 1:    '15',
364: 1:    '16',
364: 1:    '17',
364: 1:    '18'
364: 1:  ]
364: 1:}
364: 1:Scores: 38095
364: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204', '184', '166']')
364: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
365: 1:BoardData {
365: 1:  'description': 'Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction',
365: 1:  'expectedAnswer': '150',
365: 1:  'history': [
365: 1:    {
365: 1:      'answer': '971',
365: 1:      'question': '1',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': '874',
365: 1:      'question': '2',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': '787',
365: 1:      'question': '3',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': '709',
365: 1:      'question': '4',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': '639',
365: 1:      'question': '5',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': '576',
365: 1:      'question': '6',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': '519',
365: 1:      'question': '7',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': '468',
365: 1:      'question': '8',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': '422',
365: 1:      'question': '9',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': '380',
365: 1:      'question': '10',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': '342',
365: 1:      'question': '11',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': '308',
365: 1:      'question': '12',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': '278',
365: 1:      'question': '13',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': '251',
365: 1:      'question': '14',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': '226',
365: 1:      'question': '15',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': '204',
365: 1:      'question': '16',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': '184',
365: 1:      'question': '17',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': '166',
365: 1:      'question': '18',
365: 1:      'valid': true
365: 1:    }
365: 1:  ],
365: 1:  'level': 13,
365: 1:  'nextQuestion': '19',
365: 1:  'questions': [
365: 1:    '1',
365: 1:    '2',
365: 1:    '3',
365: 1:    '4',
365: 1:    '5',
365: 1:    '6',
365: 1:    '7',
365: 1:    '8',
365: 1:    '9',
365: 1:    '10',
365: 1:    '11',
365: 1:    '12',
365: 1:    '13',
365: 1:    '14',
365: 1:    '15',
365: 1:    '16',
365: 1:    '17',
365: 1:    '18',
365: 1:    '19'
365: 1:  ]
365: 1:}
365: 1:Scores: 38115
365: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204', '184', '166', '150']')
365: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
366: 1:BoardData {
366: 1:  'description': 'Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction',
366: 1:  'expectedAnswer': '135',
366: 1:  'history': [
366: 1:    {
366: 1:      'answer': '971',
366: 1:      'question': '1',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': '874',
366: 1:      'question': '2',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': '787',
366: 1:      'question': '3',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': '709',
366: 1:      'question': '4',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': '639',
366: 1:      'question': '5',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': '576',
366: 1:      'question': '6',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': '519',
366: 1:      'question': '7',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': '468',
366: 1:      'question': '8',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': '422',
366: 1:      'question': '9',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': '380',
366: 1:      'question': '10',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': '342',
366: 1:      'question': '11',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': '308',
366: 1:      'question': '12',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': '278',
366: 1:      'question': '13',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': '251',
366: 1:      'question': '14',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': '226',
366: 1:      'question': '15',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': '204',
366: 1:      'question': '16',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': '184',
366: 1:      'question': '17',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': '166',
366: 1:      'question': '18',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': '150',
366: 1:      'question': '19',
366: 1:      'valid': true
366: 1:    }
366: 1:  ],
366: 1:  'level': 13,
366: 1:  'nextQuestion': '20',
366: 1:  'questions': [
366: 1:    '1',
366: 1:    '2',
366: 1:    '3',
366: 1:    '4',
366: 1:    '5',
366: 1:    '6',
366: 1:    '7',
366: 1:    '8',
366: 1:    '9',
366: 1:    '10',
366: 1:    '11',
366: 1:    '12',
366: 1:    '13',
366: 1:    '14',
366: 1:    '15',
366: 1:    '16',
366: 1:    '17',
366: 1:    '18',
366: 1:    '19',
366: 1:    '20'
366: 1:  ]
366: 1:}
366: 1:Scores: 38135
366: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204', '184', '166', '150', '135']')
366: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
367: 1:BoardData {
367: 1:  'description': 'Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction',
367: 1:  'expectedAnswer': '122',
367: 1:  'history': [
367: 1:    {
367: 1:      'answer': '971',
367: 1:      'question': '1',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': '874',
367: 1:      'question': '2',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': '787',
367: 1:      'question': '3',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': '709',
367: 1:      'question': '4',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': '639',
367: 1:      'question': '5',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': '576',
367: 1:      'question': '6',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': '519',
367: 1:      'question': '7',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': '468',
367: 1:      'question': '8',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': '422',
367: 1:      'question': '9',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': '380',
367: 1:      'question': '10',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': '342',
367: 1:      'question': '11',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': '308',
367: 1:      'question': '12',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': '278',
367: 1:      'question': '13',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': '251',
367: 1:      'question': '14',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': '226',
367: 1:      'question': '15',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': '204',
367: 1:      'question': '16',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': '184',
367: 1:      'question': '17',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': '166',
367: 1:      'question': '18',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': '150',
367: 1:      'question': '19',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': '135',
367: 1:      'question': '20',
367: 1:      'valid': true
367: 1:    }
367: 1:  ],
367: 1:  'level': 13,
367: 1:  'nextQuestion': '21',
367: 1:  'questions': [
367: 1:    '1',
367: 1:    '2',
367: 1:    '3',
367: 1:    '4',
367: 1:    '5',
367: 1:    '6',
367: 1:    '7',
367: 1:    '8',
367: 1:    '9',
367: 1:    '10',
367: 1:    '11',
367: 1:    '12',
367: 1:    '13',
367: 1:    '14',
367: 1:    '15',
367: 1:    '16',
367: 1:    '17',
367: 1:    '18',
367: 1:    '19',
367: 1:    '20',
367: 1:    '21'
367: 1:  ]
367: 1:}
367: 1:Scores: 38155
367: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204', '184', '166', '150', '135', '122']')
367: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
368: 1:BoardData {
368: 1:  'description': 'Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction',
368: 1:  'expectedAnswer': '110',
368: 1:  'history': [
368: 1:    {
368: 1:      'answer': '971',
368: 1:      'question': '1',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': '874',
368: 1:      'question': '2',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': '787',
368: 1:      'question': '3',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': '709',
368: 1:      'question': '4',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': '639',
368: 1:      'question': '5',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': '576',
368: 1:      'question': '6',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': '519',
368: 1:      'question': '7',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': '468',
368: 1:      'question': '8',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': '422',
368: 1:      'question': '9',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': '380',
368: 1:      'question': '10',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': '342',
368: 1:      'question': '11',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': '308',
368: 1:      'question': '12',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': '278',
368: 1:      'question': '13',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': '251',
368: 1:      'question': '14',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': '226',
368: 1:      'question': '15',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': '204',
368: 1:      'question': '16',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': '184',
368: 1:      'question': '17',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': '166',
368: 1:      'question': '18',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': '150',
368: 1:      'question': '19',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': '135',
368: 1:      'question': '20',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': '122',
368: 1:      'question': '21',
368: 1:      'valid': true
368: 1:    }
368: 1:  ],
368: 1:  'level': 13,
368: 1:  'nextQuestion': '22',
368: 1:  'questions': [
368: 1:    '1',
368: 1:    '2',
368: 1:    '3',
368: 1:    '4',
368: 1:    '5',
368: 1:    '6',
368: 1:    '7',
368: 1:    '8',
368: 1:    '9',
368: 1:    '10',
368: 1:    '11',
368: 1:    '12',
368: 1:    '13',
368: 1:    '14',
368: 1:    '15',
368: 1:    '16',
368: 1:    '17',
368: 1:    '18',
368: 1:    '19',
368: 1:    '20',
368: 1:    '21',
368: 1:    '22'
368: 1:  ]
368: 1:}
368: 1:Scores: 38175
368: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204', '184', '166', '150', '135', '122', '110']')
368: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
369: 1:BoardData {
369: 1:  'description': 'Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction',
369: 1:  'expectedAnswer': '99',
369: 1:  'history': [
369: 1:    {
369: 1:      'answer': '971',
369: 1:      'question': '1',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': '874',
369: 1:      'question': '2',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': '787',
369: 1:      'question': '3',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': '709',
369: 1:      'question': '4',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': '639',
369: 1:      'question': '5',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': '576',
369: 1:      'question': '6',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': '519',
369: 1:      'question': '7',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': '468',
369: 1:      'question': '8',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': '422',
369: 1:      'question': '9',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': '380',
369: 1:      'question': '10',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': '342',
369: 1:      'question': '11',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': '308',
369: 1:      'question': '12',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': '278',
369: 1:      'question': '13',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': '251',
369: 1:      'question': '14',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': '226',
369: 1:      'question': '15',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': '204',
369: 1:      'question': '16',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': '184',
369: 1:      'question': '17',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': '166',
369: 1:      'question': '18',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': '150',
369: 1:      'question': '19',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': '135',
369: 1:      'question': '20',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': '122',
369: 1:      'question': '21',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': '110',
369: 1:      'question': '22',
369: 1:      'valid': true
369: 1:    }
369: 1:  ],
369: 1:  'level': 13,
369: 1:  'nextQuestion': '23',
369: 1:  'questions': [
369: 1:    '1',
369: 1:    '2',
369: 1:    '3',
369: 1:    '4',
369: 1:    '5',
369: 1:    '6',
369: 1:    '7',
369: 1:    '8',
369: 1:    '9',
369: 1:    '10',
369: 1:    '11',
369: 1:    '12',
369: 1:    '13',
369: 1:    '14',
369: 1:    '15',
369: 1:    '16',
369: 1:    '17',
369: 1:    '18',
369: 1:    '19',
369: 1:    '20',
369: 1:    '21',
369: 1:    '22',
369: 1:    '23'
369: 1:  ]
369: 1:}
369: 1:Scores: 38195
369: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204', '184', '166', '150', '135', '122', '110', '99']')
369: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
370: 1:BoardData {
370: 1:  'description': 'Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction',
370: 1:  'expectedAnswer': '90',
370: 1:  'history': [
370: 1:    {
370: 1:      'answer': '971',
370: 1:      'question': '1',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': '874',
370: 1:      'question': '2',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': '787',
370: 1:      'question': '3',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': '709',
370: 1:      'question': '4',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': '639',
370: 1:      'question': '5',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': '576',
370: 1:      'question': '6',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': '519',
370: 1:      'question': '7',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': '468',
370: 1:      'question': '8',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': '422',
370: 1:      'question': '9',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': '380',
370: 1:      'question': '10',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': '342',
370: 1:      'question': '11',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': '308',
370: 1:      'question': '12',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': '278',
370: 1:      'question': '13',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': '251',
370: 1:      'question': '14',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': '226',
370: 1:      'question': '15',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': '204',
370: 1:      'question': '16',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': '184',
370: 1:      'question': '17',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': '166',
370: 1:      'question': '18',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': '150',
370: 1:      'question': '19',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': '135',
370: 1:      'question': '20',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': '122',
370: 1:      'question': '21',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': '110',
370: 1:      'question': '22',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': '99',
370: 1:      'question': '23',
370: 1:      'valid': true
370: 1:    }
370: 1:  ],
370: 1:  'level': 13,
370: 1:  'nextQuestion': '24',
370: 1:  'questions': [
370: 1:    '1',
370: 1:    '2',
370: 1:    '3',
370: 1:    '4',
370: 1:    '5',
370: 1:    '6',
370: 1:    '7',
370: 1:    '8',
370: 1:    '9',
370: 1:    '10',
370: 1:    '11',
370: 1:    '12',
370: 1:    '13',
370: 1:    '14',
370: 1:    '15',
370: 1:    '16',
370: 1:    '17',
370: 1:    '18',
370: 1:    '19',
370: 1:    '20',
370: 1:    '21',
370: 1:    '22',
370: 1:    '23',
370: 1:    '24'
370: 1:  ]
370: 1:}
370: 1:Scores: 38215
370: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204', '184', '166', '150', '135', '122', '110', '99', '90']')
370: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
371: 1:BoardData {
371: 1:  'description': 'Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction',
371: 1:  'expectedAnswer': '81',
371: 1:  'history': [
371: 1:    {
371: 1:      'answer': '971',
371: 1:      'question': '1',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': '874',
371: 1:      'question': '2',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': '787',
371: 1:      'question': '3',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': '709',
371: 1:      'question': '4',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': '639',
371: 1:      'question': '5',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': '576',
371: 1:      'question': '6',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': '519',
371: 1:      'question': '7',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': '468',
371: 1:      'question': '8',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': '422',
371: 1:      'question': '9',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': '380',
371: 1:      'question': '10',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': '342',
371: 1:      'question': '11',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': '308',
371: 1:      'question': '12',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': '278',
371: 1:      'question': '13',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': '251',
371: 1:      'question': '14',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': '226',
371: 1:      'question': '15',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': '204',
371: 1:      'question': '16',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': '184',
371: 1:      'question': '17',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': '166',
371: 1:      'question': '18',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': '150',
371: 1:      'question': '19',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': '135',
371: 1:      'question': '20',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': '122',
371: 1:      'question': '21',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': '110',
371: 1:      'question': '22',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': '99',
371: 1:      'question': '23',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': '90',
371: 1:      'question': '24',
371: 1:      'valid': true
371: 1:    }
371: 1:  ],
371: 1:  'level': 13,
371: 1:  'nextQuestion': '25',
371: 1:  'questions': [
371: 1:    '1',
371: 1:    '2',
371: 1:    '3',
371: 1:    '4',
371: 1:    '5',
371: 1:    '6',
371: 1:    '7',
371: 1:    '8',
371: 1:    '9',
371: 1:    '10',
371: 1:    '11',
371: 1:    '12',
371: 1:    '13',
371: 1:    '14',
371: 1:    '15',
371: 1:    '16',
371: 1:    '17',
371: 1:    '18',
371: 1:    '19',
371: 1:    '20',
371: 1:    '21',
371: 1:    '22',
371: 1:    '23',
371: 1:    '24',
371: 1:    '25'
371: 1:  ]
371: 1:}
371: 1:Scores: 38235
371: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204', '184', '166', '150', '135', '122', '110', '99', '90', '81']')
371: 1:Fire Event: PassTest{complexity=50, testCount=25}
371: 1:Fire Event: NextAlgorithm{complexity=50, time=0}
------------------------------------------
372: 1:BoardData {
372: 1:  'description': 'Wait for next level. Please send 'message('StartNextLevel')' command.',
372: 1:  'history': [
372: 1:    {
372: 1:      'answer': '971',
372: 1:      'question': '1',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': '874',
372: 1:      'question': '2',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': '787',
372: 1:      'question': '3',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': '709',
372: 1:      'question': '4',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': '639',
372: 1:      'question': '5',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': '576',
372: 1:      'question': '6',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': '519',
372: 1:      'question': '7',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': '468',
372: 1:      'question': '8',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': '422',
372: 1:      'question': '9',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': '380',
372: 1:      'question': '10',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': '342',
372: 1:      'question': '11',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': '308',
372: 1:      'question': '12',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': '278',
372: 1:      'question': '13',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': '251',
372: 1:      'question': '14',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': '226',
372: 1:      'question': '15',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': '204',
372: 1:      'question': '16',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': '184',
372: 1:      'question': '17',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': '166',
372: 1:      'question': '18',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': '150',
372: 1:      'question': '19',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': '135',
372: 1:      'question': '20',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': '122',
372: 1:      'question': '21',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': '110',
372: 1:      'question': '22',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': '99',
372: 1:      'question': '23',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': '90',
372: 1:      'question': '24',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': '81',
372: 1:      'question': '25',
372: 1:      'valid': true
372: 1:    }
372: 1:  ],
372: 1:  'level': 13,
372: 1:  'questions': []
372: 1:}
372: 1:Scores: 45004
372: 1:Answer: message('StartNextLevel')
372: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
373: 1:BoardData {
373: 1:  'description': 'The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.',
373: 1:  'expectedAnswer': '2',
373: 1:  'history': [],
373: 1:  'level': 14,
373: 1:  'nextQuestion': '1',
373: 1:  'questions': ['1']
373: 1:}
373: 1:Scores: 45004
373: 1:Answer: message('['2']')
373: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
374: 1:BoardData {
374: 1:  'description': 'The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.',
374: 1:  'expectedAnswer': '3',
374: 1:  'history': [{
374: 1:    'answer': '2',
374: 1:    'question': '1',
374: 1:    'valid': true
374: 1:  }],
374: 1:  'level': 14,
374: 1:  'nextQuestion': '2',
374: 1:  'questions': [
374: 1:    '1',
374: 1:    '2'
374: 1:  ]
374: 1:}
374: 1:Scores: 45026
374: 1:Answer: message('['2', '3']')
374: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
375: 1:BoardData {
375: 1:  'description': 'The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.',
375: 1:  'expectedAnswer': '5',
375: 1:  'history': [
375: 1:    {
375: 1:      'answer': '2',
375: 1:      'question': '1',
375: 1:      'valid': true
375: 1:    },
375: 1:    {
375: 1:      'answer': '3',
375: 1:      'question': '2',
375: 1:      'valid': true
375: 1:    }
375: 1:  ],
375: 1:  'level': 14,
375: 1:  'nextQuestion': '3',
375: 1:  'questions': [
375: 1:    '1',
375: 1:    '2',
375: 1:    '3'
375: 1:  ]
375: 1:}
375: 1:Scores: 45048
375: 1:Answer: message('['2', '3', '5']')
375: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
376: 1:BoardData {
376: 1:  'description': 'The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.',
376: 1:  'expectedAnswer': '7',
376: 1:  'history': [
376: 1:    {
376: 1:      'answer': '2',
376: 1:      'question': '1',
376: 1:      'valid': true
376: 1:    },
376: 1:    {
376: 1:      'answer': '3',
376: 1:      'question': '2',
376: 1:      'valid': true
376: 1:    },
376: 1:    {
376: 1:      'answer': '5',
376: 1:      'question': '3',
376: 1:      'valid': true
376: 1:    }
376: 1:  ],
376: 1:  'level': 14,
376: 1:  'nextQuestion': '4',
376: 1:  'questions': [
376: 1:    '1',
376: 1:    '2',
376: 1:    '3',
376: 1:    '4'
376: 1:  ]
376: 1:}
376: 1:Scores: 45070
376: 1:Answer: message('['2', '3', '5', '7']')
376: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
377: 1:BoardData {
377: 1:  'description': 'The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.',
377: 1:  'expectedAnswer': '11',
377: 1:  'history': [
377: 1:    {
377: 1:      'answer': '2',
377: 1:      'question': '1',
377: 1:      'valid': true
377: 1:    },
377: 1:    {
377: 1:      'answer': '3',
377: 1:      'question': '2',
377: 1:      'valid': true
377: 1:    },
377: 1:    {
377: 1:      'answer': '5',
377: 1:      'question': '3',
377: 1:      'valid': true
377: 1:    },
377: 1:    {
377: 1:      'answer': '7',
377: 1:      'question': '4',
377: 1:      'valid': true
377: 1:    }
377: 1:  ],
377: 1:  'level': 14,
377: 1:  'nextQuestion': '5',
377: 1:  'questions': [
377: 1:    '1',
377: 1:    '2',
377: 1:    '3',
377: 1:    '4',
377: 1:    '5'
377: 1:  ]
377: 1:}
377: 1:Scores: 45092
377: 1:Answer: message('['2', '3', '5', '7', '11']')
377: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
378: 1:BoardData {
378: 1:  'description': 'The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.',
378: 1:  'expectedAnswer': '13',
378: 1:  'history': [
378: 1:    {
378: 1:      'answer': '2',
378: 1:      'question': '1',
378: 1:      'valid': true
378: 1:    },
378: 1:    {
378: 1:      'answer': '3',
378: 1:      'question': '2',
378: 1:      'valid': true
378: 1:    },
378: 1:    {
378: 1:      'answer': '5',
378: 1:      'question': '3',
378: 1:      'valid': true
378: 1:    },
378: 1:    {
378: 1:      'answer': '7',
378: 1:      'question': '4',
378: 1:      'valid': true
378: 1:    },
378: 1:    {
378: 1:      'answer': '11',
378: 1:      'question': '5',
378: 1:      'valid': true
378: 1:    }
378: 1:  ],
378: 1:  'level': 14,
378: 1:  'nextQuestion': '6',
378: 1:  'questions': [
378: 1:    '1',
378: 1:    '2',
378: 1:    '3',
378: 1:    '4',
378: 1:    '5',
378: 1:    '6'
378: 1:  ]
378: 1:}
378: 1:Scores: 45114
378: 1:Answer: message('['2', '3', '5', '7', '11', '13']')
378: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
379: 1:BoardData {
379: 1:  'description': 'The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.',
379: 1:  'expectedAnswer': '17',
379: 1:  'history': [
379: 1:    {
379: 1:      'answer': '2',
379: 1:      'question': '1',
379: 1:      'valid': true
379: 1:    },
379: 1:    {
379: 1:      'answer': '3',
379: 1:      'question': '2',
379: 1:      'valid': true
379: 1:    },
379: 1:    {
379: 1:      'answer': '5',
379: 1:      'question': '3',
379: 1:      'valid': true
379: 1:    },
379: 1:    {
379: 1:      'answer': '7',
379: 1:      'question': '4',
379: 1:      'valid': true
379: 1:    },
379: 1:    {
379: 1:      'answer': '11',
379: 1:      'question': '5',
379: 1:      'valid': true
379: 1:    },
379: 1:    {
379: 1:      'answer': '13',
379: 1:      'question': '6',
379: 1:      'valid': true
379: 1:    }
379: 1:  ],
379: 1:  'level': 14,
379: 1:  'nextQuestion': '7',
379: 1:  'questions': [
379: 1:    '1',
379: 1:    '2',
379: 1:    '3',
379: 1:    '4',
379: 1:    '5',
379: 1:    '6',
379: 1:    '7'
379: 1:  ]
379: 1:}
379: 1:Scores: 45136
379: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17']')
379: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
380: 1:BoardData {
380: 1:  'description': 'The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.',
380: 1:  'expectedAnswer': '19',
380: 1:  'history': [
380: 1:    {
380: 1:      'answer': '2',
380: 1:      'question': '1',
380: 1:      'valid': true
380: 1:    },
380: 1:    {
380: 1:      'answer': '3',
380: 1:      'question': '2',
380: 1:      'valid': true
380: 1:    },
380: 1:    {
380: 1:      'answer': '5',
380: 1:      'question': '3',
380: 1:      'valid': true
380: 1:    },
380: 1:    {
380: 1:      'answer': '7',
380: 1:      'question': '4',
380: 1:      'valid': true
380: 1:    },
380: 1:    {
380: 1:      'answer': '11',
380: 1:      'question': '5',
380: 1:      'valid': true
380: 1:    },
380: 1:    {
380: 1:      'answer': '13',
380: 1:      'question': '6',
380: 1:      'valid': true
380: 1:    },
380: 1:    {
380: 1:      'answer': '17',
380: 1:      'question': '7',
380: 1:      'valid': true
380: 1:    }
380: 1:  ],
380: 1:  'level': 14,
380: 1:  'nextQuestion': '8',
380: 1:  'questions': [
380: 1:    '1',
380: 1:    '2',
380: 1:    '3',
380: 1:    '4',
380: 1:    '5',
380: 1:    '6',
380: 1:    '7',
380: 1:    '8'
380: 1:  ]
380: 1:}
380: 1:Scores: 45158
380: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19']')
380: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
381: 1:BoardData {
381: 1:  'description': 'The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.',
381: 1:  'expectedAnswer': '23',
381: 1:  'history': [
381: 1:    {
381: 1:      'answer': '2',
381: 1:      'question': '1',
381: 1:      'valid': true
381: 1:    },
381: 1:    {
381: 1:      'answer': '3',
381: 1:      'question': '2',
381: 1:      'valid': true
381: 1:    },
381: 1:    {
381: 1:      'answer': '5',
381: 1:      'question': '3',
381: 1:      'valid': true
381: 1:    },
381: 1:    {
381: 1:      'answer': '7',
381: 1:      'question': '4',
381: 1:      'valid': true
381: 1:    },
381: 1:    {
381: 1:      'answer': '11',
381: 1:      'question': '5',
381: 1:      'valid': true
381: 1:    },
381: 1:    {
381: 1:      'answer': '13',
381: 1:      'question': '6',
381: 1:      'valid': true
381: 1:    },
381: 1:    {
381: 1:      'answer': '17',
381: 1:      'question': '7',
381: 1:      'valid': true
381: 1:    },
381: 1:    {
381: 1:      'answer': '19',
381: 1:      'question': '8',
381: 1:      'valid': true
381: 1:    }
381: 1:  ],
381: 1:  'level': 14,
381: 1:  'nextQuestion': '9',
381: 1:  'questions': [
381: 1:    '1',
381: 1:    '2',
381: 1:    '3',
381: 1:    '4',
381: 1:    '5',
381: 1:    '6',
381: 1:    '7',
381: 1:    '8',
381: 1:    '9'
381: 1:  ]
381: 1:}
381: 1:Scores: 45180
381: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23']')
381: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
382: 1:BoardData {
382: 1:  'description': 'The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.',
382: 1:  'expectedAnswer': '29',
382: 1:  'history': [
382: 1:    {
382: 1:      'answer': '2',
382: 1:      'question': '1',
382: 1:      'valid': true
382: 1:    },
382: 1:    {
382: 1:      'answer': '3',
382: 1:      'question': '2',
382: 1:      'valid': true
382: 1:    },
382: 1:    {
382: 1:      'answer': '5',
382: 1:      'question': '3',
382: 1:      'valid': true
382: 1:    },
382: 1:    {
382: 1:      'answer': '7',
382: 1:      'question': '4',
382: 1:      'valid': true
382: 1:    },
382: 1:    {
382: 1:      'answer': '11',
382: 1:      'question': '5',
382: 1:      'valid': true
382: 1:    },
382: 1:    {
382: 1:      'answer': '13',
382: 1:      'question': '6',
382: 1:      'valid': true
382: 1:    },
382: 1:    {
382: 1:      'answer': '17',
382: 1:      'question': '7',
382: 1:      'valid': true
382: 1:    },
382: 1:    {
382: 1:      'answer': '19',
382: 1:      'question': '8',
382: 1:      'valid': true
382: 1:    },
382: 1:    {
382: 1:      'answer': '23',
382: 1:      'question': '9',
382: 1:      'valid': true
382: 1:    }
382: 1:  ],
382: 1:  'level': 14,
382: 1:  'nextQuestion': '10',
382: 1:  'questions': [
382: 1:    '1',
382: 1:    '2',
382: 1:    '3',
382: 1:    '4',
382: 1:    '5',
382: 1:    '6',
382: 1:    '7',
382: 1:    '8',
382: 1:    '9',
382: 1:    '10'
382: 1:  ]
382: 1:}
382: 1:Scores: 45202
382: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29']')
382: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
383: 1:BoardData {
383: 1:  'description': 'The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.',
383: 1:  'expectedAnswer': '31',
383: 1:  'history': [
383: 1:    {
383: 1:      'answer': '2',
383: 1:      'question': '1',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': '3',
383: 1:      'question': '2',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': '5',
383: 1:      'question': '3',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': '7',
383: 1:      'question': '4',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': '11',
383: 1:      'question': '5',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': '13',
383: 1:      'question': '6',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': '17',
383: 1:      'question': '7',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': '19',
383: 1:      'question': '8',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': '23',
383: 1:      'question': '9',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': '29',
383: 1:      'question': '10',
383: 1:      'valid': true
383: 1:    }
383: 1:  ],
383: 1:  'level': 14,
383: 1:  'nextQuestion': '11',
383: 1:  'questions': [
383: 1:    '1',
383: 1:    '2',
383: 1:    '3',
383: 1:    '4',
383: 1:    '5',
383: 1:    '6',
383: 1:    '7',
383: 1:    '8',
383: 1:    '9',
383: 1:    '10',
383: 1:    '11'
383: 1:  ]
383: 1:}
383: 1:Scores: 45224
383: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31']')
383: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
384: 1:BoardData {
384: 1:  'description': 'The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.',
384: 1:  'expectedAnswer': '37',
384: 1:  'history': [
384: 1:    {
384: 1:      'answer': '2',
384: 1:      'question': '1',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': '3',
384: 1:      'question': '2',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': '5',
384: 1:      'question': '3',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': '7',
384: 1:      'question': '4',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': '11',
384: 1:      'question': '5',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': '13',
384: 1:      'question': '6',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': '17',
384: 1:      'question': '7',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': '19',
384: 1:      'question': '8',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': '23',
384: 1:      'question': '9',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': '29',
384: 1:      'question': '10',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': '31',
384: 1:      'question': '11',
384: 1:      'valid': true
384: 1:    }
384: 1:  ],
384: 1:  'level': 14,
384: 1:  'nextQuestion': '12',
384: 1:  'questions': [
384: 1:    '1',
384: 1:    '2',
384: 1:    '3',
384: 1:    '4',
384: 1:    '5',
384: 1:    '6',
384: 1:    '7',
384: 1:    '8',
384: 1:    '9',
384: 1:    '10',
384: 1:    '11',
384: 1:    '12'
384: 1:  ]
384: 1:}
384: 1:Scores: 45246
384: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37']')
384: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
385: 1:BoardData {
385: 1:  'description': 'The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.',
385: 1:  'expectedAnswer': '41',
385: 1:  'history': [
385: 1:    {
385: 1:      'answer': '2',
385: 1:      'question': '1',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': '3',
385: 1:      'question': '2',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': '5',
385: 1:      'question': '3',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': '7',
385: 1:      'question': '4',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': '11',
385: 1:      'question': '5',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': '13',
385: 1:      'question': '6',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': '17',
385: 1:      'question': '7',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': '19',
385: 1:      'question': '8',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': '23',
385: 1:      'question': '9',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': '29',
385: 1:      'question': '10',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': '31',
385: 1:      'question': '11',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': '37',
385: 1:      'question': '12',
385: 1:      'valid': true
385: 1:    }
385: 1:  ],
385: 1:  'level': 14,
385: 1:  'nextQuestion': '13',
385: 1:  'questions': [
385: 1:    '1',
385: 1:    '2',
385: 1:    '3',
385: 1:    '4',
385: 1:    '5',
385: 1:    '6',
385: 1:    '7',
385: 1:    '8',
385: 1:    '9',
385: 1:    '10',
385: 1:    '11',
385: 1:    '12',
385: 1:    '13'
385: 1:  ]
385: 1:}
385: 1:Scores: 45268
385: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41']')
385: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
386: 1:BoardData {
386: 1:  'description': 'The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.',
386: 1:  'expectedAnswer': '43',
386: 1:  'history': [
386: 1:    {
386: 1:      'answer': '2',
386: 1:      'question': '1',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': '3',
386: 1:      'question': '2',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': '5',
386: 1:      'question': '3',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': '7',
386: 1:      'question': '4',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': '11',
386: 1:      'question': '5',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': '13',
386: 1:      'question': '6',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': '17',
386: 1:      'question': '7',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': '19',
386: 1:      'question': '8',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': '23',
386: 1:      'question': '9',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': '29',
386: 1:      'question': '10',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': '31',
386: 1:      'question': '11',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': '37',
386: 1:      'question': '12',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': '41',
386: 1:      'question': '13',
386: 1:      'valid': true
386: 1:    }
386: 1:  ],
386: 1:  'level': 14,
386: 1:  'nextQuestion': '14',
386: 1:  'questions': [
386: 1:    '1',
386: 1:    '2',
386: 1:    '3',
386: 1:    '4',
386: 1:    '5',
386: 1:    '6',
386: 1:    '7',
386: 1:    '8',
386: 1:    '9',
386: 1:    '10',
386: 1:    '11',
386: 1:    '12',
386: 1:    '13',
386: 1:    '14'
386: 1:  ]
386: 1:}
386: 1:Scores: 45290
386: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43']')
386: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
387: 1:BoardData {
387: 1:  'description': 'The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.',
387: 1:  'expectedAnswer': '47',
387: 1:  'history': [
387: 1:    {
387: 1:      'answer': '2',
387: 1:      'question': '1',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': '3',
387: 1:      'question': '2',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': '5',
387: 1:      'question': '3',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': '7',
387: 1:      'question': '4',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': '11',
387: 1:      'question': '5',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': '13',
387: 1:      'question': '6',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': '17',
387: 1:      'question': '7',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': '19',
387: 1:      'question': '8',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': '23',
387: 1:      'question': '9',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': '29',
387: 1:      'question': '10',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': '31',
387: 1:      'question': '11',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': '37',
387: 1:      'question': '12',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': '41',
387: 1:      'question': '13',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': '43',
387: 1:      'question': '14',
387: 1:      'valid': true
387: 1:    }
387: 1:  ],
387: 1:  'level': 14,
387: 1:  'nextQuestion': '15',
387: 1:  'questions': [
387: 1:    '1',
387: 1:    '2',
387: 1:    '3',
387: 1:    '4',
387: 1:    '5',
387: 1:    '6',
387: 1:    '7',
387: 1:    '8',
387: 1:    '9',
387: 1:    '10',
387: 1:    '11',
387: 1:    '12',
387: 1:    '13',
387: 1:    '14',
387: 1:    '15'
387: 1:  ]
387: 1:}
387: 1:Scores: 45312
387: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47']')
387: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
388: 1:BoardData {
388: 1:  'description': 'The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.',
388: 1:  'expectedAnswer': '53',
388: 1:  'history': [
388: 1:    {
388: 1:      'answer': '2',
388: 1:      'question': '1',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': '3',
388: 1:      'question': '2',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': '5',
388: 1:      'question': '3',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': '7',
388: 1:      'question': '4',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': '11',
388: 1:      'question': '5',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': '13',
388: 1:      'question': '6',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': '17',
388: 1:      'question': '7',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': '19',
388: 1:      'question': '8',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': '23',
388: 1:      'question': '9',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': '29',
388: 1:      'question': '10',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': '31',
388: 1:      'question': '11',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': '37',
388: 1:      'question': '12',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': '41',
388: 1:      'question': '13',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': '43',
388: 1:      'question': '14',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': '47',
388: 1:      'question': '15',
388: 1:      'valid': true
388: 1:    }
388: 1:  ],
388: 1:  'level': 14,
388: 1:  'nextQuestion': '16',
388: 1:  'questions': [
388: 1:    '1',
388: 1:    '2',
388: 1:    '3',
388: 1:    '4',
388: 1:    '5',
388: 1:    '6',
388: 1:    '7',
388: 1:    '8',
388: 1:    '9',
388: 1:    '10',
388: 1:    '11',
388: 1:    '12',
388: 1:    '13',
388: 1:    '14',
388: 1:    '15',
388: 1:    '16'
388: 1:  ]
388: 1:}
388: 1:Scores: 45334
388: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53']')
388: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
389: 1:BoardData {
389: 1:  'description': 'The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.',
389: 1:  'expectedAnswer': '59',
389: 1:  'history': [
389: 1:    {
389: 1:      'answer': '2',
389: 1:      'question': '1',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '3',
389: 1:      'question': '2',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '5',
389: 1:      'question': '3',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '7',
389: 1:      'question': '4',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '11',
389: 1:      'question': '5',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '13',
389: 1:      'question': '6',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '17',
389: 1:      'question': '7',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '19',
389: 1:      'question': '8',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '23',
389: 1:      'question': '9',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '29',
389: 1:      'question': '10',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '31',
389: 1:      'question': '11',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '37',
389: 1:      'question': '12',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '41',
389: 1:      'question': '13',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '43',
389: 1:      'question': '14',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '47',
389: 1:      'question': '15',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '53',
389: 1:      'question': '16',
389: 1:      'valid': true
389: 1:    }
389: 1:  ],
389: 1:  'level': 14,
389: 1:  'nextQuestion': '17',
389: 1:  'questions': [
389: 1:    '1',
389: 1:    '2',
389: 1:    '3',
389: 1:    '4',
389: 1:    '5',
389: 1:    '6',
389: 1:    '7',
389: 1:    '8',
389: 1:    '9',
389: 1:    '10',
389: 1:    '11',
389: 1:    '12',
389: 1:    '13',
389: 1:    '14',
389: 1:    '15',
389: 1:    '16',
389: 1:    '17'
389: 1:  ]
389: 1:}
389: 1:Scores: 45356
389: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59']')
389: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
390: 1:BoardData {
390: 1:  'description': 'The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.',
390: 1:  'expectedAnswer': '61',
390: 1:  'history': [
390: 1:    {
390: 1:      'answer': '2',
390: 1:      'question': '1',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '3',
390: 1:      'question': '2',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '5',
390: 1:      'question': '3',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '7',
390: 1:      'question': '4',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '11',
390: 1:      'question': '5',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '13',
390: 1:      'question': '6',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '17',
390: 1:      'question': '7',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '19',
390: 1:      'question': '8',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '23',
390: 1:      'question': '9',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '29',
390: 1:      'question': '10',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '31',
390: 1:      'question': '11',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '37',
390: 1:      'question': '12',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '41',
390: 1:      'question': '13',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '43',
390: 1:      'question': '14',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '47',
390: 1:      'question': '15',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '53',
390: 1:      'question': '16',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '59',
390: 1:      'question': '17',
390: 1:      'valid': true
390: 1:    }
390: 1:  ],
390: 1:  'level': 14,
390: 1:  'nextQuestion': '18',
390: 1:  'questions': [
390: 1:    '1',
390: 1:    '2',
390: 1:    '3',
390: 1:    '4',
390: 1:    '5',
390: 1:    '6',
390: 1:    '7',
390: 1:    '8',
390: 1:    '9',
390: 1:    '10',
390: 1:    '11',
390: 1:    '12',
390: 1:    '13',
390: 1:    '14',
390: 1:    '15',
390: 1:    '16',
390: 1:    '17',
390: 1:    '18'
390: 1:  ]
390: 1:}
390: 1:Scores: 45378
390: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61']')
390: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
391: 1:BoardData {
391: 1:  'description': 'The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.',
391: 1:  'expectedAnswer': '67',
391: 1:  'history': [
391: 1:    {
391: 1:      'answer': '2',
391: 1:      'question': '1',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '3',
391: 1:      'question': '2',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '5',
391: 1:      'question': '3',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '7',
391: 1:      'question': '4',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '11',
391: 1:      'question': '5',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '13',
391: 1:      'question': '6',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '17',
391: 1:      'question': '7',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '19',
391: 1:      'question': '8',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '23',
391: 1:      'question': '9',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '29',
391: 1:      'question': '10',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '31',
391: 1:      'question': '11',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '37',
391: 1:      'question': '12',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '41',
391: 1:      'question': '13',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '43',
391: 1:      'question': '14',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '47',
391: 1:      'question': '15',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '53',
391: 1:      'question': '16',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '59',
391: 1:      'question': '17',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '61',
391: 1:      'question': '18',
391: 1:      'valid': true
391: 1:    }
391: 1:  ],
391: 1:  'level': 14,
391: 1:  'nextQuestion': '19',
391: 1:  'questions': [
391: 1:    '1',
391: 1:    '2',
391: 1:    '3',
391: 1:    '4',
391: 1:    '5',
391: 1:    '6',
391: 1:    '7',
391: 1:    '8',
391: 1:    '9',
391: 1:    '10',
391: 1:    '11',
391: 1:    '12',
391: 1:    '13',
391: 1:    '14',
391: 1:    '15',
391: 1:    '16',
391: 1:    '17',
391: 1:    '18',
391: 1:    '19'
391: 1:  ]
391: 1:}
391: 1:Scores: 45400
391: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67']')
391: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
392: 1:BoardData {
392: 1:  'description': 'The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.',
392: 1:  'expectedAnswer': '71',
392: 1:  'history': [
392: 1:    {
392: 1:      'answer': '2',
392: 1:      'question': '1',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '3',
392: 1:      'question': '2',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '5',
392: 1:      'question': '3',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '7',
392: 1:      'question': '4',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '11',
392: 1:      'question': '5',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '13',
392: 1:      'question': '6',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '17',
392: 1:      'question': '7',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '19',
392: 1:      'question': '8',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '23',
392: 1:      'question': '9',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '29',
392: 1:      'question': '10',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '31',
392: 1:      'question': '11',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '37',
392: 1:      'question': '12',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '41',
392: 1:      'question': '13',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '43',
392: 1:      'question': '14',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '47',
392: 1:      'question': '15',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '53',
392: 1:      'question': '16',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '59',
392: 1:      'question': '17',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '61',
392: 1:      'question': '18',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '67',
392: 1:      'question': '19',
392: 1:      'valid': true
392: 1:    }
392: 1:  ],
392: 1:  'level': 14,
392: 1:  'nextQuestion': '20',
392: 1:  'questions': [
392: 1:    '1',
392: 1:    '2',
392: 1:    '3',
392: 1:    '4',
392: 1:    '5',
392: 1:    '6',
392: 1:    '7',
392: 1:    '8',
392: 1:    '9',
392: 1:    '10',
392: 1:    '11',
392: 1:    '12',
392: 1:    '13',
392: 1:    '14',
392: 1:    '15',
392: 1:    '16',
392: 1:    '17',
392: 1:    '18',
392: 1:    '19',
392: 1:    '20'
392: 1:  ]
392: 1:}
392: 1:Scores: 45422
392: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71']')
392: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
393: 1:BoardData {
393: 1:  'description': 'The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.',
393: 1:  'expectedAnswer': '73',
393: 1:  'history': [
393: 1:    {
393: 1:      'answer': '2',
393: 1:      'question': '1',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': '3',
393: 1:      'question': '2',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': '5',
393: 1:      'question': '3',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': '7',
393: 1:      'question': '4',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': '11',
393: 1:      'question': '5',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': '13',
393: 1:      'question': '6',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': '17',
393: 1:      'question': '7',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': '19',
393: 1:      'question': '8',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': '23',
393: 1:      'question': '9',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': '29',
393: 1:      'question': '10',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': '31',
393: 1:      'question': '11',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': '37',
393: 1:      'question': '12',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': '41',
393: 1:      'question': '13',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': '43',
393: 1:      'question': '14',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': '47',
393: 1:      'question': '15',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': '53',
393: 1:      'question': '16',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': '59',
393: 1:      'question': '17',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': '61',
393: 1:      'question': '18',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': '67',
393: 1:      'question': '19',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': '71',
393: 1:      'question': '20',
393: 1:      'valid': true
393: 1:    }
393: 1:  ],
393: 1:  'level': 14,
393: 1:  'nextQuestion': '21',
393: 1:  'questions': [
393: 1:    '1',
393: 1:    '2',
393: 1:    '3',
393: 1:    '4',
393: 1:    '5',
393: 1:    '6',
393: 1:    '7',
393: 1:    '8',
393: 1:    '9',
393: 1:    '10',
393: 1:    '11',
393: 1:    '12',
393: 1:    '13',
393: 1:    '14',
393: 1:    '15',
393: 1:    '16',
393: 1:    '17',
393: 1:    '18',
393: 1:    '19',
393: 1:    '20',
393: 1:    '21'
393: 1:  ]
393: 1:}
393: 1:Scores: 45444
393: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', '73']')
393: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
394: 1:BoardData {
394: 1:  'description': 'The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.',
394: 1:  'expectedAnswer': '79',
394: 1:  'history': [
394: 1:    {
394: 1:      'answer': '2',
394: 1:      'question': '1',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': '3',
394: 1:      'question': '2',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': '5',
394: 1:      'question': '3',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': '7',
394: 1:      'question': '4',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': '11',
394: 1:      'question': '5',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': '13',
394: 1:      'question': '6',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': '17',
394: 1:      'question': '7',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': '19',
394: 1:      'question': '8',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': '23',
394: 1:      'question': '9',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': '29',
394: 1:      'question': '10',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': '31',
394: 1:      'question': '11',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': '37',
394: 1:      'question': '12',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': '41',
394: 1:      'question': '13',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': '43',
394: 1:      'question': '14',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': '47',
394: 1:      'question': '15',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': '53',
394: 1:      'question': '16',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': '59',
394: 1:      'question': '17',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': '61',
394: 1:      'question': '18',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': '67',
394: 1:      'question': '19',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': '71',
394: 1:      'question': '20',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': '73',
394: 1:      'question': '21',
394: 1:      'valid': true
394: 1:    }
394: 1:  ],
394: 1:  'level': 14,
394: 1:  'nextQuestion': '22',
394: 1:  'questions': [
394: 1:    '1',
394: 1:    '2',
394: 1:    '3',
394: 1:    '4',
394: 1:    '5',
394: 1:    '6',
394: 1:    '7',
394: 1:    '8',
394: 1:    '9',
394: 1:    '10',
394: 1:    '11',
394: 1:    '12',
394: 1:    '13',
394: 1:    '14',
394: 1:    '15',
394: 1:    '16',
394: 1:    '17',
394: 1:    '18',
394: 1:    '19',
394: 1:    '20',
394: 1:    '21',
394: 1:    '22'
394: 1:  ]
394: 1:}
394: 1:Scores: 45466
394: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', '73', '79']')
394: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
395: 1:BoardData {
395: 1:  'description': 'The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.',
395: 1:  'expectedAnswer': '83',
395: 1:  'history': [
395: 1:    {
395: 1:      'answer': '2',
395: 1:      'question': '1',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': '3',
395: 1:      'question': '2',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': '5',
395: 1:      'question': '3',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': '7',
395: 1:      'question': '4',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': '11',
395: 1:      'question': '5',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': '13',
395: 1:      'question': '6',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': '17',
395: 1:      'question': '7',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': '19',
395: 1:      'question': '8',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': '23',
395: 1:      'question': '9',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': '29',
395: 1:      'question': '10',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': '31',
395: 1:      'question': '11',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': '37',
395: 1:      'question': '12',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': '41',
395: 1:      'question': '13',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': '43',
395: 1:      'question': '14',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': '47',
395: 1:      'question': '15',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': '53',
395: 1:      'question': '16',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': '59',
395: 1:      'question': '17',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': '61',
395: 1:      'question': '18',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': '67',
395: 1:      'question': '19',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': '71',
395: 1:      'question': '20',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': '73',
395: 1:      'question': '21',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': '79',
395: 1:      'question': '22',
395: 1:      'valid': true
395: 1:    }
395: 1:  ],
395: 1:  'level': 14,
395: 1:  'nextQuestion': '23',
395: 1:  'questions': [
395: 1:    '1',
395: 1:    '2',
395: 1:    '3',
395: 1:    '4',
395: 1:    '5',
395: 1:    '6',
395: 1:    '7',
395: 1:    '8',
395: 1:    '9',
395: 1:    '10',
395: 1:    '11',
395: 1:    '12',
395: 1:    '13',
395: 1:    '14',
395: 1:    '15',
395: 1:    '16',
395: 1:    '17',
395: 1:    '18',
395: 1:    '19',
395: 1:    '20',
395: 1:    '21',
395: 1:    '22',
395: 1:    '23'
395: 1:  ]
395: 1:}
395: 1:Scores: 45488
395: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', '73', '79', '83']')
395: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
396: 1:BoardData {
396: 1:  'description': 'The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.',
396: 1:  'expectedAnswer': '89',
396: 1:  'history': [
396: 1:    {
396: 1:      'answer': '2',
396: 1:      'question': '1',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': '3',
396: 1:      'question': '2',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': '5',
396: 1:      'question': '3',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': '7',
396: 1:      'question': '4',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': '11',
396: 1:      'question': '5',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': '13',
396: 1:      'question': '6',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': '17',
396: 1:      'question': '7',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': '19',
396: 1:      'question': '8',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': '23',
396: 1:      'question': '9',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': '29',
396: 1:      'question': '10',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': '31',
396: 1:      'question': '11',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': '37',
396: 1:      'question': '12',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': '41',
396: 1:      'question': '13',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': '43',
396: 1:      'question': '14',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': '47',
396: 1:      'question': '15',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': '53',
396: 1:      'question': '16',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': '59',
396: 1:      'question': '17',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': '61',
396: 1:      'question': '18',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': '67',
396: 1:      'question': '19',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': '71',
396: 1:      'question': '20',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': '73',
396: 1:      'question': '21',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': '79',
396: 1:      'question': '22',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': '83',
396: 1:      'question': '23',
396: 1:      'valid': true
396: 1:    }
396: 1:  ],
396: 1:  'level': 14,
396: 1:  'nextQuestion': '24',
396: 1:  'questions': [
396: 1:    '1',
396: 1:    '2',
396: 1:    '3',
396: 1:    '4',
396: 1:    '5',
396: 1:    '6',
396: 1:    '7',
396: 1:    '8',
396: 1:    '9',
396: 1:    '10',
396: 1:    '11',
396: 1:    '12',
396: 1:    '13',
396: 1:    '14',
396: 1:    '15',
396: 1:    '16',
396: 1:    '17',
396: 1:    '18',
396: 1:    '19',
396: 1:    '20',
396: 1:    '21',
396: 1:    '22',
396: 1:    '23',
396: 1:    '24'
396: 1:  ]
396: 1:}
396: 1:Scores: 45510
396: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', '73', '79', '83', '89']')
396: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
397: 1:BoardData {
397: 1:  'description': 'The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.',
397: 1:  'expectedAnswer': '97',
397: 1:  'history': [
397: 1:    {
397: 1:      'answer': '2',
397: 1:      'question': '1',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': '3',
397: 1:      'question': '2',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': '5',
397: 1:      'question': '3',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': '7',
397: 1:      'question': '4',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': '11',
397: 1:      'question': '5',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': '13',
397: 1:      'question': '6',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': '17',
397: 1:      'question': '7',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': '19',
397: 1:      'question': '8',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': '23',
397: 1:      'question': '9',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': '29',
397: 1:      'question': '10',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': '31',
397: 1:      'question': '11',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': '37',
397: 1:      'question': '12',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': '41',
397: 1:      'question': '13',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': '43',
397: 1:      'question': '14',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': '47',
397: 1:      'question': '15',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': '53',
397: 1:      'question': '16',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': '59',
397: 1:      'question': '17',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': '61',
397: 1:      'question': '18',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': '67',
397: 1:      'question': '19',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': '71',
397: 1:      'question': '20',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': '73',
397: 1:      'question': '21',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': '79',
397: 1:      'question': '22',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': '83',
397: 1:      'question': '23',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': '89',
397: 1:      'question': '24',
397: 1:      'valid': true
397: 1:    }
397: 1:  ],
397: 1:  'level': 14,
397: 1:  'nextQuestion': '25',
397: 1:  'questions': [
397: 1:    '1',
397: 1:    '2',
397: 1:    '3',
397: 1:    '4',
397: 1:    '5',
397: 1:    '6',
397: 1:    '7',
397: 1:    '8',
397: 1:    '9',
397: 1:    '10',
397: 1:    '11',
397: 1:    '12',
397: 1:    '13',
397: 1:    '14',
397: 1:    '15',
397: 1:    '16',
397: 1:    '17',
397: 1:    '18',
397: 1:    '19',
397: 1:    '20',
397: 1:    '21',
397: 1:    '22',
397: 1:    '23',
397: 1:    '24',
397: 1:    '25'
397: 1:  ]
397: 1:}
397: 1:Scores: 45532
397: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', '73', '79', '83', '89', '97']')
397: 1:Fire Event: PassTest{complexity=55, testCount=25}
397: 1:Fire Event: NextAlgorithm{complexity=55, time=0}
------------------------------------------
398: 1:BoardData {
398: 1:  'description': 'Wait for next level. Please send 'message('StartNextLevel')' command.',
398: 1:  'history': [
398: 1:    {
398: 1:      'answer': '2',
398: 1:      'question': '1',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': '3',
398: 1:      'question': '2',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': '5',
398: 1:      'question': '3',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': '7',
398: 1:      'question': '4',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': '11',
398: 1:      'question': '5',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': '13',
398: 1:      'question': '6',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': '17',
398: 1:      'question': '7',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': '19',
398: 1:      'question': '8',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': '23',
398: 1:      'question': '9',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': '29',
398: 1:      'question': '10',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': '31',
398: 1:      'question': '11',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': '37',
398: 1:      'question': '12',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': '41',
398: 1:      'question': '13',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': '43',
398: 1:      'question': '14',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': '47',
398: 1:      'question': '15',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': '53',
398: 1:      'question': '16',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': '59',
398: 1:      'question': '17',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': '61',
398: 1:      'question': '18',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': '67',
398: 1:      'question': '19',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': '71',
398: 1:      'question': '20',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': '73',
398: 1:      'question': '21',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': '79',
398: 1:      'question': '22',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': '83',
398: 1:      'question': '23',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': '89',
398: 1:      'question': '24',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': '97',
398: 1:      'question': '25',
398: 1:      'valid': true
398: 1:    }
398: 1:  ],
398: 1:  'level': 14,
398: 1:  'questions': []
398: 1:}
398: 1:Scores: 52978
398: 1:Answer: message('StartNextLevel')
398: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
399: 1:BoardData {
399: 1:  'description': 'Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)',
399: 1:  'expectedAnswer': '0.5',
399: 1:  'history': [],
399: 1:  'level': 15,
399: 1:  'nextQuestion': '1, 2',
399: 1:  'questions': ['1, 2']
399: 1:}
399: 1:Scores: 52978
399: 1:Answer: message('['0.5']')
399: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
400: 1:BoardData {
400: 1:  'description': 'Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)',
400: 1:  'expectedAnswer': '1',
400: 1:  'history': [{
400: 1:    'answer': '0.5',
400: 1:    'question': '1, 2',
400: 1:    'valid': true
400: 1:  }],
400: 1:  'level': 15,
400: 1:  'nextQuestion': '1, 1',
400: 1:  'questions': [
400: 1:    '1, 2',
400: 1:    '1, 1'
400: 1:  ]
400: 1:}
400: 1:Scores: 52999
400: 1:Answer: message('['0.5', '1']')
400: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
401: 1:BoardData {
401: 1:  'description': 'Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)',
401: 1:  'expectedAnswer': '1',
401: 1:  'history': [
401: 1:    {
401: 1:      'answer': '0.5',
401: 1:      'question': '1, 2',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': '1',
401: 1:      'question': '1, 1',
401: 1:      'valid': true
401: 1:    }
401: 1:  ],
401: 1:  'level': 15,
401: 1:  'nextQuestion': '5, 5',
401: 1:  'questions': [
401: 1:    '1, 2',
401: 1:    '1, 1',
401: 1:    '5, 5'
401: 1:  ]
401: 1:}
401: 1:Scores: 53020
401: 1:Answer: message('['0.5', '1', '1']')
401: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
402: 1:BoardData {
402: 1:  'description': 'Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)',
402: 1:  'expectedAnswer': '11',
402: 1:  'history': [
402: 1:    {
402: 1:      'answer': '0.5',
402: 1:      'question': '1, 2',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': '1',
402: 1:      'question': '1, 1',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': '1',
402: 1:      'question': '5, 5',
402: 1:      'valid': true
402: 1:    }
402: 1:  ],
402: 1:  'level': 15,
402: 1:  'nextQuestion': '55, 5',
402: 1:  'questions': [
402: 1:    '1, 2',
402: 1:    '1, 1',
402: 1:    '5, 5',
402: 1:    '55, 5'
402: 1:  ]
402: 1:}
402: 1:Scores: 53041
402: 1:Answer: message('['0.5', '1', '1', '11']')
402: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
403: 1:BoardData {
403: 1:  'description': 'Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)',
403: 1:  'expectedAnswer': '1.25',
403: 1:  'history': [
403: 1:    {
403: 1:      'answer': '0.5',
403: 1:      'question': '1, 2',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': '1',
403: 1:      'question': '1, 1',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': '1',
403: 1:      'question': '5, 5',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': '11',
403: 1:      'question': '55, 5',
403: 1:      'valid': true
403: 1:    }
403: 1:  ],
403: 1:  'level': 15,
403: 1:  'nextQuestion': '55, 44',
403: 1:  'questions': [
403: 1:    '1, 2',
403: 1:    '1, 1',
403: 1:    '5, 5',
403: 1:    '55, 5',
403: 1:    '55, 44'
403: 1:  ]
403: 1:}
403: 1:Scores: 53062
403: 1:Answer: message('['0.5', '1', '1', '11', '1.25']')
403: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
404: 1:BoardData {
404: 1:  'description': 'Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)',
404: 1:  'expectedAnswer': '0',
404: 1:  'history': [
404: 1:    {
404: 1:      'answer': '0.5',
404: 1:      'question': '1, 2',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': '1',
404: 1:      'question': '1, 1',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': '1',
404: 1:      'question': '5, 5',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': '11',
404: 1:      'question': '55, 5',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': '1.25',
404: 1:      'question': '55, 44',
404: 1:      'valid': true
404: 1:    }
404: 1:  ],
404: 1:  'level': 15,
404: 1:  'nextQuestion': '0, 56',
404: 1:  'questions': [
404: 1:    '1, 2',
404: 1:    '1, 1',
404: 1:    '5, 5',
404: 1:    '55, 5',
404: 1:    '55, 44',
404: 1:    '0, 56'
404: 1:  ]
404: 1:}
404: 1:Scores: 53083
404: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0']')
404: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
405: 1:BoardData {
405: 1:  'description': 'Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)',
405: 1:  'expectedAnswer': '56',
405: 1:  'history': [
405: 1:    {
405: 1:      'answer': '0.5',
405: 1:      'question': '1, 2',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': '1',
405: 1:      'question': '1, 1',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': '1',
405: 1:      'question': '5, 5',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': '11',
405: 1:      'question': '55, 5',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': '1.25',
405: 1:      'question': '55, 44',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': '0',
405: 1:      'question': '0, 56',
405: 1:      'valid': true
405: 1:    }
405: 1:  ],
405: 1:  'level': 15,
405: 1:  'nextQuestion': '56, 1',
405: 1:  'questions': [
405: 1:    '1, 2',
405: 1:    '1, 1',
405: 1:    '5, 5',
405: 1:    '55, 5',
405: 1:    '55, 44',
405: 1:    '0, 56',
405: 1:    '56, 1'
405: 1:  ]
405: 1:}
405: 1:Scores: 53104
405: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56']')
405: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
406: 1:BoardData {
406: 1:  'description': 'Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)',
406: 1:  'expectedAnswer': '-0.5',
406: 1:  'history': [
406: 1:    {
406: 1:      'answer': '0.5',
406: 1:      'question': '1, 2',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': '1',
406: 1:      'question': '1, 1',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': '1',
406: 1:      'question': '5, 5',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': '11',
406: 1:      'question': '55, 5',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': '1.25',
406: 1:      'question': '55, 44',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': '0',
406: 1:      'question': '0, 56',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': '56',
406: 1:      'question': '56, 1',
406: 1:      'valid': true
406: 1:    }
406: 1:  ],
406: 1:  'level': 15,
406: 1:  'nextQuestion': '1, -2',
406: 1:  'questions': [
406: 1:    '1, 2',
406: 1:    '1, 1',
406: 1:    '5, 5',
406: 1:    '55, 5',
406: 1:    '55, 44',
406: 1:    '0, 56',
406: 1:    '56, 1',
406: 1:    '1, -2'
406: 1:  ]
406: 1:}
406: 1:Scores: 53125
406: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5']')
406: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
407: 1:BoardData {
407: 1:  'description': 'Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)',
407: 1:  'expectedAnswer': '-0.5',
407: 1:  'history': [
407: 1:    {
407: 1:      'answer': '0.5',
407: 1:      'question': '1, 2',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': '1',
407: 1:      'question': '1, 1',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': '1',
407: 1:      'question': '5, 5',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': '11',
407: 1:      'question': '55, 5',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': '1.25',
407: 1:      'question': '55, 44',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': '0',
407: 1:      'question': '0, 56',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': '56',
407: 1:      'question': '56, 1',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': '-0.5',
407: 1:      'question': '1, -2',
407: 1:      'valid': true
407: 1:    }
407: 1:  ],
407: 1:  'level': 15,
407: 1:  'nextQuestion': '-1, 2',
407: 1:  'questions': [
407: 1:    '1, 2',
407: 1:    '1, 1',
407: 1:    '5, 5',
407: 1:    '55, 5',
407: 1:    '55, 44',
407: 1:    '0, 56',
407: 1:    '56, 1',
407: 1:    '1, -2',
407: 1:    '-1, 2'
407: 1:  ]
407: 1:}
407: 1:Scores: 53146
407: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5']')
407: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
408: 1:BoardData {
408: 1:  'description': 'Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)',
408: 1:  'expectedAnswer': '0.5',
408: 1:  'history': [
408: 1:    {
408: 1:      'answer': '0.5',
408: 1:      'question': '1, 2',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': '1',
408: 1:      'question': '1, 1',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': '1',
408: 1:      'question': '5, 5',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': '11',
408: 1:      'question': '55, 5',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': '1.25',
408: 1:      'question': '55, 44',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': '0',
408: 1:      'question': '0, 56',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': '56',
408: 1:      'question': '56, 1',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': '-0.5',
408: 1:      'question': '1, -2',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': '-0.5',
408: 1:      'question': '-1, 2',
408: 1:      'valid': true
408: 1:    }
408: 1:  ],
408: 1:  'level': 15,
408: 1:  'nextQuestion': '-1, -2',
408: 1:  'questions': [
408: 1:    '1, 2',
408: 1:    '1, 1',
408: 1:    '5, 5',
408: 1:    '55, 5',
408: 1:    '55, 44',
408: 1:    '0, 56',
408: 1:    '56, 1',
408: 1:    '1, -2',
408: 1:    '-1, 2',
408: 1:    '-1, -2'
408: 1:  ]
408: 1:}
408: 1:Scores: 53167
408: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5']')
408: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
409: 1:BoardData {
409: 1:  'description': 'Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)',
409: 1:  'expectedAnswer': '0.001',
409: 1:  'history': [
409: 1:    {
409: 1:      'answer': '0.5',
409: 1:      'question': '1, 2',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': '1',
409: 1:      'question': '1, 1',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': '1',
409: 1:      'question': '5, 5',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': '11',
409: 1:      'question': '55, 5',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': '1.25',
409: 1:      'question': '55, 44',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': '0',
409: 1:      'question': '0, 56',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': '56',
409: 1:      'question': '56, 1',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': '-0.5',
409: 1:      'question': '1, -2',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': '-0.5',
409: 1:      'question': '-1, 2',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': '0.5',
409: 1:      'question': '-1, -2',
409: 1:      'valid': true
409: 1:    }
409: 1:  ],
409: 1:  'level': 15,
409: 1:  'nextQuestion': '1, 1000',
409: 1:  'questions': [
409: 1:    '1, 2',
409: 1:    '1, 1',
409: 1:    '5, 5',
409: 1:    '55, 5',
409: 1:    '55, 44',
409: 1:    '0, 56',
409: 1:    '56, 1',
409: 1:    '1, -2',
409: 1:    '-1, 2',
409: 1:    '-1, -2',
409: 1:    '1, 1000'
409: 1:  ]
409: 1:}
409: 1:Scores: 53188
409: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001']')
409: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
410: 1:BoardData {
410: 1:  'description': 'Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)',
410: 1:  'expectedAnswer': '1.2(4)',
410: 1:  'history': [
410: 1:    {
410: 1:      'answer': '0.5',
410: 1:      'question': '1, 2',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': '1',
410: 1:      'question': '1, 1',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': '1',
410: 1:      'question': '5, 5',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': '11',
410: 1:      'question': '55, 5',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': '1.25',
410: 1:      'question': '55, 44',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': '0',
410: 1:      'question': '0, 56',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': '56',
410: 1:      'question': '56, 1',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': '-0.5',
410: 1:      'question': '1, -2',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': '-0.5',
410: 1:      'question': '-1, 2',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': '0.5',
410: 1:      'question': '-1, -2',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': '0.001',
410: 1:      'question': '1, 1000',
410: 1:      'valid': true
410: 1:    }
410: 1:  ],
410: 1:  'level': 15,
410: 1:  'nextQuestion': '56, 45',
410: 1:  'questions': [
410: 1:    '1, 2',
410: 1:    '1, 1',
410: 1:    '5, 5',
410: 1:    '55, 5',
410: 1:    '55, 44',
410: 1:    '0, 56',
410: 1:    '56, 1',
410: 1:    '1, -2',
410: 1:    '-1, 2',
410: 1:    '-1, -2',
410: 1:    '1, 1000',
410: 1:    '56, 45'
410: 1:  ]
410: 1:}
410: 1:Scores: 53209
410: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)']')
410: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
411: 1:BoardData {
411: 1:  'description': 'Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)',
411: 1:  'expectedAnswer': '1.00(90)',
411: 1:  'history': [
411: 1:    {
411: 1:      'answer': '0.5',
411: 1:      'question': '1, 2',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': '1',
411: 1:      'question': '1, 1',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': '1',
411: 1:      'question': '5, 5',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': '11',
411: 1:      'question': '55, 5',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': '1.25',
411: 1:      'question': '55, 44',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': '0',
411: 1:      'question': '0, 56',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': '56',
411: 1:      'question': '56, 1',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': '-0.5',
411: 1:      'question': '1, -2',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': '-0.5',
411: 1:      'question': '-1, 2',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': '0.5',
411: 1:      'question': '-1, -2',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': '0.001',
411: 1:      'question': '1, 1000',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': '1.2(4)',
411: 1:      'question': '56, 45',
411: 1:      'valid': true
411: 1:    }
411: 1:  ],
411: 1:  'level': 15,
411: 1:  'nextQuestion': '111, 110',
411: 1:  'questions': [
411: 1:    '1, 2',
411: 1:    '1, 1',
411: 1:    '5, 5',
411: 1:    '55, 5',
411: 1:    '55, 44',
411: 1:    '0, 56',
411: 1:    '56, 1',
411: 1:    '1, -2',
411: 1:    '-1, 2',
411: 1:    '-1, -2',
411: 1:    '1, 1000',
411: 1:    '56, 45',
411: 1:    '111, 110'
411: 1:  ]
411: 1:}
411: 1:Scores: 53230
411: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)']')
411: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
412: 1:BoardData {
412: 1:  'description': 'Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)',
412: 1:  'expectedAnswer': '10.0(90)',
412: 1:  'history': [
412: 1:    {
412: 1:      'answer': '0.5',
412: 1:      'question': '1, 2',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': '1',
412: 1:      'question': '1, 1',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': '1',
412: 1:      'question': '5, 5',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': '11',
412: 1:      'question': '55, 5',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': '1.25',
412: 1:      'question': '55, 44',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': '0',
412: 1:      'question': '0, 56',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': '56',
412: 1:      'question': '56, 1',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': '-0.5',
412: 1:      'question': '1, -2',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': '-0.5',
412: 1:      'question': '-1, 2',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': '0.5',
412: 1:      'question': '-1, -2',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': '0.001',
412: 1:      'question': '1, 1000',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': '1.2(4)',
412: 1:      'question': '56, 45',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': '1.00(90)',
412: 1:      'question': '111, 110',
412: 1:      'valid': true
412: 1:    }
412: 1:  ],
412: 1:  'level': 15,
412: 1:  'nextQuestion': '111, 11',
412: 1:  'questions': [
412: 1:    '1, 2',
412: 1:    '1, 1',
412: 1:    '5, 5',
412: 1:    '55, 5',
412: 1:    '55, 44',
412: 1:    '0, 56',
412: 1:    '56, 1',
412: 1:    '1, -2',
412: 1:    '-1, 2',
412: 1:    '-1, -2',
412: 1:    '1, 1000',
412: 1:    '56, 45',
412: 1:    '111, 110',
412: 1:    '111, 11'
412: 1:  ]
412: 1:}
412: 1:Scores: 53251
412: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)']')
412: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
413: 1:BoardData {
413: 1:  'description': 'Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)',
413: 1:  'expectedAnswer': '1010.0(90)',
413: 1:  'history': [
413: 1:    {
413: 1:      'answer': '0.5',
413: 1:      'question': '1, 2',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': '1',
413: 1:      'question': '1, 1',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': '1',
413: 1:      'question': '5, 5',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': '11',
413: 1:      'question': '55, 5',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': '1.25',
413: 1:      'question': '55, 44',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': '0',
413: 1:      'question': '0, 56',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': '56',
413: 1:      'question': '56, 1',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': '-0.5',
413: 1:      'question': '1, -2',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': '-0.5',
413: 1:      'question': '-1, 2',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': '0.5',
413: 1:      'question': '-1, -2',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': '0.001',
413: 1:      'question': '1, 1000',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': '1.2(4)',
413: 1:      'question': '56, 45',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': '1.00(90)',
413: 1:      'question': '111, 110',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': '10.0(90)',
413: 1:      'question': '111, 11',
413: 1:      'valid': true
413: 1:    }
413: 1:  ],
413: 1:  'level': 15,
413: 1:  'nextQuestion': '11111, 11',
413: 1:  'questions': [
413: 1:    '1, 2',
413: 1:    '1, 1',
413: 1:    '5, 5',
413: 1:    '55, 5',
413: 1:    '55, 44',
413: 1:    '0, 56',
413: 1:    '56, 1',
413: 1:    '1, -2',
413: 1:    '-1, 2',
413: 1:    '-1, -2',
413: 1:    '1, 1000',
413: 1:    '56, 45',
413: 1:    '111, 110',
413: 1:    '111, 11',
413: 1:    '11111, 11'
413: 1:  ]
413: 1:}
413: 1:Scores: 53272
413: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)']')
413: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
414: 1:BoardData {
414: 1:  'description': 'Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)',
414: 1:  'expectedAnswer': '0.0(495)',
414: 1:  'history': [
414: 1:    {
414: 1:      'answer': '0.5',
414: 1:      'question': '1, 2',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': '1',
414: 1:      'question': '1, 1',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': '1',
414: 1:      'question': '5, 5',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': '11',
414: 1:      'question': '55, 5',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': '1.25',
414: 1:      'question': '55, 44',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': '0',
414: 1:      'question': '0, 56',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': '56',
414: 1:      'question': '56, 1',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': '-0.5',
414: 1:      'question': '1, -2',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': '-0.5',
414: 1:      'question': '-1, 2',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': '0.5',
414: 1:      'question': '-1, -2',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': '0.001',
414: 1:      'question': '1, 1000',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': '1.2(4)',
414: 1:      'question': '56, 45',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': '1.00(90)',
414: 1:      'question': '111, 110',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': '10.0(90)',
414: 1:      'question': '111, 11',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': '1010.0(90)',
414: 1:      'question': '11111, 11',
414: 1:      'valid': true
414: 1:    }
414: 1:  ],
414: 1:  'level': 15,
414: 1:  'nextQuestion': '-11, -222',
414: 1:  'questions': [
414: 1:    '1, 2',
414: 1:    '1, 1',
414: 1:    '5, 5',
414: 1:    '55, 5',
414: 1:    '55, 44',
414: 1:    '0, 56',
414: 1:    '56, 1',
414: 1:    '1, -2',
414: 1:    '-1, 2',
414: 1:    '-1, -2',
414: 1:    '1, 1000',
414: 1:    '56, 45',
414: 1:    '111, 110',
414: 1:    '111, 11',
414: 1:    '11111, 11',
414: 1:    '-11, -222'
414: 1:  ]
414: 1:}
414: 1:Scores: 53293
414: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)']')
414: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
415: 1:BoardData {
415: 1:  'description': 'Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)',
415: 1:  'expectedAnswer': '-5.0(45)',
415: 1:  'history': [
415: 1:    {
415: 1:      'answer': '0.5',
415: 1:      'question': '1, 2',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': '1',
415: 1:      'question': '1, 1',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': '1',
415: 1:      'question': '5, 5',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': '11',
415: 1:      'question': '55, 5',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': '1.25',
415: 1:      'question': '55, 44',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': '0',
415: 1:      'question': '0, 56',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': '56',
415: 1:      'question': '56, 1',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': '-0.5',
415: 1:      'question': '1, -2',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': '-0.5',
415: 1:      'question': '-1, 2',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': '0.5',
415: 1:      'question': '-1, -2',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': '0.001',
415: 1:      'question': '1, 1000',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': '1.2(4)',
415: 1:      'question': '56, 45',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': '1.00(90)',
415: 1:      'question': '111, 110',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': '10.0(90)',
415: 1:      'question': '111, 11',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': '1010.0(90)',
415: 1:      'question': '11111, 11',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': '0.0(495)',
415: 1:      'question': '-11, -222',
415: 1:      'valid': true
415: 1:    }
415: 1:  ],
415: 1:  'level': 15,
415: 1:  'nextQuestion': '111, -22',
415: 1:  'questions': [
415: 1:    '1, 2',
415: 1:    '1, 1',
415: 1:    '5, 5',
415: 1:    '55, 5',
415: 1:    '55, 44',
415: 1:    '0, 56',
415: 1:    '56, 1',
415: 1:    '1, -2',
415: 1:    '-1, 2',
415: 1:    '-1, -2',
415: 1:    '1, 1000',
415: 1:    '56, 45',
415: 1:    '111, 110',
415: 1:    '111, 11',
415: 1:    '11111, 11',
415: 1:    '-11, -222',
415: 1:    '111, -22'
415: 1:  ]
415: 1:}
415: 1:Scores: 53314
415: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)']')
415: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
416: 1:BoardData {
416: 1:  'description': 'Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)',
416: 1:  'expectedAnswer': '0.000(3)',
416: 1:  'history': [
416: 1:    {
416: 1:      'answer': '0.5',
416: 1:      'question': '1, 2',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': '1',
416: 1:      'question': '1, 1',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': '1',
416: 1:      'question': '5, 5',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': '11',
416: 1:      'question': '55, 5',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': '1.25',
416: 1:      'question': '55, 44',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': '0',
416: 1:      'question': '0, 56',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': '56',
416: 1:      'question': '56, 1',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': '-0.5',
416: 1:      'question': '1, -2',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': '-0.5',
416: 1:      'question': '-1, 2',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': '0.5',
416: 1:      'question': '-1, -2',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': '0.001',
416: 1:      'question': '1, 1000',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': '1.2(4)',
416: 1:      'question': '56, 45',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': '1.00(90)',
416: 1:      'question': '111, 110',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': '10.0(90)',
416: 1:      'question': '111, 11',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': '1010.0(90)',
416: 1:      'question': '11111, 11',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': '0.0(495)',
416: 1:      'question': '-11, -222',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': '-5.0(45)',
416: 1:      'question': '111, -22',
416: 1:      'valid': true
416: 1:    }
416: 1:  ],
416: 1:  'level': 15,
416: 1:  'nextQuestion': '1, 3000',
416: 1:  'questions': [
416: 1:    '1, 2',
416: 1:    '1, 1',
416: 1:    '5, 5',
416: 1:    '55, 5',
416: 1:    '55, 44',
416: 1:    '0, 56',
416: 1:    '56, 1',
416: 1:    '1, -2',
416: 1:    '-1, 2',
416: 1:    '-1, -2',
416: 1:    '1, 1000',
416: 1:    '56, 45',
416: 1:    '111, 110',
416: 1:    '111, 11',
416: 1:    '11111, 11',
416: 1:    '-11, -222',
416: 1:    '111, -22',
416: 1:    '1, 3000'
416: 1:  ]
416: 1:}
416: 1:Scores: 53335
416: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)']')
416: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
417: 1:BoardData {
417: 1:  'description': 'Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)',
417: 1:  'expectedAnswer': '1.1(153846)',
417: 1:  'history': [
417: 1:    {
417: 1:      'answer': '0.5',
417: 1:      'question': '1, 2',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': '1',
417: 1:      'question': '1, 1',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': '1',
417: 1:      'question': '5, 5',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': '11',
417: 1:      'question': '55, 5',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': '1.25',
417: 1:      'question': '55, 44',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': '0',
417: 1:      'question': '0, 56',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': '56',
417: 1:      'question': '56, 1',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': '-0.5',
417: 1:      'question': '1, -2',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': '-0.5',
417: 1:      'question': '-1, 2',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': '0.5',
417: 1:      'question': '-1, -2',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': '0.001',
417: 1:      'question': '1, 1000',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': '1.2(4)',
417: 1:      'question': '56, 45',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': '1.00(90)',
417: 1:      'question': '111, 110',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': '10.0(90)',
417: 1:      'question': '111, 11',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': '1010.0(90)',
417: 1:      'question': '11111, 11',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': '0.0(495)',
417: 1:      'question': '-11, -222',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': '-5.0(45)',
417: 1:      'question': '111, -22',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': '0.000(3)',
417: 1:      'question': '1, 3000',
417: 1:      'valid': true
417: 1:    }
417: 1:  ],
417: 1:  'level': 15,
417: 1:  'nextQuestion': '87, 78',
417: 1:  'questions': [
417: 1:    '1, 2',
417: 1:    '1, 1',
417: 1:    '5, 5',
417: 1:    '55, 5',
417: 1:    '55, 44',
417: 1:    '0, 56',
417: 1:    '56, 1',
417: 1:    '1, -2',
417: 1:    '-1, 2',
417: 1:    '-1, -2',
417: 1:    '1, 1000',
417: 1:    '56, 45',
417: 1:    '111, 110',
417: 1:    '111, 11',
417: 1:    '11111, 11',
417: 1:    '-11, -222',
417: 1:    '111, -22',
417: 1:    '1, 3000',
417: 1:    '87, 78'
417: 1:  ]
417: 1:}
417: 1:Scores: 53356
417: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)']')
417: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
418: 1:BoardData {
418: 1:  'description': 'Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)',
418: 1:  'expectedAnswer': '0.803(571428)',
418: 1:  'history': [
418: 1:    {
418: 1:      'answer': '0.5',
418: 1:      'question': '1, 2',
418: 1:      'valid': true
418: 1:    },
418: 1:    {
418: 1:      'answer': '1',
418: 1:      'question': '1, 1',
418: 1:      'valid': true
418: 1:    },
418: 1:    {
418: 1:      'answer': '1',
418: 1:      'question': '5, 5',
418: 1:      'valid': true
418: 1:    },
418: 1:    {
418: 1:      'answer': '11',
418: 1:      'question': '55, 5',
418: 1:      'valid': true
418: 1:    },
418: 1:    {
418: 1:      'answer': '1.25',
418: 1:      'question': '55, 44',
418: 1:      'valid': true
418: 1:    },
418: 1:    {
418: 1:      'answer': '0',
418: 1:      'question': '0, 56',
418: 1:      'valid': true
418: 1:    },
418: 1:    {
418: 1:      'answer': '56',
418: 1:      'question': '56, 1',
418: 1:      'valid': true
418: 1:    },
418: 1:    {
418: 1:      'answer': '-0.5',
418: 1:      'question': '1, -2',
418: 1:      'valid': true
418: 1:    },
418: 1:    {
418: 1:      'answer': '-0.5',
418: 1:      'question': '-1, 2',
418: 1:      'valid': true
418: 1:    },
418: 1:    {
418: 1:      'answer': '0.5',
418: 1:      'question': '-1, -2',
418: 1:      'valid': true
418: 1:    },
418: 1:    {
418: 1:      'answer': '0.001',
418: 1:      'question': '1, 1000',
418: 1:      'valid': true
418: 1:    },
418: 1:    {
418: 1:      'answer': '1.2(4)',
418: 1:      'question': '56, 45',
418: 1:      'valid': true
418: 1:    },
418: 1:    {
418: 1:      'answer': '1.00(90)',
418: 1:      'question': '111, 110',
418: 1:      'valid': true
418: 1:    },
418: 1:    {
418: 1:      'answer': '10.0(90)',
418: 1:      'question': '111, 11',
418: 1:      'valid': true
418: 1:    },
418: 1:    {
418: 1:      'answer': '1010.0(90)',
418: 1:      'question': '11111, 11',
418: 1:      'valid': true
418: 1:    },
418: 1:    {
418: 1:      'answer': '0.0(495)',
418: 1:      'question': '-11, -222',
418: 1:      'valid': true
418: 1:    },
418: 1:    {
418: 1:      'answer': '-5.0(45)',
418: 1:      'question': '111, -22',
418: 1:      'valid': true
418: 1:    },
418: 1:    {
418: 1:      'answer': '0.000(3)',
418: 1:      'question': '1, 3000',
418: 1:      'valid': true
418: 1:    },
418: 1:    {
418: 1:      'answer': '1.1(153846)',
418: 1:      'question': '87, 78',
418: 1:      'valid': true
418: 1:    }
418: 1:  ],
418: 1:  'level': 15,
418: 1:  'nextQuestion': '45, 56',
418: 1:  'questions': [
418: 1:    '1, 2',
418: 1:    '1, 1',
418: 1:    '5, 5',
418: 1:    '55, 5',
418: 1:    '55, 44',
418: 1:    '0, 56',
418: 1:    '56, 1',
418: 1:    '1, -2',
418: 1:    '-1, 2',
418: 1:    '-1, -2',
418: 1:    '1, 1000',
418: 1:    '56, 45',
418: 1:    '111, 110',
418: 1:    '111, 11',
418: 1:    '11111, 11',
418: 1:    '-11, -222',
418: 1:    '111, -22',
418: 1:    '1, 3000',
418: 1:    '87, 78',
418: 1:    '45, 56'
418: 1:  ]
418: 1:}
418: 1:Scores: 53377
418: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)', '0.803(571428)']')
418: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
419: 1:BoardData {
419: 1:  'description': 'Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)',
419: 1:  'expectedAnswer': '1.(593984962406015037)',
419: 1:  'history': [
419: 1:    {
419: 1:      'answer': '0.5',
419: 1:      'question': '1, 2',
419: 1:      'valid': true
419: 1:    },
419: 1:    {
419: 1:      'answer': '1',
419: 1:      'question': '1, 1',
419: 1:      'valid': true
419: 1:    },
419: 1:    {
419: 1:      'answer': '1',
419: 1:      'question': '5, 5',
419: 1:      'valid': true
419: 1:    },
419: 1:    {
419: 1:      'answer': '11',
419: 1:      'question': '55, 5',
419: 1:      'valid': true
419: 1:    },
419: 1:    {
419: 1:      'answer': '1.25',
419: 1:      'question': '55, 44',
419: 1:      'valid': true
419: 1:    },
419: 1:    {
419: 1:      'answer': '0',
419: 1:      'question': '0, 56',
419: 1:      'valid': true
419: 1:    },
419: 1:    {
419: 1:      'answer': '56',
419: 1:      'question': '56, 1',
419: 1:      'valid': true
419: 1:    },
419: 1:    {
419: 1:      'answer': '-0.5',
419: 1:      'question': '1, -2',
419: 1:      'valid': true
419: 1:    },
419: 1:    {
419: 1:      'answer': '-0.5',
419: 1:      'question': '-1, 2',
419: 1:      'valid': true
419: 1:    },
419: 1:    {
419: 1:      'answer': '0.5',
419: 1:      'question': '-1, -2',
419: 1:      'valid': true
419: 1:    },
419: 1:    {
419: 1:      'answer': '0.001',
419: 1:      'question': '1, 1000',
419: 1:      'valid': true
419: 1:    },
419: 1:    {
419: 1:      'answer': '1.2(4)',
419: 1:      'question': '56, 45',
419: 1:      'valid': true
419: 1:    },
419: 1:    {
419: 1:      'answer': '1.00(90)',
419: 1:      'question': '111, 110',
419: 1:      'valid': true
419: 1:    },
419: 1:    {
419: 1:      'answer': '10.0(90)',
419: 1:      'question': '111, 11',
419: 1:      'valid': true
419: 1:    },
419: 1:    {
419: 1:      'answer': '1010.0(90)',
419: 1:      'question': '11111, 11',
419: 1:      'valid': true
419: 1:    },
419: 1:    {
419: 1:      'answer': '0.0(495)',
419: 1:      'question': '-11, -222',
419: 1:      'valid': true
419: 1:    },
419: 1:    {
419: 1:      'answer': '-5.0(45)',
419: 1:      'question': '111, -22',
419: 1:      'valid': true
419: 1:    },
419: 1:    {
419: 1:      'answer': '0.000(3)',
419: 1:      'question': '1, 3000',
419: 1:      'valid': true
419: 1:    },
419: 1:    {
419: 1:      'answer': '1.1(153846)',
419: 1:      'question': '87, 78',
419: 1:      'valid': true
419: 1:    },
419: 1:    {
419: 1:      'answer': '0.803(571428)',
419: 1:      'question': '45, 56',
419: 1:      'valid': true
419: 1:    }
419: 1:  ],
419: 1:  'level': 15,
419: 1:  'nextQuestion': '212, 133',
419: 1:  'questions': [
419: 1:    '1, 2',
419: 1:    '1, 1',
419: 1:    '5, 5',
419: 1:    '55, 5',
419: 1:    '55, 44',
419: 1:    '0, 56',
419: 1:    '56, 1',
419: 1:    '1, -2',
419: 1:    '-1, 2',
419: 1:    '-1, -2',
419: 1:    '1, 1000',
419: 1:    '56, 45',
419: 1:    '111, 110',
419: 1:    '111, 11',
419: 1:    '11111, 11',
419: 1:    '-11, -222',
419: 1:    '111, -22',
419: 1:    '1, 3000',
419: 1:    '87, 78',
419: 1:    '45, 56',
419: 1:    '212, 133'
419: 1:  ]
419: 1:}
419: 1:Scores: 53398
419: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)', '0.803(571428)', '1.(593984962406015037)']')
419: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
420: 1:BoardData {
420: 1:  'description': 'Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)',
420: 1:  'expectedAnswer': '96.6(1739130434782608695652)',
420: 1:  'history': [
420: 1:    {
420: 1:      'answer': '0.5',
420: 1:      'question': '1, 2',
420: 1:      'valid': true
420: 1:    },
420: 1:    {
420: 1:      'answer': '1',
420: 1:      'question': '1, 1',
420: 1:      'valid': true
420: 1:    },
420: 1:    {
420: 1:      'answer': '1',
420: 1:      'question': '5, 5',
420: 1:      'valid': true
420: 1:    },
420: 1:    {
420: 1:      'answer': '11',
420: 1:      'question': '55, 5',
420: 1:      'valid': true
420: 1:    },
420: 1:    {
420: 1:      'answer': '1.25',
420: 1:      'question': '55, 44',
420: 1:      'valid': true
420: 1:    },
420: 1:    {
420: 1:      'answer': '0',
420: 1:      'question': '0, 56',
420: 1:      'valid': true
420: 1:    },
420: 1:    {
420: 1:      'answer': '56',
420: 1:      'question': '56, 1',
420: 1:      'valid': true
420: 1:    },
420: 1:    {
420: 1:      'answer': '-0.5',
420: 1:      'question': '1, -2',
420: 1:      'valid': true
420: 1:    },
420: 1:    {
420: 1:      'answer': '-0.5',
420: 1:      'question': '-1, 2',
420: 1:      'valid': true
420: 1:    },
420: 1:    {
420: 1:      'answer': '0.5',
420: 1:      'question': '-1, -2',
420: 1:      'valid': true
420: 1:    },
420: 1:    {
420: 1:      'answer': '0.001',
420: 1:      'question': '1, 1000',
420: 1:      'valid': true
420: 1:    },
420: 1:    {
420: 1:      'answer': '1.2(4)',
420: 1:      'question': '56, 45',
420: 1:      'valid': true
420: 1:    },
420: 1:    {
420: 1:      'answer': '1.00(90)',
420: 1:      'question': '111, 110',
420: 1:      'valid': true
420: 1:    },
420: 1:    {
420: 1:      'answer': '10.0(90)',
420: 1:      'question': '111, 11',
420: 1:      'valid': true
420: 1:    },
420: 1:    {
420: 1:      'answer': '1010.0(90)',
420: 1:      'question': '11111, 11',
420: 1:      'valid': true
420: 1:    },
420: 1:    {
420: 1:      'answer': '0.0(495)',
420: 1:      'question': '-11, -222',
420: 1:      'valid': true
420: 1:    },
420: 1:    {
420: 1:      'answer': '-5.0(45)',
420: 1:      'question': '111, -22',
420: 1:      'valid': true
420: 1:    },
420: 1:    {
420: 1:      'answer': '0.000(3)',
420: 1:      'question': '1, 3000',
420: 1:      'valid': true
420: 1:    },
420: 1:    {
420: 1:      'answer': '1.1(153846)',
420: 1:      'question': '87, 78',
420: 1:      'valid': true
420: 1:    },
420: 1:    {
420: 1:      'answer': '0.803(571428)',
420: 1:      'question': '45, 56',
420: 1:      'valid': true
420: 1:    },
420: 1:    {
420: 1:      'answer': '1.(593984962406015037)',
420: 1:      'question': '212, 133',
420: 1:      'valid': true
420: 1:    }
420: 1:  ],
420: 1:  'level': 15,
420: 1:  'nextQuestion': '11111, 115',
420: 1:  'questions': [
420: 1:    '1, 2',
420: 1:    '1, 1',
420: 1:    '5, 5',
420: 1:    '55, 5',
420: 1:    '55, 44',
420: 1:    '0, 56',
420: 1:    '56, 1',
420: 1:    '1, -2',
420: 1:    '-1, 2',
420: 1:    '-1, -2',
420: 1:    '1, 1000',
420: 1:    '56, 45',
420: 1:    '111, 110',
420: 1:    '111, 11',
420: 1:    '11111, 11',
420: 1:    '-11, -222',
420: 1:    '111, -22',
420: 1:    '1, 3000',
420: 1:    '87, 78',
420: 1:    '45, 56',
420: 1:    '212, 133',
420: 1:    '11111, 115'
420: 1:  ]
420: 1:}
420: 1:Scores: 53419
420: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)', '0.803(571428)', '1.(593984962406015037)', '96.6(1739130434782608695652)']')
420: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
421: 1:BoardData {
421: 1:  'description': 'Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)',
421: 1:  'expectedAnswer': '0.3(5652173913043478260869)',
421: 1:  'history': [
421: 1:    {
421: 1:      'answer': '0.5',
421: 1:      'question': '1, 2',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': '1',
421: 1:      'question': '1, 1',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': '1',
421: 1:      'question': '5, 5',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': '11',
421: 1:      'question': '55, 5',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': '1.25',
421: 1:      'question': '55, 44',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': '0',
421: 1:      'question': '0, 56',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': '56',
421: 1:      'question': '56, 1',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': '-0.5',
421: 1:      'question': '1, -2',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': '-0.5',
421: 1:      'question': '-1, 2',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': '0.5',
421: 1:      'question': '-1, -2',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': '0.001',
421: 1:      'question': '1, 1000',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': '1.2(4)',
421: 1:      'question': '56, 45',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': '1.00(90)',
421: 1:      'question': '111, 110',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': '10.0(90)',
421: 1:      'question': '111, 11',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': '1010.0(90)',
421: 1:      'question': '11111, 11',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': '0.0(495)',
421: 1:      'question': '-11, -222',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': '-5.0(45)',
421: 1:      'question': '111, -22',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': '0.000(3)',
421: 1:      'question': '1, 3000',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': '1.1(153846)',
421: 1:      'question': '87, 78',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': '0.803(571428)',
421: 1:      'question': '45, 56',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': '1.(593984962406015037)',
421: 1:      'question': '212, 133',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': '96.6(1739130434782608695652)',
421: 1:      'question': '11111, 115',
421: 1:      'valid': true
421: 1:    }
421: 1:  ],
421: 1:  'level': 15,
421: 1:  'nextQuestion': '123, 345',
421: 1:  'questions': [
421: 1:    '1, 2',
421: 1:    '1, 1',
421: 1:    '5, 5',
421: 1:    '55, 5',
421: 1:    '55, 44',
421: 1:    '0, 56',
421: 1:    '56, 1',
421: 1:    '1, -2',
421: 1:    '-1, 2',
421: 1:    '-1, -2',
421: 1:    '1, 1000',
421: 1:    '56, 45',
421: 1:    '111, 110',
421: 1:    '111, 11',
421: 1:    '11111, 11',
421: 1:    '-11, -222',
421: 1:    '111, -22',
421: 1:    '1, 3000',
421: 1:    '87, 78',
421: 1:    '45, 56',
421: 1:    '212, 133',
421: 1:    '11111, 115',
421: 1:    '123, 345'
421: 1:  ]
421: 1:}
421: 1:Scores: 53440
421: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)', '0.803(571428)', '1.(593984962406015037)', '96.6(1739130434782608695652)', '0.3(5652173913043478260869)']')
421: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
422: 1:BoardData {
422: 1:  'description': 'Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)',
422: 1:  'expectedAnswer': '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484',
422: 1:  'history': [
422: 1:    {
422: 1:      'answer': '0.5',
422: 1:      'question': '1, 2',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': '1',
422: 1:      'question': '1, 1',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': '1',
422: 1:      'question': '5, 5',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': '11',
422: 1:      'question': '55, 5',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': '1.25',
422: 1:      'question': '55, 44',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': '0',
422: 1:      'question': '0, 56',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': '56',
422: 1:      'question': '56, 1',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': '-0.5',
422: 1:      'question': '1, -2',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': '-0.5',
422: 1:      'question': '-1, 2',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': '0.5',
422: 1:      'question': '-1, -2',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': '0.001',
422: 1:      'question': '1, 1000',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': '1.2(4)',
422: 1:      'question': '56, 45',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': '1.00(90)',
422: 1:      'question': '111, 110',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': '10.0(90)',
422: 1:      'question': '111, 11',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': '1010.0(90)',
422: 1:      'question': '11111, 11',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': '0.0(495)',
422: 1:      'question': '-11, -222',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': '-5.0(45)',
422: 1:      'question': '111, -22',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': '0.000(3)',
422: 1:      'question': '1, 3000',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': '1.1(153846)',
422: 1:      'question': '87, 78',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': '0.803(571428)',
422: 1:      'question': '45, 56',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': '1.(593984962406015037)',
422: 1:      'question': '212, 133',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': '96.6(1739130434782608695652)',
422: 1:      'question': '11111, 115',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': '0.3(5652173913043478260869)',
422: 1:      'question': '123, 345',
422: 1:      'valid': true
422: 1:    }
422: 1:  ],
422: 1:  'level': 15,
422: 1:  'nextQuestion': '66666666, 77727777',
422: 1:  'questions': [
422: 1:    '1, 2',
422: 1:    '1, 1',
422: 1:    '5, 5',
422: 1:    '55, 5',
422: 1:    '55, 44',
422: 1:    '0, 56',
422: 1:    '56, 1',
422: 1:    '1, -2',
422: 1:    '-1, 2',
422: 1:    '-1, -2',
422: 1:    '1, 1000',
422: 1:    '56, 45',
422: 1:    '111, 110',
422: 1:    '111, 11',
422: 1:    '11111, 11',
422: 1:    '-11, -222',
422: 1:    '111, -22',
422: 1:    '1, 3000',
422: 1:    '87, 78',
422: 1:    '45, 56',
422: 1:    '212, 133',
422: 1:    '11111, 115',
422: 1:    '123, 345',
422: 1:    '66666666, 77727777'
422: 1:  ]
422: 1:}
422: 1:Scores: 53461
422: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)', '0.803(571428)', '1.(593984962406015037)', '96.6(1739130434782608695652)', '0.3(5652173913043478260869)', '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484']')
422: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
423: 1:BoardData {
423: 1:  'description': 'Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)',
423: 1:  'expectedAnswer': '8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847',
423: 1:  'history': [
423: 1:    {
423: 1:      'answer': '0.5',
423: 1:      'question': '1, 2',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': '1',
423: 1:      'question': '1, 1',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': '1',
423: 1:      'question': '5, 5',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': '11',
423: 1:      'question': '55, 5',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': '1.25',
423: 1:      'question': '55, 44',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': '0',
423: 1:      'question': '0, 56',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': '56',
423: 1:      'question': '56, 1',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': '-0.5',
423: 1:      'question': '1, -2',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': '-0.5',
423: 1:      'question': '-1, 2',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': '0.5',
423: 1:      'question': '-1, -2',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': '0.001',
423: 1:      'question': '1, 1000',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': '1.2(4)',
423: 1:      'question': '56, 45',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': '1.00(90)',
423: 1:      'question': '111, 110',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': '10.0(90)',
423: 1:      'question': '111, 11',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': '1010.0(90)',
423: 1:      'question': '11111, 11',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': '0.0(495)',
423: 1:      'question': '-11, -222',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': '-5.0(45)',
423: 1:      'question': '111, -22',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': '0.000(3)',
423: 1:      'question': '1, 3000',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': '1.1(153846)',
423: 1:      'question': '87, 78',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': '0.803(571428)',
423: 1:      'question': '45, 56',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': '1.(593984962406015037)',
423: 1:      'question': '212, 133',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': '96.6(1739130434782608695652)',
423: 1:      'question': '11111, 115',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': '0.3(5652173913043478260869)',
423: 1:      'question': '123, 345',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484',
423: 1:      'question': '66666666, 77727777',
423: 1:      'valid': true
423: 1:    }
423: 1:  ],
423: 1:  'level': 15,
423: 1:  'nextQuestion': '666666660, 77727777',
423: 1:  'questions': [
423: 1:    '1, 2',
423: 1:    '1, 1',
423: 1:    '5, 5',
423: 1:    '55, 5',
423: 1:    '55, 44',
423: 1:    '0, 56',
423: 1:    '56, 1',
423: 1:    '1, -2',
423: 1:    '-1, 2',
423: 1:    '-1, -2',
423: 1:    '1, 1000',
423: 1:    '56, 45',
423: 1:    '111, 110',
423: 1:    '111, 11',
423: 1:    '11111, 11',
423: 1:    '-11, -222',
423: 1:    '111, -22',
423: 1:    '1, 3000',
423: 1:    '87, 78',
423: 1:    '45, 56',
423: 1:    '212, 133',
423: 1:    '11111, 115',
423: 1:    '123, 345',
423: 1:    '66666666, 77727777',
423: 1:    '666666660, 77727777'
423: 1:  ]
423: 1:}
423: 1:Scores: 53482
423: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)', '0.803(571428)', '1.(593984962406015037)', '96.6(1739130434782608695652)', '0.3(5652173913043478260869)', '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484', '8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847']')
423: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
424: 1:BoardData {
424: 1:  'description': 'Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)',
424: 1:  'expectedAnswer': '85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713',
424: 1:  'history': [
424: 1:    {
424: 1:      'answer': '0.5',
424: 1:      'question': '1, 2',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '1',
424: 1:      'question': '1, 1',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '1',
424: 1:      'question': '5, 5',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '11',
424: 1:      'question': '55, 5',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '1.25',
424: 1:      'question': '55, 44',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '0',
424: 1:      'question': '0, 56',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '56',
424: 1:      'question': '56, 1',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '-0.5',
424: 1:      'question': '1, -2',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '-0.5',
424: 1:      'question': '-1, 2',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '0.5',
424: 1:      'question': '-1, -2',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '0.001',
424: 1:      'question': '1, 1000',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '1.2(4)',
424: 1:      'question': '56, 45',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '1.00(90)',
424: 1:      'question': '111, 110',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '10.0(90)',
424: 1:      'question': '111, 11',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '1010.0(90)',
424: 1:      'question': '11111, 11',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '0.0(495)',
424: 1:      'question': '-11, -222',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '-5.0(45)',
424: 1:      'question': '111, -22',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '0.000(3)',
424: 1:      'question': '1, 3000',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '1.1(153846)',
424: 1:      'question': '87, 78',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '0.803(571428)',
424: 1:      'question': '45, 56',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '1.(593984962406015037)',
424: 1:      'question': '212, 133',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '96.6(1739130434782608695652)',
424: 1:      'question': '11111, 115',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '0.3(5652173913043478260869)',
424: 1:      'question': '123, 345',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484',
424: 1:      'question': '66666666, 77727777',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847',
424: 1:      'question': '666666660, 77727777',
424: 1:      'valid': true
424: 1:    }
424: 1:  ],
424: 1:  'level': 15,
424: 1:  'nextQuestion': '666666660, 7772777',
424: 1:  'questions': [
424: 1:    '1, 2',
424: 1:    '1, 1',
424: 1:    '5, 5',
424: 1:    '55, 5',
424: 1:    '55, 44',
424: 1:    '0, 56',
424: 1:    '56, 1',
424: 1:    '1, -2',
424: 1:    '-1, 2',
424: 1:    '-1, -2',
424: 1:    '1, 1000',
424: 1:    '56, 45',
424: 1:    '111, 110',
424: 1:    '111, 11',
424: 1:    '11111, 11',
424: 1:    '-11, -222',
424: 1:    '111, -22',
424: 1:    '1, 3000',
424: 1:    '87, 78',
424: 1:    '45, 56',
424: 1:    '212, 133',
424: 1:    '11111, 115',
424: 1:    '123, 345',
424: 1:    '66666666, 77727777',
424: 1:    '666666660, 77727777',
424: 1:    '666666660, 7772777'
424: 1:  ]
424: 1:}
424: 1:Scores: 53503
424: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)', '0.803(571428)', '1.(593984962406015037)', '96.6(1739130434782608695652)', '0.3(5652173913043478260869)', '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484', '8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847', '85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713']')
424: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
425: 1:BoardData {
425: 1:  'description': 'Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)',
425: 1:  'expectedAnswer': '1.0(309278350515463917525773195876288659793814432989690721649484536082474226804123711340206185567010)',
425: 1:  'history': [
425: 1:    {
425: 1:      'answer': '0.5',
425: 1:      'question': '1, 2',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '1',
425: 1:      'question': '1, 1',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '1',
425: 1:      'question': '5, 5',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '11',
425: 1:      'question': '55, 5',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '1.25',
425: 1:      'question': '55, 44',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '0',
425: 1:      'question': '0, 56',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '56',
425: 1:      'question': '56, 1',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '-0.5',
425: 1:      'question': '1, -2',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '-0.5',
425: 1:      'question': '-1, 2',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '0.5',
425: 1:      'question': '-1, -2',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '0.001',
425: 1:      'question': '1, 1000',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '1.2(4)',
425: 1:      'question': '56, 45',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '1.00(90)',
425: 1:      'question': '111, 110',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '10.0(90)',
425: 1:      'question': '111, 11',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '1010.0(90)',
425: 1:      'question': '11111, 11',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '0.0(495)',
425: 1:      'question': '-11, -222',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '-5.0(45)',
425: 1:      'question': '111, -22',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '0.000(3)',
425: 1:      'question': '1, 3000',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '1.1(153846)',
425: 1:      'question': '87, 78',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '0.803(571428)',
425: 1:      'question': '45, 56',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '1.(593984962406015037)',
425: 1:      'question': '212, 133',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '96.6(1739130434782608695652)',
425: 1:      'question': '11111, 115',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '0.3(5652173913043478260869)',
425: 1:      'question': '123, 345',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484',
425: 1:      'question': '66666666, 77727777',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847',
425: 1:      'question': '666666660, 77727777',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713',
425: 1:      'question': '666666660, 7772777',
425: 1:      'valid': true
425: 1:    }
425: 1:  ],
425: 1:  'level': 15,
425: 1:  'nextQuestion': '100, 97',
425: 1:  'questions': [
425: 1:    '1, 2',
425: 1:    '1, 1',
425: 1:    '5, 5',
425: 1:    '55, 5',
425: 1:    '55, 44',
425: 1:    '0, 56',
425: 1:    '56, 1',
425: 1:    '1, -2',
425: 1:    '-1, 2',
425: 1:    '-1, -2',
425: 1:    '1, 1000',
425: 1:    '56, 45',
425: 1:    '111, 110',
425: 1:    '111, 11',
425: 1:    '11111, 11',
425: 1:    '-11, -222',
425: 1:    '111, -22',
425: 1:    '1, 3000',
425: 1:    '87, 78',
425: 1:    '45, 56',
425: 1:    '212, 133',
425: 1:    '11111, 115',
425: 1:    '123, 345',
425: 1:    '66666666, 77727777',
425: 1:    '666666660, 77727777',
425: 1:    '666666660, 7772777',
425: 1:    '100, 97'
425: 1:  ]
425: 1:}
425: 1:Scores: 53524
425: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)', '0.803(571428)', '1.(593984962406015037)', '96.6(1739130434782608695652)', '0.3(5652173913043478260869)', '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484', '8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847', '85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713', '1.0(309278350515463917525773195876288659793814432989690721649484536082474226804123711340206185567010)']')
425: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
426: 1:BoardData {
426: 1:  'description': 'Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)',
426: 1:  'expectedAnswer': 'Div by zero error!',
426: 1:  'history': [
426: 1:    {
426: 1:      'answer': '0.5',
426: 1:      'question': '1, 2',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '1',
426: 1:      'question': '1, 1',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '1',
426: 1:      'question': '5, 5',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '11',
426: 1:      'question': '55, 5',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '1.25',
426: 1:      'question': '55, 44',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '0',
426: 1:      'question': '0, 56',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '56',
426: 1:      'question': '56, 1',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '-0.5',
426: 1:      'question': '1, -2',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '-0.5',
426: 1:      'question': '-1, 2',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '0.5',
426: 1:      'question': '-1, -2',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '0.001',
426: 1:      'question': '1, 1000',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '1.2(4)',
426: 1:      'question': '56, 45',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '1.00(90)',
426: 1:      'question': '111, 110',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '10.0(90)',
426: 1:      'question': '111, 11',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '1010.0(90)',
426: 1:      'question': '11111, 11',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '0.0(495)',
426: 1:      'question': '-11, -222',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '-5.0(45)',
426: 1:      'question': '111, -22',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '0.000(3)',
426: 1:      'question': '1, 3000',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '1.1(153846)',
426: 1:      'question': '87, 78',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '0.803(571428)',
426: 1:      'question': '45, 56',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '1.(593984962406015037)',
426: 1:      'question': '212, 133',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '96.6(1739130434782608695652)',
426: 1:      'question': '11111, 115',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '0.3(5652173913043478260869)',
426: 1:      'question': '123, 345',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484',
426: 1:      'question': '66666666, 77727777',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847',
426: 1:      'question': '666666660, 77727777',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713',
426: 1:      'question': '666666660, 7772777',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '1.0(309278350515463917525773195876288659793814432989690721649484536082474226804123711340206185567010)',
426: 1:      'question': '100, 97',
426: 1:      'valid': true
426: 1:    }
426: 1:  ],
426: 1:  'level': 15,
426: 1:  'nextQuestion': '999, 0',
426: 1:  'questions': [
426: 1:    '1, 2',
426: 1:    '1, 1',
426: 1:    '5, 5',
426: 1:    '55, 5',
426: 1:    '55, 44',
426: 1:    '0, 56',
426: 1:    '56, 1',
426: 1:    '1, -2',
426: 1:    '-1, 2',
426: 1:    '-1, -2',
426: 1:    '1, 1000',
426: 1:    '56, 45',
426: 1:    '111, 110',
426: 1:    '111, 11',
426: 1:    '11111, 11',
426: 1:    '-11, -222',
426: 1:    '111, -22',
426: 1:    '1, 3000',
426: 1:    '87, 78',
426: 1:    '45, 56',
426: 1:    '212, 133',
426: 1:    '11111, 115',
426: 1:    '123, 345',
426: 1:    '66666666, 77727777',
426: 1:    '666666660, 77727777',
426: 1:    '666666660, 7772777',
426: 1:    '100, 97',
426: 1:    '999, 0'
426: 1:  ]
426: 1:}
426: 1:Scores: 53545
426: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)', '0.803(571428)', '1.(593984962406015037)', '96.6(1739130434782608695652)', '0.3(5652173913043478260869)', '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484', '8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847', '85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713', '1.0(309278350515463917525773195876288659793814432989690721649484536082474226804123711340206185567010)', 'Div by zero error!']')
426: 1:Fire Event: PassTest{complexity=60, testCount=28}
426: 1:Fire Event: NextAlgorithm{complexity=60, time=0}
------------------------------------------
427: 1:BoardData {
427: 1:  'description': 'Wait for next level. Please send 'message('StartNextLevel')' command.',
427: 1:  'history': [
427: 1:    {
427: 1:      'answer': '0.5',
427: 1:      'question': '1, 2',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '1',
427: 1:      'question': '1, 1',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '1',
427: 1:      'question': '5, 5',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '11',
427: 1:      'question': '55, 5',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '1.25',
427: 1:      'question': '55, 44',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '0',
427: 1:      'question': '0, 56',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '56',
427: 1:      'question': '56, 1',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '-0.5',
427: 1:      'question': '1, -2',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '-0.5',
427: 1:      'question': '-1, 2',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '0.5',
427: 1:      'question': '-1, -2',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '0.001',
427: 1:      'question': '1, 1000',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '1.2(4)',
427: 1:      'question': '56, 45',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '1.00(90)',
427: 1:      'question': '111, 110',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '10.0(90)',
427: 1:      'question': '111, 11',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '1010.0(90)',
427: 1:      'question': '11111, 11',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '0.0(495)',
427: 1:      'question': '-11, -222',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '-5.0(45)',
427: 1:      'question': '111, -22',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '0.000(3)',
427: 1:      'question': '1, 3000',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '1.1(153846)',
427: 1:      'question': '87, 78',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '0.803(571428)',
427: 1:      'question': '45, 56',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '1.(593984962406015037)',
427: 1:      'question': '212, 133',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '96.6(1739130434782608695652)',
427: 1:      'question': '11111, 115',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '0.3(5652173913043478260869)',
427: 1:      'question': '123, 345',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484',
427: 1:      'question': '66666666, 77727777',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847',
427: 1:      'question': '666666660, 77727777',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713',
427: 1:      'question': '666666660, 7772777',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '1.0(309278350515463917525773195876288659793814432989690721649484536082474226804123711340206185567010)',
427: 1:      'question': '100, 97',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': 'Div by zero error!',
427: 1:      'question': '999, 0',
427: 1:      'valid': true
427: 1:    }
427: 1:  ],
427: 1:  'level': 15,
427: 1:  'questions': []
427: 1:}
427: 1:Scores: 61665
427: 1:Answer: message('StartNextLevel')
427: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
428: 1:BoardData {
428: 1:  'description': 'No more Levels. You win!',
428: 1:  'history': [],
428: 1:  'level': 16,
428: 1:  'questions': []
428: 1:}
428: 1:Scores: 61665
428: 1:Answer: message('StartNextLevel')
------------------------------------------
429: 1:BoardData {
429: 1:  'description': 'No more Levels. You win!',
429: 1:  'history': [],
429: 1:  'level': 16,
429: 1:  'questions': []
429: 1:}
429: 1:Scores: 61665
429: 1:Answer: message('StartNextLevel')
------------------------------------------
430: 1:BoardData {
430: 1:  'description': 'No more Levels. You win!',
430: 1:  'history': [],
430: 1:  'level': 16,
430: 1:  'questions': []
430: 1:}
430: 1:Scores: 61665
430: 1:Answer: message('StartNextLevel')
------------------------------------------
431: 1:BoardData {
431: 1:  'description': 'No more Levels. You win!',
431: 1:  'history': [],
431: 1:  'level': 16,
431: 1:  'questions': []
431: 1:}
431: 1:Scores: 61665
431: 1:Answer: message('StartNextLevel')
------------------------------------------
432: 1:BoardData {
432: 1:  'description': 'No more Levels. You win!',
432: 1:  'history': [],
432: 1:  'level': 16,
432: 1:  'questions': []
432: 1:}
432: 1:Scores: 61665
432: 1:Answer: message('StartNextLevel')
------------------------------------------
433: 1:BoardData {
433: 1:  'description': 'No more Levels. You win!',
433: 1:  'history': [],
433: 1:  'level': 16,
433: 1:  'questions': []
433: 1:}
433: 1:Scores: 61665
433: 1:Answer: message('StartNextLevel')
------------------------------------------
434: 1:BoardData {
434: 1:  'description': 'No more Levels. You win!',
434: 1:  'history': [],
434: 1:  'level': 16,
434: 1:  'questions': []
434: 1:}
434: 1:Scores: 61665
434: 1:Answer: message('StartNextLevel')
------------------------------------------
435: 1:BoardData {
435: 1:  'description': 'No more Levels. You win!',
435: 1:  'history': [],
435: 1:  'level': 16,
435: 1:  'questions': []
435: 1:}
435: 1:Scores: 61665
435: 1:Answer: message('StartNextLevel')
------------------------------------------
436: 1:BoardData {
436: 1:  'description': 'No more Levels. You win!',
436: 1:  'history': [],
436: 1:  'level': 16,
436: 1:  'questions': []
436: 1:}
436: 1:Scores: 61665
436: 1:Answer: message('StartNextLevel')
------------------------------------------
437: 1:BoardData {
437: 1:  'description': 'No more Levels. You win!',
437: 1:  'history': [],
437: 1:  'level': 16,
437: 1:  'questions': []
437: 1:}
437: 1:Scores: 61665
437: 1:Answer: message('StartNextLevel')
------------------------------------------
438: 1:BoardData {
438: 1:  'description': 'No more Levels. You win!',
438: 1:  'history': [],
438: 1:  'level': 16,
438: 1:  'questions': []
438: 1:}
438: 1:Scores: 61665
438: 1:Answer: message('StartNextLevel')
------------------------------------------
439: 1:BoardData {
439: 1:  'description': 'No more Levels. You win!',
439: 1:  'history': [],
439: 1:  'level': 16,
439: 1:  'questions': []
439: 1:}
439: 1:Scores: 61665
439: 1:Answer: message('StartNextLevel')
------------------------------------------
440: 1:BoardData {
440: 1:  'description': 'No more Levels. You win!',
440: 1:  'history': [],
440: 1:  'level': 16,
440: 1:  'questions': []
440: 1:}
440: 1:Scores: 61665
440: 1:Answer: message('StartNextLevel')
------------------------------------------
441: 1:BoardData {
441: 1:  'description': 'No more Levels. You win!',
441: 1:  'history': [],
441: 1:  'level': 16,
441: 1:  'questions': []
441: 1:}
441: 1:Scores: 61665
441: 1:Answer: message('StartNextLevel')
------------------------------------------
442: 1:BoardData {
442: 1:  'description': 'No more Levels. You win!',
442: 1:  'history': [],
442: 1:  'level': 16,
442: 1:  'questions': []
442: 1:}
442: 1:Scores: 61665
442: 1:Answer: message('StartNextLevel')
------------------------------------------
443: 1:BoardData {
443: 1:  'description': 'No more Levels. You win!',
443: 1:  'history': [],
443: 1:  'level': 16,
443: 1:  'questions': []
443: 1:}
443: 1:Scores: 61665
443: 1:Answer: message('StartNextLevel')
------------------------------------------
444: 1:BoardData {
444: 1:  'description': 'No more Levels. You win!',
444: 1:  'history': [],
444: 1:  'level': 16,
444: 1:  'questions': []
444: 1:}
444: 1:Scores: 61665
444: 1:Answer: message('StartNextLevel')
------------------------------------------
445: 1:BoardData {
445: 1:  'description': 'No more Levels. You win!',
445: 1:  'history': [],
445: 1:  'level': 16,
445: 1:  'questions': []
445: 1:}
445: 1:Scores: 61665
445: 1:Answer: message('StartNextLevel')
------------------------------------------
446: 1:BoardData {
446: 1:  'description': 'No more Levels. You win!',
446: 1:  'history': [],
446: 1:  'level': 16,
446: 1:  'questions': []
446: 1:}
446: 1:Scores: 61665
446: 1:Answer: message('StartNextLevel')
------------------------------------------
447: 1:BoardData {
447: 1:  'description': 'No more Levels. You win!',
447: 1:  'history': [],
447: 1:  'level': 16,
447: 1:  'questions': []
447: 1:}
447: 1:Scores: 61665
447: 1:Answer: message('StartNextLevel')
------------------------------------------
448: 1:BoardData {
448: 1:  'description': 'No more Levels. You win!',
448: 1:  'history': [],
448: 1:  'level': 16,
448: 1:  'questions': []
448: 1:}
448: 1:Scores: 61665
448: 1:Answer: message('StartNextLevel')
------------------------------------------
449: 1:BoardData {
449: 1:  'description': 'No more Levels. You win!',
449: 1:  'history': [],
449: 1:  'level': 16,
449: 1:  'questions': []
449: 1:}
449: 1:Scores: 61665
449: 1:Answer: message('StartNextLevel')
------------------------------------------
450: 1:BoardData {
450: 1:  'description': 'No more Levels. You win!',
450: 1:  'history': [],
450: 1:  'level': 16,
450: 1:  'questions': []
450: 1:}
450: 1:Scores: 61665
450: 1:Answer: message('StartNextLevel')
------------------------------------------
451: 1:BoardData {
451: 1:  'description': 'No more Levels. You win!',
451: 1:  'history': [],
451: 1:  'level': 16,
451: 1:  'questions': []
451: 1:}
451: 1:Scores: 61665
451: 1:Answer: message('StartNextLevel')
------------------------------------------
452: 1:BoardData {
452: 1:  'description': 'No more Levels. You win!',
452: 1:  'history': [],
452: 1:  'level': 16,
452: 1:  'questions': []
452: 1:}
452: 1:Scores: 61665
452: 1:Answer: message('StartNextLevel')
------------------------------------------
453: 1:BoardData {
453: 1:  'description': 'No more Levels. You win!',
453: 1:  'history': [],
453: 1:  'level': 16,
453: 1:  'questions': []
453: 1:}
453: 1:Scores: 61665
453: 1:Answer: message('StartNextLevel')
------------------------------------------
454: 1:BoardData {
454: 1:  'description': 'No more Levels. You win!',
454: 1:  'history': [],
454: 1:  'level': 16,
454: 1:  'questions': []
454: 1:}
454: 1:Scores: 61665
454: 1:Answer: message('StartNextLevel')
------------------------------------------
455: 1:BoardData {
455: 1:  'description': 'No more Levels. You win!',
455: 1:  'history': [],
455: 1:  'level': 16,
455: 1:  'questions': []
455: 1:}
455: 1:Scores: 61665
455: 1:Answer: message('StartNextLevel')
------------------------------------------
456: 1:BoardData {
456: 1:  'description': 'No more Levels. You win!',
456: 1:  'history': [],
456: 1:  'level': 16,
456: 1:  'questions': []
456: 1:}
456: 1:Scores: 61665
456: 1:Answer: message('StartNextLevel')
------------------------------------------
457: 1:BoardData {
457: 1:  'description': 'No more Levels. You win!',
457: 1:  'history': [],
457: 1:  'level': 16,
457: 1:  'questions': []
457: 1:}
457: 1:Scores: 61665
457: 1:Answer: message('StartNextLevel')
------------------------------------------
458: 1:BoardData {
458: 1:  'description': 'No more Levels. You win!',
458: 1:  'history': [],
458: 1:  'level': 16,
458: 1:  'questions': []
458: 1:}
458: 1:Scores: 61665
458: 1:Answer: message('StartNextLevel')
------------------------------------------
459: 1:BoardData {
459: 1:  'description': 'No more Levels. You win!',
459: 1:  'history': [],
459: 1:  'level': 16,
459: 1:  'questions': []
459: 1:}
459: 1:Scores: 61665
459: 1:Answer: message('StartNextLevel')
------------------------------------------
460: 1:BoardData {
460: 1:  'description': 'No more Levels. You win!',
460: 1:  'history': [],
460: 1:  'level': 16,
460: 1:  'questions': []
460: 1:}
460: 1:Scores: 61665
460: 1:Answer: message('StartNextLevel')
------------------------------------------
461: 1:BoardData {
461: 1:  'description': 'No more Levels. You win!',
461: 1:  'history': [],
461: 1:  'level': 16,
461: 1:  'questions': []
461: 1:}
461: 1:Scores: 61665
461: 1:Answer: message('StartNextLevel')
------------------------------------------
462: 1:BoardData {
462: 1:  'description': 'No more Levels. You win!',
462: 1:  'history': [],
462: 1:  'level': 16,
462: 1:  'questions': []
462: 1:}
462: 1:Scores: 61665
462: 1:Answer: message('StartNextLevel')
------------------------------------------
463: 1:BoardData {
463: 1:  'description': 'No more Levels. You win!',
463: 1:  'history': [],
463: 1:  'level': 16,
463: 1:  'questions': []
463: 1:}
463: 1:Scores: 61665
463: 1:Answer: message('StartNextLevel')
------------------------------------------
464: 1:BoardData {
464: 1:  'description': 'No more Levels. You win!',
464: 1:  'history': [],
464: 1:  'level': 16,
464: 1:  'questions': []
464: 1:}
464: 1:Scores: 61665
464: 1:Answer: message('StartNextLevel')
------------------------------------------
465: 1:BoardData {
465: 1:  'description': 'No more Levels. You win!',
465: 1:  'history': [],
465: 1:  'level': 16,
465: 1:  'questions': []
465: 1:}
465: 1:Scores: 61665
465: 1:Answer: message('StartNextLevel')
------------------------------------------
466: 1:BoardData {
466: 1:  'description': 'No more Levels. You win!',
466: 1:  'history': [],
466: 1:  'level': 16,
466: 1:  'questions': []
466: 1:}
466: 1:Scores: 61665
466: 1:Answer: message('StartNextLevel')
------------------------------------------
467: 1:BoardData {
467: 1:  'description': 'No more Levels. You win!',
467: 1:  'history': [],
467: 1:  'level': 16,
467: 1:  'questions': []
467: 1:}
467: 1:Scores: 61665
467: 1:Answer: message('StartNextLevel')
------------------------------------------
468: 1:BoardData {
468: 1:  'description': 'No more Levels. You win!',
468: 1:  'history': [],
468: 1:  'level': 16,
468: 1:  'questions': []
468: 1:}
468: 1:Scores: 61665
468: 1:Answer: message('StartNextLevel')
------------------------------------------
469: 1:BoardData {
469: 1:  'description': 'No more Levels. You win!',
469: 1:  'history': [],
469: 1:  'level': 16,
469: 1:  'questions': []
469: 1:}
469: 1:Scores: 61665
469: 1:Answer: message('StartNextLevel')
------------------------------------------
470: 1:BoardData {
470: 1:  'description': 'No more Levels. You win!',
470: 1:  'history': [],
470: 1:  'level': 16,
470: 1:  'questions': []
470: 1:}
470: 1:Scores: 61665
470: 1:Answer: message('StartNextLevel')
------------------------------------------
471: 1:BoardData {
471: 1:  'description': 'No more Levels. You win!',
471: 1:  'history': [],
471: 1:  'level': 16,
471: 1:  'questions': []
471: 1:}
471: 1:Scores: 61665
471: 1:Answer: message('StartNextLevel')
------------------------------------------
472: 1:BoardData {
472: 1:  'description': 'No more Levels. You win!',
472: 1:  'history': [],
472: 1:  'level': 16,
472: 1:  'questions': []
472: 1:}
472: 1:Scores: 61665
472: 1:Answer: message('StartNextLevel')
------------------------------------------
473: 1:BoardData {
473: 1:  'description': 'No more Levels. You win!',
473: 1:  'history': [],
473: 1:  'level': 16,
473: 1:  'questions': []
473: 1:}
473: 1:Scores: 61665
473: 1:Answer: message('StartNextLevel')
------------------------------------------
474: 1:BoardData {
474: 1:  'description': 'No more Levels. You win!',
474: 1:  'history': [],
474: 1:  'level': 16,
474: 1:  'questions': []
474: 1:}
474: 1:Scores: 61665
474: 1:Answer: message('StartNextLevel')
------------------------------------------
475: 1:BoardData {
475: 1:  'description': 'No more Levels. You win!',
475: 1:  'history': [],
475: 1:  'level': 16,
475: 1:  'questions': []
475: 1:}
475: 1:Scores: 61665
475: 1:Answer: message('StartNextLevel')
------------------------------------------
476: 1:BoardData {
476: 1:  'description': 'No more Levels. You win!',
476: 1:  'history': [],
476: 1:  'level': 16,
476: 1:  'questions': []
476: 1:}
476: 1:Scores: 61665
476: 1:Answer: message('StartNextLevel')
------------------------------------------
477: 1:BoardData {
477: 1:  'description': 'No more Levels. You win!',
477: 1:  'history': [],
477: 1:  'level': 16,
477: 1:  'questions': []
477: 1:}
477: 1:Scores: 61665
477: 1:Answer: message('StartNextLevel')
------------------------------------------
478: 1:BoardData {
478: 1:  'description': 'No more Levels. You win!',
478: 1:  'history': [],
478: 1:  'level': 16,
478: 1:  'questions': []
478: 1:}
478: 1:Scores: 61665
478: 1:Answer: message('StartNextLevel')
------------------------------------------
479: 1:BoardData {
479: 1:  'description': 'No more Levels. You win!',
479: 1:  'history': [],
479: 1:  'level': 16,
479: 1:  'questions': []
479: 1:}
479: 1:Scores: 61665
479: 1:Answer: message('StartNextLevel')
------------------------------------------
480: 1:BoardData {
480: 1:  'description': 'No more Levels. You win!',
480: 1:  'history': [],
480: 1:  'level': 16,
480: 1:  'questions': []
480: 1:}
480: 1:Scores: 61665
480: 1:Answer: message('StartNextLevel')
------------------------------------------
481: 1:BoardData {
481: 1:  'description': 'No more Levels. You win!',
481: 1:  'history': [],
481: 1:  'level': 16,
481: 1:  'questions': []
481: 1:}
481: 1:Scores: 61665
481: 1:Answer: message('StartNextLevel')
------------------------------------------
482: 1:BoardData {
482: 1:  'description': 'No more Levels. You win!',
482: 1:  'history': [],
482: 1:  'level': 16,
482: 1:  'questions': []
482: 1:}
482: 1:Scores: 61665
482: 1:Answer: message('StartNextLevel')
------------------------------------------
483: 1:BoardData {
483: 1:  'description': 'No more Levels. You win!',
483: 1:  'history': [],
483: 1:  'level': 16,
483: 1:  'questions': []
483: 1:}
483: 1:Scores: 61665
483: 1:Answer: message('StartNextLevel')
------------------------------------------
484: 1:BoardData {
484: 1:  'description': 'No more Levels. You win!',
484: 1:  'history': [],
484: 1:  'level': 16,
484: 1:  'questions': []
484: 1:}
484: 1:Scores: 61665
484: 1:Answer: message('StartNextLevel')
------------------------------------------
485: 1:BoardData {
485: 1:  'description': 'No more Levels. You win!',
485: 1:  'history': [],
485: 1:  'level': 16,
485: 1:  'questions': []
485: 1:}
485: 1:Scores: 61665
485: 1:Answer: message('StartNextLevel')
------------------------------------------
486: 1:BoardData {
486: 1:  'description': 'No more Levels. You win!',
486: 1:  'history': [],
486: 1:  'level': 16,
486: 1:  'questions': []
486: 1:}
486: 1:Scores: 61665
486: 1:Answer: message('StartNextLevel')
------------------------------------------
487: 1:BoardData {
487: 1:  'description': 'No more Levels. You win!',
487: 1:  'history': [],
487: 1:  'level': 16,
487: 1:  'questions': []
487: 1:}
487: 1:Scores: 61665
487: 1:Answer: message('StartNextLevel')
------------------------------------------
488: 1:BoardData {
488: 1:  'description': 'No more Levels. You win!',
488: 1:  'history': [],
488: 1:  'level': 16,
488: 1:  'questions': []
488: 1:}
488: 1:Scores: 61665
488: 1:Answer: message('StartNextLevel')
------------------------------------------
489: 1:BoardData {
489: 1:  'description': 'No more Levels. You win!',
489: 1:  'history': [],
489: 1:  'level': 16,
489: 1:  'questions': []
489: 1:}
489: 1:Scores: 61665
489: 1:Answer: message('StartNextLevel')
------------------------------------------
490: 1:BoardData {
490: 1:  'description': 'No more Levels. You win!',
490: 1:  'history': [],
490: 1:  'level': 16,
490: 1:  'questions': []
490: 1:}
490: 1:Scores: 61665
490: 1:Answer: message('StartNextLevel')
------------------------------------------
491: 1:BoardData {
491: 1:  'description': 'No more Levels. You win!',
491: 1:  'history': [],
491: 1:  'level': 16,
491: 1:  'questions': []
491: 1:}
491: 1:Scores: 61665
491: 1:Answer: message('StartNextLevel')
------------------------------------------
492: 1:BoardData {
492: 1:  'description': 'No more Levels. You win!',
492: 1:  'history': [],
492: 1:  'level': 16,
492: 1:  'questions': []
492: 1:}
492: 1:Scores: 61665
492: 1:Answer: message('StartNextLevel')
------------------------------------------
493: 1:BoardData {
493: 1:  'description': 'No more Levels. You win!',
493: 1:  'history': [],
493: 1:  'level': 16,
493: 1:  'questions': []
493: 1:}
493: 1:Scores: 61665
493: 1:Answer: message('StartNextLevel')
------------------------------------------
494: 1:BoardData {
494: 1:  'description': 'No more Levels. You win!',
494: 1:  'history': [],
494: 1:  'level': 16,
494: 1:  'questions': []
494: 1:}
494: 1:Scores: 61665
494: 1:Answer: message('StartNextLevel')
------------------------------------------
495: 1:BoardData {
495: 1:  'description': 'No more Levels. You win!',
495: 1:  'history': [],
495: 1:  'level': 16,
495: 1:  'questions': []
495: 1:}
495: 1:Scores: 61665
495: 1:Answer: message('StartNextLevel')
------------------------------------------
496: 1:BoardData {
496: 1:  'description': 'No more Levels. You win!',
496: 1:  'history': [],
496: 1:  'level': 16,
496: 1:  'questions': []
496: 1:}
496: 1:Scores: 61665
496: 1:Answer: message('StartNextLevel')
------------------------------------------
497: 1:BoardData {
497: 1:  'description': 'No more Levels. You win!',
497: 1:  'history': [],
497: 1:  'level': 16,
497: 1:  'questions': []
497: 1:}
497: 1:Scores: 61665
497: 1:Answer: message('StartNextLevel')
------------------------------------------
498: 1:BoardData {
498: 1:  'description': 'No more Levels. You win!',
498: 1:  'history': [],
498: 1:  'level': 16,
498: 1:  'questions': []
498: 1:}
498: 1:Scores: 61665
498: 1:Answer: message('StartNextLevel')
------------------------------------------
499: 1:BoardData {
499: 1:  'description': 'No more Levels. You win!',
499: 1:  'history': [],
499: 1:  'level': 16,
499: 1:  'questions': []
499: 1:}
499: 1:Scores: 61665
499: 1:Answer: message('StartNextLevel')
------------------------------------------
500: 1:BoardData {
500: 1:  'description': 'No more Levels. You win!',
500: 1:  'history': [],
500: 1:  'level': 16,
500: 1:  'questions': []
500: 1:}
500: 1:Scores: 61665
500: 1:Answer: message('StartNextLevel')
------------------------------------------
501: 1:BoardData {
501: 1:  'description': 'No more Levels. You win!',
501: 1:  'history': [],
501: 1:  'level': 16,
501: 1:  'questions': []
501: 1:}
501: 1:Scores: 61665
501: 1:Answer: message('StartNextLevel')
------------------------------------------
502: 1:BoardData {
502: 1:  'description': 'No more Levels. You win!',
502: 1:  'history': [],
502: 1:  'level': 16,
502: 1:  'questions': []
502: 1:}
502: 1:Scores: 61665
502: 1:Answer: message('StartNextLevel')
------------------------------------------
503: 1:BoardData {
503: 1:  'description': 'No more Levels. You win!',
503: 1:  'history': [],
503: 1:  'level': 16,
503: 1:  'questions': []
503: 1:}
503: 1:Scores: 61665
503: 1:Answer: message('StartNextLevel')
------------------------------------------
504: 1:BoardData {
504: 1:  'description': 'No more Levels. You win!',
504: 1:  'history': [],
504: 1:  'level': 16,
504: 1:  'questions': []
504: 1:}
504: 1:Scores: 61665
504: 1:Answer: message('StartNextLevel')
------------------------------------------
505: 1:BoardData {
505: 1:  'description': 'No more Levels. You win!',
505: 1:  'history': [],
505: 1:  'level': 16,
505: 1:  'questions': []
505: 1:}
505: 1:Scores: 61665
505: 1:Answer: message('StartNextLevel')
------------------------------------------
506: 1:BoardData {
506: 1:  'description': 'No more Levels. You win!',
506: 1:  'history': [],
506: 1:  'level': 16,
506: 1:  'questions': []
506: 1:}
506: 1:Scores: 61665
506: 1:Answer: message('StartNextLevel')
------------------------------------------
507: 1:BoardData {
507: 1:  'description': 'No more Levels. You win!',
507: 1:  'history': [],
507: 1:  'level': 16,
507: 1:  'questions': []
507: 1:}
507: 1:Scores: 61665
507: 1:Answer: message('StartNextLevel')
------------------------------------------
508: 1:BoardData {
508: 1:  'description': 'No more Levels. You win!',
508: 1:  'history': [],
508: 1:  'level': 16,
508: 1:  'questions': []
508: 1:}
508: 1:Scores: 61665
508: 1:Answer: message('StartNextLevel')
------------------------------------------
509: 1:BoardData {
509: 1:  'description': 'No more Levels. You win!',
509: 1:  'history': [],
509: 1:  'level': 16,
509: 1:  'questions': []
509: 1:}
509: 1:Scores: 61665
509: 1:Answer: message('StartNextLevel')
------------------------------------------
510: 1:BoardData {
510: 1:  'description': 'No more Levels. You win!',
510: 1:  'history': [],
510: 1:  'level': 16,
510: 1:  'questions': []
510: 1:}
510: 1:Scores: 61665
510: 1:Answer: message('StartNextLevel')
------------------------------------------
511: 1:BoardData {
511: 1:  'description': 'No more Levels. You win!',
511: 1:  'history': [],
511: 1:  'level': 16,
511: 1:  'questions': []
511: 1:}
511: 1:Scores: 61665
511: 1:Answer: message('StartNextLevel')
------------------------------------------
512: 1:BoardData {
512: 1:  'description': 'No more Levels. You win!',
512: 1:  'history': [],
512: 1:  'level': 16,
512: 1:  'questions': []
512: 1:}
512: 1:Scores: 61665
512: 1:Answer: message('StartNextLevel')
------------------------------------------
513: 1:BoardData {
513: 1:  'description': 'No more Levels. You win!',
513: 1:  'history': [],
513: 1:  'level': 16,
513: 1:  'questions': []
513: 1:}
513: 1:Scores: 61665
513: 1:Answer: message('StartNextLevel')
------------------------------------------
514: 1:BoardData {
514: 1:  'description': 'No more Levels. You win!',
514: 1:  'history': [],
514: 1:  'level': 16,
514: 1:  'questions': []
514: 1:}
514: 1:Scores: 61665
514: 1:Answer: message('StartNextLevel')
------------------------------------------
515: 1:BoardData {
515: 1:  'description': 'No more Levels. You win!',
515: 1:  'history': [],
515: 1:  'level': 16,
515: 1:  'questions': []
515: 1:}
515: 1:Scores: 61665
515: 1:Answer: message('StartNextLevel')
------------------------------------------
516: 1:BoardData {
516: 1:  'description': 'No more Levels. You win!',
516: 1:  'history': [],
516: 1:  'level': 16,
516: 1:  'questions': []
516: 1:}
516: 1:Scores: 61665
516: 1:Answer: message('StartNextLevel')
------------------------------------------
517: 1:BoardData {
517: 1:  'description': 'No more Levels. You win!',
517: 1:  'history': [],
517: 1:  'level': 16,
517: 1:  'questions': []
517: 1:}
517: 1:Scores: 61665
517: 1:Answer: message('StartNextLevel')
------------------------------------------
518: 1:BoardData {
518: 1:  'description': 'No more Levels. You win!',
518: 1:  'history': [],
518: 1:  'level': 16,
518: 1:  'questions': []
518: 1:}
518: 1:Scores: 61665
518: 1:Answer: message('StartNextLevel')
------------------------------------------
519: 1:BoardData {
519: 1:  'description': 'No more Levels. You win!',
519: 1:  'history': [],
519: 1:  'level': 16,
519: 1:  'questions': []
519: 1:}
519: 1:Scores: 61665
519: 1:Answer: message('StartNextLevel')
------------------------------------------
520: 1:BoardData {
520: 1:  'description': 'No more Levels. You win!',
520: 1:  'history': [],
520: 1:  'level': 16,
520: 1:  'questions': []
520: 1:}
520: 1:Scores: 61665
520: 1:Answer: message('StartNextLevel')
------------------------------------------
521: 1:BoardData {
521: 1:  'description': 'No more Levels. You win!',
521: 1:  'history': [],
521: 1:  'level': 16,
521: 1:  'questions': []
521: 1:}
521: 1:Scores: 61665
521: 1:Answer: message('StartNextLevel')
------------------------------------------
522: 1:BoardData {
522: 1:  'description': 'No more Levels. You win!',
522: 1:  'history': [],
522: 1:  'level': 16,
522: 1:  'questions': []
522: 1:}
522: 1:Scores: 61665
522: 1:Answer: message('StartNextLevel')
------------------------------------------
523: 1:BoardData {
523: 1:  'description': 'No more Levels. You win!',
523: 1:  'history': [],
523: 1:  'level': 16,
523: 1:  'questions': []
523: 1:}
523: 1:Scores: 61665
523: 1:Answer: message('StartNextLevel')
------------------------------------------
524: 1:BoardData {
524: 1:  'description': 'No more Levels. You win!',
524: 1:  'history': [],
524: 1:  'level': 16,
524: 1:  'questions': []
524: 1:}
524: 1:Scores: 61665
524: 1:Answer: message('StartNextLevel')
------------------------------------------
525: 1:BoardData {
525: 1:  'description': 'No more Levels. You win!',
525: 1:  'history': [],
525: 1:  'level': 16,
525: 1:  'questions': []
525: 1:}
525: 1:Scores: 61665
525: 1:Answer: message('StartNextLevel')
------------------------------------------
526: 1:BoardData {
526: 1:  'description': 'No more Levels. You win!',
526: 1:  'history': [],
526: 1:  'level': 16,
526: 1:  'questions': []
526: 1:}
526: 1:Scores: 61665
526: 1:Answer: message('StartNextLevel')
------------------------------------------
527: 1:BoardData {
527: 1:  'description': 'No more Levels. You win!',
527: 1:  'history': [],
527: 1:  'level': 16,
527: 1:  'questions': []
527: 1:}
527: 1:Scores: 61665
527: 1:Answer: message('StartNextLevel')
------------------------------------------
528: 1:BoardData {
528: 1:  'description': 'No more Levels. You win!',
528: 1:  'history': [],
528: 1:  'level': 16,
528: 1:  'questions': []
528: 1:}
528: 1:Scores: 61665
528: 1:Answer: message('StartNextLevel')
------------------------------------------
529: 1:BoardData {
529: 1:  'description': 'No more Levels. You win!',
529: 1:  'history': [],
529: 1:  'level': 16,
529: 1:  'questions': []
529: 1:}
529: 1:Scores: 61665
529: 1:Answer: message('StartNextLevel')
------------------------------------------
530: 1:BoardData {
530: 1:  'description': 'No more Levels. You win!',
530: 1:  'history': [],
530: 1:  'level': 16,
530: 1:  'questions': []
530: 1:}
530: 1:Scores: 61665
530: 1:Answer: message('StartNextLevel')
------------------------------------------
531: 1:BoardData {
531: 1:  'description': 'No more Levels. You win!',
531: 1:  'history': [],
531: 1:  'level': 16,
531: 1:  'questions': []
531: 1:}
531: 1:Scores: 61665
531: 1:Answer: message('StartNextLevel')
------------------------------------------
532: 1:BoardData {
532: 1:  'description': 'No more Levels. You win!',
532: 1:  'history': [],
532: 1:  'level': 16,
532: 1:  'questions': []
532: 1:}
532: 1:Scores: 61665
532: 1:Answer: message('StartNextLevel')
------------------------------------------
533: 1:BoardData {
533: 1:  'description': 'No more Levels. You win!',
533: 1:  'history': [],
533: 1:  'level': 16,
533: 1:  'questions': []
533: 1:}
533: 1:Scores: 61665
533: 1:Answer: message('StartNextLevel')
------------------------------------------
534: 1:BoardData {
534: 1:  'description': 'No more Levels. You win!',
534: 1:  'history': [],
534: 1:  'level': 16,
534: 1:  'questions': []
534: 1:}
534: 1:Scores: 61665
534: 1:Answer: message('StartNextLevel')
------------------------------------------
535: 1:BoardData {
535: 1:  'description': 'No more Levels. You win!',
535: 1:  'history': [],
535: 1:  'level': 16,
535: 1:  'questions': []
535: 1:}
535: 1:Scores: 61665
535: 1:Answer: message('StartNextLevel')
------------------------------------------
536: 1:BoardData {
536: 1:  'description': 'No more Levels. You win!',
536: 1:  'history': [],
536: 1:  'level': 16,
536: 1:  'questions': []
536: 1:}
536: 1:Scores: 61665
536: 1:Answer: message('StartNextLevel')
------------------------------------------
537: 1:BoardData {
537: 1:  'description': 'No more Levels. You win!',
537: 1:  'history': [],
537: 1:  'level': 16,
537: 1:  'questions': []
537: 1:}
537: 1:Scores: 61665
537: 1:Answer: message('StartNextLevel')
------------------------------------------
538: 1:BoardData {
538: 1:  'description': 'No more Levels. You win!',
538: 1:  'history': [],
538: 1:  'level': 16,
538: 1:  'questions': []
538: 1:}
538: 1:Scores: 61665
538: 1:Answer: message('StartNextLevel')
------------------------------------------
539: 1:BoardData {
539: 1:  'description': 'No more Levels. You win!',
539: 1:  'history': [],
539: 1:  'level': 16,
539: 1:  'questions': []
539: 1:}
539: 1:Scores: 61665
539: 1:Answer: message('StartNextLevel')
------------------------------------------
540: 1:BoardData {
540: 1:  'description': 'No more Levels. You win!',
540: 1:  'history': [],
540: 1:  'level': 16,
540: 1:  'questions': []
540: 1:}
540: 1:Scores: 61665
540: 1:Answer: message('StartNextLevel')
------------------------------------------
541: 1:BoardData {
541: 1:  'description': 'No more Levels. You win!',
541: 1:  'history': [],
541: 1:  'level': 16,
541: 1:  'questions': []
541: 1:}
541: 1:Scores: 61665
541: 1:Answer: message('StartNextLevel')
------------------------------------------
542: 1:BoardData {
542: 1:  'description': 'No more Levels. You win!',
542: 1:  'history': [],
542: 1:  'level': 16,
542: 1:  'questions': []
542: 1:}
542: 1:Scores: 61665
542: 1:Answer: message('StartNextLevel')
------------------------------------------
543: 1:BoardData {
543: 1:  'description': 'No more Levels. You win!',
543: 1:  'history': [],
543: 1:  'level': 16,
543: 1:  'questions': []
543: 1:}
543: 1:Scores: 61665
543: 1:Answer: message('StartNextLevel')
------------------------------------------
544: 1:BoardData {
544: 1:  'description': 'No more Levels. You win!',
544: 1:  'history': [],
544: 1:  'level': 16,
544: 1:  'questions': []
544: 1:}
544: 1:Scores: 61665
544: 1:Answer: message('StartNextLevel')
------------------------------------------
545: 1:BoardData {
545: 1:  'description': 'No more Levels. You win!',
545: 1:  'history': [],
545: 1:  'level': 16,
545: 1:  'questions': []
545: 1:}
545: 1:Scores: 61665
545: 1:Answer: message('StartNextLevel')
------------------------------------------
546: 1:BoardData {
546: 1:  'description': 'No more Levels. You win!',
546: 1:  'history': [],
546: 1:  'level': 16,
546: 1:  'questions': []
546: 1:}
546: 1:Scores: 61665
546: 1:Answer: message('StartNextLevel')
------------------------------------------
547: 1:BoardData {
547: 1:  'description': 'No more Levels. You win!',
547: 1:  'history': [],
547: 1:  'level': 16,
547: 1:  'questions': []
547: 1:}
547: 1:Scores: 61665
547: 1:Answer: message('StartNextLevel')
------------------------------------------
548: 1:BoardData {
548: 1:  'description': 'No more Levels. You win!',
548: 1:  'history': [],
548: 1:  'level': 16,
548: 1:  'questions': []
548: 1:}
548: 1:Scores: 61665
548: 1:Answer: message('StartNextLevel')
------------------------------------------
549: 1:BoardData {
549: 1:  'description': 'No more Levels. You win!',
549: 1:  'history': [],
549: 1:  'level': 16,
549: 1:  'questions': []
549: 1:}
549: 1:Scores: 61665
549: 1:Answer: message('StartNextLevel')
------------------------------------------
550: 1:BoardData {
550: 1:  'description': 'No more Levels. You win!',
550: 1:  'history': [],
550: 1:  'level': 16,
550: 1:  'questions': []
550: 1:}
550: 1:Scores: 61665
550: 1:Answer: message('StartNextLevel')
------------------------------------------
551: 1:BoardData {
551: 1:  'description': 'No more Levels. You win!',
551: 1:  'history': [],
551: 1:  'level': 16,
551: 1:  'questions': []
551: 1:}
551: 1:Scores: 61665
551: 1:Answer: message('StartNextLevel')
------------------------------------------
552: 1:BoardData {
552: 1:  'description': 'No more Levels. You win!',
552: 1:  'history': [],
552: 1:  'level': 16,
552: 1:  'questions': []
552: 1:}
552: 1:Scores: 61665
552: 1:Answer: message('StartNextLevel')
------------------------------------------
553: 1:BoardData {
553: 1:  'description': 'No more Levels. You win!',
553: 1:  'history': [],
553: 1:  'level': 16,
553: 1:  'questions': []
553: 1:}
553: 1:Scores: 61665
553: 1:Answer: message('StartNextLevel')
------------------------------------------
554: 1:BoardData {
554: 1:  'description': 'No more Levels. You win!',
554: 1:  'history': [],
554: 1:  'level': 16,
554: 1:  'questions': []
554: 1:}
554: 1:Scores: 61665
554: 1:Answer: message('StartNextLevel')
------------------------------------------
555: 1:BoardData {
555: 1:  'description': 'No more Levels. You win!',
555: 1:  'history': [],
555: 1:  'level': 16,
555: 1:  'questions': []
555: 1:}
555: 1:Scores: 61665
555: 1:Answer: message('StartNextLevel')
------------------------------------------
556: 1:BoardData {
556: 1:  'description': 'No more Levels. You win!',
556: 1:  'history': [],
556: 1:  'level': 16,
556: 1:  'questions': []
556: 1:}
556: 1:Scores: 61665
556: 1:Answer: message('StartNextLevel')
------------------------------------------
557: 1:BoardData {
557: 1:  'description': 'No more Levels. You win!',
557: 1:  'history': [],
557: 1:  'level': 16,
557: 1:  'questions': []
557: 1:}
557: 1:Scores: 61665
557: 1:Answer: message('StartNextLevel')
------------------------------------------
558: 1:BoardData {
558: 1:  'description': 'No more Levels. You win!',
558: 1:  'history': [],
558: 1:  'level': 16,
558: 1:  'questions': []
558: 1:}
558: 1:Scores: 61665
558: 1:Answer: message('StartNextLevel')
------------------------------------------
559: 1:BoardData {
559: 1:  'description': 'No more Levels. You win!',
559: 1:  'history': [],
559: 1:  'level': 16,
559: 1:  'questions': []
559: 1:}
559: 1:Scores: 61665
559: 1:Answer: message('StartNextLevel')
------------------------------------------
560: 1:BoardData {
560: 1:  'description': 'No more Levels. You win!',
560: 1:  'history': [],
560: 1:  'level': 16,
560: 1:  'questions': []
560: 1:}
560: 1:Scores: 61665
560: 1:Answer: message('StartNextLevel')
------------------------------------------
561: 1:BoardData {
561: 1:  'description': 'No more Levels. You win!',
561: 1:  'history': [],
561: 1:  'level': 16,
561: 1:  'questions': []
561: 1:}
561: 1:Scores: 61665
561: 1:Answer: message('StartNextLevel')
------------------------------------------
562: 1:BoardData {
562: 1:  'description': 'No more Levels. You win!',
562: 1:  'history': [],
562: 1:  'level': 16,
562: 1:  'questions': []
562: 1:}
562: 1:Scores: 61665
562: 1:Answer: message('StartNextLevel')
------------------------------------------
563: 1:BoardData {
563: 1:  'description': 'No more Levels. You win!',
563: 1:  'history': [],
563: 1:  'level': 16,
563: 1:  'questions': []
563: 1:}
563: 1:Scores: 61665
563: 1:Answer: message('StartNextLevel')
------------------------------------------
564: 1:BoardData {
564: 1:  'description': 'No more Levels. You win!',
564: 1:  'history': [],
564: 1:  'level': 16,
564: 1:  'questions': []
564: 1:}
564: 1:Scores: 61665
564: 1:Answer: message('StartNextLevel')
------------------------------------------
565: 1:BoardData {
565: 1:  'description': 'No more Levels. You win!',
565: 1:  'history': [],
565: 1:  'level': 16,
565: 1:  'questions': []
565: 1:}
565: 1:Scores: 61665
565: 1:Answer: message('StartNextLevel')
------------------------------------------
566: 1:BoardData {
566: 1:  'description': 'No more Levels. You win!',
566: 1:  'history': [],
566: 1:  'level': 16,
566: 1:  'questions': []
566: 1:}
566: 1:Scores: 61665
566: 1:Answer: message('StartNextLevel')
------------------------------------------
567: 1:BoardData {
567: 1:  'description': 'No more Levels. You win!',
567: 1:  'history': [],
567: 1:  'level': 16,
567: 1:  'questions': []
567: 1:}
567: 1:Scores: 61665
567: 1:Answer: message('StartNextLevel')
------------------------------------------
568: 1:BoardData {
568: 1:  'description': 'No more Levels. You win!',
568: 1:  'history': [],
568: 1:  'level': 16,
568: 1:  'questions': []
568: 1:}
568: 1:Scores: 61665
568: 1:Answer: message('StartNextLevel')
------------------------------------------
569: 1:BoardData {
569: 1:  'description': 'No more Levels. You win!',
569: 1:  'history': [],
569: 1:  'level': 16,
569: 1:  'questions': []
569: 1:}
569: 1:Scores: 61665
569: 1:Answer: message('StartNextLevel')
------------------------------------------
570: 1:BoardData {
570: 1:  'description': 'No more Levels. You win!',
570: 1:  'history': [],
570: 1:  'level': 16,
570: 1:  'questions': []
570: 1:}
570: 1:Scores: 61665
570: 1:Answer: message('StartNextLevel')
------------------------------------------
571: 1:BoardData {
571: 1:  'description': 'No more Levels. You win!',
571: 1:  'history': [],
571: 1:  'level': 16,
571: 1:  'questions': []
571: 1:}
571: 1:Scores: 61665
571: 1:Answer: message('StartNextLevel')
------------------------------------------
572: 1:BoardData {
572: 1:  'description': 'No more Levels. You win!',
572: 1:  'history': [],
572: 1:  'level': 16,
572: 1:  'questions': []
572: 1:}
572: 1:Scores: 61665
572: 1:Answer: message('StartNextLevel')
------------------------------------------
573: 1:BoardData {
573: 1:  'description': 'No more Levels. You win!',
573: 1:  'history': [],
573: 1:  'level': 16,
573: 1:  'questions': []
573: 1:}
573: 1:Scores: 61665
573: 1:Answer: message('StartNextLevel')
------------------------------------------
574: 1:BoardData {
574: 1:  'description': 'No more Levels. You win!',
574: 1:  'history': [],
574: 1:  'level': 16,
574: 1:  'questions': []
574: 1:}
574: 1:Scores: 61665
574: 1:Answer: message('StartNextLevel')
------------------------------------------
575: 1:BoardData {
575: 1:  'description': 'No more Levels. You win!',
575: 1:  'history': [],
575: 1:  'level': 16,
575: 1:  'questions': []
575: 1:}
575: 1:Scores: 61665
575: 1:Answer: message('StartNextLevel')
------------------------------------------
576: 1:BoardData {
576: 1:  'description': 'No more Levels. You win!',
576: 1:  'history': [],
576: 1:  'level': 16,
576: 1:  'questions': []
576: 1:}
576: 1:Scores: 61665
576: 1:Answer: message('StartNextLevel')
------------------------------------------
577: 1:BoardData {
577: 1:  'description': 'No more Levels. You win!',
577: 1:  'history': [],
577: 1:  'level': 16,
577: 1:  'questions': []
577: 1:}
577: 1:Scores: 61665
577: 1:Answer: message('StartNextLevel')
------------------------------------------
578: 1:BoardData {
578: 1:  'description': 'No more Levels. You win!',
578: 1:  'history': [],
578: 1:  'level': 16,
578: 1:  'questions': []
578: 1:}
578: 1:Scores: 61665
578: 1:Answer: message('StartNextLevel')
------------------------------------------
579: 1:BoardData {
579: 1:  'description': 'No more Levels. You win!',
579: 1:  'history': [],
579: 1:  'level': 16,
579: 1:  'questions': []
579: 1:}
579: 1:Scores: 61665
579: 1:Answer: message('StartNextLevel')
------------------------------------------
580: 1:BoardData {
580: 1:  'description': 'No more Levels. You win!',
580: 1:  'history': [],
580: 1:  'level': 16,
580: 1:  'questions': []
580: 1:}
580: 1:Scores: 61665
580: 1:Answer: message('StartNextLevel')
------------------------------------------
581: 1:BoardData {
581: 1:  'description': 'No more Levels. You win!',
581: 1:  'history': [],
581: 1:  'level': 16,
581: 1:  'questions': []
581: 1:}
581: 1:Scores: 61665
581: 1:Answer: message('StartNextLevel')
------------------------------------------
582: 1:BoardData {
582: 1:  'description': 'No more Levels. You win!',
582: 1:  'history': [],
582: 1:  'level': 16,
582: 1:  'questions': []
582: 1:}
582: 1:Scores: 61665
582: 1:Answer: message('StartNextLevel')
------------------------------------------
583: 1:BoardData {
583: 1:  'description': 'No more Levels. You win!',
583: 1:  'history': [],
583: 1:  'level': 16,
583: 1:  'questions': []
583: 1:}
583: 1:Scores: 61665
583: 1:Answer: message('StartNextLevel')
------------------------------------------
584: 1:BoardData {
584: 1:  'description': 'No more Levels. You win!',
584: 1:  'history': [],
584: 1:  'level': 16,
584: 1:  'questions': []
584: 1:}
584: 1:Scores: 61665
584: 1:Answer: message('StartNextLevel')
------------------------------------------
585: 1:BoardData {
585: 1:  'description': 'No more Levels. You win!',
585: 1:  'history': [],
585: 1:  'level': 16,
585: 1:  'questions': []
585: 1:}
585: 1:Scores: 61665
585: 1:Answer: message('StartNextLevel')
------------------------------------------
586: 1:BoardData {
586: 1:  'description': 'No more Levels. You win!',
586: 1:  'history': [],
586: 1:  'level': 16,
586: 1:  'questions': []
586: 1:}
586: 1:Scores: 61665
586: 1:Answer: message('StartNextLevel')
------------------------------------------
587: 1:BoardData {
587: 1:  'description': 'No more Levels. You win!',
587: 1:  'history': [],
587: 1:  'level': 16,
587: 1:  'questions': []
587: 1:}
587: 1:Scores: 61665
587: 1:Answer: message('StartNextLevel')
------------------------------------------
588: 1:BoardData {
588: 1:  'description': 'No more Levels. You win!',
588: 1:  'history': [],
588: 1:  'level': 16,
588: 1:  'questions': []
588: 1:}
588: 1:Scores: 61665
588: 1:Answer: message('StartNextLevel')
------------------------------------------
589: 1:BoardData {
589: 1:  'description': 'No more Levels. You win!',
589: 1:  'history': [],
589: 1:  'level': 16,
589: 1:  'questions': []
589: 1:}
589: 1:Scores: 61665
589: 1:Answer: message('StartNextLevel')
------------------------------------------
590: 1:BoardData {
590: 1:  'description': 'No more Levels. You win!',
590: 1:  'history': [],
590: 1:  'level': 16,
590: 1:  'questions': []
590: 1:}
590: 1:Scores: 61665
590: 1:Answer: message('StartNextLevel')
------------------------------------------
591: 1:BoardData {
591: 1:  'description': 'No more Levels. You win!',
591: 1:  'history': [],
591: 1:  'level': 16,
591: 1:  'questions': []
591: 1:}
591: 1:Scores: 61665
591: 1:Answer: message('StartNextLevel')
------------------------------------------
592: 1:BoardData {
592: 1:  'description': 'No more Levels. You win!',
592: 1:  'history': [],
592: 1:  'level': 16,
592: 1:  'questions': []
592: 1:}
592: 1:Scores: 61665
592: 1:Answer: message('StartNextLevel')
------------------------------------------
593: 1:BoardData {
593: 1:  'description': 'No more Levels. You win!',
593: 1:  'history': [],
593: 1:  'level': 16,
593: 1:  'questions': []
593: 1:}
593: 1:Scores: 61665
593: 1:Answer: message('StartNextLevel')
------------------------------------------
594: 1:BoardData {
594: 1:  'description': 'No more Levels. You win!',
594: 1:  'history': [],
594: 1:  'level': 16,
594: 1:  'questions': []
594: 1:}
594: 1:Scores: 61665
594: 1:Answer: message('StartNextLevel')
------------------------------------------
595: 1:BoardData {
595: 1:  'description': 'No more Levels. You win!',
595: 1:  'history': [],
595: 1:  'level': 16,
595: 1:  'questions': []
595: 1:}
595: 1:Scores: 61665
595: 1:Answer: message('StartNextLevel')
------------------------------------------
596: 1:BoardData {
596: 1:  'description': 'No more Levels. You win!',
596: 1:  'history': [],
596: 1:  'level': 16,
596: 1:  'questions': []
596: 1:}
596: 1:Scores: 61665
596: 1:Answer: message('StartNextLevel')
------------------------------------------
597: 1:BoardData {
597: 1:  'description': 'No more Levels. You win!',
597: 1:  'history': [],
597: 1:  'level': 16,
597: 1:  'questions': []
597: 1:}
597: 1:Scores: 61665
597: 1:Answer: message('StartNextLevel')
------------------------------------------
598: 1:BoardData {
598: 1:  'description': 'No more Levels. You win!',
598: 1:  'history': [],
598: 1:  'level': 16,
598: 1:  'questions': []
598: 1:}
598: 1:Scores: 61665
598: 1:Answer: message('StartNextLevel')
------------------------------------------
599: 1:BoardData {
599: 1:  'description': 'No more Levels. You win!',
599: 1:  'history': [],
599: 1:  'level': 16,
599: 1:  'questions': []
599: 1:}
599: 1:Scores: 61665
599: 1:Answer: message('StartNextLevel')
------------------------------------------
600: 1:BoardData {
600: 1:  'description': 'No more Levels. You win!',
600: 1:  'history': [],
600: 1:  'level': 16,
600: 1:  'questions': []
600: 1:}
600: 1:Scores: 61665
600: 1:Answer: message('StartNextLevel')
------------------------------------------
601: 1:BoardData {
601: 1:  'description': 'No more Levels. You win!',
601: 1:  'history': [],
601: 1:  'level': 16,
601: 1:  'questions': []
601: 1:}
601: 1:Scores: 61665
601: 1:Answer: message('StartNextLevel')
------------------------------------------
602: 1:BoardData {
602: 1:  'description': 'No more Levels. You win!',
602: 1:  'history': [],
602: 1:  'level': 16,
602: 1:  'questions': []
602: 1:}
602: 1:Scores: 61665
602: 1:Answer: message('StartNextLevel')
------------------------------------------
603: 1:BoardData {
603: 1:  'description': 'No more Levels. You win!',
603: 1:  'history': [],
603: 1:  'level': 16,
603: 1:  'questions': []
603: 1:}
603: 1:Scores: 61665
603: 1:Answer: message('StartNextLevel')
------------------------------------------
604: 1:BoardData {
604: 1:  'description': 'No more Levels. You win!',
604: 1:  'history': [],
604: 1:  'level': 16,
604: 1:  'questions': []
604: 1:}
604: 1:Scores: 61665
604: 1:Answer: message('StartNextLevel')
------------------------------------------
605: 1:BoardData {
605: 1:  'description': 'No more Levels. You win!',
605: 1:  'history': [],
605: 1:  'level': 16,
605: 1:  'questions': []
605: 1:}
605: 1:Scores: 61665
605: 1:Answer: message('StartNextLevel')
------------------------------------------
606: 1:BoardData {
606: 1:  'description': 'No more Levels. You win!',
606: 1:  'history': [],
606: 1:  'level': 16,
606: 1:  'questions': []
606: 1:}
606: 1:Scores: 61665
606: 1:Answer: message('StartNextLevel')
------------------------------------------
607: 1:BoardData {
607: 1:  'description': 'No more Levels. You win!',
607: 1:  'history': [],
607: 1:  'level': 16,
607: 1:  'questions': []
607: 1:}
607: 1:Scores: 61665
607: 1:Answer: message('StartNextLevel')
------------------------------------------
608: 1:BoardData {
608: 1:  'description': 'No more Levels. You win!',
608: 1:  'history': [],
608: 1:  'level': 16,
608: 1:  'questions': []
608: 1:}
608: 1:Scores: 61665
608: 1:Answer: message('StartNextLevel')
------------------------------------------
609: 1:BoardData {
609: 1:  'description': 'No more Levels. You win!',
609: 1:  'history': [],
609: 1:  'level': 16,
609: 1:  'questions': []
609: 1:}
609: 1:Scores: 61665
609: 1:Answer: message('StartNextLevel')
------------------------------------------
610: 1:BoardData {
610: 1:  'description': 'No more Levels. You win!',
610: 1:  'history': [],
610: 1:  'level': 16,
610: 1:  'questions': []
610: 1:}
610: 1:Scores: 61665
610: 1:Answer: message('StartNextLevel')
------------------------------------------
611: 1:BoardData {
611: 1:  'description': 'No more Levels. You win!',
611: 1:  'history': [],
611: 1:  'level': 16,
611: 1:  'questions': []
611: 1:}
611: 1:Scores: 61665
611: 1:Answer: message('StartNextLevel')
------------------------------------------
612: 1:BoardData {
612: 1:  'description': 'No more Levels. You win!',
612: 1:  'history': [],
612: 1:  'level': 16,
612: 1:  'questions': []
612: 1:}
612: 1:Scores: 61665
612: 1:Answer: message('StartNextLevel')
------------------------------------------
613: 1:BoardData {
613: 1:  'description': 'No more Levels. You win!',
613: 1:  'history': [],
613: 1:  'level': 16,
613: 1:  'questions': []
613: 1:}
613: 1:Scores: 61665
613: 1:Answer: message('StartNextLevel')
------------------------------------------
614: 1:BoardData {
614: 1:  'description': 'No more Levels. You win!',
614: 1:  'history': [],
614: 1:  'level': 16,
614: 1:  'questions': []
614: 1:}
614: 1:Scores: 61665
614: 1:Answer: message('StartNextLevel')
------------------------------------------
615: 1:BoardData {
615: 1:  'description': 'No more Levels. You win!',
615: 1:  'history': [],
615: 1:  'level': 16,
615: 1:  'questions': []
615: 1:}
615: 1:Scores: 61665
615: 1:Answer: message('StartNextLevel')
------------------------------------------
616: 1:BoardData {
616: 1:  'description': 'No more Levels. You win!',
616: 1:  'history': [],
616: 1:  'level': 16,
616: 1:  'questions': []
616: 1:}
616: 1:Scores: 61665
616: 1:Answer: message('StartNextLevel')
------------------------------------------
617: 1:BoardData {
617: 1:  'description': 'No more Levels. You win!',
617: 1:  'history': [],
617: 1:  'level': 16,
617: 1:  'questions': []
617: 1:}
617: 1:Scores: 61665
617: 1:Answer: message('StartNextLevel')
------------------------------------------
618: 1:BoardData {
618: 1:  'description': 'No more Levels. You win!',
618: 1:  'history': [],
618: 1:  'level': 16,
618: 1:  'questions': []
618: 1:}
618: 1:Scores: 61665
618: 1:Answer: message('StartNextLevel')
------------------------------------------
619: 1:BoardData {
619: 1:  'description': 'No more Levels. You win!',
619: 1:  'history': [],
619: 1:  'level': 16,
619: 1:  'questions': []
619: 1:}
619: 1:Scores: 61665
619: 1:Answer: message('StartNextLevel')
------------------------------------------
620: 1:BoardData {
620: 1:  'description': 'No more Levels. You win!',
620: 1:  'history': [],
620: 1:  'level': 16,
620: 1:  'questions': []
620: 1:}
620: 1:Scores: 61665
620: 1:Answer: message('StartNextLevel')
------------------------------------------
621: 1:BoardData {
621: 1:  'description': 'No more Levels. You win!',
621: 1:  'history': [],
621: 1:  'level': 16,
621: 1:  'questions': []
621: 1:}
621: 1:Scores: 61665
621: 1:Answer: message('StartNextLevel')
------------------------------------------
622: 1:BoardData {
622: 1:  'description': 'No more Levels. You win!',
622: 1:  'history': [],
622: 1:  'level': 16,
622: 1:  'questions': []
622: 1:}
622: 1:Scores: 61665
622: 1:Answer: message('StartNextLevel')
------------------------------------------
623: 1:BoardData {
623: 1:  'description': 'No more Levels. You win!',
623: 1:  'history': [],
623: 1:  'level': 16,
623: 1:  'questions': []
623: 1:}
623: 1:Scores: 61665
623: 1:Answer: message('StartNextLevel')
------------------------------------------
624: 1:BoardData {
624: 1:  'description': 'No more Levels. You win!',
624: 1:  'history': [],
624: 1:  'level': 16,
624: 1:  'questions': []
624: 1:}
624: 1:Scores: 61665
624: 1:Answer: message('StartNextLevel')
------------------------------------------
625: 1:BoardData {
625: 1:  'description': 'No more Levels. You win!',
625: 1:  'history': [],
625: 1:  'level': 16,
625: 1:  'questions': []
625: 1:}
625: 1:Scores: 61665
625: 1:Answer: message('StartNextLevel')
------------------------------------------
626: 1:BoardData {
626: 1:  'description': 'No more Levels. You win!',
626: 1:  'history': [],
626: 1:  'level': 16,
626: 1:  'questions': []
626: 1:}
626: 1:Scores: 61665
626: 1:Answer: message('StartNextLevel')
------------------------------------------
627: 1:BoardData {
627: 1:  'description': 'No more Levels. You win!',
627: 1:  'history': [],
627: 1:  'level': 16,
627: 1:  'questions': []
627: 1:}
627: 1:Scores: 61665
627: 1:Answer: message('StartNextLevel')
------------------------------------------
628: 1:BoardData {
628: 1:  'description': 'No more Levels. You win!',
628: 1:  'history': [],
628: 1:  'level': 16,
628: 1:  'questions': []
628: 1:}
628: 1:Scores: 61665
628: 1:Answer: message('StartNextLevel')
------------------------------------------
629: 1:BoardData {
629: 1:  'description': 'No more Levels. You win!',
629: 1:  'history': [],
629: 1:  'level': 16,
629: 1:  'questions': []
629: 1:}
629: 1:Scores: 61665
629: 1:Answer: message('StartNextLevel')
------------------------------------------
630: 1:BoardData {
630: 1:  'description': 'No more Levels. You win!',
630: 1:  'history': [],
630: 1:  'level': 16,
630: 1:  'questions': []
630: 1:}
630: 1:Scores: 61665
630: 1:Answer: message('StartNextLevel')
------------------------------------------
631: 1:BoardData {
631: 1:  'description': 'No more Levels. You win!',
631: 1:  'history': [],
631: 1:  'level': 16,
631: 1:  'questions': []
631: 1:}
631: 1:Scores: 61665
631: 1:Answer: message('StartNextLevel')
------------------------------------------
632: 1:BoardData {
632: 1:  'description': 'No more Levels. You win!',
632: 1:  'history': [],
632: 1:  'level': 16,
632: 1:  'questions': []
632: 1:}
632: 1:Scores: 61665
632: 1:Answer: message('StartNextLevel')
------------------------------------------
633: 1:BoardData {
633: 1:  'description': 'No more Levels. You win!',
633: 1:  'history': [],
633: 1:  'level': 16,
633: 1:  'questions': []
633: 1:}
633: 1:Scores: 61665
633: 1:Answer: message('StartNextLevel')
------------------------------------------
634: 1:BoardData {
634: 1:  'description': 'No more Levels. You win!',
634: 1:  'history': [],
634: 1:  'level': 16,
634: 1:  'questions': []
634: 1:}
634: 1:Scores: 61665
634: 1:Answer: message('StartNextLevel')
------------------------------------------
635: 1:BoardData {
635: 1:  'description': 'No more Levels. You win!',
635: 1:  'history': [],
635: 1:  'level': 16,
635: 1:  'questions': []
635: 1:}
635: 1:Scores: 61665
635: 1:Answer: message('StartNextLevel')
------------------------------------------
636: 1:BoardData {
636: 1:  'description': 'No more Levels. You win!',
636: 1:  'history': [],
636: 1:  'level': 16,
636: 1:  'questions': []
636: 1:}
636: 1:Scores: 61665
636: 1:Answer: message('StartNextLevel')
------------------------------------------
637: 1:BoardData {
637: 1:  'description': 'No more Levels. You win!',
637: 1:  'history': [],
637: 1:  'level': 16,
637: 1:  'questions': []
637: 1:}
637: 1:Scores: 61665
637: 1:Answer: message('StartNextLevel')
------------------------------------------
638: 1:BoardData {
638: 1:  'description': 'No more Levels. You win!',
638: 1:  'history': [],
638: 1:  'level': 16,
638: 1:  'questions': []
638: 1:}
638: 1:Scores: 61665
638: 1:Answer: message('StartNextLevel')
------------------------------------------
639: 1:BoardData {
639: 1:  'description': 'No more Levels. You win!',
639: 1:  'history': [],
639: 1:  'level': 16,
639: 1:  'questions': []
639: 1:}
639: 1:Scores: 61665
639: 1:Answer: message('StartNextLevel')
------------------------------------------
640: 1:BoardData {
640: 1:  'description': 'No more Levels. You win!',
640: 1:  'history': [],
640: 1:  'level': 16,
640: 1:  'questions': []
640: 1:}
640: 1:Scores: 61665
640: 1:Answer: message('StartNextLevel')
------------------------------------------
641: 1:BoardData {
641: 1:  'description': 'No more Levels. You win!',
641: 1:  'history': [],
641: 1:  'level': 16,
641: 1:  'questions': []
641: 1:}
641: 1:Scores: 61665
641: 1:Answer: message('StartNextLevel')
------------------------------------------
642: 1:BoardData {
642: 1:  'description': 'No more Levels. You win!',
642: 1:  'history': [],
642: 1:  'level': 16,
642: 1:  'questions': []
642: 1:}
642: 1:Scores: 61665
642: 1:Answer: message('StartNextLevel')
------------------------------------------
643: 1:BoardData {
643: 1:  'description': 'No more Levels. You win!',
643: 1:  'history': [],
643: 1:  'level': 16,
643: 1:  'questions': []
643: 1:}
643: 1:Scores: 61665
643: 1:Answer: message('StartNextLevel')
------------------------------------------
644: 1:BoardData {
644: 1:  'description': 'No more Levels. You win!',
644: 1:  'history': [],
644: 1:  'level': 16,
644: 1:  'questions': []
644: 1:}
644: 1:Scores: 61665
644: 1:Answer: message('StartNextLevel')
------------------------------------------
645: 1:BoardData {
645: 1:  'description': 'No more Levels. You win!',
645: 1:  'history': [],
645: 1:  'level': 16,
645: 1:  'questions': []
645: 1:}
645: 1:Scores: 61665
645: 1:Answer: message('StartNextLevel')
------------------------------------------
646: 1:BoardData {
646: 1:  'description': 'No more Levels. You win!',
646: 1:  'history': [],
646: 1:  'level': 16,
646: 1:  'questions': []
646: 1:}
646: 1:Scores: 61665
646: 1:Answer: message('StartNextLevel')
------------------------------------------
647: 1:BoardData {
647: 1:  'description': 'No more Levels. You win!',
647: 1:  'history': [],
647: 1:  'level': 16,
647: 1:  'questions': []
647: 1:}
647: 1:Scores: 61665
647: 1:Answer: message('StartNextLevel')
------------------------------------------
648: 1:BoardData {
648: 1:  'description': 'No more Levels. You win!',
648: 1:  'history': [],
648: 1:  'level': 16,
648: 1:  'questions': []
648: 1:}
648: 1:Scores: 61665
648: 1:Answer: message('StartNextLevel')
------------------------------------------
649: 1:BoardData {
649: 1:  'description': 'No more Levels. You win!',
649: 1:  'history': [],
649: 1:  'level': 16,
649: 1:  'questions': []
649: 1:}
649: 1:Scores: 61665
649: 1:Answer: message('StartNextLevel')
------------------------------------------
650: 1:BoardData {
650: 1:  'description': 'No more Levels. You win!',
650: 1:  'history': [],
650: 1:  'level': 16,
650: 1:  'questions': []
650: 1:}
650: 1:Scores: 61665
650: 1:Answer: message('StartNextLevel')
------------------------------------------
651: 1:BoardData {
651: 1:  'description': 'No more Levels. You win!',
651: 1:  'history': [],
651: 1:  'level': 16,
651: 1:  'questions': []
651: 1:}
651: 1:Scores: 61665
651: 1:Answer: message('StartNextLevel')
------------------------------------------
652: 1:BoardData {
652: 1:  'description': 'No more Levels. You win!',
652: 1:  'history': [],
652: 1:  'level': 16,
652: 1:  'questions': []
652: 1:}
652: 1:Scores: 61665
652: 1:Answer: message('StartNextLevel')
------------------------------------------
653: 1:BoardData {
653: 1:  'description': 'No more Levels. You win!',
653: 1:  'history': [],
653: 1:  'level': 16,
653: 1:  'questions': []
653: 1:}
653: 1:Scores: 61665
653: 1:Answer: message('StartNextLevel')
------------------------------------------
654: 1:BoardData {
654: 1:  'description': 'No more Levels. You win!',
654: 1:  'history': [],
654: 1:  'level': 16,
654: 1:  'questions': []
654: 1:}
654: 1:Scores: 61665
654: 1:Answer: message('StartNextLevel')
------------------------------------------
655: 1:BoardData {
655: 1:  'description': 'No more Levels. You win!',
655: 1:  'history': [],
655: 1:  'level': 16,
655: 1:  'questions': []
655: 1:}
655: 1:Scores: 61665
655: 1:Answer: message('StartNextLevel')
------------------------------------------
656: 1:BoardData {
656: 1:  'description': 'No more Levels. You win!',
656: 1:  'history': [],
656: 1:  'level': 16,
656: 1:  'questions': []
656: 1:}
656: 1:Scores: 61665
656: 1:Answer: message('StartNextLevel')
------------------------------------------
657: 1:BoardData {
657: 1:  'description': 'No more Levels. You win!',
657: 1:  'history': [],
657: 1:  'level': 16,
657: 1:  'questions': []
657: 1:}
657: 1:Scores: 61665
657: 1:Answer: message('StartNextLevel')
------------------------------------------
658: 1:BoardData {
658: 1:  'description': 'No more Levels. You win!',
658: 1:  'history': [],
658: 1:  'level': 16,
658: 1:  'questions': []
658: 1:}
658: 1:Scores: 61665
658: 1:Answer: message('StartNextLevel')
------------------------------------------
659: 1:BoardData {
659: 1:  'description': 'No more Levels. You win!',
659: 1:  'history': [],
659: 1:  'level': 16,
659: 1:  'questions': []
659: 1:}
659: 1:Scores: 61665
659: 1:Answer: message('StartNextLevel')
------------------------------------------
660: 1:BoardData {
660: 1:  'description': 'No more Levels. You win!',
660: 1:  'history': [],
660: 1:  'level': 16,
660: 1:  'questions': []
660: 1:}
660: 1:Scores: 61665
660: 1:Answer: message('StartNextLevel')
------------------------------------------
661: 1:BoardData {
661: 1:  'description': 'No more Levels. You win!',
661: 1:  'history': [],
661: 1:  'level': 16,
661: 1:  'questions': []
661: 1:}
661: 1:Scores: 61665
661: 1:Answer: message('StartNextLevel')
------------------------------------------
662: 1:BoardData {
662: 1:  'description': 'No more Levels. You win!',
662: 1:  'history': [],
662: 1:  'level': 16,
662: 1:  'questions': []
662: 1:}
662: 1:Scores: 61665
662: 1:Answer: message('StartNextLevel')
------------------------------------------
663: 1:BoardData {
663: 1:  'description': 'No more Levels. You win!',
663: 1:  'history': [],
663: 1:  'level': 16,
663: 1:  'questions': []
663: 1:}
663: 1:Scores: 61665
663: 1:Answer: message('StartNextLevel')
------------------------------------------
664: 1:BoardData {
664: 1:  'description': 'No more Levels. You win!',
664: 1:  'history': [],
664: 1:  'level': 16,
664: 1:  'questions': []
664: 1:}
664: 1:Scores: 61665
664: 1:Answer: message('StartNextLevel')
------------------------------------------
665: 1:BoardData {
665: 1:  'description': 'No more Levels. You win!',
665: 1:  'history': [],
665: 1:  'level': 16,
665: 1:  'questions': []
665: 1:}
665: 1:Scores: 61665
665: 1:Answer: message('StartNextLevel')
------------------------------------------
666: 1:BoardData {
666: 1:  'description': 'No more Levels. You win!',
666: 1:  'history': [],
666: 1:  'level': 16,
666: 1:  'questions': []
666: 1:}
666: 1:Scores: 61665
666: 1:Answer: message('StartNextLevel')
------------------------------------------
667: 1:BoardData {
667: 1:  'description': 'No more Levels. You win!',
667: 1:  'history': [],
667: 1:  'level': 16,
667: 1:  'questions': []
667: 1:}
667: 1:Scores: 61665
667: 1:Answer: message('StartNextLevel')
------------------------------------------
668: 1:BoardData {
668: 1:  'description': 'No more Levels. You win!',
668: 1:  'history': [],
668: 1:  'level': 16,
668: 1:  'questions': []
668: 1:}
668: 1:Scores: 61665
668: 1:Answer: message('StartNextLevel')
------------------------------------------
669: 1:BoardData {
669: 1:  'description': 'No more Levels. You win!',
669: 1:  'history': [],
669: 1:  'level': 16,
669: 1:  'questions': []
669: 1:}
669: 1:Scores: 61665
669: 1:Answer: message('StartNextLevel')
------------------------------------------
670: 1:BoardData {
670: 1:  'description': 'No more Levels. You win!',
670: 1:  'history': [],
670: 1:  'level': 16,
670: 1:  'questions': []
670: 1:}
670: 1:Scores: 61665
670: 1:Answer: message('StartNextLevel')
------------------------------------------
671: 1:BoardData {
671: 1:  'description': 'No more Levels. You win!',
671: 1:  'history': [],
671: 1:  'level': 16,
671: 1:  'questions': []
671: 1:}
671: 1:Scores: 61665
671: 1:Answer: message('StartNextLevel')
------------------------------------------
672: 1:BoardData {
672: 1:  'description': 'No more Levels. You win!',
672: 1:  'history': [],
672: 1:  'level': 16,
672: 1:  'questions': []
672: 1:}
672: 1:Scores: 61665
672: 1:Answer: message('StartNextLevel')
------------------------------------------
673: 1:BoardData {
673: 1:  'description': 'No more Levels. You win!',
673: 1:  'history': [],
673: 1:  'level': 16,
673: 1:  'questions': []
673: 1:}
673: 1:Scores: 61665
673: 1:Answer: message('StartNextLevel')
------------------------------------------
674: 1:BoardData {
674: 1:  'description': 'No more Levels. You win!',
674: 1:  'history': [],
674: 1:  'level': 16,
674: 1:  'questions': []
674: 1:}
674: 1:Scores: 61665
674: 1:Answer: message('StartNextLevel')
------------------------------------------
675: 1:BoardData {
675: 1:  'description': 'No more Levels. You win!',
675: 1:  'history': [],
675: 1:  'level': 16,
675: 1:  'questions': []
675: 1:}
675: 1:Scores: 61665
675: 1:Answer: message('StartNextLevel')
------------------------------------------
676: 1:BoardData {
676: 1:  'description': 'No more Levels. You win!',
676: 1:  'history': [],
676: 1:  'level': 16,
676: 1:  'questions': []
676: 1:}
676: 1:Scores: 61665
676: 1:Answer: message('StartNextLevel')
------------------------------------------
677: 1:BoardData {
677: 1:  'description': 'No more Levels. You win!',
677: 1:  'history': [],
677: 1:  'level': 16,
677: 1:  'questions': []
677: 1:}
677: 1:Scores: 61665
677: 1:Answer: message('StartNextLevel')
------------------------------------------
678: 1:BoardData {
678: 1:  'description': 'No more Levels. You win!',
678: 1:  'history': [],
678: 1:  'level': 16,
678: 1:  'questions': []
678: 1:}
678: 1:Scores: 61665
678: 1:Answer: message('StartNextLevel')
------------------------------------------
679: 1:BoardData {
679: 1:  'description': 'No more Levels. You win!',
679: 1:  'history': [],
679: 1:  'level': 16,
679: 1:  'questions': []
679: 1:}
679: 1:Scores: 61665
679: 1:Answer: message('StartNextLevel')
------------------------------------------
680: 1:BoardData {
680: 1:  'description': 'No more Levels. You win!',
680: 1:  'history': [],
680: 1:  'level': 16,
680: 1:  'questions': []
680: 1:}
680: 1:Scores: 61665
680: 1:Answer: message('StartNextLevel')
------------------------------------------
681: 1:BoardData {
681: 1:  'description': 'No more Levels. You win!',
681: 1:  'history': [],
681: 1:  'level': 16,
681: 1:  'questions': []
681: 1:}
681: 1:Scores: 61665
681: 1:Answer: message('StartNextLevel')
------------------------------------------
682: 1:BoardData {
682: 1:  'description': 'No more Levels. You win!',
682: 1:  'history': [],
682: 1:  'level': 16,
682: 1:  'questions': []
682: 1:}
682: 1:Scores: 61665
682: 1:Answer: message('StartNextLevel')
------------------------------------------
683: 1:BoardData {
683: 1:  'description': 'No more Levels. You win!',
683: 1:  'history': [],
683: 1:  'level': 16,
683: 1:  'questions': []
683: 1:}
683: 1:Scores: 61665
683: 1:Answer: message('StartNextLevel')
------------------------------------------
684: 1:BoardData {
684: 1:  'description': 'No more Levels. You win!',
684: 1:  'history': [],
684: 1:  'level': 16,
684: 1:  'questions': []
684: 1:}
684: 1:Scores: 61665
684: 1:Answer: message('StartNextLevel')
------------------------------------------
685: 1:BoardData {
685: 1:  'description': 'No more Levels. You win!',
685: 1:  'history': [],
685: 1:  'level': 16,
685: 1:  'questions': []
685: 1:}
685: 1:Scores: 61665
685: 1:Answer: message('StartNextLevel')
------------------------------------------
686: 1:BoardData {
686: 1:  'description': 'No more Levels. You win!',
686: 1:  'history': [],
686: 1:  'level': 16,
686: 1:  'questions': []
686: 1:}
686: 1:Scores: 61665
686: 1:Answer: message('StartNextLevel')
------------------------------------------
687: 1:BoardData {
687: 1:  'description': 'No more Levels. You win!',
687: 1:  'history': [],
687: 1:  'level': 16,
687: 1:  'questions': []
687: 1:}
687: 1:Scores: 61665
687: 1:Answer: message('StartNextLevel')
------------------------------------------
688: 1:BoardData {
688: 1:  'description': 'No more Levels. You win!',
688: 1:  'history': [],
688: 1:  'level': 16,
688: 1:  'questions': []
688: 1:}
688: 1:Scores: 61665
688: 1:Answer: message('StartNextLevel')
------------------------------------------
689: 1:BoardData {
689: 1:  'description': 'No more Levels. You win!',
689: 1:  'history': [],
689: 1:  'level': 16,
689: 1:  'questions': []
689: 1:}
689: 1:Scores: 61665
689: 1:Answer: message('StartNextLevel')
------------------------------------------
690: 1:BoardData {
690: 1:  'description': 'No more Levels. You win!',
690: 1:  'history': [],
690: 1:  'level': 16,
690: 1:  'questions': []
690: 1:}
690: 1:Scores: 61665
690: 1:Answer: message('StartNextLevel')
------------------------------------------
691: 1:BoardData {
691: 1:  'description': 'No more Levels. You win!',
691: 1:  'history': [],
691: 1:  'level': 16,
691: 1:  'questions': []
691: 1:}
691: 1:Scores: 61665
691: 1:Answer: message('StartNextLevel')
------------------------------------------
692: 1:BoardData {
692: 1:  'description': 'No more Levels. You win!',
692: 1:  'history': [],
692: 1:  'level': 16,
692: 1:  'questions': []
692: 1:}
692: 1:Scores: 61665
692: 1:Answer: message('StartNextLevel')
------------------------------------------
693: 1:BoardData {
693: 1:  'description': 'No more Levels. You win!',
693: 1:  'history': [],
693: 1:  'level': 16,
693: 1:  'questions': []
693: 1:}
693: 1:Scores: 61665
693: 1:Answer: message('StartNextLevel')
------------------------------------------
694: 1:BoardData {
694: 1:  'description': 'No more Levels. You win!',
694: 1:  'history': [],
694: 1:  'level': 16,
694: 1:  'questions': []
694: 1:}
694: 1:Scores: 61665
694: 1:Answer: message('StartNextLevel')
------------------------------------------
695: 1:BoardData {
695: 1:  'description': 'No more Levels. You win!',
695: 1:  'history': [],
695: 1:  'level': 16,
695: 1:  'questions': []
695: 1:}
695: 1:Scores: 61665
695: 1:Answer: message('StartNextLevel')
------------------------------------------
696: 1:BoardData {
696: 1:  'description': 'No more Levels. You win!',
696: 1:  'history': [],
696: 1:  'level': 16,
696: 1:  'questions': []
696: 1:}
696: 1:Scores: 61665
696: 1:Answer: message('StartNextLevel')
------------------------------------------
697: 1:BoardData {
697: 1:  'description': 'No more Levels. You win!',
697: 1:  'history': [],
697: 1:  'level': 16,
697: 1:  'questions': []
697: 1:}
697: 1:Scores: 61665
697: 1:Answer: message('StartNextLevel')
------------------------------------------
698: 1:BoardData {
698: 1:  'description': 'No more Levels. You win!',
698: 1:  'history': [],
698: 1:  'level': 16,
698: 1:  'questions': []
698: 1:}
698: 1:Scores: 61665
698: 1:Answer: message('StartNextLevel')
------------------------------------------
699: 1:BoardData {
699: 1:  'description': 'No more Levels. You win!',
699: 1:  'history': [],
699: 1:  'level': 16,
699: 1:  'questions': []
699: 1:}
699: 1:Scores: 61665
699: 1:Answer: message('StartNextLevel')
------------------------------------------
700: 1:BoardData {
700: 1:  'description': 'No more Levels. You win!',
700: 1:  'history': [],
700: 1:  'level': 16,
700: 1:  'questions': []
700: 1:}
700: 1:Scores: 61665
700: 1:Answer: message('StartNextLevel')
------------------------------------------
701: 1:BoardData {
701: 1:  'description': 'No more Levels. You win!',
701: 1:  'history': [],
701: 1:  'level': 16,
701: 1:  'questions': []
701: 1:}
701: 1:Scores: 61665
701: 1:Answer: message('StartNextLevel')
------------------------------------------
702: 1:BoardData {
702: 1:  'description': 'No more Levels. You win!',
702: 1:  'history': [],
702: 1:  'level': 16,
702: 1:  'questions': []
702: 1:}
702: 1:Scores: 61665
702: 1:Answer: message('StartNextLevel')
------------------------------------------
703: 1:BoardData {
703: 1:  'description': 'No more Levels. You win!',
703: 1:  'history': [],
703: 1:  'level': 16,
703: 1:  'questions': []
703: 1:}
703: 1:Scores: 61665
703: 1:Answer: message('StartNextLevel')
------------------------------------------
704: 1:BoardData {
704: 1:  'description': 'No more Levels. You win!',
704: 1:  'history': [],
704: 1:  'level': 16,
704: 1:  'questions': []
704: 1:}
704: 1:Scores: 61665
704: 1:Answer: message('StartNextLevel')
------------------------------------------
705: 1:BoardData {
705: 1:  'description': 'No more Levels. You win!',
705: 1:  'history': [],
705: 1:  'level': 16,
705: 1:  'questions': []
705: 1:}
705: 1:Scores: 61665
705: 1:Answer: message('StartNextLevel')
------------------------------------------
706: 1:BoardData {
706: 1:  'description': 'No more Levels. You win!',
706: 1:  'history': [],
706: 1:  'level': 16,
706: 1:  'questions': []
706: 1:}
706: 1:Scores: 61665
706: 1:Answer: message('StartNextLevel')
------------------------------------------
707: 1:BoardData {
707: 1:  'description': 'No more Levels. You win!',
707: 1:  'history': [],
707: 1:  'level': 16,
707: 1:  'questions': []
707: 1:}
707: 1:Scores: 61665
707: 1:Answer: message('StartNextLevel')
------------------------------------------
708: 1:BoardData {
708: 1:  'description': 'No more Levels. You win!',
708: 1:  'history': [],
708: 1:  'level': 16,
708: 1:  'questions': []
708: 1:}
708: 1:Scores: 61665
708: 1:Answer: message('StartNextLevel')
------------------------------------------
709: 1:BoardData {
709: 1:  'description': 'No more Levels. You win!',
709: 1:  'history': [],
709: 1:  'level': 16,
709: 1:  'questions': []
709: 1:}
709: 1:Scores: 61665
709: 1:Answer: message('StartNextLevel')
------------------------------------------
710: 1:BoardData {
710: 1:  'description': 'No more Levels. You win!',
710: 1:  'history': [],
710: 1:  'level': 16,
710: 1:  'questions': []
710: 1:}
710: 1:Scores: 61665
710: 1:Answer: message('StartNextLevel')
------------------------------------------
711: 1:BoardData {
711: 1:  'description': 'No more Levels. You win!',
711: 1:  'history': [],
711: 1:  'level': 16,
711: 1:  'questions': []
711: 1:}
711: 1:Scores: 61665
711: 1:Answer: message('StartNextLevel')
------------------------------------------
712: 1:BoardData {
712: 1:  'description': 'No more Levels. You win!',
712: 1:  'history': [],
712: 1:  'level': 16,
712: 1:  'questions': []
712: 1:}
712: 1:Scores: 61665
712: 1:Answer: message('StartNextLevel')
------------------------------------------
713: 1:BoardData {
713: 1:  'description': 'No more Levels. You win!',
713: 1:  'history': [],
713: 1:  'level': 16,
713: 1:  'questions': []
713: 1:}
713: 1:Scores: 61665
713: 1:Answer: message('StartNextLevel')
------------------------------------------
714: 1:BoardData {
714: 1:  'description': 'No more Levels. You win!',
714: 1:  'history': [],
714: 1:  'level': 16,
714: 1:  'questions': []
714: 1:}
714: 1:Scores: 61665
714: 1:Answer: message('StartNextLevel')
------------------------------------------
715: 1:BoardData {
715: 1:  'description': 'No more Levels. You win!',
715: 1:  'history': [],
715: 1:  'level': 16,
715: 1:  'questions': []
715: 1:}
715: 1:Scores: 61665
715: 1:Answer: message('StartNextLevel')
------------------------------------------
716: 1:BoardData {
716: 1:  'description': 'No more Levels. You win!',
716: 1:  'history': [],
716: 1:  'level': 16,
716: 1:  'questions': []
716: 1:}
716: 1:Scores: 61665
716: 1:Answer: message('StartNextLevel')
------------------------------------------
717: 1:BoardData {
717: 1:  'description': 'No more Levels. You win!',
717: 1:  'history': [],
717: 1:  'level': 16,
717: 1:  'questions': []
717: 1:}
717: 1:Scores: 61665
717: 1:Answer: message('StartNextLevel')
------------------------------------------
718: 1:BoardData {
718: 1:  'description': 'No more Levels. You win!',
718: 1:  'history': [],
718: 1:  'level': 16,
718: 1:  'questions': []
718: 1:}
718: 1:Scores: 61665
718: 1:Answer: message('StartNextLevel')
------------------------------------------
719: 1:BoardData {
719: 1:  'description': 'No more Levels. You win!',
719: 1:  'history': [],
719: 1:  'level': 16,
719: 1:  'questions': []
719: 1:}
719: 1:Scores: 61665
719: 1:Answer: message('StartNextLevel')
------------------------------------------
720: 1:BoardData {
720: 1:  'description': 'No more Levels. You win!',
720: 1:  'history': [],
720: 1:  'level': 16,
720: 1:  'questions': []
720: 1:}
720: 1:Scores: 61665
720: 1:Answer: message('StartNextLevel')
------------------------------------------
721: 1:BoardData {
721: 1:  'description': 'No more Levels. You win!',
721: 1:  'history': [],
721: 1:  'level': 16,
721: 1:  'questions': []
721: 1:}
721: 1:Scores: 61665
721: 1:Answer: message('StartNextLevel')
------------------------------------------
722: 1:BoardData {
722: 1:  'description': 'No more Levels. You win!',
722: 1:  'history': [],
722: 1:  'level': 16,
722: 1:  'questions': []
722: 1:}
722: 1:Scores: 61665
722: 1:Answer: message('StartNextLevel')
------------------------------------------
723: 1:BoardData {
723: 1:  'description': 'No more Levels. You win!',
723: 1:  'history': [],
723: 1:  'level': 16,
723: 1:  'questions': []
723: 1:}
723: 1:Scores: 61665
723: 1:Answer: message('StartNextLevel')
------------------------------------------
724: 1:BoardData {
724: 1:  'description': 'No more Levels. You win!',
724: 1:  'history': [],
724: 1:  'level': 16,
724: 1:  'questions': []
724: 1:}
724: 1:Scores: 61665
724: 1:Answer: message('StartNextLevel')
------------------------------------------
725: 1:BoardData {
725: 1:  'description': 'No more Levels. You win!',
725: 1:  'history': [],
725: 1:  'level': 16,
725: 1:  'questions': []
725: 1:}
725: 1:Scores: 61665
725: 1:Answer: message('StartNextLevel')
------------------------------------------
726: 1:BoardData {
726: 1:  'description': 'No more Levels. You win!',
726: 1:  'history': [],
726: 1:  'level': 16,
726: 1:  'questions': []
726: 1:}
726: 1:Scores: 61665
726: 1:Answer: message('StartNextLevel')
------------------------------------------
727: 1:BoardData {
727: 1:  'description': 'No more Levels. You win!',
727: 1:  'history': [],
727: 1:  'level': 16,
727: 1:  'questions': []
727: 1:}
727: 1:Scores: 61665
727: 1:Answer: message('StartNextLevel')
------------------------------------------
728: 1:BoardData {
728: 1:  'description': 'No more Levels. You win!',
728: 1:  'history': [],
728: 1:  'level': 16,
728: 1:  'questions': []
728: 1:}
728: 1:Scores: 61665
728: 1:Answer: message('StartNextLevel')
------------------------------------------
729: 1:BoardData {
729: 1:  'description': 'No more Levels. You win!',
729: 1:  'history': [],
729: 1:  'level': 16,
729: 1:  'questions': []
729: 1:}
729: 1:Scores: 61665
729: 1:Answer: message('StartNextLevel')
------------------------------------------
730: 1:BoardData {
730: 1:  'description': 'No more Levels. You win!',
730: 1:  'history': [],
730: 1:  'level': 16,
730: 1:  'questions': []
730: 1:}
730: 1:Scores: 61665
730: 1:Answer: message('StartNextLevel')
------------------------------------------
731: 1:BoardData {
731: 1:  'description': 'No more Levels. You win!',
731: 1:  'history': [],
731: 1:  'level': 16,
731: 1:  'questions': []
731: 1:}
731: 1:Scores: 61665
731: 1:Answer: message('StartNextLevel')
------------------------------------------
732: 1:BoardData {
732: 1:  'description': 'No more Levels. You win!',
732: 1:  'history': [],
732: 1:  'level': 16,
732: 1:  'questions': []
732: 1:}
732: 1:Scores: 61665
732: 1:Answer: message('StartNextLevel')
------------------------------------------
733: 1:BoardData {
733: 1:  'description': 'No more Levels. You win!',
733: 1:  'history': [],
733: 1:  'level': 16,
733: 1:  'questions': []
733: 1:}
733: 1:Scores: 61665
733: 1:Answer: message('StartNextLevel')
------------------------------------------
734: 1:BoardData {
734: 1:  'description': 'No more Levels. You win!',
734: 1:  'history': [],
734: 1:  'level': 16,
734: 1:  'questions': []
734: 1:}
734: 1:Scores: 61665
734: 1:Answer: message('StartNextLevel')
------------------------------------------
735: 1:BoardData {
735: 1:  'description': 'No more Levels. You win!',
735: 1:  'history': [],
735: 1:  'level': 16,
735: 1:  'questions': []
735: 1:}
735: 1:Scores: 61665
735: 1:Answer: message('StartNextLevel')
------------------------------------------
736: 1:BoardData {
736: 1:  'description': 'No more Levels. You win!',
736: 1:  'history': [],
736: 1:  'level': 16,
736: 1:  'questions': []
736: 1:}
736: 1:Scores: 61665
736: 1:Answer: message('StartNextLevel')
------------------------------------------
737: 1:BoardData {
737: 1:  'description': 'No more Levels. You win!',
737: 1:  'history': [],
737: 1:  'level': 16,
737: 1:  'questions': []
737: 1:}
737: 1:Scores: 61665
737: 1:Answer: message('StartNextLevel')
------------------------------------------
738: 1:BoardData {
738: 1:  'description': 'No more Levels. You win!',
738: 1:  'history': [],
738: 1:  'level': 16,
738: 1:  'questions': []
738: 1:}
738: 1:Scores: 61665
738: 1:Answer: message('StartNextLevel')
------------------------------------------
739: 1:BoardData {
739: 1:  'description': 'No more Levels. You win!',
739: 1:  'history': [],
739: 1:  'level': 16,
739: 1:  'questions': []
739: 1:}
739: 1:Scores: 61665
739: 1:Answer: message('StartNextLevel')
------------------------------------------
740: 1:BoardData {
740: 1:  'description': 'No more Levels. You win!',
740: 1:  'history': [],
740: 1:  'level': 16,
740: 1:  'questions': []
740: 1:}
740: 1:Scores: 61665
740: 1:Answer: message('StartNextLevel')
------------------------------------------
741: 1:BoardData {
741: 1:  'description': 'No more Levels. You win!',
741: 1:  'history': [],
741: 1:  'level': 16,
741: 1:  'questions': []
741: 1:}
741: 1:Scores: 61665
741: 1:Answer: message('StartNextLevel')
------------------------------------------
742: 1:BoardData {
742: 1:  'description': 'No more Levels. You win!',
742: 1:  'history': [],
742: 1:  'level': 16,
742: 1:  'questions': []
742: 1:}
742: 1:Scores: 61665
742: 1:Answer: message('StartNextLevel')
------------------------------------------
743: 1:BoardData {
743: 1:  'description': 'No more Levels. You win!',
743: 1:  'history': [],
743: 1:  'level': 16,
743: 1:  'questions': []
743: 1:}
743: 1:Scores: 61665
743: 1:Answer: message('StartNextLevel')
------------------------------------------
744: 1:BoardData {
744: 1:  'description': 'No more Levels. You win!',
744: 1:  'history': [],
744: 1:  'level': 16,
744: 1:  'questions': []
744: 1:}
744: 1:Scores: 61665
744: 1:Answer: message('StartNextLevel')
------------------------------------------
745: 1:BoardData {
745: 1:  'description': 'No more Levels. You win!',
745: 1:  'history': [],
745: 1:  'level': 16,
745: 1:  'questions': []
745: 1:}
745: 1:Scores: 61665
745: 1:Answer: message('StartNextLevel')
------------------------------------------
746: 1:BoardData {
746: 1:  'description': 'No more Levels. You win!',
746: 1:  'history': [],
746: 1:  'level': 16,
746: 1:  'questions': []
746: 1:}
746: 1:Scores: 61665
746: 1:Answer: message('StartNextLevel')
------------------------------------------
747: 1:BoardData {
747: 1:  'description': 'No more Levels. You win!',
747: 1:  'history': [],
747: 1:  'level': 16,
747: 1:  'questions': []
747: 1:}
747: 1:Scores: 61665
747: 1:Answer: message('StartNextLevel')
------------------------------------------
748: 1:BoardData {
748: 1:  'description': 'No more Levels. You win!',
748: 1:  'history': [],
748: 1:  'level': 16,
748: 1:  'questions': []
748: 1:}
748: 1:Scores: 61665
748: 1:Answer: message('StartNextLevel')
------------------------------------------
749: 1:BoardData {
749: 1:  'description': 'No more Levels. You win!',
749: 1:  'history': [],
749: 1:  'level': 16,
749: 1:  'questions': []
749: 1:}
749: 1:Scores: 61665
749: 1:Answer: message('StartNextLevel')
------------------------------------------
750: 1:BoardData {
750: 1:  'description': 'No more Levels. You win!',
750: 1:  'history': [],
750: 1:  'level': 16,
750: 1:  'questions': []
750: 1:}
750: 1:Scores: 61665
750: 1:Answer: message('StartNextLevel')
------------------------------------------
751: 1:BoardData {
751: 1:  'description': 'No more Levels. You win!',
751: 1:  'history': [],
751: 1:  'level': 16,
751: 1:  'questions': []
751: 1:}
751: 1:Scores: 61665
751: 1:Answer: message('StartNextLevel')
------------------------------------------
752: 1:BoardData {
752: 1:  'description': 'No more Levels. You win!',
752: 1:  'history': [],
752: 1:  'level': 16,
752: 1:  'questions': []
752: 1:}
752: 1:Scores: 61665
752: 1:Answer: message('StartNextLevel')
------------------------------------------
753: 1:BoardData {
753: 1:  'description': 'No more Levels. You win!',
753: 1:  'history': [],
753: 1:  'level': 16,
753: 1:  'questions': []
753: 1:}
753: 1:Scores: 61665
753: 1:Answer: message('StartNextLevel')
------------------------------------------
754: 1:BoardData {
754: 1:  'description': 'No more Levels. You win!',
754: 1:  'history': [],
754: 1:  'level': 16,
754: 1:  'questions': []
754: 1:}
754: 1:Scores: 61665
754: 1:Answer: message('StartNextLevel')
------------------------------------------
755: 1:BoardData {
755: 1:  'description': 'No more Levels. You win!',
755: 1:  'history': [],
755: 1:  'level': 16,
755: 1:  'questions': []
755: 1:}
755: 1:Scores: 61665
755: 1:Answer: message('StartNextLevel')
------------------------------------------
756: 1:BoardData {
756: 1:  'description': 'No more Levels. You win!',
756: 1:  'history': [],
756: 1:  'level': 16,
756: 1:  'questions': []
756: 1:}
756: 1:Scores: 61665
756: 1:Answer: message('StartNextLevel')
------------------------------------------
757: 1:BoardData {
757: 1:  'description': 'No more Levels. You win!',
757: 1:  'history': [],
757: 1:  'level': 16,
757: 1:  'questions': []
757: 1:}
757: 1:Scores: 61665
757: 1:Answer: message('StartNextLevel')
------------------------------------------
758: 1:BoardData {
758: 1:  'description': 'No more Levels. You win!',
758: 1:  'history': [],
758: 1:  'level': 16,
758: 1:  'questions': []
758: 1:}
758: 1:Scores: 61665
758: 1:Answer: message('StartNextLevel')
------------------------------------------
759: 1:BoardData {
759: 1:  'description': 'No more Levels. You win!',
759: 1:  'history': [],
759: 1:  'level': 16,
759: 1:  'questions': []
759: 1:}
759: 1:Scores: 61665
759: 1:Answer: message('StartNextLevel')
------------------------------------------
760: 1:BoardData {
760: 1:  'description': 'No more Levels. You win!',
760: 1:  'history': [],
760: 1:  'level': 16,
760: 1:  'questions': []
760: 1:}
760: 1:Scores: 61665
760: 1:Answer: message('StartNextLevel')
------------------------------------------
761: 1:BoardData {
761: 1:  'description': 'No more Levels. You win!',
761: 1:  'history': [],
761: 1:  'level': 16,
761: 1:  'questions': []
761: 1:}
761: 1:Scores: 61665
761: 1:Answer: message('StartNextLevel')
------------------------------------------
762: 1:BoardData {
762: 1:  'description': 'No more Levels. You win!',
762: 1:  'history': [],
762: 1:  'level': 16,
762: 1:  'questions': []
762: 1:}
762: 1:Scores: 61665
762: 1:Answer: message('StartNextLevel')
------------------------------------------
763: 1:BoardData {
763: 1:  'description': 'No more Levels. You win!',
763: 1:  'history': [],
763: 1:  'level': 16,
763: 1:  'questions': []
763: 1:}
763: 1:Scores: 61665
763: 1:Answer: message('StartNextLevel')
------------------------------------------
764: 1:BoardData {
764: 1:  'description': 'No more Levels. You win!',
764: 1:  'history': [],
764: 1:  'level': 16,
764: 1:  'questions': []
764: 1:}
764: 1:Scores: 61665
764: 1:Answer: message('StartNextLevel')
------------------------------------------
765: 1:BoardData {
765: 1:  'description': 'No more Levels. You win!',
765: 1:  'history': [],
765: 1:  'level': 16,
765: 1:  'questions': []
765: 1:}
765: 1:Scores: 61665
765: 1:Answer: message('StartNextLevel')
------------------------------------------
766: 1:BoardData {
766: 1:  'description': 'No more Levels. You win!',
766: 1:  'history': [],
766: 1:  'level': 16,
766: 1:  'questions': []
766: 1:}
766: 1:Scores: 61665
766: 1:Answer: message('StartNextLevel')
------------------------------------------
767: 1:BoardData {
767: 1:  'description': 'No more Levels. You win!',
767: 1:  'history': [],
767: 1:  'level': 16,
767: 1:  'questions': []
767: 1:}
767: 1:Scores: 61665
767: 1:Answer: message('StartNextLevel')
------------------------------------------
768: 1:BoardData {
768: 1:  'description': 'No more Levels. You win!',
768: 1:  'history': [],
768: 1:  'level': 16,
768: 1:  'questions': []
768: 1:}
768: 1:Scores: 61665
768: 1:Answer: message('StartNextLevel')
------------------------------------------
769: 1:BoardData {
769: 1:  'description': 'No more Levels. You win!',
769: 1:  'history': [],
769: 1:  'level': 16,
769: 1:  'questions': []
769: 1:}
769: 1:Scores: 61665
769: 1:Answer: message('StartNextLevel')
------------------------------------------
770: 1:BoardData {
770: 1:  'description': 'No more Levels. You win!',
770: 1:  'history': [],
770: 1:  'level': 16,
770: 1:  'questions': []
770: 1:}
770: 1:Scores: 61665
770: 1:Answer: message('StartNextLevel')
------------------------------------------
771: 1:BoardData {
771: 1:  'description': 'No more Levels. You win!',
771: 1:  'history': [],
771: 1:  'level': 16,
771: 1:  'questions': []
771: 1:}
771: 1:Scores: 61665
771: 1:Answer: message('StartNextLevel')
------------------------------------------
772: 1:BoardData {
772: 1:  'description': 'No more Levels. You win!',
772: 1:  'history': [],
772: 1:  'level': 16,
772: 1:  'questions': []
772: 1:}
772: 1:Scores: 61665
772: 1:Answer: message('StartNextLevel')
------------------------------------------
773: 1:BoardData {
773: 1:  'description': 'No more Levels. You win!',
773: 1:  'history': [],
773: 1:  'level': 16,
773: 1:  'questions': []
773: 1:}
773: 1:Scores: 61665
773: 1:Answer: message('StartNextLevel')
------------------------------------------
774: 1:BoardData {
774: 1:  'description': 'No more Levels. You win!',
774: 1:  'history': [],
774: 1:  'level': 16,
774: 1:  'questions': []
774: 1:}
774: 1:Scores: 61665
774: 1:Answer: message('StartNextLevel')
------------------------------------------
775: 1:BoardData {
775: 1:  'description': 'No more Levels. You win!',
775: 1:  'history': [],
775: 1:  'level': 16,
775: 1:  'questions': []
775: 1:}
775: 1:Scores: 61665
775: 1:Answer: message('StartNextLevel')
------------------------------------------
776: 1:BoardData {
776: 1:  'description': 'No more Levels. You win!',
776: 1:  'history': [],
776: 1:  'level': 16,
776: 1:  'questions': []
776: 1:}
776: 1:Scores: 61665
776: 1:Answer: message('StartNextLevel')
------------------------------------------
777: 1:BoardData {
777: 1:  'description': 'No more Levels. You win!',
777: 1:  'history': [],
777: 1:  'level': 16,
777: 1:  'questions': []
777: 1:}
777: 1:Scores: 61665
777: 1:Answer: message('StartNextLevel')
------------------------------------------
778: 1:BoardData {
778: 1:  'description': 'No more Levels. You win!',
778: 1:  'history': [],
778: 1:  'level': 16,
778: 1:  'questions': []
778: 1:}
778: 1:Scores: 61665
778: 1:Answer: message('StartNextLevel')
------------------------------------------
779: 1:BoardData {
779: 1:  'description': 'No more Levels. You win!',
779: 1:  'history': [],
779: 1:  'level': 16,
779: 1:  'questions': []
779: 1:}
779: 1:Scores: 61665
779: 1:Answer: message('StartNextLevel')
------------------------------------------
780: 1:BoardData {
780: 1:  'description': 'No more Levels. You win!',
780: 1:  'history': [],
780: 1:  'level': 16,
780: 1:  'questions': []
780: 1:}
780: 1:Scores: 61665
780: 1:Answer: message('StartNextLevel')
------------------------------------------
781: 1:BoardData {
781: 1:  'description': 'No more Levels. You win!',
781: 1:  'history': [],
781: 1:  'level': 16,
781: 1:  'questions': []
781: 1:}
781: 1:Scores: 61665
781: 1:Answer: message('StartNextLevel')
------------------------------------------
782: 1:BoardData {
782: 1:  'description': 'No more Levels. You win!',
782: 1:  'history': [],
782: 1:  'level': 16,
782: 1:  'questions': []
782: 1:}
782: 1:Scores: 61665
782: 1:Answer: message('StartNextLevel')
------------------------------------------
783: 1:BoardData {
783: 1:  'description': 'No more Levels. You win!',
783: 1:  'history': [],
783: 1:  'level': 16,
783: 1:  'questions': []
783: 1:}
783: 1:Scores: 61665
783: 1:Answer: message('StartNextLevel')
------------------------------------------
784: 1:BoardData {
784: 1:  'description': 'No more Levels. You win!',
784: 1:  'history': [],
784: 1:  'level': 16,
784: 1:  'questions': []
784: 1:}
784: 1:Scores: 61665
784: 1:Answer: message('StartNextLevel')
------------------------------------------
785: 1:BoardData {
785: 1:  'description': 'No more Levels. You win!',
785: 1:  'history': [],
785: 1:  'level': 16,
785: 1:  'questions': []
785: 1:}
785: 1:Scores: 61665
785: 1:Answer: message('StartNextLevel')
------------------------------------------
786: 1:BoardData {
786: 1:  'description': 'No more Levels. You win!',
786: 1:  'history': [],
786: 1:  'level': 16,
786: 1:  'questions': []
786: 1:}
786: 1:Scores: 61665
786: 1:Answer: message('StartNextLevel')
------------------------------------------
787: 1:BoardData {
787: 1:  'description': 'No more Levels. You win!',
787: 1:  'history': [],
787: 1:  'level': 16,
787: 1:  'questions': []
787: 1:}
787: 1:Scores: 61665
787: 1:Answer: message('StartNextLevel')
------------------------------------------
788: 1:BoardData {
788: 1:  'description': 'No more Levels. You win!',
788: 1:  'history': [],
788: 1:  'level': 16,
788: 1:  'questions': []
788: 1:}
788: 1:Scores: 61665
788: 1:Answer: message('StartNextLevel')
------------------------------------------
789: 1:BoardData {
789: 1:  'description': 'No more Levels. You win!',
789: 1:  'history': [],
789: 1:  'level': 16,
789: 1:  'questions': []
789: 1:}
789: 1:Scores: 61665
789: 1:Answer: message('StartNextLevel')
------------------------------------------
790: 1:BoardData {
790: 1:  'description': 'No more Levels. You win!',
790: 1:  'history': [],
790: 1:  'level': 16,
790: 1:  'questions': []
790: 1:}
790: 1:Scores: 61665
790: 1:Answer: message('StartNextLevel')
------------------------------------------
791: 1:BoardData {
791: 1:  'description': 'No more Levels. You win!',
791: 1:  'history': [],
791: 1:  'level': 16,
791: 1:  'questions': []
791: 1:}
791: 1:Scores: 61665
791: 1:Answer: message('StartNextLevel')
------------------------------------------
792: 1:BoardData {
792: 1:  'description': 'No more Levels. You win!',
792: 1:  'history': [],
792: 1:  'level': 16,
792: 1:  'questions': []
792: 1:}
792: 1:Scores: 61665
792: 1:Answer: message('StartNextLevel')
------------------------------------------
793: 1:BoardData {
793: 1:  'description': 'No more Levels. You win!',
793: 1:  'history': [],
793: 1:  'level': 16,
793: 1:  'questions': []
793: 1:}
793: 1:Scores: 61665
793: 1:Answer: message('StartNextLevel')
------------------------------------------
794: 1:BoardData {
794: 1:  'description': 'No more Levels. You win!',
794: 1:  'history': [],
794: 1:  'level': 16,
794: 1:  'questions': []
794: 1:}
794: 1:Scores: 61665
794: 1:Answer: message('StartNextLevel')
------------------------------------------
795: 1:BoardData {
795: 1:  'description': 'No more Levels. You win!',
795: 1:  'history': [],
795: 1:  'level': 16,
795: 1:  'questions': []
795: 1:}
795: 1:Scores: 61665
795: 1:Answer: message('StartNextLevel')
------------------------------------------
796: 1:BoardData {
796: 1:  'description': 'No more Levels. You win!',
796: 1:  'history': [],
796: 1:  'level': 16,
796: 1:  'questions': []
796: 1:}
796: 1:Scores: 61665
796: 1:Answer: message('StartNextLevel')
------------------------------------------
797: 1:BoardData {
797: 1:  'description': 'No more Levels. You win!',
797: 1:  'history': [],
797: 1:  'level': 16,
797: 1:  'questions': []
797: 1:}
797: 1:Scores: 61665
797: 1:Answer: message('StartNextLevel')
------------------------------------------
798: 1:BoardData {
798: 1:  'description': 'No more Levels. You win!',
798: 1:  'history': [],
798: 1:  'level': 16,
798: 1:  'questions': []
798: 1:}
798: 1:Scores: 61665
798: 1:Answer: message('StartNextLevel')
------------------------------------------
799: 1:BoardData {
799: 1:  'description': 'No more Levels. You win!',
799: 1:  'history': [],
799: 1:  'level': 16,
799: 1:  'questions': []
799: 1:}
799: 1:Scores: 61665
799: 1:Answer: message('StartNextLevel')
------------------------------------------
800: 1:BoardData {
800: 1:  'description': 'No more Levels. You win!',
800: 1:  'history': [],
800: 1:  'level': 16,
800: 1:  'questions': []
800: 1:}
800: 1:Scores: 61665
800: 1:Answer: message('StartNextLevel')
------------------------------------------
801: 1:BoardData {
801: 1:  'description': 'No more Levels. You win!',
801: 1:  'history': [],
801: 1:  'level': 16,
801: 1:  'questions': []
801: 1:}
801: 1:Scores: 61665
801: 1:Answer: message('StartNextLevel')
------------------------------------------
802: 1:BoardData {
802: 1:  'description': 'No more Levels. You win!',
802: 1:  'history': [],
802: 1:  'level': 16,
802: 1:  'questions': []
802: 1:}
802: 1:Scores: 61665
802: 1:Answer: message('StartNextLevel')
------------------------------------------
803: 1:BoardData {
803: 1:  'description': 'No more Levels. You win!',
803: 1:  'history': [],
803: 1:  'level': 16,
803: 1:  'questions': []
803: 1:}
803: 1:Scores: 61665
803: 1:Answer: message('StartNextLevel')
------------------------------------------
804: 1:BoardData {
804: 1:  'description': 'No more Levels. You win!',
804: 1:  'history': [],
804: 1:  'level': 16,
804: 1:  'questions': []
804: 1:}
804: 1:Scores: 61665
804: 1:Answer: message('StartNextLevel')
------------------------------------------
805: 1:BoardData {
805: 1:  'description': 'No more Levels. You win!',
805: 1:  'history': [],
805: 1:  'level': 16,
805: 1:  'questions': []
805: 1:}
805: 1:Scores: 61665
805: 1:Answer: message('StartNextLevel')
------------------------------------------
806: 1:BoardData {
806: 1:  'description': 'No more Levels. You win!',
806: 1:  'history': [],
806: 1:  'level': 16,
806: 1:  'questions': []
806: 1:}
806: 1:Scores: 61665
806: 1:Answer: message('StartNextLevel')
------------------------------------------
807: 1:BoardData {
807: 1:  'description': 'No more Levels. You win!',
807: 1:  'history': [],
807: 1:  'level': 16,
807: 1:  'questions': []
807: 1:}
807: 1:Scores: 61665
807: 1:Answer: message('StartNextLevel')
------------------------------------------
808: 1:BoardData {
808: 1:  'description': 'No more Levels. You win!',
808: 1:  'history': [],
808: 1:  'level': 16,
808: 1:  'questions': []
808: 1:}
808: 1:Scores: 61665
808: 1:Answer: message('StartNextLevel')
------------------------------------------
809: 1:BoardData {
809: 1:  'description': 'No more Levels. You win!',
809: 1:  'history': [],
809: 1:  'level': 16,
809: 1:  'questions': []
809: 1:}
809: 1:Scores: 61665
809: 1:Answer: message('StartNextLevel')
------------------------------------------
810: 1:BoardData {
810: 1:  'description': 'No more Levels. You win!',
810: 1:  'history': [],
810: 1:  'level': 16,
810: 1:  'questions': []
810: 1:}
810: 1:Scores: 61665
810: 1:Answer: message('StartNextLevel')
------------------------------------------
811: 1:BoardData {
811: 1:  'description': 'No more Levels. You win!',
811: 1:  'history': [],
811: 1:  'level': 16,
811: 1:  'questions': []
811: 1:}
811: 1:Scores: 61665
811: 1:Answer: message('StartNextLevel')
------------------------------------------
812: 1:BoardData {
812: 1:  'description': 'No more Levels. You win!',
812: 1:  'history': [],
812: 1:  'level': 16,
812: 1:  'questions': []
812: 1:}
812: 1:Scores: 61665
812: 1:Answer: message('StartNextLevel')
------------------------------------------
813: 1:BoardData {
813: 1:  'description': 'No more Levels. You win!',
813: 1:  'history': [],
813: 1:  'level': 16,
813: 1:  'questions': []
813: 1:}
813: 1:Scores: 61665
813: 1:Answer: message('StartNextLevel')
------------------------------------------
814: 1:BoardData {
814: 1:  'description': 'No more Levels. You win!',
814: 1:  'history': [],
814: 1:  'level': 16,
814: 1:  'questions': []
814: 1:}
814: 1:Scores: 61665
814: 1:Answer: message('StartNextLevel')
------------------------------------------
815: 1:BoardData {
815: 1:  'description': 'No more Levels. You win!',
815: 1:  'history': [],
815: 1:  'level': 16,
815: 1:  'questions': []
815: 1:}
815: 1:Scores: 61665
815: 1:Answer: message('StartNextLevel')
------------------------------------------
816: 1:BoardData {
816: 1:  'description': 'No more Levels. You win!',
816: 1:  'history': [],
816: 1:  'level': 16,
816: 1:  'questions': []
816: 1:}
816: 1:Scores: 61665
816: 1:Answer: message('StartNextLevel')
------------------------------------------
817: 1:BoardData {
817: 1:  'description': 'No more Levels. You win!',
817: 1:  'history': [],
817: 1:  'level': 16,
817: 1:  'questions': []
817: 1:}
817: 1:Scores: 61665
817: 1:Answer: message('StartNextLevel')
------------------------------------------
818: 1:BoardData {
818: 1:  'description': 'No more Levels. You win!',
818: 1:  'history': [],
818: 1:  'level': 16,
818: 1:  'questions': []
818: 1:}
818: 1:Scores: 61665
818: 1:Answer: message('StartNextLevel')
------------------------------------------
819: 1:BoardData {
819: 1:  'description': 'No more Levels. You win!',
819: 1:  'history': [],
819: 1:  'level': 16,
819: 1:  'questions': []
819: 1:}
819: 1:Scores: 61665
819: 1:Answer: message('StartNextLevel')
------------------------------------------
820: 1:BoardData {
820: 1:  'description': 'No more Levels. You win!',
820: 1:  'history': [],
820: 1:  'level': 16,
820: 1:  'questions': []
820: 1:}
820: 1:Scores: 61665
820: 1:Answer: message('StartNextLevel')
------------------------------------------
821: 1:BoardData {
821: 1:  'description': 'No more Levels. You win!',
821: 1:  'history': [],
821: 1:  'level': 16,
821: 1:  'questions': []
821: 1:}
821: 1:Scores: 61665
821: 1:Answer: message('StartNextLevel')
------------------------------------------
822: 1:BoardData {
822: 1:  'description': 'No more Levels. You win!',
822: 1:  'history': [],
822: 1:  'level': 16,
822: 1:  'questions': []
822: 1:}
822: 1:Scores: 61665
822: 1:Answer: message('StartNextLevel')
------------------------------------------
823: 1:BoardData {
823: 1:  'description': 'No more Levels. You win!',
823: 1:  'history': [],
823: 1:  'level': 16,
823: 1:  'questions': []
823: 1:}
823: 1:Scores: 61665
823: 1:Answer: message('StartNextLevel')
------------------------------------------
824: 1:BoardData {
824: 1:  'description': 'No more Levels. You win!',
824: 1:  'history': [],
824: 1:  'level': 16,
824: 1:  'questions': []
824: 1:}
824: 1:Scores: 61665
824: 1:Answer: message('StartNextLevel')
------------------------------------------
825: 1:BoardData {
825: 1:  'description': 'No more Levels. You win!',
825: 1:  'history': [],
825: 1:  'level': 16,
825: 1:  'questions': []
825: 1:}
825: 1:Scores: 61665
825: 1:Answer: message('StartNextLevel')
------------------------------------------
826: 1:BoardData {
826: 1:  'description': 'No more Levels. You win!',
826: 1:  'history': [],
826: 1:  'level': 16,
826: 1:  'questions': []
826: 1:}
826: 1:Scores: 61665
826: 1:Answer: message('StartNextLevel')
------------------------------------------
827: 1:BoardData {
827: 1:  'description': 'No more Levels. You win!',
827: 1:  'history': [],
827: 1:  'level': 16,
827: 1:  'questions': []
827: 1:}
827: 1:Scores: 61665
827: 1:Answer: message('StartNextLevel')
------------------------------------------
828: 1:BoardData {
828: 1:  'description': 'No more Levels. You win!',
828: 1:  'history': [],
828: 1:  'level': 16,
828: 1:  'questions': []
828: 1:}
828: 1:Scores: 61665
828: 1:Answer: message('StartNextLevel')
------------------------------------------
829: 1:BoardData {
829: 1:  'description': 'No more Levels. You win!',
829: 1:  'history': [],
829: 1:  'level': 16,
829: 1:  'questions': []
829: 1:}
829: 1:Scores: 61665
829: 1:Answer: message('StartNextLevel')
------------------------------------------
830: 1:BoardData {
830: 1:  'description': 'No more Levels. You win!',
830: 1:  'history': [],
830: 1:  'level': 16,
830: 1:  'questions': []
830: 1:}
830: 1:Scores: 61665
830: 1:Answer: message('StartNextLevel')
------------------------------------------
831: 1:BoardData {
831: 1:  'description': 'No more Levels. You win!',
831: 1:  'history': [],
831: 1:  'level': 16,
831: 1:  'questions': []
831: 1:}
831: 1:Scores: 61665
831: 1:Answer: message('StartNextLevel')
------------------------------------------
832: 1:BoardData {
832: 1:  'description': 'No more Levels. You win!',
832: 1:  'history': [],
832: 1:  'level': 16,
832: 1:  'questions': []
832: 1:}
832: 1:Scores: 61665
832: 1:Answer: message('StartNextLevel')
------------------------------------------
833: 1:BoardData {
833: 1:  'description': 'No more Levels. You win!',
833: 1:  'history': [],
833: 1:  'level': 16,
833: 1:  'questions': []
833: 1:}
833: 1:Scores: 61665
833: 1:Answer: message('StartNextLevel')
------------------------------------------
834: 1:BoardData {
834: 1:  'description': 'No more Levels. You win!',
834: 1:  'history': [],
834: 1:  'level': 16,
834: 1:  'questions': []
834: 1:}
834: 1:Scores: 61665
834: 1:Answer: message('StartNextLevel')
------------------------------------------
835: 1:BoardData {
835: 1:  'description': 'No more Levels. You win!',
835: 1:  'history': [],
835: 1:  'level': 16,
835: 1:  'questions': []
835: 1:}
835: 1:Scores: 61665
835: 1:Answer: message('StartNextLevel')
------------------------------------------
836: 1:BoardData {
836: 1:  'description': 'No more Levels. You win!',
836: 1:  'history': [],
836: 1:  'level': 16,
836: 1:  'questions': []
836: 1:}
836: 1:Scores: 61665
836: 1:Answer: message('StartNextLevel')
------------------------------------------
837: 1:BoardData {
837: 1:  'description': 'No more Levels. You win!',
837: 1:  'history': [],
837: 1:  'level': 16,
837: 1:  'questions': []
837: 1:}
837: 1:Scores: 61665
837: 1:Answer: message('StartNextLevel')
------------------------------------------
838: 1:BoardData {
838: 1:  'description': 'No more Levels. You win!',
838: 1:  'history': [],
838: 1:  'level': 16,
838: 1:  'questions': []
838: 1:}
838: 1:Scores: 61665
838: 1:Answer: message('StartNextLevel')
------------------------------------------
839: 1:BoardData {
839: 1:  'description': 'No more Levels. You win!',
839: 1:  'history': [],
839: 1:  'level': 16,
839: 1:  'questions': []
839: 1:}
839: 1:Scores: 61665
839: 1:Answer: message('StartNextLevel')
------------------------------------------
840: 1:BoardData {
840: 1:  'description': 'No more Levels. You win!',
840: 1:  'history': [],
840: 1:  'level': 16,
840: 1:  'questions': []
840: 1:}
840: 1:Scores: 61665
840: 1:Answer: message('StartNextLevel')
------------------------------------------
841: 1:BoardData {
841: 1:  'description': 'No more Levels. You win!',
841: 1:  'history': [],
841: 1:  'level': 16,
841: 1:  'questions': []
841: 1:}
841: 1:Scores: 61665
841: 1:Answer: message('StartNextLevel')
------------------------------------------
842: 1:BoardData {
842: 1:  'description': 'No more Levels. You win!',
842: 1:  'history': [],
842: 1:  'level': 16,
842: 1:  'questions': []
842: 1:}
842: 1:Scores: 61665
842: 1:Answer: message('StartNextLevel')
------------------------------------------
843: 1:BoardData {
843: 1:  'description': 'No more Levels. You win!',
843: 1:  'history': [],
843: 1:  'level': 16,
843: 1:  'questions': []
843: 1:}
843: 1:Scores: 61665
843: 1:Answer: message('StartNextLevel')
------------------------------------------
844: 1:BoardData {
844: 1:  'description': 'No more Levels. You win!',
844: 1:  'history': [],
844: 1:  'level': 16,
844: 1:  'questions': []
844: 1:}
844: 1:Scores: 61665
844: 1:Answer: message('StartNextLevel')
------------------------------------------
845: 1:BoardData {
845: 1:  'description': 'No more Levels. You win!',
845: 1:  'history': [],
845: 1:  'level': 16,
845: 1:  'questions': []
845: 1:}
845: 1:Scores: 61665
845: 1:Answer: message('StartNextLevel')
------------------------------------------
846: 1:BoardData {
846: 1:  'description': 'No more Levels. You win!',
846: 1:  'history': [],
846: 1:  'level': 16,
846: 1:  'questions': []
846: 1:}
846: 1:Scores: 61665
846: 1:Answer: message('StartNextLevel')
------------------------------------------
847: 1:BoardData {
847: 1:  'description': 'No more Levels. You win!',
847: 1:  'history': [],
847: 1:  'level': 16,
847: 1:  'questions': []
847: 1:}
847: 1:Scores: 61665
847: 1:Answer: message('StartNextLevel')
------------------------------------------
848: 1:BoardData {
848: 1:  'description': 'No more Levels. You win!',
848: 1:  'history': [],
848: 1:  'level': 16,
848: 1:  'questions': []
848: 1:}
848: 1:Scores: 61665
848: 1:Answer: message('StartNextLevel')
------------------------------------------
849: 1:BoardData {
849: 1:  'description': 'No more Levels. You win!',
849: 1:  'history': [],
849: 1:  'level': 16,
849: 1:  'questions': []
849: 1:}
849: 1:Scores: 61665
849: 1:Answer: message('StartNextLevel')
------------------------------------------
850: 1:BoardData {
850: 1:  'description': 'No more Levels. You win!',
850: 1:  'history': [],
850: 1:  'level': 16,
850: 1:  'questions': []
850: 1:}
850: 1:Scores: 61665
850: 1:Answer: message('StartNextLevel')
------------------------------------------
851: 1:BoardData {
851: 1:  'description': 'No more Levels. You win!',
851: 1:  'history': [],
851: 1:  'level': 16,
851: 1:  'questions': []
851: 1:}
851: 1:Scores: 61665
851: 1:Answer: message('StartNextLevel')
------------------------------------------
852: 1:BoardData {
852: 1:  'description': 'No more Levels. You win!',
852: 1:  'history': [],
852: 1:  'level': 16,
852: 1:  'questions': []
852: 1:}
852: 1:Scores: 61665
852: 1:Answer: message('StartNextLevel')
------------------------------------------
853: 1:BoardData {
853: 1:  'description': 'No more Levels. You win!',
853: 1:  'history': [],
853: 1:  'level': 16,
853: 1:  'questions': []
853: 1:}
853: 1:Scores: 61665
853: 1:Answer: message('StartNextLevel')
------------------------------------------
854: 1:BoardData {
854: 1:  'description': 'No more Levels. You win!',
854: 1:  'history': [],
854: 1:  'level': 16,
854: 1:  'questions': []
854: 1:}
854: 1:Scores: 61665
854: 1:Answer: message('StartNextLevel')
------------------------------------------
855: 1:BoardData {
855: 1:  'description': 'No more Levels. You win!',
855: 1:  'history': [],
855: 1:  'level': 16,
855: 1:  'questions': []
855: 1:}
855: 1:Scores: 61665
855: 1:Answer: message('StartNextLevel')
------------------------------------------
856: 1:BoardData {
856: 1:  'description': 'No more Levels. You win!',
856: 1:  'history': [],
856: 1:  'level': 16,
856: 1:  'questions': []
856: 1:}
856: 1:Scores: 61665
856: 1:Answer: message('StartNextLevel')
------------------------------------------
857: 1:BoardData {
857: 1:  'description': 'No more Levels. You win!',
857: 1:  'history': [],
857: 1:  'level': 16,
857: 1:  'questions': []
857: 1:}
857: 1:Scores: 61665
857: 1:Answer: message('StartNextLevel')
------------------------------------------
858: 1:BoardData {
858: 1:  'description': 'No more Levels. You win!',
858: 1:  'history': [],
858: 1:  'level': 16,
858: 1:  'questions': []
858: 1:}
858: 1:Scores: 61665
858: 1:Answer: message('StartNextLevel')
------------------------------------------
859: 1:BoardData {
859: 1:  'description': 'No more Levels. You win!',
859: 1:  'history': [],
859: 1:  'level': 16,
859: 1:  'questions': []
859: 1:}
859: 1:Scores: 61665
859: 1:Answer: message('StartNextLevel')
------------------------------------------
860: 1:BoardData {
860: 1:  'description': 'No more Levels. You win!',
860: 1:  'history': [],
860: 1:  'level': 16,
860: 1:  'questions': []
860: 1:}
860: 1:Scores: 61665
860: 1:Answer: message('StartNextLevel')
------------------------------------------
861: 1:BoardData {
861: 1:  'description': 'No more Levels. You win!',
861: 1:  'history': [],
861: 1:  'level': 16,
861: 1:  'questions': []
861: 1:}
861: 1:Scores: 61665
861: 1:Answer: message('StartNextLevel')
------------------------------------------
862: 1:BoardData {
862: 1:  'description': 'No more Levels. You win!',
862: 1:  'history': [],
862: 1:  'level': 16,
862: 1:  'questions': []
862: 1:}
862: 1:Scores: 61665
862: 1:Answer: message('StartNextLevel')
------------------------------------------
863: 1:BoardData {
863: 1:  'description': 'No more Levels. You win!',
863: 1:  'history': [],
863: 1:  'level': 16,
863: 1:  'questions': []
863: 1:}
863: 1:Scores: 61665
863: 1:Answer: message('StartNextLevel')
------------------------------------------
864: 1:BoardData {
864: 1:  'description': 'No more Levels. You win!',
864: 1:  'history': [],
864: 1:  'level': 16,
864: 1:  'questions': []
864: 1:}
864: 1:Scores: 61665
864: 1:Answer: message('StartNextLevel')
------------------------------------------
865: 1:BoardData {
865: 1:  'description': 'No more Levels. You win!',
865: 1:  'history': [],
865: 1:  'level': 16,
865: 1:  'questions': []
865: 1:}
865: 1:Scores: 61665
865: 1:Answer: message('StartNextLevel')
------------------------------------------
866: 1:BoardData {
866: 1:  'description': 'No more Levels. You win!',
866: 1:  'history': [],
866: 1:  'level': 16,
866: 1:  'questions': []
866: 1:}
866: 1:Scores: 61665
866: 1:Answer: message('StartNextLevel')
------------------------------------------
867: 1:BoardData {
867: 1:  'description': 'No more Levels. You win!',
867: 1:  'history': [],
867: 1:  'level': 16,
867: 1:  'questions': []
867: 1:}
867: 1:Scores: 61665
867: 1:Answer: message('StartNextLevel')
------------------------------------------
868: 1:BoardData {
868: 1:  'description': 'No more Levels. You win!',
868: 1:  'history': [],
868: 1:  'level': 16,
868: 1:  'questions': []
868: 1:}
868: 1:Scores: 61665
868: 1:Answer: message('StartNextLevel')
------------------------------------------
869: 1:BoardData {
869: 1:  'description': 'No more Levels. You win!',
869: 1:  'history': [],
869: 1:  'level': 16,
869: 1:  'questions': []
869: 1:}
869: 1:Scores: 61665
869: 1:Answer: message('StartNextLevel')
------------------------------------------
870: 1:BoardData {
870: 1:  'description': 'No more Levels. You win!',
870: 1:  'history': [],
870: 1:  'level': 16,
870: 1:  'questions': []
870: 1:}
870: 1:Scores: 61665
870: 1:Answer: message('StartNextLevel')
------------------------------------------
871: 1:BoardData {
871: 1:  'description': 'No more Levels. You win!',
871: 1:  'history': [],
871: 1:  'level': 16,
871: 1:  'questions': []
871: 1:}
871: 1:Scores: 61665
871: 1:Answer: message('StartNextLevel')
------------------------------------------
872: 1:BoardData {
872: 1:  'description': 'No more Levels. You win!',
872: 1:  'history': [],
872: 1:  'level': 16,
872: 1:  'questions': []
872: 1:}
872: 1:Scores: 61665
872: 1:Answer: message('StartNextLevel')
------------------------------------------
873: 1:BoardData {
873: 1:  'description': 'No more Levels. You win!',
873: 1:  'history': [],
873: 1:  'level': 16,
873: 1:  'questions': []
873: 1:}
873: 1:Scores: 61665
873: 1:Answer: message('StartNextLevel')
------------------------------------------
874: 1:BoardData {
874: 1:  'description': 'No more Levels. You win!',
874: 1:  'history': [],
874: 1:  'level': 16,
874: 1:  'questions': []
874: 1:}
874: 1:Scores: 61665
874: 1:Answer: message('StartNextLevel')
------------------------------------------
875: 1:BoardData {
875: 1:  'description': 'No more Levels. You win!',
875: 1:  'history': [],
875: 1:  'level': 16,
875: 1:  'questions': []
875: 1:}
875: 1:Scores: 61665
875: 1:Answer: message('StartNextLevel')
------------------------------------------
876: 1:BoardData {
876: 1:  'description': 'No more Levels. You win!',
876: 1:  'history': [],
876: 1:  'level': 16,
876: 1:  'questions': []
876: 1:}
876: 1:Scores: 61665
876: 1:Answer: message('StartNextLevel')
------------------------------------------
877: 1:BoardData {
877: 1:  'description': 'No more Levels. You win!',
877: 1:  'history': [],
877: 1:  'level': 16,
877: 1:  'questions': []
877: 1:}
877: 1:Scores: 61665
877: 1:Answer: message('StartNextLevel')
------------------------------------------
878: 1:BoardData {
878: 1:  'description': 'No more Levels. You win!',
878: 1:  'history': [],
878: 1:  'level': 16,
878: 1:  'questions': []
878: 1:}
878: 1:Scores: 61665
878: 1:Answer: message('StartNextLevel')
------------------------------------------
879: 1:BoardData {
879: 1:  'description': 'No more Levels. You win!',
879: 1:  'history': [],
879: 1:  'level': 16,
879: 1:  'questions': []
879: 1:}
879: 1:Scores: 61665
879: 1:Answer: message('StartNextLevel')
------------------------------------------
880: 1:BoardData {
880: 1:  'description': 'No more Levels. You win!',
880: 1:  'history': [],
880: 1:  'level': 16,
880: 1:  'questions': []
880: 1:}
880: 1:Scores: 61665
880: 1:Answer: message('StartNextLevel')
------------------------------------------
881: 1:BoardData {
881: 1:  'description': 'No more Levels. You win!',
881: 1:  'history': [],
881: 1:  'level': 16,
881: 1:  'questions': []
881: 1:}
881: 1:Scores: 61665
881: 1:Answer: message('StartNextLevel')
------------------------------------------
882: 1:BoardData {
882: 1:  'description': 'No more Levels. You win!',
882: 1:  'history': [],
882: 1:  'level': 16,
882: 1:  'questions': []
882: 1:}
882: 1:Scores: 61665
882: 1:Answer: message('StartNextLevel')
------------------------------------------
883: 1:BoardData {
883: 1:  'description': 'No more Levels. You win!',
883: 1:  'history': [],
883: 1:  'level': 16,
883: 1:  'questions': []
883: 1:}
883: 1:Scores: 61665
883: 1:Answer: message('StartNextLevel')
------------------------------------------
884: 1:BoardData {
884: 1:  'description': 'No more Levels. You win!',
884: 1:  'history': [],
884: 1:  'level': 16,
884: 1:  'questions': []
884: 1:}
884: 1:Scores: 61665
884: 1:Answer: message('StartNextLevel')
------------------------------------------
885: 1:BoardData {
885: 1:  'description': 'No more Levels. You win!',
885: 1:  'history': [],
885: 1:  'level': 16,
885: 1:  'questions': []
885: 1:}
885: 1:Scores: 61665
885: 1:Answer: message('StartNextLevel')
------------------------------------------
886: 1:BoardData {
886: 1:  'description': 'No more Levels. You win!',
886: 1:  'history': [],
886: 1:  'level': 16,
886: 1:  'questions': []
886: 1:}
886: 1:Scores: 61665
886: 1:Answer: message('StartNextLevel')
------------------------------------------
887: 1:BoardData {
887: 1:  'description': 'No more Levels. You win!',
887: 1:  'history': [],
887: 1:  'level': 16,
887: 1:  'questions': []
887: 1:}
887: 1:Scores: 61665
887: 1:Answer: message('StartNextLevel')
------------------------------------------
888: 1:BoardData {
888: 1:  'description': 'No more Levels. You win!',
888: 1:  'history': [],
888: 1:  'level': 16,
888: 1:  'questions': []
888: 1:}
888: 1:Scores: 61665
888: 1:Answer: message('StartNextLevel')
------------------------------------------
889: 1:BoardData {
889: 1:  'description': 'No more Levels. You win!',
889: 1:  'history': [],
889: 1:  'level': 16,
889: 1:  'questions': []
889: 1:}
889: 1:Scores: 61665
889: 1:Answer: message('StartNextLevel')
------------------------------------------
890: 1:BoardData {
890: 1:  'description': 'No more Levels. You win!',
890: 1:  'history': [],
890: 1:  'level': 16,
890: 1:  'questions': []
890: 1:}
890: 1:Scores: 61665
890: 1:Answer: message('StartNextLevel')
------------------------------------------
891: 1:BoardData {
891: 1:  'description': 'No more Levels. You win!',
891: 1:  'history': [],
891: 1:  'level': 16,
891: 1:  'questions': []
891: 1:}
891: 1:Scores: 61665
891: 1:Answer: message('StartNextLevel')
------------------------------------------
892: 1:BoardData {
892: 1:  'description': 'No more Levels. You win!',
892: 1:  'history': [],
892: 1:  'level': 16,
892: 1:  'questions': []
892: 1:}
892: 1:Scores: 61665
892: 1:Answer: message('StartNextLevel')
------------------------------------------
893: 1:BoardData {
893: 1:  'description': 'No more Levels. You win!',
893: 1:  'history': [],
893: 1:  'level': 16,
893: 1:  'questions': []
893: 1:}
893: 1:Scores: 61665
893: 1:Answer: message('StartNextLevel')
------------------------------------------
894: 1:BoardData {
894: 1:  'description': 'No more Levels. You win!',
894: 1:  'history': [],
894: 1:  'level': 16,
894: 1:  'questions': []
894: 1:}
894: 1:Scores: 61665
894: 1:Answer: message('StartNextLevel')
------------------------------------------
895: 1:BoardData {
895: 1:  'description': 'No more Levels. You win!',
895: 1:  'history': [],
895: 1:  'level': 16,
895: 1:  'questions': []
895: 1:}
895: 1:Scores: 61665
895: 1:Answer: message('StartNextLevel')
------------------------------------------
896: 1:BoardData {
896: 1:  'description': 'No more Levels. You win!',
896: 1:  'history': [],
896: 1:  'level': 16,
896: 1:  'questions': []
896: 1:}
896: 1:Scores: 61665
896: 1:Answer: message('StartNextLevel')
------------------------------------------
897: 1:BoardData {
897: 1:  'description': 'No more Levels. You win!',
897: 1:  'history': [],
897: 1:  'level': 16,
897: 1:  'questions': []
897: 1:}
897: 1:Scores: 61665
897: 1:Answer: message('StartNextLevel')
------------------------------------------
898: 1:BoardData {
898: 1:  'description': 'No more Levels. You win!',
898: 1:  'history': [],
898: 1:  'level': 16,
898: 1:  'questions': []
898: 1:}
898: 1:Scores: 61665
898: 1:Answer: message('StartNextLevel')
------------------------------------------
899: 1:BoardData {
899: 1:  'description': 'No more Levels. You win!',
899: 1:  'history': [],
899: 1:  'level': 16,
899: 1:  'questions': []
899: 1:}
899: 1:Scores: 61665
899: 1:Answer: message('StartNextLevel')
------------------------------------------
900: 1:BoardData {
900: 1:  'description': 'No more Levels. You win!',
900: 1:  'history': [],
900: 1:  'level': 16,
900: 1:  'questions': []
900: 1:}
900: 1:Scores: 61665
900: 1:Answer: message('StartNextLevel')
------------------------------------------
901: 1:BoardData {
901: 1:  'description': 'No more Levels. You win!',
901: 1:  'history': [],
901: 1:  'level': 16,
901: 1:  'questions': []
901: 1:}
901: 1:Scores: 61665
901: 1:Answer: message('StartNextLevel')
------------------------------------------
902: 1:BoardData {
902: 1:  'description': 'No more Levels. You win!',
902: 1:  'history': [],
902: 1:  'level': 16,
902: 1:  'questions': []
902: 1:}
902: 1:Scores: 61665
902: 1:Answer: message('StartNextLevel')
------------------------------------------
903: 1:BoardData {
903: 1:  'description': 'No more Levels. You win!',
903: 1:  'history': [],
903: 1:  'level': 16,
903: 1:  'questions': []
903: 1:}
903: 1:Scores: 61665
903: 1:Answer: message('StartNextLevel')
------------------------------------------
904: 1:BoardData {
904: 1:  'description': 'No more Levels. You win!',
904: 1:  'history': [],
904: 1:  'level': 16,
904: 1:  'questions': []
904: 1:}
904: 1:Scores: 61665
904: 1:Answer: message('StartNextLevel')
------------------------------------------
905: 1:BoardData {
905: 1:  'description': 'No more Levels. You win!',
905: 1:  'history': [],
905: 1:  'level': 16,
905: 1:  'questions': []
905: 1:}
905: 1:Scores: 61665
905: 1:Answer: message('StartNextLevel')
------------------------------------------
906: 1:BoardData {
906: 1:  'description': 'No more Levels. You win!',
906: 1:  'history': [],
906: 1:  'level': 16,
906: 1:  'questions': []
906: 1:}
906: 1:Scores: 61665
906: 1:Answer: message('StartNextLevel')
------------------------------------------
907: 1:BoardData {
907: 1:  'description': 'No more Levels. You win!',
907: 1:  'history': [],
907: 1:  'level': 16,
907: 1:  'questions': []
907: 1:}
907: 1:Scores: 61665
907: 1:Answer: message('StartNextLevel')
------------------------------------------
908: 1:BoardData {
908: 1:  'description': 'No more Levels. You win!',
908: 1:  'history': [],
908: 1:  'level': 16,
908: 1:  'questions': []
908: 1:}
908: 1:Scores: 61665
908: 1:Answer: message('StartNextLevel')
------------------------------------------
909: 1:BoardData {
909: 1:  'description': 'No more Levels. You win!',
909: 1:  'history': [],
909: 1:  'level': 16,
909: 1:  'questions': []
909: 1:}
909: 1:Scores: 61665
909: 1:Answer: message('StartNextLevel')
------------------------------------------
910: 1:BoardData {
910: 1:  'description': 'No more Levels. You win!',
910: 1:  'history': [],
910: 1:  'level': 16,
910: 1:  'questions': []
910: 1:}
910: 1:Scores: 61665
910: 1:Answer: message('StartNextLevel')
------------------------------------------
911: 1:BoardData {
911: 1:  'description': 'No more Levels. You win!',
911: 1:  'history': [],
911: 1:  'level': 16,
911: 1:  'questions': []
911: 1:}
911: 1:Scores: 61665
911: 1:Answer: message('StartNextLevel')
------------------------------------------
912: 1:BoardData {
912: 1:  'description': 'No more Levels. You win!',
912: 1:  'history': [],
912: 1:  'level': 16,
912: 1:  'questions': []
912: 1:}
912: 1:Scores: 61665
912: 1:Answer: message('StartNextLevel')
------------------------------------------
913: 1:BoardData {
913: 1:  'description': 'No more Levels. You win!',
913: 1:  'history': [],
913: 1:  'level': 16,
913: 1:  'questions': []
913: 1:}
913: 1:Scores: 61665
913: 1:Answer: message('StartNextLevel')
------------------------------------------
914: 1:BoardData {
914: 1:  'description': 'No more Levels. You win!',
914: 1:  'history': [],
914: 1:  'level': 16,
914: 1:  'questions': []
914: 1:}
914: 1:Scores: 61665
914: 1:Answer: message('StartNextLevel')
------------------------------------------
915: 1:BoardData {
915: 1:  'description': 'No more Levels. You win!',
915: 1:  'history': [],
915: 1:  'level': 16,
915: 1:  'questions': []
915: 1:}
915: 1:Scores: 61665
915: 1:Answer: message('StartNextLevel')
------------------------------------------
916: 1:BoardData {
916: 1:  'description': 'No more Levels. You win!',
916: 1:  'history': [],
916: 1:  'level': 16,
916: 1:  'questions': []
916: 1:}
916: 1:Scores: 61665
916: 1:Answer: message('StartNextLevel')
------------------------------------------
917: 1:BoardData {
917: 1:  'description': 'No more Levels. You win!',
917: 1:  'history': [],
917: 1:  'level': 16,
917: 1:  'questions': []
917: 1:}
917: 1:Scores: 61665
917: 1:Answer: message('StartNextLevel')
------------------------------------------
918: 1:BoardData {
918: 1:  'description': 'No more Levels. You win!',
918: 1:  'history': [],
918: 1:  'level': 16,
918: 1:  'questions': []
918: 1:}
918: 1:Scores: 61665
918: 1:Answer: message('StartNextLevel')
------------------------------------------
919: 1:BoardData {
919: 1:  'description': 'No more Levels. You win!',
919: 1:  'history': [],
919: 1:  'level': 16,
919: 1:  'questions': []
919: 1:}
919: 1:Scores: 61665
919: 1:Answer: message('StartNextLevel')
------------------------------------------
920: 1:BoardData {
920: 1:  'description': 'No more Levels. You win!',
920: 1:  'history': [],
920: 1:  'level': 16,
920: 1:  'questions': []
920: 1:}
920: 1:Scores: 61665
920: 1:Answer: message('StartNextLevel')
------------------------------------------
921: 1:BoardData {
921: 1:  'description': 'No more Levels. You win!',
921: 1:  'history': [],
921: 1:  'level': 16,
921: 1:  'questions': []
921: 1:}
921: 1:Scores: 61665
921: 1:Answer: message('StartNextLevel')
------------------------------------------
922: 1:BoardData {
922: 1:  'description': 'No more Levels. You win!',
922: 1:  'history': [],
922: 1:  'level': 16,
922: 1:  'questions': []
922: 1:}
922: 1:Scores: 61665
922: 1:Answer: message('StartNextLevel')
------------------------------------------
923: 1:BoardData {
923: 1:  'description': 'No more Levels. You win!',
923: 1:  'history': [],
923: 1:  'level': 16,
923: 1:  'questions': []
923: 1:}
923: 1:Scores: 61665
923: 1:Answer: message('StartNextLevel')
------------------------------------------
924: 1:BoardData {
924: 1:  'description': 'No more Levels. You win!',
924: 1:  'history': [],
924: 1:  'level': 16,
924: 1:  'questions': []
924: 1:}
924: 1:Scores: 61665
924: 1:Answer: message('StartNextLevel')
------------------------------------------
925: 1:BoardData {
925: 1:  'description': 'No more Levels. You win!',
925: 1:  'history': [],
925: 1:  'level': 16,
925: 1:  'questions': []
925: 1:}
925: 1:Scores: 61665
925: 1:Answer: message('StartNextLevel')
------------------------------------------
926: 1:BoardData {
926: 1:  'description': 'No more Levels. You win!',
926: 1:  'history': [],
926: 1:  'level': 16,
926: 1:  'questions': []
926: 1:}
926: 1:Scores: 61665
926: 1:Answer: message('StartNextLevel')
------------------------------------------
927: 1:BoardData {
927: 1:  'description': 'No more Levels. You win!',
927: 1:  'history': [],
927: 1:  'level': 16,
927: 1:  'questions': []
927: 1:}
927: 1:Scores: 61665
927: 1:Answer: message('StartNextLevel')
------------------------------------------
928: 1:BoardData {
928: 1:  'description': 'No more Levels. You win!',
928: 1:  'history': [],
928: 1:  'level': 16,
928: 1:  'questions': []
928: 1:}
928: 1:Scores: 61665
928: 1:Answer: message('StartNextLevel')
------------------------------------------
929: 1:BoardData {
929: 1:  'description': 'No more Levels. You win!',
929: 1:  'history': [],
929: 1:  'level': 16,
929: 1:  'questions': []
929: 1:}
929: 1:Scores: 61665
929: 1:Answer: message('StartNextLevel')
------------------------------------------
930: 1:BoardData {
930: 1:  'description': 'No more Levels. You win!',
930: 1:  'history': [],
930: 1:  'level': 16,
930: 1:  'questions': []
930: 1:}
930: 1:Scores: 61665
930: 1:Answer: message('StartNextLevel')
------------------------------------------
931: 1:BoardData {
931: 1:  'description': 'No more Levels. You win!',
931: 1:  'history': [],
931: 1:  'level': 16,
931: 1:  'questions': []
931: 1:}
931: 1:Scores: 61665
931: 1:Answer: message('StartNextLevel')
------------------------------------------
932: 1:BoardData {
932: 1:  'description': 'No more Levels. You win!',
932: 1:  'history': [],
932: 1:  'level': 16,
932: 1:  'questions': []
932: 1:}
932: 1:Scores: 61665
932: 1:Answer: message('StartNextLevel')
------------------------------------------
933: 1:BoardData {
933: 1:  'description': 'No more Levels. You win!',
933: 1:  'history': [],
933: 1:  'level': 16,
933: 1:  'questions': []
933: 1:}
933: 1:Scores: 61665
933: 1:Answer: message('StartNextLevel')
------------------------------------------
934: 1:BoardData {
934: 1:  'description': 'No more Levels. You win!',
934: 1:  'history': [],
934: 1:  'level': 16,
934: 1:  'questions': []
934: 1:}
934: 1:Scores: 61665
934: 1:Answer: message('StartNextLevel')
------------------------------------------
935: 1:BoardData {
935: 1:  'description': 'No more Levels. You win!',
935: 1:  'history': [],
935: 1:  'level': 16,
935: 1:  'questions': []
935: 1:}
935: 1:Scores: 61665
935: 1:Answer: message('StartNextLevel')
------------------------------------------
936: 1:BoardData {
936: 1:  'description': 'No more Levels. You win!',
936: 1:  'history': [],
936: 1:  'level': 16,
936: 1:  'questions': []
936: 1:}
936: 1:Scores: 61665
936: 1:Answer: message('StartNextLevel')
------------------------------------------
937: 1:BoardData {
937: 1:  'description': 'No more Levels. You win!',
937: 1:  'history': [],
937: 1:  'level': 16,
937: 1:  'questions': []
937: 1:}
937: 1:Scores: 61665
937: 1:Answer: message('StartNextLevel')
------------------------------------------
938: 1:BoardData {
938: 1:  'description': 'No more Levels. You win!',
938: 1:  'history': [],
938: 1:  'level': 16,
938: 1:  'questions': []
938: 1:}
938: 1:Scores: 61665
938: 1:Answer: message('StartNextLevel')
------------------------------------------
939: 1:BoardData {
939: 1:  'description': 'No more Levels. You win!',
939: 1:  'history': [],
939: 1:  'level': 16,
939: 1:  'questions': []
939: 1:}
939: 1:Scores: 61665
939: 1:Answer: message('StartNextLevel')
------------------------------------------
940: 1:BoardData {
940: 1:  'description': 'No more Levels. You win!',
940: 1:  'history': [],
940: 1:  'level': 16,
940: 1:  'questions': []
940: 1:}
940: 1:Scores: 61665
940: 1:Answer: message('StartNextLevel')
------------------------------------------
941: 1:BoardData {
941: 1:  'description': 'No more Levels. You win!',
941: 1:  'history': [],
941: 1:  'level': 16,
941: 1:  'questions': []
941: 1:}
941: 1:Scores: 61665
941: 1:Answer: message('StartNextLevel')
------------------------------------------
942: 1:BoardData {
942: 1:  'description': 'No more Levels. You win!',
942: 1:  'history': [],
942: 1:  'level': 16,
942: 1:  'questions': []
942: 1:}
942: 1:Scores: 61665
942: 1:Answer: message('StartNextLevel')
------------------------------------------
943: 1:BoardData {
943: 1:  'description': 'No more Levels. You win!',
943: 1:  'history': [],
943: 1:  'level': 16,
943: 1:  'questions': []
943: 1:}
943: 1:Scores: 61665
943: 1:Answer: message('StartNextLevel')
------------------------------------------
944: 1:BoardData {
944: 1:  'description': 'No more Levels. You win!',
944: 1:  'history': [],
944: 1:  'level': 16,
944: 1:  'questions': []
944: 1:}
944: 1:Scores: 61665
944: 1:Answer: message('StartNextLevel')
------------------------------------------
945: 1:BoardData {
945: 1:  'description': 'No more Levels. You win!',
945: 1:  'history': [],
945: 1:  'level': 16,
945: 1:  'questions': []
945: 1:}
945: 1:Scores: 61665
945: 1:Answer: message('StartNextLevel')
------------------------------------------
946: 1:BoardData {
946: 1:  'description': 'No more Levels. You win!',
946: 1:  'history': [],
946: 1:  'level': 16,
946: 1:  'questions': []
946: 1:}
946: 1:Scores: 61665
946: 1:Answer: message('StartNextLevel')
------------------------------------------
947: 1:BoardData {
947: 1:  'description': 'No more Levels. You win!',
947: 1:  'history': [],
947: 1:  'level': 16,
947: 1:  'questions': []
947: 1:}
947: 1:Scores: 61665
947: 1:Answer: message('StartNextLevel')
------------------------------------------
948: 1:BoardData {
948: 1:  'description': 'No more Levels. You win!',
948: 1:  'history': [],
948: 1:  'level': 16,
948: 1:  'questions': []
948: 1:}
948: 1:Scores: 61665
948: 1:Answer: message('StartNextLevel')
------------------------------------------
949: 1:BoardData {
949: 1:  'description': 'No more Levels. You win!',
949: 1:  'history': [],
949: 1:  'level': 16,
949: 1:  'questions': []
949: 1:}
949: 1:Scores: 61665
949: 1:Answer: message('StartNextLevel')
------------------------------------------
950: 1:BoardData {
950: 1:  'description': 'No more Levels. You win!',
950: 1:  'history': [],
950: 1:  'level': 16,
950: 1:  'questions': []
950: 1:}
950: 1:Scores: 61665
950: 1:Answer: message('StartNextLevel')
------------------------------------------
951: 1:BoardData {
951: 1:  'description': 'No more Levels. You win!',
951: 1:  'history': [],
951: 1:  'level': 16,
951: 1:  'questions': []
951: 1:}
951: 1:Scores: 61665
951: 1:Answer: message('StartNextLevel')
------------------------------------------
952: 1:BoardData {
952: 1:  'description': 'No more Levels. You win!',
952: 1:  'history': [],
952: 1:  'level': 16,
952: 1:  'questions': []
952: 1:}
952: 1:Scores: 61665
952: 1:Answer: message('StartNextLevel')
------------------------------------------
953: 1:BoardData {
953: 1:  'description': 'No more Levels. You win!',
953: 1:  'history': [],
953: 1:  'level': 16,
953: 1:  'questions': []
953: 1:}
953: 1:Scores: 61665
953: 1:Answer: message('StartNextLevel')
------------------------------------------
954: 1:BoardData {
954: 1:  'description': 'No more Levels. You win!',
954: 1:  'history': [],
954: 1:  'level': 16,
954: 1:  'questions': []
954: 1:}
954: 1:Scores: 61665
954: 1:Answer: message('StartNextLevel')
------------------------------------------
955: 1:BoardData {
955: 1:  'description': 'No more Levels. You win!',
955: 1:  'history': [],
955: 1:  'level': 16,
955: 1:  'questions': []
955: 1:}
955: 1:Scores: 61665
955: 1:Answer: message('StartNextLevel')
------------------------------------------
956: 1:BoardData {
956: 1:  'description': 'No more Levels. You win!',
956: 1:  'history': [],
956: 1:  'level': 16,
956: 1:  'questions': []
956: 1:}
956: 1:Scores: 61665
956: 1:Answer: message('StartNextLevel')
------------------------------------------
957: 1:BoardData {
957: 1:  'description': 'No more Levels. You win!',
957: 1:  'history': [],
957: 1:  'level': 16,
957: 1:  'questions': []
957: 1:}
957: 1:Scores: 61665
957: 1:Answer: message('StartNextLevel')
------------------------------------------
958: 1:BoardData {
958: 1:  'description': 'No more Levels. You win!',
958: 1:  'history': [],
958: 1:  'level': 16,
958: 1:  'questions': []
958: 1:}
958: 1:Scores: 61665
958: 1:Answer: message('StartNextLevel')
------------------------------------------
959: 1:BoardData {
959: 1:  'description': 'No more Levels. You win!',
959: 1:  'history': [],
959: 1:  'level': 16,
959: 1:  'questions': []
959: 1:}
959: 1:Scores: 61665
959: 1:Answer: message('StartNextLevel')
------------------------------------------
960: 1:BoardData {
960: 1:  'description': 'No more Levels. You win!',
960: 1:  'history': [],
960: 1:  'level': 16,
960: 1:  'questions': []
960: 1:}
960: 1:Scores: 61665
960: 1:Answer: message('StartNextLevel')
------------------------------------------
961: 1:BoardData {
961: 1:  'description': 'No more Levels. You win!',
961: 1:  'history': [],
961: 1:  'level': 16,
961: 1:  'questions': []
961: 1:}
961: 1:Scores: 61665
961: 1:Answer: message('StartNextLevel')
------------------------------------------
962: 1:BoardData {
962: 1:  'description': 'No more Levels. You win!',
962: 1:  'history': [],
962: 1:  'level': 16,
962: 1:  'questions': []
962: 1:}
962: 1:Scores: 61665
962: 1:Answer: message('StartNextLevel')
------------------------------------------
963: 1:BoardData {
963: 1:  'description': 'No more Levels. You win!',
963: 1:  'history': [],
963: 1:  'level': 16,
963: 1:  'questions': []
963: 1:}
963: 1:Scores: 61665
963: 1:Answer: message('StartNextLevel')
------------------------------------------
964: 1:BoardData {
964: 1:  'description': 'No more Levels. You win!',
964: 1:  'history': [],
964: 1:  'level': 16,
964: 1:  'questions': []
964: 1:}
964: 1:Scores: 61665
964: 1:Answer: message('StartNextLevel')
------------------------------------------
965: 1:BoardData {
965: 1:  'description': 'No more Levels. You win!',
965: 1:  'history': [],
965: 1:  'level': 16,
965: 1:  'questions': []
965: 1:}
965: 1:Scores: 61665
965: 1:Answer: message('StartNextLevel')
------------------------------------------
966: 1:BoardData {
966: 1:  'description': 'No more Levels. You win!',
966: 1:  'history': [],
966: 1:  'level': 16,
966: 1:  'questions': []
966: 1:}
966: 1:Scores: 61665
966: 1:Answer: message('StartNextLevel')
------------------------------------------
967: 1:BoardData {
967: 1:  'description': 'No more Levels. You win!',
967: 1:  'history': [],
967: 1:  'level': 16,
967: 1:  'questions': []
967: 1:}
967: 1:Scores: 61665
967: 1:Answer: message('StartNextLevel')
------------------------------------------
968: 1:BoardData {
968: 1:  'description': 'No more Levels. You win!',
968: 1:  'history': [],
968: 1:  'level': 16,
968: 1:  'questions': []
968: 1:}
968: 1:Scores: 61665
968: 1:Answer: message('StartNextLevel')
------------------------------------------
969: 1:BoardData {
969: 1:  'description': 'No more Levels. You win!',
969: 1:  'history': [],
969: 1:  'level': 16,
969: 1:  'questions': []
969: 1:}
969: 1:Scores: 61665
969: 1:Answer: message('StartNextLevel')
------------------------------------------
970: 1:BoardData {
970: 1:  'description': 'No more Levels. You win!',
970: 1:  'history': [],
970: 1:  'level': 16,
970: 1:  'questions': []
970: 1:}
970: 1:Scores: 61665
970: 1:Answer: message('StartNextLevel')
------------------------------------------
971: 1:BoardData {
971: 1:  'description': 'No more Levels. You win!',
971: 1:  'history': [],
971: 1:  'level': 16,
971: 1:  'questions': []
971: 1:}
971: 1:Scores: 61665
971: 1:Answer: message('StartNextLevel')
------------------------------------------
972: 1:BoardData {
972: 1:  'description': 'No more Levels. You win!',
972: 1:  'history': [],
972: 1:  'level': 16,
972: 1:  'questions': []
972: 1:}
972: 1:Scores: 61665
972: 1:Answer: message('StartNextLevel')
------------------------------------------
973: 1:BoardData {
973: 1:  'description': 'No more Levels. You win!',
973: 1:  'history': [],
973: 1:  'level': 16,
973: 1:  'questions': []
973: 1:}
973: 1:Scores: 61665
973: 1:Answer: message('StartNextLevel')
------------------------------------------
974: 1:BoardData {
974: 1:  'description': 'No more Levels. You win!',
974: 1:  'history': [],
974: 1:  'level': 16,
974: 1:  'questions': []
974: 1:}
974: 1:Scores: 61665
974: 1:Answer: message('StartNextLevel')
------------------------------------------
975: 1:BoardData {
975: 1:  'description': 'No more Levels. You win!',
975: 1:  'history': [],
975: 1:  'level': 16,
975: 1:  'questions': []
975: 1:}
975: 1:Scores: 61665
975: 1:Answer: message('StartNextLevel')
------------------------------------------
976: 1:BoardData {
976: 1:  'description': 'No more Levels. You win!',
976: 1:  'history': [],
976: 1:  'level': 16,
976: 1:  'questions': []
976: 1:}
976: 1:Scores: 61665
976: 1:Answer: message('StartNextLevel')
------------------------------------------
977: 1:BoardData {
977: 1:  'description': 'No more Levels. You win!',
977: 1:  'history': [],
977: 1:  'level': 16,
977: 1:  'questions': []
977: 1:}
977: 1:Scores: 61665
977: 1:Answer: message('StartNextLevel')
------------------------------------------
978: 1:BoardData {
978: 1:  'description': 'No more Levels. You win!',
978: 1:  'history': [],
978: 1:  'level': 16,
978: 1:  'questions': []
978: 1:}
978: 1:Scores: 61665
978: 1:Answer: message('StartNextLevel')
------------------------------------------
979: 1:BoardData {
979: 1:  'description': 'No more Levels. You win!',
979: 1:  'history': [],
979: 1:  'level': 16,
979: 1:  'questions': []
979: 1:}
979: 1:Scores: 61665
979: 1:Answer: message('StartNextLevel')
------------------------------------------
980: 1:BoardData {
980: 1:  'description': 'No more Levels. You win!',
980: 1:  'history': [],
980: 1:  'level': 16,
980: 1:  'questions': []
980: 1:}
980: 1:Scores: 61665
980: 1:Answer: message('StartNextLevel')
------------------------------------------
981: 1:BoardData {
981: 1:  'description': 'No more Levels. You win!',
981: 1:  'history': [],
981: 1:  'level': 16,
981: 1:  'questions': []
981: 1:}
981: 1:Scores: 61665
981: 1:Answer: message('StartNextLevel')
------------------------------------------
982: 1:BoardData {
982: 1:  'description': 'No more Levels. You win!',
982: 1:  'history': [],
982: 1:  'level': 16,
982: 1:  'questions': []
982: 1:}
982: 1:Scores: 61665
982: 1:Answer: message('StartNextLevel')
------------------------------------------
983: 1:BoardData {
983: 1:  'description': 'No more Levels. You win!',
983: 1:  'history': [],
983: 1:  'level': 16,
983: 1:  'questions': []
983: 1:}
983: 1:Scores: 61665
983: 1:Answer: message('StartNextLevel')
------------------------------------------
984: 1:BoardData {
984: 1:  'description': 'No more Levels. You win!',
984: 1:  'history': [],
984: 1:  'level': 16,
984: 1:  'questions': []
984: 1:}
984: 1:Scores: 61665
984: 1:Answer: message('StartNextLevel')
------------------------------------------
985: 1:BoardData {
985: 1:  'description': 'No more Levels. You win!',
985: 1:  'history': [],
985: 1:  'level': 16,
985: 1:  'questions': []
985: 1:}
985: 1:Scores: 61665
985: 1:Answer: message('StartNextLevel')
------------------------------------------
986: 1:BoardData {
986: 1:  'description': 'No more Levels. You win!',
986: 1:  'history': [],
986: 1:  'level': 16,
986: 1:  'questions': []
986: 1:}
986: 1:Scores: 61665
986: 1:Answer: message('StartNextLevel')
------------------------------------------
987: 1:BoardData {
987: 1:  'description': 'No more Levels. You win!',
987: 1:  'history': [],
987: 1:  'level': 16,
987: 1:  'questions': []
987: 1:}
987: 1:Scores: 61665
987: 1:Answer: message('StartNextLevel')
------------------------------------------
988: 1:BoardData {
988: 1:  'description': 'No more Levels. You win!',
988: 1:  'history': [],
988: 1:  'level': 16,
988: 1:  'questions': []
988: 1:}
988: 1:Scores: 61665
988: 1:Answer: message('StartNextLevel')
------------------------------------------
989: 1:BoardData {
989: 1:  'description': 'No more Levels. You win!',
989: 1:  'history': [],
989: 1:  'level': 16,
989: 1:  'questions': []
989: 1:}
989: 1:Scores: 61665
989: 1:Answer: message('StartNextLevel')
------------------------------------------
990: 1:BoardData {
990: 1:  'description': 'No more Levels. You win!',
990: 1:  'history': [],
990: 1:  'level': 16,
990: 1:  'questions': []
990: 1:}
990: 1:Scores: 61665
990: 1:Answer: message('StartNextLevel')
------------------------------------------
991: 1:BoardData {
991: 1:  'description': 'No more Levels. You win!',
991: 1:  'history': [],
991: 1:  'level': 16,
991: 1:  'questions': []
991: 1:}
991: 1:Scores: 61665
991: 1:Answer: message('StartNextLevel')
------------------------------------------
992: 1:BoardData {
992: 1:  'description': 'No more Levels. You win!',
992: 1:  'history': [],
992: 1:  'level': 16,
992: 1:  'questions': []
992: 1:}
992: 1:Scores: 61665
992: 1:Answer: message('StartNextLevel')
------------------------------------------
993: 1:BoardData {
993: 1:  'description': 'No more Levels. You win!',
993: 1:  'history': [],
993: 1:  'level': 16,
993: 1:  'questions': []
993: 1:}
993: 1:Scores: 61665
993: 1:Answer: message('StartNextLevel')
------------------------------------------
994: 1:BoardData {
994: 1:  'description': 'No more Levels. You win!',
994: 1:  'history': [],
994: 1:  'level': 16,
994: 1:  'questions': []
994: 1:}
994: 1:Scores: 61665
994: 1:Answer: message('StartNextLevel')
------------------------------------------
995: 1:BoardData {
995: 1:  'description': 'No more Levels. You win!',
995: 1:  'history': [],
995: 1:  'level': 16,
995: 1:  'questions': []
995: 1:}
995: 1:Scores: 61665
995: 1:Answer: message('StartNextLevel')
------------------------------------------
996: 1:BoardData {
996: 1:  'description': 'No more Levels. You win!',
996: 1:  'history': [],
996: 1:  'level': 16,
996: 1:  'questions': []
996: 1:}
996: 1:Scores: 61665
996: 1:Answer: message('StartNextLevel')
------------------------------------------
997: 1:BoardData {
997: 1:  'description': 'No more Levels. You win!',
997: 1:  'history': [],
997: 1:  'level': 16,
997: 1:  'questions': []
997: 1:}
997: 1:Scores: 61665
997: 1:Answer: message('StartNextLevel')
------------------------------------------
998: 1:BoardData {
998: 1:  'description': 'No more Levels. You win!',
998: 1:  'history': [],
998: 1:  'level': 16,
998: 1:  'questions': []
998: 1:}
998: 1:Scores: 61665
998: 1:Answer: message('StartNextLevel')
------------------------------------------
999: 1:BoardData {
999: 1:  'description': 'No more Levels. You win!',
999: 1:  'history': [],
999: 1:  'level': 16,
999: 1:  'questions': []
999: 1:}
999: 1:Scores: 61665
999: 1:Answer: message('StartNextLevel')
------------------------------------------
1000: 1:BoardData {
1000: 1:  'description': 'No more Levels. You win!',
1000: 1:  'history': [],
1000: 1:  'level': 16,
1000: 1:  'questions': []
1000: 1:}
1000: 1:Scores: 61665
1000: 1:Answer: message('StartNextLevel')
------------------------------------------