1: 1:BoardData {
1: 1:  'description': [
1: 1:    'Write a method that takes a single string argument and return the string 'world' if 'hello' came in.',
1: 1:    'Please write js method.',
1: 1:    'Now please improve the algorithm so that it returns'hello' if 'world' came in. Previous logic should work also',
1: 1:    'One more improvement: in other cases the algorithm should return the same string that came in.'
1: 1:  ],
1: 1:  'expectedAnswer': 'world',
1: 1:  'history': [],
1: 1:  'info': ['❌f(hello) = ??? != world'],
1: 1:  'level': 0,
1: 1:  'nextQuestion': 'hello',
1: 1:  'questions': ['hello']
1: 1:}
1: 1:Scores: 0
1: 1:Answer: message('['world']')
1: 1:Fire Event: PassTest{complexity=0, testCount=5}
------------------------------------------
2: 1:BoardData {
2: 1:  'description': [
2: 1:    'Write a method that takes a single string argument and return the string 'world' if 'hello' came in.',
2: 1:    'Please write js method.',
2: 1:    'Now please improve the algorithm so that it returns'hello' if 'world' came in. Previous logic should work also',
2: 1:    'One more improvement: in other cases the algorithm should return the same string that came in.'
2: 1:  ],
2: 1:  'expectedAnswer': 'hello',
2: 1:  'history': [{
2: 1:    'answer': 'world',
2: 1:    'question': 'hello',
2: 1:    'valid': true
2: 1:  }],
2: 1:  'info': [
2: 1:    '✅f(hello) = world',
2: 1:    '❌f(world) = ??? != hello'
2: 1:  ],
2: 1:  'level': 0,
2: 1:  'nextQuestion': 'world',
2: 1:  'questions': [
2: 1:    'hello',
2: 1:    'world'
2: 1:  ]
2: 1:}
2: 1:Scores: 1
2: 1:Answer: message('['world', 'hello']')
2: 1:Fire Event: PassTest{complexity=0, testCount=5}
------------------------------------------
3: 1:BoardData {
3: 1:  'description': [
3: 1:    'Write a method that takes a single string argument and return the string 'world' if 'hello' came in.',
3: 1:    'Please write js method.',
3: 1:    'Now please improve the algorithm so that it returns'hello' if 'world' came in. Previous logic should work also',
3: 1:    'One more improvement: in other cases the algorithm should return the same string that came in.'
3: 1:  ],
3: 1:  'expectedAnswer': 'qwe',
3: 1:  'history': [
3: 1:    {
3: 1:      'answer': 'world',
3: 1:      'question': 'hello',
3: 1:      'valid': true
3: 1:    },
3: 1:    {
3: 1:      'answer': 'hello',
3: 1:      'question': 'world',
3: 1:      'valid': true
3: 1:    }
3: 1:  ],
3: 1:  'info': [
3: 1:    '✅f(hello) = world',
3: 1:    '✅f(world) = hello',
3: 1:    '❌f(qwe) = ??? != qwe'
3: 1:  ],
3: 1:  'level': 0,
3: 1:  'nextQuestion': 'qwe',
3: 1:  'questions': [
3: 1:    'hello',
3: 1:    'world',
3: 1:    'qwe'
3: 1:  ]
3: 1:}
3: 1:Scores: 2
3: 1:Answer: message('['world', 'hello', 'qwe']')
3: 1:Fire Event: PassTest{complexity=0, testCount=5}
------------------------------------------
4: 1:BoardData {
4: 1:  'description': [
4: 1:    'Write a method that takes a single string argument and return the string 'world' if 'hello' came in.',
4: 1:    'Please write js method.',
4: 1:    'Now please improve the algorithm so that it returns'hello' if 'world' came in. Previous logic should work also',
4: 1:    'One more improvement: in other cases the algorithm should return the same string that came in.'
4: 1:  ],
4: 1:  'expectedAnswer': 'asd',
4: 1:  'history': [
4: 1:    {
4: 1:      'answer': 'world',
4: 1:      'question': 'hello',
4: 1:      'valid': true
4: 1:    },
4: 1:    {
4: 1:      'answer': 'hello',
4: 1:      'question': 'world',
4: 1:      'valid': true
4: 1:    },
4: 1:    {
4: 1:      'answer': 'qwe',
4: 1:      'question': 'qwe',
4: 1:      'valid': true
4: 1:    }
4: 1:  ],
4: 1:  'info': [
4: 1:    '✅f(hello) = world',
4: 1:    '✅f(world) = hello',
4: 1:    '✅f(qwe) = qwe',
4: 1:    '❌f(asd) = ??? != asd'
4: 1:  ],
4: 1:  'level': 0,
4: 1:  'nextQuestion': 'asd',
4: 1:  'questions': [
4: 1:    'hello',
4: 1:    'world',
4: 1:    'qwe',
4: 1:    'asd'
4: 1:  ]
4: 1:}
4: 1:Scores: 3
4: 1:Answer: message('['world', 'hello', 'qwe', 'asd']')
4: 1:Fire Event: PassTest{complexity=0, testCount=5}
------------------------------------------
5: 1:BoardData {
5: 1:  'description': [
5: 1:    'Write a method that takes a single string argument and return the string 'world' if 'hello' came in.',
5: 1:    'Please write js method.',
5: 1:    'Now please improve the algorithm so that it returns'hello' if 'world' came in. Previous logic should work also',
5: 1:    'One more improvement: in other cases the algorithm should return the same string that came in.'
5: 1:  ],
5: 1:  'expectedAnswer': 'zxc',
5: 1:  'history': [
5: 1:    {
5: 1:      'answer': 'world',
5: 1:      'question': 'hello',
5: 1:      'valid': true
5: 1:    },
5: 1:    {
5: 1:      'answer': 'hello',
5: 1:      'question': 'world',
5: 1:      'valid': true
5: 1:    },
5: 1:    {
5: 1:      'answer': 'qwe',
5: 1:      'question': 'qwe',
5: 1:      'valid': true
5: 1:    },
5: 1:    {
5: 1:      'answer': 'asd',
5: 1:      'question': 'asd',
5: 1:      'valid': true
5: 1:    }
5: 1:  ],
5: 1:  'info': [
5: 1:    '✅f(hello) = world',
5: 1:    '✅f(world) = hello',
5: 1:    '✅f(qwe) = qwe',
5: 1:    '✅f(asd) = asd',
5: 1:    '❌f(zxc) = ??? != zxc'
5: 1:  ],
5: 1:  'level': 0,
5: 1:  'nextQuestion': 'zxc',
5: 1:  'questions': [
5: 1:    'hello',
5: 1:    'world',
5: 1:    'qwe',
5: 1:    'asd',
5: 1:    'zxc'
5: 1:  ]
5: 1:}
5: 1:Scores: 4
5: 1:Answer: message('['world', 'hello', 'qwe', 'asd', 'zxc']')
5: 1:Fire Event: PassTest{complexity=0, testCount=5}
5: 1:Fire Event: NextAlgorithm{complexity=0, time=0}
------------------------------------------
6: 1:BoardData {
6: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
6: 1:  'history': [
6: 1:    {
6: 1:      'answer': 'world',
6: 1:      'question': 'hello',
6: 1:      'valid': true
6: 1:    },
6: 1:    {
6: 1:      'answer': 'hello',
6: 1:      'question': 'world',
6: 1:      'valid': true
6: 1:    },
6: 1:    {
6: 1:      'answer': 'qwe',
6: 1:      'question': 'qwe',
6: 1:      'valid': true
6: 1:    },
6: 1:    {
6: 1:      'answer': 'asd',
6: 1:      'question': 'asd',
6: 1:      'valid': true
6: 1:    },
6: 1:    {
6: 1:      'answer': 'zxc',
6: 1:      'question': 'zxc',
6: 1:      'valid': true
6: 1:    }
6: 1:  ],
6: 1:  'info': [
6: 1:    '✅f(hello) = world',
6: 1:    '✅f(world) = hello',
6: 1:    '✅f(qwe) = qwe',
6: 1:    '✅f(asd) = asd',
6: 1:    '✅f(zxc) = zxc'
6: 1:  ],
6: 1:  'level': 0,
6: 1:  'questions': []
6: 1:}
6: 1:Scores: 5
6: 1:Answer: message('StartNextLevel')
6: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
7: 1:BoardData {
7: 1:  'description': [
7: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
7: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
7: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
7: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
7: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
7: 1:    'Please write optimized code without any duplication.',
7: 1:    'For divider 11 - the word must be 'Duzz'.',
7: 1:    'For divider 13 - the word must be 'Cazz'.',
7: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
7: 1:  ],
7: 1:  'expectedAnswer': '1',
7: 1:  'history': [],
7: 1:  'info': ['❌f(1) = ??? != 1'],
7: 1:  'level': 1,
7: 1:  'nextQuestion': '1',
7: 1:  'questions': ['1']
7: 1:}
7: 1:Scores: 5
7: 1:Answer: message('['1']')
7: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
8: 1:BoardData {
8: 1:  'description': [
8: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
8: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
8: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
8: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
8: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
8: 1:    'Please write optimized code without any duplication.',
8: 1:    'For divider 11 - the word must be 'Duzz'.',
8: 1:    'For divider 13 - the word must be 'Cazz'.',
8: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
8: 1:  ],
8: 1:  'expectedAnswer': '2',
8: 1:  'history': [{
8: 1:    'answer': '1',
8: 1:    'question': '1',
8: 1:    'valid': true
8: 1:  }],
8: 1:  'info': [
8: 1:    '✅f(1) = 1',
8: 1:    '❌f(2) = ??? != 2'
8: 1:  ],
8: 1:  'level': 1,
8: 1:  'nextQuestion': '2',
8: 1:  'questions': [
8: 1:    '1',
8: 1:    '2'
8: 1:  ]
8: 1:}
8: 1:Scores: 6
8: 1:Answer: message('['1', '2']')
8: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
9: 1:BoardData {
9: 1:  'description': [
9: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
9: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
9: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
9: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
9: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
9: 1:    'Please write optimized code without any duplication.',
9: 1:    'For divider 11 - the word must be 'Duzz'.',
9: 1:    'For divider 13 - the word must be 'Cazz'.',
9: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
9: 1:  ],
9: 1:  'expectedAnswer': 'Fizz',
9: 1:  'history': [
9: 1:    {
9: 1:      'answer': '1',
9: 1:      'question': '1',
9: 1:      'valid': true
9: 1:    },
9: 1:    {
9: 1:      'answer': '2',
9: 1:      'question': '2',
9: 1:      'valid': true
9: 1:    }
9: 1:  ],
9: 1:  'info': [
9: 1:    '✅f(1) = 1',
9: 1:    '✅f(2) = 2',
9: 1:    '❌f(3) = ??? != Fizz'
9: 1:  ],
9: 1:  'level': 1,
9: 1:  'nextQuestion': '3',
9: 1:  'questions': [
9: 1:    '1',
9: 1:    '2',
9: 1:    '3'
9: 1:  ]
9: 1:}
9: 1:Scores: 7
9: 1:Answer: message('['1', '2', 'Fizz']')
9: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
10: 1:BoardData {
10: 1:  'description': [
10: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
10: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
10: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
10: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
10: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
10: 1:    'Please write optimized code without any duplication.',
10: 1:    'For divider 11 - the word must be 'Duzz'.',
10: 1:    'For divider 13 - the word must be 'Cazz'.',
10: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
10: 1:  ],
10: 1:  'expectedAnswer': '4',
10: 1:  'history': [
10: 1:    {
10: 1:      'answer': '1',
10: 1:      'question': '1',
10: 1:      'valid': true
10: 1:    },
10: 1:    {
10: 1:      'answer': '2',
10: 1:      'question': '2',
10: 1:      'valid': true
10: 1:    },
10: 1:    {
10: 1:      'answer': 'Fizz',
10: 1:      'question': '3',
10: 1:      'valid': true
10: 1:    }
10: 1:  ],
10: 1:  'info': [
10: 1:    '✅f(1) = 1',
10: 1:    '✅f(2) = 2',
10: 1:    '✅f(3) = Fizz',
10: 1:    '❌f(4) = ??? != 4'
10: 1:  ],
10: 1:  'level': 1,
10: 1:  'nextQuestion': '4',
10: 1:  'questions': [
10: 1:    '1',
10: 1:    '2',
10: 1:    '3',
10: 1:    '4'
10: 1:  ]
10: 1:}
10: 1:Scores: 8
10: 1:Answer: message('['1', '2', 'Fizz', '4']')
10: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
11: 1:BoardData {
11: 1:  'description': [
11: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
11: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
11: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
11: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
11: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
11: 1:    'Please write optimized code without any duplication.',
11: 1:    'For divider 11 - the word must be 'Duzz'.',
11: 1:    'For divider 13 - the word must be 'Cazz'.',
11: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
11: 1:  ],
11: 1:  'expectedAnswer': 'Buzz',
11: 1:  'history': [
11: 1:    {
11: 1:      'answer': '1',
11: 1:      'question': '1',
11: 1:      'valid': true
11: 1:    },
11: 1:    {
11: 1:      'answer': '2',
11: 1:      'question': '2',
11: 1:      'valid': true
11: 1:    },
11: 1:    {
11: 1:      'answer': 'Fizz',
11: 1:      'question': '3',
11: 1:      'valid': true
11: 1:    },
11: 1:    {
11: 1:      'answer': '4',
11: 1:      'question': '4',
11: 1:      'valid': true
11: 1:    }
11: 1:  ],
11: 1:  'info': [
11: 1:    '✅f(1) = 1',
11: 1:    '✅f(2) = 2',
11: 1:    '✅f(3) = Fizz',
11: 1:    '✅f(4) = 4',
11: 1:    '❌f(5) = ??? != Buzz'
11: 1:  ],
11: 1:  'level': 1,
11: 1:  'nextQuestion': '5',
11: 1:  'questions': [
11: 1:    '1',
11: 1:    '2',
11: 1:    '3',
11: 1:    '4',
11: 1:    '5'
11: 1:  ]
11: 1:}
11: 1:Scores: 9
11: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz']')
11: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
12: 1:BoardData {
12: 1:  'description': [
12: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
12: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
12: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
12: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
12: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
12: 1:    'Please write optimized code without any duplication.',
12: 1:    'For divider 11 - the word must be 'Duzz'.',
12: 1:    'For divider 13 - the word must be 'Cazz'.',
12: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
12: 1:  ],
12: 1:  'expectedAnswer': 'Fizz',
12: 1:  'history': [
12: 1:    {
12: 1:      'answer': '1',
12: 1:      'question': '1',
12: 1:      'valid': true
12: 1:    },
12: 1:    {
12: 1:      'answer': '2',
12: 1:      'question': '2',
12: 1:      'valid': true
12: 1:    },
12: 1:    {
12: 1:      'answer': 'Fizz',
12: 1:      'question': '3',
12: 1:      'valid': true
12: 1:    },
12: 1:    {
12: 1:      'answer': '4',
12: 1:      'question': '4',
12: 1:      'valid': true
12: 1:    },
12: 1:    {
12: 1:      'answer': 'Buzz',
12: 1:      'question': '5',
12: 1:      'valid': true
12: 1:    }
12: 1:  ],
12: 1:  'info': [
12: 1:    '✅f(1) = 1',
12: 1:    '✅f(2) = 2',
12: 1:    '✅f(3) = Fizz',
12: 1:    '✅f(4) = 4',
12: 1:    '✅f(5) = Buzz',
12: 1:    '❌f(6) = ??? != Fizz'
12: 1:  ],
12: 1:  'level': 1,
12: 1:  'nextQuestion': '6',
12: 1:  'questions': [
12: 1:    '1',
12: 1:    '2',
12: 1:    '3',
12: 1:    '4',
12: 1:    '5',
12: 1:    '6'
12: 1:  ]
12: 1:}
12: 1:Scores: 10
12: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz']')
12: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
13: 1:BoardData {
13: 1:  'description': [
13: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
13: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
13: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
13: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
13: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
13: 1:    'Please write optimized code without any duplication.',
13: 1:    'For divider 11 - the word must be 'Duzz'.',
13: 1:    'For divider 13 - the word must be 'Cazz'.',
13: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
13: 1:  ],
13: 1:  'expectedAnswer': 'Muzz',
13: 1:  'history': [
13: 1:    {
13: 1:      'answer': '1',
13: 1:      'question': '1',
13: 1:      'valid': true
13: 1:    },
13: 1:    {
13: 1:      'answer': '2',
13: 1:      'question': '2',
13: 1:      'valid': true
13: 1:    },
13: 1:    {
13: 1:      'answer': 'Fizz',
13: 1:      'question': '3',
13: 1:      'valid': true
13: 1:    },
13: 1:    {
13: 1:      'answer': '4',
13: 1:      'question': '4',
13: 1:      'valid': true
13: 1:    },
13: 1:    {
13: 1:      'answer': 'Buzz',
13: 1:      'question': '5',
13: 1:      'valid': true
13: 1:    },
13: 1:    {
13: 1:      'answer': 'Fizz',
13: 1:      'question': '6',
13: 1:      'valid': true
13: 1:    }
13: 1:  ],
13: 1:  'info': [
13: 1:    '✅f(1) = 1',
13: 1:    '✅f(2) = 2',
13: 1:    '✅f(3) = Fizz',
13: 1:    '✅f(4) = 4',
13: 1:    '✅f(5) = Buzz',
13: 1:    '✅f(6) = Fizz',
13: 1:    '❌f(7) = ??? != Muzz'
13: 1:  ],
13: 1:  'level': 1,
13: 1:  'nextQuestion': '7',
13: 1:  'questions': [
13: 1:    '1',
13: 1:    '2',
13: 1:    '3',
13: 1:    '4',
13: 1:    '5',
13: 1:    '6',
13: 1:    '7'
13: 1:  ]
13: 1:}
13: 1:Scores: 11
13: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz']')
13: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
14: 1:BoardData {
14: 1:  'description': [
14: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
14: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
14: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
14: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
14: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
14: 1:    'Please write optimized code without any duplication.',
14: 1:    'For divider 11 - the word must be 'Duzz'.',
14: 1:    'For divider 13 - the word must be 'Cazz'.',
14: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
14: 1:  ],
14: 1:  'expectedAnswer': '8',
14: 1:  'history': [
14: 1:    {
14: 1:      'answer': '1',
14: 1:      'question': '1',
14: 1:      'valid': true
14: 1:    },
14: 1:    {
14: 1:      'answer': '2',
14: 1:      'question': '2',
14: 1:      'valid': true
14: 1:    },
14: 1:    {
14: 1:      'answer': 'Fizz',
14: 1:      'question': '3',
14: 1:      'valid': true
14: 1:    },
14: 1:    {
14: 1:      'answer': '4',
14: 1:      'question': '4',
14: 1:      'valid': true
14: 1:    },
14: 1:    {
14: 1:      'answer': 'Buzz',
14: 1:      'question': '5',
14: 1:      'valid': true
14: 1:    },
14: 1:    {
14: 1:      'answer': 'Fizz',
14: 1:      'question': '6',
14: 1:      'valid': true
14: 1:    },
14: 1:    {
14: 1:      'answer': 'Muzz',
14: 1:      'question': '7',
14: 1:      'valid': true
14: 1:    }
14: 1:  ],
14: 1:  'info': [
14: 1:    '✅f(1) = 1',
14: 1:    '✅f(2) = 2',
14: 1:    '✅f(3) = Fizz',
14: 1:    '✅f(4) = 4',
14: 1:    '✅f(5) = Buzz',
14: 1:    '✅f(6) = Fizz',
14: 1:    '✅f(7) = Muzz',
14: 1:    '❌f(8) = ??? != 8'
14: 1:  ],
14: 1:  'level': 1,
14: 1:  'nextQuestion': '8',
14: 1:  'questions': [
14: 1:    '1',
14: 1:    '2',
14: 1:    '3',
14: 1:    '4',
14: 1:    '5',
14: 1:    '6',
14: 1:    '7',
14: 1:    '8'
14: 1:  ]
14: 1:}
14: 1:Scores: 12
14: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8']')
14: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
15: 1:BoardData {
15: 1:  'description': [
15: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
15: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
15: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
15: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
15: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
15: 1:    'Please write optimized code without any duplication.',
15: 1:    'For divider 11 - the word must be 'Duzz'.',
15: 1:    'For divider 13 - the word must be 'Cazz'.',
15: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
15: 1:  ],
15: 1:  'expectedAnswer': 'Fizz',
15: 1:  'history': [
15: 1:    {
15: 1:      'answer': '1',
15: 1:      'question': '1',
15: 1:      'valid': true
15: 1:    },
15: 1:    {
15: 1:      'answer': '2',
15: 1:      'question': '2',
15: 1:      'valid': true
15: 1:    },
15: 1:    {
15: 1:      'answer': 'Fizz',
15: 1:      'question': '3',
15: 1:      'valid': true
15: 1:    },
15: 1:    {
15: 1:      'answer': '4',
15: 1:      'question': '4',
15: 1:      'valid': true
15: 1:    },
15: 1:    {
15: 1:      'answer': 'Buzz',
15: 1:      'question': '5',
15: 1:      'valid': true
15: 1:    },
15: 1:    {
15: 1:      'answer': 'Fizz',
15: 1:      'question': '6',
15: 1:      'valid': true
15: 1:    },
15: 1:    {
15: 1:      'answer': 'Muzz',
15: 1:      'question': '7',
15: 1:      'valid': true
15: 1:    },
15: 1:    {
15: 1:      'answer': '8',
15: 1:      'question': '8',
15: 1:      'valid': true
15: 1:    }
15: 1:  ],
15: 1:  'info': [
15: 1:    '✅f(1) = 1',
15: 1:    '✅f(2) = 2',
15: 1:    '✅f(3) = Fizz',
15: 1:    '✅f(4) = 4',
15: 1:    '✅f(5) = Buzz',
15: 1:    '✅f(6) = Fizz',
15: 1:    '✅f(7) = Muzz',
15: 1:    '✅f(8) = 8',
15: 1:    '❌f(9) = ??? != Fizz'
15: 1:  ],
15: 1:  'level': 1,
15: 1:  'nextQuestion': '9',
15: 1:  'questions': [
15: 1:    '1',
15: 1:    '2',
15: 1:    '3',
15: 1:    '4',
15: 1:    '5',
15: 1:    '6',
15: 1:    '7',
15: 1:    '8',
15: 1:    '9'
15: 1:  ]
15: 1:}
15: 1:Scores: 13
15: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz']')
15: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
16: 1:BoardData {
16: 1:  'description': [
16: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
16: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
16: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
16: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
16: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
16: 1:    'Please write optimized code without any duplication.',
16: 1:    'For divider 11 - the word must be 'Duzz'.',
16: 1:    'For divider 13 - the word must be 'Cazz'.',
16: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
16: 1:  ],
16: 1:  'expectedAnswer': 'Buzz',
16: 1:  'history': [
16: 1:    {
16: 1:      'answer': '1',
16: 1:      'question': '1',
16: 1:      'valid': true
16: 1:    },
16: 1:    {
16: 1:      'answer': '2',
16: 1:      'question': '2',
16: 1:      'valid': true
16: 1:    },
16: 1:    {
16: 1:      'answer': 'Fizz',
16: 1:      'question': '3',
16: 1:      'valid': true
16: 1:    },
16: 1:    {
16: 1:      'answer': '4',
16: 1:      'question': '4',
16: 1:      'valid': true
16: 1:    },
16: 1:    {
16: 1:      'answer': 'Buzz',
16: 1:      'question': '5',
16: 1:      'valid': true
16: 1:    },
16: 1:    {
16: 1:      'answer': 'Fizz',
16: 1:      'question': '6',
16: 1:      'valid': true
16: 1:    },
16: 1:    {
16: 1:      'answer': 'Muzz',
16: 1:      'question': '7',
16: 1:      'valid': true
16: 1:    },
16: 1:    {
16: 1:      'answer': '8',
16: 1:      'question': '8',
16: 1:      'valid': true
16: 1:    },
16: 1:    {
16: 1:      'answer': 'Fizz',
16: 1:      'question': '9',
16: 1:      'valid': true
16: 1:    }
16: 1:  ],
16: 1:  'info': [
16: 1:    '✅f(1) = 1',
16: 1:    '✅f(2) = 2',
16: 1:    '✅f(3) = Fizz',
16: 1:    '✅f(4) = 4',
16: 1:    '✅f(5) = Buzz',
16: 1:    '✅f(6) = Fizz',
16: 1:    '✅f(7) = Muzz',
16: 1:    '✅f(8) = 8',
16: 1:    '✅f(9) = Fizz',
16: 1:    '❌f(10) = ??? != Buzz'
16: 1:  ],
16: 1:  'level': 1,
16: 1:  'nextQuestion': '10',
16: 1:  'questions': [
16: 1:    '1',
16: 1:    '2',
16: 1:    '3',
16: 1:    '4',
16: 1:    '5',
16: 1:    '6',
16: 1:    '7',
16: 1:    '8',
16: 1:    '9',
16: 1:    '10'
16: 1:  ]
16: 1:}
16: 1:Scores: 14
16: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz']')
16: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
17: 1:BoardData {
17: 1:  'description': [
17: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
17: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
17: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
17: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
17: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
17: 1:    'Please write optimized code without any duplication.',
17: 1:    'For divider 11 - the word must be 'Duzz'.',
17: 1:    'For divider 13 - the word must be 'Cazz'.',
17: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
17: 1:  ],
17: 1:  'expectedAnswer': 'Duzz',
17: 1:  'history': [
17: 1:    {
17: 1:      'answer': '1',
17: 1:      'question': '1',
17: 1:      'valid': true
17: 1:    },
17: 1:    {
17: 1:      'answer': '2',
17: 1:      'question': '2',
17: 1:      'valid': true
17: 1:    },
17: 1:    {
17: 1:      'answer': 'Fizz',
17: 1:      'question': '3',
17: 1:      'valid': true
17: 1:    },
17: 1:    {
17: 1:      'answer': '4',
17: 1:      'question': '4',
17: 1:      'valid': true
17: 1:    },
17: 1:    {
17: 1:      'answer': 'Buzz',
17: 1:      'question': '5',
17: 1:      'valid': true
17: 1:    },
17: 1:    {
17: 1:      'answer': 'Fizz',
17: 1:      'question': '6',
17: 1:      'valid': true
17: 1:    },
17: 1:    {
17: 1:      'answer': 'Muzz',
17: 1:      'question': '7',
17: 1:      'valid': true
17: 1:    },
17: 1:    {
17: 1:      'answer': '8',
17: 1:      'question': '8',
17: 1:      'valid': true
17: 1:    },
17: 1:    {
17: 1:      'answer': 'Fizz',
17: 1:      'question': '9',
17: 1:      'valid': true
17: 1:    },
17: 1:    {
17: 1:      'answer': 'Buzz',
17: 1:      'question': '10',
17: 1:      'valid': true
17: 1:    }
17: 1:  ],
17: 1:  'info': [
17: 1:    '✅f(1) = 1',
17: 1:    '✅f(2) = 2',
17: 1:    '✅f(3) = Fizz',
17: 1:    '✅f(4) = 4',
17: 1:    '✅f(5) = Buzz',
17: 1:    '✅f(6) = Fizz',
17: 1:    '✅f(7) = Muzz',
17: 1:    '✅f(8) = 8',
17: 1:    '✅f(9) = Fizz',
17: 1:    '✅f(10) = Buzz',
17: 1:    '❌f(11) = ??? != Duzz'
17: 1:  ],
17: 1:  'level': 1,
17: 1:  'nextQuestion': '11',
17: 1:  'questions': [
17: 1:    '1',
17: 1:    '2',
17: 1:    '3',
17: 1:    '4',
17: 1:    '5',
17: 1:    '6',
17: 1:    '7',
17: 1:    '8',
17: 1:    '9',
17: 1:    '10',
17: 1:    '11'
17: 1:  ]
17: 1:}
17: 1:Scores: 15
17: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz']')
17: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
18: 1:BoardData {
18: 1:  'description': [
18: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
18: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
18: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
18: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
18: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
18: 1:    'Please write optimized code without any duplication.',
18: 1:    'For divider 11 - the word must be 'Duzz'.',
18: 1:    'For divider 13 - the word must be 'Cazz'.',
18: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
18: 1:  ],
18: 1:  'expectedAnswer': 'Fizz',
18: 1:  'history': [
18: 1:    {
18: 1:      'answer': '1',
18: 1:      'question': '1',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': '2',
18: 1:      'question': '2',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': 'Fizz',
18: 1:      'question': '3',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': '4',
18: 1:      'question': '4',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': 'Buzz',
18: 1:      'question': '5',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': 'Fizz',
18: 1:      'question': '6',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': 'Muzz',
18: 1:      'question': '7',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': '8',
18: 1:      'question': '8',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': 'Fizz',
18: 1:      'question': '9',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': 'Buzz',
18: 1:      'question': '10',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': 'Duzz',
18: 1:      'question': '11',
18: 1:      'valid': true
18: 1:    }
18: 1:  ],
18: 1:  'info': [
18: 1:    '✅f(1) = 1',
18: 1:    '✅f(2) = 2',
18: 1:    '✅f(3) = Fizz',
18: 1:    '✅f(4) = 4',
18: 1:    '✅f(5) = Buzz',
18: 1:    '✅f(6) = Fizz',
18: 1:    '✅f(7) = Muzz',
18: 1:    '✅f(8) = 8',
18: 1:    '✅f(9) = Fizz',
18: 1:    '✅f(10) = Buzz',
18: 1:    '✅f(11) = Duzz',
18: 1:    '❌f(12) = ??? != Fizz'
18: 1:  ],
18: 1:  'level': 1,
18: 1:  'nextQuestion': '12',
18: 1:  'questions': [
18: 1:    '1',
18: 1:    '2',
18: 1:    '3',
18: 1:    '4',
18: 1:    '5',
18: 1:    '6',
18: 1:    '7',
18: 1:    '8',
18: 1:    '9',
18: 1:    '10',
18: 1:    '11',
18: 1:    '12'
18: 1:  ]
18: 1:}
18: 1:Scores: 16
18: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz']')
18: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
19: 1:BoardData {
19: 1:  'description': [
19: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
19: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
19: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
19: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
19: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
19: 1:    'Please write optimized code without any duplication.',
19: 1:    'For divider 11 - the word must be 'Duzz'.',
19: 1:    'For divider 13 - the word must be 'Cazz'.',
19: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
19: 1:  ],
19: 1:  'expectedAnswer': 'Cazz',
19: 1:  'history': [
19: 1:    {
19: 1:      'answer': '1',
19: 1:      'question': '1',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': '2',
19: 1:      'question': '2',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': 'Fizz',
19: 1:      'question': '3',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': '4',
19: 1:      'question': '4',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': 'Buzz',
19: 1:      'question': '5',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': 'Fizz',
19: 1:      'question': '6',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': 'Muzz',
19: 1:      'question': '7',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': '8',
19: 1:      'question': '8',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': 'Fizz',
19: 1:      'question': '9',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': 'Buzz',
19: 1:      'question': '10',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': 'Duzz',
19: 1:      'question': '11',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': 'Fizz',
19: 1:      'question': '12',
19: 1:      'valid': true
19: 1:    }
19: 1:  ],
19: 1:  'info': [
19: 1:    '✅f(1) = 1',
19: 1:    '✅f(2) = 2',
19: 1:    '✅f(3) = Fizz',
19: 1:    '✅f(4) = 4',
19: 1:    '✅f(5) = Buzz',
19: 1:    '✅f(6) = Fizz',
19: 1:    '✅f(7) = Muzz',
19: 1:    '✅f(8) = 8',
19: 1:    '✅f(9) = Fizz',
19: 1:    '✅f(10) = Buzz',
19: 1:    '✅f(11) = Duzz',
19: 1:    '✅f(12) = Fizz',
19: 1:    '❌f(13) = ??? != Cazz'
19: 1:  ],
19: 1:  'level': 1,
19: 1:  'nextQuestion': '13',
19: 1:  'questions': [
19: 1:    '1',
19: 1:    '2',
19: 1:    '3',
19: 1:    '4',
19: 1:    '5',
19: 1:    '6',
19: 1:    '7',
19: 1:    '8',
19: 1:    '9',
19: 1:    '10',
19: 1:    '11',
19: 1:    '12',
19: 1:    '13'
19: 1:  ]
19: 1:}
19: 1:Scores: 17
19: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz']')
19: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
20: 1:BoardData {
20: 1:  'description': [
20: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
20: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
20: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
20: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
20: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
20: 1:    'Please write optimized code without any duplication.',
20: 1:    'For divider 11 - the word must be 'Duzz'.',
20: 1:    'For divider 13 - the word must be 'Cazz'.',
20: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
20: 1:  ],
20: 1:  'expectedAnswer': 'Muzz',
20: 1:  'history': [
20: 1:    {
20: 1:      'answer': '1',
20: 1:      'question': '1',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': '2',
20: 1:      'question': '2',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': 'Fizz',
20: 1:      'question': '3',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': '4',
20: 1:      'question': '4',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': 'Buzz',
20: 1:      'question': '5',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': 'Fizz',
20: 1:      'question': '6',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': 'Muzz',
20: 1:      'question': '7',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': '8',
20: 1:      'question': '8',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': 'Fizz',
20: 1:      'question': '9',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': 'Buzz',
20: 1:      'question': '10',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': 'Duzz',
20: 1:      'question': '11',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': 'Fizz',
20: 1:      'question': '12',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': 'Cazz',
20: 1:      'question': '13',
20: 1:      'valid': true
20: 1:    }
20: 1:  ],
20: 1:  'info': [
20: 1:    '✅f(1) = 1',
20: 1:    '✅f(2) = 2',
20: 1:    '✅f(3) = Fizz',
20: 1:    '✅f(4) = 4',
20: 1:    '✅f(5) = Buzz',
20: 1:    '✅f(6) = Fizz',
20: 1:    '✅f(7) = Muzz',
20: 1:    '✅f(8) = 8',
20: 1:    '✅f(9) = Fizz',
20: 1:    '✅f(10) = Buzz',
20: 1:    '✅f(11) = Duzz',
20: 1:    '✅f(12) = Fizz',
20: 1:    '✅f(13) = Cazz',
20: 1:    '❌f(14) = ??? != Muzz'
20: 1:  ],
20: 1:  'level': 1,
20: 1:  'nextQuestion': '14',
20: 1:  'questions': [
20: 1:    '1',
20: 1:    '2',
20: 1:    '3',
20: 1:    '4',
20: 1:    '5',
20: 1:    '6',
20: 1:    '7',
20: 1:    '8',
20: 1:    '9',
20: 1:    '10',
20: 1:    '11',
20: 1:    '12',
20: 1:    '13',
20: 1:    '14'
20: 1:  ]
20: 1:}
20: 1:Scores: 18
20: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz']')
20: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
21: 1:BoardData {
21: 1:  'description': [
21: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
21: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
21: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
21: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
21: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
21: 1:    'Please write optimized code without any duplication.',
21: 1:    'For divider 11 - the word must be 'Duzz'.',
21: 1:    'For divider 13 - the word must be 'Cazz'.',
21: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
21: 1:  ],
21: 1:  'expectedAnswer': 'FizzBuzz',
21: 1:  'history': [
21: 1:    {
21: 1:      'answer': '1',
21: 1:      'question': '1',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': '2',
21: 1:      'question': '2',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': 'Fizz',
21: 1:      'question': '3',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': '4',
21: 1:      'question': '4',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': 'Buzz',
21: 1:      'question': '5',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': 'Fizz',
21: 1:      'question': '6',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': 'Muzz',
21: 1:      'question': '7',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': '8',
21: 1:      'question': '8',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': 'Fizz',
21: 1:      'question': '9',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': 'Buzz',
21: 1:      'question': '10',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': 'Duzz',
21: 1:      'question': '11',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': 'Fizz',
21: 1:      'question': '12',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': 'Cazz',
21: 1:      'question': '13',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': 'Muzz',
21: 1:      'question': '14',
21: 1:      'valid': true
21: 1:    }
21: 1:  ],
21: 1:  'info': [
21: 1:    '✅f(1) = 1',
21: 1:    '✅f(2) = 2',
21: 1:    '✅f(3) = Fizz',
21: 1:    '✅f(4) = 4',
21: 1:    '✅f(5) = Buzz',
21: 1:    '✅f(6) = Fizz',
21: 1:    '✅f(7) = Muzz',
21: 1:    '✅f(8) = 8',
21: 1:    '✅f(9) = Fizz',
21: 1:    '✅f(10) = Buzz',
21: 1:    '✅f(11) = Duzz',
21: 1:    '✅f(12) = Fizz',
21: 1:    '✅f(13) = Cazz',
21: 1:    '✅f(14) = Muzz',
21: 1:    '❌f(15) = ??? != FizzBuzz'
21: 1:  ],
21: 1:  'level': 1,
21: 1:  'nextQuestion': '15',
21: 1:  'questions': [
21: 1:    '1',
21: 1:    '2',
21: 1:    '3',
21: 1:    '4',
21: 1:    '5',
21: 1:    '6',
21: 1:    '7',
21: 1:    '8',
21: 1:    '9',
21: 1:    '10',
21: 1:    '11',
21: 1:    '12',
21: 1:    '13',
21: 1:    '14',
21: 1:    '15'
21: 1:  ]
21: 1:}
21: 1:Scores: 19
21: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz']')
21: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
22: 1:BoardData {
22: 1:  'description': [
22: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
22: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
22: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
22: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
22: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
22: 1:    'Please write optimized code without any duplication.',
22: 1:    'For divider 11 - the word must be 'Duzz'.',
22: 1:    'For divider 13 - the word must be 'Cazz'.',
22: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
22: 1:  ],
22: 1:  'expectedAnswer': '16',
22: 1:  'history': [
22: 1:    {
22: 1:      'answer': '1',
22: 1:      'question': '1',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': '2',
22: 1:      'question': '2',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'Fizz',
22: 1:      'question': '3',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': '4',
22: 1:      'question': '4',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'Buzz',
22: 1:      'question': '5',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'Fizz',
22: 1:      'question': '6',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'Muzz',
22: 1:      'question': '7',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': '8',
22: 1:      'question': '8',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'Fizz',
22: 1:      'question': '9',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'Buzz',
22: 1:      'question': '10',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'Duzz',
22: 1:      'question': '11',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'Fizz',
22: 1:      'question': '12',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'Cazz',
22: 1:      'question': '13',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'Muzz',
22: 1:      'question': '14',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'FizzBuzz',
22: 1:      'question': '15',
22: 1:      'valid': true
22: 1:    }
22: 1:  ],
22: 1:  'info': [
22: 1:    '✅f(1) = 1',
22: 1:    '✅f(2) = 2',
22: 1:    '✅f(3) = Fizz',
22: 1:    '✅f(4) = 4',
22: 1:    '✅f(5) = Buzz',
22: 1:    '✅f(6) = Fizz',
22: 1:    '✅f(7) = Muzz',
22: 1:    '✅f(8) = 8',
22: 1:    '✅f(9) = Fizz',
22: 1:    '✅f(10) = Buzz',
22: 1:    '✅f(11) = Duzz',
22: 1:    '✅f(12) = Fizz',
22: 1:    '✅f(13) = Cazz',
22: 1:    '✅f(14) = Muzz',
22: 1:    '✅f(15) = FizzBuzz',
22: 1:    '❌f(16) = ??? != 16'
22: 1:  ],
22: 1:  'level': 1,
22: 1:  'nextQuestion': '16',
22: 1:  'questions': [
22: 1:    '1',
22: 1:    '2',
22: 1:    '3',
22: 1:    '4',
22: 1:    '5',
22: 1:    '6',
22: 1:    '7',
22: 1:    '8',
22: 1:    '9',
22: 1:    '10',
22: 1:    '11',
22: 1:    '12',
22: 1:    '13',
22: 1:    '14',
22: 1:    '15',
22: 1:    '16'
22: 1:  ]
22: 1:}
22: 1:Scores: 20
22: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16']')
22: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
23: 1:BoardData {
23: 1:  'description': [
23: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
23: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
23: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
23: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
23: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
23: 1:    'Please write optimized code without any duplication.',
23: 1:    'For divider 11 - the word must be 'Duzz'.',
23: 1:    'For divider 13 - the word must be 'Cazz'.',
23: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
23: 1:  ],
23: 1:  'expectedAnswer': '17',
23: 1:  'history': [
23: 1:    {
23: 1:      'answer': '1',
23: 1:      'question': '1',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': '2',
23: 1:      'question': '2',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'Fizz',
23: 1:      'question': '3',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': '4',
23: 1:      'question': '4',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'Buzz',
23: 1:      'question': '5',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'Fizz',
23: 1:      'question': '6',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'Muzz',
23: 1:      'question': '7',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': '8',
23: 1:      'question': '8',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'Fizz',
23: 1:      'question': '9',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'Buzz',
23: 1:      'question': '10',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'Duzz',
23: 1:      'question': '11',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'Fizz',
23: 1:      'question': '12',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'Cazz',
23: 1:      'question': '13',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'Muzz',
23: 1:      'question': '14',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'FizzBuzz',
23: 1:      'question': '15',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': '16',
23: 1:      'question': '16',
23: 1:      'valid': true
23: 1:    }
23: 1:  ],
23: 1:  'info': [
23: 1:    '✅f(1) = 1',
23: 1:    '✅f(2) = 2',
23: 1:    '✅f(3) = Fizz',
23: 1:    '✅f(4) = 4',
23: 1:    '✅f(5) = Buzz',
23: 1:    '✅f(6) = Fizz',
23: 1:    '✅f(7) = Muzz',
23: 1:    '✅f(8) = 8',
23: 1:    '✅f(9) = Fizz',
23: 1:    '✅f(10) = Buzz',
23: 1:    '✅f(11) = Duzz',
23: 1:    '✅f(12) = Fizz',
23: 1:    '✅f(13) = Cazz',
23: 1:    '✅f(14) = Muzz',
23: 1:    '✅f(15) = FizzBuzz',
23: 1:    '✅f(16) = 16',
23: 1:    '❌f(17) = ??? != 17'
23: 1:  ],
23: 1:  'level': 1,
23: 1:  'nextQuestion': '17',
23: 1:  'questions': [
23: 1:    '1',
23: 1:    '2',
23: 1:    '3',
23: 1:    '4',
23: 1:    '5',
23: 1:    '6',
23: 1:    '7',
23: 1:    '8',
23: 1:    '9',
23: 1:    '10',
23: 1:    '11',
23: 1:    '12',
23: 1:    '13',
23: 1:    '14',
23: 1:    '15',
23: 1:    '16',
23: 1:    '17'
23: 1:  ]
23: 1:}
23: 1:Scores: 21
23: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17']')
23: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
24: 1:BoardData {
24: 1:  'description': [
24: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
24: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
24: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
24: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
24: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
24: 1:    'Please write optimized code without any duplication.',
24: 1:    'For divider 11 - the word must be 'Duzz'.',
24: 1:    'For divider 13 - the word must be 'Cazz'.',
24: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
24: 1:  ],
24: 1:  'expectedAnswer': 'FizzMuzz',
24: 1:  'history': [
24: 1:    {
24: 1:      'answer': '1',
24: 1:      'question': '1',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': '2',
24: 1:      'question': '2',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'Fizz',
24: 1:      'question': '3',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': '4',
24: 1:      'question': '4',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'Buzz',
24: 1:      'question': '5',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'Fizz',
24: 1:      'question': '6',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'Muzz',
24: 1:      'question': '7',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': '8',
24: 1:      'question': '8',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'Fizz',
24: 1:      'question': '9',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'Buzz',
24: 1:      'question': '10',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'Duzz',
24: 1:      'question': '11',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'Fizz',
24: 1:      'question': '12',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'Cazz',
24: 1:      'question': '13',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'Muzz',
24: 1:      'question': '14',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'FizzBuzz',
24: 1:      'question': '15',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': '16',
24: 1:      'question': '16',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': '17',
24: 1:      'question': '17',
24: 1:      'valid': true
24: 1:    }
24: 1:  ],
24: 1:  'info': [
24: 1:    '✅f(1) = 1',
24: 1:    '✅f(2) = 2',
24: 1:    '✅f(3) = Fizz',
24: 1:    '✅f(4) = 4',
24: 1:    '✅f(5) = Buzz',
24: 1:    '✅f(6) = Fizz',
24: 1:    '✅f(7) = Muzz',
24: 1:    '✅f(8) = 8',
24: 1:    '✅f(9) = Fizz',
24: 1:    '✅f(10) = Buzz',
24: 1:    '✅f(11) = Duzz',
24: 1:    '✅f(12) = Fizz',
24: 1:    '✅f(13) = Cazz',
24: 1:    '✅f(14) = Muzz',
24: 1:    '✅f(15) = FizzBuzz',
24: 1:    '✅f(16) = 16',
24: 1:    '✅f(17) = 17',
24: 1:    '❌f(21) = ??? != FizzMuzz'
24: 1:  ],
24: 1:  'level': 1,
24: 1:  'nextQuestion': '21',
24: 1:  'questions': [
24: 1:    '1',
24: 1:    '2',
24: 1:    '3',
24: 1:    '4',
24: 1:    '5',
24: 1:    '6',
24: 1:    '7',
24: 1:    '8',
24: 1:    '9',
24: 1:    '10',
24: 1:    '11',
24: 1:    '12',
24: 1:    '13',
24: 1:    '14',
24: 1:    '15',
24: 1:    '16',
24: 1:    '17',
24: 1:    '21'
24: 1:  ]
24: 1:}
24: 1:Scores: 22
24: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz']')
24: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
25: 1:BoardData {
25: 1:  'description': [
25: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
25: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
25: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
25: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
25: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
25: 1:    'Please write optimized code without any duplication.',
25: 1:    'For divider 11 - the word must be 'Duzz'.',
25: 1:    'For divider 13 - the word must be 'Cazz'.',
25: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
25: 1:  ],
25: 1:  'expectedAnswer': 'FizzDuzz',
25: 1:  'history': [
25: 1:    {
25: 1:      'answer': '1',
25: 1:      'question': '1',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': '2',
25: 1:      'question': '2',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'Fizz',
25: 1:      'question': '3',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': '4',
25: 1:      'question': '4',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'Buzz',
25: 1:      'question': '5',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'Fizz',
25: 1:      'question': '6',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'Muzz',
25: 1:      'question': '7',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': '8',
25: 1:      'question': '8',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'Fizz',
25: 1:      'question': '9',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'Buzz',
25: 1:      'question': '10',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'Duzz',
25: 1:      'question': '11',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'Fizz',
25: 1:      'question': '12',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'Cazz',
25: 1:      'question': '13',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'Muzz',
25: 1:      'question': '14',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'FizzBuzz',
25: 1:      'question': '15',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': '16',
25: 1:      'question': '16',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': '17',
25: 1:      'question': '17',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'FizzMuzz',
25: 1:      'question': '21',
25: 1:      'valid': true
25: 1:    }
25: 1:  ],
25: 1:  'info': [
25: 1:    '✅f(1) = 1',
25: 1:    '✅f(2) = 2',
25: 1:    '✅f(3) = Fizz',
25: 1:    '✅f(4) = 4',
25: 1:    '✅f(5) = Buzz',
25: 1:    '✅f(6) = Fizz',
25: 1:    '✅f(7) = Muzz',
25: 1:    '✅f(8) = 8',
25: 1:    '✅f(9) = Fizz',
25: 1:    '✅f(10) = Buzz',
25: 1:    '✅f(11) = Duzz',
25: 1:    '✅f(12) = Fizz',
25: 1:    '✅f(13) = Cazz',
25: 1:    '✅f(14) = Muzz',
25: 1:    '✅f(15) = FizzBuzz',
25: 1:    '✅f(16) = 16',
25: 1:    '✅f(17) = 17',
25: 1:    '✅f(21) = FizzMuzz',
25: 1:    '❌f(33) = ??? != FizzDuzz'
25: 1:  ],
25: 1:  'level': 1,
25: 1:  'nextQuestion': '33',
25: 1:  'questions': [
25: 1:    '1',
25: 1:    '2',
25: 1:    '3',
25: 1:    '4',
25: 1:    '5',
25: 1:    '6',
25: 1:    '7',
25: 1:    '8',
25: 1:    '9',
25: 1:    '10',
25: 1:    '11',
25: 1:    '12',
25: 1:    '13',
25: 1:    '14',
25: 1:    '15',
25: 1:    '16',
25: 1:    '17',
25: 1:    '21',
25: 1:    '33'
25: 1:  ]
25: 1:}
25: 1:Scores: 23
25: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz']')
25: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
26: 1:BoardData {
26: 1:  'description': [
26: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
26: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
26: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
26: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
26: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
26: 1:    'Please write optimized code without any duplication.',
26: 1:    'For divider 11 - the word must be 'Duzz'.',
26: 1:    'For divider 13 - the word must be 'Cazz'.',
26: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
26: 1:  ],
26: 1:  'expectedAnswer': 'BuzzMuzz',
26: 1:  'history': [
26: 1:    {
26: 1:      'answer': '1',
26: 1:      'question': '1',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': '2',
26: 1:      'question': '2',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'Fizz',
26: 1:      'question': '3',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': '4',
26: 1:      'question': '4',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'Buzz',
26: 1:      'question': '5',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'Fizz',
26: 1:      'question': '6',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'Muzz',
26: 1:      'question': '7',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': '8',
26: 1:      'question': '8',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'Fizz',
26: 1:      'question': '9',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'Buzz',
26: 1:      'question': '10',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'Duzz',
26: 1:      'question': '11',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'Fizz',
26: 1:      'question': '12',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'Cazz',
26: 1:      'question': '13',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'Muzz',
26: 1:      'question': '14',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'FizzBuzz',
26: 1:      'question': '15',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': '16',
26: 1:      'question': '16',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': '17',
26: 1:      'question': '17',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'FizzMuzz',
26: 1:      'question': '21',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'FizzDuzz',
26: 1:      'question': '33',
26: 1:      'valid': true
26: 1:    }
26: 1:  ],
26: 1:  'info': [
26: 1:    '✅f(1) = 1',
26: 1:    '✅f(2) = 2',
26: 1:    '✅f(3) = Fizz',
26: 1:    '✅f(4) = 4',
26: 1:    '✅f(5) = Buzz',
26: 1:    '✅f(6) = Fizz',
26: 1:    '✅f(7) = Muzz',
26: 1:    '✅f(8) = 8',
26: 1:    '✅f(9) = Fizz',
26: 1:    '✅f(10) = Buzz',
26: 1:    '✅f(11) = Duzz',
26: 1:    '✅f(12) = Fizz',
26: 1:    '✅f(13) = Cazz',
26: 1:    '✅f(14) = Muzz',
26: 1:    '✅f(15) = FizzBuzz',
26: 1:    '✅f(16) = 16',
26: 1:    '✅f(17) = 17',
26: 1:    '✅f(21) = FizzMuzz',
26: 1:    '✅f(33) = FizzDuzz',
26: 1:    '❌f(35) = ??? != BuzzMuzz'
26: 1:  ],
26: 1:  'level': 1,
26: 1:  'nextQuestion': '35',
26: 1:  'questions': [
26: 1:    '1',
26: 1:    '2',
26: 1:    '3',
26: 1:    '4',
26: 1:    '5',
26: 1:    '6',
26: 1:    '7',
26: 1:    '8',
26: 1:    '9',
26: 1:    '10',
26: 1:    '11',
26: 1:    '12',
26: 1:    '13',
26: 1:    '14',
26: 1:    '15',
26: 1:    '16',
26: 1:    '17',
26: 1:    '21',
26: 1:    '33',
26: 1:    '35'
26: 1:  ]
26: 1:}
26: 1:Scores: 24
26: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz']')
26: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
27: 1:BoardData {
27: 1:  'description': [
27: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
27: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
27: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
27: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
27: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
27: 1:    'Please write optimized code without any duplication.',
27: 1:    'For divider 11 - the word must be 'Duzz'.',
27: 1:    'For divider 13 - the word must be 'Cazz'.',
27: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
27: 1:  ],
27: 1:  'expectedAnswer': 'FizzCazz',
27: 1:  'history': [
27: 1:    {
27: 1:      'answer': '1',
27: 1:      'question': '1',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': '2',
27: 1:      'question': '2',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'Fizz',
27: 1:      'question': '3',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': '4',
27: 1:      'question': '4',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'Buzz',
27: 1:      'question': '5',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'Fizz',
27: 1:      'question': '6',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'Muzz',
27: 1:      'question': '7',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': '8',
27: 1:      'question': '8',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'Fizz',
27: 1:      'question': '9',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'Buzz',
27: 1:      'question': '10',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'Duzz',
27: 1:      'question': '11',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'Fizz',
27: 1:      'question': '12',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'Cazz',
27: 1:      'question': '13',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'Muzz',
27: 1:      'question': '14',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'FizzBuzz',
27: 1:      'question': '15',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': '16',
27: 1:      'question': '16',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': '17',
27: 1:      'question': '17',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'FizzMuzz',
27: 1:      'question': '21',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'FizzDuzz',
27: 1:      'question': '33',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'BuzzMuzz',
27: 1:      'question': '35',
27: 1:      'valid': true
27: 1:    }
27: 1:  ],
27: 1:  'info': [
27: 1:    '✅f(1) = 1',
27: 1:    '✅f(2) = 2',
27: 1:    '✅f(3) = Fizz',
27: 1:    '✅f(4) = 4',
27: 1:    '✅f(5) = Buzz',
27: 1:    '✅f(6) = Fizz',
27: 1:    '✅f(7) = Muzz',
27: 1:    '✅f(8) = 8',
27: 1:    '✅f(9) = Fizz',
27: 1:    '✅f(10) = Buzz',
27: 1:    '✅f(11) = Duzz',
27: 1:    '✅f(12) = Fizz',
27: 1:    '✅f(13) = Cazz',
27: 1:    '✅f(14) = Muzz',
27: 1:    '✅f(15) = FizzBuzz',
27: 1:    '✅f(16) = 16',
27: 1:    '✅f(17) = 17',
27: 1:    '✅f(21) = FizzMuzz',
27: 1:    '✅f(33) = FizzDuzz',
27: 1:    '✅f(35) = BuzzMuzz',
27: 1:    '❌f(39) = ??? != FizzCazz'
27: 1:  ],
27: 1:  'level': 1,
27: 1:  'nextQuestion': '39',
27: 1:  'questions': [
27: 1:    '1',
27: 1:    '2',
27: 1:    '3',
27: 1:    '4',
27: 1:    '5',
27: 1:    '6',
27: 1:    '7',
27: 1:    '8',
27: 1:    '9',
27: 1:    '10',
27: 1:    '11',
27: 1:    '12',
27: 1:    '13',
27: 1:    '14',
27: 1:    '15',
27: 1:    '16',
27: 1:    '17',
27: 1:    '21',
27: 1:    '33',
27: 1:    '35',
27: 1:    '39'
27: 1:  ]
27: 1:}
27: 1:Scores: 25
27: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz']')
27: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
28: 1:BoardData {
28: 1:  'description': [
28: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
28: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
28: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
28: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
28: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
28: 1:    'Please write optimized code without any duplication.',
28: 1:    'For divider 11 - the word must be 'Duzz'.',
28: 1:    'For divider 13 - the word must be 'Cazz'.',
28: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
28: 1:  ],
28: 1:  'expectedAnswer': 'Muzz',
28: 1:  'history': [
28: 1:    {
28: 1:      'answer': '1',
28: 1:      'question': '1',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': '2',
28: 1:      'question': '2',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Fizz',
28: 1:      'question': '3',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': '4',
28: 1:      'question': '4',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Buzz',
28: 1:      'question': '5',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Fizz',
28: 1:      'question': '6',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Muzz',
28: 1:      'question': '7',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': '8',
28: 1:      'question': '8',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Fizz',
28: 1:      'question': '9',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Buzz',
28: 1:      'question': '10',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Duzz',
28: 1:      'question': '11',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Fizz',
28: 1:      'question': '12',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Cazz',
28: 1:      'question': '13',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Muzz',
28: 1:      'question': '14',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'FizzBuzz',
28: 1:      'question': '15',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': '16',
28: 1:      'question': '16',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': '17',
28: 1:      'question': '17',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'FizzMuzz',
28: 1:      'question': '21',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'FizzDuzz',
28: 1:      'question': '33',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'BuzzMuzz',
28: 1:      'question': '35',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'FizzCazz',
28: 1:      'question': '39',
28: 1:      'valid': true
28: 1:    }
28: 1:  ],
28: 1:  'info': [
28: 1:    '✅f(1) = 1',
28: 1:    '✅f(2) = 2',
28: 1:    '✅f(3) = Fizz',
28: 1:    '✅f(4) = 4',
28: 1:    '✅f(5) = Buzz',
28: 1:    '✅f(6) = Fizz',
28: 1:    '✅f(7) = Muzz',
28: 1:    '✅f(8) = 8',
28: 1:    '✅f(9) = Fizz',
28: 1:    '✅f(10) = Buzz',
28: 1:    '✅f(11) = Duzz',
28: 1:    '✅f(12) = Fizz',
28: 1:    '✅f(13) = Cazz',
28: 1:    '✅f(14) = Muzz',
28: 1:    '✅f(15) = FizzBuzz',
28: 1:    '✅f(16) = 16',
28: 1:    '✅f(17) = 17',
28: 1:    '✅f(21) = FizzMuzz',
28: 1:    '✅f(33) = FizzDuzz',
28: 1:    '✅f(35) = BuzzMuzz',
28: 1:    '✅f(39) = FizzCazz',
28: 1:    '❌f(49) = ??? != Muzz'
28: 1:  ],
28: 1:  'level': 1,
28: 1:  'nextQuestion': '49',
28: 1:  'questions': [
28: 1:    '1',
28: 1:    '2',
28: 1:    '3',
28: 1:    '4',
28: 1:    '5',
28: 1:    '6',
28: 1:    '7',
28: 1:    '8',
28: 1:    '9',
28: 1:    '10',
28: 1:    '11',
28: 1:    '12',
28: 1:    '13',
28: 1:    '14',
28: 1:    '15',
28: 1:    '16',
28: 1:    '17',
28: 1:    '21',
28: 1:    '33',
28: 1:    '35',
28: 1:    '39',
28: 1:    '49'
28: 1:  ]
28: 1:}
28: 1:Scores: 26
28: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz']')
28: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
29: 1:BoardData {
29: 1:  'description': [
29: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
29: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
29: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
29: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
29: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
29: 1:    'Please write optimized code without any duplication.',
29: 1:    'For divider 11 - the word must be 'Duzz'.',
29: 1:    'For divider 13 - the word must be 'Cazz'.',
29: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
29: 1:  ],
29: 1:  'expectedAnswer': 'BuzzDuzz',
29: 1:  'history': [
29: 1:    {
29: 1:      'answer': '1',
29: 1:      'question': '1',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': '2',
29: 1:      'question': '2',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Fizz',
29: 1:      'question': '3',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': '4',
29: 1:      'question': '4',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Buzz',
29: 1:      'question': '5',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Fizz',
29: 1:      'question': '6',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Muzz',
29: 1:      'question': '7',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': '8',
29: 1:      'question': '8',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Fizz',
29: 1:      'question': '9',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Buzz',
29: 1:      'question': '10',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Duzz',
29: 1:      'question': '11',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Fizz',
29: 1:      'question': '12',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Cazz',
29: 1:      'question': '13',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Muzz',
29: 1:      'question': '14',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'FizzBuzz',
29: 1:      'question': '15',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': '16',
29: 1:      'question': '16',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': '17',
29: 1:      'question': '17',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'FizzMuzz',
29: 1:      'question': '21',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'FizzDuzz',
29: 1:      'question': '33',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'BuzzMuzz',
29: 1:      'question': '35',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'FizzCazz',
29: 1:      'question': '39',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Muzz',
29: 1:      'question': '49',
29: 1:      'valid': true
29: 1:    }
29: 1:  ],
29: 1:  'info': [
29: 1:    '✅f(1) = 1',
29: 1:    '✅f(2) = 2',
29: 1:    '✅f(3) = Fizz',
29: 1:    '✅f(4) = 4',
29: 1:    '✅f(5) = Buzz',
29: 1:    '✅f(6) = Fizz',
29: 1:    '✅f(7) = Muzz',
29: 1:    '✅f(8) = 8',
29: 1:    '✅f(9) = Fizz',
29: 1:    '✅f(10) = Buzz',
29: 1:    '✅f(11) = Duzz',
29: 1:    '✅f(12) = Fizz',
29: 1:    '✅f(13) = Cazz',
29: 1:    '✅f(14) = Muzz',
29: 1:    '✅f(15) = FizzBuzz',
29: 1:    '✅f(16) = 16',
29: 1:    '✅f(17) = 17',
29: 1:    '✅f(21) = FizzMuzz',
29: 1:    '✅f(33) = FizzDuzz',
29: 1:    '✅f(35) = BuzzMuzz',
29: 1:    '✅f(39) = FizzCazz',
29: 1:    '✅f(49) = Muzz',
29: 1:    '❌f(55) = ??? != BuzzDuzz'
29: 1:  ],
29: 1:  'level': 1,
29: 1:  'nextQuestion': '55',
29: 1:  'questions': [
29: 1:    '1',
29: 1:    '2',
29: 1:    '3',
29: 1:    '4',
29: 1:    '5',
29: 1:    '6',
29: 1:    '7',
29: 1:    '8',
29: 1:    '9',
29: 1:    '10',
29: 1:    '11',
29: 1:    '12',
29: 1:    '13',
29: 1:    '14',
29: 1:    '15',
29: 1:    '16',
29: 1:    '17',
29: 1:    '21',
29: 1:    '33',
29: 1:    '35',
29: 1:    '39',
29: 1:    '49',
29: 1:    '55'
29: 1:  ]
29: 1:}
29: 1:Scores: 27
29: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz']')
29: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
30: 1:BoardData {
30: 1:  'description': [
30: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
30: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
30: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
30: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
30: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
30: 1:    'Please write optimized code without any duplication.',
30: 1:    'For divider 11 - the word must be 'Duzz'.',
30: 1:    'For divider 13 - the word must be 'Cazz'.',
30: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
30: 1:  ],
30: 1:  'expectedAnswer': 'BuzzCazz',
30: 1:  'history': [
30: 1:    {
30: 1:      'answer': '1',
30: 1:      'question': '1',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': '2',
30: 1:      'question': '2',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Fizz',
30: 1:      'question': '3',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': '4',
30: 1:      'question': '4',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Buzz',
30: 1:      'question': '5',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Fizz',
30: 1:      'question': '6',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Muzz',
30: 1:      'question': '7',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': '8',
30: 1:      'question': '8',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Fizz',
30: 1:      'question': '9',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Buzz',
30: 1:      'question': '10',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Duzz',
30: 1:      'question': '11',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Fizz',
30: 1:      'question': '12',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Cazz',
30: 1:      'question': '13',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Muzz',
30: 1:      'question': '14',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'FizzBuzz',
30: 1:      'question': '15',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': '16',
30: 1:      'question': '16',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': '17',
30: 1:      'question': '17',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'FizzMuzz',
30: 1:      'question': '21',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'FizzDuzz',
30: 1:      'question': '33',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'BuzzMuzz',
30: 1:      'question': '35',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'FizzCazz',
30: 1:      'question': '39',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Muzz',
30: 1:      'question': '49',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'BuzzDuzz',
30: 1:      'question': '55',
30: 1:      'valid': true
30: 1:    }
30: 1:  ],
30: 1:  'info': [
30: 1:    '✅f(1) = 1',
30: 1:    '✅f(2) = 2',
30: 1:    '✅f(3) = Fizz',
30: 1:    '✅f(4) = 4',
30: 1:    '✅f(5) = Buzz',
30: 1:    '✅f(6) = Fizz',
30: 1:    '✅f(7) = Muzz',
30: 1:    '✅f(8) = 8',
30: 1:    '✅f(9) = Fizz',
30: 1:    '✅f(10) = Buzz',
30: 1:    '✅f(11) = Duzz',
30: 1:    '✅f(12) = Fizz',
30: 1:    '✅f(13) = Cazz',
30: 1:    '✅f(14) = Muzz',
30: 1:    '✅f(15) = FizzBuzz',
30: 1:    '✅f(16) = 16',
30: 1:    '✅f(17) = 17',
30: 1:    '✅f(21) = FizzMuzz',
30: 1:    '✅f(33) = FizzDuzz',
30: 1:    '✅f(35) = BuzzMuzz',
30: 1:    '✅f(39) = FizzCazz',
30: 1:    '✅f(49) = Muzz',
30: 1:    '✅f(55) = BuzzDuzz',
30: 1:    '❌f(65) = ??? != BuzzCazz'
30: 1:  ],
30: 1:  'level': 1,
30: 1:  'nextQuestion': '65',
30: 1:  'questions': [
30: 1:    '1',
30: 1:    '2',
30: 1:    '3',
30: 1:    '4',
30: 1:    '5',
30: 1:    '6',
30: 1:    '7',
30: 1:    '8',
30: 1:    '9',
30: 1:    '10',
30: 1:    '11',
30: 1:    '12',
30: 1:    '13',
30: 1:    '14',
30: 1:    '15',
30: 1:    '16',
30: 1:    '17',
30: 1:    '21',
30: 1:    '33',
30: 1:    '35',
30: 1:    '39',
30: 1:    '49',
30: 1:    '55',
30: 1:    '65'
30: 1:  ]
30: 1:}
30: 1:Scores: 28
30: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz']')
30: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
31: 1:BoardData {
31: 1:  'description': [
31: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
31: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
31: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
31: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
31: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
31: 1:    'Please write optimized code without any duplication.',
31: 1:    'For divider 11 - the word must be 'Duzz'.',
31: 1:    'For divider 13 - the word must be 'Cazz'.',
31: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
31: 1:  ],
31: 1:  'expectedAnswer': 'MuzzDuzz',
31: 1:  'history': [
31: 1:    {
31: 1:      'answer': '1',
31: 1:      'question': '1',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': '2',
31: 1:      'question': '2',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Fizz',
31: 1:      'question': '3',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': '4',
31: 1:      'question': '4',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Buzz',
31: 1:      'question': '5',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Fizz',
31: 1:      'question': '6',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Muzz',
31: 1:      'question': '7',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': '8',
31: 1:      'question': '8',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Fizz',
31: 1:      'question': '9',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Buzz',
31: 1:      'question': '10',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Duzz',
31: 1:      'question': '11',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Fizz',
31: 1:      'question': '12',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Cazz',
31: 1:      'question': '13',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Muzz',
31: 1:      'question': '14',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'FizzBuzz',
31: 1:      'question': '15',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': '16',
31: 1:      'question': '16',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': '17',
31: 1:      'question': '17',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'FizzMuzz',
31: 1:      'question': '21',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'FizzDuzz',
31: 1:      'question': '33',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'BuzzMuzz',
31: 1:      'question': '35',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'FizzCazz',
31: 1:      'question': '39',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Muzz',
31: 1:      'question': '49',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'BuzzDuzz',
31: 1:      'question': '55',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'BuzzCazz',
31: 1:      'question': '65',
31: 1:      'valid': true
31: 1:    }
31: 1:  ],
31: 1:  'info': [
31: 1:    '✅f(1) = 1',
31: 1:    '✅f(2) = 2',
31: 1:    '✅f(3) = Fizz',
31: 1:    '✅f(4) = 4',
31: 1:    '✅f(5) = Buzz',
31: 1:    '✅f(6) = Fizz',
31: 1:    '✅f(7) = Muzz',
31: 1:    '✅f(8) = 8',
31: 1:    '✅f(9) = Fizz',
31: 1:    '✅f(10) = Buzz',
31: 1:    '✅f(11) = Duzz',
31: 1:    '✅f(12) = Fizz',
31: 1:    '✅f(13) = Cazz',
31: 1:    '✅f(14) = Muzz',
31: 1:    '✅f(15) = FizzBuzz',
31: 1:    '✅f(16) = 16',
31: 1:    '✅f(17) = 17',
31: 1:    '✅f(21) = FizzMuzz',
31: 1:    '✅f(33) = FizzDuzz',
31: 1:    '✅f(35) = BuzzMuzz',
31: 1:    '✅f(39) = FizzCazz',
31: 1:    '✅f(49) = Muzz',
31: 1:    '✅f(55) = BuzzDuzz',
31: 1:    '✅f(65) = BuzzCazz',
31: 1:    '❌f(77) = ??? != MuzzDuzz'
31: 1:  ],
31: 1:  'level': 1,
31: 1:  'nextQuestion': '77',
31: 1:  'questions': [
31: 1:    '1',
31: 1:    '2',
31: 1:    '3',
31: 1:    '4',
31: 1:    '5',
31: 1:    '6',
31: 1:    '7',
31: 1:    '8',
31: 1:    '9',
31: 1:    '10',
31: 1:    '11',
31: 1:    '12',
31: 1:    '13',
31: 1:    '14',
31: 1:    '15',
31: 1:    '16',
31: 1:    '17',
31: 1:    '21',
31: 1:    '33',
31: 1:    '35',
31: 1:    '39',
31: 1:    '49',
31: 1:    '55',
31: 1:    '65',
31: 1:    '77'
31: 1:  ]
31: 1:}
31: 1:Scores: 29
31: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz']')
31: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
32: 1:BoardData {
32: 1:  'description': [
32: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
32: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
32: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
32: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
32: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
32: 1:    'Please write optimized code without any duplication.',
32: 1:    'For divider 11 - the word must be 'Duzz'.',
32: 1:    'For divider 13 - the word must be 'Cazz'.',
32: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
32: 1:  ],
32: 1:  'expectedAnswer': 'MuzzCazz',
32: 1:  'history': [
32: 1:    {
32: 1:      'answer': '1',
32: 1:      'question': '1',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': '2',
32: 1:      'question': '2',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Fizz',
32: 1:      'question': '3',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': '4',
32: 1:      'question': '4',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Buzz',
32: 1:      'question': '5',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Fizz',
32: 1:      'question': '6',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Muzz',
32: 1:      'question': '7',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': '8',
32: 1:      'question': '8',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Fizz',
32: 1:      'question': '9',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Buzz',
32: 1:      'question': '10',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Duzz',
32: 1:      'question': '11',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Fizz',
32: 1:      'question': '12',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Cazz',
32: 1:      'question': '13',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Muzz',
32: 1:      'question': '14',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'FizzBuzz',
32: 1:      'question': '15',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': '16',
32: 1:      'question': '16',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': '17',
32: 1:      'question': '17',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'FizzMuzz',
32: 1:      'question': '21',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'FizzDuzz',
32: 1:      'question': '33',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'BuzzMuzz',
32: 1:      'question': '35',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'FizzCazz',
32: 1:      'question': '39',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Muzz',
32: 1:      'question': '49',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'BuzzDuzz',
32: 1:      'question': '55',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'BuzzCazz',
32: 1:      'question': '65',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'MuzzDuzz',
32: 1:      'question': '77',
32: 1:      'valid': true
32: 1:    }
32: 1:  ],
32: 1:  'info': [
32: 1:    '✅f(1) = 1',
32: 1:    '✅f(2) = 2',
32: 1:    '✅f(3) = Fizz',
32: 1:    '✅f(4) = 4',
32: 1:    '✅f(5) = Buzz',
32: 1:    '✅f(6) = Fizz',
32: 1:    '✅f(7) = Muzz',
32: 1:    '✅f(8) = 8',
32: 1:    '✅f(9) = Fizz',
32: 1:    '✅f(10) = Buzz',
32: 1:    '✅f(11) = Duzz',
32: 1:    '✅f(12) = Fizz',
32: 1:    '✅f(13) = Cazz',
32: 1:    '✅f(14) = Muzz',
32: 1:    '✅f(15) = FizzBuzz',
32: 1:    '✅f(16) = 16',
32: 1:    '✅f(17) = 17',
32: 1:    '✅f(21) = FizzMuzz',
32: 1:    '✅f(33) = FizzDuzz',
32: 1:    '✅f(35) = BuzzMuzz',
32: 1:    '✅f(39) = FizzCazz',
32: 1:    '✅f(49) = Muzz',
32: 1:    '✅f(55) = BuzzDuzz',
32: 1:    '✅f(65) = BuzzCazz',
32: 1:    '✅f(77) = MuzzDuzz',
32: 1:    '❌f(91) = ??? != MuzzCazz'
32: 1:  ],
32: 1:  'level': 1,
32: 1:  'nextQuestion': '91',
32: 1:  'questions': [
32: 1:    '1',
32: 1:    '2',
32: 1:    '3',
32: 1:    '4',
32: 1:    '5',
32: 1:    '6',
32: 1:    '7',
32: 1:    '8',
32: 1:    '9',
32: 1:    '10',
32: 1:    '11',
32: 1:    '12',
32: 1:    '13',
32: 1:    '14',
32: 1:    '15',
32: 1:    '16',
32: 1:    '17',
32: 1:    '21',
32: 1:    '33',
32: 1:    '35',
32: 1:    '39',
32: 1:    '49',
32: 1:    '55',
32: 1:    '65',
32: 1:    '77',
32: 1:    '91'
32: 1:  ]
32: 1:}
32: 1:Scores: 30
32: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz']')
32: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
33: 1:BoardData {
33: 1:  'description': [
33: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
33: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
33: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
33: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
33: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
33: 1:    'Please write optimized code without any duplication.',
33: 1:    'For divider 11 - the word must be 'Duzz'.',
33: 1:    'For divider 13 - the word must be 'Cazz'.',
33: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
33: 1:  ],
33: 1:  'expectedAnswer': 'FizzBuzzMuzz',
33: 1:  'history': [
33: 1:    {
33: 1:      'answer': '1',
33: 1:      'question': '1',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': '2',
33: 1:      'question': '2',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'Fizz',
33: 1:      'question': '3',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': '4',
33: 1:      'question': '4',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'Buzz',
33: 1:      'question': '5',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'Fizz',
33: 1:      'question': '6',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'Muzz',
33: 1:      'question': '7',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': '8',
33: 1:      'question': '8',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'Fizz',
33: 1:      'question': '9',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'Buzz',
33: 1:      'question': '10',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'Duzz',
33: 1:      'question': '11',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'Fizz',
33: 1:      'question': '12',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'Cazz',
33: 1:      'question': '13',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'Muzz',
33: 1:      'question': '14',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'FizzBuzz',
33: 1:      'question': '15',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': '16',
33: 1:      'question': '16',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': '17',
33: 1:      'question': '17',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'FizzMuzz',
33: 1:      'question': '21',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'FizzDuzz',
33: 1:      'question': '33',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'BuzzMuzz',
33: 1:      'question': '35',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'FizzCazz',
33: 1:      'question': '39',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'Muzz',
33: 1:      'question': '49',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'BuzzDuzz',
33: 1:      'question': '55',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'BuzzCazz',
33: 1:      'question': '65',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'MuzzDuzz',
33: 1:      'question': '77',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'MuzzCazz',
33: 1:      'question': '91',
33: 1:      'valid': true
33: 1:    }
33: 1:  ],
33: 1:  'info': [
33: 1:    '✅f(1) = 1',
33: 1:    '✅f(2) = 2',
33: 1:    '✅f(3) = Fizz',
33: 1:    '✅f(4) = 4',
33: 1:    '✅f(5) = Buzz',
33: 1:    '✅f(6) = Fizz',
33: 1:    '✅f(7) = Muzz',
33: 1:    '✅f(8) = 8',
33: 1:    '✅f(9) = Fizz',
33: 1:    '✅f(10) = Buzz',
33: 1:    '✅f(11) = Duzz',
33: 1:    '✅f(12) = Fizz',
33: 1:    '✅f(13) = Cazz',
33: 1:    '✅f(14) = Muzz',
33: 1:    '✅f(15) = FizzBuzz',
33: 1:    '✅f(16) = 16',
33: 1:    '✅f(17) = 17',
33: 1:    '✅f(21) = FizzMuzz',
33: 1:    '✅f(33) = FizzDuzz',
33: 1:    '✅f(35) = BuzzMuzz',
33: 1:    '✅f(39) = FizzCazz',
33: 1:    '✅f(49) = Muzz',
33: 1:    '✅f(55) = BuzzDuzz',
33: 1:    '✅f(65) = BuzzCazz',
33: 1:    '✅f(77) = MuzzDuzz',
33: 1:    '✅f(91) = MuzzCazz',
33: 1:    '❌f(105) = ??? != FizzBuzzMuzz'
33: 1:  ],
33: 1:  'level': 1,
33: 1:  'nextQuestion': '105',
33: 1:  'questions': [
33: 1:    '1',
33: 1:    '2',
33: 1:    '3',
33: 1:    '4',
33: 1:    '5',
33: 1:    '6',
33: 1:    '7',
33: 1:    '8',
33: 1:    '9',
33: 1:    '10',
33: 1:    '11',
33: 1:    '12',
33: 1:    '13',
33: 1:    '14',
33: 1:    '15',
33: 1:    '16',
33: 1:    '17',
33: 1:    '21',
33: 1:    '33',
33: 1:    '35',
33: 1:    '39',
33: 1:    '49',
33: 1:    '55',
33: 1:    '65',
33: 1:    '77',
33: 1:    '91',
33: 1:    '105'
33: 1:  ]
33: 1:}
33: 1:Scores: 31
33: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz']')
33: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
34: 1:BoardData {
34: 1:  'description': [
34: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
34: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
34: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
34: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
34: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
34: 1:    'Please write optimized code without any duplication.',
34: 1:    'For divider 11 - the word must be 'Duzz'.',
34: 1:    'For divider 13 - the word must be 'Cazz'.',
34: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
34: 1:  ],
34: 1:  'expectedAnswer': 'FizzBuzzDuzz',
34: 1:  'history': [
34: 1:    {
34: 1:      'answer': '1',
34: 1:      'question': '1',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': '2',
34: 1:      'question': '2',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'Fizz',
34: 1:      'question': '3',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': '4',
34: 1:      'question': '4',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'Buzz',
34: 1:      'question': '5',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'Fizz',
34: 1:      'question': '6',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'Muzz',
34: 1:      'question': '7',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': '8',
34: 1:      'question': '8',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'Fizz',
34: 1:      'question': '9',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'Buzz',
34: 1:      'question': '10',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'Duzz',
34: 1:      'question': '11',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'Fizz',
34: 1:      'question': '12',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'Cazz',
34: 1:      'question': '13',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'Muzz',
34: 1:      'question': '14',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'FizzBuzz',
34: 1:      'question': '15',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': '16',
34: 1:      'question': '16',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': '17',
34: 1:      'question': '17',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'FizzMuzz',
34: 1:      'question': '21',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'FizzDuzz',
34: 1:      'question': '33',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'BuzzMuzz',
34: 1:      'question': '35',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'FizzCazz',
34: 1:      'question': '39',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'Muzz',
34: 1:      'question': '49',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'BuzzDuzz',
34: 1:      'question': '55',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'BuzzCazz',
34: 1:      'question': '65',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'MuzzDuzz',
34: 1:      'question': '77',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'MuzzCazz',
34: 1:      'question': '91',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'FizzBuzzMuzz',
34: 1:      'question': '105',
34: 1:      'valid': true
34: 1:    }
34: 1:  ],
34: 1:  'info': [
34: 1:    '✅f(1) = 1',
34: 1:    '✅f(2) = 2',
34: 1:    '✅f(3) = Fizz',
34: 1:    '✅f(4) = 4',
34: 1:    '✅f(5) = Buzz',
34: 1:    '✅f(6) = Fizz',
34: 1:    '✅f(7) = Muzz',
34: 1:    '✅f(8) = 8',
34: 1:    '✅f(9) = Fizz',
34: 1:    '✅f(10) = Buzz',
34: 1:    '✅f(11) = Duzz',
34: 1:    '✅f(12) = Fizz',
34: 1:    '✅f(13) = Cazz',
34: 1:    '✅f(14) = Muzz',
34: 1:    '✅f(15) = FizzBuzz',
34: 1:    '✅f(16) = 16',
34: 1:    '✅f(17) = 17',
34: 1:    '✅f(21) = FizzMuzz',
34: 1:    '✅f(33) = FizzDuzz',
34: 1:    '✅f(35) = BuzzMuzz',
34: 1:    '✅f(39) = FizzCazz',
34: 1:    '✅f(49) = Muzz',
34: 1:    '✅f(55) = BuzzDuzz',
34: 1:    '✅f(65) = BuzzCazz',
34: 1:    '✅f(77) = MuzzDuzz',
34: 1:    '✅f(91) = MuzzCazz',
34: 1:    '✅f(105) = FizzBuzzMuzz',
34: 1:    '❌f(165) = ??? != FizzBuzzDuzz'
34: 1:  ],
34: 1:  'level': 1,
34: 1:  'nextQuestion': '165',
34: 1:  'questions': [
34: 1:    '1',
34: 1:    '2',
34: 1:    '3',
34: 1:    '4',
34: 1:    '5',
34: 1:    '6',
34: 1:    '7',
34: 1:    '8',
34: 1:    '9',
34: 1:    '10',
34: 1:    '11',
34: 1:    '12',
34: 1:    '13',
34: 1:    '14',
34: 1:    '15',
34: 1:    '16',
34: 1:    '17',
34: 1:    '21',
34: 1:    '33',
34: 1:    '35',
34: 1:    '39',
34: 1:    '49',
34: 1:    '55',
34: 1:    '65',
34: 1:    '77',
34: 1:    '91',
34: 1:    '105',
34: 1:    '165'
34: 1:  ]
34: 1:}
34: 1:Scores: 32
34: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz', 'FizzBuzzDuzz']')
34: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
35: 1:BoardData {
35: 1:  'description': [
35: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
35: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
35: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
35: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
35: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
35: 1:    'Please write optimized code without any duplication.',
35: 1:    'For divider 11 - the word must be 'Duzz'.',
35: 1:    'For divider 13 - the word must be 'Cazz'.',
35: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
35: 1:  ],
35: 1:  'expectedAnswer': 'FizzBuzzCazz',
35: 1:  'history': [
35: 1:    {
35: 1:      'answer': '1',
35: 1:      'question': '1',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': '2',
35: 1:      'question': '2',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'Fizz',
35: 1:      'question': '3',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': '4',
35: 1:      'question': '4',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'Buzz',
35: 1:      'question': '5',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'Fizz',
35: 1:      'question': '6',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'Muzz',
35: 1:      'question': '7',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': '8',
35: 1:      'question': '8',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'Fizz',
35: 1:      'question': '9',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'Buzz',
35: 1:      'question': '10',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'Duzz',
35: 1:      'question': '11',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'Fizz',
35: 1:      'question': '12',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'Cazz',
35: 1:      'question': '13',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'Muzz',
35: 1:      'question': '14',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'FizzBuzz',
35: 1:      'question': '15',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': '16',
35: 1:      'question': '16',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': '17',
35: 1:      'question': '17',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'FizzMuzz',
35: 1:      'question': '21',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'FizzDuzz',
35: 1:      'question': '33',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'BuzzMuzz',
35: 1:      'question': '35',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'FizzCazz',
35: 1:      'question': '39',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'Muzz',
35: 1:      'question': '49',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'BuzzDuzz',
35: 1:      'question': '55',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'BuzzCazz',
35: 1:      'question': '65',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'MuzzDuzz',
35: 1:      'question': '77',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'MuzzCazz',
35: 1:      'question': '91',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'FizzBuzzMuzz',
35: 1:      'question': '105',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'FizzBuzzDuzz',
35: 1:      'question': '165',
35: 1:      'valid': true
35: 1:    }
35: 1:  ],
35: 1:  'info': [
35: 1:    '✅f(1) = 1',
35: 1:    '✅f(2) = 2',
35: 1:    '✅f(3) = Fizz',
35: 1:    '✅f(4) = 4',
35: 1:    '✅f(5) = Buzz',
35: 1:    '✅f(6) = Fizz',
35: 1:    '✅f(7) = Muzz',
35: 1:    '✅f(8) = 8',
35: 1:    '✅f(9) = Fizz',
35: 1:    '✅f(10) = Buzz',
35: 1:    '✅f(11) = Duzz',
35: 1:    '✅f(12) = Fizz',
35: 1:    '✅f(13) = Cazz',
35: 1:    '✅f(14) = Muzz',
35: 1:    '✅f(15) = FizzBuzz',
35: 1:    '✅f(16) = 16',
35: 1:    '✅f(17) = 17',
35: 1:    '✅f(21) = FizzMuzz',
35: 1:    '✅f(33) = FizzDuzz',
35: 1:    '✅f(35) = BuzzMuzz',
35: 1:    '✅f(39) = FizzCazz',
35: 1:    '✅f(49) = Muzz',
35: 1:    '✅f(55) = BuzzDuzz',
35: 1:    '✅f(65) = BuzzCazz',
35: 1:    '✅f(77) = MuzzDuzz',
35: 1:    '✅f(91) = MuzzCazz',
35: 1:    '✅f(105) = FizzBuzzMuzz',
35: 1:    '✅f(165) = FizzBuzzDuzz',
35: 1:    '❌f(195) = ??? != FizzBuzzCazz'
35: 1:  ],
35: 1:  'level': 1,
35: 1:  'nextQuestion': '195',
35: 1:  'questions': [
35: 1:    '1',
35: 1:    '2',
35: 1:    '3',
35: 1:    '4',
35: 1:    '5',
35: 1:    '6',
35: 1:    '7',
35: 1:    '8',
35: 1:    '9',
35: 1:    '10',
35: 1:    '11',
35: 1:    '12',
35: 1:    '13',
35: 1:    '14',
35: 1:    '15',
35: 1:    '16',
35: 1:    '17',
35: 1:    '21',
35: 1:    '33',
35: 1:    '35',
35: 1:    '39',
35: 1:    '49',
35: 1:    '55',
35: 1:    '65',
35: 1:    '77',
35: 1:    '91',
35: 1:    '105',
35: 1:    '165',
35: 1:    '195'
35: 1:  ]
35: 1:}
35: 1:Scores: 33
35: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz', 'FizzBuzzDuzz', 'FizzBuzzCazz']')
35: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
36: 1:BoardData {
36: 1:  'description': [
36: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
36: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
36: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
36: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
36: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
36: 1:    'Please write optimized code without any duplication.',
36: 1:    'For divider 11 - the word must be 'Duzz'.',
36: 1:    'For divider 13 - the word must be 'Cazz'.',
36: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
36: 1:  ],
36: 1:  'expectedAnswer': 'FizzMuzzDuzz',
36: 1:  'history': [
36: 1:    {
36: 1:      'answer': '1',
36: 1:      'question': '1',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': '2',
36: 1:      'question': '2',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'Fizz',
36: 1:      'question': '3',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': '4',
36: 1:      'question': '4',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'Buzz',
36: 1:      'question': '5',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'Fizz',
36: 1:      'question': '6',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'Muzz',
36: 1:      'question': '7',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': '8',
36: 1:      'question': '8',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'Fizz',
36: 1:      'question': '9',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'Buzz',
36: 1:      'question': '10',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'Duzz',
36: 1:      'question': '11',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'Fizz',
36: 1:      'question': '12',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'Cazz',
36: 1:      'question': '13',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'Muzz',
36: 1:      'question': '14',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'FizzBuzz',
36: 1:      'question': '15',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': '16',
36: 1:      'question': '16',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': '17',
36: 1:      'question': '17',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'FizzMuzz',
36: 1:      'question': '21',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'FizzDuzz',
36: 1:      'question': '33',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'BuzzMuzz',
36: 1:      'question': '35',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'FizzCazz',
36: 1:      'question': '39',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'Muzz',
36: 1:      'question': '49',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'BuzzDuzz',
36: 1:      'question': '55',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'BuzzCazz',
36: 1:      'question': '65',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'MuzzDuzz',
36: 1:      'question': '77',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'MuzzCazz',
36: 1:      'question': '91',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'FizzBuzzMuzz',
36: 1:      'question': '105',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'FizzBuzzDuzz',
36: 1:      'question': '165',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'FizzBuzzCazz',
36: 1:      'question': '195',
36: 1:      'valid': true
36: 1:    }
36: 1:  ],
36: 1:  'info': [
36: 1:    '✅f(1) = 1',
36: 1:    '✅f(2) = 2',
36: 1:    '✅f(3) = Fizz',
36: 1:    '✅f(4) = 4',
36: 1:    '✅f(5) = Buzz',
36: 1:    '✅f(6) = Fizz',
36: 1:    '✅f(7) = Muzz',
36: 1:    '✅f(8) = 8',
36: 1:    '✅f(9) = Fizz',
36: 1:    '✅f(10) = Buzz',
36: 1:    '✅f(11) = Duzz',
36: 1:    '✅f(12) = Fizz',
36: 1:    '✅f(13) = Cazz',
36: 1:    '✅f(14) = Muzz',
36: 1:    '✅f(15) = FizzBuzz',
36: 1:    '✅f(16) = 16',
36: 1:    '✅f(17) = 17',
36: 1:    '✅f(21) = FizzMuzz',
36: 1:    '✅f(33) = FizzDuzz',
36: 1:    '✅f(35) = BuzzMuzz',
36: 1:    '✅f(39) = FizzCazz',
36: 1:    '✅f(49) = Muzz',
36: 1:    '✅f(55) = BuzzDuzz',
36: 1:    '✅f(65) = BuzzCazz',
36: 1:    '✅f(77) = MuzzDuzz',
36: 1:    '✅f(91) = MuzzCazz',
36: 1:    '✅f(105) = FizzBuzzMuzz',
36: 1:    '✅f(165) = FizzBuzzDuzz',
36: 1:    '✅f(195) = FizzBuzzCazz',
36: 1:    '❌f(231) = ??? != FizzMuzzDuzz'
36: 1:  ],
36: 1:  'level': 1,
36: 1:  'nextQuestion': '231',
36: 1:  'questions': [
36: 1:    '1',
36: 1:    '2',
36: 1:    '3',
36: 1:    '4',
36: 1:    '5',
36: 1:    '6',
36: 1:    '7',
36: 1:    '8',
36: 1:    '9',
36: 1:    '10',
36: 1:    '11',
36: 1:    '12',
36: 1:    '13',
36: 1:    '14',
36: 1:    '15',
36: 1:    '16',
36: 1:    '17',
36: 1:    '21',
36: 1:    '33',
36: 1:    '35',
36: 1:    '39',
36: 1:    '49',
36: 1:    '55',
36: 1:    '65',
36: 1:    '77',
36: 1:    '91',
36: 1:    '105',
36: 1:    '165',
36: 1:    '195',
36: 1:    '231'
36: 1:  ]
36: 1:}
36: 1:Scores: 34
36: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz', 'FizzBuzzDuzz', 'FizzBuzzCazz', 'FizzMuzzDuzz']')
36: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
37: 1:BoardData {
37: 1:  'description': [
37: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
37: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
37: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
37: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
37: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
37: 1:    'Please write optimized code without any duplication.',
37: 1:    'For divider 11 - the word must be 'Duzz'.',
37: 1:    'For divider 13 - the word must be 'Cazz'.',
37: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
37: 1:  ],
37: 1:  'expectedAnswer': 'FizzMuzzCazz',
37: 1:  'history': [
37: 1:    {
37: 1:      'answer': '1',
37: 1:      'question': '1',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': '2',
37: 1:      'question': '2',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'Fizz',
37: 1:      'question': '3',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': '4',
37: 1:      'question': '4',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'Buzz',
37: 1:      'question': '5',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'Fizz',
37: 1:      'question': '6',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'Muzz',
37: 1:      'question': '7',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': '8',
37: 1:      'question': '8',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'Fizz',
37: 1:      'question': '9',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'Buzz',
37: 1:      'question': '10',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'Duzz',
37: 1:      'question': '11',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'Fizz',
37: 1:      'question': '12',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'Cazz',
37: 1:      'question': '13',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'Muzz',
37: 1:      'question': '14',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'FizzBuzz',
37: 1:      'question': '15',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': '16',
37: 1:      'question': '16',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': '17',
37: 1:      'question': '17',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'FizzMuzz',
37: 1:      'question': '21',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'FizzDuzz',
37: 1:      'question': '33',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'BuzzMuzz',
37: 1:      'question': '35',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'FizzCazz',
37: 1:      'question': '39',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'Muzz',
37: 1:      'question': '49',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'BuzzDuzz',
37: 1:      'question': '55',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'BuzzCazz',
37: 1:      'question': '65',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'MuzzDuzz',
37: 1:      'question': '77',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'MuzzCazz',
37: 1:      'question': '91',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'FizzBuzzMuzz',
37: 1:      'question': '105',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'FizzBuzzDuzz',
37: 1:      'question': '165',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'FizzBuzzCazz',
37: 1:      'question': '195',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'FizzMuzzDuzz',
37: 1:      'question': '231',
37: 1:      'valid': true
37: 1:    }
37: 1:  ],
37: 1:  'info': [
37: 1:    '✅f(1) = 1',
37: 1:    '✅f(2) = 2',
37: 1:    '✅f(3) = Fizz',
37: 1:    '✅f(4) = 4',
37: 1:    '✅f(5) = Buzz',
37: 1:    '✅f(6) = Fizz',
37: 1:    '✅f(7) = Muzz',
37: 1:    '✅f(8) = 8',
37: 1:    '✅f(9) = Fizz',
37: 1:    '✅f(10) = Buzz',
37: 1:    '✅f(11) = Duzz',
37: 1:    '✅f(12) = Fizz',
37: 1:    '✅f(13) = Cazz',
37: 1:    '✅f(14) = Muzz',
37: 1:    '✅f(15) = FizzBuzz',
37: 1:    '✅f(16) = 16',
37: 1:    '✅f(17) = 17',
37: 1:    '✅f(21) = FizzMuzz',
37: 1:    '✅f(33) = FizzDuzz',
37: 1:    '✅f(35) = BuzzMuzz',
37: 1:    '✅f(39) = FizzCazz',
37: 1:    '✅f(49) = Muzz',
37: 1:    '✅f(55) = BuzzDuzz',
37: 1:    '✅f(65) = BuzzCazz',
37: 1:    '✅f(77) = MuzzDuzz',
37: 1:    '✅f(91) = MuzzCazz',
37: 1:    '✅f(105) = FizzBuzzMuzz',
37: 1:    '✅f(165) = FizzBuzzDuzz',
37: 1:    '✅f(195) = FizzBuzzCazz',
37: 1:    '✅f(231) = FizzMuzzDuzz',
37: 1:    '❌f(273) = ??? != FizzMuzzCazz'
37: 1:  ],
37: 1:  'level': 1,
37: 1:  'nextQuestion': '273',
37: 1:  'questions': [
37: 1:    '1',
37: 1:    '2',
37: 1:    '3',
37: 1:    '4',
37: 1:    '5',
37: 1:    '6',
37: 1:    '7',
37: 1:    '8',
37: 1:    '9',
37: 1:    '10',
37: 1:    '11',
37: 1:    '12',
37: 1:    '13',
37: 1:    '14',
37: 1:    '15',
37: 1:    '16',
37: 1:    '17',
37: 1:    '21',
37: 1:    '33',
37: 1:    '35',
37: 1:    '39',
37: 1:    '49',
37: 1:    '55',
37: 1:    '65',
37: 1:    '77',
37: 1:    '91',
37: 1:    '105',
37: 1:    '165',
37: 1:    '195',
37: 1:    '231',
37: 1:    '273'
37: 1:  ]
37: 1:}
37: 1:Scores: 35
37: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz', 'FizzBuzzDuzz', 'FizzBuzzCazz', 'FizzMuzzDuzz', 'FizzMuzzCazz']')
37: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
38: 1:BoardData {
38: 1:  'description': [
38: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
38: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
38: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
38: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
38: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
38: 1:    'Please write optimized code without any duplication.',
38: 1:    'For divider 11 - the word must be 'Duzz'.',
38: 1:    'For divider 13 - the word must be 'Cazz'.',
38: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
38: 1:  ],
38: 1:  'expectedAnswer': 'BuzzMuzzDuzz',
38: 1:  'history': [
38: 1:    {
38: 1:      'answer': '1',
38: 1:      'question': '1',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': '2',
38: 1:      'question': '2',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'Fizz',
38: 1:      'question': '3',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': '4',
38: 1:      'question': '4',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'Buzz',
38: 1:      'question': '5',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'Fizz',
38: 1:      'question': '6',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'Muzz',
38: 1:      'question': '7',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': '8',
38: 1:      'question': '8',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'Fizz',
38: 1:      'question': '9',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'Buzz',
38: 1:      'question': '10',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'Duzz',
38: 1:      'question': '11',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'Fizz',
38: 1:      'question': '12',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'Cazz',
38: 1:      'question': '13',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'Muzz',
38: 1:      'question': '14',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'FizzBuzz',
38: 1:      'question': '15',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': '16',
38: 1:      'question': '16',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': '17',
38: 1:      'question': '17',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'FizzMuzz',
38: 1:      'question': '21',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'FizzDuzz',
38: 1:      'question': '33',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'BuzzMuzz',
38: 1:      'question': '35',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'FizzCazz',
38: 1:      'question': '39',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'Muzz',
38: 1:      'question': '49',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'BuzzDuzz',
38: 1:      'question': '55',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'BuzzCazz',
38: 1:      'question': '65',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'MuzzDuzz',
38: 1:      'question': '77',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'MuzzCazz',
38: 1:      'question': '91',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'FizzBuzzMuzz',
38: 1:      'question': '105',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'FizzBuzzDuzz',
38: 1:      'question': '165',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'FizzBuzzCazz',
38: 1:      'question': '195',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'FizzMuzzDuzz',
38: 1:      'question': '231',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'FizzMuzzCazz',
38: 1:      'question': '273',
38: 1:      'valid': true
38: 1:    }
38: 1:  ],
38: 1:  'info': [
38: 1:    '✅f(1) = 1',
38: 1:    '✅f(2) = 2',
38: 1:    '✅f(3) = Fizz',
38: 1:    '✅f(4) = 4',
38: 1:    '✅f(5) = Buzz',
38: 1:    '✅f(6) = Fizz',
38: 1:    '✅f(7) = Muzz',
38: 1:    '✅f(8) = 8',
38: 1:    '✅f(9) = Fizz',
38: 1:    '✅f(10) = Buzz',
38: 1:    '✅f(11) = Duzz',
38: 1:    '✅f(12) = Fizz',
38: 1:    '✅f(13) = Cazz',
38: 1:    '✅f(14) = Muzz',
38: 1:    '✅f(15) = FizzBuzz',
38: 1:    '✅f(16) = 16',
38: 1:    '✅f(17) = 17',
38: 1:    '✅f(21) = FizzMuzz',
38: 1:    '✅f(33) = FizzDuzz',
38: 1:    '✅f(35) = BuzzMuzz',
38: 1:    '✅f(39) = FizzCazz',
38: 1:    '✅f(49) = Muzz',
38: 1:    '✅f(55) = BuzzDuzz',
38: 1:    '✅f(65) = BuzzCazz',
38: 1:    '✅f(77) = MuzzDuzz',
38: 1:    '✅f(91) = MuzzCazz',
38: 1:    '✅f(105) = FizzBuzzMuzz',
38: 1:    '✅f(165) = FizzBuzzDuzz',
38: 1:    '✅f(195) = FizzBuzzCazz',
38: 1:    '✅f(231) = FizzMuzzDuzz',
38: 1:    '✅f(273) = FizzMuzzCazz',
38: 1:    '❌f(385) = ??? != BuzzMuzzDuzz'
38: 1:  ],
38: 1:  'level': 1,
38: 1:  'nextQuestion': '385',
38: 1:  'questions': [
38: 1:    '1',
38: 1:    '2',
38: 1:    '3',
38: 1:    '4',
38: 1:    '5',
38: 1:    '6',
38: 1:    '7',
38: 1:    '8',
38: 1:    '9',
38: 1:    '10',
38: 1:    '11',
38: 1:    '12',
38: 1:    '13',
38: 1:    '14',
38: 1:    '15',
38: 1:    '16',
38: 1:    '17',
38: 1:    '21',
38: 1:    '33',
38: 1:    '35',
38: 1:    '39',
38: 1:    '49',
38: 1:    '55',
38: 1:    '65',
38: 1:    '77',
38: 1:    '91',
38: 1:    '105',
38: 1:    '165',
38: 1:    '195',
38: 1:    '231',
38: 1:    '273',
38: 1:    '385'
38: 1:  ]
38: 1:}
38: 1:Scores: 36
38: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz', 'FizzBuzzDuzz', 'FizzBuzzCazz', 'FizzMuzzDuzz', 'FizzMuzzCazz', 'BuzzMuzzDuzz']')
38: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
39: 1:BoardData {
39: 1:  'description': [
39: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
39: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
39: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
39: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
39: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
39: 1:    'Please write optimized code without any duplication.',
39: 1:    'For divider 11 - the word must be 'Duzz'.',
39: 1:    'For divider 13 - the word must be 'Cazz'.',
39: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
39: 1:  ],
39: 1:  'expectedAnswer': 'BuzzMuzzCazz',
39: 1:  'history': [
39: 1:    {
39: 1:      'answer': '1',
39: 1:      'question': '1',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': '2',
39: 1:      'question': '2',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'Fizz',
39: 1:      'question': '3',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': '4',
39: 1:      'question': '4',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'Buzz',
39: 1:      'question': '5',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'Fizz',
39: 1:      'question': '6',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'Muzz',
39: 1:      'question': '7',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': '8',
39: 1:      'question': '8',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'Fizz',
39: 1:      'question': '9',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'Buzz',
39: 1:      'question': '10',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'Duzz',
39: 1:      'question': '11',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'Fizz',
39: 1:      'question': '12',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'Cazz',
39: 1:      'question': '13',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'Muzz',
39: 1:      'question': '14',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'FizzBuzz',
39: 1:      'question': '15',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': '16',
39: 1:      'question': '16',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': '17',
39: 1:      'question': '17',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'FizzMuzz',
39: 1:      'question': '21',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'FizzDuzz',
39: 1:      'question': '33',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'BuzzMuzz',
39: 1:      'question': '35',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'FizzCazz',
39: 1:      'question': '39',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'Muzz',
39: 1:      'question': '49',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'BuzzDuzz',
39: 1:      'question': '55',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'BuzzCazz',
39: 1:      'question': '65',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'MuzzDuzz',
39: 1:      'question': '77',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'MuzzCazz',
39: 1:      'question': '91',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'FizzBuzzMuzz',
39: 1:      'question': '105',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'FizzBuzzDuzz',
39: 1:      'question': '165',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'FizzBuzzCazz',
39: 1:      'question': '195',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'FizzMuzzDuzz',
39: 1:      'question': '231',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'FizzMuzzCazz',
39: 1:      'question': '273',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'BuzzMuzzDuzz',
39: 1:      'question': '385',
39: 1:      'valid': true
39: 1:    }
39: 1:  ],
39: 1:  'info': [
39: 1:    '✅f(1) = 1',
39: 1:    '✅f(2) = 2',
39: 1:    '✅f(3) = Fizz',
39: 1:    '✅f(4) = 4',
39: 1:    '✅f(5) = Buzz',
39: 1:    '✅f(6) = Fizz',
39: 1:    '✅f(7) = Muzz',
39: 1:    '✅f(8) = 8',
39: 1:    '✅f(9) = Fizz',
39: 1:    '✅f(10) = Buzz',
39: 1:    '✅f(11) = Duzz',
39: 1:    '✅f(12) = Fizz',
39: 1:    '✅f(13) = Cazz',
39: 1:    '✅f(14) = Muzz',
39: 1:    '✅f(15) = FizzBuzz',
39: 1:    '✅f(16) = 16',
39: 1:    '✅f(17) = 17',
39: 1:    '✅f(21) = FizzMuzz',
39: 1:    '✅f(33) = FizzDuzz',
39: 1:    '✅f(35) = BuzzMuzz',
39: 1:    '✅f(39) = FizzCazz',
39: 1:    '✅f(49) = Muzz',
39: 1:    '✅f(55) = BuzzDuzz',
39: 1:    '✅f(65) = BuzzCazz',
39: 1:    '✅f(77) = MuzzDuzz',
39: 1:    '✅f(91) = MuzzCazz',
39: 1:    '✅f(105) = FizzBuzzMuzz',
39: 1:    '✅f(165) = FizzBuzzDuzz',
39: 1:    '✅f(195) = FizzBuzzCazz',
39: 1:    '✅f(231) = FizzMuzzDuzz',
39: 1:    '✅f(273) = FizzMuzzCazz',
39: 1:    '✅f(385) = BuzzMuzzDuzz',
39: 1:    '❌f(455) = ??? != BuzzMuzzCazz'
39: 1:  ],
39: 1:  'level': 1,
39: 1:  'nextQuestion': '455',
39: 1:  'questions': [
39: 1:    '1',
39: 1:    '2',
39: 1:    '3',
39: 1:    '4',
39: 1:    '5',
39: 1:    '6',
39: 1:    '7',
39: 1:    '8',
39: 1:    '9',
39: 1:    '10',
39: 1:    '11',
39: 1:    '12',
39: 1:    '13',
39: 1:    '14',
39: 1:    '15',
39: 1:    '16',
39: 1:    '17',
39: 1:    '21',
39: 1:    '33',
39: 1:    '35',
39: 1:    '39',
39: 1:    '49',
39: 1:    '55',
39: 1:    '65',
39: 1:    '77',
39: 1:    '91',
39: 1:    '105',
39: 1:    '165',
39: 1:    '195',
39: 1:    '231',
39: 1:    '273',
39: 1:    '385',
39: 1:    '455'
39: 1:  ]
39: 1:}
39: 1:Scores: 37
39: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz', 'FizzBuzzDuzz', 'FizzBuzzCazz', 'FizzMuzzDuzz', 'FizzMuzzCazz', 'BuzzMuzzDuzz', 'BuzzMuzzCazz']')
39: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
40: 1:BoardData {
40: 1:  'description': [
40: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
40: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
40: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
40: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
40: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
40: 1:    'Please write optimized code without any duplication.',
40: 1:    'For divider 11 - the word must be 'Duzz'.',
40: 1:    'For divider 13 - the word must be 'Cazz'.',
40: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
40: 1:  ],
40: 1:  'expectedAnswer': 'BuzzDuzzCazz',
40: 1:  'history': [
40: 1:    {
40: 1:      'answer': '1',
40: 1:      'question': '1',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': '2',
40: 1:      'question': '2',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'Fizz',
40: 1:      'question': '3',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': '4',
40: 1:      'question': '4',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'Buzz',
40: 1:      'question': '5',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'Fizz',
40: 1:      'question': '6',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'Muzz',
40: 1:      'question': '7',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': '8',
40: 1:      'question': '8',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'Fizz',
40: 1:      'question': '9',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'Buzz',
40: 1:      'question': '10',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'Duzz',
40: 1:      'question': '11',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'Fizz',
40: 1:      'question': '12',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'Cazz',
40: 1:      'question': '13',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'Muzz',
40: 1:      'question': '14',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'FizzBuzz',
40: 1:      'question': '15',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': '16',
40: 1:      'question': '16',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': '17',
40: 1:      'question': '17',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'FizzMuzz',
40: 1:      'question': '21',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'FizzDuzz',
40: 1:      'question': '33',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'BuzzMuzz',
40: 1:      'question': '35',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'FizzCazz',
40: 1:      'question': '39',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'Muzz',
40: 1:      'question': '49',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'BuzzDuzz',
40: 1:      'question': '55',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'BuzzCazz',
40: 1:      'question': '65',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'MuzzDuzz',
40: 1:      'question': '77',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'MuzzCazz',
40: 1:      'question': '91',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'FizzBuzzMuzz',
40: 1:      'question': '105',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'FizzBuzzDuzz',
40: 1:      'question': '165',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'FizzBuzzCazz',
40: 1:      'question': '195',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'FizzMuzzDuzz',
40: 1:      'question': '231',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'FizzMuzzCazz',
40: 1:      'question': '273',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'BuzzMuzzDuzz',
40: 1:      'question': '385',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'BuzzMuzzCazz',
40: 1:      'question': '455',
40: 1:      'valid': true
40: 1:    }
40: 1:  ],
40: 1:  'info': [
40: 1:    '✅f(1) = 1',
40: 1:    '✅f(2) = 2',
40: 1:    '✅f(3) = Fizz',
40: 1:    '✅f(4) = 4',
40: 1:    '✅f(5) = Buzz',
40: 1:    '✅f(6) = Fizz',
40: 1:    '✅f(7) = Muzz',
40: 1:    '✅f(8) = 8',
40: 1:    '✅f(9) = Fizz',
40: 1:    '✅f(10) = Buzz',
40: 1:    '✅f(11) = Duzz',
40: 1:    '✅f(12) = Fizz',
40: 1:    '✅f(13) = Cazz',
40: 1:    '✅f(14) = Muzz',
40: 1:    '✅f(15) = FizzBuzz',
40: 1:    '✅f(16) = 16',
40: 1:    '✅f(17) = 17',
40: 1:    '✅f(21) = FizzMuzz',
40: 1:    '✅f(33) = FizzDuzz',
40: 1:    '✅f(35) = BuzzMuzz',
40: 1:    '✅f(39) = FizzCazz',
40: 1:    '✅f(49) = Muzz',
40: 1:    '✅f(55) = BuzzDuzz',
40: 1:    '✅f(65) = BuzzCazz',
40: 1:    '✅f(77) = MuzzDuzz',
40: 1:    '✅f(91) = MuzzCazz',
40: 1:    '✅f(105) = FizzBuzzMuzz',
40: 1:    '✅f(165) = FizzBuzzDuzz',
40: 1:    '✅f(195) = FizzBuzzCazz',
40: 1:    '✅f(231) = FizzMuzzDuzz',
40: 1:    '✅f(273) = FizzMuzzCazz',
40: 1:    '✅f(385) = BuzzMuzzDuzz',
40: 1:    '✅f(455) = BuzzMuzzCazz',
40: 1:    '❌f(715) = ??? != BuzzDuzzCazz'
40: 1:  ],
40: 1:  'level': 1,
40: 1:  'nextQuestion': '715',
40: 1:  'questions': [
40: 1:    '1',
40: 1:    '2',
40: 1:    '3',
40: 1:    '4',
40: 1:    '5',
40: 1:    '6',
40: 1:    '7',
40: 1:    '8',
40: 1:    '9',
40: 1:    '10',
40: 1:    '11',
40: 1:    '12',
40: 1:    '13',
40: 1:    '14',
40: 1:    '15',
40: 1:    '16',
40: 1:    '17',
40: 1:    '21',
40: 1:    '33',
40: 1:    '35',
40: 1:    '39',
40: 1:    '49',
40: 1:    '55',
40: 1:    '65',
40: 1:    '77',
40: 1:    '91',
40: 1:    '105',
40: 1:    '165',
40: 1:    '195',
40: 1:    '231',
40: 1:    '273',
40: 1:    '385',
40: 1:    '455',
40: 1:    '715'
40: 1:  ]
40: 1:}
40: 1:Scores: 38
40: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz', 'FizzBuzzDuzz', 'FizzBuzzCazz', 'FizzMuzzDuzz', 'FizzMuzzCazz', 'BuzzMuzzDuzz', 'BuzzMuzzCazz', 'BuzzDuzzCazz']')
40: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
41: 1:BoardData {
41: 1:  'description': [
41: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
41: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
41: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
41: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
41: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
41: 1:    'Please write optimized code without any duplication.',
41: 1:    'For divider 11 - the word must be 'Duzz'.',
41: 1:    'For divider 13 - the word must be 'Cazz'.',
41: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
41: 1:  ],
41: 1:  'expectedAnswer': 'MuzzDuzzCazz',
41: 1:  'history': [
41: 1:    {
41: 1:      'answer': '1',
41: 1:      'question': '1',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': '2',
41: 1:      'question': '2',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'Fizz',
41: 1:      'question': '3',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': '4',
41: 1:      'question': '4',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'Buzz',
41: 1:      'question': '5',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'Fizz',
41: 1:      'question': '6',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'Muzz',
41: 1:      'question': '7',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': '8',
41: 1:      'question': '8',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'Fizz',
41: 1:      'question': '9',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'Buzz',
41: 1:      'question': '10',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'Duzz',
41: 1:      'question': '11',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'Fizz',
41: 1:      'question': '12',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'Cazz',
41: 1:      'question': '13',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'Muzz',
41: 1:      'question': '14',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'FizzBuzz',
41: 1:      'question': '15',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': '16',
41: 1:      'question': '16',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': '17',
41: 1:      'question': '17',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'FizzMuzz',
41: 1:      'question': '21',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'FizzDuzz',
41: 1:      'question': '33',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'BuzzMuzz',
41: 1:      'question': '35',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'FizzCazz',
41: 1:      'question': '39',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'Muzz',
41: 1:      'question': '49',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'BuzzDuzz',
41: 1:      'question': '55',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'BuzzCazz',
41: 1:      'question': '65',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'MuzzDuzz',
41: 1:      'question': '77',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'MuzzCazz',
41: 1:      'question': '91',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'FizzBuzzMuzz',
41: 1:      'question': '105',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'FizzBuzzDuzz',
41: 1:      'question': '165',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'FizzBuzzCazz',
41: 1:      'question': '195',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'FizzMuzzDuzz',
41: 1:      'question': '231',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'FizzMuzzCazz',
41: 1:      'question': '273',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'BuzzMuzzDuzz',
41: 1:      'question': '385',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'BuzzMuzzCazz',
41: 1:      'question': '455',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'BuzzDuzzCazz',
41: 1:      'question': '715',
41: 1:      'valid': true
41: 1:    }
41: 1:  ],
41: 1:  'info': [
41: 1:    '✅f(1) = 1',
41: 1:    '✅f(2) = 2',
41: 1:    '✅f(3) = Fizz',
41: 1:    '✅f(4) = 4',
41: 1:    '✅f(5) = Buzz',
41: 1:    '✅f(6) = Fizz',
41: 1:    '✅f(7) = Muzz',
41: 1:    '✅f(8) = 8',
41: 1:    '✅f(9) = Fizz',
41: 1:    '✅f(10) = Buzz',
41: 1:    '✅f(11) = Duzz',
41: 1:    '✅f(12) = Fizz',
41: 1:    '✅f(13) = Cazz',
41: 1:    '✅f(14) = Muzz',
41: 1:    '✅f(15) = FizzBuzz',
41: 1:    '✅f(16) = 16',
41: 1:    '✅f(17) = 17',
41: 1:    '✅f(21) = FizzMuzz',
41: 1:    '✅f(33) = FizzDuzz',
41: 1:    '✅f(35) = BuzzMuzz',
41: 1:    '✅f(39) = FizzCazz',
41: 1:    '✅f(49) = Muzz',
41: 1:    '✅f(55) = BuzzDuzz',
41: 1:    '✅f(65) = BuzzCazz',
41: 1:    '✅f(77) = MuzzDuzz',
41: 1:    '✅f(91) = MuzzCazz',
41: 1:    '✅f(105) = FizzBuzzMuzz',
41: 1:    '✅f(165) = FizzBuzzDuzz',
41: 1:    '✅f(195) = FizzBuzzCazz',
41: 1:    '✅f(231) = FizzMuzzDuzz',
41: 1:    '✅f(273) = FizzMuzzCazz',
41: 1:    '✅f(385) = BuzzMuzzDuzz',
41: 1:    '✅f(455) = BuzzMuzzCazz',
41: 1:    '✅f(715) = BuzzDuzzCazz',
41: 1:    '❌f(1001) = ??? != MuzzDuzzCazz'
41: 1:  ],
41: 1:  'level': 1,
41: 1:  'nextQuestion': '1001',
41: 1:  'questions': [
41: 1:    '1',
41: 1:    '2',
41: 1:    '3',
41: 1:    '4',
41: 1:    '5',
41: 1:    '6',
41: 1:    '7',
41: 1:    '8',
41: 1:    '9',
41: 1:    '10',
41: 1:    '11',
41: 1:    '12',
41: 1:    '13',
41: 1:    '14',
41: 1:    '15',
41: 1:    '16',
41: 1:    '17',
41: 1:    '21',
41: 1:    '33',
41: 1:    '35',
41: 1:    '39',
41: 1:    '49',
41: 1:    '55',
41: 1:    '65',
41: 1:    '77',
41: 1:    '91',
41: 1:    '105',
41: 1:    '165',
41: 1:    '195',
41: 1:    '231',
41: 1:    '273',
41: 1:    '385',
41: 1:    '455',
41: 1:    '715',
41: 1:    '1001'
41: 1:  ]
41: 1:}
41: 1:Scores: 39
41: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz', 'FizzBuzzDuzz', 'FizzBuzzCazz', 'FizzMuzzDuzz', 'FizzMuzzCazz', 'BuzzMuzzDuzz', 'BuzzMuzzCazz', 'BuzzDuzzCazz', 'MuzzDuzzCazz']')
41: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
42: 1:BoardData {
42: 1:  'description': [
42: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
42: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
42: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
42: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
42: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
42: 1:    'Please write optimized code without any duplication.',
42: 1:    'For divider 11 - the word must be 'Duzz'.',
42: 1:    'For divider 13 - the word must be 'Cazz'.',
42: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
42: 1:  ],
42: 1:  'expectedAnswer': 'FizzBuzzMuzzDuzz',
42: 1:  'history': [
42: 1:    {
42: 1:      'answer': '1',
42: 1:      'question': '1',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': '2',
42: 1:      'question': '2',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'Fizz',
42: 1:      'question': '3',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': '4',
42: 1:      'question': '4',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'Buzz',
42: 1:      'question': '5',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'Fizz',
42: 1:      'question': '6',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'Muzz',
42: 1:      'question': '7',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': '8',
42: 1:      'question': '8',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'Fizz',
42: 1:      'question': '9',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'Buzz',
42: 1:      'question': '10',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'Duzz',
42: 1:      'question': '11',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'Fizz',
42: 1:      'question': '12',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'Cazz',
42: 1:      'question': '13',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'Muzz',
42: 1:      'question': '14',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'FizzBuzz',
42: 1:      'question': '15',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': '16',
42: 1:      'question': '16',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': '17',
42: 1:      'question': '17',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'FizzMuzz',
42: 1:      'question': '21',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'FizzDuzz',
42: 1:      'question': '33',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'BuzzMuzz',
42: 1:      'question': '35',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'FizzCazz',
42: 1:      'question': '39',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'Muzz',
42: 1:      'question': '49',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'BuzzDuzz',
42: 1:      'question': '55',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'BuzzCazz',
42: 1:      'question': '65',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'MuzzDuzz',
42: 1:      'question': '77',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'MuzzCazz',
42: 1:      'question': '91',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'FizzBuzzMuzz',
42: 1:      'question': '105',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'FizzBuzzDuzz',
42: 1:      'question': '165',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'FizzBuzzCazz',
42: 1:      'question': '195',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'FizzMuzzDuzz',
42: 1:      'question': '231',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'FizzMuzzCazz',
42: 1:      'question': '273',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'BuzzMuzzDuzz',
42: 1:      'question': '385',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'BuzzMuzzCazz',
42: 1:      'question': '455',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'BuzzDuzzCazz',
42: 1:      'question': '715',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'MuzzDuzzCazz',
42: 1:      'question': '1001',
42: 1:      'valid': true
42: 1:    }
42: 1:  ],
42: 1:  'info': [
42: 1:    '✅f(1) = 1',
42: 1:    '✅f(2) = 2',
42: 1:    '✅f(3) = Fizz',
42: 1:    '✅f(4) = 4',
42: 1:    '✅f(5) = Buzz',
42: 1:    '✅f(6) = Fizz',
42: 1:    '✅f(7) = Muzz',
42: 1:    '✅f(8) = 8',
42: 1:    '✅f(9) = Fizz',
42: 1:    '✅f(10) = Buzz',
42: 1:    '✅f(11) = Duzz',
42: 1:    '✅f(12) = Fizz',
42: 1:    '✅f(13) = Cazz',
42: 1:    '✅f(14) = Muzz',
42: 1:    '✅f(15) = FizzBuzz',
42: 1:    '✅f(16) = 16',
42: 1:    '✅f(17) = 17',
42: 1:    '✅f(21) = FizzMuzz',
42: 1:    '✅f(33) = FizzDuzz',
42: 1:    '✅f(35) = BuzzMuzz',
42: 1:    '✅f(39) = FizzCazz',
42: 1:    '✅f(49) = Muzz',
42: 1:    '✅f(55) = BuzzDuzz',
42: 1:    '✅f(65) = BuzzCazz',
42: 1:    '✅f(77) = MuzzDuzz',
42: 1:    '✅f(91) = MuzzCazz',
42: 1:    '✅f(105) = FizzBuzzMuzz',
42: 1:    '✅f(165) = FizzBuzzDuzz',
42: 1:    '✅f(195) = FizzBuzzCazz',
42: 1:    '✅f(231) = FizzMuzzDuzz',
42: 1:    '✅f(273) = FizzMuzzCazz',
42: 1:    '✅f(385) = BuzzMuzzDuzz',
42: 1:    '✅f(455) = BuzzMuzzCazz',
42: 1:    '✅f(715) = BuzzDuzzCazz',
42: 1:    '✅f(1001) = MuzzDuzzCazz',
42: 1:    '❌f(1155) = ??? != FizzBuzzMuzzDuzz'
42: 1:  ],
42: 1:  'level': 1,
42: 1:  'nextQuestion': '1155',
42: 1:  'questions': [
42: 1:    '1',
42: 1:    '2',
42: 1:    '3',
42: 1:    '4',
42: 1:    '5',
42: 1:    '6',
42: 1:    '7',
42: 1:    '8',
42: 1:    '9',
42: 1:    '10',
42: 1:    '11',
42: 1:    '12',
42: 1:    '13',
42: 1:    '14',
42: 1:    '15',
42: 1:    '16',
42: 1:    '17',
42: 1:    '21',
42: 1:    '33',
42: 1:    '35',
42: 1:    '39',
42: 1:    '49',
42: 1:    '55',
42: 1:    '65',
42: 1:    '77',
42: 1:    '91',
42: 1:    '105',
42: 1:    '165',
42: 1:    '195',
42: 1:    '231',
42: 1:    '273',
42: 1:    '385',
42: 1:    '455',
42: 1:    '715',
42: 1:    '1001',
42: 1:    '1155'
42: 1:  ]
42: 1:}
42: 1:Scores: 40
42: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz', 'FizzBuzzDuzz', 'FizzBuzzCazz', 'FizzMuzzDuzz', 'FizzMuzzCazz', 'BuzzMuzzDuzz', 'BuzzMuzzCazz', 'BuzzDuzzCazz', 'MuzzDuzzCazz', 'FizzBuzzMuzzDuzz']')
42: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
43: 1:BoardData {
43: 1:  'description': [
43: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
43: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
43: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
43: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
43: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
43: 1:    'Please write optimized code without any duplication.',
43: 1:    'For divider 11 - the word must be 'Duzz'.',
43: 1:    'For divider 13 - the word must be 'Cazz'.',
43: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
43: 1:  ],
43: 1:  'expectedAnswer': 'FizzBuzzMuzzCazz',
43: 1:  'history': [
43: 1:    {
43: 1:      'answer': '1',
43: 1:      'question': '1',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': '2',
43: 1:      'question': '2',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'Fizz',
43: 1:      'question': '3',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': '4',
43: 1:      'question': '4',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'Buzz',
43: 1:      'question': '5',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'Fizz',
43: 1:      'question': '6',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'Muzz',
43: 1:      'question': '7',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': '8',
43: 1:      'question': '8',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'Fizz',
43: 1:      'question': '9',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'Buzz',
43: 1:      'question': '10',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'Duzz',
43: 1:      'question': '11',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'Fizz',
43: 1:      'question': '12',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'Cazz',
43: 1:      'question': '13',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'Muzz',
43: 1:      'question': '14',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'FizzBuzz',
43: 1:      'question': '15',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': '16',
43: 1:      'question': '16',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': '17',
43: 1:      'question': '17',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'FizzMuzz',
43: 1:      'question': '21',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'FizzDuzz',
43: 1:      'question': '33',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'BuzzMuzz',
43: 1:      'question': '35',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'FizzCazz',
43: 1:      'question': '39',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'Muzz',
43: 1:      'question': '49',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'BuzzDuzz',
43: 1:      'question': '55',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'BuzzCazz',
43: 1:      'question': '65',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'MuzzDuzz',
43: 1:      'question': '77',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'MuzzCazz',
43: 1:      'question': '91',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'FizzBuzzMuzz',
43: 1:      'question': '105',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'FizzBuzzDuzz',
43: 1:      'question': '165',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'FizzBuzzCazz',
43: 1:      'question': '195',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'FizzMuzzDuzz',
43: 1:      'question': '231',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'FizzMuzzCazz',
43: 1:      'question': '273',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'BuzzMuzzDuzz',
43: 1:      'question': '385',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'BuzzMuzzCazz',
43: 1:      'question': '455',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'BuzzDuzzCazz',
43: 1:      'question': '715',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'MuzzDuzzCazz',
43: 1:      'question': '1001',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'FizzBuzzMuzzDuzz',
43: 1:      'question': '1155',
43: 1:      'valid': true
43: 1:    }
43: 1:  ],
43: 1:  'info': [
43: 1:    '✅f(1) = 1',
43: 1:    '✅f(2) = 2',
43: 1:    '✅f(3) = Fizz',
43: 1:    '✅f(4) = 4',
43: 1:    '✅f(5) = Buzz',
43: 1:    '✅f(6) = Fizz',
43: 1:    '✅f(7) = Muzz',
43: 1:    '✅f(8) = 8',
43: 1:    '✅f(9) = Fizz',
43: 1:    '✅f(10) = Buzz',
43: 1:    '✅f(11) = Duzz',
43: 1:    '✅f(12) = Fizz',
43: 1:    '✅f(13) = Cazz',
43: 1:    '✅f(14) = Muzz',
43: 1:    '✅f(15) = FizzBuzz',
43: 1:    '✅f(16) = 16',
43: 1:    '✅f(17) = 17',
43: 1:    '✅f(21) = FizzMuzz',
43: 1:    '✅f(33) = FizzDuzz',
43: 1:    '✅f(35) = BuzzMuzz',
43: 1:    '✅f(39) = FizzCazz',
43: 1:    '✅f(49) = Muzz',
43: 1:    '✅f(55) = BuzzDuzz',
43: 1:    '✅f(65) = BuzzCazz',
43: 1:    '✅f(77) = MuzzDuzz',
43: 1:    '✅f(91) = MuzzCazz',
43: 1:    '✅f(105) = FizzBuzzMuzz',
43: 1:    '✅f(165) = FizzBuzzDuzz',
43: 1:    '✅f(195) = FizzBuzzCazz',
43: 1:    '✅f(231) = FizzMuzzDuzz',
43: 1:    '✅f(273) = FizzMuzzCazz',
43: 1:    '✅f(385) = BuzzMuzzDuzz',
43: 1:    '✅f(455) = BuzzMuzzCazz',
43: 1:    '✅f(715) = BuzzDuzzCazz',
43: 1:    '✅f(1001) = MuzzDuzzCazz',
43: 1:    '✅f(1155) = FizzBuzzMuzzDuzz',
43: 1:    '❌f(1365) = ??? != FizzBuzzMuzzCazz'
43: 1:  ],
43: 1:  'level': 1,
43: 1:  'nextQuestion': '1365',
43: 1:  'questions': [
43: 1:    '1',
43: 1:    '2',
43: 1:    '3',
43: 1:    '4',
43: 1:    '5',
43: 1:    '6',
43: 1:    '7',
43: 1:    '8',
43: 1:    '9',
43: 1:    '10',
43: 1:    '11',
43: 1:    '12',
43: 1:    '13',
43: 1:    '14',
43: 1:    '15',
43: 1:    '16',
43: 1:    '17',
43: 1:    '21',
43: 1:    '33',
43: 1:    '35',
43: 1:    '39',
43: 1:    '49',
43: 1:    '55',
43: 1:    '65',
43: 1:    '77',
43: 1:    '91',
43: 1:    '105',
43: 1:    '165',
43: 1:    '195',
43: 1:    '231',
43: 1:    '273',
43: 1:    '385',
43: 1:    '455',
43: 1:    '715',
43: 1:    '1001',
43: 1:    '1155',
43: 1:    '1365'
43: 1:  ]
43: 1:}
43: 1:Scores: 41
43: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz', 'FizzBuzzDuzz', 'FizzBuzzCazz', 'FizzMuzzDuzz', 'FizzMuzzCazz', 'BuzzMuzzDuzz', 'BuzzMuzzCazz', 'BuzzDuzzCazz', 'MuzzDuzzCazz', 'FizzBuzzMuzzDuzz', 'FizzBuzzMuzzCazz']')
43: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
44: 1:BoardData {
44: 1:  'description': [
44: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
44: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
44: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
44: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
44: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
44: 1:    'Please write optimized code without any duplication.',
44: 1:    'For divider 11 - the word must be 'Duzz'.',
44: 1:    'For divider 13 - the word must be 'Cazz'.',
44: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
44: 1:  ],
44: 1:  'expectedAnswer': 'FizzBuzzDuzzCazz',
44: 1:  'history': [
44: 1:    {
44: 1:      'answer': '1',
44: 1:      'question': '1',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': '2',
44: 1:      'question': '2',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'Fizz',
44: 1:      'question': '3',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': '4',
44: 1:      'question': '4',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'Buzz',
44: 1:      'question': '5',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'Fizz',
44: 1:      'question': '6',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'Muzz',
44: 1:      'question': '7',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': '8',
44: 1:      'question': '8',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'Fizz',
44: 1:      'question': '9',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'Buzz',
44: 1:      'question': '10',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'Duzz',
44: 1:      'question': '11',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'Fizz',
44: 1:      'question': '12',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'Cazz',
44: 1:      'question': '13',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'Muzz',
44: 1:      'question': '14',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'FizzBuzz',
44: 1:      'question': '15',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': '16',
44: 1:      'question': '16',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': '17',
44: 1:      'question': '17',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'FizzMuzz',
44: 1:      'question': '21',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'FizzDuzz',
44: 1:      'question': '33',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'BuzzMuzz',
44: 1:      'question': '35',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'FizzCazz',
44: 1:      'question': '39',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'Muzz',
44: 1:      'question': '49',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'BuzzDuzz',
44: 1:      'question': '55',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'BuzzCazz',
44: 1:      'question': '65',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'MuzzDuzz',
44: 1:      'question': '77',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'MuzzCazz',
44: 1:      'question': '91',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'FizzBuzzMuzz',
44: 1:      'question': '105',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'FizzBuzzDuzz',
44: 1:      'question': '165',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'FizzBuzzCazz',
44: 1:      'question': '195',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'FizzMuzzDuzz',
44: 1:      'question': '231',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'FizzMuzzCazz',
44: 1:      'question': '273',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'BuzzMuzzDuzz',
44: 1:      'question': '385',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'BuzzMuzzCazz',
44: 1:      'question': '455',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'BuzzDuzzCazz',
44: 1:      'question': '715',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'MuzzDuzzCazz',
44: 1:      'question': '1001',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'FizzBuzzMuzzDuzz',
44: 1:      'question': '1155',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'FizzBuzzMuzzCazz',
44: 1:      'question': '1365',
44: 1:      'valid': true
44: 1:    }
44: 1:  ],
44: 1:  'info': [
44: 1:    '✅f(1) = 1',
44: 1:    '✅f(2) = 2',
44: 1:    '✅f(3) = Fizz',
44: 1:    '✅f(4) = 4',
44: 1:    '✅f(5) = Buzz',
44: 1:    '✅f(6) = Fizz',
44: 1:    '✅f(7) = Muzz',
44: 1:    '✅f(8) = 8',
44: 1:    '✅f(9) = Fizz',
44: 1:    '✅f(10) = Buzz',
44: 1:    '✅f(11) = Duzz',
44: 1:    '✅f(12) = Fizz',
44: 1:    '✅f(13) = Cazz',
44: 1:    '✅f(14) = Muzz',
44: 1:    '✅f(15) = FizzBuzz',
44: 1:    '✅f(16) = 16',
44: 1:    '✅f(17) = 17',
44: 1:    '✅f(21) = FizzMuzz',
44: 1:    '✅f(33) = FizzDuzz',
44: 1:    '✅f(35) = BuzzMuzz',
44: 1:    '✅f(39) = FizzCazz',
44: 1:    '✅f(49) = Muzz',
44: 1:    '✅f(55) = BuzzDuzz',
44: 1:    '✅f(65) = BuzzCazz',
44: 1:    '✅f(77) = MuzzDuzz',
44: 1:    '✅f(91) = MuzzCazz',
44: 1:    '✅f(105) = FizzBuzzMuzz',
44: 1:    '✅f(165) = FizzBuzzDuzz',
44: 1:    '✅f(195) = FizzBuzzCazz',
44: 1:    '✅f(231) = FizzMuzzDuzz',
44: 1:    '✅f(273) = FizzMuzzCazz',
44: 1:    '✅f(385) = BuzzMuzzDuzz',
44: 1:    '✅f(455) = BuzzMuzzCazz',
44: 1:    '✅f(715) = BuzzDuzzCazz',
44: 1:    '✅f(1001) = MuzzDuzzCazz',
44: 1:    '✅f(1155) = FizzBuzzMuzzDuzz',
44: 1:    '✅f(1365) = FizzBuzzMuzzCazz',
44: 1:    '❌f(2145) = ??? != FizzBuzzDuzzCazz'
44: 1:  ],
44: 1:  'level': 1,
44: 1:  'nextQuestion': '2145',
44: 1:  'questions': [
44: 1:    '1',
44: 1:    '2',
44: 1:    '3',
44: 1:    '4',
44: 1:    '5',
44: 1:    '6',
44: 1:    '7',
44: 1:    '8',
44: 1:    '9',
44: 1:    '10',
44: 1:    '11',
44: 1:    '12',
44: 1:    '13',
44: 1:    '14',
44: 1:    '15',
44: 1:    '16',
44: 1:    '17',
44: 1:    '21',
44: 1:    '33',
44: 1:    '35',
44: 1:    '39',
44: 1:    '49',
44: 1:    '55',
44: 1:    '65',
44: 1:    '77',
44: 1:    '91',
44: 1:    '105',
44: 1:    '165',
44: 1:    '195',
44: 1:    '231',
44: 1:    '273',
44: 1:    '385',
44: 1:    '455',
44: 1:    '715',
44: 1:    '1001',
44: 1:    '1155',
44: 1:    '1365',
44: 1:    '2145'
44: 1:  ]
44: 1:}
44: 1:Scores: 42
44: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz', 'FizzBuzzDuzz', 'FizzBuzzCazz', 'FizzMuzzDuzz', 'FizzMuzzCazz', 'BuzzMuzzDuzz', 'BuzzMuzzCazz', 'BuzzDuzzCazz', 'MuzzDuzzCazz', 'FizzBuzzMuzzDuzz', 'FizzBuzzMuzzCazz', 'FizzBuzzDuzzCazz']')
44: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
45: 1:BoardData {
45: 1:  'description': [
45: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
45: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
45: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
45: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
45: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
45: 1:    'Please write optimized code without any duplication.',
45: 1:    'For divider 11 - the word must be 'Duzz'.',
45: 1:    'For divider 13 - the word must be 'Cazz'.',
45: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
45: 1:  ],
45: 1:  'expectedAnswer': 'FizzMuzzDuzzCazz',
45: 1:  'history': [
45: 1:    {
45: 1:      'answer': '1',
45: 1:      'question': '1',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': '2',
45: 1:      'question': '2',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'Fizz',
45: 1:      'question': '3',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': '4',
45: 1:      'question': '4',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'Buzz',
45: 1:      'question': '5',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'Fizz',
45: 1:      'question': '6',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'Muzz',
45: 1:      'question': '7',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': '8',
45: 1:      'question': '8',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'Fizz',
45: 1:      'question': '9',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'Buzz',
45: 1:      'question': '10',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'Duzz',
45: 1:      'question': '11',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'Fizz',
45: 1:      'question': '12',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'Cazz',
45: 1:      'question': '13',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'Muzz',
45: 1:      'question': '14',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'FizzBuzz',
45: 1:      'question': '15',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': '16',
45: 1:      'question': '16',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': '17',
45: 1:      'question': '17',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'FizzMuzz',
45: 1:      'question': '21',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'FizzDuzz',
45: 1:      'question': '33',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'BuzzMuzz',
45: 1:      'question': '35',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'FizzCazz',
45: 1:      'question': '39',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'Muzz',
45: 1:      'question': '49',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'BuzzDuzz',
45: 1:      'question': '55',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'BuzzCazz',
45: 1:      'question': '65',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'MuzzDuzz',
45: 1:      'question': '77',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'MuzzCazz',
45: 1:      'question': '91',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'FizzBuzzMuzz',
45: 1:      'question': '105',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'FizzBuzzDuzz',
45: 1:      'question': '165',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'FizzBuzzCazz',
45: 1:      'question': '195',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'FizzMuzzDuzz',
45: 1:      'question': '231',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'FizzMuzzCazz',
45: 1:      'question': '273',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'BuzzMuzzDuzz',
45: 1:      'question': '385',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'BuzzMuzzCazz',
45: 1:      'question': '455',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'BuzzDuzzCazz',
45: 1:      'question': '715',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'MuzzDuzzCazz',
45: 1:      'question': '1001',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'FizzBuzzMuzzDuzz',
45: 1:      'question': '1155',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'FizzBuzzMuzzCazz',
45: 1:      'question': '1365',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'FizzBuzzDuzzCazz',
45: 1:      'question': '2145',
45: 1:      'valid': true
45: 1:    }
45: 1:  ],
45: 1:  'info': [
45: 1:    '✅f(1) = 1',
45: 1:    '✅f(2) = 2',
45: 1:    '✅f(3) = Fizz',
45: 1:    '✅f(4) = 4',
45: 1:    '✅f(5) = Buzz',
45: 1:    '✅f(6) = Fizz',
45: 1:    '✅f(7) = Muzz',
45: 1:    '✅f(8) = 8',
45: 1:    '✅f(9) = Fizz',
45: 1:    '✅f(10) = Buzz',
45: 1:    '✅f(11) = Duzz',
45: 1:    '✅f(12) = Fizz',
45: 1:    '✅f(13) = Cazz',
45: 1:    '✅f(14) = Muzz',
45: 1:    '✅f(15) = FizzBuzz',
45: 1:    '✅f(16) = 16',
45: 1:    '✅f(17) = 17',
45: 1:    '✅f(21) = FizzMuzz',
45: 1:    '✅f(33) = FizzDuzz',
45: 1:    '✅f(35) = BuzzMuzz',
45: 1:    '✅f(39) = FizzCazz',
45: 1:    '✅f(49) = Muzz',
45: 1:    '✅f(55) = BuzzDuzz',
45: 1:    '✅f(65) = BuzzCazz',
45: 1:    '✅f(77) = MuzzDuzz',
45: 1:    '✅f(91) = MuzzCazz',
45: 1:    '✅f(105) = FizzBuzzMuzz',
45: 1:    '✅f(165) = FizzBuzzDuzz',
45: 1:    '✅f(195) = FizzBuzzCazz',
45: 1:    '✅f(231) = FizzMuzzDuzz',
45: 1:    '✅f(273) = FizzMuzzCazz',
45: 1:    '✅f(385) = BuzzMuzzDuzz',
45: 1:    '✅f(455) = BuzzMuzzCazz',
45: 1:    '✅f(715) = BuzzDuzzCazz',
45: 1:    '✅f(1001) = MuzzDuzzCazz',
45: 1:    '✅f(1155) = FizzBuzzMuzzDuzz',
45: 1:    '✅f(1365) = FizzBuzzMuzzCazz',
45: 1:    '✅f(2145) = FizzBuzzDuzzCazz',
45: 1:    '❌f(3003) = ??? != FizzMuzzDuzzCazz'
45: 1:  ],
45: 1:  'level': 1,
45: 1:  'nextQuestion': '3003',
45: 1:  'questions': [
45: 1:    '1',
45: 1:    '2',
45: 1:    '3',
45: 1:    '4',
45: 1:    '5',
45: 1:    '6',
45: 1:    '7',
45: 1:    '8',
45: 1:    '9',
45: 1:    '10',
45: 1:    '11',
45: 1:    '12',
45: 1:    '13',
45: 1:    '14',
45: 1:    '15',
45: 1:    '16',
45: 1:    '17',
45: 1:    '21',
45: 1:    '33',
45: 1:    '35',
45: 1:    '39',
45: 1:    '49',
45: 1:    '55',
45: 1:    '65',
45: 1:    '77',
45: 1:    '91',
45: 1:    '105',
45: 1:    '165',
45: 1:    '195',
45: 1:    '231',
45: 1:    '273',
45: 1:    '385',
45: 1:    '455',
45: 1:    '715',
45: 1:    '1001',
45: 1:    '1155',
45: 1:    '1365',
45: 1:    '2145',
45: 1:    '3003'
45: 1:  ]
45: 1:}
45: 1:Scores: 43
45: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz', 'FizzBuzzDuzz', 'FizzBuzzCazz', 'FizzMuzzDuzz', 'FizzMuzzCazz', 'BuzzMuzzDuzz', 'BuzzMuzzCazz', 'BuzzDuzzCazz', 'MuzzDuzzCazz', 'FizzBuzzMuzzDuzz', 'FizzBuzzMuzzCazz', 'FizzBuzzDuzzCazz', 'FizzMuzzDuzzCazz']')
45: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
46: 1:BoardData {
46: 1:  'description': [
46: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
46: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
46: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
46: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
46: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
46: 1:    'Please write optimized code without any duplication.',
46: 1:    'For divider 11 - the word must be 'Duzz'.',
46: 1:    'For divider 13 - the word must be 'Cazz'.',
46: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
46: 1:  ],
46: 1:  'expectedAnswer': 'BuzzMuzzDuzzCazz',
46: 1:  'history': [
46: 1:    {
46: 1:      'answer': '1',
46: 1:      'question': '1',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': '2',
46: 1:      'question': '2',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'Fizz',
46: 1:      'question': '3',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': '4',
46: 1:      'question': '4',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'Buzz',
46: 1:      'question': '5',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'Fizz',
46: 1:      'question': '6',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'Muzz',
46: 1:      'question': '7',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': '8',
46: 1:      'question': '8',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'Fizz',
46: 1:      'question': '9',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'Buzz',
46: 1:      'question': '10',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'Duzz',
46: 1:      'question': '11',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'Fizz',
46: 1:      'question': '12',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'Cazz',
46: 1:      'question': '13',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'Muzz',
46: 1:      'question': '14',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'FizzBuzz',
46: 1:      'question': '15',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': '16',
46: 1:      'question': '16',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': '17',
46: 1:      'question': '17',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'FizzMuzz',
46: 1:      'question': '21',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'FizzDuzz',
46: 1:      'question': '33',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'BuzzMuzz',
46: 1:      'question': '35',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'FizzCazz',
46: 1:      'question': '39',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'Muzz',
46: 1:      'question': '49',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'BuzzDuzz',
46: 1:      'question': '55',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'BuzzCazz',
46: 1:      'question': '65',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'MuzzDuzz',
46: 1:      'question': '77',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'MuzzCazz',
46: 1:      'question': '91',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'FizzBuzzMuzz',
46: 1:      'question': '105',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'FizzBuzzDuzz',
46: 1:      'question': '165',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'FizzBuzzCazz',
46: 1:      'question': '195',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'FizzMuzzDuzz',
46: 1:      'question': '231',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'FizzMuzzCazz',
46: 1:      'question': '273',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'BuzzMuzzDuzz',
46: 1:      'question': '385',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'BuzzMuzzCazz',
46: 1:      'question': '455',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'BuzzDuzzCazz',
46: 1:      'question': '715',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'MuzzDuzzCazz',
46: 1:      'question': '1001',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'FizzBuzzMuzzDuzz',
46: 1:      'question': '1155',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'FizzBuzzMuzzCazz',
46: 1:      'question': '1365',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'FizzBuzzDuzzCazz',
46: 1:      'question': '2145',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'FizzMuzzDuzzCazz',
46: 1:      'question': '3003',
46: 1:      'valid': true
46: 1:    }
46: 1:  ],
46: 1:  'info': [
46: 1:    '✅f(1) = 1',
46: 1:    '✅f(2) = 2',
46: 1:    '✅f(3) = Fizz',
46: 1:    '✅f(4) = 4',
46: 1:    '✅f(5) = Buzz',
46: 1:    '✅f(6) = Fizz',
46: 1:    '✅f(7) = Muzz',
46: 1:    '✅f(8) = 8',
46: 1:    '✅f(9) = Fizz',
46: 1:    '✅f(10) = Buzz',
46: 1:    '✅f(11) = Duzz',
46: 1:    '✅f(12) = Fizz',
46: 1:    '✅f(13) = Cazz',
46: 1:    '✅f(14) = Muzz',
46: 1:    '✅f(15) = FizzBuzz',
46: 1:    '✅f(16) = 16',
46: 1:    '✅f(17) = 17',
46: 1:    '✅f(21) = FizzMuzz',
46: 1:    '✅f(33) = FizzDuzz',
46: 1:    '✅f(35) = BuzzMuzz',
46: 1:    '✅f(39) = FizzCazz',
46: 1:    '✅f(49) = Muzz',
46: 1:    '✅f(55) = BuzzDuzz',
46: 1:    '✅f(65) = BuzzCazz',
46: 1:    '✅f(77) = MuzzDuzz',
46: 1:    '✅f(91) = MuzzCazz',
46: 1:    '✅f(105) = FizzBuzzMuzz',
46: 1:    '✅f(165) = FizzBuzzDuzz',
46: 1:    '✅f(195) = FizzBuzzCazz',
46: 1:    '✅f(231) = FizzMuzzDuzz',
46: 1:    '✅f(273) = FizzMuzzCazz',
46: 1:    '✅f(385) = BuzzMuzzDuzz',
46: 1:    '✅f(455) = BuzzMuzzCazz',
46: 1:    '✅f(715) = BuzzDuzzCazz',
46: 1:    '✅f(1001) = MuzzDuzzCazz',
46: 1:    '✅f(1155) = FizzBuzzMuzzDuzz',
46: 1:    '✅f(1365) = FizzBuzzMuzzCazz',
46: 1:    '✅f(2145) = FizzBuzzDuzzCazz',
46: 1:    '✅f(3003) = FizzMuzzDuzzCazz',
46: 1:    '❌f(5005) = ??? != BuzzMuzzDuzzCazz'
46: 1:  ],
46: 1:  'level': 1,
46: 1:  'nextQuestion': '5005',
46: 1:  'questions': [
46: 1:    '1',
46: 1:    '2',
46: 1:    '3',
46: 1:    '4',
46: 1:    '5',
46: 1:    '6',
46: 1:    '7',
46: 1:    '8',
46: 1:    '9',
46: 1:    '10',
46: 1:    '11',
46: 1:    '12',
46: 1:    '13',
46: 1:    '14',
46: 1:    '15',
46: 1:    '16',
46: 1:    '17',
46: 1:    '21',
46: 1:    '33',
46: 1:    '35',
46: 1:    '39',
46: 1:    '49',
46: 1:    '55',
46: 1:    '65',
46: 1:    '77',
46: 1:    '91',
46: 1:    '105',
46: 1:    '165',
46: 1:    '195',
46: 1:    '231',
46: 1:    '273',
46: 1:    '385',
46: 1:    '455',
46: 1:    '715',
46: 1:    '1001',
46: 1:    '1155',
46: 1:    '1365',
46: 1:    '2145',
46: 1:    '3003',
46: 1:    '5005'
46: 1:  ]
46: 1:}
46: 1:Scores: 44
46: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz', 'FizzBuzzDuzz', 'FizzBuzzCazz', 'FizzMuzzDuzz', 'FizzMuzzCazz', 'BuzzMuzzDuzz', 'BuzzMuzzCazz', 'BuzzDuzzCazz', 'MuzzDuzzCazz', 'FizzBuzzMuzzDuzz', 'FizzBuzzMuzzCazz', 'FizzBuzzDuzzCazz', 'FizzMuzzDuzzCazz', 'BuzzMuzzDuzzCazz']')
46: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
47: 1:BoardData {
47: 1:  'description': [
47: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
47: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
47: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
47: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
47: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
47: 1:    'Please write optimized code without any duplication.',
47: 1:    'For divider 11 - the word must be 'Duzz'.',
47: 1:    'For divider 13 - the word must be 'Cazz'.',
47: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
47: 1:  ],
47: 1:  'expectedAnswer': 'FizzBuzzMuzzDuzzCazz',
47: 1:  'history': [
47: 1:    {
47: 1:      'answer': '1',
47: 1:      'question': '1',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': '2',
47: 1:      'question': '2',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'Fizz',
47: 1:      'question': '3',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': '4',
47: 1:      'question': '4',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'Buzz',
47: 1:      'question': '5',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'Fizz',
47: 1:      'question': '6',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'Muzz',
47: 1:      'question': '7',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': '8',
47: 1:      'question': '8',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'Fizz',
47: 1:      'question': '9',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'Buzz',
47: 1:      'question': '10',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'Duzz',
47: 1:      'question': '11',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'Fizz',
47: 1:      'question': '12',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'Cazz',
47: 1:      'question': '13',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'Muzz',
47: 1:      'question': '14',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'FizzBuzz',
47: 1:      'question': '15',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': '16',
47: 1:      'question': '16',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': '17',
47: 1:      'question': '17',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'FizzMuzz',
47: 1:      'question': '21',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'FizzDuzz',
47: 1:      'question': '33',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'BuzzMuzz',
47: 1:      'question': '35',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'FizzCazz',
47: 1:      'question': '39',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'Muzz',
47: 1:      'question': '49',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'BuzzDuzz',
47: 1:      'question': '55',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'BuzzCazz',
47: 1:      'question': '65',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'MuzzDuzz',
47: 1:      'question': '77',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'MuzzCazz',
47: 1:      'question': '91',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'FizzBuzzMuzz',
47: 1:      'question': '105',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'FizzBuzzDuzz',
47: 1:      'question': '165',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'FizzBuzzCazz',
47: 1:      'question': '195',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'FizzMuzzDuzz',
47: 1:      'question': '231',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'FizzMuzzCazz',
47: 1:      'question': '273',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'BuzzMuzzDuzz',
47: 1:      'question': '385',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'BuzzMuzzCazz',
47: 1:      'question': '455',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'BuzzDuzzCazz',
47: 1:      'question': '715',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'MuzzDuzzCazz',
47: 1:      'question': '1001',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'FizzBuzzMuzzDuzz',
47: 1:      'question': '1155',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'FizzBuzzMuzzCazz',
47: 1:      'question': '1365',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'FizzBuzzDuzzCazz',
47: 1:      'question': '2145',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'FizzMuzzDuzzCazz',
47: 1:      'question': '3003',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'BuzzMuzzDuzzCazz',
47: 1:      'question': '5005',
47: 1:      'valid': true
47: 1:    }
47: 1:  ],
47: 1:  'info': [
47: 1:    '✅f(1) = 1',
47: 1:    '✅f(2) = 2',
47: 1:    '✅f(3) = Fizz',
47: 1:    '✅f(4) = 4',
47: 1:    '✅f(5) = Buzz',
47: 1:    '✅f(6) = Fizz',
47: 1:    '✅f(7) = Muzz',
47: 1:    '✅f(8) = 8',
47: 1:    '✅f(9) = Fizz',
47: 1:    '✅f(10) = Buzz',
47: 1:    '✅f(11) = Duzz',
47: 1:    '✅f(12) = Fizz',
47: 1:    '✅f(13) = Cazz',
47: 1:    '✅f(14) = Muzz',
47: 1:    '✅f(15) = FizzBuzz',
47: 1:    '✅f(16) = 16',
47: 1:    '✅f(17) = 17',
47: 1:    '✅f(21) = FizzMuzz',
47: 1:    '✅f(33) = FizzDuzz',
47: 1:    '✅f(35) = BuzzMuzz',
47: 1:    '✅f(39) = FizzCazz',
47: 1:    '✅f(49) = Muzz',
47: 1:    '✅f(55) = BuzzDuzz',
47: 1:    '✅f(65) = BuzzCazz',
47: 1:    '✅f(77) = MuzzDuzz',
47: 1:    '✅f(91) = MuzzCazz',
47: 1:    '✅f(105) = FizzBuzzMuzz',
47: 1:    '✅f(165) = FizzBuzzDuzz',
47: 1:    '✅f(195) = FizzBuzzCazz',
47: 1:    '✅f(231) = FizzMuzzDuzz',
47: 1:    '✅f(273) = FizzMuzzCazz',
47: 1:    '✅f(385) = BuzzMuzzDuzz',
47: 1:    '✅f(455) = BuzzMuzzCazz',
47: 1:    '✅f(715) = BuzzDuzzCazz',
47: 1:    '✅f(1001) = MuzzDuzzCazz',
47: 1:    '✅f(1155) = FizzBuzzMuzzDuzz',
47: 1:    '✅f(1365) = FizzBuzzMuzzCazz',
47: 1:    '✅f(2145) = FizzBuzzDuzzCazz',
47: 1:    '✅f(3003) = FizzMuzzDuzzCazz',
47: 1:    '✅f(5005) = BuzzMuzzDuzzCazz',
47: 1:    '❌f(15015) = ??? != FizzBuzzMuzzDuzzCazz'
47: 1:  ],
47: 1:  'level': 1,
47: 1:  'nextQuestion': '15015',
47: 1:  'questions': [
47: 1:    '1',
47: 1:    '2',
47: 1:    '3',
47: 1:    '4',
47: 1:    '5',
47: 1:    '6',
47: 1:    '7',
47: 1:    '8',
47: 1:    '9',
47: 1:    '10',
47: 1:    '11',
47: 1:    '12',
47: 1:    '13',
47: 1:    '14',
47: 1:    '15',
47: 1:    '16',
47: 1:    '17',
47: 1:    '21',
47: 1:    '33',
47: 1:    '35',
47: 1:    '39',
47: 1:    '49',
47: 1:    '55',
47: 1:    '65',
47: 1:    '77',
47: 1:    '91',
47: 1:    '105',
47: 1:    '165',
47: 1:    '195',
47: 1:    '231',
47: 1:    '273',
47: 1:    '385',
47: 1:    '455',
47: 1:    '715',
47: 1:    '1001',
47: 1:    '1155',
47: 1:    '1365',
47: 1:    '2145',
47: 1:    '3003',
47: 1:    '5005',
47: 1:    '15015'
47: 1:  ]
47: 1:}
47: 1:Scores: 45
47: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz', 'FizzBuzzDuzz', 'FizzBuzzCazz', 'FizzMuzzDuzz', 'FizzMuzzCazz', 'BuzzMuzzDuzz', 'BuzzMuzzCazz', 'BuzzDuzzCazz', 'MuzzDuzzCazz', 'FizzBuzzMuzzDuzz', 'FizzBuzzMuzzCazz', 'FizzBuzzDuzzCazz', 'FizzMuzzDuzzCazz', 'BuzzMuzzDuzzCazz', 'FizzBuzzMuzzDuzzCazz']')
47: 1:Fire Event: PassTest{complexity=5, testCount=41}
47: 1:Fire Event: NextAlgorithm{complexity=5, time=0}
------------------------------------------
48: 1:BoardData {
48: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
48: 1:  'history': [
48: 1:    {
48: 1:      'answer': '1',
48: 1:      'question': '1',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': '2',
48: 1:      'question': '2',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'Fizz',
48: 1:      'question': '3',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': '4',
48: 1:      'question': '4',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'Buzz',
48: 1:      'question': '5',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'Fizz',
48: 1:      'question': '6',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'Muzz',
48: 1:      'question': '7',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': '8',
48: 1:      'question': '8',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'Fizz',
48: 1:      'question': '9',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'Buzz',
48: 1:      'question': '10',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'Duzz',
48: 1:      'question': '11',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'Fizz',
48: 1:      'question': '12',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'Cazz',
48: 1:      'question': '13',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'Muzz',
48: 1:      'question': '14',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'FizzBuzz',
48: 1:      'question': '15',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': '16',
48: 1:      'question': '16',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': '17',
48: 1:      'question': '17',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'FizzMuzz',
48: 1:      'question': '21',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'FizzDuzz',
48: 1:      'question': '33',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'BuzzMuzz',
48: 1:      'question': '35',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'FizzCazz',
48: 1:      'question': '39',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'Muzz',
48: 1:      'question': '49',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'BuzzDuzz',
48: 1:      'question': '55',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'BuzzCazz',
48: 1:      'question': '65',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'MuzzDuzz',
48: 1:      'question': '77',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'MuzzCazz',
48: 1:      'question': '91',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'FizzBuzzMuzz',
48: 1:      'question': '105',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'FizzBuzzDuzz',
48: 1:      'question': '165',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'FizzBuzzCazz',
48: 1:      'question': '195',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'FizzMuzzDuzz',
48: 1:      'question': '231',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'FizzMuzzCazz',
48: 1:      'question': '273',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'BuzzMuzzDuzz',
48: 1:      'question': '385',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'BuzzMuzzCazz',
48: 1:      'question': '455',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'BuzzDuzzCazz',
48: 1:      'question': '715',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'MuzzDuzzCazz',
48: 1:      'question': '1001',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'FizzBuzzMuzzDuzz',
48: 1:      'question': '1155',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'FizzBuzzMuzzCazz',
48: 1:      'question': '1365',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'FizzBuzzDuzzCazz',
48: 1:      'question': '2145',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'FizzMuzzDuzzCazz',
48: 1:      'question': '3003',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'BuzzMuzzDuzzCazz',
48: 1:      'question': '5005',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'FizzBuzzMuzzDuzzCazz',
48: 1:      'question': '15015',
48: 1:      'valid': true
48: 1:    }
48: 1:  ],
48: 1:  'info': [
48: 1:    '✅f(1) = 1',
48: 1:    '✅f(2) = 2',
48: 1:    '✅f(3) = Fizz',
48: 1:    '✅f(4) = 4',
48: 1:    '✅f(5) = Buzz',
48: 1:    '✅f(6) = Fizz',
48: 1:    '✅f(7) = Muzz',
48: 1:    '✅f(8) = 8',
48: 1:    '✅f(9) = Fizz',
48: 1:    '✅f(10) = Buzz',
48: 1:    '✅f(11) = Duzz',
48: 1:    '✅f(12) = Fizz',
48: 1:    '✅f(13) = Cazz',
48: 1:    '✅f(14) = Muzz',
48: 1:    '✅f(15) = FizzBuzz',
48: 1:    '✅f(16) = 16',
48: 1:    '✅f(17) = 17',
48: 1:    '✅f(21) = FizzMuzz',
48: 1:    '✅f(33) = FizzDuzz',
48: 1:    '✅f(35) = BuzzMuzz',
48: 1:    '✅f(39) = FizzCazz',
48: 1:    '✅f(49) = Muzz',
48: 1:    '✅f(55) = BuzzDuzz',
48: 1:    '✅f(65) = BuzzCazz',
48: 1:    '✅f(77) = MuzzDuzz',
48: 1:    '✅f(91) = MuzzCazz',
48: 1:    '✅f(105) = FizzBuzzMuzz',
48: 1:    '✅f(165) = FizzBuzzDuzz',
48: 1:    '✅f(195) = FizzBuzzCazz',
48: 1:    '✅f(231) = FizzMuzzDuzz',
48: 1:    '✅f(273) = FizzMuzzCazz',
48: 1:    '✅f(385) = BuzzMuzzDuzz',
48: 1:    '✅f(455) = BuzzMuzzCazz',
48: 1:    '✅f(715) = BuzzDuzzCazz',
48: 1:    '✅f(1001) = MuzzDuzzCazz',
48: 1:    '✅f(1155) = FizzBuzzMuzzDuzz',
48: 1:    '✅f(1365) = FizzBuzzMuzzCazz',
48: 1:    '✅f(2145) = FizzBuzzDuzzCazz',
48: 1:    '✅f(3003) = FizzMuzzDuzzCazz',
48: 1:    '✅f(5005) = BuzzMuzzDuzzCazz',
48: 1:    '✅f(15015) = FizzBuzzMuzzDuzzCazz'
48: 1:  ],
48: 1:  'level': 1,
48: 1:  'questions': []
48: 1:}
48: 1:Scores: 720
48: 1:Answer: message('StartNextLevel')
48: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
49: 1:BoardData {
49: 1:  'description': [
49: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
49: 1:    'Write a javascript method.',
49: 1:    'You are given a string of space separated numbers.',
49: 1:    'All numbers are valid Int32, no need to validate them.',
49: 1:    'Give your answer as a string matching 'odd' or 'even'.',
49: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
49: 1:    'Don't use comments for clarification.',
49: 1:    'Make the code as readable and concise as possible.'
49: 1:  ],
49: 1:  'expectedAnswer': 'even',
49: 1:  'history': [],
49: 1:  'info': ['❌f(0) = ??? != even'],
49: 1:  'level': 2,
49: 1:  'nextQuestion': '0',
49: 1:  'questions': ['0']
49: 1:}
49: 1:Scores: 720
49: 1:Answer: message('['even']')
49: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
50: 1:BoardData {
50: 1:  'description': [
50: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
50: 1:    'Write a javascript method.',
50: 1:    'You are given a string of space separated numbers.',
50: 1:    'All numbers are valid Int32, no need to validate them.',
50: 1:    'Give your answer as a string matching 'odd' or 'even'.',
50: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
50: 1:    'Don't use comments for clarification.',
50: 1:    'Make the code as readable and concise as possible.'
50: 1:  ],
50: 1:  'expectedAnswer': 'odd',
50: 1:  'history': [{
50: 1:    'answer': 'even',
50: 1:    'question': '0',
50: 1:    'valid': true
50: 1:  }],
50: 1:  'info': [
50: 1:    '✅f(0) = even',
50: 1:    '❌f(0 1 4) = ??? != odd'
50: 1:  ],
50: 1:  'level': 2,
50: 1:  'nextQuestion': '0 1 4',
50: 1:  'questions': [
50: 1:    '0',
50: 1:    '0 1 4'
50: 1:  ]
50: 1:}
50: 1:Scores: 722
50: 1:Answer: message('['even', 'odd']')
50: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
51: 1:BoardData {
51: 1:  'description': [
51: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
51: 1:    'Write a javascript method.',
51: 1:    'You are given a string of space separated numbers.',
51: 1:    'All numbers are valid Int32, no need to validate them.',
51: 1:    'Give your answer as a string matching 'odd' or 'even'.',
51: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
51: 1:    'Don't use comments for clarification.',
51: 1:    'Make the code as readable and concise as possible.'
51: 1:  ],
51: 1:  'expectedAnswer': 'even',
51: 1:  'history': [
51: 1:    {
51: 1:      'answer': 'even',
51: 1:      'question': '0',
51: 1:      'valid': true
51: 1:    },
51: 1:    {
51: 1:      'answer': 'odd',
51: 1:      'question': '0 1 4',
51: 1:      'valid': true
51: 1:    }
51: 1:  ],
51: 1:  'info': [
51: 1:    '✅f(0) = even',
51: 1:    '✅f(0 1 4) = odd',
51: 1:    '❌f(0 -1 5) = ??? != even'
51: 1:  ],
51: 1:  'level': 2,
51: 1:  'nextQuestion': '0 -1 5',
51: 1:  'questions': [
51: 1:    '0',
51: 1:    '0 1 4',
51: 1:    '0 -1 5'
51: 1:  ]
51: 1:}
51: 1:Scores: 724
51: 1:Answer: message('['even', 'odd', 'even']')
51: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
52: 1:BoardData {
52: 1:  'description': [
52: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
52: 1:    'Write a javascript method.',
52: 1:    'You are given a string of space separated numbers.',
52: 1:    'All numbers are valid Int32, no need to validate them.',
52: 1:    'Give your answer as a string matching 'odd' or 'even'.',
52: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
52: 1:    'Don't use comments for clarification.',
52: 1:    'Make the code as readable and concise as possible.'
52: 1:  ],
52: 1:  'expectedAnswer': 'odd',
52: 1:  'history': [
52: 1:    {
52: 1:      'answer': 'even',
52: 1:      'question': '0',
52: 1:      'valid': true
52: 1:    },
52: 1:    {
52: 1:      'answer': 'odd',
52: 1:      'question': '0 1 4',
52: 1:      'valid': true
52: 1:    },
52: 1:    {
52: 1:      'answer': 'even',
52: 1:      'question': '0 -1 5',
52: 1:      'valid': true
52: 1:    }
52: 1:  ],
52: 1:  'info': [
52: 1:    '✅f(0) = even',
52: 1:    '✅f(0 1 4) = odd',
52: 1:    '✅f(0 -1 5) = even',
52: 1:    '❌f(1 2 3 4 5) = ??? != odd'
52: 1:  ],
52: 1:  'level': 2,
52: 1:  'nextQuestion': '1 2 3 4 5',
52: 1:  'questions': [
52: 1:    '0',
52: 1:    '0 1 4',
52: 1:    '0 -1 5',
52: 1:    '1 2 3 4 5'
52: 1:  ]
52: 1:}
52: 1:Scores: 726
52: 1:Answer: message('['even', 'odd', 'even', 'odd']')
52: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
53: 1:BoardData {
53: 1:  'description': [
53: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
53: 1:    'Write a javascript method.',
53: 1:    'You are given a string of space separated numbers.',
53: 1:    'All numbers are valid Int32, no need to validate them.',
53: 1:    'Give your answer as a string matching 'odd' or 'even'.',
53: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
53: 1:    'Don't use comments for clarification.',
53: 1:    'Make the code as readable and concise as possible.'
53: 1:  ],
53: 1:  'expectedAnswer': 'odd',
53: 1:  'history': [
53: 1:    {
53: 1:      'answer': 'even',
53: 1:      'question': '0',
53: 1:      'valid': true
53: 1:    },
53: 1:    {
53: 1:      'answer': 'odd',
53: 1:      'question': '0 1 4',
53: 1:      'valid': true
53: 1:    },
53: 1:    {
53: 1:      'answer': 'even',
53: 1:      'question': '0 -1 5',
53: 1:      'valid': true
53: 1:    },
53: 1:    {
53: 1:      'answer': 'odd',
53: 1:      'question': '1 2 3 4 5',
53: 1:      'valid': true
53: 1:    }
53: 1:  ],
53: 1:  'info': [
53: 1:    '✅f(0) = even',
53: 1:    '✅f(0 1 4) = odd',
53: 1:    '✅f(0 -1 5) = even',
53: 1:    '✅f(1 2 3 4 5) = odd',
53: 1:    '❌f(1 2 -3 4 5) = ??? != odd'
53: 1:  ],
53: 1:  'level': 2,
53: 1:  'nextQuestion': '1 2 -3 4 5',
53: 1:  'questions': [
53: 1:    '0',
53: 1:    '0 1 4',
53: 1:    '0 -1 5',
53: 1:    '1 2 3 4 5',
53: 1:    '1 2 -3 4 5'
53: 1:  ]
53: 1:}
53: 1:Scores: 728
53: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd']')
53: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
54: 1:BoardData {
54: 1:  'description': [
54: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
54: 1:    'Write a javascript method.',
54: 1:    'You are given a string of space separated numbers.',
54: 1:    'All numbers are valid Int32, no need to validate them.',
54: 1:    'Give your answer as a string matching 'odd' or 'even'.',
54: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
54: 1:    'Don't use comments for clarification.',
54: 1:    'Make the code as readable and concise as possible.'
54: 1:  ],
54: 1:  'expectedAnswer': 'even',
54: 1:  'history': [
54: 1:    {
54: 1:      'answer': 'even',
54: 1:      'question': '0',
54: 1:      'valid': true
54: 1:    },
54: 1:    {
54: 1:      'answer': 'odd',
54: 1:      'question': '0 1 4',
54: 1:      'valid': true
54: 1:    },
54: 1:    {
54: 1:      'answer': 'even',
54: 1:      'question': '0 -1 5',
54: 1:      'valid': true
54: 1:    },
54: 1:    {
54: 1:      'answer': 'odd',
54: 1:      'question': '1 2 3 4 5',
54: 1:      'valid': true
54: 1:    },
54: 1:    {
54: 1:      'answer': 'odd',
54: 1:      'question': '1 2 -3 4 5',
54: 1:      'valid': true
54: 1:    }
54: 1:  ],
54: 1:  'info': [
54: 1:    '✅f(0) = even',
54: 1:    '✅f(0 1 4) = odd',
54: 1:    '✅f(0 -1 5) = even',
54: 1:    '✅f(1 2 3 4 5) = odd',
54: 1:    '✅f(1 2 -3 4 5) = odd',
54: 1:    '❌f(1 9 3 4 -5) = ??? != even'
54: 1:  ],
54: 1:  'level': 2,
54: 1:  'nextQuestion': '1 9 3 4 -5',
54: 1:  'questions': [
54: 1:    '0',
54: 1:    '0 1 4',
54: 1:    '0 -1 5',
54: 1:    '1 2 3 4 5',
54: 1:    '1 2 -3 4 5',
54: 1:    '1 9 3 4 -5'
54: 1:  ]
54: 1:}
54: 1:Scores: 730
54: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even']')
54: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
55: 1:BoardData {
55: 1:  'description': [
55: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
55: 1:    'Write a javascript method.',
55: 1:    'You are given a string of space separated numbers.',
55: 1:    'All numbers are valid Int32, no need to validate them.',
55: 1:    'Give your answer as a string matching 'odd' or 'even'.',
55: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
55: 1:    'Don't use comments for clarification.',
55: 1:    'Make the code as readable and concise as possible.'
55: 1:  ],
55: 1:  'expectedAnswer': 'odd',
55: 1:  'history': [
55: 1:    {
55: 1:      'answer': 'even',
55: 1:      'question': '0',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': 'odd',
55: 1:      'question': '0 1 4',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': 'even',
55: 1:      'question': '0 -1 5',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': 'odd',
55: 1:      'question': '1 2 3 4 5',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': 'odd',
55: 1:      'question': '1 2 -3 4 5',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': 'even',
55: 1:      'question': '1 9 3 4 -5',
55: 1:      'valid': true
55: 1:    }
55: 1:  ],
55: 1:  'info': [
55: 1:    '✅f(0) = even',
55: 1:    '✅f(0 1 4) = odd',
55: 1:    '✅f(0 -1 5) = even',
55: 1:    '✅f(1 2 3 4 5) = odd',
55: 1:    '✅f(1 2 -3 4 5) = odd',
55: 1:    '✅f(1 9 3 4 -5) = even',
55: 1:    '❌f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = ??? != odd'
55: 1:  ],
55: 1:  'level': 2,
55: 1:  'nextQuestion': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
55: 1:  'questions': [
55: 1:    '0',
55: 1:    '0 1 4',
55: 1:    '0 -1 5',
55: 1:    '1 2 3 4 5',
55: 1:    '1 2 -3 4 5',
55: 1:    '1 9 3 4 -5',
55: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4'
55: 1:  ]
55: 1:}
55: 1:Scores: 732
55: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd']')
55: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
56: 1:BoardData {
56: 1:  'description': [
56: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
56: 1:    'Write a javascript method.',
56: 1:    'You are given a string of space separated numbers.',
56: 1:    'All numbers are valid Int32, no need to validate them.',
56: 1:    'Give your answer as a string matching 'odd' or 'even'.',
56: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
56: 1:    'Don't use comments for clarification.',
56: 1:    'Make the code as readable and concise as possible.'
56: 1:  ],
56: 1:  'expectedAnswer': 'even',
56: 1:  'history': [
56: 1:    {
56: 1:      'answer': 'even',
56: 1:      'question': '0',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': 'odd',
56: 1:      'question': '0 1 4',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': 'even',
56: 1:      'question': '0 -1 5',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': 'odd',
56: 1:      'question': '1 2 3 4 5',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': 'odd',
56: 1:      'question': '1 2 -3 4 5',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': 'even',
56: 1:      'question': '1 9 3 4 -5',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': 'odd',
56: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
56: 1:      'valid': true
56: 1:    }
56: 1:  ],
56: 1:  'info': [
56: 1:    '✅f(0) = even',
56: 1:    '✅f(0 1 4) = odd',
56: 1:    '✅f(0 -1 5) = even',
56: 1:    '✅f(1 2 3 4 5) = odd',
56: 1:    '✅f(1 2 -3 4 5) = odd',
56: 1:    '✅f(1 9 3 4 -5) = even',
56: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
56: 1:    '❌f(1 2 3) = ??? != even'
56: 1:  ],
56: 1:  'level': 2,
56: 1:  'nextQuestion': '1 2 3',
56: 1:  'questions': [
56: 1:    '0',
56: 1:    '0 1 4',
56: 1:    '0 -1 5',
56: 1:    '1 2 3 4 5',
56: 1:    '1 2 -3 4 5',
56: 1:    '1 9 3 4 -5',
56: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
56: 1:    '1 2 3'
56: 1:  ]
56: 1:}
56: 1:Scores: 734
56: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even']')
56: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
57: 1:BoardData {
57: 1:  'description': [
57: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
57: 1:    'Write a javascript method.',
57: 1:    'You are given a string of space separated numbers.',
57: 1:    'All numbers are valid Int32, no need to validate them.',
57: 1:    'Give your answer as a string matching 'odd' or 'even'.',
57: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
57: 1:    'Don't use comments for clarification.',
57: 1:    'Make the code as readable and concise as possible.'
57: 1:  ],
57: 1:  'expectedAnswer': 'odd',
57: 1:  'history': [
57: 1:    {
57: 1:      'answer': 'even',
57: 1:      'question': '0',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': 'odd',
57: 1:      'question': '0 1 4',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': 'even',
57: 1:      'question': '0 -1 5',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': 'odd',
57: 1:      'question': '1 2 3 4 5',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': 'odd',
57: 1:      'question': '1 2 -3 4 5',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': 'even',
57: 1:      'question': '1 9 3 4 -5',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': 'odd',
57: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': 'even',
57: 1:      'question': '1 2 3',
57: 1:      'valid': true
57: 1:    }
57: 1:  ],
57: 1:  'info': [
57: 1:    '✅f(0) = even',
57: 1:    '✅f(0 1 4) = odd',
57: 1:    '✅f(0 -1 5) = even',
57: 1:    '✅f(1 2 3 4 5) = odd',
57: 1:    '✅f(1 2 -3 4 5) = odd',
57: 1:    '✅f(1 9 3 4 -5) = even',
57: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
57: 1:    '✅f(1 2 3) = even',
57: 1:    '❌f(1) = ??? != odd'
57: 1:  ],
57: 1:  'level': 2,
57: 1:  'nextQuestion': '1',
57: 1:  'questions': [
57: 1:    '0',
57: 1:    '0 1 4',
57: 1:    '0 -1 5',
57: 1:    '1 2 3 4 5',
57: 1:    '1 2 -3 4 5',
57: 1:    '1 9 3 4 -5',
57: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
57: 1:    '1 2 3',
57: 1:    '1'
57: 1:  ]
57: 1:}
57: 1:Scores: 736
57: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd']')
57: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
58: 1:BoardData {
58: 1:  'description': [
58: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
58: 1:    'Write a javascript method.',
58: 1:    'You are given a string of space separated numbers.',
58: 1:    'All numbers are valid Int32, no need to validate them.',
58: 1:    'Give your answer as a string matching 'odd' or 'even'.',
58: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
58: 1:    'Don't use comments for clarification.',
58: 1:    'Make the code as readable and concise as possible.'
58: 1:  ],
58: 1:  'expectedAnswer': 'odd',
58: 1:  'history': [
58: 1:    {
58: 1:      'answer': 'even',
58: 1:      'question': '0',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': 'odd',
58: 1:      'question': '0 1 4',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': 'even',
58: 1:      'question': '0 -1 5',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': 'odd',
58: 1:      'question': '1 2 3 4 5',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': 'odd',
58: 1:      'question': '1 2 -3 4 5',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': 'even',
58: 1:      'question': '1 9 3 4 -5',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': 'odd',
58: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': 'even',
58: 1:      'question': '1 2 3',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': 'odd',
58: 1:      'question': '1',
58: 1:      'valid': true
58: 1:    }
58: 1:  ],
58: 1:  'info': [
58: 1:    '✅f(0) = even',
58: 1:    '✅f(0 1 4) = odd',
58: 1:    '✅f(0 -1 5) = even',
58: 1:    '✅f(1 2 3 4 5) = odd',
58: 1:    '✅f(1 2 -3 4 5) = odd',
58: 1:    '✅f(1 9 3 4 -5) = even',
58: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
58: 1:    '✅f(1 2 3) = even',
58: 1:    '✅f(1) = odd',
58: 1:    '❌f(-1) = ??? != odd'
58: 1:  ],
58: 1:  'level': 2,
58: 1:  'nextQuestion': '-1',
58: 1:  'questions': [
58: 1:    '0',
58: 1:    '0 1 4',
58: 1:    '0 -1 5',
58: 1:    '1 2 3 4 5',
58: 1:    '1 2 -3 4 5',
58: 1:    '1 9 3 4 -5',
58: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
58: 1:    '1 2 3',
58: 1:    '1',
58: 1:    '-1'
58: 1:  ]
58: 1:}
58: 1:Scores: 738
58: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd']')
58: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
59: 1:BoardData {
59: 1:  'description': [
59: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
59: 1:    'Write a javascript method.',
59: 1:    'You are given a string of space separated numbers.',
59: 1:    'All numbers are valid Int32, no need to validate them.',
59: 1:    'Give your answer as a string matching 'odd' or 'even'.',
59: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
59: 1:    'Don't use comments for clarification.',
59: 1:    'Make the code as readable and concise as possible.'
59: 1:  ],
59: 1:  'expectedAnswer': 'even',
59: 1:  'history': [
59: 1:    {
59: 1:      'answer': 'even',
59: 1:      'question': '0',
59: 1:      'valid': true
59: 1:    },
59: 1:    {
59: 1:      'answer': 'odd',
59: 1:      'question': '0 1 4',
59: 1:      'valid': true
59: 1:    },
59: 1:    {
59: 1:      'answer': 'even',
59: 1:      'question': '0 -1 5',
59: 1:      'valid': true
59: 1:    },
59: 1:    {
59: 1:      'answer': 'odd',
59: 1:      'question': '1 2 3 4 5',
59: 1:      'valid': true
59: 1:    },
59: 1:    {
59: 1:      'answer': 'odd',
59: 1:      'question': '1 2 -3 4 5',
59: 1:      'valid': true
59: 1:    },
59: 1:    {
59: 1:      'answer': 'even',
59: 1:      'question': '1 9 3 4 -5',
59: 1:      'valid': true
59: 1:    },
59: 1:    {
59: 1:      'answer': 'odd',
59: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
59: 1:      'valid': true
59: 1:    },
59: 1:    {
59: 1:      'answer': 'even',
59: 1:      'question': '1 2 3',
59: 1:      'valid': true
59: 1:    },
59: 1:    {
59: 1:      'answer': 'odd',
59: 1:      'question': '1',
59: 1:      'valid': true
59: 1:    },
59: 1:    {
59: 1:      'answer': 'odd',
59: 1:      'question': '-1',
59: 1:      'valid': true
59: 1:    }
59: 1:  ],
59: 1:  'info': [
59: 1:    '✅f(0) = even',
59: 1:    '✅f(0 1 4) = odd',
59: 1:    '✅f(0 -1 5) = even',
59: 1:    '✅f(1 2 3 4 5) = odd',
59: 1:    '✅f(1 2 -3 4 5) = odd',
59: 1:    '✅f(1 9 3 4 -5) = even',
59: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
59: 1:    '✅f(1 2 3) = even',
59: 1:    '✅f(1) = odd',
59: 1:    '✅f(-1) = odd',
59: 1:    '❌f(-1 -1 0) = ??? != even'
59: 1:  ],
59: 1:  'level': 2,
59: 1:  'nextQuestion': '-1 -1 0',
59: 1:  'questions': [
59: 1:    '0',
59: 1:    '0 1 4',
59: 1:    '0 -1 5',
59: 1:    '1 2 3 4 5',
59: 1:    '1 2 -3 4 5',
59: 1:    '1 9 3 4 -5',
59: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
59: 1:    '1 2 3',
59: 1:    '1',
59: 1:    '-1',
59: 1:    '-1 -1 0'
59: 1:  ]
59: 1:}
59: 1:Scores: 740
59: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even']')
59: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
60: 1:BoardData {
60: 1:  'description': [
60: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
60: 1:    'Write a javascript method.',
60: 1:    'You are given a string of space separated numbers.',
60: 1:    'All numbers are valid Int32, no need to validate them.',
60: 1:    'Give your answer as a string matching 'odd' or 'even'.',
60: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
60: 1:    'Don't use comments for clarification.',
60: 1:    'Make the code as readable and concise as possible.'
60: 1:  ],
60: 1:  'expectedAnswer': 'even',
60: 1:  'history': [
60: 1:    {
60: 1:      'answer': 'even',
60: 1:      'question': '0',
60: 1:      'valid': true
60: 1:    },
60: 1:    {
60: 1:      'answer': 'odd',
60: 1:      'question': '0 1 4',
60: 1:      'valid': true
60: 1:    },
60: 1:    {
60: 1:      'answer': 'even',
60: 1:      'question': '0 -1 5',
60: 1:      'valid': true
60: 1:    },
60: 1:    {
60: 1:      'answer': 'odd',
60: 1:      'question': '1 2 3 4 5',
60: 1:      'valid': true
60: 1:    },
60: 1:    {
60: 1:      'answer': 'odd',
60: 1:      'question': '1 2 -3 4 5',
60: 1:      'valid': true
60: 1:    },
60: 1:    {
60: 1:      'answer': 'even',
60: 1:      'question': '1 9 3 4 -5',
60: 1:      'valid': true
60: 1:    },
60: 1:    {
60: 1:      'answer': 'odd',
60: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
60: 1:      'valid': true
60: 1:    },
60: 1:    {
60: 1:      'answer': 'even',
60: 1:      'question': '1 2 3',
60: 1:      'valid': true
60: 1:    },
60: 1:    {
60: 1:      'answer': 'odd',
60: 1:      'question': '1',
60: 1:      'valid': true
60: 1:    },
60: 1:    {
60: 1:      'answer': 'odd',
60: 1:      'question': '-1',
60: 1:      'valid': true
60: 1:    },
60: 1:    {
60: 1:      'answer': 'even',
60: 1:      'question': '-1 -1 0',
60: 1:      'valid': true
60: 1:    }
60: 1:  ],
60: 1:  'info': [
60: 1:    '✅f(0) = even',
60: 1:    '✅f(0 1 4) = odd',
60: 1:    '✅f(0 -1 5) = even',
60: 1:    '✅f(1 2 3 4 5) = odd',
60: 1:    '✅f(1 2 -3 4 5) = odd',
60: 1:    '✅f(1 9 3 4 -5) = even',
60: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
60: 1:    '✅f(1 2 3) = even',
60: 1:    '✅f(1) = odd',
60: 1:    '✅f(-1) = odd',
60: 1:    '✅f(-1 -1 0) = even',
60: 1:    '❌f(1 1 0) = ??? != even'
60: 1:  ],
60: 1:  'level': 2,
60: 1:  'nextQuestion': '1 1 0',
60: 1:  'questions': [
60: 1:    '0',
60: 1:    '0 1 4',
60: 1:    '0 -1 5',
60: 1:    '1 2 3 4 5',
60: 1:    '1 2 -3 4 5',
60: 1:    '1 9 3 4 -5',
60: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
60: 1:    '1 2 3',
60: 1:    '1',
60: 1:    '-1',
60: 1:    '-1 -1 0',
60: 1:    '1 1 0'
60: 1:  ]
60: 1:}
60: 1:Scores: 742
60: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even']')
60: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
61: 1:BoardData {
61: 1:  'description': [
61: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
61: 1:    'Write a javascript method.',
61: 1:    'You are given a string of space separated numbers.',
61: 1:    'All numbers are valid Int32, no need to validate them.',
61: 1:    'Give your answer as a string matching 'odd' or 'even'.',
61: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
61: 1:    'Don't use comments for clarification.',
61: 1:    'Make the code as readable and concise as possible.'
61: 1:  ],
61: 1:  'expectedAnswer': 'even',
61: 1:  'history': [
61: 1:    {
61: 1:      'answer': 'even',
61: 1:      'question': '0',
61: 1:      'valid': true
61: 1:    },
61: 1:    {
61: 1:      'answer': 'odd',
61: 1:      'question': '0 1 4',
61: 1:      'valid': true
61: 1:    },
61: 1:    {
61: 1:      'answer': 'even',
61: 1:      'question': '0 -1 5',
61: 1:      'valid': true
61: 1:    },
61: 1:    {
61: 1:      'answer': 'odd',
61: 1:      'question': '1 2 3 4 5',
61: 1:      'valid': true
61: 1:    },
61: 1:    {
61: 1:      'answer': 'odd',
61: 1:      'question': '1 2 -3 4 5',
61: 1:      'valid': true
61: 1:    },
61: 1:    {
61: 1:      'answer': 'even',
61: 1:      'question': '1 9 3 4 -5',
61: 1:      'valid': true
61: 1:    },
61: 1:    {
61: 1:      'answer': 'odd',
61: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
61: 1:      'valid': true
61: 1:    },
61: 1:    {
61: 1:      'answer': 'even',
61: 1:      'question': '1 2 3',
61: 1:      'valid': true
61: 1:    },
61: 1:    {
61: 1:      'answer': 'odd',
61: 1:      'question': '1',
61: 1:      'valid': true
61: 1:    },
61: 1:    {
61: 1:      'answer': 'odd',
61: 1:      'question': '-1',
61: 1:      'valid': true
61: 1:    },
61: 1:    {
61: 1:      'answer': 'even',
61: 1:      'question': '-1 -1 0',
61: 1:      'valid': true
61: 1:    },
61: 1:    {
61: 1:      'answer': 'even',
61: 1:      'question': '1 1 0',
61: 1:      'valid': true
61: 1:    }
61: 1:  ],
61: 1:  'info': [
61: 1:    '✅f(0) = even',
61: 1:    '✅f(0 1 4) = odd',
61: 1:    '✅f(0 -1 5) = even',
61: 1:    '✅f(1 2 3 4 5) = odd',
61: 1:    '✅f(1 2 -3 4 5) = odd',
61: 1:    '✅f(1 9 3 4 -5) = even',
61: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
61: 1:    '✅f(1 2 3) = even',
61: 1:    '✅f(1) = odd',
61: 1:    '✅f(-1) = odd',
61: 1:    '✅f(-1 -1 0) = even',
61: 1:    '✅f(1 1 0) = even',
61: 1:    '❌f(-1 -1) = ??? != even'
61: 1:  ],
61: 1:  'level': 2,
61: 1:  'nextQuestion': '-1 -1',
61: 1:  'questions': [
61: 1:    '0',
61: 1:    '0 1 4',
61: 1:    '0 -1 5',
61: 1:    '1 2 3 4 5',
61: 1:    '1 2 -3 4 5',
61: 1:    '1 9 3 4 -5',
61: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
61: 1:    '1 2 3',
61: 1:    '1',
61: 1:    '-1',
61: 1:    '-1 -1 0',
61: 1:    '1 1 0',
61: 1:    '-1 -1'
61: 1:  ]
61: 1:}
61: 1:Scores: 744
61: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even', 'even']')
61: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
62: 1:BoardData {
62: 1:  'description': [
62: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
62: 1:    'Write a javascript method.',
62: 1:    'You are given a string of space separated numbers.',
62: 1:    'All numbers are valid Int32, no need to validate them.',
62: 1:    'Give your answer as a string matching 'odd' or 'even'.',
62: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
62: 1:    'Don't use comments for clarification.',
62: 1:    'Make the code as readable and concise as possible.'
62: 1:  ],
62: 1:  'expectedAnswer': 'even',
62: 1:  'history': [
62: 1:    {
62: 1:      'answer': 'even',
62: 1:      'question': '0',
62: 1:      'valid': true
62: 1:    },
62: 1:    {
62: 1:      'answer': 'odd',
62: 1:      'question': '0 1 4',
62: 1:      'valid': true
62: 1:    },
62: 1:    {
62: 1:      'answer': 'even',
62: 1:      'question': '0 -1 5',
62: 1:      'valid': true
62: 1:    },
62: 1:    {
62: 1:      'answer': 'odd',
62: 1:      'question': '1 2 3 4 5',
62: 1:      'valid': true
62: 1:    },
62: 1:    {
62: 1:      'answer': 'odd',
62: 1:      'question': '1 2 -3 4 5',
62: 1:      'valid': true
62: 1:    },
62: 1:    {
62: 1:      'answer': 'even',
62: 1:      'question': '1 9 3 4 -5',
62: 1:      'valid': true
62: 1:    },
62: 1:    {
62: 1:      'answer': 'odd',
62: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
62: 1:      'valid': true
62: 1:    },
62: 1:    {
62: 1:      'answer': 'even',
62: 1:      'question': '1 2 3',
62: 1:      'valid': true
62: 1:    },
62: 1:    {
62: 1:      'answer': 'odd',
62: 1:      'question': '1',
62: 1:      'valid': true
62: 1:    },
62: 1:    {
62: 1:      'answer': 'odd',
62: 1:      'question': '-1',
62: 1:      'valid': true
62: 1:    },
62: 1:    {
62: 1:      'answer': 'even',
62: 1:      'question': '-1 -1 0',
62: 1:      'valid': true
62: 1:    },
62: 1:    {
62: 1:      'answer': 'even',
62: 1:      'question': '1 1 0',
62: 1:      'valid': true
62: 1:    },
62: 1:    {
62: 1:      'answer': 'even',
62: 1:      'question': '-1 -1',
62: 1:      'valid': true
62: 1:    }
62: 1:  ],
62: 1:  'info': [
62: 1:    '✅f(0) = even',
62: 1:    '✅f(0 1 4) = odd',
62: 1:    '✅f(0 -1 5) = even',
62: 1:    '✅f(1 2 3 4 5) = odd',
62: 1:    '✅f(1 2 -3 4 5) = odd',
62: 1:    '✅f(1 9 3 4 -5) = even',
62: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
62: 1:    '✅f(1 2 3) = even',
62: 1:    '✅f(1) = odd',
62: 1:    '✅f(-1) = odd',
62: 1:    '✅f(-1 -1 0) = even',
62: 1:    '✅f(1 1 0) = even',
62: 1:    '✅f(-1 -1) = even',
62: 1:    '❌f(1 -1 0) = ??? != even'
62: 1:  ],
62: 1:  'level': 2,
62: 1:  'nextQuestion': '1 -1 0',
62: 1:  'questions': [
62: 1:    '0',
62: 1:    '0 1 4',
62: 1:    '0 -1 5',
62: 1:    '1 2 3 4 5',
62: 1:    '1 2 -3 4 5',
62: 1:    '1 9 3 4 -5',
62: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
62: 1:    '1 2 3',
62: 1:    '1',
62: 1:    '-1',
62: 1:    '-1 -1 0',
62: 1:    '1 1 0',
62: 1:    '-1 -1',
62: 1:    '1 -1 0'
62: 1:  ]
62: 1:}
62: 1:Scores: 746
62: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even', 'even', 'even']')
62: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
63: 1:BoardData {
63: 1:  'description': [
63: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
63: 1:    'Write a javascript method.',
63: 1:    'You are given a string of space separated numbers.',
63: 1:    'All numbers are valid Int32, no need to validate them.',
63: 1:    'Give your answer as a string matching 'odd' or 'even'.',
63: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
63: 1:    'Don't use comments for clarification.',
63: 1:    'Make the code as readable and concise as possible.'
63: 1:  ],
63: 1:  'expectedAnswer': 'odd',
63: 1:  'history': [
63: 1:    {
63: 1:      'answer': 'even',
63: 1:      'question': '0',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': 'odd',
63: 1:      'question': '0 1 4',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': 'even',
63: 1:      'question': '0 -1 5',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': 'odd',
63: 1:      'question': '1 2 3 4 5',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': 'odd',
63: 1:      'question': '1 2 -3 4 5',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': 'even',
63: 1:      'question': '1 9 3 4 -5',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': 'odd',
63: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': 'even',
63: 1:      'question': '1 2 3',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': 'odd',
63: 1:      'question': '1',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': 'odd',
63: 1:      'question': '-1',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': 'even',
63: 1:      'question': '-1 -1 0',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': 'even',
63: 1:      'question': '1 1 0',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': 'even',
63: 1:      'question': '-1 -1',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': 'even',
63: 1:      'question': '1 -1 0',
63: 1:      'valid': true
63: 1:    }
63: 1:  ],
63: 1:  'info': [
63: 1:    '✅f(0) = even',
63: 1:    '✅f(0 1 4) = odd',
63: 1:    '✅f(0 -1 5) = even',
63: 1:    '✅f(1 2 3 4 5) = odd',
63: 1:    '✅f(1 2 -3 4 5) = odd',
63: 1:    '✅f(1 9 3 4 -5) = even',
63: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
63: 1:    '✅f(1 2 3) = even',
63: 1:    '✅f(1) = odd',
63: 1:    '✅f(-1) = odd',
63: 1:    '✅f(-1 -1 0) = even',
63: 1:    '✅f(1 1 0) = even',
63: 1:    '✅f(-1 -1) = even',
63: 1:    '✅f(1 -1 0) = even',
63: 1:    '❌f(10 2 -1 -20) = ??? != odd'
63: 1:  ],
63: 1:  'level': 2,
63: 1:  'nextQuestion': '10 2 -1 -20',
63: 1:  'questions': [
63: 1:    '0',
63: 1:    '0 1 4',
63: 1:    '0 -1 5',
63: 1:    '1 2 3 4 5',
63: 1:    '1 2 -3 4 5',
63: 1:    '1 9 3 4 -5',
63: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
63: 1:    '1 2 3',
63: 1:    '1',
63: 1:    '-1',
63: 1:    '-1 -1 0',
63: 1:    '1 1 0',
63: 1:    '-1 -1',
63: 1:    '1 -1 0',
63: 1:    '10 2 -1 -20'
63: 1:  ]
63: 1:}
63: 1:Scores: 748
63: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even', 'even', 'even', 'odd']')
63: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
64: 1:BoardData {
64: 1:  'description': [
64: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
64: 1:    'Write a javascript method.',
64: 1:    'You are given a string of space separated numbers.',
64: 1:    'All numbers are valid Int32, no need to validate them.',
64: 1:    'Give your answer as a string matching 'odd' or 'even'.',
64: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
64: 1:    'Don't use comments for clarification.',
64: 1:    'Make the code as readable and concise as possible.'
64: 1:  ],
64: 1:  'expectedAnswer': 'odd',
64: 1:  'history': [
64: 1:    {
64: 1:      'answer': 'even',
64: 1:      'question': '0',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': 'odd',
64: 1:      'question': '0 1 4',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': 'even',
64: 1:      'question': '0 -1 5',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': 'odd',
64: 1:      'question': '1 2 3 4 5',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': 'odd',
64: 1:      'question': '1 2 -3 4 5',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': 'even',
64: 1:      'question': '1 9 3 4 -5',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': 'odd',
64: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': 'even',
64: 1:      'question': '1 2 3',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': 'odd',
64: 1:      'question': '1',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': 'odd',
64: 1:      'question': '-1',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': 'even',
64: 1:      'question': '-1 -1 0',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': 'even',
64: 1:      'question': '1 1 0',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': 'even',
64: 1:      'question': '-1 -1',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': 'even',
64: 1:      'question': '1 -1 0',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': 'odd',
64: 1:      'question': '10 2 -1 -20',
64: 1:      'valid': true
64: 1:    }
64: 1:  ],
64: 1:  'info': [
64: 1:    '✅f(0) = even',
64: 1:    '✅f(0 1 4) = odd',
64: 1:    '✅f(0 -1 5) = even',
64: 1:    '✅f(1 2 3 4 5) = odd',
64: 1:    '✅f(1 2 -3 4 5) = odd',
64: 1:    '✅f(1 9 3 4 -5) = even',
64: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
64: 1:    '✅f(1 2 3) = even',
64: 1:    '✅f(1) = odd',
64: 1:    '✅f(-1) = odd',
64: 1:    '✅f(-1 -1 0) = even',
64: 1:    '✅f(1 1 0) = even',
64: 1:    '✅f(-1 -1) = even',
64: 1:    '✅f(1 -1 0) = even',
64: 1:    '✅f(10 2 -1 -20) = odd',
64: 1:    '❌f(452 561 -686 679 476 -515 805 -739 571 791) = ??? != odd'
64: 1:  ],
64: 1:  'level': 2,
64: 1:  'nextQuestion': '452 561 -686 679 476 -515 805 -739 571 791',
64: 1:  'questions': [
64: 1:    '0',
64: 1:    '0 1 4',
64: 1:    '0 -1 5',
64: 1:    '1 2 3 4 5',
64: 1:    '1 2 -3 4 5',
64: 1:    '1 9 3 4 -5',
64: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
64: 1:    '1 2 3',
64: 1:    '1',
64: 1:    '-1',
64: 1:    '-1 -1 0',
64: 1:    '1 1 0',
64: 1:    '-1 -1',
64: 1:    '1 -1 0',
64: 1:    '10 2 -1 -20',
64: 1:    '452 561 -686 679 476 -515 805 -739 571 791'
64: 1:  ]
64: 1:}
64: 1:Scores: 750
64: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even', 'even', 'even', 'odd', 'odd']')
64: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
65: 1:BoardData {
65: 1:  'description': [
65: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
65: 1:    'Write a javascript method.',
65: 1:    'You are given a string of space separated numbers.',
65: 1:    'All numbers are valid Int32, no need to validate them.',
65: 1:    'Give your answer as a string matching 'odd' or 'even'.',
65: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
65: 1:    'Don't use comments for clarification.',
65: 1:    'Make the code as readable and concise as possible.'
65: 1:  ],
65: 1:  'expectedAnswer': 'even',
65: 1:  'history': [
65: 1:    {
65: 1:      'answer': 'even',
65: 1:      'question': '0',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'odd',
65: 1:      'question': '0 1 4',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'even',
65: 1:      'question': '0 -1 5',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'odd',
65: 1:      'question': '1 2 3 4 5',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'odd',
65: 1:      'question': '1 2 -3 4 5',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'even',
65: 1:      'question': '1 9 3 4 -5',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'odd',
65: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'even',
65: 1:      'question': '1 2 3',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'odd',
65: 1:      'question': '1',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'odd',
65: 1:      'question': '-1',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'even',
65: 1:      'question': '-1 -1 0',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'even',
65: 1:      'question': '1 1 0',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'even',
65: 1:      'question': '-1 -1',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'even',
65: 1:      'question': '1 -1 0',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'odd',
65: 1:      'question': '10 2 -1 -20',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'odd',
65: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
65: 1:      'valid': true
65: 1:    }
65: 1:  ],
65: 1:  'info': [
65: 1:    '✅f(0) = even',
65: 1:    '✅f(0 1 4) = odd',
65: 1:    '✅f(0 -1 5) = even',
65: 1:    '✅f(1 2 3 4 5) = odd',
65: 1:    '✅f(1 2 -3 4 5) = odd',
65: 1:    '✅f(1 9 3 4 -5) = even',
65: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
65: 1:    '✅f(1 2 3) = even',
65: 1:    '✅f(1) = odd',
65: 1:    '✅f(-1) = odd',
65: 1:    '✅f(-1 -1 0) = even',
65: 1:    '✅f(1 1 0) = even',
65: 1:    '✅f(-1 -1) = even',
65: 1:    '✅f(1 -1 0) = even',
65: 1:    '✅f(10 2 -1 -20) = odd',
65: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = odd',
65: 1:    '❌f(-983 -111 -332 -973 47 728) = ??? != even'
65: 1:  ],
65: 1:  'level': 2,
65: 1:  'nextQuestion': '-983 -111 -332 -973 47 728',
65: 1:  'questions': [
65: 1:    '0',
65: 1:    '0 1 4',
65: 1:    '0 -1 5',
65: 1:    '1 2 3 4 5',
65: 1:    '1 2 -3 4 5',
65: 1:    '1 9 3 4 -5',
65: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
65: 1:    '1 2 3',
65: 1:    '1',
65: 1:    '-1',
65: 1:    '-1 -1 0',
65: 1:    '1 1 0',
65: 1:    '-1 -1',
65: 1:    '1 -1 0',
65: 1:    '10 2 -1 -20',
65: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
65: 1:    '-983 -111 -332 -973 47 728'
65: 1:  ]
65: 1:}
65: 1:Scores: 752
65: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even', 'even', 'even', 'odd', 'odd', 'even']')
65: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
66: 1:BoardData {
66: 1:  'description': [
66: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
66: 1:    'Write a javascript method.',
66: 1:    'You are given a string of space separated numbers.',
66: 1:    'All numbers are valid Int32, no need to validate them.',
66: 1:    'Give your answer as a string matching 'odd' or 'even'.',
66: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
66: 1:    'Don't use comments for clarification.',
66: 1:    'Make the code as readable and concise as possible.'
66: 1:  ],
66: 1:  'expectedAnswer': 'even',
66: 1:  'history': [
66: 1:    {
66: 1:      'answer': 'even',
66: 1:      'question': '0',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'odd',
66: 1:      'question': '0 1 4',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'even',
66: 1:      'question': '0 -1 5',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'odd',
66: 1:      'question': '1 2 3 4 5',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'odd',
66: 1:      'question': '1 2 -3 4 5',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'even',
66: 1:      'question': '1 9 3 4 -5',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'odd',
66: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'even',
66: 1:      'question': '1 2 3',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'odd',
66: 1:      'question': '1',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'odd',
66: 1:      'question': '-1',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'even',
66: 1:      'question': '-1 -1 0',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'even',
66: 1:      'question': '1 1 0',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'even',
66: 1:      'question': '-1 -1',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'even',
66: 1:      'question': '1 -1 0',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'odd',
66: 1:      'question': '10 2 -1 -20',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'odd',
66: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'even',
66: 1:      'question': '-983 -111 -332 -973 47 728',
66: 1:      'valid': true
66: 1:    }
66: 1:  ],
66: 1:  'info': [
66: 1:    '✅f(0) = even',
66: 1:    '✅f(0 1 4) = odd',
66: 1:    '✅f(0 -1 5) = even',
66: 1:    '✅f(1 2 3 4 5) = odd',
66: 1:    '✅f(1 2 -3 4 5) = odd',
66: 1:    '✅f(1 9 3 4 -5) = even',
66: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
66: 1:    '✅f(1 2 3) = even',
66: 1:    '✅f(1) = odd',
66: 1:    '✅f(-1) = odd',
66: 1:    '✅f(-1 -1 0) = even',
66: 1:    '✅f(1 1 0) = even',
66: 1:    '✅f(-1 -1) = even',
66: 1:    '✅f(1 -1 0) = even',
66: 1:    '✅f(10 2 -1 -20) = odd',
66: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = odd',
66: 1:    '✅f(-983 -111 -332 -973 47 728) = even',
66: 1:    '❌f(268 -359 -513 -9 -86 -142 -779) = ??? != even'
66: 1:  ],
66: 1:  'level': 2,
66: 1:  'nextQuestion': '268 -359 -513 -9 -86 -142 -779',
66: 1:  'questions': [
66: 1:    '0',
66: 1:    '0 1 4',
66: 1:    '0 -1 5',
66: 1:    '1 2 3 4 5',
66: 1:    '1 2 -3 4 5',
66: 1:    '1 9 3 4 -5',
66: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
66: 1:    '1 2 3',
66: 1:    '1',
66: 1:    '-1',
66: 1:    '-1 -1 0',
66: 1:    '1 1 0',
66: 1:    '-1 -1',
66: 1:    '1 -1 0',
66: 1:    '10 2 -1 -20',
66: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
66: 1:    '-983 -111 -332 -973 47 728',
66: 1:    '268 -359 -513 -9 -86 -142 -779'
66: 1:  ]
66: 1:}
66: 1:Scores: 754
66: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even', 'even', 'even', 'odd', 'odd', 'even', 'even']')
66: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
67: 1:BoardData {
67: 1:  'description': [
67: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
67: 1:    'Write a javascript method.',
67: 1:    'You are given a string of space separated numbers.',
67: 1:    'All numbers are valid Int32, no need to validate them.',
67: 1:    'Give your answer as a string matching 'odd' or 'even'.',
67: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
67: 1:    'Don't use comments for clarification.',
67: 1:    'Make the code as readable and concise as possible.'
67: 1:  ],
67: 1:  'expectedAnswer': 'odd',
67: 1:  'history': [
67: 1:    {
67: 1:      'answer': 'even',
67: 1:      'question': '0',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'odd',
67: 1:      'question': '0 1 4',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'even',
67: 1:      'question': '0 -1 5',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'odd',
67: 1:      'question': '1 2 3 4 5',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'odd',
67: 1:      'question': '1 2 -3 4 5',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'even',
67: 1:      'question': '1 9 3 4 -5',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'odd',
67: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'even',
67: 1:      'question': '1 2 3',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'odd',
67: 1:      'question': '1',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'odd',
67: 1:      'question': '-1',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'even',
67: 1:      'question': '-1 -1 0',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'even',
67: 1:      'question': '1 1 0',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'even',
67: 1:      'question': '-1 -1',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'even',
67: 1:      'question': '1 -1 0',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'odd',
67: 1:      'question': '10 2 -1 -20',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'odd',
67: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'even',
67: 1:      'question': '-983 -111 -332 -973 47 728',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'even',
67: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
67: 1:      'valid': true
67: 1:    }
67: 1:  ],
67: 1:  'info': [
67: 1:    '✅f(0) = even',
67: 1:    '✅f(0 1 4) = odd',
67: 1:    '✅f(0 -1 5) = even',
67: 1:    '✅f(1 2 3 4 5) = odd',
67: 1:    '✅f(1 2 -3 4 5) = odd',
67: 1:    '✅f(1 9 3 4 -5) = even',
67: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
67: 1:    '✅f(1 2 3) = even',
67: 1:    '✅f(1) = odd',
67: 1:    '✅f(-1) = odd',
67: 1:    '✅f(-1 -1 0) = even',
67: 1:    '✅f(1 1 0) = even',
67: 1:    '✅f(-1 -1) = even',
67: 1:    '✅f(1 -1 0) = even',
67: 1:    '✅f(10 2 -1 -20) = odd',
67: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = odd',
67: 1:    '✅f(-983 -111 -332 -973 47 728) = even',
67: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = even',
67: 1:    '❌f(556 32 866 -730 -367 -937 367 888 43 -510 773) = ??? != odd'
67: 1:  ],
67: 1:  'level': 2,
67: 1:  'nextQuestion': '556 32 866 -730 -367 -937 367 888 43 -510 773',
67: 1:  'questions': [
67: 1:    '0',
67: 1:    '0 1 4',
67: 1:    '0 -1 5',
67: 1:    '1 2 3 4 5',
67: 1:    '1 2 -3 4 5',
67: 1:    '1 9 3 4 -5',
67: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
67: 1:    '1 2 3',
67: 1:    '1',
67: 1:    '-1',
67: 1:    '-1 -1 0',
67: 1:    '1 1 0',
67: 1:    '-1 -1',
67: 1:    '1 -1 0',
67: 1:    '10 2 -1 -20',
67: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
67: 1:    '-983 -111 -332 -973 47 728',
67: 1:    '268 -359 -513 -9 -86 -142 -779',
67: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773'
67: 1:  ]
67: 1:}
67: 1:Scores: 756
67: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even', 'even', 'even', 'odd', 'odd', 'even', 'even', 'odd']')
67: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
68: 1:BoardData {
68: 1:  'description': [
68: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
68: 1:    'Write a javascript method.',
68: 1:    'You are given a string of space separated numbers.',
68: 1:    'All numbers are valid Int32, no need to validate them.',
68: 1:    'Give your answer as a string matching 'odd' or 'even'.',
68: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
68: 1:    'Don't use comments for clarification.',
68: 1:    'Make the code as readable and concise as possible.'
68: 1:  ],
68: 1:  'expectedAnswer': 'even',
68: 1:  'history': [
68: 1:    {
68: 1:      'answer': 'even',
68: 1:      'question': '0',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'odd',
68: 1:      'question': '0 1 4',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'even',
68: 1:      'question': '0 -1 5',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'odd',
68: 1:      'question': '1 2 3 4 5',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'odd',
68: 1:      'question': '1 2 -3 4 5',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'even',
68: 1:      'question': '1 9 3 4 -5',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'odd',
68: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'even',
68: 1:      'question': '1 2 3',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'odd',
68: 1:      'question': '1',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'odd',
68: 1:      'question': '-1',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'even',
68: 1:      'question': '-1 -1 0',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'even',
68: 1:      'question': '1 1 0',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'even',
68: 1:      'question': '-1 -1',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'even',
68: 1:      'question': '1 -1 0',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'odd',
68: 1:      'question': '10 2 -1 -20',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'odd',
68: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'even',
68: 1:      'question': '-983 -111 -332 -973 47 728',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'even',
68: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'odd',
68: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
68: 1:      'valid': true
68: 1:    }
68: 1:  ],
68: 1:  'info': [
68: 1:    '✅f(0) = even',
68: 1:    '✅f(0 1 4) = odd',
68: 1:    '✅f(0 -1 5) = even',
68: 1:    '✅f(1 2 3 4 5) = odd',
68: 1:    '✅f(1 2 -3 4 5) = odd',
68: 1:    '✅f(1 9 3 4 -5) = even',
68: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
68: 1:    '✅f(1 2 3) = even',
68: 1:    '✅f(1) = odd',
68: 1:    '✅f(-1) = odd',
68: 1:    '✅f(-1 -1 0) = even',
68: 1:    '✅f(1 1 0) = even',
68: 1:    '✅f(-1 -1) = even',
68: 1:    '✅f(1 -1 0) = even',
68: 1:    '✅f(10 2 -1 -20) = odd',
68: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = odd',
68: 1:    '✅f(-983 -111 -332 -973 47 728) = even',
68: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = even',
68: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = odd',
68: 1:    '❌f(646 261 609 -82 949 526 -449 -594 894) = ??? != even'
68: 1:  ],
68: 1:  'level': 2,
68: 1:  'nextQuestion': '646 261 609 -82 949 526 -449 -594 894',
68: 1:  'questions': [
68: 1:    '0',
68: 1:    '0 1 4',
68: 1:    '0 -1 5',
68: 1:    '1 2 3 4 5',
68: 1:    '1 2 -3 4 5',
68: 1:    '1 9 3 4 -5',
68: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
68: 1:    '1 2 3',
68: 1:    '1',
68: 1:    '-1',
68: 1:    '-1 -1 0',
68: 1:    '1 1 0',
68: 1:    '-1 -1',
68: 1:    '1 -1 0',
68: 1:    '10 2 -1 -20',
68: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
68: 1:    '-983 -111 -332 -973 47 728',
68: 1:    '268 -359 -513 -9 -86 -142 -779',
68: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773',
68: 1:    '646 261 609 -82 949 526 -449 -594 894'
68: 1:  ]
68: 1:}
68: 1:Scores: 758
68: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even', 'even', 'even', 'odd', 'odd', 'even', 'even', 'odd', 'even']')
68: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
69: 1:BoardData {
69: 1:  'description': [
69: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
69: 1:    'Write a javascript method.',
69: 1:    'You are given a string of space separated numbers.',
69: 1:    'All numbers are valid Int32, no need to validate them.',
69: 1:    'Give your answer as a string matching 'odd' or 'even'.',
69: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
69: 1:    'Don't use comments for clarification.',
69: 1:    'Make the code as readable and concise as possible.'
69: 1:  ],
69: 1:  'expectedAnswer': 'even',
69: 1:  'history': [
69: 1:    {
69: 1:      'answer': 'even',
69: 1:      'question': '0',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'odd',
69: 1:      'question': '0 1 4',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'even',
69: 1:      'question': '0 -1 5',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'odd',
69: 1:      'question': '1 2 3 4 5',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'odd',
69: 1:      'question': '1 2 -3 4 5',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'even',
69: 1:      'question': '1 9 3 4 -5',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'odd',
69: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'even',
69: 1:      'question': '1 2 3',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'odd',
69: 1:      'question': '1',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'odd',
69: 1:      'question': '-1',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'even',
69: 1:      'question': '-1 -1 0',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'even',
69: 1:      'question': '1 1 0',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'even',
69: 1:      'question': '-1 -1',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'even',
69: 1:      'question': '1 -1 0',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'odd',
69: 1:      'question': '10 2 -1 -20',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'odd',
69: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'even',
69: 1:      'question': '-983 -111 -332 -973 47 728',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'even',
69: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'odd',
69: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'even',
69: 1:      'question': '646 261 609 -82 949 526 -449 -594 894',
69: 1:      'valid': true
69: 1:    }
69: 1:  ],
69: 1:  'info': [
69: 1:    '✅f(0) = even',
69: 1:    '✅f(0 1 4) = odd',
69: 1:    '✅f(0 -1 5) = even',
69: 1:    '✅f(1 2 3 4 5) = odd',
69: 1:    '✅f(1 2 -3 4 5) = odd',
69: 1:    '✅f(1 9 3 4 -5) = even',
69: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
69: 1:    '✅f(1 2 3) = even',
69: 1:    '✅f(1) = odd',
69: 1:    '✅f(-1) = odd',
69: 1:    '✅f(-1 -1 0) = even',
69: 1:    '✅f(1 1 0) = even',
69: 1:    '✅f(-1 -1) = even',
69: 1:    '✅f(1 -1 0) = even',
69: 1:    '✅f(10 2 -1 -20) = odd',
69: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = odd',
69: 1:    '✅f(-983 -111 -332 -973 47 728) = even',
69: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = even',
69: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = odd',
69: 1:    '✅f(646 261 609 -82 949 526 -449 -594 894) = even',
69: 1:    '❌f(-950 909 424 834 -579 -275 -901 444) = ??? != even'
69: 1:  ],
69: 1:  'level': 2,
69: 1:  'nextQuestion': '-950 909 424 834 -579 -275 -901 444',
69: 1:  'questions': [
69: 1:    '0',
69: 1:    '0 1 4',
69: 1:    '0 -1 5',
69: 1:    '1 2 3 4 5',
69: 1:    '1 2 -3 4 5',
69: 1:    '1 9 3 4 -5',
69: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
69: 1:    '1 2 3',
69: 1:    '1',
69: 1:    '-1',
69: 1:    '-1 -1 0',
69: 1:    '1 1 0',
69: 1:    '-1 -1',
69: 1:    '1 -1 0',
69: 1:    '10 2 -1 -20',
69: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
69: 1:    '-983 -111 -332 -973 47 728',
69: 1:    '268 -359 -513 -9 -86 -142 -779',
69: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773',
69: 1:    '646 261 609 -82 949 526 -449 -594 894',
69: 1:    '-950 909 424 834 -579 -275 -901 444'
69: 1:  ]
69: 1:}
69: 1:Scores: 760
69: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even', 'even', 'even', 'odd', 'odd', 'even', 'even', 'odd', 'even', 'even']')
69: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
70: 1:BoardData {
70: 1:  'description': [
70: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
70: 1:    'Write a javascript method.',
70: 1:    'You are given a string of space separated numbers.',
70: 1:    'All numbers are valid Int32, no need to validate them.',
70: 1:    'Give your answer as a string matching 'odd' or 'even'.',
70: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
70: 1:    'Don't use comments for clarification.',
70: 1:    'Make the code as readable and concise as possible.'
70: 1:  ],
70: 1:  'expectedAnswer': 'even',
70: 1:  'history': [
70: 1:    {
70: 1:      'answer': 'even',
70: 1:      'question': '0',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'odd',
70: 1:      'question': '0 1 4',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'even',
70: 1:      'question': '0 -1 5',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'odd',
70: 1:      'question': '1 2 3 4 5',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'odd',
70: 1:      'question': '1 2 -3 4 5',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'even',
70: 1:      'question': '1 9 3 4 -5',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'odd',
70: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'even',
70: 1:      'question': '1 2 3',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'odd',
70: 1:      'question': '1',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'odd',
70: 1:      'question': '-1',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'even',
70: 1:      'question': '-1 -1 0',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'even',
70: 1:      'question': '1 1 0',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'even',
70: 1:      'question': '-1 -1',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'even',
70: 1:      'question': '1 -1 0',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'odd',
70: 1:      'question': '10 2 -1 -20',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'odd',
70: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'even',
70: 1:      'question': '-983 -111 -332 -973 47 728',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'even',
70: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'odd',
70: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'even',
70: 1:      'question': '646 261 609 -82 949 526 -449 -594 894',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'even',
70: 1:      'question': '-950 909 424 834 -579 -275 -901 444',
70: 1:      'valid': true
70: 1:    }
70: 1:  ],
70: 1:  'info': [
70: 1:    '✅f(0) = even',
70: 1:    '✅f(0 1 4) = odd',
70: 1:    '✅f(0 -1 5) = even',
70: 1:    '✅f(1 2 3 4 5) = odd',
70: 1:    '✅f(1 2 -3 4 5) = odd',
70: 1:    '✅f(1 9 3 4 -5) = even',
70: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
70: 1:    '✅f(1 2 3) = even',
70: 1:    '✅f(1) = odd',
70: 1:    '✅f(-1) = odd',
70: 1:    '✅f(-1 -1 0) = even',
70: 1:    '✅f(1 1 0) = even',
70: 1:    '✅f(-1 -1) = even',
70: 1:    '✅f(1 -1 0) = even',
70: 1:    '✅f(10 2 -1 -20) = odd',
70: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = odd',
70: 1:    '✅f(-983 -111 -332 -973 47 728) = even',
70: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = even',
70: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = odd',
70: 1:    '✅f(646 261 609 -82 949 526 -449 -594 894) = even',
70: 1:    '✅f(-950 909 424 834 -579 -275 -901 444) = even',
70: 1:    '❌f(-857 43 444 158 510 -879 -350 705) = ??? != even'
70: 1:  ],
70: 1:  'level': 2,
70: 1:  'nextQuestion': '-857 43 444 158 510 -879 -350 705',
70: 1:  'questions': [
70: 1:    '0',
70: 1:    '0 1 4',
70: 1:    '0 -1 5',
70: 1:    '1 2 3 4 5',
70: 1:    '1 2 -3 4 5',
70: 1:    '1 9 3 4 -5',
70: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
70: 1:    '1 2 3',
70: 1:    '1',
70: 1:    '-1',
70: 1:    '-1 -1 0',
70: 1:    '1 1 0',
70: 1:    '-1 -1',
70: 1:    '1 -1 0',
70: 1:    '10 2 -1 -20',
70: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
70: 1:    '-983 -111 -332 -973 47 728',
70: 1:    '268 -359 -513 -9 -86 -142 -779',
70: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773',
70: 1:    '646 261 609 -82 949 526 -449 -594 894',
70: 1:    '-950 909 424 834 -579 -275 -901 444',
70: 1:    '-857 43 444 158 510 -879 -350 705'
70: 1:  ]
70: 1:}
70: 1:Scores: 762
70: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even', 'even', 'even', 'odd', 'odd', 'even', 'even', 'odd', 'even', 'even', 'even']')
70: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
71: 1:BoardData {
71: 1:  'description': [
71: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
71: 1:    'Write a javascript method.',
71: 1:    'You are given a string of space separated numbers.',
71: 1:    'All numbers are valid Int32, no need to validate them.',
71: 1:    'Give your answer as a string matching 'odd' or 'even'.',
71: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
71: 1:    'Don't use comments for clarification.',
71: 1:    'Make the code as readable and concise as possible.'
71: 1:  ],
71: 1:  'expectedAnswer': 'even',
71: 1:  'history': [
71: 1:    {
71: 1:      'answer': 'even',
71: 1:      'question': '0',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'odd',
71: 1:      'question': '0 1 4',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'even',
71: 1:      'question': '0 -1 5',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'odd',
71: 1:      'question': '1 2 3 4 5',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'odd',
71: 1:      'question': '1 2 -3 4 5',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'even',
71: 1:      'question': '1 9 3 4 -5',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'odd',
71: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'even',
71: 1:      'question': '1 2 3',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'odd',
71: 1:      'question': '1',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'odd',
71: 1:      'question': '-1',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'even',
71: 1:      'question': '-1 -1 0',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'even',
71: 1:      'question': '1 1 0',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'even',
71: 1:      'question': '-1 -1',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'even',
71: 1:      'question': '1 -1 0',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'odd',
71: 1:      'question': '10 2 -1 -20',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'odd',
71: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'even',
71: 1:      'question': '-983 -111 -332 -973 47 728',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'even',
71: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'odd',
71: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'even',
71: 1:      'question': '646 261 609 -82 949 526 -449 -594 894',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'even',
71: 1:      'question': '-950 909 424 834 -579 -275 -901 444',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'even',
71: 1:      'question': '-857 43 444 158 510 -879 -350 705',
71: 1:      'valid': true
71: 1:    }
71: 1:  ],
71: 1:  'info': [
71: 1:    '✅f(0) = even',
71: 1:    '✅f(0 1 4) = odd',
71: 1:    '✅f(0 -1 5) = even',
71: 1:    '✅f(1 2 3 4 5) = odd',
71: 1:    '✅f(1 2 -3 4 5) = odd',
71: 1:    '✅f(1 9 3 4 -5) = even',
71: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
71: 1:    '✅f(1 2 3) = even',
71: 1:    '✅f(1) = odd',
71: 1:    '✅f(-1) = odd',
71: 1:    '✅f(-1 -1 0) = even',
71: 1:    '✅f(1 1 0) = even',
71: 1:    '✅f(-1 -1) = even',
71: 1:    '✅f(1 -1 0) = even',
71: 1:    '✅f(10 2 -1 -20) = odd',
71: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = odd',
71: 1:    '✅f(-983 -111 -332 -973 47 728) = even',
71: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = even',
71: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = odd',
71: 1:    '✅f(646 261 609 -82 949 526 -449 -594 894) = even',
71: 1:    '✅f(-950 909 424 834 -579 -275 -901 444) = even',
71: 1:    '✅f(-857 43 444 158 510 -879 -350 705) = even',
71: 1:    '❌f(-961 908 -769 980 407 -651 550 671 -996 215) = ??? != even'
71: 1:  ],
71: 1:  'level': 2,
71: 1:  'nextQuestion': '-961 908 -769 980 407 -651 550 671 -996 215',
71: 1:  'questions': [
71: 1:    '0',
71: 1:    '0 1 4',
71: 1:    '0 -1 5',
71: 1:    '1 2 3 4 5',
71: 1:    '1 2 -3 4 5',
71: 1:    '1 9 3 4 -5',
71: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
71: 1:    '1 2 3',
71: 1:    '1',
71: 1:    '-1',
71: 1:    '-1 -1 0',
71: 1:    '1 1 0',
71: 1:    '-1 -1',
71: 1:    '1 -1 0',
71: 1:    '10 2 -1 -20',
71: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
71: 1:    '-983 -111 -332 -973 47 728',
71: 1:    '268 -359 -513 -9 -86 -142 -779',
71: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773',
71: 1:    '646 261 609 -82 949 526 -449 -594 894',
71: 1:    '-950 909 424 834 -579 -275 -901 444',
71: 1:    '-857 43 444 158 510 -879 -350 705',
71: 1:    '-961 908 -769 980 407 -651 550 671 -996 215'
71: 1:  ]
71: 1:}
71: 1:Scores: 764
71: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even', 'even', 'even', 'odd', 'odd', 'even', 'even', 'odd', 'even', 'even', 'even', 'even']')
71: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
72: 1:BoardData {
72: 1:  'description': [
72: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
72: 1:    'Write a javascript method.',
72: 1:    'You are given a string of space separated numbers.',
72: 1:    'All numbers are valid Int32, no need to validate them.',
72: 1:    'Give your answer as a string matching 'odd' or 'even'.',
72: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
72: 1:    'Don't use comments for clarification.',
72: 1:    'Make the code as readable and concise as possible.'
72: 1:  ],
72: 1:  'expectedAnswer': 'odd',
72: 1:  'history': [
72: 1:    {
72: 1:      'answer': 'even',
72: 1:      'question': '0',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'odd',
72: 1:      'question': '0 1 4',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'even',
72: 1:      'question': '0 -1 5',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'odd',
72: 1:      'question': '1 2 3 4 5',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'odd',
72: 1:      'question': '1 2 -3 4 5',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'even',
72: 1:      'question': '1 9 3 4 -5',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'odd',
72: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'even',
72: 1:      'question': '1 2 3',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'odd',
72: 1:      'question': '1',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'odd',
72: 1:      'question': '-1',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'even',
72: 1:      'question': '-1 -1 0',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'even',
72: 1:      'question': '1 1 0',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'even',
72: 1:      'question': '-1 -1',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'even',
72: 1:      'question': '1 -1 0',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'odd',
72: 1:      'question': '10 2 -1 -20',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'odd',
72: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'even',
72: 1:      'question': '-983 -111 -332 -973 47 728',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'even',
72: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'odd',
72: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'even',
72: 1:      'question': '646 261 609 -82 949 526 -449 -594 894',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'even',
72: 1:      'question': '-950 909 424 834 -579 -275 -901 444',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'even',
72: 1:      'question': '-857 43 444 158 510 -879 -350 705',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'even',
72: 1:      'question': '-961 908 -769 980 407 -651 550 671 -996 215',
72: 1:      'valid': true
72: 1:    }
72: 1:  ],
72: 1:  'info': [
72: 1:    '✅f(0) = even',
72: 1:    '✅f(0 1 4) = odd',
72: 1:    '✅f(0 -1 5) = even',
72: 1:    '✅f(1 2 3 4 5) = odd',
72: 1:    '✅f(1 2 -3 4 5) = odd',
72: 1:    '✅f(1 9 3 4 -5) = even',
72: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
72: 1:    '✅f(1 2 3) = even',
72: 1:    '✅f(1) = odd',
72: 1:    '✅f(-1) = odd',
72: 1:    '✅f(-1 -1 0) = even',
72: 1:    '✅f(1 1 0) = even',
72: 1:    '✅f(-1 -1) = even',
72: 1:    '✅f(1 -1 0) = even',
72: 1:    '✅f(10 2 -1 -20) = odd',
72: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = odd',
72: 1:    '✅f(-983 -111 -332 -973 47 728) = even',
72: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = even',
72: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = odd',
72: 1:    '✅f(646 261 609 -82 949 526 -449 -594 894) = even',
72: 1:    '✅f(-950 909 424 834 -579 -275 -901 444) = even',
72: 1:    '✅f(-857 43 444 158 510 -879 -350 705) = even',
72: 1:    '✅f(-961 908 -769 980 407 -651 550 671 -996 215) = even',
72: 1:    '❌f(483 -83 -229 -373 -812 335 -802) = ??? != odd'
72: 1:  ],
72: 1:  'level': 2,
72: 1:  'nextQuestion': '483 -83 -229 -373 -812 335 -802',
72: 1:  'questions': [
72: 1:    '0',
72: 1:    '0 1 4',
72: 1:    '0 -1 5',
72: 1:    '1 2 3 4 5',
72: 1:    '1 2 -3 4 5',
72: 1:    '1 9 3 4 -5',
72: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
72: 1:    '1 2 3',
72: 1:    '1',
72: 1:    '-1',
72: 1:    '-1 -1 0',
72: 1:    '1 1 0',
72: 1:    '-1 -1',
72: 1:    '1 -1 0',
72: 1:    '10 2 -1 -20',
72: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
72: 1:    '-983 -111 -332 -973 47 728',
72: 1:    '268 -359 -513 -9 -86 -142 -779',
72: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773',
72: 1:    '646 261 609 -82 949 526 -449 -594 894',
72: 1:    '-950 909 424 834 -579 -275 -901 444',
72: 1:    '-857 43 444 158 510 -879 -350 705',
72: 1:    '-961 908 -769 980 407 -651 550 671 -996 215',
72: 1:    '483 -83 -229 -373 -812 335 -802'
72: 1:  ]
72: 1:}
72: 1:Scores: 766
72: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even', 'even', 'even', 'odd', 'odd', 'even', 'even', 'odd', 'even', 'even', 'even', 'even', 'odd']')
72: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
73: 1:BoardData {
73: 1:  'description': [
73: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
73: 1:    'Write a javascript method.',
73: 1:    'You are given a string of space separated numbers.',
73: 1:    'All numbers are valid Int32, no need to validate them.',
73: 1:    'Give your answer as a string matching 'odd' or 'even'.',
73: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
73: 1:    'Don't use comments for clarification.',
73: 1:    'Make the code as readable and concise as possible.'
73: 1:  ],
73: 1:  'expectedAnswer': 'even',
73: 1:  'history': [
73: 1:    {
73: 1:      'answer': 'even',
73: 1:      'question': '0',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'odd',
73: 1:      'question': '0 1 4',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'even',
73: 1:      'question': '0 -1 5',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'odd',
73: 1:      'question': '1 2 3 4 5',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'odd',
73: 1:      'question': '1 2 -3 4 5',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'even',
73: 1:      'question': '1 9 3 4 -5',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'odd',
73: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'even',
73: 1:      'question': '1 2 3',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'odd',
73: 1:      'question': '1',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'odd',
73: 1:      'question': '-1',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'even',
73: 1:      'question': '-1 -1 0',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'even',
73: 1:      'question': '1 1 0',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'even',
73: 1:      'question': '-1 -1',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'even',
73: 1:      'question': '1 -1 0',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'odd',
73: 1:      'question': '10 2 -1 -20',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'odd',
73: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'even',
73: 1:      'question': '-983 -111 -332 -973 47 728',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'even',
73: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'odd',
73: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'even',
73: 1:      'question': '646 261 609 -82 949 526 -449 -594 894',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'even',
73: 1:      'question': '-950 909 424 834 -579 -275 -901 444',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'even',
73: 1:      'question': '-857 43 444 158 510 -879 -350 705',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'even',
73: 1:      'question': '-961 908 -769 980 407 -651 550 671 -996 215',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'odd',
73: 1:      'question': '483 -83 -229 -373 -812 335 -802',
73: 1:      'valid': true
73: 1:    }
73: 1:  ],
73: 1:  'info': [
73: 1:    '✅f(0) = even',
73: 1:    '✅f(0 1 4) = odd',
73: 1:    '✅f(0 -1 5) = even',
73: 1:    '✅f(1 2 3 4 5) = odd',
73: 1:    '✅f(1 2 -3 4 5) = odd',
73: 1:    '✅f(1 9 3 4 -5) = even',
73: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
73: 1:    '✅f(1 2 3) = even',
73: 1:    '✅f(1) = odd',
73: 1:    '✅f(-1) = odd',
73: 1:    '✅f(-1 -1 0) = even',
73: 1:    '✅f(1 1 0) = even',
73: 1:    '✅f(-1 -1) = even',
73: 1:    '✅f(1 -1 0) = even',
73: 1:    '✅f(10 2 -1 -20) = odd',
73: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = odd',
73: 1:    '✅f(-983 -111 -332 -973 47 728) = even',
73: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = even',
73: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = odd',
73: 1:    '✅f(646 261 609 -82 949 526 -449 -594 894) = even',
73: 1:    '✅f(-950 909 424 834 -579 -275 -901 444) = even',
73: 1:    '✅f(-857 43 444 158 510 -879 -350 705) = even',
73: 1:    '✅f(-961 908 -769 980 407 -651 550 671 -996 215) = even',
73: 1:    '✅f(483 -83 -229 -373 -812 335 -802) = odd',
73: 1:    '❌f(-968 -692 -566 -31 333 831 81 -476 828 -232) = ??? != even'
73: 1:  ],
73: 1:  'level': 2,
73: 1:  'nextQuestion': '-968 -692 -566 -31 333 831 81 -476 828 -232',
73: 1:  'questions': [
73: 1:    '0',
73: 1:    '0 1 4',
73: 1:    '0 -1 5',
73: 1:    '1 2 3 4 5',
73: 1:    '1 2 -3 4 5',
73: 1:    '1 9 3 4 -5',
73: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
73: 1:    '1 2 3',
73: 1:    '1',
73: 1:    '-1',
73: 1:    '-1 -1 0',
73: 1:    '1 1 0',
73: 1:    '-1 -1',
73: 1:    '1 -1 0',
73: 1:    '10 2 -1 -20',
73: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
73: 1:    '-983 -111 -332 -973 47 728',
73: 1:    '268 -359 -513 -9 -86 -142 -779',
73: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773',
73: 1:    '646 261 609 -82 949 526 -449 -594 894',
73: 1:    '-950 909 424 834 -579 -275 -901 444',
73: 1:    '-857 43 444 158 510 -879 -350 705',
73: 1:    '-961 908 -769 980 407 -651 550 671 -996 215',
73: 1:    '483 -83 -229 -373 -812 335 -802',
73: 1:    '-968 -692 -566 -31 333 831 81 -476 828 -232'
73: 1:  ]
73: 1:}
73: 1:Scores: 768
73: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even', 'even', 'even', 'odd', 'odd', 'even', 'even', 'odd', 'even', 'even', 'even', 'even', 'odd', 'even']')
73: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
74: 1:BoardData {
74: 1:  'description': [
74: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
74: 1:    'Write a javascript method.',
74: 1:    'You are given a string of space separated numbers.',
74: 1:    'All numbers are valid Int32, no need to validate them.',
74: 1:    'Give your answer as a string matching 'odd' or 'even'.',
74: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
74: 1:    'Don't use comments for clarification.',
74: 1:    'Make the code as readable and concise as possible.'
74: 1:  ],
74: 1:  'expectedAnswer': 'even',
74: 1:  'history': [
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '0',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'odd',
74: 1:      'question': '0 1 4',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '0 -1 5',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'odd',
74: 1:      'question': '1 2 3 4 5',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'odd',
74: 1:      'question': '1 2 -3 4 5',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '1 9 3 4 -5',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'odd',
74: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '1 2 3',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'odd',
74: 1:      'question': '1',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'odd',
74: 1:      'question': '-1',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '-1 -1 0',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '1 1 0',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '-1 -1',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '1 -1 0',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'odd',
74: 1:      'question': '10 2 -1 -20',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'odd',
74: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '-983 -111 -332 -973 47 728',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'odd',
74: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '646 261 609 -82 949 526 -449 -594 894',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '-950 909 424 834 -579 -275 -901 444',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '-857 43 444 158 510 -879 -350 705',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '-961 908 -769 980 407 -651 550 671 -996 215',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'odd',
74: 1:      'question': '483 -83 -229 -373 -812 335 -802',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '-968 -692 -566 -31 333 831 81 -476 828 -232',
74: 1:      'valid': true
74: 1:    }
74: 1:  ],
74: 1:  'info': [
74: 1:    '✅f(0) = even',
74: 1:    '✅f(0 1 4) = odd',
74: 1:    '✅f(0 -1 5) = even',
74: 1:    '✅f(1 2 3 4 5) = odd',
74: 1:    '✅f(1 2 -3 4 5) = odd',
74: 1:    '✅f(1 9 3 4 -5) = even',
74: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
74: 1:    '✅f(1 2 3) = even',
74: 1:    '✅f(1) = odd',
74: 1:    '✅f(-1) = odd',
74: 1:    '✅f(-1 -1 0) = even',
74: 1:    '✅f(1 1 0) = even',
74: 1:    '✅f(-1 -1) = even',
74: 1:    '✅f(1 -1 0) = even',
74: 1:    '✅f(10 2 -1 -20) = odd',
74: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = odd',
74: 1:    '✅f(-983 -111 -332 -973 47 728) = even',
74: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = even',
74: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = odd',
74: 1:    '✅f(646 261 609 -82 949 526 -449 -594 894) = even',
74: 1:    '✅f(-950 909 424 834 -579 -275 -901 444) = even',
74: 1:    '✅f(-857 43 444 158 510 -879 -350 705) = even',
74: 1:    '✅f(-961 908 -769 980 407 -651 550 671 -996 215) = even',
74: 1:    '✅f(483 -83 -229 -373 -812 335 -802) = odd',
74: 1:    '✅f(-968 -692 -566 -31 333 831 81 -476 828 -232) = even',
74: 1:    '❌f(4 5 29 54 4 0 -214 542 -64 1 -3 6 -6) = ??? != even'
74: 1:  ],
74: 1:  'level': 2,
74: 1:  'nextQuestion': '4 5 29 54 4 0 -214 542 -64 1 -3 6 -6',
74: 1:  'questions': [
74: 1:    '0',
74: 1:    '0 1 4',
74: 1:    '0 -1 5',
74: 1:    '1 2 3 4 5',
74: 1:    '1 2 -3 4 5',
74: 1:    '1 9 3 4 -5',
74: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
74: 1:    '1 2 3',
74: 1:    '1',
74: 1:    '-1',
74: 1:    '-1 -1 0',
74: 1:    '1 1 0',
74: 1:    '-1 -1',
74: 1:    '1 -1 0',
74: 1:    '10 2 -1 -20',
74: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
74: 1:    '-983 -111 -332 -973 47 728',
74: 1:    '268 -359 -513 -9 -86 -142 -779',
74: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773',
74: 1:    '646 261 609 -82 949 526 -449 -594 894',
74: 1:    '-950 909 424 834 -579 -275 -901 444',
74: 1:    '-857 43 444 158 510 -879 -350 705',
74: 1:    '-961 908 -769 980 407 -651 550 671 -996 215',
74: 1:    '483 -83 -229 -373 -812 335 -802',
74: 1:    '-968 -692 -566 -31 333 831 81 -476 828 -232',
74: 1:    '4 5 29 54 4 0 -214 542 -64 1 -3 6 -6'
74: 1:  ]
74: 1:}
74: 1:Scores: 770
74: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even', 'even', 'even', 'odd', 'odd', 'even', 'even', 'odd', 'even', 'even', 'even', 'even', 'odd', 'even', 'even']')
74: 1:Fire Event: PassTest{complexity=6, testCount=26}
74: 1:Fire Event: NextAlgorithm{complexity=6, time=0}
------------------------------------------
75: 1:BoardData {
75: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
75: 1:  'history': [
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '0',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'odd',
75: 1:      'question': '0 1 4',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '0 -1 5',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'odd',
75: 1:      'question': '1 2 3 4 5',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'odd',
75: 1:      'question': '1 2 -3 4 5',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '1 9 3 4 -5',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'odd',
75: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '1 2 3',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'odd',
75: 1:      'question': '1',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'odd',
75: 1:      'question': '-1',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '-1 -1 0',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '1 1 0',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '-1 -1',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '1 -1 0',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'odd',
75: 1:      'question': '10 2 -1 -20',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'odd',
75: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '-983 -111 -332 -973 47 728',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'odd',
75: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '646 261 609 -82 949 526 -449 -594 894',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '-950 909 424 834 -579 -275 -901 444',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '-857 43 444 158 510 -879 -350 705',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '-961 908 -769 980 407 -651 550 671 -996 215',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'odd',
75: 1:      'question': '483 -83 -229 -373 -812 335 -802',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '-968 -692 -566 -31 333 831 81 -476 828 -232',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '4 5 29 54 4 0 -214 542 -64 1 -3 6 -6',
75: 1:      'valid': true
75: 1:    }
75: 1:  ],
75: 1:  'info': [
75: 1:    '✅f(0) = even',
75: 1:    '✅f(0 1 4) = odd',
75: 1:    '✅f(0 -1 5) = even',
75: 1:    '✅f(1 2 3 4 5) = odd',
75: 1:    '✅f(1 2 -3 4 5) = odd',
75: 1:    '✅f(1 9 3 4 -5) = even',
75: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
75: 1:    '✅f(1 2 3) = even',
75: 1:    '✅f(1) = odd',
75: 1:    '✅f(-1) = odd',
75: 1:    '✅f(-1 -1 0) = even',
75: 1:    '✅f(1 1 0) = even',
75: 1:    '✅f(-1 -1) = even',
75: 1:    '✅f(1 -1 0) = even',
75: 1:    '✅f(10 2 -1 -20) = odd',
75: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = odd',
75: 1:    '✅f(-983 -111 -332 -973 47 728) = even',
75: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = even',
75: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = odd',
75: 1:    '✅f(646 261 609 -82 949 526 -449 -594 894) = even',
75: 1:    '✅f(-950 909 424 834 -579 -275 -901 444) = even',
75: 1:    '✅f(-857 43 444 158 510 -879 -350 705) = even',
75: 1:    '✅f(-961 908 -769 980 407 -651 550 671 -996 215) = even',
75: 1:    '✅f(483 -83 -229 -373 -812 335 -802) = odd',
75: 1:    '✅f(-968 -692 -566 -31 333 831 81 -476 828 -232) = even',
75: 1:    '✅f(4 5 29 54 4 0 -214 542 -64 1 -3 6 -6) = even'
75: 1:  ],
75: 1:  'level': 2,
75: 1:  'questions': []
75: 1:}
75: 1:Scores: 1581
75: 1:Answer: message('StartNextLevel')
75: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
76: 1:BoardData {
76: 1:  'description': [
76: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
76: 1:    'Write a javascript method.',
76: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
76: 1:    'Use regular expressions to solve this problem.'
76: 1:  ],
76: 1:  'expectedAnswer': 'SSttrriinngg',
76: 1:  'history': [],
76: 1:  'info': ['❌f(String) = ??? != SSttrriinngg'],
76: 1:  'level': 3,
76: 1:  'nextQuestion': 'String',
76: 1:  'questions': ['String']
76: 1:}
76: 1:Scores: 1581
76: 1:Answer: message('['SSttrriinngg']')
76: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
77: 1:BoardData {
77: 1:  'description': [
77: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
77: 1:    'Write a javascript method.',
77: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
77: 1:    'Use regular expressions to solve this problem.'
77: 1:  ],
77: 1:  'expectedAnswer': 'HHeelllloo  WWoorrlldd',
77: 1:  'history': [{
77: 1:    'answer': 'SSttrriinngg',
77: 1:    'question': 'String',
77: 1:    'valid': true
77: 1:  }],
77: 1:  'info': [
77: 1:    '✅f(String) = SSttrriinngg',
77: 1:    '❌f(Hello World) = ??? != HHeelllloo  WWoorrlldd'
77: 1:  ],
77: 1:  'level': 3,
77: 1:  'nextQuestion': 'Hello World',
77: 1:  'questions': [
77: 1:    'String',
77: 1:    'Hello World'
77: 1:  ]
77: 1:}
77: 1:Scores: 1582
77: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd']')
77: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
78: 1:BoardData {
78: 1:  'description': [
78: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
78: 1:    'Write a javascript method.',
78: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
78: 1:    'Use regular expressions to solve this problem.'
78: 1:  ],
78: 1:  'expectedAnswer': '11223344!!__  ',
78: 1:  'history': [
78: 1:    {
78: 1:      'answer': 'SSttrriinngg',
78: 1:      'question': 'String',
78: 1:      'valid': true
78: 1:    },
78: 1:    {
78: 1:      'answer': 'HHeelllloo  WWoorrlldd',
78: 1:      'question': 'Hello World',
78: 1:      'valid': true
78: 1:    }
78: 1:  ],
78: 1:  'info': [
78: 1:    '✅f(String) = SSttrriinngg',
78: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
78: 1:    '❌f(1234!_ ) = ??? != 11223344!!__  '
78: 1:  ],
78: 1:  'level': 3,
78: 1:  'nextQuestion': '1234!_ ',
78: 1:  'questions': [
78: 1:    'String',
78: 1:    'Hello World',
78: 1:    '1234!_ '
78: 1:  ]
78: 1:}
78: 1:Scores: 1583
78: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ']')
78: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
79: 1:BoardData {
79: 1:  'description': [
79: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
79: 1:    'Write a javascript method.',
79: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
79: 1:    'Use regular expressions to solve this problem.'
79: 1:  ],
79: 1:  'expectedAnswer': '________  __  __  ____  ______  __  ________  ',
79: 1:  'history': [
79: 1:    {
79: 1:      'answer': 'SSttrriinngg',
79: 1:      'question': 'String',
79: 1:      'valid': true
79: 1:    },
79: 1:    {
79: 1:      'answer': 'HHeelllloo  WWoorrlldd',
79: 1:      'question': 'Hello World',
79: 1:      'valid': true
79: 1:    },
79: 1:    {
79: 1:      'answer': '11223344!!__  ',
79: 1:      'question': '1234!_ ',
79: 1:      'valid': true
79: 1:    }
79: 1:  ],
79: 1:  'info': [
79: 1:    '✅f(String) = SSttrriinngg',
79: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
79: 1:    '✅f(1234!_ ) = 11223344!!__  ',
79: 1:    '❌f(____ _ _ __ ___ _ ____ ) = ??? != ________  __  __  ____  ______  __  ________  '
79: 1:  ],
79: 1:  'level': 3,
79: 1:  'nextQuestion': '____ _ _ __ ___ _ ____ ',
79: 1:  'questions': [
79: 1:    'String',
79: 1:    'Hello World',
79: 1:    '1234!_ ',
79: 1:    '____ _ _ __ ___ _ ____ '
79: 1:  ]
79: 1:}
79: 1:Scores: 1584
79: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ']')
79: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
80: 1:BoardData {
80: 1:  'description': [
80: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
80: 1:    'Write a javascript method.',
80: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
80: 1:    'Use regular expressions to solve this problem.'
80: 1:  ],
80: 1:  'expectedAnswer': '((--__--))',
80: 1:  'history': [
80: 1:    {
80: 1:      'answer': 'SSttrriinngg',
80: 1:      'question': 'String',
80: 1:      'valid': true
80: 1:    },
80: 1:    {
80: 1:      'answer': 'HHeelllloo  WWoorrlldd',
80: 1:      'question': 'Hello World',
80: 1:      'valid': true
80: 1:    },
80: 1:    {
80: 1:      'answer': '11223344!!__  ',
80: 1:      'question': '1234!_ ',
80: 1:      'valid': true
80: 1:    },
80: 1:    {
80: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
80: 1:      'question': '____ _ _ __ ___ _ ____ ',
80: 1:      'valid': true
80: 1:    }
80: 1:  ],
80: 1:  'info': [
80: 1:    '✅f(String) = SSttrriinngg',
80: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
80: 1:    '✅f(1234!_ ) = 11223344!!__  ',
80: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
80: 1:    '❌f((-_-)) = ??? != ((--__--))'
80: 1:  ],
80: 1:  'level': 3,
80: 1:  'nextQuestion': '(-_-)',
80: 1:  'questions': [
80: 1:    'String',
80: 1:    'Hello World',
80: 1:    '1234!_ ',
80: 1:    '____ _ _ __ ___ _ ____ ',
80: 1:    '(-_-)'
80: 1:  ]
80: 1:}
80: 1:Scores: 1585
80: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))']')
80: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
81: 1:BoardData {
81: 1:  'description': [
81: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
81: 1:    'Write a javascript method.',
81: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
81: 1:    'Use regular expressions to solve this problem.'
81: 1:  ],
81: 1:  'expectedAnswer': '112233445566',
81: 1:  'history': [
81: 1:    {
81: 1:      'answer': 'SSttrriinngg',
81: 1:      'question': 'String',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': 'HHeelllloo  WWoorrlldd',
81: 1:      'question': 'Hello World',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': '11223344!!__  ',
81: 1:      'question': '1234!_ ',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
81: 1:      'question': '____ _ _ __ ___ _ ____ ',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': '((--__--))',
81: 1:      'question': '(-_-)',
81: 1:      'valid': true
81: 1:    }
81: 1:  ],
81: 1:  'info': [
81: 1:    '✅f(String) = SSttrriinngg',
81: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
81: 1:    '✅f(1234!_ ) = 11223344!!__  ',
81: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
81: 1:    '✅f((-_-)) = ((--__--))',
81: 1:    '❌f(123456) = ??? != 112233445566'
81: 1:  ],
81: 1:  'level': 3,
81: 1:  'nextQuestion': '123456',
81: 1:  'questions': [
81: 1:    'String',
81: 1:    'Hello World',
81: 1:    '1234!_ ',
81: 1:    '____ _ _ __ ___ _ ____ ',
81: 1:    '(-_-)',
81: 1:    '123456'
81: 1:  ]
81: 1:}
81: 1:Scores: 1586
81: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566']')
81: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
82: 1:BoardData {
82: 1:  'description': [
82: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
82: 1:    'Write a javascript method.',
82: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
82: 1:    'Use regular expressions to solve this problem.'
82: 1:  ],
82: 1:  'expectedAnswer': 'SSccrruubb  LLoorrddss',
82: 1:  'history': [
82: 1:    {
82: 1:      'answer': 'SSttrriinngg',
82: 1:      'question': 'String',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': 'HHeelllloo  WWoorrlldd',
82: 1:      'question': 'Hello World',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '11223344!!__  ',
82: 1:      'question': '1234!_ ',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
82: 1:      'question': '____ _ _ __ ___ _ ____ ',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '((--__--))',
82: 1:      'question': '(-_-)',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '112233445566',
82: 1:      'question': '123456',
82: 1:      'valid': true
82: 1:    }
82: 1:  ],
82: 1:  'info': [
82: 1:    '✅f(String) = SSttrriinngg',
82: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
82: 1:    '✅f(1234!_ ) = 11223344!!__  ',
82: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
82: 1:    '✅f((-_-)) = ((--__--))',
82: 1:    '✅f(123456) = 112233445566',
82: 1:    '❌f(Scrub Lords) = ??? != SSccrruubb  LLoorrddss'
82: 1:  ],
82: 1:  'level': 3,
82: 1:  'nextQuestion': 'Scrub Lords',
82: 1:  'questions': [
82: 1:    'String',
82: 1:    'Hello World',
82: 1:    '1234!_ ',
82: 1:    '____ _ _ __ ___ _ ____ ',
82: 1:    '(-_-)',
82: 1:    '123456',
82: 1:    'Scrub Lords'
82: 1:  ]
82: 1:}
82: 1:Scores: 1587
82: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss']')
82: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
83: 1:BoardData {
83: 1:  'description': [
83: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
83: 1:    'Write a javascript method.',
83: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
83: 1:    'Use regular expressions to solve this problem.'
83: 1:  ],
83: 1:  'expectedAnswer': 'bbrruuhh',
83: 1:  'history': [
83: 1:    {
83: 1:      'answer': 'SSttrriinngg',
83: 1:      'question': 'String',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': 'HHeelllloo  WWoorrlldd',
83: 1:      'question': 'Hello World',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '11223344!!__  ',
83: 1:      'question': '1234!_ ',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
83: 1:      'question': '____ _ _ __ ___ _ ____ ',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '((--__--))',
83: 1:      'question': '(-_-)',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '112233445566',
83: 1:      'question': '123456',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': 'SSccrruubb  LLoorrddss',
83: 1:      'question': 'Scrub Lords',
83: 1:      'valid': true
83: 1:    }
83: 1:  ],
83: 1:  'info': [
83: 1:    '✅f(String) = SSttrriinngg',
83: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
83: 1:    '✅f(1234!_ ) = 11223344!!__  ',
83: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
83: 1:    '✅f((-_-)) = ((--__--))',
83: 1:    '✅f(123456) = 112233445566',
83: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
83: 1:    '❌f(bruh) = ??? != bbrruuhh'
83: 1:  ],
83: 1:  'level': 3,
83: 1:  'nextQuestion': 'bruh',
83: 1:  'questions': [
83: 1:    'String',
83: 1:    'Hello World',
83: 1:    '1234!_ ',
83: 1:    '____ _ _ __ ___ _ ____ ',
83: 1:    '(-_-)',
83: 1:    '123456',
83: 1:    'Scrub Lords',
83: 1:    'bruh'
83: 1:  ]
83: 1:}
83: 1:Scores: 1588
83: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh']')
83: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
84: 1:BoardData {
84: 1:  'description': [
84: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
84: 1:    'Write a javascript method.',
84: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
84: 1:    'Use regular expressions to solve this problem.'
84: 1:  ],
84: 1:  'expectedAnswer': 'iilllluummiinnaattii',
84: 1:  'history': [
84: 1:    {
84: 1:      'answer': 'SSttrriinngg',
84: 1:      'question': 'String',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': 'HHeelllloo  WWoorrlldd',
84: 1:      'question': 'Hello World',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '11223344!!__  ',
84: 1:      'question': '1234!_ ',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
84: 1:      'question': '____ _ _ __ ___ _ ____ ',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '((--__--))',
84: 1:      'question': '(-_-)',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '112233445566',
84: 1:      'question': '123456',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': 'SSccrruubb  LLoorrddss',
84: 1:      'question': 'Scrub Lords',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': 'bbrruuhh',
84: 1:      'question': 'bruh',
84: 1:      'valid': true
84: 1:    }
84: 1:  ],
84: 1:  'info': [
84: 1:    '✅f(String) = SSttrriinngg',
84: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
84: 1:    '✅f(1234!_ ) = 11223344!!__  ',
84: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
84: 1:    '✅f((-_-)) = ((--__--))',
84: 1:    '✅f(123456) = 112233445566',
84: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
84: 1:    '✅f(bruh) = bbrruuhh',
84: 1:    '❌f(illuminati) = ??? != iilllluummiinnaattii'
84: 1:  ],
84: 1:  'level': 3,
84: 1:  'nextQuestion': 'illuminati',
84: 1:  'questions': [
84: 1:    'String',
84: 1:    'Hello World',
84: 1:    '1234!_ ',
84: 1:    '____ _ _ __ ___ _ ____ ',
84: 1:    '(-_-)',
84: 1:    '123456',
84: 1:    'Scrub Lords',
84: 1:    'bruh',
84: 1:    'illuminati'
84: 1:  ]
84: 1:}
84: 1:Scores: 1589
84: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii']')
84: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
85: 1:BoardData {
85: 1:  'description': [
85: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
85: 1:    'Write a javascript method.',
85: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
85: 1:    'Use regular expressions to solve this problem.'
85: 1:  ],
85: 1:  'expectedAnswer': 'AAddiiddaass',
85: 1:  'history': [
85: 1:    {
85: 1:      'answer': 'SSttrriinngg',
85: 1:      'question': 'String',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': 'HHeelllloo  WWoorrlldd',
85: 1:      'question': 'Hello World',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '11223344!!__  ',
85: 1:      'question': '1234!_ ',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
85: 1:      'question': '____ _ _ __ ___ _ ____ ',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '((--__--))',
85: 1:      'question': '(-_-)',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '112233445566',
85: 1:      'question': '123456',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': 'SSccrruubb  LLoorrddss',
85: 1:      'question': 'Scrub Lords',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': 'bbrruuhh',
85: 1:      'question': 'bruh',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': 'iilllluummiinnaattii',
85: 1:      'question': 'illuminati',
85: 1:      'valid': true
85: 1:    }
85: 1:  ],
85: 1:  'info': [
85: 1:    '✅f(String) = SSttrriinngg',
85: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
85: 1:    '✅f(1234!_ ) = 11223344!!__  ',
85: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
85: 1:    '✅f((-_-)) = ((--__--))',
85: 1:    '✅f(123456) = 112233445566',
85: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
85: 1:    '✅f(bruh) = bbrruuhh',
85: 1:    '✅f(illuminati) = iilllluummiinnaattii',
85: 1:    '❌f(Adidas) = ??? != AAddiiddaass'
85: 1:  ],
85: 1:  'level': 3,
85: 1:  'nextQuestion': 'Adidas',
85: 1:  'questions': [
85: 1:    'String',
85: 1:    'Hello World',
85: 1:    '1234!_ ',
85: 1:    '____ _ _ __ ___ _ ____ ',
85: 1:    '(-_-)',
85: 1:    '123456',
85: 1:    'Scrub Lords',
85: 1:    'bruh',
85: 1:    'illuminati',
85: 1:    'Adidas'
85: 1:  ]
85: 1:}
85: 1:Scores: 1590
85: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass']')
85: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
86: 1:BoardData {
86: 1:  'description': [
86: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
86: 1:    'Write a javascript method.',
86: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
86: 1:    'Use regular expressions to solve this problem.'
86: 1:  ],
86: 1:  'expectedAnswer': '!!##%%GG##DDGGYY^^RRCC',
86: 1:  'history': [
86: 1:    {
86: 1:      'answer': 'SSttrriinngg',
86: 1:      'question': 'String',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': 'HHeelllloo  WWoorrlldd',
86: 1:      'question': 'Hello World',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '11223344!!__  ',
86: 1:      'question': '1234!_ ',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
86: 1:      'question': '____ _ _ __ ___ _ ____ ',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '((--__--))',
86: 1:      'question': '(-_-)',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '112233445566',
86: 1:      'question': '123456',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': 'SSccrruubb  LLoorrddss',
86: 1:      'question': 'Scrub Lords',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': 'bbrruuhh',
86: 1:      'question': 'bruh',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': 'iilllluummiinnaattii',
86: 1:      'question': 'illuminati',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': 'AAddiiddaass',
86: 1:      'question': 'Adidas',
86: 1:      'valid': true
86: 1:    }
86: 1:  ],
86: 1:  'info': [
86: 1:    '✅f(String) = SSttrriinngg',
86: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
86: 1:    '✅f(1234!_ ) = 11223344!!__  ',
86: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
86: 1:    '✅f((-_-)) = ((--__--))',
86: 1:    '✅f(123456) = 112233445566',
86: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
86: 1:    '✅f(bruh) = bbrruuhh',
86: 1:    '✅f(illuminati) = iilllluummiinnaattii',
86: 1:    '✅f(Adidas) = AAddiiddaass',
86: 1:    '❌f(!#%G#DGY^RC) = ??? != !!##%%GG##DDGGYY^^RRCC'
86: 1:  ],
86: 1:  'level': 3,
86: 1:  'nextQuestion': '!#%G#DGY^RC',
86: 1:  'questions': [
86: 1:    'String',
86: 1:    'Hello World',
86: 1:    '1234!_ ',
86: 1:    '____ _ _ __ ___ _ ____ ',
86: 1:    '(-_-)',
86: 1:    '123456',
86: 1:    'Scrub Lords',
86: 1:    'bruh',
86: 1:    'illuminati',
86: 1:    'Adidas',
86: 1:    '!#%G#DGY^RC'
86: 1:  ]
86: 1:}
86: 1:Scores: 1591
86: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC']')
86: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
87: 1:BoardData {
87: 1:  'description': [
87: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
87: 1:    'Write a javascript method.',
87: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
87: 1:    'Use regular expressions to solve this problem.'
87: 1:  ],
87: 1:  'expectedAnswer': 'DDoonnaalldd  DDuucckk',
87: 1:  'history': [
87: 1:    {
87: 1:      'answer': 'SSttrriinngg',
87: 1:      'question': 'String',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': 'HHeelllloo  WWoorrlldd',
87: 1:      'question': 'Hello World',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '11223344!!__  ',
87: 1:      'question': '1234!_ ',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
87: 1:      'question': '____ _ _ __ ___ _ ____ ',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '((--__--))',
87: 1:      'question': '(-_-)',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '112233445566',
87: 1:      'question': '123456',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': 'SSccrruubb  LLoorrddss',
87: 1:      'question': 'Scrub Lords',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': 'bbrruuhh',
87: 1:      'question': 'bruh',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': 'iilllluummiinnaattii',
87: 1:      'question': 'illuminati',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': 'AAddiiddaass',
87: 1:      'question': 'Adidas',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
87: 1:      'question': '!#%G#DGY^RC',
87: 1:      'valid': true
87: 1:    }
87: 1:  ],
87: 1:  'info': [
87: 1:    '✅f(String) = SSttrriinngg',
87: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
87: 1:    '✅f(1234!_ ) = 11223344!!__  ',
87: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
87: 1:    '✅f((-_-)) = ((--__--))',
87: 1:    '✅f(123456) = 112233445566',
87: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
87: 1:    '✅f(bruh) = bbrruuhh',
87: 1:    '✅f(illuminati) = iilllluummiinnaattii',
87: 1:    '✅f(Adidas) = AAddiiddaass',
87: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
87: 1:    '❌f(Donald Duck) = ??? != DDoonnaalldd  DDuucckk'
87: 1:  ],
87: 1:  'level': 3,
87: 1:  'nextQuestion': 'Donald Duck',
87: 1:  'questions': [
87: 1:    'String',
87: 1:    'Hello World',
87: 1:    '1234!_ ',
87: 1:    '____ _ _ __ ___ _ ____ ',
87: 1:    '(-_-)',
87: 1:    '123456',
87: 1:    'Scrub Lords',
87: 1:    'bruh',
87: 1:    'illuminati',
87: 1:    'Adidas',
87: 1:    '!#%G#DGY^RC',
87: 1:    'Donald Duck'
87: 1:  ]
87: 1:}
87: 1:Scores: 1592
87: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk']')
87: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
88: 1:BoardData {
88: 1:  'description': [
88: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
88: 1:    'Write a javascript method.',
88: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
88: 1:    'Use regular expressions to solve this problem.'
88: 1:  ],
88: 1:  'expectedAnswer': 'KKaannyyee  22002200',
88: 1:  'history': [
88: 1:    {
88: 1:      'answer': 'SSttrriinngg',
88: 1:      'question': 'String',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': 'HHeelllloo  WWoorrlldd',
88: 1:      'question': 'Hello World',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '11223344!!__  ',
88: 1:      'question': '1234!_ ',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
88: 1:      'question': '____ _ _ __ ___ _ ____ ',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '((--__--))',
88: 1:      'question': '(-_-)',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '112233445566',
88: 1:      'question': '123456',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': 'SSccrruubb  LLoorrddss',
88: 1:      'question': 'Scrub Lords',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': 'bbrruuhh',
88: 1:      'question': 'bruh',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': 'iilllluummiinnaattii',
88: 1:      'question': 'illuminati',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': 'AAddiiddaass',
88: 1:      'question': 'Adidas',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
88: 1:      'question': '!#%G#DGY^RC',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': 'DDoonnaalldd  DDuucckk',
88: 1:      'question': 'Donald Duck',
88: 1:      'valid': true
88: 1:    }
88: 1:  ],
88: 1:  'info': [
88: 1:    '✅f(String) = SSttrriinngg',
88: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
88: 1:    '✅f(1234!_ ) = 11223344!!__  ',
88: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
88: 1:    '✅f((-_-)) = ((--__--))',
88: 1:    '✅f(123456) = 112233445566',
88: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
88: 1:    '✅f(bruh) = bbrruuhh',
88: 1:    '✅f(illuminati) = iilllluummiinnaattii',
88: 1:    '✅f(Adidas) = AAddiiddaass',
88: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
88: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
88: 1:    '❌f(Kanye 2020) = ??? != KKaannyyee  22002200'
88: 1:  ],
88: 1:  'level': 3,
88: 1:  'nextQuestion': 'Kanye 2020',
88: 1:  'questions': [
88: 1:    'String',
88: 1:    'Hello World',
88: 1:    '1234!_ ',
88: 1:    '____ _ _ __ ___ _ ____ ',
88: 1:    '(-_-)',
88: 1:    '123456',
88: 1:    'Scrub Lords',
88: 1:    'bruh',
88: 1:    'illuminati',
88: 1:    'Adidas',
88: 1:    '!#%G#DGY^RC',
88: 1:    'Donald Duck',
88: 1:    'Kanye 2020'
88: 1:  ]
88: 1:}
88: 1:Scores: 1593
88: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200']')
88: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
89: 1:BoardData {
89: 1:  'description': [
89: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
89: 1:    'Write a javascript method.',
89: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
89: 1:    'Use regular expressions to solve this problem.'
89: 1:  ],
89: 1:  'expectedAnswer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
89: 1:  'history': [
89: 1:    {
89: 1:      'answer': 'SSttrriinngg',
89: 1:      'question': 'String',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': 'HHeelllloo  WWoorrlldd',
89: 1:      'question': 'Hello World',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '11223344!!__  ',
89: 1:      'question': '1234!_ ',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
89: 1:      'question': '____ _ _ __ ___ _ ____ ',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '((--__--))',
89: 1:      'question': '(-_-)',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '112233445566',
89: 1:      'question': '123456',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': 'SSccrruubb  LLoorrddss',
89: 1:      'question': 'Scrub Lords',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': 'bbrruuhh',
89: 1:      'question': 'bruh',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': 'iilllluummiinnaattii',
89: 1:      'question': 'illuminati',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': 'AAddiiddaass',
89: 1:      'question': 'Adidas',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
89: 1:      'question': '!#%G#DGY^RC',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': 'DDoonnaalldd  DDuucckk',
89: 1:      'question': 'Donald Duck',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': 'KKaannyyee  22002200',
89: 1:      'question': 'Kanye 2020',
89: 1:      'valid': true
89: 1:    }
89: 1:  ],
89: 1:  'info': [
89: 1:    '✅f(String) = SSttrriinngg',
89: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
89: 1:    '✅f(1234!_ ) = 11223344!!__  ',
89: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
89: 1:    '✅f((-_-)) = ((--__--))',
89: 1:    '✅f(123456) = 112233445566',
89: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
89: 1:    '✅f(bruh) = bbrruuhh',
89: 1:    '✅f(illuminati) = iilllluummiinnaattii',
89: 1:    '✅f(Adidas) = AAddiiddaass',
89: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
89: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
89: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
89: 1:    '❌f(Bernie Sanders is Bae) = ??? != BBeerrnniiee  SSaannddeerrss  iiss  BBaaee'
89: 1:  ],
89: 1:  'level': 3,
89: 1:  'nextQuestion': 'Bernie Sanders is Bae',
89: 1:  'questions': [
89: 1:    'String',
89: 1:    'Hello World',
89: 1:    '1234!_ ',
89: 1:    '____ _ _ __ ___ _ ____ ',
89: 1:    '(-_-)',
89: 1:    '123456',
89: 1:    'Scrub Lords',
89: 1:    'bruh',
89: 1:    'illuminati',
89: 1:    'Adidas',
89: 1:    '!#%G#DGY^RC',
89: 1:    'Donald Duck',
89: 1:    'Kanye 2020',
89: 1:    'Bernie Sanders is Bae'
89: 1:  ]
89: 1:}
89: 1:Scores: 1594
89: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee']')
89: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
90: 1:BoardData {
90: 1:  'description': [
90: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
90: 1:    'Write a javascript method.',
90: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
90: 1:    'Use regular expressions to solve this problem.'
90: 1:  ],
90: 1:  'expectedAnswer': 'PPeeaannuutt  BBuutttteerr',
90: 1:  'history': [
90: 1:    {
90: 1:      'answer': 'SSttrriinngg',
90: 1:      'question': 'String',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': 'HHeelllloo  WWoorrlldd',
90: 1:      'question': 'Hello World',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '11223344!!__  ',
90: 1:      'question': '1234!_ ',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
90: 1:      'question': '____ _ _ __ ___ _ ____ ',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '((--__--))',
90: 1:      'question': '(-_-)',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '112233445566',
90: 1:      'question': '123456',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': 'SSccrruubb  LLoorrddss',
90: 1:      'question': 'Scrub Lords',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': 'bbrruuhh',
90: 1:      'question': 'bruh',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': 'iilllluummiinnaattii',
90: 1:      'question': 'illuminati',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': 'AAddiiddaass',
90: 1:      'question': 'Adidas',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
90: 1:      'question': '!#%G#DGY^RC',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': 'DDoonnaalldd  DDuucckk',
90: 1:      'question': 'Donald Duck',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': 'KKaannyyee  22002200',
90: 1:      'question': 'Kanye 2020',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
90: 1:      'question': 'Bernie Sanders is Bae',
90: 1:      'valid': true
90: 1:    }
90: 1:  ],
90: 1:  'info': [
90: 1:    '✅f(String) = SSttrriinngg',
90: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
90: 1:    '✅f(1234!_ ) = 11223344!!__  ',
90: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
90: 1:    '✅f((-_-)) = ((--__--))',
90: 1:    '✅f(123456) = 112233445566',
90: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
90: 1:    '✅f(bruh) = bbrruuhh',
90: 1:    '✅f(illuminati) = iilllluummiinnaattii',
90: 1:    '✅f(Adidas) = AAddiiddaass',
90: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
90: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
90: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
90: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
90: 1:    '❌f(Peanut Butter) = ??? != PPeeaannuutt  BBuutttteerr'
90: 1:  ],
90: 1:  'level': 3,
90: 1:  'nextQuestion': 'Peanut Butter',
90: 1:  'questions': [
90: 1:    'String',
90: 1:    'Hello World',
90: 1:    '1234!_ ',
90: 1:    '____ _ _ __ ___ _ ____ ',
90: 1:    '(-_-)',
90: 1:    '123456',
90: 1:    'Scrub Lords',
90: 1:    'bruh',
90: 1:    'illuminati',
90: 1:    'Adidas',
90: 1:    '!#%G#DGY^RC',
90: 1:    'Donald Duck',
90: 1:    'Kanye 2020',
90: 1:    'Bernie Sanders is Bae',
90: 1:    'Peanut Butter'
90: 1:  ]
90: 1:}
90: 1:Scores: 1595
90: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr']')
90: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
91: 1:BoardData {
91: 1:  'description': [
91: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
91: 1:    'Write a javascript method.',
91: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
91: 1:    'Use regular expressions to solve this problem.'
91: 1:  ],
91: 1:  'expectedAnswer': '11333377',
91: 1:  'history': [
91: 1:    {
91: 1:      'answer': 'SSttrriinngg',
91: 1:      'question': 'String',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': 'HHeelllloo  WWoorrlldd',
91: 1:      'question': 'Hello World',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '11223344!!__  ',
91: 1:      'question': '1234!_ ',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
91: 1:      'question': '____ _ _ __ ___ _ ____ ',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '((--__--))',
91: 1:      'question': '(-_-)',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '112233445566',
91: 1:      'question': '123456',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': 'SSccrruubb  LLoorrddss',
91: 1:      'question': 'Scrub Lords',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': 'bbrruuhh',
91: 1:      'question': 'bruh',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': 'iilllluummiinnaattii',
91: 1:      'question': 'illuminati',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': 'AAddiiddaass',
91: 1:      'question': 'Adidas',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
91: 1:      'question': '!#%G#DGY^RC',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': 'DDoonnaalldd  DDuucckk',
91: 1:      'question': 'Donald Duck',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': 'KKaannyyee  22002200',
91: 1:      'question': 'Kanye 2020',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
91: 1:      'question': 'Bernie Sanders is Bae',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
91: 1:      'question': 'Peanut Butter',
91: 1:      'valid': true
91: 1:    }
91: 1:  ],
91: 1:  'info': [
91: 1:    '✅f(String) = SSttrriinngg',
91: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
91: 1:    '✅f(1234!_ ) = 11223344!!__  ',
91: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
91: 1:    '✅f((-_-)) = ((--__--))',
91: 1:    '✅f(123456) = 112233445566',
91: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
91: 1:    '✅f(bruh) = bbrruuhh',
91: 1:    '✅f(illuminati) = iilllluummiinnaattii',
91: 1:    '✅f(Adidas) = AAddiiddaass',
91: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
91: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
91: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
91: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
91: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
91: 1:    '❌f(1337) = ??? != 11333377'
91: 1:  ],
91: 1:  'level': 3,
91: 1:  'nextQuestion': '1337',
91: 1:  'questions': [
91: 1:    'String',
91: 1:    'Hello World',
91: 1:    '1234!_ ',
91: 1:    '____ _ _ __ ___ _ ____ ',
91: 1:    '(-_-)',
91: 1:    '123456',
91: 1:    'Scrub Lords',
91: 1:    'bruh',
91: 1:    'illuminati',
91: 1:    'Adidas',
91: 1:    '!#%G#DGY^RC',
91: 1:    'Donald Duck',
91: 1:    'Kanye 2020',
91: 1:    'Bernie Sanders is Bae',
91: 1:    'Peanut Butter',
91: 1:    '1337'
91: 1:  ]
91: 1:}
91: 1:Scores: 1596
91: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377']')
91: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
92: 1:BoardData {
92: 1:  'description': [
92: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
92: 1:    'Write a javascript method.',
92: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
92: 1:    'Use regular expressions to solve this problem.'
92: 1:  ],
92: 1:  'expectedAnswer': 'hh**oo@@DD77aann&&  aa',
92: 1:  'history': [
92: 1:    {
92: 1:      'answer': 'SSttrriinngg',
92: 1:      'question': 'String',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': 'HHeelllloo  WWoorrlldd',
92: 1:      'question': 'Hello World',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '11223344!!__  ',
92: 1:      'question': '1234!_ ',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
92: 1:      'question': '____ _ _ __ ___ _ ____ ',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '((--__--))',
92: 1:      'question': '(-_-)',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '112233445566',
92: 1:      'question': '123456',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': 'SSccrruubb  LLoorrddss',
92: 1:      'question': 'Scrub Lords',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': 'bbrruuhh',
92: 1:      'question': 'bruh',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': 'iilllluummiinnaattii',
92: 1:      'question': 'illuminati',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': 'AAddiiddaass',
92: 1:      'question': 'Adidas',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
92: 1:      'question': '!#%G#DGY^RC',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': 'DDoonnaalldd  DDuucckk',
92: 1:      'question': 'Donald Duck',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': 'KKaannyyee  22002200',
92: 1:      'question': 'Kanye 2020',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
92: 1:      'question': 'Bernie Sanders is Bae',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
92: 1:      'question': 'Peanut Butter',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '11333377',
92: 1:      'question': '1337',
92: 1:      'valid': true
92: 1:    }
92: 1:  ],
92: 1:  'info': [
92: 1:    '✅f(String) = SSttrriinngg',
92: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
92: 1:    '✅f(1234!_ ) = 11223344!!__  ',
92: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
92: 1:    '✅f((-_-)) = ((--__--))',
92: 1:    '✅f(123456) = 112233445566',
92: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
92: 1:    '✅f(bruh) = bbrruuhh',
92: 1:    '✅f(illuminati) = iilllluummiinnaattii',
92: 1:    '✅f(Adidas) = AAddiiddaass',
92: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
92: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
92: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
92: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
92: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
92: 1:    '✅f(1337) = 11333377',
92: 1:    '❌f(h*o@D7an& a) = ??? != hh**oo@@DD77aann&&  aa'
92: 1:  ],
92: 1:  'level': 3,
92: 1:  'nextQuestion': 'h*o@D7an& a',
92: 1:  'questions': [
92: 1:    'String',
92: 1:    'Hello World',
92: 1:    '1234!_ ',
92: 1:    '____ _ _ __ ___ _ ____ ',
92: 1:    '(-_-)',
92: 1:    '123456',
92: 1:    'Scrub Lords',
92: 1:    'bruh',
92: 1:    'illuminati',
92: 1:    'Adidas',
92: 1:    '!#%G#DGY^RC',
92: 1:    'Donald Duck',
92: 1:    'Kanye 2020',
92: 1:    'Bernie Sanders is Bae',
92: 1:    'Peanut Butter',
92: 1:    '1337',
92: 1:    'h*o@D7an& a'
92: 1:  ]
92: 1:}
92: 1:Scores: 1597
92: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa']')
92: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
93: 1:BoardData {
93: 1:  'description': [
93: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
93: 1:    'Write a javascript method.',
93: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
93: 1:    'Use regular expressions to solve this problem.'
93: 1:  ],
93: 1:  'expectedAnswer': 'YY!!SS4477YY  @@',
93: 1:  'history': [
93: 1:    {
93: 1:      'answer': 'SSttrriinngg',
93: 1:      'question': 'String',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': 'HHeelllloo  WWoorrlldd',
93: 1:      'question': 'Hello World',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '11223344!!__  ',
93: 1:      'question': '1234!_ ',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
93: 1:      'question': '____ _ _ __ ___ _ ____ ',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '((--__--))',
93: 1:      'question': '(-_-)',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '112233445566',
93: 1:      'question': '123456',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': 'SSccrruubb  LLoorrddss',
93: 1:      'question': 'Scrub Lords',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': 'bbrruuhh',
93: 1:      'question': 'bruh',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': 'iilllluummiinnaattii',
93: 1:      'question': 'illuminati',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': 'AAddiiddaass',
93: 1:      'question': 'Adidas',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
93: 1:      'question': '!#%G#DGY^RC',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': 'DDoonnaalldd  DDuucckk',
93: 1:      'question': 'Donald Duck',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': 'KKaannyyee  22002200',
93: 1:      'question': 'Kanye 2020',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
93: 1:      'question': 'Bernie Sanders is Bae',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
93: 1:      'question': 'Peanut Butter',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '11333377',
93: 1:      'question': '1337',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
93: 1:      'question': 'h*o@D7an& a',
93: 1:      'valid': true
93: 1:    }
93: 1:  ],
93: 1:  'info': [
93: 1:    '✅f(String) = SSttrriinngg',
93: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
93: 1:    '✅f(1234!_ ) = 11223344!!__  ',
93: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
93: 1:    '✅f((-_-)) = ((--__--))',
93: 1:    '✅f(123456) = 112233445566',
93: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
93: 1:    '✅f(bruh) = bbrruuhh',
93: 1:    '✅f(illuminati) = iilllluummiinnaattii',
93: 1:    '✅f(Adidas) = AAddiiddaass',
93: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
93: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
93: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
93: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
93: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
93: 1:    '✅f(1337) = 11333377',
93: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
93: 1:    '❌f(Y!S47Y @) = ??? != YY!!SS4477YY  @@'
93: 1:  ],
93: 1:  'level': 3,
93: 1:  'nextQuestion': 'Y!S47Y @',
93: 1:  'questions': [
93: 1:    'String',
93: 1:    'Hello World',
93: 1:    '1234!_ ',
93: 1:    '____ _ _ __ ___ _ ____ ',
93: 1:    '(-_-)',
93: 1:    '123456',
93: 1:    'Scrub Lords',
93: 1:    'bruh',
93: 1:    'illuminati',
93: 1:    'Adidas',
93: 1:    '!#%G#DGY^RC',
93: 1:    'Donald Duck',
93: 1:    'Kanye 2020',
93: 1:    'Bernie Sanders is Bae',
93: 1:    'Peanut Butter',
93: 1:    '1337',
93: 1:    'h*o@D7an& a',
93: 1:    'Y!S47Y @'
93: 1:  ]
93: 1:}
93: 1:Scores: 1598
93: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@']')
93: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
94: 1:BoardData {
94: 1:  'description': [
94: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
94: 1:    'Write a javascript method.',
94: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
94: 1:    'Use regular expressions to solve this problem.'
94: 1:  ],
94: 1:  'expectedAnswer': '..--&&ddFFII88',
94: 1:  'history': [
94: 1:    {
94: 1:      'answer': 'SSttrriinngg',
94: 1:      'question': 'String',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': 'HHeelllloo  WWoorrlldd',
94: 1:      'question': 'Hello World',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '11223344!!__  ',
94: 1:      'question': '1234!_ ',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
94: 1:      'question': '____ _ _ __ ___ _ ____ ',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '((--__--))',
94: 1:      'question': '(-_-)',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '112233445566',
94: 1:      'question': '123456',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': 'SSccrruubb  LLoorrddss',
94: 1:      'question': 'Scrub Lords',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': 'bbrruuhh',
94: 1:      'question': 'bruh',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': 'iilllluummiinnaattii',
94: 1:      'question': 'illuminati',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': 'AAddiiddaass',
94: 1:      'question': 'Adidas',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
94: 1:      'question': '!#%G#DGY^RC',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': 'DDoonnaalldd  DDuucckk',
94: 1:      'question': 'Donald Duck',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': 'KKaannyyee  22002200',
94: 1:      'question': 'Kanye 2020',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
94: 1:      'question': 'Bernie Sanders is Bae',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
94: 1:      'question': 'Peanut Butter',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '11333377',
94: 1:      'question': '1337',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
94: 1:      'question': 'h*o@D7an& a',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': 'YY!!SS4477YY  @@',
94: 1:      'question': 'Y!S47Y @',
94: 1:      'valid': true
94: 1:    }
94: 1:  ],
94: 1:  'info': [
94: 1:    '✅f(String) = SSttrriinngg',
94: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
94: 1:    '✅f(1234!_ ) = 11223344!!__  ',
94: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
94: 1:    '✅f((-_-)) = ((--__--))',
94: 1:    '✅f(123456) = 112233445566',
94: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
94: 1:    '✅f(bruh) = bbrruuhh',
94: 1:    '✅f(illuminati) = iilllluummiinnaattii',
94: 1:    '✅f(Adidas) = AAddiiddaass',
94: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
94: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
94: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
94: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
94: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
94: 1:    '✅f(1337) = 11333377',
94: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
94: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
94: 1:    '❌f(.-&dFI8) = ??? != ..--&&ddFFII88'
94: 1:  ],
94: 1:  'level': 3,
94: 1:  'nextQuestion': '.-&dFI8',
94: 1:  'questions': [
94: 1:    'String',
94: 1:    'Hello World',
94: 1:    '1234!_ ',
94: 1:    '____ _ _ __ ___ _ ____ ',
94: 1:    '(-_-)',
94: 1:    '123456',
94: 1:    'Scrub Lords',
94: 1:    'bruh',
94: 1:    'illuminati',
94: 1:    'Adidas',
94: 1:    '!#%G#DGY^RC',
94: 1:    'Donald Duck',
94: 1:    'Kanye 2020',
94: 1:    'Bernie Sanders is Bae',
94: 1:    'Peanut Butter',
94: 1:    '1337',
94: 1:    'h*o@D7an& a',
94: 1:    'Y!S47Y @',
94: 1:    '.-&dFI8'
94: 1:  ]
94: 1:}
94: 1:Scores: 1599
94: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88']')
94: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
95: 1:BoardData {
95: 1:  'description': [
95: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
95: 1:    'Write a javascript method.',
95: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
95: 1:    'Use regular expressions to solve this problem.'
95: 1:  ],
95: 1:  'expectedAnswer': '!!ZZqq++',
95: 1:  'history': [
95: 1:    {
95: 1:      'answer': 'SSttrriinngg',
95: 1:      'question': 'String',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': 'HHeelllloo  WWoorrlldd',
95: 1:      'question': 'Hello World',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '11223344!!__  ',
95: 1:      'question': '1234!_ ',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
95: 1:      'question': '____ _ _ __ ___ _ ____ ',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '((--__--))',
95: 1:      'question': '(-_-)',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '112233445566',
95: 1:      'question': '123456',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': 'SSccrruubb  LLoorrddss',
95: 1:      'question': 'Scrub Lords',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': 'bbrruuhh',
95: 1:      'question': 'bruh',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': 'iilllluummiinnaattii',
95: 1:      'question': 'illuminati',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': 'AAddiiddaass',
95: 1:      'question': 'Adidas',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
95: 1:      'question': '!#%G#DGY^RC',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': 'DDoonnaalldd  DDuucckk',
95: 1:      'question': 'Donald Duck',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': 'KKaannyyee  22002200',
95: 1:      'question': 'Kanye 2020',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
95: 1:      'question': 'Bernie Sanders is Bae',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
95: 1:      'question': 'Peanut Butter',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '11333377',
95: 1:      'question': '1337',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
95: 1:      'question': 'h*o@D7an& a',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': 'YY!!SS4477YY  @@',
95: 1:      'question': 'Y!S47Y @',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '..--&&ddFFII88',
95: 1:      'question': '.-&dFI8',
95: 1:      'valid': true
95: 1:    }
95: 1:  ],
95: 1:  'info': [
95: 1:    '✅f(String) = SSttrriinngg',
95: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
95: 1:    '✅f(1234!_ ) = 11223344!!__  ',
95: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
95: 1:    '✅f((-_-)) = ((--__--))',
95: 1:    '✅f(123456) = 112233445566',
95: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
95: 1:    '✅f(bruh) = bbrruuhh',
95: 1:    '✅f(illuminati) = iilllluummiinnaattii',
95: 1:    '✅f(Adidas) = AAddiiddaass',
95: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
95: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
95: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
95: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
95: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
95: 1:    '✅f(1337) = 11333377',
95: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
95: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
95: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
95: 1:    '❌f(!Zq+) = ??? != !!ZZqq++'
95: 1:  ],
95: 1:  'level': 3,
95: 1:  'nextQuestion': '!Zq+',
95: 1:  'questions': [
95: 1:    'String',
95: 1:    'Hello World',
95: 1:    '1234!_ ',
95: 1:    '____ _ _ __ ___ _ ____ ',
95: 1:    '(-_-)',
95: 1:    '123456',
95: 1:    'Scrub Lords',
95: 1:    'bruh',
95: 1:    'illuminati',
95: 1:    'Adidas',
95: 1:    '!#%G#DGY^RC',
95: 1:    'Donald Duck',
95: 1:    'Kanye 2020',
95: 1:    'Bernie Sanders is Bae',
95: 1:    'Peanut Butter',
95: 1:    '1337',
95: 1:    'h*o@D7an& a',
95: 1:    'Y!S47Y @',
95: 1:    '.-&dFI8',
95: 1:    '!Zq+'
95: 1:  ]
95: 1:}
95: 1:Scores: 1600
95: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++']')
95: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
96: 1:BoardData {
96: 1:  'description': [
96: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
96: 1:    'Write a javascript method.',
96: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
96: 1:    'Use regular expressions to solve this problem.'
96: 1:  ],
96: 1:  'expectedAnswer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
96: 1:  'history': [
96: 1:    {
96: 1:      'answer': 'SSttrriinngg',
96: 1:      'question': 'String',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': 'HHeelllloo  WWoorrlldd',
96: 1:      'question': 'Hello World',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '11223344!!__  ',
96: 1:      'question': '1234!_ ',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
96: 1:      'question': '____ _ _ __ ___ _ ____ ',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '((--__--))',
96: 1:      'question': '(-_-)',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '112233445566',
96: 1:      'question': '123456',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': 'SSccrruubb  LLoorrddss',
96: 1:      'question': 'Scrub Lords',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': 'bbrruuhh',
96: 1:      'question': 'bruh',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': 'iilllluummiinnaattii',
96: 1:      'question': 'illuminati',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': 'AAddiiddaass',
96: 1:      'question': 'Adidas',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
96: 1:      'question': '!#%G#DGY^RC',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': 'DDoonnaalldd  DDuucckk',
96: 1:      'question': 'Donald Duck',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': 'KKaannyyee  22002200',
96: 1:      'question': 'Kanye 2020',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
96: 1:      'question': 'Bernie Sanders is Bae',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
96: 1:      'question': 'Peanut Butter',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '11333377',
96: 1:      'question': '1337',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
96: 1:      'question': 'h*o@D7an& a',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': 'YY!!SS4477YY  @@',
96: 1:      'question': 'Y!S47Y @',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '..--&&ddFFII88',
96: 1:      'question': '.-&dFI8',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '!!ZZqq++',
96: 1:      'question': '!Zq+',
96: 1:      'valid': true
96: 1:    }
96: 1:  ],
96: 1:  'info': [
96: 1:    '✅f(String) = SSttrriinngg',
96: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
96: 1:    '✅f(1234!_ ) = 11223344!!__  ',
96: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
96: 1:    '✅f((-_-)) = ((--__--))',
96: 1:    '✅f(123456) = 112233445566',
96: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
96: 1:    '✅f(bruh) = bbrruuhh',
96: 1:    '✅f(illuminati) = iilllluummiinnaattii',
96: 1:    '✅f(Adidas) = AAddiiddaass',
96: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
96: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
96: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
96: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
96: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
96: 1:    '✅f(1337) = 11333377',
96: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
96: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
96: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
96: 1:    '✅f(!Zq+) = !!ZZqq++',
96: 1:    '❌f(g%;U*!a/[pZ4V3/&) = ??? != gg%%;;UU**!!aa//[[ppZZ44VV33//&&'
96: 1:  ],
96: 1:  'level': 3,
96: 1:  'nextQuestion': 'g%;U*!a/[pZ4V3/&',
96: 1:  'questions': [
96: 1:    'String',
96: 1:    'Hello World',
96: 1:    '1234!_ ',
96: 1:    '____ _ _ __ ___ _ ____ ',
96: 1:    '(-_-)',
96: 1:    '123456',
96: 1:    'Scrub Lords',
96: 1:    'bruh',
96: 1:    'illuminati',
96: 1:    'Adidas',
96: 1:    '!#%G#DGY^RC',
96: 1:    'Donald Duck',
96: 1:    'Kanye 2020',
96: 1:    'Bernie Sanders is Bae',
96: 1:    'Peanut Butter',
96: 1:    '1337',
96: 1:    'h*o@D7an& a',
96: 1:    'Y!S47Y @',
96: 1:    '.-&dFI8',
96: 1:    '!Zq+',
96: 1:    'g%;U*!a/[pZ4V3/&'
96: 1:  ]
96: 1:}
96: 1:Scores: 1601
96: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&']')
96: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
97: 1:BoardData {
97: 1:  'description': [
97: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
97: 1:    'Write a javascript method.',
97: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
97: 1:    'Use regular expressions to solve this problem.'
97: 1:  ],
97: 1:  'expectedAnswer': '77ff55nnFF==::bb88eeoo&&++77',
97: 1:  'history': [
97: 1:    {
97: 1:      'answer': 'SSttrriinngg',
97: 1:      'question': 'String',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': 'HHeelllloo  WWoorrlldd',
97: 1:      'question': 'Hello World',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '11223344!!__  ',
97: 1:      'question': '1234!_ ',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
97: 1:      'question': '____ _ _ __ ___ _ ____ ',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '((--__--))',
97: 1:      'question': '(-_-)',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '112233445566',
97: 1:      'question': '123456',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': 'SSccrruubb  LLoorrddss',
97: 1:      'question': 'Scrub Lords',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': 'bbrruuhh',
97: 1:      'question': 'bruh',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': 'iilllluummiinnaattii',
97: 1:      'question': 'illuminati',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': 'AAddiiddaass',
97: 1:      'question': 'Adidas',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
97: 1:      'question': '!#%G#DGY^RC',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': 'DDoonnaalldd  DDuucckk',
97: 1:      'question': 'Donald Duck',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': 'KKaannyyee  22002200',
97: 1:      'question': 'Kanye 2020',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
97: 1:      'question': 'Bernie Sanders is Bae',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
97: 1:      'question': 'Peanut Butter',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '11333377',
97: 1:      'question': '1337',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
97: 1:      'question': 'h*o@D7an& a',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': 'YY!!SS4477YY  @@',
97: 1:      'question': 'Y!S47Y @',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '..--&&ddFFII88',
97: 1:      'question': '.-&dFI8',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '!!ZZqq++',
97: 1:      'question': '!Zq+',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
97: 1:      'question': 'g%;U*!a/[pZ4V3/&',
97: 1:      'valid': true
97: 1:    }
97: 1:  ],
97: 1:  'info': [
97: 1:    '✅f(String) = SSttrriinngg',
97: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
97: 1:    '✅f(1234!_ ) = 11223344!!__  ',
97: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
97: 1:    '✅f((-_-)) = ((--__--))',
97: 1:    '✅f(123456) = 112233445566',
97: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
97: 1:    '✅f(bruh) = bbrruuhh',
97: 1:    '✅f(illuminati) = iilllluummiinnaattii',
97: 1:    '✅f(Adidas) = AAddiiddaass',
97: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
97: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
97: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
97: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
97: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
97: 1:    '✅f(1337) = 11333377',
97: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
97: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
97: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
97: 1:    '✅f(!Zq+) = !!ZZqq++',
97: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
97: 1:    '❌f(7f5nF=:b8eo&+7) = ??? != 77ff55nnFF==::bb88eeoo&&++77'
97: 1:  ],
97: 1:  'level': 3,
97: 1:  'nextQuestion': '7f5nF=:b8eo&+7',
97: 1:  'questions': [
97: 1:    'String',
97: 1:    'Hello World',
97: 1:    '1234!_ ',
97: 1:    '____ _ _ __ ___ _ ____ ',
97: 1:    '(-_-)',
97: 1:    '123456',
97: 1:    'Scrub Lords',
97: 1:    'bruh',
97: 1:    'illuminati',
97: 1:    'Adidas',
97: 1:    '!#%G#DGY^RC',
97: 1:    'Donald Duck',
97: 1:    'Kanye 2020',
97: 1:    'Bernie Sanders is Bae',
97: 1:    'Peanut Butter',
97: 1:    '1337',
97: 1:    'h*o@D7an& a',
97: 1:    'Y!S47Y @',
97: 1:    '.-&dFI8',
97: 1:    '!Zq+',
97: 1:    'g%;U*!a/[pZ4V3/&',
97: 1:    '7f5nF=:b8eo&+7'
97: 1:  ]
97: 1:}
97: 1:Scores: 1602
97: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77']')
97: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
98: 1:BoardData {
98: 1:  'description': [
98: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
98: 1:    'Write a javascript method.',
98: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
98: 1:    'Use regular expressions to solve this problem.'
98: 1:  ],
98: 1:  'expectedAnswer': '**22SSNNmm##LLoo&&YY',
98: 1:  'history': [
98: 1:    {
98: 1:      'answer': 'SSttrriinngg',
98: 1:      'question': 'String',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': 'HHeelllloo  WWoorrlldd',
98: 1:      'question': 'Hello World',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '11223344!!__  ',
98: 1:      'question': '1234!_ ',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
98: 1:      'question': '____ _ _ __ ___ _ ____ ',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '((--__--))',
98: 1:      'question': '(-_-)',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '112233445566',
98: 1:      'question': '123456',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': 'SSccrruubb  LLoorrddss',
98: 1:      'question': 'Scrub Lords',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': 'bbrruuhh',
98: 1:      'question': 'bruh',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': 'iilllluummiinnaattii',
98: 1:      'question': 'illuminati',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': 'AAddiiddaass',
98: 1:      'question': 'Adidas',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
98: 1:      'question': '!#%G#DGY^RC',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': 'DDoonnaalldd  DDuucckk',
98: 1:      'question': 'Donald Duck',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': 'KKaannyyee  22002200',
98: 1:      'question': 'Kanye 2020',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
98: 1:      'question': 'Bernie Sanders is Bae',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
98: 1:      'question': 'Peanut Butter',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '11333377',
98: 1:      'question': '1337',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
98: 1:      'question': 'h*o@D7an& a',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': 'YY!!SS4477YY  @@',
98: 1:      'question': 'Y!S47Y @',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '..--&&ddFFII88',
98: 1:      'question': '.-&dFI8',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '!!ZZqq++',
98: 1:      'question': '!Zq+',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
98: 1:      'question': 'g%;U*!a/[pZ4V3/&',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
98: 1:      'question': '7f5nF=:b8eo&+7',
98: 1:      'valid': true
98: 1:    }
98: 1:  ],
98: 1:  'info': [
98: 1:    '✅f(String) = SSttrriinngg',
98: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
98: 1:    '✅f(1234!_ ) = 11223344!!__  ',
98: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
98: 1:    '✅f((-_-)) = ((--__--))',
98: 1:    '✅f(123456) = 112233445566',
98: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
98: 1:    '✅f(bruh) = bbrruuhh',
98: 1:    '✅f(illuminati) = iilllluummiinnaattii',
98: 1:    '✅f(Adidas) = AAddiiddaass',
98: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
98: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
98: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
98: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
98: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
98: 1:    '✅f(1337) = 11333377',
98: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
98: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
98: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
98: 1:    '✅f(!Zq+) = !!ZZqq++',
98: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
98: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
98: 1:    '❌f(*2SNm#Lo&Y) = ??? != **22SSNNmm##LLoo&&YY'
98: 1:  ],
98: 1:  'level': 3,
98: 1:  'nextQuestion': '*2SNm#Lo&Y',
98: 1:  'questions': [
98: 1:    'String',
98: 1:    'Hello World',
98: 1:    '1234!_ ',
98: 1:    '____ _ _ __ ___ _ ____ ',
98: 1:    '(-_-)',
98: 1:    '123456',
98: 1:    'Scrub Lords',
98: 1:    'bruh',
98: 1:    'illuminati',
98: 1:    'Adidas',
98: 1:    '!#%G#DGY^RC',
98: 1:    'Donald Duck',
98: 1:    'Kanye 2020',
98: 1:    'Bernie Sanders is Bae',
98: 1:    'Peanut Butter',
98: 1:    '1337',
98: 1:    'h*o@D7an& a',
98: 1:    'Y!S47Y @',
98: 1:    '.-&dFI8',
98: 1:    '!Zq+',
98: 1:    'g%;U*!a/[pZ4V3/&',
98: 1:    '7f5nF=:b8eo&+7',
98: 1:    '*2SNm#Lo&Y'
98: 1:  ]
98: 1:}
98: 1:Scores: 1603
98: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY']')
98: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
99: 1:BoardData {
99: 1:  'description': [
99: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
99: 1:    'Write a javascript method.',
99: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
99: 1:    'Use regular expressions to solve this problem.'
99: 1:  ],
99: 1:  'expectedAnswer': '33ZZVVmm',
99: 1:  'history': [
99: 1:    {
99: 1:      'answer': 'SSttrriinngg',
99: 1:      'question': 'String',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': 'HHeelllloo  WWoorrlldd',
99: 1:      'question': 'Hello World',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '11223344!!__  ',
99: 1:      'question': '1234!_ ',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
99: 1:      'question': '____ _ _ __ ___ _ ____ ',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '((--__--))',
99: 1:      'question': '(-_-)',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '112233445566',
99: 1:      'question': '123456',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': 'SSccrruubb  LLoorrddss',
99: 1:      'question': 'Scrub Lords',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': 'bbrruuhh',
99: 1:      'question': 'bruh',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': 'iilllluummiinnaattii',
99: 1:      'question': 'illuminati',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': 'AAddiiddaass',
99: 1:      'question': 'Adidas',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
99: 1:      'question': '!#%G#DGY^RC',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': 'DDoonnaalldd  DDuucckk',
99: 1:      'question': 'Donald Duck',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': 'KKaannyyee  22002200',
99: 1:      'question': 'Kanye 2020',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
99: 1:      'question': 'Bernie Sanders is Bae',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
99: 1:      'question': 'Peanut Butter',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '11333377',
99: 1:      'question': '1337',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
99: 1:      'question': 'h*o@D7an& a',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': 'YY!!SS4477YY  @@',
99: 1:      'question': 'Y!S47Y @',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '..--&&ddFFII88',
99: 1:      'question': '.-&dFI8',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '!!ZZqq++',
99: 1:      'question': '!Zq+',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
99: 1:      'question': 'g%;U*!a/[pZ4V3/&',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
99: 1:      'question': '7f5nF=:b8eo&+7',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '**22SSNNmm##LLoo&&YY',
99: 1:      'question': '*2SNm#Lo&Y',
99: 1:      'valid': true
99: 1:    }
99: 1:  ],
99: 1:  'info': [
99: 1:    '✅f(String) = SSttrriinngg',
99: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
99: 1:    '✅f(1234!_ ) = 11223344!!__  ',
99: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
99: 1:    '✅f((-_-)) = ((--__--))',
99: 1:    '✅f(123456) = 112233445566',
99: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
99: 1:    '✅f(bruh) = bbrruuhh',
99: 1:    '✅f(illuminati) = iilllluummiinnaattii',
99: 1:    '✅f(Adidas) = AAddiiddaass',
99: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
99: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
99: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
99: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
99: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
99: 1:    '✅f(1337) = 11333377',
99: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
99: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
99: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
99: 1:    '✅f(!Zq+) = !!ZZqq++',
99: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
99: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
99: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
99: 1:    '❌f(3ZVm) = ??? != 33ZZVVmm'
99: 1:  ],
99: 1:  'level': 3,
99: 1:  'nextQuestion': '3ZVm',
99: 1:  'questions': [
99: 1:    'String',
99: 1:    'Hello World',
99: 1:    '1234!_ ',
99: 1:    '____ _ _ __ ___ _ ____ ',
99: 1:    '(-_-)',
99: 1:    '123456',
99: 1:    'Scrub Lords',
99: 1:    'bruh',
99: 1:    'illuminati',
99: 1:    'Adidas',
99: 1:    '!#%G#DGY^RC',
99: 1:    'Donald Duck',
99: 1:    'Kanye 2020',
99: 1:    'Bernie Sanders is Bae',
99: 1:    'Peanut Butter',
99: 1:    '1337',
99: 1:    'h*o@D7an& a',
99: 1:    'Y!S47Y @',
99: 1:    '.-&dFI8',
99: 1:    '!Zq+',
99: 1:    'g%;U*!a/[pZ4V3/&',
99: 1:    '7f5nF=:b8eo&+7',
99: 1:    '*2SNm#Lo&Y',
99: 1:    '3ZVm'
99: 1:  ]
99: 1:}
99: 1:Scores: 1604
99: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm']')
99: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
100: 1:BoardData {
100: 1:  'description': [
100: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
100: 1:    'Write a javascript method.',
100: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
100: 1:    'Use regular expressions to solve this problem.'
100: 1:  ],
100: 1:  'expectedAnswer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
100: 1:  'history': [
100: 1:    {
100: 1:      'answer': 'SSttrriinngg',
100: 1:      'question': 'String',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': 'HHeelllloo  WWoorrlldd',
100: 1:      'question': 'Hello World',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '11223344!!__  ',
100: 1:      'question': '1234!_ ',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
100: 1:      'question': '____ _ _ __ ___ _ ____ ',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '((--__--))',
100: 1:      'question': '(-_-)',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '112233445566',
100: 1:      'question': '123456',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': 'SSccrruubb  LLoorrddss',
100: 1:      'question': 'Scrub Lords',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': 'bbrruuhh',
100: 1:      'question': 'bruh',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': 'iilllluummiinnaattii',
100: 1:      'question': 'illuminati',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': 'AAddiiddaass',
100: 1:      'question': 'Adidas',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
100: 1:      'question': '!#%G#DGY^RC',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': 'DDoonnaalldd  DDuucckk',
100: 1:      'question': 'Donald Duck',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': 'KKaannyyee  22002200',
100: 1:      'question': 'Kanye 2020',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
100: 1:      'question': 'Bernie Sanders is Bae',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
100: 1:      'question': 'Peanut Butter',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '11333377',
100: 1:      'question': '1337',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
100: 1:      'question': 'h*o@D7an& a',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': 'YY!!SS4477YY  @@',
100: 1:      'question': 'Y!S47Y @',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '..--&&ddFFII88',
100: 1:      'question': '.-&dFI8',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '!!ZZqq++',
100: 1:      'question': '!Zq+',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
100: 1:      'question': 'g%;U*!a/[pZ4V3/&',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
100: 1:      'question': '7f5nF=:b8eo&+7',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '**22SSNNmm##LLoo&&YY',
100: 1:      'question': '*2SNm#Lo&Y',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '33ZZVVmm',
100: 1:      'question': '3ZVm',
100: 1:      'valid': true
100: 1:    }
100: 1:  ],
100: 1:  'info': [
100: 1:    '✅f(String) = SSttrriinngg',
100: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
100: 1:    '✅f(1234!_ ) = 11223344!!__  ',
100: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
100: 1:    '✅f((-_-)) = ((--__--))',
100: 1:    '✅f(123456) = 112233445566',
100: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
100: 1:    '✅f(bruh) = bbrruuhh',
100: 1:    '✅f(illuminati) = iilllluummiinnaattii',
100: 1:    '✅f(Adidas) = AAddiiddaass',
100: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
100: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
100: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
100: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
100: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
100: 1:    '✅f(1337) = 11333377',
100: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
100: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
100: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
100: 1:    '✅f(!Zq+) = !!ZZqq++',
100: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
100: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
100: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
100: 1:    '✅f(3ZVm) = 33ZZVVmm',
100: 1:    '❌f(]C06*Ec$62o!7][/9) = ??? != ]]CC0066**EEcc$$6622oo!!77]][[//99'
100: 1:  ],
100: 1:  'level': 3,
100: 1:  'nextQuestion': ']C06*Ec$62o!7][/9',
100: 1:  'questions': [
100: 1:    'String',
100: 1:    'Hello World',
100: 1:    '1234!_ ',
100: 1:    '____ _ _ __ ___ _ ____ ',
100: 1:    '(-_-)',
100: 1:    '123456',
100: 1:    'Scrub Lords',
100: 1:    'bruh',
100: 1:    'illuminati',
100: 1:    'Adidas',
100: 1:    '!#%G#DGY^RC',
100: 1:    'Donald Duck',
100: 1:    'Kanye 2020',
100: 1:    'Bernie Sanders is Bae',
100: 1:    'Peanut Butter',
100: 1:    '1337',
100: 1:    'h*o@D7an& a',
100: 1:    'Y!S47Y @',
100: 1:    '.-&dFI8',
100: 1:    '!Zq+',
100: 1:    'g%;U*!a/[pZ4V3/&',
100: 1:    '7f5nF=:b8eo&+7',
100: 1:    '*2SNm#Lo&Y',
100: 1:    '3ZVm',
100: 1:    ']C06*Ec$62o!7][/9'
100: 1:  ]
100: 1:}
100: 1:Scores: 1605
100: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99']')
100: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
101: 1:BoardData {
101: 1:  'description': [
101: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
101: 1:    'Write a javascript method.',
101: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
101: 1:    'Use regular expressions to solve this problem.'
101: 1:  ],
101: 1:  'expectedAnswer': '^^qq%%]]VVooKKhhhh99jj55--',
101: 1:  'history': [
101: 1:    {
101: 1:      'answer': 'SSttrriinngg',
101: 1:      'question': 'String',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': 'HHeelllloo  WWoorrlldd',
101: 1:      'question': 'Hello World',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': '11223344!!__  ',
101: 1:      'question': '1234!_ ',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
101: 1:      'question': '____ _ _ __ ___ _ ____ ',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': '((--__--))',
101: 1:      'question': '(-_-)',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': '112233445566',
101: 1:      'question': '123456',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': 'SSccrruubb  LLoorrddss',
101: 1:      'question': 'Scrub Lords',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': 'bbrruuhh',
101: 1:      'question': 'bruh',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': 'iilllluummiinnaattii',
101: 1:      'question': 'illuminati',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': 'AAddiiddaass',
101: 1:      'question': 'Adidas',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
101: 1:      'question': '!#%G#DGY^RC',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': 'DDoonnaalldd  DDuucckk',
101: 1:      'question': 'Donald Duck',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': 'KKaannyyee  22002200',
101: 1:      'question': 'Kanye 2020',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
101: 1:      'question': 'Bernie Sanders is Bae',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
101: 1:      'question': 'Peanut Butter',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': '11333377',
101: 1:      'question': '1337',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
101: 1:      'question': 'h*o@D7an& a',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': 'YY!!SS4477YY  @@',
101: 1:      'question': 'Y!S47Y @',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': '..--&&ddFFII88',
101: 1:      'question': '.-&dFI8',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': '!!ZZqq++',
101: 1:      'question': '!Zq+',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
101: 1:      'question': 'g%;U*!a/[pZ4V3/&',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
101: 1:      'question': '7f5nF=:b8eo&+7',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': '**22SSNNmm##LLoo&&YY',
101: 1:      'question': '*2SNm#Lo&Y',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': '33ZZVVmm',
101: 1:      'question': '3ZVm',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
101: 1:      'question': ']C06*Ec$62o!7][/9',
101: 1:      'valid': true
101: 1:    }
101: 1:  ],
101: 1:  'info': [
101: 1:    '✅f(String) = SSttrriinngg',
101: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
101: 1:    '✅f(1234!_ ) = 11223344!!__  ',
101: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
101: 1:    '✅f((-_-)) = ((--__--))',
101: 1:    '✅f(123456) = 112233445566',
101: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
101: 1:    '✅f(bruh) = bbrruuhh',
101: 1:    '✅f(illuminati) = iilllluummiinnaattii',
101: 1:    '✅f(Adidas) = AAddiiddaass',
101: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
101: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
101: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
101: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
101: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
101: 1:    '✅f(1337) = 11333377',
101: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
101: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
101: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
101: 1:    '✅f(!Zq+) = !!ZZqq++',
101: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
101: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
101: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
101: 1:    '✅f(3ZVm) = 33ZZVVmm',
101: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
101: 1:    '❌f(^q%]VoKhh9j5-) = ??? != ^^qq%%]]VVooKKhhhh99jj55--'
101: 1:  ],
101: 1:  'level': 3,
101: 1:  'nextQuestion': '^q%]VoKhh9j5-',
101: 1:  'questions': [
101: 1:    'String',
101: 1:    'Hello World',
101: 1:    '1234!_ ',
101: 1:    '____ _ _ __ ___ _ ____ ',
101: 1:    '(-_-)',
101: 1:    '123456',
101: 1:    'Scrub Lords',
101: 1:    'bruh',
101: 1:    'illuminati',
101: 1:    'Adidas',
101: 1:    '!#%G#DGY^RC',
101: 1:    'Donald Duck',
101: 1:    'Kanye 2020',
101: 1:    'Bernie Sanders is Bae',
101: 1:    'Peanut Butter',
101: 1:    '1337',
101: 1:    'h*o@D7an& a',
101: 1:    'Y!S47Y @',
101: 1:    '.-&dFI8',
101: 1:    '!Zq+',
101: 1:    'g%;U*!a/[pZ4V3/&',
101: 1:    '7f5nF=:b8eo&+7',
101: 1:    '*2SNm#Lo&Y',
101: 1:    '3ZVm',
101: 1:    ']C06*Ec$62o!7][/9',
101: 1:    '^q%]VoKhh9j5-'
101: 1:  ]
101: 1:}
101: 1:Scores: 1606
101: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--']')
101: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
102: 1:BoardData {
102: 1:  'description': [
102: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
102: 1:    'Write a javascript method.',
102: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
102: 1:    'Use regular expressions to solve this problem.'
102: 1:  ],
102: 1:  'expectedAnswer': '$$22EEZZGGQQ',
102: 1:  'history': [
102: 1:    {
102: 1:      'answer': 'SSttrriinngg',
102: 1:      'question': 'String',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': 'HHeelllloo  WWoorrlldd',
102: 1:      'question': 'Hello World',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': '11223344!!__  ',
102: 1:      'question': '1234!_ ',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
102: 1:      'question': '____ _ _ __ ___ _ ____ ',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': '((--__--))',
102: 1:      'question': '(-_-)',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': '112233445566',
102: 1:      'question': '123456',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': 'SSccrruubb  LLoorrddss',
102: 1:      'question': 'Scrub Lords',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': 'bbrruuhh',
102: 1:      'question': 'bruh',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': 'iilllluummiinnaattii',
102: 1:      'question': 'illuminati',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': 'AAddiiddaass',
102: 1:      'question': 'Adidas',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
102: 1:      'question': '!#%G#DGY^RC',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': 'DDoonnaalldd  DDuucckk',
102: 1:      'question': 'Donald Duck',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': 'KKaannyyee  22002200',
102: 1:      'question': 'Kanye 2020',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
102: 1:      'question': 'Bernie Sanders is Bae',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
102: 1:      'question': 'Peanut Butter',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': '11333377',
102: 1:      'question': '1337',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
102: 1:      'question': 'h*o@D7an& a',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': 'YY!!SS4477YY  @@',
102: 1:      'question': 'Y!S47Y @',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': '..--&&ddFFII88',
102: 1:      'question': '.-&dFI8',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': '!!ZZqq++',
102: 1:      'question': '!Zq+',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
102: 1:      'question': 'g%;U*!a/[pZ4V3/&',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
102: 1:      'question': '7f5nF=:b8eo&+7',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': '**22SSNNmm##LLoo&&YY',
102: 1:      'question': '*2SNm#Lo&Y',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': '33ZZVVmm',
102: 1:      'question': '3ZVm',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
102: 1:      'question': ']C06*Ec$62o!7][/9',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
102: 1:      'question': '^q%]VoKhh9j5-',
102: 1:      'valid': true
102: 1:    }
102: 1:  ],
102: 1:  'info': [
102: 1:    '✅f(String) = SSttrriinngg',
102: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
102: 1:    '✅f(1234!_ ) = 11223344!!__  ',
102: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
102: 1:    '✅f((-_-)) = ((--__--))',
102: 1:    '✅f(123456) = 112233445566',
102: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
102: 1:    '✅f(bruh) = bbrruuhh',
102: 1:    '✅f(illuminati) = iilllluummiinnaattii',
102: 1:    '✅f(Adidas) = AAddiiddaass',
102: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
102: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
102: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
102: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
102: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
102: 1:    '✅f(1337) = 11333377',
102: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
102: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
102: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
102: 1:    '✅f(!Zq+) = !!ZZqq++',
102: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
102: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
102: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
102: 1:    '✅f(3ZVm) = 33ZZVVmm',
102: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
102: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
102: 1:    '❌f($2EZGQ) = ??? != $$22EEZZGGQQ'
102: 1:  ],
102: 1:  'level': 3,
102: 1:  'nextQuestion': '$2EZGQ',
102: 1:  'questions': [
102: 1:    'String',
102: 1:    'Hello World',
102: 1:    '1234!_ ',
102: 1:    '____ _ _ __ ___ _ ____ ',
102: 1:    '(-_-)',
102: 1:    '123456',
102: 1:    'Scrub Lords',
102: 1:    'bruh',
102: 1:    'illuminati',
102: 1:    'Adidas',
102: 1:    '!#%G#DGY^RC',
102: 1:    'Donald Duck',
102: 1:    'Kanye 2020',
102: 1:    'Bernie Sanders is Bae',
102: 1:    'Peanut Butter',
102: 1:    '1337',
102: 1:    'h*o@D7an& a',
102: 1:    'Y!S47Y @',
102: 1:    '.-&dFI8',
102: 1:    '!Zq+',
102: 1:    'g%;U*!a/[pZ4V3/&',
102: 1:    '7f5nF=:b8eo&+7',
102: 1:    '*2SNm#Lo&Y',
102: 1:    '3ZVm',
102: 1:    ']C06*Ec$62o!7][/9',
102: 1:    '^q%]VoKhh9j5-',
102: 1:    '$2EZGQ'
102: 1:  ]
102: 1:}
102: 1:Scores: 1607
102: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ']')
102: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
103: 1:BoardData {
103: 1:  'description': [
103: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
103: 1:    'Write a javascript method.',
103: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
103: 1:    'Use regular expressions to solve this problem.'
103: 1:  ],
103: 1:  'expectedAnswer': '``UU99@@hh',
103: 1:  'history': [
103: 1:    {
103: 1:      'answer': 'SSttrriinngg',
103: 1:      'question': 'String',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': 'HHeelllloo  WWoorrlldd',
103: 1:      'question': 'Hello World',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': '11223344!!__  ',
103: 1:      'question': '1234!_ ',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
103: 1:      'question': '____ _ _ __ ___ _ ____ ',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': '((--__--))',
103: 1:      'question': '(-_-)',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': '112233445566',
103: 1:      'question': '123456',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': 'SSccrruubb  LLoorrddss',
103: 1:      'question': 'Scrub Lords',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': 'bbrruuhh',
103: 1:      'question': 'bruh',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': 'iilllluummiinnaattii',
103: 1:      'question': 'illuminati',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': 'AAddiiddaass',
103: 1:      'question': 'Adidas',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
103: 1:      'question': '!#%G#DGY^RC',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': 'DDoonnaalldd  DDuucckk',
103: 1:      'question': 'Donald Duck',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': 'KKaannyyee  22002200',
103: 1:      'question': 'Kanye 2020',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
103: 1:      'question': 'Bernie Sanders is Bae',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
103: 1:      'question': 'Peanut Butter',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': '11333377',
103: 1:      'question': '1337',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
103: 1:      'question': 'h*o@D7an& a',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': 'YY!!SS4477YY  @@',
103: 1:      'question': 'Y!S47Y @',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': '..--&&ddFFII88',
103: 1:      'question': '.-&dFI8',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': '!!ZZqq++',
103: 1:      'question': '!Zq+',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
103: 1:      'question': 'g%;U*!a/[pZ4V3/&',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
103: 1:      'question': '7f5nF=:b8eo&+7',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': '**22SSNNmm##LLoo&&YY',
103: 1:      'question': '*2SNm#Lo&Y',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': '33ZZVVmm',
103: 1:      'question': '3ZVm',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
103: 1:      'question': ']C06*Ec$62o!7][/9',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
103: 1:      'question': '^q%]VoKhh9j5-',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': '$$22EEZZGGQQ',
103: 1:      'question': '$2EZGQ',
103: 1:      'valid': true
103: 1:    }
103: 1:  ],
103: 1:  'info': [
103: 1:    '✅f(String) = SSttrriinngg',
103: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
103: 1:    '✅f(1234!_ ) = 11223344!!__  ',
103: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
103: 1:    '✅f((-_-)) = ((--__--))',
103: 1:    '✅f(123456) = 112233445566',
103: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
103: 1:    '✅f(bruh) = bbrruuhh',
103: 1:    '✅f(illuminati) = iilllluummiinnaattii',
103: 1:    '✅f(Adidas) = AAddiiddaass',
103: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
103: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
103: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
103: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
103: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
103: 1:    '✅f(1337) = 11333377',
103: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
103: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
103: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
103: 1:    '✅f(!Zq+) = !!ZZqq++',
103: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
103: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
103: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
103: 1:    '✅f(3ZVm) = 33ZZVVmm',
103: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
103: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
103: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
103: 1:    '❌f(`U9@h) = ??? != ``UU99@@hh'
103: 1:  ],
103: 1:  'level': 3,
103: 1:  'nextQuestion': '`U9@h',
103: 1:  'questions': [
103: 1:    'String',
103: 1:    'Hello World',
103: 1:    '1234!_ ',
103: 1:    '____ _ _ __ ___ _ ____ ',
103: 1:    '(-_-)',
103: 1:    '123456',
103: 1:    'Scrub Lords',
103: 1:    'bruh',
103: 1:    'illuminati',
103: 1:    'Adidas',
103: 1:    '!#%G#DGY^RC',
103: 1:    'Donald Duck',
103: 1:    'Kanye 2020',
103: 1:    'Bernie Sanders is Bae',
103: 1:    'Peanut Butter',
103: 1:    '1337',
103: 1:    'h*o@D7an& a',
103: 1:    'Y!S47Y @',
103: 1:    '.-&dFI8',
103: 1:    '!Zq+',
103: 1:    'g%;U*!a/[pZ4V3/&',
103: 1:    '7f5nF=:b8eo&+7',
103: 1:    '*2SNm#Lo&Y',
103: 1:    '3ZVm',
103: 1:    ']C06*Ec$62o!7][/9',
103: 1:    '^q%]VoKhh9j5-',
103: 1:    '$2EZGQ',
103: 1:    '`U9@h'
103: 1:  ]
103: 1:}
103: 1:Scores: 1608
103: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh']')
103: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
104: 1:BoardData {
104: 1:  'description': [
104: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
104: 1:    'Write a javascript method.',
104: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
104: 1:    'Use regular expressions to solve this problem.'
104: 1:  ],
104: 1:  'expectedAnswer': 'kk^^FF  [[',
104: 1:  'history': [
104: 1:    {
104: 1:      'answer': 'SSttrriinngg',
104: 1:      'question': 'String',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': 'HHeelllloo  WWoorrlldd',
104: 1:      'question': 'Hello World',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': '11223344!!__  ',
104: 1:      'question': '1234!_ ',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
104: 1:      'question': '____ _ _ __ ___ _ ____ ',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': '((--__--))',
104: 1:      'question': '(-_-)',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': '112233445566',
104: 1:      'question': '123456',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': 'SSccrruubb  LLoorrddss',
104: 1:      'question': 'Scrub Lords',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': 'bbrruuhh',
104: 1:      'question': 'bruh',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': 'iilllluummiinnaattii',
104: 1:      'question': 'illuminati',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': 'AAddiiddaass',
104: 1:      'question': 'Adidas',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
104: 1:      'question': '!#%G#DGY^RC',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': 'DDoonnaalldd  DDuucckk',
104: 1:      'question': 'Donald Duck',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': 'KKaannyyee  22002200',
104: 1:      'question': 'Kanye 2020',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
104: 1:      'question': 'Bernie Sanders is Bae',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
104: 1:      'question': 'Peanut Butter',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': '11333377',
104: 1:      'question': '1337',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
104: 1:      'question': 'h*o@D7an& a',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': 'YY!!SS4477YY  @@',
104: 1:      'question': 'Y!S47Y @',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': '..--&&ddFFII88',
104: 1:      'question': '.-&dFI8',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': '!!ZZqq++',
104: 1:      'question': '!Zq+',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
104: 1:      'question': 'g%;U*!a/[pZ4V3/&',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
104: 1:      'question': '7f5nF=:b8eo&+7',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': '**22SSNNmm##LLoo&&YY',
104: 1:      'question': '*2SNm#Lo&Y',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': '33ZZVVmm',
104: 1:      'question': '3ZVm',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
104: 1:      'question': ']C06*Ec$62o!7][/9',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
104: 1:      'question': '^q%]VoKhh9j5-',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': '$$22EEZZGGQQ',
104: 1:      'question': '$2EZGQ',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': '``UU99@@hh',
104: 1:      'question': '`U9@h',
104: 1:      'valid': true
104: 1:    }
104: 1:  ],
104: 1:  'info': [
104: 1:    '✅f(String) = SSttrriinngg',
104: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
104: 1:    '✅f(1234!_ ) = 11223344!!__  ',
104: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
104: 1:    '✅f((-_-)) = ((--__--))',
104: 1:    '✅f(123456) = 112233445566',
104: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
104: 1:    '✅f(bruh) = bbrruuhh',
104: 1:    '✅f(illuminati) = iilllluummiinnaattii',
104: 1:    '✅f(Adidas) = AAddiiddaass',
104: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
104: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
104: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
104: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
104: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
104: 1:    '✅f(1337) = 11333377',
104: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
104: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
104: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
104: 1:    '✅f(!Zq+) = !!ZZqq++',
104: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
104: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
104: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
104: 1:    '✅f(3ZVm) = 33ZZVVmm',
104: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
104: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
104: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
104: 1:    '✅f(`U9@h) = ``UU99@@hh',
104: 1:    '❌f(k^F [) = ??? != kk^^FF  [['
104: 1:  ],
104: 1:  'level': 3,
104: 1:  'nextQuestion': 'k^F [',
104: 1:  'questions': [
104: 1:    'String',
104: 1:    'Hello World',
104: 1:    '1234!_ ',
104: 1:    '____ _ _ __ ___ _ ____ ',
104: 1:    '(-_-)',
104: 1:    '123456',
104: 1:    'Scrub Lords',
104: 1:    'bruh',
104: 1:    'illuminati',
104: 1:    'Adidas',
104: 1:    '!#%G#DGY^RC',
104: 1:    'Donald Duck',
104: 1:    'Kanye 2020',
104: 1:    'Bernie Sanders is Bae',
104: 1:    'Peanut Butter',
104: 1:    '1337',
104: 1:    'h*o@D7an& a',
104: 1:    'Y!S47Y @',
104: 1:    '.-&dFI8',
104: 1:    '!Zq+',
104: 1:    'g%;U*!a/[pZ4V3/&',
104: 1:    '7f5nF=:b8eo&+7',
104: 1:    '*2SNm#Lo&Y',
104: 1:    '3ZVm',
104: 1:    ']C06*Ec$62o!7][/9',
104: 1:    '^q%]VoKhh9j5-',
104: 1:    '$2EZGQ',
104: 1:    '`U9@h',
104: 1:    'k^F ['
104: 1:  ]
104: 1:}
104: 1:Scores: 1609
104: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[']')
104: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
105: 1:BoardData {
105: 1:  'description': [
105: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
105: 1:    'Write a javascript method.',
105: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
105: 1:    'Use regular expressions to solve this problem.'
105: 1:  ],
105: 1:  'expectedAnswer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
105: 1:  'history': [
105: 1:    {
105: 1:      'answer': 'SSttrriinngg',
105: 1:      'question': 'String',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'HHeelllloo  WWoorrlldd',
105: 1:      'question': 'Hello World',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': '11223344!!__  ',
105: 1:      'question': '1234!_ ',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
105: 1:      'question': '____ _ _ __ ___ _ ____ ',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': '((--__--))',
105: 1:      'question': '(-_-)',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': '112233445566',
105: 1:      'question': '123456',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'SSccrruubb  LLoorrddss',
105: 1:      'question': 'Scrub Lords',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'bbrruuhh',
105: 1:      'question': 'bruh',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'iilllluummiinnaattii',
105: 1:      'question': 'illuminati',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'AAddiiddaass',
105: 1:      'question': 'Adidas',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
105: 1:      'question': '!#%G#DGY^RC',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'DDoonnaalldd  DDuucckk',
105: 1:      'question': 'Donald Duck',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'KKaannyyee  22002200',
105: 1:      'question': 'Kanye 2020',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
105: 1:      'question': 'Bernie Sanders is Bae',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
105: 1:      'question': 'Peanut Butter',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': '11333377',
105: 1:      'question': '1337',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
105: 1:      'question': 'h*o@D7an& a',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'YY!!SS4477YY  @@',
105: 1:      'question': 'Y!S47Y @',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': '..--&&ddFFII88',
105: 1:      'question': '.-&dFI8',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': '!!ZZqq++',
105: 1:      'question': '!Zq+',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
105: 1:      'question': 'g%;U*!a/[pZ4V3/&',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
105: 1:      'question': '7f5nF=:b8eo&+7',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': '**22SSNNmm##LLoo&&YY',
105: 1:      'question': '*2SNm#Lo&Y',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': '33ZZVVmm',
105: 1:      'question': '3ZVm',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
105: 1:      'question': ']C06*Ec$62o!7][/9',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
105: 1:      'question': '^q%]VoKhh9j5-',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': '$$22EEZZGGQQ',
105: 1:      'question': '$2EZGQ',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': '``UU99@@hh',
105: 1:      'question': '`U9@h',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'kk^^FF  [[',
105: 1:      'question': 'k^F [',
105: 1:      'valid': true
105: 1:    }
105: 1:  ],
105: 1:  'info': [
105: 1:    '✅f(String) = SSttrriinngg',
105: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
105: 1:    '✅f(1234!_ ) = 11223344!!__  ',
105: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
105: 1:    '✅f((-_-)) = ((--__--))',
105: 1:    '✅f(123456) = 112233445566',
105: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
105: 1:    '✅f(bruh) = bbrruuhh',
105: 1:    '✅f(illuminati) = iilllluummiinnaattii',
105: 1:    '✅f(Adidas) = AAddiiddaass',
105: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
105: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
105: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
105: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
105: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
105: 1:    '✅f(1337) = 11333377',
105: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
105: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
105: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
105: 1:    '✅f(!Zq+) = !!ZZqq++',
105: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
105: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
105: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
105: 1:    '✅f(3ZVm) = 33ZZVVmm',
105: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
105: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
105: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
105: 1:    '✅f(`U9@h) = ``UU99@@hh',
105: 1:    '✅f(k^F [) = kk^^FF  [[',
105: 1:    '❌f(@Y(-SAZa<S2OS**i) = ??? != @@YY((--SSAAZZaa<<SS22OOSS****ii'
105: 1:  ],
105: 1:  'level': 3,
105: 1:  'nextQuestion': '@Y(-SAZa<S2OS**i',
105: 1:  'questions': [
105: 1:    'String',
105: 1:    'Hello World',
105: 1:    '1234!_ ',
105: 1:    '____ _ _ __ ___ _ ____ ',
105: 1:    '(-_-)',
105: 1:    '123456',
105: 1:    'Scrub Lords',
105: 1:    'bruh',
105: 1:    'illuminati',
105: 1:    'Adidas',
105: 1:    '!#%G#DGY^RC',
105: 1:    'Donald Duck',
105: 1:    'Kanye 2020',
105: 1:    'Bernie Sanders is Bae',
105: 1:    'Peanut Butter',
105: 1:    '1337',
105: 1:    'h*o@D7an& a',
105: 1:    'Y!S47Y @',
105: 1:    '.-&dFI8',
105: 1:    '!Zq+',
105: 1:    'g%;U*!a/[pZ4V3/&',
105: 1:    '7f5nF=:b8eo&+7',
105: 1:    '*2SNm#Lo&Y',
105: 1:    '3ZVm',
105: 1:    ']C06*Ec$62o!7][/9',
105: 1:    '^q%]VoKhh9j5-',
105: 1:    '$2EZGQ',
105: 1:    '`U9@h',
105: 1:    'k^F [',
105: 1:    '@Y(-SAZa<S2OS**i'
105: 1:  ]
105: 1:}
105: 1:Scores: 1610
105: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii']')
105: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
106: 1:BoardData {
106: 1:  'description': [
106: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
106: 1:    'Write a javascript method.',
106: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
106: 1:    'Use regular expressions to solve this problem.'
106: 1:  ],
106: 1:  'expectedAnswer': 'hh**??RRWW__ii++<<',
106: 1:  'history': [
106: 1:    {
106: 1:      'answer': 'SSttrriinngg',
106: 1:      'question': 'String',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'HHeelllloo  WWoorrlldd',
106: 1:      'question': 'Hello World',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '11223344!!__  ',
106: 1:      'question': '1234!_ ',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
106: 1:      'question': '____ _ _ __ ___ _ ____ ',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '((--__--))',
106: 1:      'question': '(-_-)',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '112233445566',
106: 1:      'question': '123456',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'SSccrruubb  LLoorrddss',
106: 1:      'question': 'Scrub Lords',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'bbrruuhh',
106: 1:      'question': 'bruh',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'iilllluummiinnaattii',
106: 1:      'question': 'illuminati',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'AAddiiddaass',
106: 1:      'question': 'Adidas',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
106: 1:      'question': '!#%G#DGY^RC',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'DDoonnaalldd  DDuucckk',
106: 1:      'question': 'Donald Duck',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'KKaannyyee  22002200',
106: 1:      'question': 'Kanye 2020',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
106: 1:      'question': 'Bernie Sanders is Bae',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
106: 1:      'question': 'Peanut Butter',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '11333377',
106: 1:      'question': '1337',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
106: 1:      'question': 'h*o@D7an& a',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'YY!!SS4477YY  @@',
106: 1:      'question': 'Y!S47Y @',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '..--&&ddFFII88',
106: 1:      'question': '.-&dFI8',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '!!ZZqq++',
106: 1:      'question': '!Zq+',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
106: 1:      'question': 'g%;U*!a/[pZ4V3/&',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
106: 1:      'question': '7f5nF=:b8eo&+7',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '**22SSNNmm##LLoo&&YY',
106: 1:      'question': '*2SNm#Lo&Y',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '33ZZVVmm',
106: 1:      'question': '3ZVm',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
106: 1:      'question': ']C06*Ec$62o!7][/9',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
106: 1:      'question': '^q%]VoKhh9j5-',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '$$22EEZZGGQQ',
106: 1:      'question': '$2EZGQ',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '``UU99@@hh',
106: 1:      'question': '`U9@h',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'kk^^FF  [[',
106: 1:      'question': 'k^F [',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
106: 1:      'question': '@Y(-SAZa<S2OS**i',
106: 1:      'valid': true
106: 1:    }
106: 1:  ],
106: 1:  'info': [
106: 1:    '✅f(String) = SSttrriinngg',
106: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
106: 1:    '✅f(1234!_ ) = 11223344!!__  ',
106: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
106: 1:    '✅f((-_-)) = ((--__--))',
106: 1:    '✅f(123456) = 112233445566',
106: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
106: 1:    '✅f(bruh) = bbrruuhh',
106: 1:    '✅f(illuminati) = iilllluummiinnaattii',
106: 1:    '✅f(Adidas) = AAddiiddaass',
106: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
106: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
106: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
106: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
106: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
106: 1:    '✅f(1337) = 11333377',
106: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
106: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
106: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
106: 1:    '✅f(!Zq+) = !!ZZqq++',
106: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
106: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
106: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
106: 1:    '✅f(3ZVm) = 33ZZVVmm',
106: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
106: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
106: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
106: 1:    '✅f(`U9@h) = ``UU99@@hh',
106: 1:    '✅f(k^F [) = kk^^FF  [[',
106: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
106: 1:    '❌f(h*?RW_i+<) = ??? != hh**??RRWW__ii++<<'
106: 1:  ],
106: 1:  'level': 3,
106: 1:  'nextQuestion': 'h*?RW_i+<',
106: 1:  'questions': [
106: 1:    'String',
106: 1:    'Hello World',
106: 1:    '1234!_ ',
106: 1:    '____ _ _ __ ___ _ ____ ',
106: 1:    '(-_-)',
106: 1:    '123456',
106: 1:    'Scrub Lords',
106: 1:    'bruh',
106: 1:    'illuminati',
106: 1:    'Adidas',
106: 1:    '!#%G#DGY^RC',
106: 1:    'Donald Duck',
106: 1:    'Kanye 2020',
106: 1:    'Bernie Sanders is Bae',
106: 1:    'Peanut Butter',
106: 1:    '1337',
106: 1:    'h*o@D7an& a',
106: 1:    'Y!S47Y @',
106: 1:    '.-&dFI8',
106: 1:    '!Zq+',
106: 1:    'g%;U*!a/[pZ4V3/&',
106: 1:    '7f5nF=:b8eo&+7',
106: 1:    '*2SNm#Lo&Y',
106: 1:    '3ZVm',
106: 1:    ']C06*Ec$62o!7][/9',
106: 1:    '^q%]VoKhh9j5-',
106: 1:    '$2EZGQ',
106: 1:    '`U9@h',
106: 1:    'k^F [',
106: 1:    '@Y(-SAZa<S2OS**i',
106: 1:    'h*?RW_i+<'
106: 1:  ]
106: 1:}
106: 1:Scores: 1611
106: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii', 'hh**??RRWW__ii++<<']')
106: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
107: 1:BoardData {
107: 1:  'description': [
107: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
107: 1:    'Write a javascript method.',
107: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
107: 1:    'Use regular expressions to solve this problem.'
107: 1:  ],
107: 1:  'expectedAnswer': 'FFAACCBBTT++33YYCC99mm33++aa00QQ',
107: 1:  'history': [
107: 1:    {
107: 1:      'answer': 'SSttrriinngg',
107: 1:      'question': 'String',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'HHeelllloo  WWoorrlldd',
107: 1:      'question': 'Hello World',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '11223344!!__  ',
107: 1:      'question': '1234!_ ',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
107: 1:      'question': '____ _ _ __ ___ _ ____ ',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '((--__--))',
107: 1:      'question': '(-_-)',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '112233445566',
107: 1:      'question': '123456',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'SSccrruubb  LLoorrddss',
107: 1:      'question': 'Scrub Lords',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'bbrruuhh',
107: 1:      'question': 'bruh',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'iilllluummiinnaattii',
107: 1:      'question': 'illuminati',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'AAddiiddaass',
107: 1:      'question': 'Adidas',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
107: 1:      'question': '!#%G#DGY^RC',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'DDoonnaalldd  DDuucckk',
107: 1:      'question': 'Donald Duck',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'KKaannyyee  22002200',
107: 1:      'question': 'Kanye 2020',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
107: 1:      'question': 'Bernie Sanders is Bae',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
107: 1:      'question': 'Peanut Butter',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '11333377',
107: 1:      'question': '1337',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
107: 1:      'question': 'h*o@D7an& a',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'YY!!SS4477YY  @@',
107: 1:      'question': 'Y!S47Y @',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '..--&&ddFFII88',
107: 1:      'question': '.-&dFI8',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '!!ZZqq++',
107: 1:      'question': '!Zq+',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
107: 1:      'question': 'g%;U*!a/[pZ4V3/&',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
107: 1:      'question': '7f5nF=:b8eo&+7',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '**22SSNNmm##LLoo&&YY',
107: 1:      'question': '*2SNm#Lo&Y',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '33ZZVVmm',
107: 1:      'question': '3ZVm',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
107: 1:      'question': ']C06*Ec$62o!7][/9',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
107: 1:      'question': '^q%]VoKhh9j5-',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '$$22EEZZGGQQ',
107: 1:      'question': '$2EZGQ',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '``UU99@@hh',
107: 1:      'question': '`U9@h',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'kk^^FF  [[',
107: 1:      'question': 'k^F [',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
107: 1:      'question': '@Y(-SAZa<S2OS**i',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'hh**??RRWW__ii++<<',
107: 1:      'question': 'h*?RW_i+<',
107: 1:      'valid': true
107: 1:    }
107: 1:  ],
107: 1:  'info': [
107: 1:    '✅f(String) = SSttrriinngg',
107: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
107: 1:    '✅f(1234!_ ) = 11223344!!__  ',
107: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
107: 1:    '✅f((-_-)) = ((--__--))',
107: 1:    '✅f(123456) = 112233445566',
107: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
107: 1:    '✅f(bruh) = bbrruuhh',
107: 1:    '✅f(illuminati) = iilllluummiinnaattii',
107: 1:    '✅f(Adidas) = AAddiiddaass',
107: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
107: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
107: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
107: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
107: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
107: 1:    '✅f(1337) = 11333377',
107: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
107: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
107: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
107: 1:    '✅f(!Zq+) = !!ZZqq++',
107: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
107: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
107: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
107: 1:    '✅f(3ZVm) = 33ZZVVmm',
107: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
107: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
107: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
107: 1:    '✅f(`U9@h) = ``UU99@@hh',
107: 1:    '✅f(k^F [) = kk^^FF  [[',
107: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
107: 1:    '✅f(h*?RW_i+<) = hh**??RRWW__ii++<<',
107: 1:    '❌f(FACBT+3YC9m3+a0Q) = ??? != FFAACCBBTT++33YYCC99mm33++aa00QQ'
107: 1:  ],
107: 1:  'level': 3,
107: 1:  'nextQuestion': 'FACBT+3YC9m3+a0Q',
107: 1:  'questions': [
107: 1:    'String',
107: 1:    'Hello World',
107: 1:    '1234!_ ',
107: 1:    '____ _ _ __ ___ _ ____ ',
107: 1:    '(-_-)',
107: 1:    '123456',
107: 1:    'Scrub Lords',
107: 1:    'bruh',
107: 1:    'illuminati',
107: 1:    'Adidas',
107: 1:    '!#%G#DGY^RC',
107: 1:    'Donald Duck',
107: 1:    'Kanye 2020',
107: 1:    'Bernie Sanders is Bae',
107: 1:    'Peanut Butter',
107: 1:    '1337',
107: 1:    'h*o@D7an& a',
107: 1:    'Y!S47Y @',
107: 1:    '.-&dFI8',
107: 1:    '!Zq+',
107: 1:    'g%;U*!a/[pZ4V3/&',
107: 1:    '7f5nF=:b8eo&+7',
107: 1:    '*2SNm#Lo&Y',
107: 1:    '3ZVm',
107: 1:    ']C06*Ec$62o!7][/9',
107: 1:    '^q%]VoKhh9j5-',
107: 1:    '$2EZGQ',
107: 1:    '`U9@h',
107: 1:    'k^F [',
107: 1:    '@Y(-SAZa<S2OS**i',
107: 1:    'h*?RW_i+<',
107: 1:    'FACBT+3YC9m3+a0Q'
107: 1:  ]
107: 1:}
107: 1:Scores: 1612
107: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii', 'hh**??RRWW__ii++<<', 'FFAACCBBTT++33YYCC99mm33++aa00QQ']')
107: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
108: 1:BoardData {
108: 1:  'description': [
108: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
108: 1:    'Write a javascript method.',
108: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
108: 1:    'Use regular expressions to solve this problem.'
108: 1:  ],
108: 1:  'expectedAnswer': 'KKSS))::jjYY??++SS99',
108: 1:  'history': [
108: 1:    {
108: 1:      'answer': 'SSttrriinngg',
108: 1:      'question': 'String',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'HHeelllloo  WWoorrlldd',
108: 1:      'question': 'Hello World',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '11223344!!__  ',
108: 1:      'question': '1234!_ ',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
108: 1:      'question': '____ _ _ __ ___ _ ____ ',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '((--__--))',
108: 1:      'question': '(-_-)',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '112233445566',
108: 1:      'question': '123456',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'SSccrruubb  LLoorrddss',
108: 1:      'question': 'Scrub Lords',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'bbrruuhh',
108: 1:      'question': 'bruh',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'iilllluummiinnaattii',
108: 1:      'question': 'illuminati',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'AAddiiddaass',
108: 1:      'question': 'Adidas',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
108: 1:      'question': '!#%G#DGY^RC',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'DDoonnaalldd  DDuucckk',
108: 1:      'question': 'Donald Duck',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'KKaannyyee  22002200',
108: 1:      'question': 'Kanye 2020',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
108: 1:      'question': 'Bernie Sanders is Bae',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
108: 1:      'question': 'Peanut Butter',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '11333377',
108: 1:      'question': '1337',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
108: 1:      'question': 'h*o@D7an& a',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'YY!!SS4477YY  @@',
108: 1:      'question': 'Y!S47Y @',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '..--&&ddFFII88',
108: 1:      'question': '.-&dFI8',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '!!ZZqq++',
108: 1:      'question': '!Zq+',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
108: 1:      'question': 'g%;U*!a/[pZ4V3/&',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
108: 1:      'question': '7f5nF=:b8eo&+7',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '**22SSNNmm##LLoo&&YY',
108: 1:      'question': '*2SNm#Lo&Y',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '33ZZVVmm',
108: 1:      'question': '3ZVm',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
108: 1:      'question': ']C06*Ec$62o!7][/9',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
108: 1:      'question': '^q%]VoKhh9j5-',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '$$22EEZZGGQQ',
108: 1:      'question': '$2EZGQ',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '``UU99@@hh',
108: 1:      'question': '`U9@h',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'kk^^FF  [[',
108: 1:      'question': 'k^F [',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
108: 1:      'question': '@Y(-SAZa<S2OS**i',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'hh**??RRWW__ii++<<',
108: 1:      'question': 'h*?RW_i+<',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'FFAACCBBTT++33YYCC99mm33++aa00QQ',
108: 1:      'question': 'FACBT+3YC9m3+a0Q',
108: 1:      'valid': true
108: 1:    }
108: 1:  ],
108: 1:  'info': [
108: 1:    '✅f(String) = SSttrriinngg',
108: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
108: 1:    '✅f(1234!_ ) = 11223344!!__  ',
108: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
108: 1:    '✅f((-_-)) = ((--__--))',
108: 1:    '✅f(123456) = 112233445566',
108: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
108: 1:    '✅f(bruh) = bbrruuhh',
108: 1:    '✅f(illuminati) = iilllluummiinnaattii',
108: 1:    '✅f(Adidas) = AAddiiddaass',
108: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
108: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
108: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
108: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
108: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
108: 1:    '✅f(1337) = 11333377',
108: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
108: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
108: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
108: 1:    '✅f(!Zq+) = !!ZZqq++',
108: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
108: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
108: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
108: 1:    '✅f(3ZVm) = 33ZZVVmm',
108: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
108: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
108: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
108: 1:    '✅f(`U9@h) = ``UU99@@hh',
108: 1:    '✅f(k^F [) = kk^^FF  [[',
108: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
108: 1:    '✅f(h*?RW_i+<) = hh**??RRWW__ii++<<',
108: 1:    '✅f(FACBT+3YC9m3+a0Q) = FFAACCBBTT++33YYCC99mm33++aa00QQ',
108: 1:    '❌f(KS):jY?+S9) = ??? != KKSS))::jjYY??++SS99'
108: 1:  ],
108: 1:  'level': 3,
108: 1:  'nextQuestion': 'KS):jY?+S9',
108: 1:  'questions': [
108: 1:    'String',
108: 1:    'Hello World',
108: 1:    '1234!_ ',
108: 1:    '____ _ _ __ ___ _ ____ ',
108: 1:    '(-_-)',
108: 1:    '123456',
108: 1:    'Scrub Lords',
108: 1:    'bruh',
108: 1:    'illuminati',
108: 1:    'Adidas',
108: 1:    '!#%G#DGY^RC',
108: 1:    'Donald Duck',
108: 1:    'Kanye 2020',
108: 1:    'Bernie Sanders is Bae',
108: 1:    'Peanut Butter',
108: 1:    '1337',
108: 1:    'h*o@D7an& a',
108: 1:    'Y!S47Y @',
108: 1:    '.-&dFI8',
108: 1:    '!Zq+',
108: 1:    'g%;U*!a/[pZ4V3/&',
108: 1:    '7f5nF=:b8eo&+7',
108: 1:    '*2SNm#Lo&Y',
108: 1:    '3ZVm',
108: 1:    ']C06*Ec$62o!7][/9',
108: 1:    '^q%]VoKhh9j5-',
108: 1:    '$2EZGQ',
108: 1:    '`U9@h',
108: 1:    'k^F [',
108: 1:    '@Y(-SAZa<S2OS**i',
108: 1:    'h*?RW_i+<',
108: 1:    'FACBT+3YC9m3+a0Q',
108: 1:    'KS):jY?+S9'
108: 1:  ]
108: 1:}
108: 1:Scores: 1613
108: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii', 'hh**??RRWW__ii++<<', 'FFAACCBBTT++33YYCC99mm33++aa00QQ', 'KKSS))::jjYY??++SS99']')
108: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
109: 1:BoardData {
109: 1:  'description': [
109: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
109: 1:    'Write a javascript method.',
109: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
109: 1:    'Use regular expressions to solve this problem.'
109: 1:  ],
109: 1:  'expectedAnswer': 'JJBBWWhh',
109: 1:  'history': [
109: 1:    {
109: 1:      'answer': 'SSttrriinngg',
109: 1:      'question': 'String',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'HHeelllloo  WWoorrlldd',
109: 1:      'question': 'Hello World',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '11223344!!__  ',
109: 1:      'question': '1234!_ ',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
109: 1:      'question': '____ _ _ __ ___ _ ____ ',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '((--__--))',
109: 1:      'question': '(-_-)',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '112233445566',
109: 1:      'question': '123456',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'SSccrruubb  LLoorrddss',
109: 1:      'question': 'Scrub Lords',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'bbrruuhh',
109: 1:      'question': 'bruh',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'iilllluummiinnaattii',
109: 1:      'question': 'illuminati',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'AAddiiddaass',
109: 1:      'question': 'Adidas',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
109: 1:      'question': '!#%G#DGY^RC',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'DDoonnaalldd  DDuucckk',
109: 1:      'question': 'Donald Duck',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'KKaannyyee  22002200',
109: 1:      'question': 'Kanye 2020',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
109: 1:      'question': 'Bernie Sanders is Bae',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
109: 1:      'question': 'Peanut Butter',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '11333377',
109: 1:      'question': '1337',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
109: 1:      'question': 'h*o@D7an& a',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'YY!!SS4477YY  @@',
109: 1:      'question': 'Y!S47Y @',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '..--&&ddFFII88',
109: 1:      'question': '.-&dFI8',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '!!ZZqq++',
109: 1:      'question': '!Zq+',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
109: 1:      'question': 'g%;U*!a/[pZ4V3/&',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
109: 1:      'question': '7f5nF=:b8eo&+7',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '**22SSNNmm##LLoo&&YY',
109: 1:      'question': '*2SNm#Lo&Y',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '33ZZVVmm',
109: 1:      'question': '3ZVm',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
109: 1:      'question': ']C06*Ec$62o!7][/9',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
109: 1:      'question': '^q%]VoKhh9j5-',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '$$22EEZZGGQQ',
109: 1:      'question': '$2EZGQ',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '``UU99@@hh',
109: 1:      'question': '`U9@h',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'kk^^FF  [[',
109: 1:      'question': 'k^F [',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
109: 1:      'question': '@Y(-SAZa<S2OS**i',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'hh**??RRWW__ii++<<',
109: 1:      'question': 'h*?RW_i+<',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'FFAACCBBTT++33YYCC99mm33++aa00QQ',
109: 1:      'question': 'FACBT+3YC9m3+a0Q',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'KKSS))::jjYY??++SS99',
109: 1:      'question': 'KS):jY?+S9',
109: 1:      'valid': true
109: 1:    }
109: 1:  ],
109: 1:  'info': [
109: 1:    '✅f(String) = SSttrriinngg',
109: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
109: 1:    '✅f(1234!_ ) = 11223344!!__  ',
109: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
109: 1:    '✅f((-_-)) = ((--__--))',
109: 1:    '✅f(123456) = 112233445566',
109: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
109: 1:    '✅f(bruh) = bbrruuhh',
109: 1:    '✅f(illuminati) = iilllluummiinnaattii',
109: 1:    '✅f(Adidas) = AAddiiddaass',
109: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
109: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
109: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
109: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
109: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
109: 1:    '✅f(1337) = 11333377',
109: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
109: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
109: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
109: 1:    '✅f(!Zq+) = !!ZZqq++',
109: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
109: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
109: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
109: 1:    '✅f(3ZVm) = 33ZZVVmm',
109: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
109: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
109: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
109: 1:    '✅f(`U9@h) = ``UU99@@hh',
109: 1:    '✅f(k^F [) = kk^^FF  [[',
109: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
109: 1:    '✅f(h*?RW_i+<) = hh**??RRWW__ii++<<',
109: 1:    '✅f(FACBT+3YC9m3+a0Q) = FFAACCBBTT++33YYCC99mm33++aa00QQ',
109: 1:    '✅f(KS):jY?+S9) = KKSS))::jjYY??++SS99',
109: 1:    '❌f(JBWh) = ??? != JJBBWWhh'
109: 1:  ],
109: 1:  'level': 3,
109: 1:  'nextQuestion': 'JBWh',
109: 1:  'questions': [
109: 1:    'String',
109: 1:    'Hello World',
109: 1:    '1234!_ ',
109: 1:    '____ _ _ __ ___ _ ____ ',
109: 1:    '(-_-)',
109: 1:    '123456',
109: 1:    'Scrub Lords',
109: 1:    'bruh',
109: 1:    'illuminati',
109: 1:    'Adidas',
109: 1:    '!#%G#DGY^RC',
109: 1:    'Donald Duck',
109: 1:    'Kanye 2020',
109: 1:    'Bernie Sanders is Bae',
109: 1:    'Peanut Butter',
109: 1:    '1337',
109: 1:    'h*o@D7an& a',
109: 1:    'Y!S47Y @',
109: 1:    '.-&dFI8',
109: 1:    '!Zq+',
109: 1:    'g%;U*!a/[pZ4V3/&',
109: 1:    '7f5nF=:b8eo&+7',
109: 1:    '*2SNm#Lo&Y',
109: 1:    '3ZVm',
109: 1:    ']C06*Ec$62o!7][/9',
109: 1:    '^q%]VoKhh9j5-',
109: 1:    '$2EZGQ',
109: 1:    '`U9@h',
109: 1:    'k^F [',
109: 1:    '@Y(-SAZa<S2OS**i',
109: 1:    'h*?RW_i+<',
109: 1:    'FACBT+3YC9m3+a0Q',
109: 1:    'KS):jY?+S9',
109: 1:    'JBWh'
109: 1:  ]
109: 1:}
109: 1:Scores: 1614
109: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii', 'hh**??RRWW__ii++<<', 'FFAACCBBTT++33YYCC99mm33++aa00QQ', 'KKSS))::jjYY??++SS99', 'JJBBWWhh']')
109: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
110: 1:BoardData {
110: 1:  'description': [
110: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
110: 1:    'Write a javascript method.',
110: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
110: 1:    'Use regular expressions to solve this problem.'
110: 1:  ],
110: 1:  'expectedAnswer': 'OONNmm33ll))))HH@@GGff((',
110: 1:  'history': [
110: 1:    {
110: 1:      'answer': 'SSttrriinngg',
110: 1:      'question': 'String',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'HHeelllloo  WWoorrlldd',
110: 1:      'question': 'Hello World',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '11223344!!__  ',
110: 1:      'question': '1234!_ ',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
110: 1:      'question': '____ _ _ __ ___ _ ____ ',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '((--__--))',
110: 1:      'question': '(-_-)',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '112233445566',
110: 1:      'question': '123456',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'SSccrruubb  LLoorrddss',
110: 1:      'question': 'Scrub Lords',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'bbrruuhh',
110: 1:      'question': 'bruh',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'iilllluummiinnaattii',
110: 1:      'question': 'illuminati',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'AAddiiddaass',
110: 1:      'question': 'Adidas',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
110: 1:      'question': '!#%G#DGY^RC',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'DDoonnaalldd  DDuucckk',
110: 1:      'question': 'Donald Duck',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'KKaannyyee  22002200',
110: 1:      'question': 'Kanye 2020',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
110: 1:      'question': 'Bernie Sanders is Bae',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
110: 1:      'question': 'Peanut Butter',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '11333377',
110: 1:      'question': '1337',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
110: 1:      'question': 'h*o@D7an& a',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'YY!!SS4477YY  @@',
110: 1:      'question': 'Y!S47Y @',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '..--&&ddFFII88',
110: 1:      'question': '.-&dFI8',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '!!ZZqq++',
110: 1:      'question': '!Zq+',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
110: 1:      'question': 'g%;U*!a/[pZ4V3/&',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
110: 1:      'question': '7f5nF=:b8eo&+7',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '**22SSNNmm##LLoo&&YY',
110: 1:      'question': '*2SNm#Lo&Y',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '33ZZVVmm',
110: 1:      'question': '3ZVm',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
110: 1:      'question': ']C06*Ec$62o!7][/9',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
110: 1:      'question': '^q%]VoKhh9j5-',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '$$22EEZZGGQQ',
110: 1:      'question': '$2EZGQ',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '``UU99@@hh',
110: 1:      'question': '`U9@h',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'kk^^FF  [[',
110: 1:      'question': 'k^F [',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
110: 1:      'question': '@Y(-SAZa<S2OS**i',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'hh**??RRWW__ii++<<',
110: 1:      'question': 'h*?RW_i+<',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'FFAACCBBTT++33YYCC99mm33++aa00QQ',
110: 1:      'question': 'FACBT+3YC9m3+a0Q',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'KKSS))::jjYY??++SS99',
110: 1:      'question': 'KS):jY?+S9',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'JJBBWWhh',
110: 1:      'question': 'JBWh',
110: 1:      'valid': true
110: 1:    }
110: 1:  ],
110: 1:  'info': [
110: 1:    '✅f(String) = SSttrriinngg',
110: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
110: 1:    '✅f(1234!_ ) = 11223344!!__  ',
110: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
110: 1:    '✅f((-_-)) = ((--__--))',
110: 1:    '✅f(123456) = 112233445566',
110: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
110: 1:    '✅f(bruh) = bbrruuhh',
110: 1:    '✅f(illuminati) = iilllluummiinnaattii',
110: 1:    '✅f(Adidas) = AAddiiddaass',
110: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
110: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
110: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
110: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
110: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
110: 1:    '✅f(1337) = 11333377',
110: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
110: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
110: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
110: 1:    '✅f(!Zq+) = !!ZZqq++',
110: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
110: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
110: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
110: 1:    '✅f(3ZVm) = 33ZZVVmm',
110: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
110: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
110: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
110: 1:    '✅f(`U9@h) = ``UU99@@hh',
110: 1:    '✅f(k^F [) = kk^^FF  [[',
110: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
110: 1:    '✅f(h*?RW_i+<) = hh**??RRWW__ii++<<',
110: 1:    '✅f(FACBT+3YC9m3+a0Q) = FFAACCBBTT++33YYCC99mm33++aa00QQ',
110: 1:    '✅f(KS):jY?+S9) = KKSS))::jjYY??++SS99',
110: 1:    '✅f(JBWh) = JJBBWWhh',
110: 1:    '❌f(ONm3l))H@Gf() = ??? != OONNmm33ll))))HH@@GGff(('
110: 1:  ],
110: 1:  'level': 3,
110: 1:  'nextQuestion': 'ONm3l))H@Gf(',
110: 1:  'questions': [
110: 1:    'String',
110: 1:    'Hello World',
110: 1:    '1234!_ ',
110: 1:    '____ _ _ __ ___ _ ____ ',
110: 1:    '(-_-)',
110: 1:    '123456',
110: 1:    'Scrub Lords',
110: 1:    'bruh',
110: 1:    'illuminati',
110: 1:    'Adidas',
110: 1:    '!#%G#DGY^RC',
110: 1:    'Donald Duck',
110: 1:    'Kanye 2020',
110: 1:    'Bernie Sanders is Bae',
110: 1:    'Peanut Butter',
110: 1:    '1337',
110: 1:    'h*o@D7an& a',
110: 1:    'Y!S47Y @',
110: 1:    '.-&dFI8',
110: 1:    '!Zq+',
110: 1:    'g%;U*!a/[pZ4V3/&',
110: 1:    '7f5nF=:b8eo&+7',
110: 1:    '*2SNm#Lo&Y',
110: 1:    '3ZVm',
110: 1:    ']C06*Ec$62o!7][/9',
110: 1:    '^q%]VoKhh9j5-',
110: 1:    '$2EZGQ',
110: 1:    '`U9@h',
110: 1:    'k^F [',
110: 1:    '@Y(-SAZa<S2OS**i',
110: 1:    'h*?RW_i+<',
110: 1:    'FACBT+3YC9m3+a0Q',
110: 1:    'KS):jY?+S9',
110: 1:    'JBWh',
110: 1:    'ONm3l))H@Gf('
110: 1:  ]
110: 1:}
110: 1:Scores: 1615
110: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii', 'hh**??RRWW__ii++<<', 'FFAACCBBTT++33YYCC99mm33++aa00QQ', 'KKSS))::jjYY??++SS99', 'JJBBWWhh', 'OONNmm33ll))))HH@@GGff((']')
110: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
111: 1:BoardData {
111: 1:  'description': [
111: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
111: 1:    'Write a javascript method.',
111: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
111: 1:    'Use regular expressions to solve this problem.'
111: 1:  ],
111: 1:  'expectedAnswer': 'ffkk66KKgg  77&&',
111: 1:  'history': [
111: 1:    {
111: 1:      'answer': 'SSttrriinngg',
111: 1:      'question': 'String',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'HHeelllloo  WWoorrlldd',
111: 1:      'question': 'Hello World',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '11223344!!__  ',
111: 1:      'question': '1234!_ ',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
111: 1:      'question': '____ _ _ __ ___ _ ____ ',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '((--__--))',
111: 1:      'question': '(-_-)',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '112233445566',
111: 1:      'question': '123456',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'SSccrruubb  LLoorrddss',
111: 1:      'question': 'Scrub Lords',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'bbrruuhh',
111: 1:      'question': 'bruh',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'iilllluummiinnaattii',
111: 1:      'question': 'illuminati',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'AAddiiddaass',
111: 1:      'question': 'Adidas',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
111: 1:      'question': '!#%G#DGY^RC',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'DDoonnaalldd  DDuucckk',
111: 1:      'question': 'Donald Duck',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'KKaannyyee  22002200',
111: 1:      'question': 'Kanye 2020',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
111: 1:      'question': 'Bernie Sanders is Bae',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
111: 1:      'question': 'Peanut Butter',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '11333377',
111: 1:      'question': '1337',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
111: 1:      'question': 'h*o@D7an& a',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'YY!!SS4477YY  @@',
111: 1:      'question': 'Y!S47Y @',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '..--&&ddFFII88',
111: 1:      'question': '.-&dFI8',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '!!ZZqq++',
111: 1:      'question': '!Zq+',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
111: 1:      'question': 'g%;U*!a/[pZ4V3/&',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
111: 1:      'question': '7f5nF=:b8eo&+7',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '**22SSNNmm##LLoo&&YY',
111: 1:      'question': '*2SNm#Lo&Y',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '33ZZVVmm',
111: 1:      'question': '3ZVm',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
111: 1:      'question': ']C06*Ec$62o!7][/9',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
111: 1:      'question': '^q%]VoKhh9j5-',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '$$22EEZZGGQQ',
111: 1:      'question': '$2EZGQ',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '``UU99@@hh',
111: 1:      'question': '`U9@h',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'kk^^FF  [[',
111: 1:      'question': 'k^F [',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
111: 1:      'question': '@Y(-SAZa<S2OS**i',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'hh**??RRWW__ii++<<',
111: 1:      'question': 'h*?RW_i+<',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'FFAACCBBTT++33YYCC99mm33++aa00QQ',
111: 1:      'question': 'FACBT+3YC9m3+a0Q',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'KKSS))::jjYY??++SS99',
111: 1:      'question': 'KS):jY?+S9',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'JJBBWWhh',
111: 1:      'question': 'JBWh',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'OONNmm33ll))))HH@@GGff((',
111: 1:      'question': 'ONm3l))H@Gf(',
111: 1:      'valid': true
111: 1:    }
111: 1:  ],
111: 1:  'info': [
111: 1:    '✅f(String) = SSttrriinngg',
111: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
111: 1:    '✅f(1234!_ ) = 11223344!!__  ',
111: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
111: 1:    '✅f((-_-)) = ((--__--))',
111: 1:    '✅f(123456) = 112233445566',
111: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
111: 1:    '✅f(bruh) = bbrruuhh',
111: 1:    '✅f(illuminati) = iilllluummiinnaattii',
111: 1:    '✅f(Adidas) = AAddiiddaass',
111: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
111: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
111: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
111: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
111: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
111: 1:    '✅f(1337) = 11333377',
111: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
111: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
111: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
111: 1:    '✅f(!Zq+) = !!ZZqq++',
111: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
111: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
111: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
111: 1:    '✅f(3ZVm) = 33ZZVVmm',
111: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
111: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
111: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
111: 1:    '✅f(`U9@h) = ``UU99@@hh',
111: 1:    '✅f(k^F [) = kk^^FF  [[',
111: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
111: 1:    '✅f(h*?RW_i+<) = hh**??RRWW__ii++<<',
111: 1:    '✅f(FACBT+3YC9m3+a0Q) = FFAACCBBTT++33YYCC99mm33++aa00QQ',
111: 1:    '✅f(KS):jY?+S9) = KKSS))::jjYY??++SS99',
111: 1:    '✅f(JBWh) = JJBBWWhh',
111: 1:    '✅f(ONm3l))H@Gf() = OONNmm33ll))))HH@@GGff((',
111: 1:    '❌f(fk6Kg 7&) = ??? != ffkk66KKgg  77&&'
111: 1:  ],
111: 1:  'level': 3,
111: 1:  'nextQuestion': 'fk6Kg 7&',
111: 1:  'questions': [
111: 1:    'String',
111: 1:    'Hello World',
111: 1:    '1234!_ ',
111: 1:    '____ _ _ __ ___ _ ____ ',
111: 1:    '(-_-)',
111: 1:    '123456',
111: 1:    'Scrub Lords',
111: 1:    'bruh',
111: 1:    'illuminati',
111: 1:    'Adidas',
111: 1:    '!#%G#DGY^RC',
111: 1:    'Donald Duck',
111: 1:    'Kanye 2020',
111: 1:    'Bernie Sanders is Bae',
111: 1:    'Peanut Butter',
111: 1:    '1337',
111: 1:    'h*o@D7an& a',
111: 1:    'Y!S47Y @',
111: 1:    '.-&dFI8',
111: 1:    '!Zq+',
111: 1:    'g%;U*!a/[pZ4V3/&',
111: 1:    '7f5nF=:b8eo&+7',
111: 1:    '*2SNm#Lo&Y',
111: 1:    '3ZVm',
111: 1:    ']C06*Ec$62o!7][/9',
111: 1:    '^q%]VoKhh9j5-',
111: 1:    '$2EZGQ',
111: 1:    '`U9@h',
111: 1:    'k^F [',
111: 1:    '@Y(-SAZa<S2OS**i',
111: 1:    'h*?RW_i+<',
111: 1:    'FACBT+3YC9m3+a0Q',
111: 1:    'KS):jY?+S9',
111: 1:    'JBWh',
111: 1:    'ONm3l))H@Gf(',
111: 1:    'fk6Kg 7&'
111: 1:  ]
111: 1:}
111: 1:Scores: 1616
111: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii', 'hh**??RRWW__ii++<<', 'FFAACCBBTT++33YYCC99mm33++aa00QQ', 'KKSS))::jjYY??++SS99', 'JJBBWWhh', 'OONNmm33ll))))HH@@GGff((', 'ffkk66KKgg  77&&']')
111: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
112: 1:BoardData {
112: 1:  'description': [
112: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
112: 1:    'Write a javascript method.',
112: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
112: 1:    'Use regular expressions to solve this problem.'
112: 1:  ],
112: 1:  'expectedAnswer': '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
112: 1:  'history': [
112: 1:    {
112: 1:      'answer': 'SSttrriinngg',
112: 1:      'question': 'String',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'HHeelllloo  WWoorrlldd',
112: 1:      'question': 'Hello World',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '11223344!!__  ',
112: 1:      'question': '1234!_ ',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
112: 1:      'question': '____ _ _ __ ___ _ ____ ',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '((--__--))',
112: 1:      'question': '(-_-)',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '112233445566',
112: 1:      'question': '123456',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'SSccrruubb  LLoorrddss',
112: 1:      'question': 'Scrub Lords',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'bbrruuhh',
112: 1:      'question': 'bruh',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'iilllluummiinnaattii',
112: 1:      'question': 'illuminati',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'AAddiiddaass',
112: 1:      'question': 'Adidas',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
112: 1:      'question': '!#%G#DGY^RC',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'DDoonnaalldd  DDuucckk',
112: 1:      'question': 'Donald Duck',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'KKaannyyee  22002200',
112: 1:      'question': 'Kanye 2020',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
112: 1:      'question': 'Bernie Sanders is Bae',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
112: 1:      'question': 'Peanut Butter',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '11333377',
112: 1:      'question': '1337',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
112: 1:      'question': 'h*o@D7an& a',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'YY!!SS4477YY  @@',
112: 1:      'question': 'Y!S47Y @',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '..--&&ddFFII88',
112: 1:      'question': '.-&dFI8',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '!!ZZqq++',
112: 1:      'question': '!Zq+',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
112: 1:      'question': 'g%;U*!a/[pZ4V3/&',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
112: 1:      'question': '7f5nF=:b8eo&+7',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '**22SSNNmm##LLoo&&YY',
112: 1:      'question': '*2SNm#Lo&Y',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '33ZZVVmm',
112: 1:      'question': '3ZVm',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
112: 1:      'question': ']C06*Ec$62o!7][/9',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
112: 1:      'question': '^q%]VoKhh9j5-',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '$$22EEZZGGQQ',
112: 1:      'question': '$2EZGQ',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '``UU99@@hh',
112: 1:      'question': '`U9@h',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'kk^^FF  [[',
112: 1:      'question': 'k^F [',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
112: 1:      'question': '@Y(-SAZa<S2OS**i',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'hh**??RRWW__ii++<<',
112: 1:      'question': 'h*?RW_i+<',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'FFAACCBBTT++33YYCC99mm33++aa00QQ',
112: 1:      'question': 'FACBT+3YC9m3+a0Q',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'KKSS))::jjYY??++SS99',
112: 1:      'question': 'KS):jY?+S9',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'JJBBWWhh',
112: 1:      'question': 'JBWh',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'OONNmm33ll))))HH@@GGff((',
112: 1:      'question': 'ONm3l))H@Gf(',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'ffkk66KKgg  77&&',
112: 1:      'question': 'fk6Kg 7&',
112: 1:      'valid': true
112: 1:    }
112: 1:  ],
112: 1:  'info': [
112: 1:    '✅f(String) = SSttrriinngg',
112: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
112: 1:    '✅f(1234!_ ) = 11223344!!__  ',
112: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
112: 1:    '✅f((-_-)) = ((--__--))',
112: 1:    '✅f(123456) = 112233445566',
112: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
112: 1:    '✅f(bruh) = bbrruuhh',
112: 1:    '✅f(illuminati) = iilllluummiinnaattii',
112: 1:    '✅f(Adidas) = AAddiiddaass',
112: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
112: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
112: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
112: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
112: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
112: 1:    '✅f(1337) = 11333377',
112: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
112: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
112: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
112: 1:    '✅f(!Zq+) = !!ZZqq++',
112: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
112: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
112: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
112: 1:    '✅f(3ZVm) = 33ZZVVmm',
112: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
112: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
112: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
112: 1:    '✅f(`U9@h) = ``UU99@@hh',
112: 1:    '✅f(k^F [) = kk^^FF  [[',
112: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
112: 1:    '✅f(h*?RW_i+<) = hh**??RRWW__ii++<<',
112: 1:    '✅f(FACBT+3YC9m3+a0Q) = FFAACCBBTT++33YYCC99mm33++aa00QQ',
112: 1:    '✅f(KS):jY?+S9) = KKSS))::jjYY??++SS99',
112: 1:    '✅f(JBWh) = JJBBWWhh',
112: 1:    '✅f(ONm3l))H@Gf() = OONNmm33ll))))HH@@GGff((',
112: 1:    '✅f(fk6Kg 7&) = ffkk66KKgg  77&&',
112: 1:    '❌f(*A&2SJUb#(Vc(OjC`W1) = ??? != **AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11'
112: 1:  ],
112: 1:  'level': 3,
112: 1:  'nextQuestion': '*A&2SJUb#(Vc(OjC`W1',
112: 1:  'questions': [
112: 1:    'String',
112: 1:    'Hello World',
112: 1:    '1234!_ ',
112: 1:    '____ _ _ __ ___ _ ____ ',
112: 1:    '(-_-)',
112: 1:    '123456',
112: 1:    'Scrub Lords',
112: 1:    'bruh',
112: 1:    'illuminati',
112: 1:    'Adidas',
112: 1:    '!#%G#DGY^RC',
112: 1:    'Donald Duck',
112: 1:    'Kanye 2020',
112: 1:    'Bernie Sanders is Bae',
112: 1:    'Peanut Butter',
112: 1:    '1337',
112: 1:    'h*o@D7an& a',
112: 1:    'Y!S47Y @',
112: 1:    '.-&dFI8',
112: 1:    '!Zq+',
112: 1:    'g%;U*!a/[pZ4V3/&',
112: 1:    '7f5nF=:b8eo&+7',
112: 1:    '*2SNm#Lo&Y',
112: 1:    '3ZVm',
112: 1:    ']C06*Ec$62o!7][/9',
112: 1:    '^q%]VoKhh9j5-',
112: 1:    '$2EZGQ',
112: 1:    '`U9@h',
112: 1:    'k^F [',
112: 1:    '@Y(-SAZa<S2OS**i',
112: 1:    'h*?RW_i+<',
112: 1:    'FACBT+3YC9m3+a0Q',
112: 1:    'KS):jY?+S9',
112: 1:    'JBWh',
112: 1:    'ONm3l))H@Gf(',
112: 1:    'fk6Kg 7&',
112: 1:    '*A&2SJUb#(Vc(OjC`W1'
112: 1:  ]
112: 1:}
112: 1:Scores: 1617
112: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii', 'hh**??RRWW__ii++<<', 'FFAACCBBTT++33YYCC99mm33++aa00QQ', 'KKSS))::jjYY??++SS99', 'JJBBWWhh', 'OONNmm33ll))))HH@@GGff((', 'ffkk66KKgg  77&&', '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11']')
112: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
113: 1:BoardData {
113: 1:  'description': [
113: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
113: 1:    'Write a javascript method.',
113: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
113: 1:    'Use regular expressions to solve this problem.'
113: 1:  ],
113: 1:  'expectedAnswer': '``SS99OONNuu000011EE8833++!!',
113: 1:  'history': [
113: 1:    {
113: 1:      'answer': 'SSttrriinngg',
113: 1:      'question': 'String',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'HHeelllloo  WWoorrlldd',
113: 1:      'question': 'Hello World',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '11223344!!__  ',
113: 1:      'question': '1234!_ ',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
113: 1:      'question': '____ _ _ __ ___ _ ____ ',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '((--__--))',
113: 1:      'question': '(-_-)',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '112233445566',
113: 1:      'question': '123456',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'SSccrruubb  LLoorrddss',
113: 1:      'question': 'Scrub Lords',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'bbrruuhh',
113: 1:      'question': 'bruh',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'iilllluummiinnaattii',
113: 1:      'question': 'illuminati',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'AAddiiddaass',
113: 1:      'question': 'Adidas',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
113: 1:      'question': '!#%G#DGY^RC',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'DDoonnaalldd  DDuucckk',
113: 1:      'question': 'Donald Duck',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'KKaannyyee  22002200',
113: 1:      'question': 'Kanye 2020',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
113: 1:      'question': 'Bernie Sanders is Bae',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
113: 1:      'question': 'Peanut Butter',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '11333377',
113: 1:      'question': '1337',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
113: 1:      'question': 'h*o@D7an& a',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'YY!!SS4477YY  @@',
113: 1:      'question': 'Y!S47Y @',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '..--&&ddFFII88',
113: 1:      'question': '.-&dFI8',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '!!ZZqq++',
113: 1:      'question': '!Zq+',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
113: 1:      'question': 'g%;U*!a/[pZ4V3/&',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
113: 1:      'question': '7f5nF=:b8eo&+7',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '**22SSNNmm##LLoo&&YY',
113: 1:      'question': '*2SNm#Lo&Y',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '33ZZVVmm',
113: 1:      'question': '3ZVm',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
113: 1:      'question': ']C06*Ec$62o!7][/9',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
113: 1:      'question': '^q%]VoKhh9j5-',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '$$22EEZZGGQQ',
113: 1:      'question': '$2EZGQ',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '``UU99@@hh',
113: 1:      'question': '`U9@h',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'kk^^FF  [[',
113: 1:      'question': 'k^F [',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
113: 1:      'question': '@Y(-SAZa<S2OS**i',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'hh**??RRWW__ii++<<',
113: 1:      'question': 'h*?RW_i+<',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'FFAACCBBTT++33YYCC99mm33++aa00QQ',
113: 1:      'question': 'FACBT+3YC9m3+a0Q',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'KKSS))::jjYY??++SS99',
113: 1:      'question': 'KS):jY?+S9',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'JJBBWWhh',
113: 1:      'question': 'JBWh',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'OONNmm33ll))))HH@@GGff((',
113: 1:      'question': 'ONm3l))H@Gf(',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'ffkk66KKgg  77&&',
113: 1:      'question': 'fk6Kg 7&',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
113: 1:      'question': '*A&2SJUb#(Vc(OjC`W1',
113: 1:      'valid': true
113: 1:    }
113: 1:  ],
113: 1:  'info': [
113: 1:    '✅f(String) = SSttrriinngg',
113: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
113: 1:    '✅f(1234!_ ) = 11223344!!__  ',
113: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
113: 1:    '✅f((-_-)) = ((--__--))',
113: 1:    '✅f(123456) = 112233445566',
113: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
113: 1:    '✅f(bruh) = bbrruuhh',
113: 1:    '✅f(illuminati) = iilllluummiinnaattii',
113: 1:    '✅f(Adidas) = AAddiiddaass',
113: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
113: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
113: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
113: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
113: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
113: 1:    '✅f(1337) = 11333377',
113: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
113: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
113: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
113: 1:    '✅f(!Zq+) = !!ZZqq++',
113: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
113: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
113: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
113: 1:    '✅f(3ZVm) = 33ZZVVmm',
113: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
113: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
113: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
113: 1:    '✅f(`U9@h) = ``UU99@@hh',
113: 1:    '✅f(k^F [) = kk^^FF  [[',
113: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
113: 1:    '✅f(h*?RW_i+<) = hh**??RRWW__ii++<<',
113: 1:    '✅f(FACBT+3YC9m3+a0Q) = FFAACCBBTT++33YYCC99mm33++aa00QQ',
113: 1:    '✅f(KS):jY?+S9) = KKSS))::jjYY??++SS99',
113: 1:    '✅f(JBWh) = JJBBWWhh',
113: 1:    '✅f(ONm3l))H@Gf() = OONNmm33ll))))HH@@GGff((',
113: 1:    '✅f(fk6Kg 7&) = ffkk66KKgg  77&&',
113: 1:    '✅f(*A&2SJUb#(Vc(OjC`W1) = **AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
113: 1:    '❌f(`S9ONu001E83+!) = ??? != ``SS99OONNuu000011EE8833++!!'
113: 1:  ],
113: 1:  'level': 3,
113: 1:  'nextQuestion': '`S9ONu001E83+!',
113: 1:  'questions': [
113: 1:    'String',
113: 1:    'Hello World',
113: 1:    '1234!_ ',
113: 1:    '____ _ _ __ ___ _ ____ ',
113: 1:    '(-_-)',
113: 1:    '123456',
113: 1:    'Scrub Lords',
113: 1:    'bruh',
113: 1:    'illuminati',
113: 1:    'Adidas',
113: 1:    '!#%G#DGY^RC',
113: 1:    'Donald Duck',
113: 1:    'Kanye 2020',
113: 1:    'Bernie Sanders is Bae',
113: 1:    'Peanut Butter',
113: 1:    '1337',
113: 1:    'h*o@D7an& a',
113: 1:    'Y!S47Y @',
113: 1:    '.-&dFI8',
113: 1:    '!Zq+',
113: 1:    'g%;U*!a/[pZ4V3/&',
113: 1:    '7f5nF=:b8eo&+7',
113: 1:    '*2SNm#Lo&Y',
113: 1:    '3ZVm',
113: 1:    ']C06*Ec$62o!7][/9',
113: 1:    '^q%]VoKhh9j5-',
113: 1:    '$2EZGQ',
113: 1:    '`U9@h',
113: 1:    'k^F [',
113: 1:    '@Y(-SAZa<S2OS**i',
113: 1:    'h*?RW_i+<',
113: 1:    'FACBT+3YC9m3+a0Q',
113: 1:    'KS):jY?+S9',
113: 1:    'JBWh',
113: 1:    'ONm3l))H@Gf(',
113: 1:    'fk6Kg 7&',
113: 1:    '*A&2SJUb#(Vc(OjC`W1',
113: 1:    '`S9ONu001E83+!'
113: 1:  ]
113: 1:}
113: 1:Scores: 1618
113: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii', 'hh**??RRWW__ii++<<', 'FFAACCBBTT++33YYCC99mm33++aa00QQ', 'KKSS))::jjYY??++SS99', 'JJBBWWhh', 'OONNmm33ll))))HH@@GGff((', 'ffkk66KKgg  77&&', '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11', '``SS99OONNuu000011EE8833++!!']')
113: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
114: 1:BoardData {
114: 1:  'description': [
114: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
114: 1:    'Write a javascript method.',
114: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
114: 1:    'Use regular expressions to solve this problem.'
114: 1:  ],
114: 1:  'expectedAnswer': '((YYQQ^^//22]]77cc$$88LL**,,]]::++',
114: 1:  'history': [
114: 1:    {
114: 1:      'answer': 'SSttrriinngg',
114: 1:      'question': 'String',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'HHeelllloo  WWoorrlldd',
114: 1:      'question': 'Hello World',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '11223344!!__  ',
114: 1:      'question': '1234!_ ',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
114: 1:      'question': '____ _ _ __ ___ _ ____ ',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '((--__--))',
114: 1:      'question': '(-_-)',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '112233445566',
114: 1:      'question': '123456',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'SSccrruubb  LLoorrddss',
114: 1:      'question': 'Scrub Lords',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'bbrruuhh',
114: 1:      'question': 'bruh',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'iilllluummiinnaattii',
114: 1:      'question': 'illuminati',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'AAddiiddaass',
114: 1:      'question': 'Adidas',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
114: 1:      'question': '!#%G#DGY^RC',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'DDoonnaalldd  DDuucckk',
114: 1:      'question': 'Donald Duck',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'KKaannyyee  22002200',
114: 1:      'question': 'Kanye 2020',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
114: 1:      'question': 'Bernie Sanders is Bae',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
114: 1:      'question': 'Peanut Butter',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '11333377',
114: 1:      'question': '1337',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
114: 1:      'question': 'h*o@D7an& a',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'YY!!SS4477YY  @@',
114: 1:      'question': 'Y!S47Y @',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '..--&&ddFFII88',
114: 1:      'question': '.-&dFI8',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '!!ZZqq++',
114: 1:      'question': '!Zq+',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
114: 1:      'question': 'g%;U*!a/[pZ4V3/&',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
114: 1:      'question': '7f5nF=:b8eo&+7',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '**22SSNNmm##LLoo&&YY',
114: 1:      'question': '*2SNm#Lo&Y',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '33ZZVVmm',
114: 1:      'question': '3ZVm',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
114: 1:      'question': ']C06*Ec$62o!7][/9',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
114: 1:      'question': '^q%]VoKhh9j5-',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '$$22EEZZGGQQ',
114: 1:      'question': '$2EZGQ',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '``UU99@@hh',
114: 1:      'question': '`U9@h',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'kk^^FF  [[',
114: 1:      'question': 'k^F [',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
114: 1:      'question': '@Y(-SAZa<S2OS**i',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'hh**??RRWW__ii++<<',
114: 1:      'question': 'h*?RW_i+<',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'FFAACCBBTT++33YYCC99mm33++aa00QQ',
114: 1:      'question': 'FACBT+3YC9m3+a0Q',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'KKSS))::jjYY??++SS99',
114: 1:      'question': 'KS):jY?+S9',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'JJBBWWhh',
114: 1:      'question': 'JBWh',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'OONNmm33ll))))HH@@GGff((',
114: 1:      'question': 'ONm3l))H@Gf(',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'ffkk66KKgg  77&&',
114: 1:      'question': 'fk6Kg 7&',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
114: 1:      'question': '*A&2SJUb#(Vc(OjC`W1',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '``SS99OONNuu000011EE8833++!!',
114: 1:      'question': '`S9ONu001E83+!',
114: 1:      'valid': true
114: 1:    }
114: 1:  ],
114: 1:  'info': [
114: 1:    '✅f(String) = SSttrriinngg',
114: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
114: 1:    '✅f(1234!_ ) = 11223344!!__  ',
114: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
114: 1:    '✅f((-_-)) = ((--__--))',
114: 1:    '✅f(123456) = 112233445566',
114: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
114: 1:    '✅f(bruh) = bbrruuhh',
114: 1:    '✅f(illuminati) = iilllluummiinnaattii',
114: 1:    '✅f(Adidas) = AAddiiddaass',
114: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
114: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
114: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
114: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
114: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
114: 1:    '✅f(1337) = 11333377',
114: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
114: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
114: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
114: 1:    '✅f(!Zq+) = !!ZZqq++',
114: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
114: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
114: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
114: 1:    '✅f(3ZVm) = 33ZZVVmm',
114: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
114: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
114: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
114: 1:    '✅f(`U9@h) = ``UU99@@hh',
114: 1:    '✅f(k^F [) = kk^^FF  [[',
114: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
114: 1:    '✅f(h*?RW_i+<) = hh**??RRWW__ii++<<',
114: 1:    '✅f(FACBT+3YC9m3+a0Q) = FFAACCBBTT++33YYCC99mm33++aa00QQ',
114: 1:    '✅f(KS):jY?+S9) = KKSS))::jjYY??++SS99',
114: 1:    '✅f(JBWh) = JJBBWWhh',
114: 1:    '✅f(ONm3l))H@Gf() = OONNmm33ll))))HH@@GGff((',
114: 1:    '✅f(fk6Kg 7&) = ffkk66KKgg  77&&',
114: 1:    '✅f(*A&2SJUb#(Vc(OjC`W1) = **AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
114: 1:    '✅f(`S9ONu001E83+!) = ``SS99OONNuu000011EE8833++!!',
114: 1:    '❌f((YQ^/2]7c$8L*,]:+) = ??? != ((YYQQ^^//22]]77cc$$88LL**,,]]::++'
114: 1:  ],
114: 1:  'level': 3,
114: 1:  'nextQuestion': '(YQ^/2]7c$8L*,]:+',
114: 1:  'questions': [
114: 1:    'String',
114: 1:    'Hello World',
114: 1:    '1234!_ ',
114: 1:    '____ _ _ __ ___ _ ____ ',
114: 1:    '(-_-)',
114: 1:    '123456',
114: 1:    'Scrub Lords',
114: 1:    'bruh',
114: 1:    'illuminati',
114: 1:    'Adidas',
114: 1:    '!#%G#DGY^RC',
114: 1:    'Donald Duck',
114: 1:    'Kanye 2020',
114: 1:    'Bernie Sanders is Bae',
114: 1:    'Peanut Butter',
114: 1:    '1337',
114: 1:    'h*o@D7an& a',
114: 1:    'Y!S47Y @',
114: 1:    '.-&dFI8',
114: 1:    '!Zq+',
114: 1:    'g%;U*!a/[pZ4V3/&',
114: 1:    '7f5nF=:b8eo&+7',
114: 1:    '*2SNm#Lo&Y',
114: 1:    '3ZVm',
114: 1:    ']C06*Ec$62o!7][/9',
114: 1:    '^q%]VoKhh9j5-',
114: 1:    '$2EZGQ',
114: 1:    '`U9@h',
114: 1:    'k^F [',
114: 1:    '@Y(-SAZa<S2OS**i',
114: 1:    'h*?RW_i+<',
114: 1:    'FACBT+3YC9m3+a0Q',
114: 1:    'KS):jY?+S9',
114: 1:    'JBWh',
114: 1:    'ONm3l))H@Gf(',
114: 1:    'fk6Kg 7&',
114: 1:    '*A&2SJUb#(Vc(OjC`W1',
114: 1:    '`S9ONu001E83+!',
114: 1:    '(YQ^/2]7c$8L*,]:+'
114: 1:  ]
114: 1:}
114: 1:Scores: 1619
114: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii', 'hh**??RRWW__ii++<<', 'FFAACCBBTT++33YYCC99mm33++aa00QQ', 'KKSS))::jjYY??++SS99', 'JJBBWWhh', 'OONNmm33ll))))HH@@GGff((', 'ffkk66KKgg  77&&', '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11', '``SS99OONNuu000011EE8833++!!', '((YYQQ^^//22]]77cc$$88LL**,,]]::++']')
114: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
115: 1:BoardData {
115: 1:  'description': [
115: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
115: 1:    'Write a javascript method.',
115: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
115: 1:    'Use regular expressions to solve this problem.'
115: 1:  ],
115: 1:  'expectedAnswer': '77PPllaa  GG33**CC[[==%%``dd==ll$$',
115: 1:  'history': [
115: 1:    {
115: 1:      'answer': 'SSttrriinngg',
115: 1:      'question': 'String',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'HHeelllloo  WWoorrlldd',
115: 1:      'question': 'Hello World',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '11223344!!__  ',
115: 1:      'question': '1234!_ ',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
115: 1:      'question': '____ _ _ __ ___ _ ____ ',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '((--__--))',
115: 1:      'question': '(-_-)',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '112233445566',
115: 1:      'question': '123456',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'SSccrruubb  LLoorrddss',
115: 1:      'question': 'Scrub Lords',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'bbrruuhh',
115: 1:      'question': 'bruh',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'iilllluummiinnaattii',
115: 1:      'question': 'illuminati',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'AAddiiddaass',
115: 1:      'question': 'Adidas',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
115: 1:      'question': '!#%G#DGY^RC',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'DDoonnaalldd  DDuucckk',
115: 1:      'question': 'Donald Duck',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'KKaannyyee  22002200',
115: 1:      'question': 'Kanye 2020',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
115: 1:      'question': 'Bernie Sanders is Bae',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
115: 1:      'question': 'Peanut Butter',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '11333377',
115: 1:      'question': '1337',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
115: 1:      'question': 'h*o@D7an& a',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'YY!!SS4477YY  @@',
115: 1:      'question': 'Y!S47Y @',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '..--&&ddFFII88',
115: 1:      'question': '.-&dFI8',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '!!ZZqq++',
115: 1:      'question': '!Zq+',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
115: 1:      'question': 'g%;U*!a/[pZ4V3/&',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
115: 1:      'question': '7f5nF=:b8eo&+7',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '**22SSNNmm##LLoo&&YY',
115: 1:      'question': '*2SNm#Lo&Y',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '33ZZVVmm',
115: 1:      'question': '3ZVm',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
115: 1:      'question': ']C06*Ec$62o!7][/9',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
115: 1:      'question': '^q%]VoKhh9j5-',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '$$22EEZZGGQQ',
115: 1:      'question': '$2EZGQ',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '``UU99@@hh',
115: 1:      'question': '`U9@h',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'kk^^FF  [[',
115: 1:      'question': 'k^F [',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
115: 1:      'question': '@Y(-SAZa<S2OS**i',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'hh**??RRWW__ii++<<',
115: 1:      'question': 'h*?RW_i+<',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'FFAACCBBTT++33YYCC99mm33++aa00QQ',
115: 1:      'question': 'FACBT+3YC9m3+a0Q',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'KKSS))::jjYY??++SS99',
115: 1:      'question': 'KS):jY?+S9',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'JJBBWWhh',
115: 1:      'question': 'JBWh',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'OONNmm33ll))))HH@@GGff((',
115: 1:      'question': 'ONm3l))H@Gf(',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'ffkk66KKgg  77&&',
115: 1:      'question': 'fk6Kg 7&',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
115: 1:      'question': '*A&2SJUb#(Vc(OjC`W1',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '``SS99OONNuu000011EE8833++!!',
115: 1:      'question': '`S9ONu001E83+!',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '((YYQQ^^//22]]77cc$$88LL**,,]]::++',
115: 1:      'question': '(YQ^/2]7c$8L*,]:+',
115: 1:      'valid': true
115: 1:    }
115: 1:  ],
115: 1:  'info': [
115: 1:    '✅f(String) = SSttrriinngg',
115: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
115: 1:    '✅f(1234!_ ) = 11223344!!__  ',
115: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
115: 1:    '✅f((-_-)) = ((--__--))',
115: 1:    '✅f(123456) = 112233445566',
115: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
115: 1:    '✅f(bruh) = bbrruuhh',
115: 1:    '✅f(illuminati) = iilllluummiinnaattii',
115: 1:    '✅f(Adidas) = AAddiiddaass',
115: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
115: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
115: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
115: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
115: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
115: 1:    '✅f(1337) = 11333377',
115: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
115: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
115: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
115: 1:    '✅f(!Zq+) = !!ZZqq++',
115: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
115: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
115: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
115: 1:    '✅f(3ZVm) = 33ZZVVmm',
115: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
115: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
115: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
115: 1:    '✅f(`U9@h) = ``UU99@@hh',
115: 1:    '✅f(k^F [) = kk^^FF  [[',
115: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
115: 1:    '✅f(h*?RW_i+<) = hh**??RRWW__ii++<<',
115: 1:    '✅f(FACBT+3YC9m3+a0Q) = FFAACCBBTT++33YYCC99mm33++aa00QQ',
115: 1:    '✅f(KS):jY?+S9) = KKSS))::jjYY??++SS99',
115: 1:    '✅f(JBWh) = JJBBWWhh',
115: 1:    '✅f(ONm3l))H@Gf() = OONNmm33ll))))HH@@GGff((',
115: 1:    '✅f(fk6Kg 7&) = ffkk66KKgg  77&&',
115: 1:    '✅f(*A&2SJUb#(Vc(OjC`W1) = **AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
115: 1:    '✅f(`S9ONu001E83+!) = ``SS99OONNuu000011EE8833++!!',
115: 1:    '✅f((YQ^/2]7c$8L*,]:+) = ((YYQQ^^//22]]77cc$$88LL**,,]]::++',
115: 1:    '❌f(7Pla G3*C[=%`d=l$) = ??? != 77PPllaa  GG33**CC[[==%%``dd==ll$$'
115: 1:  ],
115: 1:  'level': 3,
115: 1:  'nextQuestion': '7Pla G3*C[=%`d=l$',
115: 1:  'questions': [
115: 1:    'String',
115: 1:    'Hello World',
115: 1:    '1234!_ ',
115: 1:    '____ _ _ __ ___ _ ____ ',
115: 1:    '(-_-)',
115: 1:    '123456',
115: 1:    'Scrub Lords',
115: 1:    'bruh',
115: 1:    'illuminati',
115: 1:    'Adidas',
115: 1:    '!#%G#DGY^RC',
115: 1:    'Donald Duck',
115: 1:    'Kanye 2020',
115: 1:    'Bernie Sanders is Bae',
115: 1:    'Peanut Butter',
115: 1:    '1337',
115: 1:    'h*o@D7an& a',
115: 1:    'Y!S47Y @',
115: 1:    '.-&dFI8',
115: 1:    '!Zq+',
115: 1:    'g%;U*!a/[pZ4V3/&',
115: 1:    '7f5nF=:b8eo&+7',
115: 1:    '*2SNm#Lo&Y',
115: 1:    '3ZVm',
115: 1:    ']C06*Ec$62o!7][/9',
115: 1:    '^q%]VoKhh9j5-',
115: 1:    '$2EZGQ',
115: 1:    '`U9@h',
115: 1:    'k^F [',
115: 1:    '@Y(-SAZa<S2OS**i',
115: 1:    'h*?RW_i+<',
115: 1:    'FACBT+3YC9m3+a0Q',
115: 1:    'KS):jY?+S9',
115: 1:    'JBWh',
115: 1:    'ONm3l))H@Gf(',
115: 1:    'fk6Kg 7&',
115: 1:    '*A&2SJUb#(Vc(OjC`W1',
115: 1:    '`S9ONu001E83+!',
115: 1:    '(YQ^/2]7c$8L*,]:+',
115: 1:    '7Pla G3*C[=%`d=l$'
115: 1:  ]
115: 1:}
115: 1:Scores: 1620
115: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii', 'hh**??RRWW__ii++<<', 'FFAACCBBTT++33YYCC99mm33++aa00QQ', 'KKSS))::jjYY??++SS99', 'JJBBWWhh', 'OONNmm33ll))))HH@@GGff((', 'ffkk66KKgg  77&&', '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11', '``SS99OONNuu000011EE8833++!!', '((YYQQ^^//22]]77cc$$88LL**,,]]::++', '77PPllaa  GG33**CC[[==%%``dd==ll$$']')
115: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
116: 1:BoardData {
116: 1:  'description': [
116: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
116: 1:    'Write a javascript method.',
116: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
116: 1:    'Use regular expressions to solve this problem.'
116: 1:  ],
116: 1:  'expectedAnswer': '1122mmqq,,<<[[::FFddFF&&^^22PP',
116: 1:  'history': [
116: 1:    {
116: 1:      'answer': 'SSttrriinngg',
116: 1:      'question': 'String',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'HHeelllloo  WWoorrlldd',
116: 1:      'question': 'Hello World',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '11223344!!__  ',
116: 1:      'question': '1234!_ ',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
116: 1:      'question': '____ _ _ __ ___ _ ____ ',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '((--__--))',
116: 1:      'question': '(-_-)',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '112233445566',
116: 1:      'question': '123456',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'SSccrruubb  LLoorrddss',
116: 1:      'question': 'Scrub Lords',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'bbrruuhh',
116: 1:      'question': 'bruh',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'iilllluummiinnaattii',
116: 1:      'question': 'illuminati',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'AAddiiddaass',
116: 1:      'question': 'Adidas',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
116: 1:      'question': '!#%G#DGY^RC',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'DDoonnaalldd  DDuucckk',
116: 1:      'question': 'Donald Duck',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'KKaannyyee  22002200',
116: 1:      'question': 'Kanye 2020',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
116: 1:      'question': 'Bernie Sanders is Bae',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
116: 1:      'question': 'Peanut Butter',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '11333377',
116: 1:      'question': '1337',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
116: 1:      'question': 'h*o@D7an& a',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'YY!!SS4477YY  @@',
116: 1:      'question': 'Y!S47Y @',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '..--&&ddFFII88',
116: 1:      'question': '.-&dFI8',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '!!ZZqq++',
116: 1:      'question': '!Zq+',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
116: 1:      'question': 'g%;U*!a/[pZ4V3/&',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
116: 1:      'question': '7f5nF=:b8eo&+7',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '**22SSNNmm##LLoo&&YY',
116: 1:      'question': '*2SNm#Lo&Y',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '33ZZVVmm',
116: 1:      'question': '3ZVm',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
116: 1:      'question': ']C06*Ec$62o!7][/9',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
116: 1:      'question': '^q%]VoKhh9j5-',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '$$22EEZZGGQQ',
116: 1:      'question': '$2EZGQ',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '``UU99@@hh',
116: 1:      'question': '`U9@h',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'kk^^FF  [[',
116: 1:      'question': 'k^F [',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
116: 1:      'question': '@Y(-SAZa<S2OS**i',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'hh**??RRWW__ii++<<',
116: 1:      'question': 'h*?RW_i+<',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'FFAACCBBTT++33YYCC99mm33++aa00QQ',
116: 1:      'question': 'FACBT+3YC9m3+a0Q',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'KKSS))::jjYY??++SS99',
116: 1:      'question': 'KS):jY?+S9',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'JJBBWWhh',
116: 1:      'question': 'JBWh',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'OONNmm33ll))))HH@@GGff((',
116: 1:      'question': 'ONm3l))H@Gf(',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'ffkk66KKgg  77&&',
116: 1:      'question': 'fk6Kg 7&',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
116: 1:      'question': '*A&2SJUb#(Vc(OjC`W1',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '``SS99OONNuu000011EE8833++!!',
116: 1:      'question': '`S9ONu001E83+!',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '((YYQQ^^//22]]77cc$$88LL**,,]]::++',
116: 1:      'question': '(YQ^/2]7c$8L*,]:+',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '77PPllaa  GG33**CC[[==%%``dd==ll$$',
116: 1:      'question': '7Pla G3*C[=%`d=l$',
116: 1:      'valid': true
116: 1:    }
116: 1:  ],
116: 1:  'info': [
116: 1:    '✅f(String) = SSttrriinngg',
116: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
116: 1:    '✅f(1234!_ ) = 11223344!!__  ',
116: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
116: 1:    '✅f((-_-)) = ((--__--))',
116: 1:    '✅f(123456) = 112233445566',
116: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
116: 1:    '✅f(bruh) = bbrruuhh',
116: 1:    '✅f(illuminati) = iilllluummiinnaattii',
116: 1:    '✅f(Adidas) = AAddiiddaass',
116: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
116: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
116: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
116: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
116: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
116: 1:    '✅f(1337) = 11333377',
116: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
116: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
116: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
116: 1:    '✅f(!Zq+) = !!ZZqq++',
116: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
116: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
116: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
116: 1:    '✅f(3ZVm) = 33ZZVVmm',
116: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
116: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
116: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
116: 1:    '✅f(`U9@h) = ``UU99@@hh',
116: 1:    '✅f(k^F [) = kk^^FF  [[',
116: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
116: 1:    '✅f(h*?RW_i+<) = hh**??RRWW__ii++<<',
116: 1:    '✅f(FACBT+3YC9m3+a0Q) = FFAACCBBTT++33YYCC99mm33++aa00QQ',
116: 1:    '✅f(KS):jY?+S9) = KKSS))::jjYY??++SS99',
116: 1:    '✅f(JBWh) = JJBBWWhh',
116: 1:    '✅f(ONm3l))H@Gf() = OONNmm33ll))))HH@@GGff((',
116: 1:    '✅f(fk6Kg 7&) = ffkk66KKgg  77&&',
116: 1:    '✅f(*A&2SJUb#(Vc(OjC`W1) = **AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
116: 1:    '✅f(`S9ONu001E83+!) = ``SS99OONNuu000011EE8833++!!',
116: 1:    '✅f((YQ^/2]7c$8L*,]:+) = ((YYQQ^^//22]]77cc$$88LL**,,]]::++',
116: 1:    '✅f(7Pla G3*C[=%`d=l$) = 77PPllaa  GG33**CC[[==%%``dd==ll$$',
116: 1:    '❌f(12mq,<[:FdF&^2P) = ??? != 1122mmqq,,<<[[::FFddFF&&^^22PP'
116: 1:  ],
116: 1:  'level': 3,
116: 1:  'nextQuestion': '12mq,<[:FdF&^2P',
116: 1:  'questions': [
116: 1:    'String',
116: 1:    'Hello World',
116: 1:    '1234!_ ',
116: 1:    '____ _ _ __ ___ _ ____ ',
116: 1:    '(-_-)',
116: 1:    '123456',
116: 1:    'Scrub Lords',
116: 1:    'bruh',
116: 1:    'illuminati',
116: 1:    'Adidas',
116: 1:    '!#%G#DGY^RC',
116: 1:    'Donald Duck',
116: 1:    'Kanye 2020',
116: 1:    'Bernie Sanders is Bae',
116: 1:    'Peanut Butter',
116: 1:    '1337',
116: 1:    'h*o@D7an& a',
116: 1:    'Y!S47Y @',
116: 1:    '.-&dFI8',
116: 1:    '!Zq+',
116: 1:    'g%;U*!a/[pZ4V3/&',
116: 1:    '7f5nF=:b8eo&+7',
116: 1:    '*2SNm#Lo&Y',
116: 1:    '3ZVm',
116: 1:    ']C06*Ec$62o!7][/9',
116: 1:    '^q%]VoKhh9j5-',
116: 1:    '$2EZGQ',
116: 1:    '`U9@h',
116: 1:    'k^F [',
116: 1:    '@Y(-SAZa<S2OS**i',
116: 1:    'h*?RW_i+<',
116: 1:    'FACBT+3YC9m3+a0Q',
116: 1:    'KS):jY?+S9',
116: 1:    'JBWh',
116: 1:    'ONm3l))H@Gf(',
116: 1:    'fk6Kg 7&',
116: 1:    '*A&2SJUb#(Vc(OjC`W1',
116: 1:    '`S9ONu001E83+!',
116: 1:    '(YQ^/2]7c$8L*,]:+',
116: 1:    '7Pla G3*C[=%`d=l$',
116: 1:    '12mq,<[:FdF&^2P'
116: 1:  ]
116: 1:}
116: 1:Scores: 1621
116: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii', 'hh**??RRWW__ii++<<', 'FFAACCBBTT++33YYCC99mm33++aa00QQ', 'KKSS))::jjYY??++SS99', 'JJBBWWhh', 'OONNmm33ll))))HH@@GGff((', 'ffkk66KKgg  77&&', '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11', '``SS99OONNuu000011EE8833++!!', '((YYQQ^^//22]]77cc$$88LL**,,]]::++', '77PPllaa  GG33**CC[[==%%``dd==ll$$', '1122mmqq,,<<[[::FFddFF&&^^22PP']')
116: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
117: 1:BoardData {
117: 1:  'description': [
117: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
117: 1:    'Write a javascript method.',
117: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
117: 1:    'Use regular expressions to solve this problem.'
117: 1:  ],
117: 1:  'expectedAnswer': 'll##NNRRTT77nnnn++pp&&',
117: 1:  'history': [
117: 1:    {
117: 1:      'answer': 'SSttrriinngg',
117: 1:      'question': 'String',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'HHeelllloo  WWoorrlldd',
117: 1:      'question': 'Hello World',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '11223344!!__  ',
117: 1:      'question': '1234!_ ',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
117: 1:      'question': '____ _ _ __ ___ _ ____ ',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '((--__--))',
117: 1:      'question': '(-_-)',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '112233445566',
117: 1:      'question': '123456',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'SSccrruubb  LLoorrddss',
117: 1:      'question': 'Scrub Lords',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'bbrruuhh',
117: 1:      'question': 'bruh',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'iilllluummiinnaattii',
117: 1:      'question': 'illuminati',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'AAddiiddaass',
117: 1:      'question': 'Adidas',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
117: 1:      'question': '!#%G#DGY^RC',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'DDoonnaalldd  DDuucckk',
117: 1:      'question': 'Donald Duck',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'KKaannyyee  22002200',
117: 1:      'question': 'Kanye 2020',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
117: 1:      'question': 'Bernie Sanders is Bae',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
117: 1:      'question': 'Peanut Butter',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '11333377',
117: 1:      'question': '1337',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
117: 1:      'question': 'h*o@D7an& a',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'YY!!SS4477YY  @@',
117: 1:      'question': 'Y!S47Y @',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '..--&&ddFFII88',
117: 1:      'question': '.-&dFI8',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '!!ZZqq++',
117: 1:      'question': '!Zq+',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
117: 1:      'question': 'g%;U*!a/[pZ4V3/&',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
117: 1:      'question': '7f5nF=:b8eo&+7',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '**22SSNNmm##LLoo&&YY',
117: 1:      'question': '*2SNm#Lo&Y',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '33ZZVVmm',
117: 1:      'question': '3ZVm',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
117: 1:      'question': ']C06*Ec$62o!7][/9',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
117: 1:      'question': '^q%]VoKhh9j5-',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '$$22EEZZGGQQ',
117: 1:      'question': '$2EZGQ',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '``UU99@@hh',
117: 1:      'question': '`U9@h',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'kk^^FF  [[',
117: 1:      'question': 'k^F [',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
117: 1:      'question': '@Y(-SAZa<S2OS**i',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'hh**??RRWW__ii++<<',
117: 1:      'question': 'h*?RW_i+<',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'FFAACCBBTT++33YYCC99mm33++aa00QQ',
117: 1:      'question': 'FACBT+3YC9m3+a0Q',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'KKSS))::jjYY??++SS99',
117: 1:      'question': 'KS):jY?+S9',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'JJBBWWhh',
117: 1:      'question': 'JBWh',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'OONNmm33ll))))HH@@GGff((',
117: 1:      'question': 'ONm3l))H@Gf(',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'ffkk66KKgg  77&&',
117: 1:      'question': 'fk6Kg 7&',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
117: 1:      'question': '*A&2SJUb#(Vc(OjC`W1',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '``SS99OONNuu000011EE8833++!!',
117: 1:      'question': '`S9ONu001E83+!',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '((YYQQ^^//22]]77cc$$88LL**,,]]::++',
117: 1:      'question': '(YQ^/2]7c$8L*,]:+',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '77PPllaa  GG33**CC[[==%%``dd==ll$$',
117: 1:      'question': '7Pla G3*C[=%`d=l$',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '1122mmqq,,<<[[::FFddFF&&^^22PP',
117: 1:      'question': '12mq,<[:FdF&^2P',
117: 1:      'valid': true
117: 1:    }
117: 1:  ],
117: 1:  'info': [
117: 1:    '✅f(String) = SSttrriinngg',
117: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
117: 1:    '✅f(1234!_ ) = 11223344!!__  ',
117: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
117: 1:    '✅f((-_-)) = ((--__--))',
117: 1:    '✅f(123456) = 112233445566',
117: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
117: 1:    '✅f(bruh) = bbrruuhh',
117: 1:    '✅f(illuminati) = iilllluummiinnaattii',
117: 1:    '✅f(Adidas) = AAddiiddaass',
117: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
117: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
117: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
117: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
117: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
117: 1:    '✅f(1337) = 11333377',
117: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
117: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
117: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
117: 1:    '✅f(!Zq+) = !!ZZqq++',
117: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
117: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
117: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
117: 1:    '✅f(3ZVm) = 33ZZVVmm',
117: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
117: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
117: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
117: 1:    '✅f(`U9@h) = ``UU99@@hh',
117: 1:    '✅f(k^F [) = kk^^FF  [[',
117: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
117: 1:    '✅f(h*?RW_i+<) = hh**??RRWW__ii++<<',
117: 1:    '✅f(FACBT+3YC9m3+a0Q) = FFAACCBBTT++33YYCC99mm33++aa00QQ',
117: 1:    '✅f(KS):jY?+S9) = KKSS))::jjYY??++SS99',
117: 1:    '✅f(JBWh) = JJBBWWhh',
117: 1:    '✅f(ONm3l))H@Gf() = OONNmm33ll))))HH@@GGff((',
117: 1:    '✅f(fk6Kg 7&) = ffkk66KKgg  77&&',
117: 1:    '✅f(*A&2SJUb#(Vc(OjC`W1) = **AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
117: 1:    '✅f(`S9ONu001E83+!) = ``SS99OONNuu000011EE8833++!!',
117: 1:    '✅f((YQ^/2]7c$8L*,]:+) = ((YYQQ^^//22]]77cc$$88LL**,,]]::++',
117: 1:    '✅f(7Pla G3*C[=%`d=l$) = 77PPllaa  GG33**CC[[==%%``dd==ll$$',
117: 1:    '✅f(12mq,<[:FdF&^2P) = 1122mmqq,,<<[[::FFddFF&&^^22PP',
117: 1:    '❌f(l#NRT7nn+p&) = ??? != ll##NNRRTT77nnnn++pp&&'
117: 1:  ],
117: 1:  'level': 3,
117: 1:  'nextQuestion': 'l#NRT7nn+p&',
117: 1:  'questions': [
117: 1:    'String',
117: 1:    'Hello World',
117: 1:    '1234!_ ',
117: 1:    '____ _ _ __ ___ _ ____ ',
117: 1:    '(-_-)',
117: 1:    '123456',
117: 1:    'Scrub Lords',
117: 1:    'bruh',
117: 1:    'illuminati',
117: 1:    'Adidas',
117: 1:    '!#%G#DGY^RC',
117: 1:    'Donald Duck',
117: 1:    'Kanye 2020',
117: 1:    'Bernie Sanders is Bae',
117: 1:    'Peanut Butter',
117: 1:    '1337',
117: 1:    'h*o@D7an& a',
117: 1:    'Y!S47Y @',
117: 1:    '.-&dFI8',
117: 1:    '!Zq+',
117: 1:    'g%;U*!a/[pZ4V3/&',
117: 1:    '7f5nF=:b8eo&+7',
117: 1:    '*2SNm#Lo&Y',
117: 1:    '3ZVm',
117: 1:    ']C06*Ec$62o!7][/9',
117: 1:    '^q%]VoKhh9j5-',
117: 1:    '$2EZGQ',
117: 1:    '`U9@h',
117: 1:    'k^F [',
117: 1:    '@Y(-SAZa<S2OS**i',
117: 1:    'h*?RW_i+<',
117: 1:    'FACBT+3YC9m3+a0Q',
117: 1:    'KS):jY?+S9',
117: 1:    'JBWh',
117: 1:    'ONm3l))H@Gf(',
117: 1:    'fk6Kg 7&',
117: 1:    '*A&2SJUb#(Vc(OjC`W1',
117: 1:    '`S9ONu001E83+!',
117: 1:    '(YQ^/2]7c$8L*,]:+',
117: 1:    '7Pla G3*C[=%`d=l$',
117: 1:    '12mq,<[:FdF&^2P',
117: 1:    'l#NRT7nn+p&'
117: 1:  ]
117: 1:}
117: 1:Scores: 1622
117: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii', 'hh**??RRWW__ii++<<', 'FFAACCBBTT++33YYCC99mm33++aa00QQ', 'KKSS))::jjYY??++SS99', 'JJBBWWhh', 'OONNmm33ll))))HH@@GGff((', 'ffkk66KKgg  77&&', '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11', '``SS99OONNuu000011EE8833++!!', '((YYQQ^^//22]]77cc$$88LL**,,]]::++', '77PPllaa  GG33**CC[[==%%``dd==ll$$', '1122mmqq,,<<[[::FFddFF&&^^22PP', 'll##NNRRTT77nnnn++pp&&']')
117: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
118: 1:BoardData {
118: 1:  'description': [
118: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
118: 1:    'Write a javascript method.',
118: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
118: 1:    'Use regular expressions to solve this problem.'
118: 1:  ],
118: 1:  'expectedAnswer': '99..dd((QQ;;DD((LL..**',
118: 1:  'history': [
118: 1:    {
118: 1:      'answer': 'SSttrriinngg',
118: 1:      'question': 'String',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'HHeelllloo  WWoorrlldd',
118: 1:      'question': 'Hello World',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '11223344!!__  ',
118: 1:      'question': '1234!_ ',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
118: 1:      'question': '____ _ _ __ ___ _ ____ ',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '((--__--))',
118: 1:      'question': '(-_-)',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '112233445566',
118: 1:      'question': '123456',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'SSccrruubb  LLoorrddss',
118: 1:      'question': 'Scrub Lords',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'bbrruuhh',
118: 1:      'question': 'bruh',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'iilllluummiinnaattii',
118: 1:      'question': 'illuminati',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'AAddiiddaass',
118: 1:      'question': 'Adidas',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
118: 1:      'question': '!#%G#DGY^RC',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'DDoonnaalldd  DDuucckk',
118: 1:      'question': 'Donald Duck',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'KKaannyyee  22002200',
118: 1:      'question': 'Kanye 2020',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
118: 1:      'question': 'Bernie Sanders is Bae',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
118: 1:      'question': 'Peanut Butter',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '11333377',
118: 1:      'question': '1337',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
118: 1:      'question': 'h*o@D7an& a',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'YY!!SS4477YY  @@',
118: 1:      'question': 'Y!S47Y @',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '..--&&ddFFII88',
118: 1:      'question': '.-&dFI8',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '!!ZZqq++',
118: 1:      'question': '!Zq+',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
118: 1:      'question': 'g%;U*!a/[pZ4V3/&',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
118: 1:      'question': '7f5nF=:b8eo&+7',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '**22SSNNmm##LLoo&&YY',
118: 1:      'question': '*2SNm#Lo&Y',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '33ZZVVmm',
118: 1:      'question': '3ZVm',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
118: 1:      'question': ']C06*Ec$62o!7][/9',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
118: 1:      'question': '^q%]VoKhh9j5-',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '$$22EEZZGGQQ',
118: 1:      'question': '$2EZGQ',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '``UU99@@hh',
118: 1:      'question': '`U9@h',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'kk^^FF  [[',
118: 1:      'question': 'k^F [',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
118: 1:      'question': '@Y(-SAZa<S2OS**i',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'hh**??RRWW__ii++<<',
118: 1:      'question': 'h*?RW_i+<',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'FFAACCBBTT++33YYCC99mm33++aa00QQ',
118: 1:      'question': 'FACBT+3YC9m3+a0Q',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'KKSS))::jjYY??++SS99',
118: 1:      'question': 'KS):jY?+S9',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'JJBBWWhh',
118: 1:      'question': 'JBWh',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'OONNmm33ll))))HH@@GGff((',
118: 1:      'question': 'ONm3l))H@Gf(',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'ffkk66KKgg  77&&',
118: 1:      'question': 'fk6Kg 7&',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
118: 1:      'question': '*A&2SJUb#(Vc(OjC`W1',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '``SS99OONNuu000011EE8833++!!',
118: 1:      'question': '`S9ONu001E83+!',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '((YYQQ^^//22]]77cc$$88LL**,,]]::++',
118: 1:      'question': '(YQ^/2]7c$8L*,]:+',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '77PPllaa  GG33**CC[[==%%``dd==ll$$',
118: 1:      'question': '7Pla G3*C[=%`d=l$',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '1122mmqq,,<<[[::FFddFF&&^^22PP',
118: 1:      'question': '12mq,<[:FdF&^2P',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'll##NNRRTT77nnnn++pp&&',
118: 1:      'question': 'l#NRT7nn+p&',
118: 1:      'valid': true
118: 1:    }
118: 1:  ],
118: 1:  'info': [
118: 1:    '✅f(String) = SSttrriinngg',
118: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
118: 1:    '✅f(1234!_ ) = 11223344!!__  ',
118: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
118: 1:    '✅f((-_-)) = ((--__--))',
118: 1:    '✅f(123456) = 112233445566',
118: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
118: 1:    '✅f(bruh) = bbrruuhh',
118: 1:    '✅f(illuminati) = iilllluummiinnaattii',
118: 1:    '✅f(Adidas) = AAddiiddaass',
118: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
118: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
118: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
118: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
118: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
118: 1:    '✅f(1337) = 11333377',
118: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
118: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
118: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
118: 1:    '✅f(!Zq+) = !!ZZqq++',
118: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
118: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
118: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
118: 1:    '✅f(3ZVm) = 33ZZVVmm',
118: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
118: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
118: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
118: 1:    '✅f(`U9@h) = ``UU99@@hh',
118: 1:    '✅f(k^F [) = kk^^FF  [[',
118: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
118: 1:    '✅f(h*?RW_i+<) = hh**??RRWW__ii++<<',
118: 1:    '✅f(FACBT+3YC9m3+a0Q) = FFAACCBBTT++33YYCC99mm33++aa00QQ',
118: 1:    '✅f(KS):jY?+S9) = KKSS))::jjYY??++SS99',
118: 1:    '✅f(JBWh) = JJBBWWhh',
118: 1:    '✅f(ONm3l))H@Gf() = OONNmm33ll))))HH@@GGff((',
118: 1:    '✅f(fk6Kg 7&) = ffkk66KKgg  77&&',
118: 1:    '✅f(*A&2SJUb#(Vc(OjC`W1) = **AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
118: 1:    '✅f(`S9ONu001E83+!) = ``SS99OONNuu000011EE8833++!!',
118: 1:    '✅f((YQ^/2]7c$8L*,]:+) = ((YYQQ^^//22]]77cc$$88LL**,,]]::++',
118: 1:    '✅f(7Pla G3*C[=%`d=l$) = 77PPllaa  GG33**CC[[==%%``dd==ll$$',
118: 1:    '✅f(12mq,<[:FdF&^2P) = 1122mmqq,,<<[[::FFddFF&&^^22PP',
118: 1:    '✅f(l#NRT7nn+p&) = ll##NNRRTT77nnnn++pp&&',
118: 1:    '❌f(9.d(Q;D(L.*) = ??? != 99..dd((QQ;;DD((LL..**'
118: 1:  ],
118: 1:  'level': 3,
118: 1:  'nextQuestion': '9.d(Q;D(L.*',
118: 1:  'questions': [
118: 1:    'String',
118: 1:    'Hello World',
118: 1:    '1234!_ ',
118: 1:    '____ _ _ __ ___ _ ____ ',
118: 1:    '(-_-)',
118: 1:    '123456',
118: 1:    'Scrub Lords',
118: 1:    'bruh',
118: 1:    'illuminati',
118: 1:    'Adidas',
118: 1:    '!#%G#DGY^RC',
118: 1:    'Donald Duck',
118: 1:    'Kanye 2020',
118: 1:    'Bernie Sanders is Bae',
118: 1:    'Peanut Butter',
118: 1:    '1337',
118: 1:    'h*o@D7an& a',
118: 1:    'Y!S47Y @',
118: 1:    '.-&dFI8',
118: 1:    '!Zq+',
118: 1:    'g%;U*!a/[pZ4V3/&',
118: 1:    '7f5nF=:b8eo&+7',
118: 1:    '*2SNm#Lo&Y',
118: 1:    '3ZVm',
118: 1:    ']C06*Ec$62o!7][/9',
118: 1:    '^q%]VoKhh9j5-',
118: 1:    '$2EZGQ',
118: 1:    '`U9@h',
118: 1:    'k^F [',
118: 1:    '@Y(-SAZa<S2OS**i',
118: 1:    'h*?RW_i+<',
118: 1:    'FACBT+3YC9m3+a0Q',
118: 1:    'KS):jY?+S9',
118: 1:    'JBWh',
118: 1:    'ONm3l))H@Gf(',
118: 1:    'fk6Kg 7&',
118: 1:    '*A&2SJUb#(Vc(OjC`W1',
118: 1:    '`S9ONu001E83+!',
118: 1:    '(YQ^/2]7c$8L*,]:+',
118: 1:    '7Pla G3*C[=%`d=l$',
118: 1:    '12mq,<[:FdF&^2P',
118: 1:    'l#NRT7nn+p&',
118: 1:    '9.d(Q;D(L.*'
118: 1:  ]
118: 1:}
118: 1:Scores: 1623
118: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii', 'hh**??RRWW__ii++<<', 'FFAACCBBTT++33YYCC99mm33++aa00QQ', 'KKSS))::jjYY??++SS99', 'JJBBWWhh', 'OONNmm33ll))))HH@@GGff((', 'ffkk66KKgg  77&&', '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11', '``SS99OONNuu000011EE8833++!!', '((YYQQ^^//22]]77cc$$88LL**,,]]::++', '77PPllaa  GG33**CC[[==%%``dd==ll$$', '1122mmqq,,<<[[::FFddFF&&^^22PP', 'll##NNRRTT77nnnn++pp&&', '99..dd((QQ;;DD((LL..**']')
118: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
119: 1:BoardData {
119: 1:  'description': [
119: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
119: 1:    'Write a javascript method.',
119: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
119: 1:    'Use regular expressions to solve this problem.'
119: 1:  ],
119: 1:  'expectedAnswer': 'nnqq00CCMMEEgg``))??nnJJ$$MM$$GGGG;;,,;;>>',
119: 1:  'history': [
119: 1:    {
119: 1:      'answer': 'SSttrriinngg',
119: 1:      'question': 'String',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'HHeelllloo  WWoorrlldd',
119: 1:      'question': 'Hello World',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '11223344!!__  ',
119: 1:      'question': '1234!_ ',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
119: 1:      'question': '____ _ _ __ ___ _ ____ ',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '((--__--))',
119: 1:      'question': '(-_-)',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '112233445566',
119: 1:      'question': '123456',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'SSccrruubb  LLoorrddss',
119: 1:      'question': 'Scrub Lords',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'bbrruuhh',
119: 1:      'question': 'bruh',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'iilllluummiinnaattii',
119: 1:      'question': 'illuminati',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'AAddiiddaass',
119: 1:      'question': 'Adidas',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
119: 1:      'question': '!#%G#DGY^RC',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'DDoonnaalldd  DDuucckk',
119: 1:      'question': 'Donald Duck',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'KKaannyyee  22002200',
119: 1:      'question': 'Kanye 2020',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
119: 1:      'question': 'Bernie Sanders is Bae',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
119: 1:      'question': 'Peanut Butter',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '11333377',
119: 1:      'question': '1337',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
119: 1:      'question': 'h*o@D7an& a',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'YY!!SS4477YY  @@',
119: 1:      'question': 'Y!S47Y @',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '..--&&ddFFII88',
119: 1:      'question': '.-&dFI8',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '!!ZZqq++',
119: 1:      'question': '!Zq+',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
119: 1:      'question': 'g%;U*!a/[pZ4V3/&',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
119: 1:      'question': '7f5nF=:b8eo&+7',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '**22SSNNmm##LLoo&&YY',
119: 1:      'question': '*2SNm#Lo&Y',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '33ZZVVmm',
119: 1:      'question': '3ZVm',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
119: 1:      'question': ']C06*Ec$62o!7][/9',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
119: 1:      'question': '^q%]VoKhh9j5-',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '$$22EEZZGGQQ',
119: 1:      'question': '$2EZGQ',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '``UU99@@hh',
119: 1:      'question': '`U9@h',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'kk^^FF  [[',
119: 1:      'question': 'k^F [',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
119: 1:      'question': '@Y(-SAZa<S2OS**i',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'hh**??RRWW__ii++<<',
119: 1:      'question': 'h*?RW_i+<',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'FFAACCBBTT++33YYCC99mm33++aa00QQ',
119: 1:      'question': 'FACBT+3YC9m3+a0Q',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'KKSS))::jjYY??++SS99',
119: 1:      'question': 'KS):jY?+S9',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'JJBBWWhh',
119: 1:      'question': 'JBWh',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'OONNmm33ll))))HH@@GGff((',
119: 1:      'question': 'ONm3l))H@Gf(',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'ffkk66KKgg  77&&',
119: 1:      'question': 'fk6Kg 7&',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
119: 1:      'question': '*A&2SJUb#(Vc(OjC`W1',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '``SS99OONNuu000011EE8833++!!',
119: 1:      'question': '`S9ONu001E83+!',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '((YYQQ^^//22]]77cc$$88LL**,,]]::++',
119: 1:      'question': '(YQ^/2]7c$8L*,]:+',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '77PPllaa  GG33**CC[[==%%``dd==ll$$',
119: 1:      'question': '7Pla G3*C[=%`d=l$',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '1122mmqq,,<<[[::FFddFF&&^^22PP',
119: 1:      'question': '12mq,<[:FdF&^2P',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'll##NNRRTT77nnnn++pp&&',
119: 1:      'question': 'l#NRT7nn+p&',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '99..dd((QQ;;DD((LL..**',
119: 1:      'question': '9.d(Q;D(L.*',
119: 1:      'valid': true
119: 1:    }
119: 1:  ],
119: 1:  'info': [
119: 1:    '✅f(String) = SSttrriinngg',
119: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
119: 1:    '✅f(1234!_ ) = 11223344!!__  ',
119: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
119: 1:    '✅f((-_-)) = ((--__--))',
119: 1:    '✅f(123456) = 112233445566',
119: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
119: 1:    '✅f(bruh) = bbrruuhh',
119: 1:    '✅f(illuminati) = iilllluummiinnaattii',
119: 1:    '✅f(Adidas) = AAddiiddaass',
119: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
119: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
119: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
119: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
119: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
119: 1:    '✅f(1337) = 11333377',
119: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
119: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
119: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
119: 1:    '✅f(!Zq+) = !!ZZqq++',
119: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
119: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
119: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
119: 1:    '✅f(3ZVm) = 33ZZVVmm',
119: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
119: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
119: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
119: 1:    '✅f(`U9@h) = ``UU99@@hh',
119: 1:    '✅f(k^F [) = kk^^FF  [[',
119: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
119: 1:    '✅f(h*?RW_i+<) = hh**??RRWW__ii++<<',
119: 1:    '✅f(FACBT+3YC9m3+a0Q) = FFAACCBBTT++33YYCC99mm33++aa00QQ',
119: 1:    '✅f(KS):jY?+S9) = KKSS))::jjYY??++SS99',
119: 1:    '✅f(JBWh) = JJBBWWhh',
119: 1:    '✅f(ONm3l))H@Gf() = OONNmm33ll))))HH@@GGff((',
119: 1:    '✅f(fk6Kg 7&) = ffkk66KKgg  77&&',
119: 1:    '✅f(*A&2SJUb#(Vc(OjC`W1) = **AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
119: 1:    '✅f(`S9ONu001E83+!) = ``SS99OONNuu000011EE8833++!!',
119: 1:    '✅f((YQ^/2]7c$8L*,]:+) = ((YYQQ^^//22]]77cc$$88LL**,,]]::++',
119: 1:    '✅f(7Pla G3*C[=%`d=l$) = 77PPllaa  GG33**CC[[==%%``dd==ll$$',
119: 1:    '✅f(12mq,<[:FdF&^2P) = 1122mmqq,,<<[[::FFddFF&&^^22PP',
119: 1:    '✅f(l#NRT7nn+p&) = ll##NNRRTT77nnnn++pp&&',
119: 1:    '✅f(9.d(Q;D(L.*) = 99..dd((QQ;;DD((LL..**',
119: 1:    '❌f(nq0CMEg`)?nJ$M$GG;,;>) = ??? != nnqq00CCMMEEgg``))??nnJJ$$MM$$GGGG;;,,;;>>'
119: 1:  ],
119: 1:  'level': 3,
119: 1:  'nextQuestion': 'nq0CMEg`)?nJ$M$GG;,;>',
119: 1:  'questions': [
119: 1:    'String',
119: 1:    'Hello World',
119: 1:    '1234!_ ',
119: 1:    '____ _ _ __ ___ _ ____ ',
119: 1:    '(-_-)',
119: 1:    '123456',
119: 1:    'Scrub Lords',
119: 1:    'bruh',
119: 1:    'illuminati',
119: 1:    'Adidas',
119: 1:    '!#%G#DGY^RC',
119: 1:    'Donald Duck',
119: 1:    'Kanye 2020',
119: 1:    'Bernie Sanders is Bae',
119: 1:    'Peanut Butter',
119: 1:    '1337',
119: 1:    'h*o@D7an& a',
119: 1:    'Y!S47Y @',
119: 1:    '.-&dFI8',
119: 1:    '!Zq+',
119: 1:    'g%;U*!a/[pZ4V3/&',
119: 1:    '7f5nF=:b8eo&+7',
119: 1:    '*2SNm#Lo&Y',
119: 1:    '3ZVm',
119: 1:    ']C06*Ec$62o!7][/9',
119: 1:    '^q%]VoKhh9j5-',
119: 1:    '$2EZGQ',
119: 1:    '`U9@h',
119: 1:    'k^F [',
119: 1:    '@Y(-SAZa<S2OS**i',
119: 1:    'h*?RW_i+<',
119: 1:    'FACBT+3YC9m3+a0Q',
119: 1:    'KS):jY?+S9',
119: 1:    'JBWh',
119: 1:    'ONm3l))H@Gf(',
119: 1:    'fk6Kg 7&',
119: 1:    '*A&2SJUb#(Vc(OjC`W1',
119: 1:    '`S9ONu001E83+!',
119: 1:    '(YQ^/2]7c$8L*,]:+',
119: 1:    '7Pla G3*C[=%`d=l$',
119: 1:    '12mq,<[:FdF&^2P',
119: 1:    'l#NRT7nn+p&',
119: 1:    '9.d(Q;D(L.*',
119: 1:    'nq0CMEg`)?nJ$M$GG;,;>'
119: 1:  ]
119: 1:}
119: 1:Scores: 1624
119: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii', 'hh**??RRWW__ii++<<', 'FFAACCBBTT++33YYCC99mm33++aa00QQ', 'KKSS))::jjYY??++SS99', 'JJBBWWhh', 'OONNmm33ll))))HH@@GGff((', 'ffkk66KKgg  77&&', '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11', '``SS99OONNuu000011EE8833++!!', '((YYQQ^^//22]]77cc$$88LL**,,]]::++', '77PPllaa  GG33**CC[[==%%``dd==ll$$', '1122mmqq,,<<[[::FFddFF&&^^22PP', 'll##NNRRTT77nnnn++pp&&', '99..dd((QQ;;DD((LL..**', 'nnqq00CCMMEEgg``))??nnJJ$$MM$$GGGG;;,,;;>>']')
119: 1:Fire Event: PassTest{complexity=7, testCount=44}
119: 1:Fire Event: NextAlgorithm{complexity=7, time=0}
------------------------------------------
120: 1:BoardData {
120: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
120: 1:  'history': [
120: 1:    {
120: 1:      'answer': 'SSttrriinngg',
120: 1:      'question': 'String',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'HHeelllloo  WWoorrlldd',
120: 1:      'question': 'Hello World',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '11223344!!__  ',
120: 1:      'question': '1234!_ ',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
120: 1:      'question': '____ _ _ __ ___ _ ____ ',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '((--__--))',
120: 1:      'question': '(-_-)',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '112233445566',
120: 1:      'question': '123456',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'SSccrruubb  LLoorrddss',
120: 1:      'question': 'Scrub Lords',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'bbrruuhh',
120: 1:      'question': 'bruh',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'iilllluummiinnaattii',
120: 1:      'question': 'illuminati',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'AAddiiddaass',
120: 1:      'question': 'Adidas',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
120: 1:      'question': '!#%G#DGY^RC',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'DDoonnaalldd  DDuucckk',
120: 1:      'question': 'Donald Duck',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'KKaannyyee  22002200',
120: 1:      'question': 'Kanye 2020',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
120: 1:      'question': 'Bernie Sanders is Bae',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
120: 1:      'question': 'Peanut Butter',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '11333377',
120: 1:      'question': '1337',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
120: 1:      'question': 'h*o@D7an& a',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'YY!!SS4477YY  @@',
120: 1:      'question': 'Y!S47Y @',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '..--&&ddFFII88',
120: 1:      'question': '.-&dFI8',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '!!ZZqq++',
120: 1:      'question': '!Zq+',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
120: 1:      'question': 'g%;U*!a/[pZ4V3/&',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
120: 1:      'question': '7f5nF=:b8eo&+7',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '**22SSNNmm##LLoo&&YY',
120: 1:      'question': '*2SNm#Lo&Y',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '33ZZVVmm',
120: 1:      'question': '3ZVm',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
120: 1:      'question': ']C06*Ec$62o!7][/9',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
120: 1:      'question': '^q%]VoKhh9j5-',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '$$22EEZZGGQQ',
120: 1:      'question': '$2EZGQ',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '``UU99@@hh',
120: 1:      'question': '`U9@h',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'kk^^FF  [[',
120: 1:      'question': 'k^F [',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
120: 1:      'question': '@Y(-SAZa<S2OS**i',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'hh**??RRWW__ii++<<',
120: 1:      'question': 'h*?RW_i+<',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'FFAACCBBTT++33YYCC99mm33++aa00QQ',
120: 1:      'question': 'FACBT+3YC9m3+a0Q',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'KKSS))::jjYY??++SS99',
120: 1:      'question': 'KS):jY?+S9',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'JJBBWWhh',
120: 1:      'question': 'JBWh',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'OONNmm33ll))))HH@@GGff((',
120: 1:      'question': 'ONm3l))H@Gf(',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'ffkk66KKgg  77&&',
120: 1:      'question': 'fk6Kg 7&',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
120: 1:      'question': '*A&2SJUb#(Vc(OjC`W1',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '``SS99OONNuu000011EE8833++!!',
120: 1:      'question': '`S9ONu001E83+!',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '((YYQQ^^//22]]77cc$$88LL**,,]]::++',
120: 1:      'question': '(YQ^/2]7c$8L*,]:+',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '77PPllaa  GG33**CC[[==%%``dd==ll$$',
120: 1:      'question': '7Pla G3*C[=%`d=l$',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '1122mmqq,,<<[[::FFddFF&&^^22PP',
120: 1:      'question': '12mq,<[:FdF&^2P',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'll##NNRRTT77nnnn++pp&&',
120: 1:      'question': 'l#NRT7nn+p&',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '99..dd((QQ;;DD((LL..**',
120: 1:      'question': '9.d(Q;D(L.*',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'nnqq00CCMMEEgg``))??nnJJ$$MM$$GGGG;;,,;;>>',
120: 1:      'question': 'nq0CMEg`)?nJ$M$GG;,;>',
120: 1:      'valid': true
120: 1:    }
120: 1:  ],
120: 1:  'info': [
120: 1:    '✅f(String) = SSttrriinngg',
120: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
120: 1:    '✅f(1234!_ ) = 11223344!!__  ',
120: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
120: 1:    '✅f((-_-)) = ((--__--))',
120: 1:    '✅f(123456) = 112233445566',
120: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
120: 1:    '✅f(bruh) = bbrruuhh',
120: 1:    '✅f(illuminati) = iilllluummiinnaattii',
120: 1:    '✅f(Adidas) = AAddiiddaass',
120: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
120: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
120: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
120: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
120: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
120: 1:    '✅f(1337) = 11333377',
120: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
120: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
120: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
120: 1:    '✅f(!Zq+) = !!ZZqq++',
120: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
120: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
120: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
120: 1:    '✅f(3ZVm) = 33ZZVVmm',
120: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
120: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
120: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
120: 1:    '✅f(`U9@h) = ``UU99@@hh',
120: 1:    '✅f(k^F [) = kk^^FF  [[',
120: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
120: 1:    '✅f(h*?RW_i+<) = hh**??RRWW__ii++<<',
120: 1:    '✅f(FACBT+3YC9m3+a0Q) = FFAACCBBTT++33YYCC99mm33++aa00QQ',
120: 1:    '✅f(KS):jY?+S9) = KKSS))::jjYY??++SS99',
120: 1:    '✅f(JBWh) = JJBBWWhh',
120: 1:    '✅f(ONm3l))H@Gf() = OONNmm33ll))))HH@@GGff((',
120: 1:    '✅f(fk6Kg 7&) = ffkk66KKgg  77&&',
120: 1:    '✅f(*A&2SJUb#(Vc(OjC`W1) = **AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
120: 1:    '✅f(`S9ONu001E83+!) = ``SS99OONNuu000011EE8833++!!',
120: 1:    '✅f((YQ^/2]7c$8L*,]:+) = ((YYQQ^^//22]]77cc$$88LL**,,]]::++',
120: 1:    '✅f(7Pla G3*C[=%`d=l$) = 77PPllaa  GG33**CC[[==%%``dd==ll$$',
120: 1:    '✅f(12mq,<[:FdF&^2P) = 1122mmqq,,<<[[::FFddFF&&^^22PP',
120: 1:    '✅f(l#NRT7nn+p&) = ll##NNRRTT77nnnn++pp&&',
120: 1:    '✅f(9.d(Q;D(L.*) = 99..dd((QQ;;DD((LL..**',
120: 1:    '✅f(nq0CMEg`)?nJ$M$GG;,;>) = nnqq00CCMMEEgg``))??nnJJ$$MM$$GGGG;;,,;;>>'
120: 1:  ],
120: 1:  'level': 3,
120: 1:  'questions': []
120: 1:}
120: 1:Scores: 2569
120: 1:Answer: message('StartNextLevel')
120: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
121: 1:BoardData {
121: 1:  'description': [
121: 1:    'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.',
121: 1:    'Your task is to write a javascript function that returns the element at index n: f(n)=?',
121: 1:    'Use parseInt to parse input string arguments.',
121: 1:    'Use separate variable to store the result of parseInt.',
121: 1:    'Use let instead of var.',
121: 1:    'Remove everything from the script except for the function logic.'
121: 1:  ],
121: 1:  'expectedAnswer': '1',
121: 1:  'history': [],
121: 1:  'info': ['❌f(0) = ??? != 1'],
121: 1:  'level': 4,
121: 1:  'nextQuestion': '0',
121: 1:  'questions': ['0']
121: 1:}
121: 1:Scores: 2569
121: 1:Answer: message('['1']')
121: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
122: 1:BoardData {
122: 1:  'description': [
122: 1:    'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.',
122: 1:    'Your task is to write a javascript function that returns the element at index n: f(n)=?',
122: 1:    'Use parseInt to parse input string arguments.',
122: 1:    'Use separate variable to store the result of parseInt.',
122: 1:    'Use let instead of var.',
122: 1:    'Remove everything from the script except for the function logic.'
122: 1:  ],
122: 1:  'expectedAnswer': '0',
122: 1:  'history': [{
122: 1:    'answer': '1',
122: 1:    'question': '0',
122: 1:    'valid': true
122: 1:  }],
122: 1:  'info': [
122: 1:    '✅f(0) = 1',
122: 1:    '❌f(1) = ??? != 0'
122: 1:  ],
122: 1:  'level': 4,
122: 1:  'nextQuestion': '1',
122: 1:  'questions': [
122: 1:    '0',
122: 1:    '1'
122: 1:  ]
122: 1:}
122: 1:Scores: 2572
122: 1:Answer: message('['1', '0']')
122: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
123: 1:BoardData {
123: 1:  'description': [
123: 1:    'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.',
123: 1:    'Your task is to write a javascript function that returns the element at index n: f(n)=?',
123: 1:    'Use parseInt to parse input string arguments.',
123: 1:    'Use separate variable to store the result of parseInt.',
123: 1:    'Use let instead of var.',
123: 1:    'Remove everything from the script except for the function logic.'
123: 1:  ],
123: 1:  'expectedAnswer': '3',
123: 1:  'history': [
123: 1:    {
123: 1:      'answer': '1',
123: 1:      'question': '0',
123: 1:      'valid': true
123: 1:    },
123: 1:    {
123: 1:      'answer': '0',
123: 1:      'question': '1',
123: 1:      'valid': true
123: 1:    }
123: 1:  ],
123: 1:  'info': [
123: 1:    '✅f(0) = 1',
123: 1:    '✅f(1) = 0',
123: 1:    '❌f(2) = ??? != 3'
123: 1:  ],
123: 1:  'level': 4,
123: 1:  'nextQuestion': '2',
123: 1:  'questions': [
123: 1:    '0',
123: 1:    '1',
123: 1:    '2'
123: 1:  ]
123: 1:}
123: 1:Scores: 2575
123: 1:Answer: message('['1', '0', '3']')
123: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
124: 1:BoardData {
124: 1:  'description': [
124: 1:    'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.',
124: 1:    'Your task is to write a javascript function that returns the element at index n: f(n)=?',
124: 1:    'Use parseInt to parse input string arguments.',
124: 1:    'Use separate variable to store the result of parseInt.',
124: 1:    'Use let instead of var.',
124: 1:    'Remove everything from the script except for the function logic.'
124: 1:  ],
124: 1:  'expectedAnswer': '2',
124: 1:  'history': [
124: 1:    {
124: 1:      'answer': '1',
124: 1:      'question': '0',
124: 1:      'valid': true
124: 1:    },
124: 1:    {
124: 1:      'answer': '0',
124: 1:      'question': '1',
124: 1:      'valid': true
124: 1:    },
124: 1:    {
124: 1:      'answer': '3',
124: 1:      'question': '2',
124: 1:      'valid': true
124: 1:    }
124: 1:  ],
124: 1:  'info': [
124: 1:    '✅f(0) = 1',
124: 1:    '✅f(1) = 0',
124: 1:    '✅f(2) = 3',
124: 1:    '❌f(3) = ??? != 2'
124: 1:  ],
124: 1:  'level': 4,
124: 1:  'nextQuestion': '3',
124: 1:  'questions': [
124: 1:    '0',
124: 1:    '1',
124: 1:    '2',
124: 1:    '3'
124: 1:  ]
124: 1:}
124: 1:Scores: 2578
124: 1:Answer: message('['1', '0', '3', '2']')
124: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
125: 1:BoardData {
125: 1:  'description': [
125: 1:    'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.',
125: 1:    'Your task is to write a javascript function that returns the element at index n: f(n)=?',
125: 1:    'Use parseInt to parse input string arguments.',
125: 1:    'Use separate variable to store the result of parseInt.',
125: 1:    'Use let instead of var.',
125: 1:    'Remove everything from the script except for the function logic.'
125: 1:  ],
125: 1:  'expectedAnswer': '4',
125: 1:  'history': [
125: 1:    {
125: 1:      'answer': '1',
125: 1:      'question': '0',
125: 1:      'valid': true
125: 1:    },
125: 1:    {
125: 1:      'answer': '0',
125: 1:      'question': '1',
125: 1:      'valid': true
125: 1:    },
125: 1:    {
125: 1:      'answer': '3',
125: 1:      'question': '2',
125: 1:      'valid': true
125: 1:    },
125: 1:    {
125: 1:      'answer': '2',
125: 1:      'question': '3',
125: 1:      'valid': true
125: 1:    }
125: 1:  ],
125: 1:  'info': [
125: 1:    '✅f(0) = 1',
125: 1:    '✅f(1) = 0',
125: 1:    '✅f(2) = 3',
125: 1:    '✅f(3) = 2',
125: 1:    '❌f(5) = ??? != 4'
125: 1:  ],
125: 1:  'level': 4,
125: 1:  'nextQuestion': '5',
125: 1:  'questions': [
125: 1:    '0',
125: 1:    '1',
125: 1:    '2',
125: 1:    '3',
125: 1:    '5'
125: 1:  ]
125: 1:}
125: 1:Scores: 2581
125: 1:Answer: message('['1', '0', '3', '2', '4']')
125: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
126: 1:BoardData {
126: 1:  'description': [
126: 1:    'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.',
126: 1:    'Your task is to write a javascript function that returns the element at index n: f(n)=?',
126: 1:    'Use parseInt to parse input string arguments.',
126: 1:    'Use separate variable to store the result of parseInt.',
126: 1:    'Use let instead of var.',
126: 1:    'Remove everything from the script except for the function logic.'
126: 1:  ],
126: 1:  'expectedAnswer': '6',
126: 1:  'history': [
126: 1:    {
126: 1:      'answer': '1',
126: 1:      'question': '0',
126: 1:      'valid': true
126: 1:    },
126: 1:    {
126: 1:      'answer': '0',
126: 1:      'question': '1',
126: 1:      'valid': true
126: 1:    },
126: 1:    {
126: 1:      'answer': '3',
126: 1:      'question': '2',
126: 1:      'valid': true
126: 1:    },
126: 1:    {
126: 1:      'answer': '2',
126: 1:      'question': '3',
126: 1:      'valid': true
126: 1:    },
126: 1:    {
126: 1:      'answer': '4',
126: 1:      'question': '5',
126: 1:      'valid': true
126: 1:    }
126: 1:  ],
126: 1:  'info': [
126: 1:    '✅f(0) = 1',
126: 1:    '✅f(1) = 0',
126: 1:    '✅f(2) = 3',
126: 1:    '✅f(3) = 2',
126: 1:    '✅f(5) = 4',
126: 1:    '❌f(7) = ??? != 6'
126: 1:  ],
126: 1:  'level': 4,
126: 1:  'nextQuestion': '7',
126: 1:  'questions': [
126: 1:    '0',
126: 1:    '1',
126: 1:    '2',
126: 1:    '3',
126: 1:    '5',
126: 1:    '7'
126: 1:  ]
126: 1:}
126: 1:Scores: 2584
126: 1:Answer: message('['1', '0', '3', '2', '4', '6']')
126: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
127: 1:BoardData {
127: 1:  'description': [
127: 1:    'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.',
127: 1:    'Your task is to write a javascript function that returns the element at index n: f(n)=?',
127: 1:    'Use parseInt to parse input string arguments.',
127: 1:    'Use separate variable to store the result of parseInt.',
127: 1:    'Use let instead of var.',
127: 1:    'Remove everything from the script except for the function logic.'
127: 1:  ],
127: 1:  'expectedAnswer': '8',
127: 1:  'history': [
127: 1:    {
127: 1:      'answer': '1',
127: 1:      'question': '0',
127: 1:      'valid': true
127: 1:    },
127: 1:    {
127: 1:      'answer': '0',
127: 1:      'question': '1',
127: 1:      'valid': true
127: 1:    },
127: 1:    {
127: 1:      'answer': '3',
127: 1:      'question': '2',
127: 1:      'valid': true
127: 1:    },
127: 1:    {
127: 1:      'answer': '2',
127: 1:      'question': '3',
127: 1:      'valid': true
127: 1:    },
127: 1:    {
127: 1:      'answer': '4',
127: 1:      'question': '5',
127: 1:      'valid': true
127: 1:    },
127: 1:    {
127: 1:      'answer': '6',
127: 1:      'question': '7',
127: 1:      'valid': true
127: 1:    }
127: 1:  ],
127: 1:  'info': [
127: 1:    '✅f(0) = 1',
127: 1:    '✅f(1) = 0',
127: 1:    '✅f(2) = 3',
127: 1:    '✅f(3) = 2',
127: 1:    '✅f(5) = 4',
127: 1:    '✅f(7) = 6',
127: 1:    '❌f(9) = ??? != 8'
127: 1:  ],
127: 1:  'level': 4,
127: 1:  'nextQuestion': '9',
127: 1:  'questions': [
127: 1:    '0',
127: 1:    '1',
127: 1:    '2',
127: 1:    '3',
127: 1:    '5',
127: 1:    '7',
127: 1:    '9'
127: 1:  ]
127: 1:}
127: 1:Scores: 2587
127: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8']')
127: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
128: 1:BoardData {
128: 1:  'description': [
128: 1:    'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.',
128: 1:    'Your task is to write a javascript function that returns the element at index n: f(n)=?',
128: 1:    'Use parseInt to parse input string arguments.',
128: 1:    'Use separate variable to store the result of parseInt.',
128: 1:    'Use let instead of var.',
128: 1:    'Remove everything from the script except for the function logic.'
128: 1:  ],
128: 1:  'expectedAnswer': '10',
128: 1:  'history': [
128: 1:    {
128: 1:      'answer': '1',
128: 1:      'question': '0',
128: 1:      'valid': true
128: 1:    },
128: 1:    {
128: 1:      'answer': '0',
128: 1:      'question': '1',
128: 1:      'valid': true
128: 1:    },
128: 1:    {
128: 1:      'answer': '3',
128: 1:      'question': '2',
128: 1:      'valid': true
128: 1:    },
128: 1:    {
128: 1:      'answer': '2',
128: 1:      'question': '3',
128: 1:      'valid': true
128: 1:    },
128: 1:    {
128: 1:      'answer': '4',
128: 1:      'question': '5',
128: 1:      'valid': true
128: 1:    },
128: 1:    {
128: 1:      'answer': '6',
128: 1:      'question': '7',
128: 1:      'valid': true
128: 1:    },
128: 1:    {
128: 1:      'answer': '8',
128: 1:      'question': '9',
128: 1:      'valid': true
128: 1:    }
128: 1:  ],
128: 1:  'info': [
128: 1:    '✅f(0) = 1',
128: 1:    '✅f(1) = 0',
128: 1:    '✅f(2) = 3',
128: 1:    '✅f(3) = 2',
128: 1:    '✅f(5) = 4',
128: 1:    '✅f(7) = 6',
128: 1:    '✅f(9) = 8',
128: 1:    '❌f(11) = ??? != 10'
128: 1:  ],
128: 1:  'level': 4,
128: 1:  'nextQuestion': '11',
128: 1:  'questions': [
128: 1:    '0',
128: 1:    '1',
128: 1:    '2',
128: 1:    '3',
128: 1:    '5',
128: 1:    '7',
128: 1:    '9',
128: 1:    '11'
128: 1:  ]
128: 1:}
128: 1:Scores: 2590
128: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10']')
128: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
129: 1:BoardData {
129: 1:  'description': [
129: 1:    'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.',
129: 1:    'Your task is to write a javascript function that returns the element at index n: f(n)=?',
129: 1:    'Use parseInt to parse input string arguments.',
129: 1:    'Use separate variable to store the result of parseInt.',
129: 1:    'Use let instead of var.',
129: 1:    'Remove everything from the script except for the function logic.'
129: 1:  ],
129: 1:  'expectedAnswer': '15',
129: 1:  'history': [
129: 1:    {
129: 1:      'answer': '1',
129: 1:      'question': '0',
129: 1:      'valid': true
129: 1:    },
129: 1:    {
129: 1:      'answer': '0',
129: 1:      'question': '1',
129: 1:      'valid': true
129: 1:    },
129: 1:    {
129: 1:      'answer': '3',
129: 1:      'question': '2',
129: 1:      'valid': true
129: 1:    },
129: 1:    {
129: 1:      'answer': '2',
129: 1:      'question': '3',
129: 1:      'valid': true
129: 1:    },
129: 1:    {
129: 1:      'answer': '4',
129: 1:      'question': '5',
129: 1:      'valid': true
129: 1:    },
129: 1:    {
129: 1:      'answer': '6',
129: 1:      'question': '7',
129: 1:      'valid': true
129: 1:    },
129: 1:    {
129: 1:      'answer': '8',
129: 1:      'question': '9',
129: 1:      'valid': true
129: 1:    },
129: 1:    {
129: 1:      'answer': '10',
129: 1:      'question': '11',
129: 1:      'valid': true
129: 1:    }
129: 1:  ],
129: 1:  'info': [
129: 1:    '✅f(0) = 1',
129: 1:    '✅f(1) = 0',
129: 1:    '✅f(2) = 3',
129: 1:    '✅f(3) = 2',
129: 1:    '✅f(5) = 4',
129: 1:    '✅f(7) = 6',
129: 1:    '✅f(9) = 8',
129: 1:    '✅f(11) = 10',
129: 1:    '❌f(14) = ??? != 15'
129: 1:  ],
129: 1:  'level': 4,
129: 1:  'nextQuestion': '14',
129: 1:  'questions': [
129: 1:    '0',
129: 1:    '1',
129: 1:    '2',
129: 1:    '3',
129: 1:    '5',
129: 1:    '7',
129: 1:    '9',
129: 1:    '11',
129: 1:    '14'
129: 1:  ]
129: 1:}
129: 1:Scores: 2593
129: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15']')
129: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
130: 1:BoardData {
130: 1:  'description': [
130: 1:    'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.',
130: 1:    'Your task is to write a javascript function that returns the element at index n: f(n)=?',
130: 1:    'Use parseInt to parse input string arguments.',
130: 1:    'Use separate variable to store the result of parseInt.',
130: 1:    'Use let instead of var.',
130: 1:    'Remove everything from the script except for the function logic.'
130: 1:  ],
130: 1:  'expectedAnswer': '16',
130: 1:  'history': [
130: 1:    {
130: 1:      'answer': '1',
130: 1:      'question': '0',
130: 1:      'valid': true
130: 1:    },
130: 1:    {
130: 1:      'answer': '0',
130: 1:      'question': '1',
130: 1:      'valid': true
130: 1:    },
130: 1:    {
130: 1:      'answer': '3',
130: 1:      'question': '2',
130: 1:      'valid': true
130: 1:    },
130: 1:    {
130: 1:      'answer': '2',
130: 1:      'question': '3',
130: 1:      'valid': true
130: 1:    },
130: 1:    {
130: 1:      'answer': '4',
130: 1:      'question': '5',
130: 1:      'valid': true
130: 1:    },
130: 1:    {
130: 1:      'answer': '6',
130: 1:      'question': '7',
130: 1:      'valid': true
130: 1:    },
130: 1:    {
130: 1:      'answer': '8',
130: 1:      'question': '9',
130: 1:      'valid': true
130: 1:    },
130: 1:    {
130: 1:      'answer': '10',
130: 1:      'question': '11',
130: 1:      'valid': true
130: 1:    },
130: 1:    {
130: 1:      'answer': '15',
130: 1:      'question': '14',
130: 1:      'valid': true
130: 1:    }
130: 1:  ],
130: 1:  'info': [
130: 1:    '✅f(0) = 1',
130: 1:    '✅f(1) = 0',
130: 1:    '✅f(2) = 3',
130: 1:    '✅f(3) = 2',
130: 1:    '✅f(5) = 4',
130: 1:    '✅f(7) = 6',
130: 1:    '✅f(9) = 8',
130: 1:    '✅f(11) = 10',
130: 1:    '✅f(14) = 15',
130: 1:    '❌f(17) = ??? != 16'
130: 1:  ],
130: 1:  'level': 4,
130: 1:  'nextQuestion': '17',
130: 1:  'questions': [
130: 1:    '0',
130: 1:    '1',
130: 1:    '2',
130: 1:    '3',
130: 1:    '5',
130: 1:    '7',
130: 1:    '9',
130: 1:    '11',
130: 1:    '14',
130: 1:    '17'
130: 1:  ]
130: 1:}
130: 1:Scores: 2596
130: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16']')
130: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
131: 1:BoardData {
131: 1:  'description': [
131: 1:    'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.',
131: 1:    'Your task is to write a javascript function that returns the element at index n: f(n)=?',
131: 1:    'Use parseInt to parse input string arguments.',
131: 1:    'Use separate variable to store the result of parseInt.',
131: 1:    'Use let instead of var.',
131: 1:    'Remove everything from the script except for the function logic.'
131: 1:  ],
131: 1:  'expectedAnswer': '21',
131: 1:  'history': [
131: 1:    {
131: 1:      'answer': '1',
131: 1:      'question': '0',
131: 1:      'valid': true
131: 1:    },
131: 1:    {
131: 1:      'answer': '0',
131: 1:      'question': '1',
131: 1:      'valid': true
131: 1:    },
131: 1:    {
131: 1:      'answer': '3',
131: 1:      'question': '2',
131: 1:      'valid': true
131: 1:    },
131: 1:    {
131: 1:      'answer': '2',
131: 1:      'question': '3',
131: 1:      'valid': true
131: 1:    },
131: 1:    {
131: 1:      'answer': '4',
131: 1:      'question': '5',
131: 1:      'valid': true
131: 1:    },
131: 1:    {
131: 1:      'answer': '6',
131: 1:      'question': '7',
131: 1:      'valid': true
131: 1:    },
131: 1:    {
131: 1:      'answer': '8',
131: 1:      'question': '9',
131: 1:      'valid': true
131: 1:    },
131: 1:    {
131: 1:      'answer': '10',
131: 1:      'question': '11',
131: 1:      'valid': true
131: 1:    },
131: 1:    {
131: 1:      'answer': '15',
131: 1:      'question': '14',
131: 1:      'valid': true
131: 1:    },
131: 1:    {
131: 1:      'answer': '16',
131: 1:      'question': '17',
131: 1:      'valid': true
131: 1:    }
131: 1:  ],
131: 1:  'info': [
131: 1:    '✅f(0) = 1',
131: 1:    '✅f(1) = 0',
131: 1:    '✅f(2) = 3',
131: 1:    '✅f(3) = 2',
131: 1:    '✅f(5) = 4',
131: 1:    '✅f(7) = 6',
131: 1:    '✅f(9) = 8',
131: 1:    '✅f(11) = 10',
131: 1:    '✅f(14) = 15',
131: 1:    '✅f(17) = 16',
131: 1:    '❌f(20) = ??? != 21'
131: 1:  ],
131: 1:  'level': 4,
131: 1:  'nextQuestion': '20',
131: 1:  'questions': [
131: 1:    '0',
131: 1:    '1',
131: 1:    '2',
131: 1:    '3',
131: 1:    '5',
131: 1:    '7',
131: 1:    '9',
131: 1:    '11',
131: 1:    '14',
131: 1:    '17',
131: 1:    '20'
131: 1:  ]
131: 1:}
131: 1:Scores: 2599
131: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21']')
131: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
132: 1:BoardData {
132: 1:  'description': [
132: 1:    'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.',
132: 1:    'Your task is to write a javascript function that returns the element at index n: f(n)=?',
132: 1:    'Use parseInt to parse input string arguments.',
132: 1:    'Use separate variable to store the result of parseInt.',
132: 1:    'Use let instead of var.',
132: 1:    'Remove everything from the script except for the function logic.'
132: 1:  ],
132: 1:  'expectedAnswer': '22',
132: 1:  'history': [
132: 1:    {
132: 1:      'answer': '1',
132: 1:      'question': '0',
132: 1:      'valid': true
132: 1:    },
132: 1:    {
132: 1:      'answer': '0',
132: 1:      'question': '1',
132: 1:      'valid': true
132: 1:    },
132: 1:    {
132: 1:      'answer': '3',
132: 1:      'question': '2',
132: 1:      'valid': true
132: 1:    },
132: 1:    {
132: 1:      'answer': '2',
132: 1:      'question': '3',
132: 1:      'valid': true
132: 1:    },
132: 1:    {
132: 1:      'answer': '4',
132: 1:      'question': '5',
132: 1:      'valid': true
132: 1:    },
132: 1:    {
132: 1:      'answer': '6',
132: 1:      'question': '7',
132: 1:      'valid': true
132: 1:    },
132: 1:    {
132: 1:      'answer': '8',
132: 1:      'question': '9',
132: 1:      'valid': true
132: 1:    },
132: 1:    {
132: 1:      'answer': '10',
132: 1:      'question': '11',
132: 1:      'valid': true
132: 1:    },
132: 1:    {
132: 1:      'answer': '15',
132: 1:      'question': '14',
132: 1:      'valid': true
132: 1:    },
132: 1:    {
132: 1:      'answer': '16',
132: 1:      'question': '17',
132: 1:      'valid': true
132: 1:    },
132: 1:    {
132: 1:      'answer': '21',
132: 1:      'question': '20',
132: 1:      'valid': true
132: 1:    }
132: 1:  ],
132: 1:  'info': [
132: 1:    '✅f(0) = 1',
132: 1:    '✅f(1) = 0',
132: 1:    '✅f(2) = 3',
132: 1:    '✅f(3) = 2',
132: 1:    '✅f(5) = 4',
132: 1:    '✅f(7) = 6',
132: 1:    '✅f(9) = 8',
132: 1:    '✅f(11) = 10',
132: 1:    '✅f(14) = 15',
132: 1:    '✅f(17) = 16',
132: 1:    '✅f(20) = 21',
132: 1:    '❌f(23) = ??? != 22'
132: 1:  ],
132: 1:  'level': 4,
132: 1:  'nextQuestion': '23',
132: 1:  'questions': [
132: 1:    '0',
132: 1:    '1',
132: 1:    '2',
132: 1:    '3',
132: 1:    '5',
132: 1:    '7',
132: 1:    '9',
132: 1:    '11',
132: 1:    '14',
132: 1:    '17',
132: 1:    '20',
132: 1:    '23'
132: 1:  ]
132: 1:}
132: 1:Scores: 2602
132: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22']')
132: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
133: 1:BoardData {
133: 1:  'description': [
133: 1:    'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.',
133: 1:    'Your task is to write a javascript function that returns the element at index n: f(n)=?',
133: 1:    'Use parseInt to parse input string arguments.',
133: 1:    'Use separate variable to store the result of parseInt.',
133: 1:    'Use let instead of var.',
133: 1:    'Remove everything from the script except for the function logic.'
133: 1:  ],
133: 1:  'expectedAnswer': '27',
133: 1:  'history': [
133: 1:    {
133: 1:      'answer': '1',
133: 1:      'question': '0',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '0',
133: 1:      'question': '1',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '3',
133: 1:      'question': '2',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '2',
133: 1:      'question': '3',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '4',
133: 1:      'question': '5',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '6',
133: 1:      'question': '7',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '8',
133: 1:      'question': '9',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '10',
133: 1:      'question': '11',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '15',
133: 1:      'question': '14',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '16',
133: 1:      'question': '17',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '21',
133: 1:      'question': '20',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '22',
133: 1:      'question': '23',
133: 1:      'valid': true
133: 1:    }
133: 1:  ],
133: 1:  'info': [
133: 1:    '✅f(0) = 1',
133: 1:    '✅f(1) = 0',
133: 1:    '✅f(2) = 3',
133: 1:    '✅f(3) = 2',
133: 1:    '✅f(5) = 4',
133: 1:    '✅f(7) = 6',
133: 1:    '✅f(9) = 8',
133: 1:    '✅f(11) = 10',
133: 1:    '✅f(14) = 15',
133: 1:    '✅f(17) = 16',
133: 1:    '✅f(20) = 21',
133: 1:    '✅f(23) = 22',
133: 1:    '❌f(26) = ??? != 27'
133: 1:  ],
133: 1:  'level': 4,
133: 1:  'nextQuestion': '26',
133: 1:  'questions': [
133: 1:    '0',
133: 1:    '1',
133: 1:    '2',
133: 1:    '3',
133: 1:    '5',
133: 1:    '7',
133: 1:    '9',
133: 1:    '11',
133: 1:    '14',
133: 1:    '17',
133: 1:    '20',
133: 1:    '23',
133: 1:    '26'
133: 1:  ]
133: 1:}
133: 1:Scores: 2605
133: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27']')
133: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
134: 1:BoardData {
134: 1:  'description': [
134: 1:    'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.',
134: 1:    'Your task is to write a javascript function that returns the element at index n: f(n)=?',
134: 1:    'Use parseInt to parse input string arguments.',
134: 1:    'Use separate variable to store the result of parseInt.',
134: 1:    'Use let instead of var.',
134: 1:    'Remove everything from the script except for the function logic.'
134: 1:  ],
134: 1:  'expectedAnswer': '28',
134: 1:  'history': [
134: 1:    {
134: 1:      'answer': '1',
134: 1:      'question': '0',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '0',
134: 1:      'question': '1',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '3',
134: 1:      'question': '2',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '2',
134: 1:      'question': '3',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '4',
134: 1:      'question': '5',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '6',
134: 1:      'question': '7',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '8',
134: 1:      'question': '9',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '10',
134: 1:      'question': '11',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '15',
134: 1:      'question': '14',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '16',
134: 1:      'question': '17',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '21',
134: 1:      'question': '20',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '22',
134: 1:      'question': '23',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '27',
134: 1:      'question': '26',
134: 1:      'valid': true
134: 1:    }
134: 1:  ],
134: 1:  'info': [
134: 1:    '✅f(0) = 1',
134: 1:    '✅f(1) = 0',
134: 1:    '✅f(2) = 3',
134: 1:    '✅f(3) = 2',
134: 1:    '✅f(5) = 4',
134: 1:    '✅f(7) = 6',
134: 1:    '✅f(9) = 8',
134: 1:    '✅f(11) = 10',
134: 1:    '✅f(14) = 15',
134: 1:    '✅f(17) = 16',
134: 1:    '✅f(20) = 21',
134: 1:    '✅f(23) = 22',
134: 1:    '✅f(26) = 27',
134: 1:    '❌f(29) = ??? != 28'
134: 1:  ],
134: 1:  'level': 4,
134: 1:  'nextQuestion': '29',
134: 1:  'questions': [
134: 1:    '0',
134: 1:    '1',
134: 1:    '2',
134: 1:    '3',
134: 1:    '5',
134: 1:    '7',
134: 1:    '9',
134: 1:    '11',
134: 1:    '14',
134: 1:    '17',
134: 1:    '20',
134: 1:    '23',
134: 1:    '26',
134: 1:    '29'
134: 1:  ]
134: 1:}
134: 1:Scores: 2608
134: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28']')
134: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
135: 1:BoardData {
135: 1:  'description': [
135: 1:    'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.',
135: 1:    'Your task is to write a javascript function that returns the element at index n: f(n)=?',
135: 1:    'Use parseInt to parse input string arguments.',
135: 1:    'Use separate variable to store the result of parseInt.',
135: 1:    'Use let instead of var.',
135: 1:    'Remove everything from the script except for the function logic.'
135: 1:  ],
135: 1:  'expectedAnswer': '32',
135: 1:  'history': [
135: 1:    {
135: 1:      'answer': '1',
135: 1:      'question': '0',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '0',
135: 1:      'question': '1',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '3',
135: 1:      'question': '2',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '2',
135: 1:      'question': '3',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '4',
135: 1:      'question': '5',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '6',
135: 1:      'question': '7',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '8',
135: 1:      'question': '9',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '10',
135: 1:      'question': '11',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '15',
135: 1:      'question': '14',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '16',
135: 1:      'question': '17',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '21',
135: 1:      'question': '20',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '22',
135: 1:      'question': '23',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '27',
135: 1:      'question': '26',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '28',
135: 1:      'question': '29',
135: 1:      'valid': true
135: 1:    }
135: 1:  ],
135: 1:  'info': [
135: 1:    '✅f(0) = 1',
135: 1:    '✅f(1) = 0',
135: 1:    '✅f(2) = 3',
135: 1:    '✅f(3) = 2',
135: 1:    '✅f(5) = 4',
135: 1:    '✅f(7) = 6',
135: 1:    '✅f(9) = 8',
135: 1:    '✅f(11) = 10',
135: 1:    '✅f(14) = 15',
135: 1:    '✅f(17) = 16',
135: 1:    '✅f(20) = 21',
135: 1:    '✅f(23) = 22',
135: 1:    '✅f(26) = 27',
135: 1:    '✅f(29) = 28',
135: 1:    '❌f(33) = ??? != 32'
135: 1:  ],
135: 1:  'level': 4,
135: 1:  'nextQuestion': '33',
135: 1:  'questions': [
135: 1:    '0',
135: 1:    '1',
135: 1:    '2',
135: 1:    '3',
135: 1:    '5',
135: 1:    '7',
135: 1:    '9',
135: 1:    '11',
135: 1:    '14',
135: 1:    '17',
135: 1:    '20',
135: 1:    '23',
135: 1:    '26',
135: 1:    '29',
135: 1:    '33'
135: 1:  ]
135: 1:}
135: 1:Scores: 2611
135: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32']')
135: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
136: 1:BoardData {
136: 1:  'description': [
136: 1:    'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.',
136: 1:    'Your task is to write a javascript function that returns the element at index n: f(n)=?',
136: 1:    'Use parseInt to parse input string arguments.',
136: 1:    'Use separate variable to store the result of parseInt.',
136: 1:    'Use let instead of var.',
136: 1:    'Remove everything from the script except for the function logic.'
136: 1:  ],
136: 1:  'expectedAnswer': '36',
136: 1:  'history': [
136: 1:    {
136: 1:      'answer': '1',
136: 1:      'question': '0',
136: 1:      'valid': true
136: 1:    },
136: 1:    {
136: 1:      'answer': '0',
136: 1:      'question': '1',
136: 1:      'valid': true
136: 1:    },
136: 1:    {
136: 1:      'answer': '3',
136: 1:      'question': '2',
136: 1:      'valid': true
136: 1:    },
136: 1:    {
136: 1:      'answer': '2',
136: 1:      'question': '3',
136: 1:      'valid': true
136: 1:    },
136: 1:    {
136: 1:      'answer': '4',
136: 1:      'question': '5',
136: 1:      'valid': true
136: 1:    },
136: 1:    {
136: 1:      'answer': '6',
136: 1:      'question': '7',
136: 1:      'valid': true
136: 1:    },
136: 1:    {
136: 1:      'answer': '8',
136: 1:      'question': '9',
136: 1:      'valid': true
136: 1:    },
136: 1:    {
136: 1:      'answer': '10',
136: 1:      'question': '11',
136: 1:      'valid': true
136: 1:    },
136: 1:    {
136: 1:      'answer': '15',
136: 1:      'question': '14',
136: 1:      'valid': true
136: 1:    },
136: 1:    {
136: 1:      'answer': '16',
136: 1:      'question': '17',
136: 1:      'valid': true
136: 1:    },
136: 1:    {
136: 1:      'answer': '21',
136: 1:      'question': '20',
136: 1:      'valid': true
136: 1:    },
136: 1:    {
136: 1:      'answer': '22',
136: 1:      'question': '23',
136: 1:      'valid': true
136: 1:    },
136: 1:    {
136: 1:      'answer': '27',
136: 1:      'question': '26',
136: 1:      'valid': true
136: 1:    },
136: 1:    {
136: 1:      'answer': '28',
136: 1:      'question': '29',
136: 1:      'valid': true
136: 1:    },
136: 1:    {
136: 1:      'answer': '32',
136: 1:      'question': '33',
136: 1:      'valid': true
136: 1:    }
136: 1:  ],
136: 1:  'info': [
136: 1:    '✅f(0) = 1',
136: 1:    '✅f(1) = 0',
136: 1:    '✅f(2) = 3',
136: 1:    '✅f(3) = 2',
136: 1:    '✅f(5) = 4',
136: 1:    '✅f(7) = 6',
136: 1:    '✅f(9) = 8',
136: 1:    '✅f(11) = 10',
136: 1:    '✅f(14) = 15',
136: 1:    '✅f(17) = 16',
136: 1:    '✅f(20) = 21',
136: 1:    '✅f(23) = 22',
136: 1:    '✅f(26) = 27',
136: 1:    '✅f(29) = 28',
136: 1:    '✅f(33) = 32',
136: 1:    '❌f(37) = ??? != 36'
136: 1:  ],
136: 1:  'level': 4,
136: 1:  'nextQuestion': '37',
136: 1:  'questions': [
136: 1:    '0',
136: 1:    '1',
136: 1:    '2',
136: 1:    '3',
136: 1:    '5',
136: 1:    '7',
136: 1:    '9',
136: 1:    '11',
136: 1:    '14',
136: 1:    '17',
136: 1:    '20',
136: 1:    '23',
136: 1:    '26',
136: 1:    '29',
136: 1:    '33',
136: 1:    '37'
136: 1:  ]
136: 1:}
136: 1:Scores: 2614
136: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36']')
136: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
137: 1:BoardData {
137: 1:  'description': [
137: 1:    'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.',
137: 1:    'Your task is to write a javascript function that returns the element at index n: f(n)=?',
137: 1:    'Use parseInt to parse input string arguments.',
137: 1:    'Use separate variable to store the result of parseInt.',
137: 1:    'Use let instead of var.',
137: 1:    'Remove everything from the script except for the function logic.'
137: 1:  ],
137: 1:  'expectedAnswer': '40',
137: 1:  'history': [
137: 1:    {
137: 1:      'answer': '1',
137: 1:      'question': '0',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '0',
137: 1:      'question': '1',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '3',
137: 1:      'question': '2',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '2',
137: 1:      'question': '3',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '4',
137: 1:      'question': '5',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '6',
137: 1:      'question': '7',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '8',
137: 1:      'question': '9',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '10',
137: 1:      'question': '11',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '15',
137: 1:      'question': '14',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '16',
137: 1:      'question': '17',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '21',
137: 1:      'question': '20',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '22',
137: 1:      'question': '23',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '27',
137: 1:      'question': '26',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '28',
137: 1:      'question': '29',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '32',
137: 1:      'question': '33',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '36',
137: 1:      'question': '37',
137: 1:      'valid': true
137: 1:    }
137: 1:  ],
137: 1:  'info': [
137: 1:    '✅f(0) = 1',
137: 1:    '✅f(1) = 0',
137: 1:    '✅f(2) = 3',
137: 1:    '✅f(3) = 2',
137: 1:    '✅f(5) = 4',
137: 1:    '✅f(7) = 6',
137: 1:    '✅f(9) = 8',
137: 1:    '✅f(11) = 10',
137: 1:    '✅f(14) = 15',
137: 1:    '✅f(17) = 16',
137: 1:    '✅f(20) = 21',
137: 1:    '✅f(23) = 22',
137: 1:    '✅f(26) = 27',
137: 1:    '✅f(29) = 28',
137: 1:    '✅f(33) = 32',
137: 1:    '✅f(37) = 36',
137: 1:    '❌f(41) = ??? != 40'
137: 1:  ],
137: 1:  'level': 4,
137: 1:  'nextQuestion': '41',
137: 1:  'questions': [
137: 1:    '0',
137: 1:    '1',
137: 1:    '2',
137: 1:    '3',
137: 1:    '5',
137: 1:    '7',
137: 1:    '9',
137: 1:    '11',
137: 1:    '14',
137: 1:    '17',
137: 1:    '20',
137: 1:    '23',
137: 1:    '26',
137: 1:    '29',
137: 1:    '33',
137: 1:    '37',
137: 1:    '41'
137: 1:  ]
137: 1:}
137: 1:Scores: 2617
137: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40']')
137: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
138: 1:BoardData {
138: 1:  'description': [
138: 1:    'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.',
138: 1:    'Your task is to write a javascript function that returns the element at index n: f(n)=?',
138: 1:    'Use parseInt to parse input string arguments.',
138: 1:    'Use separate variable to store the result of parseInt.',
138: 1:    'Use let instead of var.',
138: 1:    'Remove everything from the script except for the function logic.'
138: 1:  ],
138: 1:  'expectedAnswer': '44',
138: 1:  'history': [
138: 1:    {
138: 1:      'answer': '1',
138: 1:      'question': '0',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '0',
138: 1:      'question': '1',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '3',
138: 1:      'question': '2',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '2',
138: 1:      'question': '3',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '4',
138: 1:      'question': '5',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '6',
138: 1:      'question': '7',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '8',
138: 1:      'question': '9',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '10',
138: 1:      'question': '11',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '15',
138: 1:      'question': '14',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '16',
138: 1:      'question': '17',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '21',
138: 1:      'question': '20',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '22',
138: 1:      'question': '23',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '27',
138: 1:      'question': '26',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '28',
138: 1:      'question': '29',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '32',
138: 1:      'question': '33',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '36',
138: 1:      'question': '37',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '40',
138: 1:      'question': '41',
138: 1:      'valid': true
138: 1:    }
138: 1:  ],
138: 1:  'info': [
138: 1:    '✅f(0) = 1',
138: 1:    '✅f(1) = 0',
138: 1:    '✅f(2) = 3',
138: 1:    '✅f(3) = 2',
138: 1:    '✅f(5) = 4',
138: 1:    '✅f(7) = 6',
138: 1:    '✅f(9) = 8',
138: 1:    '✅f(11) = 10',
138: 1:    '✅f(14) = 15',
138: 1:    '✅f(17) = 16',
138: 1:    '✅f(20) = 21',
138: 1:    '✅f(23) = 22',
138: 1:    '✅f(26) = 27',
138: 1:    '✅f(29) = 28',
138: 1:    '✅f(33) = 32',
138: 1:    '✅f(37) = 36',
138: 1:    '✅f(41) = 40',
138: 1:    '❌f(45) = ??? != 44'
138: 1:  ],
138: 1:  'level': 4,
138: 1:  'nextQuestion': '45',
138: 1:  'questions': [
138: 1:    '0',
138: 1:    '1',
138: 1:    '2',
138: 1:    '3',
138: 1:    '5',
138: 1:    '7',
138: 1:    '9',
138: 1:    '11',
138: 1:    '14',
138: 1:    '17',
138: 1:    '20',
138: 1:    '23',
138: 1:    '26',
138: 1:    '29',
138: 1:    '33',
138: 1:    '37',
138: 1:    '41',
138: 1:    '45'
138: 1:  ]
138: 1:}
138: 1:Scores: 2620
138: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44']')
138: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
139: 1:BoardData {
139: 1:  'description': [
139: 1:    'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.',
139: 1:    'Your task is to write a javascript function that returns the element at index n: f(n)=?',
139: 1:    'Use parseInt to parse input string arguments.',
139: 1:    'Use separate variable to store the result of parseInt.',
139: 1:    'Use let instead of var.',
139: 1:    'Remove everything from the script except for the function logic.'
139: 1:  ],
139: 1:  'expectedAnswer': '51',
139: 1:  'history': [
139: 1:    {
139: 1:      'answer': '1',
139: 1:      'question': '0',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '0',
139: 1:      'question': '1',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '3',
139: 1:      'question': '2',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '2',
139: 1:      'question': '3',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '4',
139: 1:      'question': '5',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '6',
139: 1:      'question': '7',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '8',
139: 1:      'question': '9',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '10',
139: 1:      'question': '11',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '15',
139: 1:      'question': '14',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '16',
139: 1:      'question': '17',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '21',
139: 1:      'question': '20',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '22',
139: 1:      'question': '23',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '27',
139: 1:      'question': '26',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '28',
139: 1:      'question': '29',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '32',
139: 1:      'question': '33',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '36',
139: 1:      'question': '37',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '40',
139: 1:      'question': '41',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '44',
139: 1:      'question': '45',
139: 1:      'valid': true
139: 1:    }
139: 1:  ],
139: 1:  'info': [
139: 1:    '✅f(0) = 1',
139: 1:    '✅f(1) = 0',
139: 1:    '✅f(2) = 3',
139: 1:    '✅f(3) = 2',
139: 1:    '✅f(5) = 4',
139: 1:    '✅f(7) = 6',
139: 1:    '✅f(9) = 8',
139: 1:    '✅f(11) = 10',
139: 1:    '✅f(14) = 15',
139: 1:    '✅f(17) = 16',
139: 1:    '✅f(20) = 21',
139: 1:    '✅f(23) = 22',
139: 1:    '✅f(26) = 27',
139: 1:    '✅f(29) = 28',
139: 1:    '✅f(33) = 32',
139: 1:    '✅f(37) = 36',
139: 1:    '✅f(41) = 40',
139: 1:    '✅f(45) = 44',
139: 1:    '❌f(50) = ??? != 51'
139: 1:  ],
139: 1:  'level': 4,
139: 1:  'nextQuestion': '50',
139: 1:  'questions': [
139: 1:    '0',
139: 1:    '1',
139: 1:    '2',
139: 1:    '3',
139: 1:    '5',
139: 1:    '7',
139: 1:    '9',
139: 1:    '11',
139: 1:    '14',
139: 1:    '17',
139: 1:    '20',
139: 1:    '23',
139: 1:    '26',
139: 1:    '29',
139: 1:    '33',
139: 1:    '37',
139: 1:    '41',
139: 1:    '45',
139: 1:    '50'
139: 1:  ]
139: 1:}
139: 1:Scores: 2623
139: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51']')
139: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
140: 1:BoardData {
140: 1:  'description': [
140: 1:    'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.',
140: 1:    'Your task is to write a javascript function that returns the element at index n: f(n)=?',
140: 1:    'Use parseInt to parse input string arguments.',
140: 1:    'Use separate variable to store the result of parseInt.',
140: 1:    'Use let instead of var.',
140: 1:    'Remove everything from the script except for the function logic.'
140: 1:  ],
140: 1:  'expectedAnswer': '54',
140: 1:  'history': [
140: 1:    {
140: 1:      'answer': '1',
140: 1:      'question': '0',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '0',
140: 1:      'question': '1',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '3',
140: 1:      'question': '2',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '2',
140: 1:      'question': '3',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '4',
140: 1:      'question': '5',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '6',
140: 1:      'question': '7',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '8',
140: 1:      'question': '9',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '10',
140: 1:      'question': '11',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '15',
140: 1:      'question': '14',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '16',
140: 1:      'question': '17',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '21',
140: 1:      'question': '20',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '22',
140: 1:      'question': '23',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '27',
140: 1:      'question': '26',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '28',
140: 1:      'question': '29',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '32',
140: 1:      'question': '33',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '36',
140: 1:      'question': '37',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '40',
140: 1:      'question': '41',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '44',
140: 1:      'question': '45',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '51',
140: 1:      'question': '50',
140: 1:      'valid': true
140: 1:    }
140: 1:  ],
140: 1:  'info': [
140: 1:    '✅f(0) = 1',
140: 1:    '✅f(1) = 0',
140: 1:    '✅f(2) = 3',
140: 1:    '✅f(3) = 2',
140: 1:    '✅f(5) = 4',
140: 1:    '✅f(7) = 6',
140: 1:    '✅f(9) = 8',
140: 1:    '✅f(11) = 10',
140: 1:    '✅f(14) = 15',
140: 1:    '✅f(17) = 16',
140: 1:    '✅f(20) = 21',
140: 1:    '✅f(23) = 22',
140: 1:    '✅f(26) = 27',
140: 1:    '✅f(29) = 28',
140: 1:    '✅f(33) = 32',
140: 1:    '✅f(37) = 36',
140: 1:    '✅f(41) = 40',
140: 1:    '✅f(45) = 44',
140: 1:    '✅f(50) = 51',
140: 1:    '❌f(55) = ??? != 54'
140: 1:  ],
140: 1:  'level': 4,
140: 1:  'nextQuestion': '55',
140: 1:  'questions': [
140: 1:    '0',
140: 1:    '1',
140: 1:    '2',
140: 1:    '3',
140: 1:    '5',
140: 1:    '7',
140: 1:    '9',
140: 1:    '11',
140: 1:    '14',
140: 1:    '17',
140: 1:    '20',
140: 1:    '23',
140: 1:    '26',
140: 1:    '29',
140: 1:    '33',
140: 1:    '37',
140: 1:    '41',
140: 1:    '45',
140: 1:    '50',
140: 1:    '55'
140: 1:  ]
140: 1:}
140: 1:Scores: 2626
140: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54']')
140: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
141: 1:BoardData {
141: 1:  'description': [
141: 1:    'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.',
141: 1:    'Your task is to write a javascript function that returns the element at index n: f(n)=?',
141: 1:    'Use parseInt to parse input string arguments.',
141: 1:    'Use separate variable to store the result of parseInt.',
141: 1:    'Use let instead of var.',
141: 1:    'Remove everything from the script except for the function logic.'
141: 1:  ],
141: 1:  'expectedAnswer': '61',
141: 1:  'history': [
141: 1:    {
141: 1:      'answer': '1',
141: 1:      'question': '0',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '0',
141: 1:      'question': '1',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '3',
141: 1:      'question': '2',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '2',
141: 1:      'question': '3',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '4',
141: 1:      'question': '5',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '6',
141: 1:      'question': '7',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '8',
141: 1:      'question': '9',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '10',
141: 1:      'question': '11',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '15',
141: 1:      'question': '14',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '16',
141: 1:      'question': '17',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '21',
141: 1:      'question': '20',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '22',
141: 1:      'question': '23',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '27',
141: 1:      'question': '26',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '28',
141: 1:      'question': '29',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '32',
141: 1:      'question': '33',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '36',
141: 1:      'question': '37',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '40',
141: 1:      'question': '41',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '44',
141: 1:      'question': '45',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '51',
141: 1:      'question': '50',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '54',
141: 1:      'question': '55',
141: 1:      'valid': true
141: 1:    }
141: 1:  ],
141: 1:  'info': [
141: 1:    '✅f(0) = 1',
141: 1:    '✅f(1) = 0',
141: 1:    '✅f(2) = 3',
141: 1:    '✅f(3) = 2',
141: 1:    '✅f(5) = 4',
141: 1:    '✅f(7) = 6',
141: 1:    '✅f(9) = 8',
141: 1:    '✅f(11) = 10',
141: 1:    '✅f(14) = 15',
141: 1:    '✅f(17) = 16',
141: 1:    '✅f(20) = 21',
141: 1:    '✅f(23) = 22',
141: 1:    '✅f(26) = 27',
141: 1:    '✅f(29) = 28',
141: 1:    '✅f(33) = 32',
141: 1:    '✅f(37) = 36',
141: 1:    '✅f(41) = 40',
141: 1:    '✅f(45) = 44',
141: 1:    '✅f(50) = 51',
141: 1:    '✅f(55) = 54',
141: 1:    '❌f(60) = ??? != 61'
141: 1:  ],
141: 1:  'level': 4,
141: 1:  'nextQuestion': '60',
141: 1:  'questions': [
141: 1:    '0',
141: 1:    '1',
141: 1:    '2',
141: 1:    '3',
141: 1:    '5',
141: 1:    '7',
141: 1:    '9',
141: 1:    '11',
141: 1:    '14',
141: 1:    '17',
141: 1:    '20',
141: 1:    '23',
141: 1:    '26',
141: 1:    '29',
141: 1:    '33',
141: 1:    '37',
141: 1:    '41',
141: 1:    '45',
141: 1:    '50',
141: 1:    '55',
141: 1:    '60'
141: 1:  ]
141: 1:}
141: 1:Scores: 2629
141: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61']')
141: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
142: 1:BoardData {
142: 1:  'description': [
142: 1:    'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.',
142: 1:    'Your task is to write a javascript function that returns the element at index n: f(n)=?',
142: 1:    'Use parseInt to parse input string arguments.',
142: 1:    'Use separate variable to store the result of parseInt.',
142: 1:    'Use let instead of var.',
142: 1:    'Remove everything from the script except for the function logic.'
142: 1:  ],
142: 1:  'expectedAnswer': '64',
142: 1:  'history': [
142: 1:    {
142: 1:      'answer': '1',
142: 1:      'question': '0',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '0',
142: 1:      'question': '1',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '3',
142: 1:      'question': '2',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '2',
142: 1:      'question': '3',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '4',
142: 1:      'question': '5',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '6',
142: 1:      'question': '7',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '8',
142: 1:      'question': '9',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '10',
142: 1:      'question': '11',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '15',
142: 1:      'question': '14',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '16',
142: 1:      'question': '17',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '21',
142: 1:      'question': '20',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '22',
142: 1:      'question': '23',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '27',
142: 1:      'question': '26',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '28',
142: 1:      'question': '29',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '32',
142: 1:      'question': '33',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '36',
142: 1:      'question': '37',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '40',
142: 1:      'question': '41',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '44',
142: 1:      'question': '45',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '51',
142: 1:      'question': '50',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '54',
142: 1:      'question': '55',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '61',
142: 1:      'question': '60',
142: 1:      'valid': true
142: 1:    }
142: 1:  ],
142: 1:  'info': [
142: 1:    '✅f(0) = 1',
142: 1:    '✅f(1) = 0',
142: 1:    '✅f(2) = 3',
142: 1:    '✅f(3) = 2',
142: 1:    '✅f(5) = 4',
142: 1:    '✅f(7) = 6',
142: 1:    '✅f(9) = 8',
142: 1:    '✅f(11) = 10',
142: 1:    '✅f(14) = 15',
142: 1:    '✅f(17) = 16',
142: 1:    '✅f(20) = 21',
142: 1:    '✅f(23) = 22',
142: 1:    '✅f(26) = 27',
142: 1:    '✅f(29) = 28',
142: 1:    '✅f(33) = 32',
142: 1:    '✅f(37) = 36',
142: 1:    '✅f(41) = 40',
142: 1:    '✅f(45) = 44',
142: 1:    '✅f(50) = 51',
142: 1:    '✅f(55) = 54',
142: 1:    '✅f(60) = 61',
142: 1:    '❌f(65) = ??? != 64'
142: 1:  ],
142: 1:  'level': 4,
142: 1:  'nextQuestion': '65',
142: 1:  'questions': [
142: 1:    '0',
142: 1:    '1',
142: 1:    '2',
142: 1:    '3',
142: 1:    '5',
142: 1:    '7',
142: 1:    '9',
142: 1:    '11',
142: 1:    '14',
142: 1:    '17',
142: 1:    '20',
142: 1:    '23',
142: 1:    '26',
142: 1:    '29',
142: 1:    '33',
142: 1:    '37',
142: 1:    '41',
142: 1:    '45',
142: 1:    '50',
142: 1:    '55',
142: 1:    '60',
142: 1:    '65'
142: 1:  ]
142: 1:}
142: 1:Scores: 2632
142: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64']')
142: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
143: 1:BoardData {
143: 1:  'description': [
143: 1:    'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.',
143: 1:    'Your task is to write a javascript function that returns the element at index n: f(n)=?',
143: 1:    'Use parseInt to parse input string arguments.',
143: 1:    'Use separate variable to store the result of parseInt.',
143: 1:    'Use let instead of var.',
143: 1:    'Remove everything from the script except for the function logic.'
143: 1:  ],
143: 1:  'expectedAnswer': '71',
143: 1:  'history': [
143: 1:    {
143: 1:      'answer': '1',
143: 1:      'question': '0',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '0',
143: 1:      'question': '1',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '3',
143: 1:      'question': '2',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '2',
143: 1:      'question': '3',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '4',
143: 1:      'question': '5',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '6',
143: 1:      'question': '7',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '8',
143: 1:      'question': '9',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '10',
143: 1:      'question': '11',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '15',
143: 1:      'question': '14',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '16',
143: 1:      'question': '17',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '21',
143: 1:      'question': '20',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '22',
143: 1:      'question': '23',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '27',
143: 1:      'question': '26',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '28',
143: 1:      'question': '29',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '32',
143: 1:      'question': '33',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '36',
143: 1:      'question': '37',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '40',
143: 1:      'question': '41',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '44',
143: 1:      'question': '45',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '51',
143: 1:      'question': '50',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '54',
143: 1:      'question': '55',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '61',
143: 1:      'question': '60',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '64',
143: 1:      'question': '65',
143: 1:      'valid': true
143: 1:    }
143: 1:  ],
143: 1:  'info': [
143: 1:    '✅f(0) = 1',
143: 1:    '✅f(1) = 0',
143: 1:    '✅f(2) = 3',
143: 1:    '✅f(3) = 2',
143: 1:    '✅f(5) = 4',
143: 1:    '✅f(7) = 6',
143: 1:    '✅f(9) = 8',
143: 1:    '✅f(11) = 10',
143: 1:    '✅f(14) = 15',
143: 1:    '✅f(17) = 16',
143: 1:    '✅f(20) = 21',
143: 1:    '✅f(23) = 22',
143: 1:    '✅f(26) = 27',
143: 1:    '✅f(29) = 28',
143: 1:    '✅f(33) = 32',
143: 1:    '✅f(37) = 36',
143: 1:    '✅f(41) = 40',
143: 1:    '✅f(45) = 44',
143: 1:    '✅f(50) = 51',
143: 1:    '✅f(55) = 54',
143: 1:    '✅f(60) = 61',
143: 1:    '✅f(65) = 64',
143: 1:    '❌f(70) = ??? != 71'
143: 1:  ],
143: 1:  'level': 4,
143: 1:  'nextQuestion': '70',
143: 1:  'questions': [
143: 1:    '0',
143: 1:    '1',
143: 1:    '2',
143: 1:    '3',
143: 1:    '5',
143: 1:    '7',
143: 1:    '9',
143: 1:    '11',
143: 1:    '14',
143: 1:    '17',
143: 1:    '20',
143: 1:    '23',
143: 1:    '26',
143: 1:    '29',
143: 1:    '33',
143: 1:    '37',
143: 1:    '41',
143: 1:    '45',
143: 1:    '50',
143: 1:    '55',
143: 1:    '60',
143: 1:    '65',
143: 1:    '70'
143: 1:  ]
143: 1:}
143: 1:Scores: 2635
143: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64', '71']')
143: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
144: 1:BoardData {
144: 1:  'description': [
144: 1:    'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.',
144: 1:    'Your task is to write a javascript function that returns the element at index n: f(n)=?',
144: 1:    'Use parseInt to parse input string arguments.',
144: 1:    'Use separate variable to store the result of parseInt.',
144: 1:    'Use let instead of var.',
144: 1:    'Remove everything from the script except for the function logic.'
144: 1:  ],
144: 1:  'expectedAnswer': '74',
144: 1:  'history': [
144: 1:    {
144: 1:      'answer': '1',
144: 1:      'question': '0',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '0',
144: 1:      'question': '1',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '3',
144: 1:      'question': '2',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '2',
144: 1:      'question': '3',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '4',
144: 1:      'question': '5',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '6',
144: 1:      'question': '7',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '8',
144: 1:      'question': '9',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '10',
144: 1:      'question': '11',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '15',
144: 1:      'question': '14',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '16',
144: 1:      'question': '17',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '21',
144: 1:      'question': '20',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '22',
144: 1:      'question': '23',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '27',
144: 1:      'question': '26',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '28',
144: 1:      'question': '29',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '32',
144: 1:      'question': '33',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '36',
144: 1:      'question': '37',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '40',
144: 1:      'question': '41',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '44',
144: 1:      'question': '45',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '51',
144: 1:      'question': '50',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '54',
144: 1:      'question': '55',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '61',
144: 1:      'question': '60',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '64',
144: 1:      'question': '65',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '71',
144: 1:      'question': '70',
144: 1:      'valid': true
144: 1:    }
144: 1:  ],
144: 1:  'info': [
144: 1:    '✅f(0) = 1',
144: 1:    '✅f(1) = 0',
144: 1:    '✅f(2) = 3',
144: 1:    '✅f(3) = 2',
144: 1:    '✅f(5) = 4',
144: 1:    '✅f(7) = 6',
144: 1:    '✅f(9) = 8',
144: 1:    '✅f(11) = 10',
144: 1:    '✅f(14) = 15',
144: 1:    '✅f(17) = 16',
144: 1:    '✅f(20) = 21',
144: 1:    '✅f(23) = 22',
144: 1:    '✅f(26) = 27',
144: 1:    '✅f(29) = 28',
144: 1:    '✅f(33) = 32',
144: 1:    '✅f(37) = 36',
144: 1:    '✅f(41) = 40',
144: 1:    '✅f(45) = 44',
144: 1:    '✅f(50) = 51',
144: 1:    '✅f(55) = 54',
144: 1:    '✅f(60) = 61',
144: 1:    '✅f(65) = 64',
144: 1:    '✅f(70) = 71',
144: 1:    '❌f(75) = ??? != 74'
144: 1:  ],
144: 1:  'level': 4,
144: 1:  'nextQuestion': '75',
144: 1:  'questions': [
144: 1:    '0',
144: 1:    '1',
144: 1:    '2',
144: 1:    '3',
144: 1:    '5',
144: 1:    '7',
144: 1:    '9',
144: 1:    '11',
144: 1:    '14',
144: 1:    '17',
144: 1:    '20',
144: 1:    '23',
144: 1:    '26',
144: 1:    '29',
144: 1:    '33',
144: 1:    '37',
144: 1:    '41',
144: 1:    '45',
144: 1:    '50',
144: 1:    '55',
144: 1:    '60',
144: 1:    '65',
144: 1:    '70',
144: 1:    '75'
144: 1:  ]
144: 1:}
144: 1:Scores: 2638
144: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64', '71', '74']')
144: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
145: 1:BoardData {
145: 1:  'description': [
145: 1:    'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.',
145: 1:    'Your task is to write a javascript function that returns the element at index n: f(n)=?',
145: 1:    'Use parseInt to parse input string arguments.',
145: 1:    'Use separate variable to store the result of parseInt.',
145: 1:    'Use let instead of var.',
145: 1:    'Remove everything from the script except for the function logic.'
145: 1:  ],
145: 1:  'expectedAnswer': '80',
145: 1:  'history': [
145: 1:    {
145: 1:      'answer': '1',
145: 1:      'question': '0',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '0',
145: 1:      'question': '1',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '3',
145: 1:      'question': '2',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '2',
145: 1:      'question': '3',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '4',
145: 1:      'question': '5',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '6',
145: 1:      'question': '7',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '8',
145: 1:      'question': '9',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '10',
145: 1:      'question': '11',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '15',
145: 1:      'question': '14',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '16',
145: 1:      'question': '17',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '21',
145: 1:      'question': '20',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '22',
145: 1:      'question': '23',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '27',
145: 1:      'question': '26',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '28',
145: 1:      'question': '29',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '32',
145: 1:      'question': '33',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '36',
145: 1:      'question': '37',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '40',
145: 1:      'question': '41',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '44',
145: 1:      'question': '45',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '51',
145: 1:      'question': '50',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '54',
145: 1:      'question': '55',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '61',
145: 1:      'question': '60',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '64',
145: 1:      'question': '65',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '71',
145: 1:      'question': '70',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '74',
145: 1:      'question': '75',
145: 1:      'valid': true
145: 1:    }
145: 1:  ],
145: 1:  'info': [
145: 1:    '✅f(0) = 1',
145: 1:    '✅f(1) = 0',
145: 1:    '✅f(2) = 3',
145: 1:    '✅f(3) = 2',
145: 1:    '✅f(5) = 4',
145: 1:    '✅f(7) = 6',
145: 1:    '✅f(9) = 8',
145: 1:    '✅f(11) = 10',
145: 1:    '✅f(14) = 15',
145: 1:    '✅f(17) = 16',
145: 1:    '✅f(20) = 21',
145: 1:    '✅f(23) = 22',
145: 1:    '✅f(26) = 27',
145: 1:    '✅f(29) = 28',
145: 1:    '✅f(33) = 32',
145: 1:    '✅f(37) = 36',
145: 1:    '✅f(41) = 40',
145: 1:    '✅f(45) = 44',
145: 1:    '✅f(50) = 51',
145: 1:    '✅f(55) = 54',
145: 1:    '✅f(60) = 61',
145: 1:    '✅f(65) = 64',
145: 1:    '✅f(70) = 71',
145: 1:    '✅f(75) = 74',
145: 1:    '❌f(81) = ??? != 80'
145: 1:  ],
145: 1:  'level': 4,
145: 1:  'nextQuestion': '81',
145: 1:  'questions': [
145: 1:    '0',
145: 1:    '1',
145: 1:    '2',
145: 1:    '3',
145: 1:    '5',
145: 1:    '7',
145: 1:    '9',
145: 1:    '11',
145: 1:    '14',
145: 1:    '17',
145: 1:    '20',
145: 1:    '23',
145: 1:    '26',
145: 1:    '29',
145: 1:    '33',
145: 1:    '37',
145: 1:    '41',
145: 1:    '45',
145: 1:    '50',
145: 1:    '55',
145: 1:    '60',
145: 1:    '65',
145: 1:    '70',
145: 1:    '75',
145: 1:    '81'
145: 1:  ]
145: 1:}
145: 1:Scores: 2641
145: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64', '71', '74', '80']')
145: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
146: 1:BoardData {
146: 1:  'description': [
146: 1:    'Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.',
146: 1:    'Your task is to write a javascript function that returns the element at index n: f(n)=?',
146: 1:    'Use parseInt to parse input string arguments.',
146: 1:    'Use separate variable to store the result of parseInt.',
146: 1:    'Use let instead of var.',
146: 1:    'Remove everything from the script except for the function logic.'
146: 1:  ],
146: 1:  'expectedAnswer': '86',
146: 1:  'history': [
146: 1:    {
146: 1:      'answer': '1',
146: 1:      'question': '0',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '0',
146: 1:      'question': '1',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '3',
146: 1:      'question': '2',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '2',
146: 1:      'question': '3',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '4',
146: 1:      'question': '5',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '6',
146: 1:      'question': '7',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '8',
146: 1:      'question': '9',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '10',
146: 1:      'question': '11',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '15',
146: 1:      'question': '14',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '16',
146: 1:      'question': '17',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '21',
146: 1:      'question': '20',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '22',
146: 1:      'question': '23',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '27',
146: 1:      'question': '26',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '28',
146: 1:      'question': '29',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '32',
146: 1:      'question': '33',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '36',
146: 1:      'question': '37',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '40',
146: 1:      'question': '41',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '44',
146: 1:      'question': '45',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '51',
146: 1:      'question': '50',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '54',
146: 1:      'question': '55',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '61',
146: 1:      'question': '60',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '64',
146: 1:      'question': '65',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '71',
146: 1:      'question': '70',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '74',
146: 1:      'question': '75',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '80',
146: 1:      'question': '81',
146: 1:      'valid': true
146: 1:    }
146: 1:  ],
146: 1:  'info': [
146: 1:    '✅f(0) = 1',
146: 1:    '✅f(1) = 0',
146: 1:    '✅f(2) = 3',
146: 1:    '✅f(3) = 2',
146: 1:    '✅f(5) = 4',
146: 1:    '✅f(7) = 6',
146: 1:    '✅f(9) = 8',
146: 1:    '✅f(11) = 10',
146: 1:    '✅f(14) = 15',
146: 1:    '✅f(17) = 16',
146: 1:    '✅f(20) = 21',
146: 1:    '✅f(23) = 22',
146: 1:    '✅f(26) = 27',
146: 1:    '✅f(29) = 28',
146: 1:    '✅f(33) = 32',
146: 1:    '✅f(37) = 36',
146: 1:    '✅f(41) = 40',
146: 1:    '✅f(45) = 44',
146: 1:    '✅f(50) = 51',
146: 1:    '✅f(55) = 54',
146: 1:    '✅f(60) = 61',
146: 1:    '✅f(65) = 64',
146: 1:    '✅f(70) = 71',
146: 1:    '✅f(75) = 74',
146: 1:    '✅f(81) = 80',
146: 1:    '❌f(87) = ??? != 86'
146: 1:  ],
146: 1:  'level': 4,
146: 1:  'nextQuestion': '87',
146: 1:  'questions': [
146: 1:    '0',
146: 1:    '1',
146: 1:    '2',
146: 1:    '3',
146: 1:    '5',
146: 1:    '7',
146: 1:    '9',
146: 1:    '11',
146: 1:    '14',
146: 1:    '17',
146: 1:    '20',
146: 1:    '23',
146: 1:    '26',
146: 1:    '29',
146: 1:    '33',
146: 1:    '37',
146: 1:    '41',
146: 1:    '45',
146: 1:    '50',
146: 1:    '55',
146: 1:    '60',
146: 1:    '65',
146: 1:    '70',
146: 1:    '75',
146: 1:    '81',
146: 1:    '87'
146: 1:  ]
146: 1:}
146: 1:Scores: 2644
146: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64', '71', '74', '80', '86']')
146: 1:Fire Event: PassTest{complexity=8, testCount=26}
146: 1:Fire Event: NextAlgorithm{complexity=8, time=0}
------------------------------------------
147: 1:BoardData {
147: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
147: 1:  'history': [
147: 1:    {
147: 1:      'answer': '1',
147: 1:      'question': '0',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '0',
147: 1:      'question': '1',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '3',
147: 1:      'question': '2',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '2',
147: 1:      'question': '3',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '4',
147: 1:      'question': '5',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '6',
147: 1:      'question': '7',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '8',
147: 1:      'question': '9',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '10',
147: 1:      'question': '11',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '15',
147: 1:      'question': '14',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '16',
147: 1:      'question': '17',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '21',
147: 1:      'question': '20',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '22',
147: 1:      'question': '23',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '27',
147: 1:      'question': '26',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '28',
147: 1:      'question': '29',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '32',
147: 1:      'question': '33',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '36',
147: 1:      'question': '37',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '40',
147: 1:      'question': '41',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '44',
147: 1:      'question': '45',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '51',
147: 1:      'question': '50',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '54',
147: 1:      'question': '55',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '61',
147: 1:      'question': '60',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '64',
147: 1:      'question': '65',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '71',
147: 1:      'question': '70',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '74',
147: 1:      'question': '75',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '80',
147: 1:      'question': '81',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '86',
147: 1:      'question': '87',
147: 1:      'valid': true
147: 1:    }
147: 1:  ],
147: 1:  'info': [
147: 1:    '✅f(0) = 1',
147: 1:    '✅f(1) = 0',
147: 1:    '✅f(2) = 3',
147: 1:    '✅f(3) = 2',
147: 1:    '✅f(5) = 4',
147: 1:    '✅f(7) = 6',
147: 1:    '✅f(9) = 8',
147: 1:    '✅f(11) = 10',
147: 1:    '✅f(14) = 15',
147: 1:    '✅f(17) = 16',
147: 1:    '✅f(20) = 21',
147: 1:    '✅f(23) = 22',
147: 1:    '✅f(26) = 27',
147: 1:    '✅f(29) = 28',
147: 1:    '✅f(33) = 32',
147: 1:    '✅f(37) = 36',
147: 1:    '✅f(41) = 40',
147: 1:    '✅f(45) = 44',
147: 1:    '✅f(50) = 51',
147: 1:    '✅f(55) = 54',
147: 1:    '✅f(60) = 61',
147: 1:    '✅f(65) = 64',
147: 1:    '✅f(70) = 71',
147: 1:    '✅f(75) = 74',
147: 1:    '✅f(81) = 80',
147: 1:    '✅f(87) = 86'
147: 1:  ],
147: 1:  'level': 4,
147: 1:  'questions': []
147: 1:}
147: 1:Scores: 3726
147: 1:Answer: message('StartNextLevel')
147: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
148: 1:BoardData {
148: 1:  'description': [
148: 1:    'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640.',
148: 1:    'Create a function that calculates the difference between the sum squares and the square of the sum for the natural number i.',
148: 1:    'Write a javascript function.',
148: 1:    'The function should not use a loop.'
148: 1:  ],
148: 1:  'expectedAnswer': '0',
148: 1:  'history': [],
148: 1:  'info': ['❌f(1) = ??? != 0'],
148: 1:  'level': 5,
148: 1:  'nextQuestion': '1',
148: 1:  'questions': ['1']
148: 1:}
148: 1:Scores: 3726
148: 1:Answer: message('['0']')
148: 1:Fire Event: PassTest{complexity=9, testCount=25}
------------------------------------------
149: 1:BoardData {
149: 1:  'description': [
149: 1:    'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640.',
149: 1:    'Create a function that calculates the difference between the sum squares and the square of the sum for the natural number i.',
149: 1:    'Write a javascript function.',
149: 1:    'The function should not use a loop.'
149: 1:  ],
149: 1:  'expectedAnswer': '4',
149: 1:  'history': [{
149: 1:    'answer': '0',
149: 1:    'question': '1',
149: 1:    'valid': true
149: 1:  }],
149: 1:  'info': [
149: 1:    '✅f(1) = 0',
149: 1:    '❌f(2) = ??? != 4'
149: 1:  ],
149: 1:  'level': 5,
149: 1:  'nextQuestion': '2',
149: 1:  'questions': [
149: 1:    '1',
149: 1:    '2'
149: 1:  ]
149: 1:}
149: 1:Scores: 3729
149: 1:Answer: message('['0', '4']')
149: 1:Fire Event: PassTest{complexity=9, testCount=25}
------------------------------------------
150: 1:BoardData {
150: 1:  'description': [
150: 1:    'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640.',
150: 1:    'Create a function that calculates the difference between the sum squares and the square of the sum for the natural number i.',
150: 1:    'Write a javascript function.',
150: 1:    'The function should not use a loop.'
150: 1:  ],
150: 1:  'expectedAnswer': '22',
150: 1:  'history': [
150: 1:    {
150: 1:      'answer': '0',
150: 1:      'question': '1',
150: 1:      'valid': true
150: 1:    },
150: 1:    {
150: 1:      'answer': '4',
150: 1:      'question': '2',
150: 1:      'valid': true
150: 1:    }
150: 1:  ],
150: 1:  'info': [
150: 1:    '✅f(1) = 0',
150: 1:    '✅f(2) = 4',
150: 1:    '❌f(3) = ??? != 22'
150: 1:  ],
150: 1:  'level': 5,
150: 1:  'nextQuestion': '3',
150: 1:  'questions': [
150: 1:    '1',
150: 1:    '2',
150: 1:    '3'
150: 1:  ]
150: 1:}
150: 1:Scores: 3732
150: 1:Answer: message('['0', '4', '22']')
150: 1:Fire Event: PassTest{complexity=9, testCount=25}
------------------------------------------
151: 1:BoardData {
151: 1:  'description': [
151: 1:    'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640.',
151: 1:    'Create a function that calculates the difference between the sum squares and the square of the sum for the natural number i.',
151: 1:    'Write a javascript function.',
151: 1:    'The function should not use a loop.'
151: 1:  ],
151: 1:  'expectedAnswer': '70',
151: 1:  'history': [
151: 1:    {
151: 1:      'answer': '0',
151: 1:      'question': '1',
151: 1:      'valid': true
151: 1:    },
151: 1:    {
151: 1:      'answer': '4',
151: 1:      'question': '2',
151: 1:      'valid': true
151: 1:    },
151: 1:    {
151: 1:      'answer': '22',
151: 1:      'question': '3',
151: 1:      'valid': true
151: 1:    }
151: 1:  ],
151: 1:  'info': [
151: 1:    '✅f(1) = 0',
151: 1:    '✅f(2) = 4',
151: 1:    '✅f(3) = 22',
151: 1:    '❌f(4) = ??? != 70'
151: 1:  ],
151: 1:  'level': 5,
151: 1:  'nextQuestion': '4',
151: 1:  'questions': [
151: 1:    '1',
151: 1:    '2',
151: 1:    '3',
151: 1:    '4'
151: 1:  ]
151: 1:}
151: 1:Scores: 3735
151: 1:Answer: message('['0', '4', '22', '70']')
151: 1:Fire Event: PassTest{complexity=9, testCount=25}
------------------------------------------
152: 1:BoardData {
152: 1:  'description': [
152: 1:    'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640.',
152: 1:    'Create a function that calculates the difference between the sum squares and the square of the sum for the natural number i.',
152: 1:    'Write a javascript function.',
152: 1:    'The function should not use a loop.'
152: 1:  ],
152: 1:  'expectedAnswer': '170',
152: 1:  'history': [
152: 1:    {
152: 1:      'answer': '0',
152: 1:      'question': '1',
152: 1:      'valid': true
152: 1:    },
152: 1:    {
152: 1:      'answer': '4',
152: 1:      'question': '2',
152: 1:      'valid': true
152: 1:    },
152: 1:    {
152: 1:      'answer': '22',
152: 1:      'question': '3',
152: 1:      'valid': true
152: 1:    },
152: 1:    {
152: 1:      'answer': '70',
152: 1:      'question': '4',
152: 1:      'valid': true
152: 1:    }
152: 1:  ],
152: 1:  'info': [
152: 1:    '✅f(1) = 0',
152: 1:    '✅f(2) = 4',
152: 1:    '✅f(3) = 22',
152: 1:    '✅f(4) = 70',
152: 1:    '❌f(5) = ??? != 170'
152: 1:  ],
152: 1:  'level': 5,
152: 1:  'nextQuestion': '5',
152: 1:  'questions': [
152: 1:    '1',
152: 1:    '2',
152: 1:    '3',
152: 1:    '4',
152: 1:    '5'
152: 1:  ]
152: 1:}
152: 1:Scores: 3738
152: 1:Answer: message('['0', '4', '22', '70', '170']')
152: 1:Fire Event: PassTest{complexity=9, testCount=25}
------------------------------------------
153: 1:BoardData {
153: 1:  'description': [
153: 1:    'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640.',
153: 1:    'Create a function that calculates the difference between the sum squares and the square of the sum for the natural number i.',
153: 1:    'Write a javascript function.',
153: 1:    'The function should not use a loop.'
153: 1:  ],
153: 1:  'expectedAnswer': '350',
153: 1:  'history': [
153: 1:    {
153: 1:      'answer': '0',
153: 1:      'question': '1',
153: 1:      'valid': true
153: 1:    },
153: 1:    {
153: 1:      'answer': '4',
153: 1:      'question': '2',
153: 1:      'valid': true
153: 1:    },
153: 1:    {
153: 1:      'answer': '22',
153: 1:      'question': '3',
153: 1:      'valid': true
153: 1:    },
153: 1:    {
153: 1:      'answer': '70',
153: 1:      'question': '4',
153: 1:      'valid': true
153: 1:    },
153: 1:    {
153: 1:      'answer': '170',
153: 1:      'question': '5',
153: 1:      'valid': true
153: 1:    }
153: 1:  ],
153: 1:  'info': [
153: 1:    '✅f(1) = 0',
153: 1:    '✅f(2) = 4',
153: 1:    '✅f(3) = 22',
153: 1:    '✅f(4) = 70',
153: 1:    '✅f(5) = 170',
153: 1:    '❌f(6) = ??? != 350'
153: 1:  ],
153: 1:  'level': 5,
153: 1:  'nextQuestion': '6',
153: 1:  'questions': [
153: 1:    '1',
153: 1:    '2',
153: 1:    '3',
153: 1:    '4',
153: 1:    '5',
153: 1:    '6'
153: 1:  ]
153: 1:}
153: 1:Scores: 3741
153: 1:Answer: message('['0', '4', '22', '70', '170', '350']')
153: 1:Fire Event: PassTest{complexity=9, testCount=25}
------------------------------------------
154: 1:BoardData {
154: 1:  'description': [
154: 1:    'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640.',
154: 1:    'Create a function that calculates the difference between the sum squares and the square of the sum for the natural number i.',
154: 1:    'Write a javascript function.',
154: 1:    'The function should not use a loop.'
154: 1:  ],
154: 1:  'expectedAnswer': '644',
154: 1:  'history': [
154: 1:    {
154: 1:      'answer': '0',
154: 1:      'question': '1',
154: 1:      'valid': true
154: 1:    },
154: 1:    {
154: 1:      'answer': '4',
154: 1:      'question': '2',
154: 1:      'valid': true
154: 1:    },
154: 1:    {
154: 1:      'answer': '22',
154: 1:      'question': '3',
154: 1:      'valid': true
154: 1:    },
154: 1:    {
154: 1:      'answer': '70',
154: 1:      'question': '4',
154: 1:      'valid': true
154: 1:    },
154: 1:    {
154: 1:      'answer': '170',
154: 1:      'question': '5',
154: 1:      'valid': true
154: 1:    },
154: 1:    {
154: 1:      'answer': '350',
154: 1:      'question': '6',
154: 1:      'valid': true
154: 1:    }
154: 1:  ],
154: 1:  'info': [
154: 1:    '✅f(1) = 0',
154: 1:    '✅f(2) = 4',
154: 1:    '✅f(3) = 22',
154: 1:    '✅f(4) = 70',
154: 1:    '✅f(5) = 170',
154: 1:    '✅f(6) = 350',
154: 1:    '❌f(7) = ??? != 644'
154: 1:  ],
154: 1:  'level': 5,
154: 1:  'nextQuestion': '7',
154: 1:  'questions': [
154: 1:    '1',
154: 1:    '2',
154: 1:    '3',
154: 1:    '4',
154: 1:    '5',
154: 1:    '6',
154: 1:    '7'
154: 1:  ]
154: 1:}
154: 1:Scores: 3744
154: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644']')
154: 1:Fire Event: PassTest{complexity=9, testCount=25}
------------------------------------------
155: 1:BoardData {
155: 1:  'description': [
155: 1:    'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640.',
155: 1:    'Create a function that calculates the difference between the sum squares and the square of the sum for the natural number i.',
155: 1:    'Write a javascript function.',
155: 1:    'The function should not use a loop.'
155: 1:  ],
155: 1:  'expectedAnswer': '1092',
155: 1:  'history': [
155: 1:    {
155: 1:      'answer': '0',
155: 1:      'question': '1',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': '4',
155: 1:      'question': '2',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': '22',
155: 1:      'question': '3',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': '70',
155: 1:      'question': '4',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': '170',
155: 1:      'question': '5',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': '350',
155: 1:      'question': '6',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': '644',
155: 1:      'question': '7',
155: 1:      'valid': true
155: 1:    }
155: 1:  ],
155: 1:  'info': [
155: 1:    '✅f(1) = 0',
155: 1:    '✅f(2) = 4',
155: 1:    '✅f(3) = 22',
155: 1:    '✅f(4) = 70',
155: 1:    '✅f(5) = 170',
155: 1:    '✅f(6) = 350',
155: 1:    '✅f(7) = 644',
155: 1:    '❌f(8) = ??? != 1092'
155: 1:  ],
155: 1:  'level': 5,
155: 1:  'nextQuestion': '8',
155: 1:  'questions': [
155: 1:    '1',
155: 1:    '2',
155: 1:    '3',
155: 1:    '4',
155: 1:    '5',
155: 1:    '6',
155: 1:    '7',
155: 1:    '8'
155: 1:  ]
155: 1:}
155: 1:Scores: 3747
155: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092']')
155: 1:Fire Event: PassTest{complexity=9, testCount=25}
------------------------------------------
156: 1:BoardData {
156: 1:  'description': [
156: 1:    'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640.',
156: 1:    'Create a function that calculates the difference between the sum squares and the square of the sum for the natural number i.',
156: 1:    'Write a javascript function.',
156: 1:    'The function should not use a loop.'
156: 1:  ],
156: 1:  'expectedAnswer': '1740',
156: 1:  'history': [
156: 1:    {
156: 1:      'answer': '0',
156: 1:      'question': '1',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': '4',
156: 1:      'question': '2',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': '22',
156: 1:      'question': '3',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': '70',
156: 1:      'question': '4',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': '170',
156: 1:      'question': '5',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': '350',
156: 1:      'question': '6',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': '644',
156: 1:      'question': '7',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': '1092',
156: 1:      'question': '8',
156: 1:      'valid': true
156: 1:    }
156: 1:  ],
156: 1:  'info': [
156: 1:    '✅f(1) = 0',
156: 1:    '✅f(2) = 4',
156: 1:    '✅f(3) = 22',
156: 1:    '✅f(4) = 70',
156: 1:    '✅f(5) = 170',
156: 1:    '✅f(6) = 350',
156: 1:    '✅f(7) = 644',
156: 1:    '✅f(8) = 1092',
156: 1:    '❌f(9) = ??? != 1740'
156: 1:  ],
156: 1:  'level': 5,
156: 1:  'nextQuestion': '9',
156: 1:  'questions': [
156: 1:    '1',
156: 1:    '2',
156: 1:    '3',
156: 1:    '4',
156: 1:    '5',
156: 1:    '6',
156: 1:    '7',
156: 1:    '8',
156: 1:    '9'
156: 1:  ]
156: 1:}
156: 1:Scores: 3750
156: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740']')
156: 1:Fire Event: PassTest{complexity=9, testCount=25}
------------------------------------------
157: 1:BoardData {
157: 1:  'description': [
157: 1:    'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640.',
157: 1:    'Create a function that calculates the difference between the sum squares and the square of the sum for the natural number i.',
157: 1:    'Write a javascript function.',
157: 1:    'The function should not use a loop.'
157: 1:  ],
157: 1:  'expectedAnswer': '2640',
157: 1:  'history': [
157: 1:    {
157: 1:      'answer': '0',
157: 1:      'question': '1',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': '4',
157: 1:      'question': '2',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': '22',
157: 1:      'question': '3',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': '70',
157: 1:      'question': '4',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': '170',
157: 1:      'question': '5',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': '350',
157: 1:      'question': '6',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': '644',
157: 1:      'question': '7',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': '1092',
157: 1:      'question': '8',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': '1740',
157: 1:      'question': '9',
157: 1:      'valid': true
157: 1:    }
157: 1:  ],
157: 1:  'info': [
157: 1:    '✅f(1) = 0',
157: 1:    '✅f(2) = 4',
157: 1:    '✅f(3) = 22',
157: 1:    '✅f(4) = 70',
157: 1:    '✅f(5) = 170',
157: 1:    '✅f(6) = 350',
157: 1:    '✅f(7) = 644',
157: 1:    '✅f(8) = 1092',
157: 1:    '✅f(9) = 1740',
157: 1:    '❌f(10) = ??? != 2640'
157: 1:  ],
157: 1:  'level': 5,
157: 1:  'nextQuestion': '10',
157: 1:  'questions': [
157: 1:    '1',
157: 1:    '2',
157: 1:    '3',
157: 1:    '4',
157: 1:    '5',
157: 1:    '6',
157: 1:    '7',
157: 1:    '8',
157: 1:    '9',
157: 1:    '10'
157: 1:  ]
157: 1:}
157: 1:Scores: 3753
157: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640']')
157: 1:Fire Event: PassTest{complexity=9, testCount=25}
------------------------------------------
158: 1:BoardData {
158: 1:  'description': [
158: 1:    'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640.',
158: 1:    'Create a function that calculates the difference between the sum squares and the square of the sum for the natural number i.',
158: 1:    'Write a javascript function.',
158: 1:    'The function should not use a loop.'
158: 1:  ],
158: 1:  'expectedAnswer': '3850',
158: 1:  'history': [
158: 1:    {
158: 1:      'answer': '0',
158: 1:      'question': '1',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '4',
158: 1:      'question': '2',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '22',
158: 1:      'question': '3',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '70',
158: 1:      'question': '4',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '170',
158: 1:      'question': '5',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '350',
158: 1:      'question': '6',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '644',
158: 1:      'question': '7',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '1092',
158: 1:      'question': '8',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '1740',
158: 1:      'question': '9',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': '2640',
158: 1:      'question': '10',
158: 1:      'valid': true
158: 1:    }
158: 1:  ],
158: 1:  'info': [
158: 1:    '✅f(1) = 0',
158: 1:    '✅f(2) = 4',
158: 1:    '✅f(3) = 22',
158: 1:    '✅f(4) = 70',
158: 1:    '✅f(5) = 170',
158: 1:    '✅f(6) = 350',
158: 1:    '✅f(7) = 644',
158: 1:    '✅f(8) = 1092',
158: 1:    '✅f(9) = 1740',
158: 1:    '✅f(10) = 2640',
158: 1:    '❌f(11) = ??? != 3850'
158: 1:  ],
158: 1:  'level': 5,
158: 1:  'nextQuestion': '11',
158: 1:  'questions': [
158: 1:    '1',
158: 1:    '2',
158: 1:    '3',
158: 1:    '4',
158: 1:    '5',
158: 1:    '6',
158: 1:    '7',
158: 1:    '8',
158: 1:    '9',
158: 1:    '10',
158: 1:    '11'
158: 1:  ]
158: 1:}
158: 1:Scores: 3756
158: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850']')
158: 1:Fire Event: PassTest{complexity=9, testCount=25}
------------------------------------------
159: 1:BoardData {
159: 1:  'description': [
159: 1:    'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640.',
159: 1:    'Create a function that calculates the difference between the sum squares and the square of the sum for the natural number i.',
159: 1:    'Write a javascript function.',
159: 1:    'The function should not use a loop.'
159: 1:  ],
159: 1:  'expectedAnswer': '5434',
159: 1:  'history': [
159: 1:    {
159: 1:      'answer': '0',
159: 1:      'question': '1',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '4',
159: 1:      'question': '2',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '22',
159: 1:      'question': '3',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '70',
159: 1:      'question': '4',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '170',
159: 1:      'question': '5',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '350',
159: 1:      'question': '6',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '644',
159: 1:      'question': '7',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '1092',
159: 1:      'question': '8',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '1740',
159: 1:      'question': '9',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '2640',
159: 1:      'question': '10',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': '3850',
159: 1:      'question': '11',
159: 1:      'valid': true
159: 1:    }
159: 1:  ],
159: 1:  'info': [
159: 1:    '✅f(1) = 0',
159: 1:    '✅f(2) = 4',
159: 1:    '✅f(3) = 22',
159: 1:    '✅f(4) = 70',
159: 1:    '✅f(5) = 170',
159: 1:    '✅f(6) = 350',
159: 1:    '✅f(7) = 644',
159: 1:    '✅f(8) = 1092',
159: 1:    '✅f(9) = 1740',
159: 1:    '✅f(10) = 2640',
159: 1:    '✅f(11) = 3850',
159: 1:    '❌f(12) = ??? != 5434'
159: 1:  ],
159: 1:  'level': 5,
159: 1:  'nextQuestion': '12',
159: 1:  'questions': [
159: 1:    '1',
159: 1:    '2',
159: 1:    '3',
159: 1:    '4',
159: 1:    '5',
159: 1:    '6',
159: 1:    '7',
159: 1:    '8',
159: 1:    '9',
159: 1:    '10',
159: 1:    '11',
159: 1:    '12'
159: 1:  ]
159: 1:}
159: 1:Scores: 3759
159: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434']')
159: 1:Fire Event: PassTest{complexity=9, testCount=25}
------------------------------------------
160: 1:BoardData {
160: 1:  'description': [
160: 1:    'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640.',
160: 1:    'Create a function that calculates the difference between the sum squares and the square of the sum for the natural number i.',
160: 1:    'Write a javascript function.',
160: 1:    'The function should not use a loop.'
160: 1:  ],
160: 1:  'expectedAnswer': '7462',
160: 1:  'history': [
160: 1:    {
160: 1:      'answer': '0',
160: 1:      'question': '1',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '4',
160: 1:      'question': '2',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '22',
160: 1:      'question': '3',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '70',
160: 1:      'question': '4',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '170',
160: 1:      'question': '5',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '350',
160: 1:      'question': '6',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '644',
160: 1:      'question': '7',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '1092',
160: 1:      'question': '8',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '1740',
160: 1:      'question': '9',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '2640',
160: 1:      'question': '10',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '3850',
160: 1:      'question': '11',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': '5434',
160: 1:      'question': '12',
160: 1:      'valid': true
160: 1:    }
160: 1:  ],
160: 1:  'info': [
160: 1:    '✅f(1) = 0',
160: 1:    '✅f(2) = 4',
160: 1:    '✅f(3) = 22',
160: 1:    '✅f(4) = 70',
160: 1:    '✅f(5) = 170',
160: 1:    '✅f(6) = 350',
160: 1:    '✅f(7) = 644',
160: 1:    '✅f(8) = 1092',
160: 1:    '✅f(9) = 1740',
160: 1:    '✅f(10) = 2640',
160: 1:    '✅f(11) = 3850',
160: 1:    '✅f(12) = 5434',
160: 1:    '❌f(13) = ??? != 7462'
160: 1:  ],
160: 1:  'level': 5,
160: 1:  'nextQuestion': '13',
160: 1:  'questions': [
160: 1:    '1',
160: 1:    '2',
160: 1:    '3',
160: 1:    '4',
160: 1:    '5',
160: 1:    '6',
160: 1:    '7',
160: 1:    '8',
160: 1:    '9',
160: 1:    '10',
160: 1:    '11',
160: 1:    '12',
160: 1:    '13'
160: 1:  ]
160: 1:}
160: 1:Scores: 3762
160: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462']')
160: 1:Fire Event: PassTest{complexity=9, testCount=25}
------------------------------------------
161: 1:BoardData {
161: 1:  'description': [
161: 1:    'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640.',
161: 1:    'Create a function that calculates the difference between the sum squares and the square of the sum for the natural number i.',
161: 1:    'Write a javascript function.',
161: 1:    'The function should not use a loop.'
161: 1:  ],
161: 1:  'expectedAnswer': '10010',
161: 1:  'history': [
161: 1:    {
161: 1:      'answer': '0',
161: 1:      'question': '1',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '4',
161: 1:      'question': '2',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '22',
161: 1:      'question': '3',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '70',
161: 1:      'question': '4',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '170',
161: 1:      'question': '5',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '350',
161: 1:      'question': '6',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '644',
161: 1:      'question': '7',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '1092',
161: 1:      'question': '8',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '1740',
161: 1:      'question': '9',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '2640',
161: 1:      'question': '10',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '3850',
161: 1:      'question': '11',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '5434',
161: 1:      'question': '12',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': '7462',
161: 1:      'question': '13',
161: 1:      'valid': true
161: 1:    }
161: 1:  ],
161: 1:  'info': [
161: 1:    '✅f(1) = 0',
161: 1:    '✅f(2) = 4',
161: 1:    '✅f(3) = 22',
161: 1:    '✅f(4) = 70',
161: 1:    '✅f(5) = 170',
161: 1:    '✅f(6) = 350',
161: 1:    '✅f(7) = 644',
161: 1:    '✅f(8) = 1092',
161: 1:    '✅f(9) = 1740',
161: 1:    '✅f(10) = 2640',
161: 1:    '✅f(11) = 3850',
161: 1:    '✅f(12) = 5434',
161: 1:    '✅f(13) = 7462',
161: 1:    '❌f(14) = ??? != 10010'
161: 1:  ],
161: 1:  'level': 5,
161: 1:  'nextQuestion': '14',
161: 1:  'questions': [
161: 1:    '1',
161: 1:    '2',
161: 1:    '3',
161: 1:    '4',
161: 1:    '5',
161: 1:    '6',
161: 1:    '7',
161: 1:    '8',
161: 1:    '9',
161: 1:    '10',
161: 1:    '11',
161: 1:    '12',
161: 1:    '13',
161: 1:    '14'
161: 1:  ]
161: 1:}
161: 1:Scores: 3765
161: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010']')
161: 1:Fire Event: PassTest{complexity=9, testCount=25}
------------------------------------------
162: 1:BoardData {
162: 1:  'description': [
162: 1:    'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640.',
162: 1:    'Create a function that calculates the difference between the sum squares and the square of the sum for the natural number i.',
162: 1:    'Write a javascript function.',
162: 1:    'The function should not use a loop.'
162: 1:  ],
162: 1:  'expectedAnswer': '13160',
162: 1:  'history': [
162: 1:    {
162: 1:      'answer': '0',
162: 1:      'question': '1',
162: 1:      'valid': true
162: 1:    },
162: 1:    {
162: 1:      'answer': '4',
162: 1:      'question': '2',
162: 1:      'valid': true
162: 1:    },
162: 1:    {
162: 1:      'answer': '22',
162: 1:      'question': '3',
162: 1:      'valid': true
162: 1:    },
162: 1:    {
162: 1:      'answer': '70',
162: 1:      'question': '4',
162: 1:      'valid': true
162: 1:    },
162: 1:    {
162: 1:      'answer': '170',
162: 1:      'question': '5',
162: 1:      'valid': true
162: 1:    },
162: 1:    {
162: 1:      'answer': '350',
162: 1:      'question': '6',
162: 1:      'valid': true
162: 1:    },
162: 1:    {
162: 1:      'answer': '644',
162: 1:      'question': '7',
162: 1:      'valid': true
162: 1:    },
162: 1:    {
162: 1:      'answer': '1092',
162: 1:      'question': '8',
162: 1:      'valid': true
162: 1:    },
162: 1:    {
162: 1:      'answer': '1740',
162: 1:      'question': '9',
162: 1:      'valid': true
162: 1:    },
162: 1:    {
162: 1:      'answer': '2640',
162: 1:      'question': '10',
162: 1:      'valid': true
162: 1:    },
162: 1:    {
162: 1:      'answer': '3850',
162: 1:      'question': '11',
162: 1:      'valid': true
162: 1:    },
162: 1:    {
162: 1:      'answer': '5434',
162: 1:      'question': '12',
162: 1:      'valid': true
162: 1:    },
162: 1:    {
162: 1:      'answer': '7462',
162: 1:      'question': '13',
162: 1:      'valid': true
162: 1:    },
162: 1:    {
162: 1:      'answer': '10010',
162: 1:      'question': '14',
162: 1:      'valid': true
162: 1:    }
162: 1:  ],
162: 1:  'info': [
162: 1:    '✅f(1) = 0',
162: 1:    '✅f(2) = 4',
162: 1:    '✅f(3) = 22',
162: 1:    '✅f(4) = 70',
162: 1:    '✅f(5) = 170',
162: 1:    '✅f(6) = 350',
162: 1:    '✅f(7) = 644',
162: 1:    '✅f(8) = 1092',
162: 1:    '✅f(9) = 1740',
162: 1:    '✅f(10) = 2640',
162: 1:    '✅f(11) = 3850',
162: 1:    '✅f(12) = 5434',
162: 1:    '✅f(13) = 7462',
162: 1:    '✅f(14) = 10010',
162: 1:    '❌f(15) = ??? != 13160'
162: 1:  ],
162: 1:  'level': 5,
162: 1:  'nextQuestion': '15',
162: 1:  'questions': [
162: 1:    '1',
162: 1:    '2',
162: 1:    '3',
162: 1:    '4',
162: 1:    '5',
162: 1:    '6',
162: 1:    '7',
162: 1:    '8',
162: 1:    '9',
162: 1:    '10',
162: 1:    '11',
162: 1:    '12',
162: 1:    '13',
162: 1:    '14',
162: 1:    '15'
162: 1:  ]
162: 1:}
162: 1:Scores: 3768
162: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160']')
162: 1:Fire Event: PassTest{complexity=9, testCount=25}
------------------------------------------
163: 1:BoardData {
163: 1:  'description': [
163: 1:    'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640.',
163: 1:    'Create a function that calculates the difference between the sum squares and the square of the sum for the natural number i.',
163: 1:    'Write a javascript function.',
163: 1:    'The function should not use a loop.'
163: 1:  ],
163: 1:  'expectedAnswer': '17000',
163: 1:  'history': [
163: 1:    {
163: 1:      'answer': '0',
163: 1:      'question': '1',
163: 1:      'valid': true
163: 1:    },
163: 1:    {
163: 1:      'answer': '4',
163: 1:      'question': '2',
163: 1:      'valid': true
163: 1:    },
163: 1:    {
163: 1:      'answer': '22',
163: 1:      'question': '3',
163: 1:      'valid': true
163: 1:    },
163: 1:    {
163: 1:      'answer': '70',
163: 1:      'question': '4',
163: 1:      'valid': true
163: 1:    },
163: 1:    {
163: 1:      'answer': '170',
163: 1:      'question': '5',
163: 1:      'valid': true
163: 1:    },
163: 1:    {
163: 1:      'answer': '350',
163: 1:      'question': '6',
163: 1:      'valid': true
163: 1:    },
163: 1:    {
163: 1:      'answer': '644',
163: 1:      'question': '7',
163: 1:      'valid': true
163: 1:    },
163: 1:    {
163: 1:      'answer': '1092',
163: 1:      'question': '8',
163: 1:      'valid': true
163: 1:    },
163: 1:    {
163: 1:      'answer': '1740',
163: 1:      'question': '9',
163: 1:      'valid': true
163: 1:    },
163: 1:    {
163: 1:      'answer': '2640',
163: 1:      'question': '10',
163: 1:      'valid': true
163: 1:    },
163: 1:    {
163: 1:      'answer': '3850',
163: 1:      'question': '11',
163: 1:      'valid': true
163: 1:    },
163: 1:    {
163: 1:      'answer': '5434',
163: 1:      'question': '12',
163: 1:      'valid': true
163: 1:    },
163: 1:    {
163: 1:      'answer': '7462',
163: 1:      'question': '13',
163: 1:      'valid': true
163: 1:    },
163: 1:    {
163: 1:      'answer': '10010',
163: 1:      'question': '14',
163: 1:      'valid': true
163: 1:    },
163: 1:    {
163: 1:      'answer': '13160',
163: 1:      'question': '15',
163: 1:      'valid': true
163: 1:    }
163: 1:  ],
163: 1:  'info': [
163: 1:    '✅f(1) = 0',
163: 1:    '✅f(2) = 4',
163: 1:    '✅f(3) = 22',
163: 1:    '✅f(4) = 70',
163: 1:    '✅f(5) = 170',
163: 1:    '✅f(6) = 350',
163: 1:    '✅f(7) = 644',
163: 1:    '✅f(8) = 1092',
163: 1:    '✅f(9) = 1740',
163: 1:    '✅f(10) = 2640',
163: 1:    '✅f(11) = 3850',
163: 1:    '✅f(12) = 5434',
163: 1:    '✅f(13) = 7462',
163: 1:    '✅f(14) = 10010',
163: 1:    '✅f(15) = 13160',
163: 1:    '❌f(16) = ??? != 17000'
163: 1:  ],
163: 1:  'level': 5,
163: 1:  'nextQuestion': '16',
163: 1:  'questions': [
163: 1:    '1',
163: 1:    '2',
163: 1:    '3',
163: 1:    '4',
163: 1:    '5',
163: 1:    '6',
163: 1:    '7',
163: 1:    '8',
163: 1:    '9',
163: 1:    '10',
163: 1:    '11',
163: 1:    '12',
163: 1:    '13',
163: 1:    '14',
163: 1:    '15',
163: 1:    '16'
163: 1:  ]
163: 1:}
163: 1:Scores: 3771
163: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000']')
163: 1:Fire Event: PassTest{complexity=9, testCount=25}
------------------------------------------
164: 1:BoardData {
164: 1:  'description': [
164: 1:    'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640.',
164: 1:    'Create a function that calculates the difference between the sum squares and the square of the sum for the natural number i.',
164: 1:    'Write a javascript function.',
164: 1:    'The function should not use a loop.'
164: 1:  ],
164: 1:  'expectedAnswer': '21624',
164: 1:  'history': [
164: 1:    {
164: 1:      'answer': '0',
164: 1:      'question': '1',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': '4',
164: 1:      'question': '2',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': '22',
164: 1:      'question': '3',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': '70',
164: 1:      'question': '4',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': '170',
164: 1:      'question': '5',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': '350',
164: 1:      'question': '6',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': '644',
164: 1:      'question': '7',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': '1092',
164: 1:      'question': '8',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': '1740',
164: 1:      'question': '9',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': '2640',
164: 1:      'question': '10',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': '3850',
164: 1:      'question': '11',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': '5434',
164: 1:      'question': '12',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': '7462',
164: 1:      'question': '13',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': '10010',
164: 1:      'question': '14',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': '13160',
164: 1:      'question': '15',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': '17000',
164: 1:      'question': '16',
164: 1:      'valid': true
164: 1:    }
164: 1:  ],
164: 1:  'info': [
164: 1:    '✅f(1) = 0',
164: 1:    '✅f(2) = 4',
164: 1:    '✅f(3) = 22',
164: 1:    '✅f(4) = 70',
164: 1:    '✅f(5) = 170',
164: 1:    '✅f(6) = 350',
164: 1:    '✅f(7) = 644',
164: 1:    '✅f(8) = 1092',
164: 1:    '✅f(9) = 1740',
164: 1:    '✅f(10) = 2640',
164: 1:    '✅f(11) = 3850',
164: 1:    '✅f(12) = 5434',
164: 1:    '✅f(13) = 7462',
164: 1:    '✅f(14) = 10010',
164: 1:    '✅f(15) = 13160',
164: 1:    '✅f(16) = 17000',
164: 1:    '❌f(17) = ??? != 21624'
164: 1:  ],
164: 1:  'level': 5,
164: 1:  'nextQuestion': '17',
164: 1:  'questions': [
164: 1:    '1',
164: 1:    '2',
164: 1:    '3',
164: 1:    '4',
164: 1:    '5',
164: 1:    '6',
164: 1:    '7',
164: 1:    '8',
164: 1:    '9',
164: 1:    '10',
164: 1:    '11',
164: 1:    '12',
164: 1:    '13',
164: 1:    '14',
164: 1:    '15',
164: 1:    '16',
164: 1:    '17'
164: 1:  ]
164: 1:}
164: 1:Scores: 3774
164: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000', '21624']')
164: 1:Fire Event: PassTest{complexity=9, testCount=25}
------------------------------------------
165: 1:BoardData {
165: 1:  'description': [
165: 1:    'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640.',
165: 1:    'Create a function that calculates the difference between the sum squares and the square of the sum for the natural number i.',
165: 1:    'Write a javascript function.',
165: 1:    'The function should not use a loop.'
165: 1:  ],
165: 1:  'expectedAnswer': '27132',
165: 1:  'history': [
165: 1:    {
165: 1:      'answer': '0',
165: 1:      'question': '1',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': '4',
165: 1:      'question': '2',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': '22',
165: 1:      'question': '3',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': '70',
165: 1:      'question': '4',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': '170',
165: 1:      'question': '5',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': '350',
165: 1:      'question': '6',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': '644',
165: 1:      'question': '7',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': '1092',
165: 1:      'question': '8',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': '1740',
165: 1:      'question': '9',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': '2640',
165: 1:      'question': '10',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': '3850',
165: 1:      'question': '11',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': '5434',
165: 1:      'question': '12',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': '7462',
165: 1:      'question': '13',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': '10010',
165: 1:      'question': '14',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': '13160',
165: 1:      'question': '15',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': '17000',
165: 1:      'question': '16',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': '21624',
165: 1:      'question': '17',
165: 1:      'valid': true
165: 1:    }
165: 1:  ],
165: 1:  'info': [
165: 1:    '✅f(1) = 0',
165: 1:    '✅f(2) = 4',
165: 1:    '✅f(3) = 22',
165: 1:    '✅f(4) = 70',
165: 1:    '✅f(5) = 170',
165: 1:    '✅f(6) = 350',
165: 1:    '✅f(7) = 644',
165: 1:    '✅f(8) = 1092',
165: 1:    '✅f(9) = 1740',
165: 1:    '✅f(10) = 2640',
165: 1:    '✅f(11) = 3850',
165: 1:    '✅f(12) = 5434',
165: 1:    '✅f(13) = 7462',
165: 1:    '✅f(14) = 10010',
165: 1:    '✅f(15) = 13160',
165: 1:    '✅f(16) = 17000',
165: 1:    '✅f(17) = 21624',
165: 1:    '❌f(18) = ??? != 27132'
165: 1:  ],
165: 1:  'level': 5,
165: 1:  'nextQuestion': '18',
165: 1:  'questions': [
165: 1:    '1',
165: 1:    '2',
165: 1:    '3',
165: 1:    '4',
165: 1:    '5',
165: 1:    '6',
165: 1:    '7',
165: 1:    '8',
165: 1:    '9',
165: 1:    '10',
165: 1:    '11',
165: 1:    '12',
165: 1:    '13',
165: 1:    '14',
165: 1:    '15',
165: 1:    '16',
165: 1:    '17',
165: 1:    '18'
165: 1:  ]
165: 1:}
165: 1:Scores: 3777
165: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000', '21624', '27132']')
165: 1:Fire Event: PassTest{complexity=9, testCount=25}
------------------------------------------
166: 1:BoardData {
166: 1:  'description': [
166: 1:    'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640.',
166: 1:    'Create a function that calculates the difference between the sum squares and the square of the sum for the natural number i.',
166: 1:    'Write a javascript function.',
166: 1:    'The function should not use a loop.'
166: 1:  ],
166: 1:  'expectedAnswer': '33630',
166: 1:  'history': [
166: 1:    {
166: 1:      'answer': '0',
166: 1:      'question': '1',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': '4',
166: 1:      'question': '2',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': '22',
166: 1:      'question': '3',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': '70',
166: 1:      'question': '4',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': '170',
166: 1:      'question': '5',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': '350',
166: 1:      'question': '6',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': '644',
166: 1:      'question': '7',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': '1092',
166: 1:      'question': '8',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': '1740',
166: 1:      'question': '9',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': '2640',
166: 1:      'question': '10',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': '3850',
166: 1:      'question': '11',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': '5434',
166: 1:      'question': '12',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': '7462',
166: 1:      'question': '13',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': '10010',
166: 1:      'question': '14',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': '13160',
166: 1:      'question': '15',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': '17000',
166: 1:      'question': '16',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': '21624',
166: 1:      'question': '17',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': '27132',
166: 1:      'question': '18',
166: 1:      'valid': true
166: 1:    }
166: 1:  ],
166: 1:  'info': [
166: 1:    '✅f(1) = 0',
166: 1:    '✅f(2) = 4',
166: 1:    '✅f(3) = 22',
166: 1:    '✅f(4) = 70',
166: 1:    '✅f(5) = 170',
166: 1:    '✅f(6) = 350',
166: 1:    '✅f(7) = 644',
166: 1:    '✅f(8) = 1092',
166: 1:    '✅f(9) = 1740',
166: 1:    '✅f(10) = 2640',
166: 1:    '✅f(11) = 3850',
166: 1:    '✅f(12) = 5434',
166: 1:    '✅f(13) = 7462',
166: 1:    '✅f(14) = 10010',
166: 1:    '✅f(15) = 13160',
166: 1:    '✅f(16) = 17000',
166: 1:    '✅f(17) = 21624',
166: 1:    '✅f(18) = 27132',
166: 1:    '❌f(19) = ??? != 33630'
166: 1:  ],
166: 1:  'level': 5,
166: 1:  'nextQuestion': '19',
166: 1:  'questions': [
166: 1:    '1',
166: 1:    '2',
166: 1:    '3',
166: 1:    '4',
166: 1:    '5',
166: 1:    '6',
166: 1:    '7',
166: 1:    '8',
166: 1:    '9',
166: 1:    '10',
166: 1:    '11',
166: 1:    '12',
166: 1:    '13',
166: 1:    '14',
166: 1:    '15',
166: 1:    '16',
166: 1:    '17',
166: 1:    '18',
166: 1:    '19'
166: 1:  ]
166: 1:}
166: 1:Scores: 3780
166: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000', '21624', '27132', '33630']')
166: 1:Fire Event: PassTest{complexity=9, testCount=25}
------------------------------------------
167: 1:BoardData {
167: 1:  'description': [
167: 1:    'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640.',
167: 1:    'Create a function that calculates the difference between the sum squares and the square of the sum for the natural number i.',
167: 1:    'Write a javascript function.',
167: 1:    'The function should not use a loop.'
167: 1:  ],
167: 1:  'expectedAnswer': '41230',
167: 1:  'history': [
167: 1:    {
167: 1:      'answer': '0',
167: 1:      'question': '1',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': '4',
167: 1:      'question': '2',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': '22',
167: 1:      'question': '3',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': '70',
167: 1:      'question': '4',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': '170',
167: 1:      'question': '5',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': '350',
167: 1:      'question': '6',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': '644',
167: 1:      'question': '7',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': '1092',
167: 1:      'question': '8',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': '1740',
167: 1:      'question': '9',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': '2640',
167: 1:      'question': '10',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': '3850',
167: 1:      'question': '11',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': '5434',
167: 1:      'question': '12',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': '7462',
167: 1:      'question': '13',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': '10010',
167: 1:      'question': '14',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': '13160',
167: 1:      'question': '15',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': '17000',
167: 1:      'question': '16',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': '21624',
167: 1:      'question': '17',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': '27132',
167: 1:      'question': '18',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': '33630',
167: 1:      'question': '19',
167: 1:      'valid': true
167: 1:    }
167: 1:  ],
167: 1:  'info': [
167: 1:    '✅f(1) = 0',
167: 1:    '✅f(2) = 4',
167: 1:    '✅f(3) = 22',
167: 1:    '✅f(4) = 70',
167: 1:    '✅f(5) = 170',
167: 1:    '✅f(6) = 350',
167: 1:    '✅f(7) = 644',
167: 1:    '✅f(8) = 1092',
167: 1:    '✅f(9) = 1740',
167: 1:    '✅f(10) = 2640',
167: 1:    '✅f(11) = 3850',
167: 1:    '✅f(12) = 5434',
167: 1:    '✅f(13) = 7462',
167: 1:    '✅f(14) = 10010',
167: 1:    '✅f(15) = 13160',
167: 1:    '✅f(16) = 17000',
167: 1:    '✅f(17) = 21624',
167: 1:    '✅f(18) = 27132',
167: 1:    '✅f(19) = 33630',
167: 1:    '❌f(20) = ??? != 41230'
167: 1:  ],
167: 1:  'level': 5,
167: 1:  'nextQuestion': '20',
167: 1:  'questions': [
167: 1:    '1',
167: 1:    '2',
167: 1:    '3',
167: 1:    '4',
167: 1:    '5',
167: 1:    '6',
167: 1:    '7',
167: 1:    '8',
167: 1:    '9',
167: 1:    '10',
167: 1:    '11',
167: 1:    '12',
167: 1:    '13',
167: 1:    '14',
167: 1:    '15',
167: 1:    '16',
167: 1:    '17',
167: 1:    '18',
167: 1:    '19',
167: 1:    '20'
167: 1:  ]
167: 1:}
167: 1:Scores: 3783
167: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000', '21624', '27132', '33630', '41230']')
167: 1:Fire Event: PassTest{complexity=9, testCount=25}
------------------------------------------
168: 1:BoardData {
168: 1:  'description': [
168: 1:    'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640.',
168: 1:    'Create a function that calculates the difference between the sum squares and the square of the sum for the natural number i.',
168: 1:    'Write a javascript function.',
168: 1:    'The function should not use a loop.'
168: 1:  ],
168: 1:  'expectedAnswer': '50050',
168: 1:  'history': [
168: 1:    {
168: 1:      'answer': '0',
168: 1:      'question': '1',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': '4',
168: 1:      'question': '2',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': '22',
168: 1:      'question': '3',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': '70',
168: 1:      'question': '4',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': '170',
168: 1:      'question': '5',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': '350',
168: 1:      'question': '6',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': '644',
168: 1:      'question': '7',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': '1092',
168: 1:      'question': '8',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': '1740',
168: 1:      'question': '9',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': '2640',
168: 1:      'question': '10',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': '3850',
168: 1:      'question': '11',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': '5434',
168: 1:      'question': '12',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': '7462',
168: 1:      'question': '13',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': '10010',
168: 1:      'question': '14',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': '13160',
168: 1:      'question': '15',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': '17000',
168: 1:      'question': '16',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': '21624',
168: 1:      'question': '17',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': '27132',
168: 1:      'question': '18',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': '33630',
168: 1:      'question': '19',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': '41230',
168: 1:      'question': '20',
168: 1:      'valid': true
168: 1:    }
168: 1:  ],
168: 1:  'info': [
168: 1:    '✅f(1) = 0',
168: 1:    '✅f(2) = 4',
168: 1:    '✅f(3) = 22',
168: 1:    '✅f(4) = 70',
168: 1:    '✅f(5) = 170',
168: 1:    '✅f(6) = 350',
168: 1:    '✅f(7) = 644',
168: 1:    '✅f(8) = 1092',
168: 1:    '✅f(9) = 1740',
168: 1:    '✅f(10) = 2640',
168: 1:    '✅f(11) = 3850',
168: 1:    '✅f(12) = 5434',
168: 1:    '✅f(13) = 7462',
168: 1:    '✅f(14) = 10010',
168: 1:    '✅f(15) = 13160',
168: 1:    '✅f(16) = 17000',
168: 1:    '✅f(17) = 21624',
168: 1:    '✅f(18) = 27132',
168: 1:    '✅f(19) = 33630',
168: 1:    '✅f(20) = 41230',
168: 1:    '❌f(21) = ??? != 50050'
168: 1:  ],
168: 1:  'level': 5,
168: 1:  'nextQuestion': '21',
168: 1:  'questions': [
168: 1:    '1',
168: 1:    '2',
168: 1:    '3',
168: 1:    '4',
168: 1:    '5',
168: 1:    '6',
168: 1:    '7',
168: 1:    '8',
168: 1:    '9',
168: 1:    '10',
168: 1:    '11',
168: 1:    '12',
168: 1:    '13',
168: 1:    '14',
168: 1:    '15',
168: 1:    '16',
168: 1:    '17',
168: 1:    '18',
168: 1:    '19',
168: 1:    '20',
168: 1:    '21'
168: 1:  ]
168: 1:}
168: 1:Scores: 3786
168: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000', '21624', '27132', '33630', '41230', '50050']')
168: 1:Fire Event: PassTest{complexity=9, testCount=25}
------------------------------------------
169: 1:BoardData {
169: 1:  'description': [
169: 1:    'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640.',
169: 1:    'Create a function that calculates the difference between the sum squares and the square of the sum for the natural number i.',
169: 1:    'Write a javascript function.',
169: 1:    'The function should not use a loop.'
169: 1:  ],
169: 1:  'expectedAnswer': '60214',
169: 1:  'history': [
169: 1:    {
169: 1:      'answer': '0',
169: 1:      'question': '1',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': '4',
169: 1:      'question': '2',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': '22',
169: 1:      'question': '3',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': '70',
169: 1:      'question': '4',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': '170',
169: 1:      'question': '5',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': '350',
169: 1:      'question': '6',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': '644',
169: 1:      'question': '7',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': '1092',
169: 1:      'question': '8',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': '1740',
169: 1:      'question': '9',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': '2640',
169: 1:      'question': '10',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': '3850',
169: 1:      'question': '11',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': '5434',
169: 1:      'question': '12',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': '7462',
169: 1:      'question': '13',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': '10010',
169: 1:      'question': '14',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': '13160',
169: 1:      'question': '15',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': '17000',
169: 1:      'question': '16',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': '21624',
169: 1:      'question': '17',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': '27132',
169: 1:      'question': '18',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': '33630',
169: 1:      'question': '19',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': '41230',
169: 1:      'question': '20',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': '50050',
169: 1:      'question': '21',
169: 1:      'valid': true
169: 1:    }
169: 1:  ],
169: 1:  'info': [
169: 1:    '✅f(1) = 0',
169: 1:    '✅f(2) = 4',
169: 1:    '✅f(3) = 22',
169: 1:    '✅f(4) = 70',
169: 1:    '✅f(5) = 170',
169: 1:    '✅f(6) = 350',
169: 1:    '✅f(7) = 644',
169: 1:    '✅f(8) = 1092',
169: 1:    '✅f(9) = 1740',
169: 1:    '✅f(10) = 2640',
169: 1:    '✅f(11) = 3850',
169: 1:    '✅f(12) = 5434',
169: 1:    '✅f(13) = 7462',
169: 1:    '✅f(14) = 10010',
169: 1:    '✅f(15) = 13160',
169: 1:    '✅f(16) = 17000',
169: 1:    '✅f(17) = 21624',
169: 1:    '✅f(18) = 27132',
169: 1:    '✅f(19) = 33630',
169: 1:    '✅f(20) = 41230',
169: 1:    '✅f(21) = 50050',
169: 1:    '❌f(22) = ??? != 60214'
169: 1:  ],
169: 1:  'level': 5,
169: 1:  'nextQuestion': '22',
169: 1:  'questions': [
169: 1:    '1',
169: 1:    '2',
169: 1:    '3',
169: 1:    '4',
169: 1:    '5',
169: 1:    '6',
169: 1:    '7',
169: 1:    '8',
169: 1:    '9',
169: 1:    '10',
169: 1:    '11',
169: 1:    '12',
169: 1:    '13',
169: 1:    '14',
169: 1:    '15',
169: 1:    '16',
169: 1:    '17',
169: 1:    '18',
169: 1:    '19',
169: 1:    '20',
169: 1:    '21',
169: 1:    '22'
169: 1:  ]
169: 1:}
169: 1:Scores: 3789
169: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000', '21624', '27132', '33630', '41230', '50050', '60214']')
169: 1:Fire Event: PassTest{complexity=9, testCount=25}
------------------------------------------
170: 1:BoardData {
170: 1:  'description': [
170: 1:    'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640.',
170: 1:    'Create a function that calculates the difference between the sum squares and the square of the sum for the natural number i.',
170: 1:    'Write a javascript function.',
170: 1:    'The function should not use a loop.'
170: 1:  ],
170: 1:  'expectedAnswer': '71852',
170: 1:  'history': [
170: 1:    {
170: 1:      'answer': '0',
170: 1:      'question': '1',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': '4',
170: 1:      'question': '2',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': '22',
170: 1:      'question': '3',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': '70',
170: 1:      'question': '4',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': '170',
170: 1:      'question': '5',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': '350',
170: 1:      'question': '6',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': '644',
170: 1:      'question': '7',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': '1092',
170: 1:      'question': '8',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': '1740',
170: 1:      'question': '9',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': '2640',
170: 1:      'question': '10',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': '3850',
170: 1:      'question': '11',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': '5434',
170: 1:      'question': '12',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': '7462',
170: 1:      'question': '13',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': '10010',
170: 1:      'question': '14',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': '13160',
170: 1:      'question': '15',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': '17000',
170: 1:      'question': '16',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': '21624',
170: 1:      'question': '17',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': '27132',
170: 1:      'question': '18',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': '33630',
170: 1:      'question': '19',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': '41230',
170: 1:      'question': '20',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': '50050',
170: 1:      'question': '21',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': '60214',
170: 1:      'question': '22',
170: 1:      'valid': true
170: 1:    }
170: 1:  ],
170: 1:  'info': [
170: 1:    '✅f(1) = 0',
170: 1:    '✅f(2) = 4',
170: 1:    '✅f(3) = 22',
170: 1:    '✅f(4) = 70',
170: 1:    '✅f(5) = 170',
170: 1:    '✅f(6) = 350',
170: 1:    '✅f(7) = 644',
170: 1:    '✅f(8) = 1092',
170: 1:    '✅f(9) = 1740',
170: 1:    '✅f(10) = 2640',
170: 1:    '✅f(11) = 3850',
170: 1:    '✅f(12) = 5434',
170: 1:    '✅f(13) = 7462',
170: 1:    '✅f(14) = 10010',
170: 1:    '✅f(15) = 13160',
170: 1:    '✅f(16) = 17000',
170: 1:    '✅f(17) = 21624',
170: 1:    '✅f(18) = 27132',
170: 1:    '✅f(19) = 33630',
170: 1:    '✅f(20) = 41230',
170: 1:    '✅f(21) = 50050',
170: 1:    '✅f(22) = 60214',
170: 1:    '❌f(23) = ??? != 71852'
170: 1:  ],
170: 1:  'level': 5,
170: 1:  'nextQuestion': '23',
170: 1:  'questions': [
170: 1:    '1',
170: 1:    '2',
170: 1:    '3',
170: 1:    '4',
170: 1:    '5',
170: 1:    '6',
170: 1:    '7',
170: 1:    '8',
170: 1:    '9',
170: 1:    '10',
170: 1:    '11',
170: 1:    '12',
170: 1:    '13',
170: 1:    '14',
170: 1:    '15',
170: 1:    '16',
170: 1:    '17',
170: 1:    '18',
170: 1:    '19',
170: 1:    '20',
170: 1:    '21',
170: 1:    '22',
170: 1:    '23'
170: 1:  ]
170: 1:}
170: 1:Scores: 3792
170: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000', '21624', '27132', '33630', '41230', '50050', '60214', '71852']')
170: 1:Fire Event: PassTest{complexity=9, testCount=25}
------------------------------------------
171: 1:BoardData {
171: 1:  'description': [
171: 1:    'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640.',
171: 1:    'Create a function that calculates the difference between the sum squares and the square of the sum for the natural number i.',
171: 1:    'Write a javascript function.',
171: 1:    'The function should not use a loop.'
171: 1:  ],
171: 1:  'expectedAnswer': '85100',
171: 1:  'history': [
171: 1:    {
171: 1:      'answer': '0',
171: 1:      'question': '1',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '4',
171: 1:      'question': '2',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '22',
171: 1:      'question': '3',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '70',
171: 1:      'question': '4',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '170',
171: 1:      'question': '5',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '350',
171: 1:      'question': '6',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '644',
171: 1:      'question': '7',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '1092',
171: 1:      'question': '8',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '1740',
171: 1:      'question': '9',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '2640',
171: 1:      'question': '10',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '3850',
171: 1:      'question': '11',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '5434',
171: 1:      'question': '12',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '7462',
171: 1:      'question': '13',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '10010',
171: 1:      'question': '14',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '13160',
171: 1:      'question': '15',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '17000',
171: 1:      'question': '16',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '21624',
171: 1:      'question': '17',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '27132',
171: 1:      'question': '18',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '33630',
171: 1:      'question': '19',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '41230',
171: 1:      'question': '20',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '50050',
171: 1:      'question': '21',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '60214',
171: 1:      'question': '22',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': '71852',
171: 1:      'question': '23',
171: 1:      'valid': true
171: 1:    }
171: 1:  ],
171: 1:  'info': [
171: 1:    '✅f(1) = 0',
171: 1:    '✅f(2) = 4',
171: 1:    '✅f(3) = 22',
171: 1:    '✅f(4) = 70',
171: 1:    '✅f(5) = 170',
171: 1:    '✅f(6) = 350',
171: 1:    '✅f(7) = 644',
171: 1:    '✅f(8) = 1092',
171: 1:    '✅f(9) = 1740',
171: 1:    '✅f(10) = 2640',
171: 1:    '✅f(11) = 3850',
171: 1:    '✅f(12) = 5434',
171: 1:    '✅f(13) = 7462',
171: 1:    '✅f(14) = 10010',
171: 1:    '✅f(15) = 13160',
171: 1:    '✅f(16) = 17000',
171: 1:    '✅f(17) = 21624',
171: 1:    '✅f(18) = 27132',
171: 1:    '✅f(19) = 33630',
171: 1:    '✅f(20) = 41230',
171: 1:    '✅f(21) = 50050',
171: 1:    '✅f(22) = 60214',
171: 1:    '✅f(23) = 71852',
171: 1:    '❌f(24) = ??? != 85100'
171: 1:  ],
171: 1:  'level': 5,
171: 1:  'nextQuestion': '24',
171: 1:  'questions': [
171: 1:    '1',
171: 1:    '2',
171: 1:    '3',
171: 1:    '4',
171: 1:    '5',
171: 1:    '6',
171: 1:    '7',
171: 1:    '8',
171: 1:    '9',
171: 1:    '10',
171: 1:    '11',
171: 1:    '12',
171: 1:    '13',
171: 1:    '14',
171: 1:    '15',
171: 1:    '16',
171: 1:    '17',
171: 1:    '18',
171: 1:    '19',
171: 1:    '20',
171: 1:    '21',
171: 1:    '22',
171: 1:    '23',
171: 1:    '24'
171: 1:  ]
171: 1:}
171: 1:Scores: 3795
171: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000', '21624', '27132', '33630', '41230', '50050', '60214', '71852', '85100']')
171: 1:Fire Event: PassTest{complexity=9, testCount=25}
------------------------------------------
172: 1:BoardData {
172: 1:  'description': [
172: 1:    'The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640.',
172: 1:    'Create a function that calculates the difference between the sum squares and the square of the sum for the natural number i.',
172: 1:    'Write a javascript function.',
172: 1:    'The function should not use a loop.'
172: 1:  ],
172: 1:  'expectedAnswer': '100100',
172: 1:  'history': [
172: 1:    {
172: 1:      'answer': '0',
172: 1:      'question': '1',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '4',
172: 1:      'question': '2',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '22',
172: 1:      'question': '3',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '70',
172: 1:      'question': '4',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '170',
172: 1:      'question': '5',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '350',
172: 1:      'question': '6',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '644',
172: 1:      'question': '7',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '1092',
172: 1:      'question': '8',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '1740',
172: 1:      'question': '9',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '2640',
172: 1:      'question': '10',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '3850',
172: 1:      'question': '11',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '5434',
172: 1:      'question': '12',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '7462',
172: 1:      'question': '13',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '10010',
172: 1:      'question': '14',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '13160',
172: 1:      'question': '15',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '17000',
172: 1:      'question': '16',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '21624',
172: 1:      'question': '17',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '27132',
172: 1:      'question': '18',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '33630',
172: 1:      'question': '19',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '41230',
172: 1:      'question': '20',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '50050',
172: 1:      'question': '21',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '60214',
172: 1:      'question': '22',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '71852',
172: 1:      'question': '23',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': '85100',
172: 1:      'question': '24',
172: 1:      'valid': true
172: 1:    }
172: 1:  ],
172: 1:  'info': [
172: 1:    '✅f(1) = 0',
172: 1:    '✅f(2) = 4',
172: 1:    '✅f(3) = 22',
172: 1:    '✅f(4) = 70',
172: 1:    '✅f(5) = 170',
172: 1:    '✅f(6) = 350',
172: 1:    '✅f(7) = 644',
172: 1:    '✅f(8) = 1092',
172: 1:    '✅f(9) = 1740',
172: 1:    '✅f(10) = 2640',
172: 1:    '✅f(11) = 3850',
172: 1:    '✅f(12) = 5434',
172: 1:    '✅f(13) = 7462',
172: 1:    '✅f(14) = 10010',
172: 1:    '✅f(15) = 13160',
172: 1:    '✅f(16) = 17000',
172: 1:    '✅f(17) = 21624',
172: 1:    '✅f(18) = 27132',
172: 1:    '✅f(19) = 33630',
172: 1:    '✅f(20) = 41230',
172: 1:    '✅f(21) = 50050',
172: 1:    '✅f(22) = 60214',
172: 1:    '✅f(23) = 71852',
172: 1:    '✅f(24) = 85100',
172: 1:    '❌f(25) = ??? != 100100'
172: 1:  ],
172: 1:  'level': 5,
172: 1:  'nextQuestion': '25',
172: 1:  'questions': [
172: 1:    '1',
172: 1:    '2',
172: 1:    '3',
172: 1:    '4',
172: 1:    '5',
172: 1:    '6',
172: 1:    '7',
172: 1:    '8',
172: 1:    '9',
172: 1:    '10',
172: 1:    '11',
172: 1:    '12',
172: 1:    '13',
172: 1:    '14',
172: 1:    '15',
172: 1:    '16',
172: 1:    '17',
172: 1:    '18',
172: 1:    '19',
172: 1:    '20',
172: 1:    '21',
172: 1:    '22',
172: 1:    '23',
172: 1:    '24',
172: 1:    '25'
172: 1:  ]
172: 1:}
172: 1:Scores: 3798
172: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000', '21624', '27132', '33630', '41230', '50050', '60214', '71852', '85100', '100100']')
172: 1:Fire Event: PassTest{complexity=9, testCount=25}
172: 1:Fire Event: NextAlgorithm{complexity=9, time=0}
------------------------------------------
173: 1:BoardData {
173: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
173: 1:  'history': [
173: 1:    {
173: 1:      'answer': '0',
173: 1:      'question': '1',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '4',
173: 1:      'question': '2',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '22',
173: 1:      'question': '3',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '70',
173: 1:      'question': '4',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '170',
173: 1:      'question': '5',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '350',
173: 1:      'question': '6',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '644',
173: 1:      'question': '7',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '1092',
173: 1:      'question': '8',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '1740',
173: 1:      'question': '9',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '2640',
173: 1:      'question': '10',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '3850',
173: 1:      'question': '11',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '5434',
173: 1:      'question': '12',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '7462',
173: 1:      'question': '13',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '10010',
173: 1:      'question': '14',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '13160',
173: 1:      'question': '15',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '17000',
173: 1:      'question': '16',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '21624',
173: 1:      'question': '17',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '27132',
173: 1:      'question': '18',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '33630',
173: 1:      'question': '19',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '41230',
173: 1:      'question': '20',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '50050',
173: 1:      'question': '21',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '60214',
173: 1:      'question': '22',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '71852',
173: 1:      'question': '23',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '85100',
173: 1:      'question': '24',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': '100100',
173: 1:      'question': '25',
173: 1:      'valid': true
173: 1:    }
173: 1:  ],
173: 1:  'info': [
173: 1:    '✅f(1) = 0',
173: 1:    '✅f(2) = 4',
173: 1:    '✅f(3) = 22',
173: 1:    '✅f(4) = 70',
173: 1:    '✅f(5) = 170',
173: 1:    '✅f(6) = 350',
173: 1:    '✅f(7) = 644',
173: 1:    '✅f(8) = 1092',
173: 1:    '✅f(9) = 1740',
173: 1:    '✅f(10) = 2640',
173: 1:    '✅f(11) = 3850',
173: 1:    '✅f(12) = 5434',
173: 1:    '✅f(13) = 7462',
173: 1:    '✅f(14) = 10010',
173: 1:    '✅f(15) = 13160',
173: 1:    '✅f(16) = 17000',
173: 1:    '✅f(17) = 21624',
173: 1:    '✅f(18) = 27132',
173: 1:    '✅f(19) = 33630',
173: 1:    '✅f(20) = 41230',
173: 1:    '✅f(21) = 50050',
173: 1:    '✅f(22) = 60214',
173: 1:    '✅f(23) = 71852',
173: 1:    '✅f(24) = 85100',
173: 1:    '✅f(25) = 100100'
173: 1:  ],
173: 1:  'level': 5,
173: 1:  'questions': []
173: 1:}
173: 1:Scores: 5015
173: 1:Answer: message('StartNextLevel')
173: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
174: 1:BoardData {
174: 1:  'description': [
174: 1:    'In a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right.',
174: 1:    'Write a javascript function.',
174: 1:    'For example: abc=>cab...',
174: 1:    'Remove everything from the script except for the function logic.',
174: 1:    'Rewrite the function in a shorter way.'
174: 1:  ],
174: 1:  'expectedAnswer': 'cab',
174: 1:  'history': [],
174: 1:  'info': ['❌f(abc) = ??? != cab'],
174: 1:  'level': 6,
174: 1:  'nextQuestion': 'abc',
174: 1:  'questions': ['abc']
174: 1:}
174: 1:Scores: 5015
174: 1:Answer: message('['cab']')
174: 1:Fire Event: PassTest{complexity=10, testCount=21}
------------------------------------------
175: 1:BoardData {
175: 1:  'description': [
175: 1:    'In a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right.',
175: 1:    'Write a javascript function.',
175: 1:    'For example: abc=>cab...',
175: 1:    'Remove everything from the script except for the function logic.',
175: 1:    'Rewrite the function in a shorter way.'
175: 1:  ],
175: 1:  'expectedAnswer': 'dca',
175: 1:  'history': [{
175: 1:    'answer': 'cab',
175: 1:    'question': 'abc',
175: 1:    'valid': true
175: 1:  }],
175: 1:  'info': [
175: 1:    '✅f(abc) = cab',
175: 1:    '❌f(cad) = ??? != dca'
175: 1:  ],
175: 1:  'level': 6,
175: 1:  'nextQuestion': 'cad',
175: 1:  'questions': [
175: 1:    'abc',
175: 1:    'cad'
175: 1:  ]
175: 1:}
175: 1:Scores: 5019
175: 1:Answer: message('['cab', 'dca']')
175: 1:Fire Event: PassTest{complexity=10, testCount=21}
------------------------------------------
176: 1:BoardData {
176: 1:  'description': [
176: 1:    'In a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right.',
176: 1:    'Write a javascript function.',
176: 1:    'For example: abc=>cab...',
176: 1:    'Remove everything from the script except for the function logic.',
176: 1:    'Rewrite the function in a shorter way.'
176: 1:  ],
176: 1:  'expectedAnswer': 'das',
176: 1:  'history': [
176: 1:    {
176: 1:      'answer': 'cab',
176: 1:      'question': 'abc',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': 'dca',
176: 1:      'question': 'cad',
176: 1:      'valid': true
176: 1:    }
176: 1:  ],
176: 1:  'info': [
176: 1:    '✅f(abc) = cab',
176: 1:    '✅f(cad) = dca',
176: 1:    '❌f(asd) = ??? != das'
176: 1:  ],
176: 1:  'level': 6,
176: 1:  'nextQuestion': 'asd',
176: 1:  'questions': [
176: 1:    'abc',
176: 1:    'cad',
176: 1:    'asd'
176: 1:  ]
176: 1:}
176: 1:Scores: 5023
176: 1:Answer: message('['cab', 'dca', 'das']')
176: 1:Fire Event: PassTest{complexity=10, testCount=21}
------------------------------------------
177: 1:BoardData {
177: 1:  'description': [
177: 1:    'In a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right.',
177: 1:    'Write a javascript function.',
177: 1:    'For example: abc=>cab...',
177: 1:    'Remove everything from the script except for the function logic.',
177: 1:    'Rewrite the function in a shorter way.'
177: 1:  ],
177: 1:  'expectedAnswer': 'zxy',
177: 1:  'history': [
177: 1:    {
177: 1:      'answer': 'cab',
177: 1:      'question': 'abc',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'dca',
177: 1:      'question': 'cad',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'das',
177: 1:      'question': 'asd',
177: 1:      'valid': true
177: 1:    }
177: 1:  ],
177: 1:  'info': [
177: 1:    '✅f(abc) = cab',
177: 1:    '✅f(cad) = dca',
177: 1:    '✅f(asd) = das',
177: 1:    '❌f(xyz) = ??? != zxy'
177: 1:  ],
177: 1:  'level': 6,
177: 1:  'nextQuestion': 'xyz',
177: 1:  'questions': [
177: 1:    'abc',
177: 1:    'cad',
177: 1:    'asd',
177: 1:    'xyz'
177: 1:  ]
177: 1:}
177: 1:Scores: 5027
177: 1:Answer: message('['cab', 'dca', 'das', 'zxy']')
177: 1:Fire Event: PassTest{complexity=10, testCount=21}
------------------------------------------
178: 1:BoardData {
178: 1:  'description': [
178: 1:    'In a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right.',
178: 1:    'Write a javascript function.',
178: 1:    'For example: abc=>cab...',
178: 1:    'Remove everything from the script except for the function logic.',
178: 1:    'Rewrite the function in a shorter way.'
178: 1:  ],
178: 1:  'expectedAnswer': 'aaa',
178: 1:  'history': [
178: 1:    {
178: 1:      'answer': 'cab',
178: 1:      'question': 'abc',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'dca',
178: 1:      'question': 'cad',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'das',
178: 1:      'question': 'asd',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'zxy',
178: 1:      'question': 'xyz',
178: 1:      'valid': true
178: 1:    }
178: 1:  ],
178: 1:  'info': [
178: 1:    '✅f(abc) = cab',
178: 1:    '✅f(cad) = dca',
178: 1:    '✅f(asd) = das',
178: 1:    '✅f(xyz) = zxy',
178: 1:    '❌f(aaa) = ??? != aaa'
178: 1:  ],
178: 1:  'level': 6,
178: 1:  'nextQuestion': 'aaa',
178: 1:  'questions': [
178: 1:    'abc',
178: 1:    'cad',
178: 1:    'asd',
178: 1:    'xyz',
178: 1:    'aaa'
178: 1:  ]
178: 1:}
178: 1:Scores: 5031
178: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa']')
178: 1:Fire Event: PassTest{complexity=10, testCount=21}
------------------------------------------
179: 1:BoardData {
179: 1:  'description': [
179: 1:    'In a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right.',
179: 1:    'Write a javascript function.',
179: 1:    'For example: abc=>cab...',
179: 1:    'Remove everything from the script except for the function logic.',
179: 1:    'Rewrite the function in a shorter way.'
179: 1:  ],
179: 1:  'expectedAnswer': '312',
179: 1:  'history': [
179: 1:    {
179: 1:      'answer': 'cab',
179: 1:      'question': 'abc',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'dca',
179: 1:      'question': 'cad',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'das',
179: 1:      'question': 'asd',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'zxy',
179: 1:      'question': 'xyz',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'aaa',
179: 1:      'question': 'aaa',
179: 1:      'valid': true
179: 1:    }
179: 1:  ],
179: 1:  'info': [
179: 1:    '✅f(abc) = cab',
179: 1:    '✅f(cad) = dca',
179: 1:    '✅f(asd) = das',
179: 1:    '✅f(xyz) = zxy',
179: 1:    '✅f(aaa) = aaa',
179: 1:    '❌f(123) = ??? != 312'
179: 1:  ],
179: 1:  'level': 6,
179: 1:  'nextQuestion': '123',
179: 1:  'questions': [
179: 1:    'abc',
179: 1:    'cad',
179: 1:    'asd',
179: 1:    'xyz',
179: 1:    'aaa',
179: 1:    '123'
179: 1:  ]
179: 1:}
179: 1:Scores: 5035
179: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312']')
179: 1:Fire Event: PassTest{complexity=10, testCount=21}
------------------------------------------
180: 1:BoardData {
180: 1:  'description': [
180: 1:    'In a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right.',
180: 1:    'Write a javascript function.',
180: 1:    'For example: abc=>cab...',
180: 1:    'Remove everything from the script except for the function logic.',
180: 1:    'Rewrite the function in a shorter way.'
180: 1:  ],
180: 1:  'expectedAnswer': 'fdE',
180: 1:  'history': [
180: 1:    {
180: 1:      'answer': 'cab',
180: 1:      'question': 'abc',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'dca',
180: 1:      'question': 'cad',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'das',
180: 1:      'question': 'asd',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'zxy',
180: 1:      'question': 'xyz',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'aaa',
180: 1:      'question': 'aaa',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': '312',
180: 1:      'question': '123',
180: 1:      'valid': true
180: 1:    }
180: 1:  ],
180: 1:  'info': [
180: 1:    '✅f(abc) = cab',
180: 1:    '✅f(cad) = dca',
180: 1:    '✅f(asd) = das',
180: 1:    '✅f(xyz) = zxy',
180: 1:    '✅f(aaa) = aaa',
180: 1:    '✅f(123) = 312',
180: 1:    '❌f(dEf) = ??? != fdE'
180: 1:  ],
180: 1:  'level': 6,
180: 1:  'nextQuestion': 'dEf',
180: 1:  'questions': [
180: 1:    'abc',
180: 1:    'cad',
180: 1:    'asd',
180: 1:    'xyz',
180: 1:    'aaa',
180: 1:    '123',
180: 1:    'dEf'
180: 1:  ]
180: 1:}
180: 1:Scores: 5039
180: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE']')
180: 1:Fire Event: PassTest{complexity=10, testCount=21}
------------------------------------------
181: 1:BoardData {
181: 1:  'description': [
181: 1:    'In a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right.',
181: 1:    'Write a javascript function.',
181: 1:    'For example: abc=>cab...',
181: 1:    'Remove everything from the script except for the function logic.',
181: 1:    'Rewrite the function in a shorter way.'
181: 1:  ],
181: 1:  'expectedAnswer': 'czx',
181: 1:  'history': [
181: 1:    {
181: 1:      'answer': 'cab',
181: 1:      'question': 'abc',
181: 1:      'valid': true
181: 1:    },
181: 1:    {
181: 1:      'answer': 'dca',
181: 1:      'question': 'cad',
181: 1:      'valid': true
181: 1:    },
181: 1:    {
181: 1:      'answer': 'das',
181: 1:      'question': 'asd',
181: 1:      'valid': true
181: 1:    },
181: 1:    {
181: 1:      'answer': 'zxy',
181: 1:      'question': 'xyz',
181: 1:      'valid': true
181: 1:    },
181: 1:    {
181: 1:      'answer': 'aaa',
181: 1:      'question': 'aaa',
181: 1:      'valid': true
181: 1:    },
181: 1:    {
181: 1:      'answer': '312',
181: 1:      'question': '123',
181: 1:      'valid': true
181: 1:    },
181: 1:    {
181: 1:      'answer': 'fdE',
181: 1:      'question': 'dEf',
181: 1:      'valid': true
181: 1:    }
181: 1:  ],
181: 1:  'info': [
181: 1:    '✅f(abc) = cab',
181: 1:    '✅f(cad) = dca',
181: 1:    '✅f(asd) = das',
181: 1:    '✅f(xyz) = zxy',
181: 1:    '✅f(aaa) = aaa',
181: 1:    '✅f(123) = 312',
181: 1:    '✅f(dEf) = fdE',
181: 1:    '❌f(zxc) = ??? != czx'
181: 1:  ],
181: 1:  'level': 6,
181: 1:  'nextQuestion': 'zxc',
181: 1:  'questions': [
181: 1:    'abc',
181: 1:    'cad',
181: 1:    'asd',
181: 1:    'xyz',
181: 1:    'aaa',
181: 1:    '123',
181: 1:    'dEf',
181: 1:    'zxc'
181: 1:  ]
181: 1:}
181: 1:Scores: 5043
181: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx']')
181: 1:Fire Event: PassTest{complexity=10, testCount=21}
------------------------------------------
182: 1:BoardData {
182: 1:  'description': [
182: 1:    'In a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right.',
182: 1:    'Write a javascript function.',
182: 1:    'For example: abc=>cab...',
182: 1:    'Remove everything from the script except for the function logic.',
182: 1:    'Rewrite the function in a shorter way.'
182: 1:  ],
182: 1:  'expectedAnswer': 'eqw',
182: 1:  'history': [
182: 1:    {
182: 1:      'answer': 'cab',
182: 1:      'question': 'abc',
182: 1:      'valid': true
182: 1:    },
182: 1:    {
182: 1:      'answer': 'dca',
182: 1:      'question': 'cad',
182: 1:      'valid': true
182: 1:    },
182: 1:    {
182: 1:      'answer': 'das',
182: 1:      'question': 'asd',
182: 1:      'valid': true
182: 1:    },
182: 1:    {
182: 1:      'answer': 'zxy',
182: 1:      'question': 'xyz',
182: 1:      'valid': true
182: 1:    },
182: 1:    {
182: 1:      'answer': 'aaa',
182: 1:      'question': 'aaa',
182: 1:      'valid': true
182: 1:    },
182: 1:    {
182: 1:      'answer': '312',
182: 1:      'question': '123',
182: 1:      'valid': true
182: 1:    },
182: 1:    {
182: 1:      'answer': 'fdE',
182: 1:      'question': 'dEf',
182: 1:      'valid': true
182: 1:    },
182: 1:    {
182: 1:      'answer': 'czx',
182: 1:      'question': 'zxc',
182: 1:      'valid': true
182: 1:    }
182: 1:  ],
182: 1:  'info': [
182: 1:    '✅f(abc) = cab',
182: 1:    '✅f(cad) = dca',
182: 1:    '✅f(asd) = das',
182: 1:    '✅f(xyz) = zxy',
182: 1:    '✅f(aaa) = aaa',
182: 1:    '✅f(123) = 312',
182: 1:    '✅f(dEf) = fdE',
182: 1:    '✅f(zxc) = czx',
182: 1:    '❌f(qwe) = ??? != eqw'
182: 1:  ],
182: 1:  'level': 6,
182: 1:  'nextQuestion': 'qwe',
182: 1:  'questions': [
182: 1:    'abc',
182: 1:    'cad',
182: 1:    'asd',
182: 1:    'xyz',
182: 1:    'aaa',
182: 1:    '123',
182: 1:    'dEf',
182: 1:    'zxc',
182: 1:    'qwe'
182: 1:  ]
182: 1:}
182: 1:Scores: 5047
182: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw']')
182: 1:Fire Event: PassTest{complexity=10, testCount=21}
------------------------------------------
183: 1:BoardData {
183: 1:  'description': [
183: 1:    'In a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right.',
183: 1:    'Write a javascript function.',
183: 1:    'For example: abc=>cab...',
183: 1:    'Remove everything from the script except for the function logic.',
183: 1:    'Rewrite the function in a shorter way.'
183: 1:  ],
183: 1:  'expectedAnswer': 'yrt',
183: 1:  'history': [
183: 1:    {
183: 1:      'answer': 'cab',
183: 1:      'question': 'abc',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': 'dca',
183: 1:      'question': 'cad',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': 'das',
183: 1:      'question': 'asd',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': 'zxy',
183: 1:      'question': 'xyz',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': 'aaa',
183: 1:      'question': 'aaa',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': '312',
183: 1:      'question': '123',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': 'fdE',
183: 1:      'question': 'dEf',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': 'czx',
183: 1:      'question': 'zxc',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': 'eqw',
183: 1:      'question': 'qwe',
183: 1:      'valid': true
183: 1:    }
183: 1:  ],
183: 1:  'info': [
183: 1:    '✅f(abc) = cab',
183: 1:    '✅f(cad) = dca',
183: 1:    '✅f(asd) = das',
183: 1:    '✅f(xyz) = zxy',
183: 1:    '✅f(aaa) = aaa',
183: 1:    '✅f(123) = 312',
183: 1:    '✅f(dEf) = fdE',
183: 1:    '✅f(zxc) = czx',
183: 1:    '✅f(qwe) = eqw',
183: 1:    '❌f(rty) = ??? != yrt'
183: 1:  ],
183: 1:  'level': 6,
183: 1:  'nextQuestion': 'rty',
183: 1:  'questions': [
183: 1:    'abc',
183: 1:    'cad',
183: 1:    'asd',
183: 1:    'xyz',
183: 1:    'aaa',
183: 1:    '123',
183: 1:    'dEf',
183: 1:    'zxc',
183: 1:    'qwe',
183: 1:    'rty'
183: 1:  ]
183: 1:}
183: 1:Scores: 5051
183: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt']')
183: 1:Fire Event: PassTest{complexity=10, testCount=21}
------------------------------------------
184: 1:BoardData {
184: 1:  'description': [
184: 1:    'In a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right.',
184: 1:    'Write a javascript function.',
184: 1:    'For example: abc=>cab...',
184: 1:    'Remove everything from the script except for the function logic.',
184: 1:    'Rewrite the function in a shorter way.'
184: 1:  ],
184: 1:  'expectedAnswer': 'bmn',
184: 1:  'history': [
184: 1:    {
184: 1:      'answer': 'cab',
184: 1:      'question': 'abc',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': 'dca',
184: 1:      'question': 'cad',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': 'das',
184: 1:      'question': 'asd',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': 'zxy',
184: 1:      'question': 'xyz',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': 'aaa',
184: 1:      'question': 'aaa',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': '312',
184: 1:      'question': '123',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': 'fdE',
184: 1:      'question': 'dEf',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': 'czx',
184: 1:      'question': 'zxc',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': 'eqw',
184: 1:      'question': 'qwe',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': 'yrt',
184: 1:      'question': 'rty',
184: 1:      'valid': true
184: 1:    }
184: 1:  ],
184: 1:  'info': [
184: 1:    '✅f(abc) = cab',
184: 1:    '✅f(cad) = dca',
184: 1:    '✅f(asd) = das',
184: 1:    '✅f(xyz) = zxy',
184: 1:    '✅f(aaa) = aaa',
184: 1:    '✅f(123) = 312',
184: 1:    '✅f(dEf) = fdE',
184: 1:    '✅f(zxc) = czx',
184: 1:    '✅f(qwe) = eqw',
184: 1:    '✅f(rty) = yrt',
184: 1:    '❌f(mnb) = ??? != bmn'
184: 1:  ],
184: 1:  'level': 6,
184: 1:  'nextQuestion': 'mnb',
184: 1:  'questions': [
184: 1:    'abc',
184: 1:    'cad',
184: 1:    'asd',
184: 1:    'xyz',
184: 1:    'aaa',
184: 1:    '123',
184: 1:    'dEf',
184: 1:    'zxc',
184: 1:    'qwe',
184: 1:    'rty',
184: 1:    'mnb'
184: 1:  ]
184: 1:}
184: 1:Scores: 5055
184: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn']')
184: 1:Fire Event: PassTest{complexity=10, testCount=21}
------------------------------------------
185: 1:BoardData {
185: 1:  'description': [
185: 1:    'In a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right.',
185: 1:    'Write a javascript function.',
185: 1:    'For example: abc=>cab...',
185: 1:    'Remove everything from the script except for the function logic.',
185: 1:    'Rewrite the function in a shorter way.'
185: 1:  ],
185: 1:  'expectedAnswer': 'nvb',
185: 1:  'history': [
185: 1:    {
185: 1:      'answer': 'cab',
185: 1:      'question': 'abc',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': 'dca',
185: 1:      'question': 'cad',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': 'das',
185: 1:      'question': 'asd',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': 'zxy',
185: 1:      'question': 'xyz',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': 'aaa',
185: 1:      'question': 'aaa',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': '312',
185: 1:      'question': '123',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': 'fdE',
185: 1:      'question': 'dEf',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': 'czx',
185: 1:      'question': 'zxc',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': 'eqw',
185: 1:      'question': 'qwe',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': 'yrt',
185: 1:      'question': 'rty',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': 'bmn',
185: 1:      'question': 'mnb',
185: 1:      'valid': true
185: 1:    }
185: 1:  ],
185: 1:  'info': [
185: 1:    '✅f(abc) = cab',
185: 1:    '✅f(cad) = dca',
185: 1:    '✅f(asd) = das',
185: 1:    '✅f(xyz) = zxy',
185: 1:    '✅f(aaa) = aaa',
185: 1:    '✅f(123) = 312',
185: 1:    '✅f(dEf) = fdE',
185: 1:    '✅f(zxc) = czx',
185: 1:    '✅f(qwe) = eqw',
185: 1:    '✅f(rty) = yrt',
185: 1:    '✅f(mnb) = bmn',
185: 1:    '❌f(vbn) = ??? != nvb'
185: 1:  ],
185: 1:  'level': 6,
185: 1:  'nextQuestion': 'vbn',
185: 1:  'questions': [
185: 1:    'abc',
185: 1:    'cad',
185: 1:    'asd',
185: 1:    'xyz',
185: 1:    'aaa',
185: 1:    '123',
185: 1:    'dEf',
185: 1:    'zxc',
185: 1:    'qwe',
185: 1:    'rty',
185: 1:    'mnb',
185: 1:    'vbn'
185: 1:  ]
185: 1:}
185: 1:Scores: 5059
185: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb']')
185: 1:Fire Event: PassTest{complexity=10, testCount=21}
------------------------------------------
186: 1:BoardData {
186: 1:  'description': [
186: 1:    'In a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right.',
186: 1:    'Write a javascript function.',
186: 1:    'For example: abc=>cab...',
186: 1:    'Remove everything from the script except for the function logic.',
186: 1:    'Rewrite the function in a shorter way.'
186: 1:  ],
186: 1:  'expectedAnswer': 'hfg',
186: 1:  'history': [
186: 1:    {
186: 1:      'answer': 'cab',
186: 1:      'question': 'abc',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': 'dca',
186: 1:      'question': 'cad',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': 'das',
186: 1:      'question': 'asd',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': 'zxy',
186: 1:      'question': 'xyz',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': 'aaa',
186: 1:      'question': 'aaa',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': '312',
186: 1:      'question': '123',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': 'fdE',
186: 1:      'question': 'dEf',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': 'czx',
186: 1:      'question': 'zxc',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': 'eqw',
186: 1:      'question': 'qwe',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': 'yrt',
186: 1:      'question': 'rty',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': 'bmn',
186: 1:      'question': 'mnb',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': 'nvb',
186: 1:      'question': 'vbn',
186: 1:      'valid': true
186: 1:    }
186: 1:  ],
186: 1:  'info': [
186: 1:    '✅f(abc) = cab',
186: 1:    '✅f(cad) = dca',
186: 1:    '✅f(asd) = das',
186: 1:    '✅f(xyz) = zxy',
186: 1:    '✅f(aaa) = aaa',
186: 1:    '✅f(123) = 312',
186: 1:    '✅f(dEf) = fdE',
186: 1:    '✅f(zxc) = czx',
186: 1:    '✅f(qwe) = eqw',
186: 1:    '✅f(rty) = yrt',
186: 1:    '✅f(mnb) = bmn',
186: 1:    '✅f(vbn) = nvb',
186: 1:    '❌f(fgh) = ??? != hfg'
186: 1:  ],
186: 1:  'level': 6,
186: 1:  'nextQuestion': 'fgh',
186: 1:  'questions': [
186: 1:    'abc',
186: 1:    'cad',
186: 1:    'asd',
186: 1:    'xyz',
186: 1:    'aaa',
186: 1:    '123',
186: 1:    'dEf',
186: 1:    'zxc',
186: 1:    'qwe',
186: 1:    'rty',
186: 1:    'mnb',
186: 1:    'vbn',
186: 1:    'fgh'
186: 1:  ]
186: 1:}
186: 1:Scores: 5063
186: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb', 'hfg']')
186: 1:Fire Event: PassTest{complexity=10, testCount=21}
------------------------------------------
187: 1:BoardData {
187: 1:  'description': [
187: 1:    'In a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right.',
187: 1:    'Write a javascript function.',
187: 1:    'For example: abc=>cab...',
187: 1:    'Remove everything from the script except for the function logic.',
187: 1:    'Rewrite the function in a shorter way.'
187: 1:  ],
187: 1:  'expectedAnswer': 'kij',
187: 1:  'history': [
187: 1:    {
187: 1:      'answer': 'cab',
187: 1:      'question': 'abc',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': 'dca',
187: 1:      'question': 'cad',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': 'das',
187: 1:      'question': 'asd',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': 'zxy',
187: 1:      'question': 'xyz',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': 'aaa',
187: 1:      'question': 'aaa',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '312',
187: 1:      'question': '123',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': 'fdE',
187: 1:      'question': 'dEf',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': 'czx',
187: 1:      'question': 'zxc',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': 'eqw',
187: 1:      'question': 'qwe',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': 'yrt',
187: 1:      'question': 'rty',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': 'bmn',
187: 1:      'question': 'mnb',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': 'nvb',
187: 1:      'question': 'vbn',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': 'hfg',
187: 1:      'question': 'fgh',
187: 1:      'valid': true
187: 1:    }
187: 1:  ],
187: 1:  'info': [
187: 1:    '✅f(abc) = cab',
187: 1:    '✅f(cad) = dca',
187: 1:    '✅f(asd) = das',
187: 1:    '✅f(xyz) = zxy',
187: 1:    '✅f(aaa) = aaa',
187: 1:    '✅f(123) = 312',
187: 1:    '✅f(dEf) = fdE',
187: 1:    '✅f(zxc) = czx',
187: 1:    '✅f(qwe) = eqw',
187: 1:    '✅f(rty) = yrt',
187: 1:    '✅f(mnb) = bmn',
187: 1:    '✅f(vbn) = nvb',
187: 1:    '✅f(fgh) = hfg',
187: 1:    '❌f(ijk) = ??? != kij'
187: 1:  ],
187: 1:  'level': 6,
187: 1:  'nextQuestion': 'ijk',
187: 1:  'questions': [
187: 1:    'abc',
187: 1:    'cad',
187: 1:    'asd',
187: 1:    'xyz',
187: 1:    'aaa',
187: 1:    '123',
187: 1:    'dEf',
187: 1:    'zxc',
187: 1:    'qwe',
187: 1:    'rty',
187: 1:    'mnb',
187: 1:    'vbn',
187: 1:    'fgh',
187: 1:    'ijk'
187: 1:  ]
187: 1:}
187: 1:Scores: 5067
187: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb', 'hfg', 'kij']')
187: 1:Fire Event: PassTest{complexity=10, testCount=21}
------------------------------------------
188: 1:BoardData {
188: 1:  'description': [
188: 1:    'In a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right.',
188: 1:    'Write a javascript function.',
188: 1:    'For example: abc=>cab...',
188: 1:    'Remove everything from the script except for the function logic.',
188: 1:    'Rewrite the function in a shorter way.'
188: 1:  ],
188: 1:  'expectedAnswer': 'nlm',
188: 1:  'history': [
188: 1:    {
188: 1:      'answer': 'cab',
188: 1:      'question': 'abc',
188: 1:      'valid': true
188: 1:    },
188: 1:    {
188: 1:      'answer': 'dca',
188: 1:      'question': 'cad',
188: 1:      'valid': true
188: 1:    },
188: 1:    {
188: 1:      'answer': 'das',
188: 1:      'question': 'asd',
188: 1:      'valid': true
188: 1:    },
188: 1:    {
188: 1:      'answer': 'zxy',
188: 1:      'question': 'xyz',
188: 1:      'valid': true
188: 1:    },
188: 1:    {
188: 1:      'answer': 'aaa',
188: 1:      'question': 'aaa',
188: 1:      'valid': true
188: 1:    },
188: 1:    {
188: 1:      'answer': '312',
188: 1:      'question': '123',
188: 1:      'valid': true
188: 1:    },
188: 1:    {
188: 1:      'answer': 'fdE',
188: 1:      'question': 'dEf',
188: 1:      'valid': true
188: 1:    },
188: 1:    {
188: 1:      'answer': 'czx',
188: 1:      'question': 'zxc',
188: 1:      'valid': true
188: 1:    },
188: 1:    {
188: 1:      'answer': 'eqw',
188: 1:      'question': 'qwe',
188: 1:      'valid': true
188: 1:    },
188: 1:    {
188: 1:      'answer': 'yrt',
188: 1:      'question': 'rty',
188: 1:      'valid': true
188: 1:    },
188: 1:    {
188: 1:      'answer': 'bmn',
188: 1:      'question': 'mnb',
188: 1:      'valid': true
188: 1:    },
188: 1:    {
188: 1:      'answer': 'nvb',
188: 1:      'question': 'vbn',
188: 1:      'valid': true
188: 1:    },
188: 1:    {
188: 1:      'answer': 'hfg',
188: 1:      'question': 'fgh',
188: 1:      'valid': true
188: 1:    },
188: 1:    {
188: 1:      'answer': 'kij',
188: 1:      'question': 'ijk',
188: 1:      'valid': true
188: 1:    }
188: 1:  ],
188: 1:  'info': [
188: 1:    '✅f(abc) = cab',
188: 1:    '✅f(cad) = dca',
188: 1:    '✅f(asd) = das',
188: 1:    '✅f(xyz) = zxy',
188: 1:    '✅f(aaa) = aaa',
188: 1:    '✅f(123) = 312',
188: 1:    '✅f(dEf) = fdE',
188: 1:    '✅f(zxc) = czx',
188: 1:    '✅f(qwe) = eqw',
188: 1:    '✅f(rty) = yrt',
188: 1:    '✅f(mnb) = bmn',
188: 1:    '✅f(vbn) = nvb',
188: 1:    '✅f(fgh) = hfg',
188: 1:    '✅f(ijk) = kij',
188: 1:    '❌f(lmn) = ??? != nlm'
188: 1:  ],
188: 1:  'level': 6,
188: 1:  'nextQuestion': 'lmn',
188: 1:  'questions': [
188: 1:    'abc',
188: 1:    'cad',
188: 1:    'asd',
188: 1:    'xyz',
188: 1:    'aaa',
188: 1:    '123',
188: 1:    'dEf',
188: 1:    'zxc',
188: 1:    'qwe',
188: 1:    'rty',
188: 1:    'mnb',
188: 1:    'vbn',
188: 1:    'fgh',
188: 1:    'ijk',
188: 1:    'lmn'
188: 1:  ]
188: 1:}
188: 1:Scores: 5071
188: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb', 'hfg', 'kij', 'nlm']')
188: 1:Fire Event: PassTest{complexity=10, testCount=21}
------------------------------------------
189: 1:BoardData {
189: 1:  'description': [
189: 1:    'In a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right.',
189: 1:    'Write a javascript function.',
189: 1:    'For example: abc=>cab...',
189: 1:    'Remove everything from the script except for the function logic.',
189: 1:    'Rewrite the function in a shorter way.'
189: 1:  ],
189: 1:  'expectedAnswer': 'rpq',
189: 1:  'history': [
189: 1:    {
189: 1:      'answer': 'cab',
189: 1:      'question': 'abc',
189: 1:      'valid': true
189: 1:    },
189: 1:    {
189: 1:      'answer': 'dca',
189: 1:      'question': 'cad',
189: 1:      'valid': true
189: 1:    },
189: 1:    {
189: 1:      'answer': 'das',
189: 1:      'question': 'asd',
189: 1:      'valid': true
189: 1:    },
189: 1:    {
189: 1:      'answer': 'zxy',
189: 1:      'question': 'xyz',
189: 1:      'valid': true
189: 1:    },
189: 1:    {
189: 1:      'answer': 'aaa',
189: 1:      'question': 'aaa',
189: 1:      'valid': true
189: 1:    },
189: 1:    {
189: 1:      'answer': '312',
189: 1:      'question': '123',
189: 1:      'valid': true
189: 1:    },
189: 1:    {
189: 1:      'answer': 'fdE',
189: 1:      'question': 'dEf',
189: 1:      'valid': true
189: 1:    },
189: 1:    {
189: 1:      'answer': 'czx',
189: 1:      'question': 'zxc',
189: 1:      'valid': true
189: 1:    },
189: 1:    {
189: 1:      'answer': 'eqw',
189: 1:      'question': 'qwe',
189: 1:      'valid': true
189: 1:    },
189: 1:    {
189: 1:      'answer': 'yrt',
189: 1:      'question': 'rty',
189: 1:      'valid': true
189: 1:    },
189: 1:    {
189: 1:      'answer': 'bmn',
189: 1:      'question': 'mnb',
189: 1:      'valid': true
189: 1:    },
189: 1:    {
189: 1:      'answer': 'nvb',
189: 1:      'question': 'vbn',
189: 1:      'valid': true
189: 1:    },
189: 1:    {
189: 1:      'answer': 'hfg',
189: 1:      'question': 'fgh',
189: 1:      'valid': true
189: 1:    },
189: 1:    {
189: 1:      'answer': 'kij',
189: 1:      'question': 'ijk',
189: 1:      'valid': true
189: 1:    },
189: 1:    {
189: 1:      'answer': 'nlm',
189: 1:      'question': 'lmn',
189: 1:      'valid': true
189: 1:    }
189: 1:  ],
189: 1:  'info': [
189: 1:    '✅f(abc) = cab',
189: 1:    '✅f(cad) = dca',
189: 1:    '✅f(asd) = das',
189: 1:    '✅f(xyz) = zxy',
189: 1:    '✅f(aaa) = aaa',
189: 1:    '✅f(123) = 312',
189: 1:    '✅f(dEf) = fdE',
189: 1:    '✅f(zxc) = czx',
189: 1:    '✅f(qwe) = eqw',
189: 1:    '✅f(rty) = yrt',
189: 1:    '✅f(mnb) = bmn',
189: 1:    '✅f(vbn) = nvb',
189: 1:    '✅f(fgh) = hfg',
189: 1:    '✅f(ijk) = kij',
189: 1:    '✅f(lmn) = nlm',
189: 1:    '❌f(pqr) = ??? != rpq'
189: 1:  ],
189: 1:  'level': 6,
189: 1:  'nextQuestion': 'pqr',
189: 1:  'questions': [
189: 1:    'abc',
189: 1:    'cad',
189: 1:    'asd',
189: 1:    'xyz',
189: 1:    'aaa',
189: 1:    '123',
189: 1:    'dEf',
189: 1:    'zxc',
189: 1:    'qwe',
189: 1:    'rty',
189: 1:    'mnb',
189: 1:    'vbn',
189: 1:    'fgh',
189: 1:    'ijk',
189: 1:    'lmn',
189: 1:    'pqr'
189: 1:  ]
189: 1:}
189: 1:Scores: 5075
189: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb', 'hfg', 'kij', 'nlm', 'rpq']')
189: 1:Fire Event: PassTest{complexity=10, testCount=21}
------------------------------------------
190: 1:BoardData {
190: 1:  'description': [
190: 1:    'In a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right.',
190: 1:    'Write a javascript function.',
190: 1:    'For example: abc=>cab...',
190: 1:    'Remove everything from the script except for the function logic.',
190: 1:    'Rewrite the function in a shorter way.'
190: 1:  ],
190: 1:  'expectedAnswer': 'ust',
190: 1:  'history': [
190: 1:    {
190: 1:      'answer': 'cab',
190: 1:      'question': 'abc',
190: 1:      'valid': true
190: 1:    },
190: 1:    {
190: 1:      'answer': 'dca',
190: 1:      'question': 'cad',
190: 1:      'valid': true
190: 1:    },
190: 1:    {
190: 1:      'answer': 'das',
190: 1:      'question': 'asd',
190: 1:      'valid': true
190: 1:    },
190: 1:    {
190: 1:      'answer': 'zxy',
190: 1:      'question': 'xyz',
190: 1:      'valid': true
190: 1:    },
190: 1:    {
190: 1:      'answer': 'aaa',
190: 1:      'question': 'aaa',
190: 1:      'valid': true
190: 1:    },
190: 1:    {
190: 1:      'answer': '312',
190: 1:      'question': '123',
190: 1:      'valid': true
190: 1:    },
190: 1:    {
190: 1:      'answer': 'fdE',
190: 1:      'question': 'dEf',
190: 1:      'valid': true
190: 1:    },
190: 1:    {
190: 1:      'answer': 'czx',
190: 1:      'question': 'zxc',
190: 1:      'valid': true
190: 1:    },
190: 1:    {
190: 1:      'answer': 'eqw',
190: 1:      'question': 'qwe',
190: 1:      'valid': true
190: 1:    },
190: 1:    {
190: 1:      'answer': 'yrt',
190: 1:      'question': 'rty',
190: 1:      'valid': true
190: 1:    },
190: 1:    {
190: 1:      'answer': 'bmn',
190: 1:      'question': 'mnb',
190: 1:      'valid': true
190: 1:    },
190: 1:    {
190: 1:      'answer': 'nvb',
190: 1:      'question': 'vbn',
190: 1:      'valid': true
190: 1:    },
190: 1:    {
190: 1:      'answer': 'hfg',
190: 1:      'question': 'fgh',
190: 1:      'valid': true
190: 1:    },
190: 1:    {
190: 1:      'answer': 'kij',
190: 1:      'question': 'ijk',
190: 1:      'valid': true
190: 1:    },
190: 1:    {
190: 1:      'answer': 'nlm',
190: 1:      'question': 'lmn',
190: 1:      'valid': true
190: 1:    },
190: 1:    {
190: 1:      'answer': 'rpq',
190: 1:      'question': 'pqr',
190: 1:      'valid': true
190: 1:    }
190: 1:  ],
190: 1:  'info': [
190: 1:    '✅f(abc) = cab',
190: 1:    '✅f(cad) = dca',
190: 1:    '✅f(asd) = das',
190: 1:    '✅f(xyz) = zxy',
190: 1:    '✅f(aaa) = aaa',
190: 1:    '✅f(123) = 312',
190: 1:    '✅f(dEf) = fdE',
190: 1:    '✅f(zxc) = czx',
190: 1:    '✅f(qwe) = eqw',
190: 1:    '✅f(rty) = yrt',
190: 1:    '✅f(mnb) = bmn',
190: 1:    '✅f(vbn) = nvb',
190: 1:    '✅f(fgh) = hfg',
190: 1:    '✅f(ijk) = kij',
190: 1:    '✅f(lmn) = nlm',
190: 1:    '✅f(pqr) = rpq',
190: 1:    '❌f(stu) = ??? != ust'
190: 1:  ],
190: 1:  'level': 6,
190: 1:  'nextQuestion': 'stu',
190: 1:  'questions': [
190: 1:    'abc',
190: 1:    'cad',
190: 1:    'asd',
190: 1:    'xyz',
190: 1:    'aaa',
190: 1:    '123',
190: 1:    'dEf',
190: 1:    'zxc',
190: 1:    'qwe',
190: 1:    'rty',
190: 1:    'mnb',
190: 1:    'vbn',
190: 1:    'fgh',
190: 1:    'ijk',
190: 1:    'lmn',
190: 1:    'pqr',
190: 1:    'stu'
190: 1:  ]
190: 1:}
190: 1:Scores: 5079
190: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb', 'hfg', 'kij', 'nlm', 'rpq', 'ust']')
190: 1:Fire Event: PassTest{complexity=10, testCount=21}
------------------------------------------
191: 1:BoardData {
191: 1:  'description': [
191: 1:    'In a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right.',
191: 1:    'Write a javascript function.',
191: 1:    'For example: abc=>cab...',
191: 1:    'Remove everything from the script except for the function logic.',
191: 1:    'Rewrite the function in a shorter way.'
191: 1:  ],
191: 1:  'expectedAnswer': 'ywx',
191: 1:  'history': [
191: 1:    {
191: 1:      'answer': 'cab',
191: 1:      'question': 'abc',
191: 1:      'valid': true
191: 1:    },
191: 1:    {
191: 1:      'answer': 'dca',
191: 1:      'question': 'cad',
191: 1:      'valid': true
191: 1:    },
191: 1:    {
191: 1:      'answer': 'das',
191: 1:      'question': 'asd',
191: 1:      'valid': true
191: 1:    },
191: 1:    {
191: 1:      'answer': 'zxy',
191: 1:      'question': 'xyz',
191: 1:      'valid': true
191: 1:    },
191: 1:    {
191: 1:      'answer': 'aaa',
191: 1:      'question': 'aaa',
191: 1:      'valid': true
191: 1:    },
191: 1:    {
191: 1:      'answer': '312',
191: 1:      'question': '123',
191: 1:      'valid': true
191: 1:    },
191: 1:    {
191: 1:      'answer': 'fdE',
191: 1:      'question': 'dEf',
191: 1:      'valid': true
191: 1:    },
191: 1:    {
191: 1:      'answer': 'czx',
191: 1:      'question': 'zxc',
191: 1:      'valid': true
191: 1:    },
191: 1:    {
191: 1:      'answer': 'eqw',
191: 1:      'question': 'qwe',
191: 1:      'valid': true
191: 1:    },
191: 1:    {
191: 1:      'answer': 'yrt',
191: 1:      'question': 'rty',
191: 1:      'valid': true
191: 1:    },
191: 1:    {
191: 1:      'answer': 'bmn',
191: 1:      'question': 'mnb',
191: 1:      'valid': true
191: 1:    },
191: 1:    {
191: 1:      'answer': 'nvb',
191: 1:      'question': 'vbn',
191: 1:      'valid': true
191: 1:    },
191: 1:    {
191: 1:      'answer': 'hfg',
191: 1:      'question': 'fgh',
191: 1:      'valid': true
191: 1:    },
191: 1:    {
191: 1:      'answer': 'kij',
191: 1:      'question': 'ijk',
191: 1:      'valid': true
191: 1:    },
191: 1:    {
191: 1:      'answer': 'nlm',
191: 1:      'question': 'lmn',
191: 1:      'valid': true
191: 1:    },
191: 1:    {
191: 1:      'answer': 'rpq',
191: 1:      'question': 'pqr',
191: 1:      'valid': true
191: 1:    },
191: 1:    {
191: 1:      'answer': 'ust',
191: 1:      'question': 'stu',
191: 1:      'valid': true
191: 1:    }
191: 1:  ],
191: 1:  'info': [
191: 1:    '✅f(abc) = cab',
191: 1:    '✅f(cad) = dca',
191: 1:    '✅f(asd) = das',
191: 1:    '✅f(xyz) = zxy',
191: 1:    '✅f(aaa) = aaa',
191: 1:    '✅f(123) = 312',
191: 1:    '✅f(dEf) = fdE',
191: 1:    '✅f(zxc) = czx',
191: 1:    '✅f(qwe) = eqw',
191: 1:    '✅f(rty) = yrt',
191: 1:    '✅f(mnb) = bmn',
191: 1:    '✅f(vbn) = nvb',
191: 1:    '✅f(fgh) = hfg',
191: 1:    '✅f(ijk) = kij',
191: 1:    '✅f(lmn) = nlm',
191: 1:    '✅f(pqr) = rpq',
191: 1:    '✅f(stu) = ust',
191: 1:    '❌f(wxy) = ??? != ywx'
191: 1:  ],
191: 1:  'level': 6,
191: 1:  'nextQuestion': 'wxy',
191: 1:  'questions': [
191: 1:    'abc',
191: 1:    'cad',
191: 1:    'asd',
191: 1:    'xyz',
191: 1:    'aaa',
191: 1:    '123',
191: 1:    'dEf',
191: 1:    'zxc',
191: 1:    'qwe',
191: 1:    'rty',
191: 1:    'mnb',
191: 1:    'vbn',
191: 1:    'fgh',
191: 1:    'ijk',
191: 1:    'lmn',
191: 1:    'pqr',
191: 1:    'stu',
191: 1:    'wxy'
191: 1:  ]
191: 1:}
191: 1:Scores: 5083
191: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb', 'hfg', 'kij', 'nlm', 'rpq', 'ust', 'ywx']')
191: 1:Fire Event: PassTest{complexity=10, testCount=21}
------------------------------------------
192: 1:BoardData {
192: 1:  'description': [
192: 1:    'In a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right.',
192: 1:    'Write a javascript function.',
192: 1:    'For example: abc=>cab...',
192: 1:    'Remove everything from the script except for the function logic.',
192: 1:    'Rewrite the function in a shorter way.'
192: 1:  ],
192: 1:  'expectedAnswer': '222',
192: 1:  'history': [
192: 1:    {
192: 1:      'answer': 'cab',
192: 1:      'question': 'abc',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': 'dca',
192: 1:      'question': 'cad',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': 'das',
192: 1:      'question': 'asd',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': 'zxy',
192: 1:      'question': 'xyz',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': 'aaa',
192: 1:      'question': 'aaa',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': '312',
192: 1:      'question': '123',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': 'fdE',
192: 1:      'question': 'dEf',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': 'czx',
192: 1:      'question': 'zxc',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': 'eqw',
192: 1:      'question': 'qwe',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': 'yrt',
192: 1:      'question': 'rty',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': 'bmn',
192: 1:      'question': 'mnb',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': 'nvb',
192: 1:      'question': 'vbn',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': 'hfg',
192: 1:      'question': 'fgh',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': 'kij',
192: 1:      'question': 'ijk',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': 'nlm',
192: 1:      'question': 'lmn',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': 'rpq',
192: 1:      'question': 'pqr',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': 'ust',
192: 1:      'question': 'stu',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': 'ywx',
192: 1:      'question': 'wxy',
192: 1:      'valid': true
192: 1:    }
192: 1:  ],
192: 1:  'info': [
192: 1:    '✅f(abc) = cab',
192: 1:    '✅f(cad) = dca',
192: 1:    '✅f(asd) = das',
192: 1:    '✅f(xyz) = zxy',
192: 1:    '✅f(aaa) = aaa',
192: 1:    '✅f(123) = 312',
192: 1:    '✅f(dEf) = fdE',
192: 1:    '✅f(zxc) = czx',
192: 1:    '✅f(qwe) = eqw',
192: 1:    '✅f(rty) = yrt',
192: 1:    '✅f(mnb) = bmn',
192: 1:    '✅f(vbn) = nvb',
192: 1:    '✅f(fgh) = hfg',
192: 1:    '✅f(ijk) = kij',
192: 1:    '✅f(lmn) = nlm',
192: 1:    '✅f(pqr) = rpq',
192: 1:    '✅f(stu) = ust',
192: 1:    '✅f(wxy) = ywx',
192: 1:    '❌f(222) = ??? != 222'
192: 1:  ],
192: 1:  'level': 6,
192: 1:  'nextQuestion': '222',
192: 1:  'questions': [
192: 1:    'abc',
192: 1:    'cad',
192: 1:    'asd',
192: 1:    'xyz',
192: 1:    'aaa',
192: 1:    '123',
192: 1:    'dEf',
192: 1:    'zxc',
192: 1:    'qwe',
192: 1:    'rty',
192: 1:    'mnb',
192: 1:    'vbn',
192: 1:    'fgh',
192: 1:    'ijk',
192: 1:    'lmn',
192: 1:    'pqr',
192: 1:    'stu',
192: 1:    'wxy',
192: 1:    '222'
192: 1:  ]
192: 1:}
192: 1:Scores: 5087
192: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb', 'hfg', 'kij', 'nlm', 'rpq', 'ust', 'ywx', '222']')
192: 1:Fire Event: PassTest{complexity=10, testCount=21}
------------------------------------------
193: 1:BoardData {
193: 1:  'description': [
193: 1:    'In a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right.',
193: 1:    'Write a javascript function.',
193: 1:    'For example: abc=>cab...',
193: 1:    'Remove everything from the script except for the function logic.',
193: 1:    'Rewrite the function in a shorter way.'
193: 1:  ],
193: 1:  'expectedAnswer': '978',
193: 1:  'history': [
193: 1:    {
193: 1:      'answer': 'cab',
193: 1:      'question': 'abc',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': 'dca',
193: 1:      'question': 'cad',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': 'das',
193: 1:      'question': 'asd',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': 'zxy',
193: 1:      'question': 'xyz',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': 'aaa',
193: 1:      'question': 'aaa',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': '312',
193: 1:      'question': '123',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': 'fdE',
193: 1:      'question': 'dEf',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': 'czx',
193: 1:      'question': 'zxc',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': 'eqw',
193: 1:      'question': 'qwe',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': 'yrt',
193: 1:      'question': 'rty',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': 'bmn',
193: 1:      'question': 'mnb',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': 'nvb',
193: 1:      'question': 'vbn',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': 'hfg',
193: 1:      'question': 'fgh',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': 'kij',
193: 1:      'question': 'ijk',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': 'nlm',
193: 1:      'question': 'lmn',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': 'rpq',
193: 1:      'question': 'pqr',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': 'ust',
193: 1:      'question': 'stu',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': 'ywx',
193: 1:      'question': 'wxy',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': '222',
193: 1:      'question': '222',
193: 1:      'valid': true
193: 1:    }
193: 1:  ],
193: 1:  'info': [
193: 1:    '✅f(abc) = cab',
193: 1:    '✅f(cad) = dca',
193: 1:    '✅f(asd) = das',
193: 1:    '✅f(xyz) = zxy',
193: 1:    '✅f(aaa) = aaa',
193: 1:    '✅f(123) = 312',
193: 1:    '✅f(dEf) = fdE',
193: 1:    '✅f(zxc) = czx',
193: 1:    '✅f(qwe) = eqw',
193: 1:    '✅f(rty) = yrt',
193: 1:    '✅f(mnb) = bmn',
193: 1:    '✅f(vbn) = nvb',
193: 1:    '✅f(fgh) = hfg',
193: 1:    '✅f(ijk) = kij',
193: 1:    '✅f(lmn) = nlm',
193: 1:    '✅f(pqr) = rpq',
193: 1:    '✅f(stu) = ust',
193: 1:    '✅f(wxy) = ywx',
193: 1:    '✅f(222) = 222',
193: 1:    '❌f(789) = ??? != 978'
193: 1:  ],
193: 1:  'level': 6,
193: 1:  'nextQuestion': '789',
193: 1:  'questions': [
193: 1:    'abc',
193: 1:    'cad',
193: 1:    'asd',
193: 1:    'xyz',
193: 1:    'aaa',
193: 1:    '123',
193: 1:    'dEf',
193: 1:    'zxc',
193: 1:    'qwe',
193: 1:    'rty',
193: 1:    'mnb',
193: 1:    'vbn',
193: 1:    'fgh',
193: 1:    'ijk',
193: 1:    'lmn',
193: 1:    'pqr',
193: 1:    'stu',
193: 1:    'wxy',
193: 1:    '222',
193: 1:    '789'
193: 1:  ]
193: 1:}
193: 1:Scores: 5091
193: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb', 'hfg', 'kij', 'nlm', 'rpq', 'ust', 'ywx', '222', '978']')
193: 1:Fire Event: PassTest{complexity=10, testCount=21}
------------------------------------------
194: 1:BoardData {
194: 1:  'description': [
194: 1:    'In a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right.',
194: 1:    'Write a javascript function.',
194: 1:    'For example: abc=>cab...',
194: 1:    'Remove everything from the script except for the function logic.',
194: 1:    'Rewrite the function in a shorter way.'
194: 1:  ],
194: 1:  'expectedAnswer': '009',
194: 1:  'history': [
194: 1:    {
194: 1:      'answer': 'cab',
194: 1:      'question': 'abc',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': 'dca',
194: 1:      'question': 'cad',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': 'das',
194: 1:      'question': 'asd',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': 'zxy',
194: 1:      'question': 'xyz',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': 'aaa',
194: 1:      'question': 'aaa',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': '312',
194: 1:      'question': '123',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': 'fdE',
194: 1:      'question': 'dEf',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': 'czx',
194: 1:      'question': 'zxc',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': 'eqw',
194: 1:      'question': 'qwe',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': 'yrt',
194: 1:      'question': 'rty',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': 'bmn',
194: 1:      'question': 'mnb',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': 'nvb',
194: 1:      'question': 'vbn',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': 'hfg',
194: 1:      'question': 'fgh',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': 'kij',
194: 1:      'question': 'ijk',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': 'nlm',
194: 1:      'question': 'lmn',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': 'rpq',
194: 1:      'question': 'pqr',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': 'ust',
194: 1:      'question': 'stu',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': 'ywx',
194: 1:      'question': 'wxy',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': '222',
194: 1:      'question': '222',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': '978',
194: 1:      'question': '789',
194: 1:      'valid': true
194: 1:    }
194: 1:  ],
194: 1:  'info': [
194: 1:    '✅f(abc) = cab',
194: 1:    '✅f(cad) = dca',
194: 1:    '✅f(asd) = das',
194: 1:    '✅f(xyz) = zxy',
194: 1:    '✅f(aaa) = aaa',
194: 1:    '✅f(123) = 312',
194: 1:    '✅f(dEf) = fdE',
194: 1:    '✅f(zxc) = czx',
194: 1:    '✅f(qwe) = eqw',
194: 1:    '✅f(rty) = yrt',
194: 1:    '✅f(mnb) = bmn',
194: 1:    '✅f(vbn) = nvb',
194: 1:    '✅f(fgh) = hfg',
194: 1:    '✅f(ijk) = kij',
194: 1:    '✅f(lmn) = nlm',
194: 1:    '✅f(pqr) = rpq',
194: 1:    '✅f(stu) = ust',
194: 1:    '✅f(wxy) = ywx',
194: 1:    '✅f(222) = 222',
194: 1:    '✅f(789) = 978',
194: 1:    '❌f(090) = ??? != 009'
194: 1:  ],
194: 1:  'level': 6,
194: 1:  'nextQuestion': '090',
194: 1:  'questions': [
194: 1:    'abc',
194: 1:    'cad',
194: 1:    'asd',
194: 1:    'xyz',
194: 1:    'aaa',
194: 1:    '123',
194: 1:    'dEf',
194: 1:    'zxc',
194: 1:    'qwe',
194: 1:    'rty',
194: 1:    'mnb',
194: 1:    'vbn',
194: 1:    'fgh',
194: 1:    'ijk',
194: 1:    'lmn',
194: 1:    'pqr',
194: 1:    'stu',
194: 1:    'wxy',
194: 1:    '222',
194: 1:    '789',
194: 1:    '090'
194: 1:  ]
194: 1:}
194: 1:Scores: 5095
194: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb', 'hfg', 'kij', 'nlm', 'rpq', 'ust', 'ywx', '222', '978', '009']')
194: 1:Fire Event: PassTest{complexity=10, testCount=21}
194: 1:Fire Event: NextAlgorithm{complexity=10, time=0}
------------------------------------------
195: 1:BoardData {
195: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
195: 1:  'history': [
195: 1:    {
195: 1:      'answer': 'cab',
195: 1:      'question': 'abc',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': 'dca',
195: 1:      'question': 'cad',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': 'das',
195: 1:      'question': 'asd',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': 'zxy',
195: 1:      'question': 'xyz',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': 'aaa',
195: 1:      'question': 'aaa',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': '312',
195: 1:      'question': '123',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': 'fdE',
195: 1:      'question': 'dEf',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': 'czx',
195: 1:      'question': 'zxc',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': 'eqw',
195: 1:      'question': 'qwe',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': 'yrt',
195: 1:      'question': 'rty',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': 'bmn',
195: 1:      'question': 'mnb',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': 'nvb',
195: 1:      'question': 'vbn',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': 'hfg',
195: 1:      'question': 'fgh',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': 'kij',
195: 1:      'question': 'ijk',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': 'nlm',
195: 1:      'question': 'lmn',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': 'rpq',
195: 1:      'question': 'pqr',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': 'ust',
195: 1:      'question': 'stu',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': 'ywx',
195: 1:      'question': 'wxy',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': '222',
195: 1:      'question': '222',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': '978',
195: 1:      'question': '789',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': '009',
195: 1:      'question': '090',
195: 1:      'valid': true
195: 1:    }
195: 1:  ],
195: 1:  'info': [
195: 1:    '✅f(abc) = cab',
195: 1:    '✅f(cad) = dca',
195: 1:    '✅f(asd) = das',
195: 1:    '✅f(xyz) = zxy',
195: 1:    '✅f(aaa) = aaa',
195: 1:    '✅f(123) = 312',
195: 1:    '✅f(dEf) = fdE',
195: 1:    '✅f(zxc) = czx',
195: 1:    '✅f(qwe) = eqw',
195: 1:    '✅f(rty) = yrt',
195: 1:    '✅f(mnb) = bmn',
195: 1:    '✅f(vbn) = nvb',
195: 1:    '✅f(fgh) = hfg',
195: 1:    '✅f(ijk) = kij',
195: 1:    '✅f(lmn) = nlm',
195: 1:    '✅f(pqr) = rpq',
195: 1:    '✅f(stu) = ust',
195: 1:    '✅f(wxy) = ywx',
195: 1:    '✅f(222) = 222',
195: 1:    '✅f(789) = 978',
195: 1:    '✅f(090) = 009'
195: 1:  ],
195: 1:  'level': 6,
195: 1:  'questions': []
195: 1:}
195: 1:Scores: 6448
195: 1:Answer: message('StartNextLevel')
195: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
196: 1:BoardData {
196: 1:  'description': [
196: 1:    'Write a javascript function that converts number from one numeral system to another.',
196: 1:    'Method should accept number, source numeral system and target numeral system.',
196: 1:    'Use the spread operator to parse arguments.',
196: 1:    'Don't convert the number to decimal (base 10) first. Just convert to target numeral system.',
196: 1:    'Remove everything from the script except for the function logic.'
196: 1:  ],
196: 1:  'expectedAnswer': '10',
196: 1:  'history': [],
196: 1:  'info': ['❌f(10, 10, 10) = ??? != 10'],
196: 1:  'level': 7,
196: 1:  'nextQuestion': '10, 10, 10',
196: 1:  'questions': ['10, 10, 10']
196: 1:}
196: 1:Scores: 6448
196: 1:Answer: message('['10']')
196: 1:Fire Event: PassTest{complexity=11, testCount=21}
------------------------------------------
197: 1:BoardData {
197: 1:  'description': [
197: 1:    'Write a javascript function that converts number from one numeral system to another.',
197: 1:    'Method should accept number, source numeral system and target numeral system.',
197: 1:    'Use the spread operator to parse arguments.',
197: 1:    'Don't convert the number to decimal (base 10) first. Just convert to target numeral system.',
197: 1:    'Remove everything from the script except for the function logic.'
197: 1:  ],
197: 1:  'expectedAnswer': '1010',
197: 1:  'history': [{
197: 1:    'answer': '10',
197: 1:    'question': '10, 10, 10',
197: 1:    'valid': true
197: 1:  }],
197: 1:  'info': [
197: 1:    '✅f(10, 10, 10) = 10',
197: 1:    '❌f(10, 10, 2) = ??? != 1010'
197: 1:  ],
197: 1:  'level': 7,
197: 1:  'nextQuestion': '10, 10, 2',
197: 1:  'questions': [
197: 1:    '10, 10, 10',
197: 1:    '10, 10, 2'
197: 1:  ]
197: 1:}
197: 1:Scores: 6453
197: 1:Answer: message('['10', '1010']')
197: 1:Fire Event: PassTest{complexity=11, testCount=21}
------------------------------------------
198: 1:BoardData {
198: 1:  'description': [
198: 1:    'Write a javascript function that converts number from one numeral system to another.',
198: 1:    'Method should accept number, source numeral system and target numeral system.',
198: 1:    'Use the spread operator to parse arguments.',
198: 1:    'Don't convert the number to decimal (base 10) first. Just convert to target numeral system.',
198: 1:    'Remove everything from the script except for the function logic.'
198: 1:  ],
198: 1:  'expectedAnswer': '2',
198: 1:  'history': [
198: 1:    {
198: 1:      'answer': '10',
198: 1:      'question': '10, 10, 10',
198: 1:      'valid': true
198: 1:    },
198: 1:    {
198: 1:      'answer': '1010',
198: 1:      'question': '10, 10, 2',
198: 1:      'valid': true
198: 1:    }
198: 1:  ],
198: 1:  'info': [
198: 1:    '✅f(10, 10, 10) = 10',
198: 1:    '✅f(10, 10, 2) = 1010',
198: 1:    '❌f(10, 2, 10) = ??? != 2'
198: 1:  ],
198: 1:  'level': 7,
198: 1:  'nextQuestion': '10, 2, 10',
198: 1:  'questions': [
198: 1:    '10, 10, 10',
198: 1:    '10, 10, 2',
198: 1:    '10, 2, 10'
198: 1:  ]
198: 1:}
198: 1:Scores: 6458
198: 1:Answer: message('['10', '1010', '2']')
198: 1:Fire Event: PassTest{complexity=11, testCount=21}
------------------------------------------
199: 1:BoardData {
199: 1:  'description': [
199: 1:    'Write a javascript function that converts number from one numeral system to another.',
199: 1:    'Method should accept number, source numeral system and target numeral system.',
199: 1:    'Use the spread operator to parse arguments.',
199: 1:    'Don't convert the number to decimal (base 10) first. Just convert to target numeral system.',
199: 1:    'Remove everything from the script except for the function logic.'
199: 1:  ],
199: 1:  'expectedAnswer': '3e8',
199: 1:  'history': [
199: 1:    {
199: 1:      'answer': '10',
199: 1:      'question': '10, 10, 10',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '1010',
199: 1:      'question': '10, 10, 2',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '2',
199: 1:      'question': '10, 2, 10',
199: 1:      'valid': true
199: 1:    }
199: 1:  ],
199: 1:  'info': [
199: 1:    '✅f(10, 10, 10) = 10',
199: 1:    '✅f(10, 10, 2) = 1010',
199: 1:    '✅f(10, 2, 10) = 2',
199: 1:    '❌f(1000, 10, 16) = ??? != 3e8'
199: 1:  ],
199: 1:  'level': 7,
199: 1:  'nextQuestion': '1000, 10, 16',
199: 1:  'questions': [
199: 1:    '10, 10, 10',
199: 1:    '10, 10, 2',
199: 1:    '10, 2, 10',
199: 1:    '1000, 10, 16'
199: 1:  ]
199: 1:}
199: 1:Scores: 6463
199: 1:Answer: message('['10', '1010', '2', '3e8']')
199: 1:Fire Event: PassTest{complexity=11, testCount=21}
------------------------------------------
200: 1:BoardData {
200: 1:  'description': [
200: 1:    'Write a javascript function that converts number from one numeral system to another.',
200: 1:    'Method should accept number, source numeral system and target numeral system.',
200: 1:    'Use the spread operator to parse arguments.',
200: 1:    'Don't convert the number to decimal (base 10) first. Just convert to target numeral system.',
200: 1:    'Remove everything from the script except for the function logic.'
200: 1:  ],
200: 1:  'expectedAnswer': '4096',
200: 1:  'history': [
200: 1:    {
200: 1:      'answer': '10',
200: 1:      'question': '10, 10, 10',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '1010',
200: 1:      'question': '10, 10, 2',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '2',
200: 1:      'question': '10, 2, 10',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '3e8',
200: 1:      'question': '1000, 10, 16',
200: 1:      'valid': true
200: 1:    }
200: 1:  ],
200: 1:  'info': [
200: 1:    '✅f(10, 10, 10) = 10',
200: 1:    '✅f(10, 10, 2) = 1010',
200: 1:    '✅f(10, 2, 10) = 2',
200: 1:    '✅f(1000, 10, 16) = 3e8',
200: 1:    '❌f(1000, 16, 10) = ??? != 4096'
200: 1:  ],
200: 1:  'level': 7,
200: 1:  'nextQuestion': '1000, 16, 10',
200: 1:  'questions': [
200: 1:    '10, 10, 10',
200: 1:    '10, 10, 2',
200: 1:    '10, 2, 10',
200: 1:    '1000, 10, 16',
200: 1:    '1000, 16, 10'
200: 1:  ]
200: 1:}
200: 1:Scores: 6468
200: 1:Answer: message('['10', '1010', '2', '3e8', '4096']')
200: 1:Fire Event: PassTest{complexity=11, testCount=21}
------------------------------------------
201: 1:BoardData {
201: 1:  'description': [
201: 1:    'Write a javascript function that converts number from one numeral system to another.',
201: 1:    'Method should accept number, source numeral system and target numeral system.',
201: 1:    'Use the spread operator to parse arguments.',
201: 1:    'Don't convert the number to decimal (base 10) first. Just convert to target numeral system.',
201: 1:    'Remove everything from the script except for the function logic.'
201: 1:  ],
201: 1:  'expectedAnswer': '1000000000000',
201: 1:  'history': [
201: 1:    {
201: 1:      'answer': '10',
201: 1:      'question': '10, 10, 10',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '1010',
201: 1:      'question': '10, 10, 2',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '2',
201: 1:      'question': '10, 2, 10',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '3e8',
201: 1:      'question': '1000, 10, 16',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '4096',
201: 1:      'question': '1000, 16, 10',
201: 1:      'valid': true
201: 1:    }
201: 1:  ],
201: 1:  'info': [
201: 1:    '✅f(10, 10, 10) = 10',
201: 1:    '✅f(10, 10, 2) = 1010',
201: 1:    '✅f(10, 2, 10) = 2',
201: 1:    '✅f(1000, 10, 16) = 3e8',
201: 1:    '✅f(1000, 16, 10) = 4096',
201: 1:    '❌f(1000, 16, 2) = ??? != 1000000000000'
201: 1:  ],
201: 1:  'level': 7,
201: 1:  'nextQuestion': '1000, 16, 2',
201: 1:  'questions': [
201: 1:    '10, 10, 10',
201: 1:    '10, 10, 2',
201: 1:    '10, 2, 10',
201: 1:    '1000, 10, 16',
201: 1:    '1000, 16, 10',
201: 1:    '1000, 16, 2'
201: 1:  ]
201: 1:}
201: 1:Scores: 6473
201: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000']')
201: 1:Fire Event: PassTest{complexity=11, testCount=21}
------------------------------------------
202: 1:BoardData {
202: 1:  'description': [
202: 1:    'Write a javascript function that converts number from one numeral system to another.',
202: 1:    'Method should accept number, source numeral system and target numeral system.',
202: 1:    'Use the spread operator to parse arguments.',
202: 1:    'Don't convert the number to decimal (base 10) first. Just convert to target numeral system.',
202: 1:    'Remove everything from the script except for the function logic.'
202: 1:  ],
202: 1:  'expectedAnswer': '1101011001101',
202: 1:  'history': [
202: 1:    {
202: 1:      'answer': '10',
202: 1:      'question': '10, 10, 10',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '1010',
202: 1:      'question': '10, 10, 2',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '2',
202: 1:      'question': '10, 2, 10',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '3e8',
202: 1:      'question': '1000, 10, 16',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '4096',
202: 1:      'question': '1000, 16, 10',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '1000000000000',
202: 1:      'question': '1000, 16, 2',
202: 1:      'valid': true
202: 1:    }
202: 1:  ],
202: 1:  'info': [
202: 1:    '✅f(10, 10, 10) = 10',
202: 1:    '✅f(10, 10, 2) = 1010',
202: 1:    '✅f(10, 2, 10) = 2',
202: 1:    '✅f(1000, 10, 16) = 3e8',
202: 1:    '✅f(1000, 16, 10) = 4096',
202: 1:    '✅f(1000, 16, 2) = 1000000000000',
202: 1:    '❌f(1ACD, 16, 2) = ??? != 1101011001101'
202: 1:  ],
202: 1:  'level': 7,
202: 1:  'nextQuestion': '1ACD, 16, 2',
202: 1:  'questions': [
202: 1:    '10, 10, 10',
202: 1:    '10, 10, 2',
202: 1:    '10, 2, 10',
202: 1:    '1000, 10, 16',
202: 1:    '1000, 16, 10',
202: 1:    '1000, 16, 2',
202: 1:    '1ACD, 16, 2'
202: 1:  ]
202: 1:}
202: 1:Scores: 6478
202: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101']')
202: 1:Fire Event: PassTest{complexity=11, testCount=21}
------------------------------------------
203: 1:BoardData {
203: 1:  'description': [
203: 1:    'Write a javascript function that converts number from one numeral system to another.',
203: 1:    'Method should accept number, source numeral system and target numeral system.',
203: 1:    'Use the spread operator to parse arguments.',
203: 1:    'Don't convert the number to decimal (base 10) first. Just convert to target numeral system.',
203: 1:    'Remove everything from the script except for the function logic.'
203: 1:  ],
203: 1:  'expectedAnswer': '1010101111001101',
203: 1:  'history': [
203: 1:    {
203: 1:      'answer': '10',
203: 1:      'question': '10, 10, 10',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '1010',
203: 1:      'question': '10, 10, 2',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '2',
203: 1:      'question': '10, 2, 10',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '3e8',
203: 1:      'question': '1000, 10, 16',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '4096',
203: 1:      'question': '1000, 16, 10',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '1000000000000',
203: 1:      'question': '1000, 16, 2',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '1101011001101',
203: 1:      'question': '1ACD, 16, 2',
203: 1:      'valid': true
203: 1:    }
203: 1:  ],
203: 1:  'info': [
203: 1:    '✅f(10, 10, 10) = 10',
203: 1:    '✅f(10, 10, 2) = 1010',
203: 1:    '✅f(10, 2, 10) = 2',
203: 1:    '✅f(1000, 10, 16) = 3e8',
203: 1:    '✅f(1000, 16, 10) = 4096',
203: 1:    '✅f(1000, 16, 2) = 1000000000000',
203: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
203: 1:    '❌f(ABCD, 16, 2) = ??? != 1010101111001101'
203: 1:  ],
203: 1:  'level': 7,
203: 1:  'nextQuestion': 'ABCD, 16, 2',
203: 1:  'questions': [
203: 1:    '10, 10, 10',
203: 1:    '10, 10, 2',
203: 1:    '10, 2, 10',
203: 1:    '1000, 10, 16',
203: 1:    '1000, 16, 10',
203: 1:    '1000, 16, 2',
203: 1:    '1ACD, 16, 2',
203: 1:    'ABCD, 16, 2'
203: 1:  ]
203: 1:}
203: 1:Scores: 6483
203: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101', '1010101111001101']')
203: 1:Fire Event: PassTest{complexity=11, testCount=21}
------------------------------------------
204: 1:BoardData {
204: 1:  'description': [
204: 1:    'Write a javascript function that converts number from one numeral system to another.',
204: 1:    'Method should accept number, source numeral system and target numeral system.',
204: 1:    'Use the spread operator to parse arguments.',
204: 1:    'Don't convert the number to decimal (base 10) first. Just convert to target numeral system.',
204: 1:    'Remove everything from the script except for the function logic.'
204: 1:  ],
204: 1:  'expectedAnswer': '13502',
204: 1:  'history': [
204: 1:    {
204: 1:      'answer': '10',
204: 1:      'question': '10, 10, 10',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '1010',
204: 1:      'question': '10, 10, 2',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '2',
204: 1:      'question': '10, 2, 10',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '3e8',
204: 1:      'question': '1000, 10, 16',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '4096',
204: 1:      'question': '1000, 16, 10',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '1000000000000',
204: 1:      'question': '1000, 16, 2',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '1101011001101',
204: 1:      'question': '1ACD, 16, 2',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '1010101111001101',
204: 1:      'question': 'ABCD, 16, 2',
204: 1:      'valid': true
204: 1:    }
204: 1:  ],
204: 1:  'info': [
204: 1:    '✅f(10, 10, 10) = 10',
204: 1:    '✅f(10, 10, 2) = 1010',
204: 1:    '✅f(10, 2, 10) = 2',
204: 1:    '✅f(1000, 10, 16) = 3e8',
204: 1:    '✅f(1000, 16, 10) = 4096',
204: 1:    '✅f(1000, 16, 2) = 1000000000000',
204: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
204: 1:    '✅f(ABCD, 16, 2) = 1010101111001101',
204: 1:    '❌f(34BE, 16, 10) = ??? != 13502'
204: 1:  ],
204: 1:  'level': 7,
204: 1:  'nextQuestion': '34BE, 16, 10',
204: 1:  'questions': [
204: 1:    '10, 10, 10',
204: 1:    '10, 10, 2',
204: 1:    '10, 2, 10',
204: 1:    '1000, 10, 16',
204: 1:    '1000, 16, 10',
204: 1:    '1000, 16, 2',
204: 1:    '1ACD, 16, 2',
204: 1:    'ABCD, 16, 2',
204: 1:    '34BE, 16, 10'
204: 1:  ]
204: 1:}
204: 1:Scores: 6488
204: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101', '1010101111001101', '13502']')
204: 1:Fire Event: PassTest{complexity=11, testCount=21}
------------------------------------------
205: 1:BoardData {
205: 1:  'description': [
205: 1:    'Write a javascript function that converts number from one numeral system to another.',
205: 1:    'Method should accept number, source numeral system and target numeral system.',
205: 1:    'Use the spread operator to parse arguments.',
205: 1:    'Don't convert the number to decimal (base 10) first. Just convert to target numeral system.',
205: 1:    'Remove everything from the script except for the function logic.'
205: 1:  ],
205: 1:  'expectedAnswer': '8',
205: 1:  'history': [
205: 1:    {
205: 1:      'answer': '10',
205: 1:      'question': '10, 10, 10',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '1010',
205: 1:      'question': '10, 10, 2',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '2',
205: 1:      'question': '10, 2, 10',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '3e8',
205: 1:      'question': '1000, 10, 16',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '4096',
205: 1:      'question': '1000, 16, 10',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '1000000000000',
205: 1:      'question': '1000, 16, 2',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '1101011001101',
205: 1:      'question': '1ACD, 16, 2',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '1010101111001101',
205: 1:      'question': 'ABCD, 16, 2',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '13502',
205: 1:      'question': '34BE, 16, 10',
205: 1:      'valid': true
205: 1:    }
205: 1:  ],
205: 1:  'info': [
205: 1:    '✅f(10, 10, 10) = 10',
205: 1:    '✅f(10, 10, 2) = 1010',
205: 1:    '✅f(10, 2, 10) = 2',
205: 1:    '✅f(1000, 10, 16) = 3e8',
205: 1:    '✅f(1000, 16, 10) = 4096',
205: 1:    '✅f(1000, 16, 2) = 1000000000000',
205: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
205: 1:    '✅f(ABCD, 16, 2) = 1010101111001101',
205: 1:    '✅f(34BE, 16, 10) = 13502',
205: 1:    '❌f(1000, 2, 16) = ??? != 8'
205: 1:  ],
205: 1:  'level': 7,
205: 1:  'nextQuestion': '1000, 2, 16',
205: 1:  'questions': [
205: 1:    '10, 10, 10',
205: 1:    '10, 10, 2',
205: 1:    '10, 2, 10',
205: 1:    '1000, 10, 16',
205: 1:    '1000, 16, 10',
205: 1:    '1000, 16, 2',
205: 1:    '1ACD, 16, 2',
205: 1:    'ABCD, 16, 2',
205: 1:    '34BE, 16, 10',
205: 1:    '1000, 2, 16'
205: 1:  ]
205: 1:}
205: 1:Scores: 6493
205: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101', '1010101111001101', '13502', '8']')
205: 1:Fire Event: PassTest{complexity=11, testCount=21}
------------------------------------------
206: 1:BoardData {
206: 1:  'description': [
206: 1:    'Write a javascript function that converts number from one numeral system to another.',
206: 1:    'Method should accept number, source numeral system and target numeral system.',
206: 1:    'Use the spread operator to parse arguments.',
206: 1:    'Don't convert the number to decimal (base 10) first. Just convert to target numeral system.',
206: 1:    'Remove everything from the script except for the function logic.'
206: 1:  ],
206: 1:  'expectedAnswer': 'a',
206: 1:  'history': [
206: 1:    {
206: 1:      'answer': '10',
206: 1:      'question': '10, 10, 10',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '1010',
206: 1:      'question': '10, 10, 2',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '2',
206: 1:      'question': '10, 2, 10',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '3e8',
206: 1:      'question': '1000, 10, 16',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '4096',
206: 1:      'question': '1000, 16, 10',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '1000000000000',
206: 1:      'question': '1000, 16, 2',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '1101011001101',
206: 1:      'question': '1ACD, 16, 2',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '1010101111001101',
206: 1:      'question': 'ABCD, 16, 2',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '13502',
206: 1:      'question': '34BE, 16, 10',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '8',
206: 1:      'question': '1000, 2, 16',
206: 1:      'valid': true
206: 1:    }
206: 1:  ],
206: 1:  'info': [
206: 1:    '✅f(10, 10, 10) = 10',
206: 1:    '✅f(10, 10, 2) = 1010',
206: 1:    '✅f(10, 2, 10) = 2',
206: 1:    '✅f(1000, 10, 16) = 3e8',
206: 1:    '✅f(1000, 16, 10) = 4096',
206: 1:    '✅f(1000, 16, 2) = 1000000000000',
206: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
206: 1:    '✅f(ABCD, 16, 2) = 1010101111001101',
206: 1:    '✅f(34BE, 16, 10) = 13502',
206: 1:    '✅f(1000, 2, 16) = 8',
206: 1:    '❌f(1010, 2, 16) = ??? != a'
206: 1:  ],
206: 1:  'level': 7,
206: 1:  'nextQuestion': '1010, 2, 16',
206: 1:  'questions': [
206: 1:    '10, 10, 10',
206: 1:    '10, 10, 2',
206: 1:    '10, 2, 10',
206: 1:    '1000, 10, 16',
206: 1:    '1000, 16, 10',
206: 1:    '1000, 16, 2',
206: 1:    '1ACD, 16, 2',
206: 1:    'ABCD, 16, 2',
206: 1:    '34BE, 16, 10',
206: 1:    '1000, 2, 16',
206: 1:    '1010, 2, 16'
206: 1:  ]
206: 1:}
206: 1:Scores: 6498
206: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101', '1010101111001101', '13502', '8', 'a']')
206: 1:Fire Event: PassTest{complexity=11, testCount=21}
------------------------------------------
207: 1:BoardData {
207: 1:  'description': [
207: 1:    'Write a javascript function that converts number from one numeral system to another.',
207: 1:    'Method should accept number, source numeral system and target numeral system.',
207: 1:    'Use the spread operator to parse arguments.',
207: 1:    'Don't convert the number to decimal (base 10) first. Just convert to target numeral system.',
207: 1:    'Remove everything from the script except for the function logic.'
207: 1:  ],
207: 1:  'expectedAnswer': '1111',
207: 1:  'history': [
207: 1:    {
207: 1:      'answer': '10',
207: 1:      'question': '10, 10, 10',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '1010',
207: 1:      'question': '10, 10, 2',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '2',
207: 1:      'question': '10, 2, 10',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '3e8',
207: 1:      'question': '1000, 10, 16',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '4096',
207: 1:      'question': '1000, 16, 10',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '1000000000000',
207: 1:      'question': '1000, 16, 2',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '1101011001101',
207: 1:      'question': '1ACD, 16, 2',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '1010101111001101',
207: 1:      'question': 'ABCD, 16, 2',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '13502',
207: 1:      'question': '34BE, 16, 10',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '8',
207: 1:      'question': '1000, 2, 16',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': 'a',
207: 1:      'question': '1010, 2, 16',
207: 1:      'valid': true
207: 1:    }
207: 1:  ],
207: 1:  'info': [
207: 1:    '✅f(10, 10, 10) = 10',
207: 1:    '✅f(10, 10, 2) = 1010',
207: 1:    '✅f(10, 2, 10) = 2',
207: 1:    '✅f(1000, 10, 16) = 3e8',
207: 1:    '✅f(1000, 16, 10) = 4096',
207: 1:    '✅f(1000, 16, 2) = 1000000000000',
207: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
207: 1:    '✅f(ABCD, 16, 2) = 1010101111001101',
207: 1:    '✅f(34BE, 16, 10) = 13502',
207: 1:    '✅f(1000, 2, 16) = 8',
207: 1:    '✅f(1010, 2, 16) = a',
207: 1:    '❌f(1010101, 2, 4) = ??? != 1111'
207: 1:  ],
207: 1:  'level': 7,
207: 1:  'nextQuestion': '1010101, 2, 4',
207: 1:  'questions': [
207: 1:    '10, 10, 10',
207: 1:    '10, 10, 2',
207: 1:    '10, 2, 10',
207: 1:    '1000, 10, 16',
207: 1:    '1000, 16, 10',
207: 1:    '1000, 16, 2',
207: 1:    '1ACD, 16, 2',
207: 1:    'ABCD, 16, 2',
207: 1:    '34BE, 16, 10',
207: 1:    '1000, 2, 16',
207: 1:    '1010, 2, 16',
207: 1:    '1010101, 2, 4'
207: 1:  ]
207: 1:}
207: 1:Scores: 6503
207: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101', '1010101111001101', '13502', '8', 'a', '1111']')
207: 1:Fire Event: PassTest{complexity=11, testCount=21}
------------------------------------------
208: 1:BoardData {
208: 1:  'description': [
208: 1:    'Write a javascript function that converts number from one numeral system to another.',
208: 1:    'Method should accept number, source numeral system and target numeral system.',
208: 1:    'Use the spread operator to parse arguments.',
208: 1:    'Don't convert the number to decimal (base 10) first. Just convert to target numeral system.',
208: 1:    'Remove everything from the script except for the function logic.'
208: 1:  ],
208: 1:  'expectedAnswer': '221',
208: 1:  'history': [
208: 1:    {
208: 1:      'answer': '10',
208: 1:      'question': '10, 10, 10',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '1010',
208: 1:      'question': '10, 10, 2',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '2',
208: 1:      'question': '10, 2, 10',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '3e8',
208: 1:      'question': '1000, 10, 16',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '4096',
208: 1:      'question': '1000, 16, 10',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '1000000000000',
208: 1:      'question': '1000, 16, 2',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '1101011001101',
208: 1:      'question': '1ACD, 16, 2',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '1010101111001101',
208: 1:      'question': 'ABCD, 16, 2',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '13502',
208: 1:      'question': '34BE, 16, 10',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '8',
208: 1:      'question': '1000, 2, 16',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': 'a',
208: 1:      'question': '1010, 2, 16',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '1111',
208: 1:      'question': '1010101, 2, 4',
208: 1:      'valid': true
208: 1:    }
208: 1:  ],
208: 1:  'info': [
208: 1:    '✅f(10, 10, 10) = 10',
208: 1:    '✅f(10, 10, 2) = 1010',
208: 1:    '✅f(10, 2, 10) = 2',
208: 1:    '✅f(1000, 10, 16) = 3e8',
208: 1:    '✅f(1000, 16, 10) = 4096',
208: 1:    '✅f(1000, 16, 2) = 1000000000000',
208: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
208: 1:    '✅f(ABCD, 16, 2) = 1010101111001101',
208: 1:    '✅f(34BE, 16, 10) = 13502',
208: 1:    '✅f(1000, 2, 16) = 8',
208: 1:    '✅f(1010, 2, 16) = a',
208: 1:    '✅f(1010101, 2, 4) = 1111',
208: 1:    '❌f(1010101, 2, 6) = ??? != 221'
208: 1:  ],
208: 1:  'level': 7,
208: 1:  'nextQuestion': '1010101, 2, 6',
208: 1:  'questions': [
208: 1:    '10, 10, 10',
208: 1:    '10, 10, 2',
208: 1:    '10, 2, 10',
208: 1:    '1000, 10, 16',
208: 1:    '1000, 16, 10',
208: 1:    '1000, 16, 2',
208: 1:    '1ACD, 16, 2',
208: 1:    'ABCD, 16, 2',
208: 1:    '34BE, 16, 10',
208: 1:    '1000, 2, 16',
208: 1:    '1010, 2, 16',
208: 1:    '1010101, 2, 4',
208: 1:    '1010101, 2, 6'
208: 1:  ]
208: 1:}
208: 1:Scores: 6508
208: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101', '1010101111001101', '13502', '8', 'a', '1111', '221']')
208: 1:Fire Event: PassTest{complexity=11, testCount=21}
------------------------------------------
209: 1:BoardData {
209: 1:  'description': [
209: 1:    'Write a javascript function that converts number from one numeral system to another.',
209: 1:    'Method should accept number, source numeral system and target numeral system.',
209: 1:    'Use the spread operator to parse arguments.',
209: 1:    'Don't convert the number to decimal (base 10) first. Just convert to target numeral system.',
209: 1:    'Remove everything from the script except for the function logic.'
209: 1:  ],
209: 1:  'expectedAnswer': '125',
209: 1:  'history': [
209: 1:    {
209: 1:      'answer': '10',
209: 1:      'question': '10, 10, 10',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '1010',
209: 1:      'question': '10, 10, 2',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '2',
209: 1:      'question': '10, 2, 10',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '3e8',
209: 1:      'question': '1000, 10, 16',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '4096',
209: 1:      'question': '1000, 16, 10',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '1000000000000',
209: 1:      'question': '1000, 16, 2',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '1101011001101',
209: 1:      'question': '1ACD, 16, 2',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '1010101111001101',
209: 1:      'question': 'ABCD, 16, 2',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '13502',
209: 1:      'question': '34BE, 16, 10',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '8',
209: 1:      'question': '1000, 2, 16',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': 'a',
209: 1:      'question': '1010, 2, 16',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '1111',
209: 1:      'question': '1010101, 2, 4',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '221',
209: 1:      'question': '1010101, 2, 6',
209: 1:      'valid': true
209: 1:    }
209: 1:  ],
209: 1:  'info': [
209: 1:    '✅f(10, 10, 10) = 10',
209: 1:    '✅f(10, 10, 2) = 1010',
209: 1:    '✅f(10, 2, 10) = 2',
209: 1:    '✅f(1000, 10, 16) = 3e8',
209: 1:    '✅f(1000, 16, 10) = 4096',
209: 1:    '✅f(1000, 16, 2) = 1000000000000',
209: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
209: 1:    '✅f(ABCD, 16, 2) = 1010101111001101',
209: 1:    '✅f(34BE, 16, 10) = 13502',
209: 1:    '✅f(1000, 2, 16) = 8',
209: 1:    '✅f(1010, 2, 16) = a',
209: 1:    '✅f(1010101, 2, 4) = 1111',
209: 1:    '✅f(1010101, 2, 6) = 221',
209: 1:    '❌f(1010101, 2, 8) = ??? != 125'
209: 1:  ],
209: 1:  'level': 7,
209: 1:  'nextQuestion': '1010101, 2, 8',
209: 1:  'questions': [
209: 1:    '10, 10, 10',
209: 1:    '10, 10, 2',
209: 1:    '10, 2, 10',
209: 1:    '1000, 10, 16',
209: 1:    '1000, 16, 10',
209: 1:    '1000, 16, 2',
209: 1:    '1ACD, 16, 2',
209: 1:    'ABCD, 16, 2',
209: 1:    '34BE, 16, 10',
209: 1:    '1000, 2, 16',
209: 1:    '1010, 2, 16',
209: 1:    '1010101, 2, 4',
209: 1:    '1010101, 2, 6',
209: 1:    '1010101, 2, 8'
209: 1:  ]
209: 1:}
209: 1:Scores: 6513
209: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101', '1010101111001101', '13502', '8', 'a', '1111', '221', '125']')
209: 1:Fire Event: PassTest{complexity=11, testCount=21}
------------------------------------------
210: 1:BoardData {
210: 1:  'description': [
210: 1:    'Write a javascript function that converts number from one numeral system to another.',
210: 1:    'Method should accept number, source numeral system and target numeral system.',
210: 1:    'Use the spread operator to parse arguments.',
210: 1:    'Don't convert the number to decimal (base 10) first. Just convert to target numeral system.',
210: 1:    'Remove everything from the script except for the function logic.'
210: 1:  ],
210: 1:  'expectedAnswer': '85',
210: 1:  'history': [
210: 1:    {
210: 1:      'answer': '10',
210: 1:      'question': '10, 10, 10',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '1010',
210: 1:      'question': '10, 10, 2',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '2',
210: 1:      'question': '10, 2, 10',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '3e8',
210: 1:      'question': '1000, 10, 16',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '4096',
210: 1:      'question': '1000, 16, 10',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '1000000000000',
210: 1:      'question': '1000, 16, 2',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '1101011001101',
210: 1:      'question': '1ACD, 16, 2',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '1010101111001101',
210: 1:      'question': 'ABCD, 16, 2',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '13502',
210: 1:      'question': '34BE, 16, 10',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '8',
210: 1:      'question': '1000, 2, 16',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': 'a',
210: 1:      'question': '1010, 2, 16',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '1111',
210: 1:      'question': '1010101, 2, 4',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '221',
210: 1:      'question': '1010101, 2, 6',
210: 1:      'valid': true
210: 1:    },
210: 1:    {
210: 1:      'answer': '125',
210: 1:      'question': '1010101, 2, 8',
210: 1:      'valid': true
210: 1:    }
210: 1:  ],
210: 1:  'info': [
210: 1:    '✅f(10, 10, 10) = 10',
210: 1:    '✅f(10, 10, 2) = 1010',
210: 1:    '✅f(10, 2, 10) = 2',
210: 1:    '✅f(1000, 10, 16) = 3e8',
210: 1:    '✅f(1000, 16, 10) = 4096',
210: 1:    '✅f(1000, 16, 2) = 1000000000000',
210: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
210: 1:    '✅f(ABCD, 16, 2) = 1010101111001101',
210: 1:    '✅f(34BE, 16, 10) = 13502',
210: 1:    '✅f(1000, 2, 16) = 8',
210: 1:    '✅f(1010, 2, 16) = a',
210: 1:    '✅f(1010101, 2, 4) = 1111',
210: 1:    '✅f(1010101, 2, 6) = 221',
210: 1:    '✅f(1010101, 2, 8) = 125',
210: 1:    '❌f(1010101, 2, 10) = ??? != 85'
210: 1:  ],
210: 1:  'level': 7,
210: 1:  'nextQuestion': '1010101, 2, 10',
210: 1:  'questions': [
210: 1:    '10, 10, 10',
210: 1:    '10, 10, 2',
210: 1:    '10, 2, 10',
210: 1:    '1000, 10, 16',
210: 1:    '1000, 16, 10',
210: 1:    '1000, 16, 2',
210: 1:    '1ACD, 16, 2',
210: 1:    'ABCD, 16, 2',
210: 1:    '34BE, 16, 10',
210: 1:    '1000, 2, 16',
210: 1:    '1010, 2, 16',
210: 1:    '1010101, 2, 4',
210: 1:    '1010101, 2, 6',
210: 1:    '1010101, 2, 8',
210: 1:    '1010101, 2, 10'
210: 1:  ]
210: 1:}
210: 1:Scores: 6518
210: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101', '1010101111001101', '13502', '8', 'a', '1111', '221', '125', '85']')
210: 1:Fire Event: PassTest{complexity=11, testCount=21}
------------------------------------------
211: 1:BoardData {
211: 1:  'description': [
211: 1:    'Write a javascript function that converts number from one numeral system to another.',
211: 1:    'Method should accept number, source numeral system and target numeral system.',
211: 1:    'Use the spread operator to parse arguments.',
211: 1:    'Don't convert the number to decimal (base 10) first. Just convert to target numeral system.',
211: 1:    'Remove everything from the script except for the function logic.'
211: 1:  ],
211: 1:  'expectedAnswer': '71',
211: 1:  'history': [
211: 1:    {
211: 1:      'answer': '10',
211: 1:      'question': '10, 10, 10',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '1010',
211: 1:      'question': '10, 10, 2',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '2',
211: 1:      'question': '10, 2, 10',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '3e8',
211: 1:      'question': '1000, 10, 16',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '4096',
211: 1:      'question': '1000, 16, 10',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '1000000000000',
211: 1:      'question': '1000, 16, 2',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '1101011001101',
211: 1:      'question': '1ACD, 16, 2',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '1010101111001101',
211: 1:      'question': 'ABCD, 16, 2',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '13502',
211: 1:      'question': '34BE, 16, 10',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '8',
211: 1:      'question': '1000, 2, 16',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': 'a',
211: 1:      'question': '1010, 2, 16',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '1111',
211: 1:      'question': '1010101, 2, 4',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '221',
211: 1:      'question': '1010101, 2, 6',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '125',
211: 1:      'question': '1010101, 2, 8',
211: 1:      'valid': true
211: 1:    },
211: 1:    {
211: 1:      'answer': '85',
211: 1:      'question': '1010101, 2, 10',
211: 1:      'valid': true
211: 1:    }
211: 1:  ],
211: 1:  'info': [
211: 1:    '✅f(10, 10, 10) = 10',
211: 1:    '✅f(10, 10, 2) = 1010',
211: 1:    '✅f(10, 2, 10) = 2',
211: 1:    '✅f(1000, 10, 16) = 3e8',
211: 1:    '✅f(1000, 16, 10) = 4096',
211: 1:    '✅f(1000, 16, 2) = 1000000000000',
211: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
211: 1:    '✅f(ABCD, 16, 2) = 1010101111001101',
211: 1:    '✅f(34BE, 16, 10) = 13502',
211: 1:    '✅f(1000, 2, 16) = 8',
211: 1:    '✅f(1010, 2, 16) = a',
211: 1:    '✅f(1010101, 2, 4) = 1111',
211: 1:    '✅f(1010101, 2, 6) = 221',
211: 1:    '✅f(1010101, 2, 8) = 125',
211: 1:    '✅f(1010101, 2, 10) = 85',
211: 1:    '❌f(1010101, 2, 12) = ??? != 71'
211: 1:  ],
211: 1:  'level': 7,
211: 1:  'nextQuestion': '1010101, 2, 12',
211: 1:  'questions': [
211: 1:    '10, 10, 10',
211: 1:    '10, 10, 2',
211: 1:    '10, 2, 10',
211: 1:    '1000, 10, 16',
211: 1:    '1000, 16, 10',
211: 1:    '1000, 16, 2',
211: 1:    '1ACD, 16, 2',
211: 1:    'ABCD, 16, 2',
211: 1:    '34BE, 16, 10',
211: 1:    '1000, 2, 16',
211: 1:    '1010, 2, 16',
211: 1:    '1010101, 2, 4',
211: 1:    '1010101, 2, 6',
211: 1:    '1010101, 2, 8',
211: 1:    '1010101, 2, 10',
211: 1:    '1010101, 2, 12'
211: 1:  ]
211: 1:}
211: 1:Scores: 6523
211: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101', '1010101111001101', '13502', '8', 'a', '1111', '221', '125', '85', '71']')
211: 1:Fire Event: PassTest{complexity=11, testCount=21}
------------------------------------------
212: 1:BoardData {
212: 1:  'description': [
212: 1:    'Write a javascript function that converts number from one numeral system to another.',
212: 1:    'Method should accept number, source numeral system and target numeral system.',
212: 1:    'Use the spread operator to parse arguments.',
212: 1:    'Don't convert the number to decimal (base 10) first. Just convert to target numeral system.',
212: 1:    'Remove everything from the script except for the function logic.'
212: 1:  ],
212: 1:  'expectedAnswer': '61',
212: 1:  'history': [
212: 1:    {
212: 1:      'answer': '10',
212: 1:      'question': '10, 10, 10',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '1010',
212: 1:      'question': '10, 10, 2',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '2',
212: 1:      'question': '10, 2, 10',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '3e8',
212: 1:      'question': '1000, 10, 16',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '4096',
212: 1:      'question': '1000, 16, 10',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '1000000000000',
212: 1:      'question': '1000, 16, 2',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '1101011001101',
212: 1:      'question': '1ACD, 16, 2',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '1010101111001101',
212: 1:      'question': 'ABCD, 16, 2',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '13502',
212: 1:      'question': '34BE, 16, 10',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '8',
212: 1:      'question': '1000, 2, 16',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': 'a',
212: 1:      'question': '1010, 2, 16',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '1111',
212: 1:      'question': '1010101, 2, 4',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '221',
212: 1:      'question': '1010101, 2, 6',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '125',
212: 1:      'question': '1010101, 2, 8',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '85',
212: 1:      'question': '1010101, 2, 10',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '71',
212: 1:      'question': '1010101, 2, 12',
212: 1:      'valid': true
212: 1:    }
212: 1:  ],
212: 1:  'info': [
212: 1:    '✅f(10, 10, 10) = 10',
212: 1:    '✅f(10, 10, 2) = 1010',
212: 1:    '✅f(10, 2, 10) = 2',
212: 1:    '✅f(1000, 10, 16) = 3e8',
212: 1:    '✅f(1000, 16, 10) = 4096',
212: 1:    '✅f(1000, 16, 2) = 1000000000000',
212: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
212: 1:    '✅f(ABCD, 16, 2) = 1010101111001101',
212: 1:    '✅f(34BE, 16, 10) = 13502',
212: 1:    '✅f(1000, 2, 16) = 8',
212: 1:    '✅f(1010, 2, 16) = a',
212: 1:    '✅f(1010101, 2, 4) = 1111',
212: 1:    '✅f(1010101, 2, 6) = 221',
212: 1:    '✅f(1010101, 2, 8) = 125',
212: 1:    '✅f(1010101, 2, 10) = 85',
212: 1:    '✅f(1010101, 2, 12) = 71',
212: 1:    '❌f(1010101, 2, 14) = ??? != 61'
212: 1:  ],
212: 1:  'level': 7,
212: 1:  'nextQuestion': '1010101, 2, 14',
212: 1:  'questions': [
212: 1:    '10, 10, 10',
212: 1:    '10, 10, 2',
212: 1:    '10, 2, 10',
212: 1:    '1000, 10, 16',
212: 1:    '1000, 16, 10',
212: 1:    '1000, 16, 2',
212: 1:    '1ACD, 16, 2',
212: 1:    'ABCD, 16, 2',
212: 1:    '34BE, 16, 10',
212: 1:    '1000, 2, 16',
212: 1:    '1010, 2, 16',
212: 1:    '1010101, 2, 4',
212: 1:    '1010101, 2, 6',
212: 1:    '1010101, 2, 8',
212: 1:    '1010101, 2, 10',
212: 1:    '1010101, 2, 12',
212: 1:    '1010101, 2, 14'
212: 1:  ]
212: 1:}
212: 1:Scores: 6528
212: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101', '1010101111001101', '13502', '8', 'a', '1111', '221', '125', '85', '71', '61']')
212: 1:Fire Event: PassTest{complexity=11, testCount=21}
------------------------------------------
213: 1:BoardData {
213: 1:  'description': [
213: 1:    'Write a javascript function that converts number from one numeral system to another.',
213: 1:    'Method should accept number, source numeral system and target numeral system.',
213: 1:    'Use the spread operator to parse arguments.',
213: 1:    'Don't convert the number to decimal (base 10) first. Just convert to target numeral system.',
213: 1:    'Remove everything from the script except for the function logic.'
213: 1:  ],
213: 1:  'expectedAnswer': '55',
213: 1:  'history': [
213: 1:    {
213: 1:      'answer': '10',
213: 1:      'question': '10, 10, 10',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '1010',
213: 1:      'question': '10, 10, 2',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '2',
213: 1:      'question': '10, 2, 10',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '3e8',
213: 1:      'question': '1000, 10, 16',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '4096',
213: 1:      'question': '1000, 16, 10',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '1000000000000',
213: 1:      'question': '1000, 16, 2',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '1101011001101',
213: 1:      'question': '1ACD, 16, 2',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '1010101111001101',
213: 1:      'question': 'ABCD, 16, 2',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '13502',
213: 1:      'question': '34BE, 16, 10',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '8',
213: 1:      'question': '1000, 2, 16',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': 'a',
213: 1:      'question': '1010, 2, 16',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '1111',
213: 1:      'question': '1010101, 2, 4',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '221',
213: 1:      'question': '1010101, 2, 6',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '125',
213: 1:      'question': '1010101, 2, 8',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '85',
213: 1:      'question': '1010101, 2, 10',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '71',
213: 1:      'question': '1010101, 2, 12',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '61',
213: 1:      'question': '1010101, 2, 14',
213: 1:      'valid': true
213: 1:    }
213: 1:  ],
213: 1:  'info': [
213: 1:    '✅f(10, 10, 10) = 10',
213: 1:    '✅f(10, 10, 2) = 1010',
213: 1:    '✅f(10, 2, 10) = 2',
213: 1:    '✅f(1000, 10, 16) = 3e8',
213: 1:    '✅f(1000, 16, 10) = 4096',
213: 1:    '✅f(1000, 16, 2) = 1000000000000',
213: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
213: 1:    '✅f(ABCD, 16, 2) = 1010101111001101',
213: 1:    '✅f(34BE, 16, 10) = 13502',
213: 1:    '✅f(1000, 2, 16) = 8',
213: 1:    '✅f(1010, 2, 16) = a',
213: 1:    '✅f(1010101, 2, 4) = 1111',
213: 1:    '✅f(1010101, 2, 6) = 221',
213: 1:    '✅f(1010101, 2, 8) = 125',
213: 1:    '✅f(1010101, 2, 10) = 85',
213: 1:    '✅f(1010101, 2, 12) = 71',
213: 1:    '✅f(1010101, 2, 14) = 61',
213: 1:    '❌f(1010101, 2, 16) = ??? != 55'
213: 1:  ],
213: 1:  'level': 7,
213: 1:  'nextQuestion': '1010101, 2, 16',
213: 1:  'questions': [
213: 1:    '10, 10, 10',
213: 1:    '10, 10, 2',
213: 1:    '10, 2, 10',
213: 1:    '1000, 10, 16',
213: 1:    '1000, 16, 10',
213: 1:    '1000, 16, 2',
213: 1:    '1ACD, 16, 2',
213: 1:    'ABCD, 16, 2',
213: 1:    '34BE, 16, 10',
213: 1:    '1000, 2, 16',
213: 1:    '1010, 2, 16',
213: 1:    '1010101, 2, 4',
213: 1:    '1010101, 2, 6',
213: 1:    '1010101, 2, 8',
213: 1:    '1010101, 2, 10',
213: 1:    '1010101, 2, 12',
213: 1:    '1010101, 2, 14',
213: 1:    '1010101, 2, 16'
213: 1:  ]
213: 1:}
213: 1:Scores: 6533
213: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101', '1010101111001101', '13502', '8', 'a', '1111', '221', '125', '85', '71', '61', '55']')
213: 1:Fire Event: PassTest{complexity=11, testCount=21}
------------------------------------------
214: 1:BoardData {
214: 1:  'description': [
214: 1:    'Write a javascript function that converts number from one numeral system to another.',
214: 1:    'Method should accept number, source numeral system and target numeral system.',
214: 1:    'Use the spread operator to parse arguments.',
214: 1:    'Don't convert the number to decimal (base 10) first. Just convert to target numeral system.',
214: 1:    'Remove everything from the script except for the function logic.'
214: 1:  ],
214: 1:  'expectedAnswer': '0',
214: 1:  'history': [
214: 1:    {
214: 1:      'answer': '10',
214: 1:      'question': '10, 10, 10',
214: 1:      'valid': true
214: 1:    },
214: 1:    {
214: 1:      'answer': '1010',
214: 1:      'question': '10, 10, 2',
214: 1:      'valid': true
214: 1:    },
214: 1:    {
214: 1:      'answer': '2',
214: 1:      'question': '10, 2, 10',
214: 1:      'valid': true
214: 1:    },
214: 1:    {
214: 1:      'answer': '3e8',
214: 1:      'question': '1000, 10, 16',
214: 1:      'valid': true
214: 1:    },
214: 1:    {
214: 1:      'answer': '4096',
214: 1:      'question': '1000, 16, 10',
214: 1:      'valid': true
214: 1:    },
214: 1:    {
214: 1:      'answer': '1000000000000',
214: 1:      'question': '1000, 16, 2',
214: 1:      'valid': true
214: 1:    },
214: 1:    {
214: 1:      'answer': '1101011001101',
214: 1:      'question': '1ACD, 16, 2',
214: 1:      'valid': true
214: 1:    },
214: 1:    {
214: 1:      'answer': '1010101111001101',
214: 1:      'question': 'ABCD, 16, 2',
214: 1:      'valid': true
214: 1:    },
214: 1:    {
214: 1:      'answer': '13502',
214: 1:      'question': '34BE, 16, 10',
214: 1:      'valid': true
214: 1:    },
214: 1:    {
214: 1:      'answer': '8',
214: 1:      'question': '1000, 2, 16',
214: 1:      'valid': true
214: 1:    },
214: 1:    {
214: 1:      'answer': 'a',
214: 1:      'question': '1010, 2, 16',
214: 1:      'valid': true
214: 1:    },
214: 1:    {
214: 1:      'answer': '1111',
214: 1:      'question': '1010101, 2, 4',
214: 1:      'valid': true
214: 1:    },
214: 1:    {
214: 1:      'answer': '221',
214: 1:      'question': '1010101, 2, 6',
214: 1:      'valid': true
214: 1:    },
214: 1:    {
214: 1:      'answer': '125',
214: 1:      'question': '1010101, 2, 8',
214: 1:      'valid': true
214: 1:    },
214: 1:    {
214: 1:      'answer': '85',
214: 1:      'question': '1010101, 2, 10',
214: 1:      'valid': true
214: 1:    },
214: 1:    {
214: 1:      'answer': '71',
214: 1:      'question': '1010101, 2, 12',
214: 1:      'valid': true
214: 1:    },
214: 1:    {
214: 1:      'answer': '61',
214: 1:      'question': '1010101, 2, 14',
214: 1:      'valid': true
214: 1:    },
214: 1:    {
214: 1:      'answer': '55',
214: 1:      'question': '1010101, 2, 16',
214: 1:      'valid': true
214: 1:    }
214: 1:  ],
214: 1:  'info': [
214: 1:    '✅f(10, 10, 10) = 10',
214: 1:    '✅f(10, 10, 2) = 1010',
214: 1:    '✅f(10, 2, 10) = 2',
214: 1:    '✅f(1000, 10, 16) = 3e8',
214: 1:    '✅f(1000, 16, 10) = 4096',
214: 1:    '✅f(1000, 16, 2) = 1000000000000',
214: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
214: 1:    '✅f(ABCD, 16, 2) = 1010101111001101',
214: 1:    '✅f(34BE, 16, 10) = 13502',
214: 1:    '✅f(1000, 2, 16) = 8',
214: 1:    '✅f(1010, 2, 16) = a',
214: 1:    '✅f(1010101, 2, 4) = 1111',
214: 1:    '✅f(1010101, 2, 6) = 221',
214: 1:    '✅f(1010101, 2, 8) = 125',
214: 1:    '✅f(1010101, 2, 10) = 85',
214: 1:    '✅f(1010101, 2, 12) = 71',
214: 1:    '✅f(1010101, 2, 14) = 61',
214: 1:    '✅f(1010101, 2, 16) = 55',
214: 1:    '❌f(0, 2, 16) = ??? != 0'
214: 1:  ],
214: 1:  'level': 7,
214: 1:  'nextQuestion': '0, 2, 16',
214: 1:  'questions': [
214: 1:    '10, 10, 10',
214: 1:    '10, 10, 2',
214: 1:    '10, 2, 10',
214: 1:    '1000, 10, 16',
214: 1:    '1000, 16, 10',
214: 1:    '1000, 16, 2',
214: 1:    '1ACD, 16, 2',
214: 1:    'ABCD, 16, 2',
214: 1:    '34BE, 16, 10',
214: 1:    '1000, 2, 16',
214: 1:    '1010, 2, 16',
214: 1:    '1010101, 2, 4',
214: 1:    '1010101, 2, 6',
214: 1:    '1010101, 2, 8',
214: 1:    '1010101, 2, 10',
214: 1:    '1010101, 2, 12',
214: 1:    '1010101, 2, 14',
214: 1:    '1010101, 2, 16',
214: 1:    '0, 2, 16'
214: 1:  ]
214: 1:}
214: 1:Scores: 6538
214: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101', '1010101111001101', '13502', '8', 'a', '1111', '221', '125', '85', '71', '61', '55', '0']')
214: 1:Fire Event: PassTest{complexity=11, testCount=21}
------------------------------------------
215: 1:BoardData {
215: 1:  'description': [
215: 1:    'Write a javascript function that converts number from one numeral system to another.',
215: 1:    'Method should accept number, source numeral system and target numeral system.',
215: 1:    'Use the spread operator to parse arguments.',
215: 1:    'Don't convert the number to decimal (base 10) first. Just convert to target numeral system.',
215: 1:    'Remove everything from the script except for the function logic.'
215: 1:  ],
215: 1:  'expectedAnswer': '360',
215: 1:  'history': [
215: 1:    {
215: 1:      'answer': '10',
215: 1:      'question': '10, 10, 10',
215: 1:      'valid': true
215: 1:    },
215: 1:    {
215: 1:      'answer': '1010',
215: 1:      'question': '10, 10, 2',
215: 1:      'valid': true
215: 1:    },
215: 1:    {
215: 1:      'answer': '2',
215: 1:      'question': '10, 2, 10',
215: 1:      'valid': true
215: 1:    },
215: 1:    {
215: 1:      'answer': '3e8',
215: 1:      'question': '1000, 10, 16',
215: 1:      'valid': true
215: 1:    },
215: 1:    {
215: 1:      'answer': '4096',
215: 1:      'question': '1000, 16, 10',
215: 1:      'valid': true
215: 1:    },
215: 1:    {
215: 1:      'answer': '1000000000000',
215: 1:      'question': '1000, 16, 2',
215: 1:      'valid': true
215: 1:    },
215: 1:    {
215: 1:      'answer': '1101011001101',
215: 1:      'question': '1ACD, 16, 2',
215: 1:      'valid': true
215: 1:    },
215: 1:    {
215: 1:      'answer': '1010101111001101',
215: 1:      'question': 'ABCD, 16, 2',
215: 1:      'valid': true
215: 1:    },
215: 1:    {
215: 1:      'answer': '13502',
215: 1:      'question': '34BE, 16, 10',
215: 1:      'valid': true
215: 1:    },
215: 1:    {
215: 1:      'answer': '8',
215: 1:      'question': '1000, 2, 16',
215: 1:      'valid': true
215: 1:    },
215: 1:    {
215: 1:      'answer': 'a',
215: 1:      'question': '1010, 2, 16',
215: 1:      'valid': true
215: 1:    },
215: 1:    {
215: 1:      'answer': '1111',
215: 1:      'question': '1010101, 2, 4',
215: 1:      'valid': true
215: 1:    },
215: 1:    {
215: 1:      'answer': '221',
215: 1:      'question': '1010101, 2, 6',
215: 1:      'valid': true
215: 1:    },
215: 1:    {
215: 1:      'answer': '125',
215: 1:      'question': '1010101, 2, 8',
215: 1:      'valid': true
215: 1:    },
215: 1:    {
215: 1:      'answer': '85',
215: 1:      'question': '1010101, 2, 10',
215: 1:      'valid': true
215: 1:    },
215: 1:    {
215: 1:      'answer': '71',
215: 1:      'question': '1010101, 2, 12',
215: 1:      'valid': true
215: 1:    },
215: 1:    {
215: 1:      'answer': '61',
215: 1:      'question': '1010101, 2, 14',
215: 1:      'valid': true
215: 1:    },
215: 1:    {
215: 1:      'answer': '55',
215: 1:      'question': '1010101, 2, 16',
215: 1:      'valid': true
215: 1:    },
215: 1:    {
215: 1:      'answer': '0',
215: 1:      'question': '0, 2, 16',
215: 1:      'valid': true
215: 1:    }
215: 1:  ],
215: 1:  'info': [
215: 1:    '✅f(10, 10, 10) = 10',
215: 1:    '✅f(10, 10, 2) = 1010',
215: 1:    '✅f(10, 2, 10) = 2',
215: 1:    '✅f(1000, 10, 16) = 3e8',
215: 1:    '✅f(1000, 16, 10) = 4096',
215: 1:    '✅f(1000, 16, 2) = 1000000000000',
215: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
215: 1:    '✅f(ABCD, 16, 2) = 1010101111001101',
215: 1:    '✅f(34BE, 16, 10) = 13502',
215: 1:    '✅f(1000, 2, 16) = 8',
215: 1:    '✅f(1010, 2, 16) = a',
215: 1:    '✅f(1010101, 2, 4) = 1111',
215: 1:    '✅f(1010101, 2, 6) = 221',
215: 1:    '✅f(1010101, 2, 8) = 125',
215: 1:    '✅f(1010101, 2, 10) = 85',
215: 1:    '✅f(1010101, 2, 12) = 71',
215: 1:    '✅f(1010101, 2, 14) = 61',
215: 1:    '✅f(1010101, 2, 16) = 55',
215: 1:    '✅f(0, 2, 16) = 0',
215: 1:    '❌f(360, 10, 60) = ??? != 360'
215: 1:  ],
215: 1:  'level': 7,
215: 1:  'nextQuestion': '360, 10, 60',
215: 1:  'questions': [
215: 1:    '10, 10, 10',
215: 1:    '10, 10, 2',
215: 1:    '10, 2, 10',
215: 1:    '1000, 10, 16',
215: 1:    '1000, 16, 10',
215: 1:    '1000, 16, 2',
215: 1:    '1ACD, 16, 2',
215: 1:    'ABCD, 16, 2',
215: 1:    '34BE, 16, 10',
215: 1:    '1000, 2, 16',
215: 1:    '1010, 2, 16',
215: 1:    '1010101, 2, 4',
215: 1:    '1010101, 2, 6',
215: 1:    '1010101, 2, 8',
215: 1:    '1010101, 2, 10',
215: 1:    '1010101, 2, 12',
215: 1:    '1010101, 2, 14',
215: 1:    '1010101, 2, 16',
215: 1:    '0, 2, 16',
215: 1:    '360, 10, 60'
215: 1:  ]
215: 1:}
215: 1:Scores: 6543
215: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101', '1010101111001101', '13502', '8', 'a', '1111', '221', '125', '85', '71', '61', '55', '0', '360']')
215: 1:Fire Event: PassTest{complexity=11, testCount=21}
------------------------------------------
216: 1:BoardData {
216: 1:  'description': [
216: 1:    'Write a javascript function that converts number from one numeral system to another.',
216: 1:    'Method should accept number, source numeral system and target numeral system.',
216: 1:    'Use the spread operator to parse arguments.',
216: 1:    'Don't convert the number to decimal (base 10) first. Just convert to target numeral system.',
216: 1:    'Remove everything from the script except for the function logic.'
216: 1:  ],
216: 1:  'expectedAnswer': '260',
216: 1:  'history': [
216: 1:    {
216: 1:      'answer': '10',
216: 1:      'question': '10, 10, 10',
216: 1:      'valid': true
216: 1:    },
216: 1:    {
216: 1:      'answer': '1010',
216: 1:      'question': '10, 10, 2',
216: 1:      'valid': true
216: 1:    },
216: 1:    {
216: 1:      'answer': '2',
216: 1:      'question': '10, 2, 10',
216: 1:      'valid': true
216: 1:    },
216: 1:    {
216: 1:      'answer': '3e8',
216: 1:      'question': '1000, 10, 16',
216: 1:      'valid': true
216: 1:    },
216: 1:    {
216: 1:      'answer': '4096',
216: 1:      'question': '1000, 16, 10',
216: 1:      'valid': true
216: 1:    },
216: 1:    {
216: 1:      'answer': '1000000000000',
216: 1:      'question': '1000, 16, 2',
216: 1:      'valid': true
216: 1:    },
216: 1:    {
216: 1:      'answer': '1101011001101',
216: 1:      'question': '1ACD, 16, 2',
216: 1:      'valid': true
216: 1:    },
216: 1:    {
216: 1:      'answer': '1010101111001101',
216: 1:      'question': 'ABCD, 16, 2',
216: 1:      'valid': true
216: 1:    },
216: 1:    {
216: 1:      'answer': '13502',
216: 1:      'question': '34BE, 16, 10',
216: 1:      'valid': true
216: 1:    },
216: 1:    {
216: 1:      'answer': '8',
216: 1:      'question': '1000, 2, 16',
216: 1:      'valid': true
216: 1:    },
216: 1:    {
216: 1:      'answer': 'a',
216: 1:      'question': '1010, 2, 16',
216: 1:      'valid': true
216: 1:    },
216: 1:    {
216: 1:      'answer': '1111',
216: 1:      'question': '1010101, 2, 4',
216: 1:      'valid': true
216: 1:    },
216: 1:    {
216: 1:      'answer': '221',
216: 1:      'question': '1010101, 2, 6',
216: 1:      'valid': true
216: 1:    },
216: 1:    {
216: 1:      'answer': '125',
216: 1:      'question': '1010101, 2, 8',
216: 1:      'valid': true
216: 1:    },
216: 1:    {
216: 1:      'answer': '85',
216: 1:      'question': '1010101, 2, 10',
216: 1:      'valid': true
216: 1:    },
216: 1:    {
216: 1:      'answer': '71',
216: 1:      'question': '1010101, 2, 12',
216: 1:      'valid': true
216: 1:    },
216: 1:    {
216: 1:      'answer': '61',
216: 1:      'question': '1010101, 2, 14',
216: 1:      'valid': true
216: 1:    },
216: 1:    {
216: 1:      'answer': '55',
216: 1:      'question': '1010101, 2, 16',
216: 1:      'valid': true
216: 1:    },
216: 1:    {
216: 1:      'answer': '0',
216: 1:      'question': '0, 2, 16',
216: 1:      'valid': true
216: 1:    },
216: 1:    {
216: 1:      'answer': '360',
216: 1:      'question': '360, 10, 60',
216: 1:      'valid': true
216: 1:    }
216: 1:  ],
216: 1:  'info': [
216: 1:    '✅f(10, 10, 10) = 10',
216: 1:    '✅f(10, 10, 2) = 1010',
216: 1:    '✅f(10, 2, 10) = 2',
216: 1:    '✅f(1000, 10, 16) = 3e8',
216: 1:    '✅f(1000, 16, 10) = 4096',
216: 1:    '✅f(1000, 16, 2) = 1000000000000',
216: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
216: 1:    '✅f(ABCD, 16, 2) = 1010101111001101',
216: 1:    '✅f(34BE, 16, 10) = 13502',
216: 1:    '✅f(1000, 2, 16) = 8',
216: 1:    '✅f(1010, 2, 16) = a',
216: 1:    '✅f(1010101, 2, 4) = 1111',
216: 1:    '✅f(1010101, 2, 6) = 221',
216: 1:    '✅f(1010101, 2, 8) = 125',
216: 1:    '✅f(1010101, 2, 10) = 85',
216: 1:    '✅f(1010101, 2, 12) = 71',
216: 1:    '✅f(1010101, 2, 14) = 61',
216: 1:    '✅f(1010101, 2, 16) = 55',
216: 1:    '✅f(0, 2, 16) = 0',
216: 1:    '✅f(360, 10, 60) = 360',
216: 1:    '❌f(360, 10, 12) = ??? != 260'
216: 1:  ],
216: 1:  'level': 7,
216: 1:  'nextQuestion': '360, 10, 12',
216: 1:  'questions': [
216: 1:    '10, 10, 10',
216: 1:    '10, 10, 2',
216: 1:    '10, 2, 10',
216: 1:    '1000, 10, 16',
216: 1:    '1000, 16, 10',
216: 1:    '1000, 16, 2',
216: 1:    '1ACD, 16, 2',
216: 1:    'ABCD, 16, 2',
216: 1:    '34BE, 16, 10',
216: 1:    '1000, 2, 16',
216: 1:    '1010, 2, 16',
216: 1:    '1010101, 2, 4',
216: 1:    '1010101, 2, 6',
216: 1:    '1010101, 2, 8',
216: 1:    '1010101, 2, 10',
216: 1:    '1010101, 2, 12',
216: 1:    '1010101, 2, 14',
216: 1:    '1010101, 2, 16',
216: 1:    '0, 2, 16',
216: 1:    '360, 10, 60',
216: 1:    '360, 10, 12'
216: 1:  ]
216: 1:}
216: 1:Scores: 6548
216: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101', '1010101111001101', '13502', '8', 'a', '1111', '221', '125', '85', '71', '61', '55', '0', '360', '260']')
216: 1:Fire Event: PassTest{complexity=11, testCount=21}
216: 1:Fire Event: NextAlgorithm{complexity=11, time=0}
------------------------------------------
217: 1:BoardData {
217: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
217: 1:  'history': [
217: 1:    {
217: 1:      'answer': '10',
217: 1:      'question': '10, 10, 10',
217: 1:      'valid': true
217: 1:    },
217: 1:    {
217: 1:      'answer': '1010',
217: 1:      'question': '10, 10, 2',
217: 1:      'valid': true
217: 1:    },
217: 1:    {
217: 1:      'answer': '2',
217: 1:      'question': '10, 2, 10',
217: 1:      'valid': true
217: 1:    },
217: 1:    {
217: 1:      'answer': '3e8',
217: 1:      'question': '1000, 10, 16',
217: 1:      'valid': true
217: 1:    },
217: 1:    {
217: 1:      'answer': '4096',
217: 1:      'question': '1000, 16, 10',
217: 1:      'valid': true
217: 1:    },
217: 1:    {
217: 1:      'answer': '1000000000000',
217: 1:      'question': '1000, 16, 2',
217: 1:      'valid': true
217: 1:    },
217: 1:    {
217: 1:      'answer': '1101011001101',
217: 1:      'question': '1ACD, 16, 2',
217: 1:      'valid': true
217: 1:    },
217: 1:    {
217: 1:      'answer': '1010101111001101',
217: 1:      'question': 'ABCD, 16, 2',
217: 1:      'valid': true
217: 1:    },
217: 1:    {
217: 1:      'answer': '13502',
217: 1:      'question': '34BE, 16, 10',
217: 1:      'valid': true
217: 1:    },
217: 1:    {
217: 1:      'answer': '8',
217: 1:      'question': '1000, 2, 16',
217: 1:      'valid': true
217: 1:    },
217: 1:    {
217: 1:      'answer': 'a',
217: 1:      'question': '1010, 2, 16',
217: 1:      'valid': true
217: 1:    },
217: 1:    {
217: 1:      'answer': '1111',
217: 1:      'question': '1010101, 2, 4',
217: 1:      'valid': true
217: 1:    },
217: 1:    {
217: 1:      'answer': '221',
217: 1:      'question': '1010101, 2, 6',
217: 1:      'valid': true
217: 1:    },
217: 1:    {
217: 1:      'answer': '125',
217: 1:      'question': '1010101, 2, 8',
217: 1:      'valid': true
217: 1:    },
217: 1:    {
217: 1:      'answer': '85',
217: 1:      'question': '1010101, 2, 10',
217: 1:      'valid': true
217: 1:    },
217: 1:    {
217: 1:      'answer': '71',
217: 1:      'question': '1010101, 2, 12',
217: 1:      'valid': true
217: 1:    },
217: 1:    {
217: 1:      'answer': '61',
217: 1:      'question': '1010101, 2, 14',
217: 1:      'valid': true
217: 1:    },
217: 1:    {
217: 1:      'answer': '55',
217: 1:      'question': '1010101, 2, 16',
217: 1:      'valid': true
217: 1:    },
217: 1:    {
217: 1:      'answer': '0',
217: 1:      'question': '0, 2, 16',
217: 1:      'valid': true
217: 1:    },
217: 1:    {
217: 1:      'answer': '360',
217: 1:      'question': '360, 10, 60',
217: 1:      'valid': true
217: 1:    },
217: 1:    {
217: 1:      'answer': '260',
217: 1:      'question': '360, 10, 12',
217: 1:      'valid': true
217: 1:    }
217: 1:  ],
217: 1:  'info': [
217: 1:    '✅f(10, 10, 10) = 10',
217: 1:    '✅f(10, 10, 2) = 1010',
217: 1:    '✅f(10, 2, 10) = 2',
217: 1:    '✅f(1000, 10, 16) = 3e8',
217: 1:    '✅f(1000, 16, 10) = 4096',
217: 1:    '✅f(1000, 16, 2) = 1000000000000',
217: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
217: 1:    '✅f(ABCD, 16, 2) = 1010101111001101',
217: 1:    '✅f(34BE, 16, 10) = 13502',
217: 1:    '✅f(1000, 2, 16) = 8',
217: 1:    '✅f(1010, 2, 16) = a',
217: 1:    '✅f(1010101, 2, 4) = 1111',
217: 1:    '✅f(1010101, 2, 6) = 221',
217: 1:    '✅f(1010101, 2, 8) = 125',
217: 1:    '✅f(1010101, 2, 10) = 85',
217: 1:    '✅f(1010101, 2, 12) = 71',
217: 1:    '✅f(1010101, 2, 14) = 61',
217: 1:    '✅f(1010101, 2, 16) = 55',
217: 1:    '✅f(0, 2, 16) = 0',
217: 1:    '✅f(360, 10, 60) = 360',
217: 1:    '✅f(360, 10, 12) = 260'
217: 1:  ],
217: 1:  'level': 7,
217: 1:  'questions': []
217: 1:}
217: 1:Scores: 8037
217: 1:Answer: message('StartNextLevel')
217: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
218: 1:BoardData {
218: 1:  'description': [
218: 1:    'Make a function that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
218: 1:    'Please use javascript language.',
218: 1:    'Use parseInt to parse input string arguments.',
218: 1:    'Use separate variable to store the result of parseInt.',
218: 1:    'Rewrite the function in a shorter way.',
218: 1:    'Remove everything from the script except for the function logic.'
218: 1:  ],
218: 1:  'expectedAnswer': '1',
218: 1:  'history': [],
218: 1:  'info': ['❌f(1) = ??? != 1'],
218: 1:  'level': 8,
218: 1:  'nextQuestion': '1',
218: 1:  'questions': ['1']
218: 1:}
218: 1:Scores: 8037
218: 1:Answer: message('['1']')
218: 1:Fire Event: PassTest{complexity=12, testCount=25}
------------------------------------------
219: 1:BoardData {
219: 1:  'description': [
219: 1:    'Make a function that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
219: 1:    'Please use javascript language.',
219: 1:    'Use parseInt to parse input string arguments.',
219: 1:    'Use separate variable to store the result of parseInt.',
219: 1:    'Rewrite the function in a shorter way.',
219: 1:    'Remove everything from the script except for the function logic.'
219: 1:  ],
219: 1:  'expectedAnswer': '1',
219: 1:  'history': [{
219: 1:    'answer': '1',
219: 1:    'question': '1',
219: 1:    'valid': true
219: 1:  }],
219: 1:  'info': [
219: 1:    '✅f(1) = 1',
219: 1:    '❌f(2) = ??? != 1'
219: 1:  ],
219: 1:  'level': 8,
219: 1:  'nextQuestion': '2',
219: 1:  'questions': [
219: 1:    '1',
219: 1:    '2'
219: 1:  ]
219: 1:}
219: 1:Scores: 8041
219: 1:Answer: message('['1', '1']')
219: 1:Fire Event: PassTest{complexity=12, testCount=25}
------------------------------------------
220: 1:BoardData {
220: 1:  'description': [
220: 1:    'Make a function that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
220: 1:    'Please use javascript language.',
220: 1:    'Use parseInt to parse input string arguments.',
220: 1:    'Use separate variable to store the result of parseInt.',
220: 1:    'Rewrite the function in a shorter way.',
220: 1:    'Remove everything from the script except for the function logic.'
220: 1:  ],
220: 1:  'expectedAnswer': '2',
220: 1:  'history': [
220: 1:    {
220: 1:      'answer': '1',
220: 1:      'question': '1',
220: 1:      'valid': true
220: 1:    },
220: 1:    {
220: 1:      'answer': '1',
220: 1:      'question': '2',
220: 1:      'valid': true
220: 1:    }
220: 1:  ],
220: 1:  'info': [
220: 1:    '✅f(1) = 1',
220: 1:    '✅f(2) = 1',
220: 1:    '❌f(3) = ??? != 2'
220: 1:  ],
220: 1:  'level': 8,
220: 1:  'nextQuestion': '3',
220: 1:  'questions': [
220: 1:    '1',
220: 1:    '2',
220: 1:    '3'
220: 1:  ]
220: 1:}
220: 1:Scores: 8045
220: 1:Answer: message('['1', '1', '2']')
220: 1:Fire Event: PassTest{complexity=12, testCount=25}
------------------------------------------
221: 1:BoardData {
221: 1:  'description': [
221: 1:    'Make a function that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
221: 1:    'Please use javascript language.',
221: 1:    'Use parseInt to parse input string arguments.',
221: 1:    'Use separate variable to store the result of parseInt.',
221: 1:    'Rewrite the function in a shorter way.',
221: 1:    'Remove everything from the script except for the function logic.'
221: 1:  ],
221: 1:  'expectedAnswer': '3',
221: 1:  'history': [
221: 1:    {
221: 1:      'answer': '1',
221: 1:      'question': '1',
221: 1:      'valid': true
221: 1:    },
221: 1:    {
221: 1:      'answer': '1',
221: 1:      'question': '2',
221: 1:      'valid': true
221: 1:    },
221: 1:    {
221: 1:      'answer': '2',
221: 1:      'question': '3',
221: 1:      'valid': true
221: 1:    }
221: 1:  ],
221: 1:  'info': [
221: 1:    '✅f(1) = 1',
221: 1:    '✅f(2) = 1',
221: 1:    '✅f(3) = 2',
221: 1:    '❌f(4) = ??? != 3'
221: 1:  ],
221: 1:  'level': 8,
221: 1:  'nextQuestion': '4',
221: 1:  'questions': [
221: 1:    '1',
221: 1:    '2',
221: 1:    '3',
221: 1:    '4'
221: 1:  ]
221: 1:}
221: 1:Scores: 8049
221: 1:Answer: message('['1', '1', '2', '3']')
221: 1:Fire Event: PassTest{complexity=12, testCount=25}
------------------------------------------
222: 1:BoardData {
222: 1:  'description': [
222: 1:    'Make a function that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
222: 1:    'Please use javascript language.',
222: 1:    'Use parseInt to parse input string arguments.',
222: 1:    'Use separate variable to store the result of parseInt.',
222: 1:    'Rewrite the function in a shorter way.',
222: 1:    'Remove everything from the script except for the function logic.'
222: 1:  ],
222: 1:  'expectedAnswer': '5',
222: 1:  'history': [
222: 1:    {
222: 1:      'answer': '1',
222: 1:      'question': '1',
222: 1:      'valid': true
222: 1:    },
222: 1:    {
222: 1:      'answer': '1',
222: 1:      'question': '2',
222: 1:      'valid': true
222: 1:    },
222: 1:    {
222: 1:      'answer': '2',
222: 1:      'question': '3',
222: 1:      'valid': true
222: 1:    },
222: 1:    {
222: 1:      'answer': '3',
222: 1:      'question': '4',
222: 1:      'valid': true
222: 1:    }
222: 1:  ],
222: 1:  'info': [
222: 1:    '✅f(1) = 1',
222: 1:    '✅f(2) = 1',
222: 1:    '✅f(3) = 2',
222: 1:    '✅f(4) = 3',
222: 1:    '❌f(5) = ??? != 5'
222: 1:  ],
222: 1:  'level': 8,
222: 1:  'nextQuestion': '5',
222: 1:  'questions': [
222: 1:    '1',
222: 1:    '2',
222: 1:    '3',
222: 1:    '4',
222: 1:    '5'
222: 1:  ]
222: 1:}
222: 1:Scores: 8053
222: 1:Answer: message('['1', '1', '2', '3', '5']')
222: 1:Fire Event: PassTest{complexity=12, testCount=25}
------------------------------------------
223: 1:BoardData {
223: 1:  'description': [
223: 1:    'Make a function that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
223: 1:    'Please use javascript language.',
223: 1:    'Use parseInt to parse input string arguments.',
223: 1:    'Use separate variable to store the result of parseInt.',
223: 1:    'Rewrite the function in a shorter way.',
223: 1:    'Remove everything from the script except for the function logic.'
223: 1:  ],
223: 1:  'expectedAnswer': '8',
223: 1:  'history': [
223: 1:    {
223: 1:      'answer': '1',
223: 1:      'question': '1',
223: 1:      'valid': true
223: 1:    },
223: 1:    {
223: 1:      'answer': '1',
223: 1:      'question': '2',
223: 1:      'valid': true
223: 1:    },
223: 1:    {
223: 1:      'answer': '2',
223: 1:      'question': '3',
223: 1:      'valid': true
223: 1:    },
223: 1:    {
223: 1:      'answer': '3',
223: 1:      'question': '4',
223: 1:      'valid': true
223: 1:    },
223: 1:    {
223: 1:      'answer': '5',
223: 1:      'question': '5',
223: 1:      'valid': true
223: 1:    }
223: 1:  ],
223: 1:  'info': [
223: 1:    '✅f(1) = 1',
223: 1:    '✅f(2) = 1',
223: 1:    '✅f(3) = 2',
223: 1:    '✅f(4) = 3',
223: 1:    '✅f(5) = 5',
223: 1:    '❌f(6) = ??? != 8'
223: 1:  ],
223: 1:  'level': 8,
223: 1:  'nextQuestion': '6',
223: 1:  'questions': [
223: 1:    '1',
223: 1:    '2',
223: 1:    '3',
223: 1:    '4',
223: 1:    '5',
223: 1:    '6'
223: 1:  ]
223: 1:}
223: 1:Scores: 8057
223: 1:Answer: message('['1', '1', '2', '3', '5', '8']')
223: 1:Fire Event: PassTest{complexity=12, testCount=25}
------------------------------------------
224: 1:BoardData {
224: 1:  'description': [
224: 1:    'Make a function that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
224: 1:    'Please use javascript language.',
224: 1:    'Use parseInt to parse input string arguments.',
224: 1:    'Use separate variable to store the result of parseInt.',
224: 1:    'Rewrite the function in a shorter way.',
224: 1:    'Remove everything from the script except for the function logic.'
224: 1:  ],
224: 1:  'expectedAnswer': '13',
224: 1:  'history': [
224: 1:    {
224: 1:      'answer': '1',
224: 1:      'question': '1',
224: 1:      'valid': true
224: 1:    },
224: 1:    {
224: 1:      'answer': '1',
224: 1:      'question': '2',
224: 1:      'valid': true
224: 1:    },
224: 1:    {
224: 1:      'answer': '2',
224: 1:      'question': '3',
224: 1:      'valid': true
224: 1:    },
224: 1:    {
224: 1:      'answer': '3',
224: 1:      'question': '4',
224: 1:      'valid': true
224: 1:    },
224: 1:    {
224: 1:      'answer': '5',
224: 1:      'question': '5',
224: 1:      'valid': true
224: 1:    },
224: 1:    {
224: 1:      'answer': '8',
224: 1:      'question': '6',
224: 1:      'valid': true
224: 1:    }
224: 1:  ],
224: 1:  'info': [
224: 1:    '✅f(1) = 1',
224: 1:    '✅f(2) = 1',
224: 1:    '✅f(3) = 2',
224: 1:    '✅f(4) = 3',
224: 1:    '✅f(5) = 5',
224: 1:    '✅f(6) = 8',
224: 1:    '❌f(7) = ??? != 13'
224: 1:  ],
224: 1:  'level': 8,
224: 1:  'nextQuestion': '7',
224: 1:  'questions': [
224: 1:    '1',
224: 1:    '2',
224: 1:    '3',
224: 1:    '4',
224: 1:    '5',
224: 1:    '6',
224: 1:    '7'
224: 1:  ]
224: 1:}
224: 1:Scores: 8061
224: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13']')
224: 1:Fire Event: PassTest{complexity=12, testCount=25}
------------------------------------------
225: 1:BoardData {
225: 1:  'description': [
225: 1:    'Make a function that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
225: 1:    'Please use javascript language.',
225: 1:    'Use parseInt to parse input string arguments.',
225: 1:    'Use separate variable to store the result of parseInt.',
225: 1:    'Rewrite the function in a shorter way.',
225: 1:    'Remove everything from the script except for the function logic.'
225: 1:  ],
225: 1:  'expectedAnswer': '21',
225: 1:  'history': [
225: 1:    {
225: 1:      'answer': '1',
225: 1:      'question': '1',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '1',
225: 1:      'question': '2',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '2',
225: 1:      'question': '3',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '3',
225: 1:      'question': '4',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '5',
225: 1:      'question': '5',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '8',
225: 1:      'question': '6',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '13',
225: 1:      'question': '7',
225: 1:      'valid': true
225: 1:    }
225: 1:  ],
225: 1:  'info': [
225: 1:    '✅f(1) = 1',
225: 1:    '✅f(2) = 1',
225: 1:    '✅f(3) = 2',
225: 1:    '✅f(4) = 3',
225: 1:    '✅f(5) = 5',
225: 1:    '✅f(6) = 8',
225: 1:    '✅f(7) = 13',
225: 1:    '❌f(8) = ??? != 21'
225: 1:  ],
225: 1:  'level': 8,
225: 1:  'nextQuestion': '8',
225: 1:  'questions': [
225: 1:    '1',
225: 1:    '2',
225: 1:    '3',
225: 1:    '4',
225: 1:    '5',
225: 1:    '6',
225: 1:    '7',
225: 1:    '8'
225: 1:  ]
225: 1:}
225: 1:Scores: 8065
225: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21']')
225: 1:Fire Event: PassTest{complexity=12, testCount=25}
------------------------------------------
226: 1:BoardData {
226: 1:  'description': [
226: 1:    'Make a function that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
226: 1:    'Please use javascript language.',
226: 1:    'Use parseInt to parse input string arguments.',
226: 1:    'Use separate variable to store the result of parseInt.',
226: 1:    'Rewrite the function in a shorter way.',
226: 1:    'Remove everything from the script except for the function logic.'
226: 1:  ],
226: 1:  'expectedAnswer': '34',
226: 1:  'history': [
226: 1:    {
226: 1:      'answer': '1',
226: 1:      'question': '1',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '1',
226: 1:      'question': '2',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '2',
226: 1:      'question': '3',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '3',
226: 1:      'question': '4',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '5',
226: 1:      'question': '5',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '8',
226: 1:      'question': '6',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '13',
226: 1:      'question': '7',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '21',
226: 1:      'question': '8',
226: 1:      'valid': true
226: 1:    }
226: 1:  ],
226: 1:  'info': [
226: 1:    '✅f(1) = 1',
226: 1:    '✅f(2) = 1',
226: 1:    '✅f(3) = 2',
226: 1:    '✅f(4) = 3',
226: 1:    '✅f(5) = 5',
226: 1:    '✅f(6) = 8',
226: 1:    '✅f(7) = 13',
226: 1:    '✅f(8) = 21',
226: 1:    '❌f(9) = ??? != 34'
226: 1:  ],
226: 1:  'level': 8,
226: 1:  'nextQuestion': '9',
226: 1:  'questions': [
226: 1:    '1',
226: 1:    '2',
226: 1:    '3',
226: 1:    '4',
226: 1:    '5',
226: 1:    '6',
226: 1:    '7',
226: 1:    '8',
226: 1:    '9'
226: 1:  ]
226: 1:}
226: 1:Scores: 8069
226: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34']')
226: 1:Fire Event: PassTest{complexity=12, testCount=25}
------------------------------------------
227: 1:BoardData {
227: 1:  'description': [
227: 1:    'Make a function that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
227: 1:    'Please use javascript language.',
227: 1:    'Use parseInt to parse input string arguments.',
227: 1:    'Use separate variable to store the result of parseInt.',
227: 1:    'Rewrite the function in a shorter way.',
227: 1:    'Remove everything from the script except for the function logic.'
227: 1:  ],
227: 1:  'expectedAnswer': '55',
227: 1:  'history': [
227: 1:    {
227: 1:      'answer': '1',
227: 1:      'question': '1',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '1',
227: 1:      'question': '2',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '2',
227: 1:      'question': '3',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '3',
227: 1:      'question': '4',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '5',
227: 1:      'question': '5',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '8',
227: 1:      'question': '6',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '13',
227: 1:      'question': '7',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '21',
227: 1:      'question': '8',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '34',
227: 1:      'question': '9',
227: 1:      'valid': true
227: 1:    }
227: 1:  ],
227: 1:  'info': [
227: 1:    '✅f(1) = 1',
227: 1:    '✅f(2) = 1',
227: 1:    '✅f(3) = 2',
227: 1:    '✅f(4) = 3',
227: 1:    '✅f(5) = 5',
227: 1:    '✅f(6) = 8',
227: 1:    '✅f(7) = 13',
227: 1:    '✅f(8) = 21',
227: 1:    '✅f(9) = 34',
227: 1:    '❌f(10) = ??? != 55'
227: 1:  ],
227: 1:  'level': 8,
227: 1:  'nextQuestion': '10',
227: 1:  'questions': [
227: 1:    '1',
227: 1:    '2',
227: 1:    '3',
227: 1:    '4',
227: 1:    '5',
227: 1:    '6',
227: 1:    '7',
227: 1:    '8',
227: 1:    '9',
227: 1:    '10'
227: 1:  ]
227: 1:}
227: 1:Scores: 8073
227: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55']')
227: 1:Fire Event: PassTest{complexity=12, testCount=25}
------------------------------------------
228: 1:BoardData {
228: 1:  'description': [
228: 1:    'Make a function that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
228: 1:    'Please use javascript language.',
228: 1:    'Use parseInt to parse input string arguments.',
228: 1:    'Use separate variable to store the result of parseInt.',
228: 1:    'Rewrite the function in a shorter way.',
228: 1:    'Remove everything from the script except for the function logic.'
228: 1:  ],
228: 1:  'expectedAnswer': '89',
228: 1:  'history': [
228: 1:    {
228: 1:      'answer': '1',
228: 1:      'question': '1',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '1',
228: 1:      'question': '2',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '2',
228: 1:      'question': '3',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '3',
228: 1:      'question': '4',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '5',
228: 1:      'question': '5',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '8',
228: 1:      'question': '6',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '13',
228: 1:      'question': '7',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '21',
228: 1:      'question': '8',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '34',
228: 1:      'question': '9',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '55',
228: 1:      'question': '10',
228: 1:      'valid': true
228: 1:    }
228: 1:  ],
228: 1:  'info': [
228: 1:    '✅f(1) = 1',
228: 1:    '✅f(2) = 1',
228: 1:    '✅f(3) = 2',
228: 1:    '✅f(4) = 3',
228: 1:    '✅f(5) = 5',
228: 1:    '✅f(6) = 8',
228: 1:    '✅f(7) = 13',
228: 1:    '✅f(8) = 21',
228: 1:    '✅f(9) = 34',
228: 1:    '✅f(10) = 55',
228: 1:    '❌f(11) = ??? != 89'
228: 1:  ],
228: 1:  'level': 8,
228: 1:  'nextQuestion': '11',
228: 1:  'questions': [
228: 1:    '1',
228: 1:    '2',
228: 1:    '3',
228: 1:    '4',
228: 1:    '5',
228: 1:    '6',
228: 1:    '7',
228: 1:    '8',
228: 1:    '9',
228: 1:    '10',
228: 1:    '11'
228: 1:  ]
228: 1:}
228: 1:Scores: 8077
228: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89']')
228: 1:Fire Event: PassTest{complexity=12, testCount=25}
------------------------------------------
229: 1:BoardData {
229: 1:  'description': [
229: 1:    'Make a function that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
229: 1:    'Please use javascript language.',
229: 1:    'Use parseInt to parse input string arguments.',
229: 1:    'Use separate variable to store the result of parseInt.',
229: 1:    'Rewrite the function in a shorter way.',
229: 1:    'Remove everything from the script except for the function logic.'
229: 1:  ],
229: 1:  'expectedAnswer': '144',
229: 1:  'history': [
229: 1:    {
229: 1:      'answer': '1',
229: 1:      'question': '1',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '1',
229: 1:      'question': '2',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '2',
229: 1:      'question': '3',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '3',
229: 1:      'question': '4',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '5',
229: 1:      'question': '5',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '8',
229: 1:      'question': '6',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '13',
229: 1:      'question': '7',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '21',
229: 1:      'question': '8',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '34',
229: 1:      'question': '9',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '55',
229: 1:      'question': '10',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '89',
229: 1:      'question': '11',
229: 1:      'valid': true
229: 1:    }
229: 1:  ],
229: 1:  'info': [
229: 1:    '✅f(1) = 1',
229: 1:    '✅f(2) = 1',
229: 1:    '✅f(3) = 2',
229: 1:    '✅f(4) = 3',
229: 1:    '✅f(5) = 5',
229: 1:    '✅f(6) = 8',
229: 1:    '✅f(7) = 13',
229: 1:    '✅f(8) = 21',
229: 1:    '✅f(9) = 34',
229: 1:    '✅f(10) = 55',
229: 1:    '✅f(11) = 89',
229: 1:    '❌f(12) = ??? != 144'
229: 1:  ],
229: 1:  'level': 8,
229: 1:  'nextQuestion': '12',
229: 1:  'questions': [
229: 1:    '1',
229: 1:    '2',
229: 1:    '3',
229: 1:    '4',
229: 1:    '5',
229: 1:    '6',
229: 1:    '7',
229: 1:    '8',
229: 1:    '9',
229: 1:    '10',
229: 1:    '11',
229: 1:    '12'
229: 1:  ]
229: 1:}
229: 1:Scores: 8081
229: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144']')
229: 1:Fire Event: PassTest{complexity=12, testCount=25}
------------------------------------------
230: 1:BoardData {
230: 1:  'description': [
230: 1:    'Make a function that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
230: 1:    'Please use javascript language.',
230: 1:    'Use parseInt to parse input string arguments.',
230: 1:    'Use separate variable to store the result of parseInt.',
230: 1:    'Rewrite the function in a shorter way.',
230: 1:    'Remove everything from the script except for the function logic.'
230: 1:  ],
230: 1:  'expectedAnswer': '233',
230: 1:  'history': [
230: 1:    {
230: 1:      'answer': '1',
230: 1:      'question': '1',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '1',
230: 1:      'question': '2',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '2',
230: 1:      'question': '3',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '3',
230: 1:      'question': '4',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '5',
230: 1:      'question': '5',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '8',
230: 1:      'question': '6',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '13',
230: 1:      'question': '7',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '21',
230: 1:      'question': '8',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '34',
230: 1:      'question': '9',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '55',
230: 1:      'question': '10',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '89',
230: 1:      'question': '11',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '144',
230: 1:      'question': '12',
230: 1:      'valid': true
230: 1:    }
230: 1:  ],
230: 1:  'info': [
230: 1:    '✅f(1) = 1',
230: 1:    '✅f(2) = 1',
230: 1:    '✅f(3) = 2',
230: 1:    '✅f(4) = 3',
230: 1:    '✅f(5) = 5',
230: 1:    '✅f(6) = 8',
230: 1:    '✅f(7) = 13',
230: 1:    '✅f(8) = 21',
230: 1:    '✅f(9) = 34',
230: 1:    '✅f(10) = 55',
230: 1:    '✅f(11) = 89',
230: 1:    '✅f(12) = 144',
230: 1:    '❌f(13) = ??? != 233'
230: 1:  ],
230: 1:  'level': 8,
230: 1:  'nextQuestion': '13',
230: 1:  'questions': [
230: 1:    '1',
230: 1:    '2',
230: 1:    '3',
230: 1:    '4',
230: 1:    '5',
230: 1:    '6',
230: 1:    '7',
230: 1:    '8',
230: 1:    '9',
230: 1:    '10',
230: 1:    '11',
230: 1:    '12',
230: 1:    '13'
230: 1:  ]
230: 1:}
230: 1:Scores: 8085
230: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233']')
230: 1:Fire Event: PassTest{complexity=12, testCount=25}
------------------------------------------
231: 1:BoardData {
231: 1:  'description': [
231: 1:    'Make a function that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
231: 1:    'Please use javascript language.',
231: 1:    'Use parseInt to parse input string arguments.',
231: 1:    'Use separate variable to store the result of parseInt.',
231: 1:    'Rewrite the function in a shorter way.',
231: 1:    'Remove everything from the script except for the function logic.'
231: 1:  ],
231: 1:  'expectedAnswer': '377',
231: 1:  'history': [
231: 1:    {
231: 1:      'answer': '1',
231: 1:      'question': '1',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '1',
231: 1:      'question': '2',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '2',
231: 1:      'question': '3',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '3',
231: 1:      'question': '4',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '5',
231: 1:      'question': '5',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '8',
231: 1:      'question': '6',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '13',
231: 1:      'question': '7',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '21',
231: 1:      'question': '8',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '34',
231: 1:      'question': '9',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '55',
231: 1:      'question': '10',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '89',
231: 1:      'question': '11',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '144',
231: 1:      'question': '12',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '233',
231: 1:      'question': '13',
231: 1:      'valid': true
231: 1:    }
231: 1:  ],
231: 1:  'info': [
231: 1:    '✅f(1) = 1',
231: 1:    '✅f(2) = 1',
231: 1:    '✅f(3) = 2',
231: 1:    '✅f(4) = 3',
231: 1:    '✅f(5) = 5',
231: 1:    '✅f(6) = 8',
231: 1:    '✅f(7) = 13',
231: 1:    '✅f(8) = 21',
231: 1:    '✅f(9) = 34',
231: 1:    '✅f(10) = 55',
231: 1:    '✅f(11) = 89',
231: 1:    '✅f(12) = 144',
231: 1:    '✅f(13) = 233',
231: 1:    '❌f(14) = ??? != 377'
231: 1:  ],
231: 1:  'level': 8,
231: 1:  'nextQuestion': '14',
231: 1:  'questions': [
231: 1:    '1',
231: 1:    '2',
231: 1:    '3',
231: 1:    '4',
231: 1:    '5',
231: 1:    '6',
231: 1:    '7',
231: 1:    '8',
231: 1:    '9',
231: 1:    '10',
231: 1:    '11',
231: 1:    '12',
231: 1:    '13',
231: 1:    '14'
231: 1:  ]
231: 1:}
231: 1:Scores: 8089
231: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377']')
231: 1:Fire Event: PassTest{complexity=12, testCount=25}
------------------------------------------
232: 1:BoardData {
232: 1:  'description': [
232: 1:    'Make a function that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
232: 1:    'Please use javascript language.',
232: 1:    'Use parseInt to parse input string arguments.',
232: 1:    'Use separate variable to store the result of parseInt.',
232: 1:    'Rewrite the function in a shorter way.',
232: 1:    'Remove everything from the script except for the function logic.'
232: 1:  ],
232: 1:  'expectedAnswer': '610',
232: 1:  'history': [
232: 1:    {
232: 1:      'answer': '1',
232: 1:      'question': '1',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '1',
232: 1:      'question': '2',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '2',
232: 1:      'question': '3',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '3',
232: 1:      'question': '4',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '5',
232: 1:      'question': '5',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '8',
232: 1:      'question': '6',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '13',
232: 1:      'question': '7',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '21',
232: 1:      'question': '8',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '34',
232: 1:      'question': '9',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '55',
232: 1:      'question': '10',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '89',
232: 1:      'question': '11',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '144',
232: 1:      'question': '12',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '233',
232: 1:      'question': '13',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '377',
232: 1:      'question': '14',
232: 1:      'valid': true
232: 1:    }
232: 1:  ],
232: 1:  'info': [
232: 1:    '✅f(1) = 1',
232: 1:    '✅f(2) = 1',
232: 1:    '✅f(3) = 2',
232: 1:    '✅f(4) = 3',
232: 1:    '✅f(5) = 5',
232: 1:    '✅f(6) = 8',
232: 1:    '✅f(7) = 13',
232: 1:    '✅f(8) = 21',
232: 1:    '✅f(9) = 34',
232: 1:    '✅f(10) = 55',
232: 1:    '✅f(11) = 89',
232: 1:    '✅f(12) = 144',
232: 1:    '✅f(13) = 233',
232: 1:    '✅f(14) = 377',
232: 1:    '❌f(15) = ??? != 610'
232: 1:  ],
232: 1:  'level': 8,
232: 1:  'nextQuestion': '15',
232: 1:  'questions': [
232: 1:    '1',
232: 1:    '2',
232: 1:    '3',
232: 1:    '4',
232: 1:    '5',
232: 1:    '6',
232: 1:    '7',
232: 1:    '8',
232: 1:    '9',
232: 1:    '10',
232: 1:    '11',
232: 1:    '12',
232: 1:    '13',
232: 1:    '14',
232: 1:    '15'
232: 1:  ]
232: 1:}
232: 1:Scores: 8093
232: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610']')
232: 1:Fire Event: PassTest{complexity=12, testCount=25}
------------------------------------------
233: 1:BoardData {
233: 1:  'description': [
233: 1:    'Make a function that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
233: 1:    'Please use javascript language.',
233: 1:    'Use parseInt to parse input string arguments.',
233: 1:    'Use separate variable to store the result of parseInt.',
233: 1:    'Rewrite the function in a shorter way.',
233: 1:    'Remove everything from the script except for the function logic.'
233: 1:  ],
233: 1:  'expectedAnswer': '987',
233: 1:  'history': [
233: 1:    {
233: 1:      'answer': '1',
233: 1:      'question': '1',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '1',
233: 1:      'question': '2',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '2',
233: 1:      'question': '3',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '3',
233: 1:      'question': '4',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '5',
233: 1:      'question': '5',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '8',
233: 1:      'question': '6',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '13',
233: 1:      'question': '7',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '21',
233: 1:      'question': '8',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '34',
233: 1:      'question': '9',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '55',
233: 1:      'question': '10',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '89',
233: 1:      'question': '11',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '144',
233: 1:      'question': '12',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '233',
233: 1:      'question': '13',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '377',
233: 1:      'question': '14',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '610',
233: 1:      'question': '15',
233: 1:      'valid': true
233: 1:    }
233: 1:  ],
233: 1:  'info': [
233: 1:    '✅f(1) = 1',
233: 1:    '✅f(2) = 1',
233: 1:    '✅f(3) = 2',
233: 1:    '✅f(4) = 3',
233: 1:    '✅f(5) = 5',
233: 1:    '✅f(6) = 8',
233: 1:    '✅f(7) = 13',
233: 1:    '✅f(8) = 21',
233: 1:    '✅f(9) = 34',
233: 1:    '✅f(10) = 55',
233: 1:    '✅f(11) = 89',
233: 1:    '✅f(12) = 144',
233: 1:    '✅f(13) = 233',
233: 1:    '✅f(14) = 377',
233: 1:    '✅f(15) = 610',
233: 1:    '❌f(16) = ??? != 987'
233: 1:  ],
233: 1:  'level': 8,
233: 1:  'nextQuestion': '16',
233: 1:  'questions': [
233: 1:    '1',
233: 1:    '2',
233: 1:    '3',
233: 1:    '4',
233: 1:    '5',
233: 1:    '6',
233: 1:    '7',
233: 1:    '8',
233: 1:    '9',
233: 1:    '10',
233: 1:    '11',
233: 1:    '12',
233: 1:    '13',
233: 1:    '14',
233: 1:    '15',
233: 1:    '16'
233: 1:  ]
233: 1:}
233: 1:Scores: 8097
233: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987']')
233: 1:Fire Event: PassTest{complexity=12, testCount=25}
------------------------------------------
234: 1:BoardData {
234: 1:  'description': [
234: 1:    'Make a function that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
234: 1:    'Please use javascript language.',
234: 1:    'Use parseInt to parse input string arguments.',
234: 1:    'Use separate variable to store the result of parseInt.',
234: 1:    'Rewrite the function in a shorter way.',
234: 1:    'Remove everything from the script except for the function logic.'
234: 1:  ],
234: 1:  'expectedAnswer': '1597',
234: 1:  'history': [
234: 1:    {
234: 1:      'answer': '1',
234: 1:      'question': '1',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '1',
234: 1:      'question': '2',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '2',
234: 1:      'question': '3',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '3',
234: 1:      'question': '4',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '5',
234: 1:      'question': '5',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '8',
234: 1:      'question': '6',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '13',
234: 1:      'question': '7',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '21',
234: 1:      'question': '8',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '34',
234: 1:      'question': '9',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '55',
234: 1:      'question': '10',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '89',
234: 1:      'question': '11',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '144',
234: 1:      'question': '12',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '233',
234: 1:      'question': '13',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '377',
234: 1:      'question': '14',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '610',
234: 1:      'question': '15',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '987',
234: 1:      'question': '16',
234: 1:      'valid': true
234: 1:    }
234: 1:  ],
234: 1:  'info': [
234: 1:    '✅f(1) = 1',
234: 1:    '✅f(2) = 1',
234: 1:    '✅f(3) = 2',
234: 1:    '✅f(4) = 3',
234: 1:    '✅f(5) = 5',
234: 1:    '✅f(6) = 8',
234: 1:    '✅f(7) = 13',
234: 1:    '✅f(8) = 21',
234: 1:    '✅f(9) = 34',
234: 1:    '✅f(10) = 55',
234: 1:    '✅f(11) = 89',
234: 1:    '✅f(12) = 144',
234: 1:    '✅f(13) = 233',
234: 1:    '✅f(14) = 377',
234: 1:    '✅f(15) = 610',
234: 1:    '✅f(16) = 987',
234: 1:    '❌f(17) = ??? != 1597'
234: 1:  ],
234: 1:  'level': 8,
234: 1:  'nextQuestion': '17',
234: 1:  'questions': [
234: 1:    '1',
234: 1:    '2',
234: 1:    '3',
234: 1:    '4',
234: 1:    '5',
234: 1:    '6',
234: 1:    '7',
234: 1:    '8',
234: 1:    '9',
234: 1:    '10',
234: 1:    '11',
234: 1:    '12',
234: 1:    '13',
234: 1:    '14',
234: 1:    '15',
234: 1:    '16',
234: 1:    '17'
234: 1:  ]
234: 1:}
234: 1:Scores: 8101
234: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597']')
234: 1:Fire Event: PassTest{complexity=12, testCount=25}
------------------------------------------
235: 1:BoardData {
235: 1:  'description': [
235: 1:    'Make a function that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
235: 1:    'Please use javascript language.',
235: 1:    'Use parseInt to parse input string arguments.',
235: 1:    'Use separate variable to store the result of parseInt.',
235: 1:    'Rewrite the function in a shorter way.',
235: 1:    'Remove everything from the script except for the function logic.'
235: 1:  ],
235: 1:  'expectedAnswer': '2584',
235: 1:  'history': [
235: 1:    {
235: 1:      'answer': '1',
235: 1:      'question': '1',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '1',
235: 1:      'question': '2',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '2',
235: 1:      'question': '3',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '3',
235: 1:      'question': '4',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '5',
235: 1:      'question': '5',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '8',
235: 1:      'question': '6',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '13',
235: 1:      'question': '7',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '21',
235: 1:      'question': '8',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '34',
235: 1:      'question': '9',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '55',
235: 1:      'question': '10',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '89',
235: 1:      'question': '11',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '144',
235: 1:      'question': '12',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '233',
235: 1:      'question': '13',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '377',
235: 1:      'question': '14',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '610',
235: 1:      'question': '15',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '987',
235: 1:      'question': '16',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '1597',
235: 1:      'question': '17',
235: 1:      'valid': true
235: 1:    }
235: 1:  ],
235: 1:  'info': [
235: 1:    '✅f(1) = 1',
235: 1:    '✅f(2) = 1',
235: 1:    '✅f(3) = 2',
235: 1:    '✅f(4) = 3',
235: 1:    '✅f(5) = 5',
235: 1:    '✅f(6) = 8',
235: 1:    '✅f(7) = 13',
235: 1:    '✅f(8) = 21',
235: 1:    '✅f(9) = 34',
235: 1:    '✅f(10) = 55',
235: 1:    '✅f(11) = 89',
235: 1:    '✅f(12) = 144',
235: 1:    '✅f(13) = 233',
235: 1:    '✅f(14) = 377',
235: 1:    '✅f(15) = 610',
235: 1:    '✅f(16) = 987',
235: 1:    '✅f(17) = 1597',
235: 1:    '❌f(18) = ??? != 2584'
235: 1:  ],
235: 1:  'level': 8,
235: 1:  'nextQuestion': '18',
235: 1:  'questions': [
235: 1:    '1',
235: 1:    '2',
235: 1:    '3',
235: 1:    '4',
235: 1:    '5',
235: 1:    '6',
235: 1:    '7',
235: 1:    '8',
235: 1:    '9',
235: 1:    '10',
235: 1:    '11',
235: 1:    '12',
235: 1:    '13',
235: 1:    '14',
235: 1:    '15',
235: 1:    '16',
235: 1:    '17',
235: 1:    '18'
235: 1:  ]
235: 1:}
235: 1:Scores: 8105
235: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597', '2584']')
235: 1:Fire Event: PassTest{complexity=12, testCount=25}
------------------------------------------
236: 1:BoardData {
236: 1:  'description': [
236: 1:    'Make a function that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
236: 1:    'Please use javascript language.',
236: 1:    'Use parseInt to parse input string arguments.',
236: 1:    'Use separate variable to store the result of parseInt.',
236: 1:    'Rewrite the function in a shorter way.',
236: 1:    'Remove everything from the script except for the function logic.'
236: 1:  ],
236: 1:  'expectedAnswer': '4181',
236: 1:  'history': [
236: 1:    {
236: 1:      'answer': '1',
236: 1:      'question': '1',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '1',
236: 1:      'question': '2',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '2',
236: 1:      'question': '3',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '3',
236: 1:      'question': '4',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '5',
236: 1:      'question': '5',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '8',
236: 1:      'question': '6',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '13',
236: 1:      'question': '7',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '21',
236: 1:      'question': '8',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '34',
236: 1:      'question': '9',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '55',
236: 1:      'question': '10',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '89',
236: 1:      'question': '11',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '144',
236: 1:      'question': '12',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '233',
236: 1:      'question': '13',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '377',
236: 1:      'question': '14',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '610',
236: 1:      'question': '15',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '987',
236: 1:      'question': '16',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '1597',
236: 1:      'question': '17',
236: 1:      'valid': true
236: 1:    },
236: 1:    {
236: 1:      'answer': '2584',
236: 1:      'question': '18',
236: 1:      'valid': true
236: 1:    }
236: 1:  ],
236: 1:  'info': [
236: 1:    '✅f(1) = 1',
236: 1:    '✅f(2) = 1',
236: 1:    '✅f(3) = 2',
236: 1:    '✅f(4) = 3',
236: 1:    '✅f(5) = 5',
236: 1:    '✅f(6) = 8',
236: 1:    '✅f(7) = 13',
236: 1:    '✅f(8) = 21',
236: 1:    '✅f(9) = 34',
236: 1:    '✅f(10) = 55',
236: 1:    '✅f(11) = 89',
236: 1:    '✅f(12) = 144',
236: 1:    '✅f(13) = 233',
236: 1:    '✅f(14) = 377',
236: 1:    '✅f(15) = 610',
236: 1:    '✅f(16) = 987',
236: 1:    '✅f(17) = 1597',
236: 1:    '✅f(18) = 2584',
236: 1:    '❌f(19) = ??? != 4181'
236: 1:  ],
236: 1:  'level': 8,
236: 1:  'nextQuestion': '19',
236: 1:  'questions': [
236: 1:    '1',
236: 1:    '2',
236: 1:    '3',
236: 1:    '4',
236: 1:    '5',
236: 1:    '6',
236: 1:    '7',
236: 1:    '8',
236: 1:    '9',
236: 1:    '10',
236: 1:    '11',
236: 1:    '12',
236: 1:    '13',
236: 1:    '14',
236: 1:    '15',
236: 1:    '16',
236: 1:    '17',
236: 1:    '18',
236: 1:    '19'
236: 1:  ]
236: 1:}
236: 1:Scores: 8109
236: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597', '2584', '4181']')
236: 1:Fire Event: PassTest{complexity=12, testCount=25}
------------------------------------------
237: 1:BoardData {
237: 1:  'description': [
237: 1:    'Make a function that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
237: 1:    'Please use javascript language.',
237: 1:    'Use parseInt to parse input string arguments.',
237: 1:    'Use separate variable to store the result of parseInt.',
237: 1:    'Rewrite the function in a shorter way.',
237: 1:    'Remove everything from the script except for the function logic.'
237: 1:  ],
237: 1:  'expectedAnswer': '6765',
237: 1:  'history': [
237: 1:    {
237: 1:      'answer': '1',
237: 1:      'question': '1',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '1',
237: 1:      'question': '2',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '2',
237: 1:      'question': '3',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '3',
237: 1:      'question': '4',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '5',
237: 1:      'question': '5',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '8',
237: 1:      'question': '6',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '13',
237: 1:      'question': '7',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '21',
237: 1:      'question': '8',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '34',
237: 1:      'question': '9',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '55',
237: 1:      'question': '10',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '89',
237: 1:      'question': '11',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '144',
237: 1:      'question': '12',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '233',
237: 1:      'question': '13',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '377',
237: 1:      'question': '14',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '610',
237: 1:      'question': '15',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '987',
237: 1:      'question': '16',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '1597',
237: 1:      'question': '17',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '2584',
237: 1:      'question': '18',
237: 1:      'valid': true
237: 1:    },
237: 1:    {
237: 1:      'answer': '4181',
237: 1:      'question': '19',
237: 1:      'valid': true
237: 1:    }
237: 1:  ],
237: 1:  'info': [
237: 1:    '✅f(1) = 1',
237: 1:    '✅f(2) = 1',
237: 1:    '✅f(3) = 2',
237: 1:    '✅f(4) = 3',
237: 1:    '✅f(5) = 5',
237: 1:    '✅f(6) = 8',
237: 1:    '✅f(7) = 13',
237: 1:    '✅f(8) = 21',
237: 1:    '✅f(9) = 34',
237: 1:    '✅f(10) = 55',
237: 1:    '✅f(11) = 89',
237: 1:    '✅f(12) = 144',
237: 1:    '✅f(13) = 233',
237: 1:    '✅f(14) = 377',
237: 1:    '✅f(15) = 610',
237: 1:    '✅f(16) = 987',
237: 1:    '✅f(17) = 1597',
237: 1:    '✅f(18) = 2584',
237: 1:    '✅f(19) = 4181',
237: 1:    '❌f(20) = ??? != 6765'
237: 1:  ],
237: 1:  'level': 8,
237: 1:  'nextQuestion': '20',
237: 1:  'questions': [
237: 1:    '1',
237: 1:    '2',
237: 1:    '3',
237: 1:    '4',
237: 1:    '5',
237: 1:    '6',
237: 1:    '7',
237: 1:    '8',
237: 1:    '9',
237: 1:    '10',
237: 1:    '11',
237: 1:    '12',
237: 1:    '13',
237: 1:    '14',
237: 1:    '15',
237: 1:    '16',
237: 1:    '17',
237: 1:    '18',
237: 1:    '19',
237: 1:    '20'
237: 1:  ]
237: 1:}
237: 1:Scores: 8113
237: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597', '2584', '4181', '6765']')
237: 1:Fire Event: PassTest{complexity=12, testCount=25}
------------------------------------------
238: 1:BoardData {
238: 1:  'description': [
238: 1:    'Make a function that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
238: 1:    'Please use javascript language.',
238: 1:    'Use parseInt to parse input string arguments.',
238: 1:    'Use separate variable to store the result of parseInt.',
238: 1:    'Rewrite the function in a shorter way.',
238: 1:    'Remove everything from the script except for the function logic.'
238: 1:  ],
238: 1:  'expectedAnswer': '10946',
238: 1:  'history': [
238: 1:    {
238: 1:      'answer': '1',
238: 1:      'question': '1',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '1',
238: 1:      'question': '2',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '2',
238: 1:      'question': '3',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '3',
238: 1:      'question': '4',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '5',
238: 1:      'question': '5',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '8',
238: 1:      'question': '6',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '13',
238: 1:      'question': '7',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '21',
238: 1:      'question': '8',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '34',
238: 1:      'question': '9',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '55',
238: 1:      'question': '10',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '89',
238: 1:      'question': '11',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '144',
238: 1:      'question': '12',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '233',
238: 1:      'question': '13',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '377',
238: 1:      'question': '14',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '610',
238: 1:      'question': '15',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '987',
238: 1:      'question': '16',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '1597',
238: 1:      'question': '17',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '2584',
238: 1:      'question': '18',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '4181',
238: 1:      'question': '19',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '6765',
238: 1:      'question': '20',
238: 1:      'valid': true
238: 1:    }
238: 1:  ],
238: 1:  'info': [
238: 1:    '✅f(1) = 1',
238: 1:    '✅f(2) = 1',
238: 1:    '✅f(3) = 2',
238: 1:    '✅f(4) = 3',
238: 1:    '✅f(5) = 5',
238: 1:    '✅f(6) = 8',
238: 1:    '✅f(7) = 13',
238: 1:    '✅f(8) = 21',
238: 1:    '✅f(9) = 34',
238: 1:    '✅f(10) = 55',
238: 1:    '✅f(11) = 89',
238: 1:    '✅f(12) = 144',
238: 1:    '✅f(13) = 233',
238: 1:    '✅f(14) = 377',
238: 1:    '✅f(15) = 610',
238: 1:    '✅f(16) = 987',
238: 1:    '✅f(17) = 1597',
238: 1:    '✅f(18) = 2584',
238: 1:    '✅f(19) = 4181',
238: 1:    '✅f(20) = 6765',
238: 1:    '❌f(21) = ??? != 10946'
238: 1:  ],
238: 1:  'level': 8,
238: 1:  'nextQuestion': '21',
238: 1:  'questions': [
238: 1:    '1',
238: 1:    '2',
238: 1:    '3',
238: 1:    '4',
238: 1:    '5',
238: 1:    '6',
238: 1:    '7',
238: 1:    '8',
238: 1:    '9',
238: 1:    '10',
238: 1:    '11',
238: 1:    '12',
238: 1:    '13',
238: 1:    '14',
238: 1:    '15',
238: 1:    '16',
238: 1:    '17',
238: 1:    '18',
238: 1:    '19',
238: 1:    '20',
238: 1:    '21'
238: 1:  ]
238: 1:}
238: 1:Scores: 8117
238: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597', '2584', '4181', '6765', '10946']')
238: 1:Fire Event: PassTest{complexity=12, testCount=25}
------------------------------------------
239: 1:BoardData {
239: 1:  'description': [
239: 1:    'Make a function that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
239: 1:    'Please use javascript language.',
239: 1:    'Use parseInt to parse input string arguments.',
239: 1:    'Use separate variable to store the result of parseInt.',
239: 1:    'Rewrite the function in a shorter way.',
239: 1:    'Remove everything from the script except for the function logic.'
239: 1:  ],
239: 1:  'expectedAnswer': '17711',
239: 1:  'history': [
239: 1:    {
239: 1:      'answer': '1',
239: 1:      'question': '1',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '1',
239: 1:      'question': '2',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '2',
239: 1:      'question': '3',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '3',
239: 1:      'question': '4',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '5',
239: 1:      'question': '5',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '8',
239: 1:      'question': '6',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '13',
239: 1:      'question': '7',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '21',
239: 1:      'question': '8',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '34',
239: 1:      'question': '9',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '55',
239: 1:      'question': '10',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '89',
239: 1:      'question': '11',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '144',
239: 1:      'question': '12',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '233',
239: 1:      'question': '13',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '377',
239: 1:      'question': '14',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '610',
239: 1:      'question': '15',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '987',
239: 1:      'question': '16',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '1597',
239: 1:      'question': '17',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '2584',
239: 1:      'question': '18',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '4181',
239: 1:      'question': '19',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '6765',
239: 1:      'question': '20',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '10946',
239: 1:      'question': '21',
239: 1:      'valid': true
239: 1:    }
239: 1:  ],
239: 1:  'info': [
239: 1:    '✅f(1) = 1',
239: 1:    '✅f(2) = 1',
239: 1:    '✅f(3) = 2',
239: 1:    '✅f(4) = 3',
239: 1:    '✅f(5) = 5',
239: 1:    '✅f(6) = 8',
239: 1:    '✅f(7) = 13',
239: 1:    '✅f(8) = 21',
239: 1:    '✅f(9) = 34',
239: 1:    '✅f(10) = 55',
239: 1:    '✅f(11) = 89',
239: 1:    '✅f(12) = 144',
239: 1:    '✅f(13) = 233',
239: 1:    '✅f(14) = 377',
239: 1:    '✅f(15) = 610',
239: 1:    '✅f(16) = 987',
239: 1:    '✅f(17) = 1597',
239: 1:    '✅f(18) = 2584',
239: 1:    '✅f(19) = 4181',
239: 1:    '✅f(20) = 6765',
239: 1:    '✅f(21) = 10946',
239: 1:    '❌f(22) = ??? != 17711'
239: 1:  ],
239: 1:  'level': 8,
239: 1:  'nextQuestion': '22',
239: 1:  'questions': [
239: 1:    '1',
239: 1:    '2',
239: 1:    '3',
239: 1:    '4',
239: 1:    '5',
239: 1:    '6',
239: 1:    '7',
239: 1:    '8',
239: 1:    '9',
239: 1:    '10',
239: 1:    '11',
239: 1:    '12',
239: 1:    '13',
239: 1:    '14',
239: 1:    '15',
239: 1:    '16',
239: 1:    '17',
239: 1:    '18',
239: 1:    '19',
239: 1:    '20',
239: 1:    '21',
239: 1:    '22'
239: 1:  ]
239: 1:}
239: 1:Scores: 8121
239: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597', '2584', '4181', '6765', '10946', '17711']')
239: 1:Fire Event: PassTest{complexity=12, testCount=25}
------------------------------------------
240: 1:BoardData {
240: 1:  'description': [
240: 1:    'Make a function that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
240: 1:    'Please use javascript language.',
240: 1:    'Use parseInt to parse input string arguments.',
240: 1:    'Use separate variable to store the result of parseInt.',
240: 1:    'Rewrite the function in a shorter way.',
240: 1:    'Remove everything from the script except for the function logic.'
240: 1:  ],
240: 1:  'expectedAnswer': '28657',
240: 1:  'history': [
240: 1:    {
240: 1:      'answer': '1',
240: 1:      'question': '1',
240: 1:      'valid': true
240: 1:    },
240: 1:    {
240: 1:      'answer': '1',
240: 1:      'question': '2',
240: 1:      'valid': true
240: 1:    },
240: 1:    {
240: 1:      'answer': '2',
240: 1:      'question': '3',
240: 1:      'valid': true
240: 1:    },
240: 1:    {
240: 1:      'answer': '3',
240: 1:      'question': '4',
240: 1:      'valid': true
240: 1:    },
240: 1:    {
240: 1:      'answer': '5',
240: 1:      'question': '5',
240: 1:      'valid': true
240: 1:    },
240: 1:    {
240: 1:      'answer': '8',
240: 1:      'question': '6',
240: 1:      'valid': true
240: 1:    },
240: 1:    {
240: 1:      'answer': '13',
240: 1:      'question': '7',
240: 1:      'valid': true
240: 1:    },
240: 1:    {
240: 1:      'answer': '21',
240: 1:      'question': '8',
240: 1:      'valid': true
240: 1:    },
240: 1:    {
240: 1:      'answer': '34',
240: 1:      'question': '9',
240: 1:      'valid': true
240: 1:    },
240: 1:    {
240: 1:      'answer': '55',
240: 1:      'question': '10',
240: 1:      'valid': true
240: 1:    },
240: 1:    {
240: 1:      'answer': '89',
240: 1:      'question': '11',
240: 1:      'valid': true
240: 1:    },
240: 1:    {
240: 1:      'answer': '144',
240: 1:      'question': '12',
240: 1:      'valid': true
240: 1:    },
240: 1:    {
240: 1:      'answer': '233',
240: 1:      'question': '13',
240: 1:      'valid': true
240: 1:    },
240: 1:    {
240: 1:      'answer': '377',
240: 1:      'question': '14',
240: 1:      'valid': true
240: 1:    },
240: 1:    {
240: 1:      'answer': '610',
240: 1:      'question': '15',
240: 1:      'valid': true
240: 1:    },
240: 1:    {
240: 1:      'answer': '987',
240: 1:      'question': '16',
240: 1:      'valid': true
240: 1:    },
240: 1:    {
240: 1:      'answer': '1597',
240: 1:      'question': '17',
240: 1:      'valid': true
240: 1:    },
240: 1:    {
240: 1:      'answer': '2584',
240: 1:      'question': '18',
240: 1:      'valid': true
240: 1:    },
240: 1:    {
240: 1:      'answer': '4181',
240: 1:      'question': '19',
240: 1:      'valid': true
240: 1:    },
240: 1:    {
240: 1:      'answer': '6765',
240: 1:      'question': '20',
240: 1:      'valid': true
240: 1:    },
240: 1:    {
240: 1:      'answer': '10946',
240: 1:      'question': '21',
240: 1:      'valid': true
240: 1:    },
240: 1:    {
240: 1:      'answer': '17711',
240: 1:      'question': '22',
240: 1:      'valid': true
240: 1:    }
240: 1:  ],
240: 1:  'info': [
240: 1:    '✅f(1) = 1',
240: 1:    '✅f(2) = 1',
240: 1:    '✅f(3) = 2',
240: 1:    '✅f(4) = 3',
240: 1:    '✅f(5) = 5',
240: 1:    '✅f(6) = 8',
240: 1:    '✅f(7) = 13',
240: 1:    '✅f(8) = 21',
240: 1:    '✅f(9) = 34',
240: 1:    '✅f(10) = 55',
240: 1:    '✅f(11) = 89',
240: 1:    '✅f(12) = 144',
240: 1:    '✅f(13) = 233',
240: 1:    '✅f(14) = 377',
240: 1:    '✅f(15) = 610',
240: 1:    '✅f(16) = 987',
240: 1:    '✅f(17) = 1597',
240: 1:    '✅f(18) = 2584',
240: 1:    '✅f(19) = 4181',
240: 1:    '✅f(20) = 6765',
240: 1:    '✅f(21) = 10946',
240: 1:    '✅f(22) = 17711',
240: 1:    '❌f(23) = ??? != 28657'
240: 1:  ],
240: 1:  'level': 8,
240: 1:  'nextQuestion': '23',
240: 1:  'questions': [
240: 1:    '1',
240: 1:    '2',
240: 1:    '3',
240: 1:    '4',
240: 1:    '5',
240: 1:    '6',
240: 1:    '7',
240: 1:    '8',
240: 1:    '9',
240: 1:    '10',
240: 1:    '11',
240: 1:    '12',
240: 1:    '13',
240: 1:    '14',
240: 1:    '15',
240: 1:    '16',
240: 1:    '17',
240: 1:    '18',
240: 1:    '19',
240: 1:    '20',
240: 1:    '21',
240: 1:    '22',
240: 1:    '23'
240: 1:  ]
240: 1:}
240: 1:Scores: 8125
240: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597', '2584', '4181', '6765', '10946', '17711', '28657']')
240: 1:Fire Event: PassTest{complexity=12, testCount=25}
------------------------------------------
241: 1:BoardData {
241: 1:  'description': [
241: 1:    'Make a function that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
241: 1:    'Please use javascript language.',
241: 1:    'Use parseInt to parse input string arguments.',
241: 1:    'Use separate variable to store the result of parseInt.',
241: 1:    'Rewrite the function in a shorter way.',
241: 1:    'Remove everything from the script except for the function logic.'
241: 1:  ],
241: 1:  'expectedAnswer': '46368',
241: 1:  'history': [
241: 1:    {
241: 1:      'answer': '1',
241: 1:      'question': '1',
241: 1:      'valid': true
241: 1:    },
241: 1:    {
241: 1:      'answer': '1',
241: 1:      'question': '2',
241: 1:      'valid': true
241: 1:    },
241: 1:    {
241: 1:      'answer': '2',
241: 1:      'question': '3',
241: 1:      'valid': true
241: 1:    },
241: 1:    {
241: 1:      'answer': '3',
241: 1:      'question': '4',
241: 1:      'valid': true
241: 1:    },
241: 1:    {
241: 1:      'answer': '5',
241: 1:      'question': '5',
241: 1:      'valid': true
241: 1:    },
241: 1:    {
241: 1:      'answer': '8',
241: 1:      'question': '6',
241: 1:      'valid': true
241: 1:    },
241: 1:    {
241: 1:      'answer': '13',
241: 1:      'question': '7',
241: 1:      'valid': true
241: 1:    },
241: 1:    {
241: 1:      'answer': '21',
241: 1:      'question': '8',
241: 1:      'valid': true
241: 1:    },
241: 1:    {
241: 1:      'answer': '34',
241: 1:      'question': '9',
241: 1:      'valid': true
241: 1:    },
241: 1:    {
241: 1:      'answer': '55',
241: 1:      'question': '10',
241: 1:      'valid': true
241: 1:    },
241: 1:    {
241: 1:      'answer': '89',
241: 1:      'question': '11',
241: 1:      'valid': true
241: 1:    },
241: 1:    {
241: 1:      'answer': '144',
241: 1:      'question': '12',
241: 1:      'valid': true
241: 1:    },
241: 1:    {
241: 1:      'answer': '233',
241: 1:      'question': '13',
241: 1:      'valid': true
241: 1:    },
241: 1:    {
241: 1:      'answer': '377',
241: 1:      'question': '14',
241: 1:      'valid': true
241: 1:    },
241: 1:    {
241: 1:      'answer': '610',
241: 1:      'question': '15',
241: 1:      'valid': true
241: 1:    },
241: 1:    {
241: 1:      'answer': '987',
241: 1:      'question': '16',
241: 1:      'valid': true
241: 1:    },
241: 1:    {
241: 1:      'answer': '1597',
241: 1:      'question': '17',
241: 1:      'valid': true
241: 1:    },
241: 1:    {
241: 1:      'answer': '2584',
241: 1:      'question': '18',
241: 1:      'valid': true
241: 1:    },
241: 1:    {
241: 1:      'answer': '4181',
241: 1:      'question': '19',
241: 1:      'valid': true
241: 1:    },
241: 1:    {
241: 1:      'answer': '6765',
241: 1:      'question': '20',
241: 1:      'valid': true
241: 1:    },
241: 1:    {
241: 1:      'answer': '10946',
241: 1:      'question': '21',
241: 1:      'valid': true
241: 1:    },
241: 1:    {
241: 1:      'answer': '17711',
241: 1:      'question': '22',
241: 1:      'valid': true
241: 1:    },
241: 1:    {
241: 1:      'answer': '28657',
241: 1:      'question': '23',
241: 1:      'valid': true
241: 1:    }
241: 1:  ],
241: 1:  'info': [
241: 1:    '✅f(1) = 1',
241: 1:    '✅f(2) = 1',
241: 1:    '✅f(3) = 2',
241: 1:    '✅f(4) = 3',
241: 1:    '✅f(5) = 5',
241: 1:    '✅f(6) = 8',
241: 1:    '✅f(7) = 13',
241: 1:    '✅f(8) = 21',
241: 1:    '✅f(9) = 34',
241: 1:    '✅f(10) = 55',
241: 1:    '✅f(11) = 89',
241: 1:    '✅f(12) = 144',
241: 1:    '✅f(13) = 233',
241: 1:    '✅f(14) = 377',
241: 1:    '✅f(15) = 610',
241: 1:    '✅f(16) = 987',
241: 1:    '✅f(17) = 1597',
241: 1:    '✅f(18) = 2584',
241: 1:    '✅f(19) = 4181',
241: 1:    '✅f(20) = 6765',
241: 1:    '✅f(21) = 10946',
241: 1:    '✅f(22) = 17711',
241: 1:    '✅f(23) = 28657',
241: 1:    '❌f(24) = ??? != 46368'
241: 1:  ],
241: 1:  'level': 8,
241: 1:  'nextQuestion': '24',
241: 1:  'questions': [
241: 1:    '1',
241: 1:    '2',
241: 1:    '3',
241: 1:    '4',
241: 1:    '5',
241: 1:    '6',
241: 1:    '7',
241: 1:    '8',
241: 1:    '9',
241: 1:    '10',
241: 1:    '11',
241: 1:    '12',
241: 1:    '13',
241: 1:    '14',
241: 1:    '15',
241: 1:    '16',
241: 1:    '17',
241: 1:    '18',
241: 1:    '19',
241: 1:    '20',
241: 1:    '21',
241: 1:    '22',
241: 1:    '23',
241: 1:    '24'
241: 1:  ]
241: 1:}
241: 1:Scores: 8129
241: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597', '2584', '4181', '6765', '10946', '17711', '28657', '46368']')
241: 1:Fire Event: PassTest{complexity=12, testCount=25}
------------------------------------------
242: 1:BoardData {
242: 1:  'description': [
242: 1:    'Make a function that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...',
242: 1:    'Please use javascript language.',
242: 1:    'Use parseInt to parse input string arguments.',
242: 1:    'Use separate variable to store the result of parseInt.',
242: 1:    'Rewrite the function in a shorter way.',
242: 1:    'Remove everything from the script except for the function logic.'
242: 1:  ],
242: 1:  'expectedAnswer': '75025',
242: 1:  'history': [
242: 1:    {
242: 1:      'answer': '1',
242: 1:      'question': '1',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': '1',
242: 1:      'question': '2',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': '2',
242: 1:      'question': '3',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': '3',
242: 1:      'question': '4',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': '5',
242: 1:      'question': '5',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': '8',
242: 1:      'question': '6',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': '13',
242: 1:      'question': '7',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': '21',
242: 1:      'question': '8',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': '34',
242: 1:      'question': '9',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': '55',
242: 1:      'question': '10',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': '89',
242: 1:      'question': '11',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': '144',
242: 1:      'question': '12',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': '233',
242: 1:      'question': '13',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': '377',
242: 1:      'question': '14',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': '610',
242: 1:      'question': '15',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': '987',
242: 1:      'question': '16',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': '1597',
242: 1:      'question': '17',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': '2584',
242: 1:      'question': '18',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': '4181',
242: 1:      'question': '19',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': '6765',
242: 1:      'question': '20',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': '10946',
242: 1:      'question': '21',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': '17711',
242: 1:      'question': '22',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': '28657',
242: 1:      'question': '23',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': '46368',
242: 1:      'question': '24',
242: 1:      'valid': true
242: 1:    }
242: 1:  ],
242: 1:  'info': [
242: 1:    '✅f(1) = 1',
242: 1:    '✅f(2) = 1',
242: 1:    '✅f(3) = 2',
242: 1:    '✅f(4) = 3',
242: 1:    '✅f(5) = 5',
242: 1:    '✅f(6) = 8',
242: 1:    '✅f(7) = 13',
242: 1:    '✅f(8) = 21',
242: 1:    '✅f(9) = 34',
242: 1:    '✅f(10) = 55',
242: 1:    '✅f(11) = 89',
242: 1:    '✅f(12) = 144',
242: 1:    '✅f(13) = 233',
242: 1:    '✅f(14) = 377',
242: 1:    '✅f(15) = 610',
242: 1:    '✅f(16) = 987',
242: 1:    '✅f(17) = 1597',
242: 1:    '✅f(18) = 2584',
242: 1:    '✅f(19) = 4181',
242: 1:    '✅f(20) = 6765',
242: 1:    '✅f(21) = 10946',
242: 1:    '✅f(22) = 17711',
242: 1:    '✅f(23) = 28657',
242: 1:    '✅f(24) = 46368',
242: 1:    '❌f(25) = ??? != 75025'
242: 1:  ],
242: 1:  'level': 8,
242: 1:  'nextQuestion': '25',
242: 1:  'questions': [
242: 1:    '1',
242: 1:    '2',
242: 1:    '3',
242: 1:    '4',
242: 1:    '5',
242: 1:    '6',
242: 1:    '7',
242: 1:    '8',
242: 1:    '9',
242: 1:    '10',
242: 1:    '11',
242: 1:    '12',
242: 1:    '13',
242: 1:    '14',
242: 1:    '15',
242: 1:    '16',
242: 1:    '17',
242: 1:    '18',
242: 1:    '19',
242: 1:    '20',
242: 1:    '21',
242: 1:    '22',
242: 1:    '23',
242: 1:    '24',
242: 1:    '25'
242: 1:  ]
242: 1:}
242: 1:Scores: 8133
242: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597', '2584', '4181', '6765', '10946', '17711', '28657', '46368', '75025']')
242: 1:Fire Event: PassTest{complexity=12, testCount=25}
242: 1:Fire Event: NextAlgorithm{complexity=12, time=0}
------------------------------------------
243: 1:BoardData {
243: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
243: 1:  'history': [
243: 1:    {
243: 1:      'answer': '1',
243: 1:      'question': '1',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '1',
243: 1:      'question': '2',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '2',
243: 1:      'question': '3',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '3',
243: 1:      'question': '4',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '5',
243: 1:      'question': '5',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '8',
243: 1:      'question': '6',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '13',
243: 1:      'question': '7',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '21',
243: 1:      'question': '8',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '34',
243: 1:      'question': '9',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '55',
243: 1:      'question': '10',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '89',
243: 1:      'question': '11',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '144',
243: 1:      'question': '12',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '233',
243: 1:      'question': '13',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '377',
243: 1:      'question': '14',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '610',
243: 1:      'question': '15',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '987',
243: 1:      'question': '16',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '1597',
243: 1:      'question': '17',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '2584',
243: 1:      'question': '18',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '4181',
243: 1:      'question': '19',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '6765',
243: 1:      'question': '20',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '10946',
243: 1:      'question': '21',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '17711',
243: 1:      'question': '22',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '28657',
243: 1:      'question': '23',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '46368',
243: 1:      'question': '24',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '75025',
243: 1:      'question': '25',
243: 1:      'valid': true
243: 1:    }
243: 1:  ],
243: 1:  'info': [
243: 1:    '✅f(1) = 1',
243: 1:    '✅f(2) = 1',
243: 1:    '✅f(3) = 2',
243: 1:    '✅f(4) = 3',
243: 1:    '✅f(5) = 5',
243: 1:    '✅f(6) = 8',
243: 1:    '✅f(7) = 13',
243: 1:    '✅f(8) = 21',
243: 1:    '✅f(9) = 34',
243: 1:    '✅f(10) = 55',
243: 1:    '✅f(11) = 89',
243: 1:    '✅f(12) = 144',
243: 1:    '✅f(13) = 233',
243: 1:    '✅f(14) = 377',
243: 1:    '✅f(15) = 610',
243: 1:    '✅f(16) = 987',
243: 1:    '✅f(17) = 1597',
243: 1:    '✅f(18) = 2584',
243: 1:    '✅f(19) = 4181',
243: 1:    '✅f(20) = 6765',
243: 1:    '✅f(21) = 10946',
243: 1:    '✅f(22) = 17711',
243: 1:    '✅f(23) = 28657',
243: 1:    '✅f(24) = 46368',
243: 1:    '✅f(25) = 75025'
243: 1:  ],
243: 1:  'level': 8,
243: 1:  'questions': []
243: 1:}
243: 1:Scores: 9756
243: 1:Answer: message('StartNextLevel')
243: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
244: 1:BoardData {
244: 1:  'description': [
244: 1:    'Write a javascript function to find prime factors of a positive integer',
244: 1:    'Store the result into an array.',
244: 1:    'Use parseInt to parse input string arguments.',
244: 1:    'Use let for variables and put variable declarations at the top of the script.',
244: 1:    'Use separate variable to store the result of parseInt.',
244: 1:    'Corner case: primeFactors(1) should return [1].',
244: 1:    'Remove everything from the script except for the function logic.'
244: 1:  ],
244: 1:  'expectedAnswer': '[1]',
244: 1:  'history': [],
244: 1:  'info': ['❌f(1) = ??? != [1]'],
244: 1:  'level': 9,
244: 1:  'nextQuestion': '1',
244: 1:  'questions': ['1']
244: 1:}
244: 1:Scores: 9756
244: 1:Answer: message('['[1]']')
244: 1:Fire Event: PassTest{complexity=13, testCount=25}
------------------------------------------
245: 1:BoardData {
245: 1:  'description': [
245: 1:    'Write a javascript function to find prime factors of a positive integer',
245: 1:    'Store the result into an array.',
245: 1:    'Use parseInt to parse input string arguments.',
245: 1:    'Use let for variables and put variable declarations at the top of the script.',
245: 1:    'Use separate variable to store the result of parseInt.',
245: 1:    'Corner case: primeFactors(1) should return [1].',
245: 1:    'Remove everything from the script except for the function logic.'
245: 1:  ],
245: 1:  'expectedAnswer': '[2]',
245: 1:  'history': [{
245: 1:    'answer': '[1]',
245: 1:    'question': '1',
245: 1:    'valid': true
245: 1:  }],
245: 1:  'info': [
245: 1:    '✅f(1) = [1]',
245: 1:    '❌f(2) = ??? != [2]'
245: 1:  ],
245: 1:  'level': 9,
245: 1:  'nextQuestion': '2',
245: 1:  'questions': [
245: 1:    '1',
245: 1:    '2'
245: 1:  ]
245: 1:}
245: 1:Scores: 9761
245: 1:Answer: message('['[1]', '[2]']')
245: 1:Fire Event: PassTest{complexity=13, testCount=25}
------------------------------------------
246: 1:BoardData {
246: 1:  'description': [
246: 1:    'Write a javascript function to find prime factors of a positive integer',
246: 1:    'Store the result into an array.',
246: 1:    'Use parseInt to parse input string arguments.',
246: 1:    'Use let for variables and put variable declarations at the top of the script.',
246: 1:    'Use separate variable to store the result of parseInt.',
246: 1:    'Corner case: primeFactors(1) should return [1].',
246: 1:    'Remove everything from the script except for the function logic.'
246: 1:  ],
246: 1:  'expectedAnswer': '[3]',
246: 1:  'history': [
246: 1:    {
246: 1:      'answer': '[1]',
246: 1:      'question': '1',
246: 1:      'valid': true
246: 1:    },
246: 1:    {
246: 1:      'answer': '[2]',
246: 1:      'question': '2',
246: 1:      'valid': true
246: 1:    }
246: 1:  ],
246: 1:  'info': [
246: 1:    '✅f(1) = [1]',
246: 1:    '✅f(2) = [2]',
246: 1:    '❌f(3) = ??? != [3]'
246: 1:  ],
246: 1:  'level': 9,
246: 1:  'nextQuestion': '3',
246: 1:  'questions': [
246: 1:    '1',
246: 1:    '2',
246: 1:    '3'
246: 1:  ]
246: 1:}
246: 1:Scores: 9766
246: 1:Answer: message('['[1]', '[2]', '[3]']')
246: 1:Fire Event: PassTest{complexity=13, testCount=25}
------------------------------------------
247: 1:BoardData {
247: 1:  'description': [
247: 1:    'Write a javascript function to find prime factors of a positive integer',
247: 1:    'Store the result into an array.',
247: 1:    'Use parseInt to parse input string arguments.',
247: 1:    'Use let for variables and put variable declarations at the top of the script.',
247: 1:    'Use separate variable to store the result of parseInt.',
247: 1:    'Corner case: primeFactors(1) should return [1].',
247: 1:    'Remove everything from the script except for the function logic.'
247: 1:  ],
247: 1:  'expectedAnswer': '[2,2]',
247: 1:  'history': [
247: 1:    {
247: 1:      'answer': '[1]',
247: 1:      'question': '1',
247: 1:      'valid': true
247: 1:    },
247: 1:    {
247: 1:      'answer': '[2]',
247: 1:      'question': '2',
247: 1:      'valid': true
247: 1:    },
247: 1:    {
247: 1:      'answer': '[3]',
247: 1:      'question': '3',
247: 1:      'valid': true
247: 1:    }
247: 1:  ],
247: 1:  'info': [
247: 1:    '✅f(1) = [1]',
247: 1:    '✅f(2) = [2]',
247: 1:    '✅f(3) = [3]',
247: 1:    '❌f(4) = ??? != [2,2]'
247: 1:  ],
247: 1:  'level': 9,
247: 1:  'nextQuestion': '4',
247: 1:  'questions': [
247: 1:    '1',
247: 1:    '2',
247: 1:    '3',
247: 1:    '4'
247: 1:  ]
247: 1:}
247: 1:Scores: 9771
247: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]']')
247: 1:Fire Event: PassTest{complexity=13, testCount=25}
------------------------------------------
248: 1:BoardData {
248: 1:  'description': [
248: 1:    'Write a javascript function to find prime factors of a positive integer',
248: 1:    'Store the result into an array.',
248: 1:    'Use parseInt to parse input string arguments.',
248: 1:    'Use let for variables and put variable declarations at the top of the script.',
248: 1:    'Use separate variable to store the result of parseInt.',
248: 1:    'Corner case: primeFactors(1) should return [1].',
248: 1:    'Remove everything from the script except for the function logic.'
248: 1:  ],
248: 1:  'expectedAnswer': '[5]',
248: 1:  'history': [
248: 1:    {
248: 1:      'answer': '[1]',
248: 1:      'question': '1',
248: 1:      'valid': true
248: 1:    },
248: 1:    {
248: 1:      'answer': '[2]',
248: 1:      'question': '2',
248: 1:      'valid': true
248: 1:    },
248: 1:    {
248: 1:      'answer': '[3]',
248: 1:      'question': '3',
248: 1:      'valid': true
248: 1:    },
248: 1:    {
248: 1:      'answer': '[2,2]',
248: 1:      'question': '4',
248: 1:      'valid': true
248: 1:    }
248: 1:  ],
248: 1:  'info': [
248: 1:    '✅f(1) = [1]',
248: 1:    '✅f(2) = [2]',
248: 1:    '✅f(3) = [3]',
248: 1:    '✅f(4) = [2,2]',
248: 1:    '❌f(5) = ??? != [5]'
248: 1:  ],
248: 1:  'level': 9,
248: 1:  'nextQuestion': '5',
248: 1:  'questions': [
248: 1:    '1',
248: 1:    '2',
248: 1:    '3',
248: 1:    '4',
248: 1:    '5'
248: 1:  ]
248: 1:}
248: 1:Scores: 9776
248: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]']')
248: 1:Fire Event: PassTest{complexity=13, testCount=25}
------------------------------------------
249: 1:BoardData {
249: 1:  'description': [
249: 1:    'Write a javascript function to find prime factors of a positive integer',
249: 1:    'Store the result into an array.',
249: 1:    'Use parseInt to parse input string arguments.',
249: 1:    'Use let for variables and put variable declarations at the top of the script.',
249: 1:    'Use separate variable to store the result of parseInt.',
249: 1:    'Corner case: primeFactors(1) should return [1].',
249: 1:    'Remove everything from the script except for the function logic.'
249: 1:  ],
249: 1:  'expectedAnswer': '[2,3]',
249: 1:  'history': [
249: 1:    {
249: 1:      'answer': '[1]',
249: 1:      'question': '1',
249: 1:      'valid': true
249: 1:    },
249: 1:    {
249: 1:      'answer': '[2]',
249: 1:      'question': '2',
249: 1:      'valid': true
249: 1:    },
249: 1:    {
249: 1:      'answer': '[3]',
249: 1:      'question': '3',
249: 1:      'valid': true
249: 1:    },
249: 1:    {
249: 1:      'answer': '[2,2]',
249: 1:      'question': '4',
249: 1:      'valid': true
249: 1:    },
249: 1:    {
249: 1:      'answer': '[5]',
249: 1:      'question': '5',
249: 1:      'valid': true
249: 1:    }
249: 1:  ],
249: 1:  'info': [
249: 1:    '✅f(1) = [1]',
249: 1:    '✅f(2) = [2]',
249: 1:    '✅f(3) = [3]',
249: 1:    '✅f(4) = [2,2]',
249: 1:    '✅f(5) = [5]',
249: 1:    '❌f(6) = ??? != [2,3]'
249: 1:  ],
249: 1:  'level': 9,
249: 1:  'nextQuestion': '6',
249: 1:  'questions': [
249: 1:    '1',
249: 1:    '2',
249: 1:    '3',
249: 1:    '4',
249: 1:    '5',
249: 1:    '6'
249: 1:  ]
249: 1:}
249: 1:Scores: 9781
249: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]']')
249: 1:Fire Event: PassTest{complexity=13, testCount=25}
------------------------------------------
250: 1:BoardData {
250: 1:  'description': [
250: 1:    'Write a javascript function to find prime factors of a positive integer',
250: 1:    'Store the result into an array.',
250: 1:    'Use parseInt to parse input string arguments.',
250: 1:    'Use let for variables and put variable declarations at the top of the script.',
250: 1:    'Use separate variable to store the result of parseInt.',
250: 1:    'Corner case: primeFactors(1) should return [1].',
250: 1:    'Remove everything from the script except for the function logic.'
250: 1:  ],
250: 1:  'expectedAnswer': '[7]',
250: 1:  'history': [
250: 1:    {
250: 1:      'answer': '[1]',
250: 1:      'question': '1',
250: 1:      'valid': true
250: 1:    },
250: 1:    {
250: 1:      'answer': '[2]',
250: 1:      'question': '2',
250: 1:      'valid': true
250: 1:    },
250: 1:    {
250: 1:      'answer': '[3]',
250: 1:      'question': '3',
250: 1:      'valid': true
250: 1:    },
250: 1:    {
250: 1:      'answer': '[2,2]',
250: 1:      'question': '4',
250: 1:      'valid': true
250: 1:    },
250: 1:    {
250: 1:      'answer': '[5]',
250: 1:      'question': '5',
250: 1:      'valid': true
250: 1:    },
250: 1:    {
250: 1:      'answer': '[2,3]',
250: 1:      'question': '6',
250: 1:      'valid': true
250: 1:    }
250: 1:  ],
250: 1:  'info': [
250: 1:    '✅f(1) = [1]',
250: 1:    '✅f(2) = [2]',
250: 1:    '✅f(3) = [3]',
250: 1:    '✅f(4) = [2,2]',
250: 1:    '✅f(5) = [5]',
250: 1:    '✅f(6) = [2,3]',
250: 1:    '❌f(7) = ??? != [7]'
250: 1:  ],
250: 1:  'level': 9,
250: 1:  'nextQuestion': '7',
250: 1:  'questions': [
250: 1:    '1',
250: 1:    '2',
250: 1:    '3',
250: 1:    '4',
250: 1:    '5',
250: 1:    '6',
250: 1:    '7'
250: 1:  ]
250: 1:}
250: 1:Scores: 9786
250: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]']')
250: 1:Fire Event: PassTest{complexity=13, testCount=25}
------------------------------------------
251: 1:BoardData {
251: 1:  'description': [
251: 1:    'Write a javascript function to find prime factors of a positive integer',
251: 1:    'Store the result into an array.',
251: 1:    'Use parseInt to parse input string arguments.',
251: 1:    'Use let for variables and put variable declarations at the top of the script.',
251: 1:    'Use separate variable to store the result of parseInt.',
251: 1:    'Corner case: primeFactors(1) should return [1].',
251: 1:    'Remove everything from the script except for the function logic.'
251: 1:  ],
251: 1:  'expectedAnswer': '[2,2,2]',
251: 1:  'history': [
251: 1:    {
251: 1:      'answer': '[1]',
251: 1:      'question': '1',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': '[2]',
251: 1:      'question': '2',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': '[3]',
251: 1:      'question': '3',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': '[2,2]',
251: 1:      'question': '4',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': '[5]',
251: 1:      'question': '5',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': '[2,3]',
251: 1:      'question': '6',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': '[7]',
251: 1:      'question': '7',
251: 1:      'valid': true
251: 1:    }
251: 1:  ],
251: 1:  'info': [
251: 1:    '✅f(1) = [1]',
251: 1:    '✅f(2) = [2]',
251: 1:    '✅f(3) = [3]',
251: 1:    '✅f(4) = [2,2]',
251: 1:    '✅f(5) = [5]',
251: 1:    '✅f(6) = [2,3]',
251: 1:    '✅f(7) = [7]',
251: 1:    '❌f(8) = ??? != [2,2,2]'
251: 1:  ],
251: 1:  'level': 9,
251: 1:  'nextQuestion': '8',
251: 1:  'questions': [
251: 1:    '1',
251: 1:    '2',
251: 1:    '3',
251: 1:    '4',
251: 1:    '5',
251: 1:    '6',
251: 1:    '7',
251: 1:    '8'
251: 1:  ]
251: 1:}
251: 1:Scores: 9791
251: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]']')
251: 1:Fire Event: PassTest{complexity=13, testCount=25}
------------------------------------------
252: 1:BoardData {
252: 1:  'description': [
252: 1:    'Write a javascript function to find prime factors of a positive integer',
252: 1:    'Store the result into an array.',
252: 1:    'Use parseInt to parse input string arguments.',
252: 1:    'Use let for variables and put variable declarations at the top of the script.',
252: 1:    'Use separate variable to store the result of parseInt.',
252: 1:    'Corner case: primeFactors(1) should return [1].',
252: 1:    'Remove everything from the script except for the function logic.'
252: 1:  ],
252: 1:  'expectedAnswer': '[3,3]',
252: 1:  'history': [
252: 1:    {
252: 1:      'answer': '[1]',
252: 1:      'question': '1',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': '[2]',
252: 1:      'question': '2',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': '[3]',
252: 1:      'question': '3',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': '[2,2]',
252: 1:      'question': '4',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': '[5]',
252: 1:      'question': '5',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': '[2,3]',
252: 1:      'question': '6',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': '[7]',
252: 1:      'question': '7',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': '[2,2,2]',
252: 1:      'question': '8',
252: 1:      'valid': true
252: 1:    }
252: 1:  ],
252: 1:  'info': [
252: 1:    '✅f(1) = [1]',
252: 1:    '✅f(2) = [2]',
252: 1:    '✅f(3) = [3]',
252: 1:    '✅f(4) = [2,2]',
252: 1:    '✅f(5) = [5]',
252: 1:    '✅f(6) = [2,3]',
252: 1:    '✅f(7) = [7]',
252: 1:    '✅f(8) = [2,2,2]',
252: 1:    '❌f(9) = ??? != [3,3]'
252: 1:  ],
252: 1:  'level': 9,
252: 1:  'nextQuestion': '9',
252: 1:  'questions': [
252: 1:    '1',
252: 1:    '2',
252: 1:    '3',
252: 1:    '4',
252: 1:    '5',
252: 1:    '6',
252: 1:    '7',
252: 1:    '8',
252: 1:    '9'
252: 1:  ]
252: 1:}
252: 1:Scores: 9796
252: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]']')
252: 1:Fire Event: PassTest{complexity=13, testCount=25}
------------------------------------------
253: 1:BoardData {
253: 1:  'description': [
253: 1:    'Write a javascript function to find prime factors of a positive integer',
253: 1:    'Store the result into an array.',
253: 1:    'Use parseInt to parse input string arguments.',
253: 1:    'Use let for variables and put variable declarations at the top of the script.',
253: 1:    'Use separate variable to store the result of parseInt.',
253: 1:    'Corner case: primeFactors(1) should return [1].',
253: 1:    'Remove everything from the script except for the function logic.'
253: 1:  ],
253: 1:  'expectedAnswer': '[2,5]',
253: 1:  'history': [
253: 1:    {
253: 1:      'answer': '[1]',
253: 1:      'question': '1',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': '[2]',
253: 1:      'question': '2',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': '[3]',
253: 1:      'question': '3',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': '[2,2]',
253: 1:      'question': '4',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': '[5]',
253: 1:      'question': '5',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': '[2,3]',
253: 1:      'question': '6',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': '[7]',
253: 1:      'question': '7',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': '[2,2,2]',
253: 1:      'question': '8',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': '[3,3]',
253: 1:      'question': '9',
253: 1:      'valid': true
253: 1:    }
253: 1:  ],
253: 1:  'info': [
253: 1:    '✅f(1) = [1]',
253: 1:    '✅f(2) = [2]',
253: 1:    '✅f(3) = [3]',
253: 1:    '✅f(4) = [2,2]',
253: 1:    '✅f(5) = [5]',
253: 1:    '✅f(6) = [2,3]',
253: 1:    '✅f(7) = [7]',
253: 1:    '✅f(8) = [2,2,2]',
253: 1:    '✅f(9) = [3,3]',
253: 1:    '❌f(10) = ??? != [2,5]'
253: 1:  ],
253: 1:  'level': 9,
253: 1:  'nextQuestion': '10',
253: 1:  'questions': [
253: 1:    '1',
253: 1:    '2',
253: 1:    '3',
253: 1:    '4',
253: 1:    '5',
253: 1:    '6',
253: 1:    '7',
253: 1:    '8',
253: 1:    '9',
253: 1:    '10'
253: 1:  ]
253: 1:}
253: 1:Scores: 9801
253: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]']')
253: 1:Fire Event: PassTest{complexity=13, testCount=25}
------------------------------------------
254: 1:BoardData {
254: 1:  'description': [
254: 1:    'Write a javascript function to find prime factors of a positive integer',
254: 1:    'Store the result into an array.',
254: 1:    'Use parseInt to parse input string arguments.',
254: 1:    'Use let for variables and put variable declarations at the top of the script.',
254: 1:    'Use separate variable to store the result of parseInt.',
254: 1:    'Corner case: primeFactors(1) should return [1].',
254: 1:    'Remove everything from the script except for the function logic.'
254: 1:  ],
254: 1:  'expectedAnswer': '[11]',
254: 1:  'history': [
254: 1:    {
254: 1:      'answer': '[1]',
254: 1:      'question': '1',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': '[2]',
254: 1:      'question': '2',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': '[3]',
254: 1:      'question': '3',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': '[2,2]',
254: 1:      'question': '4',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': '[5]',
254: 1:      'question': '5',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': '[2,3]',
254: 1:      'question': '6',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': '[7]',
254: 1:      'question': '7',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': '[2,2,2]',
254: 1:      'question': '8',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': '[3,3]',
254: 1:      'question': '9',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': '[2,5]',
254: 1:      'question': '10',
254: 1:      'valid': true
254: 1:    }
254: 1:  ],
254: 1:  'info': [
254: 1:    '✅f(1) = [1]',
254: 1:    '✅f(2) = [2]',
254: 1:    '✅f(3) = [3]',
254: 1:    '✅f(4) = [2,2]',
254: 1:    '✅f(5) = [5]',
254: 1:    '✅f(6) = [2,3]',
254: 1:    '✅f(7) = [7]',
254: 1:    '✅f(8) = [2,2,2]',
254: 1:    '✅f(9) = [3,3]',
254: 1:    '✅f(10) = [2,5]',
254: 1:    '❌f(11) = ??? != [11]'
254: 1:  ],
254: 1:  'level': 9,
254: 1:  'nextQuestion': '11',
254: 1:  'questions': [
254: 1:    '1',
254: 1:    '2',
254: 1:    '3',
254: 1:    '4',
254: 1:    '5',
254: 1:    '6',
254: 1:    '7',
254: 1:    '8',
254: 1:    '9',
254: 1:    '10',
254: 1:    '11'
254: 1:  ]
254: 1:}
254: 1:Scores: 9806
254: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]']')
254: 1:Fire Event: PassTest{complexity=13, testCount=25}
------------------------------------------
255: 1:BoardData {
255: 1:  'description': [
255: 1:    'Write a javascript function to find prime factors of a positive integer',
255: 1:    'Store the result into an array.',
255: 1:    'Use parseInt to parse input string arguments.',
255: 1:    'Use let for variables and put variable declarations at the top of the script.',
255: 1:    'Use separate variable to store the result of parseInt.',
255: 1:    'Corner case: primeFactors(1) should return [1].',
255: 1:    'Remove everything from the script except for the function logic.'
255: 1:  ],
255: 1:  'expectedAnswer': '[2,2,3]',
255: 1:  'history': [
255: 1:    {
255: 1:      'answer': '[1]',
255: 1:      'question': '1',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': '[2]',
255: 1:      'question': '2',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': '[3]',
255: 1:      'question': '3',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': '[2,2]',
255: 1:      'question': '4',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': '[5]',
255: 1:      'question': '5',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': '[2,3]',
255: 1:      'question': '6',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': '[7]',
255: 1:      'question': '7',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': '[2,2,2]',
255: 1:      'question': '8',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': '[3,3]',
255: 1:      'question': '9',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': '[2,5]',
255: 1:      'question': '10',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': '[11]',
255: 1:      'question': '11',
255: 1:      'valid': true
255: 1:    }
255: 1:  ],
255: 1:  'info': [
255: 1:    '✅f(1) = [1]',
255: 1:    '✅f(2) = [2]',
255: 1:    '✅f(3) = [3]',
255: 1:    '✅f(4) = [2,2]',
255: 1:    '✅f(5) = [5]',
255: 1:    '✅f(6) = [2,3]',
255: 1:    '✅f(7) = [7]',
255: 1:    '✅f(8) = [2,2,2]',
255: 1:    '✅f(9) = [3,3]',
255: 1:    '✅f(10) = [2,5]',
255: 1:    '✅f(11) = [11]',
255: 1:    '❌f(12) = ??? != [2,2,3]'
255: 1:  ],
255: 1:  'level': 9,
255: 1:  'nextQuestion': '12',
255: 1:  'questions': [
255: 1:    '1',
255: 1:    '2',
255: 1:    '3',
255: 1:    '4',
255: 1:    '5',
255: 1:    '6',
255: 1:    '7',
255: 1:    '8',
255: 1:    '9',
255: 1:    '10',
255: 1:    '11',
255: 1:    '12'
255: 1:  ]
255: 1:}
255: 1:Scores: 9811
255: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]']')
255: 1:Fire Event: PassTest{complexity=13, testCount=25}
------------------------------------------
256: 1:BoardData {
256: 1:  'description': [
256: 1:    'Write a javascript function to find prime factors of a positive integer',
256: 1:    'Store the result into an array.',
256: 1:    'Use parseInt to parse input string arguments.',
256: 1:    'Use let for variables and put variable declarations at the top of the script.',
256: 1:    'Use separate variable to store the result of parseInt.',
256: 1:    'Corner case: primeFactors(1) should return [1].',
256: 1:    'Remove everything from the script except for the function logic.'
256: 1:  ],
256: 1:  'expectedAnswer': '[13]',
256: 1:  'history': [
256: 1:    {
256: 1:      'answer': '[1]',
256: 1:      'question': '1',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '[2]',
256: 1:      'question': '2',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '[3]',
256: 1:      'question': '3',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '[2,2]',
256: 1:      'question': '4',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '[5]',
256: 1:      'question': '5',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '[2,3]',
256: 1:      'question': '6',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '[7]',
256: 1:      'question': '7',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '[2,2,2]',
256: 1:      'question': '8',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '[3,3]',
256: 1:      'question': '9',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '[2,5]',
256: 1:      'question': '10',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '[11]',
256: 1:      'question': '11',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '[2,2,3]',
256: 1:      'question': '12',
256: 1:      'valid': true
256: 1:    }
256: 1:  ],
256: 1:  'info': [
256: 1:    '✅f(1) = [1]',
256: 1:    '✅f(2) = [2]',
256: 1:    '✅f(3) = [3]',
256: 1:    '✅f(4) = [2,2]',
256: 1:    '✅f(5) = [5]',
256: 1:    '✅f(6) = [2,3]',
256: 1:    '✅f(7) = [7]',
256: 1:    '✅f(8) = [2,2,2]',
256: 1:    '✅f(9) = [3,3]',
256: 1:    '✅f(10) = [2,5]',
256: 1:    '✅f(11) = [11]',
256: 1:    '✅f(12) = [2,2,3]',
256: 1:    '❌f(13) = ??? != [13]'
256: 1:  ],
256: 1:  'level': 9,
256: 1:  'nextQuestion': '13',
256: 1:  'questions': [
256: 1:    '1',
256: 1:    '2',
256: 1:    '3',
256: 1:    '4',
256: 1:    '5',
256: 1:    '6',
256: 1:    '7',
256: 1:    '8',
256: 1:    '9',
256: 1:    '10',
256: 1:    '11',
256: 1:    '12',
256: 1:    '13'
256: 1:  ]
256: 1:}
256: 1:Scores: 9816
256: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]']')
256: 1:Fire Event: PassTest{complexity=13, testCount=25}
------------------------------------------
257: 1:BoardData {
257: 1:  'description': [
257: 1:    'Write a javascript function to find prime factors of a positive integer',
257: 1:    'Store the result into an array.',
257: 1:    'Use parseInt to parse input string arguments.',
257: 1:    'Use let for variables and put variable declarations at the top of the script.',
257: 1:    'Use separate variable to store the result of parseInt.',
257: 1:    'Corner case: primeFactors(1) should return [1].',
257: 1:    'Remove everything from the script except for the function logic.'
257: 1:  ],
257: 1:  'expectedAnswer': '[2,7]',
257: 1:  'history': [
257: 1:    {
257: 1:      'answer': '[1]',
257: 1:      'question': '1',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '[2]',
257: 1:      'question': '2',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '[3]',
257: 1:      'question': '3',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '[2,2]',
257: 1:      'question': '4',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '[5]',
257: 1:      'question': '5',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '[2,3]',
257: 1:      'question': '6',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '[7]',
257: 1:      'question': '7',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '[2,2,2]',
257: 1:      'question': '8',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '[3,3]',
257: 1:      'question': '9',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '[2,5]',
257: 1:      'question': '10',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '[11]',
257: 1:      'question': '11',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '[2,2,3]',
257: 1:      'question': '12',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '[13]',
257: 1:      'question': '13',
257: 1:      'valid': true
257: 1:    }
257: 1:  ],
257: 1:  'info': [
257: 1:    '✅f(1) = [1]',
257: 1:    '✅f(2) = [2]',
257: 1:    '✅f(3) = [3]',
257: 1:    '✅f(4) = [2,2]',
257: 1:    '✅f(5) = [5]',
257: 1:    '✅f(6) = [2,3]',
257: 1:    '✅f(7) = [7]',
257: 1:    '✅f(8) = [2,2,2]',
257: 1:    '✅f(9) = [3,3]',
257: 1:    '✅f(10) = [2,5]',
257: 1:    '✅f(11) = [11]',
257: 1:    '✅f(12) = [2,2,3]',
257: 1:    '✅f(13) = [13]',
257: 1:    '❌f(14) = ??? != [2,7]'
257: 1:  ],
257: 1:  'level': 9,
257: 1:  'nextQuestion': '14',
257: 1:  'questions': [
257: 1:    '1',
257: 1:    '2',
257: 1:    '3',
257: 1:    '4',
257: 1:    '5',
257: 1:    '6',
257: 1:    '7',
257: 1:    '8',
257: 1:    '9',
257: 1:    '10',
257: 1:    '11',
257: 1:    '12',
257: 1:    '13',
257: 1:    '14'
257: 1:  ]
257: 1:}
257: 1:Scores: 9821
257: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]']')
257: 1:Fire Event: PassTest{complexity=13, testCount=25}
------------------------------------------
258: 1:BoardData {
258: 1:  'description': [
258: 1:    'Write a javascript function to find prime factors of a positive integer',
258: 1:    'Store the result into an array.',
258: 1:    'Use parseInt to parse input string arguments.',
258: 1:    'Use let for variables and put variable declarations at the top of the script.',
258: 1:    'Use separate variable to store the result of parseInt.',
258: 1:    'Corner case: primeFactors(1) should return [1].',
258: 1:    'Remove everything from the script except for the function logic.'
258: 1:  ],
258: 1:  'expectedAnswer': '[3,5]',
258: 1:  'history': [
258: 1:    {
258: 1:      'answer': '[1]',
258: 1:      'question': '1',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '[2]',
258: 1:      'question': '2',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '[3]',
258: 1:      'question': '3',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '[2,2]',
258: 1:      'question': '4',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '[5]',
258: 1:      'question': '5',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '[2,3]',
258: 1:      'question': '6',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '[7]',
258: 1:      'question': '7',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '[2,2,2]',
258: 1:      'question': '8',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '[3,3]',
258: 1:      'question': '9',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '[2,5]',
258: 1:      'question': '10',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '[11]',
258: 1:      'question': '11',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '[2,2,3]',
258: 1:      'question': '12',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '[13]',
258: 1:      'question': '13',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '[2,7]',
258: 1:      'question': '14',
258: 1:      'valid': true
258: 1:    }
258: 1:  ],
258: 1:  'info': [
258: 1:    '✅f(1) = [1]',
258: 1:    '✅f(2) = [2]',
258: 1:    '✅f(3) = [3]',
258: 1:    '✅f(4) = [2,2]',
258: 1:    '✅f(5) = [5]',
258: 1:    '✅f(6) = [2,3]',
258: 1:    '✅f(7) = [7]',
258: 1:    '✅f(8) = [2,2,2]',
258: 1:    '✅f(9) = [3,3]',
258: 1:    '✅f(10) = [2,5]',
258: 1:    '✅f(11) = [11]',
258: 1:    '✅f(12) = [2,2,3]',
258: 1:    '✅f(13) = [13]',
258: 1:    '✅f(14) = [2,7]',
258: 1:    '❌f(15) = ??? != [3,5]'
258: 1:  ],
258: 1:  'level': 9,
258: 1:  'nextQuestion': '15',
258: 1:  'questions': [
258: 1:    '1',
258: 1:    '2',
258: 1:    '3',
258: 1:    '4',
258: 1:    '5',
258: 1:    '6',
258: 1:    '7',
258: 1:    '8',
258: 1:    '9',
258: 1:    '10',
258: 1:    '11',
258: 1:    '12',
258: 1:    '13',
258: 1:    '14',
258: 1:    '15'
258: 1:  ]
258: 1:}
258: 1:Scores: 9826
258: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]']')
258: 1:Fire Event: PassTest{complexity=13, testCount=25}
------------------------------------------
259: 1:BoardData {
259: 1:  'description': [
259: 1:    'Write a javascript function to find prime factors of a positive integer',
259: 1:    'Store the result into an array.',
259: 1:    'Use parseInt to parse input string arguments.',
259: 1:    'Use let for variables and put variable declarations at the top of the script.',
259: 1:    'Use separate variable to store the result of parseInt.',
259: 1:    'Corner case: primeFactors(1) should return [1].',
259: 1:    'Remove everything from the script except for the function logic.'
259: 1:  ],
259: 1:  'expectedAnswer': '[2,2,2,2]',
259: 1:  'history': [
259: 1:    {
259: 1:      'answer': '[1]',
259: 1:      'question': '1',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '[2]',
259: 1:      'question': '2',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '[3]',
259: 1:      'question': '3',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '[2,2]',
259: 1:      'question': '4',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '[5]',
259: 1:      'question': '5',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '[2,3]',
259: 1:      'question': '6',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '[7]',
259: 1:      'question': '7',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '[2,2,2]',
259: 1:      'question': '8',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '[3,3]',
259: 1:      'question': '9',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '[2,5]',
259: 1:      'question': '10',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '[11]',
259: 1:      'question': '11',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '[2,2,3]',
259: 1:      'question': '12',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '[13]',
259: 1:      'question': '13',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '[2,7]',
259: 1:      'question': '14',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '[3,5]',
259: 1:      'question': '15',
259: 1:      'valid': true
259: 1:    }
259: 1:  ],
259: 1:  'info': [
259: 1:    '✅f(1) = [1]',
259: 1:    '✅f(2) = [2]',
259: 1:    '✅f(3) = [3]',
259: 1:    '✅f(4) = [2,2]',
259: 1:    '✅f(5) = [5]',
259: 1:    '✅f(6) = [2,3]',
259: 1:    '✅f(7) = [7]',
259: 1:    '✅f(8) = [2,2,2]',
259: 1:    '✅f(9) = [3,3]',
259: 1:    '✅f(10) = [2,5]',
259: 1:    '✅f(11) = [11]',
259: 1:    '✅f(12) = [2,2,3]',
259: 1:    '✅f(13) = [13]',
259: 1:    '✅f(14) = [2,7]',
259: 1:    '✅f(15) = [3,5]',
259: 1:    '❌f(16) = ??? != [2,2,2,2]'
259: 1:  ],
259: 1:  'level': 9,
259: 1:  'nextQuestion': '16',
259: 1:  'questions': [
259: 1:    '1',
259: 1:    '2',
259: 1:    '3',
259: 1:    '4',
259: 1:    '5',
259: 1:    '6',
259: 1:    '7',
259: 1:    '8',
259: 1:    '9',
259: 1:    '10',
259: 1:    '11',
259: 1:    '12',
259: 1:    '13',
259: 1:    '14',
259: 1:    '15',
259: 1:    '16'
259: 1:  ]
259: 1:}
259: 1:Scores: 9831
259: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]']')
259: 1:Fire Event: PassTest{complexity=13, testCount=25}
------------------------------------------
260: 1:BoardData {
260: 1:  'description': [
260: 1:    'Write a javascript function to find prime factors of a positive integer',
260: 1:    'Store the result into an array.',
260: 1:    'Use parseInt to parse input string arguments.',
260: 1:    'Use let for variables and put variable declarations at the top of the script.',
260: 1:    'Use separate variable to store the result of parseInt.',
260: 1:    'Corner case: primeFactors(1) should return [1].',
260: 1:    'Remove everything from the script except for the function logic.'
260: 1:  ],
260: 1:  'expectedAnswer': '[17]',
260: 1:  'history': [
260: 1:    {
260: 1:      'answer': '[1]',
260: 1:      'question': '1',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': '[2]',
260: 1:      'question': '2',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': '[3]',
260: 1:      'question': '3',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': '[2,2]',
260: 1:      'question': '4',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': '[5]',
260: 1:      'question': '5',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': '[2,3]',
260: 1:      'question': '6',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': '[7]',
260: 1:      'question': '7',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': '[2,2,2]',
260: 1:      'question': '8',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': '[3,3]',
260: 1:      'question': '9',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': '[2,5]',
260: 1:      'question': '10',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': '[11]',
260: 1:      'question': '11',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': '[2,2,3]',
260: 1:      'question': '12',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': '[13]',
260: 1:      'question': '13',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': '[2,7]',
260: 1:      'question': '14',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': '[3,5]',
260: 1:      'question': '15',
260: 1:      'valid': true
260: 1:    },
260: 1:    {
260: 1:      'answer': '[2,2,2,2]',
260: 1:      'question': '16',
260: 1:      'valid': true
260: 1:    }
260: 1:  ],
260: 1:  'info': [
260: 1:    '✅f(1) = [1]',
260: 1:    '✅f(2) = [2]',
260: 1:    '✅f(3) = [3]',
260: 1:    '✅f(4) = [2,2]',
260: 1:    '✅f(5) = [5]',
260: 1:    '✅f(6) = [2,3]',
260: 1:    '✅f(7) = [7]',
260: 1:    '✅f(8) = [2,2,2]',
260: 1:    '✅f(9) = [3,3]',
260: 1:    '✅f(10) = [2,5]',
260: 1:    '✅f(11) = [11]',
260: 1:    '✅f(12) = [2,2,3]',
260: 1:    '✅f(13) = [13]',
260: 1:    '✅f(14) = [2,7]',
260: 1:    '✅f(15) = [3,5]',
260: 1:    '✅f(16) = [2,2,2,2]',
260: 1:    '❌f(17) = ??? != [17]'
260: 1:  ],
260: 1:  'level': 9,
260: 1:  'nextQuestion': '17',
260: 1:  'questions': [
260: 1:    '1',
260: 1:    '2',
260: 1:    '3',
260: 1:    '4',
260: 1:    '5',
260: 1:    '6',
260: 1:    '7',
260: 1:    '8',
260: 1:    '9',
260: 1:    '10',
260: 1:    '11',
260: 1:    '12',
260: 1:    '13',
260: 1:    '14',
260: 1:    '15',
260: 1:    '16',
260: 1:    '17'
260: 1:  ]
260: 1:}
260: 1:Scores: 9836
260: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]', '[17]']')
260: 1:Fire Event: PassTest{complexity=13, testCount=25}
------------------------------------------
261: 1:BoardData {
261: 1:  'description': [
261: 1:    'Write a javascript function to find prime factors of a positive integer',
261: 1:    'Store the result into an array.',
261: 1:    'Use parseInt to parse input string arguments.',
261: 1:    'Use let for variables and put variable declarations at the top of the script.',
261: 1:    'Use separate variable to store the result of parseInt.',
261: 1:    'Corner case: primeFactors(1) should return [1].',
261: 1:    'Remove everything from the script except for the function logic.'
261: 1:  ],
261: 1:  'expectedAnswer': '[2,3,3]',
261: 1:  'history': [
261: 1:    {
261: 1:      'answer': '[1]',
261: 1:      'question': '1',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': '[2]',
261: 1:      'question': '2',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': '[3]',
261: 1:      'question': '3',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': '[2,2]',
261: 1:      'question': '4',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': '[5]',
261: 1:      'question': '5',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': '[2,3]',
261: 1:      'question': '6',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': '[7]',
261: 1:      'question': '7',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': '[2,2,2]',
261: 1:      'question': '8',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': '[3,3]',
261: 1:      'question': '9',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': '[2,5]',
261: 1:      'question': '10',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': '[11]',
261: 1:      'question': '11',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': '[2,2,3]',
261: 1:      'question': '12',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': '[13]',
261: 1:      'question': '13',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': '[2,7]',
261: 1:      'question': '14',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': '[3,5]',
261: 1:      'question': '15',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': '[2,2,2,2]',
261: 1:      'question': '16',
261: 1:      'valid': true
261: 1:    },
261: 1:    {
261: 1:      'answer': '[17]',
261: 1:      'question': '17',
261: 1:      'valid': true
261: 1:    }
261: 1:  ],
261: 1:  'info': [
261: 1:    '✅f(1) = [1]',
261: 1:    '✅f(2) = [2]',
261: 1:    '✅f(3) = [3]',
261: 1:    '✅f(4) = [2,2]',
261: 1:    '✅f(5) = [5]',
261: 1:    '✅f(6) = [2,3]',
261: 1:    '✅f(7) = [7]',
261: 1:    '✅f(8) = [2,2,2]',
261: 1:    '✅f(9) = [3,3]',
261: 1:    '✅f(10) = [2,5]',
261: 1:    '✅f(11) = [11]',
261: 1:    '✅f(12) = [2,2,3]',
261: 1:    '✅f(13) = [13]',
261: 1:    '✅f(14) = [2,7]',
261: 1:    '✅f(15) = [3,5]',
261: 1:    '✅f(16) = [2,2,2,2]',
261: 1:    '✅f(17) = [17]',
261: 1:    '❌f(18) = ??? != [2,3,3]'
261: 1:  ],
261: 1:  'level': 9,
261: 1:  'nextQuestion': '18',
261: 1:  'questions': [
261: 1:    '1',
261: 1:    '2',
261: 1:    '3',
261: 1:    '4',
261: 1:    '5',
261: 1:    '6',
261: 1:    '7',
261: 1:    '8',
261: 1:    '9',
261: 1:    '10',
261: 1:    '11',
261: 1:    '12',
261: 1:    '13',
261: 1:    '14',
261: 1:    '15',
261: 1:    '16',
261: 1:    '17',
261: 1:    '18'
261: 1:  ]
261: 1:}
261: 1:Scores: 9841
261: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]', '[17]', '[2,3,3]']')
261: 1:Fire Event: PassTest{complexity=13, testCount=25}
------------------------------------------
262: 1:BoardData {
262: 1:  'description': [
262: 1:    'Write a javascript function to find prime factors of a positive integer',
262: 1:    'Store the result into an array.',
262: 1:    'Use parseInt to parse input string arguments.',
262: 1:    'Use let for variables and put variable declarations at the top of the script.',
262: 1:    'Use separate variable to store the result of parseInt.',
262: 1:    'Corner case: primeFactors(1) should return [1].',
262: 1:    'Remove everything from the script except for the function logic.'
262: 1:  ],
262: 1:  'expectedAnswer': '[19]',
262: 1:  'history': [
262: 1:    {
262: 1:      'answer': '[1]',
262: 1:      'question': '1',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': '[2]',
262: 1:      'question': '2',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': '[3]',
262: 1:      'question': '3',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': '[2,2]',
262: 1:      'question': '4',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': '[5]',
262: 1:      'question': '5',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': '[2,3]',
262: 1:      'question': '6',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': '[7]',
262: 1:      'question': '7',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': '[2,2,2]',
262: 1:      'question': '8',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': '[3,3]',
262: 1:      'question': '9',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': '[2,5]',
262: 1:      'question': '10',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': '[11]',
262: 1:      'question': '11',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': '[2,2,3]',
262: 1:      'question': '12',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': '[13]',
262: 1:      'question': '13',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': '[2,7]',
262: 1:      'question': '14',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': '[3,5]',
262: 1:      'question': '15',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': '[2,2,2,2]',
262: 1:      'question': '16',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': '[17]',
262: 1:      'question': '17',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': '[2,3,3]',
262: 1:      'question': '18',
262: 1:      'valid': true
262: 1:    }
262: 1:  ],
262: 1:  'info': [
262: 1:    '✅f(1) = [1]',
262: 1:    '✅f(2) = [2]',
262: 1:    '✅f(3) = [3]',
262: 1:    '✅f(4) = [2,2]',
262: 1:    '✅f(5) = [5]',
262: 1:    '✅f(6) = [2,3]',
262: 1:    '✅f(7) = [7]',
262: 1:    '✅f(8) = [2,2,2]',
262: 1:    '✅f(9) = [3,3]',
262: 1:    '✅f(10) = [2,5]',
262: 1:    '✅f(11) = [11]',
262: 1:    '✅f(12) = [2,2,3]',
262: 1:    '✅f(13) = [13]',
262: 1:    '✅f(14) = [2,7]',
262: 1:    '✅f(15) = [3,5]',
262: 1:    '✅f(16) = [2,2,2,2]',
262: 1:    '✅f(17) = [17]',
262: 1:    '✅f(18) = [2,3,3]',
262: 1:    '❌f(19) = ??? != [19]'
262: 1:  ],
262: 1:  'level': 9,
262: 1:  'nextQuestion': '19',
262: 1:  'questions': [
262: 1:    '1',
262: 1:    '2',
262: 1:    '3',
262: 1:    '4',
262: 1:    '5',
262: 1:    '6',
262: 1:    '7',
262: 1:    '8',
262: 1:    '9',
262: 1:    '10',
262: 1:    '11',
262: 1:    '12',
262: 1:    '13',
262: 1:    '14',
262: 1:    '15',
262: 1:    '16',
262: 1:    '17',
262: 1:    '18',
262: 1:    '19'
262: 1:  ]
262: 1:}
262: 1:Scores: 9846
262: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]', '[17]', '[2,3,3]', '[19]']')
262: 1:Fire Event: PassTest{complexity=13, testCount=25}
------------------------------------------
263: 1:BoardData {
263: 1:  'description': [
263: 1:    'Write a javascript function to find prime factors of a positive integer',
263: 1:    'Store the result into an array.',
263: 1:    'Use parseInt to parse input string arguments.',
263: 1:    'Use let for variables and put variable declarations at the top of the script.',
263: 1:    'Use separate variable to store the result of parseInt.',
263: 1:    'Corner case: primeFactors(1) should return [1].',
263: 1:    'Remove everything from the script except for the function logic.'
263: 1:  ],
263: 1:  'expectedAnswer': '[2,2,5]',
263: 1:  'history': [
263: 1:    {
263: 1:      'answer': '[1]',
263: 1:      'question': '1',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': '[2]',
263: 1:      'question': '2',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': '[3]',
263: 1:      'question': '3',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': '[2,2]',
263: 1:      'question': '4',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': '[5]',
263: 1:      'question': '5',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': '[2,3]',
263: 1:      'question': '6',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': '[7]',
263: 1:      'question': '7',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': '[2,2,2]',
263: 1:      'question': '8',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': '[3,3]',
263: 1:      'question': '9',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': '[2,5]',
263: 1:      'question': '10',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': '[11]',
263: 1:      'question': '11',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': '[2,2,3]',
263: 1:      'question': '12',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': '[13]',
263: 1:      'question': '13',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': '[2,7]',
263: 1:      'question': '14',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': '[3,5]',
263: 1:      'question': '15',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': '[2,2,2,2]',
263: 1:      'question': '16',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': '[17]',
263: 1:      'question': '17',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': '[2,3,3]',
263: 1:      'question': '18',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': '[19]',
263: 1:      'question': '19',
263: 1:      'valid': true
263: 1:    }
263: 1:  ],
263: 1:  'info': [
263: 1:    '✅f(1) = [1]',
263: 1:    '✅f(2) = [2]',
263: 1:    '✅f(3) = [3]',
263: 1:    '✅f(4) = [2,2]',
263: 1:    '✅f(5) = [5]',
263: 1:    '✅f(6) = [2,3]',
263: 1:    '✅f(7) = [7]',
263: 1:    '✅f(8) = [2,2,2]',
263: 1:    '✅f(9) = [3,3]',
263: 1:    '✅f(10) = [2,5]',
263: 1:    '✅f(11) = [11]',
263: 1:    '✅f(12) = [2,2,3]',
263: 1:    '✅f(13) = [13]',
263: 1:    '✅f(14) = [2,7]',
263: 1:    '✅f(15) = [3,5]',
263: 1:    '✅f(16) = [2,2,2,2]',
263: 1:    '✅f(17) = [17]',
263: 1:    '✅f(18) = [2,3,3]',
263: 1:    '✅f(19) = [19]',
263: 1:    '❌f(20) = ??? != [2,2,5]'
263: 1:  ],
263: 1:  'level': 9,
263: 1:  'nextQuestion': '20',
263: 1:  'questions': [
263: 1:    '1',
263: 1:    '2',
263: 1:    '3',
263: 1:    '4',
263: 1:    '5',
263: 1:    '6',
263: 1:    '7',
263: 1:    '8',
263: 1:    '9',
263: 1:    '10',
263: 1:    '11',
263: 1:    '12',
263: 1:    '13',
263: 1:    '14',
263: 1:    '15',
263: 1:    '16',
263: 1:    '17',
263: 1:    '18',
263: 1:    '19',
263: 1:    '20'
263: 1:  ]
263: 1:}
263: 1:Scores: 9851
263: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]', '[17]', '[2,3,3]', '[19]', '[2,2,5]']')
263: 1:Fire Event: PassTest{complexity=13, testCount=25}
------------------------------------------
264: 1:BoardData {
264: 1:  'description': [
264: 1:    'Write a javascript function to find prime factors of a positive integer',
264: 1:    'Store the result into an array.',
264: 1:    'Use parseInt to parse input string arguments.',
264: 1:    'Use let for variables and put variable declarations at the top of the script.',
264: 1:    'Use separate variable to store the result of parseInt.',
264: 1:    'Corner case: primeFactors(1) should return [1].',
264: 1:    'Remove everything from the script except for the function logic.'
264: 1:  ],
264: 1:  'expectedAnswer': '[3,7]',
264: 1:  'history': [
264: 1:    {
264: 1:      'answer': '[1]',
264: 1:      'question': '1',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': '[2]',
264: 1:      'question': '2',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': '[3]',
264: 1:      'question': '3',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': '[2,2]',
264: 1:      'question': '4',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': '[5]',
264: 1:      'question': '5',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': '[2,3]',
264: 1:      'question': '6',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': '[7]',
264: 1:      'question': '7',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': '[2,2,2]',
264: 1:      'question': '8',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': '[3,3]',
264: 1:      'question': '9',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': '[2,5]',
264: 1:      'question': '10',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': '[11]',
264: 1:      'question': '11',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': '[2,2,3]',
264: 1:      'question': '12',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': '[13]',
264: 1:      'question': '13',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': '[2,7]',
264: 1:      'question': '14',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': '[3,5]',
264: 1:      'question': '15',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': '[2,2,2,2]',
264: 1:      'question': '16',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': '[17]',
264: 1:      'question': '17',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': '[2,3,3]',
264: 1:      'question': '18',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': '[19]',
264: 1:      'question': '19',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': '[2,2,5]',
264: 1:      'question': '20',
264: 1:      'valid': true
264: 1:    }
264: 1:  ],
264: 1:  'info': [
264: 1:    '✅f(1) = [1]',
264: 1:    '✅f(2) = [2]',
264: 1:    '✅f(3) = [3]',
264: 1:    '✅f(4) = [2,2]',
264: 1:    '✅f(5) = [5]',
264: 1:    '✅f(6) = [2,3]',
264: 1:    '✅f(7) = [7]',
264: 1:    '✅f(8) = [2,2,2]',
264: 1:    '✅f(9) = [3,3]',
264: 1:    '✅f(10) = [2,5]',
264: 1:    '✅f(11) = [11]',
264: 1:    '✅f(12) = [2,2,3]',
264: 1:    '✅f(13) = [13]',
264: 1:    '✅f(14) = [2,7]',
264: 1:    '✅f(15) = [3,5]',
264: 1:    '✅f(16) = [2,2,2,2]',
264: 1:    '✅f(17) = [17]',
264: 1:    '✅f(18) = [2,3,3]',
264: 1:    '✅f(19) = [19]',
264: 1:    '✅f(20) = [2,2,5]',
264: 1:    '❌f(21) = ??? != [3,7]'
264: 1:  ],
264: 1:  'level': 9,
264: 1:  'nextQuestion': '21',
264: 1:  'questions': [
264: 1:    '1',
264: 1:    '2',
264: 1:    '3',
264: 1:    '4',
264: 1:    '5',
264: 1:    '6',
264: 1:    '7',
264: 1:    '8',
264: 1:    '9',
264: 1:    '10',
264: 1:    '11',
264: 1:    '12',
264: 1:    '13',
264: 1:    '14',
264: 1:    '15',
264: 1:    '16',
264: 1:    '17',
264: 1:    '18',
264: 1:    '19',
264: 1:    '20',
264: 1:    '21'
264: 1:  ]
264: 1:}
264: 1:Scores: 9856
264: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]', '[17]', '[2,3,3]', '[19]', '[2,2,5]', '[3,7]']')
264: 1:Fire Event: PassTest{complexity=13, testCount=25}
------------------------------------------
265: 1:BoardData {
265: 1:  'description': [
265: 1:    'Write a javascript function to find prime factors of a positive integer',
265: 1:    'Store the result into an array.',
265: 1:    'Use parseInt to parse input string arguments.',
265: 1:    'Use let for variables and put variable declarations at the top of the script.',
265: 1:    'Use separate variable to store the result of parseInt.',
265: 1:    'Corner case: primeFactors(1) should return [1].',
265: 1:    'Remove everything from the script except for the function logic.'
265: 1:  ],
265: 1:  'expectedAnswer': '[2,11]',
265: 1:  'history': [
265: 1:    {
265: 1:      'answer': '[1]',
265: 1:      'question': '1',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': '[2]',
265: 1:      'question': '2',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': '[3]',
265: 1:      'question': '3',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': '[2,2]',
265: 1:      'question': '4',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': '[5]',
265: 1:      'question': '5',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': '[2,3]',
265: 1:      'question': '6',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': '[7]',
265: 1:      'question': '7',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': '[2,2,2]',
265: 1:      'question': '8',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': '[3,3]',
265: 1:      'question': '9',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': '[2,5]',
265: 1:      'question': '10',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': '[11]',
265: 1:      'question': '11',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': '[2,2,3]',
265: 1:      'question': '12',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': '[13]',
265: 1:      'question': '13',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': '[2,7]',
265: 1:      'question': '14',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': '[3,5]',
265: 1:      'question': '15',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': '[2,2,2,2]',
265: 1:      'question': '16',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': '[17]',
265: 1:      'question': '17',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': '[2,3,3]',
265: 1:      'question': '18',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': '[19]',
265: 1:      'question': '19',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': '[2,2,5]',
265: 1:      'question': '20',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': '[3,7]',
265: 1:      'question': '21',
265: 1:      'valid': true
265: 1:    }
265: 1:  ],
265: 1:  'info': [
265: 1:    '✅f(1) = [1]',
265: 1:    '✅f(2) = [2]',
265: 1:    '✅f(3) = [3]',
265: 1:    '✅f(4) = [2,2]',
265: 1:    '✅f(5) = [5]',
265: 1:    '✅f(6) = [2,3]',
265: 1:    '✅f(7) = [7]',
265: 1:    '✅f(8) = [2,2,2]',
265: 1:    '✅f(9) = [3,3]',
265: 1:    '✅f(10) = [2,5]',
265: 1:    '✅f(11) = [11]',
265: 1:    '✅f(12) = [2,2,3]',
265: 1:    '✅f(13) = [13]',
265: 1:    '✅f(14) = [2,7]',
265: 1:    '✅f(15) = [3,5]',
265: 1:    '✅f(16) = [2,2,2,2]',
265: 1:    '✅f(17) = [17]',
265: 1:    '✅f(18) = [2,3,3]',
265: 1:    '✅f(19) = [19]',
265: 1:    '✅f(20) = [2,2,5]',
265: 1:    '✅f(21) = [3,7]',
265: 1:    '❌f(22) = ??? != [2,11]'
265: 1:  ],
265: 1:  'level': 9,
265: 1:  'nextQuestion': '22',
265: 1:  'questions': [
265: 1:    '1',
265: 1:    '2',
265: 1:    '3',
265: 1:    '4',
265: 1:    '5',
265: 1:    '6',
265: 1:    '7',
265: 1:    '8',
265: 1:    '9',
265: 1:    '10',
265: 1:    '11',
265: 1:    '12',
265: 1:    '13',
265: 1:    '14',
265: 1:    '15',
265: 1:    '16',
265: 1:    '17',
265: 1:    '18',
265: 1:    '19',
265: 1:    '20',
265: 1:    '21',
265: 1:    '22'
265: 1:  ]
265: 1:}
265: 1:Scores: 9861
265: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]', '[17]', '[2,3,3]', '[19]', '[2,2,5]', '[3,7]', '[2,11]']')
265: 1:Fire Event: PassTest{complexity=13, testCount=25}
------------------------------------------
266: 1:BoardData {
266: 1:  'description': [
266: 1:    'Write a javascript function to find prime factors of a positive integer',
266: 1:    'Store the result into an array.',
266: 1:    'Use parseInt to parse input string arguments.',
266: 1:    'Use let for variables and put variable declarations at the top of the script.',
266: 1:    'Use separate variable to store the result of parseInt.',
266: 1:    'Corner case: primeFactors(1) should return [1].',
266: 1:    'Remove everything from the script except for the function logic.'
266: 1:  ],
266: 1:  'expectedAnswer': '[23]',
266: 1:  'history': [
266: 1:    {
266: 1:      'answer': '[1]',
266: 1:      'question': '1',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': '[2]',
266: 1:      'question': '2',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': '[3]',
266: 1:      'question': '3',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': '[2,2]',
266: 1:      'question': '4',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': '[5]',
266: 1:      'question': '5',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': '[2,3]',
266: 1:      'question': '6',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': '[7]',
266: 1:      'question': '7',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': '[2,2,2]',
266: 1:      'question': '8',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': '[3,3]',
266: 1:      'question': '9',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': '[2,5]',
266: 1:      'question': '10',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': '[11]',
266: 1:      'question': '11',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': '[2,2,3]',
266: 1:      'question': '12',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': '[13]',
266: 1:      'question': '13',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': '[2,7]',
266: 1:      'question': '14',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': '[3,5]',
266: 1:      'question': '15',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': '[2,2,2,2]',
266: 1:      'question': '16',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': '[17]',
266: 1:      'question': '17',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': '[2,3,3]',
266: 1:      'question': '18',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': '[19]',
266: 1:      'question': '19',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': '[2,2,5]',
266: 1:      'question': '20',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': '[3,7]',
266: 1:      'question': '21',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': '[2,11]',
266: 1:      'question': '22',
266: 1:      'valid': true
266: 1:    }
266: 1:  ],
266: 1:  'info': [
266: 1:    '✅f(1) = [1]',
266: 1:    '✅f(2) = [2]',
266: 1:    '✅f(3) = [3]',
266: 1:    '✅f(4) = [2,2]',
266: 1:    '✅f(5) = [5]',
266: 1:    '✅f(6) = [2,3]',
266: 1:    '✅f(7) = [7]',
266: 1:    '✅f(8) = [2,2,2]',
266: 1:    '✅f(9) = [3,3]',
266: 1:    '✅f(10) = [2,5]',
266: 1:    '✅f(11) = [11]',
266: 1:    '✅f(12) = [2,2,3]',
266: 1:    '✅f(13) = [13]',
266: 1:    '✅f(14) = [2,7]',
266: 1:    '✅f(15) = [3,5]',
266: 1:    '✅f(16) = [2,2,2,2]',
266: 1:    '✅f(17) = [17]',
266: 1:    '✅f(18) = [2,3,3]',
266: 1:    '✅f(19) = [19]',
266: 1:    '✅f(20) = [2,2,5]',
266: 1:    '✅f(21) = [3,7]',
266: 1:    '✅f(22) = [2,11]',
266: 1:    '❌f(23) = ??? != [23]'
266: 1:  ],
266: 1:  'level': 9,
266: 1:  'nextQuestion': '23',
266: 1:  'questions': [
266: 1:    '1',
266: 1:    '2',
266: 1:    '3',
266: 1:    '4',
266: 1:    '5',
266: 1:    '6',
266: 1:    '7',
266: 1:    '8',
266: 1:    '9',
266: 1:    '10',
266: 1:    '11',
266: 1:    '12',
266: 1:    '13',
266: 1:    '14',
266: 1:    '15',
266: 1:    '16',
266: 1:    '17',
266: 1:    '18',
266: 1:    '19',
266: 1:    '20',
266: 1:    '21',
266: 1:    '22',
266: 1:    '23'
266: 1:  ]
266: 1:}
266: 1:Scores: 9866
266: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]', '[17]', '[2,3,3]', '[19]', '[2,2,5]', '[3,7]', '[2,11]', '[23]']')
266: 1:Fire Event: PassTest{complexity=13, testCount=25}
------------------------------------------
267: 1:BoardData {
267: 1:  'description': [
267: 1:    'Write a javascript function to find prime factors of a positive integer',
267: 1:    'Store the result into an array.',
267: 1:    'Use parseInt to parse input string arguments.',
267: 1:    'Use let for variables and put variable declarations at the top of the script.',
267: 1:    'Use separate variable to store the result of parseInt.',
267: 1:    'Corner case: primeFactors(1) should return [1].',
267: 1:    'Remove everything from the script except for the function logic.'
267: 1:  ],
267: 1:  'expectedAnswer': '[2,2,2,3]',
267: 1:  'history': [
267: 1:    {
267: 1:      'answer': '[1]',
267: 1:      'question': '1',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': '[2]',
267: 1:      'question': '2',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': '[3]',
267: 1:      'question': '3',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': '[2,2]',
267: 1:      'question': '4',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': '[5]',
267: 1:      'question': '5',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': '[2,3]',
267: 1:      'question': '6',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': '[7]',
267: 1:      'question': '7',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': '[2,2,2]',
267: 1:      'question': '8',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': '[3,3]',
267: 1:      'question': '9',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': '[2,5]',
267: 1:      'question': '10',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': '[11]',
267: 1:      'question': '11',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': '[2,2,3]',
267: 1:      'question': '12',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': '[13]',
267: 1:      'question': '13',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': '[2,7]',
267: 1:      'question': '14',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': '[3,5]',
267: 1:      'question': '15',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': '[2,2,2,2]',
267: 1:      'question': '16',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': '[17]',
267: 1:      'question': '17',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': '[2,3,3]',
267: 1:      'question': '18',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': '[19]',
267: 1:      'question': '19',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': '[2,2,5]',
267: 1:      'question': '20',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': '[3,7]',
267: 1:      'question': '21',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': '[2,11]',
267: 1:      'question': '22',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': '[23]',
267: 1:      'question': '23',
267: 1:      'valid': true
267: 1:    }
267: 1:  ],
267: 1:  'info': [
267: 1:    '✅f(1) = [1]',
267: 1:    '✅f(2) = [2]',
267: 1:    '✅f(3) = [3]',
267: 1:    '✅f(4) = [2,2]',
267: 1:    '✅f(5) = [5]',
267: 1:    '✅f(6) = [2,3]',
267: 1:    '✅f(7) = [7]',
267: 1:    '✅f(8) = [2,2,2]',
267: 1:    '✅f(9) = [3,3]',
267: 1:    '✅f(10) = [2,5]',
267: 1:    '✅f(11) = [11]',
267: 1:    '✅f(12) = [2,2,3]',
267: 1:    '✅f(13) = [13]',
267: 1:    '✅f(14) = [2,7]',
267: 1:    '✅f(15) = [3,5]',
267: 1:    '✅f(16) = [2,2,2,2]',
267: 1:    '✅f(17) = [17]',
267: 1:    '✅f(18) = [2,3,3]',
267: 1:    '✅f(19) = [19]',
267: 1:    '✅f(20) = [2,2,5]',
267: 1:    '✅f(21) = [3,7]',
267: 1:    '✅f(22) = [2,11]',
267: 1:    '✅f(23) = [23]',
267: 1:    '❌f(24) = ??? != [2,2,2,3]'
267: 1:  ],
267: 1:  'level': 9,
267: 1:  'nextQuestion': '24',
267: 1:  'questions': [
267: 1:    '1',
267: 1:    '2',
267: 1:    '3',
267: 1:    '4',
267: 1:    '5',
267: 1:    '6',
267: 1:    '7',
267: 1:    '8',
267: 1:    '9',
267: 1:    '10',
267: 1:    '11',
267: 1:    '12',
267: 1:    '13',
267: 1:    '14',
267: 1:    '15',
267: 1:    '16',
267: 1:    '17',
267: 1:    '18',
267: 1:    '19',
267: 1:    '20',
267: 1:    '21',
267: 1:    '22',
267: 1:    '23',
267: 1:    '24'
267: 1:  ]
267: 1:}
267: 1:Scores: 9871
267: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]', '[17]', '[2,3,3]', '[19]', '[2,2,5]', '[3,7]', '[2,11]', '[23]', '[2,2,2,3]']')
267: 1:Fire Event: PassTest{complexity=13, testCount=25}
------------------------------------------
268: 1:BoardData {
268: 1:  'description': [
268: 1:    'Write a javascript function to find prime factors of a positive integer',
268: 1:    'Store the result into an array.',
268: 1:    'Use parseInt to parse input string arguments.',
268: 1:    'Use let for variables and put variable declarations at the top of the script.',
268: 1:    'Use separate variable to store the result of parseInt.',
268: 1:    'Corner case: primeFactors(1) should return [1].',
268: 1:    'Remove everything from the script except for the function logic.'
268: 1:  ],
268: 1:  'expectedAnswer': '[5,5]',
268: 1:  'history': [
268: 1:    {
268: 1:      'answer': '[1]',
268: 1:      'question': '1',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': '[2]',
268: 1:      'question': '2',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': '[3]',
268: 1:      'question': '3',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': '[2,2]',
268: 1:      'question': '4',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': '[5]',
268: 1:      'question': '5',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': '[2,3]',
268: 1:      'question': '6',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': '[7]',
268: 1:      'question': '7',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': '[2,2,2]',
268: 1:      'question': '8',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': '[3,3]',
268: 1:      'question': '9',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': '[2,5]',
268: 1:      'question': '10',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': '[11]',
268: 1:      'question': '11',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': '[2,2,3]',
268: 1:      'question': '12',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': '[13]',
268: 1:      'question': '13',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': '[2,7]',
268: 1:      'question': '14',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': '[3,5]',
268: 1:      'question': '15',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': '[2,2,2,2]',
268: 1:      'question': '16',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': '[17]',
268: 1:      'question': '17',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': '[2,3,3]',
268: 1:      'question': '18',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': '[19]',
268: 1:      'question': '19',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': '[2,2,5]',
268: 1:      'question': '20',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': '[3,7]',
268: 1:      'question': '21',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': '[2,11]',
268: 1:      'question': '22',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': '[23]',
268: 1:      'question': '23',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': '[2,2,2,3]',
268: 1:      'question': '24',
268: 1:      'valid': true
268: 1:    }
268: 1:  ],
268: 1:  'info': [
268: 1:    '✅f(1) = [1]',
268: 1:    '✅f(2) = [2]',
268: 1:    '✅f(3) = [3]',
268: 1:    '✅f(4) = [2,2]',
268: 1:    '✅f(5) = [5]',
268: 1:    '✅f(6) = [2,3]',
268: 1:    '✅f(7) = [7]',
268: 1:    '✅f(8) = [2,2,2]',
268: 1:    '✅f(9) = [3,3]',
268: 1:    '✅f(10) = [2,5]',
268: 1:    '✅f(11) = [11]',
268: 1:    '✅f(12) = [2,2,3]',
268: 1:    '✅f(13) = [13]',
268: 1:    '✅f(14) = [2,7]',
268: 1:    '✅f(15) = [3,5]',
268: 1:    '✅f(16) = [2,2,2,2]',
268: 1:    '✅f(17) = [17]',
268: 1:    '✅f(18) = [2,3,3]',
268: 1:    '✅f(19) = [19]',
268: 1:    '✅f(20) = [2,2,5]',
268: 1:    '✅f(21) = [3,7]',
268: 1:    '✅f(22) = [2,11]',
268: 1:    '✅f(23) = [23]',
268: 1:    '✅f(24) = [2,2,2,3]',
268: 1:    '❌f(25) = ??? != [5,5]'
268: 1:  ],
268: 1:  'level': 9,
268: 1:  'nextQuestion': '25',
268: 1:  'questions': [
268: 1:    '1',
268: 1:    '2',
268: 1:    '3',
268: 1:    '4',
268: 1:    '5',
268: 1:    '6',
268: 1:    '7',
268: 1:    '8',
268: 1:    '9',
268: 1:    '10',
268: 1:    '11',
268: 1:    '12',
268: 1:    '13',
268: 1:    '14',
268: 1:    '15',
268: 1:    '16',
268: 1:    '17',
268: 1:    '18',
268: 1:    '19',
268: 1:    '20',
268: 1:    '21',
268: 1:    '22',
268: 1:    '23',
268: 1:    '24',
268: 1:    '25'
268: 1:  ]
268: 1:}
268: 1:Scores: 9876
268: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]', '[17]', '[2,3,3]', '[19]', '[2,2,5]', '[3,7]', '[2,11]', '[23]', '[2,2,2,3]', '[5,5]']')
268: 1:Fire Event: PassTest{complexity=13, testCount=25}
268: 1:Fire Event: NextAlgorithm{complexity=13, time=0}
------------------------------------------
269: 1:BoardData {
269: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
269: 1:  'history': [
269: 1:    {
269: 1:      'answer': '[1]',
269: 1:      'question': '1',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': '[2]',
269: 1:      'question': '2',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': '[3]',
269: 1:      'question': '3',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': '[2,2]',
269: 1:      'question': '4',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': '[5]',
269: 1:      'question': '5',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': '[2,3]',
269: 1:      'question': '6',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': '[7]',
269: 1:      'question': '7',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': '[2,2,2]',
269: 1:      'question': '8',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': '[3,3]',
269: 1:      'question': '9',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': '[2,5]',
269: 1:      'question': '10',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': '[11]',
269: 1:      'question': '11',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': '[2,2,3]',
269: 1:      'question': '12',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': '[13]',
269: 1:      'question': '13',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': '[2,7]',
269: 1:      'question': '14',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': '[3,5]',
269: 1:      'question': '15',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': '[2,2,2,2]',
269: 1:      'question': '16',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': '[17]',
269: 1:      'question': '17',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': '[2,3,3]',
269: 1:      'question': '18',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': '[19]',
269: 1:      'question': '19',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': '[2,2,5]',
269: 1:      'question': '20',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': '[3,7]',
269: 1:      'question': '21',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': '[2,11]',
269: 1:      'question': '22',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': '[23]',
269: 1:      'question': '23',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': '[2,2,2,3]',
269: 1:      'question': '24',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': '[5,5]',
269: 1:      'question': '25',
269: 1:      'valid': true
269: 1:    }
269: 1:  ],
269: 1:  'info': [
269: 1:    '✅f(1) = [1]',
269: 1:    '✅f(2) = [2]',
269: 1:    '✅f(3) = [3]',
269: 1:    '✅f(4) = [2,2]',
269: 1:    '✅f(5) = [5]',
269: 1:    '✅f(6) = [2,3]',
269: 1:    '✅f(7) = [7]',
269: 1:    '✅f(8) = [2,2,2]',
269: 1:    '✅f(9) = [3,3]',
269: 1:    '✅f(10) = [2,5]',
269: 1:    '✅f(11) = [11]',
269: 1:    '✅f(12) = [2,2,3]',
269: 1:    '✅f(13) = [13]',
269: 1:    '✅f(14) = [2,7]',
269: 1:    '✅f(15) = [3,5]',
269: 1:    '✅f(16) = [2,2,2,2]',
269: 1:    '✅f(17) = [17]',
269: 1:    '✅f(18) = [2,3,3]',
269: 1:    '✅f(19) = [19]',
269: 1:    '✅f(20) = [2,2,5]',
269: 1:    '✅f(21) = [3,7]',
269: 1:    '✅f(22) = [2,11]',
269: 1:    '✅f(23) = [23]',
269: 1:    '✅f(24) = [2,2,2,3]',
269: 1:    '✅f(25) = [5,5]'
269: 1:  ],
269: 1:  'level': 9,
269: 1:  'questions': []
269: 1:}
269: 1:Scores: 11635
269: 1:Answer: message('StartNextLevel')
269: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
270: 1:BoardData {
270: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
270: 1:  'expectedAnswer': 'T.H',
270: 1:  'history': [],
270: 1:  'info': ['❌f(Tom Harris) = ??? != T.H'],
270: 1:  'level': 10,
270: 1:  'nextQuestion': 'Tom Harris',
270: 1:  'questions': ['Tom Harris']
270: 1:}
270: 1:Scores: 11635
270: 1:Answer: message('['T.H']')
270: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
271: 1:BoardData {
271: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
271: 1:  'expectedAnswer': 'G.L',
271: 1:  'history': [{
271: 1:    'answer': 'T.H',
271: 1:    'question': 'Tom Harris',
271: 1:    'valid': true
271: 1:  }],
271: 1:  'info': [
271: 1:    '✅f(Tom Harris) = T.H',
271: 1:    '❌f(garlick looney) = ??? != G.L'
271: 1:  ],
271: 1:  'level': 10,
271: 1:  'nextQuestion': 'garlick looney',
271: 1:  'questions': [
271: 1:    'Tom Harris',
271: 1:    'garlick looney'
271: 1:  ]
271: 1:}
271: 1:Scores: 11639
271: 1:Answer: message('['T.H', 'G.L']')
271: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
272: 1:BoardData {
272: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
272: 1:  'expectedAnswer': 'E.P',
272: 1:  'history': [
272: 1:    {
272: 1:      'answer': 'T.H',
272: 1:      'question': 'Tom Harris',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'G.L',
272: 1:      'question': 'garlick looney',
272: 1:      'valid': true
272: 1:    }
272: 1:  ],
272: 1:  'info': [
272: 1:    '✅f(Tom Harris) = T.H',
272: 1:    '✅f(garlick looney) = G.L',
272: 1:    '❌f(Ethan parker) = ??? != E.P'
272: 1:  ],
272: 1:  'level': 10,
272: 1:  'nextQuestion': 'Ethan parker',
272: 1:  'questions': [
272: 1:    'Tom Harris',
272: 1:    'garlick looney',
272: 1:    'Ethan parker'
272: 1:  ]
272: 1:}
272: 1:Scores: 11643
272: 1:Answer: message('['T.H', 'G.L', 'E.P']')
272: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
273: 1:BoardData {
273: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
273: 1:  'expectedAnswer': 'O.C',
273: 1:  'history': [
273: 1:    {
273: 1:      'answer': 'T.H',
273: 1:      'question': 'Tom Harris',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'G.L',
273: 1:      'question': 'garlick looney',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'E.P',
273: 1:      'question': 'Ethan parker',
273: 1:      'valid': true
273: 1:    }
273: 1:  ],
273: 1:  'info': [
273: 1:    '✅f(Tom Harris) = T.H',
273: 1:    '✅f(garlick looney) = G.L',
273: 1:    '✅f(Ethan parker) = E.P',
273: 1:    '❌f(olivia Campbell) = ??? != O.C'
273: 1:  ],
273: 1:  'level': 10,
273: 1:  'nextQuestion': 'olivia Campbell',
273: 1:  'questions': [
273: 1:    'Tom Harris',
273: 1:    'garlick looney',
273: 1:    'Ethan parker',
273: 1:    'olivia Campbell'
273: 1:  ]
273: 1:}
273: 1:Scores: 11647
273: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C']')
273: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
274: 1:BoardData {
274: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
274: 1:  'expectedAnswer': 'L.J',
274: 1:  'history': [
274: 1:    {
274: 1:      'answer': 'T.H',
274: 1:      'question': 'Tom Harris',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'G.L',
274: 1:      'question': 'garlick looney',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'E.P',
274: 1:      'question': 'Ethan parker',
274: 1:      'valid': true
274: 1:    },
274: 1:    {
274: 1:      'answer': 'O.C',
274: 1:      'question': 'olivia Campbell',
274: 1:      'valid': true
274: 1:    }
274: 1:  ],
274: 1:  'info': [
274: 1:    '✅f(Tom Harris) = T.H',
274: 1:    '✅f(garlick looney) = G.L',
274: 1:    '✅f(Ethan parker) = E.P',
274: 1:    '✅f(olivia Campbell) = O.C',
274: 1:    '❌f(Liam Jenkins) = ??? != L.J'
274: 1:  ],
274: 1:  'level': 10,
274: 1:  'nextQuestion': 'Liam Jenkins',
274: 1:  'questions': [
274: 1:    'Tom Harris',
274: 1:    'garlick looney',
274: 1:    'Ethan parker',
274: 1:    'olivia Campbell',
274: 1:    'Liam Jenkins'
274: 1:  ]
274: 1:}
274: 1:Scores: 11651
274: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J']')
274: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
275: 1:BoardData {
275: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
275: 1:  'expectedAnswer': 'E.B',
275: 1:  'history': [
275: 1:    {
275: 1:      'answer': 'T.H',
275: 1:      'question': 'Tom Harris',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'G.L',
275: 1:      'question': 'garlick looney',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'E.P',
275: 1:      'question': 'Ethan parker',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'O.C',
275: 1:      'question': 'olivia Campbell',
275: 1:      'valid': true
275: 1:    },
275: 1:    {
275: 1:      'answer': 'L.J',
275: 1:      'question': 'Liam Jenkins',
275: 1:      'valid': true
275: 1:    }
275: 1:  ],
275: 1:  'info': [
275: 1:    '✅f(Tom Harris) = T.H',
275: 1:    '✅f(garlick looney) = G.L',
275: 1:    '✅f(Ethan parker) = E.P',
275: 1:    '✅f(olivia Campbell) = O.C',
275: 1:    '✅f(Liam Jenkins) = L.J',
275: 1:    '❌f(Emma Bryant) = ??? != E.B'
275: 1:  ],
275: 1:  'level': 10,
275: 1:  'nextQuestion': 'Emma Bryant',
275: 1:  'questions': [
275: 1:    'Tom Harris',
275: 1:    'garlick looney',
275: 1:    'Ethan parker',
275: 1:    'olivia Campbell',
275: 1:    'Liam Jenkins',
275: 1:    'Emma Bryant'
275: 1:  ]
275: 1:}
275: 1:Scores: 11655
275: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B']')
275: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
276: 1:BoardData {
276: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
276: 1:  'expectedAnswer': 'N.R',
276: 1:  'history': [
276: 1:    {
276: 1:      'answer': 'T.H',
276: 1:      'question': 'Tom Harris',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'G.L',
276: 1:      'question': 'garlick looney',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'E.P',
276: 1:      'question': 'Ethan parker',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'O.C',
276: 1:      'question': 'olivia Campbell',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'L.J',
276: 1:      'question': 'Liam Jenkins',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'E.B',
276: 1:      'question': 'Emma Bryant',
276: 1:      'valid': true
276: 1:    }
276: 1:  ],
276: 1:  'info': [
276: 1:    '✅f(Tom Harris) = T.H',
276: 1:    '✅f(garlick looney) = G.L',
276: 1:    '✅f(Ethan parker) = E.P',
276: 1:    '✅f(olivia Campbell) = O.C',
276: 1:    '✅f(Liam Jenkins) = L.J',
276: 1:    '✅f(Emma Bryant) = E.B',
276: 1:    '❌f(Noah Reed) = ??? != N.R'
276: 1:  ],
276: 1:  'level': 10,
276: 1:  'nextQuestion': 'Noah Reed',
276: 1:  'questions': [
276: 1:    'Tom Harris',
276: 1:    'garlick looney',
276: 1:    'Ethan parker',
276: 1:    'olivia Campbell',
276: 1:    'Liam Jenkins',
276: 1:    'Emma Bryant',
276: 1:    'Noah Reed'
276: 1:  ]
276: 1:}
276: 1:Scores: 11659
276: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R']')
276: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
277: 1:BoardData {
277: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
277: 1:  'expectedAnswer': 'A.C',
277: 1:  'history': [
277: 1:    {
277: 1:      'answer': 'T.H',
277: 1:      'question': 'Tom Harris',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'G.L',
277: 1:      'question': 'garlick looney',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'E.P',
277: 1:      'question': 'Ethan parker',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'O.C',
277: 1:      'question': 'olivia Campbell',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'L.J',
277: 1:      'question': 'Liam Jenkins',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'E.B',
277: 1:      'question': 'Emma Bryant',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'N.R',
277: 1:      'question': 'Noah Reed',
277: 1:      'valid': true
277: 1:    }
277: 1:  ],
277: 1:  'info': [
277: 1:    '✅f(Tom Harris) = T.H',
277: 1:    '✅f(garlick looney) = G.L',
277: 1:    '✅f(Ethan parker) = E.P',
277: 1:    '✅f(olivia Campbell) = O.C',
277: 1:    '✅f(Liam Jenkins) = L.J',
277: 1:    '✅f(Emma Bryant) = E.B',
277: 1:    '✅f(Noah Reed) = N.R',
277: 1:    '❌f(Ava Coleman) = ??? != A.C'
277: 1:  ],
277: 1:  'level': 10,
277: 1:  'nextQuestion': 'Ava Coleman',
277: 1:  'questions': [
277: 1:    'Tom Harris',
277: 1:    'garlick looney',
277: 1:    'Ethan parker',
277: 1:    'olivia Campbell',
277: 1:    'Liam Jenkins',
277: 1:    'Emma Bryant',
277: 1:    'Noah Reed',
277: 1:    'Ava Coleman'
277: 1:  ]
277: 1:}
277: 1:Scores: 11663
277: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C']')
277: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
278: 1:BoardData {
278: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
278: 1:  'expectedAnswer': 'W.B',
278: 1:  'history': [
278: 1:    {
278: 1:      'answer': 'T.H',
278: 1:      'question': 'Tom Harris',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'G.L',
278: 1:      'question': 'garlick looney',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'E.P',
278: 1:      'question': 'Ethan parker',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'O.C',
278: 1:      'question': 'olivia Campbell',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'L.J',
278: 1:      'question': 'Liam Jenkins',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'E.B',
278: 1:      'question': 'Emma Bryant',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'N.R',
278: 1:      'question': 'Noah Reed',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'A.C',
278: 1:      'question': 'Ava Coleman',
278: 1:      'valid': true
278: 1:    }
278: 1:  ],
278: 1:  'info': [
278: 1:    '✅f(Tom Harris) = T.H',
278: 1:    '✅f(garlick looney) = G.L',
278: 1:    '✅f(Ethan parker) = E.P',
278: 1:    '✅f(olivia Campbell) = O.C',
278: 1:    '✅f(Liam Jenkins) = L.J',
278: 1:    '✅f(Emma Bryant) = E.B',
278: 1:    '✅f(Noah Reed) = N.R',
278: 1:    '✅f(Ava Coleman) = A.C',
278: 1:    '❌f(William Barnes) = ??? != W.B'
278: 1:  ],
278: 1:  'level': 10,
278: 1:  'nextQuestion': 'William Barnes',
278: 1:  'questions': [
278: 1:    'Tom Harris',
278: 1:    'garlick looney',
278: 1:    'Ethan parker',
278: 1:    'olivia Campbell',
278: 1:    'Liam Jenkins',
278: 1:    'Emma Bryant',
278: 1:    'Noah Reed',
278: 1:    'Ava Coleman',
278: 1:    'William Barnes'
278: 1:  ]
278: 1:}
278: 1:Scores: 11667
278: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B']')
278: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
279: 1:BoardData {
279: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
279: 1:  'expectedAnswer': 'S.M',
279: 1:  'history': [
279: 1:    {
279: 1:      'answer': 'T.H',
279: 1:      'question': 'Tom Harris',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'G.L',
279: 1:      'question': 'garlick looney',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'E.P',
279: 1:      'question': 'Ethan parker',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'O.C',
279: 1:      'question': 'olivia Campbell',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'L.J',
279: 1:      'question': 'Liam Jenkins',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'E.B',
279: 1:      'question': 'Emma Bryant',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'N.R',
279: 1:      'question': 'Noah Reed',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'A.C',
279: 1:      'question': 'Ava Coleman',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'W.B',
279: 1:      'question': 'William Barnes',
279: 1:      'valid': true
279: 1:    }
279: 1:  ],
279: 1:  'info': [
279: 1:    '✅f(Tom Harris) = T.H',
279: 1:    '✅f(garlick looney) = G.L',
279: 1:    '✅f(Ethan parker) = E.P',
279: 1:    '✅f(olivia Campbell) = O.C',
279: 1:    '✅f(Liam Jenkins) = L.J',
279: 1:    '✅f(Emma Bryant) = E.B',
279: 1:    '✅f(Noah Reed) = N.R',
279: 1:    '✅f(Ava Coleman) = A.C',
279: 1:    '✅f(William Barnes) = W.B',
279: 1:    '❌f(Sophia Mitchell) = ??? != S.M'
279: 1:  ],
279: 1:  'level': 10,
279: 1:  'nextQuestion': 'Sophia Mitchell',
279: 1:  'questions': [
279: 1:    'Tom Harris',
279: 1:    'garlick looney',
279: 1:    'Ethan parker',
279: 1:    'olivia Campbell',
279: 1:    'Liam Jenkins',
279: 1:    'Emma Bryant',
279: 1:    'Noah Reed',
279: 1:    'Ava Coleman',
279: 1:    'William Barnes',
279: 1:    'Sophia Mitchell'
279: 1:  ]
279: 1:}
279: 1:Scores: 11671
279: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M']')
279: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
280: 1:BoardData {
280: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
280: 1:  'expectedAnswer': 'J.H',
280: 1:  'history': [
280: 1:    {
280: 1:      'answer': 'T.H',
280: 1:      'question': 'Tom Harris',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'G.L',
280: 1:      'question': 'garlick looney',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'E.P',
280: 1:      'question': 'Ethan parker',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'O.C',
280: 1:      'question': 'olivia Campbell',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'L.J',
280: 1:      'question': 'Liam Jenkins',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'E.B',
280: 1:      'question': 'Emma Bryant',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'N.R',
280: 1:      'question': 'Noah Reed',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'A.C',
280: 1:      'question': 'Ava Coleman',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'W.B',
280: 1:      'question': 'William Barnes',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'S.M',
280: 1:      'question': 'Sophia Mitchell',
280: 1:      'valid': true
280: 1:    }
280: 1:  ],
280: 1:  'info': [
280: 1:    '✅f(Tom Harris) = T.H',
280: 1:    '✅f(garlick looney) = G.L',
280: 1:    '✅f(Ethan parker) = E.P',
280: 1:    '✅f(olivia Campbell) = O.C',
280: 1:    '✅f(Liam Jenkins) = L.J',
280: 1:    '✅f(Emma Bryant) = E.B',
280: 1:    '✅f(Noah Reed) = N.R',
280: 1:    '✅f(Ava Coleman) = A.C',
280: 1:    '✅f(William Barnes) = W.B',
280: 1:    '✅f(Sophia Mitchell) = S.M',
280: 1:    '❌f(James Hughes) = ??? != J.H'
280: 1:  ],
280: 1:  'level': 10,
280: 1:  'nextQuestion': 'James Hughes',
280: 1:  'questions': [
280: 1:    'Tom Harris',
280: 1:    'garlick looney',
280: 1:    'Ethan parker',
280: 1:    'olivia Campbell',
280: 1:    'Liam Jenkins',
280: 1:    'Emma Bryant',
280: 1:    'Noah Reed',
280: 1:    'Ava Coleman',
280: 1:    'William Barnes',
280: 1:    'Sophia Mitchell',
280: 1:    'James Hughes'
280: 1:  ]
280: 1:}
280: 1:Scores: 11675
280: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H']')
280: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
281: 1:BoardData {
281: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
281: 1:  'expectedAnswer': 'I.F',
281: 1:  'history': [
281: 1:    {
281: 1:      'answer': 'T.H',
281: 1:      'question': 'Tom Harris',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'G.L',
281: 1:      'question': 'garlick looney',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'E.P',
281: 1:      'question': 'Ethan parker',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'O.C',
281: 1:      'question': 'olivia Campbell',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'L.J',
281: 1:      'question': 'Liam Jenkins',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'E.B',
281: 1:      'question': 'Emma Bryant',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'N.R',
281: 1:      'question': 'Noah Reed',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'A.C',
281: 1:      'question': 'Ava Coleman',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'W.B',
281: 1:      'question': 'William Barnes',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'S.M',
281: 1:      'question': 'Sophia Mitchell',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'J.H',
281: 1:      'question': 'James Hughes',
281: 1:      'valid': true
281: 1:    }
281: 1:  ],
281: 1:  'info': [
281: 1:    '✅f(Tom Harris) = T.H',
281: 1:    '✅f(garlick looney) = G.L',
281: 1:    '✅f(Ethan parker) = E.P',
281: 1:    '✅f(olivia Campbell) = O.C',
281: 1:    '✅f(Liam Jenkins) = L.J',
281: 1:    '✅f(Emma Bryant) = E.B',
281: 1:    '✅f(Noah Reed) = N.R',
281: 1:    '✅f(Ava Coleman) = A.C',
281: 1:    '✅f(William Barnes) = W.B',
281: 1:    '✅f(Sophia Mitchell) = S.M',
281: 1:    '✅f(James Hughes) = J.H',
281: 1:    '❌f(Isabella Foster) = ??? != I.F'
281: 1:  ],
281: 1:  'level': 10,
281: 1:  'nextQuestion': 'Isabella Foster',
281: 1:  'questions': [
281: 1:    'Tom Harris',
281: 1:    'garlick looney',
281: 1:    'Ethan parker',
281: 1:    'olivia Campbell',
281: 1:    'Liam Jenkins',
281: 1:    'Emma Bryant',
281: 1:    'Noah Reed',
281: 1:    'Ava Coleman',
281: 1:    'William Barnes',
281: 1:    'Sophia Mitchell',
281: 1:    'James Hughes',
281: 1:    'Isabella Foster'
281: 1:  ]
281: 1:}
281: 1:Scores: 11679
281: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F']')
281: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
282: 1:BoardData {
282: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
282: 1:  'expectedAnswer': 'B.E',
282: 1:  'history': [
282: 1:    {
282: 1:      'answer': 'T.H',
282: 1:      'question': 'Tom Harris',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'G.L',
282: 1:      'question': 'garlick looney',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'E.P',
282: 1:      'question': 'Ethan parker',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'O.C',
282: 1:      'question': 'olivia Campbell',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'L.J',
282: 1:      'question': 'Liam Jenkins',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'E.B',
282: 1:      'question': 'Emma Bryant',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'N.R',
282: 1:      'question': 'Noah Reed',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'A.C',
282: 1:      'question': 'Ava Coleman',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'W.B',
282: 1:      'question': 'William Barnes',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'S.M',
282: 1:      'question': 'Sophia Mitchell',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'J.H',
282: 1:      'question': 'James Hughes',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'I.F',
282: 1:      'question': 'Isabella Foster',
282: 1:      'valid': true
282: 1:    }
282: 1:  ],
282: 1:  'info': [
282: 1:    '✅f(Tom Harris) = T.H',
282: 1:    '✅f(garlick looney) = G.L',
282: 1:    '✅f(Ethan parker) = E.P',
282: 1:    '✅f(olivia Campbell) = O.C',
282: 1:    '✅f(Liam Jenkins) = L.J',
282: 1:    '✅f(Emma Bryant) = E.B',
282: 1:    '✅f(Noah Reed) = N.R',
282: 1:    '✅f(Ava Coleman) = A.C',
282: 1:    '✅f(William Barnes) = W.B',
282: 1:    '✅f(Sophia Mitchell) = S.M',
282: 1:    '✅f(James Hughes) = J.H',
282: 1:    '✅f(Isabella Foster) = I.F',
282: 1:    '❌f(Benjamin Evans) = ??? != B.E'
282: 1:  ],
282: 1:  'level': 10,
282: 1:  'nextQuestion': 'Benjamin Evans',
282: 1:  'questions': [
282: 1:    'Tom Harris',
282: 1:    'garlick looney',
282: 1:    'Ethan parker',
282: 1:    'olivia Campbell',
282: 1:    'Liam Jenkins',
282: 1:    'Emma Bryant',
282: 1:    'Noah Reed',
282: 1:    'Ava Coleman',
282: 1:    'William Barnes',
282: 1:    'Sophia Mitchell',
282: 1:    'James Hughes',
282: 1:    'Isabella Foster',
282: 1:    'Benjamin Evans'
282: 1:  ]
282: 1:}
282: 1:Scores: 11683
282: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E']')
282: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
283: 1:BoardData {
283: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
283: 1:  'expectedAnswer': 'M.M',
283: 1:  'history': [
283: 1:    {
283: 1:      'answer': 'T.H',
283: 1:      'question': 'Tom Harris',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'G.L',
283: 1:      'question': 'garlick looney',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'E.P',
283: 1:      'question': 'Ethan parker',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'O.C',
283: 1:      'question': 'olivia Campbell',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'L.J',
283: 1:      'question': 'Liam Jenkins',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'E.B',
283: 1:      'question': 'Emma Bryant',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'N.R',
283: 1:      'question': 'Noah Reed',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'A.C',
283: 1:      'question': 'Ava Coleman',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'W.B',
283: 1:      'question': 'William Barnes',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'S.M',
283: 1:      'question': 'Sophia Mitchell',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'J.H',
283: 1:      'question': 'James Hughes',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'I.F',
283: 1:      'question': 'Isabella Foster',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'B.E',
283: 1:      'question': 'Benjamin Evans',
283: 1:      'valid': true
283: 1:    }
283: 1:  ],
283: 1:  'info': [
283: 1:    '✅f(Tom Harris) = T.H',
283: 1:    '✅f(garlick looney) = G.L',
283: 1:    '✅f(Ethan parker) = E.P',
283: 1:    '✅f(olivia Campbell) = O.C',
283: 1:    '✅f(Liam Jenkins) = L.J',
283: 1:    '✅f(Emma Bryant) = E.B',
283: 1:    '✅f(Noah Reed) = N.R',
283: 1:    '✅f(Ava Coleman) = A.C',
283: 1:    '✅f(William Barnes) = W.B',
283: 1:    '✅f(Sophia Mitchell) = S.M',
283: 1:    '✅f(James Hughes) = J.H',
283: 1:    '✅f(Isabella Foster) = I.F',
283: 1:    '✅f(Benjamin Evans) = B.E',
283: 1:    '❌f(Mia Murphy) = ??? != M.M'
283: 1:  ],
283: 1:  'level': 10,
283: 1:  'nextQuestion': 'Mia Murphy',
283: 1:  'questions': [
283: 1:    'Tom Harris',
283: 1:    'garlick looney',
283: 1:    'Ethan parker',
283: 1:    'olivia Campbell',
283: 1:    'Liam Jenkins',
283: 1:    'Emma Bryant',
283: 1:    'Noah Reed',
283: 1:    'Ava Coleman',
283: 1:    'William Barnes',
283: 1:    'Sophia Mitchell',
283: 1:    'James Hughes',
283: 1:    'Isabella Foster',
283: 1:    'Benjamin Evans',
283: 1:    'Mia Murphy'
283: 1:  ]
283: 1:}
283: 1:Scores: 11687
283: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M']')
283: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
284: 1:BoardData {
284: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
284: 1:  'expectedAnswer': 'M.R',
284: 1:  'history': [
284: 1:    {
284: 1:      'answer': 'T.H',
284: 1:      'question': 'Tom Harris',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'G.L',
284: 1:      'question': 'garlick looney',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'E.P',
284: 1:      'question': 'Ethan parker',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'O.C',
284: 1:      'question': 'olivia Campbell',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'L.J',
284: 1:      'question': 'Liam Jenkins',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'E.B',
284: 1:      'question': 'Emma Bryant',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'N.R',
284: 1:      'question': 'Noah Reed',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'A.C',
284: 1:      'question': 'Ava Coleman',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'W.B',
284: 1:      'question': 'William Barnes',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'S.M',
284: 1:      'question': 'Sophia Mitchell',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'J.H',
284: 1:      'question': 'James Hughes',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'I.F',
284: 1:      'question': 'Isabella Foster',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'B.E',
284: 1:      'question': 'Benjamin Evans',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'M.M',
284: 1:      'question': 'Mia Murphy',
284: 1:      'valid': true
284: 1:    }
284: 1:  ],
284: 1:  'info': [
284: 1:    '✅f(Tom Harris) = T.H',
284: 1:    '✅f(garlick looney) = G.L',
284: 1:    '✅f(Ethan parker) = E.P',
284: 1:    '✅f(olivia Campbell) = O.C',
284: 1:    '✅f(Liam Jenkins) = L.J',
284: 1:    '✅f(Emma Bryant) = E.B',
284: 1:    '✅f(Noah Reed) = N.R',
284: 1:    '✅f(Ava Coleman) = A.C',
284: 1:    '✅f(William Barnes) = W.B',
284: 1:    '✅f(Sophia Mitchell) = S.M',
284: 1:    '✅f(James Hughes) = J.H',
284: 1:    '✅f(Isabella Foster) = I.F',
284: 1:    '✅f(Benjamin Evans) = B.E',
284: 1:    '✅f(Mia Murphy) = M.M',
284: 1:    '❌f(Mason Richardson) = ??? != M.R'
284: 1:  ],
284: 1:  'level': 10,
284: 1:  'nextQuestion': 'Mason Richardson',
284: 1:  'questions': [
284: 1:    'Tom Harris',
284: 1:    'garlick looney',
284: 1:    'Ethan parker',
284: 1:    'olivia Campbell',
284: 1:    'Liam Jenkins',
284: 1:    'Emma Bryant',
284: 1:    'Noah Reed',
284: 1:    'Ava Coleman',
284: 1:    'William Barnes',
284: 1:    'Sophia Mitchell',
284: 1:    'James Hughes',
284: 1:    'Isabella Foster',
284: 1:    'Benjamin Evans',
284: 1:    'Mia Murphy',
284: 1:    'Mason Richardson'
284: 1:  ]
284: 1:}
284: 1:Scores: 11691
284: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R']')
284: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
285: 1:BoardData {
285: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
285: 1:  'expectedAnswer': 'C.P',
285: 1:  'history': [
285: 1:    {
285: 1:      'answer': 'T.H',
285: 1:      'question': 'Tom Harris',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'G.L',
285: 1:      'question': 'garlick looney',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'E.P',
285: 1:      'question': 'Ethan parker',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'O.C',
285: 1:      'question': 'olivia Campbell',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'L.J',
285: 1:      'question': 'Liam Jenkins',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'E.B',
285: 1:      'question': 'Emma Bryant',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'N.R',
285: 1:      'question': 'Noah Reed',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'A.C',
285: 1:      'question': 'Ava Coleman',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'W.B',
285: 1:      'question': 'William Barnes',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'S.M',
285: 1:      'question': 'Sophia Mitchell',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'J.H',
285: 1:      'question': 'James Hughes',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'I.F',
285: 1:      'question': 'Isabella Foster',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'B.E',
285: 1:      'question': 'Benjamin Evans',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'M.M',
285: 1:      'question': 'Mia Murphy',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'M.R',
285: 1:      'question': 'Mason Richardson',
285: 1:      'valid': true
285: 1:    }
285: 1:  ],
285: 1:  'info': [
285: 1:    '✅f(Tom Harris) = T.H',
285: 1:    '✅f(garlick looney) = G.L',
285: 1:    '✅f(Ethan parker) = E.P',
285: 1:    '✅f(olivia Campbell) = O.C',
285: 1:    '✅f(Liam Jenkins) = L.J',
285: 1:    '✅f(Emma Bryant) = E.B',
285: 1:    '✅f(Noah Reed) = N.R',
285: 1:    '✅f(Ava Coleman) = A.C',
285: 1:    '✅f(William Barnes) = W.B',
285: 1:    '✅f(Sophia Mitchell) = S.M',
285: 1:    '✅f(James Hughes) = J.H',
285: 1:    '✅f(Isabella Foster) = I.F',
285: 1:    '✅f(Benjamin Evans) = B.E',
285: 1:    '✅f(Mia Murphy) = M.M',
285: 1:    '✅f(Mason Richardson) = M.R',
285: 1:    '❌f(Charlotte Peterson) = ??? != C.P'
285: 1:  ],
285: 1:  'level': 10,
285: 1:  'nextQuestion': 'Charlotte Peterson',
285: 1:  'questions': [
285: 1:    'Tom Harris',
285: 1:    'garlick looney',
285: 1:    'Ethan parker',
285: 1:    'olivia Campbell',
285: 1:    'Liam Jenkins',
285: 1:    'Emma Bryant',
285: 1:    'Noah Reed',
285: 1:    'Ava Coleman',
285: 1:    'William Barnes',
285: 1:    'Sophia Mitchell',
285: 1:    'James Hughes',
285: 1:    'Isabella Foster',
285: 1:    'Benjamin Evans',
285: 1:    'Mia Murphy',
285: 1:    'Mason Richardson',
285: 1:    'Charlotte Peterson'
285: 1:  ]
285: 1:}
285: 1:Scores: 11695
285: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P']')
285: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
286: 1:BoardData {
286: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
286: 1:  'expectedAnswer': 'E.C',
286: 1:  'history': [
286: 1:    {
286: 1:      'answer': 'T.H',
286: 1:      'question': 'Tom Harris',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'G.L',
286: 1:      'question': 'garlick looney',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'E.P',
286: 1:      'question': 'Ethan parker',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'O.C',
286: 1:      'question': 'olivia Campbell',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'L.J',
286: 1:      'question': 'Liam Jenkins',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'E.B',
286: 1:      'question': 'Emma Bryant',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'N.R',
286: 1:      'question': 'Noah Reed',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'A.C',
286: 1:      'question': 'Ava Coleman',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'W.B',
286: 1:      'question': 'William Barnes',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'S.M',
286: 1:      'question': 'Sophia Mitchell',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'J.H',
286: 1:      'question': 'James Hughes',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'I.F',
286: 1:      'question': 'Isabella Foster',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'B.E',
286: 1:      'question': 'Benjamin Evans',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'M.M',
286: 1:      'question': 'Mia Murphy',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'M.R',
286: 1:      'question': 'Mason Richardson',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'C.P',
286: 1:      'question': 'Charlotte Peterson',
286: 1:      'valid': true
286: 1:    }
286: 1:  ],
286: 1:  'info': [
286: 1:    '✅f(Tom Harris) = T.H',
286: 1:    '✅f(garlick looney) = G.L',
286: 1:    '✅f(Ethan parker) = E.P',
286: 1:    '✅f(olivia Campbell) = O.C',
286: 1:    '✅f(Liam Jenkins) = L.J',
286: 1:    '✅f(Emma Bryant) = E.B',
286: 1:    '✅f(Noah Reed) = N.R',
286: 1:    '✅f(Ava Coleman) = A.C',
286: 1:    '✅f(William Barnes) = W.B',
286: 1:    '✅f(Sophia Mitchell) = S.M',
286: 1:    '✅f(James Hughes) = J.H',
286: 1:    '✅f(Isabella Foster) = I.F',
286: 1:    '✅f(Benjamin Evans) = B.E',
286: 1:    '✅f(Mia Murphy) = M.M',
286: 1:    '✅f(Mason Richardson) = M.R',
286: 1:    '✅f(Charlotte Peterson) = C.P',
286: 1:    '❌f(Elijah Cooper) = ??? != E.C'
286: 1:  ],
286: 1:  'level': 10,
286: 1:  'nextQuestion': 'Elijah Cooper',
286: 1:  'questions': [
286: 1:    'Tom Harris',
286: 1:    'garlick looney',
286: 1:    'Ethan parker',
286: 1:    'olivia Campbell',
286: 1:    'Liam Jenkins',
286: 1:    'Emma Bryant',
286: 1:    'Noah Reed',
286: 1:    'Ava Coleman',
286: 1:    'William Barnes',
286: 1:    'Sophia Mitchell',
286: 1:    'James Hughes',
286: 1:    'Isabella Foster',
286: 1:    'Benjamin Evans',
286: 1:    'Mia Murphy',
286: 1:    'Mason Richardson',
286: 1:    'Charlotte Peterson',
286: 1:    'Elijah Cooper'
286: 1:  ]
286: 1:}
286: 1:Scores: 11699
286: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C']')
286: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
287: 1:BoardData {
287: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
287: 1:  'expectedAnswer': 'A.C',
287: 1:  'history': [
287: 1:    {
287: 1:      'answer': 'T.H',
287: 1:      'question': 'Tom Harris',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'G.L',
287: 1:      'question': 'garlick looney',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'E.P',
287: 1:      'question': 'Ethan parker',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'O.C',
287: 1:      'question': 'olivia Campbell',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'L.J',
287: 1:      'question': 'Liam Jenkins',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'E.B',
287: 1:      'question': 'Emma Bryant',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'N.R',
287: 1:      'question': 'Noah Reed',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'A.C',
287: 1:      'question': 'Ava Coleman',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'W.B',
287: 1:      'question': 'William Barnes',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'S.M',
287: 1:      'question': 'Sophia Mitchell',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'J.H',
287: 1:      'question': 'James Hughes',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'I.F',
287: 1:      'question': 'Isabella Foster',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'B.E',
287: 1:      'question': 'Benjamin Evans',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'M.M',
287: 1:      'question': 'Mia Murphy',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'M.R',
287: 1:      'question': 'Mason Richardson',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'C.P',
287: 1:      'question': 'Charlotte Peterson',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'E.C',
287: 1:      'question': 'Elijah Cooper',
287: 1:      'valid': true
287: 1:    }
287: 1:  ],
287: 1:  'info': [
287: 1:    '✅f(Tom Harris) = T.H',
287: 1:    '✅f(garlick looney) = G.L',
287: 1:    '✅f(Ethan parker) = E.P',
287: 1:    '✅f(olivia Campbell) = O.C',
287: 1:    '✅f(Liam Jenkins) = L.J',
287: 1:    '✅f(Emma Bryant) = E.B',
287: 1:    '✅f(Noah Reed) = N.R',
287: 1:    '✅f(Ava Coleman) = A.C',
287: 1:    '✅f(William Barnes) = W.B',
287: 1:    '✅f(Sophia Mitchell) = S.M',
287: 1:    '✅f(James Hughes) = J.H',
287: 1:    '✅f(Isabella Foster) = I.F',
287: 1:    '✅f(Benjamin Evans) = B.E',
287: 1:    '✅f(Mia Murphy) = M.M',
287: 1:    '✅f(Mason Richardson) = M.R',
287: 1:    '✅f(Charlotte Peterson) = C.P',
287: 1:    '✅f(Elijah Cooper) = E.C',
287: 1:    '❌f(Amelia Cox) = ??? != A.C'
287: 1:  ],
287: 1:  'level': 10,
287: 1:  'nextQuestion': 'Amelia Cox',
287: 1:  'questions': [
287: 1:    'Tom Harris',
287: 1:    'garlick looney',
287: 1:    'Ethan parker',
287: 1:    'olivia Campbell',
287: 1:    'Liam Jenkins',
287: 1:    'Emma Bryant',
287: 1:    'Noah Reed',
287: 1:    'Ava Coleman',
287: 1:    'William Barnes',
287: 1:    'Sophia Mitchell',
287: 1:    'James Hughes',
287: 1:    'Isabella Foster',
287: 1:    'Benjamin Evans',
287: 1:    'Mia Murphy',
287: 1:    'Mason Richardson',
287: 1:    'Charlotte Peterson',
287: 1:    'Elijah Cooper',
287: 1:    'Amelia Cox'
287: 1:  ]
287: 1:}
287: 1:Scores: 11703
287: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C']')
287: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
288: 1:BoardData {
288: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
288: 1:  'expectedAnswer': 'A.G',
288: 1:  'history': [
288: 1:    {
288: 1:      'answer': 'T.H',
288: 1:      'question': 'Tom Harris',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'G.L',
288: 1:      'question': 'garlick looney',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'E.P',
288: 1:      'question': 'Ethan parker',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'O.C',
288: 1:      'question': 'olivia Campbell',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'L.J',
288: 1:      'question': 'Liam Jenkins',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'E.B',
288: 1:      'question': 'Emma Bryant',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'N.R',
288: 1:      'question': 'Noah Reed',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'A.C',
288: 1:      'question': 'Ava Coleman',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'W.B',
288: 1:      'question': 'William Barnes',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'S.M',
288: 1:      'question': 'Sophia Mitchell',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'J.H',
288: 1:      'question': 'James Hughes',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'I.F',
288: 1:      'question': 'Isabella Foster',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'B.E',
288: 1:      'question': 'Benjamin Evans',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'M.M',
288: 1:      'question': 'Mia Murphy',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'M.R',
288: 1:      'question': 'Mason Richardson',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'C.P',
288: 1:      'question': 'Charlotte Peterson',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'E.C',
288: 1:      'question': 'Elijah Cooper',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'A.C',
288: 1:      'question': 'Amelia Cox',
288: 1:      'valid': true
288: 1:    }
288: 1:  ],
288: 1:  'info': [
288: 1:    '✅f(Tom Harris) = T.H',
288: 1:    '✅f(garlick looney) = G.L',
288: 1:    '✅f(Ethan parker) = E.P',
288: 1:    '✅f(olivia Campbell) = O.C',
288: 1:    '✅f(Liam Jenkins) = L.J',
288: 1:    '✅f(Emma Bryant) = E.B',
288: 1:    '✅f(Noah Reed) = N.R',
288: 1:    '✅f(Ava Coleman) = A.C',
288: 1:    '✅f(William Barnes) = W.B',
288: 1:    '✅f(Sophia Mitchell) = S.M',
288: 1:    '✅f(James Hughes) = J.H',
288: 1:    '✅f(Isabella Foster) = I.F',
288: 1:    '✅f(Benjamin Evans) = B.E',
288: 1:    '✅f(Mia Murphy) = M.M',
288: 1:    '✅f(Mason Richardson) = M.R',
288: 1:    '✅f(Charlotte Peterson) = C.P',
288: 1:    '✅f(Elijah Cooper) = E.C',
288: 1:    '✅f(Amelia Cox) = A.C',
288: 1:    '❌f(Alexander Griffin) = ??? != A.G'
288: 1:  ],
288: 1:  'level': 10,
288: 1:  'nextQuestion': 'Alexander Griffin',
288: 1:  'questions': [
288: 1:    'Tom Harris',
288: 1:    'garlick looney',
288: 1:    'Ethan parker',
288: 1:    'olivia Campbell',
288: 1:    'Liam Jenkins',
288: 1:    'Emma Bryant',
288: 1:    'Noah Reed',
288: 1:    'Ava Coleman',
288: 1:    'William Barnes',
288: 1:    'Sophia Mitchell',
288: 1:    'James Hughes',
288: 1:    'Isabella Foster',
288: 1:    'Benjamin Evans',
288: 1:    'Mia Murphy',
288: 1:    'Mason Richardson',
288: 1:    'Charlotte Peterson',
288: 1:    'Elijah Cooper',
288: 1:    'Amelia Cox',
288: 1:    'Alexander Griffin'
288: 1:  ]
288: 1:}
288: 1:Scores: 11707
288: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C', 'A.G']')
288: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
289: 1:BoardData {
289: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
289: 1:  'expectedAnswer': 'H.B',
289: 1:  'history': [
289: 1:    {
289: 1:      'answer': 'T.H',
289: 1:      'question': 'Tom Harris',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'G.L',
289: 1:      'question': 'garlick looney',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'E.P',
289: 1:      'question': 'Ethan parker',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'O.C',
289: 1:      'question': 'olivia Campbell',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'L.J',
289: 1:      'question': 'Liam Jenkins',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'E.B',
289: 1:      'question': 'Emma Bryant',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'N.R',
289: 1:      'question': 'Noah Reed',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'A.C',
289: 1:      'question': 'Ava Coleman',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'W.B',
289: 1:      'question': 'William Barnes',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'S.M',
289: 1:      'question': 'Sophia Mitchell',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'J.H',
289: 1:      'question': 'James Hughes',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'I.F',
289: 1:      'question': 'Isabella Foster',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'B.E',
289: 1:      'question': 'Benjamin Evans',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'M.M',
289: 1:      'question': 'Mia Murphy',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'M.R',
289: 1:      'question': 'Mason Richardson',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'C.P',
289: 1:      'question': 'Charlotte Peterson',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'E.C',
289: 1:      'question': 'Elijah Cooper',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'A.C',
289: 1:      'question': 'Amelia Cox',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'A.G',
289: 1:      'question': 'Alexander Griffin',
289: 1:      'valid': true
289: 1:    }
289: 1:  ],
289: 1:  'info': [
289: 1:    '✅f(Tom Harris) = T.H',
289: 1:    '✅f(garlick looney) = G.L',
289: 1:    '✅f(Ethan parker) = E.P',
289: 1:    '✅f(olivia Campbell) = O.C',
289: 1:    '✅f(Liam Jenkins) = L.J',
289: 1:    '✅f(Emma Bryant) = E.B',
289: 1:    '✅f(Noah Reed) = N.R',
289: 1:    '✅f(Ava Coleman) = A.C',
289: 1:    '✅f(William Barnes) = W.B',
289: 1:    '✅f(Sophia Mitchell) = S.M',
289: 1:    '✅f(James Hughes) = J.H',
289: 1:    '✅f(Isabella Foster) = I.F',
289: 1:    '✅f(Benjamin Evans) = B.E',
289: 1:    '✅f(Mia Murphy) = M.M',
289: 1:    '✅f(Mason Richardson) = M.R',
289: 1:    '✅f(Charlotte Peterson) = C.P',
289: 1:    '✅f(Elijah Cooper) = E.C',
289: 1:    '✅f(Amelia Cox) = A.C',
289: 1:    '✅f(Alexander Griffin) = A.G',
289: 1:    '❌f(Harper Brooks) = ??? != H.B'
289: 1:  ],
289: 1:  'level': 10,
289: 1:  'nextQuestion': 'Harper Brooks',
289: 1:  'questions': [
289: 1:    'Tom Harris',
289: 1:    'garlick looney',
289: 1:    'Ethan parker',
289: 1:    'olivia Campbell',
289: 1:    'Liam Jenkins',
289: 1:    'Emma Bryant',
289: 1:    'Noah Reed',
289: 1:    'Ava Coleman',
289: 1:    'William Barnes',
289: 1:    'Sophia Mitchell',
289: 1:    'James Hughes',
289: 1:    'Isabella Foster',
289: 1:    'Benjamin Evans',
289: 1:    'Mia Murphy',
289: 1:    'Mason Richardson',
289: 1:    'Charlotte Peterson',
289: 1:    'Elijah Cooper',
289: 1:    'Amelia Cox',
289: 1:    'Alexander Griffin',
289: 1:    'Harper Brooks'
289: 1:  ]
289: 1:}
289: 1:Scores: 11711
289: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C', 'A.G', 'H.B']')
289: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
290: 1:BoardData {
290: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
290: 1:  'expectedAnswer': 'D.T',
290: 1:  'history': [
290: 1:    {
290: 1:      'answer': 'T.H',
290: 1:      'question': 'Tom Harris',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'G.L',
290: 1:      'question': 'garlick looney',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'E.P',
290: 1:      'question': 'Ethan parker',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'O.C',
290: 1:      'question': 'olivia Campbell',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'L.J',
290: 1:      'question': 'Liam Jenkins',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'E.B',
290: 1:      'question': 'Emma Bryant',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'N.R',
290: 1:      'question': 'Noah Reed',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'A.C',
290: 1:      'question': 'Ava Coleman',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'W.B',
290: 1:      'question': 'William Barnes',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'S.M',
290: 1:      'question': 'Sophia Mitchell',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'J.H',
290: 1:      'question': 'James Hughes',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'I.F',
290: 1:      'question': 'Isabella Foster',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'B.E',
290: 1:      'question': 'Benjamin Evans',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'M.M',
290: 1:      'question': 'Mia Murphy',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'M.R',
290: 1:      'question': 'Mason Richardson',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'C.P',
290: 1:      'question': 'Charlotte Peterson',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'E.C',
290: 1:      'question': 'Elijah Cooper',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'A.C',
290: 1:      'question': 'Amelia Cox',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'A.G',
290: 1:      'question': 'Alexander Griffin',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'H.B',
290: 1:      'question': 'Harper Brooks',
290: 1:      'valid': true
290: 1:    }
290: 1:  ],
290: 1:  'info': [
290: 1:    '✅f(Tom Harris) = T.H',
290: 1:    '✅f(garlick looney) = G.L',
290: 1:    '✅f(Ethan parker) = E.P',
290: 1:    '✅f(olivia Campbell) = O.C',
290: 1:    '✅f(Liam Jenkins) = L.J',
290: 1:    '✅f(Emma Bryant) = E.B',
290: 1:    '✅f(Noah Reed) = N.R',
290: 1:    '✅f(Ava Coleman) = A.C',
290: 1:    '✅f(William Barnes) = W.B',
290: 1:    '✅f(Sophia Mitchell) = S.M',
290: 1:    '✅f(James Hughes) = J.H',
290: 1:    '✅f(Isabella Foster) = I.F',
290: 1:    '✅f(Benjamin Evans) = B.E',
290: 1:    '✅f(Mia Murphy) = M.M',
290: 1:    '✅f(Mason Richardson) = M.R',
290: 1:    '✅f(Charlotte Peterson) = C.P',
290: 1:    '✅f(Elijah Cooper) = E.C',
290: 1:    '✅f(Amelia Cox) = A.C',
290: 1:    '✅f(Alexander Griffin) = A.G',
290: 1:    '✅f(Harper Brooks) = H.B',
290: 1:    '❌f(Daniel Turner) = ??? != D.T'
290: 1:  ],
290: 1:  'level': 10,
290: 1:  'nextQuestion': 'Daniel Turner',
290: 1:  'questions': [
290: 1:    'Tom Harris',
290: 1:    'garlick looney',
290: 1:    'Ethan parker',
290: 1:    'olivia Campbell',
290: 1:    'Liam Jenkins',
290: 1:    'Emma Bryant',
290: 1:    'Noah Reed',
290: 1:    'Ava Coleman',
290: 1:    'William Barnes',
290: 1:    'Sophia Mitchell',
290: 1:    'James Hughes',
290: 1:    'Isabella Foster',
290: 1:    'Benjamin Evans',
290: 1:    'Mia Murphy',
290: 1:    'Mason Richardson',
290: 1:    'Charlotte Peterson',
290: 1:    'Elijah Cooper',
290: 1:    'Amelia Cox',
290: 1:    'Alexander Griffin',
290: 1:    'Harper Brooks',
290: 1:    'Daniel Turner'
290: 1:  ]
290: 1:}
290: 1:Scores: 11715
290: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C', 'A.G', 'H.B', 'D.T']')
290: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
291: 1:BoardData {
291: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
291: 1:  'expectedAnswer': 'A.K',
291: 1:  'history': [
291: 1:    {
291: 1:      'answer': 'T.H',
291: 1:      'question': 'Tom Harris',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'G.L',
291: 1:      'question': 'garlick looney',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'E.P',
291: 1:      'question': 'Ethan parker',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'O.C',
291: 1:      'question': 'olivia Campbell',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'L.J',
291: 1:      'question': 'Liam Jenkins',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'E.B',
291: 1:      'question': 'Emma Bryant',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'N.R',
291: 1:      'question': 'Noah Reed',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'A.C',
291: 1:      'question': 'Ava Coleman',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'W.B',
291: 1:      'question': 'William Barnes',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'S.M',
291: 1:      'question': 'Sophia Mitchell',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'J.H',
291: 1:      'question': 'James Hughes',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'I.F',
291: 1:      'question': 'Isabella Foster',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'B.E',
291: 1:      'question': 'Benjamin Evans',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'M.M',
291: 1:      'question': 'Mia Murphy',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'M.R',
291: 1:      'question': 'Mason Richardson',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'C.P',
291: 1:      'question': 'Charlotte Peterson',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'E.C',
291: 1:      'question': 'Elijah Cooper',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'A.C',
291: 1:      'question': 'Amelia Cox',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'A.G',
291: 1:      'question': 'Alexander Griffin',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'H.B',
291: 1:      'question': 'Harper Brooks',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'D.T',
291: 1:      'question': 'Daniel Turner',
291: 1:      'valid': true
291: 1:    }
291: 1:  ],
291: 1:  'info': [
291: 1:    '✅f(Tom Harris) = T.H',
291: 1:    '✅f(garlick looney) = G.L',
291: 1:    '✅f(Ethan parker) = E.P',
291: 1:    '✅f(olivia Campbell) = O.C',
291: 1:    '✅f(Liam Jenkins) = L.J',
291: 1:    '✅f(Emma Bryant) = E.B',
291: 1:    '✅f(Noah Reed) = N.R',
291: 1:    '✅f(Ava Coleman) = A.C',
291: 1:    '✅f(William Barnes) = W.B',
291: 1:    '✅f(Sophia Mitchell) = S.M',
291: 1:    '✅f(James Hughes) = J.H',
291: 1:    '✅f(Isabella Foster) = I.F',
291: 1:    '✅f(Benjamin Evans) = B.E',
291: 1:    '✅f(Mia Murphy) = M.M',
291: 1:    '✅f(Mason Richardson) = M.R',
291: 1:    '✅f(Charlotte Peterson) = C.P',
291: 1:    '✅f(Elijah Cooper) = E.C',
291: 1:    '✅f(Amelia Cox) = A.C',
291: 1:    '✅f(Alexander Griffin) = A.G',
291: 1:    '✅f(Harper Brooks) = H.B',
291: 1:    '✅f(Daniel Turner) = D.T',
291: 1:    '❌f(Abigail Kelly) = ??? != A.K'
291: 1:  ],
291: 1:  'level': 10,
291: 1:  'nextQuestion': 'Abigail Kelly',
291: 1:  'questions': [
291: 1:    'Tom Harris',
291: 1:    'garlick looney',
291: 1:    'Ethan parker',
291: 1:    'olivia Campbell',
291: 1:    'Liam Jenkins',
291: 1:    'Emma Bryant',
291: 1:    'Noah Reed',
291: 1:    'Ava Coleman',
291: 1:    'William Barnes',
291: 1:    'Sophia Mitchell',
291: 1:    'James Hughes',
291: 1:    'Isabella Foster',
291: 1:    'Benjamin Evans',
291: 1:    'Mia Murphy',
291: 1:    'Mason Richardson',
291: 1:    'Charlotte Peterson',
291: 1:    'Elijah Cooper',
291: 1:    'Amelia Cox',
291: 1:    'Alexander Griffin',
291: 1:    'Harper Brooks',
291: 1:    'Daniel Turner',
291: 1:    'Abigail Kelly'
291: 1:  ]
291: 1:}
291: 1:Scores: 11719
291: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C', 'A.G', 'H.B', 'D.T', 'A.K']')
291: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
292: 1:BoardData {
292: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
292: 1:  'expectedAnswer': 'H.P',
292: 1:  'history': [
292: 1:    {
292: 1:      'answer': 'T.H',
292: 1:      'question': 'Tom Harris',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'G.L',
292: 1:      'question': 'garlick looney',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'E.P',
292: 1:      'question': 'Ethan parker',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'O.C',
292: 1:      'question': 'olivia Campbell',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'L.J',
292: 1:      'question': 'Liam Jenkins',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'E.B',
292: 1:      'question': 'Emma Bryant',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'N.R',
292: 1:      'question': 'Noah Reed',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'A.C',
292: 1:      'question': 'Ava Coleman',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'W.B',
292: 1:      'question': 'William Barnes',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'S.M',
292: 1:      'question': 'Sophia Mitchell',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'J.H',
292: 1:      'question': 'James Hughes',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'I.F',
292: 1:      'question': 'Isabella Foster',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'B.E',
292: 1:      'question': 'Benjamin Evans',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'M.M',
292: 1:      'question': 'Mia Murphy',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'M.R',
292: 1:      'question': 'Mason Richardson',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'C.P',
292: 1:      'question': 'Charlotte Peterson',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'E.C',
292: 1:      'question': 'Elijah Cooper',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'A.C',
292: 1:      'question': 'Amelia Cox',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'A.G',
292: 1:      'question': 'Alexander Griffin',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'H.B',
292: 1:      'question': 'Harper Brooks',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'D.T',
292: 1:      'question': 'Daniel Turner',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'A.K',
292: 1:      'question': 'Abigail Kelly',
292: 1:      'valid': true
292: 1:    }
292: 1:  ],
292: 1:  'info': [
292: 1:    '✅f(Tom Harris) = T.H',
292: 1:    '✅f(garlick looney) = G.L',
292: 1:    '✅f(Ethan parker) = E.P',
292: 1:    '✅f(olivia Campbell) = O.C',
292: 1:    '✅f(Liam Jenkins) = L.J',
292: 1:    '✅f(Emma Bryant) = E.B',
292: 1:    '✅f(Noah Reed) = N.R',
292: 1:    '✅f(Ava Coleman) = A.C',
292: 1:    '✅f(William Barnes) = W.B',
292: 1:    '✅f(Sophia Mitchell) = S.M',
292: 1:    '✅f(James Hughes) = J.H',
292: 1:    '✅f(Isabella Foster) = I.F',
292: 1:    '✅f(Benjamin Evans) = B.E',
292: 1:    '✅f(Mia Murphy) = M.M',
292: 1:    '✅f(Mason Richardson) = M.R',
292: 1:    '✅f(Charlotte Peterson) = C.P',
292: 1:    '✅f(Elijah Cooper) = E.C',
292: 1:    '✅f(Amelia Cox) = A.C',
292: 1:    '✅f(Alexander Griffin) = A.G',
292: 1:    '✅f(Harper Brooks) = H.B',
292: 1:    '✅f(Daniel Turner) = D.T',
292: 1:    '✅f(Abigail Kelly) = A.K',
292: 1:    '❌f(Henry Price) = ??? != H.P'
292: 1:  ],
292: 1:  'level': 10,
292: 1:  'nextQuestion': 'Henry Price',
292: 1:  'questions': [
292: 1:    'Tom Harris',
292: 1:    'garlick looney',
292: 1:    'Ethan parker',
292: 1:    'olivia Campbell',
292: 1:    'Liam Jenkins',
292: 1:    'Emma Bryant',
292: 1:    'Noah Reed',
292: 1:    'Ava Coleman',
292: 1:    'William Barnes',
292: 1:    'Sophia Mitchell',
292: 1:    'James Hughes',
292: 1:    'Isabella Foster',
292: 1:    'Benjamin Evans',
292: 1:    'Mia Murphy',
292: 1:    'Mason Richardson',
292: 1:    'Charlotte Peterson',
292: 1:    'Elijah Cooper',
292: 1:    'Amelia Cox',
292: 1:    'Alexander Griffin',
292: 1:    'Harper Brooks',
292: 1:    'Daniel Turner',
292: 1:    'Abigail Kelly',
292: 1:    'Henry Price'
292: 1:  ]
292: 1:}
292: 1:Scores: 11723
292: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C', 'A.G', 'H.B', 'D.T', 'A.K', 'H.P']')
292: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
293: 1:BoardData {
293: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
293: 1:  'expectedAnswer': 'E.R',
293: 1:  'history': [
293: 1:    {
293: 1:      'answer': 'T.H',
293: 1:      'question': 'Tom Harris',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'G.L',
293: 1:      'question': 'garlick looney',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'E.P',
293: 1:      'question': 'Ethan parker',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'O.C',
293: 1:      'question': 'olivia Campbell',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'L.J',
293: 1:      'question': 'Liam Jenkins',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'E.B',
293: 1:      'question': 'Emma Bryant',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'N.R',
293: 1:      'question': 'Noah Reed',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'A.C',
293: 1:      'question': 'Ava Coleman',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'W.B',
293: 1:      'question': 'William Barnes',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'S.M',
293: 1:      'question': 'Sophia Mitchell',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'J.H',
293: 1:      'question': 'James Hughes',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'I.F',
293: 1:      'question': 'Isabella Foster',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'B.E',
293: 1:      'question': 'Benjamin Evans',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'M.M',
293: 1:      'question': 'Mia Murphy',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'M.R',
293: 1:      'question': 'Mason Richardson',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'C.P',
293: 1:      'question': 'Charlotte Peterson',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'E.C',
293: 1:      'question': 'Elijah Cooper',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'A.C',
293: 1:      'question': 'Amelia Cox',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'A.G',
293: 1:      'question': 'Alexander Griffin',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'H.B',
293: 1:      'question': 'Harper Brooks',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'D.T',
293: 1:      'question': 'Daniel Turner',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'A.K',
293: 1:      'question': 'Abigail Kelly',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'H.P',
293: 1:      'question': 'Henry Price',
293: 1:      'valid': true
293: 1:    }
293: 1:  ],
293: 1:  'info': [
293: 1:    '✅f(Tom Harris) = T.H',
293: 1:    '✅f(garlick looney) = G.L',
293: 1:    '✅f(Ethan parker) = E.P',
293: 1:    '✅f(olivia Campbell) = O.C',
293: 1:    '✅f(Liam Jenkins) = L.J',
293: 1:    '✅f(Emma Bryant) = E.B',
293: 1:    '✅f(Noah Reed) = N.R',
293: 1:    '✅f(Ava Coleman) = A.C',
293: 1:    '✅f(William Barnes) = W.B',
293: 1:    '✅f(Sophia Mitchell) = S.M',
293: 1:    '✅f(James Hughes) = J.H',
293: 1:    '✅f(Isabella Foster) = I.F',
293: 1:    '✅f(Benjamin Evans) = B.E',
293: 1:    '✅f(Mia Murphy) = M.M',
293: 1:    '✅f(Mason Richardson) = M.R',
293: 1:    '✅f(Charlotte Peterson) = C.P',
293: 1:    '✅f(Elijah Cooper) = E.C',
293: 1:    '✅f(Amelia Cox) = A.C',
293: 1:    '✅f(Alexander Griffin) = A.G',
293: 1:    '✅f(Harper Brooks) = H.B',
293: 1:    '✅f(Daniel Turner) = D.T',
293: 1:    '✅f(Abigail Kelly) = A.K',
293: 1:    '✅f(Henry Price) = H.P',
293: 1:    '❌f(Emily Ross) = ??? != E.R'
293: 1:  ],
293: 1:  'level': 10,
293: 1:  'nextQuestion': 'Emily Ross',
293: 1:  'questions': [
293: 1:    'Tom Harris',
293: 1:    'garlick looney',
293: 1:    'Ethan parker',
293: 1:    'olivia Campbell',
293: 1:    'Liam Jenkins',
293: 1:    'Emma Bryant',
293: 1:    'Noah Reed',
293: 1:    'Ava Coleman',
293: 1:    'William Barnes',
293: 1:    'Sophia Mitchell',
293: 1:    'James Hughes',
293: 1:    'Isabella Foster',
293: 1:    'Benjamin Evans',
293: 1:    'Mia Murphy',
293: 1:    'Mason Richardson',
293: 1:    'Charlotte Peterson',
293: 1:    'Elijah Cooper',
293: 1:    'Amelia Cox',
293: 1:    'Alexander Griffin',
293: 1:    'Harper Brooks',
293: 1:    'Daniel Turner',
293: 1:    'Abigail Kelly',
293: 1:    'Henry Price',
293: 1:    'Emily Ross'
293: 1:  ]
293: 1:}
293: 1:Scores: 11727
293: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C', 'A.G', 'H.B', 'D.T', 'A.K', 'H.P', 'E.R']')
293: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
294: 1:BoardData {
294: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
294: 1:  'expectedAnswer': 'S.W',
294: 1:  'history': [
294: 1:    {
294: 1:      'answer': 'T.H',
294: 1:      'question': 'Tom Harris',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'G.L',
294: 1:      'question': 'garlick looney',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'E.P',
294: 1:      'question': 'Ethan parker',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'O.C',
294: 1:      'question': 'olivia Campbell',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'L.J',
294: 1:      'question': 'Liam Jenkins',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'E.B',
294: 1:      'question': 'Emma Bryant',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'N.R',
294: 1:      'question': 'Noah Reed',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'A.C',
294: 1:      'question': 'Ava Coleman',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'W.B',
294: 1:      'question': 'William Barnes',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'S.M',
294: 1:      'question': 'Sophia Mitchell',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'J.H',
294: 1:      'question': 'James Hughes',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'I.F',
294: 1:      'question': 'Isabella Foster',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'B.E',
294: 1:      'question': 'Benjamin Evans',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'M.M',
294: 1:      'question': 'Mia Murphy',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'M.R',
294: 1:      'question': 'Mason Richardson',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'C.P',
294: 1:      'question': 'Charlotte Peterson',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'E.C',
294: 1:      'question': 'Elijah Cooper',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'A.C',
294: 1:      'question': 'Amelia Cox',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'A.G',
294: 1:      'question': 'Alexander Griffin',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'H.B',
294: 1:      'question': 'Harper Brooks',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'D.T',
294: 1:      'question': 'Daniel Turner',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'A.K',
294: 1:      'question': 'Abigail Kelly',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'H.P',
294: 1:      'question': 'Henry Price',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'E.R',
294: 1:      'question': 'Emily Ross',
294: 1:      'valid': true
294: 1:    }
294: 1:  ],
294: 1:  'info': [
294: 1:    '✅f(Tom Harris) = T.H',
294: 1:    '✅f(garlick looney) = G.L',
294: 1:    '✅f(Ethan parker) = E.P',
294: 1:    '✅f(olivia Campbell) = O.C',
294: 1:    '✅f(Liam Jenkins) = L.J',
294: 1:    '✅f(Emma Bryant) = E.B',
294: 1:    '✅f(Noah Reed) = N.R',
294: 1:    '✅f(Ava Coleman) = A.C',
294: 1:    '✅f(William Barnes) = W.B',
294: 1:    '✅f(Sophia Mitchell) = S.M',
294: 1:    '✅f(James Hughes) = J.H',
294: 1:    '✅f(Isabella Foster) = I.F',
294: 1:    '✅f(Benjamin Evans) = B.E',
294: 1:    '✅f(Mia Murphy) = M.M',
294: 1:    '✅f(Mason Richardson) = M.R',
294: 1:    '✅f(Charlotte Peterson) = C.P',
294: 1:    '✅f(Elijah Cooper) = E.C',
294: 1:    '✅f(Amelia Cox) = A.C',
294: 1:    '✅f(Alexander Griffin) = A.G',
294: 1:    '✅f(Harper Brooks) = H.B',
294: 1:    '✅f(Daniel Turner) = D.T',
294: 1:    '✅f(Abigail Kelly) = A.K',
294: 1:    '✅f(Henry Price) = H.P',
294: 1:    '✅f(Emily Ross) = E.R',
294: 1:    '❌f(Samuel Ward) = ??? != S.W'
294: 1:  ],
294: 1:  'level': 10,
294: 1:  'nextQuestion': 'Samuel Ward',
294: 1:  'questions': [
294: 1:    'Tom Harris',
294: 1:    'garlick looney',
294: 1:    'Ethan parker',
294: 1:    'olivia Campbell',
294: 1:    'Liam Jenkins',
294: 1:    'Emma Bryant',
294: 1:    'Noah Reed',
294: 1:    'Ava Coleman',
294: 1:    'William Barnes',
294: 1:    'Sophia Mitchell',
294: 1:    'James Hughes',
294: 1:    'Isabella Foster',
294: 1:    'Benjamin Evans',
294: 1:    'Mia Murphy',
294: 1:    'Mason Richardson',
294: 1:    'Charlotte Peterson',
294: 1:    'Elijah Cooper',
294: 1:    'Amelia Cox',
294: 1:    'Alexander Griffin',
294: 1:    'Harper Brooks',
294: 1:    'Daniel Turner',
294: 1:    'Abigail Kelly',
294: 1:    'Henry Price',
294: 1:    'Emily Ross',
294: 1:    'Samuel Ward'
294: 1:  ]
294: 1:}
294: 1:Scores: 11731
294: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C', 'A.G', 'H.B', 'D.T', 'A.K', 'H.P', 'E.R', 'S.W']')
294: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
295: 1:BoardData {
295: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
295: 1:  'expectedAnswer': 'E.M',
295: 1:  'history': [
295: 1:    {
295: 1:      'answer': 'T.H',
295: 1:      'question': 'Tom Harris',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'G.L',
295: 1:      'question': 'garlick looney',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'E.P',
295: 1:      'question': 'Ethan parker',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'O.C',
295: 1:      'question': 'olivia Campbell',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'L.J',
295: 1:      'question': 'Liam Jenkins',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'E.B',
295: 1:      'question': 'Emma Bryant',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'N.R',
295: 1:      'question': 'Noah Reed',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'A.C',
295: 1:      'question': 'Ava Coleman',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'W.B',
295: 1:      'question': 'William Barnes',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'S.M',
295: 1:      'question': 'Sophia Mitchell',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'J.H',
295: 1:      'question': 'James Hughes',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'I.F',
295: 1:      'question': 'Isabella Foster',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'B.E',
295: 1:      'question': 'Benjamin Evans',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'M.M',
295: 1:      'question': 'Mia Murphy',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'M.R',
295: 1:      'question': 'Mason Richardson',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'C.P',
295: 1:      'question': 'Charlotte Peterson',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'E.C',
295: 1:      'question': 'Elijah Cooper',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'A.C',
295: 1:      'question': 'Amelia Cox',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'A.G',
295: 1:      'question': 'Alexander Griffin',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'H.B',
295: 1:      'question': 'Harper Brooks',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'D.T',
295: 1:      'question': 'Daniel Turner',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'A.K',
295: 1:      'question': 'Abigail Kelly',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'H.P',
295: 1:      'question': 'Henry Price',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'E.R',
295: 1:      'question': 'Emily Ross',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'S.W',
295: 1:      'question': 'Samuel Ward',
295: 1:      'valid': true
295: 1:    }
295: 1:  ],
295: 1:  'info': [
295: 1:    '✅f(Tom Harris) = T.H',
295: 1:    '✅f(garlick looney) = G.L',
295: 1:    '✅f(Ethan parker) = E.P',
295: 1:    '✅f(olivia Campbell) = O.C',
295: 1:    '✅f(Liam Jenkins) = L.J',
295: 1:    '✅f(Emma Bryant) = E.B',
295: 1:    '✅f(Noah Reed) = N.R',
295: 1:    '✅f(Ava Coleman) = A.C',
295: 1:    '✅f(William Barnes) = W.B',
295: 1:    '✅f(Sophia Mitchell) = S.M',
295: 1:    '✅f(James Hughes) = J.H',
295: 1:    '✅f(Isabella Foster) = I.F',
295: 1:    '✅f(Benjamin Evans) = B.E',
295: 1:    '✅f(Mia Murphy) = M.M',
295: 1:    '✅f(Mason Richardson) = M.R',
295: 1:    '✅f(Charlotte Peterson) = C.P',
295: 1:    '✅f(Elijah Cooper) = E.C',
295: 1:    '✅f(Amelia Cox) = A.C',
295: 1:    '✅f(Alexander Griffin) = A.G',
295: 1:    '✅f(Harper Brooks) = H.B',
295: 1:    '✅f(Daniel Turner) = D.T',
295: 1:    '✅f(Abigail Kelly) = A.K',
295: 1:    '✅f(Henry Price) = H.P',
295: 1:    '✅f(Emily Ross) = E.R',
295: 1:    '✅f(Samuel Ward) = S.W',
295: 1:    '❌f(Elizabeth Morgan) = ??? != E.M'
295: 1:  ],
295: 1:  'level': 10,
295: 1:  'nextQuestion': 'Elizabeth Morgan',
295: 1:  'questions': [
295: 1:    'Tom Harris',
295: 1:    'garlick looney',
295: 1:    'Ethan parker',
295: 1:    'olivia Campbell',
295: 1:    'Liam Jenkins',
295: 1:    'Emma Bryant',
295: 1:    'Noah Reed',
295: 1:    'Ava Coleman',
295: 1:    'William Barnes',
295: 1:    'Sophia Mitchell',
295: 1:    'James Hughes',
295: 1:    'Isabella Foster',
295: 1:    'Benjamin Evans',
295: 1:    'Mia Murphy',
295: 1:    'Mason Richardson',
295: 1:    'Charlotte Peterson',
295: 1:    'Elijah Cooper',
295: 1:    'Amelia Cox',
295: 1:    'Alexander Griffin',
295: 1:    'Harper Brooks',
295: 1:    'Daniel Turner',
295: 1:    'Abigail Kelly',
295: 1:    'Henry Price',
295: 1:    'Emily Ross',
295: 1:    'Samuel Ward',
295: 1:    'Elizabeth Morgan'
295: 1:  ]
295: 1:}
295: 1:Scores: 11735
295: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C', 'A.G', 'H.B', 'D.T', 'A.K', 'H.P', 'E.R', 'S.W', 'E.M']')
295: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
296: 1:BoardData {
296: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
296: 1:  'expectedAnswer': 'J.W',
296: 1:  'history': [
296: 1:    {
296: 1:      'answer': 'T.H',
296: 1:      'question': 'Tom Harris',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'G.L',
296: 1:      'question': 'garlick looney',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'E.P',
296: 1:      'question': 'Ethan parker',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'O.C',
296: 1:      'question': 'olivia Campbell',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'L.J',
296: 1:      'question': 'Liam Jenkins',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'E.B',
296: 1:      'question': 'Emma Bryant',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'N.R',
296: 1:      'question': 'Noah Reed',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'A.C',
296: 1:      'question': 'Ava Coleman',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'W.B',
296: 1:      'question': 'William Barnes',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'S.M',
296: 1:      'question': 'Sophia Mitchell',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'J.H',
296: 1:      'question': 'James Hughes',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'I.F',
296: 1:      'question': 'Isabella Foster',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'B.E',
296: 1:      'question': 'Benjamin Evans',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'M.M',
296: 1:      'question': 'Mia Murphy',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'M.R',
296: 1:      'question': 'Mason Richardson',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'C.P',
296: 1:      'question': 'Charlotte Peterson',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'E.C',
296: 1:      'question': 'Elijah Cooper',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'A.C',
296: 1:      'question': 'Amelia Cox',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'A.G',
296: 1:      'question': 'Alexander Griffin',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'H.B',
296: 1:      'question': 'Harper Brooks',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'D.T',
296: 1:      'question': 'Daniel Turner',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'A.K',
296: 1:      'question': 'Abigail Kelly',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'H.P',
296: 1:      'question': 'Henry Price',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'E.R',
296: 1:      'question': 'Emily Ross',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'S.W',
296: 1:      'question': 'Samuel Ward',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'E.M',
296: 1:      'question': 'Elizabeth Morgan',
296: 1:      'valid': true
296: 1:    }
296: 1:  ],
296: 1:  'info': [
296: 1:    '✅f(Tom Harris) = T.H',
296: 1:    '✅f(garlick looney) = G.L',
296: 1:    '✅f(Ethan parker) = E.P',
296: 1:    '✅f(olivia Campbell) = O.C',
296: 1:    '✅f(Liam Jenkins) = L.J',
296: 1:    '✅f(Emma Bryant) = E.B',
296: 1:    '✅f(Noah Reed) = N.R',
296: 1:    '✅f(Ava Coleman) = A.C',
296: 1:    '✅f(William Barnes) = W.B',
296: 1:    '✅f(Sophia Mitchell) = S.M',
296: 1:    '✅f(James Hughes) = J.H',
296: 1:    '✅f(Isabella Foster) = I.F',
296: 1:    '✅f(Benjamin Evans) = B.E',
296: 1:    '✅f(Mia Murphy) = M.M',
296: 1:    '✅f(Mason Richardson) = M.R',
296: 1:    '✅f(Charlotte Peterson) = C.P',
296: 1:    '✅f(Elijah Cooper) = E.C',
296: 1:    '✅f(Amelia Cox) = A.C',
296: 1:    '✅f(Alexander Griffin) = A.G',
296: 1:    '✅f(Harper Brooks) = H.B',
296: 1:    '✅f(Daniel Turner) = D.T',
296: 1:    '✅f(Abigail Kelly) = A.K',
296: 1:    '✅f(Henry Price) = H.P',
296: 1:    '✅f(Emily Ross) = E.R',
296: 1:    '✅f(Samuel Ward) = S.W',
296: 1:    '✅f(Elizabeth Morgan) = E.M',
296: 1:    '❌f(Joseph Watson) = ??? != J.W'
296: 1:  ],
296: 1:  'level': 10,
296: 1:  'nextQuestion': 'Joseph Watson',
296: 1:  'questions': [
296: 1:    'Tom Harris',
296: 1:    'garlick looney',
296: 1:    'Ethan parker',
296: 1:    'olivia Campbell',
296: 1:    'Liam Jenkins',
296: 1:    'Emma Bryant',
296: 1:    'Noah Reed',
296: 1:    'Ava Coleman',
296: 1:    'William Barnes',
296: 1:    'Sophia Mitchell',
296: 1:    'James Hughes',
296: 1:    'Isabella Foster',
296: 1:    'Benjamin Evans',
296: 1:    'Mia Murphy',
296: 1:    'Mason Richardson',
296: 1:    'Charlotte Peterson',
296: 1:    'Elijah Cooper',
296: 1:    'Amelia Cox',
296: 1:    'Alexander Griffin',
296: 1:    'Harper Brooks',
296: 1:    'Daniel Turner',
296: 1:    'Abigail Kelly',
296: 1:    'Henry Price',
296: 1:    'Emily Ross',
296: 1:    'Samuel Ward',
296: 1:    'Elizabeth Morgan',
296: 1:    'Joseph Watson'
296: 1:  ]
296: 1:}
296: 1:Scores: 11739
296: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C', 'A.G', 'H.B', 'D.T', 'A.K', 'H.P', 'E.R', 'S.W', 'E.M', 'J.W']')
296: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
297: 1:BoardData {
297: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
297: 1:  'expectedAnswer': 'E.B',
297: 1:  'history': [
297: 1:    {
297: 1:      'answer': 'T.H',
297: 1:      'question': 'Tom Harris',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'G.L',
297: 1:      'question': 'garlick looney',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'E.P',
297: 1:      'question': 'Ethan parker',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'O.C',
297: 1:      'question': 'olivia Campbell',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'L.J',
297: 1:      'question': 'Liam Jenkins',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'E.B',
297: 1:      'question': 'Emma Bryant',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'N.R',
297: 1:      'question': 'Noah Reed',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'A.C',
297: 1:      'question': 'Ava Coleman',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'W.B',
297: 1:      'question': 'William Barnes',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'S.M',
297: 1:      'question': 'Sophia Mitchell',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'J.H',
297: 1:      'question': 'James Hughes',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'I.F',
297: 1:      'question': 'Isabella Foster',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'B.E',
297: 1:      'question': 'Benjamin Evans',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'M.M',
297: 1:      'question': 'Mia Murphy',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'M.R',
297: 1:      'question': 'Mason Richardson',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'C.P',
297: 1:      'question': 'Charlotte Peterson',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'E.C',
297: 1:      'question': 'Elijah Cooper',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'A.C',
297: 1:      'question': 'Amelia Cox',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'A.G',
297: 1:      'question': 'Alexander Griffin',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'H.B',
297: 1:      'question': 'Harper Brooks',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'D.T',
297: 1:      'question': 'Daniel Turner',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'A.K',
297: 1:      'question': 'Abigail Kelly',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'H.P',
297: 1:      'question': 'Henry Price',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'E.R',
297: 1:      'question': 'Emily Ross',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'S.W',
297: 1:      'question': 'Samuel Ward',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'E.M',
297: 1:      'question': 'Elizabeth Morgan',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'J.W',
297: 1:      'question': 'Joseph Watson',
297: 1:      'valid': true
297: 1:    }
297: 1:  ],
297: 1:  'info': [
297: 1:    '✅f(Tom Harris) = T.H',
297: 1:    '✅f(garlick looney) = G.L',
297: 1:    '✅f(Ethan parker) = E.P',
297: 1:    '✅f(olivia Campbell) = O.C',
297: 1:    '✅f(Liam Jenkins) = L.J',
297: 1:    '✅f(Emma Bryant) = E.B',
297: 1:    '✅f(Noah Reed) = N.R',
297: 1:    '✅f(Ava Coleman) = A.C',
297: 1:    '✅f(William Barnes) = W.B',
297: 1:    '✅f(Sophia Mitchell) = S.M',
297: 1:    '✅f(James Hughes) = J.H',
297: 1:    '✅f(Isabella Foster) = I.F',
297: 1:    '✅f(Benjamin Evans) = B.E',
297: 1:    '✅f(Mia Murphy) = M.M',
297: 1:    '✅f(Mason Richardson) = M.R',
297: 1:    '✅f(Charlotte Peterson) = C.P',
297: 1:    '✅f(Elijah Cooper) = E.C',
297: 1:    '✅f(Amelia Cox) = A.C',
297: 1:    '✅f(Alexander Griffin) = A.G',
297: 1:    '✅f(Harper Brooks) = H.B',
297: 1:    '✅f(Daniel Turner) = D.T',
297: 1:    '✅f(Abigail Kelly) = A.K',
297: 1:    '✅f(Henry Price) = H.P',
297: 1:    '✅f(Emily Ross) = E.R',
297: 1:    '✅f(Samuel Ward) = S.W',
297: 1:    '✅f(Elizabeth Morgan) = E.M',
297: 1:    '✅f(Joseph Watson) = J.W',
297: 1:    '❌f(Ella Bennett) = ??? != E.B'
297: 1:  ],
297: 1:  'level': 10,
297: 1:  'nextQuestion': 'Ella Bennett',
297: 1:  'questions': [
297: 1:    'Tom Harris',
297: 1:    'garlick looney',
297: 1:    'Ethan parker',
297: 1:    'olivia Campbell',
297: 1:    'Liam Jenkins',
297: 1:    'Emma Bryant',
297: 1:    'Noah Reed',
297: 1:    'Ava Coleman',
297: 1:    'William Barnes',
297: 1:    'Sophia Mitchell',
297: 1:    'James Hughes',
297: 1:    'Isabella Foster',
297: 1:    'Benjamin Evans',
297: 1:    'Mia Murphy',
297: 1:    'Mason Richardson',
297: 1:    'Charlotte Peterson',
297: 1:    'Elijah Cooper',
297: 1:    'Amelia Cox',
297: 1:    'Alexander Griffin',
297: 1:    'Harper Brooks',
297: 1:    'Daniel Turner',
297: 1:    'Abigail Kelly',
297: 1:    'Henry Price',
297: 1:    'Emily Ross',
297: 1:    'Samuel Ward',
297: 1:    'Elizabeth Morgan',
297: 1:    'Joseph Watson',
297: 1:    'Ella Bennett'
297: 1:  ]
297: 1:}
297: 1:Scores: 11743
297: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C', 'A.G', 'H.B', 'D.T', 'A.K', 'H.P', 'E.R', 'S.W', 'E.M', 'J.W', 'E.B']')
297: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
298: 1:BoardData {
298: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
298: 1:  'expectedAnswer': 'D.B',
298: 1:  'history': [
298: 1:    {
298: 1:      'answer': 'T.H',
298: 1:      'question': 'Tom Harris',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'G.L',
298: 1:      'question': 'garlick looney',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'E.P',
298: 1:      'question': 'Ethan parker',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'O.C',
298: 1:      'question': 'olivia Campbell',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'L.J',
298: 1:      'question': 'Liam Jenkins',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'E.B',
298: 1:      'question': 'Emma Bryant',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'N.R',
298: 1:      'question': 'Noah Reed',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'A.C',
298: 1:      'question': 'Ava Coleman',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'W.B',
298: 1:      'question': 'William Barnes',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'S.M',
298: 1:      'question': 'Sophia Mitchell',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'J.H',
298: 1:      'question': 'James Hughes',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'I.F',
298: 1:      'question': 'Isabella Foster',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'B.E',
298: 1:      'question': 'Benjamin Evans',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'M.M',
298: 1:      'question': 'Mia Murphy',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'M.R',
298: 1:      'question': 'Mason Richardson',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'C.P',
298: 1:      'question': 'Charlotte Peterson',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'E.C',
298: 1:      'question': 'Elijah Cooper',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'A.C',
298: 1:      'question': 'Amelia Cox',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'A.G',
298: 1:      'question': 'Alexander Griffin',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'H.B',
298: 1:      'question': 'Harper Brooks',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'D.T',
298: 1:      'question': 'Daniel Turner',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'A.K',
298: 1:      'question': 'Abigail Kelly',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'H.P',
298: 1:      'question': 'Henry Price',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'E.R',
298: 1:      'question': 'Emily Ross',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'S.W',
298: 1:      'question': 'Samuel Ward',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'E.M',
298: 1:      'question': 'Elizabeth Morgan',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'J.W',
298: 1:      'question': 'Joseph Watson',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'E.B',
298: 1:      'question': 'Ella Bennett',
298: 1:      'valid': true
298: 1:    }
298: 1:  ],
298: 1:  'info': [
298: 1:    '✅f(Tom Harris) = T.H',
298: 1:    '✅f(garlick looney) = G.L',
298: 1:    '✅f(Ethan parker) = E.P',
298: 1:    '✅f(olivia Campbell) = O.C',
298: 1:    '✅f(Liam Jenkins) = L.J',
298: 1:    '✅f(Emma Bryant) = E.B',
298: 1:    '✅f(Noah Reed) = N.R',
298: 1:    '✅f(Ava Coleman) = A.C',
298: 1:    '✅f(William Barnes) = W.B',
298: 1:    '✅f(Sophia Mitchell) = S.M',
298: 1:    '✅f(James Hughes) = J.H',
298: 1:    '✅f(Isabella Foster) = I.F',
298: 1:    '✅f(Benjamin Evans) = B.E',
298: 1:    '✅f(Mia Murphy) = M.M',
298: 1:    '✅f(Mason Richardson) = M.R',
298: 1:    '✅f(Charlotte Peterson) = C.P',
298: 1:    '✅f(Elijah Cooper) = E.C',
298: 1:    '✅f(Amelia Cox) = A.C',
298: 1:    '✅f(Alexander Griffin) = A.G',
298: 1:    '✅f(Harper Brooks) = H.B',
298: 1:    '✅f(Daniel Turner) = D.T',
298: 1:    '✅f(Abigail Kelly) = A.K',
298: 1:    '✅f(Henry Price) = H.P',
298: 1:    '✅f(Emily Ross) = E.R',
298: 1:    '✅f(Samuel Ward) = S.W',
298: 1:    '✅f(Elizabeth Morgan) = E.M',
298: 1:    '✅f(Joseph Watson) = J.W',
298: 1:    '✅f(Ella Bennett) = E.B',
298: 1:    '❌f(David Bailey) = ??? != D.B'
298: 1:  ],
298: 1:  'level': 10,
298: 1:  'nextQuestion': 'David Bailey',
298: 1:  'questions': [
298: 1:    'Tom Harris',
298: 1:    'garlick looney',
298: 1:    'Ethan parker',
298: 1:    'olivia Campbell',
298: 1:    'Liam Jenkins',
298: 1:    'Emma Bryant',
298: 1:    'Noah Reed',
298: 1:    'Ava Coleman',
298: 1:    'William Barnes',
298: 1:    'Sophia Mitchell',
298: 1:    'James Hughes',
298: 1:    'Isabella Foster',
298: 1:    'Benjamin Evans',
298: 1:    'Mia Murphy',
298: 1:    'Mason Richardson',
298: 1:    'Charlotte Peterson',
298: 1:    'Elijah Cooper',
298: 1:    'Amelia Cox',
298: 1:    'Alexander Griffin',
298: 1:    'Harper Brooks',
298: 1:    'Daniel Turner',
298: 1:    'Abigail Kelly',
298: 1:    'Henry Price',
298: 1:    'Emily Ross',
298: 1:    'Samuel Ward',
298: 1:    'Elizabeth Morgan',
298: 1:    'Joseph Watson',
298: 1:    'Ella Bennett',
298: 1:    'David Bailey'
298: 1:  ]
298: 1:}
298: 1:Scores: 11747
298: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C', 'A.G', 'H.B', 'D.T', 'A.K', 'H.P', 'E.R', 'S.W', 'E.M', 'J.W', 'E.B', 'D.B']')
298: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
299: 1:BoardData {
299: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
299: 1:  'expectedAnswer': 'A.H',
299: 1:  'history': [
299: 1:    {
299: 1:      'answer': 'T.H',
299: 1:      'question': 'Tom Harris',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'G.L',
299: 1:      'question': 'garlick looney',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'E.P',
299: 1:      'question': 'Ethan parker',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'O.C',
299: 1:      'question': 'olivia Campbell',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'L.J',
299: 1:      'question': 'Liam Jenkins',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'E.B',
299: 1:      'question': 'Emma Bryant',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'N.R',
299: 1:      'question': 'Noah Reed',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'A.C',
299: 1:      'question': 'Ava Coleman',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'W.B',
299: 1:      'question': 'William Barnes',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'S.M',
299: 1:      'question': 'Sophia Mitchell',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'J.H',
299: 1:      'question': 'James Hughes',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'I.F',
299: 1:      'question': 'Isabella Foster',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'B.E',
299: 1:      'question': 'Benjamin Evans',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'M.M',
299: 1:      'question': 'Mia Murphy',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'M.R',
299: 1:      'question': 'Mason Richardson',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'C.P',
299: 1:      'question': 'Charlotte Peterson',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'E.C',
299: 1:      'question': 'Elijah Cooper',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'A.C',
299: 1:      'question': 'Amelia Cox',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'A.G',
299: 1:      'question': 'Alexander Griffin',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'H.B',
299: 1:      'question': 'Harper Brooks',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'D.T',
299: 1:      'question': 'Daniel Turner',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'A.K',
299: 1:      'question': 'Abigail Kelly',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'H.P',
299: 1:      'question': 'Henry Price',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'E.R',
299: 1:      'question': 'Emily Ross',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'S.W',
299: 1:      'question': 'Samuel Ward',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'E.M',
299: 1:      'question': 'Elizabeth Morgan',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'J.W',
299: 1:      'question': 'Joseph Watson',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'E.B',
299: 1:      'question': 'Ella Bennett',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'D.B',
299: 1:      'question': 'David Bailey',
299: 1:      'valid': true
299: 1:    }
299: 1:  ],
299: 1:  'info': [
299: 1:    '✅f(Tom Harris) = T.H',
299: 1:    '✅f(garlick looney) = G.L',
299: 1:    '✅f(Ethan parker) = E.P',
299: 1:    '✅f(olivia Campbell) = O.C',
299: 1:    '✅f(Liam Jenkins) = L.J',
299: 1:    '✅f(Emma Bryant) = E.B',
299: 1:    '✅f(Noah Reed) = N.R',
299: 1:    '✅f(Ava Coleman) = A.C',
299: 1:    '✅f(William Barnes) = W.B',
299: 1:    '✅f(Sophia Mitchell) = S.M',
299: 1:    '✅f(James Hughes) = J.H',
299: 1:    '✅f(Isabella Foster) = I.F',
299: 1:    '✅f(Benjamin Evans) = B.E',
299: 1:    '✅f(Mia Murphy) = M.M',
299: 1:    '✅f(Mason Richardson) = M.R',
299: 1:    '✅f(Charlotte Peterson) = C.P',
299: 1:    '✅f(Elijah Cooper) = E.C',
299: 1:    '✅f(Amelia Cox) = A.C',
299: 1:    '✅f(Alexander Griffin) = A.G',
299: 1:    '✅f(Harper Brooks) = H.B',
299: 1:    '✅f(Daniel Turner) = D.T',
299: 1:    '✅f(Abigail Kelly) = A.K',
299: 1:    '✅f(Henry Price) = H.P',
299: 1:    '✅f(Emily Ross) = E.R',
299: 1:    '✅f(Samuel Ward) = S.W',
299: 1:    '✅f(Elizabeth Morgan) = E.M',
299: 1:    '✅f(Joseph Watson) = J.W',
299: 1:    '✅f(Ella Bennett) = E.B',
299: 1:    '✅f(David Bailey) = D.B',
299: 1:    '❌f(Avery Howard) = ??? != A.H'
299: 1:  ],
299: 1:  'level': 10,
299: 1:  'nextQuestion': 'Avery Howard',
299: 1:  'questions': [
299: 1:    'Tom Harris',
299: 1:    'garlick looney',
299: 1:    'Ethan parker',
299: 1:    'olivia Campbell',
299: 1:    'Liam Jenkins',
299: 1:    'Emma Bryant',
299: 1:    'Noah Reed',
299: 1:    'Ava Coleman',
299: 1:    'William Barnes',
299: 1:    'Sophia Mitchell',
299: 1:    'James Hughes',
299: 1:    'Isabella Foster',
299: 1:    'Benjamin Evans',
299: 1:    'Mia Murphy',
299: 1:    'Mason Richardson',
299: 1:    'Charlotte Peterson',
299: 1:    'Elijah Cooper',
299: 1:    'Amelia Cox',
299: 1:    'Alexander Griffin',
299: 1:    'Harper Brooks',
299: 1:    'Daniel Turner',
299: 1:    'Abigail Kelly',
299: 1:    'Henry Price',
299: 1:    'Emily Ross',
299: 1:    'Samuel Ward',
299: 1:    'Elizabeth Morgan',
299: 1:    'Joseph Watson',
299: 1:    'Ella Bennett',
299: 1:    'David Bailey',
299: 1:    'Avery Howard'
299: 1:  ]
299: 1:}
299: 1:Scores: 11751
299: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C', 'A.G', 'H.B', 'D.T', 'A.K', 'H.P', 'E.R', 'S.W', 'E.M', 'J.W', 'E.B', 'D.B', 'A.H']')
299: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
300: 1:BoardData {
300: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
300: 1:  'expectedAnswer': 'M.N',
300: 1:  'history': [
300: 1:    {
300: 1:      'answer': 'T.H',
300: 1:      'question': 'Tom Harris',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'G.L',
300: 1:      'question': 'garlick looney',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'E.P',
300: 1:      'question': 'Ethan parker',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'O.C',
300: 1:      'question': 'olivia Campbell',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'L.J',
300: 1:      'question': 'Liam Jenkins',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'E.B',
300: 1:      'question': 'Emma Bryant',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'N.R',
300: 1:      'question': 'Noah Reed',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'A.C',
300: 1:      'question': 'Ava Coleman',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'W.B',
300: 1:      'question': 'William Barnes',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'S.M',
300: 1:      'question': 'Sophia Mitchell',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'J.H',
300: 1:      'question': 'James Hughes',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'I.F',
300: 1:      'question': 'Isabella Foster',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'B.E',
300: 1:      'question': 'Benjamin Evans',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'M.M',
300: 1:      'question': 'Mia Murphy',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'M.R',
300: 1:      'question': 'Mason Richardson',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'C.P',
300: 1:      'question': 'Charlotte Peterson',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'E.C',
300: 1:      'question': 'Elijah Cooper',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'A.C',
300: 1:      'question': 'Amelia Cox',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'A.G',
300: 1:      'question': 'Alexander Griffin',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'H.B',
300: 1:      'question': 'Harper Brooks',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'D.T',
300: 1:      'question': 'Daniel Turner',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'A.K',
300: 1:      'question': 'Abigail Kelly',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'H.P',
300: 1:      'question': 'Henry Price',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'E.R',
300: 1:      'question': 'Emily Ross',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'S.W',
300: 1:      'question': 'Samuel Ward',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'E.M',
300: 1:      'question': 'Elizabeth Morgan',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'J.W',
300: 1:      'question': 'Joseph Watson',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'E.B',
300: 1:      'question': 'Ella Bennett',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'D.B',
300: 1:      'question': 'David Bailey',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'A.H',
300: 1:      'question': 'Avery Howard',
300: 1:      'valid': true
300: 1:    }
300: 1:  ],
300: 1:  'info': [
300: 1:    '✅f(Tom Harris) = T.H',
300: 1:    '✅f(garlick looney) = G.L',
300: 1:    '✅f(Ethan parker) = E.P',
300: 1:    '✅f(olivia Campbell) = O.C',
300: 1:    '✅f(Liam Jenkins) = L.J',
300: 1:    '✅f(Emma Bryant) = E.B',
300: 1:    '✅f(Noah Reed) = N.R',
300: 1:    '✅f(Ava Coleman) = A.C',
300: 1:    '✅f(William Barnes) = W.B',
300: 1:    '✅f(Sophia Mitchell) = S.M',
300: 1:    '✅f(James Hughes) = J.H',
300: 1:    '✅f(Isabella Foster) = I.F',
300: 1:    '✅f(Benjamin Evans) = B.E',
300: 1:    '✅f(Mia Murphy) = M.M',
300: 1:    '✅f(Mason Richardson) = M.R',
300: 1:    '✅f(Charlotte Peterson) = C.P',
300: 1:    '✅f(Elijah Cooper) = E.C',
300: 1:    '✅f(Amelia Cox) = A.C',
300: 1:    '✅f(Alexander Griffin) = A.G',
300: 1:    '✅f(Harper Brooks) = H.B',
300: 1:    '✅f(Daniel Turner) = D.T',
300: 1:    '✅f(Abigail Kelly) = A.K',
300: 1:    '✅f(Henry Price) = H.P',
300: 1:    '✅f(Emily Ross) = E.R',
300: 1:    '✅f(Samuel Ward) = S.W',
300: 1:    '✅f(Elizabeth Morgan) = E.M',
300: 1:    '✅f(Joseph Watson) = J.W',
300: 1:    '✅f(Ella Bennett) = E.B',
300: 1:    '✅f(David Bailey) = D.B',
300: 1:    '✅f(Avery Howard) = A.H',
300: 1:    '❌f(Michael Nelson) = ??? != M.N'
300: 1:  ],
300: 1:  'level': 10,
300: 1:  'nextQuestion': 'Michael Nelson',
300: 1:  'questions': [
300: 1:    'Tom Harris',
300: 1:    'garlick looney',
300: 1:    'Ethan parker',
300: 1:    'olivia Campbell',
300: 1:    'Liam Jenkins',
300: 1:    'Emma Bryant',
300: 1:    'Noah Reed',
300: 1:    'Ava Coleman',
300: 1:    'William Barnes',
300: 1:    'Sophia Mitchell',
300: 1:    'James Hughes',
300: 1:    'Isabella Foster',
300: 1:    'Benjamin Evans',
300: 1:    'Mia Murphy',
300: 1:    'Mason Richardson',
300: 1:    'Charlotte Peterson',
300: 1:    'Elijah Cooper',
300: 1:    'Amelia Cox',
300: 1:    'Alexander Griffin',
300: 1:    'Harper Brooks',
300: 1:    'Daniel Turner',
300: 1:    'Abigail Kelly',
300: 1:    'Henry Price',
300: 1:    'Emily Ross',
300: 1:    'Samuel Ward',
300: 1:    'Elizabeth Morgan',
300: 1:    'Joseph Watson',
300: 1:    'Ella Bennett',
300: 1:    'David Bailey',
300: 1:    'Avery Howard',
300: 1:    'Michael Nelson'
300: 1:  ]
300: 1:}
300: 1:Scores: 11755
300: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C', 'A.G', 'H.B', 'D.T', 'A.K', 'H.P', 'E.R', 'S.W', 'E.M', 'J.W', 'E.B', 'D.B', 'A.H', 'M.N']')
300: 1:Fire Event: PassTest{complexity=14, testCount=32}
------------------------------------------
301: 1:BoardData {
301: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
301: 1:  'expectedAnswer': 'L.A',
301: 1:  'history': [
301: 1:    {
301: 1:      'answer': 'T.H',
301: 1:      'question': 'Tom Harris',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'G.L',
301: 1:      'question': 'garlick looney',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'E.P',
301: 1:      'question': 'Ethan parker',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'O.C',
301: 1:      'question': 'olivia Campbell',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'L.J',
301: 1:      'question': 'Liam Jenkins',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'E.B',
301: 1:      'question': 'Emma Bryant',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'N.R',
301: 1:      'question': 'Noah Reed',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'A.C',
301: 1:      'question': 'Ava Coleman',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'W.B',
301: 1:      'question': 'William Barnes',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'S.M',
301: 1:      'question': 'Sophia Mitchell',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'J.H',
301: 1:      'question': 'James Hughes',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'I.F',
301: 1:      'question': 'Isabella Foster',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'B.E',
301: 1:      'question': 'Benjamin Evans',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'M.M',
301: 1:      'question': 'Mia Murphy',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'M.R',
301: 1:      'question': 'Mason Richardson',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'C.P',
301: 1:      'question': 'Charlotte Peterson',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'E.C',
301: 1:      'question': 'Elijah Cooper',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'A.C',
301: 1:      'question': 'Amelia Cox',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'A.G',
301: 1:      'question': 'Alexander Griffin',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'H.B',
301: 1:      'question': 'Harper Brooks',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'D.T',
301: 1:      'question': 'Daniel Turner',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'A.K',
301: 1:      'question': 'Abigail Kelly',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'H.P',
301: 1:      'question': 'Henry Price',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'E.R',
301: 1:      'question': 'Emily Ross',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'S.W',
301: 1:      'question': 'Samuel Ward',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'E.M',
301: 1:      'question': 'Elizabeth Morgan',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'J.W',
301: 1:      'question': 'Joseph Watson',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'E.B',
301: 1:      'question': 'Ella Bennett',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'D.B',
301: 1:      'question': 'David Bailey',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'A.H',
301: 1:      'question': 'Avery Howard',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'M.N',
301: 1:      'question': 'Michael Nelson',
301: 1:      'valid': true
301: 1:    }
301: 1:  ],
301: 1:  'info': [
301: 1:    '✅f(Tom Harris) = T.H',
301: 1:    '✅f(garlick looney) = G.L',
301: 1:    '✅f(Ethan parker) = E.P',
301: 1:    '✅f(olivia Campbell) = O.C',
301: 1:    '✅f(Liam Jenkins) = L.J',
301: 1:    '✅f(Emma Bryant) = E.B',
301: 1:    '✅f(Noah Reed) = N.R',
301: 1:    '✅f(Ava Coleman) = A.C',
301: 1:    '✅f(William Barnes) = W.B',
301: 1:    '✅f(Sophia Mitchell) = S.M',
301: 1:    '✅f(James Hughes) = J.H',
301: 1:    '✅f(Isabella Foster) = I.F',
301: 1:    '✅f(Benjamin Evans) = B.E',
301: 1:    '✅f(Mia Murphy) = M.M',
301: 1:    '✅f(Mason Richardson) = M.R',
301: 1:    '✅f(Charlotte Peterson) = C.P',
301: 1:    '✅f(Elijah Cooper) = E.C',
301: 1:    '✅f(Amelia Cox) = A.C',
301: 1:    '✅f(Alexander Griffin) = A.G',
301: 1:    '✅f(Harper Brooks) = H.B',
301: 1:    '✅f(Daniel Turner) = D.T',
301: 1:    '✅f(Abigail Kelly) = A.K',
301: 1:    '✅f(Henry Price) = H.P',
301: 1:    '✅f(Emily Ross) = E.R',
301: 1:    '✅f(Samuel Ward) = S.W',
301: 1:    '✅f(Elizabeth Morgan) = E.M',
301: 1:    '✅f(Joseph Watson) = J.W',
301: 1:    '✅f(Ella Bennett) = E.B',
301: 1:    '✅f(David Bailey) = D.B',
301: 1:    '✅f(Avery Howard) = A.H',
301: 1:    '✅f(Michael Nelson) = M.N',
301: 1:    '❌f(Lily Anderson) = ??? != L.A'
301: 1:  ],
301: 1:  'level': 10,
301: 1:  'nextQuestion': 'Lily Anderson',
301: 1:  'questions': [
301: 1:    'Tom Harris',
301: 1:    'garlick looney',
301: 1:    'Ethan parker',
301: 1:    'olivia Campbell',
301: 1:    'Liam Jenkins',
301: 1:    'Emma Bryant',
301: 1:    'Noah Reed',
301: 1:    'Ava Coleman',
301: 1:    'William Barnes',
301: 1:    'Sophia Mitchell',
301: 1:    'James Hughes',
301: 1:    'Isabella Foster',
301: 1:    'Benjamin Evans',
301: 1:    'Mia Murphy',
301: 1:    'Mason Richardson',
301: 1:    'Charlotte Peterson',
301: 1:    'Elijah Cooper',
301: 1:    'Amelia Cox',
301: 1:    'Alexander Griffin',
301: 1:    'Harper Brooks',
301: 1:    'Daniel Turner',
301: 1:    'Abigail Kelly',
301: 1:    'Henry Price',
301: 1:    'Emily Ross',
301: 1:    'Samuel Ward',
301: 1:    'Elizabeth Morgan',
301: 1:    'Joseph Watson',
301: 1:    'Ella Bennett',
301: 1:    'David Bailey',
301: 1:    'Avery Howard',
301: 1:    'Michael Nelson',
301: 1:    'Lily Anderson'
301: 1:  ]
301: 1:}
301: 1:Scores: 11759
301: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C', 'A.G', 'H.B', 'D.T', 'A.K', 'H.P', 'E.R', 'S.W', 'E.M', 'J.W', 'E.B', 'D.B', 'A.H', 'M.N', 'L.A']')
301: 1:Fire Event: PassTest{complexity=14, testCount=32}
301: 1:Fire Event: NextAlgorithm{complexity=14, time=0}
------------------------------------------
302: 1:BoardData {
302: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
302: 1:  'history': [
302: 1:    {
302: 1:      'answer': 'T.H',
302: 1:      'question': 'Tom Harris',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'G.L',
302: 1:      'question': 'garlick looney',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'E.P',
302: 1:      'question': 'Ethan parker',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'O.C',
302: 1:      'question': 'olivia Campbell',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'L.J',
302: 1:      'question': 'Liam Jenkins',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'E.B',
302: 1:      'question': 'Emma Bryant',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'N.R',
302: 1:      'question': 'Noah Reed',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'A.C',
302: 1:      'question': 'Ava Coleman',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'W.B',
302: 1:      'question': 'William Barnes',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'S.M',
302: 1:      'question': 'Sophia Mitchell',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'J.H',
302: 1:      'question': 'James Hughes',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'I.F',
302: 1:      'question': 'Isabella Foster',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'B.E',
302: 1:      'question': 'Benjamin Evans',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'M.M',
302: 1:      'question': 'Mia Murphy',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'M.R',
302: 1:      'question': 'Mason Richardson',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'C.P',
302: 1:      'question': 'Charlotte Peterson',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'E.C',
302: 1:      'question': 'Elijah Cooper',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'A.C',
302: 1:      'question': 'Amelia Cox',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'A.G',
302: 1:      'question': 'Alexander Griffin',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'H.B',
302: 1:      'question': 'Harper Brooks',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'D.T',
302: 1:      'question': 'Daniel Turner',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'A.K',
302: 1:      'question': 'Abigail Kelly',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'H.P',
302: 1:      'question': 'Henry Price',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'E.R',
302: 1:      'question': 'Emily Ross',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'S.W',
302: 1:      'question': 'Samuel Ward',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'E.M',
302: 1:      'question': 'Elizabeth Morgan',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'J.W',
302: 1:      'question': 'Joseph Watson',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'E.B',
302: 1:      'question': 'Ella Bennett',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'D.B',
302: 1:      'question': 'David Bailey',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'A.H',
302: 1:      'question': 'Avery Howard',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'M.N',
302: 1:      'question': 'Michael Nelson',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'L.A',
302: 1:      'question': 'Lily Anderson',
302: 1:      'valid': true
302: 1:    }
302: 1:  ],
302: 1:  'info': [
302: 1:    '✅f(Tom Harris) = T.H',
302: 1:    '✅f(garlick looney) = G.L',
302: 1:    '✅f(Ethan parker) = E.P',
302: 1:    '✅f(olivia Campbell) = O.C',
302: 1:    '✅f(Liam Jenkins) = L.J',
302: 1:    '✅f(Emma Bryant) = E.B',
302: 1:    '✅f(Noah Reed) = N.R',
302: 1:    '✅f(Ava Coleman) = A.C',
302: 1:    '✅f(William Barnes) = W.B',
302: 1:    '✅f(Sophia Mitchell) = S.M',
302: 1:    '✅f(James Hughes) = J.H',
302: 1:    '✅f(Isabella Foster) = I.F',
302: 1:    '✅f(Benjamin Evans) = B.E',
302: 1:    '✅f(Mia Murphy) = M.M',
302: 1:    '✅f(Mason Richardson) = M.R',
302: 1:    '✅f(Charlotte Peterson) = C.P',
302: 1:    '✅f(Elijah Cooper) = E.C',
302: 1:    '✅f(Amelia Cox) = A.C',
302: 1:    '✅f(Alexander Griffin) = A.G',
302: 1:    '✅f(Harper Brooks) = H.B',
302: 1:    '✅f(Daniel Turner) = D.T',
302: 1:    '✅f(Abigail Kelly) = A.K',
302: 1:    '✅f(Henry Price) = H.P',
302: 1:    '✅f(Emily Ross) = E.R',
302: 1:    '✅f(Samuel Ward) = S.W',
302: 1:    '✅f(Elizabeth Morgan) = E.M',
302: 1:    '✅f(Joseph Watson) = J.W',
302: 1:    '✅f(Ella Bennett) = E.B',
302: 1:    '✅f(David Bailey) = D.B',
302: 1:    '✅f(Avery Howard) = A.H',
302: 1:    '✅f(Michael Nelson) = M.N',
302: 1:    '✅f(Lily Anderson) = L.A'
302: 1:  ],
302: 1:  'level': 10,
302: 1:  'questions': []
302: 1:}
302: 1:Scores: 13652
302: 1:Answer: message('StartNextLevel')
302: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
303: 1:BoardData {
303: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
303: 1:  'expectedAnswer': '149',
303: 1:  'history': [],
303: 1:  'info': ['❌f(123) = ??? != 149'],
303: 1:  'level': 11,
303: 1:  'nextQuestion': '123',
303: 1:  'questions': ['123']
303: 1:}
303: 1:Scores: 13652
303: 1:Answer: message('['149']')
303: 1:Fire Event: PassTest{complexity=15, testCount=28}
------------------------------------------
304: 1:BoardData {
304: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
304: 1:  'expectedAnswer': '163625',
304: 1:  'history': [{
304: 1:    'answer': '149',
304: 1:    'question': '123',
304: 1:    'valid': true
304: 1:  }],
304: 1:  'info': [
304: 1:    '✅f(123) = 149',
304: 1:    '❌f(465) = ??? != 163625'
304: 1:  ],
304: 1:  'level': 11,
304: 1:  'nextQuestion': '465',
304: 1:  'questions': [
304: 1:    '123',
304: 1:    '465'
304: 1:  ]
304: 1:}
304: 1:Scores: 13657
304: 1:Answer: message('['149', '163625']')
304: 1:Fire Event: PassTest{complexity=15, testCount=28}
------------------------------------------
305: 1:BoardData {
305: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
305: 1:  'expectedAnswer': '0',
305: 1:  'history': [
305: 1:    {
305: 1:      'answer': '149',
305: 1:      'question': '123',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': '163625',
305: 1:      'question': '465',
305: 1:      'valid': true
305: 1:    }
305: 1:  ],
305: 1:  'info': [
305: 1:    '✅f(123) = 149',
305: 1:    '✅f(465) = 163625',
305: 1:    '❌f(0) = ??? != 0'
305: 1:  ],
305: 1:  'level': 11,
305: 1:  'nextQuestion': '0',
305: 1:  'questions': [
305: 1:    '123',
305: 1:    '465',
305: 1:    '0'
305: 1:  ]
305: 1:}
305: 1:Scores: 13662
305: 1:Answer: message('['149', '163625', '0']')
305: 1:Fire Event: PassTest{complexity=15, testCount=28}
------------------------------------------
306: 1:BoardData {
306: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
306: 1:  'expectedAnswer': '256419',
306: 1:  'history': [
306: 1:    {
306: 1:      'answer': '149',
306: 1:      'question': '123',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': '163625',
306: 1:      'question': '465',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': '0',
306: 1:      'question': '0',
306: 1:      'valid': true
306: 1:    }
306: 1:  ],
306: 1:  'info': [
306: 1:    '✅f(123) = 149',
306: 1:    '✅f(465) = 163625',
306: 1:    '✅f(0) = 0',
306: 1:    '❌f(5813) = ??? != 256419'
306: 1:  ],
306: 1:  'level': 11,
306: 1:  'nextQuestion': '5813',
306: 1:  'questions': [
306: 1:    '123',
306: 1:    '465',
306: 1:    '0',
306: 1:    '5813'
306: 1:  ]
306: 1:}
306: 1:Scores: 13667
306: 1:Answer: message('['149', '163625', '0', '256419']')
306: 1:Fire Event: PassTest{complexity=15, testCount=28}
------------------------------------------
307: 1:BoardData {
307: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
307: 1:  'expectedAnswer': '4943616',
307: 1:  'history': [
307: 1:    {
307: 1:      'answer': '149',
307: 1:      'question': '123',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': '163625',
307: 1:      'question': '465',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': '0',
307: 1:      'question': '0',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': '256419',
307: 1:      'question': '5813',
307: 1:      'valid': true
307: 1:    }
307: 1:  ],
307: 1:  'info': [
307: 1:    '✅f(123) = 149',
307: 1:    '✅f(465) = 163625',
307: 1:    '✅f(0) = 0',
307: 1:    '✅f(5813) = 256419',
307: 1:    '❌f(7264) = ??? != 4943616'
307: 1:  ],
307: 1:  'level': 11,
307: 1:  'nextQuestion': '7264',
307: 1:  'questions': [
307: 1:    '123',
307: 1:    '465',
307: 1:    '0',
307: 1:    '5813',
307: 1:    '7264'
307: 1:  ]
307: 1:}
307: 1:Scores: 13672
307: 1:Answer: message('['149', '163625', '0', '256419', '4943616']')
307: 1:Fire Event: PassTest{complexity=15, testCount=28}
------------------------------------------
308: 1:BoardData {
308: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
308: 1:  'expectedAnswer': '193681',
308: 1:  'history': [
308: 1:    {
308: 1:      'answer': '149',
308: 1:      'question': '123',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': '163625',
308: 1:      'question': '465',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': '0',
308: 1:      'question': '0',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': '256419',
308: 1:      'question': '5813',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': '4943616',
308: 1:      'question': '7264',
308: 1:      'valid': true
308: 1:    }
308: 1:  ],
308: 1:  'info': [
308: 1:    '✅f(123) = 149',
308: 1:    '✅f(465) = 163625',
308: 1:    '✅f(0) = 0',
308: 1:    '✅f(5813) = 256419',
308: 1:    '✅f(7264) = 4943616',
308: 1:    '❌f(1369) = ??? != 193681'
308: 1:  ],
308: 1:  'level': 11,
308: 1:  'nextQuestion': '1369',
308: 1:  'questions': [
308: 1:    '123',
308: 1:    '465',
308: 1:    '0',
308: 1:    '5813',
308: 1:    '7264',
308: 1:    '1369'
308: 1:  ]
308: 1:}
308: 1:Scores: 13677
308: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681']')
308: 1:Fire Event: PassTest{complexity=15, testCount=28}
------------------------------------------
309: 1:BoardData {
309: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
309: 1:  'expectedAnswer': '4981254',
309: 1:  'history': [
309: 1:    {
309: 1:      'answer': '149',
309: 1:      'question': '123',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': '163625',
309: 1:      'question': '465',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': '0',
309: 1:      'question': '0',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': '256419',
309: 1:      'question': '5813',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': '4943616',
309: 1:      'question': '7264',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': '193681',
309: 1:      'question': '1369',
309: 1:      'valid': true
309: 1:    }
309: 1:  ],
309: 1:  'info': [
309: 1:    '✅f(123) = 149',
309: 1:    '✅f(465) = 163625',
309: 1:    '✅f(0) = 0',
309: 1:    '✅f(5813) = 256419',
309: 1:    '✅f(7264) = 4943616',
309: 1:    '✅f(1369) = 193681',
309: 1:    '❌f(7952) = ??? != 4981254'
309: 1:  ],
309: 1:  'level': 11,
309: 1:  'nextQuestion': '7952',
309: 1:  'questions': [
309: 1:    '123',
309: 1:    '465',
309: 1:    '0',
309: 1:    '5813',
309: 1:    '7264',
309: 1:    '1369',
309: 1:    '7952'
309: 1:  ]
309: 1:}
309: 1:Scores: 13682
309: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254']')
309: 1:Fire Event: PassTest{complexity=15, testCount=28}
------------------------------------------
310: 1:BoardData {
310: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
310: 1:  'expectedAnswer': '8116425',
310: 1:  'history': [
310: 1:    {
310: 1:      'answer': '149',
310: 1:      'question': '123',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': '163625',
310: 1:      'question': '465',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': '0',
310: 1:      'question': '0',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': '256419',
310: 1:      'question': '5813',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': '4943616',
310: 1:      'question': '7264',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': '193681',
310: 1:      'question': '1369',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': '4981254',
310: 1:      'question': '7952',
310: 1:      'valid': true
310: 1:    }
310: 1:  ],
310: 1:  'info': [
310: 1:    '✅f(123) = 149',
310: 1:    '✅f(465) = 163625',
310: 1:    '✅f(0) = 0',
310: 1:    '✅f(5813) = 256419',
310: 1:    '✅f(7264) = 4943616',
310: 1:    '✅f(1369) = 193681',
310: 1:    '✅f(7952) = 4981254',
310: 1:    '❌f(9425) = ??? != 8116425'
310: 1:  ],
310: 1:  'level': 11,
310: 1:  'nextQuestion': '9425',
310: 1:  'questions': [
310: 1:    '123',
310: 1:    '465',
310: 1:    '0',
310: 1:    '5813',
310: 1:    '7264',
310: 1:    '1369',
310: 1:    '7952',
310: 1:    '9425'
310: 1:  ]
310: 1:}
310: 1:Scores: 13687
310: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425']')
310: 1:Fire Event: PassTest{complexity=15, testCount=28}
------------------------------------------
311: 1:BoardData {
311: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
311: 1:  'expectedAnswer': '16492581',
311: 1:  'history': [
311: 1:    {
311: 1:      'answer': '149',
311: 1:      'question': '123',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': '163625',
311: 1:      'question': '465',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': '0',
311: 1:      'question': '0',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': '256419',
311: 1:      'question': '5813',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': '4943616',
311: 1:      'question': '7264',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': '193681',
311: 1:      'question': '1369',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': '4981254',
311: 1:      'question': '7952',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': '8116425',
311: 1:      'question': '9425',
311: 1:      'valid': true
311: 1:    }
311: 1:  ],
311: 1:  'info': [
311: 1:    '✅f(123) = 149',
311: 1:    '✅f(465) = 163625',
311: 1:    '✅f(0) = 0',
311: 1:    '✅f(5813) = 256419',
311: 1:    '✅f(7264) = 4943616',
311: 1:    '✅f(1369) = 193681',
311: 1:    '✅f(7952) = 4981254',
311: 1:    '✅f(9425) = 8116425',
311: 1:    '❌f(4759) = ??? != 16492581'
311: 1:  ],
311: 1:  'level': 11,
311: 1:  'nextQuestion': '4759',
311: 1:  'questions': [
311: 1:    '123',
311: 1:    '465',
311: 1:    '0',
311: 1:    '5813',
311: 1:    '7264',
311: 1:    '1369',
311: 1:    '7952',
311: 1:    '9425',
311: 1:    '4759'
311: 1:  ]
311: 1:}
311: 1:Scores: 13692
311: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581']')
311: 1:Fire Event: PassTest{complexity=15, testCount=28}
------------------------------------------
312: 1:BoardData {
312: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
312: 1:  'expectedAnswer': '16494949',
312: 1:  'history': [
312: 1:    {
312: 1:      'answer': '149',
312: 1:      'question': '123',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '163625',
312: 1:      'question': '465',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '0',
312: 1:      'question': '0',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '256419',
312: 1:      'question': '5813',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '4943616',
312: 1:      'question': '7264',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '193681',
312: 1:      'question': '1369',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '4981254',
312: 1:      'question': '7952',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '8116425',
312: 1:      'question': '9425',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': '16492581',
312: 1:      'question': '4759',
312: 1:      'valid': true
312: 1:    }
312: 1:  ],
312: 1:  'info': [
312: 1:    '✅f(123) = 149',
312: 1:    '✅f(465) = 163625',
312: 1:    '✅f(0) = 0',
312: 1:    '✅f(5813) = 256419',
312: 1:    '✅f(7264) = 4943616',
312: 1:    '✅f(1369) = 193681',
312: 1:    '✅f(7952) = 4981254',
312: 1:    '✅f(9425) = 8116425',
312: 1:    '✅f(4759) = 16492581',
312: 1:    '❌f(4777) = ??? != 16494949'
312: 1:  ],
312: 1:  'level': 11,
312: 1:  'nextQuestion': '4777',
312: 1:  'questions': [
312: 1:    '123',
312: 1:    '465',
312: 1:    '0',
312: 1:    '5813',
312: 1:    '7264',
312: 1:    '1369',
312: 1:    '7952',
312: 1:    '9425',
312: 1:    '4759',
312: 1:    '4777'
312: 1:  ]
312: 1:}
312: 1:Scores: 13697
312: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949']')
312: 1:Fire Event: PassTest{complexity=15, testCount=28}
------------------------------------------
313: 1:BoardData {
313: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
313: 1:  'expectedAnswer': '40160',
313: 1:  'history': [
313: 1:    {
313: 1:      'answer': '149',
313: 1:      'question': '123',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '163625',
313: 1:      'question': '465',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '0',
313: 1:      'question': '0',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '256419',
313: 1:      'question': '5813',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '4943616',
313: 1:      'question': '7264',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '193681',
313: 1:      'question': '1369',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '4981254',
313: 1:      'question': '7952',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '8116425',
313: 1:      'question': '9425',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '16492581',
313: 1:      'question': '4759',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': '16494949',
313: 1:      'question': '4777',
313: 1:      'valid': true
313: 1:    }
313: 1:  ],
313: 1:  'info': [
313: 1:    '✅f(123) = 149',
313: 1:    '✅f(465) = 163625',
313: 1:    '✅f(0) = 0',
313: 1:    '✅f(5813) = 256419',
313: 1:    '✅f(7264) = 4943616',
313: 1:    '✅f(1369) = 193681',
313: 1:    '✅f(7952) = 4981254',
313: 1:    '✅f(9425) = 8116425',
313: 1:    '✅f(4759) = 16492581',
313: 1:    '✅f(4777) = 16494949',
313: 1:    '❌f(2040) = ??? != 40160'
313: 1:  ],
313: 1:  'level': 11,
313: 1:  'nextQuestion': '2040',
313: 1:  'questions': [
313: 1:    '123',
313: 1:    '465',
313: 1:    '0',
313: 1:    '5813',
313: 1:    '7264',
313: 1:    '1369',
313: 1:    '7952',
313: 1:    '9425',
313: 1:    '4759',
313: 1:    '4777',
313: 1:    '2040'
313: 1:  ]
313: 1:}
313: 1:Scores: 13702
313: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160']')
313: 1:Fire Event: PassTest{complexity=15, testCount=28}
------------------------------------------
314: 1:BoardData {
314: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
314: 1:  'expectedAnswer': '3614936',
314: 1:  'history': [
314: 1:    {
314: 1:      'answer': '149',
314: 1:      'question': '123',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '163625',
314: 1:      'question': '465',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '0',
314: 1:      'question': '0',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '256419',
314: 1:      'question': '5813',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '4943616',
314: 1:      'question': '7264',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '193681',
314: 1:      'question': '1369',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '4981254',
314: 1:      'question': '7952',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '8116425',
314: 1:      'question': '9425',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '16492581',
314: 1:      'question': '4759',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '16494949',
314: 1:      'question': '4777',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': '40160',
314: 1:      'question': '2040',
314: 1:      'valid': true
314: 1:    }
314: 1:  ],
314: 1:  'info': [
314: 1:    '✅f(123) = 149',
314: 1:    '✅f(465) = 163625',
314: 1:    '✅f(0) = 0',
314: 1:    '✅f(5813) = 256419',
314: 1:    '✅f(7264) = 4943616',
314: 1:    '✅f(1369) = 193681',
314: 1:    '✅f(7952) = 4981254',
314: 1:    '✅f(9425) = 8116425',
314: 1:    '✅f(4759) = 16492581',
314: 1:    '✅f(4777) = 16494949',
314: 1:    '✅f(2040) = 40160',
314: 1:    '❌f(6176) = ??? != 3614936'
314: 1:  ],
314: 1:  'level': 11,
314: 1:  'nextQuestion': '6176',
314: 1:  'questions': [
314: 1:    '123',
314: 1:    '465',
314: 1:    '0',
314: 1:    '5813',
314: 1:    '7264',
314: 1:    '1369',
314: 1:    '7952',
314: 1:    '9425',
314: 1:    '4759',
314: 1:    '4777',
314: 1:    '2040',
314: 1:    '6176'
314: 1:  ]
314: 1:}
314: 1:Scores: 13707
314: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936']')
314: 1:Fire Event: PassTest{complexity=15, testCount=28}
------------------------------------------
315: 1:BoardData {
315: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
315: 1:  'expectedAnswer': '19064',
315: 1:  'history': [
315: 1:    {
315: 1:      'answer': '149',
315: 1:      'question': '123',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': '163625',
315: 1:      'question': '465',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': '0',
315: 1:      'question': '0',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': '256419',
315: 1:      'question': '5813',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': '4943616',
315: 1:      'question': '7264',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': '193681',
315: 1:      'question': '1369',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': '4981254',
315: 1:      'question': '7952',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': '8116425',
315: 1:      'question': '9425',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': '16492581',
315: 1:      'question': '4759',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': '16494949',
315: 1:      'question': '4777',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': '40160',
315: 1:      'question': '2040',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': '3614936',
315: 1:      'question': '6176',
315: 1:      'valid': true
315: 1:    }
315: 1:  ],
315: 1:  'info': [
315: 1:    '✅f(123) = 149',
315: 1:    '✅f(465) = 163625',
315: 1:    '✅f(0) = 0',
315: 1:    '✅f(5813) = 256419',
315: 1:    '✅f(7264) = 4943616',
315: 1:    '✅f(1369) = 193681',
315: 1:    '✅f(7952) = 4981254',
315: 1:    '✅f(9425) = 8116425',
315: 1:    '✅f(4759) = 16492581',
315: 1:    '✅f(4777) = 16494949',
315: 1:    '✅f(2040) = 40160',
315: 1:    '✅f(6176) = 3614936',
315: 1:    '❌f(1308) = ??? != 19064'
315: 1:  ],
315: 1:  'level': 11,
315: 1:  'nextQuestion': '1308',
315: 1:  'questions': [
315: 1:    '123',
315: 1:    '465',
315: 1:    '0',
315: 1:    '5813',
315: 1:    '7264',
315: 1:    '1369',
315: 1:    '7952',
315: 1:    '9425',
315: 1:    '4759',
315: 1:    '4777',
315: 1:    '2040',
315: 1:    '6176',
315: 1:    '1308'
315: 1:  ]
315: 1:}
315: 1:Scores: 13712
315: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064']')
315: 1:Fire Event: PassTest{complexity=15, testCount=28}
------------------------------------------
316: 1:BoardData {
316: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
316: 1:  'expectedAnswer': '4496416',
316: 1:  'history': [
316: 1:    {
316: 1:      'answer': '149',
316: 1:      'question': '123',
316: 1:      'valid': true
316: 1:    },
316: 1:    {
316: 1:      'answer': '163625',
316: 1:      'question': '465',
316: 1:      'valid': true
316: 1:    },
316: 1:    {
316: 1:      'answer': '0',
316: 1:      'question': '0',
316: 1:      'valid': true
316: 1:    },
316: 1:    {
316: 1:      'answer': '256419',
316: 1:      'question': '5813',
316: 1:      'valid': true
316: 1:    },
316: 1:    {
316: 1:      'answer': '4943616',
316: 1:      'question': '7264',
316: 1:      'valid': true
316: 1:    },
316: 1:    {
316: 1:      'answer': '193681',
316: 1:      'question': '1369',
316: 1:      'valid': true
316: 1:    },
316: 1:    {
316: 1:      'answer': '4981254',
316: 1:      'question': '7952',
316: 1:      'valid': true
316: 1:    },
316: 1:    {
316: 1:      'answer': '8116425',
316: 1:      'question': '9425',
316: 1:      'valid': true
316: 1:    },
316: 1:    {
316: 1:      'answer': '16492581',
316: 1:      'question': '4759',
316: 1:      'valid': true
316: 1:    },
316: 1:    {
316: 1:      'answer': '16494949',
316: 1:      'question': '4777',
316: 1:      'valid': true
316: 1:    },
316: 1:    {
316: 1:      'answer': '40160',
316: 1:      'question': '2040',
316: 1:      'valid': true
316: 1:    },
316: 1:    {
316: 1:      'answer': '3614936',
316: 1:      'question': '6176',
316: 1:      'valid': true
316: 1:    },
316: 1:    {
316: 1:      'answer': '19064',
316: 1:      'question': '1308',
316: 1:      'valid': true
316: 1:    }
316: 1:  ],
316: 1:  'info': [
316: 1:    '✅f(123) = 149',
316: 1:    '✅f(465) = 163625',
316: 1:    '✅f(0) = 0',
316: 1:    '✅f(5813) = 256419',
316: 1:    '✅f(7264) = 4943616',
316: 1:    '✅f(1369) = 193681',
316: 1:    '✅f(7952) = 4981254',
316: 1:    '✅f(9425) = 8116425',
316: 1:    '✅f(4759) = 16492581',
316: 1:    '✅f(4777) = 16494949',
316: 1:    '✅f(2040) = 40160',
316: 1:    '✅f(6176) = 3614936',
316: 1:    '✅f(1308) = 19064',
316: 1:    '❌f(2784) = ??? != 4496416'
316: 1:  ],
316: 1:  'level': 11,
316: 1:  'nextQuestion': '2784',
316: 1:  'questions': [
316: 1:    '123',
316: 1:    '465',
316: 1:    '0',
316: 1:    '5813',
316: 1:    '7264',
316: 1:    '1369',
316: 1:    '7952',
316: 1:    '9425',
316: 1:    '4759',
316: 1:    '4777',
316: 1:    '2040',
316: 1:    '6176',
316: 1:    '1308',
316: 1:    '2784'
316: 1:  ]
316: 1:}
316: 1:Scores: 13717
316: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416']')
316: 1:Fire Event: PassTest{complexity=15, testCount=28}
------------------------------------------
317: 1:BoardData {
317: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
317: 1:  'expectedAnswer': '1643664',
317: 1:  'history': [
317: 1:    {
317: 1:      'answer': '149',
317: 1:      'question': '123',
317: 1:      'valid': true
317: 1:    },
317: 1:    {
317: 1:      'answer': '163625',
317: 1:      'question': '465',
317: 1:      'valid': true
317: 1:    },
317: 1:    {
317: 1:      'answer': '0',
317: 1:      'question': '0',
317: 1:      'valid': true
317: 1:    },
317: 1:    {
317: 1:      'answer': '256419',
317: 1:      'question': '5813',
317: 1:      'valid': true
317: 1:    },
317: 1:    {
317: 1:      'answer': '4943616',
317: 1:      'question': '7264',
317: 1:      'valid': true
317: 1:    },
317: 1:    {
317: 1:      'answer': '193681',
317: 1:      'question': '1369',
317: 1:      'valid': true
317: 1:    },
317: 1:    {
317: 1:      'answer': '4981254',
317: 1:      'question': '7952',
317: 1:      'valid': true
317: 1:    },
317: 1:    {
317: 1:      'answer': '8116425',
317: 1:      'question': '9425',
317: 1:      'valid': true
317: 1:    },
317: 1:    {
317: 1:      'answer': '16492581',
317: 1:      'question': '4759',
317: 1:      'valid': true
317: 1:    },
317: 1:    {
317: 1:      'answer': '16494949',
317: 1:      'question': '4777',
317: 1:      'valid': true
317: 1:    },
317: 1:    {
317: 1:      'answer': '40160',
317: 1:      'question': '2040',
317: 1:      'valid': true
317: 1:    },
317: 1:    {
317: 1:      'answer': '3614936',
317: 1:      'question': '6176',
317: 1:      'valid': true
317: 1:    },
317: 1:    {
317: 1:      'answer': '19064',
317: 1:      'question': '1308',
317: 1:      'valid': true
317: 1:    },
317: 1:    {
317: 1:      'answer': '4496416',
317: 1:      'question': '2784',
317: 1:      'valid': true
317: 1:    }
317: 1:  ],
317: 1:  'info': [
317: 1:    '✅f(123) = 149',
317: 1:    '✅f(465) = 163625',
317: 1:    '✅f(0) = 0',
317: 1:    '✅f(5813) = 256419',
317: 1:    '✅f(7264) = 4943616',
317: 1:    '✅f(1369) = 193681',
317: 1:    '✅f(7952) = 4981254',
317: 1:    '✅f(9425) = 8116425',
317: 1:    '✅f(4759) = 16492581',
317: 1:    '✅f(4777) = 16494949',
317: 1:    '✅f(2040) = 40160',
317: 1:    '✅f(6176) = 3614936',
317: 1:    '✅f(1308) = 19064',
317: 1:    '✅f(2784) = 4496416',
317: 1:    '❌f(1868) = ??? != 1643664'
317: 1:  ],
317: 1:  'level': 11,
317: 1:  'nextQuestion': '1868',
317: 1:  'questions': [
317: 1:    '123',
317: 1:    '465',
317: 1:    '0',
317: 1:    '5813',
317: 1:    '7264',
317: 1:    '1369',
317: 1:    '7952',
317: 1:    '9425',
317: 1:    '4759',
317: 1:    '4777',
317: 1:    '2040',
317: 1:    '6176',
317: 1:    '1308',
317: 1:    '2784',
317: 1:    '1868'
317: 1:  ]
317: 1:}
317: 1:Scores: 13722
317: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416', '1643664']')
317: 1:Fire Event: PassTest{complexity=15, testCount=28}
------------------------------------------
318: 1:BoardData {
318: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
318: 1:  'expectedAnswer': '1646481',
318: 1:  'history': [
318: 1:    {
318: 1:      'answer': '149',
318: 1:      'question': '123',
318: 1:      'valid': true
318: 1:    },
318: 1:    {
318: 1:      'answer': '163625',
318: 1:      'question': '465',
318: 1:      'valid': true
318: 1:    },
318: 1:    {
318: 1:      'answer': '0',
318: 1:      'question': '0',
318: 1:      'valid': true
318: 1:    },
318: 1:    {
318: 1:      'answer': '256419',
318: 1:      'question': '5813',
318: 1:      'valid': true
318: 1:    },
318: 1:    {
318: 1:      'answer': '4943616',
318: 1:      'question': '7264',
318: 1:      'valid': true
318: 1:    },
318: 1:    {
318: 1:      'answer': '193681',
318: 1:      'question': '1369',
318: 1:      'valid': true
318: 1:    },
318: 1:    {
318: 1:      'answer': '4981254',
318: 1:      'question': '7952',
318: 1:      'valid': true
318: 1:    },
318: 1:    {
318: 1:      'answer': '8116425',
318: 1:      'question': '9425',
318: 1:      'valid': true
318: 1:    },
318: 1:    {
318: 1:      'answer': '16492581',
318: 1:      'question': '4759',
318: 1:      'valid': true
318: 1:    },
318: 1:    {
318: 1:      'answer': '16494949',
318: 1:      'question': '4777',
318: 1:      'valid': true
318: 1:    },
318: 1:    {
318: 1:      'answer': '40160',
318: 1:      'question': '2040',
318: 1:      'valid': true
318: 1:    },
318: 1:    {
318: 1:      'answer': '3614936',
318: 1:      'question': '6176',
318: 1:      'valid': true
318: 1:    },
318: 1:    {
318: 1:      'answer': '19064',
318: 1:      'question': '1308',
318: 1:      'valid': true
318: 1:    },
318: 1:    {
318: 1:      'answer': '4496416',
318: 1:      'question': '2784',
318: 1:      'valid': true
318: 1:    },
318: 1:    {
318: 1:      'answer': '1643664',
318: 1:      'question': '1868',
318: 1:      'valid': true
318: 1:    }
318: 1:  ],
318: 1:  'info': [
318: 1:    '✅f(123) = 149',
318: 1:    '✅f(465) = 163625',
318: 1:    '✅f(0) = 0',
318: 1:    '✅f(5813) = 256419',
318: 1:    '✅f(7264) = 4943616',
318: 1:    '✅f(1369) = 193681',
318: 1:    '✅f(7952) = 4981254',
318: 1:    '✅f(9425) = 8116425',
318: 1:    '✅f(4759) = 16492581',
318: 1:    '✅f(4777) = 16494949',
318: 1:    '✅f(2040) = 40160',
318: 1:    '✅f(6176) = 3614936',
318: 1:    '✅f(1308) = 19064',
318: 1:    '✅f(2784) = 4496416',
318: 1:    '✅f(1868) = 1643664',
318: 1:    '❌f(4289) = ??? != 1646481'
318: 1:  ],
318: 1:  'level': 11,
318: 1:  'nextQuestion': '4289',
318: 1:  'questions': [
318: 1:    '123',
318: 1:    '465',
318: 1:    '0',
318: 1:    '5813',
318: 1:    '7264',
318: 1:    '1369',
318: 1:    '7952',
318: 1:    '9425',
318: 1:    '4759',
318: 1:    '4777',
318: 1:    '2040',
318: 1:    '6176',
318: 1:    '1308',
318: 1:    '2784',
318: 1:    '1868',
318: 1:    '4289'
318: 1:  ]
318: 1:}
318: 1:Scores: 13727
318: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416', '1643664', '1646481']')
318: 1:Fire Event: PassTest{complexity=15, testCount=28}
------------------------------------------
319: 1:BoardData {
319: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
319: 1:  'expectedAnswer': '644909',
319: 1:  'history': [
319: 1:    {
319: 1:      'answer': '149',
319: 1:      'question': '123',
319: 1:      'valid': true
319: 1:    },
319: 1:    {
319: 1:      'answer': '163625',
319: 1:      'question': '465',
319: 1:      'valid': true
319: 1:    },
319: 1:    {
319: 1:      'answer': '0',
319: 1:      'question': '0',
319: 1:      'valid': true
319: 1:    },
319: 1:    {
319: 1:      'answer': '256419',
319: 1:      'question': '5813',
319: 1:      'valid': true
319: 1:    },
319: 1:    {
319: 1:      'answer': '4943616',
319: 1:      'question': '7264',
319: 1:      'valid': true
319: 1:    },
319: 1:    {
319: 1:      'answer': '193681',
319: 1:      'question': '1369',
319: 1:      'valid': true
319: 1:    },
319: 1:    {
319: 1:      'answer': '4981254',
319: 1:      'question': '7952',
319: 1:      'valid': true
319: 1:    },
319: 1:    {
319: 1:      'answer': '8116425',
319: 1:      'question': '9425',
319: 1:      'valid': true
319: 1:    },
319: 1:    {
319: 1:      'answer': '16492581',
319: 1:      'question': '4759',
319: 1:      'valid': true
319: 1:    },
319: 1:    {
319: 1:      'answer': '16494949',
319: 1:      'question': '4777',
319: 1:      'valid': true
319: 1:    },
319: 1:    {
319: 1:      'answer': '40160',
319: 1:      'question': '2040',
319: 1:      'valid': true
319: 1:    },
319: 1:    {
319: 1:      'answer': '3614936',
319: 1:      'question': '6176',
319: 1:      'valid': true
319: 1:    },
319: 1:    {
319: 1:      'answer': '19064',
319: 1:      'question': '1308',
319: 1:      'valid': true
319: 1:    },
319: 1:    {
319: 1:      'answer': '4496416',
319: 1:      'question': '2784',
319: 1:      'valid': true
319: 1:    },
319: 1:    {
319: 1:      'answer': '1643664',
319: 1:      'question': '1868',
319: 1:      'valid': true
319: 1:    },
319: 1:    {
319: 1:      'answer': '1646481',
319: 1:      'question': '4289',
319: 1:      'valid': true
319: 1:    }
319: 1:  ],
319: 1:  'info': [
319: 1:    '✅f(123) = 149',
319: 1:    '✅f(465) = 163625',
319: 1:    '✅f(0) = 0',
319: 1:    '✅f(5813) = 256419',
319: 1:    '✅f(7264) = 4943616',
319: 1:    '✅f(1369) = 193681',
319: 1:    '✅f(7952) = 4981254',
319: 1:    '✅f(9425) = 8116425',
319: 1:    '✅f(4759) = 16492581',
319: 1:    '✅f(4777) = 16494949',
319: 1:    '✅f(2040) = 40160',
319: 1:    '✅f(6176) = 3614936',
319: 1:    '✅f(1308) = 19064',
319: 1:    '✅f(2784) = 4496416',
319: 1:    '✅f(1868) = 1643664',
319: 1:    '✅f(4289) = 1646481',
319: 1:    '❌f(8703) = ??? != 644909'
319: 1:  ],
319: 1:  'level': 11,
319: 1:  'nextQuestion': '8703',
319: 1:  'questions': [
319: 1:    '123',
319: 1:    '465',
319: 1:    '0',
319: 1:    '5813',
319: 1:    '7264',
319: 1:    '1369',
319: 1:    '7952',
319: 1:    '9425',
319: 1:    '4759',
319: 1:    '4777',
319: 1:    '2040',
319: 1:    '6176',
319: 1:    '1308',
319: 1:    '2784',
319: 1:    '1868',
319: 1:    '4289',
319: 1:    '8703'
319: 1:  ]
319: 1:}
319: 1:Scores: 13732
319: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416', '1643664', '1646481', '644909']')
319: 1:Fire Event: PassTest{complexity=15, testCount=28}
------------------------------------------
320: 1:BoardData {
320: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
320: 1:  'expectedAnswer': '136810',
320: 1:  'history': [
320: 1:    {
320: 1:      'answer': '149',
320: 1:      'question': '123',
320: 1:      'valid': true
320: 1:    },
320: 1:    {
320: 1:      'answer': '163625',
320: 1:      'question': '465',
320: 1:      'valid': true
320: 1:    },
320: 1:    {
320: 1:      'answer': '0',
320: 1:      'question': '0',
320: 1:      'valid': true
320: 1:    },
320: 1:    {
320: 1:      'answer': '256419',
320: 1:      'question': '5813',
320: 1:      'valid': true
320: 1:    },
320: 1:    {
320: 1:      'answer': '4943616',
320: 1:      'question': '7264',
320: 1:      'valid': true
320: 1:    },
320: 1:    {
320: 1:      'answer': '193681',
320: 1:      'question': '1369',
320: 1:      'valid': true
320: 1:    },
320: 1:    {
320: 1:      'answer': '4981254',
320: 1:      'question': '7952',
320: 1:      'valid': true
320: 1:    },
320: 1:    {
320: 1:      'answer': '8116425',
320: 1:      'question': '9425',
320: 1:      'valid': true
320: 1:    },
320: 1:    {
320: 1:      'answer': '16492581',
320: 1:      'question': '4759',
320: 1:      'valid': true
320: 1:    },
320: 1:    {
320: 1:      'answer': '16494949',
320: 1:      'question': '4777',
320: 1:      'valid': true
320: 1:    },
320: 1:    {
320: 1:      'answer': '40160',
320: 1:      'question': '2040',
320: 1:      'valid': true
320: 1:    },
320: 1:    {
320: 1:      'answer': '3614936',
320: 1:      'question': '6176',
320: 1:      'valid': true
320: 1:    },
320: 1:    {
320: 1:      'answer': '19064',
320: 1:      'question': '1308',
320: 1:      'valid': true
320: 1:    },
320: 1:    {
320: 1:      'answer': '4496416',
320: 1:      'question': '2784',
320: 1:      'valid': true
320: 1:    },
320: 1:    {
320: 1:      'answer': '1643664',
320: 1:      'question': '1868',
320: 1:      'valid': true
320: 1:    },
320: 1:    {
320: 1:      'answer': '1646481',
320: 1:      'question': '4289',
320: 1:      'valid': true
320: 1:    },
320: 1:    {
320: 1:      'answer': '644909',
320: 1:      'question': '8703',
320: 1:      'valid': true
320: 1:    }
320: 1:  ],
320: 1:  'info': [
320: 1:    '✅f(123) = 149',
320: 1:    '✅f(465) = 163625',
320: 1:    '✅f(0) = 0',
320: 1:    '✅f(5813) = 256419',
320: 1:    '✅f(7264) = 4943616',
320: 1:    '✅f(1369) = 193681',
320: 1:    '✅f(7952) = 4981254',
320: 1:    '✅f(9425) = 8116425',
320: 1:    '✅f(4759) = 16492581',
320: 1:    '✅f(4777) = 16494949',
320: 1:    '✅f(2040) = 40160',
320: 1:    '✅f(6176) = 3614936',
320: 1:    '✅f(1308) = 19064',
320: 1:    '✅f(2784) = 4496416',
320: 1:    '✅f(1868) = 1643664',
320: 1:    '✅f(4289) = 1646481',
320: 1:    '✅f(8703) = 644909',
320: 1:    '❌f(1690) = ??? != 136810'
320: 1:  ],
320: 1:  'level': 11,
320: 1:  'nextQuestion': '1690',
320: 1:  'questions': [
320: 1:    '123',
320: 1:    '465',
320: 1:    '0',
320: 1:    '5813',
320: 1:    '7264',
320: 1:    '1369',
320: 1:    '7952',
320: 1:    '9425',
320: 1:    '4759',
320: 1:    '4777',
320: 1:    '2040',
320: 1:    '6176',
320: 1:    '1308',
320: 1:    '2784',
320: 1:    '1868',
320: 1:    '4289',
320: 1:    '8703',
320: 1:    '1690'
320: 1:  ]
320: 1:}
320: 1:Scores: 13737
320: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416', '1643664', '1646481', '644909', '136810']')
320: 1:Fire Event: PassTest{complexity=15, testCount=28}
------------------------------------------
321: 1:BoardData {
321: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
321: 1:  'expectedAnswer': '44944',
321: 1:  'history': [
321: 1:    {
321: 1:      'answer': '149',
321: 1:      'question': '123',
321: 1:      'valid': true
321: 1:    },
321: 1:    {
321: 1:      'answer': '163625',
321: 1:      'question': '465',
321: 1:      'valid': true
321: 1:    },
321: 1:    {
321: 1:      'answer': '0',
321: 1:      'question': '0',
321: 1:      'valid': true
321: 1:    },
321: 1:    {
321: 1:      'answer': '256419',
321: 1:      'question': '5813',
321: 1:      'valid': true
321: 1:    },
321: 1:    {
321: 1:      'answer': '4943616',
321: 1:      'question': '7264',
321: 1:      'valid': true
321: 1:    },
321: 1:    {
321: 1:      'answer': '193681',
321: 1:      'question': '1369',
321: 1:      'valid': true
321: 1:    },
321: 1:    {
321: 1:      'answer': '4981254',
321: 1:      'question': '7952',
321: 1:      'valid': true
321: 1:    },
321: 1:    {
321: 1:      'answer': '8116425',
321: 1:      'question': '9425',
321: 1:      'valid': true
321: 1:    },
321: 1:    {
321: 1:      'answer': '16492581',
321: 1:      'question': '4759',
321: 1:      'valid': true
321: 1:    },
321: 1:    {
321: 1:      'answer': '16494949',
321: 1:      'question': '4777',
321: 1:      'valid': true
321: 1:    },
321: 1:    {
321: 1:      'answer': '40160',
321: 1:      'question': '2040',
321: 1:      'valid': true
321: 1:    },
321: 1:    {
321: 1:      'answer': '3614936',
321: 1:      'question': '6176',
321: 1:      'valid': true
321: 1:    },
321: 1:    {
321: 1:      'answer': '19064',
321: 1:      'question': '1308',
321: 1:      'valid': true
321: 1:    },
321: 1:    {
321: 1:      'answer': '4496416',
321: 1:      'question': '2784',
321: 1:      'valid': true
321: 1:    },
321: 1:    {
321: 1:      'answer': '1643664',
321: 1:      'question': '1868',
321: 1:      'valid': true
321: 1:    },
321: 1:    {
321: 1:      'answer': '1646481',
321: 1:      'question': '4289',
321: 1:      'valid': true
321: 1:    },
321: 1:    {
321: 1:      'answer': '644909',
321: 1:      'question': '8703',
321: 1:      'valid': true
321: 1:    },
321: 1:    {
321: 1:      'answer': '136810',
321: 1:      'question': '1690',
321: 1:      'valid': true
321: 1:    }
321: 1:  ],
321: 1:  'info': [
321: 1:    '✅f(123) = 149',
321: 1:    '✅f(465) = 163625',
321: 1:    '✅f(0) = 0',
321: 1:    '✅f(5813) = 256419',
321: 1:    '✅f(7264) = 4943616',
321: 1:    '✅f(1369) = 193681',
321: 1:    '✅f(7952) = 4981254',
321: 1:    '✅f(9425) = 8116425',
321: 1:    '✅f(4759) = 16492581',
321: 1:    '✅f(4777) = 16494949',
321: 1:    '✅f(2040) = 40160',
321: 1:    '✅f(6176) = 3614936',
321: 1:    '✅f(1308) = 19064',
321: 1:    '✅f(2784) = 4496416',
321: 1:    '✅f(1868) = 1643664',
321: 1:    '✅f(4289) = 1646481',
321: 1:    '✅f(8703) = 644909',
321: 1:    '✅f(1690) = 136810',
321: 1:    '❌f(2722) = ??? != 44944'
321: 1:  ],
321: 1:  'level': 11,
321: 1:  'nextQuestion': '2722',
321: 1:  'questions': [
321: 1:    '123',
321: 1:    '465',
321: 1:    '0',
321: 1:    '5813',
321: 1:    '7264',
321: 1:    '1369',
321: 1:    '7952',
321: 1:    '9425',
321: 1:    '4759',
321: 1:    '4777',
321: 1:    '2040',
321: 1:    '6176',
321: 1:    '1308',
321: 1:    '2784',
321: 1:    '1868',
321: 1:    '4289',
321: 1:    '8703',
321: 1:    '1690',
321: 1:    '2722'
321: 1:  ]
321: 1:}
321: 1:Scores: 13742
321: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416', '1643664', '1646481', '644909', '136810', '44944']')
321: 1:Fire Event: PassTest{complexity=15, testCount=28}
------------------------------------------
322: 1:BoardData {
322: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
322: 1:  'expectedAnswer': '4994',
322: 1:  'history': [
322: 1:    {
322: 1:      'answer': '149',
322: 1:      'question': '123',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': '163625',
322: 1:      'question': '465',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': '0',
322: 1:      'question': '0',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': '256419',
322: 1:      'question': '5813',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': '4943616',
322: 1:      'question': '7264',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': '193681',
322: 1:      'question': '1369',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': '4981254',
322: 1:      'question': '7952',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': '8116425',
322: 1:      'question': '9425',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': '16492581',
322: 1:      'question': '4759',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': '16494949',
322: 1:      'question': '4777',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': '40160',
322: 1:      'question': '2040',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': '3614936',
322: 1:      'question': '6176',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': '19064',
322: 1:      'question': '1308',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': '4496416',
322: 1:      'question': '2784',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': '1643664',
322: 1:      'question': '1868',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': '1646481',
322: 1:      'question': '4289',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': '644909',
322: 1:      'question': '8703',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': '136810',
322: 1:      'question': '1690',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': '44944',
322: 1:      'question': '2722',
322: 1:      'valid': true
322: 1:    }
322: 1:  ],
322: 1:  'info': [
322: 1:    '✅f(123) = 149',
322: 1:    '✅f(465) = 163625',
322: 1:    '✅f(0) = 0',
322: 1:    '✅f(5813) = 256419',
322: 1:    '✅f(7264) = 4943616',
322: 1:    '✅f(1369) = 193681',
322: 1:    '✅f(7952) = 4981254',
322: 1:    '✅f(9425) = 8116425',
322: 1:    '✅f(4759) = 16492581',
322: 1:    '✅f(4777) = 16494949',
322: 1:    '✅f(2040) = 40160',
322: 1:    '✅f(6176) = 3614936',
322: 1:    '✅f(1308) = 19064',
322: 1:    '✅f(2784) = 4496416',
322: 1:    '✅f(1868) = 1643664',
322: 1:    '✅f(4289) = 1646481',
322: 1:    '✅f(8703) = 644909',
322: 1:    '✅f(1690) = 136810',
322: 1:    '✅f(2722) = 44944',
322: 1:    '❌f(2332) = ??? != 4994'
322: 1:  ],
322: 1:  'level': 11,
322: 1:  'nextQuestion': '2332',
322: 1:  'questions': [
322: 1:    '123',
322: 1:    '465',
322: 1:    '0',
322: 1:    '5813',
322: 1:    '7264',
322: 1:    '1369',
322: 1:    '7952',
322: 1:    '9425',
322: 1:    '4759',
322: 1:    '4777',
322: 1:    '2040',
322: 1:    '6176',
322: 1:    '1308',
322: 1:    '2784',
322: 1:    '1868',
322: 1:    '4289',
322: 1:    '8703',
322: 1:    '1690',
322: 1:    '2722',
322: 1:    '2332'
322: 1:  ]
322: 1:}
322: 1:Scores: 13747
322: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416', '1643664', '1646481', '644909', '136810', '44944', '4994']')
322: 1:Fire Event: PassTest{complexity=15, testCount=28}
------------------------------------------
323: 1:BoardData {
323: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
323: 1:  'expectedAnswer': '251254',
323: 1:  'history': [
323: 1:    {
323: 1:      'answer': '149',
323: 1:      'question': '123',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': '163625',
323: 1:      'question': '465',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': '0',
323: 1:      'question': '0',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': '256419',
323: 1:      'question': '5813',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': '4943616',
323: 1:      'question': '7264',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': '193681',
323: 1:      'question': '1369',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': '4981254',
323: 1:      'question': '7952',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': '8116425',
323: 1:      'question': '9425',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': '16492581',
323: 1:      'question': '4759',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': '16494949',
323: 1:      'question': '4777',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': '40160',
323: 1:      'question': '2040',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': '3614936',
323: 1:      'question': '6176',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': '19064',
323: 1:      'question': '1308',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': '4496416',
323: 1:      'question': '2784',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': '1643664',
323: 1:      'question': '1868',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': '1646481',
323: 1:      'question': '4289',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': '644909',
323: 1:      'question': '8703',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': '136810',
323: 1:      'question': '1690',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': '44944',
323: 1:      'question': '2722',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': '4994',
323: 1:      'question': '2332',
323: 1:      'valid': true
323: 1:    }
323: 1:  ],
323: 1:  'info': [
323: 1:    '✅f(123) = 149',
323: 1:    '✅f(465) = 163625',
323: 1:    '✅f(0) = 0',
323: 1:    '✅f(5813) = 256419',
323: 1:    '✅f(7264) = 4943616',
323: 1:    '✅f(1369) = 193681',
323: 1:    '✅f(7952) = 4981254',
323: 1:    '✅f(9425) = 8116425',
323: 1:    '✅f(4759) = 16492581',
323: 1:    '✅f(4777) = 16494949',
323: 1:    '✅f(2040) = 40160',
323: 1:    '✅f(6176) = 3614936',
323: 1:    '✅f(1308) = 19064',
323: 1:    '✅f(2784) = 4496416',
323: 1:    '✅f(1868) = 1643664',
323: 1:    '✅f(4289) = 1646481',
323: 1:    '✅f(8703) = 644909',
323: 1:    '✅f(1690) = 136810',
323: 1:    '✅f(2722) = 44944',
323: 1:    '✅f(2332) = 4994',
323: 1:    '❌f(5152) = ??? != 251254'
323: 1:  ],
323: 1:  'level': 11,
323: 1:  'nextQuestion': '5152',
323: 1:  'questions': [
323: 1:    '123',
323: 1:    '465',
323: 1:    '0',
323: 1:    '5813',
323: 1:    '7264',
323: 1:    '1369',
323: 1:    '7952',
323: 1:    '9425',
323: 1:    '4759',
323: 1:    '4777',
323: 1:    '2040',
323: 1:    '6176',
323: 1:    '1308',
323: 1:    '2784',
323: 1:    '1868',
323: 1:    '4289',
323: 1:    '8703',
323: 1:    '1690',
323: 1:    '2722',
323: 1:    '2332',
323: 1:    '5152'
323: 1:  ]
323: 1:}
323: 1:Scores: 13752
323: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416', '1643664', '1646481', '644909', '136810', '44944', '4994', '251254']')
323: 1:Fire Event: PassTest{complexity=15, testCount=28}
------------------------------------------
324: 1:BoardData {
324: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
324: 1:  'expectedAnswer': '198181',
324: 1:  'history': [
324: 1:    {
324: 1:      'answer': '149',
324: 1:      'question': '123',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '163625',
324: 1:      'question': '465',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '0',
324: 1:      'question': '0',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '256419',
324: 1:      'question': '5813',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '4943616',
324: 1:      'question': '7264',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '193681',
324: 1:      'question': '1369',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '4981254',
324: 1:      'question': '7952',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '8116425',
324: 1:      'question': '9425',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '16492581',
324: 1:      'question': '4759',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '16494949',
324: 1:      'question': '4777',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '40160',
324: 1:      'question': '2040',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '3614936',
324: 1:      'question': '6176',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '19064',
324: 1:      'question': '1308',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '4496416',
324: 1:      'question': '2784',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '1643664',
324: 1:      'question': '1868',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '1646481',
324: 1:      'question': '4289',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '644909',
324: 1:      'question': '8703',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '136810',
324: 1:      'question': '1690',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '44944',
324: 1:      'question': '2722',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '4994',
324: 1:      'question': '2332',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '251254',
324: 1:      'question': '5152',
324: 1:      'valid': true
324: 1:    }
324: 1:  ],
324: 1:  'info': [
324: 1:    '✅f(123) = 149',
324: 1:    '✅f(465) = 163625',
324: 1:    '✅f(0) = 0',
324: 1:    '✅f(5813) = 256419',
324: 1:    '✅f(7264) = 4943616',
324: 1:    '✅f(1369) = 193681',
324: 1:    '✅f(7952) = 4981254',
324: 1:    '✅f(9425) = 8116425',
324: 1:    '✅f(4759) = 16492581',
324: 1:    '✅f(4777) = 16494949',
324: 1:    '✅f(2040) = 40160',
324: 1:    '✅f(6176) = 3614936',
324: 1:    '✅f(1308) = 19064',
324: 1:    '✅f(2784) = 4496416',
324: 1:    '✅f(1868) = 1643664',
324: 1:    '✅f(4289) = 1646481',
324: 1:    '✅f(8703) = 644909',
324: 1:    '✅f(1690) = 136810',
324: 1:    '✅f(2722) = 44944',
324: 1:    '✅f(2332) = 4994',
324: 1:    '✅f(5152) = 251254',
324: 1:    '❌f(1399) = ??? != 198181'
324: 1:  ],
324: 1:  'level': 11,
324: 1:  'nextQuestion': '1399',
324: 1:  'questions': [
324: 1:    '123',
324: 1:    '465',
324: 1:    '0',
324: 1:    '5813',
324: 1:    '7264',
324: 1:    '1369',
324: 1:    '7952',
324: 1:    '9425',
324: 1:    '4759',
324: 1:    '4777',
324: 1:    '2040',
324: 1:    '6176',
324: 1:    '1308',
324: 1:    '2784',
324: 1:    '1868',
324: 1:    '4289',
324: 1:    '8703',
324: 1:    '1690',
324: 1:    '2722',
324: 1:    '2332',
324: 1:    '5152',
324: 1:    '1399'
324: 1:  ]
324: 1:}
324: 1:Scores: 13757
324: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416', '1643664', '1646481', '644909', '136810', '44944', '4994', '251254', '198181']')
324: 1:Fire Event: PassTest{complexity=15, testCount=28}
------------------------------------------
325: 1:BoardData {
325: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
325: 1:  'expectedAnswer': '498116',
325: 1:  'history': [
325: 1:    {
325: 1:      'answer': '149',
325: 1:      'question': '123',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '163625',
325: 1:      'question': '465',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '0',
325: 1:      'question': '0',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '256419',
325: 1:      'question': '5813',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '4943616',
325: 1:      'question': '7264',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '193681',
325: 1:      'question': '1369',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '4981254',
325: 1:      'question': '7952',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '8116425',
325: 1:      'question': '9425',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '16492581',
325: 1:      'question': '4759',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '16494949',
325: 1:      'question': '4777',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '40160',
325: 1:      'question': '2040',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '3614936',
325: 1:      'question': '6176',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '19064',
325: 1:      'question': '1308',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '4496416',
325: 1:      'question': '2784',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '1643664',
325: 1:      'question': '1868',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '1646481',
325: 1:      'question': '4289',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '644909',
325: 1:      'question': '8703',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '136810',
325: 1:      'question': '1690',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '44944',
325: 1:      'question': '2722',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '4994',
325: 1:      'question': '2332',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '251254',
325: 1:      'question': '5152',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '198181',
325: 1:      'question': '1399',
325: 1:      'valid': true
325: 1:    }
325: 1:  ],
325: 1:  'info': [
325: 1:    '✅f(123) = 149',
325: 1:    '✅f(465) = 163625',
325: 1:    '✅f(0) = 0',
325: 1:    '✅f(5813) = 256419',
325: 1:    '✅f(7264) = 4943616',
325: 1:    '✅f(1369) = 193681',
325: 1:    '✅f(7952) = 4981254',
325: 1:    '✅f(9425) = 8116425',
325: 1:    '✅f(4759) = 16492581',
325: 1:    '✅f(4777) = 16494949',
325: 1:    '✅f(2040) = 40160',
325: 1:    '✅f(6176) = 3614936',
325: 1:    '✅f(1308) = 19064',
325: 1:    '✅f(2784) = 4496416',
325: 1:    '✅f(1868) = 1643664',
325: 1:    '✅f(4289) = 1646481',
325: 1:    '✅f(8703) = 644909',
325: 1:    '✅f(1690) = 136810',
325: 1:    '✅f(2722) = 44944',
325: 1:    '✅f(2332) = 4994',
325: 1:    '✅f(5152) = 251254',
325: 1:    '✅f(1399) = 198181',
325: 1:    '❌f(794) = ??? != 498116'
325: 1:  ],
325: 1:  'level': 11,
325: 1:  'nextQuestion': '794',
325: 1:  'questions': [
325: 1:    '123',
325: 1:    '465',
325: 1:    '0',
325: 1:    '5813',
325: 1:    '7264',
325: 1:    '1369',
325: 1:    '7952',
325: 1:    '9425',
325: 1:    '4759',
325: 1:    '4777',
325: 1:    '2040',
325: 1:    '6176',
325: 1:    '1308',
325: 1:    '2784',
325: 1:    '1868',
325: 1:    '4289',
325: 1:    '8703',
325: 1:    '1690',
325: 1:    '2722',
325: 1:    '2332',
325: 1:    '5152',
325: 1:    '1399',
325: 1:    '794'
325: 1:  ]
325: 1:}
325: 1:Scores: 13762
325: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416', '1643664', '1646481', '644909', '136810', '44944', '4994', '251254', '198181', '498116']')
325: 1:Fire Event: PassTest{complexity=15, testCount=28}
------------------------------------------
326: 1:BoardData {
326: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
326: 1:  'expectedAnswer': '8181036',
326: 1:  'history': [
326: 1:    {
326: 1:      'answer': '149',
326: 1:      'question': '123',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '163625',
326: 1:      'question': '465',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '0',
326: 1:      'question': '0',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '256419',
326: 1:      'question': '5813',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '4943616',
326: 1:      'question': '7264',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '193681',
326: 1:      'question': '1369',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '4981254',
326: 1:      'question': '7952',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '8116425',
326: 1:      'question': '9425',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '16492581',
326: 1:      'question': '4759',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '16494949',
326: 1:      'question': '4777',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '40160',
326: 1:      'question': '2040',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '3614936',
326: 1:      'question': '6176',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '19064',
326: 1:      'question': '1308',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '4496416',
326: 1:      'question': '2784',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '1643664',
326: 1:      'question': '1868',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '1646481',
326: 1:      'question': '4289',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '644909',
326: 1:      'question': '8703',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '136810',
326: 1:      'question': '1690',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '44944',
326: 1:      'question': '2722',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '4994',
326: 1:      'question': '2332',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '251254',
326: 1:      'question': '5152',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '198181',
326: 1:      'question': '1399',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '498116',
326: 1:      'question': '794',
326: 1:      'valid': true
326: 1:    }
326: 1:  ],
326: 1:  'info': [
326: 1:    '✅f(123) = 149',
326: 1:    '✅f(465) = 163625',
326: 1:    '✅f(0) = 0',
326: 1:    '✅f(5813) = 256419',
326: 1:    '✅f(7264) = 4943616',
326: 1:    '✅f(1369) = 193681',
326: 1:    '✅f(7952) = 4981254',
326: 1:    '✅f(9425) = 8116425',
326: 1:    '✅f(4759) = 16492581',
326: 1:    '✅f(4777) = 16494949',
326: 1:    '✅f(2040) = 40160',
326: 1:    '✅f(6176) = 3614936',
326: 1:    '✅f(1308) = 19064',
326: 1:    '✅f(2784) = 4496416',
326: 1:    '✅f(1868) = 1643664',
326: 1:    '✅f(4289) = 1646481',
326: 1:    '✅f(8703) = 644909',
326: 1:    '✅f(1690) = 136810',
326: 1:    '✅f(2722) = 44944',
326: 1:    '✅f(2332) = 4994',
326: 1:    '✅f(5152) = 251254',
326: 1:    '✅f(1399) = 198181',
326: 1:    '✅f(794) = 498116',
326: 1:    '❌f(9906) = ??? != 8181036'
326: 1:  ],
326: 1:  'level': 11,
326: 1:  'nextQuestion': '9906',
326: 1:  'questions': [
326: 1:    '123',
326: 1:    '465',
326: 1:    '0',
326: 1:    '5813',
326: 1:    '7264',
326: 1:    '1369',
326: 1:    '7952',
326: 1:    '9425',
326: 1:    '4759',
326: 1:    '4777',
326: 1:    '2040',
326: 1:    '6176',
326: 1:    '1308',
326: 1:    '2784',
326: 1:    '1868',
326: 1:    '4289',
326: 1:    '8703',
326: 1:    '1690',
326: 1:    '2722',
326: 1:    '2332',
326: 1:    '5152',
326: 1:    '1399',
326: 1:    '794',
326: 1:    '9906'
326: 1:  ]
326: 1:}
326: 1:Scores: 13767
326: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416', '1643664', '1646481', '644909', '136810', '44944', '4994', '251254', '198181', '498116', '8181036']')
326: 1:Fire Event: PassTest{complexity=15, testCount=28}
------------------------------------------
327: 1:BoardData {
327: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
327: 1:  'expectedAnswer': '412549',
327: 1:  'history': [
327: 1:    {
327: 1:      'answer': '149',
327: 1:      'question': '123',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '163625',
327: 1:      'question': '465',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '0',
327: 1:      'question': '0',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '256419',
327: 1:      'question': '5813',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '4943616',
327: 1:      'question': '7264',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '193681',
327: 1:      'question': '1369',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '4981254',
327: 1:      'question': '7952',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '8116425',
327: 1:      'question': '9425',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '16492581',
327: 1:      'question': '4759',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '16494949',
327: 1:      'question': '4777',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '40160',
327: 1:      'question': '2040',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '3614936',
327: 1:      'question': '6176',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '19064',
327: 1:      'question': '1308',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '4496416',
327: 1:      'question': '2784',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '1643664',
327: 1:      'question': '1868',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '1646481',
327: 1:      'question': '4289',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '644909',
327: 1:      'question': '8703',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '136810',
327: 1:      'question': '1690',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '44944',
327: 1:      'question': '2722',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '4994',
327: 1:      'question': '2332',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '251254',
327: 1:      'question': '5152',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '198181',
327: 1:      'question': '1399',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '498116',
327: 1:      'question': '794',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '8181036',
327: 1:      'question': '9906',
327: 1:      'valid': true
327: 1:    }
327: 1:  ],
327: 1:  'info': [
327: 1:    '✅f(123) = 149',
327: 1:    '✅f(465) = 163625',
327: 1:    '✅f(0) = 0',
327: 1:    '✅f(5813) = 256419',
327: 1:    '✅f(7264) = 4943616',
327: 1:    '✅f(1369) = 193681',
327: 1:    '✅f(7952) = 4981254',
327: 1:    '✅f(9425) = 8116425',
327: 1:    '✅f(4759) = 16492581',
327: 1:    '✅f(4777) = 16494949',
327: 1:    '✅f(2040) = 40160',
327: 1:    '✅f(6176) = 3614936',
327: 1:    '✅f(1308) = 19064',
327: 1:    '✅f(2784) = 4496416',
327: 1:    '✅f(1868) = 1643664',
327: 1:    '✅f(4289) = 1646481',
327: 1:    '✅f(8703) = 644909',
327: 1:    '✅f(1690) = 136810',
327: 1:    '✅f(2722) = 44944',
327: 1:    '✅f(2332) = 4994',
327: 1:    '✅f(5152) = 251254',
327: 1:    '✅f(1399) = 198181',
327: 1:    '✅f(794) = 498116',
327: 1:    '✅f(9906) = 8181036',
327: 1:    '❌f(2157) = ??? != 412549'
327: 1:  ],
327: 1:  'level': 11,
327: 1:  'nextQuestion': '2157',
327: 1:  'questions': [
327: 1:    '123',
327: 1:    '465',
327: 1:    '0',
327: 1:    '5813',
327: 1:    '7264',
327: 1:    '1369',
327: 1:    '7952',
327: 1:    '9425',
327: 1:    '4759',
327: 1:    '4777',
327: 1:    '2040',
327: 1:    '6176',
327: 1:    '1308',
327: 1:    '2784',
327: 1:    '1868',
327: 1:    '4289',
327: 1:    '8703',
327: 1:    '1690',
327: 1:    '2722',
327: 1:    '2332',
327: 1:    '5152',
327: 1:    '1399',
327: 1:    '794',
327: 1:    '9906',
327: 1:    '2157'
327: 1:  ]
327: 1:}
327: 1:Scores: 13772
327: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416', '1643664', '1646481', '644909', '136810', '44944', '4994', '251254', '198181', '498116', '8181036', '412549']')
327: 1:Fire Event: PassTest{complexity=15, testCount=28}
------------------------------------------
328: 1:BoardData {
328: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
328: 1:  'expectedAnswer': '256436',
328: 1:  'history': [
328: 1:    {
328: 1:      'answer': '149',
328: 1:      'question': '123',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '163625',
328: 1:      'question': '465',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '0',
328: 1:      'question': '0',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '256419',
328: 1:      'question': '5813',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '4943616',
328: 1:      'question': '7264',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '193681',
328: 1:      'question': '1369',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '4981254',
328: 1:      'question': '7952',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '8116425',
328: 1:      'question': '9425',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '16492581',
328: 1:      'question': '4759',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '16494949',
328: 1:      'question': '4777',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '40160',
328: 1:      'question': '2040',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '3614936',
328: 1:      'question': '6176',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '19064',
328: 1:      'question': '1308',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '4496416',
328: 1:      'question': '2784',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '1643664',
328: 1:      'question': '1868',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '1646481',
328: 1:      'question': '4289',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '644909',
328: 1:      'question': '8703',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '136810',
328: 1:      'question': '1690',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '44944',
328: 1:      'question': '2722',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '4994',
328: 1:      'question': '2332',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '251254',
328: 1:      'question': '5152',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '198181',
328: 1:      'question': '1399',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '498116',
328: 1:      'question': '794',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '8181036',
328: 1:      'question': '9906',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '412549',
328: 1:      'question': '2157',
328: 1:      'valid': true
328: 1:    }
328: 1:  ],
328: 1:  'info': [
328: 1:    '✅f(123) = 149',
328: 1:    '✅f(465) = 163625',
328: 1:    '✅f(0) = 0',
328: 1:    '✅f(5813) = 256419',
328: 1:    '✅f(7264) = 4943616',
328: 1:    '✅f(1369) = 193681',
328: 1:    '✅f(7952) = 4981254',
328: 1:    '✅f(9425) = 8116425',
328: 1:    '✅f(4759) = 16492581',
328: 1:    '✅f(4777) = 16494949',
328: 1:    '✅f(2040) = 40160',
328: 1:    '✅f(6176) = 3614936',
328: 1:    '✅f(1308) = 19064',
328: 1:    '✅f(2784) = 4496416',
328: 1:    '✅f(1868) = 1643664',
328: 1:    '✅f(4289) = 1646481',
328: 1:    '✅f(8703) = 644909',
328: 1:    '✅f(1690) = 136810',
328: 1:    '✅f(2722) = 44944',
328: 1:    '✅f(2332) = 4994',
328: 1:    '✅f(5152) = 251254',
328: 1:    '✅f(1399) = 198181',
328: 1:    '✅f(794) = 498116',
328: 1:    '✅f(9906) = 8181036',
328: 1:    '✅f(2157) = 412549',
328: 1:    '❌f(586) = ??? != 256436'
328: 1:  ],
328: 1:  'level': 11,
328: 1:  'nextQuestion': '586',
328: 1:  'questions': [
328: 1:    '123',
328: 1:    '465',
328: 1:    '0',
328: 1:    '5813',
328: 1:    '7264',
328: 1:    '1369',
328: 1:    '7952',
328: 1:    '9425',
328: 1:    '4759',
328: 1:    '4777',
328: 1:    '2040',
328: 1:    '6176',
328: 1:    '1308',
328: 1:    '2784',
328: 1:    '1868',
328: 1:    '4289',
328: 1:    '8703',
328: 1:    '1690',
328: 1:    '2722',
328: 1:    '2332',
328: 1:    '5152',
328: 1:    '1399',
328: 1:    '794',
328: 1:    '9906',
328: 1:    '2157',
328: 1:    '586'
328: 1:  ]
328: 1:}
328: 1:Scores: 13777
328: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416', '1643664', '1646481', '644909', '136810', '44944', '4994', '251254', '198181', '498116', '8181036', '412549', '256436']')
328: 1:Fire Event: PassTest{complexity=15, testCount=28}
------------------------------------------
329: 1:BoardData {
329: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
329: 1:  'expectedAnswer': '4940',
329: 1:  'history': [
329: 1:    {
329: 1:      'answer': '149',
329: 1:      'question': '123',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '163625',
329: 1:      'question': '465',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '0',
329: 1:      'question': '0',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '256419',
329: 1:      'question': '5813',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '4943616',
329: 1:      'question': '7264',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '193681',
329: 1:      'question': '1369',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '4981254',
329: 1:      'question': '7952',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '8116425',
329: 1:      'question': '9425',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '16492581',
329: 1:      'question': '4759',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '16494949',
329: 1:      'question': '4777',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '40160',
329: 1:      'question': '2040',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '3614936',
329: 1:      'question': '6176',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '19064',
329: 1:      'question': '1308',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '4496416',
329: 1:      'question': '2784',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '1643664',
329: 1:      'question': '1868',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '1646481',
329: 1:      'question': '4289',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '644909',
329: 1:      'question': '8703',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '136810',
329: 1:      'question': '1690',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '44944',
329: 1:      'question': '2722',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '4994',
329: 1:      'question': '2332',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '251254',
329: 1:      'question': '5152',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '198181',
329: 1:      'question': '1399',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '498116',
329: 1:      'question': '794',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '8181036',
329: 1:      'question': '9906',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '412549',
329: 1:      'question': '2157',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '256436',
329: 1:      'question': '586',
329: 1:      'valid': true
329: 1:    }
329: 1:  ],
329: 1:  'info': [
329: 1:    '✅f(123) = 149',
329: 1:    '✅f(465) = 163625',
329: 1:    '✅f(0) = 0',
329: 1:    '✅f(5813) = 256419',
329: 1:    '✅f(7264) = 4943616',
329: 1:    '✅f(1369) = 193681',
329: 1:    '✅f(7952) = 4981254',
329: 1:    '✅f(9425) = 8116425',
329: 1:    '✅f(4759) = 16492581',
329: 1:    '✅f(4777) = 16494949',
329: 1:    '✅f(2040) = 40160',
329: 1:    '✅f(6176) = 3614936',
329: 1:    '✅f(1308) = 19064',
329: 1:    '✅f(2784) = 4496416',
329: 1:    '✅f(1868) = 1643664',
329: 1:    '✅f(4289) = 1646481',
329: 1:    '✅f(8703) = 644909',
329: 1:    '✅f(1690) = 136810',
329: 1:    '✅f(2722) = 44944',
329: 1:    '✅f(2332) = 4994',
329: 1:    '✅f(5152) = 251254',
329: 1:    '✅f(1399) = 198181',
329: 1:    '✅f(794) = 498116',
329: 1:    '✅f(9906) = 8181036',
329: 1:    '✅f(2157) = 412549',
329: 1:    '✅f(586) = 256436',
329: 1:    '❌f(720) = ??? != 4940'
329: 1:  ],
329: 1:  'level': 11,
329: 1:  'nextQuestion': '720',
329: 1:  'questions': [
329: 1:    '123',
329: 1:    '465',
329: 1:    '0',
329: 1:    '5813',
329: 1:    '7264',
329: 1:    '1369',
329: 1:    '7952',
329: 1:    '9425',
329: 1:    '4759',
329: 1:    '4777',
329: 1:    '2040',
329: 1:    '6176',
329: 1:    '1308',
329: 1:    '2784',
329: 1:    '1868',
329: 1:    '4289',
329: 1:    '8703',
329: 1:    '1690',
329: 1:    '2722',
329: 1:    '2332',
329: 1:    '5152',
329: 1:    '1399',
329: 1:    '794',
329: 1:    '9906',
329: 1:    '2157',
329: 1:    '586',
329: 1:    '720'
329: 1:  ]
329: 1:}
329: 1:Scores: 13782
329: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416', '1643664', '1646481', '644909', '136810', '44944', '4994', '251254', '198181', '498116', '8181036', '412549', '256436', '4940']')
329: 1:Fire Event: PassTest{complexity=15, testCount=28}
------------------------------------------
330: 1:BoardData {
330: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
330: 1:  'expectedAnswer': '6436436',
330: 1:  'history': [
330: 1:    {
330: 1:      'answer': '149',
330: 1:      'question': '123',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '163625',
330: 1:      'question': '465',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '0',
330: 1:      'question': '0',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '256419',
330: 1:      'question': '5813',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '4943616',
330: 1:      'question': '7264',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '193681',
330: 1:      'question': '1369',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '4981254',
330: 1:      'question': '7952',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '8116425',
330: 1:      'question': '9425',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '16492581',
330: 1:      'question': '4759',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '16494949',
330: 1:      'question': '4777',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '40160',
330: 1:      'question': '2040',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '3614936',
330: 1:      'question': '6176',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '19064',
330: 1:      'question': '1308',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '4496416',
330: 1:      'question': '2784',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '1643664',
330: 1:      'question': '1868',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '1646481',
330: 1:      'question': '4289',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '644909',
330: 1:      'question': '8703',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '136810',
330: 1:      'question': '1690',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '44944',
330: 1:      'question': '2722',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '4994',
330: 1:      'question': '2332',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '251254',
330: 1:      'question': '5152',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '198181',
330: 1:      'question': '1399',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '498116',
330: 1:      'question': '794',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '8181036',
330: 1:      'question': '9906',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '412549',
330: 1:      'question': '2157',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '256436',
330: 1:      'question': '586',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '4940',
330: 1:      'question': '720',
330: 1:      'valid': true
330: 1:    }
330: 1:  ],
330: 1:  'info': [
330: 1:    '✅f(123) = 149',
330: 1:    '✅f(465) = 163625',
330: 1:    '✅f(0) = 0',
330: 1:    '✅f(5813) = 256419',
330: 1:    '✅f(7264) = 4943616',
330: 1:    '✅f(1369) = 193681',
330: 1:    '✅f(7952) = 4981254',
330: 1:    '✅f(9425) = 8116425',
330: 1:    '✅f(4759) = 16492581',
330: 1:    '✅f(4777) = 16494949',
330: 1:    '✅f(2040) = 40160',
330: 1:    '✅f(6176) = 3614936',
330: 1:    '✅f(1308) = 19064',
330: 1:    '✅f(2784) = 4496416',
330: 1:    '✅f(1868) = 1643664',
330: 1:    '✅f(4289) = 1646481',
330: 1:    '✅f(8703) = 644909',
330: 1:    '✅f(1690) = 136810',
330: 1:    '✅f(2722) = 44944',
330: 1:    '✅f(2332) = 4994',
330: 1:    '✅f(5152) = 251254',
330: 1:    '✅f(1399) = 198181',
330: 1:    '✅f(794) = 498116',
330: 1:    '✅f(9906) = 8181036',
330: 1:    '✅f(2157) = 412549',
330: 1:    '✅f(586) = 256436',
330: 1:    '✅f(720) = 4940',
330: 1:    '❌f(8626) = ??? != 6436436'
330: 1:  ],
330: 1:  'level': 11,
330: 1:  'nextQuestion': '8626',
330: 1:  'questions': [
330: 1:    '123',
330: 1:    '465',
330: 1:    '0',
330: 1:    '5813',
330: 1:    '7264',
330: 1:    '1369',
330: 1:    '7952',
330: 1:    '9425',
330: 1:    '4759',
330: 1:    '4777',
330: 1:    '2040',
330: 1:    '6176',
330: 1:    '1308',
330: 1:    '2784',
330: 1:    '1868',
330: 1:    '4289',
330: 1:    '8703',
330: 1:    '1690',
330: 1:    '2722',
330: 1:    '2332',
330: 1:    '5152',
330: 1:    '1399',
330: 1:    '794',
330: 1:    '9906',
330: 1:    '2157',
330: 1:    '586',
330: 1:    '720',
330: 1:    '8626'
330: 1:  ]
330: 1:}
330: 1:Scores: 13787
330: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416', '1643664', '1646481', '644909', '136810', '44944', '4994', '251254', '198181', '498116', '8181036', '412549', '256436', '4940', '6436436']')
330: 1:Fire Event: PassTest{complexity=15, testCount=28}
330: 1:Fire Event: NextAlgorithm{complexity=15, time=0}
------------------------------------------
331: 1:BoardData {
331: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
331: 1:  'history': [
331: 1:    {
331: 1:      'answer': '149',
331: 1:      'question': '123',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '163625',
331: 1:      'question': '465',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '0',
331: 1:      'question': '0',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '256419',
331: 1:      'question': '5813',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '4943616',
331: 1:      'question': '7264',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '193681',
331: 1:      'question': '1369',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '4981254',
331: 1:      'question': '7952',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '8116425',
331: 1:      'question': '9425',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '16492581',
331: 1:      'question': '4759',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '16494949',
331: 1:      'question': '4777',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '40160',
331: 1:      'question': '2040',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '3614936',
331: 1:      'question': '6176',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '19064',
331: 1:      'question': '1308',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '4496416',
331: 1:      'question': '2784',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '1643664',
331: 1:      'question': '1868',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '1646481',
331: 1:      'question': '4289',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '644909',
331: 1:      'question': '8703',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '136810',
331: 1:      'question': '1690',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '44944',
331: 1:      'question': '2722',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '4994',
331: 1:      'question': '2332',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '251254',
331: 1:      'question': '5152',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '198181',
331: 1:      'question': '1399',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '498116',
331: 1:      'question': '794',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '8181036',
331: 1:      'question': '9906',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '412549',
331: 1:      'question': '2157',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '256436',
331: 1:      'question': '586',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '4940',
331: 1:      'question': '720',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '6436436',
331: 1:      'question': '8626',
331: 1:      'valid': true
331: 1:    }
331: 1:  ],
331: 1:  'info': [
331: 1:    '✅f(123) = 149',
331: 1:    '✅f(465) = 163625',
331: 1:    '✅f(0) = 0',
331: 1:    '✅f(5813) = 256419',
331: 1:    '✅f(7264) = 4943616',
331: 1:    '✅f(1369) = 193681',
331: 1:    '✅f(7952) = 4981254',
331: 1:    '✅f(9425) = 8116425',
331: 1:    '✅f(4759) = 16492581',
331: 1:    '✅f(4777) = 16494949',
331: 1:    '✅f(2040) = 40160',
331: 1:    '✅f(6176) = 3614936',
331: 1:    '✅f(1308) = 19064',
331: 1:    '✅f(2784) = 4496416',
331: 1:    '✅f(1868) = 1643664',
331: 1:    '✅f(4289) = 1646481',
331: 1:    '✅f(8703) = 644909',
331: 1:    '✅f(1690) = 136810',
331: 1:    '✅f(2722) = 44944',
331: 1:    '✅f(2332) = 4994',
331: 1:    '✅f(5152) = 251254',
331: 1:    '✅f(1399) = 198181',
331: 1:    '✅f(794) = 498116',
331: 1:    '✅f(9906) = 8181036',
331: 1:    '✅f(2157) = 412549',
331: 1:    '✅f(586) = 256436',
331: 1:    '✅f(720) = 4940',
331: 1:    '✅f(8626) = 6436436'
331: 1:  ],
331: 1:  'level': 11,
331: 1:  'questions': []
331: 1:}
331: 1:Scores: 15816
331: 1:Answer: message('StartNextLevel')
331: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
332: 1:BoardData {
332: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
332: 1:  'expectedAnswer': '5 1',
332: 1:  'history': [],
332: 1:  'info': ['❌f(1 2 3 4 5) = ??? != 5 1'],
332: 1:  'level': 12,
332: 1:  'nextQuestion': '1 2 3 4 5',
332: 1:  'questions': ['1 2 3 4 5']
332: 1:}
332: 1:Scores: 15816
332: 1:Answer: message('['5 1']')
332: 1:Fire Event: PassTest{complexity=16, testCount=23}
------------------------------------------
333: 1:BoardData {
333: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
333: 1:  'expectedAnswer': '5 -3',
333: 1:  'history': [{
333: 1:    'answer': '5 1',
333: 1:    'question': '1 2 3 4 5',
333: 1:    'valid': true
333: 1:  }],
333: 1:  'info': [
333: 1:    '✅f(1 2 3 4 5) = 5 1',
333: 1:    '❌f(1 2 -3 4 5) = ??? != 5 -3'
333: 1:  ],
333: 1:  'level': 12,
333: 1:  'nextQuestion': '1 2 -3 4 5',
333: 1:  'questions': [
333: 1:    '1 2 3 4 5',
333: 1:    '1 2 -3 4 5'
333: 1:  ]
333: 1:}
333: 1:Scores: 15822
333: 1:Answer: message('['5 1', '5 -3']')
333: 1:Fire Event: PassTest{complexity=16, testCount=23}
------------------------------------------
334: 1:BoardData {
334: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
334: 1:  'expectedAnswer': '9 -5',
334: 1:  'history': [
334: 1:    {
334: 1:      'answer': '5 1',
334: 1:      'question': '1 2 3 4 5',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': '5 -3',
334: 1:      'question': '1 2 -3 4 5',
334: 1:      'valid': true
334: 1:    }
334: 1:  ],
334: 1:  'info': [
334: 1:    '✅f(1 2 3 4 5) = 5 1',
334: 1:    '✅f(1 2 -3 4 5) = 5 -3',
334: 1:    '❌f(1 9 3 4 -5) = ??? != 9 -5'
334: 1:  ],
334: 1:  'level': 12,
334: 1:  'nextQuestion': '1 9 3 4 -5',
334: 1:  'questions': [
334: 1:    '1 2 3 4 5',
334: 1:    '1 2 -3 4 5',
334: 1:    '1 9 3 4 -5'
334: 1:  ]
334: 1:}
334: 1:Scores: 15828
334: 1:Answer: message('['5 1', '5 -3', '9 -5']')
334: 1:Fire Event: PassTest{complexity=16, testCount=23}
------------------------------------------
335: 1:BoardData {
335: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
335: 1:  'expectedAnswer': '42 -9',
335: 1:  'history': [
335: 1:    {
335: 1:      'answer': '5 1',
335: 1:      'question': '1 2 3 4 5',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': '5 -3',
335: 1:      'question': '1 2 -3 4 5',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': '9 -5',
335: 1:      'question': '1 9 3 4 -5',
335: 1:      'valid': true
335: 1:    }
335: 1:  ],
335: 1:  'info': [
335: 1:    '✅f(1 2 3 4 5) = 5 1',
335: 1:    '✅f(1 2 -3 4 5) = 5 -3',
335: 1:    '✅f(1 9 3 4 -5) = 9 -5',
335: 1:    '❌f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = ??? != 42 -9'
335: 1:  ],
335: 1:  'level': 12,
335: 1:  'nextQuestion': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
335: 1:  'questions': [
335: 1:    '1 2 3 4 5',
335: 1:    '1 2 -3 4 5',
335: 1:    '1 9 3 4 -5',
335: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4'
335: 1:  ]
335: 1:}
335: 1:Scores: 15834
335: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9']')
335: 1:Fire Event: PassTest{complexity=16, testCount=23}
------------------------------------------
336: 1:BoardData {
336: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
336: 1:  'expectedAnswer': '3 1',
336: 1:  'history': [
336: 1:    {
336: 1:      'answer': '5 1',
336: 1:      'question': '1 2 3 4 5',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': '5 -3',
336: 1:      'question': '1 2 -3 4 5',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': '9 -5',
336: 1:      'question': '1 9 3 4 -5',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': '42 -9',
336: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
336: 1:      'valid': true
336: 1:    }
336: 1:  ],
336: 1:  'info': [
336: 1:    '✅f(1 2 3 4 5) = 5 1',
336: 1:    '✅f(1 2 -3 4 5) = 5 -3',
336: 1:    '✅f(1 9 3 4 -5) = 9 -5',
336: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
336: 1:    '❌f(1 2 3) = ??? != 3 1'
336: 1:  ],
336: 1:  'level': 12,
336: 1:  'nextQuestion': '1 2 3',
336: 1:  'questions': [
336: 1:    '1 2 3 4 5',
336: 1:    '1 2 -3 4 5',
336: 1:    '1 9 3 4 -5',
336: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
336: 1:    '1 2 3'
336: 1:  ]
336: 1:}
336: 1:Scores: 15840
336: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1']')
336: 1:Fire Event: PassTest{complexity=16, testCount=23}
------------------------------------------
337: 1:BoardData {
337: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
337: 1:  'expectedAnswer': '1 1',
337: 1:  'history': [
337: 1:    {
337: 1:      'answer': '5 1',
337: 1:      'question': '1 2 3 4 5',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '5 -3',
337: 1:      'question': '1 2 -3 4 5',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '9 -5',
337: 1:      'question': '1 9 3 4 -5',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '42 -9',
337: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '3 1',
337: 1:      'question': '1 2 3',
337: 1:      'valid': true
337: 1:    }
337: 1:  ],
337: 1:  'info': [
337: 1:    '✅f(1 2 3 4 5) = 5 1',
337: 1:    '✅f(1 2 -3 4 5) = 5 -3',
337: 1:    '✅f(1 9 3 4 -5) = 9 -5',
337: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
337: 1:    '✅f(1 2 3) = 3 1',
337: 1:    '❌f(1) = ??? != 1 1'
337: 1:  ],
337: 1:  'level': 12,
337: 1:  'nextQuestion': '1',
337: 1:  'questions': [
337: 1:    '1 2 3 4 5',
337: 1:    '1 2 -3 4 5',
337: 1:    '1 9 3 4 -5',
337: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
337: 1:    '1 2 3',
337: 1:    '1'
337: 1:  ]
337: 1:}
337: 1:Scores: 15846
337: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1']')
337: 1:Fire Event: PassTest{complexity=16, testCount=23}
------------------------------------------
338: 1:BoardData {
338: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
338: 1:  'expectedAnswer': '-1 -1',
338: 1:  'history': [
338: 1:    {
338: 1:      'answer': '5 1',
338: 1:      'question': '1 2 3 4 5',
338: 1:      'valid': true
338: 1:    },
338: 1:    {
338: 1:      'answer': '5 -3',
338: 1:      'question': '1 2 -3 4 5',
338: 1:      'valid': true
338: 1:    },
338: 1:    {
338: 1:      'answer': '9 -5',
338: 1:      'question': '1 9 3 4 -5',
338: 1:      'valid': true
338: 1:    },
338: 1:    {
338: 1:      'answer': '42 -9',
338: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
338: 1:      'valid': true
338: 1:    },
338: 1:    {
338: 1:      'answer': '3 1',
338: 1:      'question': '1 2 3',
338: 1:      'valid': true
338: 1:    },
338: 1:    {
338: 1:      'answer': '1 1',
338: 1:      'question': '1',
338: 1:      'valid': true
338: 1:    }
338: 1:  ],
338: 1:  'info': [
338: 1:    '✅f(1 2 3 4 5) = 5 1',
338: 1:    '✅f(1 2 -3 4 5) = 5 -3',
338: 1:    '✅f(1 9 3 4 -5) = 9 -5',
338: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
338: 1:    '✅f(1 2 3) = 3 1',
338: 1:    '✅f(1) = 1 1',
338: 1:    '❌f(-1) = ??? != -1 -1'
338: 1:  ],
338: 1:  'level': 12,
338: 1:  'nextQuestion': '-1',
338: 1:  'questions': [
338: 1:    '1 2 3 4 5',
338: 1:    '1 2 -3 4 5',
338: 1:    '1 9 3 4 -5',
338: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
338: 1:    '1 2 3',
338: 1:    '1',
338: 1:    '-1'
338: 1:  ]
338: 1:}
338: 1:Scores: 15852
338: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1']')
338: 1:Fire Event: PassTest{complexity=16, testCount=23}
------------------------------------------
339: 1:BoardData {
339: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
339: 1:  'expectedAnswer': '0 -1',
339: 1:  'history': [
339: 1:    {
339: 1:      'answer': '5 1',
339: 1:      'question': '1 2 3 4 5',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '5 -3',
339: 1:      'question': '1 2 -3 4 5',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '9 -5',
339: 1:      'question': '1 9 3 4 -5',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '42 -9',
339: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '3 1',
339: 1:      'question': '1 2 3',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '1 1',
339: 1:      'question': '1',
339: 1:      'valid': true
339: 1:    },
339: 1:    {
339: 1:      'answer': '-1 -1',
339: 1:      'question': '-1',
339: 1:      'valid': true
339: 1:    }
339: 1:  ],
339: 1:  'info': [
339: 1:    '✅f(1 2 3 4 5) = 5 1',
339: 1:    '✅f(1 2 -3 4 5) = 5 -3',
339: 1:    '✅f(1 9 3 4 -5) = 9 -5',
339: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
339: 1:    '✅f(1 2 3) = 3 1',
339: 1:    '✅f(1) = 1 1',
339: 1:    '✅f(-1) = -1 -1',
339: 1:    '❌f(-1 -1 0) = ??? != 0 -1'
339: 1:  ],
339: 1:  'level': 12,
339: 1:  'nextQuestion': '-1 -1 0',
339: 1:  'questions': [
339: 1:    '1 2 3 4 5',
339: 1:    '1 2 -3 4 5',
339: 1:    '1 9 3 4 -5',
339: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
339: 1:    '1 2 3',
339: 1:    '1',
339: 1:    '-1',
339: 1:    '-1 -1 0'
339: 1:  ]
339: 1:}
339: 1:Scores: 15858
339: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1']')
339: 1:Fire Event: PassTest{complexity=16, testCount=23}
------------------------------------------
340: 1:BoardData {
340: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
340: 1:  'expectedAnswer': '1 0',
340: 1:  'history': [
340: 1:    {
340: 1:      'answer': '5 1',
340: 1:      'question': '1 2 3 4 5',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '5 -3',
340: 1:      'question': '1 2 -3 4 5',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '9 -5',
340: 1:      'question': '1 9 3 4 -5',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '42 -9',
340: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '3 1',
340: 1:      'question': '1 2 3',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '1 1',
340: 1:      'question': '1',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '-1 -1',
340: 1:      'question': '-1',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': '0 -1',
340: 1:      'question': '-1 -1 0',
340: 1:      'valid': true
340: 1:    }
340: 1:  ],
340: 1:  'info': [
340: 1:    '✅f(1 2 3 4 5) = 5 1',
340: 1:    '✅f(1 2 -3 4 5) = 5 -3',
340: 1:    '✅f(1 9 3 4 -5) = 9 -5',
340: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
340: 1:    '✅f(1 2 3) = 3 1',
340: 1:    '✅f(1) = 1 1',
340: 1:    '✅f(-1) = -1 -1',
340: 1:    '✅f(-1 -1 0) = 0 -1',
340: 1:    '❌f(1 1 0) = ??? != 1 0'
340: 1:  ],
340: 1:  'level': 12,
340: 1:  'nextQuestion': '1 1 0',
340: 1:  'questions': [
340: 1:    '1 2 3 4 5',
340: 1:    '1 2 -3 4 5',
340: 1:    '1 9 3 4 -5',
340: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
340: 1:    '1 2 3',
340: 1:    '1',
340: 1:    '-1',
340: 1:    '-1 -1 0',
340: 1:    '1 1 0'
340: 1:  ]
340: 1:}
340: 1:Scores: 15864
340: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0']')
340: 1:Fire Event: PassTest{complexity=16, testCount=23}
------------------------------------------
341: 1:BoardData {
341: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
341: 1:  'expectedAnswer': '-1 -1',
341: 1:  'history': [
341: 1:    {
341: 1:      'answer': '5 1',
341: 1:      'question': '1 2 3 4 5',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '5 -3',
341: 1:      'question': '1 2 -3 4 5',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '9 -5',
341: 1:      'question': '1 9 3 4 -5',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '42 -9',
341: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '3 1',
341: 1:      'question': '1 2 3',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '1 1',
341: 1:      'question': '1',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '-1 -1',
341: 1:      'question': '-1',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '0 -1',
341: 1:      'question': '-1 -1 0',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': '1 0',
341: 1:      'question': '1 1 0',
341: 1:      'valid': true
341: 1:    }
341: 1:  ],
341: 1:  'info': [
341: 1:    '✅f(1 2 3 4 5) = 5 1',
341: 1:    '✅f(1 2 -3 4 5) = 5 -3',
341: 1:    '✅f(1 9 3 4 -5) = 9 -5',
341: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
341: 1:    '✅f(1 2 3) = 3 1',
341: 1:    '✅f(1) = 1 1',
341: 1:    '✅f(-1) = -1 -1',
341: 1:    '✅f(-1 -1 0) = 0 -1',
341: 1:    '✅f(1 1 0) = 1 0',
341: 1:    '❌f(-1 -1) = ??? != -1 -1'
341: 1:  ],
341: 1:  'level': 12,
341: 1:  'nextQuestion': '-1 -1',
341: 1:  'questions': [
341: 1:    '1 2 3 4 5',
341: 1:    '1 2 -3 4 5',
341: 1:    '1 9 3 4 -5',
341: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
341: 1:    '1 2 3',
341: 1:    '1',
341: 1:    '-1',
341: 1:    '-1 -1 0',
341: 1:    '1 1 0',
341: 1:    '-1 -1'
341: 1:  ]
341: 1:}
341: 1:Scores: 15870
341: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0', '-1 -1']')
341: 1:Fire Event: PassTest{complexity=16, testCount=23}
------------------------------------------
342: 1:BoardData {
342: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
342: 1:  'expectedAnswer': '1 -1',
342: 1:  'history': [
342: 1:    {
342: 1:      'answer': '5 1',
342: 1:      'question': '1 2 3 4 5',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '5 -3',
342: 1:      'question': '1 2 -3 4 5',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '9 -5',
342: 1:      'question': '1 9 3 4 -5',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '42 -9',
342: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '3 1',
342: 1:      'question': '1 2 3',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '1 1',
342: 1:      'question': '1',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '-1 -1',
342: 1:      'question': '-1',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '0 -1',
342: 1:      'question': '-1 -1 0',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '1 0',
342: 1:      'question': '1 1 0',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': '-1 -1',
342: 1:      'question': '-1 -1',
342: 1:      'valid': true
342: 1:    }
342: 1:  ],
342: 1:  'info': [
342: 1:    '✅f(1 2 3 4 5) = 5 1',
342: 1:    '✅f(1 2 -3 4 5) = 5 -3',
342: 1:    '✅f(1 9 3 4 -5) = 9 -5',
342: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
342: 1:    '✅f(1 2 3) = 3 1',
342: 1:    '✅f(1) = 1 1',
342: 1:    '✅f(-1) = -1 -1',
342: 1:    '✅f(-1 -1 0) = 0 -1',
342: 1:    '✅f(1 1 0) = 1 0',
342: 1:    '✅f(-1 -1) = -1 -1',
342: 1:    '❌f(1 -1 0) = ??? != 1 -1'
342: 1:  ],
342: 1:  'level': 12,
342: 1:  'nextQuestion': '1 -1 0',
342: 1:  'questions': [
342: 1:    '1 2 3 4 5',
342: 1:    '1 2 -3 4 5',
342: 1:    '1 9 3 4 -5',
342: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
342: 1:    '1 2 3',
342: 1:    '1',
342: 1:    '-1',
342: 1:    '-1 -1 0',
342: 1:    '1 1 0',
342: 1:    '-1 -1',
342: 1:    '1 -1 0'
342: 1:  ]
342: 1:}
342: 1:Scores: 15876
342: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0', '-1 -1', '1 -1']')
342: 1:Fire Event: PassTest{complexity=16, testCount=23}
------------------------------------------
343: 1:BoardData {
343: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
343: 1:  'expectedAnswer': '10 -20',
343: 1:  'history': [
343: 1:    {
343: 1:      'answer': '5 1',
343: 1:      'question': '1 2 3 4 5',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '5 -3',
343: 1:      'question': '1 2 -3 4 5',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '9 -5',
343: 1:      'question': '1 9 3 4 -5',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '42 -9',
343: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '3 1',
343: 1:      'question': '1 2 3',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '1 1',
343: 1:      'question': '1',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '-1 -1',
343: 1:      'question': '-1',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '0 -1',
343: 1:      'question': '-1 -1 0',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '1 0',
343: 1:      'question': '1 1 0',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '-1 -1',
343: 1:      'question': '-1 -1',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': '1 -1',
343: 1:      'question': '1 -1 0',
343: 1:      'valid': true
343: 1:    }
343: 1:  ],
343: 1:  'info': [
343: 1:    '✅f(1 2 3 4 5) = 5 1',
343: 1:    '✅f(1 2 -3 4 5) = 5 -3',
343: 1:    '✅f(1 9 3 4 -5) = 9 -5',
343: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
343: 1:    '✅f(1 2 3) = 3 1',
343: 1:    '✅f(1) = 1 1',
343: 1:    '✅f(-1) = -1 -1',
343: 1:    '✅f(-1 -1 0) = 0 -1',
343: 1:    '✅f(1 1 0) = 1 0',
343: 1:    '✅f(-1 -1) = -1 -1',
343: 1:    '✅f(1 -1 0) = 1 -1',
343: 1:    '❌f(10 2 -1 -20) = ??? != 10 -20'
343: 1:  ],
343: 1:  'level': 12,
343: 1:  'nextQuestion': '10 2 -1 -20',
343: 1:  'questions': [
343: 1:    '1 2 3 4 5',
343: 1:    '1 2 -3 4 5',
343: 1:    '1 9 3 4 -5',
343: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
343: 1:    '1 2 3',
343: 1:    '1',
343: 1:    '-1',
343: 1:    '-1 -1 0',
343: 1:    '1 1 0',
343: 1:    '-1 -1',
343: 1:    '1 -1 0',
343: 1:    '10 2 -1 -20'
343: 1:  ]
343: 1:}
343: 1:Scores: 15882
343: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0', '-1 -1', '1 -1', '10 -20']')
343: 1:Fire Event: PassTest{complexity=16, testCount=23}
------------------------------------------
344: 1:BoardData {
344: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
344: 1:  'expectedAnswer': '805 -739',
344: 1:  'history': [
344: 1:    {
344: 1:      'answer': '5 1',
344: 1:      'question': '1 2 3 4 5',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '5 -3',
344: 1:      'question': '1 2 -3 4 5',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '9 -5',
344: 1:      'question': '1 9 3 4 -5',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '42 -9',
344: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '3 1',
344: 1:      'question': '1 2 3',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '1 1',
344: 1:      'question': '1',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '-1 -1',
344: 1:      'question': '-1',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '0 -1',
344: 1:      'question': '-1 -1 0',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '1 0',
344: 1:      'question': '1 1 0',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '-1 -1',
344: 1:      'question': '-1 -1',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '1 -1',
344: 1:      'question': '1 -1 0',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': '10 -20',
344: 1:      'question': '10 2 -1 -20',
344: 1:      'valid': true
344: 1:    }
344: 1:  ],
344: 1:  'info': [
344: 1:    '✅f(1 2 3 4 5) = 5 1',
344: 1:    '✅f(1 2 -3 4 5) = 5 -3',
344: 1:    '✅f(1 9 3 4 -5) = 9 -5',
344: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
344: 1:    '✅f(1 2 3) = 3 1',
344: 1:    '✅f(1) = 1 1',
344: 1:    '✅f(-1) = -1 -1',
344: 1:    '✅f(-1 -1 0) = 0 -1',
344: 1:    '✅f(1 1 0) = 1 0',
344: 1:    '✅f(-1 -1) = -1 -1',
344: 1:    '✅f(1 -1 0) = 1 -1',
344: 1:    '✅f(10 2 -1 -20) = 10 -20',
344: 1:    '❌f(452 561 -686 679 476 -515 805 -739 571 791) = ??? != 805 -739'
344: 1:  ],
344: 1:  'level': 12,
344: 1:  'nextQuestion': '452 561 -686 679 476 -515 805 -739 571 791',
344: 1:  'questions': [
344: 1:    '1 2 3 4 5',
344: 1:    '1 2 -3 4 5',
344: 1:    '1 9 3 4 -5',
344: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
344: 1:    '1 2 3',
344: 1:    '1',
344: 1:    '-1',
344: 1:    '-1 -1 0',
344: 1:    '1 1 0',
344: 1:    '-1 -1',
344: 1:    '1 -1 0',
344: 1:    '10 2 -1 -20',
344: 1:    '452 561 -686 679 476 -515 805 -739 571 791'
344: 1:  ]
344: 1:}
344: 1:Scores: 15888
344: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0', '-1 -1', '1 -1', '10 -20', '805 -739']')
344: 1:Fire Event: PassTest{complexity=16, testCount=23}
------------------------------------------
345: 1:BoardData {
345: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
345: 1:  'expectedAnswer': '728 -983',
345: 1:  'history': [
345: 1:    {
345: 1:      'answer': '5 1',
345: 1:      'question': '1 2 3 4 5',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '5 -3',
345: 1:      'question': '1 2 -3 4 5',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '9 -5',
345: 1:      'question': '1 9 3 4 -5',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '42 -9',
345: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '3 1',
345: 1:      'question': '1 2 3',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '1 1',
345: 1:      'question': '1',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '-1 -1',
345: 1:      'question': '-1',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '0 -1',
345: 1:      'question': '-1 -1 0',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '1 0',
345: 1:      'question': '1 1 0',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '-1 -1',
345: 1:      'question': '-1 -1',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '1 -1',
345: 1:      'question': '1 -1 0',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '10 -20',
345: 1:      'question': '10 2 -1 -20',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': '805 -739',
345: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
345: 1:      'valid': true
345: 1:    }
345: 1:  ],
345: 1:  'info': [
345: 1:    '✅f(1 2 3 4 5) = 5 1',
345: 1:    '✅f(1 2 -3 4 5) = 5 -3',
345: 1:    '✅f(1 9 3 4 -5) = 9 -5',
345: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
345: 1:    '✅f(1 2 3) = 3 1',
345: 1:    '✅f(1) = 1 1',
345: 1:    '✅f(-1) = -1 -1',
345: 1:    '✅f(-1 -1 0) = 0 -1',
345: 1:    '✅f(1 1 0) = 1 0',
345: 1:    '✅f(-1 -1) = -1 -1',
345: 1:    '✅f(1 -1 0) = 1 -1',
345: 1:    '✅f(10 2 -1 -20) = 10 -20',
345: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = 805 -739',
345: 1:    '❌f(-983 -111 -332 -973 47 728) = ??? != 728 -983'
345: 1:  ],
345: 1:  'level': 12,
345: 1:  'nextQuestion': '-983 -111 -332 -973 47 728',
345: 1:  'questions': [
345: 1:    '1 2 3 4 5',
345: 1:    '1 2 -3 4 5',
345: 1:    '1 9 3 4 -5',
345: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
345: 1:    '1 2 3',
345: 1:    '1',
345: 1:    '-1',
345: 1:    '-1 -1 0',
345: 1:    '1 1 0',
345: 1:    '-1 -1',
345: 1:    '1 -1 0',
345: 1:    '10 2 -1 -20',
345: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
345: 1:    '-983 -111 -332 -973 47 728'
345: 1:  ]
345: 1:}
345: 1:Scores: 15894
345: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0', '-1 -1', '1 -1', '10 -20', '805 -739', '728 -983']')
345: 1:Fire Event: PassTest{complexity=16, testCount=23}
------------------------------------------
346: 1:BoardData {
346: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
346: 1:  'expectedAnswer': '268 -779',
346: 1:  'history': [
346: 1:    {
346: 1:      'answer': '5 1',
346: 1:      'question': '1 2 3 4 5',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '5 -3',
346: 1:      'question': '1 2 -3 4 5',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '9 -5',
346: 1:      'question': '1 9 3 4 -5',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '42 -9',
346: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '3 1',
346: 1:      'question': '1 2 3',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '1 1',
346: 1:      'question': '1',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '-1 -1',
346: 1:      'question': '-1',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '0 -1',
346: 1:      'question': '-1 -1 0',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '1 0',
346: 1:      'question': '1 1 0',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '-1 -1',
346: 1:      'question': '-1 -1',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '1 -1',
346: 1:      'question': '1 -1 0',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '10 -20',
346: 1:      'question': '10 2 -1 -20',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '805 -739',
346: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': '728 -983',
346: 1:      'question': '-983 -111 -332 -973 47 728',
346: 1:      'valid': true
346: 1:    }
346: 1:  ],
346: 1:  'info': [
346: 1:    '✅f(1 2 3 4 5) = 5 1',
346: 1:    '✅f(1 2 -3 4 5) = 5 -3',
346: 1:    '✅f(1 9 3 4 -5) = 9 -5',
346: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
346: 1:    '✅f(1 2 3) = 3 1',
346: 1:    '✅f(1) = 1 1',
346: 1:    '✅f(-1) = -1 -1',
346: 1:    '✅f(-1 -1 0) = 0 -1',
346: 1:    '✅f(1 1 0) = 1 0',
346: 1:    '✅f(-1 -1) = -1 -1',
346: 1:    '✅f(1 -1 0) = 1 -1',
346: 1:    '✅f(10 2 -1 -20) = 10 -20',
346: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = 805 -739',
346: 1:    '✅f(-983 -111 -332 -973 47 728) = 728 -983',
346: 1:    '❌f(268 -359 -513 -9 -86 -142 -779) = ??? != 268 -779'
346: 1:  ],
346: 1:  'level': 12,
346: 1:  'nextQuestion': '268 -359 -513 -9 -86 -142 -779',
346: 1:  'questions': [
346: 1:    '1 2 3 4 5',
346: 1:    '1 2 -3 4 5',
346: 1:    '1 9 3 4 -5',
346: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
346: 1:    '1 2 3',
346: 1:    '1',
346: 1:    '-1',
346: 1:    '-1 -1 0',
346: 1:    '1 1 0',
346: 1:    '-1 -1',
346: 1:    '1 -1 0',
346: 1:    '10 2 -1 -20',
346: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
346: 1:    '-983 -111 -332 -973 47 728',
346: 1:    '268 -359 -513 -9 -86 -142 -779'
346: 1:  ]
346: 1:}
346: 1:Scores: 15900
346: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0', '-1 -1', '1 -1', '10 -20', '805 -739', '728 -983', '268 -779']')
346: 1:Fire Event: PassTest{complexity=16, testCount=23}
------------------------------------------
347: 1:BoardData {
347: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
347: 1:  'expectedAnswer': '888 -937',
347: 1:  'history': [
347: 1:    {
347: 1:      'answer': '5 1',
347: 1:      'question': '1 2 3 4 5',
347: 1:      'valid': true
347: 1:    },
347: 1:    {
347: 1:      'answer': '5 -3',
347: 1:      'question': '1 2 -3 4 5',
347: 1:      'valid': true
347: 1:    },
347: 1:    {
347: 1:      'answer': '9 -5',
347: 1:      'question': '1 9 3 4 -5',
347: 1:      'valid': true
347: 1:    },
347: 1:    {
347: 1:      'answer': '42 -9',
347: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
347: 1:      'valid': true
347: 1:    },
347: 1:    {
347: 1:      'answer': '3 1',
347: 1:      'question': '1 2 3',
347: 1:      'valid': true
347: 1:    },
347: 1:    {
347: 1:      'answer': '1 1',
347: 1:      'question': '1',
347: 1:      'valid': true
347: 1:    },
347: 1:    {
347: 1:      'answer': '-1 -1',
347: 1:      'question': '-1',
347: 1:      'valid': true
347: 1:    },
347: 1:    {
347: 1:      'answer': '0 -1',
347: 1:      'question': '-1 -1 0',
347: 1:      'valid': true
347: 1:    },
347: 1:    {
347: 1:      'answer': '1 0',
347: 1:      'question': '1 1 0',
347: 1:      'valid': true
347: 1:    },
347: 1:    {
347: 1:      'answer': '-1 -1',
347: 1:      'question': '-1 -1',
347: 1:      'valid': true
347: 1:    },
347: 1:    {
347: 1:      'answer': '1 -1',
347: 1:      'question': '1 -1 0',
347: 1:      'valid': true
347: 1:    },
347: 1:    {
347: 1:      'answer': '10 -20',
347: 1:      'question': '10 2 -1 -20',
347: 1:      'valid': true
347: 1:    },
347: 1:    {
347: 1:      'answer': '805 -739',
347: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
347: 1:      'valid': true
347: 1:    },
347: 1:    {
347: 1:      'answer': '728 -983',
347: 1:      'question': '-983 -111 -332 -973 47 728',
347: 1:      'valid': true
347: 1:    },
347: 1:    {
347: 1:      'answer': '268 -779',
347: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
347: 1:      'valid': true
347: 1:    }
347: 1:  ],
347: 1:  'info': [
347: 1:    '✅f(1 2 3 4 5) = 5 1',
347: 1:    '✅f(1 2 -3 4 5) = 5 -3',
347: 1:    '✅f(1 9 3 4 -5) = 9 -5',
347: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
347: 1:    '✅f(1 2 3) = 3 1',
347: 1:    '✅f(1) = 1 1',
347: 1:    '✅f(-1) = -1 -1',
347: 1:    '✅f(-1 -1 0) = 0 -1',
347: 1:    '✅f(1 1 0) = 1 0',
347: 1:    '✅f(-1 -1) = -1 -1',
347: 1:    '✅f(1 -1 0) = 1 -1',
347: 1:    '✅f(10 2 -1 -20) = 10 -20',
347: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = 805 -739',
347: 1:    '✅f(-983 -111 -332 -973 47 728) = 728 -983',
347: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = 268 -779',
347: 1:    '❌f(556 32 866 -730 -367 -937 367 888 43 -510 773) = ??? != 888 -937'
347: 1:  ],
347: 1:  'level': 12,
347: 1:  'nextQuestion': '556 32 866 -730 -367 -937 367 888 43 -510 773',
347: 1:  'questions': [
347: 1:    '1 2 3 4 5',
347: 1:    '1 2 -3 4 5',
347: 1:    '1 9 3 4 -5',
347: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
347: 1:    '1 2 3',
347: 1:    '1',
347: 1:    '-1',
347: 1:    '-1 -1 0',
347: 1:    '1 1 0',
347: 1:    '-1 -1',
347: 1:    '1 -1 0',
347: 1:    '10 2 -1 -20',
347: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
347: 1:    '-983 -111 -332 -973 47 728',
347: 1:    '268 -359 -513 -9 -86 -142 -779',
347: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773'
347: 1:  ]
347: 1:}
347: 1:Scores: 15906
347: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0', '-1 -1', '1 -1', '10 -20', '805 -739', '728 -983', '268 -779', '888 -937']')
347: 1:Fire Event: PassTest{complexity=16, testCount=23}
------------------------------------------
348: 1:BoardData {
348: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
348: 1:  'expectedAnswer': '949 -594',
348: 1:  'history': [
348: 1:    {
348: 1:      'answer': '5 1',
348: 1:      'question': '1 2 3 4 5',
348: 1:      'valid': true
348: 1:    },
348: 1:    {
348: 1:      'answer': '5 -3',
348: 1:      'question': '1 2 -3 4 5',
348: 1:      'valid': true
348: 1:    },
348: 1:    {
348: 1:      'answer': '9 -5',
348: 1:      'question': '1 9 3 4 -5',
348: 1:      'valid': true
348: 1:    },
348: 1:    {
348: 1:      'answer': '42 -9',
348: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
348: 1:      'valid': true
348: 1:    },
348: 1:    {
348: 1:      'answer': '3 1',
348: 1:      'question': '1 2 3',
348: 1:      'valid': true
348: 1:    },
348: 1:    {
348: 1:      'answer': '1 1',
348: 1:      'question': '1',
348: 1:      'valid': true
348: 1:    },
348: 1:    {
348: 1:      'answer': '-1 -1',
348: 1:      'question': '-1',
348: 1:      'valid': true
348: 1:    },
348: 1:    {
348: 1:      'answer': '0 -1',
348: 1:      'question': '-1 -1 0',
348: 1:      'valid': true
348: 1:    },
348: 1:    {
348: 1:      'answer': '1 0',
348: 1:      'question': '1 1 0',
348: 1:      'valid': true
348: 1:    },
348: 1:    {
348: 1:      'answer': '-1 -1',
348: 1:      'question': '-1 -1',
348: 1:      'valid': true
348: 1:    },
348: 1:    {
348: 1:      'answer': '1 -1',
348: 1:      'question': '1 -1 0',
348: 1:      'valid': true
348: 1:    },
348: 1:    {
348: 1:      'answer': '10 -20',
348: 1:      'question': '10 2 -1 -20',
348: 1:      'valid': true
348: 1:    },
348: 1:    {
348: 1:      'answer': '805 -739',
348: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
348: 1:      'valid': true
348: 1:    },
348: 1:    {
348: 1:      'answer': '728 -983',
348: 1:      'question': '-983 -111 -332 -973 47 728',
348: 1:      'valid': true
348: 1:    },
348: 1:    {
348: 1:      'answer': '268 -779',
348: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
348: 1:      'valid': true
348: 1:    },
348: 1:    {
348: 1:      'answer': '888 -937',
348: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
348: 1:      'valid': true
348: 1:    }
348: 1:  ],
348: 1:  'info': [
348: 1:    '✅f(1 2 3 4 5) = 5 1',
348: 1:    '✅f(1 2 -3 4 5) = 5 -3',
348: 1:    '✅f(1 9 3 4 -5) = 9 -5',
348: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
348: 1:    '✅f(1 2 3) = 3 1',
348: 1:    '✅f(1) = 1 1',
348: 1:    '✅f(-1) = -1 -1',
348: 1:    '✅f(-1 -1 0) = 0 -1',
348: 1:    '✅f(1 1 0) = 1 0',
348: 1:    '✅f(-1 -1) = -1 -1',
348: 1:    '✅f(1 -1 0) = 1 -1',
348: 1:    '✅f(10 2 -1 -20) = 10 -20',
348: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = 805 -739',
348: 1:    '✅f(-983 -111 -332 -973 47 728) = 728 -983',
348: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = 268 -779',
348: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = 888 -937',
348: 1:    '❌f(646 261 609 -82 949 526 -449 -594 894) = ??? != 949 -594'
348: 1:  ],
348: 1:  'level': 12,
348: 1:  'nextQuestion': '646 261 609 -82 949 526 -449 -594 894',
348: 1:  'questions': [
348: 1:    '1 2 3 4 5',
348: 1:    '1 2 -3 4 5',
348: 1:    '1 9 3 4 -5',
348: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
348: 1:    '1 2 3',
348: 1:    '1',
348: 1:    '-1',
348: 1:    '-1 -1 0',
348: 1:    '1 1 0',
348: 1:    '-1 -1',
348: 1:    '1 -1 0',
348: 1:    '10 2 -1 -20',
348: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
348: 1:    '-983 -111 -332 -973 47 728',
348: 1:    '268 -359 -513 -9 -86 -142 -779',
348: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773',
348: 1:    '646 261 609 -82 949 526 -449 -594 894'
348: 1:  ]
348: 1:}
348: 1:Scores: 15912
348: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0', '-1 -1', '1 -1', '10 -20', '805 -739', '728 -983', '268 -779', '888 -937', '949 -594']')
348: 1:Fire Event: PassTest{complexity=16, testCount=23}
------------------------------------------
349: 1:BoardData {
349: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
349: 1:  'expectedAnswer': '909 -950',
349: 1:  'history': [
349: 1:    {
349: 1:      'answer': '5 1',
349: 1:      'question': '1 2 3 4 5',
349: 1:      'valid': true
349: 1:    },
349: 1:    {
349: 1:      'answer': '5 -3',
349: 1:      'question': '1 2 -3 4 5',
349: 1:      'valid': true
349: 1:    },
349: 1:    {
349: 1:      'answer': '9 -5',
349: 1:      'question': '1 9 3 4 -5',
349: 1:      'valid': true
349: 1:    },
349: 1:    {
349: 1:      'answer': '42 -9',
349: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
349: 1:      'valid': true
349: 1:    },
349: 1:    {
349: 1:      'answer': '3 1',
349: 1:      'question': '1 2 3',
349: 1:      'valid': true
349: 1:    },
349: 1:    {
349: 1:      'answer': '1 1',
349: 1:      'question': '1',
349: 1:      'valid': true
349: 1:    },
349: 1:    {
349: 1:      'answer': '-1 -1',
349: 1:      'question': '-1',
349: 1:      'valid': true
349: 1:    },
349: 1:    {
349: 1:      'answer': '0 -1',
349: 1:      'question': '-1 -1 0',
349: 1:      'valid': true
349: 1:    },
349: 1:    {
349: 1:      'answer': '1 0',
349: 1:      'question': '1 1 0',
349: 1:      'valid': true
349: 1:    },
349: 1:    {
349: 1:      'answer': '-1 -1',
349: 1:      'question': '-1 -1',
349: 1:      'valid': true
349: 1:    },
349: 1:    {
349: 1:      'answer': '1 -1',
349: 1:      'question': '1 -1 0',
349: 1:      'valid': true
349: 1:    },
349: 1:    {
349: 1:      'answer': '10 -20',
349: 1:      'question': '10 2 -1 -20',
349: 1:      'valid': true
349: 1:    },
349: 1:    {
349: 1:      'answer': '805 -739',
349: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
349: 1:      'valid': true
349: 1:    },
349: 1:    {
349: 1:      'answer': '728 -983',
349: 1:      'question': '-983 -111 -332 -973 47 728',
349: 1:      'valid': true
349: 1:    },
349: 1:    {
349: 1:      'answer': '268 -779',
349: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
349: 1:      'valid': true
349: 1:    },
349: 1:    {
349: 1:      'answer': '888 -937',
349: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
349: 1:      'valid': true
349: 1:    },
349: 1:    {
349: 1:      'answer': '949 -594',
349: 1:      'question': '646 261 609 -82 949 526 -449 -594 894',
349: 1:      'valid': true
349: 1:    }
349: 1:  ],
349: 1:  'info': [
349: 1:    '✅f(1 2 3 4 5) = 5 1',
349: 1:    '✅f(1 2 -3 4 5) = 5 -3',
349: 1:    '✅f(1 9 3 4 -5) = 9 -5',
349: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
349: 1:    '✅f(1 2 3) = 3 1',
349: 1:    '✅f(1) = 1 1',
349: 1:    '✅f(-1) = -1 -1',
349: 1:    '✅f(-1 -1 0) = 0 -1',
349: 1:    '✅f(1 1 0) = 1 0',
349: 1:    '✅f(-1 -1) = -1 -1',
349: 1:    '✅f(1 -1 0) = 1 -1',
349: 1:    '✅f(10 2 -1 -20) = 10 -20',
349: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = 805 -739',
349: 1:    '✅f(-983 -111 -332 -973 47 728) = 728 -983',
349: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = 268 -779',
349: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = 888 -937',
349: 1:    '✅f(646 261 609 -82 949 526 -449 -594 894) = 949 -594',
349: 1:    '❌f(-950 909 424 834 -579 -275 -901 444) = ??? != 909 -950'
349: 1:  ],
349: 1:  'level': 12,
349: 1:  'nextQuestion': '-950 909 424 834 -579 -275 -901 444',
349: 1:  'questions': [
349: 1:    '1 2 3 4 5',
349: 1:    '1 2 -3 4 5',
349: 1:    '1 9 3 4 -5',
349: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
349: 1:    '1 2 3',
349: 1:    '1',
349: 1:    '-1',
349: 1:    '-1 -1 0',
349: 1:    '1 1 0',
349: 1:    '-1 -1',
349: 1:    '1 -1 0',
349: 1:    '10 2 -1 -20',
349: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
349: 1:    '-983 -111 -332 -973 47 728',
349: 1:    '268 -359 -513 -9 -86 -142 -779',
349: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773',
349: 1:    '646 261 609 -82 949 526 -449 -594 894',
349: 1:    '-950 909 424 834 -579 -275 -901 444'
349: 1:  ]
349: 1:}
349: 1:Scores: 15918
349: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0', '-1 -1', '1 -1', '10 -20', '805 -739', '728 -983', '268 -779', '888 -937', '949 -594', '909 -950']')
349: 1:Fire Event: PassTest{complexity=16, testCount=23}
------------------------------------------
350: 1:BoardData {
350: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
350: 1:  'expectedAnswer': '705 -879',
350: 1:  'history': [
350: 1:    {
350: 1:      'answer': '5 1',
350: 1:      'question': '1 2 3 4 5',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': '5 -3',
350: 1:      'question': '1 2 -3 4 5',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': '9 -5',
350: 1:      'question': '1 9 3 4 -5',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': '42 -9',
350: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': '3 1',
350: 1:      'question': '1 2 3',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': '1 1',
350: 1:      'question': '1',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': '-1 -1',
350: 1:      'question': '-1',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': '0 -1',
350: 1:      'question': '-1 -1 0',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': '1 0',
350: 1:      'question': '1 1 0',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': '-1 -1',
350: 1:      'question': '-1 -1',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': '1 -1',
350: 1:      'question': '1 -1 0',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': '10 -20',
350: 1:      'question': '10 2 -1 -20',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': '805 -739',
350: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': '728 -983',
350: 1:      'question': '-983 -111 -332 -973 47 728',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': '268 -779',
350: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': '888 -937',
350: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': '949 -594',
350: 1:      'question': '646 261 609 -82 949 526 -449 -594 894',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': '909 -950',
350: 1:      'question': '-950 909 424 834 -579 -275 -901 444',
350: 1:      'valid': true
350: 1:    }
350: 1:  ],
350: 1:  'info': [
350: 1:    '✅f(1 2 3 4 5) = 5 1',
350: 1:    '✅f(1 2 -3 4 5) = 5 -3',
350: 1:    '✅f(1 9 3 4 -5) = 9 -5',
350: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
350: 1:    '✅f(1 2 3) = 3 1',
350: 1:    '✅f(1) = 1 1',
350: 1:    '✅f(-1) = -1 -1',
350: 1:    '✅f(-1 -1 0) = 0 -1',
350: 1:    '✅f(1 1 0) = 1 0',
350: 1:    '✅f(-1 -1) = -1 -1',
350: 1:    '✅f(1 -1 0) = 1 -1',
350: 1:    '✅f(10 2 -1 -20) = 10 -20',
350: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = 805 -739',
350: 1:    '✅f(-983 -111 -332 -973 47 728) = 728 -983',
350: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = 268 -779',
350: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = 888 -937',
350: 1:    '✅f(646 261 609 -82 949 526 -449 -594 894) = 949 -594',
350: 1:    '✅f(-950 909 424 834 -579 -275 -901 444) = 909 -950',
350: 1:    '❌f(-857 43 444 158 510 -879 -350 705) = ??? != 705 -879'
350: 1:  ],
350: 1:  'level': 12,
350: 1:  'nextQuestion': '-857 43 444 158 510 -879 -350 705',
350: 1:  'questions': [
350: 1:    '1 2 3 4 5',
350: 1:    '1 2 -3 4 5',
350: 1:    '1 9 3 4 -5',
350: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
350: 1:    '1 2 3',
350: 1:    '1',
350: 1:    '-1',
350: 1:    '-1 -1 0',
350: 1:    '1 1 0',
350: 1:    '-1 -1',
350: 1:    '1 -1 0',
350: 1:    '10 2 -1 -20',
350: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
350: 1:    '-983 -111 -332 -973 47 728',
350: 1:    '268 -359 -513 -9 -86 -142 -779',
350: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773',
350: 1:    '646 261 609 -82 949 526 -449 -594 894',
350: 1:    '-950 909 424 834 -579 -275 -901 444',
350: 1:    '-857 43 444 158 510 -879 -350 705'
350: 1:  ]
350: 1:}
350: 1:Scores: 15924
350: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0', '-1 -1', '1 -1', '10 -20', '805 -739', '728 -983', '268 -779', '888 -937', '949 -594', '909 -950', '705 -879']')
350: 1:Fire Event: PassTest{complexity=16, testCount=23}
------------------------------------------
351: 1:BoardData {
351: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
351: 1:  'expectedAnswer': '980 -996',
351: 1:  'history': [
351: 1:    {
351: 1:      'answer': '5 1',
351: 1:      'question': '1 2 3 4 5',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': '5 -3',
351: 1:      'question': '1 2 -3 4 5',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': '9 -5',
351: 1:      'question': '1 9 3 4 -5',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': '42 -9',
351: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': '3 1',
351: 1:      'question': '1 2 3',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': '1 1',
351: 1:      'question': '1',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': '-1 -1',
351: 1:      'question': '-1',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': '0 -1',
351: 1:      'question': '-1 -1 0',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': '1 0',
351: 1:      'question': '1 1 0',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': '-1 -1',
351: 1:      'question': '-1 -1',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': '1 -1',
351: 1:      'question': '1 -1 0',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': '10 -20',
351: 1:      'question': '10 2 -1 -20',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': '805 -739',
351: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': '728 -983',
351: 1:      'question': '-983 -111 -332 -973 47 728',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': '268 -779',
351: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': '888 -937',
351: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': '949 -594',
351: 1:      'question': '646 261 609 -82 949 526 -449 -594 894',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': '909 -950',
351: 1:      'question': '-950 909 424 834 -579 -275 -901 444',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': '705 -879',
351: 1:      'question': '-857 43 444 158 510 -879 -350 705',
351: 1:      'valid': true
351: 1:    }
351: 1:  ],
351: 1:  'info': [
351: 1:    '✅f(1 2 3 4 5) = 5 1',
351: 1:    '✅f(1 2 -3 4 5) = 5 -3',
351: 1:    '✅f(1 9 3 4 -5) = 9 -5',
351: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
351: 1:    '✅f(1 2 3) = 3 1',
351: 1:    '✅f(1) = 1 1',
351: 1:    '✅f(-1) = -1 -1',
351: 1:    '✅f(-1 -1 0) = 0 -1',
351: 1:    '✅f(1 1 0) = 1 0',
351: 1:    '✅f(-1 -1) = -1 -1',
351: 1:    '✅f(1 -1 0) = 1 -1',
351: 1:    '✅f(10 2 -1 -20) = 10 -20',
351: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = 805 -739',
351: 1:    '✅f(-983 -111 -332 -973 47 728) = 728 -983',
351: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = 268 -779',
351: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = 888 -937',
351: 1:    '✅f(646 261 609 -82 949 526 -449 -594 894) = 949 -594',
351: 1:    '✅f(-950 909 424 834 -579 -275 -901 444) = 909 -950',
351: 1:    '✅f(-857 43 444 158 510 -879 -350 705) = 705 -879',
351: 1:    '❌f(-961 908 -769 980 407 -651 550 671 -996 215) = ??? != 980 -996'
351: 1:  ],
351: 1:  'level': 12,
351: 1:  'nextQuestion': '-961 908 -769 980 407 -651 550 671 -996 215',
351: 1:  'questions': [
351: 1:    '1 2 3 4 5',
351: 1:    '1 2 -3 4 5',
351: 1:    '1 9 3 4 -5',
351: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
351: 1:    '1 2 3',
351: 1:    '1',
351: 1:    '-1',
351: 1:    '-1 -1 0',
351: 1:    '1 1 0',
351: 1:    '-1 -1',
351: 1:    '1 -1 0',
351: 1:    '10 2 -1 -20',
351: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
351: 1:    '-983 -111 -332 -973 47 728',
351: 1:    '268 -359 -513 -9 -86 -142 -779',
351: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773',
351: 1:    '646 261 609 -82 949 526 -449 -594 894',
351: 1:    '-950 909 424 834 -579 -275 -901 444',
351: 1:    '-857 43 444 158 510 -879 -350 705',
351: 1:    '-961 908 -769 980 407 -651 550 671 -996 215'
351: 1:  ]
351: 1:}
351: 1:Scores: 15930
351: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0', '-1 -1', '1 -1', '10 -20', '805 -739', '728 -983', '268 -779', '888 -937', '949 -594', '909 -950', '705 -879', '980 -996']')
351: 1:Fire Event: PassTest{complexity=16, testCount=23}
------------------------------------------
352: 1:BoardData {
352: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
352: 1:  'expectedAnswer': '483 -812',
352: 1:  'history': [
352: 1:    {
352: 1:      'answer': '5 1',
352: 1:      'question': '1 2 3 4 5',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': '5 -3',
352: 1:      'question': '1 2 -3 4 5',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': '9 -5',
352: 1:      'question': '1 9 3 4 -5',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': '42 -9',
352: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': '3 1',
352: 1:      'question': '1 2 3',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': '1 1',
352: 1:      'question': '1',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': '-1 -1',
352: 1:      'question': '-1',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': '0 -1',
352: 1:      'question': '-1 -1 0',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': '1 0',
352: 1:      'question': '1 1 0',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': '-1 -1',
352: 1:      'question': '-1 -1',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': '1 -1',
352: 1:      'question': '1 -1 0',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': '10 -20',
352: 1:      'question': '10 2 -1 -20',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': '805 -739',
352: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': '728 -983',
352: 1:      'question': '-983 -111 -332 -973 47 728',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': '268 -779',
352: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': '888 -937',
352: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': '949 -594',
352: 1:      'question': '646 261 609 -82 949 526 -449 -594 894',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': '909 -950',
352: 1:      'question': '-950 909 424 834 -579 -275 -901 444',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': '705 -879',
352: 1:      'question': '-857 43 444 158 510 -879 -350 705',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': '980 -996',
352: 1:      'question': '-961 908 -769 980 407 -651 550 671 -996 215',
352: 1:      'valid': true
352: 1:    }
352: 1:  ],
352: 1:  'info': [
352: 1:    '✅f(1 2 3 4 5) = 5 1',
352: 1:    '✅f(1 2 -3 4 5) = 5 -3',
352: 1:    '✅f(1 9 3 4 -5) = 9 -5',
352: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
352: 1:    '✅f(1 2 3) = 3 1',
352: 1:    '✅f(1) = 1 1',
352: 1:    '✅f(-1) = -1 -1',
352: 1:    '✅f(-1 -1 0) = 0 -1',
352: 1:    '✅f(1 1 0) = 1 0',
352: 1:    '✅f(-1 -1) = -1 -1',
352: 1:    '✅f(1 -1 0) = 1 -1',
352: 1:    '✅f(10 2 -1 -20) = 10 -20',
352: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = 805 -739',
352: 1:    '✅f(-983 -111 -332 -973 47 728) = 728 -983',
352: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = 268 -779',
352: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = 888 -937',
352: 1:    '✅f(646 261 609 -82 949 526 -449 -594 894) = 949 -594',
352: 1:    '✅f(-950 909 424 834 -579 -275 -901 444) = 909 -950',
352: 1:    '✅f(-857 43 444 158 510 -879 -350 705) = 705 -879',
352: 1:    '✅f(-961 908 -769 980 407 -651 550 671 -996 215) = 980 -996',
352: 1:    '❌f(483 -83 -229 -373 -812 335 -802) = ??? != 483 -812'
352: 1:  ],
352: 1:  'level': 12,
352: 1:  'nextQuestion': '483 -83 -229 -373 -812 335 -802',
352: 1:  'questions': [
352: 1:    '1 2 3 4 5',
352: 1:    '1 2 -3 4 5',
352: 1:    '1 9 3 4 -5',
352: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
352: 1:    '1 2 3',
352: 1:    '1',
352: 1:    '-1',
352: 1:    '-1 -1 0',
352: 1:    '1 1 0',
352: 1:    '-1 -1',
352: 1:    '1 -1 0',
352: 1:    '10 2 -1 -20',
352: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
352: 1:    '-983 -111 -332 -973 47 728',
352: 1:    '268 -359 -513 -9 -86 -142 -779',
352: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773',
352: 1:    '646 261 609 -82 949 526 -449 -594 894',
352: 1:    '-950 909 424 834 -579 -275 -901 444',
352: 1:    '-857 43 444 158 510 -879 -350 705',
352: 1:    '-961 908 -769 980 407 -651 550 671 -996 215',
352: 1:    '483 -83 -229 -373 -812 335 -802'
352: 1:  ]
352: 1:}
352: 1:Scores: 15936
352: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0', '-1 -1', '1 -1', '10 -20', '805 -739', '728 -983', '268 -779', '888 -937', '949 -594', '909 -950', '705 -879', '980 -996', '483 -812']')
352: 1:Fire Event: PassTest{complexity=16, testCount=23}
------------------------------------------
353: 1:BoardData {
353: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
353: 1:  'expectedAnswer': '831 -968',
353: 1:  'history': [
353: 1:    {
353: 1:      'answer': '5 1',
353: 1:      'question': '1 2 3 4 5',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': '5 -3',
353: 1:      'question': '1 2 -3 4 5',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': '9 -5',
353: 1:      'question': '1 9 3 4 -5',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': '42 -9',
353: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': '3 1',
353: 1:      'question': '1 2 3',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': '1 1',
353: 1:      'question': '1',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': '-1 -1',
353: 1:      'question': '-1',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': '0 -1',
353: 1:      'question': '-1 -1 0',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': '1 0',
353: 1:      'question': '1 1 0',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': '-1 -1',
353: 1:      'question': '-1 -1',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': '1 -1',
353: 1:      'question': '1 -1 0',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': '10 -20',
353: 1:      'question': '10 2 -1 -20',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': '805 -739',
353: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': '728 -983',
353: 1:      'question': '-983 -111 -332 -973 47 728',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': '268 -779',
353: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': '888 -937',
353: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': '949 -594',
353: 1:      'question': '646 261 609 -82 949 526 -449 -594 894',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': '909 -950',
353: 1:      'question': '-950 909 424 834 -579 -275 -901 444',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': '705 -879',
353: 1:      'question': '-857 43 444 158 510 -879 -350 705',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': '980 -996',
353: 1:      'question': '-961 908 -769 980 407 -651 550 671 -996 215',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': '483 -812',
353: 1:      'question': '483 -83 -229 -373 -812 335 -802',
353: 1:      'valid': true
353: 1:    }
353: 1:  ],
353: 1:  'info': [
353: 1:    '✅f(1 2 3 4 5) = 5 1',
353: 1:    '✅f(1 2 -3 4 5) = 5 -3',
353: 1:    '✅f(1 9 3 4 -5) = 9 -5',
353: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
353: 1:    '✅f(1 2 3) = 3 1',
353: 1:    '✅f(1) = 1 1',
353: 1:    '✅f(-1) = -1 -1',
353: 1:    '✅f(-1 -1 0) = 0 -1',
353: 1:    '✅f(1 1 0) = 1 0',
353: 1:    '✅f(-1 -1) = -1 -1',
353: 1:    '✅f(1 -1 0) = 1 -1',
353: 1:    '✅f(10 2 -1 -20) = 10 -20',
353: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = 805 -739',
353: 1:    '✅f(-983 -111 -332 -973 47 728) = 728 -983',
353: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = 268 -779',
353: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = 888 -937',
353: 1:    '✅f(646 261 609 -82 949 526 -449 -594 894) = 949 -594',
353: 1:    '✅f(-950 909 424 834 -579 -275 -901 444) = 909 -950',
353: 1:    '✅f(-857 43 444 158 510 -879 -350 705) = 705 -879',
353: 1:    '✅f(-961 908 -769 980 407 -651 550 671 -996 215) = 980 -996',
353: 1:    '✅f(483 -83 -229 -373 -812 335 -802) = 483 -812',
353: 1:    '❌f(-968 -692 -566 -31 333 831 81 -476 828 -232) = ??? != 831 -968'
353: 1:  ],
353: 1:  'level': 12,
353: 1:  'nextQuestion': '-968 -692 -566 -31 333 831 81 -476 828 -232',
353: 1:  'questions': [
353: 1:    '1 2 3 4 5',
353: 1:    '1 2 -3 4 5',
353: 1:    '1 9 3 4 -5',
353: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
353: 1:    '1 2 3',
353: 1:    '1',
353: 1:    '-1',
353: 1:    '-1 -1 0',
353: 1:    '1 1 0',
353: 1:    '-1 -1',
353: 1:    '1 -1 0',
353: 1:    '10 2 -1 -20',
353: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
353: 1:    '-983 -111 -332 -973 47 728',
353: 1:    '268 -359 -513 -9 -86 -142 -779',
353: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773',
353: 1:    '646 261 609 -82 949 526 -449 -594 894',
353: 1:    '-950 909 424 834 -579 -275 -901 444',
353: 1:    '-857 43 444 158 510 -879 -350 705',
353: 1:    '-961 908 -769 980 407 -651 550 671 -996 215',
353: 1:    '483 -83 -229 -373 -812 335 -802',
353: 1:    '-968 -692 -566 -31 333 831 81 -476 828 -232'
353: 1:  ]
353: 1:}
353: 1:Scores: 15942
353: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0', '-1 -1', '1 -1', '10 -20', '805 -739', '728 -983', '268 -779', '888 -937', '949 -594', '909 -950', '705 -879', '980 -996', '483 -812', '831 -968']')
353: 1:Fire Event: PassTest{complexity=16, testCount=23}
------------------------------------------
354: 1:BoardData {
354: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
354: 1:  'expectedAnswer': '542 -214',
354: 1:  'history': [
354: 1:    {
354: 1:      'answer': '5 1',
354: 1:      'question': '1 2 3 4 5',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': '5 -3',
354: 1:      'question': '1 2 -3 4 5',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': '9 -5',
354: 1:      'question': '1 9 3 4 -5',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': '42 -9',
354: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': '3 1',
354: 1:      'question': '1 2 3',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': '1 1',
354: 1:      'question': '1',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': '-1 -1',
354: 1:      'question': '-1',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': '0 -1',
354: 1:      'question': '-1 -1 0',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': '1 0',
354: 1:      'question': '1 1 0',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': '-1 -1',
354: 1:      'question': '-1 -1',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': '1 -1',
354: 1:      'question': '1 -1 0',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': '10 -20',
354: 1:      'question': '10 2 -1 -20',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': '805 -739',
354: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': '728 -983',
354: 1:      'question': '-983 -111 -332 -973 47 728',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': '268 -779',
354: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': '888 -937',
354: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': '949 -594',
354: 1:      'question': '646 261 609 -82 949 526 -449 -594 894',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': '909 -950',
354: 1:      'question': '-950 909 424 834 -579 -275 -901 444',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': '705 -879',
354: 1:      'question': '-857 43 444 158 510 -879 -350 705',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': '980 -996',
354: 1:      'question': '-961 908 -769 980 407 -651 550 671 -996 215',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': '483 -812',
354: 1:      'question': '483 -83 -229 -373 -812 335 -802',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': '831 -968',
354: 1:      'question': '-968 -692 -566 -31 333 831 81 -476 828 -232',
354: 1:      'valid': true
354: 1:    }
354: 1:  ],
354: 1:  'info': [
354: 1:    '✅f(1 2 3 4 5) = 5 1',
354: 1:    '✅f(1 2 -3 4 5) = 5 -3',
354: 1:    '✅f(1 9 3 4 -5) = 9 -5',
354: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
354: 1:    '✅f(1 2 3) = 3 1',
354: 1:    '✅f(1) = 1 1',
354: 1:    '✅f(-1) = -1 -1',
354: 1:    '✅f(-1 -1 0) = 0 -1',
354: 1:    '✅f(1 1 0) = 1 0',
354: 1:    '✅f(-1 -1) = -1 -1',
354: 1:    '✅f(1 -1 0) = 1 -1',
354: 1:    '✅f(10 2 -1 -20) = 10 -20',
354: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = 805 -739',
354: 1:    '✅f(-983 -111 -332 -973 47 728) = 728 -983',
354: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = 268 -779',
354: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = 888 -937',
354: 1:    '✅f(646 261 609 -82 949 526 -449 -594 894) = 949 -594',
354: 1:    '✅f(-950 909 424 834 -579 -275 -901 444) = 909 -950',
354: 1:    '✅f(-857 43 444 158 510 -879 -350 705) = 705 -879',
354: 1:    '✅f(-961 908 -769 980 407 -651 550 671 -996 215) = 980 -996',
354: 1:    '✅f(483 -83 -229 -373 -812 335 -802) = 483 -812',
354: 1:    '✅f(-968 -692 -566 -31 333 831 81 -476 828 -232) = 831 -968',
354: 1:    '❌f(4 5 29 54 4 0 -214 542 -64 1 -3 6 -6) = ??? != 542 -214'
354: 1:  ],
354: 1:  'level': 12,
354: 1:  'nextQuestion': '4 5 29 54 4 0 -214 542 -64 1 -3 6 -6',
354: 1:  'questions': [
354: 1:    '1 2 3 4 5',
354: 1:    '1 2 -3 4 5',
354: 1:    '1 9 3 4 -5',
354: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
354: 1:    '1 2 3',
354: 1:    '1',
354: 1:    '-1',
354: 1:    '-1 -1 0',
354: 1:    '1 1 0',
354: 1:    '-1 -1',
354: 1:    '1 -1 0',
354: 1:    '10 2 -1 -20',
354: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
354: 1:    '-983 -111 -332 -973 47 728',
354: 1:    '268 -359 -513 -9 -86 -142 -779',
354: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773',
354: 1:    '646 261 609 -82 949 526 -449 -594 894',
354: 1:    '-950 909 424 834 -579 -275 -901 444',
354: 1:    '-857 43 444 158 510 -879 -350 705',
354: 1:    '-961 908 -769 980 407 -651 550 671 -996 215',
354: 1:    '483 -83 -229 -373 -812 335 -802',
354: 1:    '-968 -692 -566 -31 333 831 81 -476 828 -232',
354: 1:    '4 5 29 54 4 0 -214 542 -64 1 -3 6 -6'
354: 1:  ]
354: 1:}
354: 1:Scores: 15948
354: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0', '-1 -1', '1 -1', '10 -20', '805 -739', '728 -983', '268 -779', '888 -937', '949 -594', '909 -950', '705 -879', '980 -996', '483 -812', '831 -968', '542 -214']')
354: 1:Fire Event: PassTest{complexity=16, testCount=23}
354: 1:Fire Event: NextAlgorithm{complexity=16, time=0}
------------------------------------------
355: 1:BoardData {
355: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
355: 1:  'history': [
355: 1:    {
355: 1:      'answer': '5 1',
355: 1:      'question': '1 2 3 4 5',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '5 -3',
355: 1:      'question': '1 2 -3 4 5',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '9 -5',
355: 1:      'question': '1 9 3 4 -5',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '42 -9',
355: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '3 1',
355: 1:      'question': '1 2 3',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '1 1',
355: 1:      'question': '1',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '-1 -1',
355: 1:      'question': '-1',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '0 -1',
355: 1:      'question': '-1 -1 0',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '1 0',
355: 1:      'question': '1 1 0',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '-1 -1',
355: 1:      'question': '-1 -1',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '1 -1',
355: 1:      'question': '1 -1 0',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '10 -20',
355: 1:      'question': '10 2 -1 -20',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '805 -739',
355: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '728 -983',
355: 1:      'question': '-983 -111 -332 -973 47 728',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '268 -779',
355: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '888 -937',
355: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '949 -594',
355: 1:      'question': '646 261 609 -82 949 526 -449 -594 894',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '909 -950',
355: 1:      'question': '-950 909 424 834 -579 -275 -901 444',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '705 -879',
355: 1:      'question': '-857 43 444 158 510 -879 -350 705',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '980 -996',
355: 1:      'question': '-961 908 -769 980 407 -651 550 671 -996 215',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '483 -812',
355: 1:      'question': '483 -83 -229 -373 -812 335 -802',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '831 -968',
355: 1:      'question': '-968 -692 -566 -31 333 831 81 -476 828 -232',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': '542 -214',
355: 1:      'question': '4 5 29 54 4 0 -214 542 -64 1 -3 6 -6',
355: 1:      'valid': true
355: 1:    }
355: 1:  ],
355: 1:  'info': [
355: 1:    '✅f(1 2 3 4 5) = 5 1',
355: 1:    '✅f(1 2 -3 4 5) = 5 -3',
355: 1:    '✅f(1 9 3 4 -5) = 9 -5',
355: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
355: 1:    '✅f(1 2 3) = 3 1',
355: 1:    '✅f(1) = 1 1',
355: 1:    '✅f(-1) = -1 -1',
355: 1:    '✅f(-1 -1 0) = 0 -1',
355: 1:    '✅f(1 1 0) = 1 0',
355: 1:    '✅f(-1 -1) = -1 -1',
355: 1:    '✅f(1 -1 0) = 1 -1',
355: 1:    '✅f(10 2 -1 -20) = 10 -20',
355: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = 805 -739',
355: 1:    '✅f(-983 -111 -332 -973 47 728) = 728 -983',
355: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = 268 -779',
355: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = 888 -937',
355: 1:    '✅f(646 261 609 -82 949 526 -449 -594 894) = 949 -594',
355: 1:    '✅f(-950 909 424 834 -579 -275 -901 444) = 909 -950',
355: 1:    '✅f(-857 43 444 158 510 -879 -350 705) = 705 -879',
355: 1:    '✅f(-961 908 -769 980 407 -651 550 671 -996 215) = 980 -996',
355: 1:    '✅f(483 -83 -229 -373 -812 335 -802) = 483 -812',
355: 1:    '✅f(-968 -692 -566 -31 333 831 81 -476 828 -232) = 831 -968',
355: 1:    '✅f(4 5 29 54 4 0 -214 542 -64 1 -3 6 -6) = 542 -214'
355: 1:  ],
355: 1:  'level': 12,
355: 1:  'questions': []
355: 1:}
355: 1:Scores: 18113
355: 1:Answer: message('StartNextLevel')
355: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
356: 1:BoardData {
356: 1:  'description': ['Oh my, it seems that trolls have taken over your comment section!\nHowever, fear not, for there is a simple solution to deal with these troublesome creatures.\nYou may remove all vowels from their comments, rendering them powerless.\nI implore you to create a function that can execute this task, for instance,\ntransforming \'This website is for losers LOL!\' into \'Ths wbst s fr lsrs LL!\'. \nPlease take note that for this exercise, the letter 'y' is not considered a vowel.'],
356: 1:  'expectedAnswer': 'Hll Wrld!!',
356: 1:  'history': [],
356: 1:  'info': ['❌f(Hello World!!) = ??? != Hll Wrld!!'],
356: 1:  'level': 13,
356: 1:  'nextQuestion': 'Hello World!!',
356: 1:  'questions': ['Hello World!!']
356: 1:}
356: 1:Scores: 18113
356: 1:Answer: message('['Hll Wrld!!']')
356: 1:Fire Event: PassTest{complexity=17, testCount=13}
------------------------------------------
357: 1:BoardData {
357: 1:  'description': ['Oh my, it seems that trolls have taken over your comment section!\nHowever, fear not, for there is a simple solution to deal with these troublesome creatures.\nYou may remove all vowels from their comments, rendering them powerless.\nI implore you to create a function that can execute this task, for instance,\ntransforming \'This website is for losers LOL!\' into \'Ths wbst s fr lsrs LL!\'. \nPlease take note that for this exercise, the letter 'y' is not considered a vowel.'],
357: 1:  'expectedAnswer': 'Th qck brwn fx jmps vr th lzy dg.',
357: 1:  'history': [{
357: 1:    'answer': 'Hll Wrld!!',
357: 1:    'question': 'Hello World!!',
357: 1:    'valid': true
357: 1:  }],
357: 1:  'info': [
357: 1:    '✅f(Hello World!!) = Hll Wrld!!',
357: 1:    '❌f(The quick brown fox jumps over the lazy dog.) = ??? != Th qck brwn fx jmps vr th lzy dg.'
357: 1:  ],
357: 1:  'level': 13,
357: 1:  'nextQuestion': 'The quick brown fox jumps over the lazy dog.',
357: 1:  'questions': [
357: 1:    'Hello World!!',
357: 1:    'The quick brown fox jumps over the lazy dog.'
357: 1:  ]
357: 1:}
357: 1:Scores: 18126
357: 1:Answer: message('['Hll Wrld!!', 'Th qck brwn fx jmps vr th lzy dg.']')
357: 1:Fire Event: PassTest{complexity=17, testCount=13}
------------------------------------------
358: 1:BoardData {
358: 1:  'description': ['Oh my, it seems that trolls have taken over your comment section!\nHowever, fear not, for there is a simple solution to deal with these troublesome creatures.\nYou may remove all vowels from their comments, rendering them powerless.\nI implore you to create a function that can execute this task, for instance,\ntransforming \'This website is for losers LOL!\' into \'Ths wbst s fr lsrs LL!\'. \nPlease take note that for this exercise, the letter 'y' is not considered a vowel.'],
358: 1:  'expectedAnswer': 'T b r nt t b, tht s th qstn.',
358: 1:  'history': [
358: 1:    {
358: 1:      'answer': 'Hll Wrld!!',
358: 1:      'question': 'Hello World!!',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': 'Th qck brwn fx jmps vr th lzy dg.',
358: 1:      'question': 'The quick brown fox jumps over the lazy dog.',
358: 1:      'valid': true
358: 1:    }
358: 1:  ],
358: 1:  'info': [
358: 1:    '✅f(Hello World!!) = Hll Wrld!!',
358: 1:    '✅f(The quick brown fox jumps over the lazy dog.) = Th qck brwn fx jmps vr th lzy dg.',
358: 1:    '❌f(To be or not to be, that is the question.) = ??? != T b r nt t b, tht s th qstn.'
358: 1:  ],
358: 1:  'level': 13,
358: 1:  'nextQuestion': 'To be or not to be, that is the question.',
358: 1:  'questions': [
358: 1:    'Hello World!!',
358: 1:    'The quick brown fox jumps over the lazy dog.',
358: 1:    'To be or not to be, that is the question.'
358: 1:  ]
358: 1:}
358: 1:Scores: 18139
358: 1:Answer: message('['Hll Wrld!!', 'Th qck brwn fx jmps vr th lzy dg.', 'T b r nt t b, tht s th qstn.']')
358: 1:Fire Event: PassTest{complexity=17, testCount=13}
------------------------------------------
359: 1:BoardData {
359: 1:  'description': ['Oh my, it seems that trolls have taken over your comment section!\nHowever, fear not, for there is a simple solution to deal with these troublesome creatures.\nYou may remove all vowels from their comments, rendering them powerless.\nI implore you to create a function that can execute this task, for instance,\ntransforming \'This website is for losers LOL!\' into \'Ths wbst s fr lsrs LL!\'. \nPlease take note that for this exercise, the letter 'y' is not considered a vowel.'],
359: 1:  'expectedAnswer': 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
359: 1:  'history': [
359: 1:    {
359: 1:      'answer': 'Hll Wrld!!',
359: 1:      'question': 'Hello World!!',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': 'Th qck brwn fx jmps vr th lzy dg.',
359: 1:      'question': 'The quick brown fox jumps over the lazy dog.',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': 'T b r nt t b, tht s th qstn.',
359: 1:      'question': 'To be or not to be, that is the question.',
359: 1:      'valid': true
359: 1:    }
359: 1:  ],
359: 1:  'info': [
359: 1:    '✅f(Hello World!!) = Hll Wrld!!',
359: 1:    '✅f(The quick brown fox jumps over the lazy dog.) = Th qck brwn fx jmps vr th lzy dg.',
359: 1:    '✅f(To be or not to be, that is the question.) = T b r nt t b, tht s th qstn.',
359: 1:    '❌f(The world is a book, and those who do not travel read only a page.) = ??? != Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.'
359: 1:  ],
359: 1:  'level': 13,
359: 1:  'nextQuestion': 'The world is a book, and those who do not travel read only a page.',
359: 1:  'questions': [
359: 1:    'Hello World!!',
359: 1:    'The quick brown fox jumps over the lazy dog.',
359: 1:    'To be or not to be, that is the question.',
359: 1:    'The world is a book, and those who do not travel read only a page.'
359: 1:  ]
359: 1:}
359: 1:Scores: 18152
359: 1:Answer: message('['Hll Wrld!!', 'Th qck brwn fx jmps vr th lzy dg.', 'T b r nt t b, tht s th qstn.', 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.']')
359: 1:Fire Event: PassTest{complexity=17, testCount=13}
------------------------------------------
360: 1:BoardData {
360: 1:  'description': ['Oh my, it seems that trolls have taken over your comment section!\nHowever, fear not, for there is a simple solution to deal with these troublesome creatures.\nYou may remove all vowels from their comments, rendering them powerless.\nI implore you to create a function that can execute this task, for instance,\ntransforming \'This website is for losers LOL!\' into \'Ths wbst s fr lsrs LL!\'. \nPlease take note that for this exercise, the letter 'y' is not considered a vowel.'],
360: 1:  'expectedAnswer': 'Th fv bxng wzrds jmp qckly.',
360: 1:  'history': [
360: 1:    {
360: 1:      'answer': 'Hll Wrld!!',
360: 1:      'question': 'Hello World!!',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': 'Th qck brwn fx jmps vr th lzy dg.',
360: 1:      'question': 'The quick brown fox jumps over the lazy dog.',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': 'T b r nt t b, tht s th qstn.',
360: 1:      'question': 'To be or not to be, that is the question.',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
360: 1:      'question': 'The world is a book, and those who do not travel read only a page.',
360: 1:      'valid': true
360: 1:    }
360: 1:  ],
360: 1:  'info': [
360: 1:    '✅f(Hello World!!) = Hll Wrld!!',
360: 1:    '✅f(The quick brown fox jumps over the lazy dog.) = Th qck brwn fx jmps vr th lzy dg.',
360: 1:    '✅f(To be or not to be, that is the question.) = T b r nt t b, tht s th qstn.',
360: 1:    '✅f(The world is a book, and those who do not travel read only a page.) = Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
360: 1:    '❌f(The five boxing wizards jump quickly.) = ??? != Th fv bxng wzrds jmp qckly.'
360: 1:  ],
360: 1:  'level': 13,
360: 1:  'nextQuestion': 'The five boxing wizards jump quickly.',
360: 1:  'questions': [
360: 1:    'Hello World!!',
360: 1:    'The quick brown fox jumps over the lazy dog.',
360: 1:    'To be or not to be, that is the question.',
360: 1:    'The world is a book, and those who do not travel read only a page.',
360: 1:    'The five boxing wizards jump quickly.'
360: 1:  ]
360: 1:}
360: 1:Scores: 18165
360: 1:Answer: message('['Hll Wrld!!', 'Th qck brwn fx jmps vr th lzy dg.', 'T b r nt t b, tht s th qstn.', 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.', 'Th fv bxng wzrds jmp qckly.']')
360: 1:Fire Event: PassTest{complexity=17, testCount=13}
------------------------------------------
361: 1:BoardData {
361: 1:  'description': ['Oh my, it seems that trolls have taken over your comment section!\nHowever, fear not, for there is a simple solution to deal with these troublesome creatures.\nYou may remove all vowels from their comments, rendering them powerless.\nI implore you to create a function that can execute this task, for instance,\ntransforming \'This website is for losers LOL!\' into \'Ths wbst s fr lsrs LL!\'. \nPlease take note that for this exercise, the letter 'y' is not considered a vowel.'],
361: 1:  'expectedAnswer': 'Why dd th tmt trn rd? Bcs t sw th sld drssng!',
361: 1:  'history': [
361: 1:    {
361: 1:      'answer': 'Hll Wrld!!',
361: 1:      'question': 'Hello World!!',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': 'Th qck brwn fx jmps vr th lzy dg.',
361: 1:      'question': 'The quick brown fox jumps over the lazy dog.',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': 'T b r nt t b, tht s th qstn.',
361: 1:      'question': 'To be or not to be, that is the question.',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
361: 1:      'question': 'The world is a book, and those who do not travel read only a page.',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': 'Th fv bxng wzrds jmp qckly.',
361: 1:      'question': 'The five boxing wizards jump quickly.',
361: 1:      'valid': true
361: 1:    }
361: 1:  ],
361: 1:  'info': [
361: 1:    '✅f(Hello World!!) = Hll Wrld!!',
361: 1:    '✅f(The quick brown fox jumps over the lazy dog.) = Th qck brwn fx jmps vr th lzy dg.',
361: 1:    '✅f(To be or not to be, that is the question.) = T b r nt t b, tht s th qstn.',
361: 1:    '✅f(The world is a book, and those who do not travel read only a page.) = Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
361: 1:    '✅f(The five boxing wizards jump quickly.) = Th fv bxng wzrds jmp qckly.',
361: 1:    '❌f(Why did the tomato turn red? Because it saw the salad dressing!) = ??? != Why dd th tmt trn rd? Bcs t sw th sld drssng!'
361: 1:  ],
361: 1:  'level': 13,
361: 1:  'nextQuestion': 'Why did the tomato turn red? Because it saw the salad dressing!',
361: 1:  'questions': [
361: 1:    'Hello World!!',
361: 1:    'The quick brown fox jumps over the lazy dog.',
361: 1:    'To be or not to be, that is the question.',
361: 1:    'The world is a book, and those who do not travel read only a page.',
361: 1:    'The five boxing wizards jump quickly.',
361: 1:    'Why did the tomato turn red? Because it saw the salad dressing!'
361: 1:  ]
361: 1:}
361: 1:Scores: 18178
361: 1:Answer: message('['Hll Wrld!!', 'Th qck brwn fx jmps vr th lzy dg.', 'T b r nt t b, tht s th qstn.', 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.', 'Th fv bxng wzrds jmp qckly.', 'Why dd th tmt trn rd? Bcs t sw th sld drssng!']')
361: 1:Fire Event: PassTest{complexity=17, testCount=13}
------------------------------------------
362: 1:BoardData {
362: 1:  'description': ['Oh my, it seems that trolls have taken over your comment section!\nHowever, fear not, for there is a simple solution to deal with these troublesome creatures.\nYou may remove all vowels from their comments, rendering them powerless.\nI implore you to create a function that can execute this task, for instance,\ntransforming \'This website is for losers LOL!\' into \'Ths wbst s fr lsrs LL!\'. \nPlease take note that for this exercise, the letter 'y' is not considered a vowel.'],
362: 1:  'expectedAnswer': 'Sh slls sshlls by th sshr.',
362: 1:  'history': [
362: 1:    {
362: 1:      'answer': 'Hll Wrld!!',
362: 1:      'question': 'Hello World!!',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': 'Th qck brwn fx jmps vr th lzy dg.',
362: 1:      'question': 'The quick brown fox jumps over the lazy dog.',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': 'T b r nt t b, tht s th qstn.',
362: 1:      'question': 'To be or not to be, that is the question.',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
362: 1:      'question': 'The world is a book, and those who do not travel read only a page.',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': 'Th fv bxng wzrds jmp qckly.',
362: 1:      'question': 'The five boxing wizards jump quickly.',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': 'Why dd th tmt trn rd? Bcs t sw th sld drssng!',
362: 1:      'question': 'Why did the tomato turn red? Because it saw the salad dressing!',
362: 1:      'valid': true
362: 1:    }
362: 1:  ],
362: 1:  'info': [
362: 1:    '✅f(Hello World!!) = Hll Wrld!!',
362: 1:    '✅f(The quick brown fox jumps over the lazy dog.) = Th qck brwn fx jmps vr th lzy dg.',
362: 1:    '✅f(To be or not to be, that is the question.) = T b r nt t b, tht s th qstn.',
362: 1:    '✅f(The world is a book, and those who do not travel read only a page.) = Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
362: 1:    '✅f(The five boxing wizards jump quickly.) = Th fv bxng wzrds jmp qckly.',
362: 1:    '✅f(Why did the tomato turn red? Because it saw the salad dressing!) = Why dd th tmt trn rd? Bcs t sw th sld drssng!',
362: 1:    '❌f(She sells seashells by the seashore.) = ??? != Sh slls sshlls by th sshr.'
362: 1:  ],
362: 1:  'level': 13,
362: 1:  'nextQuestion': 'She sells seashells by the seashore.',
362: 1:  'questions': [
362: 1:    'Hello World!!',
362: 1:    'The quick brown fox jumps over the lazy dog.',
362: 1:    'To be or not to be, that is the question.',
362: 1:    'The world is a book, and those who do not travel read only a page.',
362: 1:    'The five boxing wizards jump quickly.',
362: 1:    'Why did the tomato turn red? Because it saw the salad dressing!',
362: 1:    'She sells seashells by the seashore.'
362: 1:  ]
362: 1:}
362: 1:Scores: 18191
362: 1:Answer: message('['Hll Wrld!!', 'Th qck brwn fx jmps vr th lzy dg.', 'T b r nt t b, tht s th qstn.', 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.', 'Th fv bxng wzrds jmp qckly.', 'Why dd th tmt trn rd? Bcs t sw th sld drssng!', 'Sh slls sshlls by th sshr.']')
362: 1:Fire Event: PassTest{complexity=17, testCount=13}
------------------------------------------
363: 1:BoardData {
363: 1:  'description': ['Oh my, it seems that trolls have taken over your comment section!\nHowever, fear not, for there is a simple solution to deal with these troublesome creatures.\nYou may remove all vowels from their comments, rendering them powerless.\nI implore you to create a function that can execute this task, for instance,\ntransforming \'This website is for losers LOL!\' into \'Ths wbst s fr lsrs LL!\'. \nPlease take note that for this exercise, the letter 'y' is not considered a vowel.'],
363: 1:  'expectedAnswer': 'Hw mch wd wld  wdchck chck f  wdchck cld chck wd?',
363: 1:  'history': [
363: 1:    {
363: 1:      'answer': 'Hll Wrld!!',
363: 1:      'question': 'Hello World!!',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'Th qck brwn fx jmps vr th lzy dg.',
363: 1:      'question': 'The quick brown fox jumps over the lazy dog.',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'T b r nt t b, tht s th qstn.',
363: 1:      'question': 'To be or not to be, that is the question.',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
363: 1:      'question': 'The world is a book, and those who do not travel read only a page.',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'Th fv bxng wzrds jmp qckly.',
363: 1:      'question': 'The five boxing wizards jump quickly.',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'Why dd th tmt trn rd? Bcs t sw th sld drssng!',
363: 1:      'question': 'Why did the tomato turn red? Because it saw the salad dressing!',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'Sh slls sshlls by th sshr.',
363: 1:      'question': 'She sells seashells by the seashore.',
363: 1:      'valid': true
363: 1:    }
363: 1:  ],
363: 1:  'info': [
363: 1:    '✅f(Hello World!!) = Hll Wrld!!',
363: 1:    '✅f(The quick brown fox jumps over the lazy dog.) = Th qck brwn fx jmps vr th lzy dg.',
363: 1:    '✅f(To be or not to be, that is the question.) = T b r nt t b, tht s th qstn.',
363: 1:    '✅f(The world is a book, and those who do not travel read only a page.) = Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
363: 1:    '✅f(The five boxing wizards jump quickly.) = Th fv bxng wzrds jmp qckly.',
363: 1:    '✅f(Why did the tomato turn red? Because it saw the salad dressing!) = Why dd th tmt trn rd? Bcs t sw th sld drssng!',
363: 1:    '✅f(She sells seashells by the seashore.) = Sh slls sshlls by th sshr.',
363: 1:    '❌f(How much wood would a woodchuck chuck if a woodchuck could chuck wood?) = ??? != Hw mch wd wld  wdchck chck f  wdchck cld chck wd?'
363: 1:  ],
363: 1:  'level': 13,
363: 1:  'nextQuestion': 'How much wood would a woodchuck chuck if a woodchuck could chuck wood?',
363: 1:  'questions': [
363: 1:    'Hello World!!',
363: 1:    'The quick brown fox jumps over the lazy dog.',
363: 1:    'To be or not to be, that is the question.',
363: 1:    'The world is a book, and those who do not travel read only a page.',
363: 1:    'The five boxing wizards jump quickly.',
363: 1:    'Why did the tomato turn red? Because it saw the salad dressing!',
363: 1:    'She sells seashells by the seashore.',
363: 1:    'How much wood would a woodchuck chuck if a woodchuck could chuck wood?'
363: 1:  ]
363: 1:}
363: 1:Scores: 18204
363: 1:Answer: message('['Hll Wrld!!', 'Th qck brwn fx jmps vr th lzy dg.', 'T b r nt t b, tht s th qstn.', 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.', 'Th fv bxng wzrds jmp qckly.', 'Why dd th tmt trn rd? Bcs t sw th sld drssng!', 'Sh slls sshlls by th sshr.', 'Hw mch wd wld  wdchck chck f  wdchck cld chck wd?']')
363: 1:Fire Event: PassTest{complexity=17, testCount=13}
------------------------------------------
364: 1:BoardData {
364: 1:  'description': ['Oh my, it seems that trolls have taken over your comment section!\nHowever, fear not, for there is a simple solution to deal with these troublesome creatures.\nYou may remove all vowels from their comments, rendering them powerless.\nI implore you to create a function that can execute this task, for instance,\ntransforming \'This website is for losers LOL!\' into \'Ths wbst s fr lsrs LL!\'. \nPlease take note that for this exercise, the letter 'y' is not considered a vowel.'],
364: 1:  'expectedAnswer': 'll wrk nd n ply mks Jck  dll by.',
364: 1:  'history': [
364: 1:    {
364: 1:      'answer': 'Hll Wrld!!',
364: 1:      'question': 'Hello World!!',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'Th qck brwn fx jmps vr th lzy dg.',
364: 1:      'question': 'The quick brown fox jumps over the lazy dog.',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'T b r nt t b, tht s th qstn.',
364: 1:      'question': 'To be or not to be, that is the question.',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
364: 1:      'question': 'The world is a book, and those who do not travel read only a page.',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'Th fv bxng wzrds jmp qckly.',
364: 1:      'question': 'The five boxing wizards jump quickly.',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'Why dd th tmt trn rd? Bcs t sw th sld drssng!',
364: 1:      'question': 'Why did the tomato turn red? Because it saw the salad dressing!',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'Sh slls sshlls by th sshr.',
364: 1:      'question': 'She sells seashells by the seashore.',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'Hw mch wd wld  wdchck chck f  wdchck cld chck wd?',
364: 1:      'question': 'How much wood would a woodchuck chuck if a woodchuck could chuck wood?',
364: 1:      'valid': true
364: 1:    }
364: 1:  ],
364: 1:  'info': [
364: 1:    '✅f(Hello World!!) = Hll Wrld!!',
364: 1:    '✅f(The quick brown fox jumps over the lazy dog.) = Th qck brwn fx jmps vr th lzy dg.',
364: 1:    '✅f(To be or not to be, that is the question.) = T b r nt t b, tht s th qstn.',
364: 1:    '✅f(The world is a book, and those who do not travel read only a page.) = Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
364: 1:    '✅f(The five boxing wizards jump quickly.) = Th fv bxng wzrds jmp qckly.',
364: 1:    '✅f(Why did the tomato turn red? Because it saw the salad dressing!) = Why dd th tmt trn rd? Bcs t sw th sld drssng!',
364: 1:    '✅f(She sells seashells by the seashore.) = Sh slls sshlls by th sshr.',
364: 1:    '✅f(How much wood would a woodchuck chuck if a woodchuck could chuck wood?) = Hw mch wd wld  wdchck chck f  wdchck cld chck wd?',
364: 1:    '❌f(All work and no play makes Jack a dull boy.) = ??? != ll wrk nd n ply mks Jck  dll by.'
364: 1:  ],
364: 1:  'level': 13,
364: 1:  'nextQuestion': 'All work and no play makes Jack a dull boy.',
364: 1:  'questions': [
364: 1:    'Hello World!!',
364: 1:    'The quick brown fox jumps over the lazy dog.',
364: 1:    'To be or not to be, that is the question.',
364: 1:    'The world is a book, and those who do not travel read only a page.',
364: 1:    'The five boxing wizards jump quickly.',
364: 1:    'Why did the tomato turn red? Because it saw the salad dressing!',
364: 1:    'She sells seashells by the seashore.',
364: 1:    'How much wood would a woodchuck chuck if a woodchuck could chuck wood?',
364: 1:    'All work and no play makes Jack a dull boy.'
364: 1:  ]
364: 1:}
364: 1:Scores: 18217
364: 1:Answer: message('['Hll Wrld!!', 'Th qck brwn fx jmps vr th lzy dg.', 'T b r nt t b, tht s th qstn.', 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.', 'Th fv bxng wzrds jmp qckly.', 'Why dd th tmt trn rd? Bcs t sw th sld drssng!', 'Sh slls sshlls by th sshr.', 'Hw mch wd wld  wdchck chck f  wdchck cld chck wd?', 'll wrk nd n ply mks Jck  dll by.']')
364: 1:Fire Event: PassTest{complexity=17, testCount=13}
------------------------------------------
365: 1:BoardData {
365: 1:  'description': ['Oh my, it seems that trolls have taken over your comment section!\nHowever, fear not, for there is a simple solution to deal with these troublesome creatures.\nYou may remove all vowels from their comments, rendering them powerless.\nI implore you to create a function that can execute this task, for instance,\ntransforming \'This website is for losers LOL!\' into \'Ths wbst s fr lsrs LL!\'. \nPlease take note that for this exercise, the letter 'y' is not considered a vowel.'],
365: 1:  'expectedAnswer': 'Th ct n th ht hd  bt nd  ht.',
365: 1:  'history': [
365: 1:    {
365: 1:      'answer': 'Hll Wrld!!',
365: 1:      'question': 'Hello World!!',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'Th qck brwn fx jmps vr th lzy dg.',
365: 1:      'question': 'The quick brown fox jumps over the lazy dog.',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'T b r nt t b, tht s th qstn.',
365: 1:      'question': 'To be or not to be, that is the question.',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
365: 1:      'question': 'The world is a book, and those who do not travel read only a page.',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'Th fv bxng wzrds jmp qckly.',
365: 1:      'question': 'The five boxing wizards jump quickly.',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'Why dd th tmt trn rd? Bcs t sw th sld drssng!',
365: 1:      'question': 'Why did the tomato turn red? Because it saw the salad dressing!',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'Sh slls sshlls by th sshr.',
365: 1:      'question': 'She sells seashells by the seashore.',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'Hw mch wd wld  wdchck chck f  wdchck cld chck wd?',
365: 1:      'question': 'How much wood would a woodchuck chuck if a woodchuck could chuck wood?',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'll wrk nd n ply mks Jck  dll by.',
365: 1:      'question': 'All work and no play makes Jack a dull boy.',
365: 1:      'valid': true
365: 1:    }
365: 1:  ],
365: 1:  'info': [
365: 1:    '✅f(Hello World!!) = Hll Wrld!!',
365: 1:    '✅f(The quick brown fox jumps over the lazy dog.) = Th qck brwn fx jmps vr th lzy dg.',
365: 1:    '✅f(To be or not to be, that is the question.) = T b r nt t b, tht s th qstn.',
365: 1:    '✅f(The world is a book, and those who do not travel read only a page.) = Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
365: 1:    '✅f(The five boxing wizards jump quickly.) = Th fv bxng wzrds jmp qckly.',
365: 1:    '✅f(Why did the tomato turn red? Because it saw the salad dressing!) = Why dd th tmt trn rd? Bcs t sw th sld drssng!',
365: 1:    '✅f(She sells seashells by the seashore.) = Sh slls sshlls by th sshr.',
365: 1:    '✅f(How much wood would a woodchuck chuck if a woodchuck could chuck wood?) = Hw mch wd wld  wdchck chck f  wdchck cld chck wd?',
365: 1:    '✅f(All work and no play makes Jack a dull boy.) = ll wrk nd n ply mks Jck  dll by.',
365: 1:    '❌f(The cat in the hat had a bat and a hat.) = ??? != Th ct n th ht hd  bt nd  ht.'
365: 1:  ],
365: 1:  'level': 13,
365: 1:  'nextQuestion': 'The cat in the hat had a bat and a hat.',
365: 1:  'questions': [
365: 1:    'Hello World!!',
365: 1:    'The quick brown fox jumps over the lazy dog.',
365: 1:    'To be or not to be, that is the question.',
365: 1:    'The world is a book, and those who do not travel read only a page.',
365: 1:    'The five boxing wizards jump quickly.',
365: 1:    'Why did the tomato turn red? Because it saw the salad dressing!',
365: 1:    'She sells seashells by the seashore.',
365: 1:    'How much wood would a woodchuck chuck if a woodchuck could chuck wood?',
365: 1:    'All work and no play makes Jack a dull boy.',
365: 1:    'The cat in the hat had a bat and a hat.'
365: 1:  ]
365: 1:}
365: 1:Scores: 18230
365: 1:Answer: message('['Hll Wrld!!', 'Th qck brwn fx jmps vr th lzy dg.', 'T b r nt t b, tht s th qstn.', 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.', 'Th fv bxng wzrds jmp qckly.', 'Why dd th tmt trn rd? Bcs t sw th sld drssng!', 'Sh slls sshlls by th sshr.', 'Hw mch wd wld  wdchck chck f  wdchck cld chck wd?', 'll wrk nd n ply mks Jck  dll by.', 'Th ct n th ht hd  bt nd  ht.']')
365: 1:Fire Event: PassTest{complexity=17, testCount=13}
------------------------------------------
366: 1:BoardData {
366: 1:  'description': ['Oh my, it seems that trolls have taken over your comment section!\nHowever, fear not, for there is a simple solution to deal with these troublesome creatures.\nYou may remove all vowels from their comments, rendering them powerless.\nI implore you to create a function that can execute this task, for instance,\ntransforming \'This website is for losers LOL!\' into \'Ths wbst s fr lsrs LL!\'. \nPlease take note that for this exercise, the letter 'y' is not considered a vowel.'],
366: 1:  'expectedAnswer': ' bfr  xcpt ftr C.',
366: 1:  'history': [
366: 1:    {
366: 1:      'answer': 'Hll Wrld!!',
366: 1:      'question': 'Hello World!!',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'Th qck brwn fx jmps vr th lzy dg.',
366: 1:      'question': 'The quick brown fox jumps over the lazy dog.',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'T b r nt t b, tht s th qstn.',
366: 1:      'question': 'To be or not to be, that is the question.',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
366: 1:      'question': 'The world is a book, and those who do not travel read only a page.',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'Th fv bxng wzrds jmp qckly.',
366: 1:      'question': 'The five boxing wizards jump quickly.',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'Why dd th tmt trn rd? Bcs t sw th sld drssng!',
366: 1:      'question': 'Why did the tomato turn red? Because it saw the salad dressing!',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'Sh slls sshlls by th sshr.',
366: 1:      'question': 'She sells seashells by the seashore.',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'Hw mch wd wld  wdchck chck f  wdchck cld chck wd?',
366: 1:      'question': 'How much wood would a woodchuck chuck if a woodchuck could chuck wood?',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'll wrk nd n ply mks Jck  dll by.',
366: 1:      'question': 'All work and no play makes Jack a dull boy.',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'Th ct n th ht hd  bt nd  ht.',
366: 1:      'question': 'The cat in the hat had a bat and a hat.',
366: 1:      'valid': true
366: 1:    }
366: 1:  ],
366: 1:  'info': [
366: 1:    '✅f(Hello World!!) = Hll Wrld!!',
366: 1:    '✅f(The quick brown fox jumps over the lazy dog.) = Th qck brwn fx jmps vr th lzy dg.',
366: 1:    '✅f(To be or not to be, that is the question.) = T b r nt t b, tht s th qstn.',
366: 1:    '✅f(The world is a book, and those who do not travel read only a page.) = Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
366: 1:    '✅f(The five boxing wizards jump quickly.) = Th fv bxng wzrds jmp qckly.',
366: 1:    '✅f(Why did the tomato turn red? Because it saw the salad dressing!) = Why dd th tmt trn rd? Bcs t sw th sld drssng!',
366: 1:    '✅f(She sells seashells by the seashore.) = Sh slls sshlls by th sshr.',
366: 1:    '✅f(How much wood would a woodchuck chuck if a woodchuck could chuck wood?) = Hw mch wd wld  wdchck chck f  wdchck cld chck wd?',
366: 1:    '✅f(All work and no play makes Jack a dull boy.) = ll wrk nd n ply mks Jck  dll by.',
366: 1:    '✅f(The cat in the hat had a bat and a hat.) = Th ct n th ht hd  bt nd  ht.',
366: 1:    '❌f(I before E except after C.) = ??? !=  bfr  xcpt ftr C.'
366: 1:  ],
366: 1:  'level': 13,
366: 1:  'nextQuestion': 'I before E except after C.',
366: 1:  'questions': [
366: 1:    'Hello World!!',
366: 1:    'The quick brown fox jumps over the lazy dog.',
366: 1:    'To be or not to be, that is the question.',
366: 1:    'The world is a book, and those who do not travel read only a page.',
366: 1:    'The five boxing wizards jump quickly.',
366: 1:    'Why did the tomato turn red? Because it saw the salad dressing!',
366: 1:    'She sells seashells by the seashore.',
366: 1:    'How much wood would a woodchuck chuck if a woodchuck could chuck wood?',
366: 1:    'All work and no play makes Jack a dull boy.',
366: 1:    'The cat in the hat had a bat and a hat.',
366: 1:    'I before E except after C.'
366: 1:  ]
366: 1:}
366: 1:Scores: 18243
366: 1:Answer: message('['Hll Wrld!!', 'Th qck brwn fx jmps vr th lzy dg.', 'T b r nt t b, tht s th qstn.', 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.', 'Th fv bxng wzrds jmp qckly.', 'Why dd th tmt trn rd? Bcs t sw th sld drssng!', 'Sh slls sshlls by th sshr.', 'Hw mch wd wld  wdchck chck f  wdchck cld chck wd?', 'll wrk nd n ply mks Jck  dll by.', 'Th ct n th ht hd  bt nd  ht.', ' bfr  xcpt ftr C.']')
366: 1:Fire Event: PassTest{complexity=17, testCount=13}
------------------------------------------
367: 1:BoardData {
367: 1:  'description': ['Oh my, it seems that trolls have taken over your comment section!\nHowever, fear not, for there is a simple solution to deal with these troublesome creatures.\nYou may remove all vowels from their comments, rendering them powerless.\nI implore you to create a function that can execute this task, for instance,\ntransforming \'This website is for losers LOL!\' into \'Ths wbst s fr lsrs LL!\'. \nPlease take note that for this exercise, the letter 'y' is not considered a vowel.'],
367: 1:  'expectedAnswer': 'Th rn n Spn stys mnly n th pln.',
367: 1:  'history': [
367: 1:    {
367: 1:      'answer': 'Hll Wrld!!',
367: 1:      'question': 'Hello World!!',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'Th qck brwn fx jmps vr th lzy dg.',
367: 1:      'question': 'The quick brown fox jumps over the lazy dog.',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'T b r nt t b, tht s th qstn.',
367: 1:      'question': 'To be or not to be, that is the question.',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
367: 1:      'question': 'The world is a book, and those who do not travel read only a page.',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'Th fv bxng wzrds jmp qckly.',
367: 1:      'question': 'The five boxing wizards jump quickly.',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'Why dd th tmt trn rd? Bcs t sw th sld drssng!',
367: 1:      'question': 'Why did the tomato turn red? Because it saw the salad dressing!',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'Sh slls sshlls by th sshr.',
367: 1:      'question': 'She sells seashells by the seashore.',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'Hw mch wd wld  wdchck chck f  wdchck cld chck wd?',
367: 1:      'question': 'How much wood would a woodchuck chuck if a woodchuck could chuck wood?',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'll wrk nd n ply mks Jck  dll by.',
367: 1:      'question': 'All work and no play makes Jack a dull boy.',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'Th ct n th ht hd  bt nd  ht.',
367: 1:      'question': 'The cat in the hat had a bat and a hat.',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': ' bfr  xcpt ftr C.',
367: 1:      'question': 'I before E except after C.',
367: 1:      'valid': true
367: 1:    }
367: 1:  ],
367: 1:  'info': [
367: 1:    '✅f(Hello World!!) = Hll Wrld!!',
367: 1:    '✅f(The quick brown fox jumps over the lazy dog.) = Th qck brwn fx jmps vr th lzy dg.',
367: 1:    '✅f(To be or not to be, that is the question.) = T b r nt t b, tht s th qstn.',
367: 1:    '✅f(The world is a book, and those who do not travel read only a page.) = Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
367: 1:    '✅f(The five boxing wizards jump quickly.) = Th fv bxng wzrds jmp qckly.',
367: 1:    '✅f(Why did the tomato turn red? Because it saw the salad dressing!) = Why dd th tmt trn rd? Bcs t sw th sld drssng!',
367: 1:    '✅f(She sells seashells by the seashore.) = Sh slls sshlls by th sshr.',
367: 1:    '✅f(How much wood would a woodchuck chuck if a woodchuck could chuck wood?) = Hw mch wd wld  wdchck chck f  wdchck cld chck wd?',
367: 1:    '✅f(All work and no play makes Jack a dull boy.) = ll wrk nd n ply mks Jck  dll by.',
367: 1:    '✅f(The cat in the hat had a bat and a hat.) = Th ct n th ht hd  bt nd  ht.',
367: 1:    '✅f(I before E except after C.) =  bfr  xcpt ftr C.',
367: 1:    '❌f(The rain in Spain stays mainly in the plain.) = ??? != Th rn n Spn stys mnly n th pln.'
367: 1:  ],
367: 1:  'level': 13,
367: 1:  'nextQuestion': 'The rain in Spain stays mainly in the plain.',
367: 1:  'questions': [
367: 1:    'Hello World!!',
367: 1:    'The quick brown fox jumps over the lazy dog.',
367: 1:    'To be or not to be, that is the question.',
367: 1:    'The world is a book, and those who do not travel read only a page.',
367: 1:    'The five boxing wizards jump quickly.',
367: 1:    'Why did the tomato turn red? Because it saw the salad dressing!',
367: 1:    'She sells seashells by the seashore.',
367: 1:    'How much wood would a woodchuck chuck if a woodchuck could chuck wood?',
367: 1:    'All work and no play makes Jack a dull boy.',
367: 1:    'The cat in the hat had a bat and a hat.',
367: 1:    'I before E except after C.',
367: 1:    'The rain in Spain stays mainly in the plain.'
367: 1:  ]
367: 1:}
367: 1:Scores: 18256
367: 1:Answer: message('['Hll Wrld!!', 'Th qck brwn fx jmps vr th lzy dg.', 'T b r nt t b, tht s th qstn.', 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.', 'Th fv bxng wzrds jmp qckly.', 'Why dd th tmt trn rd? Bcs t sw th sld drssng!', 'Sh slls sshlls by th sshr.', 'Hw mch wd wld  wdchck chck f  wdchck cld chck wd?', 'll wrk nd n ply mks Jck  dll by.', 'Th ct n th ht hd  bt nd  ht.', ' bfr  xcpt ftr C.', 'Th rn n Spn stys mnly n th pln.']')
367: 1:Fire Event: PassTest{complexity=17, testCount=13}
------------------------------------------
368: 1:BoardData {
368: 1:  'description': ['Oh my, it seems that trolls have taken over your comment section!\nHowever, fear not, for there is a simple solution to deal with these troublesome creatures.\nYou may remove all vowels from their comments, rendering them powerless.\nI implore you to create a function that can execute this task, for instance,\ntransforming \'This website is for losers LOL!\' into \'Ths wbst s fr lsrs LL!\'. \nPlease take note that for this exercise, the letter 'y' is not considered a vowel.'],
368: 1:  'expectedAnswer': 'Sprclfrglstcxpldcs.',
368: 1:  'history': [
368: 1:    {
368: 1:      'answer': 'Hll Wrld!!',
368: 1:      'question': 'Hello World!!',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'Th qck brwn fx jmps vr th lzy dg.',
368: 1:      'question': 'The quick brown fox jumps over the lazy dog.',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'T b r nt t b, tht s th qstn.',
368: 1:      'question': 'To be or not to be, that is the question.',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
368: 1:      'question': 'The world is a book, and those who do not travel read only a page.',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'Th fv bxng wzrds jmp qckly.',
368: 1:      'question': 'The five boxing wizards jump quickly.',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'Why dd th tmt trn rd? Bcs t sw th sld drssng!',
368: 1:      'question': 'Why did the tomato turn red? Because it saw the salad dressing!',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'Sh slls sshlls by th sshr.',
368: 1:      'question': 'She sells seashells by the seashore.',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'Hw mch wd wld  wdchck chck f  wdchck cld chck wd?',
368: 1:      'question': 'How much wood would a woodchuck chuck if a woodchuck could chuck wood?',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'll wrk nd n ply mks Jck  dll by.',
368: 1:      'question': 'All work and no play makes Jack a dull boy.',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'Th ct n th ht hd  bt nd  ht.',
368: 1:      'question': 'The cat in the hat had a bat and a hat.',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': ' bfr  xcpt ftr C.',
368: 1:      'question': 'I before E except after C.',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'Th rn n Spn stys mnly n th pln.',
368: 1:      'question': 'The rain in Spain stays mainly in the plain.',
368: 1:      'valid': true
368: 1:    }
368: 1:  ],
368: 1:  'info': [
368: 1:    '✅f(Hello World!!) = Hll Wrld!!',
368: 1:    '✅f(The quick brown fox jumps over the lazy dog.) = Th qck brwn fx jmps vr th lzy dg.',
368: 1:    '✅f(To be or not to be, that is the question.) = T b r nt t b, tht s th qstn.',
368: 1:    '✅f(The world is a book, and those who do not travel read only a page.) = Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
368: 1:    '✅f(The five boxing wizards jump quickly.) = Th fv bxng wzrds jmp qckly.',
368: 1:    '✅f(Why did the tomato turn red? Because it saw the salad dressing!) = Why dd th tmt trn rd? Bcs t sw th sld drssng!',
368: 1:    '✅f(She sells seashells by the seashore.) = Sh slls sshlls by th sshr.',
368: 1:    '✅f(How much wood would a woodchuck chuck if a woodchuck could chuck wood?) = Hw mch wd wld  wdchck chck f  wdchck cld chck wd?',
368: 1:    '✅f(All work and no play makes Jack a dull boy.) = ll wrk nd n ply mks Jck  dll by.',
368: 1:    '✅f(The cat in the hat had a bat and a hat.) = Th ct n th ht hd  bt nd  ht.',
368: 1:    '✅f(I before E except after C.) =  bfr  xcpt ftr C.',
368: 1:    '✅f(The rain in Spain stays mainly in the plain.) = Th rn n Spn stys mnly n th pln.',
368: 1:    '❌f(Supercalifragilisticexpialidocious.) = ??? != Sprclfrglstcxpldcs.'
368: 1:  ],
368: 1:  'level': 13,
368: 1:  'nextQuestion': 'Supercalifragilisticexpialidocious.',
368: 1:  'questions': [
368: 1:    'Hello World!!',
368: 1:    'The quick brown fox jumps over the lazy dog.',
368: 1:    'To be or not to be, that is the question.',
368: 1:    'The world is a book, and those who do not travel read only a page.',
368: 1:    'The five boxing wizards jump quickly.',
368: 1:    'Why did the tomato turn red? Because it saw the salad dressing!',
368: 1:    'She sells seashells by the seashore.',
368: 1:    'How much wood would a woodchuck chuck if a woodchuck could chuck wood?',
368: 1:    'All work and no play makes Jack a dull boy.',
368: 1:    'The cat in the hat had a bat and a hat.',
368: 1:    'I before E except after C.',
368: 1:    'The rain in Spain stays mainly in the plain.',
368: 1:    'Supercalifragilisticexpialidocious.'
368: 1:  ]
368: 1:}
368: 1:Scores: 18269
368: 1:Answer: message('['Hll Wrld!!', 'Th qck brwn fx jmps vr th lzy dg.', 'T b r nt t b, tht s th qstn.', 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.', 'Th fv bxng wzrds jmp qckly.', 'Why dd th tmt trn rd? Bcs t sw th sld drssng!', 'Sh slls sshlls by th sshr.', 'Hw mch wd wld  wdchck chck f  wdchck cld chck wd?', 'll wrk nd n ply mks Jck  dll by.', 'Th ct n th ht hd  bt nd  ht.', ' bfr  xcpt ftr C.', 'Th rn n Spn stys mnly n th pln.', 'Sprclfrglstcxpldcs.']')
368: 1:Fire Event: PassTest{complexity=17, testCount=13}
368: 1:Fire Event: NextAlgorithm{complexity=17, time=0}
------------------------------------------
369: 1:BoardData {
369: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
369: 1:  'history': [
369: 1:    {
369: 1:      'answer': 'Hll Wrld!!',
369: 1:      'question': 'Hello World!!',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'Th qck brwn fx jmps vr th lzy dg.',
369: 1:      'question': 'The quick brown fox jumps over the lazy dog.',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'T b r nt t b, tht s th qstn.',
369: 1:      'question': 'To be or not to be, that is the question.',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
369: 1:      'question': 'The world is a book, and those who do not travel read only a page.',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'Th fv bxng wzrds jmp qckly.',
369: 1:      'question': 'The five boxing wizards jump quickly.',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'Why dd th tmt trn rd? Bcs t sw th sld drssng!',
369: 1:      'question': 'Why did the tomato turn red? Because it saw the salad dressing!',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'Sh slls sshlls by th sshr.',
369: 1:      'question': 'She sells seashells by the seashore.',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'Hw mch wd wld  wdchck chck f  wdchck cld chck wd?',
369: 1:      'question': 'How much wood would a woodchuck chuck if a woodchuck could chuck wood?',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'll wrk nd n ply mks Jck  dll by.',
369: 1:      'question': 'All work and no play makes Jack a dull boy.',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'Th ct n th ht hd  bt nd  ht.',
369: 1:      'question': 'The cat in the hat had a bat and a hat.',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': ' bfr  xcpt ftr C.',
369: 1:      'question': 'I before E except after C.',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'Th rn n Spn stys mnly n th pln.',
369: 1:      'question': 'The rain in Spain stays mainly in the plain.',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'Sprclfrglstcxpldcs.',
369: 1:      'question': 'Supercalifragilisticexpialidocious.',
369: 1:      'valid': true
369: 1:    }
369: 1:  ],
369: 1:  'info': [
369: 1:    '✅f(Hello World!!) = Hll Wrld!!',
369: 1:    '✅f(The quick brown fox jumps over the lazy dog.) = Th qck brwn fx jmps vr th lzy dg.',
369: 1:    '✅f(To be or not to be, that is the question.) = T b r nt t b, tht s th qstn.',
369: 1:    '✅f(The world is a book, and those who do not travel read only a page.) = Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
369: 1:    '✅f(The five boxing wizards jump quickly.) = Th fv bxng wzrds jmp qckly.',
369: 1:    '✅f(Why did the tomato turn red? Because it saw the salad dressing!) = Why dd th tmt trn rd? Bcs t sw th sld drssng!',
369: 1:    '✅f(She sells seashells by the seashore.) = Sh slls sshlls by th sshr.',
369: 1:    '✅f(How much wood would a woodchuck chuck if a woodchuck could chuck wood?) = Hw mch wd wld  wdchck chck f  wdchck cld chck wd?',
369: 1:    '✅f(All work and no play makes Jack a dull boy.) = ll wrk nd n ply mks Jck  dll by.',
369: 1:    '✅f(The cat in the hat had a bat and a hat.) = Th ct n th ht hd  bt nd  ht.',
369: 1:    '✅f(I before E except after C.) =  bfr  xcpt ftr C.',
369: 1:    '✅f(The rain in Spain stays mainly in the plain.) = Th rn n Spn stys mnly n th pln.',
369: 1:    '✅f(Supercalifragilisticexpialidocious.) = Sprclfrglstcxpldcs.'
369: 1:  ],
369: 1:  'level': 13,
369: 1:  'questions': []
369: 1:}
369: 1:Scores: 20576
369: 1:Answer: message('StartNextLevel')
369: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
370: 1:BoardData {
370: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
370: 1:  'expectedAnswer': 'true',
370: 1:  'history': [],
370: 1:  'info': ['❌f(ooxx) = ??? != true'],
370: 1:  'level': 14,
370: 1:  'nextQuestion': 'ooxx',
370: 1:  'questions': ['ooxx']
370: 1:}
370: 1:Scores: 20576
370: 1:Answer: message('['true']')
370: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
371: 1:BoardData {
371: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
371: 1:  'expectedAnswer': 'false',
371: 1:  'history': [{
371: 1:    'answer': 'true',
371: 1:    'question': 'ooxx',
371: 1:    'valid': true
371: 1:  }],
371: 1:  'info': [
371: 1:    '✅f(ooxx) = true',
371: 1:    '❌f(xooxx) = ??? != false'
371: 1:  ],
371: 1:  'level': 14,
371: 1:  'nextQuestion': 'xooxx',
371: 1:  'questions': [
371: 1:    'ooxx',
371: 1:    'xooxx'
371: 1:  ]
371: 1:}
371: 1:Scores: 20580
371: 1:Answer: message('['true', 'false']')
371: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
372: 1:BoardData {
372: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
372: 1:  'expectedAnswer': 'true',
372: 1:  'history': [
372: 1:    {
372: 1:      'answer': 'true',
372: 1:      'question': 'ooxx',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'false',
372: 1:      'question': 'xooxx',
372: 1:      'valid': true
372: 1:    }
372: 1:  ],
372: 1:  'info': [
372: 1:    '✅f(ooxx) = true',
372: 1:    '✅f(xooxx) = false',
372: 1:    '❌f(ooxXm) = ??? != true'
372: 1:  ],
372: 1:  'level': 14,
372: 1:  'nextQuestion': 'ooxXm',
372: 1:  'questions': [
372: 1:    'ooxx',
372: 1:    'xooxx',
372: 1:    'ooxXm'
372: 1:  ]
372: 1:}
372: 1:Scores: 20584
372: 1:Answer: message('['true', 'false', 'true']')
372: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
373: 1:BoardData {
373: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
373: 1:  'expectedAnswer': 'true',
373: 1:  'history': [
373: 1:    {
373: 1:      'answer': 'true',
373: 1:      'question': 'ooxx',
373: 1:      'valid': true
373: 1:    },
373: 1:    {
373: 1:      'answer': 'false',
373: 1:      'question': 'xooxx',
373: 1:      'valid': true
373: 1:    },
373: 1:    {
373: 1:      'answer': 'true',
373: 1:      'question': 'ooxXm',
373: 1:      'valid': true
373: 1:    }
373: 1:  ],
373: 1:  'info': [
373: 1:    '✅f(ooxx) = true',
373: 1:    '✅f(xooxx) = false',
373: 1:    '✅f(ooxXm) = true',
373: 1:    '❌f(zpzpzpp) = ??? != true'
373: 1:  ],
373: 1:  'level': 14,
373: 1:  'nextQuestion': 'zpzpzpp',
373: 1:  'questions': [
373: 1:    'ooxx',
373: 1:    'xooxx',
373: 1:    'ooxXm',
373: 1:    'zpzpzpp'
373: 1:  ]
373: 1:}
373: 1:Scores: 20588
373: 1:Answer: message('['true', 'false', 'true', 'true']')
373: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
374: 1:BoardData {
374: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
374: 1:  'expectedAnswer': 'false',
374: 1:  'history': [
374: 1:    {
374: 1:      'answer': 'true',
374: 1:      'question': 'ooxx',
374: 1:      'valid': true
374: 1:    },
374: 1:    {
374: 1:      'answer': 'false',
374: 1:      'question': 'xooxx',
374: 1:      'valid': true
374: 1:    },
374: 1:    {
374: 1:      'answer': 'true',
374: 1:      'question': 'ooxXm',
374: 1:      'valid': true
374: 1:    },
374: 1:    {
374: 1:      'answer': 'true',
374: 1:      'question': 'zpzpzpp',
374: 1:      'valid': true
374: 1:    }
374: 1:  ],
374: 1:  'info': [
374: 1:    '✅f(ooxx) = true',
374: 1:    '✅f(xooxx) = false',
374: 1:    '✅f(ooxXm) = true',
374: 1:    '✅f(zpzpzpp) = true',
374: 1:    '❌f(zzoo) = ??? != false'
374: 1:  ],
374: 1:  'level': 14,
374: 1:  'nextQuestion': 'zzoo',
374: 1:  'questions': [
374: 1:    'ooxx',
374: 1:    'xooxx',
374: 1:    'ooxXm',
374: 1:    'zpzpzpp',
374: 1:    'zzoo'
374: 1:  ]
374: 1:}
374: 1:Scores: 20592
374: 1:Answer: message('['true', 'false', 'true', 'true', 'false']')
374: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
375: 1:BoardData {
375: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
375: 1:  'expectedAnswer': 'true',
375: 1:  'history': [
375: 1:    {
375: 1:      'answer': 'true',
375: 1:      'question': 'ooxx',
375: 1:      'valid': true
375: 1:    },
375: 1:    {
375: 1:      'answer': 'false',
375: 1:      'question': 'xooxx',
375: 1:      'valid': true
375: 1:    },
375: 1:    {
375: 1:      'answer': 'true',
375: 1:      'question': 'ooxXm',
375: 1:      'valid': true
375: 1:    },
375: 1:    {
375: 1:      'answer': 'true',
375: 1:      'question': 'zpzpzpp',
375: 1:      'valid': true
375: 1:    },
375: 1:    {
375: 1:      'answer': 'false',
375: 1:      'question': 'zzoo',
375: 1:      'valid': true
375: 1:    }
375: 1:  ],
375: 1:  'info': [
375: 1:    '✅f(ooxx) = true',
375: 1:    '✅f(xooxx) = false',
375: 1:    '✅f(ooxXm) = true',
375: 1:    '✅f(zpzpzpp) = true',
375: 1:    '✅f(zzoo) = false',
375: 1:    '❌f(xxxooo) = ??? != true'
375: 1:  ],
375: 1:  'level': 14,
375: 1:  'nextQuestion': 'xxxooo',
375: 1:  'questions': [
375: 1:    'ooxx',
375: 1:    'xooxx',
375: 1:    'ooxXm',
375: 1:    'zpzpzpp',
375: 1:    'zzoo',
375: 1:    'xxxooo'
375: 1:  ]
375: 1:}
375: 1:Scores: 20596
375: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true']')
375: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
376: 1:BoardData {
376: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
376: 1:  'expectedAnswer': 'true',
376: 1:  'history': [
376: 1:    {
376: 1:      'answer': 'true',
376: 1:      'question': 'ooxx',
376: 1:      'valid': true
376: 1:    },
376: 1:    {
376: 1:      'answer': 'false',
376: 1:      'question': 'xooxx',
376: 1:      'valid': true
376: 1:    },
376: 1:    {
376: 1:      'answer': 'true',
376: 1:      'question': 'ooxXm',
376: 1:      'valid': true
376: 1:    },
376: 1:    {
376: 1:      'answer': 'true',
376: 1:      'question': 'zpzpzpp',
376: 1:      'valid': true
376: 1:    },
376: 1:    {
376: 1:      'answer': 'false',
376: 1:      'question': 'zzoo',
376: 1:      'valid': true
376: 1:    },
376: 1:    {
376: 1:      'answer': 'true',
376: 1:      'question': 'xxxooo',
376: 1:      'valid': true
376: 1:    }
376: 1:  ],
376: 1:  'info': [
376: 1:    '✅f(ooxx) = true',
376: 1:    '✅f(xooxx) = false',
376: 1:    '✅f(ooxXm) = true',
376: 1:    '✅f(zpzpzpp) = true',
376: 1:    '✅f(zzoo) = false',
376: 1:    '✅f(xxxooo) = true',
376: 1:    '❌f(xxxXooOo) = ??? != true'
376: 1:  ],
376: 1:  'level': 14,
376: 1:  'nextQuestion': 'xxxXooOo',
376: 1:  'questions': [
376: 1:    'ooxx',
376: 1:    'xooxx',
376: 1:    'ooxXm',
376: 1:    'zpzpzpp',
376: 1:    'zzoo',
376: 1:    'xxxooo',
376: 1:    'xxxXooOo'
376: 1:  ]
376: 1:}
376: 1:Scores: 20600
376: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true']')
376: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
377: 1:BoardData {
377: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
377: 1:  'expectedAnswer': 'false',
377: 1:  'history': [
377: 1:    {
377: 1:      'answer': 'true',
377: 1:      'question': 'ooxx',
377: 1:      'valid': true
377: 1:    },
377: 1:    {
377: 1:      'answer': 'false',
377: 1:      'question': 'xooxx',
377: 1:      'valid': true
377: 1:    },
377: 1:    {
377: 1:      'answer': 'true',
377: 1:      'question': 'ooxXm',
377: 1:      'valid': true
377: 1:    },
377: 1:    {
377: 1:      'answer': 'true',
377: 1:      'question': 'zpzpzpp',
377: 1:      'valid': true
377: 1:    },
377: 1:    {
377: 1:      'answer': 'false',
377: 1:      'question': 'zzoo',
377: 1:      'valid': true
377: 1:    },
377: 1:    {
377: 1:      'answer': 'true',
377: 1:      'question': 'xxxooo',
377: 1:      'valid': true
377: 1:    },
377: 1:    {
377: 1:      'answer': 'true',
377: 1:      'question': 'xxxXooOo',
377: 1:      'valid': true
377: 1:    }
377: 1:  ],
377: 1:  'info': [
377: 1:    '✅f(ooxx) = true',
377: 1:    '✅f(xooxx) = false',
377: 1:    '✅f(ooxXm) = true',
377: 1:    '✅f(zpzpzpp) = true',
377: 1:    '✅f(zzoo) = false',
377: 1:    '✅f(xxxooo) = true',
377: 1:    '✅f(xxxXooOo) = true',
377: 1:    '❌f(xxx23424esdsfvxXXOOooo) = ??? != false'
377: 1:  ],
377: 1:  'level': 14,
377: 1:  'nextQuestion': 'xxx23424esdsfvxXXOOooo',
377: 1:  'questions': [
377: 1:    'ooxx',
377: 1:    'xooxx',
377: 1:    'ooxXm',
377: 1:    'zpzpzpp',
377: 1:    'zzoo',
377: 1:    'xxxooo',
377: 1:    'xxxXooOo',
377: 1:    'xxx23424esdsfvxXXOOooo'
377: 1:  ]
377: 1:}
377: 1:Scores: 20604
377: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false']')
377: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
378: 1:BoardData {
378: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
378: 1:  'expectedAnswer': 'false',
378: 1:  'history': [
378: 1:    {
378: 1:      'answer': 'true',
378: 1:      'question': 'ooxx',
378: 1:      'valid': true
378: 1:    },
378: 1:    {
378: 1:      'answer': 'false',
378: 1:      'question': 'xooxx',
378: 1:      'valid': true
378: 1:    },
378: 1:    {
378: 1:      'answer': 'true',
378: 1:      'question': 'ooxXm',
378: 1:      'valid': true
378: 1:    },
378: 1:    {
378: 1:      'answer': 'true',
378: 1:      'question': 'zpzpzpp',
378: 1:      'valid': true
378: 1:    },
378: 1:    {
378: 1:      'answer': 'false',
378: 1:      'question': 'zzoo',
378: 1:      'valid': true
378: 1:    },
378: 1:    {
378: 1:      'answer': 'true',
378: 1:      'question': 'xxxooo',
378: 1:      'valid': true
378: 1:    },
378: 1:    {
378: 1:      'answer': 'true',
378: 1:      'question': 'xxxXooOo',
378: 1:      'valid': true
378: 1:    },
378: 1:    {
378: 1:      'answer': 'false',
378: 1:      'question': 'xxx23424esdsfvxXXOOooo',
378: 1:      'valid': true
378: 1:    }
378: 1:  ],
378: 1:  'info': [
378: 1:    '✅f(ooxx) = true',
378: 1:    '✅f(xooxx) = false',
378: 1:    '✅f(ooxXm) = true',
378: 1:    '✅f(zpzpzpp) = true',
378: 1:    '✅f(zzoo) = false',
378: 1:    '✅f(xxxooo) = true',
378: 1:    '✅f(xxxXooOo) = true',
378: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
378: 1:    '❌f(xXxxoewrcoOoo) = ??? != false'
378: 1:  ],
378: 1:  'level': 14,
378: 1:  'nextQuestion': 'xXxxoewrcoOoo',
378: 1:  'questions': [
378: 1:    'ooxx',
378: 1:    'xooxx',
378: 1:    'ooxXm',
378: 1:    'zpzpzpp',
378: 1:    'zzoo',
378: 1:    'xxxooo',
378: 1:    'xxxXooOo',
378: 1:    'xxx23424esdsfvxXXOOooo',
378: 1:    'xXxxoewrcoOoo'
378: 1:  ]
378: 1:}
378: 1:Scores: 20608
378: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false']')
378: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
379: 1:BoardData {
379: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
379: 1:  'expectedAnswer': 'false',
379: 1:  'history': [
379: 1:    {
379: 1:      'answer': 'true',
379: 1:      'question': 'ooxx',
379: 1:      'valid': true
379: 1:    },
379: 1:    {
379: 1:      'answer': 'false',
379: 1:      'question': 'xooxx',
379: 1:      'valid': true
379: 1:    },
379: 1:    {
379: 1:      'answer': 'true',
379: 1:      'question': 'ooxXm',
379: 1:      'valid': true
379: 1:    },
379: 1:    {
379: 1:      'answer': 'true',
379: 1:      'question': 'zpzpzpp',
379: 1:      'valid': true
379: 1:    },
379: 1:    {
379: 1:      'answer': 'false',
379: 1:      'question': 'zzoo',
379: 1:      'valid': true
379: 1:    },
379: 1:    {
379: 1:      'answer': 'true',
379: 1:      'question': 'xxxooo',
379: 1:      'valid': true
379: 1:    },
379: 1:    {
379: 1:      'answer': 'true',
379: 1:      'question': 'xxxXooOo',
379: 1:      'valid': true
379: 1:    },
379: 1:    {
379: 1:      'answer': 'false',
379: 1:      'question': 'xxx23424esdsfvxXXOOooo',
379: 1:      'valid': true
379: 1:    },
379: 1:    {
379: 1:      'answer': 'false',
379: 1:      'question': 'xXxxoewrcoOoo',
379: 1:      'valid': true
379: 1:    }
379: 1:  ],
379: 1:  'info': [
379: 1:    '✅f(ooxx) = true',
379: 1:    '✅f(xooxx) = false',
379: 1:    '✅f(ooxXm) = true',
379: 1:    '✅f(zpzpzpp) = true',
379: 1:    '✅f(zzoo) = false',
379: 1:    '✅f(xxxooo) = true',
379: 1:    '✅f(xxxXooOo) = true',
379: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
379: 1:    '✅f(xXxxoewrcoOoo) = false',
379: 1:    '❌f(XxxxooO) = ??? != false'
379: 1:  ],
379: 1:  'level': 14,
379: 1:  'nextQuestion': 'XxxxooO',
379: 1:  'questions': [
379: 1:    'ooxx',
379: 1:    'xooxx',
379: 1:    'ooxXm',
379: 1:    'zpzpzpp',
379: 1:    'zzoo',
379: 1:    'xxxooo',
379: 1:    'xxxXooOo',
379: 1:    'xxx23424esdsfvxXXOOooo',
379: 1:    'xXxxoewrcoOoo',
379: 1:    'XxxxooO'
379: 1:  ]
379: 1:}
379: 1:Scores: 20612
379: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false']')
379: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
380: 1:BoardData {
380: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
380: 1:  'expectedAnswer': 'true',
380: 1:  'history': [
380: 1:    {
380: 1:      'answer': 'true',
380: 1:      'question': 'ooxx',
380: 1:      'valid': true
380: 1:    },
380: 1:    {
380: 1:      'answer': 'false',
380: 1:      'question': 'xooxx',
380: 1:      'valid': true
380: 1:    },
380: 1:    {
380: 1:      'answer': 'true',
380: 1:      'question': 'ooxXm',
380: 1:      'valid': true
380: 1:    },
380: 1:    {
380: 1:      'answer': 'true',
380: 1:      'question': 'zpzpzpp',
380: 1:      'valid': true
380: 1:    },
380: 1:    {
380: 1:      'answer': 'false',
380: 1:      'question': 'zzoo',
380: 1:      'valid': true
380: 1:    },
380: 1:    {
380: 1:      'answer': 'true',
380: 1:      'question': 'xxxooo',
380: 1:      'valid': true
380: 1:    },
380: 1:    {
380: 1:      'answer': 'true',
380: 1:      'question': 'xxxXooOo',
380: 1:      'valid': true
380: 1:    },
380: 1:    {
380: 1:      'answer': 'false',
380: 1:      'question': 'xxx23424esdsfvxXXOOooo',
380: 1:      'valid': true
380: 1:    },
380: 1:    {
380: 1:      'answer': 'false',
380: 1:      'question': 'xXxxoewrcoOoo',
380: 1:      'valid': true
380: 1:    },
380: 1:    {
380: 1:      'answer': 'false',
380: 1:      'question': 'XxxxooO',
380: 1:      'valid': true
380: 1:    }
380: 1:  ],
380: 1:  'info': [
380: 1:    '✅f(ooxx) = true',
380: 1:    '✅f(xooxx) = false',
380: 1:    '✅f(ooxXm) = true',
380: 1:    '✅f(zpzpzpp) = true',
380: 1:    '✅f(zzoo) = false',
380: 1:    '✅f(xxxooo) = true',
380: 1:    '✅f(xxxXooOo) = true',
380: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
380: 1:    '✅f(xXxxoewrcoOoo) = false',
380: 1:    '✅f(XxxxooO) = false',
380: 1:    '❌f(zssddd) = ??? != true'
380: 1:  ],
380: 1:  'level': 14,
380: 1:  'nextQuestion': 'zssddd',
380: 1:  'questions': [
380: 1:    'ooxx',
380: 1:    'xooxx',
380: 1:    'ooxXm',
380: 1:    'zpzpzpp',
380: 1:    'zzoo',
380: 1:    'xxxooo',
380: 1:    'xxxXooOo',
380: 1:    'xxx23424esdsfvxXXOOooo',
380: 1:    'xXxxoewrcoOoo',
380: 1:    'XxxxooO',
380: 1:    'zssddd'
380: 1:  ]
380: 1:}
380: 1:Scores: 20616
380: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true']')
380: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
381: 1:BoardData {
381: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
381: 1:  'expectedAnswer': 'false',
381: 1:  'history': [
381: 1:    {
381: 1:      'answer': 'true',
381: 1:      'question': 'ooxx',
381: 1:      'valid': true
381: 1:    },
381: 1:    {
381: 1:      'answer': 'false',
381: 1:      'question': 'xooxx',
381: 1:      'valid': true
381: 1:    },
381: 1:    {
381: 1:      'answer': 'true',
381: 1:      'question': 'ooxXm',
381: 1:      'valid': true
381: 1:    },
381: 1:    {
381: 1:      'answer': 'true',
381: 1:      'question': 'zpzpzpp',
381: 1:      'valid': true
381: 1:    },
381: 1:    {
381: 1:      'answer': 'false',
381: 1:      'question': 'zzoo',
381: 1:      'valid': true
381: 1:    },
381: 1:    {
381: 1:      'answer': 'true',
381: 1:      'question': 'xxxooo',
381: 1:      'valid': true
381: 1:    },
381: 1:    {
381: 1:      'answer': 'true',
381: 1:      'question': 'xxxXooOo',
381: 1:      'valid': true
381: 1:    },
381: 1:    {
381: 1:      'answer': 'false',
381: 1:      'question': 'xxx23424esdsfvxXXOOooo',
381: 1:      'valid': true
381: 1:    },
381: 1:    {
381: 1:      'answer': 'false',
381: 1:      'question': 'xXxxoewrcoOoo',
381: 1:      'valid': true
381: 1:    },
381: 1:    {
381: 1:      'answer': 'false',
381: 1:      'question': 'XxxxooO',
381: 1:      'valid': true
381: 1:    },
381: 1:    {
381: 1:      'answer': 'true',
381: 1:      'question': 'zssddd',
381: 1:      'valid': true
381: 1:    }
381: 1:  ],
381: 1:  'info': [
381: 1:    '✅f(ooxx) = true',
381: 1:    '✅f(xooxx) = false',
381: 1:    '✅f(ooxXm) = true',
381: 1:    '✅f(zpzpzpp) = true',
381: 1:    '✅f(zzoo) = false',
381: 1:    '✅f(xxxooo) = true',
381: 1:    '✅f(xxxXooOo) = true',
381: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
381: 1:    '✅f(xXxxoewrcoOoo) = false',
381: 1:    '✅f(XxxxooO) = false',
381: 1:    '✅f(zssddd) = true',
381: 1:    '❌f(Xxxxertr34) = ??? != false'
381: 1:  ],
381: 1:  'level': 14,
381: 1:  'nextQuestion': 'Xxxxertr34',
381: 1:  'questions': [
381: 1:    'ooxx',
381: 1:    'xooxx',
381: 1:    'ooxXm',
381: 1:    'zpzpzpp',
381: 1:    'zzoo',
381: 1:    'xxxooo',
381: 1:    'xxxXooOo',
381: 1:    'xxx23424esdsfvxXXOOooo',
381: 1:    'xXxxoewrcoOoo',
381: 1:    'XxxxooO',
381: 1:    'zssddd',
381: 1:    'Xxxxertr34'
381: 1:  ]
381: 1:}
381: 1:Scores: 20620
381: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false']')
381: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
382: 1:BoardData {
382: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
382: 1:  'expectedAnswer': 'true',
382: 1:  'history': [
382: 1:    {
382: 1:      'answer': 'true',
382: 1:      'question': 'ooxx',
382: 1:      'valid': true
382: 1:    },
382: 1:    {
382: 1:      'answer': 'false',
382: 1:      'question': 'xooxx',
382: 1:      'valid': true
382: 1:    },
382: 1:    {
382: 1:      'answer': 'true',
382: 1:      'question': 'ooxXm',
382: 1:      'valid': true
382: 1:    },
382: 1:    {
382: 1:      'answer': 'true',
382: 1:      'question': 'zpzpzpp',
382: 1:      'valid': true
382: 1:    },
382: 1:    {
382: 1:      'answer': 'false',
382: 1:      'question': 'zzoo',
382: 1:      'valid': true
382: 1:    },
382: 1:    {
382: 1:      'answer': 'true',
382: 1:      'question': 'xxxooo',
382: 1:      'valid': true
382: 1:    },
382: 1:    {
382: 1:      'answer': 'true',
382: 1:      'question': 'xxxXooOo',
382: 1:      'valid': true
382: 1:    },
382: 1:    {
382: 1:      'answer': 'false',
382: 1:      'question': 'xxx23424esdsfvxXXOOooo',
382: 1:      'valid': true
382: 1:    },
382: 1:    {
382: 1:      'answer': 'false',
382: 1:      'question': 'xXxxoewrcoOoo',
382: 1:      'valid': true
382: 1:    },
382: 1:    {
382: 1:      'answer': 'false',
382: 1:      'question': 'XxxxooO',
382: 1:      'valid': true
382: 1:    },
382: 1:    {
382: 1:      'answer': 'true',
382: 1:      'question': 'zssddd',
382: 1:      'valid': true
382: 1:    },
382: 1:    {
382: 1:      'answer': 'false',
382: 1:      'question': 'Xxxxertr34',
382: 1:      'valid': true
382: 1:    }
382: 1:  ],
382: 1:  'info': [
382: 1:    '✅f(ooxx) = true',
382: 1:    '✅f(xooxx) = false',
382: 1:    '✅f(ooxXm) = true',
382: 1:    '✅f(zpzpzpp) = true',
382: 1:    '✅f(zzoo) = false',
382: 1:    '✅f(xxxooo) = true',
382: 1:    '✅f(xxxXooOo) = true',
382: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
382: 1:    '✅f(xXxxoewrcoOoo) = false',
382: 1:    '✅f(XxxxooO) = false',
382: 1:    '✅f(zssddd) = true',
382: 1:    '✅f(Xxxxertr34) = false',
382: 1:    '❌f(xXoXOFo) = ??? != true'
382: 1:  ],
382: 1:  'level': 14,
382: 1:  'nextQuestion': 'xXoXOFo',
382: 1:  'questions': [
382: 1:    'ooxx',
382: 1:    'xooxx',
382: 1:    'ooxXm',
382: 1:    'zpzpzpp',
382: 1:    'zzoo',
382: 1:    'xxxooo',
382: 1:    'xxxXooOo',
382: 1:    'xxx23424esdsfvxXXOOooo',
382: 1:    'xXxxoewrcoOoo',
382: 1:    'XxxxooO',
382: 1:    'zssddd',
382: 1:    'Xxxxertr34',
382: 1:    'xXoXOFo'
382: 1:  ]
382: 1:}
382: 1:Scores: 20624
382: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true']')
382: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
383: 1:BoardData {
383: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
383: 1:  'expectedAnswer': 'false',
383: 1:  'history': [
383: 1:    {
383: 1:      'answer': 'true',
383: 1:      'question': 'ooxx',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': 'false',
383: 1:      'question': 'xooxx',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': 'true',
383: 1:      'question': 'ooxXm',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': 'true',
383: 1:      'question': 'zpzpzpp',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': 'false',
383: 1:      'question': 'zzoo',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': 'true',
383: 1:      'question': 'xxxooo',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': 'true',
383: 1:      'question': 'xxxXooOo',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': 'false',
383: 1:      'question': 'xxx23424esdsfvxXXOOooo',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': 'false',
383: 1:      'question': 'xXxxoewrcoOoo',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': 'false',
383: 1:      'question': 'XxxxooO',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': 'true',
383: 1:      'question': 'zssddd',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': 'false',
383: 1:      'question': 'Xxxxertr34',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': 'true',
383: 1:      'question': 'xXoXOFo',
383: 1:      'valid': true
383: 1:    }
383: 1:  ],
383: 1:  'info': [
383: 1:    '✅f(ooxx) = true',
383: 1:    '✅f(xooxx) = false',
383: 1:    '✅f(ooxXm) = true',
383: 1:    '✅f(zpzpzpp) = true',
383: 1:    '✅f(zzoo) = false',
383: 1:    '✅f(xxxooo) = true',
383: 1:    '✅f(xxxXooOo) = true',
383: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
383: 1:    '✅f(xXxxoewrcoOoo) = false',
383: 1:    '✅f(XxxxooO) = false',
383: 1:    '✅f(zssddd) = true',
383: 1:    '✅f(Xxxxertr34) = false',
383: 1:    '✅f(xXoXOFo) = true',
383: 1:    '❌f(ooXXoOO) = ??? != false'
383: 1:  ],
383: 1:  'level': 14,
383: 1:  'nextQuestion': 'ooXXoOO',
383: 1:  'questions': [
383: 1:    'ooxx',
383: 1:    'xooxx',
383: 1:    'ooxXm',
383: 1:    'zpzpzpp',
383: 1:    'zzoo',
383: 1:    'xxxooo',
383: 1:    'xxxXooOo',
383: 1:    'xxx23424esdsfvxXXOOooo',
383: 1:    'xXxxoewrcoOoo',
383: 1:    'XxxxooO',
383: 1:    'zssddd',
383: 1:    'Xxxxertr34',
383: 1:    'xXoXOFo',
383: 1:    'ooXXoOO'
383: 1:  ]
383: 1:}
383: 1:Scores: 20628
383: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false']')
383: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
384: 1:BoardData {
384: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
384: 1:  'expectedAnswer': 'false',
384: 1:  'history': [
384: 1:    {
384: 1:      'answer': 'true',
384: 1:      'question': 'ooxx',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': 'false',
384: 1:      'question': 'xooxx',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': 'true',
384: 1:      'question': 'ooxXm',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': 'true',
384: 1:      'question': 'zpzpzpp',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': 'false',
384: 1:      'question': 'zzoo',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': 'true',
384: 1:      'question': 'xxxooo',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': 'true',
384: 1:      'question': 'xxxXooOo',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': 'false',
384: 1:      'question': 'xxx23424esdsfvxXXOOooo',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': 'false',
384: 1:      'question': 'xXxxoewrcoOoo',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': 'false',
384: 1:      'question': 'XxxxooO',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': 'true',
384: 1:      'question': 'zssddd',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': 'false',
384: 1:      'question': 'Xxxxertr34',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': 'true',
384: 1:      'question': 'xXoXOFo',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': 'false',
384: 1:      'question': 'ooXXoOO',
384: 1:      'valid': true
384: 1:    }
384: 1:  ],
384: 1:  'info': [
384: 1:    '✅f(ooxx) = true',
384: 1:    '✅f(xooxx) = false',
384: 1:    '✅f(ooxXm) = true',
384: 1:    '✅f(zpzpzpp) = true',
384: 1:    '✅f(zzoo) = false',
384: 1:    '✅f(xxxooo) = true',
384: 1:    '✅f(xxxXooOo) = true',
384: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
384: 1:    '✅f(xXxxoewrcoOoo) = false',
384: 1:    '✅f(XxxxooO) = false',
384: 1:    '✅f(zssddd) = true',
384: 1:    '✅f(Xxxxertr34) = false',
384: 1:    '✅f(xXoXOFo) = true',
384: 1:    '✅f(ooXXoOO) = false',
384: 1:    '❌f(RXT0oo) = ??? != false'
384: 1:  ],
384: 1:  'level': 14,
384: 1:  'nextQuestion': 'RXT0oo',
384: 1:  'questions': [
384: 1:    'ooxx',
384: 1:    'xooxx',
384: 1:    'ooxXm',
384: 1:    'zpzpzpp',
384: 1:    'zzoo',
384: 1:    'xxxooo',
384: 1:    'xxxXooOo',
384: 1:    'xxx23424esdsfvxXXOOooo',
384: 1:    'xXxxoewrcoOoo',
384: 1:    'XxxxooO',
384: 1:    'zssddd',
384: 1:    'Xxxxertr34',
384: 1:    'xXoXOFo',
384: 1:    'ooXXoOO',
384: 1:    'RXT0oo'
384: 1:  ]
384: 1:}
384: 1:Scores: 20632
384: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false']')
384: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
385: 1:BoardData {
385: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
385: 1:  'expectedAnswer': 'false',
385: 1:  'history': [
385: 1:    {
385: 1:      'answer': 'true',
385: 1:      'question': 'ooxx',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': 'false',
385: 1:      'question': 'xooxx',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': 'true',
385: 1:      'question': 'ooxXm',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': 'true',
385: 1:      'question': 'zpzpzpp',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': 'false',
385: 1:      'question': 'zzoo',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': 'true',
385: 1:      'question': 'xxxooo',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': 'true',
385: 1:      'question': 'xxxXooOo',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': 'false',
385: 1:      'question': 'xxx23424esdsfvxXXOOooo',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': 'false',
385: 1:      'question': 'xXxxoewrcoOoo',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': 'false',
385: 1:      'question': 'XxxxooO',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': 'true',
385: 1:      'question': 'zssddd',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': 'false',
385: 1:      'question': 'Xxxxertr34',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': 'true',
385: 1:      'question': 'xXoXOFo',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': 'false',
385: 1:      'question': 'ooXXoOO',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': 'false',
385: 1:      'question': 'RXT0oo',
385: 1:      'valid': true
385: 1:    }
385: 1:  ],
385: 1:  'info': [
385: 1:    '✅f(ooxx) = true',
385: 1:    '✅f(xooxx) = false',
385: 1:    '✅f(ooxXm) = true',
385: 1:    '✅f(zpzpzpp) = true',
385: 1:    '✅f(zzoo) = false',
385: 1:    '✅f(xxxooo) = true',
385: 1:    '✅f(xxxXooOo) = true',
385: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
385: 1:    '✅f(xXxxoewrcoOoo) = false',
385: 1:    '✅f(XxxxooO) = false',
385: 1:    '✅f(zssddd) = true',
385: 1:    '✅f(Xxxxertr34) = false',
385: 1:    '✅f(xXoXOFo) = true',
385: 1:    '✅f(ooXXoOO) = false',
385: 1:    '✅f(RXT0oo) = false',
385: 1:    '❌f(XXOAB0oxXx) = ??? != false'
385: 1:  ],
385: 1:  'level': 14,
385: 1:  'nextQuestion': 'XXOAB0oxXx',
385: 1:  'questions': [
385: 1:    'ooxx',
385: 1:    'xooxx',
385: 1:    'ooxXm',
385: 1:    'zpzpzpp',
385: 1:    'zzoo',
385: 1:    'xxxooo',
385: 1:    'xxxXooOo',
385: 1:    'xxx23424esdsfvxXXOOooo',
385: 1:    'xXxxoewrcoOoo',
385: 1:    'XxxxooO',
385: 1:    'zssddd',
385: 1:    'Xxxxertr34',
385: 1:    'xXoXOFo',
385: 1:    'ooXXoOO',
385: 1:    'RXT0oo',
385: 1:    'XXOAB0oxXx'
385: 1:  ]
385: 1:}
385: 1:Scores: 20636
385: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false']')
385: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
386: 1:BoardData {
386: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
386: 1:  'expectedAnswer': 'false',
386: 1:  'history': [
386: 1:    {
386: 1:      'answer': 'true',
386: 1:      'question': 'ooxx',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': 'false',
386: 1:      'question': 'xooxx',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': 'true',
386: 1:      'question': 'ooxXm',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': 'true',
386: 1:      'question': 'zpzpzpp',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': 'false',
386: 1:      'question': 'zzoo',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': 'true',
386: 1:      'question': 'xxxooo',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': 'true',
386: 1:      'question': 'xxxXooOo',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': 'false',
386: 1:      'question': 'xxx23424esdsfvxXXOOooo',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': 'false',
386: 1:      'question': 'xXxxoewrcoOoo',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': 'false',
386: 1:      'question': 'XxxxooO',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': 'true',
386: 1:      'question': 'zssddd',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': 'false',
386: 1:      'question': 'Xxxxertr34',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': 'true',
386: 1:      'question': 'xXoXOFo',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': 'false',
386: 1:      'question': 'ooXXoOO',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': 'false',
386: 1:      'question': 'RXT0oo',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': 'false',
386: 1:      'question': 'XXOAB0oxXx',
386: 1:      'valid': true
386: 1:    }
386: 1:  ],
386: 1:  'info': [
386: 1:    '✅f(ooxx) = true',
386: 1:    '✅f(xooxx) = false',
386: 1:    '✅f(ooxXm) = true',
386: 1:    '✅f(zpzpzpp) = true',
386: 1:    '✅f(zzoo) = false',
386: 1:    '✅f(xxxooo) = true',
386: 1:    '✅f(xxxXooOo) = true',
386: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
386: 1:    '✅f(xXxxoewrcoOoo) = false',
386: 1:    '✅f(XxxxooO) = false',
386: 1:    '✅f(zssddd) = true',
386: 1:    '✅f(Xxxxertr34) = false',
386: 1:    '✅f(xXoXOFo) = true',
386: 1:    '✅f(ooXXoOO) = false',
386: 1:    '✅f(RXT0oo) = false',
386: 1:    '✅f(XXOAB0oxXx) = false',
386: 1:    '❌f(JxXAO) = ??? != false'
386: 1:  ],
386: 1:  'level': 14,
386: 1:  'nextQuestion': 'JxXAO',
386: 1:  'questions': [
386: 1:    'ooxx',
386: 1:    'xooxx',
386: 1:    'ooxXm',
386: 1:    'zpzpzpp',
386: 1:    'zzoo',
386: 1:    'xxxooo',
386: 1:    'xxxXooOo',
386: 1:    'xxx23424esdsfvxXXOOooo',
386: 1:    'xXxxoewrcoOoo',
386: 1:    'XxxxooO',
386: 1:    'zssddd',
386: 1:    'Xxxxertr34',
386: 1:    'xXoXOFo',
386: 1:    'ooXXoOO',
386: 1:    'RXT0oo',
386: 1:    'XXOAB0oxXx',
386: 1:    'JxXAO'
386: 1:  ]
386: 1:}
386: 1:Scores: 20640
386: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false']')
386: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
387: 1:BoardData {
387: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
387: 1:  'expectedAnswer': 'false',
387: 1:  'history': [
387: 1:    {
387: 1:      'answer': 'true',
387: 1:      'question': 'ooxx',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': 'false',
387: 1:      'question': 'xooxx',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': 'true',
387: 1:      'question': 'ooxXm',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': 'true',
387: 1:      'question': 'zpzpzpp',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': 'false',
387: 1:      'question': 'zzoo',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': 'true',
387: 1:      'question': 'xxxooo',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': 'true',
387: 1:      'question': 'xxxXooOo',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': 'false',
387: 1:      'question': 'xxx23424esdsfvxXXOOooo',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': 'false',
387: 1:      'question': 'xXxxoewrcoOoo',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': 'false',
387: 1:      'question': 'XxxxooO',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': 'true',
387: 1:      'question': 'zssddd',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': 'false',
387: 1:      'question': 'Xxxxertr34',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': 'true',
387: 1:      'question': 'xXoXOFo',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': 'false',
387: 1:      'question': 'ooXXoOO',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': 'false',
387: 1:      'question': 'RXT0oo',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': 'false',
387: 1:      'question': 'XXOAB0oxXx',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': 'false',
387: 1:      'question': 'JxXAO',
387: 1:      'valid': true
387: 1:    }
387: 1:  ],
387: 1:  'info': [
387: 1:    '✅f(ooxx) = true',
387: 1:    '✅f(xooxx) = false',
387: 1:    '✅f(ooxXm) = true',
387: 1:    '✅f(zpzpzpp) = true',
387: 1:    '✅f(zzoo) = false',
387: 1:    '✅f(xxxooo) = true',
387: 1:    '✅f(xxxXooOo) = true',
387: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
387: 1:    '✅f(xXxxoewrcoOoo) = false',
387: 1:    '✅f(XxxxooO) = false',
387: 1:    '✅f(zssddd) = true',
387: 1:    '✅f(Xxxxertr34) = false',
387: 1:    '✅f(xXoXOFo) = true',
387: 1:    '✅f(ooXXoOO) = false',
387: 1:    '✅f(RXT0oo) = false',
387: 1:    '✅f(XXOAB0oxXx) = false',
387: 1:    '✅f(JxXAO) = false',
387: 1:    '❌f(PXXWXoO) = ??? != false'
387: 1:  ],
387: 1:  'level': 14,
387: 1:  'nextQuestion': 'PXXWXoO',
387: 1:  'questions': [
387: 1:    'ooxx',
387: 1:    'xooxx',
387: 1:    'ooxXm',
387: 1:    'zpzpzpp',
387: 1:    'zzoo',
387: 1:    'xxxooo',
387: 1:    'xxxXooOo',
387: 1:    'xxx23424esdsfvxXXOOooo',
387: 1:    'xXxxoewrcoOoo',
387: 1:    'XxxxooO',
387: 1:    'zssddd',
387: 1:    'Xxxxertr34',
387: 1:    'xXoXOFo',
387: 1:    'ooXXoOO',
387: 1:    'RXT0oo',
387: 1:    'XXOAB0oxXx',
387: 1:    'JxXAO',
387: 1:    'PXXWXoO'
387: 1:  ]
387: 1:}
387: 1:Scores: 20644
387: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false']')
387: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
388: 1:BoardData {
388: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
388: 1:  'expectedAnswer': 'false',
388: 1:  'history': [
388: 1:    {
388: 1:      'answer': 'true',
388: 1:      'question': 'ooxx',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': 'false',
388: 1:      'question': 'xooxx',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': 'true',
388: 1:      'question': 'ooxXm',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': 'true',
388: 1:      'question': 'zpzpzpp',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': 'false',
388: 1:      'question': 'zzoo',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': 'true',
388: 1:      'question': 'xxxooo',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': 'true',
388: 1:      'question': 'xxxXooOo',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': 'false',
388: 1:      'question': 'xxx23424esdsfvxXXOOooo',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': 'false',
388: 1:      'question': 'xXxxoewrcoOoo',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': 'false',
388: 1:      'question': 'XxxxooO',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': 'true',
388: 1:      'question': 'zssddd',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': 'false',
388: 1:      'question': 'Xxxxertr34',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': 'true',
388: 1:      'question': 'xXoXOFo',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': 'false',
388: 1:      'question': 'ooXXoOO',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': 'false',
388: 1:      'question': 'RXT0oo',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': 'false',
388: 1:      'question': 'XXOAB0oxXx',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': 'false',
388: 1:      'question': 'JxXAO',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': 'false',
388: 1:      'question': 'PXXWXoO',
388: 1:      'valid': true
388: 1:    }
388: 1:  ],
388: 1:  'info': [
388: 1:    '✅f(ooxx) = true',
388: 1:    '✅f(xooxx) = false',
388: 1:    '✅f(ooxXm) = true',
388: 1:    '✅f(zpzpzpp) = true',
388: 1:    '✅f(zzoo) = false',
388: 1:    '✅f(xxxooo) = true',
388: 1:    '✅f(xxxXooOo) = true',
388: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
388: 1:    '✅f(xXxxoewrcoOoo) = false',
388: 1:    '✅f(XxxxooO) = false',
388: 1:    '✅f(zssddd) = true',
388: 1:    '✅f(Xxxxertr34) = false',
388: 1:    '✅f(xXoXOFo) = true',
388: 1:    '✅f(ooXXoOO) = false',
388: 1:    '✅f(RXT0oo) = false',
388: 1:    '✅f(XXOAB0oxXx) = false',
388: 1:    '✅f(JxXAO) = false',
388: 1:    '✅f(PXXWXoO) = false',
388: 1:    '❌f(XO7XxX) = ??? != false'
388: 1:  ],
388: 1:  'level': 14,
388: 1:  'nextQuestion': 'XO7XxX',
388: 1:  'questions': [
388: 1:    'ooxx',
388: 1:    'xooxx',
388: 1:    'ooxXm',
388: 1:    'zpzpzpp',
388: 1:    'zzoo',
388: 1:    'xxxooo',
388: 1:    'xxxXooOo',
388: 1:    'xxx23424esdsfvxXXOOooo',
388: 1:    'xXxxoewrcoOoo',
388: 1:    'XxxxooO',
388: 1:    'zssddd',
388: 1:    'Xxxxertr34',
388: 1:    'xXoXOFo',
388: 1:    'ooXXoOO',
388: 1:    'RXT0oo',
388: 1:    'XXOAB0oxXx',
388: 1:    'JxXAO',
388: 1:    'PXXWXoO',
388: 1:    'XO7XxX'
388: 1:  ]
388: 1:}
388: 1:Scores: 20648
388: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false']')
388: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
389: 1:BoardData {
389: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
389: 1:  'expectedAnswer': 'false',
389: 1:  'history': [
389: 1:    {
389: 1:      'answer': 'true',
389: 1:      'question': 'ooxx',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': 'false',
389: 1:      'question': 'xooxx',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': 'true',
389: 1:      'question': 'ooxXm',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': 'true',
389: 1:      'question': 'zpzpzpp',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': 'false',
389: 1:      'question': 'zzoo',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': 'true',
389: 1:      'question': 'xxxooo',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': 'true',
389: 1:      'question': 'xxxXooOo',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': 'false',
389: 1:      'question': 'xxx23424esdsfvxXXOOooo',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': 'false',
389: 1:      'question': 'xXxxoewrcoOoo',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': 'false',
389: 1:      'question': 'XxxxooO',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': 'true',
389: 1:      'question': 'zssddd',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': 'false',
389: 1:      'question': 'Xxxxertr34',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': 'true',
389: 1:      'question': 'xXoXOFo',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': 'false',
389: 1:      'question': 'ooXXoOO',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': 'false',
389: 1:      'question': 'RXT0oo',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': 'false',
389: 1:      'question': 'XXOAB0oxXx',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': 'false',
389: 1:      'question': 'JxXAO',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': 'false',
389: 1:      'question': 'PXXWXoO',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': 'false',
389: 1:      'question': 'XO7XxX',
389: 1:      'valid': true
389: 1:    }
389: 1:  ],
389: 1:  'info': [
389: 1:    '✅f(ooxx) = true',
389: 1:    '✅f(xooxx) = false',
389: 1:    '✅f(ooxXm) = true',
389: 1:    '✅f(zpzpzpp) = true',
389: 1:    '✅f(zzoo) = false',
389: 1:    '✅f(xxxooo) = true',
389: 1:    '✅f(xxxXooOo) = true',
389: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
389: 1:    '✅f(xXxxoewrcoOoo) = false',
389: 1:    '✅f(XxxxooO) = false',
389: 1:    '✅f(zssddd) = true',
389: 1:    '✅f(Xxxxertr34) = false',
389: 1:    '✅f(xXoXOFo) = true',
389: 1:    '✅f(ooXXoOO) = false',
389: 1:    '✅f(RXT0oo) = false',
389: 1:    '✅f(XXOAB0oxXx) = false',
389: 1:    '✅f(JxXAO) = false',
389: 1:    '✅f(PXXWXoO) = false',
389: 1:    '✅f(XO7XxX) = false',
389: 1:    '❌f(FGoXBOFO) = ??? != false'
389: 1:  ],
389: 1:  'level': 14,
389: 1:  'nextQuestion': 'FGoXBOFO',
389: 1:  'questions': [
389: 1:    'ooxx',
389: 1:    'xooxx',
389: 1:    'ooxXm',
389: 1:    'zpzpzpp',
389: 1:    'zzoo',
389: 1:    'xxxooo',
389: 1:    'xxxXooOo',
389: 1:    'xxx23424esdsfvxXXOOooo',
389: 1:    'xXxxoewrcoOoo',
389: 1:    'XxxxooO',
389: 1:    'zssddd',
389: 1:    'Xxxxertr34',
389: 1:    'xXoXOFo',
389: 1:    'ooXXoOO',
389: 1:    'RXT0oo',
389: 1:    'XXOAB0oxXx',
389: 1:    'JxXAO',
389: 1:    'PXXWXoO',
389: 1:    'XO7XxX',
389: 1:    'FGoXBOFO'
389: 1:  ]
389: 1:}
389: 1:Scores: 20652
389: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false']')
389: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
390: 1:BoardData {
390: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
390: 1:  'expectedAnswer': 'false',
390: 1:  'history': [
390: 1:    {
390: 1:      'answer': 'true',
390: 1:      'question': 'ooxx',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': 'false',
390: 1:      'question': 'xooxx',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': 'true',
390: 1:      'question': 'ooxXm',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': 'true',
390: 1:      'question': 'zpzpzpp',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': 'false',
390: 1:      'question': 'zzoo',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': 'true',
390: 1:      'question': 'xxxooo',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': 'true',
390: 1:      'question': 'xxxXooOo',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': 'false',
390: 1:      'question': 'xxx23424esdsfvxXXOOooo',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': 'false',
390: 1:      'question': 'xXxxoewrcoOoo',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': 'false',
390: 1:      'question': 'XxxxooO',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': 'true',
390: 1:      'question': 'zssddd',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': 'false',
390: 1:      'question': 'Xxxxertr34',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': 'true',
390: 1:      'question': 'xXoXOFo',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': 'false',
390: 1:      'question': 'ooXXoOO',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': 'false',
390: 1:      'question': 'RXT0oo',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': 'false',
390: 1:      'question': 'XXOAB0oxXx',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': 'false',
390: 1:      'question': 'JxXAO',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': 'false',
390: 1:      'question': 'PXXWXoO',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': 'false',
390: 1:      'question': 'XO7XxX',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': 'false',
390: 1:      'question': 'FGoXBOFO',
390: 1:      'valid': true
390: 1:    }
390: 1:  ],
390: 1:  'info': [
390: 1:    '✅f(ooxx) = true',
390: 1:    '✅f(xooxx) = false',
390: 1:    '✅f(ooxXm) = true',
390: 1:    '✅f(zpzpzpp) = true',
390: 1:    '✅f(zzoo) = false',
390: 1:    '✅f(xxxooo) = true',
390: 1:    '✅f(xxxXooOo) = true',
390: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
390: 1:    '✅f(xXxxoewrcoOoo) = false',
390: 1:    '✅f(XxxxooO) = false',
390: 1:    '✅f(zssddd) = true',
390: 1:    '✅f(Xxxxertr34) = false',
390: 1:    '✅f(xXoXOFo) = true',
390: 1:    '✅f(ooXXoOO) = false',
390: 1:    '✅f(RXT0oo) = false',
390: 1:    '✅f(XXOAB0oxXx) = false',
390: 1:    '✅f(JxXAO) = false',
390: 1:    '✅f(PXXWXoO) = false',
390: 1:    '✅f(XO7XxX) = false',
390: 1:    '✅f(FGoXBOFO) = false',
390: 1:    '❌f(oO) = ??? != false'
390: 1:  ],
390: 1:  'level': 14,
390: 1:  'nextQuestion': 'oO',
390: 1:  'questions': [
390: 1:    'ooxx',
390: 1:    'xooxx',
390: 1:    'ooxXm',
390: 1:    'zpzpzpp',
390: 1:    'zzoo',
390: 1:    'xxxooo',
390: 1:    'xxxXooOo',
390: 1:    'xxx23424esdsfvxXXOOooo',
390: 1:    'xXxxoewrcoOoo',
390: 1:    'XxxxooO',
390: 1:    'zssddd',
390: 1:    'Xxxxertr34',
390: 1:    'xXoXOFo',
390: 1:    'ooXXoOO',
390: 1:    'RXT0oo',
390: 1:    'XXOAB0oxXx',
390: 1:    'JxXAO',
390: 1:    'PXXWXoO',
390: 1:    'XO7XxX',
390: 1:    'FGoXBOFO',
390: 1:    'oO'
390: 1:  ]
390: 1:}
390: 1:Scores: 20656
390: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false']')
390: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
391: 1:BoardData {
391: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
391: 1:  'expectedAnswer': 'false',
391: 1:  'history': [
391: 1:    {
391: 1:      'answer': 'true',
391: 1:      'question': 'ooxx',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': 'false',
391: 1:      'question': 'xooxx',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': 'true',
391: 1:      'question': 'ooxXm',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': 'true',
391: 1:      'question': 'zpzpzpp',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': 'false',
391: 1:      'question': 'zzoo',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': 'true',
391: 1:      'question': 'xxxooo',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': 'true',
391: 1:      'question': 'xxxXooOo',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': 'false',
391: 1:      'question': 'xxx23424esdsfvxXXOOooo',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': 'false',
391: 1:      'question': 'xXxxoewrcoOoo',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': 'false',
391: 1:      'question': 'XxxxooO',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': 'true',
391: 1:      'question': 'zssddd',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': 'false',
391: 1:      'question': 'Xxxxertr34',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': 'true',
391: 1:      'question': 'xXoXOFo',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': 'false',
391: 1:      'question': 'ooXXoOO',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': 'false',
391: 1:      'question': 'RXT0oo',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': 'false',
391: 1:      'question': 'XXOAB0oxXx',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': 'false',
391: 1:      'question': 'JxXAO',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': 'false',
391: 1:      'question': 'PXXWXoO',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': 'false',
391: 1:      'question': 'XO7XxX',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': 'false',
391: 1:      'question': 'FGoXBOFO',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': 'false',
391: 1:      'question': 'oO',
391: 1:      'valid': true
391: 1:    }
391: 1:  ],
391: 1:  'info': [
391: 1:    '✅f(ooxx) = true',
391: 1:    '✅f(xooxx) = false',
391: 1:    '✅f(ooxXm) = true',
391: 1:    '✅f(zpzpzpp) = true',
391: 1:    '✅f(zzoo) = false',
391: 1:    '✅f(xxxooo) = true',
391: 1:    '✅f(xxxXooOo) = true',
391: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
391: 1:    '✅f(xXxxoewrcoOoo) = false',
391: 1:    '✅f(XxxxooO) = false',
391: 1:    '✅f(zssddd) = true',
391: 1:    '✅f(Xxxxertr34) = false',
391: 1:    '✅f(xXoXOFo) = true',
391: 1:    '✅f(ooXXoOO) = false',
391: 1:    '✅f(RXT0oo) = false',
391: 1:    '✅f(XXOAB0oxXx) = false',
391: 1:    '✅f(JxXAO) = false',
391: 1:    '✅f(PXXWXoO) = false',
391: 1:    '✅f(XO7XxX) = false',
391: 1:    '✅f(FGoXBOFO) = false',
391: 1:    '✅f(oO) = false',
391: 1:    '❌f(XCOXXXO) = ??? != false'
391: 1:  ],
391: 1:  'level': 14,
391: 1:  'nextQuestion': 'XCOXXXO',
391: 1:  'questions': [
391: 1:    'ooxx',
391: 1:    'xooxx',
391: 1:    'ooxXm',
391: 1:    'zpzpzpp',
391: 1:    'zzoo',
391: 1:    'xxxooo',
391: 1:    'xxxXooOo',
391: 1:    'xxx23424esdsfvxXXOOooo',
391: 1:    'xXxxoewrcoOoo',
391: 1:    'XxxxooO',
391: 1:    'zssddd',
391: 1:    'Xxxxertr34',
391: 1:    'xXoXOFo',
391: 1:    'ooXXoOO',
391: 1:    'RXT0oo',
391: 1:    'XXOAB0oxXx',
391: 1:    'JxXAO',
391: 1:    'PXXWXoO',
391: 1:    'XO7XxX',
391: 1:    'FGoXBOFO',
391: 1:    'oO',
391: 1:    'XCOXXXO'
391: 1:  ]
391: 1:}
391: 1:Scores: 20660
391: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false']')
391: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
392: 1:BoardData {
392: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
392: 1:  'expectedAnswer': 'false',
392: 1:  'history': [
392: 1:    {
392: 1:      'answer': 'true',
392: 1:      'question': 'ooxx',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': 'false',
392: 1:      'question': 'xooxx',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': 'true',
392: 1:      'question': 'ooxXm',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': 'true',
392: 1:      'question': 'zpzpzpp',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': 'false',
392: 1:      'question': 'zzoo',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': 'true',
392: 1:      'question': 'xxxooo',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': 'true',
392: 1:      'question': 'xxxXooOo',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': 'false',
392: 1:      'question': 'xxx23424esdsfvxXXOOooo',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': 'false',
392: 1:      'question': 'xXxxoewrcoOoo',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': 'false',
392: 1:      'question': 'XxxxooO',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': 'true',
392: 1:      'question': 'zssddd',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': 'false',
392: 1:      'question': 'Xxxxertr34',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': 'true',
392: 1:      'question': 'xXoXOFo',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': 'false',
392: 1:      'question': 'ooXXoOO',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': 'false',
392: 1:      'question': 'RXT0oo',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': 'false',
392: 1:      'question': 'XXOAB0oxXx',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': 'false',
392: 1:      'question': 'JxXAO',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': 'false',
392: 1:      'question': 'PXXWXoO',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': 'false',
392: 1:      'question': 'XO7XxX',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': 'false',
392: 1:      'question': 'FGoXBOFO',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': 'false',
392: 1:      'question': 'oO',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': 'false',
392: 1:      'question': 'XCOXXXO',
392: 1:      'valid': true
392: 1:    }
392: 1:  ],
392: 1:  'info': [
392: 1:    '✅f(ooxx) = true',
392: 1:    '✅f(xooxx) = false',
392: 1:    '✅f(ooxXm) = true',
392: 1:    '✅f(zpzpzpp) = true',
392: 1:    '✅f(zzoo) = false',
392: 1:    '✅f(xxxooo) = true',
392: 1:    '✅f(xxxXooOo) = true',
392: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
392: 1:    '✅f(xXxxoewrcoOoo) = false',
392: 1:    '✅f(XxxxooO) = false',
392: 1:    '✅f(zssddd) = true',
392: 1:    '✅f(Xxxxertr34) = false',
392: 1:    '✅f(xXoXOFo) = true',
392: 1:    '✅f(ooXXoOO) = false',
392: 1:    '✅f(RXT0oo) = false',
392: 1:    '✅f(XXOAB0oxXx) = false',
392: 1:    '✅f(JxXAO) = false',
392: 1:    '✅f(PXXWXoO) = false',
392: 1:    '✅f(XO7XxX) = false',
392: 1:    '✅f(FGoXBOFO) = false',
392: 1:    '✅f(oO) = false',
392: 1:    '✅f(XCOXXXO) = false',
392: 1:    '❌f(WXXxXOXXT) = ??? != false'
392: 1:  ],
392: 1:  'level': 14,
392: 1:  'nextQuestion': 'WXXxXOXXT',
392: 1:  'questions': [
392: 1:    'ooxx',
392: 1:    'xooxx',
392: 1:    'ooxXm',
392: 1:    'zpzpzpp',
392: 1:    'zzoo',
392: 1:    'xxxooo',
392: 1:    'xxxXooOo',
392: 1:    'xxx23424esdsfvxXXOOooo',
392: 1:    'xXxxoewrcoOoo',
392: 1:    'XxxxooO',
392: 1:    'zssddd',
392: 1:    'Xxxxertr34',
392: 1:    'xXoXOFo',
392: 1:    'ooXXoOO',
392: 1:    'RXT0oo',
392: 1:    'XXOAB0oxXx',
392: 1:    'JxXAO',
392: 1:    'PXXWXoO',
392: 1:    'XO7XxX',
392: 1:    'FGoXBOFO',
392: 1:    'oO',
392: 1:    'XCOXXXO',
392: 1:    'WXXxXOXXT'
392: 1:  ]
392: 1:}
392: 1:Scores: 20664
392: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false']')
392: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
393: 1:BoardData {
393: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
393: 1:  'expectedAnswer': 'false',
393: 1:  'history': [
393: 1:    {
393: 1:      'answer': 'true',
393: 1:      'question': 'ooxx',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': 'false',
393: 1:      'question': 'xooxx',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': 'true',
393: 1:      'question': 'ooxXm',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': 'true',
393: 1:      'question': 'zpzpzpp',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': 'false',
393: 1:      'question': 'zzoo',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': 'true',
393: 1:      'question': 'xxxooo',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': 'true',
393: 1:      'question': 'xxxXooOo',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': 'false',
393: 1:      'question': 'xxx23424esdsfvxXXOOooo',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': 'false',
393: 1:      'question': 'xXxxoewrcoOoo',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': 'false',
393: 1:      'question': 'XxxxooO',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': 'true',
393: 1:      'question': 'zssddd',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': 'false',
393: 1:      'question': 'Xxxxertr34',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': 'true',
393: 1:      'question': 'xXoXOFo',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': 'false',
393: 1:      'question': 'ooXXoOO',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': 'false',
393: 1:      'question': 'RXT0oo',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': 'false',
393: 1:      'question': 'XXOAB0oxXx',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': 'false',
393: 1:      'question': 'JxXAO',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': 'false',
393: 1:      'question': 'PXXWXoO',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': 'false',
393: 1:      'question': 'XO7XxX',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': 'false',
393: 1:      'question': 'FGoXBOFO',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': 'false',
393: 1:      'question': 'oO',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': 'false',
393: 1:      'question': 'XCOXXXO',
393: 1:      'valid': true
393: 1:    },
393: 1:    {
393: 1:      'answer': 'false',
393: 1:      'question': 'WXXxXOXXT',
393: 1:      'valid': true
393: 1:    }
393: 1:  ],
393: 1:  'info': [
393: 1:    '✅f(ooxx) = true',
393: 1:    '✅f(xooxx) = false',
393: 1:    '✅f(ooxXm) = true',
393: 1:    '✅f(zpzpzpp) = true',
393: 1:    '✅f(zzoo) = false',
393: 1:    '✅f(xxxooo) = true',
393: 1:    '✅f(xxxXooOo) = true',
393: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
393: 1:    '✅f(xXxxoewrcoOoo) = false',
393: 1:    '✅f(XxxxooO) = false',
393: 1:    '✅f(zssddd) = true',
393: 1:    '✅f(Xxxxertr34) = false',
393: 1:    '✅f(xXoXOFo) = true',
393: 1:    '✅f(ooXXoOO) = false',
393: 1:    '✅f(RXT0oo) = false',
393: 1:    '✅f(XXOAB0oxXx) = false',
393: 1:    '✅f(JxXAO) = false',
393: 1:    '✅f(PXXWXoO) = false',
393: 1:    '✅f(XO7XxX) = false',
393: 1:    '✅f(FGoXBOFO) = false',
393: 1:    '✅f(oO) = false',
393: 1:    '✅f(XCOXXXO) = false',
393: 1:    '✅f(WXXxXOXXT) = false',
393: 1:    '❌f(RXXoX) = ??? != false'
393: 1:  ],
393: 1:  'level': 14,
393: 1:  'nextQuestion': 'RXXoX',
393: 1:  'questions': [
393: 1:    'ooxx',
393: 1:    'xooxx',
393: 1:    'ooxXm',
393: 1:    'zpzpzpp',
393: 1:    'zzoo',
393: 1:    'xxxooo',
393: 1:    'xxxXooOo',
393: 1:    'xxx23424esdsfvxXXOOooo',
393: 1:    'xXxxoewrcoOoo',
393: 1:    'XxxxooO',
393: 1:    'zssddd',
393: 1:    'Xxxxertr34',
393: 1:    'xXoXOFo',
393: 1:    'ooXXoOO',
393: 1:    'RXT0oo',
393: 1:    'XXOAB0oxXx',
393: 1:    'JxXAO',
393: 1:    'PXXWXoO',
393: 1:    'XO7XxX',
393: 1:    'FGoXBOFO',
393: 1:    'oO',
393: 1:    'XCOXXXO',
393: 1:    'WXXxXOXXT',
393: 1:    'RXXoX'
393: 1:  ]
393: 1:}
393: 1:Scores: 20668
393: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false']')
393: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
394: 1:BoardData {
394: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
394: 1:  'expectedAnswer': 'true',
394: 1:  'history': [
394: 1:    {
394: 1:      'answer': 'true',
394: 1:      'question': 'ooxx',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': 'false',
394: 1:      'question': 'xooxx',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': 'true',
394: 1:      'question': 'ooxXm',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': 'true',
394: 1:      'question': 'zpzpzpp',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': 'false',
394: 1:      'question': 'zzoo',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': 'true',
394: 1:      'question': 'xxxooo',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': 'true',
394: 1:      'question': 'xxxXooOo',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': 'false',
394: 1:      'question': 'xxx23424esdsfvxXXOOooo',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': 'false',
394: 1:      'question': 'xXxxoewrcoOoo',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': 'false',
394: 1:      'question': 'XxxxooO',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': 'true',
394: 1:      'question': 'zssddd',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': 'false',
394: 1:      'question': 'Xxxxertr34',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': 'true',
394: 1:      'question': 'xXoXOFo',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': 'false',
394: 1:      'question': 'ooXXoOO',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': 'false',
394: 1:      'question': 'RXT0oo',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': 'false',
394: 1:      'question': 'XXOAB0oxXx',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': 'false',
394: 1:      'question': 'JxXAO',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': 'false',
394: 1:      'question': 'PXXWXoO',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': 'false',
394: 1:      'question': 'XO7XxX',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': 'false',
394: 1:      'question': 'FGoXBOFO',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': 'false',
394: 1:      'question': 'oO',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': 'false',
394: 1:      'question': 'XCOXXXO',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': 'false',
394: 1:      'question': 'WXXxXOXXT',
394: 1:      'valid': true
394: 1:    },
394: 1:    {
394: 1:      'answer': 'false',
394: 1:      'question': 'RXXoX',
394: 1:      'valid': true
394: 1:    }
394: 1:  ],
394: 1:  'info': [
394: 1:    '✅f(ooxx) = true',
394: 1:    '✅f(xooxx) = false',
394: 1:    '✅f(ooxXm) = true',
394: 1:    '✅f(zpzpzpp) = true',
394: 1:    '✅f(zzoo) = false',
394: 1:    '✅f(xxxooo) = true',
394: 1:    '✅f(xxxXooOo) = true',
394: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
394: 1:    '✅f(xXxxoewrcoOoo) = false',
394: 1:    '✅f(XxxxooO) = false',
394: 1:    '✅f(zssddd) = true',
394: 1:    '✅f(Xxxxertr34) = false',
394: 1:    '✅f(xXoXOFo) = true',
394: 1:    '✅f(ooXXoOO) = false',
394: 1:    '✅f(RXT0oo) = false',
394: 1:    '✅f(XXOAB0oxXx) = false',
394: 1:    '✅f(JxXAO) = false',
394: 1:    '✅f(PXXWXoO) = false',
394: 1:    '✅f(XO7XxX) = false',
394: 1:    '✅f(FGoXBOFO) = false',
394: 1:    '✅f(oO) = false',
394: 1:    '✅f(XCOXXXO) = false',
394: 1:    '✅f(WXXxXOXXT) = false',
394: 1:    '✅f(RXXoX) = false',
394: 1:    '❌f(oXOoxXW) = ??? != true'
394: 1:  ],
394: 1:  'level': 14,
394: 1:  'nextQuestion': 'oXOoxXW',
394: 1:  'questions': [
394: 1:    'ooxx',
394: 1:    'xooxx',
394: 1:    'ooxXm',
394: 1:    'zpzpzpp',
394: 1:    'zzoo',
394: 1:    'xxxooo',
394: 1:    'xxxXooOo',
394: 1:    'xxx23424esdsfvxXXOOooo',
394: 1:    'xXxxoewrcoOoo',
394: 1:    'XxxxooO',
394: 1:    'zssddd',
394: 1:    'Xxxxertr34',
394: 1:    'xXoXOFo',
394: 1:    'ooXXoOO',
394: 1:    'RXT0oo',
394: 1:    'XXOAB0oxXx',
394: 1:    'JxXAO',
394: 1:    'PXXWXoO',
394: 1:    'XO7XxX',
394: 1:    'FGoXBOFO',
394: 1:    'oO',
394: 1:    'XCOXXXO',
394: 1:    'WXXxXOXXT',
394: 1:    'RXXoX',
394: 1:    'oXOoxXW'
394: 1:  ]
394: 1:}
394: 1:Scores: 20672
394: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true']')
394: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
395: 1:BoardData {
395: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
395: 1:  'expectedAnswer': 'false',
395: 1:  'history': [
395: 1:    {
395: 1:      'answer': 'true',
395: 1:      'question': 'ooxx',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': 'false',
395: 1:      'question': 'xooxx',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': 'true',
395: 1:      'question': 'ooxXm',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': 'true',
395: 1:      'question': 'zpzpzpp',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': 'false',
395: 1:      'question': 'zzoo',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': 'true',
395: 1:      'question': 'xxxooo',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': 'true',
395: 1:      'question': 'xxxXooOo',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': 'false',
395: 1:      'question': 'xxx23424esdsfvxXXOOooo',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': 'false',
395: 1:      'question': 'xXxxoewrcoOoo',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': 'false',
395: 1:      'question': 'XxxxooO',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': 'true',
395: 1:      'question': 'zssddd',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': 'false',
395: 1:      'question': 'Xxxxertr34',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': 'true',
395: 1:      'question': 'xXoXOFo',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': 'false',
395: 1:      'question': 'ooXXoOO',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': 'false',
395: 1:      'question': 'RXT0oo',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': 'false',
395: 1:      'question': 'XXOAB0oxXx',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': 'false',
395: 1:      'question': 'JxXAO',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': 'false',
395: 1:      'question': 'PXXWXoO',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': 'false',
395: 1:      'question': 'XO7XxX',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': 'false',
395: 1:      'question': 'FGoXBOFO',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': 'false',
395: 1:      'question': 'oO',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': 'false',
395: 1:      'question': 'XCOXXXO',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': 'false',
395: 1:      'question': 'WXXxXOXXT',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': 'false',
395: 1:      'question': 'RXXoX',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': 'true',
395: 1:      'question': 'oXOoxXW',
395: 1:      'valid': true
395: 1:    }
395: 1:  ],
395: 1:  'info': [
395: 1:    '✅f(ooxx) = true',
395: 1:    '✅f(xooxx) = false',
395: 1:    '✅f(ooxXm) = true',
395: 1:    '✅f(zpzpzpp) = true',
395: 1:    '✅f(zzoo) = false',
395: 1:    '✅f(xxxooo) = true',
395: 1:    '✅f(xxxXooOo) = true',
395: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
395: 1:    '✅f(xXxxoewrcoOoo) = false',
395: 1:    '✅f(XxxxooO) = false',
395: 1:    '✅f(zssddd) = true',
395: 1:    '✅f(Xxxxertr34) = false',
395: 1:    '✅f(xXoXOFo) = true',
395: 1:    '✅f(ooXXoOO) = false',
395: 1:    '✅f(RXT0oo) = false',
395: 1:    '✅f(XXOAB0oxXx) = false',
395: 1:    '✅f(JxXAO) = false',
395: 1:    '✅f(PXXWXoO) = false',
395: 1:    '✅f(XO7XxX) = false',
395: 1:    '✅f(FGoXBOFO) = false',
395: 1:    '✅f(oO) = false',
395: 1:    '✅f(XCOXXXO) = false',
395: 1:    '✅f(WXXxXOXXT) = false',
395: 1:    '✅f(RXXoX) = false',
395: 1:    '✅f(oXOoxXW) = true',
395: 1:    '❌f(x) = ??? != false'
395: 1:  ],
395: 1:  'level': 14,
395: 1:  'nextQuestion': 'x',
395: 1:  'questions': [
395: 1:    'ooxx',
395: 1:    'xooxx',
395: 1:    'ooxXm',
395: 1:    'zpzpzpp',
395: 1:    'zzoo',
395: 1:    'xxxooo',
395: 1:    'xxxXooOo',
395: 1:    'xxx23424esdsfvxXXOOooo',
395: 1:    'xXxxoewrcoOoo',
395: 1:    'XxxxooO',
395: 1:    'zssddd',
395: 1:    'Xxxxertr34',
395: 1:    'xXoXOFo',
395: 1:    'ooXXoOO',
395: 1:    'RXT0oo',
395: 1:    'XXOAB0oxXx',
395: 1:    'JxXAO',
395: 1:    'PXXWXoO',
395: 1:    'XO7XxX',
395: 1:    'FGoXBOFO',
395: 1:    'oO',
395: 1:    'XCOXXXO',
395: 1:    'WXXxXOXXT',
395: 1:    'RXXoX',
395: 1:    'oXOoxXW',
395: 1:    'x'
395: 1:  ]
395: 1:}
395: 1:Scores: 20676
395: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false']')
395: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
396: 1:BoardData {
396: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
396: 1:  'expectedAnswer': 'false',
396: 1:  'history': [
396: 1:    {
396: 1:      'answer': 'true',
396: 1:      'question': 'ooxx',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': 'false',
396: 1:      'question': 'xooxx',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': 'true',
396: 1:      'question': 'ooxXm',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': 'true',
396: 1:      'question': 'zpzpzpp',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': 'false',
396: 1:      'question': 'zzoo',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': 'true',
396: 1:      'question': 'xxxooo',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': 'true',
396: 1:      'question': 'xxxXooOo',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': 'false',
396: 1:      'question': 'xxx23424esdsfvxXXOOooo',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': 'false',
396: 1:      'question': 'xXxxoewrcoOoo',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': 'false',
396: 1:      'question': 'XxxxooO',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': 'true',
396: 1:      'question': 'zssddd',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': 'false',
396: 1:      'question': 'Xxxxertr34',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': 'true',
396: 1:      'question': 'xXoXOFo',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': 'false',
396: 1:      'question': 'ooXXoOO',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': 'false',
396: 1:      'question': 'RXT0oo',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': 'false',
396: 1:      'question': 'XXOAB0oxXx',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': 'false',
396: 1:      'question': 'JxXAO',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': 'false',
396: 1:      'question': 'PXXWXoO',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': 'false',
396: 1:      'question': 'XO7XxX',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': 'false',
396: 1:      'question': 'FGoXBOFO',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': 'false',
396: 1:      'question': 'oO',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': 'false',
396: 1:      'question': 'XCOXXXO',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': 'false',
396: 1:      'question': 'WXXxXOXXT',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': 'false',
396: 1:      'question': 'RXXoX',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': 'true',
396: 1:      'question': 'oXOoxXW',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': 'false',
396: 1:      'question': 'x',
396: 1:      'valid': true
396: 1:    }
396: 1:  ],
396: 1:  'info': [
396: 1:    '✅f(ooxx) = true',
396: 1:    '✅f(xooxx) = false',
396: 1:    '✅f(ooxXm) = true',
396: 1:    '✅f(zpzpzpp) = true',
396: 1:    '✅f(zzoo) = false',
396: 1:    '✅f(xxxooo) = true',
396: 1:    '✅f(xxxXooOo) = true',
396: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
396: 1:    '✅f(xXxxoewrcoOoo) = false',
396: 1:    '✅f(XxxxooO) = false',
396: 1:    '✅f(zssddd) = true',
396: 1:    '✅f(Xxxxertr34) = false',
396: 1:    '✅f(xXoXOFo) = true',
396: 1:    '✅f(ooXXoOO) = false',
396: 1:    '✅f(RXT0oo) = false',
396: 1:    '✅f(XXOAB0oxXx) = false',
396: 1:    '✅f(JxXAO) = false',
396: 1:    '✅f(PXXWXoO) = false',
396: 1:    '✅f(XO7XxX) = false',
396: 1:    '✅f(FGoXBOFO) = false',
396: 1:    '✅f(oO) = false',
396: 1:    '✅f(XCOXXXO) = false',
396: 1:    '✅f(WXXxXOXXT) = false',
396: 1:    '✅f(RXXoX) = false',
396: 1:    '✅f(oXOoxXW) = true',
396: 1:    '✅f(x) = false',
396: 1:    '❌f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = ??? != false'
396: 1:  ],
396: 1:  'level': 14,
396: 1:  'nextQuestion': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
396: 1:  'questions': [
396: 1:    'ooxx',
396: 1:    'xooxx',
396: 1:    'ooxXm',
396: 1:    'zpzpzpp',
396: 1:    'zzoo',
396: 1:    'xxxooo',
396: 1:    'xxxXooOo',
396: 1:    'xxx23424esdsfvxXXOOooo',
396: 1:    'xXxxoewrcoOoo',
396: 1:    'XxxxooO',
396: 1:    'zssddd',
396: 1:    'Xxxxertr34',
396: 1:    'xXoXOFo',
396: 1:    'ooXXoOO',
396: 1:    'RXT0oo',
396: 1:    'XXOAB0oxXx',
396: 1:    'JxXAO',
396: 1:    'PXXWXoO',
396: 1:    'XO7XxX',
396: 1:    'FGoXBOFO',
396: 1:    'oO',
396: 1:    'XCOXXXO',
396: 1:    'WXXxXOXXT',
396: 1:    'RXXoX',
396: 1:    'oXOoxXW',
396: 1:    'x',
396: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72'
396: 1:  ]
396: 1:}
396: 1:Scores: 20680
396: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false']')
396: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
397: 1:BoardData {
397: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
397: 1:  'expectedAnswer': 'true',
397: 1:  'history': [
397: 1:    {
397: 1:      'answer': 'true',
397: 1:      'question': 'ooxx',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': 'false',
397: 1:      'question': 'xooxx',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': 'true',
397: 1:      'question': 'ooxXm',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': 'true',
397: 1:      'question': 'zpzpzpp',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': 'false',
397: 1:      'question': 'zzoo',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': 'true',
397: 1:      'question': 'xxxooo',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': 'true',
397: 1:      'question': 'xxxXooOo',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': 'false',
397: 1:      'question': 'xxx23424esdsfvxXXOOooo',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': 'false',
397: 1:      'question': 'xXxxoewrcoOoo',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': 'false',
397: 1:      'question': 'XxxxooO',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': 'true',
397: 1:      'question': 'zssddd',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': 'false',
397: 1:      'question': 'Xxxxertr34',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': 'true',
397: 1:      'question': 'xXoXOFo',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': 'false',
397: 1:      'question': 'ooXXoOO',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': 'false',
397: 1:      'question': 'RXT0oo',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': 'false',
397: 1:      'question': 'XXOAB0oxXx',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': 'false',
397: 1:      'question': 'JxXAO',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': 'false',
397: 1:      'question': 'PXXWXoO',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': 'false',
397: 1:      'question': 'XO7XxX',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': 'false',
397: 1:      'question': 'FGoXBOFO',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': 'false',
397: 1:      'question': 'oO',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': 'false',
397: 1:      'question': 'XCOXXXO',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': 'false',
397: 1:      'question': 'WXXxXOXXT',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': 'false',
397: 1:      'question': 'RXXoX',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': 'true',
397: 1:      'question': 'oXOoxXW',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': 'false',
397: 1:      'question': 'x',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': 'false',
397: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
397: 1:      'valid': true
397: 1:    }
397: 1:  ],
397: 1:  'info': [
397: 1:    '✅f(ooxx) = true',
397: 1:    '✅f(xooxx) = false',
397: 1:    '✅f(ooxXm) = true',
397: 1:    '✅f(zpzpzpp) = true',
397: 1:    '✅f(zzoo) = false',
397: 1:    '✅f(xxxooo) = true',
397: 1:    '✅f(xxxXooOo) = true',
397: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
397: 1:    '✅f(xXxxoewrcoOoo) = false',
397: 1:    '✅f(XxxxooO) = false',
397: 1:    '✅f(zssddd) = true',
397: 1:    '✅f(Xxxxertr34) = false',
397: 1:    '✅f(xXoXOFo) = true',
397: 1:    '✅f(ooXXoOO) = false',
397: 1:    '✅f(RXT0oo) = false',
397: 1:    '✅f(XXOAB0oxXx) = false',
397: 1:    '✅f(JxXAO) = false',
397: 1:    '✅f(PXXWXoO) = false',
397: 1:    '✅f(XO7XxX) = false',
397: 1:    '✅f(FGoXBOFO) = false',
397: 1:    '✅f(oO) = false',
397: 1:    '✅f(XCOXXXO) = false',
397: 1:    '✅f(WXXxXOXXT) = false',
397: 1:    '✅f(RXXoX) = false',
397: 1:    '✅f(oXOoxXW) = true',
397: 1:    '✅f(x) = false',
397: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
397: 1:    '❌f(5CAr7zsRke6Lb0Bi) = ??? != true'
397: 1:  ],
397: 1:  'level': 14,
397: 1:  'nextQuestion': '5CAr7zsRke6Lb0Bi',
397: 1:  'questions': [
397: 1:    'ooxx',
397: 1:    'xooxx',
397: 1:    'ooxXm',
397: 1:    'zpzpzpp',
397: 1:    'zzoo',
397: 1:    'xxxooo',
397: 1:    'xxxXooOo',
397: 1:    'xxx23424esdsfvxXXOOooo',
397: 1:    'xXxxoewrcoOoo',
397: 1:    'XxxxooO',
397: 1:    'zssddd',
397: 1:    'Xxxxertr34',
397: 1:    'xXoXOFo',
397: 1:    'ooXXoOO',
397: 1:    'RXT0oo',
397: 1:    'XXOAB0oxXx',
397: 1:    'JxXAO',
397: 1:    'PXXWXoO',
397: 1:    'XO7XxX',
397: 1:    'FGoXBOFO',
397: 1:    'oO',
397: 1:    'XCOXXXO',
397: 1:    'WXXxXOXXT',
397: 1:    'RXXoX',
397: 1:    'oXOoxXW',
397: 1:    'x',
397: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
397: 1:    '5CAr7zsRke6Lb0Bi'
397: 1:  ]
397: 1:}
397: 1:Scores: 20684
397: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true']')
397: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
398: 1:BoardData {
398: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
398: 1:  'expectedAnswer': 'false',
398: 1:  'history': [
398: 1:    {
398: 1:      'answer': 'true',
398: 1:      'question': 'ooxx',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'false',
398: 1:      'question': 'xooxx',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'true',
398: 1:      'question': 'ooxXm',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'true',
398: 1:      'question': 'zpzpzpp',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'false',
398: 1:      'question': 'zzoo',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'true',
398: 1:      'question': 'xxxooo',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'true',
398: 1:      'question': 'xxxXooOo',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'false',
398: 1:      'question': 'xxx23424esdsfvxXXOOooo',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'false',
398: 1:      'question': 'xXxxoewrcoOoo',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'false',
398: 1:      'question': 'XxxxooO',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'true',
398: 1:      'question': 'zssddd',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'false',
398: 1:      'question': 'Xxxxertr34',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'true',
398: 1:      'question': 'xXoXOFo',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'false',
398: 1:      'question': 'ooXXoOO',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'false',
398: 1:      'question': 'RXT0oo',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'false',
398: 1:      'question': 'XXOAB0oxXx',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'false',
398: 1:      'question': 'JxXAO',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'false',
398: 1:      'question': 'PXXWXoO',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'false',
398: 1:      'question': 'XO7XxX',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'false',
398: 1:      'question': 'FGoXBOFO',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'false',
398: 1:      'question': 'oO',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'false',
398: 1:      'question': 'XCOXXXO',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'false',
398: 1:      'question': 'WXXxXOXXT',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'false',
398: 1:      'question': 'RXXoX',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'true',
398: 1:      'question': 'oXOoxXW',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'false',
398: 1:      'question': 'x',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'false',
398: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'true',
398: 1:      'question': '5CAr7zsRke6Lb0Bi',
398: 1:      'valid': true
398: 1:    }
398: 1:  ],
398: 1:  'info': [
398: 1:    '✅f(ooxx) = true',
398: 1:    '✅f(xooxx) = false',
398: 1:    '✅f(ooxXm) = true',
398: 1:    '✅f(zpzpzpp) = true',
398: 1:    '✅f(zzoo) = false',
398: 1:    '✅f(xxxooo) = true',
398: 1:    '✅f(xxxXooOo) = true',
398: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
398: 1:    '✅f(xXxxoewrcoOoo) = false',
398: 1:    '✅f(XxxxooO) = false',
398: 1:    '✅f(zssddd) = true',
398: 1:    '✅f(Xxxxertr34) = false',
398: 1:    '✅f(xXoXOFo) = true',
398: 1:    '✅f(ooXXoOO) = false',
398: 1:    '✅f(RXT0oo) = false',
398: 1:    '✅f(XXOAB0oxXx) = false',
398: 1:    '✅f(JxXAO) = false',
398: 1:    '✅f(PXXWXoO) = false',
398: 1:    '✅f(XO7XxX) = false',
398: 1:    '✅f(FGoXBOFO) = false',
398: 1:    '✅f(oO) = false',
398: 1:    '✅f(XCOXXXO) = false',
398: 1:    '✅f(WXXxXOXXT) = false',
398: 1:    '✅f(RXXoX) = false',
398: 1:    '✅f(oXOoxXW) = true',
398: 1:    '✅f(x) = false',
398: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
398: 1:    '✅f(5CAr7zsRke6Lb0Bi) = true',
398: 1:    '❌f(XsYSeqWBD1) = ??? != false'
398: 1:  ],
398: 1:  'level': 14,
398: 1:  'nextQuestion': 'XsYSeqWBD1',
398: 1:  'questions': [
398: 1:    'ooxx',
398: 1:    'xooxx',
398: 1:    'ooxXm',
398: 1:    'zpzpzpp',
398: 1:    'zzoo',
398: 1:    'xxxooo',
398: 1:    'xxxXooOo',
398: 1:    'xxx23424esdsfvxXXOOooo',
398: 1:    'xXxxoewrcoOoo',
398: 1:    'XxxxooO',
398: 1:    'zssddd',
398: 1:    'Xxxxertr34',
398: 1:    'xXoXOFo',
398: 1:    'ooXXoOO',
398: 1:    'RXT0oo',
398: 1:    'XXOAB0oxXx',
398: 1:    'JxXAO',
398: 1:    'PXXWXoO',
398: 1:    'XO7XxX',
398: 1:    'FGoXBOFO',
398: 1:    'oO',
398: 1:    'XCOXXXO',
398: 1:    'WXXxXOXXT',
398: 1:    'RXXoX',
398: 1:    'oXOoxXW',
398: 1:    'x',
398: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
398: 1:    '5CAr7zsRke6Lb0Bi',
398: 1:    'XsYSeqWBD1'
398: 1:  ]
398: 1:}
398: 1:Scores: 20688
398: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'false']')
398: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
399: 1:BoardData {
399: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
399: 1:  'expectedAnswer': 'false',
399: 1:  'history': [
399: 1:    {
399: 1:      'answer': 'true',
399: 1:      'question': 'ooxx',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'false',
399: 1:      'question': 'xooxx',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'true',
399: 1:      'question': 'ooxXm',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'true',
399: 1:      'question': 'zpzpzpp',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'false',
399: 1:      'question': 'zzoo',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'true',
399: 1:      'question': 'xxxooo',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'true',
399: 1:      'question': 'xxxXooOo',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'false',
399: 1:      'question': 'xxx23424esdsfvxXXOOooo',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'false',
399: 1:      'question': 'xXxxoewrcoOoo',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'false',
399: 1:      'question': 'XxxxooO',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'true',
399: 1:      'question': 'zssddd',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'false',
399: 1:      'question': 'Xxxxertr34',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'true',
399: 1:      'question': 'xXoXOFo',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'false',
399: 1:      'question': 'ooXXoOO',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'false',
399: 1:      'question': 'RXT0oo',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'false',
399: 1:      'question': 'XXOAB0oxXx',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'false',
399: 1:      'question': 'JxXAO',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'false',
399: 1:      'question': 'PXXWXoO',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'false',
399: 1:      'question': 'XO7XxX',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'false',
399: 1:      'question': 'FGoXBOFO',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'false',
399: 1:      'question': 'oO',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'false',
399: 1:      'question': 'XCOXXXO',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'false',
399: 1:      'question': 'WXXxXOXXT',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'false',
399: 1:      'question': 'RXXoX',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'true',
399: 1:      'question': 'oXOoxXW',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'false',
399: 1:      'question': 'x',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'false',
399: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'true',
399: 1:      'question': '5CAr7zsRke6Lb0Bi',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'false',
399: 1:      'question': 'XsYSeqWBD1',
399: 1:      'valid': true
399: 1:    }
399: 1:  ],
399: 1:  'info': [
399: 1:    '✅f(ooxx) = true',
399: 1:    '✅f(xooxx) = false',
399: 1:    '✅f(ooxXm) = true',
399: 1:    '✅f(zpzpzpp) = true',
399: 1:    '✅f(zzoo) = false',
399: 1:    '✅f(xxxooo) = true',
399: 1:    '✅f(xxxXooOo) = true',
399: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
399: 1:    '✅f(xXxxoewrcoOoo) = false',
399: 1:    '✅f(XxxxooO) = false',
399: 1:    '✅f(zssddd) = true',
399: 1:    '✅f(Xxxxertr34) = false',
399: 1:    '✅f(xXoXOFo) = true',
399: 1:    '✅f(ooXXoOO) = false',
399: 1:    '✅f(RXT0oo) = false',
399: 1:    '✅f(XXOAB0oxXx) = false',
399: 1:    '✅f(JxXAO) = false',
399: 1:    '✅f(PXXWXoO) = false',
399: 1:    '✅f(XO7XxX) = false',
399: 1:    '✅f(FGoXBOFO) = false',
399: 1:    '✅f(oO) = false',
399: 1:    '✅f(XCOXXXO) = false',
399: 1:    '✅f(WXXxXOXXT) = false',
399: 1:    '✅f(RXXoX) = false',
399: 1:    '✅f(oXOoxXW) = true',
399: 1:    '✅f(x) = false',
399: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
399: 1:    '✅f(5CAr7zsRke6Lb0Bi) = true',
399: 1:    '✅f(XsYSeqWBD1) = false',
399: 1:    '❌f(Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX) = ??? != false'
399: 1:  ],
399: 1:  'level': 14,
399: 1:  'nextQuestion': 'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
399: 1:  'questions': [
399: 1:    'ooxx',
399: 1:    'xooxx',
399: 1:    'ooxXm',
399: 1:    'zpzpzpp',
399: 1:    'zzoo',
399: 1:    'xxxooo',
399: 1:    'xxxXooOo',
399: 1:    'xxx23424esdsfvxXXOOooo',
399: 1:    'xXxxoewrcoOoo',
399: 1:    'XxxxooO',
399: 1:    'zssddd',
399: 1:    'Xxxxertr34',
399: 1:    'xXoXOFo',
399: 1:    'ooXXoOO',
399: 1:    'RXT0oo',
399: 1:    'XXOAB0oxXx',
399: 1:    'JxXAO',
399: 1:    'PXXWXoO',
399: 1:    'XO7XxX',
399: 1:    'FGoXBOFO',
399: 1:    'oO',
399: 1:    'XCOXXXO',
399: 1:    'WXXxXOXXT',
399: 1:    'RXXoX',
399: 1:    'oXOoxXW',
399: 1:    'x',
399: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
399: 1:    '5CAr7zsRke6Lb0Bi',
399: 1:    'XsYSeqWBD1',
399: 1:    'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX'
399: 1:  ]
399: 1:}
399: 1:Scores: 20692
399: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'false', 'false']')
399: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
400: 1:BoardData {
400: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
400: 1:  'expectedAnswer': 'false',
400: 1:  'history': [
400: 1:    {
400: 1:      'answer': 'true',
400: 1:      'question': 'ooxx',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'false',
400: 1:      'question': 'xooxx',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'true',
400: 1:      'question': 'ooxXm',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'true',
400: 1:      'question': 'zpzpzpp',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'false',
400: 1:      'question': 'zzoo',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'true',
400: 1:      'question': 'xxxooo',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'true',
400: 1:      'question': 'xxxXooOo',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'false',
400: 1:      'question': 'xxx23424esdsfvxXXOOooo',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'false',
400: 1:      'question': 'xXxxoewrcoOoo',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'false',
400: 1:      'question': 'XxxxooO',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'true',
400: 1:      'question': 'zssddd',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'false',
400: 1:      'question': 'Xxxxertr34',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'true',
400: 1:      'question': 'xXoXOFo',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'false',
400: 1:      'question': 'ooXXoOO',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'false',
400: 1:      'question': 'RXT0oo',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'false',
400: 1:      'question': 'XXOAB0oxXx',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'false',
400: 1:      'question': 'JxXAO',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'false',
400: 1:      'question': 'PXXWXoO',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'false',
400: 1:      'question': 'XO7XxX',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'false',
400: 1:      'question': 'FGoXBOFO',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'false',
400: 1:      'question': 'oO',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'false',
400: 1:      'question': 'XCOXXXO',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'false',
400: 1:      'question': 'WXXxXOXXT',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'false',
400: 1:      'question': 'RXXoX',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'true',
400: 1:      'question': 'oXOoxXW',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'false',
400: 1:      'question': 'x',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'false',
400: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'true',
400: 1:      'question': '5CAr7zsRke6Lb0Bi',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'false',
400: 1:      'question': 'XsYSeqWBD1',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'false',
400: 1:      'question': 'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
400: 1:      'valid': true
400: 1:    }
400: 1:  ],
400: 1:  'info': [
400: 1:    '✅f(ooxx) = true',
400: 1:    '✅f(xooxx) = false',
400: 1:    '✅f(ooxXm) = true',
400: 1:    '✅f(zpzpzpp) = true',
400: 1:    '✅f(zzoo) = false',
400: 1:    '✅f(xxxooo) = true',
400: 1:    '✅f(xxxXooOo) = true',
400: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
400: 1:    '✅f(xXxxoewrcoOoo) = false',
400: 1:    '✅f(XxxxooO) = false',
400: 1:    '✅f(zssddd) = true',
400: 1:    '✅f(Xxxxertr34) = false',
400: 1:    '✅f(xXoXOFo) = true',
400: 1:    '✅f(ooXXoOO) = false',
400: 1:    '✅f(RXT0oo) = false',
400: 1:    '✅f(XXOAB0oxXx) = false',
400: 1:    '✅f(JxXAO) = false',
400: 1:    '✅f(PXXWXoO) = false',
400: 1:    '✅f(XO7XxX) = false',
400: 1:    '✅f(FGoXBOFO) = false',
400: 1:    '✅f(oO) = false',
400: 1:    '✅f(XCOXXXO) = false',
400: 1:    '✅f(WXXxXOXXT) = false',
400: 1:    '✅f(RXXoX) = false',
400: 1:    '✅f(oXOoxXW) = true',
400: 1:    '✅f(x) = false',
400: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
400: 1:    '✅f(5CAr7zsRke6Lb0Bi) = true',
400: 1:    '✅f(XsYSeqWBD1) = false',
400: 1:    '✅f(Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX) = false',
400: 1:    '❌f(tqM31hdjxhaPYLdght9ZZfWt0Tvy) = ??? != false'
400: 1:  ],
400: 1:  'level': 14,
400: 1:  'nextQuestion': 'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
400: 1:  'questions': [
400: 1:    'ooxx',
400: 1:    'xooxx',
400: 1:    'ooxXm',
400: 1:    'zpzpzpp',
400: 1:    'zzoo',
400: 1:    'xxxooo',
400: 1:    'xxxXooOo',
400: 1:    'xxx23424esdsfvxXXOOooo',
400: 1:    'xXxxoewrcoOoo',
400: 1:    'XxxxooO',
400: 1:    'zssddd',
400: 1:    'Xxxxertr34',
400: 1:    'xXoXOFo',
400: 1:    'ooXXoOO',
400: 1:    'RXT0oo',
400: 1:    'XXOAB0oxXx',
400: 1:    'JxXAO',
400: 1:    'PXXWXoO',
400: 1:    'XO7XxX',
400: 1:    'FGoXBOFO',
400: 1:    'oO',
400: 1:    'XCOXXXO',
400: 1:    'WXXxXOXXT',
400: 1:    'RXXoX',
400: 1:    'oXOoxXW',
400: 1:    'x',
400: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
400: 1:    '5CAr7zsRke6Lb0Bi',
400: 1:    'XsYSeqWBD1',
400: 1:    'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
400: 1:    'tqM31hdjxhaPYLdght9ZZfWt0Tvy'
400: 1:  ]
400: 1:}
400: 1:Scores: 20696
400: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'false', 'false', 'false']')
400: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
401: 1:BoardData {
401: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
401: 1:  'expectedAnswer': 'false',
401: 1:  'history': [
401: 1:    {
401: 1:      'answer': 'true',
401: 1:      'question': 'ooxx',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'false',
401: 1:      'question': 'xooxx',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'true',
401: 1:      'question': 'ooxXm',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'true',
401: 1:      'question': 'zpzpzpp',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'false',
401: 1:      'question': 'zzoo',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'true',
401: 1:      'question': 'xxxooo',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'true',
401: 1:      'question': 'xxxXooOo',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'false',
401: 1:      'question': 'xxx23424esdsfvxXXOOooo',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'false',
401: 1:      'question': 'xXxxoewrcoOoo',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'false',
401: 1:      'question': 'XxxxooO',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'true',
401: 1:      'question': 'zssddd',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'false',
401: 1:      'question': 'Xxxxertr34',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'true',
401: 1:      'question': 'xXoXOFo',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'false',
401: 1:      'question': 'ooXXoOO',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'false',
401: 1:      'question': 'RXT0oo',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'false',
401: 1:      'question': 'XXOAB0oxXx',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'false',
401: 1:      'question': 'JxXAO',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'false',
401: 1:      'question': 'PXXWXoO',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'false',
401: 1:      'question': 'XO7XxX',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'false',
401: 1:      'question': 'FGoXBOFO',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'false',
401: 1:      'question': 'oO',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'false',
401: 1:      'question': 'XCOXXXO',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'false',
401: 1:      'question': 'WXXxXOXXT',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'false',
401: 1:      'question': 'RXXoX',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'true',
401: 1:      'question': 'oXOoxXW',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'false',
401: 1:      'question': 'x',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'false',
401: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'true',
401: 1:      'question': '5CAr7zsRke6Lb0Bi',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'false',
401: 1:      'question': 'XsYSeqWBD1',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'false',
401: 1:      'question': 'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'false',
401: 1:      'question': 'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
401: 1:      'valid': true
401: 1:    }
401: 1:  ],
401: 1:  'info': [
401: 1:    '✅f(ooxx) = true',
401: 1:    '✅f(xooxx) = false',
401: 1:    '✅f(ooxXm) = true',
401: 1:    '✅f(zpzpzpp) = true',
401: 1:    '✅f(zzoo) = false',
401: 1:    '✅f(xxxooo) = true',
401: 1:    '✅f(xxxXooOo) = true',
401: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
401: 1:    '✅f(xXxxoewrcoOoo) = false',
401: 1:    '✅f(XxxxooO) = false',
401: 1:    '✅f(zssddd) = true',
401: 1:    '✅f(Xxxxertr34) = false',
401: 1:    '✅f(xXoXOFo) = true',
401: 1:    '✅f(ooXXoOO) = false',
401: 1:    '✅f(RXT0oo) = false',
401: 1:    '✅f(XXOAB0oxXx) = false',
401: 1:    '✅f(JxXAO) = false',
401: 1:    '✅f(PXXWXoO) = false',
401: 1:    '✅f(XO7XxX) = false',
401: 1:    '✅f(FGoXBOFO) = false',
401: 1:    '✅f(oO) = false',
401: 1:    '✅f(XCOXXXO) = false',
401: 1:    '✅f(WXXxXOXXT) = false',
401: 1:    '✅f(RXXoX) = false',
401: 1:    '✅f(oXOoxXW) = true',
401: 1:    '✅f(x) = false',
401: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
401: 1:    '✅f(5CAr7zsRke6Lb0Bi) = true',
401: 1:    '✅f(XsYSeqWBD1) = false',
401: 1:    '✅f(Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX) = false',
401: 1:    '✅f(tqM31hdjxhaPYLdght9ZZfWt0Tvy) = false',
401: 1:    '❌f(EMfqgqHIJAvjjdKhqS8uoa) = ??? != false'
401: 1:  ],
401: 1:  'level': 14,
401: 1:  'nextQuestion': 'EMfqgqHIJAvjjdKhqS8uoa',
401: 1:  'questions': [
401: 1:    'ooxx',
401: 1:    'xooxx',
401: 1:    'ooxXm',
401: 1:    'zpzpzpp',
401: 1:    'zzoo',
401: 1:    'xxxooo',
401: 1:    'xxxXooOo',
401: 1:    'xxx23424esdsfvxXXOOooo',
401: 1:    'xXxxoewrcoOoo',
401: 1:    'XxxxooO',
401: 1:    'zssddd',
401: 1:    'Xxxxertr34',
401: 1:    'xXoXOFo',
401: 1:    'ooXXoOO',
401: 1:    'RXT0oo',
401: 1:    'XXOAB0oxXx',
401: 1:    'JxXAO',
401: 1:    'PXXWXoO',
401: 1:    'XO7XxX',
401: 1:    'FGoXBOFO',
401: 1:    'oO',
401: 1:    'XCOXXXO',
401: 1:    'WXXxXOXXT',
401: 1:    'RXXoX',
401: 1:    'oXOoxXW',
401: 1:    'x',
401: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
401: 1:    '5CAr7zsRke6Lb0Bi',
401: 1:    'XsYSeqWBD1',
401: 1:    'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
401: 1:    'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
401: 1:    'EMfqgqHIJAvjjdKhqS8uoa'
401: 1:  ]
401: 1:}
401: 1:Scores: 20700
401: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'false']')
401: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
402: 1:BoardData {
402: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
402: 1:  'expectedAnswer': 'false',
402: 1:  'history': [
402: 1:    {
402: 1:      'answer': 'true',
402: 1:      'question': 'ooxx',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'false',
402: 1:      'question': 'xooxx',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'true',
402: 1:      'question': 'ooxXm',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'true',
402: 1:      'question': 'zpzpzpp',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'false',
402: 1:      'question': 'zzoo',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'true',
402: 1:      'question': 'xxxooo',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'true',
402: 1:      'question': 'xxxXooOo',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'false',
402: 1:      'question': 'xxx23424esdsfvxXXOOooo',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'false',
402: 1:      'question': 'xXxxoewrcoOoo',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'false',
402: 1:      'question': 'XxxxooO',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'true',
402: 1:      'question': 'zssddd',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'false',
402: 1:      'question': 'Xxxxertr34',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'true',
402: 1:      'question': 'xXoXOFo',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'false',
402: 1:      'question': 'ooXXoOO',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'false',
402: 1:      'question': 'RXT0oo',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'false',
402: 1:      'question': 'XXOAB0oxXx',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'false',
402: 1:      'question': 'JxXAO',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'false',
402: 1:      'question': 'PXXWXoO',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'false',
402: 1:      'question': 'XO7XxX',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'false',
402: 1:      'question': 'FGoXBOFO',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'false',
402: 1:      'question': 'oO',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'false',
402: 1:      'question': 'XCOXXXO',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'false',
402: 1:      'question': 'WXXxXOXXT',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'false',
402: 1:      'question': 'RXXoX',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'true',
402: 1:      'question': 'oXOoxXW',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'false',
402: 1:      'question': 'x',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'false',
402: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'true',
402: 1:      'question': '5CAr7zsRke6Lb0Bi',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'false',
402: 1:      'question': 'XsYSeqWBD1',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'false',
402: 1:      'question': 'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'false',
402: 1:      'question': 'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'false',
402: 1:      'question': 'EMfqgqHIJAvjjdKhqS8uoa',
402: 1:      'valid': true
402: 1:    }
402: 1:  ],
402: 1:  'info': [
402: 1:    '✅f(ooxx) = true',
402: 1:    '✅f(xooxx) = false',
402: 1:    '✅f(ooxXm) = true',
402: 1:    '✅f(zpzpzpp) = true',
402: 1:    '✅f(zzoo) = false',
402: 1:    '✅f(xxxooo) = true',
402: 1:    '✅f(xxxXooOo) = true',
402: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
402: 1:    '✅f(xXxxoewrcoOoo) = false',
402: 1:    '✅f(XxxxooO) = false',
402: 1:    '✅f(zssddd) = true',
402: 1:    '✅f(Xxxxertr34) = false',
402: 1:    '✅f(xXoXOFo) = true',
402: 1:    '✅f(ooXXoOO) = false',
402: 1:    '✅f(RXT0oo) = false',
402: 1:    '✅f(XXOAB0oxXx) = false',
402: 1:    '✅f(JxXAO) = false',
402: 1:    '✅f(PXXWXoO) = false',
402: 1:    '✅f(XO7XxX) = false',
402: 1:    '✅f(FGoXBOFO) = false',
402: 1:    '✅f(oO) = false',
402: 1:    '✅f(XCOXXXO) = false',
402: 1:    '✅f(WXXxXOXXT) = false',
402: 1:    '✅f(RXXoX) = false',
402: 1:    '✅f(oXOoxXW) = true',
402: 1:    '✅f(x) = false',
402: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
402: 1:    '✅f(5CAr7zsRke6Lb0Bi) = true',
402: 1:    '✅f(XsYSeqWBD1) = false',
402: 1:    '✅f(Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX) = false',
402: 1:    '✅f(tqM31hdjxhaPYLdght9ZZfWt0Tvy) = false',
402: 1:    '✅f(EMfqgqHIJAvjjdKhqS8uoa) = false',
402: 1:    '❌f(xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB) = ??? != false'
402: 1:  ],
402: 1:  'level': 14,
402: 1:  'nextQuestion': 'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
402: 1:  'questions': [
402: 1:    'ooxx',
402: 1:    'xooxx',
402: 1:    'ooxXm',
402: 1:    'zpzpzpp',
402: 1:    'zzoo',
402: 1:    'xxxooo',
402: 1:    'xxxXooOo',
402: 1:    'xxx23424esdsfvxXXOOooo',
402: 1:    'xXxxoewrcoOoo',
402: 1:    'XxxxooO',
402: 1:    'zssddd',
402: 1:    'Xxxxertr34',
402: 1:    'xXoXOFo',
402: 1:    'ooXXoOO',
402: 1:    'RXT0oo',
402: 1:    'XXOAB0oxXx',
402: 1:    'JxXAO',
402: 1:    'PXXWXoO',
402: 1:    'XO7XxX',
402: 1:    'FGoXBOFO',
402: 1:    'oO',
402: 1:    'XCOXXXO',
402: 1:    'WXXxXOXXT',
402: 1:    'RXXoX',
402: 1:    'oXOoxXW',
402: 1:    'x',
402: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
402: 1:    '5CAr7zsRke6Lb0Bi',
402: 1:    'XsYSeqWBD1',
402: 1:    'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
402: 1:    'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
402: 1:    'EMfqgqHIJAvjjdKhqS8uoa',
402: 1:    'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB'
402: 1:  ]
402: 1:}
402: 1:Scores: 20704
402: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'false']')
402: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
403: 1:BoardData {
403: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
403: 1:  'expectedAnswer': 'false',
403: 1:  'history': [
403: 1:    {
403: 1:      'answer': 'true',
403: 1:      'question': 'ooxx',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'false',
403: 1:      'question': 'xooxx',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'true',
403: 1:      'question': 'ooxXm',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'true',
403: 1:      'question': 'zpzpzpp',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'false',
403: 1:      'question': 'zzoo',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'true',
403: 1:      'question': 'xxxooo',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'true',
403: 1:      'question': 'xxxXooOo',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'false',
403: 1:      'question': 'xxx23424esdsfvxXXOOooo',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'false',
403: 1:      'question': 'xXxxoewrcoOoo',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'false',
403: 1:      'question': 'XxxxooO',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'true',
403: 1:      'question': 'zssddd',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'false',
403: 1:      'question': 'Xxxxertr34',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'true',
403: 1:      'question': 'xXoXOFo',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'false',
403: 1:      'question': 'ooXXoOO',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'false',
403: 1:      'question': 'RXT0oo',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'false',
403: 1:      'question': 'XXOAB0oxXx',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'false',
403: 1:      'question': 'JxXAO',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'false',
403: 1:      'question': 'PXXWXoO',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'false',
403: 1:      'question': 'XO7XxX',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'false',
403: 1:      'question': 'FGoXBOFO',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'false',
403: 1:      'question': 'oO',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'false',
403: 1:      'question': 'XCOXXXO',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'false',
403: 1:      'question': 'WXXxXOXXT',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'false',
403: 1:      'question': 'RXXoX',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'true',
403: 1:      'question': 'oXOoxXW',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'false',
403: 1:      'question': 'x',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'false',
403: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'true',
403: 1:      'question': '5CAr7zsRke6Lb0Bi',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'false',
403: 1:      'question': 'XsYSeqWBD1',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'false',
403: 1:      'question': 'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'false',
403: 1:      'question': 'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'false',
403: 1:      'question': 'EMfqgqHIJAvjjdKhqS8uoa',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'false',
403: 1:      'question': 'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
403: 1:      'valid': true
403: 1:    }
403: 1:  ],
403: 1:  'info': [
403: 1:    '✅f(ooxx) = true',
403: 1:    '✅f(xooxx) = false',
403: 1:    '✅f(ooxXm) = true',
403: 1:    '✅f(zpzpzpp) = true',
403: 1:    '✅f(zzoo) = false',
403: 1:    '✅f(xxxooo) = true',
403: 1:    '✅f(xxxXooOo) = true',
403: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
403: 1:    '✅f(xXxxoewrcoOoo) = false',
403: 1:    '✅f(XxxxooO) = false',
403: 1:    '✅f(zssddd) = true',
403: 1:    '✅f(Xxxxertr34) = false',
403: 1:    '✅f(xXoXOFo) = true',
403: 1:    '✅f(ooXXoOO) = false',
403: 1:    '✅f(RXT0oo) = false',
403: 1:    '✅f(XXOAB0oxXx) = false',
403: 1:    '✅f(JxXAO) = false',
403: 1:    '✅f(PXXWXoO) = false',
403: 1:    '✅f(XO7XxX) = false',
403: 1:    '✅f(FGoXBOFO) = false',
403: 1:    '✅f(oO) = false',
403: 1:    '✅f(XCOXXXO) = false',
403: 1:    '✅f(WXXxXOXXT) = false',
403: 1:    '✅f(RXXoX) = false',
403: 1:    '✅f(oXOoxXW) = true',
403: 1:    '✅f(x) = false',
403: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
403: 1:    '✅f(5CAr7zsRke6Lb0Bi) = true',
403: 1:    '✅f(XsYSeqWBD1) = false',
403: 1:    '✅f(Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX) = false',
403: 1:    '✅f(tqM31hdjxhaPYLdght9ZZfWt0Tvy) = false',
403: 1:    '✅f(EMfqgqHIJAvjjdKhqS8uoa) = false',
403: 1:    '✅f(xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB) = false',
403: 1:    '❌f(rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF) = ??? != false'
403: 1:  ],
403: 1:  'level': 14,
403: 1:  'nextQuestion': 'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
403: 1:  'questions': [
403: 1:    'ooxx',
403: 1:    'xooxx',
403: 1:    'ooxXm',
403: 1:    'zpzpzpp',
403: 1:    'zzoo',
403: 1:    'xxxooo',
403: 1:    'xxxXooOo',
403: 1:    'xxx23424esdsfvxXXOOooo',
403: 1:    'xXxxoewrcoOoo',
403: 1:    'XxxxooO',
403: 1:    'zssddd',
403: 1:    'Xxxxertr34',
403: 1:    'xXoXOFo',
403: 1:    'ooXXoOO',
403: 1:    'RXT0oo',
403: 1:    'XXOAB0oxXx',
403: 1:    'JxXAO',
403: 1:    'PXXWXoO',
403: 1:    'XO7XxX',
403: 1:    'FGoXBOFO',
403: 1:    'oO',
403: 1:    'XCOXXXO',
403: 1:    'WXXxXOXXT',
403: 1:    'RXXoX',
403: 1:    'oXOoxXW',
403: 1:    'x',
403: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
403: 1:    '5CAr7zsRke6Lb0Bi',
403: 1:    'XsYSeqWBD1',
403: 1:    'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
403: 1:    'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
403: 1:    'EMfqgqHIJAvjjdKhqS8uoa',
403: 1:    'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
403: 1:    'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF'
403: 1:  ]
403: 1:}
403: 1:Scores: 20708
403: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false']')
403: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
404: 1:BoardData {
404: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
404: 1:  'expectedAnswer': 'false',
404: 1:  'history': [
404: 1:    {
404: 1:      'answer': 'true',
404: 1:      'question': 'ooxx',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'false',
404: 1:      'question': 'xooxx',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'true',
404: 1:      'question': 'ooxXm',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'true',
404: 1:      'question': 'zpzpzpp',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'false',
404: 1:      'question': 'zzoo',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'true',
404: 1:      'question': 'xxxooo',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'true',
404: 1:      'question': 'xxxXooOo',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'false',
404: 1:      'question': 'xxx23424esdsfvxXXOOooo',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'false',
404: 1:      'question': 'xXxxoewrcoOoo',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'false',
404: 1:      'question': 'XxxxooO',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'true',
404: 1:      'question': 'zssddd',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'false',
404: 1:      'question': 'Xxxxertr34',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'true',
404: 1:      'question': 'xXoXOFo',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'false',
404: 1:      'question': 'ooXXoOO',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'false',
404: 1:      'question': 'RXT0oo',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'false',
404: 1:      'question': 'XXOAB0oxXx',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'false',
404: 1:      'question': 'JxXAO',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'false',
404: 1:      'question': 'PXXWXoO',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'false',
404: 1:      'question': 'XO7XxX',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'false',
404: 1:      'question': 'FGoXBOFO',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'false',
404: 1:      'question': 'oO',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'false',
404: 1:      'question': 'XCOXXXO',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'false',
404: 1:      'question': 'WXXxXOXXT',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'false',
404: 1:      'question': 'RXXoX',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'true',
404: 1:      'question': 'oXOoxXW',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'false',
404: 1:      'question': 'x',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'false',
404: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'true',
404: 1:      'question': '5CAr7zsRke6Lb0Bi',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'false',
404: 1:      'question': 'XsYSeqWBD1',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'false',
404: 1:      'question': 'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'false',
404: 1:      'question': 'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'false',
404: 1:      'question': 'EMfqgqHIJAvjjdKhqS8uoa',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'false',
404: 1:      'question': 'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'false',
404: 1:      'question': 'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
404: 1:      'valid': true
404: 1:    }
404: 1:  ],
404: 1:  'info': [
404: 1:    '✅f(ooxx) = true',
404: 1:    '✅f(xooxx) = false',
404: 1:    '✅f(ooxXm) = true',
404: 1:    '✅f(zpzpzpp) = true',
404: 1:    '✅f(zzoo) = false',
404: 1:    '✅f(xxxooo) = true',
404: 1:    '✅f(xxxXooOo) = true',
404: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
404: 1:    '✅f(xXxxoewrcoOoo) = false',
404: 1:    '✅f(XxxxooO) = false',
404: 1:    '✅f(zssddd) = true',
404: 1:    '✅f(Xxxxertr34) = false',
404: 1:    '✅f(xXoXOFo) = true',
404: 1:    '✅f(ooXXoOO) = false',
404: 1:    '✅f(RXT0oo) = false',
404: 1:    '✅f(XXOAB0oxXx) = false',
404: 1:    '✅f(JxXAO) = false',
404: 1:    '✅f(PXXWXoO) = false',
404: 1:    '✅f(XO7XxX) = false',
404: 1:    '✅f(FGoXBOFO) = false',
404: 1:    '✅f(oO) = false',
404: 1:    '✅f(XCOXXXO) = false',
404: 1:    '✅f(WXXxXOXXT) = false',
404: 1:    '✅f(RXXoX) = false',
404: 1:    '✅f(oXOoxXW) = true',
404: 1:    '✅f(x) = false',
404: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
404: 1:    '✅f(5CAr7zsRke6Lb0Bi) = true',
404: 1:    '✅f(XsYSeqWBD1) = false',
404: 1:    '✅f(Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX) = false',
404: 1:    '✅f(tqM31hdjxhaPYLdght9ZZfWt0Tvy) = false',
404: 1:    '✅f(EMfqgqHIJAvjjdKhqS8uoa) = false',
404: 1:    '✅f(xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB) = false',
404: 1:    '✅f(rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF) = false',
404: 1:    '❌f(i0XLMlDgITKfdEy) = ??? != false'
404: 1:  ],
404: 1:  'level': 14,
404: 1:  'nextQuestion': 'i0XLMlDgITKfdEy',
404: 1:  'questions': [
404: 1:    'ooxx',
404: 1:    'xooxx',
404: 1:    'ooxXm',
404: 1:    'zpzpzpp',
404: 1:    'zzoo',
404: 1:    'xxxooo',
404: 1:    'xxxXooOo',
404: 1:    'xxx23424esdsfvxXXOOooo',
404: 1:    'xXxxoewrcoOoo',
404: 1:    'XxxxooO',
404: 1:    'zssddd',
404: 1:    'Xxxxertr34',
404: 1:    'xXoXOFo',
404: 1:    'ooXXoOO',
404: 1:    'RXT0oo',
404: 1:    'XXOAB0oxXx',
404: 1:    'JxXAO',
404: 1:    'PXXWXoO',
404: 1:    'XO7XxX',
404: 1:    'FGoXBOFO',
404: 1:    'oO',
404: 1:    'XCOXXXO',
404: 1:    'WXXxXOXXT',
404: 1:    'RXXoX',
404: 1:    'oXOoxXW',
404: 1:    'x',
404: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
404: 1:    '5CAr7zsRke6Lb0Bi',
404: 1:    'XsYSeqWBD1',
404: 1:    'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
404: 1:    'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
404: 1:    'EMfqgqHIJAvjjdKhqS8uoa',
404: 1:    'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
404: 1:    'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
404: 1:    'i0XLMlDgITKfdEy'
404: 1:  ]
404: 1:}
404: 1:Scores: 20712
404: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false']')
404: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
405: 1:BoardData {
405: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
405: 1:  'expectedAnswer': 'true',
405: 1:  'history': [
405: 1:    {
405: 1:      'answer': 'true',
405: 1:      'question': 'ooxx',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'false',
405: 1:      'question': 'xooxx',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'true',
405: 1:      'question': 'ooxXm',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'true',
405: 1:      'question': 'zpzpzpp',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'false',
405: 1:      'question': 'zzoo',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'true',
405: 1:      'question': 'xxxooo',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'true',
405: 1:      'question': 'xxxXooOo',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'false',
405: 1:      'question': 'xxx23424esdsfvxXXOOooo',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'false',
405: 1:      'question': 'xXxxoewrcoOoo',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'false',
405: 1:      'question': 'XxxxooO',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'true',
405: 1:      'question': 'zssddd',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'false',
405: 1:      'question': 'Xxxxertr34',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'true',
405: 1:      'question': 'xXoXOFo',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'false',
405: 1:      'question': 'ooXXoOO',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'false',
405: 1:      'question': 'RXT0oo',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'false',
405: 1:      'question': 'XXOAB0oxXx',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'false',
405: 1:      'question': 'JxXAO',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'false',
405: 1:      'question': 'PXXWXoO',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'false',
405: 1:      'question': 'XO7XxX',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'false',
405: 1:      'question': 'FGoXBOFO',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'false',
405: 1:      'question': 'oO',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'false',
405: 1:      'question': 'XCOXXXO',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'false',
405: 1:      'question': 'WXXxXOXXT',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'false',
405: 1:      'question': 'RXXoX',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'true',
405: 1:      'question': 'oXOoxXW',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'false',
405: 1:      'question': 'x',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'false',
405: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'true',
405: 1:      'question': '5CAr7zsRke6Lb0Bi',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'false',
405: 1:      'question': 'XsYSeqWBD1',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'false',
405: 1:      'question': 'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'false',
405: 1:      'question': 'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'false',
405: 1:      'question': 'EMfqgqHIJAvjjdKhqS8uoa',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'false',
405: 1:      'question': 'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'false',
405: 1:      'question': 'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'false',
405: 1:      'question': 'i0XLMlDgITKfdEy',
405: 1:      'valid': true
405: 1:    }
405: 1:  ],
405: 1:  'info': [
405: 1:    '✅f(ooxx) = true',
405: 1:    '✅f(xooxx) = false',
405: 1:    '✅f(ooxXm) = true',
405: 1:    '✅f(zpzpzpp) = true',
405: 1:    '✅f(zzoo) = false',
405: 1:    '✅f(xxxooo) = true',
405: 1:    '✅f(xxxXooOo) = true',
405: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
405: 1:    '✅f(xXxxoewrcoOoo) = false',
405: 1:    '✅f(XxxxooO) = false',
405: 1:    '✅f(zssddd) = true',
405: 1:    '✅f(Xxxxertr34) = false',
405: 1:    '✅f(xXoXOFo) = true',
405: 1:    '✅f(ooXXoOO) = false',
405: 1:    '✅f(RXT0oo) = false',
405: 1:    '✅f(XXOAB0oxXx) = false',
405: 1:    '✅f(JxXAO) = false',
405: 1:    '✅f(PXXWXoO) = false',
405: 1:    '✅f(XO7XxX) = false',
405: 1:    '✅f(FGoXBOFO) = false',
405: 1:    '✅f(oO) = false',
405: 1:    '✅f(XCOXXXO) = false',
405: 1:    '✅f(WXXxXOXXT) = false',
405: 1:    '✅f(RXXoX) = false',
405: 1:    '✅f(oXOoxXW) = true',
405: 1:    '✅f(x) = false',
405: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
405: 1:    '✅f(5CAr7zsRke6Lb0Bi) = true',
405: 1:    '✅f(XsYSeqWBD1) = false',
405: 1:    '✅f(Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX) = false',
405: 1:    '✅f(tqM31hdjxhaPYLdght9ZZfWt0Tvy) = false',
405: 1:    '✅f(EMfqgqHIJAvjjdKhqS8uoa) = false',
405: 1:    '✅f(xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB) = false',
405: 1:    '✅f(rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF) = false',
405: 1:    '✅f(i0XLMlDgITKfdEy) = false',
405: 1:    '❌f(pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw) = ??? != true'
405: 1:  ],
405: 1:  'level': 14,
405: 1:  'nextQuestion': 'pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw',
405: 1:  'questions': [
405: 1:    'ooxx',
405: 1:    'xooxx',
405: 1:    'ooxXm',
405: 1:    'zpzpzpp',
405: 1:    'zzoo',
405: 1:    'xxxooo',
405: 1:    'xxxXooOo',
405: 1:    'xxx23424esdsfvxXXOOooo',
405: 1:    'xXxxoewrcoOoo',
405: 1:    'XxxxooO',
405: 1:    'zssddd',
405: 1:    'Xxxxertr34',
405: 1:    'xXoXOFo',
405: 1:    'ooXXoOO',
405: 1:    'RXT0oo',
405: 1:    'XXOAB0oxXx',
405: 1:    'JxXAO',
405: 1:    'PXXWXoO',
405: 1:    'XO7XxX',
405: 1:    'FGoXBOFO',
405: 1:    'oO',
405: 1:    'XCOXXXO',
405: 1:    'WXXxXOXXT',
405: 1:    'RXXoX',
405: 1:    'oXOoxXW',
405: 1:    'x',
405: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
405: 1:    '5CAr7zsRke6Lb0Bi',
405: 1:    'XsYSeqWBD1',
405: 1:    'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
405: 1:    'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
405: 1:    'EMfqgqHIJAvjjdKhqS8uoa',
405: 1:    'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
405: 1:    'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
405: 1:    'i0XLMlDgITKfdEy',
405: 1:    'pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw'
405: 1:  ]
405: 1:}
405: 1:Scores: 20716
405: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true']')
405: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
406: 1:BoardData {
406: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
406: 1:  'expectedAnswer': 'true',
406: 1:  'history': [
406: 1:    {
406: 1:      'answer': 'true',
406: 1:      'question': 'ooxx',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'false',
406: 1:      'question': 'xooxx',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'true',
406: 1:      'question': 'ooxXm',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'true',
406: 1:      'question': 'zpzpzpp',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'false',
406: 1:      'question': 'zzoo',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'true',
406: 1:      'question': 'xxxooo',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'true',
406: 1:      'question': 'xxxXooOo',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'false',
406: 1:      'question': 'xxx23424esdsfvxXXOOooo',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'false',
406: 1:      'question': 'xXxxoewrcoOoo',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'false',
406: 1:      'question': 'XxxxooO',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'true',
406: 1:      'question': 'zssddd',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'false',
406: 1:      'question': 'Xxxxertr34',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'true',
406: 1:      'question': 'xXoXOFo',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'false',
406: 1:      'question': 'ooXXoOO',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'false',
406: 1:      'question': 'RXT0oo',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'false',
406: 1:      'question': 'XXOAB0oxXx',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'false',
406: 1:      'question': 'JxXAO',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'false',
406: 1:      'question': 'PXXWXoO',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'false',
406: 1:      'question': 'XO7XxX',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'false',
406: 1:      'question': 'FGoXBOFO',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'false',
406: 1:      'question': 'oO',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'false',
406: 1:      'question': 'XCOXXXO',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'false',
406: 1:      'question': 'WXXxXOXXT',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'false',
406: 1:      'question': 'RXXoX',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'true',
406: 1:      'question': 'oXOoxXW',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'false',
406: 1:      'question': 'x',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'false',
406: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'true',
406: 1:      'question': '5CAr7zsRke6Lb0Bi',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'false',
406: 1:      'question': 'XsYSeqWBD1',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'false',
406: 1:      'question': 'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'false',
406: 1:      'question': 'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'false',
406: 1:      'question': 'EMfqgqHIJAvjjdKhqS8uoa',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'false',
406: 1:      'question': 'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'false',
406: 1:      'question': 'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'false',
406: 1:      'question': 'i0XLMlDgITKfdEy',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'true',
406: 1:      'question': 'pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw',
406: 1:      'valid': true
406: 1:    }
406: 1:  ],
406: 1:  'info': [
406: 1:    '✅f(ooxx) = true',
406: 1:    '✅f(xooxx) = false',
406: 1:    '✅f(ooxXm) = true',
406: 1:    '✅f(zpzpzpp) = true',
406: 1:    '✅f(zzoo) = false',
406: 1:    '✅f(xxxooo) = true',
406: 1:    '✅f(xxxXooOo) = true',
406: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
406: 1:    '✅f(xXxxoewrcoOoo) = false',
406: 1:    '✅f(XxxxooO) = false',
406: 1:    '✅f(zssddd) = true',
406: 1:    '✅f(Xxxxertr34) = false',
406: 1:    '✅f(xXoXOFo) = true',
406: 1:    '✅f(ooXXoOO) = false',
406: 1:    '✅f(RXT0oo) = false',
406: 1:    '✅f(XXOAB0oxXx) = false',
406: 1:    '✅f(JxXAO) = false',
406: 1:    '✅f(PXXWXoO) = false',
406: 1:    '✅f(XO7XxX) = false',
406: 1:    '✅f(FGoXBOFO) = false',
406: 1:    '✅f(oO) = false',
406: 1:    '✅f(XCOXXXO) = false',
406: 1:    '✅f(WXXxXOXXT) = false',
406: 1:    '✅f(RXXoX) = false',
406: 1:    '✅f(oXOoxXW) = true',
406: 1:    '✅f(x) = false',
406: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
406: 1:    '✅f(5CAr7zsRke6Lb0Bi) = true',
406: 1:    '✅f(XsYSeqWBD1) = false',
406: 1:    '✅f(Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX) = false',
406: 1:    '✅f(tqM31hdjxhaPYLdght9ZZfWt0Tvy) = false',
406: 1:    '✅f(EMfqgqHIJAvjjdKhqS8uoa) = false',
406: 1:    '✅f(xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB) = false',
406: 1:    '✅f(rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF) = false',
406: 1:    '✅f(i0XLMlDgITKfdEy) = false',
406: 1:    '✅f(pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw) = true',
406: 1:    '❌f(cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm) = ??? != true'
406: 1:  ],
406: 1:  'level': 14,
406: 1:  'nextQuestion': 'cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm',
406: 1:  'questions': [
406: 1:    'ooxx',
406: 1:    'xooxx',
406: 1:    'ooxXm',
406: 1:    'zpzpzpp',
406: 1:    'zzoo',
406: 1:    'xxxooo',
406: 1:    'xxxXooOo',
406: 1:    'xxx23424esdsfvxXXOOooo',
406: 1:    'xXxxoewrcoOoo',
406: 1:    'XxxxooO',
406: 1:    'zssddd',
406: 1:    'Xxxxertr34',
406: 1:    'xXoXOFo',
406: 1:    'ooXXoOO',
406: 1:    'RXT0oo',
406: 1:    'XXOAB0oxXx',
406: 1:    'JxXAO',
406: 1:    'PXXWXoO',
406: 1:    'XO7XxX',
406: 1:    'FGoXBOFO',
406: 1:    'oO',
406: 1:    'XCOXXXO',
406: 1:    'WXXxXOXXT',
406: 1:    'RXXoX',
406: 1:    'oXOoxXW',
406: 1:    'x',
406: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
406: 1:    '5CAr7zsRke6Lb0Bi',
406: 1:    'XsYSeqWBD1',
406: 1:    'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
406: 1:    'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
406: 1:    'EMfqgqHIJAvjjdKhqS8uoa',
406: 1:    'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
406: 1:    'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
406: 1:    'i0XLMlDgITKfdEy',
406: 1:    'pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw',
406: 1:    'cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm'
406: 1:  ]
406: 1:}
406: 1:Scores: 20720
406: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'true']')
406: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
407: 1:BoardData {
407: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
407: 1:  'expectedAnswer': 'false',
407: 1:  'history': [
407: 1:    {
407: 1:      'answer': 'true',
407: 1:      'question': 'ooxx',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'false',
407: 1:      'question': 'xooxx',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'true',
407: 1:      'question': 'ooxXm',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'true',
407: 1:      'question': 'zpzpzpp',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'false',
407: 1:      'question': 'zzoo',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'true',
407: 1:      'question': 'xxxooo',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'true',
407: 1:      'question': 'xxxXooOo',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'false',
407: 1:      'question': 'xxx23424esdsfvxXXOOooo',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'false',
407: 1:      'question': 'xXxxoewrcoOoo',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'false',
407: 1:      'question': 'XxxxooO',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'true',
407: 1:      'question': 'zssddd',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'false',
407: 1:      'question': 'Xxxxertr34',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'true',
407: 1:      'question': 'xXoXOFo',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'false',
407: 1:      'question': 'ooXXoOO',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'false',
407: 1:      'question': 'RXT0oo',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'false',
407: 1:      'question': 'XXOAB0oxXx',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'false',
407: 1:      'question': 'JxXAO',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'false',
407: 1:      'question': 'PXXWXoO',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'false',
407: 1:      'question': 'XO7XxX',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'false',
407: 1:      'question': 'FGoXBOFO',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'false',
407: 1:      'question': 'oO',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'false',
407: 1:      'question': 'XCOXXXO',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'false',
407: 1:      'question': 'WXXxXOXXT',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'false',
407: 1:      'question': 'RXXoX',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'true',
407: 1:      'question': 'oXOoxXW',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'false',
407: 1:      'question': 'x',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'false',
407: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'true',
407: 1:      'question': '5CAr7zsRke6Lb0Bi',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'false',
407: 1:      'question': 'XsYSeqWBD1',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'false',
407: 1:      'question': 'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'false',
407: 1:      'question': 'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'false',
407: 1:      'question': 'EMfqgqHIJAvjjdKhqS8uoa',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'false',
407: 1:      'question': 'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'false',
407: 1:      'question': 'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'false',
407: 1:      'question': 'i0XLMlDgITKfdEy',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'true',
407: 1:      'question': 'pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'true',
407: 1:      'question': 'cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm',
407: 1:      'valid': true
407: 1:    }
407: 1:  ],
407: 1:  'info': [
407: 1:    '✅f(ooxx) = true',
407: 1:    '✅f(xooxx) = false',
407: 1:    '✅f(ooxXm) = true',
407: 1:    '✅f(zpzpzpp) = true',
407: 1:    '✅f(zzoo) = false',
407: 1:    '✅f(xxxooo) = true',
407: 1:    '✅f(xxxXooOo) = true',
407: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
407: 1:    '✅f(xXxxoewrcoOoo) = false',
407: 1:    '✅f(XxxxooO) = false',
407: 1:    '✅f(zssddd) = true',
407: 1:    '✅f(Xxxxertr34) = false',
407: 1:    '✅f(xXoXOFo) = true',
407: 1:    '✅f(ooXXoOO) = false',
407: 1:    '✅f(RXT0oo) = false',
407: 1:    '✅f(XXOAB0oxXx) = false',
407: 1:    '✅f(JxXAO) = false',
407: 1:    '✅f(PXXWXoO) = false',
407: 1:    '✅f(XO7XxX) = false',
407: 1:    '✅f(FGoXBOFO) = false',
407: 1:    '✅f(oO) = false',
407: 1:    '✅f(XCOXXXO) = false',
407: 1:    '✅f(WXXxXOXXT) = false',
407: 1:    '✅f(RXXoX) = false',
407: 1:    '✅f(oXOoxXW) = true',
407: 1:    '✅f(x) = false',
407: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
407: 1:    '✅f(5CAr7zsRke6Lb0Bi) = true',
407: 1:    '✅f(XsYSeqWBD1) = false',
407: 1:    '✅f(Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX) = false',
407: 1:    '✅f(tqM31hdjxhaPYLdght9ZZfWt0Tvy) = false',
407: 1:    '✅f(EMfqgqHIJAvjjdKhqS8uoa) = false',
407: 1:    '✅f(xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB) = false',
407: 1:    '✅f(rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF) = false',
407: 1:    '✅f(i0XLMlDgITKfdEy) = false',
407: 1:    '✅f(pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw) = true',
407: 1:    '✅f(cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm) = true',
407: 1:    '❌f(VZkOMeV8mcoie1vUroksxHKLfIxmj7mwZ) = ??? != false'
407: 1:  ],
407: 1:  'level': 14,
407: 1:  'nextQuestion': 'VZkOMeV8mcoie1vUroksxHKLfIxmj7mwZ',
407: 1:  'questions': [
407: 1:    'ooxx',
407: 1:    'xooxx',
407: 1:    'ooxXm',
407: 1:    'zpzpzpp',
407: 1:    'zzoo',
407: 1:    'xxxooo',
407: 1:    'xxxXooOo',
407: 1:    'xxx23424esdsfvxXXOOooo',
407: 1:    'xXxxoewrcoOoo',
407: 1:    'XxxxooO',
407: 1:    'zssddd',
407: 1:    'Xxxxertr34',
407: 1:    'xXoXOFo',
407: 1:    'ooXXoOO',
407: 1:    'RXT0oo',
407: 1:    'XXOAB0oxXx',
407: 1:    'JxXAO',
407: 1:    'PXXWXoO',
407: 1:    'XO7XxX',
407: 1:    'FGoXBOFO',
407: 1:    'oO',
407: 1:    'XCOXXXO',
407: 1:    'WXXxXOXXT',
407: 1:    'RXXoX',
407: 1:    'oXOoxXW',
407: 1:    'x',
407: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
407: 1:    '5CAr7zsRke6Lb0Bi',
407: 1:    'XsYSeqWBD1',
407: 1:    'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
407: 1:    'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
407: 1:    'EMfqgqHIJAvjjdKhqS8uoa',
407: 1:    'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
407: 1:    'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
407: 1:    'i0XLMlDgITKfdEy',
407: 1:    'pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw',
407: 1:    'cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm',
407: 1:    'VZkOMeV8mcoie1vUroksxHKLfIxmj7mwZ'
407: 1:  ]
407: 1:}
407: 1:Scores: 20724
407: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'true', 'false']')
407: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
408: 1:BoardData {
408: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
408: 1:  'expectedAnswer': 'false',
408: 1:  'history': [
408: 1:    {
408: 1:      'answer': 'true',
408: 1:      'question': 'ooxx',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'false',
408: 1:      'question': 'xooxx',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'true',
408: 1:      'question': 'ooxXm',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'true',
408: 1:      'question': 'zpzpzpp',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'false',
408: 1:      'question': 'zzoo',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'true',
408: 1:      'question': 'xxxooo',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'true',
408: 1:      'question': 'xxxXooOo',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'false',
408: 1:      'question': 'xxx23424esdsfvxXXOOooo',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'false',
408: 1:      'question': 'xXxxoewrcoOoo',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'false',
408: 1:      'question': 'XxxxooO',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'true',
408: 1:      'question': 'zssddd',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'false',
408: 1:      'question': 'Xxxxertr34',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'true',
408: 1:      'question': 'xXoXOFo',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'false',
408: 1:      'question': 'ooXXoOO',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'false',
408: 1:      'question': 'RXT0oo',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'false',
408: 1:      'question': 'XXOAB0oxXx',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'false',
408: 1:      'question': 'JxXAO',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'false',
408: 1:      'question': 'PXXWXoO',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'false',
408: 1:      'question': 'XO7XxX',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'false',
408: 1:      'question': 'FGoXBOFO',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'false',
408: 1:      'question': 'oO',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'false',
408: 1:      'question': 'XCOXXXO',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'false',
408: 1:      'question': 'WXXxXOXXT',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'false',
408: 1:      'question': 'RXXoX',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'true',
408: 1:      'question': 'oXOoxXW',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'false',
408: 1:      'question': 'x',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'false',
408: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'true',
408: 1:      'question': '5CAr7zsRke6Lb0Bi',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'false',
408: 1:      'question': 'XsYSeqWBD1',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'false',
408: 1:      'question': 'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'false',
408: 1:      'question': 'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'false',
408: 1:      'question': 'EMfqgqHIJAvjjdKhqS8uoa',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'false',
408: 1:      'question': 'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'false',
408: 1:      'question': 'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'false',
408: 1:      'question': 'i0XLMlDgITKfdEy',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'true',
408: 1:      'question': 'pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'true',
408: 1:      'question': 'cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'false',
408: 1:      'question': 'VZkOMeV8mcoie1vUroksxHKLfIxmj7mwZ',
408: 1:      'valid': true
408: 1:    }
408: 1:  ],
408: 1:  'info': [
408: 1:    '✅f(ooxx) = true',
408: 1:    '✅f(xooxx) = false',
408: 1:    '✅f(ooxXm) = true',
408: 1:    '✅f(zpzpzpp) = true',
408: 1:    '✅f(zzoo) = false',
408: 1:    '✅f(xxxooo) = true',
408: 1:    '✅f(xxxXooOo) = true',
408: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
408: 1:    '✅f(xXxxoewrcoOoo) = false',
408: 1:    '✅f(XxxxooO) = false',
408: 1:    '✅f(zssddd) = true',
408: 1:    '✅f(Xxxxertr34) = false',
408: 1:    '✅f(xXoXOFo) = true',
408: 1:    '✅f(ooXXoOO) = false',
408: 1:    '✅f(RXT0oo) = false',
408: 1:    '✅f(XXOAB0oxXx) = false',
408: 1:    '✅f(JxXAO) = false',
408: 1:    '✅f(PXXWXoO) = false',
408: 1:    '✅f(XO7XxX) = false',
408: 1:    '✅f(FGoXBOFO) = false',
408: 1:    '✅f(oO) = false',
408: 1:    '✅f(XCOXXXO) = false',
408: 1:    '✅f(WXXxXOXXT) = false',
408: 1:    '✅f(RXXoX) = false',
408: 1:    '✅f(oXOoxXW) = true',
408: 1:    '✅f(x) = false',
408: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
408: 1:    '✅f(5CAr7zsRke6Lb0Bi) = true',
408: 1:    '✅f(XsYSeqWBD1) = false',
408: 1:    '✅f(Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX) = false',
408: 1:    '✅f(tqM31hdjxhaPYLdght9ZZfWt0Tvy) = false',
408: 1:    '✅f(EMfqgqHIJAvjjdKhqS8uoa) = false',
408: 1:    '✅f(xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB) = false',
408: 1:    '✅f(rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF) = false',
408: 1:    '✅f(i0XLMlDgITKfdEy) = false',
408: 1:    '✅f(pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw) = true',
408: 1:    '✅f(cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm) = true',
408: 1:    '✅f(VZkOMeV8mcoie1vUroksxHKLfIxmj7mwZ) = false',
408: 1:    '❌f(TuxJpaU4eCvW7NOHWFPAhzvgLaZiSB5X555) = ??? != false'
408: 1:  ],
408: 1:  'level': 14,
408: 1:  'nextQuestion': 'TuxJpaU4eCvW7NOHWFPAhzvgLaZiSB5X555',
408: 1:  'questions': [
408: 1:    'ooxx',
408: 1:    'xooxx',
408: 1:    'ooxXm',
408: 1:    'zpzpzpp',
408: 1:    'zzoo',
408: 1:    'xxxooo',
408: 1:    'xxxXooOo',
408: 1:    'xxx23424esdsfvxXXOOooo',
408: 1:    'xXxxoewrcoOoo',
408: 1:    'XxxxooO',
408: 1:    'zssddd',
408: 1:    'Xxxxertr34',
408: 1:    'xXoXOFo',
408: 1:    'ooXXoOO',
408: 1:    'RXT0oo',
408: 1:    'XXOAB0oxXx',
408: 1:    'JxXAO',
408: 1:    'PXXWXoO',
408: 1:    'XO7XxX',
408: 1:    'FGoXBOFO',
408: 1:    'oO',
408: 1:    'XCOXXXO',
408: 1:    'WXXxXOXXT',
408: 1:    'RXXoX',
408: 1:    'oXOoxXW',
408: 1:    'x',
408: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
408: 1:    '5CAr7zsRke6Lb0Bi',
408: 1:    'XsYSeqWBD1',
408: 1:    'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
408: 1:    'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
408: 1:    'EMfqgqHIJAvjjdKhqS8uoa',
408: 1:    'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
408: 1:    'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
408: 1:    'i0XLMlDgITKfdEy',
408: 1:    'pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw',
408: 1:    'cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm',
408: 1:    'VZkOMeV8mcoie1vUroksxHKLfIxmj7mwZ',
408: 1:    'TuxJpaU4eCvW7NOHWFPAhzvgLaZiSB5X555'
408: 1:  ]
408: 1:}
408: 1:Scores: 20728
408: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'true', 'false', 'false']')
408: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
409: 1:BoardData {
409: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
409: 1:  'expectedAnswer': 'false',
409: 1:  'history': [
409: 1:    {
409: 1:      'answer': 'true',
409: 1:      'question': 'ooxx',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'false',
409: 1:      'question': 'xooxx',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'true',
409: 1:      'question': 'ooxXm',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'true',
409: 1:      'question': 'zpzpzpp',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'false',
409: 1:      'question': 'zzoo',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'true',
409: 1:      'question': 'xxxooo',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'true',
409: 1:      'question': 'xxxXooOo',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'false',
409: 1:      'question': 'xxx23424esdsfvxXXOOooo',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'false',
409: 1:      'question': 'xXxxoewrcoOoo',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'false',
409: 1:      'question': 'XxxxooO',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'true',
409: 1:      'question': 'zssddd',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'false',
409: 1:      'question': 'Xxxxertr34',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'true',
409: 1:      'question': 'xXoXOFo',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'false',
409: 1:      'question': 'ooXXoOO',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'false',
409: 1:      'question': 'RXT0oo',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'false',
409: 1:      'question': 'XXOAB0oxXx',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'false',
409: 1:      'question': 'JxXAO',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'false',
409: 1:      'question': 'PXXWXoO',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'false',
409: 1:      'question': 'XO7XxX',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'false',
409: 1:      'question': 'FGoXBOFO',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'false',
409: 1:      'question': 'oO',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'false',
409: 1:      'question': 'XCOXXXO',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'false',
409: 1:      'question': 'WXXxXOXXT',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'false',
409: 1:      'question': 'RXXoX',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'true',
409: 1:      'question': 'oXOoxXW',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'false',
409: 1:      'question': 'x',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'false',
409: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'true',
409: 1:      'question': '5CAr7zsRke6Lb0Bi',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'false',
409: 1:      'question': 'XsYSeqWBD1',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'false',
409: 1:      'question': 'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'false',
409: 1:      'question': 'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'false',
409: 1:      'question': 'EMfqgqHIJAvjjdKhqS8uoa',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'false',
409: 1:      'question': 'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'false',
409: 1:      'question': 'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'false',
409: 1:      'question': 'i0XLMlDgITKfdEy',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'true',
409: 1:      'question': 'pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'true',
409: 1:      'question': 'cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'false',
409: 1:      'question': 'VZkOMeV8mcoie1vUroksxHKLfIxmj7mwZ',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'false',
409: 1:      'question': 'TuxJpaU4eCvW7NOHWFPAhzvgLaZiSB5X555',
409: 1:      'valid': true
409: 1:    }
409: 1:  ],
409: 1:  'info': [
409: 1:    '✅f(ooxx) = true',
409: 1:    '✅f(xooxx) = false',
409: 1:    '✅f(ooxXm) = true',
409: 1:    '✅f(zpzpzpp) = true',
409: 1:    '✅f(zzoo) = false',
409: 1:    '✅f(xxxooo) = true',
409: 1:    '✅f(xxxXooOo) = true',
409: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
409: 1:    '✅f(xXxxoewrcoOoo) = false',
409: 1:    '✅f(XxxxooO) = false',
409: 1:    '✅f(zssddd) = true',
409: 1:    '✅f(Xxxxertr34) = false',
409: 1:    '✅f(xXoXOFo) = true',
409: 1:    '✅f(ooXXoOO) = false',
409: 1:    '✅f(RXT0oo) = false',
409: 1:    '✅f(XXOAB0oxXx) = false',
409: 1:    '✅f(JxXAO) = false',
409: 1:    '✅f(PXXWXoO) = false',
409: 1:    '✅f(XO7XxX) = false',
409: 1:    '✅f(FGoXBOFO) = false',
409: 1:    '✅f(oO) = false',
409: 1:    '✅f(XCOXXXO) = false',
409: 1:    '✅f(WXXxXOXXT) = false',
409: 1:    '✅f(RXXoX) = false',
409: 1:    '✅f(oXOoxXW) = true',
409: 1:    '✅f(x) = false',
409: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
409: 1:    '✅f(5CAr7zsRke6Lb0Bi) = true',
409: 1:    '✅f(XsYSeqWBD1) = false',
409: 1:    '✅f(Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX) = false',
409: 1:    '✅f(tqM31hdjxhaPYLdght9ZZfWt0Tvy) = false',
409: 1:    '✅f(EMfqgqHIJAvjjdKhqS8uoa) = false',
409: 1:    '✅f(xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB) = false',
409: 1:    '✅f(rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF) = false',
409: 1:    '✅f(i0XLMlDgITKfdEy) = false',
409: 1:    '✅f(pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw) = true',
409: 1:    '✅f(cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm) = true',
409: 1:    '✅f(VZkOMeV8mcoie1vUroksxHKLfIxmj7mwZ) = false',
409: 1:    '✅f(TuxJpaU4eCvW7NOHWFPAhzvgLaZiSB5X555) = false',
409: 1:    '❌f(LRHO7zulFWjahyQReCgZSUH6ybvokO2tdBltzwWBVBC29) = ??? != false'
409: 1:  ],
409: 1:  'level': 14,
409: 1:  'nextQuestion': 'LRHO7zulFWjahyQReCgZSUH6ybvokO2tdBltzwWBVBC29',
409: 1:  'questions': [
409: 1:    'ooxx',
409: 1:    'xooxx',
409: 1:    'ooxXm',
409: 1:    'zpzpzpp',
409: 1:    'zzoo',
409: 1:    'xxxooo',
409: 1:    'xxxXooOo',
409: 1:    'xxx23424esdsfvxXXOOooo',
409: 1:    'xXxxoewrcoOoo',
409: 1:    'XxxxooO',
409: 1:    'zssddd',
409: 1:    'Xxxxertr34',
409: 1:    'xXoXOFo',
409: 1:    'ooXXoOO',
409: 1:    'RXT0oo',
409: 1:    'XXOAB0oxXx',
409: 1:    'JxXAO',
409: 1:    'PXXWXoO',
409: 1:    'XO7XxX',
409: 1:    'FGoXBOFO',
409: 1:    'oO',
409: 1:    'XCOXXXO',
409: 1:    'WXXxXOXXT',
409: 1:    'RXXoX',
409: 1:    'oXOoxXW',
409: 1:    'x',
409: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
409: 1:    '5CAr7zsRke6Lb0Bi',
409: 1:    'XsYSeqWBD1',
409: 1:    'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
409: 1:    'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
409: 1:    'EMfqgqHIJAvjjdKhqS8uoa',
409: 1:    'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
409: 1:    'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
409: 1:    'i0XLMlDgITKfdEy',
409: 1:    'pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw',
409: 1:    'cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm',
409: 1:    'VZkOMeV8mcoie1vUroksxHKLfIxmj7mwZ',
409: 1:    'TuxJpaU4eCvW7NOHWFPAhzvgLaZiSB5X555',
409: 1:    'LRHO7zulFWjahyQReCgZSUH6ybvokO2tdBltzwWBVBC29'
409: 1:  ]
409: 1:}
409: 1:Scores: 20732
409: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'true', 'false', 'false', 'false']')
409: 1:Fire Event: PassTest{complexity=18, testCount=41}
------------------------------------------
410: 1:BoardData {
410: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
410: 1:  'expectedAnswer': 'false',
410: 1:  'history': [
410: 1:    {
410: 1:      'answer': 'true',
410: 1:      'question': 'ooxx',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'xooxx',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'true',
410: 1:      'question': 'ooxXm',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'true',
410: 1:      'question': 'zpzpzpp',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'zzoo',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'true',
410: 1:      'question': 'xxxooo',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'true',
410: 1:      'question': 'xxxXooOo',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'xxx23424esdsfvxXXOOooo',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'xXxxoewrcoOoo',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'XxxxooO',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'true',
410: 1:      'question': 'zssddd',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'Xxxxertr34',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'true',
410: 1:      'question': 'xXoXOFo',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'ooXXoOO',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'RXT0oo',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'XXOAB0oxXx',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'JxXAO',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'PXXWXoO',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'XO7XxX',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'FGoXBOFO',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'oO',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'XCOXXXO',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'WXXxXOXXT',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'RXXoX',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'true',
410: 1:      'question': 'oXOoxXW',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'x',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'true',
410: 1:      'question': '5CAr7zsRke6Lb0Bi',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'XsYSeqWBD1',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'EMfqgqHIJAvjjdKhqS8uoa',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'i0XLMlDgITKfdEy',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'true',
410: 1:      'question': 'pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'true',
410: 1:      'question': 'cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'VZkOMeV8mcoie1vUroksxHKLfIxmj7mwZ',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'TuxJpaU4eCvW7NOHWFPAhzvgLaZiSB5X555',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'false',
410: 1:      'question': 'LRHO7zulFWjahyQReCgZSUH6ybvokO2tdBltzwWBVBC29',
410: 1:      'valid': true
410: 1:    }
410: 1:  ],
410: 1:  'info': [
410: 1:    '✅f(ooxx) = true',
410: 1:    '✅f(xooxx) = false',
410: 1:    '✅f(ooxXm) = true',
410: 1:    '✅f(zpzpzpp) = true',
410: 1:    '✅f(zzoo) = false',
410: 1:    '✅f(xxxooo) = true',
410: 1:    '✅f(xxxXooOo) = true',
410: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
410: 1:    '✅f(xXxxoewrcoOoo) = false',
410: 1:    '✅f(XxxxooO) = false',
410: 1:    '✅f(zssddd) = true',
410: 1:    '✅f(Xxxxertr34) = false',
410: 1:    '✅f(xXoXOFo) = true',
410: 1:    '✅f(ooXXoOO) = false',
410: 1:    '✅f(RXT0oo) = false',
410: 1:    '✅f(XXOAB0oxXx) = false',
410: 1:    '✅f(JxXAO) = false',
410: 1:    '✅f(PXXWXoO) = false',
410: 1:    '✅f(XO7XxX) = false',
410: 1:    '✅f(FGoXBOFO) = false',
410: 1:    '✅f(oO) = false',
410: 1:    '✅f(XCOXXXO) = false',
410: 1:    '✅f(WXXxXOXXT) = false',
410: 1:    '✅f(RXXoX) = false',
410: 1:    '✅f(oXOoxXW) = true',
410: 1:    '✅f(x) = false',
410: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
410: 1:    '✅f(5CAr7zsRke6Lb0Bi) = true',
410: 1:    '✅f(XsYSeqWBD1) = false',
410: 1:    '✅f(Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX) = false',
410: 1:    '✅f(tqM31hdjxhaPYLdght9ZZfWt0Tvy) = false',
410: 1:    '✅f(EMfqgqHIJAvjjdKhqS8uoa) = false',
410: 1:    '✅f(xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB) = false',
410: 1:    '✅f(rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF) = false',
410: 1:    '✅f(i0XLMlDgITKfdEy) = false',
410: 1:    '✅f(pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw) = true',
410: 1:    '✅f(cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm) = true',
410: 1:    '✅f(VZkOMeV8mcoie1vUroksxHKLfIxmj7mwZ) = false',
410: 1:    '✅f(TuxJpaU4eCvW7NOHWFPAhzvgLaZiSB5X555) = false',
410: 1:    '✅f(LRHO7zulFWjahyQReCgZSUH6ybvokO2tdBltzwWBVBC29) = false',
410: 1:    '❌f(a0sgCHriukJ5lv2TlEQeZWS0GsNkzcKTMBz7Leo1VQ9o) = ??? != false'
410: 1:  ],
410: 1:  'level': 14,
410: 1:  'nextQuestion': 'a0sgCHriukJ5lv2TlEQeZWS0GsNkzcKTMBz7Leo1VQ9o',
410: 1:  'questions': [
410: 1:    'ooxx',
410: 1:    'xooxx',
410: 1:    'ooxXm',
410: 1:    'zpzpzpp',
410: 1:    'zzoo',
410: 1:    'xxxooo',
410: 1:    'xxxXooOo',
410: 1:    'xxx23424esdsfvxXXOOooo',
410: 1:    'xXxxoewrcoOoo',
410: 1:    'XxxxooO',
410: 1:    'zssddd',
410: 1:    'Xxxxertr34',
410: 1:    'xXoXOFo',
410: 1:    'ooXXoOO',
410: 1:    'RXT0oo',
410: 1:    'XXOAB0oxXx',
410: 1:    'JxXAO',
410: 1:    'PXXWXoO',
410: 1:    'XO7XxX',
410: 1:    'FGoXBOFO',
410: 1:    'oO',
410: 1:    'XCOXXXO',
410: 1:    'WXXxXOXXT',
410: 1:    'RXXoX',
410: 1:    'oXOoxXW',
410: 1:    'x',
410: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
410: 1:    '5CAr7zsRke6Lb0Bi',
410: 1:    'XsYSeqWBD1',
410: 1:    'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
410: 1:    'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
410: 1:    'EMfqgqHIJAvjjdKhqS8uoa',
410: 1:    'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
410: 1:    'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
410: 1:    'i0XLMlDgITKfdEy',
410: 1:    'pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw',
410: 1:    'cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm',
410: 1:    'VZkOMeV8mcoie1vUroksxHKLfIxmj7mwZ',
410: 1:    'TuxJpaU4eCvW7NOHWFPAhzvgLaZiSB5X555',
410: 1:    'LRHO7zulFWjahyQReCgZSUH6ybvokO2tdBltzwWBVBC29',
410: 1:    'a0sgCHriukJ5lv2TlEQeZWS0GsNkzcKTMBz7Leo1VQ9o'
410: 1:  ]
410: 1:}
410: 1:Scores: 20736
410: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'false']')
410: 1:Fire Event: PassTest{complexity=18, testCount=41}
410: 1:Fire Event: NextAlgorithm{complexity=18, time=0}
------------------------------------------
411: 1:BoardData {
411: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
411: 1:  'history': [
411: 1:    {
411: 1:      'answer': 'true',
411: 1:      'question': 'ooxx',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'xooxx',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'true',
411: 1:      'question': 'ooxXm',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'true',
411: 1:      'question': 'zpzpzpp',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'zzoo',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'true',
411: 1:      'question': 'xxxooo',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'true',
411: 1:      'question': 'xxxXooOo',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'xxx23424esdsfvxXXOOooo',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'xXxxoewrcoOoo',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'XxxxooO',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'true',
411: 1:      'question': 'zssddd',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'Xxxxertr34',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'true',
411: 1:      'question': 'xXoXOFo',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'ooXXoOO',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'RXT0oo',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'XXOAB0oxXx',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'JxXAO',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'PXXWXoO',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'XO7XxX',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'FGoXBOFO',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'oO',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'XCOXXXO',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'WXXxXOXXT',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'RXXoX',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'true',
411: 1:      'question': 'oXOoxXW',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'x',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'true',
411: 1:      'question': '5CAr7zsRke6Lb0Bi',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'XsYSeqWBD1',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'EMfqgqHIJAvjjdKhqS8uoa',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'i0XLMlDgITKfdEy',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'true',
411: 1:      'question': 'pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'true',
411: 1:      'question': 'cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'VZkOMeV8mcoie1vUroksxHKLfIxmj7mwZ',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'TuxJpaU4eCvW7NOHWFPAhzvgLaZiSB5X555',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'LRHO7zulFWjahyQReCgZSUH6ybvokO2tdBltzwWBVBC29',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'false',
411: 1:      'question': 'a0sgCHriukJ5lv2TlEQeZWS0GsNkzcKTMBz7Leo1VQ9o',
411: 1:      'valid': true
411: 1:    }
411: 1:  ],
411: 1:  'info': [
411: 1:    '✅f(ooxx) = true',
411: 1:    '✅f(xooxx) = false',
411: 1:    '✅f(ooxXm) = true',
411: 1:    '✅f(zpzpzpp) = true',
411: 1:    '✅f(zzoo) = false',
411: 1:    '✅f(xxxooo) = true',
411: 1:    '✅f(xxxXooOo) = true',
411: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
411: 1:    '✅f(xXxxoewrcoOoo) = false',
411: 1:    '✅f(XxxxooO) = false',
411: 1:    '✅f(zssddd) = true',
411: 1:    '✅f(Xxxxertr34) = false',
411: 1:    '✅f(xXoXOFo) = true',
411: 1:    '✅f(ooXXoOO) = false',
411: 1:    '✅f(RXT0oo) = false',
411: 1:    '✅f(XXOAB0oxXx) = false',
411: 1:    '✅f(JxXAO) = false',
411: 1:    '✅f(PXXWXoO) = false',
411: 1:    '✅f(XO7XxX) = false',
411: 1:    '✅f(FGoXBOFO) = false',
411: 1:    '✅f(oO) = false',
411: 1:    '✅f(XCOXXXO) = false',
411: 1:    '✅f(WXXxXOXXT) = false',
411: 1:    '✅f(RXXoX) = false',
411: 1:    '✅f(oXOoxXW) = true',
411: 1:    '✅f(x) = false',
411: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
411: 1:    '✅f(5CAr7zsRke6Lb0Bi) = true',
411: 1:    '✅f(XsYSeqWBD1) = false',
411: 1:    '✅f(Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX) = false',
411: 1:    '✅f(tqM31hdjxhaPYLdght9ZZfWt0Tvy) = false',
411: 1:    '✅f(EMfqgqHIJAvjjdKhqS8uoa) = false',
411: 1:    '✅f(xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB) = false',
411: 1:    '✅f(rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF) = false',
411: 1:    '✅f(i0XLMlDgITKfdEy) = false',
411: 1:    '✅f(pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw) = true',
411: 1:    '✅f(cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm) = true',
411: 1:    '✅f(VZkOMeV8mcoie1vUroksxHKLfIxmj7mwZ) = false',
411: 1:    '✅f(TuxJpaU4eCvW7NOHWFPAhzvgLaZiSB5X555) = false',
411: 1:    '✅f(LRHO7zulFWjahyQReCgZSUH6ybvokO2tdBltzwWBVBC29) = false',
411: 1:    '✅f(a0sgCHriukJ5lv2TlEQeZWS0GsNkzcKTMBz7Leo1VQ9o) = false'
411: 1:  ],
411: 1:  'level': 14,
411: 1:  'questions': []
411: 1:}
411: 1:Scores: 23169
411: 1:Answer: message('StartNextLevel')
411: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
412: 1:BoardData {
412: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
412: 1:  'expectedAnswer': 'true',
412: 1:  'history': [],
412: 1:  'info': ['❌f(Dermatoglyphics) = ??? != true'],
412: 1:  'level': 15,
412: 1:  'nextQuestion': 'Dermatoglyphics',
412: 1:  'questions': ['Dermatoglyphics']
412: 1:}
412: 1:Scores: 23169
412: 1:Answer: message('['true']')
412: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
413: 1:BoardData {
413: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
413: 1:  'expectedAnswer': 'false',
413: 1:  'history': [{
413: 1:    'answer': 'true',
413: 1:    'question': 'Dermatoglyphics',
413: 1:    'valid': true
413: 1:  }],
413: 1:  'info': [
413: 1:    '✅f(Dermatoglyphics) = true',
413: 1:    '❌f(cappa) = ??? != false'
413: 1:  ],
413: 1:  'level': 15,
413: 1:  'nextQuestion': 'cappa',
413: 1:  'questions': [
413: 1:    'Dermatoglyphics',
413: 1:    'cappa'
413: 1:  ]
413: 1:}
413: 1:Scores: 23174
413: 1:Answer: message('['true', 'false']')
413: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
414: 1:BoardData {
414: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
414: 1:  'expectedAnswer': 'false',
414: 1:  'history': [
414: 1:    {
414: 1:      'answer': 'true',
414: 1:      'question': 'Dermatoglyphics',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': 'false',
414: 1:      'question': 'cappa',
414: 1:      'valid': true
414: 1:    }
414: 1:  ],
414: 1:  'info': [
414: 1:    '✅f(Dermatoglyphics) = true',
414: 1:    '✅f(cappa) = false',
414: 1:    '❌f(moOn) = ??? != false'
414: 1:  ],
414: 1:  'level': 15,
414: 1:  'nextQuestion': 'moOn',
414: 1:  'questions': [
414: 1:    'Dermatoglyphics',
414: 1:    'cappa',
414: 1:    'moOn'
414: 1:  ]
414: 1:}
414: 1:Scores: 23179
414: 1:Answer: message('['true', 'false', 'false']')
414: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
415: 1:BoardData {
415: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
415: 1:  'expectedAnswer': 'true',
415: 1:  'history': [
415: 1:    {
415: 1:      'answer': 'true',
415: 1:      'question': 'Dermatoglyphics',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': 'false',
415: 1:      'question': 'cappa',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': 'false',
415: 1:      'question': 'moOn',
415: 1:      'valid': true
415: 1:    }
415: 1:  ],
415: 1:  'info': [
415: 1:    '✅f(Dermatoglyphics) = true',
415: 1:    '✅f(cappa) = false',
415: 1:    '✅f(moOn) = false',
415: 1:    '❌f() = ??? != true'
415: 1:  ],
415: 1:  'level': 15,
415: 1:  'nextQuestion': '',
415: 1:  'questions': [
415: 1:    'Dermatoglyphics',
415: 1:    'cappa',
415: 1:    'moOn',
415: 1:    ''
415: 1:  ]
415: 1:}
415: 1:Scores: 23184
415: 1:Answer: message('['true', 'false', 'false', 'true']')
415: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
416: 1:BoardData {
416: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
416: 1:  'expectedAnswer': 'true',
416: 1:  'history': [
416: 1:    {
416: 1:      'answer': 'true',
416: 1:      'question': 'Dermatoglyphics',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': 'false',
416: 1:      'question': 'cappa',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': 'false',
416: 1:      'question': 'moOn',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': 'true',
416: 1:      'question': '',
416: 1:      'valid': true
416: 1:    }
416: 1:  ],
416: 1:  'info': [
416: 1:    '✅f(Dermatoglyphics) = true',
416: 1:    '✅f(cappa) = false',
416: 1:    '✅f(moOn) = false',
416: 1:    '✅f() = true',
416: 1:    '❌f(Ambidextrously) = ??? != true'
416: 1:  ],
416: 1:  'level': 15,
416: 1:  'nextQuestion': 'Ambidextrously',
416: 1:  'questions': [
416: 1:    'Dermatoglyphics',
416: 1:    'cappa',
416: 1:    'moOn',
416: 1:    '',
416: 1:    'Ambidextrously'
416: 1:  ]
416: 1:}
416: 1:Scores: 23189
416: 1:Answer: message('['true', 'false', 'false', 'true', 'true']')
416: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
417: 1:BoardData {
417: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
417: 1:  'expectedAnswer': 'false',
417: 1:  'history': [
417: 1:    {
417: 1:      'answer': 'true',
417: 1:      'question': 'Dermatoglyphics',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': 'false',
417: 1:      'question': 'cappa',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': 'false',
417: 1:      'question': 'moOn',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': 'true',
417: 1:      'question': '',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': 'true',
417: 1:      'question': 'Ambidextrously',
417: 1:      'valid': true
417: 1:    }
417: 1:  ],
417: 1:  'info': [
417: 1:    '✅f(Dermatoglyphics) = true',
417: 1:    '✅f(cappa) = false',
417: 1:    '✅f(moOn) = false',
417: 1:    '✅f() = true',
417: 1:    '✅f(Ambidextrously) = true',
417: 1:    '❌f(Aqueducts) = ??? != false'
417: 1:  ],
417: 1:  'level': 15,
417: 1:  'nextQuestion': 'Aqueducts',
417: 1:  'questions': [
417: 1:    'Dermatoglyphics',
417: 1:    'cappa',
417: 1:    'moOn',
417: 1:    '',
417: 1:    'Ambidextrously',
417: 1:    'Aqueducts'
417: 1:  ]
417: 1:}
417: 1:Scores: 23194
417: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false']')
417: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
418: 1:BoardData {
418: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
418: 1:  'expectedAnswer': 'false',
418: 1:  'history': [
418: 1:    {
418: 1:      'answer': 'true',
418: 1:      'question': 'Dermatoglyphics',
418: 1:      'valid': true
418: 1:    },
418: 1:    {
418: 1:      'answer': 'false',
418: 1:      'question': 'cappa',
418: 1:      'valid': true
418: 1:    },
418: 1:    {
418: 1:      'answer': 'false',
418: 1:      'question': 'moOn',
418: 1:      'valid': true
418: 1:    },
418: 1:    {
418: 1:      'answer': 'true',
418: 1:      'question': '',
418: 1:      'valid': true
418: 1:    },
418: 1:    {
418: 1:      'answer': 'true',
418: 1:      'question': 'Ambidextrously',
418: 1:      'valid': true
418: 1:    },
418: 1:    {
418: 1:      'answer': 'false',
418: 1:      'question': 'Aqueducts',
418: 1:      'valid': true
418: 1:    }
418: 1:  ],
418: 1:  'info': [
418: 1:    '✅f(Dermatoglyphics) = true',
418: 1:    '✅f(cappa) = false',
418: 1:    '✅f(moOn) = false',
418: 1:    '✅f() = true',
418: 1:    '✅f(Ambidextrously) = true',
418: 1:    '✅f(Aqueducts) = false',
418: 1:    '❌f(Bilabial) = ??? != false'
418: 1:  ],
418: 1:  'level': 15,
418: 1:  'nextQuestion': 'Bilabial',
418: 1:  'questions': [
418: 1:    'Dermatoglyphics',
418: 1:    'cappa',
418: 1:    'moOn',
418: 1:    '',
418: 1:    'Ambidextrously',
418: 1:    'Aqueducts',
418: 1:    'Bilabial'
418: 1:  ]
418: 1:}
418: 1:Scores: 23199
418: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false']')
418: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
419: 1:BoardData {
419: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
419: 1:  'expectedAnswer': 'false',
419: 1:  'history': [
419: 1:    {
419: 1:      'answer': 'true',
419: 1:      'question': 'Dermatoglyphics',
419: 1:      'valid': true
419: 1:    },
419: 1:    {
419: 1:      'answer': 'false',
419: 1:      'question': 'cappa',
419: 1:      'valid': true
419: 1:    },
419: 1:    {
419: 1:      'answer': 'false',
419: 1:      'question': 'moOn',
419: 1:      'valid': true
419: 1:    },
419: 1:    {
419: 1:      'answer': 'true',
419: 1:      'question': '',
419: 1:      'valid': true
419: 1:    },
419: 1:    {
419: 1:      'answer': 'true',
419: 1:      'question': 'Ambidextrously',
419: 1:      'valid': true
419: 1:    },
419: 1:    {
419: 1:      'answer': 'false',
419: 1:      'question': 'Aqueducts',
419: 1:      'valid': true
419: 1:    },
419: 1:    {
419: 1:      'answer': 'false',
419: 1:      'question': 'Bilabial',
419: 1:      'valid': true
419: 1:    }
419: 1:  ],
419: 1:  'info': [
419: 1:    '✅f(Dermatoglyphics) = true',
419: 1:    '✅f(cappa) = false',
419: 1:    '✅f(moOn) = false',
419: 1:    '✅f() = true',
419: 1:    '✅f(Ambidextrously) = true',
419: 1:    '✅f(Aqueducts) = false',
419: 1:    '✅f(Bilabial) = false',
419: 1:    '❌f(Caramelized) = ??? != false'
419: 1:  ],
419: 1:  'level': 15,
419: 1:  'nextQuestion': 'Caramelized',
419: 1:  'questions': [
419: 1:    'Dermatoglyphics',
419: 1:    'cappa',
419: 1:    'moOn',
419: 1:    '',
419: 1:    'Ambidextrously',
419: 1:    'Aqueducts',
419: 1:    'Bilabial',
419: 1:    'Caramelized'
419: 1:  ]
419: 1:}
419: 1:Scores: 23204
419: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false']')
419: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
420: 1:BoardData {
420: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
420: 1:  'expectedAnswer': 'true',
420: 1:  'history': [
420: 1:    {
420: 1:      'answer': 'true',
420: 1:      'question': 'Dermatoglyphics',
420: 1:      'valid': true
420: 1:    },
420: 1:    {
420: 1:      'answer': 'false',
420: 1:      'question': 'cappa',
420: 1:      'valid': true
420: 1:    },
420: 1:    {
420: 1:      'answer': 'false',
420: 1:      'question': 'moOn',
420: 1:      'valid': true
420: 1:    },
420: 1:    {
420: 1:      'answer': 'true',
420: 1:      'question': '',
420: 1:      'valid': true
420: 1:    },
420: 1:    {
420: 1:      'answer': 'true',
420: 1:      'question': 'Ambidextrously',
420: 1:      'valid': true
420: 1:    },
420: 1:    {
420: 1:      'answer': 'false',
420: 1:      'question': 'Aqueducts',
420: 1:      'valid': true
420: 1:    },
420: 1:    {
420: 1:      'answer': 'false',
420: 1:      'question': 'Bilabial',
420: 1:      'valid': true
420: 1:    },
420: 1:    {
420: 1:      'answer': 'false',
420: 1:      'question': 'Caramelized',
420: 1:      'valid': true
420: 1:    }
420: 1:  ],
420: 1:  'info': [
420: 1:    '✅f(Dermatoglyphics) = true',
420: 1:    '✅f(cappa) = false',
420: 1:    '✅f(moOn) = false',
420: 1:    '✅f() = true',
420: 1:    '✅f(Ambidextrously) = true',
420: 1:    '✅f(Aqueducts) = false',
420: 1:    '✅f(Bilabial) = false',
420: 1:    '✅f(Caramelized) = false',
420: 1:    '❌f(Conjugated) = ??? != true'
420: 1:  ],
420: 1:  'level': 15,
420: 1:  'nextQuestion': 'Conjugated',
420: 1:  'questions': [
420: 1:    'Dermatoglyphics',
420: 1:    'cappa',
420: 1:    'moOn',
420: 1:    '',
420: 1:    'Ambidextrously',
420: 1:    'Aqueducts',
420: 1:    'Bilabial',
420: 1:    'Caramelized',
420: 1:    'Conjugated'
420: 1:  ]
420: 1:}
420: 1:Scores: 23209
420: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true']')
420: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
421: 1:BoardData {
421: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
421: 1:  'expectedAnswer': 'false',
421: 1:  'history': [
421: 1:    {
421: 1:      'answer': 'true',
421: 1:      'question': 'Dermatoglyphics',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': 'false',
421: 1:      'question': 'cappa',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': 'false',
421: 1:      'question': 'moOn',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': 'true',
421: 1:      'question': '',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': 'true',
421: 1:      'question': 'Ambidextrously',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': 'false',
421: 1:      'question': 'Aqueducts',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': 'false',
421: 1:      'question': 'Bilabial',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': 'false',
421: 1:      'question': 'Caramelized',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': 'true',
421: 1:      'question': 'Conjugated',
421: 1:      'valid': true
421: 1:    }
421: 1:  ],
421: 1:  'info': [
421: 1:    '✅f(Dermatoglyphics) = true',
421: 1:    '✅f(cappa) = false',
421: 1:    '✅f(moOn) = false',
421: 1:    '✅f() = true',
421: 1:    '✅f(Ambidextrously) = true',
421: 1:    '✅f(Aqueducts) = false',
421: 1:    '✅f(Bilabial) = false',
421: 1:    '✅f(Caramelized) = false',
421: 1:    '✅f(Conjugated) = true',
421: 1:    '❌f(Denouement) = ??? != false'
421: 1:  ],
421: 1:  'level': 15,
421: 1:  'nextQuestion': 'Denouement',
421: 1:  'questions': [
421: 1:    'Dermatoglyphics',
421: 1:    'cappa',
421: 1:    'moOn',
421: 1:    '',
421: 1:    'Ambidextrously',
421: 1:    'Aqueducts',
421: 1:    'Bilabial',
421: 1:    'Caramelized',
421: 1:    'Conjugated',
421: 1:    'Denouement'
421: 1:  ]
421: 1:}
421: 1:Scores: 23214
421: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false']')
421: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
422: 1:BoardData {
422: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
422: 1:  'expectedAnswer': 'false',
422: 1:  'history': [
422: 1:    {
422: 1:      'answer': 'true',
422: 1:      'question': 'Dermatoglyphics',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': 'false',
422: 1:      'question': 'cappa',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': 'false',
422: 1:      'question': 'moOn',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': 'true',
422: 1:      'question': '',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': 'true',
422: 1:      'question': 'Ambidextrously',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': 'false',
422: 1:      'question': 'Aqueducts',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': 'false',
422: 1:      'question': 'Bilabial',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': 'false',
422: 1:      'question': 'Caramelized',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': 'true',
422: 1:      'question': 'Conjugated',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': 'false',
422: 1:      'question': 'Denouement',
422: 1:      'valid': true
422: 1:    }
422: 1:  ],
422: 1:  'info': [
422: 1:    '✅f(Dermatoglyphics) = true',
422: 1:    '✅f(cappa) = false',
422: 1:    '✅f(moOn) = false',
422: 1:    '✅f() = true',
422: 1:    '✅f(Ambidextrously) = true',
422: 1:    '✅f(Aqueducts) = false',
422: 1:    '✅f(Bilabial) = false',
422: 1:    '✅f(Caramelized) = false',
422: 1:    '✅f(Conjugated) = true',
422: 1:    '✅f(Denouement) = false',
422: 1:    '❌f(Disinfectant) = ??? != false'
422: 1:  ],
422: 1:  'level': 15,
422: 1:  'nextQuestion': 'Disinfectant',
422: 1:  'questions': [
422: 1:    'Dermatoglyphics',
422: 1:    'cappa',
422: 1:    'moOn',
422: 1:    '',
422: 1:    'Ambidextrously',
422: 1:    'Aqueducts',
422: 1:    'Bilabial',
422: 1:    'Caramelized',
422: 1:    'Conjugated',
422: 1:    'Denouement',
422: 1:    'Disinfectant'
422: 1:  ]
422: 1:}
422: 1:Scores: 23219
422: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false']')
422: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
423: 1:BoardData {
423: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
423: 1:  'expectedAnswer': 'false',
423: 1:  'history': [
423: 1:    {
423: 1:      'answer': 'true',
423: 1:      'question': 'Dermatoglyphics',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': 'false',
423: 1:      'question': 'cappa',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': 'false',
423: 1:      'question': 'moOn',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': 'true',
423: 1:      'question': '',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': 'true',
423: 1:      'question': 'Ambidextrously',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': 'false',
423: 1:      'question': 'Aqueducts',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': 'false',
423: 1:      'question': 'Bilabial',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': 'false',
423: 1:      'question': 'Caramelized',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': 'true',
423: 1:      'question': 'Conjugated',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': 'false',
423: 1:      'question': 'Denouement',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': 'false',
423: 1:      'question': 'Disinfectant',
423: 1:      'valid': true
423: 1:    }
423: 1:  ],
423: 1:  'info': [
423: 1:    '✅f(Dermatoglyphics) = true',
423: 1:    '✅f(cappa) = false',
423: 1:    '✅f(moOn) = false',
423: 1:    '✅f() = true',
423: 1:    '✅f(Ambidextrously) = true',
423: 1:    '✅f(Aqueducts) = false',
423: 1:    '✅f(Bilabial) = false',
423: 1:    '✅f(Caramelized) = false',
423: 1:    '✅f(Conjugated) = true',
423: 1:    '✅f(Denouement) = false',
423: 1:    '✅f(Disinfectant) = false',
423: 1:    '❌f(Embezzler) = ??? != false'
423: 1:  ],
423: 1:  'level': 15,
423: 1:  'nextQuestion': 'Embezzler',
423: 1:  'questions': [
423: 1:    'Dermatoglyphics',
423: 1:    'cappa',
423: 1:    'moOn',
423: 1:    '',
423: 1:    'Ambidextrously',
423: 1:    'Aqueducts',
423: 1:    'Bilabial',
423: 1:    'Caramelized',
423: 1:    'Conjugated',
423: 1:    'Denouement',
423: 1:    'Disinfectant',
423: 1:    'Embezzler'
423: 1:  ]
423: 1:}
423: 1:Scores: 23224
423: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false']')
423: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
424: 1:BoardData {
424: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
424: 1:  'expectedAnswer': 'false',
424: 1:  'history': [
424: 1:    {
424: 1:      'answer': 'true',
424: 1:      'question': 'Dermatoglyphics',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': 'false',
424: 1:      'question': 'cappa',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': 'false',
424: 1:      'question': 'moOn',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': 'true',
424: 1:      'question': '',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': 'true',
424: 1:      'question': 'Ambidextrously',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': 'false',
424: 1:      'question': 'Aqueducts',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': 'false',
424: 1:      'question': 'Bilabial',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': 'false',
424: 1:      'question': 'Caramelized',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': 'true',
424: 1:      'question': 'Conjugated',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': 'false',
424: 1:      'question': 'Denouement',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': 'false',
424: 1:      'question': 'Disinfectant',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': 'false',
424: 1:      'question': 'Embezzler',
424: 1:      'valid': true
424: 1:    }
424: 1:  ],
424: 1:  'info': [
424: 1:    '✅f(Dermatoglyphics) = true',
424: 1:    '✅f(cappa) = false',
424: 1:    '✅f(moOn) = false',
424: 1:    '✅f() = true',
424: 1:    '✅f(Ambidextrously) = true',
424: 1:    '✅f(Aqueducts) = false',
424: 1:    '✅f(Bilabial) = false',
424: 1:    '✅f(Caramelized) = false',
424: 1:    '✅f(Conjugated) = true',
424: 1:    '✅f(Denouement) = false',
424: 1:    '✅f(Disinfectant) = false',
424: 1:    '✅f(Embezzler) = false',
424: 1:    '❌f(Enzymology) = ??? != false'
424: 1:  ],
424: 1:  'level': 15,
424: 1:  'nextQuestion': 'Enzymology',
424: 1:  'questions': [
424: 1:    'Dermatoglyphics',
424: 1:    'cappa',
424: 1:    'moOn',
424: 1:    '',
424: 1:    'Ambidextrously',
424: 1:    'Aqueducts',
424: 1:    'Bilabial',
424: 1:    'Caramelized',
424: 1:    'Conjugated',
424: 1:    'Denouement',
424: 1:    'Disinfectant',
424: 1:    'Embezzler',
424: 1:    'Enzymology'
424: 1:  ]
424: 1:}
424: 1:Scores: 23229
424: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false']')
424: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
425: 1:BoardData {
425: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
425: 1:  'expectedAnswer': 'true',
425: 1:  'history': [
425: 1:    {
425: 1:      'answer': 'true',
425: 1:      'question': 'Dermatoglyphics',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': 'false',
425: 1:      'question': 'cappa',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': 'false',
425: 1:      'question': 'moOn',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': 'true',
425: 1:      'question': '',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': 'true',
425: 1:      'question': 'Ambidextrously',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': 'false',
425: 1:      'question': 'Aqueducts',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': 'false',
425: 1:      'question': 'Bilabial',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': 'false',
425: 1:      'question': 'Caramelized',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': 'true',
425: 1:      'question': 'Conjugated',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': 'false',
425: 1:      'question': 'Denouement',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': 'false',
425: 1:      'question': 'Disinfectant',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': 'false',
425: 1:      'question': 'Embezzler',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': 'false',
425: 1:      'question': 'Enzymology',
425: 1:      'valid': true
425: 1:    }
425: 1:  ],
425: 1:  'info': [
425: 1:    '✅f(Dermatoglyphics) = true',
425: 1:    '✅f(cappa) = false',
425: 1:    '✅f(moOn) = false',
425: 1:    '✅f() = true',
425: 1:    '✅f(Ambidextrously) = true',
425: 1:    '✅f(Aqueducts) = false',
425: 1:    '✅f(Bilabial) = false',
425: 1:    '✅f(Caramelized) = false',
425: 1:    '✅f(Conjugated) = true',
425: 1:    '✅f(Denouement) = false',
425: 1:    '✅f(Disinfectant) = false',
425: 1:    '✅f(Embezzler) = false',
425: 1:    '✅f(Enzymology) = false',
425: 1:    '❌f(Fluoride) = ??? != true'
425: 1:  ],
425: 1:  'level': 15,
425: 1:  'nextQuestion': 'Fluoride',
425: 1:  'questions': [
425: 1:    'Dermatoglyphics',
425: 1:    'cappa',
425: 1:    'moOn',
425: 1:    '',
425: 1:    'Ambidextrously',
425: 1:    'Aqueducts',
425: 1:    'Bilabial',
425: 1:    'Caramelized',
425: 1:    'Conjugated',
425: 1:    'Denouement',
425: 1:    'Disinfectant',
425: 1:    'Embezzler',
425: 1:    'Enzymology',
425: 1:    'Fluoride'
425: 1:  ]
425: 1:}
425: 1:Scores: 23234
425: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true']')
425: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
426: 1:BoardData {
426: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
426: 1:  'expectedAnswer': 'false',
426: 1:  'history': [
426: 1:    {
426: 1:      'answer': 'true',
426: 1:      'question': 'Dermatoglyphics',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': 'false',
426: 1:      'question': 'cappa',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': 'false',
426: 1:      'question': 'moOn',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': 'true',
426: 1:      'question': '',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': 'true',
426: 1:      'question': 'Ambidextrously',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': 'false',
426: 1:      'question': 'Aqueducts',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': 'false',
426: 1:      'question': 'Bilabial',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': 'false',
426: 1:      'question': 'Caramelized',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': 'true',
426: 1:      'question': 'Conjugated',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': 'false',
426: 1:      'question': 'Denouement',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': 'false',
426: 1:      'question': 'Disinfectant',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': 'false',
426: 1:      'question': 'Embezzler',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': 'false',
426: 1:      'question': 'Enzymology',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': 'true',
426: 1:      'question': 'Fluoride',
426: 1:      'valid': true
426: 1:    }
426: 1:  ],
426: 1:  'info': [
426: 1:    '✅f(Dermatoglyphics) = true',
426: 1:    '✅f(cappa) = false',
426: 1:    '✅f(moOn) = false',
426: 1:    '✅f() = true',
426: 1:    '✅f(Ambidextrously) = true',
426: 1:    '✅f(Aqueducts) = false',
426: 1:    '✅f(Bilabial) = false',
426: 1:    '✅f(Caramelized) = false',
426: 1:    '✅f(Conjugated) = true',
426: 1:    '✅f(Denouement) = false',
426: 1:    '✅f(Disinfectant) = false',
426: 1:    '✅f(Embezzler) = false',
426: 1:    '✅f(Enzymology) = false',
426: 1:    '✅f(Fluoride) = true',
426: 1:    '❌f(Glycogen) = ??? != false'
426: 1:  ],
426: 1:  'level': 15,
426: 1:  'nextQuestion': 'Glycogen',
426: 1:  'questions': [
426: 1:    'Dermatoglyphics',
426: 1:    'cappa',
426: 1:    'moOn',
426: 1:    '',
426: 1:    'Ambidextrously',
426: 1:    'Aqueducts',
426: 1:    'Bilabial',
426: 1:    'Caramelized',
426: 1:    'Conjugated',
426: 1:    'Denouement',
426: 1:    'Disinfectant',
426: 1:    'Embezzler',
426: 1:    'Enzymology',
426: 1:    'Fluoride',
426: 1:    'Glycogen'
426: 1:  ]
426: 1:}
426: 1:Scores: 23239
426: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false']')
426: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
427: 1:BoardData {
427: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
427: 1:  'expectedAnswer': 'false',
427: 1:  'history': [
427: 1:    {
427: 1:      'answer': 'true',
427: 1:      'question': 'Dermatoglyphics',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': 'false',
427: 1:      'question': 'cappa',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': 'false',
427: 1:      'question': 'moOn',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': 'true',
427: 1:      'question': '',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': 'true',
427: 1:      'question': 'Ambidextrously',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': 'false',
427: 1:      'question': 'Aqueducts',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': 'false',
427: 1:      'question': 'Bilabial',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': 'false',
427: 1:      'question': 'Caramelized',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': 'true',
427: 1:      'question': 'Conjugated',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': 'false',
427: 1:      'question': 'Denouement',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': 'false',
427: 1:      'question': 'Disinfectant',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': 'false',
427: 1:      'question': 'Embezzler',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': 'false',
427: 1:      'question': 'Enzymology',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': 'true',
427: 1:      'question': 'Fluoride',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': 'false',
427: 1:      'question': 'Glycogen',
427: 1:      'valid': true
427: 1:    }
427: 1:  ],
427: 1:  'info': [
427: 1:    '✅f(Dermatoglyphics) = true',
427: 1:    '✅f(cappa) = false',
427: 1:    '✅f(moOn) = false',
427: 1:    '✅f() = true',
427: 1:    '✅f(Ambidextrously) = true',
427: 1:    '✅f(Aqueducts) = false',
427: 1:    '✅f(Bilabial) = false',
427: 1:    '✅f(Caramelized) = false',
427: 1:    '✅f(Conjugated) = true',
427: 1:    '✅f(Denouement) = false',
427: 1:    '✅f(Disinfectant) = false',
427: 1:    '✅f(Embezzler) = false',
427: 1:    '✅f(Enzymology) = false',
427: 1:    '✅f(Fluoride) = true',
427: 1:    '✅f(Glycogen) = false',
427: 1:    '❌f(Humidity) = ??? != false'
427: 1:  ],
427: 1:  'level': 15,
427: 1:  'nextQuestion': 'Humidity',
427: 1:  'questions': [
427: 1:    'Dermatoglyphics',
427: 1:    'cappa',
427: 1:    'moOn',
427: 1:    '',
427: 1:    'Ambidextrously',
427: 1:    'Aqueducts',
427: 1:    'Bilabial',
427: 1:    'Caramelized',
427: 1:    'Conjugated',
427: 1:    'Denouement',
427: 1:    'Disinfectant',
427: 1:    'Embezzler',
427: 1:    'Enzymology',
427: 1:    'Fluoride',
427: 1:    'Glycogen',
427: 1:    'Humidity'
427: 1:  ]
427: 1:}
427: 1:Scores: 23244
427: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false']')
427: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
428: 1:BoardData {
428: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
428: 1:  'expectedAnswer': 'true',
428: 1:  'history': [
428: 1:    {
428: 1:      'answer': 'true',
428: 1:      'question': 'Dermatoglyphics',
428: 1:      'valid': true
428: 1:    },
428: 1:    {
428: 1:      'answer': 'false',
428: 1:      'question': 'cappa',
428: 1:      'valid': true
428: 1:    },
428: 1:    {
428: 1:      'answer': 'false',
428: 1:      'question': 'moOn',
428: 1:      'valid': true
428: 1:    },
428: 1:    {
428: 1:      'answer': 'true',
428: 1:      'question': '',
428: 1:      'valid': true
428: 1:    },
428: 1:    {
428: 1:      'answer': 'true',
428: 1:      'question': 'Ambidextrously',
428: 1:      'valid': true
428: 1:    },
428: 1:    {
428: 1:      'answer': 'false',
428: 1:      'question': 'Aqueducts',
428: 1:      'valid': true
428: 1:    },
428: 1:    {
428: 1:      'answer': 'false',
428: 1:      'question': 'Bilabial',
428: 1:      'valid': true
428: 1:    },
428: 1:    {
428: 1:      'answer': 'false',
428: 1:      'question': 'Caramelized',
428: 1:      'valid': true
428: 1:    },
428: 1:    {
428: 1:      'answer': 'true',
428: 1:      'question': 'Conjugated',
428: 1:      'valid': true
428: 1:    },
428: 1:    {
428: 1:      'answer': 'false',
428: 1:      'question': 'Denouement',
428: 1:      'valid': true
428: 1:    },
428: 1:    {
428: 1:      'answer': 'false',
428: 1:      'question': 'Disinfectant',
428: 1:      'valid': true
428: 1:    },
428: 1:    {
428: 1:      'answer': 'false',
428: 1:      'question': 'Embezzler',
428: 1:      'valid': true
428: 1:    },
428: 1:    {
428: 1:      'answer': 'false',
428: 1:      'question': 'Enzymology',
428: 1:      'valid': true
428: 1:    },
428: 1:    {
428: 1:      'answer': 'true',
428: 1:      'question': 'Fluoride',
428: 1:      'valid': true
428: 1:    },
428: 1:    {
428: 1:      'answer': 'false',
428: 1:      'question': 'Glycogen',
428: 1:      'valid': true
428: 1:    },
428: 1:    {
428: 1:      'answer': 'false',
428: 1:      'question': 'Humidity',
428: 1:      'valid': true
428: 1:    }
428: 1:  ],
428: 1:  'info': [
428: 1:    '✅f(Dermatoglyphics) = true',
428: 1:    '✅f(cappa) = false',
428: 1:    '✅f(moOn) = false',
428: 1:    '✅f() = true',
428: 1:    '✅f(Ambidextrously) = true',
428: 1:    '✅f(Aqueducts) = false',
428: 1:    '✅f(Bilabial) = false',
428: 1:    '✅f(Caramelized) = false',
428: 1:    '✅f(Conjugated) = true',
428: 1:    '✅f(Denouement) = false',
428: 1:    '✅f(Disinfectant) = false',
428: 1:    '✅f(Embezzler) = false',
428: 1:    '✅f(Enzymology) = false',
428: 1:    '✅f(Fluoride) = true',
428: 1:    '✅f(Glycogen) = false',
428: 1:    '✅f(Humidity) = false',
428: 1:    '❌f(Juxtapose) = ??? != true'
428: 1:  ],
428: 1:  'level': 15,
428: 1:  'nextQuestion': 'Juxtapose',
428: 1:  'questions': [
428: 1:    'Dermatoglyphics',
428: 1:    'cappa',
428: 1:    'moOn',
428: 1:    '',
428: 1:    'Ambidextrously',
428: 1:    'Aqueducts',
428: 1:    'Bilabial',
428: 1:    'Caramelized',
428: 1:    'Conjugated',
428: 1:    'Denouement',
428: 1:    'Disinfectant',
428: 1:    'Embezzler',
428: 1:    'Enzymology',
428: 1:    'Fluoride',
428: 1:    'Glycogen',
428: 1:    'Humidity',
428: 1:    'Juxtapose'
428: 1:  ]
428: 1:}
428: 1:Scores: 23249
428: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true']')
428: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
429: 1:BoardData {
429: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
429: 1:  'expectedAnswer': 'true',
429: 1:  'history': [
429: 1:    {
429: 1:      'answer': 'true',
429: 1:      'question': 'Dermatoglyphics',
429: 1:      'valid': true
429: 1:    },
429: 1:    {
429: 1:      'answer': 'false',
429: 1:      'question': 'cappa',
429: 1:      'valid': true
429: 1:    },
429: 1:    {
429: 1:      'answer': 'false',
429: 1:      'question': 'moOn',
429: 1:      'valid': true
429: 1:    },
429: 1:    {
429: 1:      'answer': 'true',
429: 1:      'question': '',
429: 1:      'valid': true
429: 1:    },
429: 1:    {
429: 1:      'answer': 'true',
429: 1:      'question': 'Ambidextrously',
429: 1:      'valid': true
429: 1:    },
429: 1:    {
429: 1:      'answer': 'false',
429: 1:      'question': 'Aqueducts',
429: 1:      'valid': true
429: 1:    },
429: 1:    {
429: 1:      'answer': 'false',
429: 1:      'question': 'Bilabial',
429: 1:      'valid': true
429: 1:    },
429: 1:    {
429: 1:      'answer': 'false',
429: 1:      'question': 'Caramelized',
429: 1:      'valid': true
429: 1:    },
429: 1:    {
429: 1:      'answer': 'true',
429: 1:      'question': 'Conjugated',
429: 1:      'valid': true
429: 1:    },
429: 1:    {
429: 1:      'answer': 'false',
429: 1:      'question': 'Denouement',
429: 1:      'valid': true
429: 1:    },
429: 1:    {
429: 1:      'answer': 'false',
429: 1:      'question': 'Disinfectant',
429: 1:      'valid': true
429: 1:    },
429: 1:    {
429: 1:      'answer': 'false',
429: 1:      'question': 'Embezzler',
429: 1:      'valid': true
429: 1:    },
429: 1:    {
429: 1:      'answer': 'false',
429: 1:      'question': 'Enzymology',
429: 1:      'valid': true
429: 1:    },
429: 1:    {
429: 1:      'answer': 'true',
429: 1:      'question': 'Fluoride',
429: 1:      'valid': true
429: 1:    },
429: 1:    {
429: 1:      'answer': 'false',
429: 1:      'question': 'Glycogen',
429: 1:      'valid': true
429: 1:    },
429: 1:    {
429: 1:      'answer': 'false',
429: 1:      'question': 'Humidity',
429: 1:      'valid': true
429: 1:    },
429: 1:    {
429: 1:      'answer': 'true',
429: 1:      'question': 'Juxtapose',
429: 1:      'valid': true
429: 1:    }
429: 1:  ],
429: 1:  'info': [
429: 1:    '✅f(Dermatoglyphics) = true',
429: 1:    '✅f(cappa) = false',
429: 1:    '✅f(moOn) = false',
429: 1:    '✅f() = true',
429: 1:    '✅f(Ambidextrously) = true',
429: 1:    '✅f(Aqueducts) = false',
429: 1:    '✅f(Bilabial) = false',
429: 1:    '✅f(Caramelized) = false',
429: 1:    '✅f(Conjugated) = true',
429: 1:    '✅f(Denouement) = false',
429: 1:    '✅f(Disinfectant) = false',
429: 1:    '✅f(Embezzler) = false',
429: 1:    '✅f(Enzymology) = false',
429: 1:    '✅f(Fluoride) = true',
429: 1:    '✅f(Glycogen) = false',
429: 1:    '✅f(Humidity) = false',
429: 1:    '✅f(Juxtapose) = true',
429: 1:    '❌f(Kilobytes) = ??? != true'
429: 1:  ],
429: 1:  'level': 15,
429: 1:  'nextQuestion': 'Kilobytes',
429: 1:  'questions': [
429: 1:    'Dermatoglyphics',
429: 1:    'cappa',
429: 1:    'moOn',
429: 1:    '',
429: 1:    'Ambidextrously',
429: 1:    'Aqueducts',
429: 1:    'Bilabial',
429: 1:    'Caramelized',
429: 1:    'Conjugated',
429: 1:    'Denouement',
429: 1:    'Disinfectant',
429: 1:    'Embezzler',
429: 1:    'Enzymology',
429: 1:    'Fluoride',
429: 1:    'Glycogen',
429: 1:    'Humidity',
429: 1:    'Juxtapose',
429: 1:    'Kilobytes'
429: 1:  ]
429: 1:}
429: 1:Scores: 23254
429: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true']')
429: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
430: 1:BoardData {
430: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
430: 1:  'expectedAnswer': 'false',
430: 1:  'history': [
430: 1:    {
430: 1:      'answer': 'true',
430: 1:      'question': 'Dermatoglyphics',
430: 1:      'valid': true
430: 1:    },
430: 1:    {
430: 1:      'answer': 'false',
430: 1:      'question': 'cappa',
430: 1:      'valid': true
430: 1:    },
430: 1:    {
430: 1:      'answer': 'false',
430: 1:      'question': 'moOn',
430: 1:      'valid': true
430: 1:    },
430: 1:    {
430: 1:      'answer': 'true',
430: 1:      'question': '',
430: 1:      'valid': true
430: 1:    },
430: 1:    {
430: 1:      'answer': 'true',
430: 1:      'question': 'Ambidextrously',
430: 1:      'valid': true
430: 1:    },
430: 1:    {
430: 1:      'answer': 'false',
430: 1:      'question': 'Aqueducts',
430: 1:      'valid': true
430: 1:    },
430: 1:    {
430: 1:      'answer': 'false',
430: 1:      'question': 'Bilabial',
430: 1:      'valid': true
430: 1:    },
430: 1:    {
430: 1:      'answer': 'false',
430: 1:      'question': 'Caramelized',
430: 1:      'valid': true
430: 1:    },
430: 1:    {
430: 1:      'answer': 'true',
430: 1:      'question': 'Conjugated',
430: 1:      'valid': true
430: 1:    },
430: 1:    {
430: 1:      'answer': 'false',
430: 1:      'question': 'Denouement',
430: 1:      'valid': true
430: 1:    },
430: 1:    {
430: 1:      'answer': 'false',
430: 1:      'question': 'Disinfectant',
430: 1:      'valid': true
430: 1:    },
430: 1:    {
430: 1:      'answer': 'false',
430: 1:      'question': 'Embezzler',
430: 1:      'valid': true
430: 1:    },
430: 1:    {
430: 1:      'answer': 'false',
430: 1:      'question': 'Enzymology',
430: 1:      'valid': true
430: 1:    },
430: 1:    {
430: 1:      'answer': 'true',
430: 1:      'question': 'Fluoride',
430: 1:      'valid': true
430: 1:    },
430: 1:    {
430: 1:      'answer': 'false',
430: 1:      'question': 'Glycogen',
430: 1:      'valid': true
430: 1:    },
430: 1:    {
430: 1:      'answer': 'false',
430: 1:      'question': 'Humidity',
430: 1:      'valid': true
430: 1:    },
430: 1:    {
430: 1:      'answer': 'true',
430: 1:      'question': 'Juxtapose',
430: 1:      'valid': true
430: 1:    },
430: 1:    {
430: 1:      'answer': 'true',
430: 1:      'question': 'Kilobytes',
430: 1:      'valid': true
430: 1:    }
430: 1:  ],
430: 1:  'info': [
430: 1:    '✅f(Dermatoglyphics) = true',
430: 1:    '✅f(cappa) = false',
430: 1:    '✅f(moOn) = false',
430: 1:    '✅f() = true',
430: 1:    '✅f(Ambidextrously) = true',
430: 1:    '✅f(Aqueducts) = false',
430: 1:    '✅f(Bilabial) = false',
430: 1:    '✅f(Caramelized) = false',
430: 1:    '✅f(Conjugated) = true',
430: 1:    '✅f(Denouement) = false',
430: 1:    '✅f(Disinfectant) = false',
430: 1:    '✅f(Embezzler) = false',
430: 1:    '✅f(Enzymology) = false',
430: 1:    '✅f(Fluoride) = true',
430: 1:    '✅f(Glycogen) = false',
430: 1:    '✅f(Humidity) = false',
430: 1:    '✅f(Juxtapose) = true',
430: 1:    '✅f(Kilobytes) = true',
430: 1:    '❌f(Locomotive) = ??? != false'
430: 1:  ],
430: 1:  'level': 15,
430: 1:  'nextQuestion': 'Locomotive',
430: 1:  'questions': [
430: 1:    'Dermatoglyphics',
430: 1:    'cappa',
430: 1:    'moOn',
430: 1:    '',
430: 1:    'Ambidextrously',
430: 1:    'Aqueducts',
430: 1:    'Bilabial',
430: 1:    'Caramelized',
430: 1:    'Conjugated',
430: 1:    'Denouement',
430: 1:    'Disinfectant',
430: 1:    'Embezzler',
430: 1:    'Enzymology',
430: 1:    'Fluoride',
430: 1:    'Glycogen',
430: 1:    'Humidity',
430: 1:    'Juxtapose',
430: 1:    'Kilobytes',
430: 1:    'Locomotive'
430: 1:  ]
430: 1:}
430: 1:Scores: 23259
430: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false']')
430: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
431: 1:BoardData {
431: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
431: 1:  'expectedAnswer': 'false',
431: 1:  'history': [
431: 1:    {
431: 1:      'answer': 'true',
431: 1:      'question': 'Dermatoglyphics',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': 'false',
431: 1:      'question': 'cappa',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': 'false',
431: 1:      'question': 'moOn',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': 'true',
431: 1:      'question': '',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': 'true',
431: 1:      'question': 'Ambidextrously',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': 'false',
431: 1:      'question': 'Aqueducts',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': 'false',
431: 1:      'question': 'Bilabial',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': 'false',
431: 1:      'question': 'Caramelized',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': 'true',
431: 1:      'question': 'Conjugated',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': 'false',
431: 1:      'question': 'Denouement',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': 'false',
431: 1:      'question': 'Disinfectant',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': 'false',
431: 1:      'question': 'Embezzler',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': 'false',
431: 1:      'question': 'Enzymology',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': 'true',
431: 1:      'question': 'Fluoride',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': 'false',
431: 1:      'question': 'Glycogen',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': 'false',
431: 1:      'question': 'Humidity',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': 'true',
431: 1:      'question': 'Juxtapose',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': 'true',
431: 1:      'question': 'Kilobytes',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': 'false',
431: 1:      'question': 'Locomotive',
431: 1:      'valid': true
431: 1:    }
431: 1:  ],
431: 1:  'info': [
431: 1:    '✅f(Dermatoglyphics) = true',
431: 1:    '✅f(cappa) = false',
431: 1:    '✅f(moOn) = false',
431: 1:    '✅f() = true',
431: 1:    '✅f(Ambidextrously) = true',
431: 1:    '✅f(Aqueducts) = false',
431: 1:    '✅f(Bilabial) = false',
431: 1:    '✅f(Caramelized) = false',
431: 1:    '✅f(Conjugated) = true',
431: 1:    '✅f(Denouement) = false',
431: 1:    '✅f(Disinfectant) = false',
431: 1:    '✅f(Embezzler) = false',
431: 1:    '✅f(Enzymology) = false',
431: 1:    '✅f(Fluoride) = true',
431: 1:    '✅f(Glycogen) = false',
431: 1:    '✅f(Humidity) = false',
431: 1:    '✅f(Juxtapose) = true',
431: 1:    '✅f(Kilobytes) = true',
431: 1:    '✅f(Locomotive) = false',
431: 1:    '❌f(Monolithic) = ??? != false'
431: 1:  ],
431: 1:  'level': 15,
431: 1:  'nextQuestion': 'Monolithic',
431: 1:  'questions': [
431: 1:    'Dermatoglyphics',
431: 1:    'cappa',
431: 1:    'moOn',
431: 1:    '',
431: 1:    'Ambidextrously',
431: 1:    'Aqueducts',
431: 1:    'Bilabial',
431: 1:    'Caramelized',
431: 1:    'Conjugated',
431: 1:    'Denouement',
431: 1:    'Disinfectant',
431: 1:    'Embezzler',
431: 1:    'Enzymology',
431: 1:    'Fluoride',
431: 1:    'Glycogen',
431: 1:    'Humidity',
431: 1:    'Juxtapose',
431: 1:    'Kilobytes',
431: 1:    'Locomotive',
431: 1:    'Monolithic'
431: 1:  ]
431: 1:}
431: 1:Scores: 23264
431: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false']')
431: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
432: 1:BoardData {
432: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
432: 1:  'expectedAnswer': 'false',
432: 1:  'history': [
432: 1:    {
432: 1:      'answer': 'true',
432: 1:      'question': 'Dermatoglyphics',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': 'false',
432: 1:      'question': 'cappa',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': 'false',
432: 1:      'question': 'moOn',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': 'true',
432: 1:      'question': '',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': 'true',
432: 1:      'question': 'Ambidextrously',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': 'false',
432: 1:      'question': 'Aqueducts',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': 'false',
432: 1:      'question': 'Bilabial',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': 'false',
432: 1:      'question': 'Caramelized',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': 'true',
432: 1:      'question': 'Conjugated',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': 'false',
432: 1:      'question': 'Denouement',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': 'false',
432: 1:      'question': 'Disinfectant',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': 'false',
432: 1:      'question': 'Embezzler',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': 'false',
432: 1:      'question': 'Enzymology',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': 'true',
432: 1:      'question': 'Fluoride',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': 'false',
432: 1:      'question': 'Glycogen',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': 'false',
432: 1:      'question': 'Humidity',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': 'true',
432: 1:      'question': 'Juxtapose',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': 'true',
432: 1:      'question': 'Kilobytes',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': 'false',
432: 1:      'question': 'Locomotive',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': 'false',
432: 1:      'question': 'Monolithic',
432: 1:      'valid': true
432: 1:    }
432: 1:  ],
432: 1:  'info': [
432: 1:    '✅f(Dermatoglyphics) = true',
432: 1:    '✅f(cappa) = false',
432: 1:    '✅f(moOn) = false',
432: 1:    '✅f() = true',
432: 1:    '✅f(Ambidextrously) = true',
432: 1:    '✅f(Aqueducts) = false',
432: 1:    '✅f(Bilabial) = false',
432: 1:    '✅f(Caramelized) = false',
432: 1:    '✅f(Conjugated) = true',
432: 1:    '✅f(Denouement) = false',
432: 1:    '✅f(Disinfectant) = false',
432: 1:    '✅f(Embezzler) = false',
432: 1:    '✅f(Enzymology) = false',
432: 1:    '✅f(Fluoride) = true',
432: 1:    '✅f(Glycogen) = false',
432: 1:    '✅f(Humidity) = false',
432: 1:    '✅f(Juxtapose) = true',
432: 1:    '✅f(Kilobytes) = true',
432: 1:    '✅f(Locomotive) = false',
432: 1:    '✅f(Monolithic) = false',
432: 1:    '❌f(Nauseously) = ??? != false'
432: 1:  ],
432: 1:  'level': 15,
432: 1:  'nextQuestion': 'Nauseously',
432: 1:  'questions': [
432: 1:    'Dermatoglyphics',
432: 1:    'cappa',
432: 1:    'moOn',
432: 1:    '',
432: 1:    'Ambidextrously',
432: 1:    'Aqueducts',
432: 1:    'Bilabial',
432: 1:    'Caramelized',
432: 1:    'Conjugated',
432: 1:    'Denouement',
432: 1:    'Disinfectant',
432: 1:    'Embezzler',
432: 1:    'Enzymology',
432: 1:    'Fluoride',
432: 1:    'Glycogen',
432: 1:    'Humidity',
432: 1:    'Juxtapose',
432: 1:    'Kilobytes',
432: 1:    'Locomotive',
432: 1:    'Monolithic',
432: 1:    'Nauseously'
432: 1:  ]
432: 1:}
432: 1:Scores: 23269
432: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'false']')
432: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
433: 1:BoardData {
433: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
433: 1:  'expectedAnswer': 'false',
433: 1:  'history': [
433: 1:    {
433: 1:      'answer': 'true',
433: 1:      'question': 'Dermatoglyphics',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': 'false',
433: 1:      'question': 'cappa',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': 'false',
433: 1:      'question': 'moOn',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': 'true',
433: 1:      'question': '',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': 'true',
433: 1:      'question': 'Ambidextrously',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': 'false',
433: 1:      'question': 'Aqueducts',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': 'false',
433: 1:      'question': 'Bilabial',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': 'false',
433: 1:      'question': 'Caramelized',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': 'true',
433: 1:      'question': 'Conjugated',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': 'false',
433: 1:      'question': 'Denouement',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': 'false',
433: 1:      'question': 'Disinfectant',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': 'false',
433: 1:      'question': 'Embezzler',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': 'false',
433: 1:      'question': 'Enzymology',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': 'true',
433: 1:      'question': 'Fluoride',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': 'false',
433: 1:      'question': 'Glycogen',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': 'false',
433: 1:      'question': 'Humidity',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': 'true',
433: 1:      'question': 'Juxtapose',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': 'true',
433: 1:      'question': 'Kilobytes',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': 'false',
433: 1:      'question': 'Locomotive',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': 'false',
433: 1:      'question': 'Monolithic',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': 'false',
433: 1:      'question': 'Nauseously',
433: 1:      'valid': true
433: 1:    }
433: 1:  ],
433: 1:  'info': [
433: 1:    '✅f(Dermatoglyphics) = true',
433: 1:    '✅f(cappa) = false',
433: 1:    '✅f(moOn) = false',
433: 1:    '✅f() = true',
433: 1:    '✅f(Ambidextrously) = true',
433: 1:    '✅f(Aqueducts) = false',
433: 1:    '✅f(Bilabial) = false',
433: 1:    '✅f(Caramelized) = false',
433: 1:    '✅f(Conjugated) = true',
433: 1:    '✅f(Denouement) = false',
433: 1:    '✅f(Disinfectant) = false',
433: 1:    '✅f(Embezzler) = false',
433: 1:    '✅f(Enzymology) = false',
433: 1:    '✅f(Fluoride) = true',
433: 1:    '✅f(Glycogen) = false',
433: 1:    '✅f(Humidity) = false',
433: 1:    '✅f(Juxtapose) = true',
433: 1:    '✅f(Kilobytes) = true',
433: 1:    '✅f(Locomotive) = false',
433: 1:    '✅f(Monolithic) = false',
433: 1:    '✅f(Nauseously) = false',
433: 1:    '❌f(Oblongata) = ??? != false'
433: 1:  ],
433: 1:  'level': 15,
433: 1:  'nextQuestion': 'Oblongata',
433: 1:  'questions': [
433: 1:    'Dermatoglyphics',
433: 1:    'cappa',
433: 1:    'moOn',
433: 1:    '',
433: 1:    'Ambidextrously',
433: 1:    'Aqueducts',
433: 1:    'Bilabial',
433: 1:    'Caramelized',
433: 1:    'Conjugated',
433: 1:    'Denouement',
433: 1:    'Disinfectant',
433: 1:    'Embezzler',
433: 1:    'Enzymology',
433: 1:    'Fluoride',
433: 1:    'Glycogen',
433: 1:    'Humidity',
433: 1:    'Juxtapose',
433: 1:    'Kilobytes',
433: 1:    'Locomotive',
433: 1:    'Monolithic',
433: 1:    'Nauseously',
433: 1:    'Oblongata'
433: 1:  ]
433: 1:}
433: 1:Scores: 23274
433: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'false']')
433: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
434: 1:BoardData {
434: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
434: 1:  'expectedAnswer': 'false',
434: 1:  'history': [
434: 1:    {
434: 1:      'answer': 'true',
434: 1:      'question': 'Dermatoglyphics',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': 'false',
434: 1:      'question': 'cappa',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': 'false',
434: 1:      'question': 'moOn',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': 'true',
434: 1:      'question': '',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': 'true',
434: 1:      'question': 'Ambidextrously',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': 'false',
434: 1:      'question': 'Aqueducts',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': 'false',
434: 1:      'question': 'Bilabial',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': 'false',
434: 1:      'question': 'Caramelized',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': 'true',
434: 1:      'question': 'Conjugated',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': 'false',
434: 1:      'question': 'Denouement',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': 'false',
434: 1:      'question': 'Disinfectant',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': 'false',
434: 1:      'question': 'Embezzler',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': 'false',
434: 1:      'question': 'Enzymology',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': 'true',
434: 1:      'question': 'Fluoride',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': 'false',
434: 1:      'question': 'Glycogen',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': 'false',
434: 1:      'question': 'Humidity',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': 'true',
434: 1:      'question': 'Juxtapose',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': 'true',
434: 1:      'question': 'Kilobytes',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': 'false',
434: 1:      'question': 'Locomotive',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': 'false',
434: 1:      'question': 'Monolithic',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': 'false',
434: 1:      'question': 'Nauseously',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': 'false',
434: 1:      'question': 'Oblongata',
434: 1:      'valid': true
434: 1:    }
434: 1:  ],
434: 1:  'info': [
434: 1:    '✅f(Dermatoglyphics) = true',
434: 1:    '✅f(cappa) = false',
434: 1:    '✅f(moOn) = false',
434: 1:    '✅f() = true',
434: 1:    '✅f(Ambidextrously) = true',
434: 1:    '✅f(Aqueducts) = false',
434: 1:    '✅f(Bilabial) = false',
434: 1:    '✅f(Caramelized) = false',
434: 1:    '✅f(Conjugated) = true',
434: 1:    '✅f(Denouement) = false',
434: 1:    '✅f(Disinfectant) = false',
434: 1:    '✅f(Embezzler) = false',
434: 1:    '✅f(Enzymology) = false',
434: 1:    '✅f(Fluoride) = true',
434: 1:    '✅f(Glycogen) = false',
434: 1:    '✅f(Humidity) = false',
434: 1:    '✅f(Juxtapose) = true',
434: 1:    '✅f(Kilobytes) = true',
434: 1:    '✅f(Locomotive) = false',
434: 1:    '✅f(Monolithic) = false',
434: 1:    '✅f(Nauseously) = false',
434: 1:    '✅f(Oblongata) = false',
434: 1:    '❌f(Permeable) = ??? != false'
434: 1:  ],
434: 1:  'level': 15,
434: 1:  'nextQuestion': 'Permeable',
434: 1:  'questions': [
434: 1:    'Dermatoglyphics',
434: 1:    'cappa',
434: 1:    'moOn',
434: 1:    '',
434: 1:    'Ambidextrously',
434: 1:    'Aqueducts',
434: 1:    'Bilabial',
434: 1:    'Caramelized',
434: 1:    'Conjugated',
434: 1:    'Denouement',
434: 1:    'Disinfectant',
434: 1:    'Embezzler',
434: 1:    'Enzymology',
434: 1:    'Fluoride',
434: 1:    'Glycogen',
434: 1:    'Humidity',
434: 1:    'Juxtapose',
434: 1:    'Kilobytes',
434: 1:    'Locomotive',
434: 1:    'Monolithic',
434: 1:    'Nauseously',
434: 1:    'Oblongata',
434: 1:    'Permeable'
434: 1:  ]
434: 1:}
434: 1:Scores: 23279
434: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'false', 'false']')
434: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
435: 1:BoardData {
435: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
435: 1:  'expectedAnswer': 'false',
435: 1:  'history': [
435: 1:    {
435: 1:      'answer': 'true',
435: 1:      'question': 'Dermatoglyphics',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': 'false',
435: 1:      'question': 'cappa',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': 'false',
435: 1:      'question': 'moOn',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': 'true',
435: 1:      'question': '',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': 'true',
435: 1:      'question': 'Ambidextrously',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': 'false',
435: 1:      'question': 'Aqueducts',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': 'false',
435: 1:      'question': 'Bilabial',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': 'false',
435: 1:      'question': 'Caramelized',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': 'true',
435: 1:      'question': 'Conjugated',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': 'false',
435: 1:      'question': 'Denouement',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': 'false',
435: 1:      'question': 'Disinfectant',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': 'false',
435: 1:      'question': 'Embezzler',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': 'false',
435: 1:      'question': 'Enzymology',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': 'true',
435: 1:      'question': 'Fluoride',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': 'false',
435: 1:      'question': 'Glycogen',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': 'false',
435: 1:      'question': 'Humidity',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': 'true',
435: 1:      'question': 'Juxtapose',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': 'true',
435: 1:      'question': 'Kilobytes',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': 'false',
435: 1:      'question': 'Locomotive',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': 'false',
435: 1:      'question': 'Monolithic',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': 'false',
435: 1:      'question': 'Nauseously',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': 'false',
435: 1:      'question': 'Oblongata',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': 'false',
435: 1:      'question': 'Permeable',
435: 1:      'valid': true
435: 1:    }
435: 1:  ],
435: 1:  'info': [
435: 1:    '✅f(Dermatoglyphics) = true',
435: 1:    '✅f(cappa) = false',
435: 1:    '✅f(moOn) = false',
435: 1:    '✅f() = true',
435: 1:    '✅f(Ambidextrously) = true',
435: 1:    '✅f(Aqueducts) = false',
435: 1:    '✅f(Bilabial) = false',
435: 1:    '✅f(Caramelized) = false',
435: 1:    '✅f(Conjugated) = true',
435: 1:    '✅f(Denouement) = false',
435: 1:    '✅f(Disinfectant) = false',
435: 1:    '✅f(Embezzler) = false',
435: 1:    '✅f(Enzymology) = false',
435: 1:    '✅f(Fluoride) = true',
435: 1:    '✅f(Glycogen) = false',
435: 1:    '✅f(Humidity) = false',
435: 1:    '✅f(Juxtapose) = true',
435: 1:    '✅f(Kilobytes) = true',
435: 1:    '✅f(Locomotive) = false',
435: 1:    '✅f(Monolithic) = false',
435: 1:    '✅f(Nauseously) = false',
435: 1:    '✅f(Oblongata) = false',
435: 1:    '✅f(Permeable) = false',
435: 1:    '❌f(Quizzical) = ??? != false'
435: 1:  ],
435: 1:  'level': 15,
435: 1:  'nextQuestion': 'Quizzical',
435: 1:  'questions': [
435: 1:    'Dermatoglyphics',
435: 1:    'cappa',
435: 1:    'moOn',
435: 1:    '',
435: 1:    'Ambidextrously',
435: 1:    'Aqueducts',
435: 1:    'Bilabial',
435: 1:    'Caramelized',
435: 1:    'Conjugated',
435: 1:    'Denouement',
435: 1:    'Disinfectant',
435: 1:    'Embezzler',
435: 1:    'Enzymology',
435: 1:    'Fluoride',
435: 1:    'Glycogen',
435: 1:    'Humidity',
435: 1:    'Juxtapose',
435: 1:    'Kilobytes',
435: 1:    'Locomotive',
435: 1:    'Monolithic',
435: 1:    'Nauseously',
435: 1:    'Oblongata',
435: 1:    'Permeable',
435: 1:    'Quizzical'
435: 1:  ]
435: 1:}
435: 1:Scores: 23284
435: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'false', 'false', 'false']')
435: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
436: 1:BoardData {
436: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
436: 1:  'expectedAnswer': 'false',
436: 1:  'history': [
436: 1:    {
436: 1:      'answer': 'true',
436: 1:      'question': 'Dermatoglyphics',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': 'false',
436: 1:      'question': 'cappa',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': 'false',
436: 1:      'question': 'moOn',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': 'true',
436: 1:      'question': '',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': 'true',
436: 1:      'question': 'Ambidextrously',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': 'false',
436: 1:      'question': 'Aqueducts',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': 'false',
436: 1:      'question': 'Bilabial',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': 'false',
436: 1:      'question': 'Caramelized',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': 'true',
436: 1:      'question': 'Conjugated',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': 'false',
436: 1:      'question': 'Denouement',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': 'false',
436: 1:      'question': 'Disinfectant',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': 'false',
436: 1:      'question': 'Embezzler',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': 'false',
436: 1:      'question': 'Enzymology',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': 'true',
436: 1:      'question': 'Fluoride',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': 'false',
436: 1:      'question': 'Glycogen',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': 'false',
436: 1:      'question': 'Humidity',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': 'true',
436: 1:      'question': 'Juxtapose',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': 'true',
436: 1:      'question': 'Kilobytes',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': 'false',
436: 1:      'question': 'Locomotive',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': 'false',
436: 1:      'question': 'Monolithic',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': 'false',
436: 1:      'question': 'Nauseously',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': 'false',
436: 1:      'question': 'Oblongata',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': 'false',
436: 1:      'question': 'Permeable',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': 'false',
436: 1:      'question': 'Quizzical',
436: 1:      'valid': true
436: 1:    }
436: 1:  ],
436: 1:  'info': [
436: 1:    '✅f(Dermatoglyphics) = true',
436: 1:    '✅f(cappa) = false',
436: 1:    '✅f(moOn) = false',
436: 1:    '✅f() = true',
436: 1:    '✅f(Ambidextrously) = true',
436: 1:    '✅f(Aqueducts) = false',
436: 1:    '✅f(Bilabial) = false',
436: 1:    '✅f(Caramelized) = false',
436: 1:    '✅f(Conjugated) = true',
436: 1:    '✅f(Denouement) = false',
436: 1:    '✅f(Disinfectant) = false',
436: 1:    '✅f(Embezzler) = false',
436: 1:    '✅f(Enzymology) = false',
436: 1:    '✅f(Fluoride) = true',
436: 1:    '✅f(Glycogen) = false',
436: 1:    '✅f(Humidity) = false',
436: 1:    '✅f(Juxtapose) = true',
436: 1:    '✅f(Kilobytes) = true',
436: 1:    '✅f(Locomotive) = false',
436: 1:    '✅f(Monolithic) = false',
436: 1:    '✅f(Nauseously) = false',
436: 1:    '✅f(Oblongata) = false',
436: 1:    '✅f(Permeable) = false',
436: 1:    '✅f(Quizzical) = false',
436: 1:    '❌f(Rhinoceros) = ??? != false'
436: 1:  ],
436: 1:  'level': 15,
436: 1:  'nextQuestion': 'Rhinoceros',
436: 1:  'questions': [
436: 1:    'Dermatoglyphics',
436: 1:    'cappa',
436: 1:    'moOn',
436: 1:    '',
436: 1:    'Ambidextrously',
436: 1:    'Aqueducts',
436: 1:    'Bilabial',
436: 1:    'Caramelized',
436: 1:    'Conjugated',
436: 1:    'Denouement',
436: 1:    'Disinfectant',
436: 1:    'Embezzler',
436: 1:    'Enzymology',
436: 1:    'Fluoride',
436: 1:    'Glycogen',
436: 1:    'Humidity',
436: 1:    'Juxtapose',
436: 1:    'Kilobytes',
436: 1:    'Locomotive',
436: 1:    'Monolithic',
436: 1:    'Nauseously',
436: 1:    'Oblongata',
436: 1:    'Permeable',
436: 1:    'Quizzical',
436: 1:    'Rhinoceros'
436: 1:  ]
436: 1:}
436: 1:Scores: 23289
436: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false']')
436: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
437: 1:BoardData {
437: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
437: 1:  'expectedAnswer': 'false',
437: 1:  'history': [
437: 1:    {
437: 1:      'answer': 'true',
437: 1:      'question': 'Dermatoglyphics',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': 'false',
437: 1:      'question': 'cappa',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': 'false',
437: 1:      'question': 'moOn',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': 'true',
437: 1:      'question': '',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': 'true',
437: 1:      'question': 'Ambidextrously',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': 'false',
437: 1:      'question': 'Aqueducts',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': 'false',
437: 1:      'question': 'Bilabial',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': 'false',
437: 1:      'question': 'Caramelized',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': 'true',
437: 1:      'question': 'Conjugated',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': 'false',
437: 1:      'question': 'Denouement',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': 'false',
437: 1:      'question': 'Disinfectant',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': 'false',
437: 1:      'question': 'Embezzler',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': 'false',
437: 1:      'question': 'Enzymology',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': 'true',
437: 1:      'question': 'Fluoride',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': 'false',
437: 1:      'question': 'Glycogen',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': 'false',
437: 1:      'question': 'Humidity',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': 'true',
437: 1:      'question': 'Juxtapose',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': 'true',
437: 1:      'question': 'Kilobytes',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': 'false',
437: 1:      'question': 'Locomotive',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': 'false',
437: 1:      'question': 'Monolithic',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': 'false',
437: 1:      'question': 'Nauseously',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': 'false',
437: 1:      'question': 'Oblongata',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': 'false',
437: 1:      'question': 'Permeable',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': 'false',
437: 1:      'question': 'Quizzical',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': 'false',
437: 1:      'question': 'Rhinoceros',
437: 1:      'valid': true
437: 1:    }
437: 1:  ],
437: 1:  'info': [
437: 1:    '✅f(Dermatoglyphics) = true',
437: 1:    '✅f(cappa) = false',
437: 1:    '✅f(moOn) = false',
437: 1:    '✅f() = true',
437: 1:    '✅f(Ambidextrously) = true',
437: 1:    '✅f(Aqueducts) = false',
437: 1:    '✅f(Bilabial) = false',
437: 1:    '✅f(Caramelized) = false',
437: 1:    '✅f(Conjugated) = true',
437: 1:    '✅f(Denouement) = false',
437: 1:    '✅f(Disinfectant) = false',
437: 1:    '✅f(Embezzler) = false',
437: 1:    '✅f(Enzymology) = false',
437: 1:    '✅f(Fluoride) = true',
437: 1:    '✅f(Glycogen) = false',
437: 1:    '✅f(Humidity) = false',
437: 1:    '✅f(Juxtapose) = true',
437: 1:    '✅f(Kilobytes) = true',
437: 1:    '✅f(Locomotive) = false',
437: 1:    '✅f(Monolithic) = false',
437: 1:    '✅f(Nauseously) = false',
437: 1:    '✅f(Oblongata) = false',
437: 1:    '✅f(Permeable) = false',
437: 1:    '✅f(Quizzical) = false',
437: 1:    '✅f(Rhinoceros) = false',
437: 1:    '❌f(Sequences) = ??? != false'
437: 1:  ],
437: 1:  'level': 15,
437: 1:  'nextQuestion': 'Sequences',
437: 1:  'questions': [
437: 1:    'Dermatoglyphics',
437: 1:    'cappa',
437: 1:    'moOn',
437: 1:    '',
437: 1:    'Ambidextrously',
437: 1:    'Aqueducts',
437: 1:    'Bilabial',
437: 1:    'Caramelized',
437: 1:    'Conjugated',
437: 1:    'Denouement',
437: 1:    'Disinfectant',
437: 1:    'Embezzler',
437: 1:    'Enzymology',
437: 1:    'Fluoride',
437: 1:    'Glycogen',
437: 1:    'Humidity',
437: 1:    'Juxtapose',
437: 1:    'Kilobytes',
437: 1:    'Locomotive',
437: 1:    'Monolithic',
437: 1:    'Nauseously',
437: 1:    'Oblongata',
437: 1:    'Permeable',
437: 1:    'Quizzical',
437: 1:    'Rhinoceros',
437: 1:    'Sequences'
437: 1:  ]
437: 1:}
437: 1:Scores: 23294
437: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false']')
437: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
438: 1:BoardData {
438: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
438: 1:  'expectedAnswer': 'false',
438: 1:  'history': [
438: 1:    {
438: 1:      'answer': 'true',
438: 1:      'question': 'Dermatoglyphics',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': 'false',
438: 1:      'question': 'cappa',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': 'false',
438: 1:      'question': 'moOn',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': 'true',
438: 1:      'question': '',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': 'true',
438: 1:      'question': 'Ambidextrously',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': 'false',
438: 1:      'question': 'Aqueducts',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': 'false',
438: 1:      'question': 'Bilabial',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': 'false',
438: 1:      'question': 'Caramelized',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': 'true',
438: 1:      'question': 'Conjugated',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': 'false',
438: 1:      'question': 'Denouement',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': 'false',
438: 1:      'question': 'Disinfectant',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': 'false',
438: 1:      'question': 'Embezzler',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': 'false',
438: 1:      'question': 'Enzymology',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': 'true',
438: 1:      'question': 'Fluoride',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': 'false',
438: 1:      'question': 'Glycogen',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': 'false',
438: 1:      'question': 'Humidity',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': 'true',
438: 1:      'question': 'Juxtapose',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': 'true',
438: 1:      'question': 'Kilobytes',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': 'false',
438: 1:      'question': 'Locomotive',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': 'false',
438: 1:      'question': 'Monolithic',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': 'false',
438: 1:      'question': 'Nauseously',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': 'false',
438: 1:      'question': 'Oblongata',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': 'false',
438: 1:      'question': 'Permeable',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': 'false',
438: 1:      'question': 'Quizzical',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': 'false',
438: 1:      'question': 'Rhinoceros',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': 'false',
438: 1:      'question': 'Sequences',
438: 1:      'valid': true
438: 1:    }
438: 1:  ],
438: 1:  'info': [
438: 1:    '✅f(Dermatoglyphics) = true',
438: 1:    '✅f(cappa) = false',
438: 1:    '✅f(moOn) = false',
438: 1:    '✅f() = true',
438: 1:    '✅f(Ambidextrously) = true',
438: 1:    '✅f(Aqueducts) = false',
438: 1:    '✅f(Bilabial) = false',
438: 1:    '✅f(Caramelized) = false',
438: 1:    '✅f(Conjugated) = true',
438: 1:    '✅f(Denouement) = false',
438: 1:    '✅f(Disinfectant) = false',
438: 1:    '✅f(Embezzler) = false',
438: 1:    '✅f(Enzymology) = false',
438: 1:    '✅f(Fluoride) = true',
438: 1:    '✅f(Glycogen) = false',
438: 1:    '✅f(Humidity) = false',
438: 1:    '✅f(Juxtapose) = true',
438: 1:    '✅f(Kilobytes) = true',
438: 1:    '✅f(Locomotive) = false',
438: 1:    '✅f(Monolithic) = false',
438: 1:    '✅f(Nauseously) = false',
438: 1:    '✅f(Oblongata) = false',
438: 1:    '✅f(Permeable) = false',
438: 1:    '✅f(Quizzical) = false',
438: 1:    '✅f(Rhinoceros) = false',
438: 1:    '✅f(Sequences) = false',
438: 1:    '❌f(Symmetrical) = ??? != false'
438: 1:  ],
438: 1:  'level': 15,
438: 1:  'nextQuestion': 'Symmetrical',
438: 1:  'questions': [
438: 1:    'Dermatoglyphics',
438: 1:    'cappa',
438: 1:    'moOn',
438: 1:    '',
438: 1:    'Ambidextrously',
438: 1:    'Aqueducts',
438: 1:    'Bilabial',
438: 1:    'Caramelized',
438: 1:    'Conjugated',
438: 1:    'Denouement',
438: 1:    'Disinfectant',
438: 1:    'Embezzler',
438: 1:    'Enzymology',
438: 1:    'Fluoride',
438: 1:    'Glycogen',
438: 1:    'Humidity',
438: 1:    'Juxtapose',
438: 1:    'Kilobytes',
438: 1:    'Locomotive',
438: 1:    'Monolithic',
438: 1:    'Nauseously',
438: 1:    'Oblongata',
438: 1:    'Permeable',
438: 1:    'Quizzical',
438: 1:    'Rhinoceros',
438: 1:    'Sequences',
438: 1:    'Symmetrical'
438: 1:  ]
438: 1:}
438: 1:Scores: 23299
438: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false']')
438: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
439: 1:BoardData {
439: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
439: 1:  'expectedAnswer': 'false',
439: 1:  'history': [
439: 1:    {
439: 1:      'answer': 'true',
439: 1:      'question': 'Dermatoglyphics',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': 'false',
439: 1:      'question': 'cappa',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': 'false',
439: 1:      'question': 'moOn',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': 'true',
439: 1:      'question': '',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': 'true',
439: 1:      'question': 'Ambidextrously',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': 'false',
439: 1:      'question': 'Aqueducts',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': 'false',
439: 1:      'question': 'Bilabial',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': 'false',
439: 1:      'question': 'Caramelized',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': 'true',
439: 1:      'question': 'Conjugated',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': 'false',
439: 1:      'question': 'Denouement',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': 'false',
439: 1:      'question': 'Disinfectant',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': 'false',
439: 1:      'question': 'Embezzler',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': 'false',
439: 1:      'question': 'Enzymology',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': 'true',
439: 1:      'question': 'Fluoride',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': 'false',
439: 1:      'question': 'Glycogen',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': 'false',
439: 1:      'question': 'Humidity',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': 'true',
439: 1:      'question': 'Juxtapose',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': 'true',
439: 1:      'question': 'Kilobytes',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': 'false',
439: 1:      'question': 'Locomotive',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': 'false',
439: 1:      'question': 'Monolithic',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': 'false',
439: 1:      'question': 'Nauseously',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': 'false',
439: 1:      'question': 'Oblongata',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': 'false',
439: 1:      'question': 'Permeable',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': 'false',
439: 1:      'question': 'Quizzical',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': 'false',
439: 1:      'question': 'Rhinoceros',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': 'false',
439: 1:      'question': 'Sequences',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': 'false',
439: 1:      'question': 'Symmetrical',
439: 1:      'valid': true
439: 1:    }
439: 1:  ],
439: 1:  'info': [
439: 1:    '✅f(Dermatoglyphics) = true',
439: 1:    '✅f(cappa) = false',
439: 1:    '✅f(moOn) = false',
439: 1:    '✅f() = true',
439: 1:    '✅f(Ambidextrously) = true',
439: 1:    '✅f(Aqueducts) = false',
439: 1:    '✅f(Bilabial) = false',
439: 1:    '✅f(Caramelized) = false',
439: 1:    '✅f(Conjugated) = true',
439: 1:    '✅f(Denouement) = false',
439: 1:    '✅f(Disinfectant) = false',
439: 1:    '✅f(Embezzler) = false',
439: 1:    '✅f(Enzymology) = false',
439: 1:    '✅f(Fluoride) = true',
439: 1:    '✅f(Glycogen) = false',
439: 1:    '✅f(Humidity) = false',
439: 1:    '✅f(Juxtapose) = true',
439: 1:    '✅f(Kilobytes) = true',
439: 1:    '✅f(Locomotive) = false',
439: 1:    '✅f(Monolithic) = false',
439: 1:    '✅f(Nauseously) = false',
439: 1:    '✅f(Oblongata) = false',
439: 1:    '✅f(Permeable) = false',
439: 1:    '✅f(Quizzical) = false',
439: 1:    '✅f(Rhinoceros) = false',
439: 1:    '✅f(Sequences) = false',
439: 1:    '✅f(Symmetrical) = false',
439: 1:    '❌f(Tesseract) = ??? != false'
439: 1:  ],
439: 1:  'level': 15,
439: 1:  'nextQuestion': 'Tesseract',
439: 1:  'questions': [
439: 1:    'Dermatoglyphics',
439: 1:    'cappa',
439: 1:    'moOn',
439: 1:    '',
439: 1:    'Ambidextrously',
439: 1:    'Aqueducts',
439: 1:    'Bilabial',
439: 1:    'Caramelized',
439: 1:    'Conjugated',
439: 1:    'Denouement',
439: 1:    'Disinfectant',
439: 1:    'Embezzler',
439: 1:    'Enzymology',
439: 1:    'Fluoride',
439: 1:    'Glycogen',
439: 1:    'Humidity',
439: 1:    'Juxtapose',
439: 1:    'Kilobytes',
439: 1:    'Locomotive',
439: 1:    'Monolithic',
439: 1:    'Nauseously',
439: 1:    'Oblongata',
439: 1:    'Permeable',
439: 1:    'Quizzical',
439: 1:    'Rhinoceros',
439: 1:    'Sequences',
439: 1:    'Symmetrical',
439: 1:    'Tesseract'
439: 1:  ]
439: 1:}
439: 1:Scores: 23304
439: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false']')
439: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
440: 1:BoardData {
440: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
440: 1:  'expectedAnswer': 'false',
440: 1:  'history': [
440: 1:    {
440: 1:      'answer': 'true',
440: 1:      'question': 'Dermatoglyphics',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': 'false',
440: 1:      'question': 'cappa',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': 'false',
440: 1:      'question': 'moOn',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': 'true',
440: 1:      'question': '',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': 'true',
440: 1:      'question': 'Ambidextrously',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': 'false',
440: 1:      'question': 'Aqueducts',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': 'false',
440: 1:      'question': 'Bilabial',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': 'false',
440: 1:      'question': 'Caramelized',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': 'true',
440: 1:      'question': 'Conjugated',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': 'false',
440: 1:      'question': 'Denouement',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': 'false',
440: 1:      'question': 'Disinfectant',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': 'false',
440: 1:      'question': 'Embezzler',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': 'false',
440: 1:      'question': 'Enzymology',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': 'true',
440: 1:      'question': 'Fluoride',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': 'false',
440: 1:      'question': 'Glycogen',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': 'false',
440: 1:      'question': 'Humidity',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': 'true',
440: 1:      'question': 'Juxtapose',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': 'true',
440: 1:      'question': 'Kilobytes',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': 'false',
440: 1:      'question': 'Locomotive',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': 'false',
440: 1:      'question': 'Monolithic',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': 'false',
440: 1:      'question': 'Nauseously',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': 'false',
440: 1:      'question': 'Oblongata',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': 'false',
440: 1:      'question': 'Permeable',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': 'false',
440: 1:      'question': 'Quizzical',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': 'false',
440: 1:      'question': 'Rhinoceros',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': 'false',
440: 1:      'question': 'Sequences',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': 'false',
440: 1:      'question': 'Symmetrical',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': 'false',
440: 1:      'question': 'Tesseract',
440: 1:      'valid': true
440: 1:    }
440: 1:  ],
440: 1:  'info': [
440: 1:    '✅f(Dermatoglyphics) = true',
440: 1:    '✅f(cappa) = false',
440: 1:    '✅f(moOn) = false',
440: 1:    '✅f() = true',
440: 1:    '✅f(Ambidextrously) = true',
440: 1:    '✅f(Aqueducts) = false',
440: 1:    '✅f(Bilabial) = false',
440: 1:    '✅f(Caramelized) = false',
440: 1:    '✅f(Conjugated) = true',
440: 1:    '✅f(Denouement) = false',
440: 1:    '✅f(Disinfectant) = false',
440: 1:    '✅f(Embezzler) = false',
440: 1:    '✅f(Enzymology) = false',
440: 1:    '✅f(Fluoride) = true',
440: 1:    '✅f(Glycogen) = false',
440: 1:    '✅f(Humidity) = false',
440: 1:    '✅f(Juxtapose) = true',
440: 1:    '✅f(Kilobytes) = true',
440: 1:    '✅f(Locomotive) = false',
440: 1:    '✅f(Monolithic) = false',
440: 1:    '✅f(Nauseously) = false',
440: 1:    '✅f(Oblongata) = false',
440: 1:    '✅f(Permeable) = false',
440: 1:    '✅f(Quizzical) = false',
440: 1:    '✅f(Rhinoceros) = false',
440: 1:    '✅f(Sequences) = false',
440: 1:    '✅f(Symmetrical) = false',
440: 1:    '✅f(Tesseract) = false',
440: 1:    '❌f(Unconquered) = ??? != false'
440: 1:  ],
440: 1:  'level': 15,
440: 1:  'nextQuestion': 'Unconquered',
440: 1:  'questions': [
440: 1:    'Dermatoglyphics',
440: 1:    'cappa',
440: 1:    'moOn',
440: 1:    '',
440: 1:    'Ambidextrously',
440: 1:    'Aqueducts',
440: 1:    'Bilabial',
440: 1:    'Caramelized',
440: 1:    'Conjugated',
440: 1:    'Denouement',
440: 1:    'Disinfectant',
440: 1:    'Embezzler',
440: 1:    'Enzymology',
440: 1:    'Fluoride',
440: 1:    'Glycogen',
440: 1:    'Humidity',
440: 1:    'Juxtapose',
440: 1:    'Kilobytes',
440: 1:    'Locomotive',
440: 1:    'Monolithic',
440: 1:    'Nauseously',
440: 1:    'Oblongata',
440: 1:    'Permeable',
440: 1:    'Quizzical',
440: 1:    'Rhinoceros',
440: 1:    'Sequences',
440: 1:    'Symmetrical',
440: 1:    'Tesseract',
440: 1:    'Unconquered'
440: 1:  ]
440: 1:}
440: 1:Scores: 23309
440: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false']')
440: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
441: 1:BoardData {
441: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
441: 1:  'expectedAnswer': 'false',
441: 1:  'history': [
441: 1:    {
441: 1:      'answer': 'true',
441: 1:      'question': 'Dermatoglyphics',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': 'false',
441: 1:      'question': 'cappa',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': 'false',
441: 1:      'question': 'moOn',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': 'true',
441: 1:      'question': '',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': 'true',
441: 1:      'question': 'Ambidextrously',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': 'false',
441: 1:      'question': 'Aqueducts',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': 'false',
441: 1:      'question': 'Bilabial',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': 'false',
441: 1:      'question': 'Caramelized',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': 'true',
441: 1:      'question': 'Conjugated',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': 'false',
441: 1:      'question': 'Denouement',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': 'false',
441: 1:      'question': 'Disinfectant',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': 'false',
441: 1:      'question': 'Embezzler',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': 'false',
441: 1:      'question': 'Enzymology',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': 'true',
441: 1:      'question': 'Fluoride',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': 'false',
441: 1:      'question': 'Glycogen',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': 'false',
441: 1:      'question': 'Humidity',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': 'true',
441: 1:      'question': 'Juxtapose',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': 'true',
441: 1:      'question': 'Kilobytes',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': 'false',
441: 1:      'question': 'Locomotive',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': 'false',
441: 1:      'question': 'Monolithic',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': 'false',
441: 1:      'question': 'Nauseously',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': 'false',
441: 1:      'question': 'Oblongata',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': 'false',
441: 1:      'question': 'Permeable',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': 'false',
441: 1:      'question': 'Quizzical',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': 'false',
441: 1:      'question': 'Rhinoceros',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': 'false',
441: 1:      'question': 'Sequences',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': 'false',
441: 1:      'question': 'Symmetrical',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': 'false',
441: 1:      'question': 'Tesseract',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': 'false',
441: 1:      'question': 'Unconquered',
441: 1:      'valid': true
441: 1:    }
441: 1:  ],
441: 1:  'info': [
441: 1:    '✅f(Dermatoglyphics) = true',
441: 1:    '✅f(cappa) = false',
441: 1:    '✅f(moOn) = false',
441: 1:    '✅f() = true',
441: 1:    '✅f(Ambidextrously) = true',
441: 1:    '✅f(Aqueducts) = false',
441: 1:    '✅f(Bilabial) = false',
441: 1:    '✅f(Caramelized) = false',
441: 1:    '✅f(Conjugated) = true',
441: 1:    '✅f(Denouement) = false',
441: 1:    '✅f(Disinfectant) = false',
441: 1:    '✅f(Embezzler) = false',
441: 1:    '✅f(Enzymology) = false',
441: 1:    '✅f(Fluoride) = true',
441: 1:    '✅f(Glycogen) = false',
441: 1:    '✅f(Humidity) = false',
441: 1:    '✅f(Juxtapose) = true',
441: 1:    '✅f(Kilobytes) = true',
441: 1:    '✅f(Locomotive) = false',
441: 1:    '✅f(Monolithic) = false',
441: 1:    '✅f(Nauseously) = false',
441: 1:    '✅f(Oblongata) = false',
441: 1:    '✅f(Permeable) = false',
441: 1:    '✅f(Quizzical) = false',
441: 1:    '✅f(Rhinoceros) = false',
441: 1:    '✅f(Sequences) = false',
441: 1:    '✅f(Symmetrical) = false',
441: 1:    '✅f(Tesseract) = false',
441: 1:    '✅f(Unconquered) = false',
441: 1:    '❌f(Ventriloquism) = ??? != false'
441: 1:  ],
441: 1:  'level': 15,
441: 1:  'nextQuestion': 'Ventriloquism',
441: 1:  'questions': [
441: 1:    'Dermatoglyphics',
441: 1:    'cappa',
441: 1:    'moOn',
441: 1:    '',
441: 1:    'Ambidextrously',
441: 1:    'Aqueducts',
441: 1:    'Bilabial',
441: 1:    'Caramelized',
441: 1:    'Conjugated',
441: 1:    'Denouement',
441: 1:    'Disinfectant',
441: 1:    'Embezzler',
441: 1:    'Enzymology',
441: 1:    'Fluoride',
441: 1:    'Glycogen',
441: 1:    'Humidity',
441: 1:    'Juxtapose',
441: 1:    'Kilobytes',
441: 1:    'Locomotive',
441: 1:    'Monolithic',
441: 1:    'Nauseously',
441: 1:    'Oblongata',
441: 1:    'Permeable',
441: 1:    'Quizzical',
441: 1:    'Rhinoceros',
441: 1:    'Sequences',
441: 1:    'Symmetrical',
441: 1:    'Tesseract',
441: 1:    'Unconquered',
441: 1:    'Ventriloquism'
441: 1:  ]
441: 1:}
441: 1:Scores: 23314
441: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false']')
441: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
442: 1:BoardData {
442: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
442: 1:  'expectedAnswer': 'false',
442: 1:  'history': [
442: 1:    {
442: 1:      'answer': 'true',
442: 1:      'question': 'Dermatoglyphics',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'false',
442: 1:      'question': 'cappa',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'false',
442: 1:      'question': 'moOn',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'true',
442: 1:      'question': '',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'true',
442: 1:      'question': 'Ambidextrously',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'false',
442: 1:      'question': 'Aqueducts',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'false',
442: 1:      'question': 'Bilabial',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'false',
442: 1:      'question': 'Caramelized',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'true',
442: 1:      'question': 'Conjugated',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'false',
442: 1:      'question': 'Denouement',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'false',
442: 1:      'question': 'Disinfectant',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'false',
442: 1:      'question': 'Embezzler',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'false',
442: 1:      'question': 'Enzymology',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'true',
442: 1:      'question': 'Fluoride',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'false',
442: 1:      'question': 'Glycogen',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'false',
442: 1:      'question': 'Humidity',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'true',
442: 1:      'question': 'Juxtapose',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'true',
442: 1:      'question': 'Kilobytes',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'false',
442: 1:      'question': 'Locomotive',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'false',
442: 1:      'question': 'Monolithic',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'false',
442: 1:      'question': 'Nauseously',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'false',
442: 1:      'question': 'Oblongata',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'false',
442: 1:      'question': 'Permeable',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'false',
442: 1:      'question': 'Quizzical',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'false',
442: 1:      'question': 'Rhinoceros',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'false',
442: 1:      'question': 'Sequences',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'false',
442: 1:      'question': 'Symmetrical',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'false',
442: 1:      'question': 'Tesseract',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'false',
442: 1:      'question': 'Unconquered',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': 'false',
442: 1:      'question': 'Ventriloquism',
442: 1:      'valid': true
442: 1:    }
442: 1:  ],
442: 1:  'info': [
442: 1:    '✅f(Dermatoglyphics) = true',
442: 1:    '✅f(cappa) = false',
442: 1:    '✅f(moOn) = false',
442: 1:    '✅f() = true',
442: 1:    '✅f(Ambidextrously) = true',
442: 1:    '✅f(Aqueducts) = false',
442: 1:    '✅f(Bilabial) = false',
442: 1:    '✅f(Caramelized) = false',
442: 1:    '✅f(Conjugated) = true',
442: 1:    '✅f(Denouement) = false',
442: 1:    '✅f(Disinfectant) = false',
442: 1:    '✅f(Embezzler) = false',
442: 1:    '✅f(Enzymology) = false',
442: 1:    '✅f(Fluoride) = true',
442: 1:    '✅f(Glycogen) = false',
442: 1:    '✅f(Humidity) = false',
442: 1:    '✅f(Juxtapose) = true',
442: 1:    '✅f(Kilobytes) = true',
442: 1:    '✅f(Locomotive) = false',
442: 1:    '✅f(Monolithic) = false',
442: 1:    '✅f(Nauseously) = false',
442: 1:    '✅f(Oblongata) = false',
442: 1:    '✅f(Permeable) = false',
442: 1:    '✅f(Quizzical) = false',
442: 1:    '✅f(Rhinoceros) = false',
442: 1:    '✅f(Sequences) = false',
442: 1:    '✅f(Symmetrical) = false',
442: 1:    '✅f(Tesseract) = false',
442: 1:    '✅f(Unconquered) = false',
442: 1:    '✅f(Ventriloquism) = false',
442: 1:    '❌f(Xenophobia) = ??? != false'
442: 1:  ],
442: 1:  'level': 15,
442: 1:  'nextQuestion': 'Xenophobia',
442: 1:  'questions': [
442: 1:    'Dermatoglyphics',
442: 1:    'cappa',
442: 1:    'moOn',
442: 1:    '',
442: 1:    'Ambidextrously',
442: 1:    'Aqueducts',
442: 1:    'Bilabial',
442: 1:    'Caramelized',
442: 1:    'Conjugated',
442: 1:    'Denouement',
442: 1:    'Disinfectant',
442: 1:    'Embezzler',
442: 1:    'Enzymology',
442: 1:    'Fluoride',
442: 1:    'Glycogen',
442: 1:    'Humidity',
442: 1:    'Juxtapose',
442: 1:    'Kilobytes',
442: 1:    'Locomotive',
442: 1:    'Monolithic',
442: 1:    'Nauseously',
442: 1:    'Oblongata',
442: 1:    'Permeable',
442: 1:    'Quizzical',
442: 1:    'Rhinoceros',
442: 1:    'Sequences',
442: 1:    'Symmetrical',
442: 1:    'Tesseract',
442: 1:    'Unconquered',
442: 1:    'Ventriloquism',
442: 1:    'Xenophobia'
442: 1:  ]
442: 1:}
442: 1:Scores: 23319
442: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false']')
442: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
443: 1:BoardData {
443: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
443: 1:  'expectedAnswer': 'false',
443: 1:  'history': [
443: 1:    {
443: 1:      'answer': 'true',
443: 1:      'question': 'Dermatoglyphics',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'false',
443: 1:      'question': 'cappa',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'false',
443: 1:      'question': 'moOn',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'true',
443: 1:      'question': '',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'true',
443: 1:      'question': 'Ambidextrously',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'false',
443: 1:      'question': 'Aqueducts',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'false',
443: 1:      'question': 'Bilabial',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'false',
443: 1:      'question': 'Caramelized',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'true',
443: 1:      'question': 'Conjugated',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'false',
443: 1:      'question': 'Denouement',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'false',
443: 1:      'question': 'Disinfectant',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'false',
443: 1:      'question': 'Embezzler',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'false',
443: 1:      'question': 'Enzymology',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'true',
443: 1:      'question': 'Fluoride',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'false',
443: 1:      'question': 'Glycogen',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'false',
443: 1:      'question': 'Humidity',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'true',
443: 1:      'question': 'Juxtapose',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'true',
443: 1:      'question': 'Kilobytes',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'false',
443: 1:      'question': 'Locomotive',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'false',
443: 1:      'question': 'Monolithic',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'false',
443: 1:      'question': 'Nauseously',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'false',
443: 1:      'question': 'Oblongata',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'false',
443: 1:      'question': 'Permeable',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'false',
443: 1:      'question': 'Quizzical',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'false',
443: 1:      'question': 'Rhinoceros',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'false',
443: 1:      'question': 'Sequences',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'false',
443: 1:      'question': 'Symmetrical',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'false',
443: 1:      'question': 'Tesseract',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'false',
443: 1:      'question': 'Unconquered',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'false',
443: 1:      'question': 'Ventriloquism',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': 'false',
443: 1:      'question': 'Xenophobia',
443: 1:      'valid': true
443: 1:    }
443: 1:  ],
443: 1:  'info': [
443: 1:    '✅f(Dermatoglyphics) = true',
443: 1:    '✅f(cappa) = false',
443: 1:    '✅f(moOn) = false',
443: 1:    '✅f() = true',
443: 1:    '✅f(Ambidextrously) = true',
443: 1:    '✅f(Aqueducts) = false',
443: 1:    '✅f(Bilabial) = false',
443: 1:    '✅f(Caramelized) = false',
443: 1:    '✅f(Conjugated) = true',
443: 1:    '✅f(Denouement) = false',
443: 1:    '✅f(Disinfectant) = false',
443: 1:    '✅f(Embezzler) = false',
443: 1:    '✅f(Enzymology) = false',
443: 1:    '✅f(Fluoride) = true',
443: 1:    '✅f(Glycogen) = false',
443: 1:    '✅f(Humidity) = false',
443: 1:    '✅f(Juxtapose) = true',
443: 1:    '✅f(Kilobytes) = true',
443: 1:    '✅f(Locomotive) = false',
443: 1:    '✅f(Monolithic) = false',
443: 1:    '✅f(Nauseously) = false',
443: 1:    '✅f(Oblongata) = false',
443: 1:    '✅f(Permeable) = false',
443: 1:    '✅f(Quizzical) = false',
443: 1:    '✅f(Rhinoceros) = false',
443: 1:    '✅f(Sequences) = false',
443: 1:    '✅f(Symmetrical) = false',
443: 1:    '✅f(Tesseract) = false',
443: 1:    '✅f(Unconquered) = false',
443: 1:    '✅f(Ventriloquism) = false',
443: 1:    '✅f(Xenophobia) = false',
443: 1:    '❌f(Yellowish) = ??? != false'
443: 1:  ],
443: 1:  'level': 15,
443: 1:  'nextQuestion': 'Yellowish',
443: 1:  'questions': [
443: 1:    'Dermatoglyphics',
443: 1:    'cappa',
443: 1:    'moOn',
443: 1:    '',
443: 1:    'Ambidextrously',
443: 1:    'Aqueducts',
443: 1:    'Bilabial',
443: 1:    'Caramelized',
443: 1:    'Conjugated',
443: 1:    'Denouement',
443: 1:    'Disinfectant',
443: 1:    'Embezzler',
443: 1:    'Enzymology',
443: 1:    'Fluoride',
443: 1:    'Glycogen',
443: 1:    'Humidity',
443: 1:    'Juxtapose',
443: 1:    'Kilobytes',
443: 1:    'Locomotive',
443: 1:    'Monolithic',
443: 1:    'Nauseously',
443: 1:    'Oblongata',
443: 1:    'Permeable',
443: 1:    'Quizzical',
443: 1:    'Rhinoceros',
443: 1:    'Sequences',
443: 1:    'Symmetrical',
443: 1:    'Tesseract',
443: 1:    'Unconquered',
443: 1:    'Ventriloquism',
443: 1:    'Xenophobia',
443: 1:    'Yellowish'
443: 1:  ]
443: 1:}
443: 1:Scores: 23324
443: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false']')
443: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
444: 1:BoardData {
444: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
444: 1:  'expectedAnswer': 'true',
444: 1:  'history': [
444: 1:    {
444: 1:      'answer': 'true',
444: 1:      'question': 'Dermatoglyphics',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'false',
444: 1:      'question': 'cappa',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'false',
444: 1:      'question': 'moOn',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'true',
444: 1:      'question': '',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'true',
444: 1:      'question': 'Ambidextrously',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'false',
444: 1:      'question': 'Aqueducts',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'false',
444: 1:      'question': 'Bilabial',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'false',
444: 1:      'question': 'Caramelized',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'true',
444: 1:      'question': 'Conjugated',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'false',
444: 1:      'question': 'Denouement',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'false',
444: 1:      'question': 'Disinfectant',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'false',
444: 1:      'question': 'Embezzler',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'false',
444: 1:      'question': 'Enzymology',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'true',
444: 1:      'question': 'Fluoride',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'false',
444: 1:      'question': 'Glycogen',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'false',
444: 1:      'question': 'Humidity',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'true',
444: 1:      'question': 'Juxtapose',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'true',
444: 1:      'question': 'Kilobytes',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'false',
444: 1:      'question': 'Locomotive',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'false',
444: 1:      'question': 'Monolithic',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'false',
444: 1:      'question': 'Nauseously',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'false',
444: 1:      'question': 'Oblongata',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'false',
444: 1:      'question': 'Permeable',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'false',
444: 1:      'question': 'Quizzical',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'false',
444: 1:      'question': 'Rhinoceros',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'false',
444: 1:      'question': 'Sequences',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'false',
444: 1:      'question': 'Symmetrical',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'false',
444: 1:      'question': 'Tesseract',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'false',
444: 1:      'question': 'Unconquered',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'false',
444: 1:      'question': 'Ventriloquism',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'false',
444: 1:      'question': 'Xenophobia',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': 'false',
444: 1:      'question': 'Yellowish',
444: 1:      'valid': true
444: 1:    }
444: 1:  ],
444: 1:  'info': [
444: 1:    '✅f(Dermatoglyphics) = true',
444: 1:    '✅f(cappa) = false',
444: 1:    '✅f(moOn) = false',
444: 1:    '✅f() = true',
444: 1:    '✅f(Ambidextrously) = true',
444: 1:    '✅f(Aqueducts) = false',
444: 1:    '✅f(Bilabial) = false',
444: 1:    '✅f(Caramelized) = false',
444: 1:    '✅f(Conjugated) = true',
444: 1:    '✅f(Denouement) = false',
444: 1:    '✅f(Disinfectant) = false',
444: 1:    '✅f(Embezzler) = false',
444: 1:    '✅f(Enzymology) = false',
444: 1:    '✅f(Fluoride) = true',
444: 1:    '✅f(Glycogen) = false',
444: 1:    '✅f(Humidity) = false',
444: 1:    '✅f(Juxtapose) = true',
444: 1:    '✅f(Kilobytes) = true',
444: 1:    '✅f(Locomotive) = false',
444: 1:    '✅f(Monolithic) = false',
444: 1:    '✅f(Nauseously) = false',
444: 1:    '✅f(Oblongata) = false',
444: 1:    '✅f(Permeable) = false',
444: 1:    '✅f(Quizzical) = false',
444: 1:    '✅f(Rhinoceros) = false',
444: 1:    '✅f(Sequences) = false',
444: 1:    '✅f(Symmetrical) = false',
444: 1:    '✅f(Tesseract) = false',
444: 1:    '✅f(Unconquered) = false',
444: 1:    '✅f(Ventriloquism) = false',
444: 1:    '✅f(Xenophobia) = false',
444: 1:    '✅f(Yellowish) = false',
444: 1:    '❌f(Zamboni) = ??? != true'
444: 1:  ],
444: 1:  'level': 15,
444: 1:  'nextQuestion': 'Zamboni',
444: 1:  'questions': [
444: 1:    'Dermatoglyphics',
444: 1:    'cappa',
444: 1:    'moOn',
444: 1:    '',
444: 1:    'Ambidextrously',
444: 1:    'Aqueducts',
444: 1:    'Bilabial',
444: 1:    'Caramelized',
444: 1:    'Conjugated',
444: 1:    'Denouement',
444: 1:    'Disinfectant',
444: 1:    'Embezzler',
444: 1:    'Enzymology',
444: 1:    'Fluoride',
444: 1:    'Glycogen',
444: 1:    'Humidity',
444: 1:    'Juxtapose',
444: 1:    'Kilobytes',
444: 1:    'Locomotive',
444: 1:    'Monolithic',
444: 1:    'Nauseously',
444: 1:    'Oblongata',
444: 1:    'Permeable',
444: 1:    'Quizzical',
444: 1:    'Rhinoceros',
444: 1:    'Sequences',
444: 1:    'Symmetrical',
444: 1:    'Tesseract',
444: 1:    'Unconquered',
444: 1:    'Ventriloquism',
444: 1:    'Xenophobia',
444: 1:    'Yellowish',
444: 1:    'Zamboni'
444: 1:  ]
444: 1:}
444: 1:Scores: 23329
444: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true']')
444: 1:Fire Event: PassTest{complexity=19, testCount=34}
------------------------------------------
445: 1:BoardData {
445: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
445: 1:  'expectedAnswer': 'true',
445: 1:  'history': [
445: 1:    {
445: 1:      'answer': 'true',
445: 1:      'question': 'Dermatoglyphics',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'false',
445: 1:      'question': 'cappa',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'false',
445: 1:      'question': 'moOn',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'true',
445: 1:      'question': '',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'true',
445: 1:      'question': 'Ambidextrously',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'false',
445: 1:      'question': 'Aqueducts',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'false',
445: 1:      'question': 'Bilabial',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'false',
445: 1:      'question': 'Caramelized',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'true',
445: 1:      'question': 'Conjugated',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'false',
445: 1:      'question': 'Denouement',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'false',
445: 1:      'question': 'Disinfectant',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'false',
445: 1:      'question': 'Embezzler',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'false',
445: 1:      'question': 'Enzymology',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'true',
445: 1:      'question': 'Fluoride',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'false',
445: 1:      'question': 'Glycogen',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'false',
445: 1:      'question': 'Humidity',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'true',
445: 1:      'question': 'Juxtapose',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'true',
445: 1:      'question': 'Kilobytes',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'false',
445: 1:      'question': 'Locomotive',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'false',
445: 1:      'question': 'Monolithic',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'false',
445: 1:      'question': 'Nauseously',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'false',
445: 1:      'question': 'Oblongata',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'false',
445: 1:      'question': 'Permeable',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'false',
445: 1:      'question': 'Quizzical',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'false',
445: 1:      'question': 'Rhinoceros',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'false',
445: 1:      'question': 'Sequences',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'false',
445: 1:      'question': 'Symmetrical',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'false',
445: 1:      'question': 'Tesseract',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'false',
445: 1:      'question': 'Unconquered',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'false',
445: 1:      'question': 'Ventriloquism',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'false',
445: 1:      'question': 'Xenophobia',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'false',
445: 1:      'question': 'Yellowish',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': 'true',
445: 1:      'question': 'Zamboni',
445: 1:      'valid': true
445: 1:    }
445: 1:  ],
445: 1:  'info': [
445: 1:    '✅f(Dermatoglyphics) = true',
445: 1:    '✅f(cappa) = false',
445: 1:    '✅f(moOn) = false',
445: 1:    '✅f() = true',
445: 1:    '✅f(Ambidextrously) = true',
445: 1:    '✅f(Aqueducts) = false',
445: 1:    '✅f(Bilabial) = false',
445: 1:    '✅f(Caramelized) = false',
445: 1:    '✅f(Conjugated) = true',
445: 1:    '✅f(Denouement) = false',
445: 1:    '✅f(Disinfectant) = false',
445: 1:    '✅f(Embezzler) = false',
445: 1:    '✅f(Enzymology) = false',
445: 1:    '✅f(Fluoride) = true',
445: 1:    '✅f(Glycogen) = false',
445: 1:    '✅f(Humidity) = false',
445: 1:    '✅f(Juxtapose) = true',
445: 1:    '✅f(Kilobytes) = true',
445: 1:    '✅f(Locomotive) = false',
445: 1:    '✅f(Monolithic) = false',
445: 1:    '✅f(Nauseously) = false',
445: 1:    '✅f(Oblongata) = false',
445: 1:    '✅f(Permeable) = false',
445: 1:    '✅f(Quizzical) = false',
445: 1:    '✅f(Rhinoceros) = false',
445: 1:    '✅f(Sequences) = false',
445: 1:    '✅f(Symmetrical) = false',
445: 1:    '✅f(Tesseract) = false',
445: 1:    '✅f(Unconquered) = false',
445: 1:    '✅f(Ventriloquism) = false',
445: 1:    '✅f(Xenophobia) = false',
445: 1:    '✅f(Yellowish) = false',
445: 1:    '✅f(Zamboni) = true',
445: 1:    '❌f(Zygotes) = ??? != true'
445: 1:  ],
445: 1:  'level': 15,
445: 1:  'nextQuestion': 'Zygotes',
445: 1:  'questions': [
445: 1:    'Dermatoglyphics',
445: 1:    'cappa',
445: 1:    'moOn',
445: 1:    '',
445: 1:    'Ambidextrously',
445: 1:    'Aqueducts',
445: 1:    'Bilabial',
445: 1:    'Caramelized',
445: 1:    'Conjugated',
445: 1:    'Denouement',
445: 1:    'Disinfectant',
445: 1:    'Embezzler',
445: 1:    'Enzymology',
445: 1:    'Fluoride',
445: 1:    'Glycogen',
445: 1:    'Humidity',
445: 1:    'Juxtapose',
445: 1:    'Kilobytes',
445: 1:    'Locomotive',
445: 1:    'Monolithic',
445: 1:    'Nauseously',
445: 1:    'Oblongata',
445: 1:    'Permeable',
445: 1:    'Quizzical',
445: 1:    'Rhinoceros',
445: 1:    'Sequences',
445: 1:    'Symmetrical',
445: 1:    'Tesseract',
445: 1:    'Unconquered',
445: 1:    'Ventriloquism',
445: 1:    'Xenophobia',
445: 1:    'Yellowish',
445: 1:    'Zamboni',
445: 1:    'Zygotes'
445: 1:  ]
445: 1:}
445: 1:Scores: 23334
445: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'true']')
445: 1:Fire Event: PassTest{complexity=19, testCount=34}
445: 1:Fire Event: NextAlgorithm{complexity=19, time=0}
------------------------------------------
446: 1:BoardData {
446: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
446: 1:  'history': [
446: 1:    {
446: 1:      'answer': 'true',
446: 1:      'question': 'Dermatoglyphics',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'false',
446: 1:      'question': 'cappa',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'false',
446: 1:      'question': 'moOn',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'true',
446: 1:      'question': '',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'true',
446: 1:      'question': 'Ambidextrously',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'false',
446: 1:      'question': 'Aqueducts',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'false',
446: 1:      'question': 'Bilabial',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'false',
446: 1:      'question': 'Caramelized',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'true',
446: 1:      'question': 'Conjugated',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'false',
446: 1:      'question': 'Denouement',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'false',
446: 1:      'question': 'Disinfectant',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'false',
446: 1:      'question': 'Embezzler',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'false',
446: 1:      'question': 'Enzymology',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'true',
446: 1:      'question': 'Fluoride',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'false',
446: 1:      'question': 'Glycogen',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'false',
446: 1:      'question': 'Humidity',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'true',
446: 1:      'question': 'Juxtapose',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'true',
446: 1:      'question': 'Kilobytes',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'false',
446: 1:      'question': 'Locomotive',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'false',
446: 1:      'question': 'Monolithic',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'false',
446: 1:      'question': 'Nauseously',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'false',
446: 1:      'question': 'Oblongata',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'false',
446: 1:      'question': 'Permeable',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'false',
446: 1:      'question': 'Quizzical',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'false',
446: 1:      'question': 'Rhinoceros',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'false',
446: 1:      'question': 'Sequences',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'false',
446: 1:      'question': 'Symmetrical',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'false',
446: 1:      'question': 'Tesseract',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'false',
446: 1:      'question': 'Unconquered',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'false',
446: 1:      'question': 'Ventriloquism',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'false',
446: 1:      'question': 'Xenophobia',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'false',
446: 1:      'question': 'Yellowish',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'true',
446: 1:      'question': 'Zamboni',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': 'true',
446: 1:      'question': 'Zygotes',
446: 1:      'valid': true
446: 1:    }
446: 1:  ],
446: 1:  'info': [
446: 1:    '✅f(Dermatoglyphics) = true',
446: 1:    '✅f(cappa) = false',
446: 1:    '✅f(moOn) = false',
446: 1:    '✅f() = true',
446: 1:    '✅f(Ambidextrously) = true',
446: 1:    '✅f(Aqueducts) = false',
446: 1:    '✅f(Bilabial) = false',
446: 1:    '✅f(Caramelized) = false',
446: 1:    '✅f(Conjugated) = true',
446: 1:    '✅f(Denouement) = false',
446: 1:    '✅f(Disinfectant) = false',
446: 1:    '✅f(Embezzler) = false',
446: 1:    '✅f(Enzymology) = false',
446: 1:    '✅f(Fluoride) = true',
446: 1:    '✅f(Glycogen) = false',
446: 1:    '✅f(Humidity) = false',
446: 1:    '✅f(Juxtapose) = true',
446: 1:    '✅f(Kilobytes) = true',
446: 1:    '✅f(Locomotive) = false',
446: 1:    '✅f(Monolithic) = false',
446: 1:    '✅f(Nauseously) = false',
446: 1:    '✅f(Oblongata) = false',
446: 1:    '✅f(Permeable) = false',
446: 1:    '✅f(Quizzical) = false',
446: 1:    '✅f(Rhinoceros) = false',
446: 1:    '✅f(Sequences) = false',
446: 1:    '✅f(Symmetrical) = false',
446: 1:    '✅f(Tesseract) = false',
446: 1:    '✅f(Unconquered) = false',
446: 1:    '✅f(Ventriloquism) = false',
446: 1:    '✅f(Xenophobia) = false',
446: 1:    '✅f(Yellowish) = false',
446: 1:    '✅f(Zamboni) = true',
446: 1:    '✅f(Zygotes) = true'
446: 1:  ],
446: 1:  'level': 15,
446: 1:  'questions': []
446: 1:}
446: 1:Scores: 25903
446: 1:Answer: message('StartNextLevel')
446: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
447: 1:BoardData {
447: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
447: 1:  'expectedAnswer': '40',
447: 1:  'history': [],
447: 1:  'info': ['❌f(1) = ??? != 40'],
447: 1:  'level': 16,
447: 1:  'nextQuestion': '1',
447: 1:  'questions': ['1']
447: 1:}
447: 1:Scores: 25903
447: 1:Answer: message('['40']')
447: 1:Fire Event: PassTest{complexity=20, testCount=19}
------------------------------------------
448: 1:BoardData {
448: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
448: 1:  'expectedAnswer': '80',
448: 1:  'history': [{
448: 1:    'answer': '40',
448: 1:    'question': '1',
448: 1:    'valid': true
448: 1:  }],
448: 1:  'info': [
448: 1:    '✅f(1) = 40',
448: 1:    '❌f(2) = ??? != 80'
448: 1:  ],
448: 1:  'level': 16,
448: 1:  'nextQuestion': '2',
448: 1:  'questions': [
448: 1:    '1',
448: 1:    '2'
448: 1:  ]
448: 1:}
448: 1:Scores: 25913
448: 1:Answer: message('['40', '80']')
448: 1:Fire Event: PassTest{complexity=20, testCount=19}
------------------------------------------
449: 1:BoardData {
449: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
449: 1:  'expectedAnswer': '100',
449: 1:  'history': [
449: 1:    {
449: 1:      'answer': '40',
449: 1:      'question': '1',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '80',
449: 1:      'question': '2',
449: 1:      'valid': true
449: 1:    }
449: 1:  ],
449: 1:  'info': [
449: 1:    '✅f(1) = 40',
449: 1:    '✅f(2) = 80',
449: 1:    '❌f(3) = ??? != 100'
449: 1:  ],
449: 1:  'level': 16,
449: 1:  'nextQuestion': '3',
449: 1:  'questions': [
449: 1:    '1',
449: 1:    '2',
449: 1:    '3'
449: 1:  ]
449: 1:}
449: 1:Scores: 25923
449: 1:Answer: message('['40', '80', '100']')
449: 1:Fire Event: PassTest{complexity=20, testCount=19}
------------------------------------------
450: 1:BoardData {
450: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
450: 1:  'expectedAnswer': '140',
450: 1:  'history': [
450: 1:    {
450: 1:      'answer': '40',
450: 1:      'question': '1',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '80',
450: 1:      'question': '2',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '100',
450: 1:      'question': '3',
450: 1:      'valid': true
450: 1:    }
450: 1:  ],
450: 1:  'info': [
450: 1:    '✅f(1) = 40',
450: 1:    '✅f(2) = 80',
450: 1:    '✅f(3) = 100',
450: 1:    '❌f(4) = ??? != 140'
450: 1:  ],
450: 1:  'level': 16,
450: 1:  'nextQuestion': '4',
450: 1:  'questions': [
450: 1:    '1',
450: 1:    '2',
450: 1:    '3',
450: 1:    '4'
450: 1:  ]
450: 1:}
450: 1:Scores: 25933
450: 1:Answer: message('['40', '80', '100', '140']')
450: 1:Fire Event: PassTest{complexity=20, testCount=19}
------------------------------------------
451: 1:BoardData {
451: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
451: 1:  'expectedAnswer': '180',
451: 1:  'history': [
451: 1:    {
451: 1:      'answer': '40',
451: 1:      'question': '1',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '80',
451: 1:      'question': '2',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '100',
451: 1:      'question': '3',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '140',
451: 1:      'question': '4',
451: 1:      'valid': true
451: 1:    }
451: 1:  ],
451: 1:  'info': [
451: 1:    '✅f(1) = 40',
451: 1:    '✅f(2) = 80',
451: 1:    '✅f(3) = 100',
451: 1:    '✅f(4) = 140',
451: 1:    '❌f(5) = ??? != 180'
451: 1:  ],
451: 1:  'level': 16,
451: 1:  'nextQuestion': '5',
451: 1:  'questions': [
451: 1:    '1',
451: 1:    '2',
451: 1:    '3',
451: 1:    '4',
451: 1:    '5'
451: 1:  ]
451: 1:}
451: 1:Scores: 25943
451: 1:Answer: message('['40', '80', '100', '140', '180']')
451: 1:Fire Event: PassTest{complexity=20, testCount=19}
------------------------------------------
452: 1:BoardData {
452: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
452: 1:  'expectedAnswer': '220',
452: 1:  'history': [
452: 1:    {
452: 1:      'answer': '40',
452: 1:      'question': '1',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '80',
452: 1:      'question': '2',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '100',
452: 1:      'question': '3',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '140',
452: 1:      'question': '4',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '180',
452: 1:      'question': '5',
452: 1:      'valid': true
452: 1:    }
452: 1:  ],
452: 1:  'info': [
452: 1:    '✅f(1) = 40',
452: 1:    '✅f(2) = 80',
452: 1:    '✅f(3) = 100',
452: 1:    '✅f(4) = 140',
452: 1:    '✅f(5) = 180',
452: 1:    '❌f(6) = ??? != 220'
452: 1:  ],
452: 1:  'level': 16,
452: 1:  'nextQuestion': '6',
452: 1:  'questions': [
452: 1:    '1',
452: 1:    '2',
452: 1:    '3',
452: 1:    '4',
452: 1:    '5',
452: 1:    '6'
452: 1:  ]
452: 1:}
452: 1:Scores: 25953
452: 1:Answer: message('['40', '80', '100', '140', '180', '220']')
452: 1:Fire Event: PassTest{complexity=20, testCount=19}
------------------------------------------
453: 1:BoardData {
453: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
453: 1:  'expectedAnswer': '230',
453: 1:  'history': [
453: 1:    {
453: 1:      'answer': '40',
453: 1:      'question': '1',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '80',
453: 1:      'question': '2',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '100',
453: 1:      'question': '3',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '140',
453: 1:      'question': '4',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '180',
453: 1:      'question': '5',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '220',
453: 1:      'question': '6',
453: 1:      'valid': true
453: 1:    }
453: 1:  ],
453: 1:  'info': [
453: 1:    '✅f(1) = 40',
453: 1:    '✅f(2) = 80',
453: 1:    '✅f(3) = 100',
453: 1:    '✅f(4) = 140',
453: 1:    '✅f(5) = 180',
453: 1:    '✅f(6) = 220',
453: 1:    '❌f(7) = ??? != 230'
453: 1:  ],
453: 1:  'level': 16,
453: 1:  'nextQuestion': '7',
453: 1:  'questions': [
453: 1:    '1',
453: 1:    '2',
453: 1:    '3',
453: 1:    '4',
453: 1:    '5',
453: 1:    '6',
453: 1:    '7'
453: 1:  ]
453: 1:}
453: 1:Scores: 25963
453: 1:Answer: message('['40', '80', '100', '140', '180', '220', '230']')
453: 1:Fire Event: PassTest{complexity=20, testCount=19}
------------------------------------------
454: 1:BoardData {
454: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
454: 1:  'expectedAnswer': '270',
454: 1:  'history': [
454: 1:    {
454: 1:      'answer': '40',
454: 1:      'question': '1',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '80',
454: 1:      'question': '2',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '100',
454: 1:      'question': '3',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '140',
454: 1:      'question': '4',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '180',
454: 1:      'question': '5',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '220',
454: 1:      'question': '6',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '230',
454: 1:      'question': '7',
454: 1:      'valid': true
454: 1:    }
454: 1:  ],
454: 1:  'info': [
454: 1:    '✅f(1) = 40',
454: 1:    '✅f(2) = 80',
454: 1:    '✅f(3) = 100',
454: 1:    '✅f(4) = 140',
454: 1:    '✅f(5) = 180',
454: 1:    '✅f(6) = 220',
454: 1:    '✅f(7) = 230',
454: 1:    '❌f(8) = ??? != 270'
454: 1:  ],
454: 1:  'level': 16,
454: 1:  'nextQuestion': '8',
454: 1:  'questions': [
454: 1:    '1',
454: 1:    '2',
454: 1:    '3',
454: 1:    '4',
454: 1:    '5',
454: 1:    '6',
454: 1:    '7',
454: 1:    '8'
454: 1:  ]
454: 1:}
454: 1:Scores: 25973
454: 1:Answer: message('['40', '80', '100', '140', '180', '220', '230', '270']')
454: 1:Fire Event: PassTest{complexity=20, testCount=19}
------------------------------------------
455: 1:BoardData {
455: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
455: 1:  'expectedAnswer': '310',
455: 1:  'history': [
455: 1:    {
455: 1:      'answer': '40',
455: 1:      'question': '1',
455: 1:      'valid': true
455: 1:    },
455: 1:    {
455: 1:      'answer': '80',
455: 1:      'question': '2',
455: 1:      'valid': true
455: 1:    },
455: 1:    {
455: 1:      'answer': '100',
455: 1:      'question': '3',
455: 1:      'valid': true
455: 1:    },
455: 1:    {
455: 1:      'answer': '140',
455: 1:      'question': '4',
455: 1:      'valid': true
455: 1:    },
455: 1:    {
455: 1:      'answer': '180',
455: 1:      'question': '5',
455: 1:      'valid': true
455: 1:    },
455: 1:    {
455: 1:      'answer': '220',
455: 1:      'question': '6',
455: 1:      'valid': true
455: 1:    },
455: 1:    {
455: 1:      'answer': '230',
455: 1:      'question': '7',
455: 1:      'valid': true
455: 1:    },
455: 1:    {
455: 1:      'answer': '270',
455: 1:      'question': '8',
455: 1:      'valid': true
455: 1:    }
455: 1:  ],
455: 1:  'info': [
455: 1:    '✅f(1) = 40',
455: 1:    '✅f(2) = 80',
455: 1:    '✅f(3) = 100',
455: 1:    '✅f(4) = 140',
455: 1:    '✅f(5) = 180',
455: 1:    '✅f(6) = 220',
455: 1:    '✅f(7) = 230',
455: 1:    '✅f(8) = 270',
455: 1:    '❌f(9) = ??? != 310'
455: 1:  ],
455: 1:  'level': 16,
455: 1:  'nextQuestion': '9',
455: 1:  'questions': [
455: 1:    '1',
455: 1:    '2',
455: 1:    '3',
455: 1:    '4',
455: 1:    '5',
455: 1:    '6',
455: 1:    '7',
455: 1:    '8',
455: 1:    '9'
455: 1:  ]
455: 1:}
455: 1:Scores: 25983
455: 1:Answer: message('['40', '80', '100', '140', '180', '220', '230', '270', '310']')
455: 1:Fire Event: PassTest{complexity=20, testCount=19}
------------------------------------------
456: 1:BoardData {
456: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
456: 1:  'expectedAnswer': '350',
456: 1:  'history': [
456: 1:    {
456: 1:      'answer': '40',
456: 1:      'question': '1',
456: 1:      'valid': true
456: 1:    },
456: 1:    {
456: 1:      'answer': '80',
456: 1:      'question': '2',
456: 1:      'valid': true
456: 1:    },
456: 1:    {
456: 1:      'answer': '100',
456: 1:      'question': '3',
456: 1:      'valid': true
456: 1:    },
456: 1:    {
456: 1:      'answer': '140',
456: 1:      'question': '4',
456: 1:      'valid': true
456: 1:    },
456: 1:    {
456: 1:      'answer': '180',
456: 1:      'question': '5',
456: 1:      'valid': true
456: 1:    },
456: 1:    {
456: 1:      'answer': '220',
456: 1:      'question': '6',
456: 1:      'valid': true
456: 1:    },
456: 1:    {
456: 1:      'answer': '230',
456: 1:      'question': '7',
456: 1:      'valid': true
456: 1:    },
456: 1:    {
456: 1:      'answer': '270',
456: 1:      'question': '8',
456: 1:      'valid': true
456: 1:    },
456: 1:    {
456: 1:      'answer': '310',
456: 1:      'question': '9',
456: 1:      'valid': true
456: 1:    }
456: 1:  ],
456: 1:  'info': [
456: 1:    '✅f(1) = 40',
456: 1:    '✅f(2) = 80',
456: 1:    '✅f(3) = 100',
456: 1:    '✅f(4) = 140',
456: 1:    '✅f(5) = 180',
456: 1:    '✅f(6) = 220',
456: 1:    '✅f(7) = 230',
456: 1:    '✅f(8) = 270',
456: 1:    '✅f(9) = 310',
456: 1:    '❌f(10) = ??? != 350'
456: 1:  ],
456: 1:  'level': 16,
456: 1:  'nextQuestion': '10',
456: 1:  'questions': [
456: 1:    '1',
456: 1:    '2',
456: 1:    '3',
456: 1:    '4',
456: 1:    '5',
456: 1:    '6',
456: 1:    '7',
456: 1:    '8',
456: 1:    '9',
456: 1:    '10'
456: 1:  ]
456: 1:}
456: 1:Scores: 25993
456: 1:Answer: message('['40', '80', '100', '140', '180', '220', '230', '270', '310', '350']')
456: 1:Fire Event: PassTest{complexity=20, testCount=19}
------------------------------------------
457: 1:BoardData {
457: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
457: 1:  'expectedAnswer': '830',
457: 1:  'history': [
457: 1:    {
457: 1:      'answer': '40',
457: 1:      'question': '1',
457: 1:      'valid': true
457: 1:    },
457: 1:    {
457: 1:      'answer': '80',
457: 1:      'question': '2',
457: 1:      'valid': true
457: 1:    },
457: 1:    {
457: 1:      'answer': '100',
457: 1:      'question': '3',
457: 1:      'valid': true
457: 1:    },
457: 1:    {
457: 1:      'answer': '140',
457: 1:      'question': '4',
457: 1:      'valid': true
457: 1:    },
457: 1:    {
457: 1:      'answer': '180',
457: 1:      'question': '5',
457: 1:      'valid': true
457: 1:    },
457: 1:    {
457: 1:      'answer': '220',
457: 1:      'question': '6',
457: 1:      'valid': true
457: 1:    },
457: 1:    {
457: 1:      'answer': '230',
457: 1:      'question': '7',
457: 1:      'valid': true
457: 1:    },
457: 1:    {
457: 1:      'answer': '270',
457: 1:      'question': '8',
457: 1:      'valid': true
457: 1:    },
457: 1:    {
457: 1:      'answer': '310',
457: 1:      'question': '9',
457: 1:      'valid': true
457: 1:    },
457: 1:    {
457: 1:      'answer': '350',
457: 1:      'question': '10',
457: 1:      'valid': true
457: 1:    }
457: 1:  ],
457: 1:  'info': [
457: 1:    '✅f(1) = 40',
457: 1:    '✅f(2) = 80',
457: 1:    '✅f(3) = 100',
457: 1:    '✅f(4) = 140',
457: 1:    '✅f(5) = 180',
457: 1:    '✅f(6) = 220',
457: 1:    '✅f(7) = 230',
457: 1:    '✅f(8) = 270',
457: 1:    '✅f(9) = 310',
457: 1:    '✅f(10) = 350',
457: 1:    '❌f(22) = ??? != 830'
457: 1:  ],
457: 1:  'level': 16,
457: 1:  'nextQuestion': '22',
457: 1:  'questions': [
457: 1:    '1',
457: 1:    '2',
457: 1:    '3',
457: 1:    '4',
457: 1:    '5',
457: 1:    '6',
457: 1:    '7',
457: 1:    '8',
457: 1:    '9',
457: 1:    '10',
457: 1:    '22'
457: 1:  ]
457: 1:}
457: 1:Scores: 26003
457: 1:Answer: message('['40', '80', '100', '140', '180', '220', '230', '270', '310', '350', '830']')
457: 1:Fire Event: PassTest{complexity=20, testCount=19}
------------------------------------------
458: 1:BoardData {
458: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
458: 1:  'expectedAnswer': '1270',
458: 1:  'history': [
458: 1:    {
458: 1:      'answer': '40',
458: 1:      'question': '1',
458: 1:      'valid': true
458: 1:    },
458: 1:    {
458: 1:      'answer': '80',
458: 1:      'question': '2',
458: 1:      'valid': true
458: 1:    },
458: 1:    {
458: 1:      'answer': '100',
458: 1:      'question': '3',
458: 1:      'valid': true
458: 1:    },
458: 1:    {
458: 1:      'answer': '140',
458: 1:      'question': '4',
458: 1:      'valid': true
458: 1:    },
458: 1:    {
458: 1:      'answer': '180',
458: 1:      'question': '5',
458: 1:      'valid': true
458: 1:    },
458: 1:    {
458: 1:      'answer': '220',
458: 1:      'question': '6',
458: 1:      'valid': true
458: 1:    },
458: 1:    {
458: 1:      'answer': '230',
458: 1:      'question': '7',
458: 1:      'valid': true
458: 1:    },
458: 1:    {
458: 1:      'answer': '270',
458: 1:      'question': '8',
458: 1:      'valid': true
458: 1:    },
458: 1:    {
458: 1:      'answer': '310',
458: 1:      'question': '9',
458: 1:      'valid': true
458: 1:    },
458: 1:    {
458: 1:      'answer': '350',
458: 1:      'question': '10',
458: 1:      'valid': true
458: 1:    },
458: 1:    {
458: 1:      'answer': '830',
458: 1:      'question': '22',
458: 1:      'valid': true
458: 1:    }
458: 1:  ],
458: 1:  'info': [
458: 1:    '✅f(1) = 40',
458: 1:    '✅f(2) = 80',
458: 1:    '✅f(3) = 100',
458: 1:    '✅f(4) = 140',
458: 1:    '✅f(5) = 180',
458: 1:    '✅f(6) = 220',
458: 1:    '✅f(7) = 230',
458: 1:    '✅f(8) = 270',
458: 1:    '✅f(9) = 310',
458: 1:    '✅f(10) = 350',
458: 1:    '✅f(22) = 830',
458: 1:    '❌f(33) = ??? != 1270'
458: 1:  ],
458: 1:  'level': 16,
458: 1:  'nextQuestion': '33',
458: 1:  'questions': [
458: 1:    '1',
458: 1:    '2',
458: 1:    '3',
458: 1:    '4',
458: 1:    '5',
458: 1:    '6',
458: 1:    '7',
458: 1:    '8',
458: 1:    '9',
458: 1:    '10',
458: 1:    '22',
458: 1:    '33'
458: 1:  ]
458: 1:}
458: 1:Scores: 26013
458: 1:Answer: message('['40', '80', '100', '140', '180', '220', '230', '270', '310', '350', '830', '1270']')
458: 1:Fire Event: PassTest{complexity=20, testCount=19}
------------------------------------------
459: 1:BoardData {
459: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
459: 1:  'expectedAnswer': '1710',
459: 1:  'history': [
459: 1:    {
459: 1:      'answer': '40',
459: 1:      'question': '1',
459: 1:      'valid': true
459: 1:    },
459: 1:    {
459: 1:      'answer': '80',
459: 1:      'question': '2',
459: 1:      'valid': true
459: 1:    },
459: 1:    {
459: 1:      'answer': '100',
459: 1:      'question': '3',
459: 1:      'valid': true
459: 1:    },
459: 1:    {
459: 1:      'answer': '140',
459: 1:      'question': '4',
459: 1:      'valid': true
459: 1:    },
459: 1:    {
459: 1:      'answer': '180',
459: 1:      'question': '5',
459: 1:      'valid': true
459: 1:    },
459: 1:    {
459: 1:      'answer': '220',
459: 1:      'question': '6',
459: 1:      'valid': true
459: 1:    },
459: 1:    {
459: 1:      'answer': '230',
459: 1:      'question': '7',
459: 1:      'valid': true
459: 1:    },
459: 1:    {
459: 1:      'answer': '270',
459: 1:      'question': '8',
459: 1:      'valid': true
459: 1:    },
459: 1:    {
459: 1:      'answer': '310',
459: 1:      'question': '9',
459: 1:      'valid': true
459: 1:    },
459: 1:    {
459: 1:      'answer': '350',
459: 1:      'question': '10',
459: 1:      'valid': true
459: 1:    },
459: 1:    {
459: 1:      'answer': '830',
459: 1:      'question': '22',
459: 1:      'valid': true
459: 1:    },
459: 1:    {
459: 1:      'answer': '1270',
459: 1:      'question': '33',
459: 1:      'valid': true
459: 1:    }
459: 1:  ],
459: 1:  'info': [
459: 1:    '✅f(1) = 40',
459: 1:    '✅f(2) = 80',
459: 1:    '✅f(3) = 100',
459: 1:    '✅f(4) = 140',
459: 1:    '✅f(5) = 180',
459: 1:    '✅f(6) = 220',
459: 1:    '✅f(7) = 230',
459: 1:    '✅f(8) = 270',
459: 1:    '✅f(9) = 310',
459: 1:    '✅f(10) = 350',
459: 1:    '✅f(22) = 830',
459: 1:    '✅f(33) = 1270',
459: 1:    '❌f(44) = ??? != 1710'
459: 1:  ],
459: 1:  'level': 16,
459: 1:  'nextQuestion': '44',
459: 1:  'questions': [
459: 1:    '1',
459: 1:    '2',
459: 1:    '3',
459: 1:    '4',
459: 1:    '5',
459: 1:    '6',
459: 1:    '7',
459: 1:    '8',
459: 1:    '9',
459: 1:    '10',
459: 1:    '22',
459: 1:    '33',
459: 1:    '44'
459: 1:  ]
459: 1:}
459: 1:Scores: 26023
459: 1:Answer: message('['40', '80', '100', '140', '180', '220', '230', '270', '310', '350', '830', '1270', '1710']')
459: 1:Fire Event: PassTest{complexity=20, testCount=19}
------------------------------------------
460: 1:BoardData {
460: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
460: 1:  'expectedAnswer': '2150',
460: 1:  'history': [
460: 1:    {
460: 1:      'answer': '40',
460: 1:      'question': '1',
460: 1:      'valid': true
460: 1:    },
460: 1:    {
460: 1:      'answer': '80',
460: 1:      'question': '2',
460: 1:      'valid': true
460: 1:    },
460: 1:    {
460: 1:      'answer': '100',
460: 1:      'question': '3',
460: 1:      'valid': true
460: 1:    },
460: 1:    {
460: 1:      'answer': '140',
460: 1:      'question': '4',
460: 1:      'valid': true
460: 1:    },
460: 1:    {
460: 1:      'answer': '180',
460: 1:      'question': '5',
460: 1:      'valid': true
460: 1:    },
460: 1:    {
460: 1:      'answer': '220',
460: 1:      'question': '6',
460: 1:      'valid': true
460: 1:    },
460: 1:    {
460: 1:      'answer': '230',
460: 1:      'question': '7',
460: 1:      'valid': true
460: 1:    },
460: 1:    {
460: 1:      'answer': '270',
460: 1:      'question': '8',
460: 1:      'valid': true
460: 1:    },
460: 1:    {
460: 1:      'answer': '310',
460: 1:      'question': '9',
460: 1:      'valid': true
460: 1:    },
460: 1:    {
460: 1:      'answer': '350',
460: 1:      'question': '10',
460: 1:      'valid': true
460: 1:    },
460: 1:    {
460: 1:      'answer': '830',
460: 1:      'question': '22',
460: 1:      'valid': true
460: 1:    },
460: 1:    {
460: 1:      'answer': '1270',
460: 1:      'question': '33',
460: 1:      'valid': true
460: 1:    },
460: 1:    {
460: 1:      'answer': '1710',
460: 1:      'question': '44',
460: 1:      'valid': true
460: 1:    }
460: 1:  ],
460: 1:  'info': [
460: 1:    '✅f(1) = 40',
460: 1:    '✅f(2) = 80',
460: 1:    '✅f(3) = 100',
460: 1:    '✅f(4) = 140',
460: 1:    '✅f(5) = 180',
460: 1:    '✅f(6) = 220',
460: 1:    '✅f(7) = 230',
460: 1:    '✅f(8) = 270',
460: 1:    '✅f(9) = 310',
460: 1:    '✅f(10) = 350',
460: 1:    '✅f(22) = 830',
460: 1:    '✅f(33) = 1270',
460: 1:    '✅f(44) = 1710',
460: 1:    '❌f(55) = ??? != 2150'
460: 1:  ],
460: 1:  'level': 16,
460: 1:  'nextQuestion': '55',
460: 1:  'questions': [
460: 1:    '1',
460: 1:    '2',
460: 1:    '3',
460: 1:    '4',
460: 1:    '5',
460: 1:    '6',
460: 1:    '7',
460: 1:    '8',
460: 1:    '9',
460: 1:    '10',
460: 1:    '22',
460: 1:    '33',
460: 1:    '44',
460: 1:    '55'
460: 1:  ]
460: 1:}
460: 1:Scores: 26033
460: 1:Answer: message('['40', '80', '100', '140', '180', '220', '230', '270', '310', '350', '830', '1270', '1710', '2150']')
460: 1:Fire Event: PassTest{complexity=20, testCount=19}
------------------------------------------
461: 1:BoardData {
461: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
461: 1:  'expectedAnswer': '2590',
461: 1:  'history': [
461: 1:    {
461: 1:      'answer': '40',
461: 1:      'question': '1',
461: 1:      'valid': true
461: 1:    },
461: 1:    {
461: 1:      'answer': '80',
461: 1:      'question': '2',
461: 1:      'valid': true
461: 1:    },
461: 1:    {
461: 1:      'answer': '100',
461: 1:      'question': '3',
461: 1:      'valid': true
461: 1:    },
461: 1:    {
461: 1:      'answer': '140',
461: 1:      'question': '4',
461: 1:      'valid': true
461: 1:    },
461: 1:    {
461: 1:      'answer': '180',
461: 1:      'question': '5',
461: 1:      'valid': true
461: 1:    },
461: 1:    {
461: 1:      'answer': '220',
461: 1:      'question': '6',
461: 1:      'valid': true
461: 1:    },
461: 1:    {
461: 1:      'answer': '230',
461: 1:      'question': '7',
461: 1:      'valid': true
461: 1:    },
461: 1:    {
461: 1:      'answer': '270',
461: 1:      'question': '8',
461: 1:      'valid': true
461: 1:    },
461: 1:    {
461: 1:      'answer': '310',
461: 1:      'question': '9',
461: 1:      'valid': true
461: 1:    },
461: 1:    {
461: 1:      'answer': '350',
461: 1:      'question': '10',
461: 1:      'valid': true
461: 1:    },
461: 1:    {
461: 1:      'answer': '830',
461: 1:      'question': '22',
461: 1:      'valid': true
461: 1:    },
461: 1:    {
461: 1:      'answer': '1270',
461: 1:      'question': '33',
461: 1:      'valid': true
461: 1:    },
461: 1:    {
461: 1:      'answer': '1710',
461: 1:      'question': '44',
461: 1:      'valid': true
461: 1:    },
461: 1:    {
461: 1:      'answer': '2150',
461: 1:      'question': '55',
461: 1:      'valid': true
461: 1:    }
461: 1:  ],
461: 1:  'info': [
461: 1:    '✅f(1) = 40',
461: 1:    '✅f(2) = 80',
461: 1:    '✅f(3) = 100',
461: 1:    '✅f(4) = 140',
461: 1:    '✅f(5) = 180',
461: 1:    '✅f(6) = 220',
461: 1:    '✅f(7) = 230',
461: 1:    '✅f(8) = 270',
461: 1:    '✅f(9) = 310',
461: 1:    '✅f(10) = 350',
461: 1:    '✅f(22) = 830',
461: 1:    '✅f(33) = 1270',
461: 1:    '✅f(44) = 1710',
461: 1:    '✅f(55) = 2150',
461: 1:    '❌f(66) = ??? != 2590'
461: 1:  ],
461: 1:  'level': 16,
461: 1:  'nextQuestion': '66',
461: 1:  'questions': [
461: 1:    '1',
461: 1:    '2',
461: 1:    '3',
461: 1:    '4',
461: 1:    '5',
461: 1:    '6',
461: 1:    '7',
461: 1:    '8',
461: 1:    '9',
461: 1:    '10',
461: 1:    '22',
461: 1:    '33',
461: 1:    '44',
461: 1:    '55',
461: 1:    '66'
461: 1:  ]
461: 1:}
461: 1:Scores: 26043
461: 1:Answer: message('['40', '80', '100', '140', '180', '220', '230', '270', '310', '350', '830', '1270', '1710', '2150', '2590']')
461: 1:Fire Event: PassTest{complexity=20, testCount=19}
------------------------------------------
462: 1:BoardData {
462: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
462: 1:  'expectedAnswer': '3030',
462: 1:  'history': [
462: 1:    {
462: 1:      'answer': '40',
462: 1:      'question': '1',
462: 1:      'valid': true
462: 1:    },
462: 1:    {
462: 1:      'answer': '80',
462: 1:      'question': '2',
462: 1:      'valid': true
462: 1:    },
462: 1:    {
462: 1:      'answer': '100',
462: 1:      'question': '3',
462: 1:      'valid': true
462: 1:    },
462: 1:    {
462: 1:      'answer': '140',
462: 1:      'question': '4',
462: 1:      'valid': true
462: 1:    },
462: 1:    {
462: 1:      'answer': '180',
462: 1:      'question': '5',
462: 1:      'valid': true
462: 1:    },
462: 1:    {
462: 1:      'answer': '220',
462: 1:      'question': '6',
462: 1:      'valid': true
462: 1:    },
462: 1:    {
462: 1:      'answer': '230',
462: 1:      'question': '7',
462: 1:      'valid': true
462: 1:    },
462: 1:    {
462: 1:      'answer': '270',
462: 1:      'question': '8',
462: 1:      'valid': true
462: 1:    },
462: 1:    {
462: 1:      'answer': '310',
462: 1:      'question': '9',
462: 1:      'valid': true
462: 1:    },
462: 1:    {
462: 1:      'answer': '350',
462: 1:      'question': '10',
462: 1:      'valid': true
462: 1:    },
462: 1:    {
462: 1:      'answer': '830',
462: 1:      'question': '22',
462: 1:      'valid': true
462: 1:    },
462: 1:    {
462: 1:      'answer': '1270',
462: 1:      'question': '33',
462: 1:      'valid': true
462: 1:    },
462: 1:    {
462: 1:      'answer': '1710',
462: 1:      'question': '44',
462: 1:      'valid': true
462: 1:    },
462: 1:    {
462: 1:      'answer': '2150',
462: 1:      'question': '55',
462: 1:      'valid': true
462: 1:    },
462: 1:    {
462: 1:      'answer': '2590',
462: 1:      'question': '66',
462: 1:      'valid': true
462: 1:    }
462: 1:  ],
462: 1:  'info': [
462: 1:    '✅f(1) = 40',
462: 1:    '✅f(2) = 80',
462: 1:    '✅f(3) = 100',
462: 1:    '✅f(4) = 140',
462: 1:    '✅f(5) = 180',
462: 1:    '✅f(6) = 220',
462: 1:    '✅f(7) = 230',
462: 1:    '✅f(8) = 270',
462: 1:    '✅f(9) = 310',
462: 1:    '✅f(10) = 350',
462: 1:    '✅f(22) = 830',
462: 1:    '✅f(33) = 1270',
462: 1:    '✅f(44) = 1710',
462: 1:    '✅f(55) = 2150',
462: 1:    '✅f(66) = 2590',
462: 1:    '❌f(77) = ??? != 3030'
462: 1:  ],
462: 1:  'level': 16,
462: 1:  'nextQuestion': '77',
462: 1:  'questions': [
462: 1:    '1',
462: 1:    '2',
462: 1:    '3',
462: 1:    '4',
462: 1:    '5',
462: 1:    '6',
462: 1:    '7',
462: 1:    '8',
462: 1:    '9',
462: 1:    '10',
462: 1:    '22',
462: 1:    '33',
462: 1:    '44',
462: 1:    '55',
462: 1:    '66',
462: 1:    '77'
462: 1:  ]
462: 1:}
462: 1:Scores: 26053
462: 1:Answer: message('['40', '80', '100', '140', '180', '220', '230', '270', '310', '350', '830', '1270', '1710', '2150', '2590', '3030']')
462: 1:Fire Event: PassTest{complexity=20, testCount=19}
------------------------------------------
463: 1:BoardData {
463: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
463: 1:  'expectedAnswer': '3470',
463: 1:  'history': [
463: 1:    {
463: 1:      'answer': '40',
463: 1:      'question': '1',
463: 1:      'valid': true
463: 1:    },
463: 1:    {
463: 1:      'answer': '80',
463: 1:      'question': '2',
463: 1:      'valid': true
463: 1:    },
463: 1:    {
463: 1:      'answer': '100',
463: 1:      'question': '3',
463: 1:      'valid': true
463: 1:    },
463: 1:    {
463: 1:      'answer': '140',
463: 1:      'question': '4',
463: 1:      'valid': true
463: 1:    },
463: 1:    {
463: 1:      'answer': '180',
463: 1:      'question': '5',
463: 1:      'valid': true
463: 1:    },
463: 1:    {
463: 1:      'answer': '220',
463: 1:      'question': '6',
463: 1:      'valid': true
463: 1:    },
463: 1:    {
463: 1:      'answer': '230',
463: 1:      'question': '7',
463: 1:      'valid': true
463: 1:    },
463: 1:    {
463: 1:      'answer': '270',
463: 1:      'question': '8',
463: 1:      'valid': true
463: 1:    },
463: 1:    {
463: 1:      'answer': '310',
463: 1:      'question': '9',
463: 1:      'valid': true
463: 1:    },
463: 1:    {
463: 1:      'answer': '350',
463: 1:      'question': '10',
463: 1:      'valid': true
463: 1:    },
463: 1:    {
463: 1:      'answer': '830',
463: 1:      'question': '22',
463: 1:      'valid': true
463: 1:    },
463: 1:    {
463: 1:      'answer': '1270',
463: 1:      'question': '33',
463: 1:      'valid': true
463: 1:    },
463: 1:    {
463: 1:      'answer': '1710',
463: 1:      'question': '44',
463: 1:      'valid': true
463: 1:    },
463: 1:    {
463: 1:      'answer': '2150',
463: 1:      'question': '55',
463: 1:      'valid': true
463: 1:    },
463: 1:    {
463: 1:      'answer': '2590',
463: 1:      'question': '66',
463: 1:      'valid': true
463: 1:    },
463: 1:    {
463: 1:      'answer': '3030',
463: 1:      'question': '77',
463: 1:      'valid': true
463: 1:    }
463: 1:  ],
463: 1:  'info': [
463: 1:    '✅f(1) = 40',
463: 1:    '✅f(2) = 80',
463: 1:    '✅f(3) = 100',
463: 1:    '✅f(4) = 140',
463: 1:    '✅f(5) = 180',
463: 1:    '✅f(6) = 220',
463: 1:    '✅f(7) = 230',
463: 1:    '✅f(8) = 270',
463: 1:    '✅f(9) = 310',
463: 1:    '✅f(10) = 350',
463: 1:    '✅f(22) = 830',
463: 1:    '✅f(33) = 1270',
463: 1:    '✅f(44) = 1710',
463: 1:    '✅f(55) = 2150',
463: 1:    '✅f(66) = 2590',
463: 1:    '✅f(77) = 3030',
463: 1:    '❌f(88) = ??? != 3470'
463: 1:  ],
463: 1:  'level': 16,
463: 1:  'nextQuestion': '88',
463: 1:  'questions': [
463: 1:    '1',
463: 1:    '2',
463: 1:    '3',
463: 1:    '4',
463: 1:    '5',
463: 1:    '6',
463: 1:    '7',
463: 1:    '8',
463: 1:    '9',
463: 1:    '10',
463: 1:    '22',
463: 1:    '33',
463: 1:    '44',
463: 1:    '55',
463: 1:    '66',
463: 1:    '77',
463: 1:    '88'
463: 1:  ]
463: 1:}
463: 1:Scores: 26063
463: 1:Answer: message('['40', '80', '100', '140', '180', '220', '230', '270', '310', '350', '830', '1270', '1710', '2150', '2590', '3030', '3470']')
463: 1:Fire Event: PassTest{complexity=20, testCount=19}
------------------------------------------
464: 1:BoardData {
464: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
464: 1:  'expectedAnswer': '3910',
464: 1:  'history': [
464: 1:    {
464: 1:      'answer': '40',
464: 1:      'question': '1',
464: 1:      'valid': true
464: 1:    },
464: 1:    {
464: 1:      'answer': '80',
464: 1:      'question': '2',
464: 1:      'valid': true
464: 1:    },
464: 1:    {
464: 1:      'answer': '100',
464: 1:      'question': '3',
464: 1:      'valid': true
464: 1:    },
464: 1:    {
464: 1:      'answer': '140',
464: 1:      'question': '4',
464: 1:      'valid': true
464: 1:    },
464: 1:    {
464: 1:      'answer': '180',
464: 1:      'question': '5',
464: 1:      'valid': true
464: 1:    },
464: 1:    {
464: 1:      'answer': '220',
464: 1:      'question': '6',
464: 1:      'valid': true
464: 1:    },
464: 1:    {
464: 1:      'answer': '230',
464: 1:      'question': '7',
464: 1:      'valid': true
464: 1:    },
464: 1:    {
464: 1:      'answer': '270',
464: 1:      'question': '8',
464: 1:      'valid': true
464: 1:    },
464: 1:    {
464: 1:      'answer': '310',
464: 1:      'question': '9',
464: 1:      'valid': true
464: 1:    },
464: 1:    {
464: 1:      'answer': '350',
464: 1:      'question': '10',
464: 1:      'valid': true
464: 1:    },
464: 1:    {
464: 1:      'answer': '830',
464: 1:      'question': '22',
464: 1:      'valid': true
464: 1:    },
464: 1:    {
464: 1:      'answer': '1270',
464: 1:      'question': '33',
464: 1:      'valid': true
464: 1:    },
464: 1:    {
464: 1:      'answer': '1710',
464: 1:      'question': '44',
464: 1:      'valid': true
464: 1:    },
464: 1:    {
464: 1:      'answer': '2150',
464: 1:      'question': '55',
464: 1:      'valid': true
464: 1:    },
464: 1:    {
464: 1:      'answer': '2590',
464: 1:      'question': '66',
464: 1:      'valid': true
464: 1:    },
464: 1:    {
464: 1:      'answer': '3030',
464: 1:      'question': '77',
464: 1:      'valid': true
464: 1:    },
464: 1:    {
464: 1:      'answer': '3470',
464: 1:      'question': '88',
464: 1:      'valid': true
464: 1:    }
464: 1:  ],
464: 1:  'info': [
464: 1:    '✅f(1) = 40',
464: 1:    '✅f(2) = 80',
464: 1:    '✅f(3) = 100',
464: 1:    '✅f(4) = 140',
464: 1:    '✅f(5) = 180',
464: 1:    '✅f(6) = 220',
464: 1:    '✅f(7) = 230',
464: 1:    '✅f(8) = 270',
464: 1:    '✅f(9) = 310',
464: 1:    '✅f(10) = 350',
464: 1:    '✅f(22) = 830',
464: 1:    '✅f(33) = 1270',
464: 1:    '✅f(44) = 1710',
464: 1:    '✅f(55) = 2150',
464: 1:    '✅f(66) = 2590',
464: 1:    '✅f(77) = 3030',
464: 1:    '✅f(88) = 3470',
464: 1:    '❌f(99) = ??? != 3910'
464: 1:  ],
464: 1:  'level': 16,
464: 1:  'nextQuestion': '99',
464: 1:  'questions': [
464: 1:    '1',
464: 1:    '2',
464: 1:    '3',
464: 1:    '4',
464: 1:    '5',
464: 1:    '6',
464: 1:    '7',
464: 1:    '8',
464: 1:    '9',
464: 1:    '10',
464: 1:    '22',
464: 1:    '33',
464: 1:    '44',
464: 1:    '55',
464: 1:    '66',
464: 1:    '77',
464: 1:    '88',
464: 1:    '99'
464: 1:  ]
464: 1:}
464: 1:Scores: 26073
464: 1:Answer: message('['40', '80', '100', '140', '180', '220', '230', '270', '310', '350', '830', '1270', '1710', '2150', '2590', '3030', '3470', '3910']')
464: 1:Fire Event: PassTest{complexity=20, testCount=19}
------------------------------------------
465: 1:BoardData {
465: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
465: 1:  'expectedAnswer': '3950',
465: 1:  'history': [
465: 1:    {
465: 1:      'answer': '40',
465: 1:      'question': '1',
465: 1:      'valid': true
465: 1:    },
465: 1:    {
465: 1:      'answer': '80',
465: 1:      'question': '2',
465: 1:      'valid': true
465: 1:    },
465: 1:    {
465: 1:      'answer': '100',
465: 1:      'question': '3',
465: 1:      'valid': true
465: 1:    },
465: 1:    {
465: 1:      'answer': '140',
465: 1:      'question': '4',
465: 1:      'valid': true
465: 1:    },
465: 1:    {
465: 1:      'answer': '180',
465: 1:      'question': '5',
465: 1:      'valid': true
465: 1:    },
465: 1:    {
465: 1:      'answer': '220',
465: 1:      'question': '6',
465: 1:      'valid': true
465: 1:    },
465: 1:    {
465: 1:      'answer': '230',
465: 1:      'question': '7',
465: 1:      'valid': true
465: 1:    },
465: 1:    {
465: 1:      'answer': '270',
465: 1:      'question': '8',
465: 1:      'valid': true
465: 1:    },
465: 1:    {
465: 1:      'answer': '310',
465: 1:      'question': '9',
465: 1:      'valid': true
465: 1:    },
465: 1:    {
465: 1:      'answer': '350',
465: 1:      'question': '10',
465: 1:      'valid': true
465: 1:    },
465: 1:    {
465: 1:      'answer': '830',
465: 1:      'question': '22',
465: 1:      'valid': true
465: 1:    },
465: 1:    {
465: 1:      'answer': '1270',
465: 1:      'question': '33',
465: 1:      'valid': true
465: 1:    },
465: 1:    {
465: 1:      'answer': '1710',
465: 1:      'question': '44',
465: 1:      'valid': true
465: 1:    },
465: 1:    {
465: 1:      'answer': '2150',
465: 1:      'question': '55',
465: 1:      'valid': true
465: 1:    },
465: 1:    {
465: 1:      'answer': '2590',
465: 1:      'question': '66',
465: 1:      'valid': true
465: 1:    },
465: 1:    {
465: 1:      'answer': '3030',
465: 1:      'question': '77',
465: 1:      'valid': true
465: 1:    },
465: 1:    {
465: 1:      'answer': '3470',
465: 1:      'question': '88',
465: 1:      'valid': true
465: 1:    },
465: 1:    {
465: 1:      'answer': '3910',
465: 1:      'question': '99',
465: 1:      'valid': true
465: 1:    }
465: 1:  ],
465: 1:  'info': [
465: 1:    '✅f(1) = 40',
465: 1:    '✅f(2) = 80',
465: 1:    '✅f(3) = 100',
465: 1:    '✅f(4) = 140',
465: 1:    '✅f(5) = 180',
465: 1:    '✅f(6) = 220',
465: 1:    '✅f(7) = 230',
465: 1:    '✅f(8) = 270',
465: 1:    '✅f(9) = 310',
465: 1:    '✅f(10) = 350',
465: 1:    '✅f(22) = 830',
465: 1:    '✅f(33) = 1270',
465: 1:    '✅f(44) = 1710',
465: 1:    '✅f(55) = 2150',
465: 1:    '✅f(66) = 2590',
465: 1:    '✅f(77) = 3030',
465: 1:    '✅f(88) = 3470',
465: 1:    '✅f(99) = 3910',
465: 1:    '❌f(100) = ??? != 3950'
465: 1:  ],
465: 1:  'level': 16,
465: 1:  'nextQuestion': '100',
465: 1:  'questions': [
465: 1:    '1',
465: 1:    '2',
465: 1:    '3',
465: 1:    '4',
465: 1:    '5',
465: 1:    '6',
465: 1:    '7',
465: 1:    '8',
465: 1:    '9',
465: 1:    '10',
465: 1:    '22',
465: 1:    '33',
465: 1:    '44',
465: 1:    '55',
465: 1:    '66',
465: 1:    '77',
465: 1:    '88',
465: 1:    '99',
465: 1:    '100'
465: 1:  ]
465: 1:}
465: 1:Scores: 26083
465: 1:Answer: message('['40', '80', '100', '140', '180', '220', '230', '270', '310', '350', '830', '1270', '1710', '2150', '2590', '3030', '3470', '3910', '3950']')
465: 1:Fire Event: PassTest{complexity=20, testCount=19}
465: 1:Fire Event: NextAlgorithm{complexity=20, time=0}
------------------------------------------
466: 1:BoardData {
466: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
466: 1:  'history': [
466: 1:    {
466: 1:      'answer': '40',
466: 1:      'question': '1',
466: 1:      'valid': true
466: 1:    },
466: 1:    {
466: 1:      'answer': '80',
466: 1:      'question': '2',
466: 1:      'valid': true
466: 1:    },
466: 1:    {
466: 1:      'answer': '100',
466: 1:      'question': '3',
466: 1:      'valid': true
466: 1:    },
466: 1:    {
466: 1:      'answer': '140',
466: 1:      'question': '4',
466: 1:      'valid': true
466: 1:    },
466: 1:    {
466: 1:      'answer': '180',
466: 1:      'question': '5',
466: 1:      'valid': true
466: 1:    },
466: 1:    {
466: 1:      'answer': '220',
466: 1:      'question': '6',
466: 1:      'valid': true
466: 1:    },
466: 1:    {
466: 1:      'answer': '230',
466: 1:      'question': '7',
466: 1:      'valid': true
466: 1:    },
466: 1:    {
466: 1:      'answer': '270',
466: 1:      'question': '8',
466: 1:      'valid': true
466: 1:    },
466: 1:    {
466: 1:      'answer': '310',
466: 1:      'question': '9',
466: 1:      'valid': true
466: 1:    },
466: 1:    {
466: 1:      'answer': '350',
466: 1:      'question': '10',
466: 1:      'valid': true
466: 1:    },
466: 1:    {
466: 1:      'answer': '830',
466: 1:      'question': '22',
466: 1:      'valid': true
466: 1:    },
466: 1:    {
466: 1:      'answer': '1270',
466: 1:      'question': '33',
466: 1:      'valid': true
466: 1:    },
466: 1:    {
466: 1:      'answer': '1710',
466: 1:      'question': '44',
466: 1:      'valid': true
466: 1:    },
466: 1:    {
466: 1:      'answer': '2150',
466: 1:      'question': '55',
466: 1:      'valid': true
466: 1:    },
466: 1:    {
466: 1:      'answer': '2590',
466: 1:      'question': '66',
466: 1:      'valid': true
466: 1:    },
466: 1:    {
466: 1:      'answer': '3030',
466: 1:      'question': '77',
466: 1:      'valid': true
466: 1:    },
466: 1:    {
466: 1:      'answer': '3470',
466: 1:      'question': '88',
466: 1:      'valid': true
466: 1:    },
466: 1:    {
466: 1:      'answer': '3910',
466: 1:      'question': '99',
466: 1:      'valid': true
466: 1:    },
466: 1:    {
466: 1:      'answer': '3950',
466: 1:      'question': '100',
466: 1:      'valid': true
466: 1:    }
466: 1:  ],
466: 1:  'info': [
466: 1:    '✅f(1) = 40',
466: 1:    '✅f(2) = 80',
466: 1:    '✅f(3) = 100',
466: 1:    '✅f(4) = 140',
466: 1:    '✅f(5) = 180',
466: 1:    '✅f(6) = 220',
466: 1:    '✅f(7) = 230',
466: 1:    '✅f(8) = 270',
466: 1:    '✅f(9) = 310',
466: 1:    '✅f(10) = 350',
466: 1:    '✅f(22) = 830',
466: 1:    '✅f(33) = 1270',
466: 1:    '✅f(44) = 1710',
466: 1:    '✅f(55) = 2150',
466: 1:    '✅f(66) = 2590',
466: 1:    '✅f(77) = 3030',
466: 1:    '✅f(88) = 3470',
466: 1:    '✅f(99) = 3910',
466: 1:    '✅f(100) = 3950'
466: 1:  ],
466: 1:  'level': 16,
466: 1:  'questions': []
466: 1:}
466: 1:Scores: 28792
466: 1:Answer: message('StartNextLevel')
466: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
467: 1:BoardData {
467: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
467: 1:  'expectedAnswer': 'a',
467: 1:  'history': [],
467: 1:  'info': ['❌f(a) = ??? != a'],
467: 1:  'level': 17,
467: 1:  'nextQuestion': 'a',
467: 1:  'questions': ['a']
467: 1:}
467: 1:Scores: 28792
467: 1:Answer: message('['a']')
467: 1:Fire Event: PassTest{complexity=21, testCount=24}
------------------------------------------
468: 1:BoardData {
468: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
468: 1:  'expectedAnswer': 'abc',
468: 1:  'history': [{
468: 1:    'answer': 'a',
468: 1:    'question': 'a',
468: 1:    'valid': true
468: 1:  }],
468: 1:  'info': [
468: 1:    '✅f(a) = a',
468: 1:    '❌f(abc) = ??? != abc'
468: 1:  ],
468: 1:  'level': 17,
468: 1:  'nextQuestion': 'abc',
468: 1:  'questions': [
468: 1:    'a',
468: 1:    'abc'
468: 1:  ]
468: 1:}
468: 1:Scores: 28800
468: 1:Answer: message('['a', 'abc']')
468: 1:Fire Event: PassTest{complexity=21, testCount=24}
------------------------------------------
469: 1:BoardData {
469: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
469: 1:  'expectedAnswer': 'abcba',
469: 1:  'history': [
469: 1:    {
469: 1:      'answer': 'a',
469: 1:      'question': 'a',
469: 1:      'valid': true
469: 1:    },
469: 1:    {
469: 1:      'answer': 'abc',
469: 1:      'question': 'abc',
469: 1:      'valid': true
469: 1:    }
469: 1:  ],
469: 1:  'info': [
469: 1:    '✅f(a) = a',
469: 1:    '✅f(abc) = abc',
469: 1:    '❌f(abcba) = ??? != abcba'
469: 1:  ],
469: 1:  'level': 17,
469: 1:  'nextQuestion': 'abcba',
469: 1:  'questions': [
469: 1:    'a',
469: 1:    'abc',
469: 1:    'abcba'
469: 1:  ]
469: 1:}
469: 1:Scores: 28808
469: 1:Answer: message('['a', 'abc', 'abcba']')
469: 1:Fire Event: PassTest{complexity=21, testCount=24}
------------------------------------------
470: 1:BoardData {
470: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
470: 1:  'expectedAnswer': '',
470: 1:  'history': [
470: 1:    {
470: 1:      'answer': 'a',
470: 1:      'question': 'a',
470: 1:      'valid': true
470: 1:    },
470: 1:    {
470: 1:      'answer': 'abc',
470: 1:      'question': 'abc',
470: 1:      'valid': true
470: 1:    },
470: 1:    {
470: 1:      'answer': 'abcba',
470: 1:      'question': 'abcba',
470: 1:      'valid': true
470: 1:    }
470: 1:  ],
470: 1:  'info': [
470: 1:    '✅f(a) = a',
470: 1:    '✅f(abc) = abc',
470: 1:    '✅f(abcba) = abcba',
470: 1:    '❌f(aa) = ??? != '
470: 1:  ],
470: 1:  'level': 17,
470: 1:  'nextQuestion': 'aa',
470: 1:  'questions': [
470: 1:    'a',
470: 1:    'abc',
470: 1:    'abcba',
470: 1:    'aa'
470: 1:  ]
470: 1:}
470: 1:Scores: 28816
470: 1:Answer: message('['a', 'abc', 'abcba', '']')
470: 1:Fire Event: PassTest{complexity=21, testCount=24}
------------------------------------------
471: 1:BoardData {
471: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
471: 1:  'expectedAnswer': '',
471: 1:  'history': [
471: 1:    {
471: 1:      'answer': 'a',
471: 1:      'question': 'a',
471: 1:      'valid': true
471: 1:    },
471: 1:    {
471: 1:      'answer': 'abc',
471: 1:      'question': 'abc',
471: 1:      'valid': true
471: 1:    },
471: 1:    {
471: 1:      'answer': 'abcba',
471: 1:      'question': 'abcba',
471: 1:      'valid': true
471: 1:    },
471: 1:    {
471: 1:      'answer': '',
471: 1:      'question': 'aa',
471: 1:      'valid': true
471: 1:    }
471: 1:  ],
471: 1:  'info': [
471: 1:    '✅f(a) = a',
471: 1:    '✅f(abc) = abc',
471: 1:    '✅f(abcba) = abcba',
471: 1:    '✅f(aa) = ',
471: 1:    '❌f(aaaa) = ??? != '
471: 1:  ],
471: 1:  'level': 17,
471: 1:  'nextQuestion': 'aaaa',
471: 1:  'questions': [
471: 1:    'a',
471: 1:    'abc',
471: 1:    'abcba',
471: 1:    'aa',
471: 1:    'aaaa'
471: 1:  ]
471: 1:}
471: 1:Scores: 28824
471: 1:Answer: message('['a', 'abc', 'abcba', '', '']')
471: 1:Fire Event: PassTest{complexity=21, testCount=24}
------------------------------------------
472: 1:BoardData {
472: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
472: 1:  'expectedAnswer': 'b',
472: 1:  'history': [
472: 1:    {
472: 1:      'answer': 'a',
472: 1:      'question': 'a',
472: 1:      'valid': true
472: 1:    },
472: 1:    {
472: 1:      'answer': 'abc',
472: 1:      'question': 'abc',
472: 1:      'valid': true
472: 1:    },
472: 1:    {
472: 1:      'answer': 'abcba',
472: 1:      'question': 'abcba',
472: 1:      'valid': true
472: 1:    },
472: 1:    {
472: 1:      'answer': '',
472: 1:      'question': 'aa',
472: 1:      'valid': true
472: 1:    },
472: 1:    {
472: 1:      'answer': '',
472: 1:      'question': 'aaaa',
472: 1:      'valid': true
472: 1:    }
472: 1:  ],
472: 1:  'info': [
472: 1:    '✅f(a) = a',
472: 1:    '✅f(abc) = abc',
472: 1:    '✅f(abcba) = abcba',
472: 1:    '✅f(aa) = ',
472: 1:    '✅f(aaaa) = ',
472: 1:    '❌f(aaabaa) = ??? != b'
472: 1:  ],
472: 1:  'level': 17,
472: 1:  'nextQuestion': 'aaabaa',
472: 1:  'questions': [
472: 1:    'a',
472: 1:    'abc',
472: 1:    'abcba',
472: 1:    'aa',
472: 1:    'aaaa',
472: 1:    'aaabaa'
472: 1:  ]
472: 1:}
472: 1:Scores: 28832
472: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b']')
472: 1:Fire Event: PassTest{complexity=21, testCount=24}
------------------------------------------
473: 1:BoardData {
473: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
473: 1:  'expectedAnswer': 'b',
473: 1:  'history': [
473: 1:    {
473: 1:      'answer': 'a',
473: 1:      'question': 'a',
473: 1:      'valid': true
473: 1:    },
473: 1:    {
473: 1:      'answer': 'abc',
473: 1:      'question': 'abc',
473: 1:      'valid': true
473: 1:    },
473: 1:    {
473: 1:      'answer': 'abcba',
473: 1:      'question': 'abcba',
473: 1:      'valid': true
473: 1:    },
473: 1:    {
473: 1:      'answer': '',
473: 1:      'question': 'aa',
473: 1:      'valid': true
473: 1:    },
473: 1:    {
473: 1:      'answer': '',
473: 1:      'question': 'aaaa',
473: 1:      'valid': true
473: 1:    },
473: 1:    {
473: 1:      'answer': 'b',
473: 1:      'question': 'aaabaa',
473: 1:      'valid': true
473: 1:    }
473: 1:  ],
473: 1:  'info': [
473: 1:    '✅f(a) = a',
473: 1:    '✅f(abc) = abc',
473: 1:    '✅f(abcba) = abcba',
473: 1:    '✅f(aa) = ',
473: 1:    '✅f(aaaa) = ',
473: 1:    '✅f(aaabaa) = b',
473: 1:    '❌f(aabaaa) = ??? != b'
473: 1:  ],
473: 1:  'level': 17,
473: 1:  'nextQuestion': 'aabaaa',
473: 1:  'questions': [
473: 1:    'a',
473: 1:    'abc',
473: 1:    'abcba',
473: 1:    'aa',
473: 1:    'aaaa',
473: 1:    'aaabaa',
473: 1:    'aabaaa'
473: 1:  ]
473: 1:}
473: 1:Scores: 28840
473: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b']')
473: 1:Fire Event: PassTest{complexity=21, testCount=24}
------------------------------------------
474: 1:BoardData {
474: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
474: 1:  'expectedAnswer': 'ab',
474: 1:  'history': [
474: 1:    {
474: 1:      'answer': 'a',
474: 1:      'question': 'a',
474: 1:      'valid': true
474: 1:    },
474: 1:    {
474: 1:      'answer': 'abc',
474: 1:      'question': 'abc',
474: 1:      'valid': true
474: 1:    },
474: 1:    {
474: 1:      'answer': 'abcba',
474: 1:      'question': 'abcba',
474: 1:      'valid': true
474: 1:    },
474: 1:    {
474: 1:      'answer': '',
474: 1:      'question': 'aa',
474: 1:      'valid': true
474: 1:    },
474: 1:    {
474: 1:      'answer': '',
474: 1:      'question': 'aaaa',
474: 1:      'valid': true
474: 1:    },
474: 1:    {
474: 1:      'answer': 'b',
474: 1:      'question': 'aaabaa',
474: 1:      'valid': true
474: 1:    },
474: 1:    {
474: 1:      'answer': 'b',
474: 1:      'question': 'aabaaa',
474: 1:      'valid': true
474: 1:    }
474: 1:  ],
474: 1:  'info': [
474: 1:    '✅f(a) = a',
474: 1:    '✅f(abc) = abc',
474: 1:    '✅f(abcba) = abcba',
474: 1:    '✅f(aa) = ',
474: 1:    '✅f(aaaa) = ',
474: 1:    '✅f(aaabaa) = b',
474: 1:    '✅f(aabaaa) = b',
474: 1:    '❌f(abaa) = ??? != ab'
474: 1:  ],
474: 1:  'level': 17,
474: 1:  'nextQuestion': 'abaa',
474: 1:  'questions': [
474: 1:    'a',
474: 1:    'abc',
474: 1:    'abcba',
474: 1:    'aa',
474: 1:    'aaaa',
474: 1:    'aaabaa',
474: 1:    'aabaaa',
474: 1:    'abaa'
474: 1:  ]
474: 1:}
474: 1:Scores: 28848
474: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab']')
474: 1:Fire Event: PassTest{complexity=21, testCount=24}
------------------------------------------
475: 1:BoardData {
475: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
475: 1:  'expectedAnswer': '',
475: 1:  'history': [
475: 1:    {
475: 1:      'answer': 'a',
475: 1:      'question': 'a',
475: 1:      'valid': true
475: 1:    },
475: 1:    {
475: 1:      'answer': 'abc',
475: 1:      'question': 'abc',
475: 1:      'valid': true
475: 1:    },
475: 1:    {
475: 1:      'answer': 'abcba',
475: 1:      'question': 'abcba',
475: 1:      'valid': true
475: 1:    },
475: 1:    {
475: 1:      'answer': '',
475: 1:      'question': 'aa',
475: 1:      'valid': true
475: 1:    },
475: 1:    {
475: 1:      'answer': '',
475: 1:      'question': 'aaaa',
475: 1:      'valid': true
475: 1:    },
475: 1:    {
475: 1:      'answer': 'b',
475: 1:      'question': 'aaabaa',
475: 1:      'valid': true
475: 1:    },
475: 1:    {
475: 1:      'answer': 'b',
475: 1:      'question': 'aabaaa',
475: 1:      'valid': true
475: 1:    },
475: 1:    {
475: 1:      'answer': 'ab',
475: 1:      'question': 'abaa',
475: 1:      'valid': true
475: 1:    }
475: 1:  ],
475: 1:  'info': [
475: 1:    '✅f(a) = a',
475: 1:    '✅f(abc) = abc',
475: 1:    '✅f(abcba) = abcba',
475: 1:    '✅f(aa) = ',
475: 1:    '✅f(aaaa) = ',
475: 1:    '✅f(aaabaa) = b',
475: 1:    '✅f(aabaaa) = b',
475: 1:    '✅f(abaa) = ab',
475: 1:    '❌f(abba) = ??? != '
475: 1:  ],
475: 1:  'level': 17,
475: 1:  'nextQuestion': 'abba',
475: 1:  'questions': [
475: 1:    'a',
475: 1:    'abc',
475: 1:    'abcba',
475: 1:    'aa',
475: 1:    'aaaa',
475: 1:    'aaabaa',
475: 1:    'aabaaa',
475: 1:    'abaa',
475: 1:    'abba'
475: 1:  ]
475: 1:}
475: 1:Scores: 28856
475: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '']')
475: 1:Fire Event: PassTest{complexity=21, testCount=24}
------------------------------------------
476: 1:BoardData {
476: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
476: 1:  'expectedAnswer': '',
476: 1:  'history': [
476: 1:    {
476: 1:      'answer': 'a',
476: 1:      'question': 'a',
476: 1:      'valid': true
476: 1:    },
476: 1:    {
476: 1:      'answer': 'abc',
476: 1:      'question': 'abc',
476: 1:      'valid': true
476: 1:    },
476: 1:    {
476: 1:      'answer': 'abcba',
476: 1:      'question': 'abcba',
476: 1:      'valid': true
476: 1:    },
476: 1:    {
476: 1:      'answer': '',
476: 1:      'question': 'aa',
476: 1:      'valid': true
476: 1:    },
476: 1:    {
476: 1:      'answer': '',
476: 1:      'question': 'aaaa',
476: 1:      'valid': true
476: 1:    },
476: 1:    {
476: 1:      'answer': 'b',
476: 1:      'question': 'aaabaa',
476: 1:      'valid': true
476: 1:    },
476: 1:    {
476: 1:      'answer': 'b',
476: 1:      'question': 'aabaaa',
476: 1:      'valid': true
476: 1:    },
476: 1:    {
476: 1:      'answer': 'ab',
476: 1:      'question': 'abaa',
476: 1:      'valid': true
476: 1:    },
476: 1:    {
476: 1:      'answer': '',
476: 1:      'question': 'abba',
476: 1:      'valid': true
476: 1:    }
476: 1:  ],
476: 1:  'info': [
476: 1:    '✅f(a) = a',
476: 1:    '✅f(abc) = abc',
476: 1:    '✅f(abcba) = abcba',
476: 1:    '✅f(aa) = ',
476: 1:    '✅f(aaaa) = ',
476: 1:    '✅f(aaabaa) = b',
476: 1:    '✅f(aabaaa) = b',
476: 1:    '✅f(abaa) = ab',
476: 1:    '✅f(abba) = ',
476: 1:    '❌f(abbaaa) = ??? != '
476: 1:  ],
476: 1:  'level': 17,
476: 1:  'nextQuestion': 'abbaaa',
476: 1:  'questions': [
476: 1:    'a',
476: 1:    'abc',
476: 1:    'abcba',
476: 1:    'aa',
476: 1:    'aaaa',
476: 1:    'aaabaa',
476: 1:    'aabaaa',
476: 1:    'abaa',
476: 1:    'abba',
476: 1:    'abbaaa'
476: 1:  ]
476: 1:}
476: 1:Scores: 28864
476: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '']')
476: 1:Fire Event: PassTest{complexity=21, testCount=24}
------------------------------------------
477: 1:BoardData {
477: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
477: 1:  'expectedAnswer': '',
477: 1:  'history': [
477: 1:    {
477: 1:      'answer': 'a',
477: 1:      'question': 'a',
477: 1:      'valid': true
477: 1:    },
477: 1:    {
477: 1:      'answer': 'abc',
477: 1:      'question': 'abc',
477: 1:      'valid': true
477: 1:    },
477: 1:    {
477: 1:      'answer': 'abcba',
477: 1:      'question': 'abcba',
477: 1:      'valid': true
477: 1:    },
477: 1:    {
477: 1:      'answer': '',
477: 1:      'question': 'aa',
477: 1:      'valid': true
477: 1:    },
477: 1:    {
477: 1:      'answer': '',
477: 1:      'question': 'aaaa',
477: 1:      'valid': true
477: 1:    },
477: 1:    {
477: 1:      'answer': 'b',
477: 1:      'question': 'aaabaa',
477: 1:      'valid': true
477: 1:    },
477: 1:    {
477: 1:      'answer': 'b',
477: 1:      'question': 'aabaaa',
477: 1:      'valid': true
477: 1:    },
477: 1:    {
477: 1:      'answer': 'ab',
477: 1:      'question': 'abaa',
477: 1:      'valid': true
477: 1:    },
477: 1:    {
477: 1:      'answer': '',
477: 1:      'question': 'abba',
477: 1:      'valid': true
477: 1:    },
477: 1:    {
477: 1:      'answer': '',
477: 1:      'question': 'abbaaa',
477: 1:      'valid': true
477: 1:    }
477: 1:  ],
477: 1:  'info': [
477: 1:    '✅f(a) = a',
477: 1:    '✅f(abc) = abc',
477: 1:    '✅f(abcba) = abcba',
477: 1:    '✅f(aa) = ',
477: 1:    '✅f(aaaa) = ',
477: 1:    '✅f(aaabaa) = b',
477: 1:    '✅f(aabaaa) = b',
477: 1:    '✅f(abaa) = ab',
477: 1:    '✅f(abba) = ',
477: 1:    '✅f(abbaaa) = ',
477: 1:    '❌f(abcdeedcba) = ??? != '
477: 1:  ],
477: 1:  'level': 17,
477: 1:  'nextQuestion': 'abcdeedcba',
477: 1:  'questions': [
477: 1:    'a',
477: 1:    'abc',
477: 1:    'abcba',
477: 1:    'aa',
477: 1:    'aaaa',
477: 1:    'aaabaa',
477: 1:    'aabaaa',
477: 1:    'abaa',
477: 1:    'abba',
477: 1:    'abbaaa',
477: 1:    'abcdeedcba'
477: 1:  ]
477: 1:}
477: 1:Scores: 28872
477: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '', '']')
477: 1:Fire Event: PassTest{complexity=21, testCount=24}
------------------------------------------
478: 1:BoardData {
478: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
478: 1:  'expectedAnswer': 'abcde',
478: 1:  'history': [
478: 1:    {
478: 1:      'answer': 'a',
478: 1:      'question': 'a',
478: 1:      'valid': true
478: 1:    },
478: 1:    {
478: 1:      'answer': 'abc',
478: 1:      'question': 'abc',
478: 1:      'valid': true
478: 1:    },
478: 1:    {
478: 1:      'answer': 'abcba',
478: 1:      'question': 'abcba',
478: 1:      'valid': true
478: 1:    },
478: 1:    {
478: 1:      'answer': '',
478: 1:      'question': 'aa',
478: 1:      'valid': true
478: 1:    },
478: 1:    {
478: 1:      'answer': '',
478: 1:      'question': 'aaaa',
478: 1:      'valid': true
478: 1:    },
478: 1:    {
478: 1:      'answer': 'b',
478: 1:      'question': 'aaabaa',
478: 1:      'valid': true
478: 1:    },
478: 1:    {
478: 1:      'answer': 'b',
478: 1:      'question': 'aabaaa',
478: 1:      'valid': true
478: 1:    },
478: 1:    {
478: 1:      'answer': 'ab',
478: 1:      'question': 'abaa',
478: 1:      'valid': true
478: 1:    },
478: 1:    {
478: 1:      'answer': '',
478: 1:      'question': 'abba',
478: 1:      'valid': true
478: 1:    },
478: 1:    {
478: 1:      'answer': '',
478: 1:      'question': 'abbaaa',
478: 1:      'valid': true
478: 1:    },
478: 1:    {
478: 1:      'answer': '',
478: 1:      'question': 'abcdeedcba',
478: 1:      'valid': true
478: 1:    }
478: 1:  ],
478: 1:  'info': [
478: 1:    '✅f(a) = a',
478: 1:    '✅f(abc) = abc',
478: 1:    '✅f(abcba) = abcba',
478: 1:    '✅f(aa) = ',
478: 1:    '✅f(aaaa) = ',
478: 1:    '✅f(aaabaa) = b',
478: 1:    '✅f(aabaaa) = b',
478: 1:    '✅f(abaa) = ab',
478: 1:    '✅f(abba) = ',
478: 1:    '✅f(abbaaa) = ',
478: 1:    '✅f(abcdeedcba) = ',
478: 1:    '❌f(bcdeeedcbabcde) = ??? != abcde'
478: 1:  ],
478: 1:  'level': 17,
478: 1:  'nextQuestion': 'bcdeeedcbabcde',
478: 1:  'questions': [
478: 1:    'a',
478: 1:    'abc',
478: 1:    'abcba',
478: 1:    'aa',
478: 1:    'aaaa',
478: 1:    'aaabaa',
478: 1:    'aabaaa',
478: 1:    'abaa',
478: 1:    'abba',
478: 1:    'abbaaa',
478: 1:    'abcdeedcba',
478: 1:    'bcdeeedcbabcde'
478: 1:  ]
478: 1:}
478: 1:Scores: 28880
478: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '', '', 'abcde']')
478: 1:Fire Event: PassTest{complexity=21, testCount=24}
------------------------------------------
479: 1:BoardData {
479: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
479: 1:  'expectedAnswer': '',
479: 1:  'history': [
479: 1:    {
479: 1:      'answer': 'a',
479: 1:      'question': 'a',
479: 1:      'valid': true
479: 1:    },
479: 1:    {
479: 1:      'answer': 'abc',
479: 1:      'question': 'abc',
479: 1:      'valid': true
479: 1:    },
479: 1:    {
479: 1:      'answer': 'abcba',
479: 1:      'question': 'abcba',
479: 1:      'valid': true
479: 1:    },
479: 1:    {
479: 1:      'answer': '',
479: 1:      'question': 'aa',
479: 1:      'valid': true
479: 1:    },
479: 1:    {
479: 1:      'answer': '',
479: 1:      'question': 'aaaa',
479: 1:      'valid': true
479: 1:    },
479: 1:    {
479: 1:      'answer': 'b',
479: 1:      'question': 'aaabaa',
479: 1:      'valid': true
479: 1:    },
479: 1:    {
479: 1:      'answer': 'b',
479: 1:      'question': 'aabaaa',
479: 1:      'valid': true
479: 1:    },
479: 1:    {
479: 1:      'answer': 'ab',
479: 1:      'question': 'abaa',
479: 1:      'valid': true
479: 1:    },
479: 1:    {
479: 1:      'answer': '',
479: 1:      'question': 'abba',
479: 1:      'valid': true
479: 1:    },
479: 1:    {
479: 1:      'answer': '',
479: 1:      'question': 'abbaaa',
479: 1:      'valid': true
479: 1:    },
479: 1:    {
479: 1:      'answer': '',
479: 1:      'question': 'abcdeedcba',
479: 1:      'valid': true
479: 1:    },
479: 1:    {
479: 1:      'answer': 'abcde',
479: 1:      'question': 'bcdeeedcbabcde',
479: 1:      'valid': true
479: 1:    }
479: 1:  ],
479: 1:  'info': [
479: 1:    '✅f(a) = a',
479: 1:    '✅f(abc) = abc',
479: 1:    '✅f(abcba) = abcba',
479: 1:    '✅f(aa) = ',
479: 1:    '✅f(aaaa) = ',
479: 1:    '✅f(aaabaa) = b',
479: 1:    '✅f(aabaaa) = b',
479: 1:    '✅f(abaa) = ab',
479: 1:    '✅f(abba) = ',
479: 1:    '✅f(abbaaa) = ',
479: 1:    '✅f(abcdeedcba) = ',
479: 1:    '✅f(bcdeeedcbabcde) = abcde',
479: 1:    '❌f(fffkkhhffzzhhkkkzzrrrrryyy) = ??? != '
479: 1:  ],
479: 1:  'level': 17,
479: 1:  'nextQuestion': 'fffkkhhffzzhhkkkzzrrrrryyy',
479: 1:  'questions': [
479: 1:    'a',
479: 1:    'abc',
479: 1:    'abcba',
479: 1:    'aa',
479: 1:    'aaaa',
479: 1:    'aaabaa',
479: 1:    'aabaaa',
479: 1:    'abaa',
479: 1:    'abba',
479: 1:    'abbaaa',
479: 1:    'abcdeedcba',
479: 1:    'bcdeeedcbabcde',
479: 1:    'fffkkhhffzzhhkkkzzrrrrryyy'
479: 1:  ]
479: 1:}
479: 1:Scores: 28888
479: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '', '', 'abcde', '']')
479: 1:Fire Event: PassTest{complexity=21, testCount=24}
------------------------------------------
480: 1:BoardData {
480: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
480: 1:  'expectedAnswer': 'bgro',
480: 1:  'history': [
480: 1:    {
480: 1:      'answer': 'a',
480: 1:      'question': 'a',
480: 1:      'valid': true
480: 1:    },
480: 1:    {
480: 1:      'answer': 'abc',
480: 1:      'question': 'abc',
480: 1:      'valid': true
480: 1:    },
480: 1:    {
480: 1:      'answer': 'abcba',
480: 1:      'question': 'abcba',
480: 1:      'valid': true
480: 1:    },
480: 1:    {
480: 1:      'answer': '',
480: 1:      'question': 'aa',
480: 1:      'valid': true
480: 1:    },
480: 1:    {
480: 1:      'answer': '',
480: 1:      'question': 'aaaa',
480: 1:      'valid': true
480: 1:    },
480: 1:    {
480: 1:      'answer': 'b',
480: 1:      'question': 'aaabaa',
480: 1:      'valid': true
480: 1:    },
480: 1:    {
480: 1:      'answer': 'b',
480: 1:      'question': 'aabaaa',
480: 1:      'valid': true
480: 1:    },
480: 1:    {
480: 1:      'answer': 'ab',
480: 1:      'question': 'abaa',
480: 1:      'valid': true
480: 1:    },
480: 1:    {
480: 1:      'answer': '',
480: 1:      'question': 'abba',
480: 1:      'valid': true
480: 1:    },
480: 1:    {
480: 1:      'answer': '',
480: 1:      'question': 'abbaaa',
480: 1:      'valid': true
480: 1:    },
480: 1:    {
480: 1:      'answer': '',
480: 1:      'question': 'abcdeedcba',
480: 1:      'valid': true
480: 1:    },
480: 1:    {
480: 1:      'answer': 'abcde',
480: 1:      'question': 'bcdeeedcbabcde',
480: 1:      'valid': true
480: 1:    },
480: 1:    {
480: 1:      'answer': '',
480: 1:      'question': 'fffkkhhffzzhhkkkzzrrrrryyy',
480: 1:      'valid': true
480: 1:    }
480: 1:  ],
480: 1:  'info': [
480: 1:    '✅f(a) = a',
480: 1:    '✅f(abc) = abc',
480: 1:    '✅f(abcba) = abcba',
480: 1:    '✅f(aa) = ',
480: 1:    '✅f(aaaa) = ',
480: 1:    '✅f(aaabaa) = b',
480: 1:    '✅f(aabaaa) = b',
480: 1:    '✅f(abaa) = ab',
480: 1:    '✅f(abba) = ',
480: 1:    '✅f(abbaaa) = ',
480: 1:    '✅f(abcdeedcba) = ',
480: 1:    '✅f(bcdeeedcbabcde) = abcde',
480: 1:    '✅f(fffkkhhffzzhhkkkzzrrrrryyy) = ',
480: 1:    '❌f(beellllgrhhoyy) = ??? != bgro'
480: 1:  ],
480: 1:  'level': 17,
480: 1:  'nextQuestion': 'beellllgrhhoyy',
480: 1:  'questions': [
480: 1:    'a',
480: 1:    'abc',
480: 1:    'abcba',
480: 1:    'aa',
480: 1:    'aaaa',
480: 1:    'aaabaa',
480: 1:    'aabaaa',
480: 1:    'abaa',
480: 1:    'abba',
480: 1:    'abbaaa',
480: 1:    'abcdeedcba',
480: 1:    'bcdeeedcbabcde',
480: 1:    'fffkkhhffzzhhkkkzzrrrrryyy',
480: 1:    'beellllgrhhoyy'
480: 1:  ]
480: 1:}
480: 1:Scores: 28896
480: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '', '', 'abcde', '', 'bgro']')
480: 1:Fire Event: PassTest{complexity=21, testCount=24}
------------------------------------------
481: 1:BoardData {
481: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
481: 1:  'expectedAnswer': 'abad',
481: 1:  'history': [
481: 1:    {
481: 1:      'answer': 'a',
481: 1:      'question': 'a',
481: 1:      'valid': true
481: 1:    },
481: 1:    {
481: 1:      'answer': 'abc',
481: 1:      'question': 'abc',
481: 1:      'valid': true
481: 1:    },
481: 1:    {
481: 1:      'answer': 'abcba',
481: 1:      'question': 'abcba',
481: 1:      'valid': true
481: 1:    },
481: 1:    {
481: 1:      'answer': '',
481: 1:      'question': 'aa',
481: 1:      'valid': true
481: 1:    },
481: 1:    {
481: 1:      'answer': '',
481: 1:      'question': 'aaaa',
481: 1:      'valid': true
481: 1:    },
481: 1:    {
481: 1:      'answer': 'b',
481: 1:      'question': 'aaabaa',
481: 1:      'valid': true
481: 1:    },
481: 1:    {
481: 1:      'answer': 'b',
481: 1:      'question': 'aabaaa',
481: 1:      'valid': true
481: 1:    },
481: 1:    {
481: 1:      'answer': 'ab',
481: 1:      'question': 'abaa',
481: 1:      'valid': true
481: 1:    },
481: 1:    {
481: 1:      'answer': '',
481: 1:      'question': 'abba',
481: 1:      'valid': true
481: 1:    },
481: 1:    {
481: 1:      'answer': '',
481: 1:      'question': 'abbaaa',
481: 1:      'valid': true
481: 1:    },
481: 1:    {
481: 1:      'answer': '',
481: 1:      'question': 'abcdeedcba',
481: 1:      'valid': true
481: 1:    },
481: 1:    {
481: 1:      'answer': 'abcde',
481: 1:      'question': 'bcdeeedcbabcde',
481: 1:      'valid': true
481: 1:    },
481: 1:    {
481: 1:      'answer': '',
481: 1:      'question': 'fffkkhhffzzhhkkkzzrrrrryyy',
481: 1:      'valid': true
481: 1:    },
481: 1:    {
481: 1:      'answer': 'bgro',
481: 1:      'question': 'beellllgrhhoyy',
481: 1:      'valid': true
481: 1:    }
481: 1:  ],
481: 1:  'info': [
481: 1:    '✅f(a) = a',
481: 1:    '✅f(abc) = abc',
481: 1:    '✅f(abcba) = abcba',
481: 1:    '✅f(aa) = ',
481: 1:    '✅f(aaaa) = ',
481: 1:    '✅f(aaabaa) = b',
481: 1:    '✅f(aabaaa) = b',
481: 1:    '✅f(abaa) = ab',
481: 1:    '✅f(abba) = ',
481: 1:    '✅f(abbaaa) = ',
481: 1:    '✅f(abcdeedcba) = ',
481: 1:    '✅f(bcdeeedcbabcde) = abcde',
481: 1:    '✅f(fffkkhhffzzhhkkkzzrrrrryyy) = ',
481: 1:    '✅f(beellllgrhhoyy) = bgro',
481: 1:    '❌f(abbcccbad) = ??? != abad'
481: 1:  ],
481: 1:  'level': 17,
481: 1:  'nextQuestion': 'abbcccbad',
481: 1:  'questions': [
481: 1:    'a',
481: 1:    'abc',
481: 1:    'abcba',
481: 1:    'aa',
481: 1:    'aaaa',
481: 1:    'aaabaa',
481: 1:    'aabaaa',
481: 1:    'abaa',
481: 1:    'abba',
481: 1:    'abbaaa',
481: 1:    'abcdeedcba',
481: 1:    'bcdeeedcbabcde',
481: 1:    'fffkkhhffzzhhkkkzzrrrrryyy',
481: 1:    'beellllgrhhoyy',
481: 1:    'abbcccbad'
481: 1:  ]
481: 1:}
481: 1:Scores: 28904
481: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '', '', 'abcde', '', 'bgro', 'abad']')
481: 1:Fire Event: PassTest{complexity=21, testCount=24}
------------------------------------------
482: 1:BoardData {
482: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
482: 1:  'expectedAnswer': 'd',
482: 1:  'history': [
482: 1:    {
482: 1:      'answer': 'a',
482: 1:      'question': 'a',
482: 1:      'valid': true
482: 1:    },
482: 1:    {
482: 1:      'answer': 'abc',
482: 1:      'question': 'abc',
482: 1:      'valid': true
482: 1:    },
482: 1:    {
482: 1:      'answer': 'abcba',
482: 1:      'question': 'abcba',
482: 1:      'valid': true
482: 1:    },
482: 1:    {
482: 1:      'answer': '',
482: 1:      'question': 'aa',
482: 1:      'valid': true
482: 1:    },
482: 1:    {
482: 1:      'answer': '',
482: 1:      'question': 'aaaa',
482: 1:      'valid': true
482: 1:    },
482: 1:    {
482: 1:      'answer': 'b',
482: 1:      'question': 'aaabaa',
482: 1:      'valid': true
482: 1:    },
482: 1:    {
482: 1:      'answer': 'b',
482: 1:      'question': 'aabaaa',
482: 1:      'valid': true
482: 1:    },
482: 1:    {
482: 1:      'answer': 'ab',
482: 1:      'question': 'abaa',
482: 1:      'valid': true
482: 1:    },
482: 1:    {
482: 1:      'answer': '',
482: 1:      'question': 'abba',
482: 1:      'valid': true
482: 1:    },
482: 1:    {
482: 1:      'answer': '',
482: 1:      'question': 'abbaaa',
482: 1:      'valid': true
482: 1:    },
482: 1:    {
482: 1:      'answer': '',
482: 1:      'question': 'abcdeedcba',
482: 1:      'valid': true
482: 1:    },
482: 1:    {
482: 1:      'answer': 'abcde',
482: 1:      'question': 'bcdeeedcbabcde',
482: 1:      'valid': true
482: 1:    },
482: 1:    {
482: 1:      'answer': '',
482: 1:      'question': 'fffkkhhffzzhhkkkzzrrrrryyy',
482: 1:      'valid': true
482: 1:    },
482: 1:    {
482: 1:      'answer': 'bgro',
482: 1:      'question': 'beellllgrhhoyy',
482: 1:      'valid': true
482: 1:    },
482: 1:    {
482: 1:      'answer': 'abad',
482: 1:      'question': 'abbcccbad',
482: 1:      'valid': true
482: 1:    }
482: 1:  ],
482: 1:  'info': [
482: 1:    '✅f(a) = a',
482: 1:    '✅f(abc) = abc',
482: 1:    '✅f(abcba) = abcba',
482: 1:    '✅f(aa) = ',
482: 1:    '✅f(aaaa) = ',
482: 1:    '✅f(aaabaa) = b',
482: 1:    '✅f(aabaaa) = b',
482: 1:    '✅f(abaa) = ab',
482: 1:    '✅f(abba) = ',
482: 1:    '✅f(abbaaa) = ',
482: 1:    '✅f(abcdeedcba) = ',
482: 1:    '✅f(bcdeeedcbabcde) = abcde',
482: 1:    '✅f(fffkkhhffzzhhkkkzzrrrrryyy) = ',
482: 1:    '✅f(beellllgrhhoyy) = bgro',
482: 1:    '✅f(abbcccbad) = abad',
482: 1:    '❌f(abccbbad) = ??? != d'
482: 1:  ],
482: 1:  'level': 17,
482: 1:  'nextQuestion': 'abccbbad',
482: 1:  'questions': [
482: 1:    'a',
482: 1:    'abc',
482: 1:    'abcba',
482: 1:    'aa',
482: 1:    'aaaa',
482: 1:    'aaabaa',
482: 1:    'aabaaa',
482: 1:    'abaa',
482: 1:    'abba',
482: 1:    'abbaaa',
482: 1:    'abcdeedcba',
482: 1:    'bcdeeedcbabcde',
482: 1:    'fffkkhhffzzhhkkkzzrrrrryyy',
482: 1:    'beellllgrhhoyy',
482: 1:    'abbcccbad',
482: 1:    'abccbbad'
482: 1:  ]
482: 1:}
482: 1:Scores: 28912
482: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '', '', 'abcde', '', 'bgro', 'abad', 'd']')
482: 1:Fire Event: PassTest{complexity=21, testCount=24}
------------------------------------------
483: 1:BoardData {
483: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
483: 1:  'expectedAnswer': 'r',
483: 1:  'history': [
483: 1:    {
483: 1:      'answer': 'a',
483: 1:      'question': 'a',
483: 1:      'valid': true
483: 1:    },
483: 1:    {
483: 1:      'answer': 'abc',
483: 1:      'question': 'abc',
483: 1:      'valid': true
483: 1:    },
483: 1:    {
483: 1:      'answer': 'abcba',
483: 1:      'question': 'abcba',
483: 1:      'valid': true
483: 1:    },
483: 1:    {
483: 1:      'answer': '',
483: 1:      'question': 'aa',
483: 1:      'valid': true
483: 1:    },
483: 1:    {
483: 1:      'answer': '',
483: 1:      'question': 'aaaa',
483: 1:      'valid': true
483: 1:    },
483: 1:    {
483: 1:      'answer': 'b',
483: 1:      'question': 'aaabaa',
483: 1:      'valid': true
483: 1:    },
483: 1:    {
483: 1:      'answer': 'b',
483: 1:      'question': 'aabaaa',
483: 1:      'valid': true
483: 1:    },
483: 1:    {
483: 1:      'answer': 'ab',
483: 1:      'question': 'abaa',
483: 1:      'valid': true
483: 1:    },
483: 1:    {
483: 1:      'answer': '',
483: 1:      'question': 'abba',
483: 1:      'valid': true
483: 1:    },
483: 1:    {
483: 1:      'answer': '',
483: 1:      'question': 'abbaaa',
483: 1:      'valid': true
483: 1:    },
483: 1:    {
483: 1:      'answer': '',
483: 1:      'question': 'abcdeedcba',
483: 1:      'valid': true
483: 1:    },
483: 1:    {
483: 1:      'answer': 'abcde',
483: 1:      'question': 'bcdeeedcbabcde',
483: 1:      'valid': true
483: 1:    },
483: 1:    {
483: 1:      'answer': '',
483: 1:      'question': 'fffkkhhffzzhhkkkzzrrrrryyy',
483: 1:      'valid': true
483: 1:    },
483: 1:    {
483: 1:      'answer': 'bgro',
483: 1:      'question': 'beellllgrhhoyy',
483: 1:      'valid': true
483: 1:    },
483: 1:    {
483: 1:      'answer': 'abad',
483: 1:      'question': 'abbcccbad',
483: 1:      'valid': true
483: 1:    },
483: 1:    {
483: 1:      'answer': 'd',
483: 1:      'question': 'abccbbad',
483: 1:      'valid': true
483: 1:    }
483: 1:  ],
483: 1:  'info': [
483: 1:    '✅f(a) = a',
483: 1:    '✅f(abc) = abc',
483: 1:    '✅f(abcba) = abcba',
483: 1:    '✅f(aa) = ',
483: 1:    '✅f(aaaa) = ',
483: 1:    '✅f(aaabaa) = b',
483: 1:    '✅f(aabaaa) = b',
483: 1:    '✅f(abaa) = ab',
483: 1:    '✅f(abba) = ',
483: 1:    '✅f(abbaaa) = ',
483: 1:    '✅f(abcdeedcba) = ',
483: 1:    '✅f(bcdeeedcbabcde) = abcde',
483: 1:    '✅f(fffkkhhffzzhhkkkzzrrrrryyy) = ',
483: 1:    '✅f(beellllgrhhoyy) = bgro',
483: 1:    '✅f(abbcccbad) = abad',
483: 1:    '✅f(abccbbad) = d',
483: 1:    '❌f(abcdeffedcbar) = ??? != r'
483: 1:  ],
483: 1:  'level': 17,
483: 1:  'nextQuestion': 'abcdeffedcbar',
483: 1:  'questions': [
483: 1:    'a',
483: 1:    'abc',
483: 1:    'abcba',
483: 1:    'aa',
483: 1:    'aaaa',
483: 1:    'aaabaa',
483: 1:    'aabaaa',
483: 1:    'abaa',
483: 1:    'abba',
483: 1:    'abbaaa',
483: 1:    'abcdeedcba',
483: 1:    'bcdeeedcbabcde',
483: 1:    'fffkkhhffzzhhkkkzzrrrrryyy',
483: 1:    'beellllgrhhoyy',
483: 1:    'abbcccbad',
483: 1:    'abccbbad',
483: 1:    'abcdeffedcbar'
483: 1:  ]
483: 1:}
483: 1:Scores: 28920
483: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '', '', 'abcde', '', 'bgro', 'abad', 'd', 'r']')
483: 1:Fire Event: PassTest{complexity=21, testCount=24}
------------------------------------------
484: 1:BoardData {
484: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
484: 1:  'expectedAnswer': '',
484: 1:  'history': [
484: 1:    {
484: 1:      'answer': 'a',
484: 1:      'question': 'a',
484: 1:      'valid': true
484: 1:    },
484: 1:    {
484: 1:      'answer': 'abc',
484: 1:      'question': 'abc',
484: 1:      'valid': true
484: 1:    },
484: 1:    {
484: 1:      'answer': 'abcba',
484: 1:      'question': 'abcba',
484: 1:      'valid': true
484: 1:    },
484: 1:    {
484: 1:      'answer': '',
484: 1:      'question': 'aa',
484: 1:      'valid': true
484: 1:    },
484: 1:    {
484: 1:      'answer': '',
484: 1:      'question': 'aaaa',
484: 1:      'valid': true
484: 1:    },
484: 1:    {
484: 1:      'answer': 'b',
484: 1:      'question': 'aaabaa',
484: 1:      'valid': true
484: 1:    },
484: 1:    {
484: 1:      'answer': 'b',
484: 1:      'question': 'aabaaa',
484: 1:      'valid': true
484: 1:    },
484: 1:    {
484: 1:      'answer': 'ab',
484: 1:      'question': 'abaa',
484: 1:      'valid': true
484: 1:    },
484: 1:    {
484: 1:      'answer': '',
484: 1:      'question': 'abba',
484: 1:      'valid': true
484: 1:    },
484: 1:    {
484: 1:      'answer': '',
484: 1:      'question': 'abbaaa',
484: 1:      'valid': true
484: 1:    },
484: 1:    {
484: 1:      'answer': '',
484: 1:      'question': 'abcdeedcba',
484: 1:      'valid': true
484: 1:    },
484: 1:    {
484: 1:      'answer': 'abcde',
484: 1:      'question': 'bcdeeedcbabcde',
484: 1:      'valid': true
484: 1:    },
484: 1:    {
484: 1:      'answer': '',
484: 1:      'question': 'fffkkhhffzzhhkkkzzrrrrryyy',
484: 1:      'valid': true
484: 1:    },
484: 1:    {
484: 1:      'answer': 'bgro',
484: 1:      'question': 'beellllgrhhoyy',
484: 1:      'valid': true
484: 1:    },
484: 1:    {
484: 1:      'answer': 'abad',
484: 1:      'question': 'abbcccbad',
484: 1:      'valid': true
484: 1:    },
484: 1:    {
484: 1:      'answer': 'd',
484: 1:      'question': 'abccbbad',
484: 1:      'valid': true
484: 1:    },
484: 1:    {
484: 1:      'answer': 'r',
484: 1:      'question': 'abcdeffedcbar',
484: 1:      'valid': true
484: 1:    }
484: 1:  ],
484: 1:  'info': [
484: 1:    '✅f(a) = a',
484: 1:    '✅f(abc) = abc',
484: 1:    '✅f(abcba) = abcba',
484: 1:    '✅f(aa) = ',
484: 1:    '✅f(aaaa) = ',
484: 1:    '✅f(aaabaa) = b',
484: 1:    '✅f(aabaaa) = b',
484: 1:    '✅f(abaa) = ab',
484: 1:    '✅f(abba) = ',
484: 1:    '✅f(abbaaa) = ',
484: 1:    '✅f(abcdeedcba) = ',
484: 1:    '✅f(bcdeeedcbabcde) = abcde',
484: 1:    '✅f(fffkkhhffzzhhkkkzzrrrrryyy) = ',
484: 1:    '✅f(beellllgrhhoyy) = bgro',
484: 1:    '✅f(abbcccbad) = abad',
484: 1:    '✅f(abccbbad) = d',
484: 1:    '✅f(abcdeffedcbar) = r',
484: 1:    '❌f(abcdeffedcba) = ??? != '
484: 1:  ],
484: 1:  'level': 17,
484: 1:  'nextQuestion': 'abcdeffedcba',
484: 1:  'questions': [
484: 1:    'a',
484: 1:    'abc',
484: 1:    'abcba',
484: 1:    'aa',
484: 1:    'aaaa',
484: 1:    'aaabaa',
484: 1:    'aabaaa',
484: 1:    'abaa',
484: 1:    'abba',
484: 1:    'abbaaa',
484: 1:    'abcdeedcba',
484: 1:    'bcdeeedcbabcde',
484: 1:    'fffkkhhffzzhhkkkzzrrrrryyy',
484: 1:    'beellllgrhhoyy',
484: 1:    'abbcccbad',
484: 1:    'abccbbad',
484: 1:    'abcdeffedcbar',
484: 1:    'abcdeffedcba'
484: 1:  ]
484: 1:}
484: 1:Scores: 28928
484: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '', '', 'abcde', '', 'bgro', 'abad', 'd', 'r', '']')
484: 1:Fire Event: PassTest{complexity=21, testCount=24}
------------------------------------------
485: 1:BoardData {
485: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
485: 1:  'expectedAnswer': '',
485: 1:  'history': [
485: 1:    {
485: 1:      'answer': 'a',
485: 1:      'question': 'a',
485: 1:      'valid': true
485: 1:    },
485: 1:    {
485: 1:      'answer': 'abc',
485: 1:      'question': 'abc',
485: 1:      'valid': true
485: 1:    },
485: 1:    {
485: 1:      'answer': 'abcba',
485: 1:      'question': 'abcba',
485: 1:      'valid': true
485: 1:    },
485: 1:    {
485: 1:      'answer': '',
485: 1:      'question': 'aa',
485: 1:      'valid': true
485: 1:    },
485: 1:    {
485: 1:      'answer': '',
485: 1:      'question': 'aaaa',
485: 1:      'valid': true
485: 1:    },
485: 1:    {
485: 1:      'answer': 'b',
485: 1:      'question': 'aaabaa',
485: 1:      'valid': true
485: 1:    },
485: 1:    {
485: 1:      'answer': 'b',
485: 1:      'question': 'aabaaa',
485: 1:      'valid': true
485: 1:    },
485: 1:    {
485: 1:      'answer': 'ab',
485: 1:      'question': 'abaa',
485: 1:      'valid': true
485: 1:    },
485: 1:    {
485: 1:      'answer': '',
485: 1:      'question': 'abba',
485: 1:      'valid': true
485: 1:    },
485: 1:    {
485: 1:      'answer': '',
485: 1:      'question': 'abbaaa',
485: 1:      'valid': true
485: 1:    },
485: 1:    {
485: 1:      'answer': '',
485: 1:      'question': 'abcdeedcba',
485: 1:      'valid': true
485: 1:    },
485: 1:    {
485: 1:      'answer': 'abcde',
485: 1:      'question': 'bcdeeedcbabcde',
485: 1:      'valid': true
485: 1:    },
485: 1:    {
485: 1:      'answer': '',
485: 1:      'question': 'fffkkhhffzzhhkkkzzrrrrryyy',
485: 1:      'valid': true
485: 1:    },
485: 1:    {
485: 1:      'answer': 'bgro',
485: 1:      'question': 'beellllgrhhoyy',
485: 1:      'valid': true
485: 1:    },
485: 1:    {
485: 1:      'answer': 'abad',
485: 1:      'question': 'abbcccbad',
485: 1:      'valid': true
485: 1:    },
485: 1:    {
485: 1:      'answer': 'd',
485: 1:      'question': 'abccbbad',
485: 1:      'valid': true
485: 1:    },
485: 1:    {
485: 1:      'answer': 'r',
485: 1:      'question': 'abcdeffedcbar',
485: 1:      'valid': true
485: 1:    },
485: 1:    {
485: 1:      'answer': '',
485: 1:      'question': 'abcdeffedcba',
485: 1:      'valid': true
485: 1:    }
485: 1:  ],
485: 1:  'info': [
485: 1:    '✅f(a) = a',
485: 1:    '✅f(abc) = abc',
485: 1:    '✅f(abcba) = abcba',
485: 1:    '✅f(aa) = ',
485: 1:    '✅f(aaaa) = ',
485: 1:    '✅f(aaabaa) = b',
485: 1:    '✅f(aabaaa) = b',
485: 1:    '✅f(abaa) = ab',
485: 1:    '✅f(abba) = ',
485: 1:    '✅f(abbaaa) = ',
485: 1:    '✅f(abcdeedcba) = ',
485: 1:    '✅f(bcdeeedcbabcde) = abcde',
485: 1:    '✅f(fffkkhhffzzhhkkkzzrrrrryyy) = ',
485: 1:    '✅f(beellllgrhhoyy) = bgro',
485: 1:    '✅f(abbcccbad) = abad',
485: 1:    '✅f(abccbbad) = d',
485: 1:    '✅f(abcdeffedcbar) = r',
485: 1:    '✅f(abcdeffedcba) = ',
485: 1:    '❌f(abcdefaaabbbvvvfedcba) = ??? != '
485: 1:  ],
485: 1:  'level': 17,
485: 1:  'nextQuestion': 'abcdefaaabbbvvvfedcba',
485: 1:  'questions': [
485: 1:    'a',
485: 1:    'abc',
485: 1:    'abcba',
485: 1:    'aa',
485: 1:    'aaaa',
485: 1:    'aaabaa',
485: 1:    'aabaaa',
485: 1:    'abaa',
485: 1:    'abba',
485: 1:    'abbaaa',
485: 1:    'abcdeedcba',
485: 1:    'bcdeeedcbabcde',
485: 1:    'fffkkhhffzzhhkkkzzrrrrryyy',
485: 1:    'beellllgrhhoyy',
485: 1:    'abbcccbad',
485: 1:    'abccbbad',
485: 1:    'abcdeffedcbar',
485: 1:    'abcdeffedcba',
485: 1:    'abcdefaaabbbvvvfedcba'
485: 1:  ]
485: 1:}
485: 1:Scores: 28936
485: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '', '', 'abcde', '', 'bgro', 'abad', 'd', 'r', '', '']')
485: 1:Fire Event: PassTest{complexity=21, testCount=24}
------------------------------------------
486: 1:BoardData {
486: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
486: 1:  'expectedAnswer': 'uxnri',
486: 1:  'history': [
486: 1:    {
486: 1:      'answer': 'a',
486: 1:      'question': 'a',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': 'abc',
486: 1:      'question': 'abc',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': 'abcba',
486: 1:      'question': 'abcba',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': '',
486: 1:      'question': 'aa',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': '',
486: 1:      'question': 'aaaa',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': 'b',
486: 1:      'question': 'aaabaa',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': 'b',
486: 1:      'question': 'aabaaa',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': 'ab',
486: 1:      'question': 'abaa',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': '',
486: 1:      'question': 'abba',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': '',
486: 1:      'question': 'abbaaa',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': '',
486: 1:      'question': 'abcdeedcba',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': 'abcde',
486: 1:      'question': 'bcdeeedcbabcde',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': '',
486: 1:      'question': 'fffkkhhffzzhhkkkzzrrrrryyy',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': 'bgro',
486: 1:      'question': 'beellllgrhhoyy',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': 'abad',
486: 1:      'question': 'abbcccbad',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': 'd',
486: 1:      'question': 'abccbbad',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': 'r',
486: 1:      'question': 'abcdeffedcbar',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': '',
486: 1:      'question': 'abcdeffedcba',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': '',
486: 1:      'question': 'abcdefaaabbbvvvfedcba',
486: 1:      'valid': true
486: 1:    }
486: 1:  ],
486: 1:  'info': [
486: 1:    '✅f(a) = a',
486: 1:    '✅f(abc) = abc',
486: 1:    '✅f(abcba) = abcba',
486: 1:    '✅f(aa) = ',
486: 1:    '✅f(aaaa) = ',
486: 1:    '✅f(aaabaa) = b',
486: 1:    '✅f(aabaaa) = b',
486: 1:    '✅f(abaa) = ab',
486: 1:    '✅f(abba) = ',
486: 1:    '✅f(abbaaa) = ',
486: 1:    '✅f(abcdeedcba) = ',
486: 1:    '✅f(bcdeeedcbabcde) = abcde',
486: 1:    '✅f(fffkkhhffzzhhkkkzzrrrrryyy) = ',
486: 1:    '✅f(beellllgrhhoyy) = bgro',
486: 1:    '✅f(abbcccbad) = abad',
486: 1:    '✅f(abccbbad) = d',
486: 1:    '✅f(abcdeffedcbar) = r',
486: 1:    '✅f(abcdeffedcba) = ',
486: 1:    '✅f(abcdefaaabbbvvvfedcba) = ',
486: 1:    '❌f(ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd) = ??? != uxnri'
486: 1:  ],
486: 1:  'level': 17,
486: 1:  'nextQuestion': 'ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd',
486: 1:  'questions': [
486: 1:    'a',
486: 1:    'abc',
486: 1:    'abcba',
486: 1:    'aa',
486: 1:    'aaaa',
486: 1:    'aaabaa',
486: 1:    'aabaaa',
486: 1:    'abaa',
486: 1:    'abba',
486: 1:    'abbaaa',
486: 1:    'abcdeedcba',
486: 1:    'bcdeeedcbabcde',
486: 1:    'fffkkhhffzzhhkkkzzrrrrryyy',
486: 1:    'beellllgrhhoyy',
486: 1:    'abbcccbad',
486: 1:    'abccbbad',
486: 1:    'abcdeffedcbar',
486: 1:    'abcdeffedcba',
486: 1:    'abcdefaaabbbvvvfedcba',
486: 1:    'ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd'
486: 1:  ]
486: 1:}
486: 1:Scores: 28944
486: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '', '', 'abcde', '', 'bgro', 'abad', 'd', 'r', '', '', 'uxnri']')
486: 1:Fire Event: PassTest{complexity=21, testCount=24}
------------------------------------------
487: 1:BoardData {
487: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
487: 1:  'expectedAnswer': 'tkcmam',
487: 1:  'history': [
487: 1:    {
487: 1:      'answer': 'a',
487: 1:      'question': 'a',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': 'abc',
487: 1:      'question': 'abc',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': 'abcba',
487: 1:      'question': 'abcba',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': '',
487: 1:      'question': 'aa',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': '',
487: 1:      'question': 'aaaa',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': 'b',
487: 1:      'question': 'aaabaa',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': 'b',
487: 1:      'question': 'aabaaa',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': 'ab',
487: 1:      'question': 'abaa',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': '',
487: 1:      'question': 'abba',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': '',
487: 1:      'question': 'abbaaa',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': '',
487: 1:      'question': 'abcdeedcba',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': 'abcde',
487: 1:      'question': 'bcdeeedcbabcde',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': '',
487: 1:      'question': 'fffkkhhffzzhhkkkzzrrrrryyy',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': 'bgro',
487: 1:      'question': 'beellllgrhhoyy',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': 'abad',
487: 1:      'question': 'abbcccbad',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': 'd',
487: 1:      'question': 'abccbbad',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': 'r',
487: 1:      'question': 'abcdeffedcbar',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': '',
487: 1:      'question': 'abcdeffedcba',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': '',
487: 1:      'question': 'abcdefaaabbbvvvfedcba',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': 'uxnri',
487: 1:      'question': 'ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd',
487: 1:      'valid': true
487: 1:    }
487: 1:  ],
487: 1:  'info': [
487: 1:    '✅f(a) = a',
487: 1:    '✅f(abc) = abc',
487: 1:    '✅f(abcba) = abcba',
487: 1:    '✅f(aa) = ',
487: 1:    '✅f(aaaa) = ',
487: 1:    '✅f(aaabaa) = b',
487: 1:    '✅f(aabaaa) = b',
487: 1:    '✅f(abaa) = ab',
487: 1:    '✅f(abba) = ',
487: 1:    '✅f(abbaaa) = ',
487: 1:    '✅f(abcdeedcba) = ',
487: 1:    '✅f(bcdeeedcbabcde) = abcde',
487: 1:    '✅f(fffkkhhffzzhhkkkzzrrrrryyy) = ',
487: 1:    '✅f(beellllgrhhoyy) = bgro',
487: 1:    '✅f(abbcccbad) = abad',
487: 1:    '✅f(abccbbad) = d',
487: 1:    '✅f(abcdeffedcbar) = r',
487: 1:    '✅f(abcdeffedcba) = ',
487: 1:    '✅f(abcdefaaabbbvvvfedcba) = ',
487: 1:    '✅f(ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd) = uxnri',
487: 1:    '❌f(tnnnnnnnddddccccccckcmkkvvvbbbqqqqddannnnmbbbbsssww) = ??? != tkcmam'
487: 1:  ],
487: 1:  'level': 17,
487: 1:  'nextQuestion': 'tnnnnnnnddddccccccckcmkkvvvbbbqqqqddannnnmbbbbsssww',
487: 1:  'questions': [
487: 1:    'a',
487: 1:    'abc',
487: 1:    'abcba',
487: 1:    'aa',
487: 1:    'aaaa',
487: 1:    'aaabaa',
487: 1:    'aabaaa',
487: 1:    'abaa',
487: 1:    'abba',
487: 1:    'abbaaa',
487: 1:    'abcdeedcba',
487: 1:    'bcdeeedcbabcde',
487: 1:    'fffkkhhffzzhhkkkzzrrrrryyy',
487: 1:    'beellllgrhhoyy',
487: 1:    'abbcccbad',
487: 1:    'abccbbad',
487: 1:    'abcdeffedcbar',
487: 1:    'abcdeffedcba',
487: 1:    'abcdefaaabbbvvvfedcba',
487: 1:    'ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd',
487: 1:    'tnnnnnnnddddccccccckcmkkvvvbbbqqqqddannnnmbbbbsssww'
487: 1:  ]
487: 1:}
487: 1:Scores: 28952
487: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '', '', 'abcde', '', 'bgro', 'abad', 'd', 'r', '', '', 'uxnri', 'tkcmam']')
487: 1:Fire Event: PassTest{complexity=21, testCount=24}
------------------------------------------
488: 1:BoardData {
488: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
488: 1:  'expectedAnswer': 'parjxfyugwo',
488: 1:  'history': [
488: 1:    {
488: 1:      'answer': 'a',
488: 1:      'question': 'a',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': 'abc',
488: 1:      'question': 'abc',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': 'abcba',
488: 1:      'question': 'abcba',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': '',
488: 1:      'question': 'aa',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': '',
488: 1:      'question': 'aaaa',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': 'b',
488: 1:      'question': 'aaabaa',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': 'b',
488: 1:      'question': 'aabaaa',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': 'ab',
488: 1:      'question': 'abaa',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': '',
488: 1:      'question': 'abba',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': '',
488: 1:      'question': 'abbaaa',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': '',
488: 1:      'question': 'abcdeedcba',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': 'abcde',
488: 1:      'question': 'bcdeeedcbabcde',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': '',
488: 1:      'question': 'fffkkhhffzzhhkkkzzrrrrryyy',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': 'bgro',
488: 1:      'question': 'beellllgrhhoyy',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': 'abad',
488: 1:      'question': 'abbcccbad',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': 'd',
488: 1:      'question': 'abccbbad',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': 'r',
488: 1:      'question': 'abcdeffedcbar',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': '',
488: 1:      'question': 'abcdeffedcba',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': '',
488: 1:      'question': 'abcdefaaabbbvvvfedcba',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': 'uxnri',
488: 1:      'question': 'ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': 'tkcmam',
488: 1:      'question': 'tnnnnnnnddddccccccckcmkkvvvbbbqqqqddannnnmbbbbsssww',
488: 1:      'valid': true
488: 1:    }
488: 1:  ],
488: 1:  'info': [
488: 1:    '✅f(a) = a',
488: 1:    '✅f(abc) = abc',
488: 1:    '✅f(abcba) = abcba',
488: 1:    '✅f(aa) = ',
488: 1:    '✅f(aaaa) = ',
488: 1:    '✅f(aaabaa) = b',
488: 1:    '✅f(aabaaa) = b',
488: 1:    '✅f(abaa) = ab',
488: 1:    '✅f(abba) = ',
488: 1:    '✅f(abbaaa) = ',
488: 1:    '✅f(abcdeedcba) = ',
488: 1:    '✅f(bcdeeedcbabcde) = abcde',
488: 1:    '✅f(fffkkhhffzzhhkkkzzrrrrryyy) = ',
488: 1:    '✅f(beellllgrhhoyy) = bgro',
488: 1:    '✅f(abbcccbad) = abad',
488: 1:    '✅f(abccbbad) = d',
488: 1:    '✅f(abcdeffedcbar) = r',
488: 1:    '✅f(abcdeffedcba) = ',
488: 1:    '✅f(abcdefaaabbbvvvfedcba) = ',
488: 1:    '✅f(ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd) = uxnri',
488: 1:    '✅f(tnnnnnnnddddccccccckcmkkvvvbbbqqqqddannnnmbbbbsssww) = tkcmam',
488: 1:    '❌f(paoooovvviiggggyyyynnnnhhhrjxbbbbbbfjjjjyaaaddqqbbbccueebbbbbbgwoii) = ??? != parjxfyugwo'
488: 1:  ],
488: 1:  'level': 17,
488: 1:  'nextQuestion': 'paoooovvviiggggyyyynnnnhhhrjxbbbbbbfjjjjyaaaddqqbbbccueebbbbbbgwoii',
488: 1:  'questions': [
488: 1:    'a',
488: 1:    'abc',
488: 1:    'abcba',
488: 1:    'aa',
488: 1:    'aaaa',
488: 1:    'aaabaa',
488: 1:    'aabaaa',
488: 1:    'abaa',
488: 1:    'abba',
488: 1:    'abbaaa',
488: 1:    'abcdeedcba',
488: 1:    'bcdeeedcbabcde',
488: 1:    'fffkkhhffzzhhkkkzzrrrrryyy',
488: 1:    'beellllgrhhoyy',
488: 1:    'abbcccbad',
488: 1:    'abccbbad',
488: 1:    'abcdeffedcbar',
488: 1:    'abcdeffedcba',
488: 1:    'abcdefaaabbbvvvfedcba',
488: 1:    'ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd',
488: 1:    'tnnnnnnnddddccccccckcmkkvvvbbbqqqqddannnnmbbbbsssww',
488: 1:    'paoooovvviiggggyyyynnnnhhhrjxbbbbbbfjjjjyaaaddqqbbbccueebbbbbbgwoii'
488: 1:  ]
488: 1:}
488: 1:Scores: 28960
488: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '', '', 'abcde', '', 'bgro', 'abad', 'd', 'r', '', '', 'uxnri', 'tkcmam', 'parjxfyugwo']')
488: 1:Fire Event: PassTest{complexity=21, testCount=24}
------------------------------------------
489: 1:BoardData {
489: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
489: 1:  'expectedAnswer': 'wrecnoady',
489: 1:  'history': [
489: 1:    {
489: 1:      'answer': 'a',
489: 1:      'question': 'a',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': 'abc',
489: 1:      'question': 'abc',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': 'abcba',
489: 1:      'question': 'abcba',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': '',
489: 1:      'question': 'aa',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': '',
489: 1:      'question': 'aaaa',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': 'b',
489: 1:      'question': 'aaabaa',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': 'b',
489: 1:      'question': 'aabaaa',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': 'ab',
489: 1:      'question': 'abaa',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': '',
489: 1:      'question': 'abba',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': '',
489: 1:      'question': 'abbaaa',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': '',
489: 1:      'question': 'abcdeedcba',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': 'abcde',
489: 1:      'question': 'bcdeeedcbabcde',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': '',
489: 1:      'question': 'fffkkhhffzzhhkkkzzrrrrryyy',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': 'bgro',
489: 1:      'question': 'beellllgrhhoyy',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': 'abad',
489: 1:      'question': 'abbcccbad',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': 'd',
489: 1:      'question': 'abccbbad',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': 'r',
489: 1:      'question': 'abcdeffedcbar',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': '',
489: 1:      'question': 'abcdeffedcba',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': '',
489: 1:      'question': 'abcdefaaabbbvvvfedcba',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': 'uxnri',
489: 1:      'question': 'ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': 'tkcmam',
489: 1:      'question': 'tnnnnnnnddddccccccckcmkkvvvbbbqqqqddannnnmbbbbsssww',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': 'parjxfyugwo',
489: 1:      'question': 'paoooovvviiggggyyyynnnnhhhrjxbbbbbbfjjjjyaaaddqqbbbccueebbbbbbgwoii',
489: 1:      'valid': true
489: 1:    }
489: 1:  ],
489: 1:  'info': [
489: 1:    '✅f(a) = a',
489: 1:    '✅f(abc) = abc',
489: 1:    '✅f(abcba) = abcba',
489: 1:    '✅f(aa) = ',
489: 1:    '✅f(aaaa) = ',
489: 1:    '✅f(aaabaa) = b',
489: 1:    '✅f(aabaaa) = b',
489: 1:    '✅f(abaa) = ab',
489: 1:    '✅f(abba) = ',
489: 1:    '✅f(abbaaa) = ',
489: 1:    '✅f(abcdeedcba) = ',
489: 1:    '✅f(bcdeeedcbabcde) = abcde',
489: 1:    '✅f(fffkkhhffzzhhkkkzzrrrrryyy) = ',
489: 1:    '✅f(beellllgrhhoyy) = bgro',
489: 1:    '✅f(abbcccbad) = abad',
489: 1:    '✅f(abccbbad) = d',
489: 1:    '✅f(abcdeffedcbar) = r',
489: 1:    '✅f(abcdeffedcba) = ',
489: 1:    '✅f(abcdefaaabbbvvvfedcba) = ',
489: 1:    '✅f(ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd) = uxnri',
489: 1:    '✅f(tnnnnnnnddddccccccckcmkkvvvbbbqqqqddannnnmbbbbsssww) = tkcmam',
489: 1:    '✅f(paoooovvviiggggyyyynnnnhhhrjxbbbbbbfjjjjyaaaddqqbbbccueebbbbbbgwoii) = parjxfyugwo',
489: 1:    '❌f(ssssiiiijjjwrbbbvvvlllkkkkesssddcnoarrrbbooyyyydssszzzeeewwy) = ??? != wrecnoady'
489: 1:  ],
489: 1:  'level': 17,
489: 1:  'nextQuestion': 'ssssiiiijjjwrbbbvvvlllkkkkesssddcnoarrrbbooyyyydssszzzeeewwy',
489: 1:  'questions': [
489: 1:    'a',
489: 1:    'abc',
489: 1:    'abcba',
489: 1:    'aa',
489: 1:    'aaaa',
489: 1:    'aaabaa',
489: 1:    'aabaaa',
489: 1:    'abaa',
489: 1:    'abba',
489: 1:    'abbaaa',
489: 1:    'abcdeedcba',
489: 1:    'bcdeeedcbabcde',
489: 1:    'fffkkhhffzzhhkkkzzrrrrryyy',
489: 1:    'beellllgrhhoyy',
489: 1:    'abbcccbad',
489: 1:    'abccbbad',
489: 1:    'abcdeffedcbar',
489: 1:    'abcdeffedcba',
489: 1:    'abcdefaaabbbvvvfedcba',
489: 1:    'ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd',
489: 1:    'tnnnnnnnddddccccccckcmkkvvvbbbqqqqddannnnmbbbbsssww',
489: 1:    'paoooovvviiggggyyyynnnnhhhrjxbbbbbbfjjjjyaaaddqqbbbccueebbbbbbgwoii',
489: 1:    'ssssiiiijjjwrbbbvvvlllkkkkesssddcnoarrrbbooyyyydssszzzeeewwy'
489: 1:  ]
489: 1:}
489: 1:Scores: 28968
489: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '', '', 'abcde', '', 'bgro', 'abad', 'd', 'r', '', '', 'uxnri', 'tkcmam', 'parjxfyugwo', 'wrecnoady']')
489: 1:Fire Event: PassTest{complexity=21, testCount=24}
------------------------------------------
490: 1:BoardData {
490: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
490: 1:  'expectedAnswer': 'c',
490: 1:  'history': [
490: 1:    {
490: 1:      'answer': 'a',
490: 1:      'question': 'a',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': 'abc',
490: 1:      'question': 'abc',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': 'abcba',
490: 1:      'question': 'abcba',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': '',
490: 1:      'question': 'aa',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': '',
490: 1:      'question': 'aaaa',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': 'b',
490: 1:      'question': 'aaabaa',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': 'b',
490: 1:      'question': 'aabaaa',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': 'ab',
490: 1:      'question': 'abaa',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': '',
490: 1:      'question': 'abba',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': '',
490: 1:      'question': 'abbaaa',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': '',
490: 1:      'question': 'abcdeedcba',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': 'abcde',
490: 1:      'question': 'bcdeeedcbabcde',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': '',
490: 1:      'question': 'fffkkhhffzzhhkkkzzrrrrryyy',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': 'bgro',
490: 1:      'question': 'beellllgrhhoyy',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': 'abad',
490: 1:      'question': 'abbcccbad',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': 'd',
490: 1:      'question': 'abccbbad',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': 'r',
490: 1:      'question': 'abcdeffedcbar',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': '',
490: 1:      'question': 'abcdeffedcba',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': '',
490: 1:      'question': 'abcdefaaabbbvvvfedcba',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': 'uxnri',
490: 1:      'question': 'ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': 'tkcmam',
490: 1:      'question': 'tnnnnnnnddddccccccckcmkkvvvbbbqqqqddannnnmbbbbsssww',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': 'parjxfyugwo',
490: 1:      'question': 'paoooovvviiggggyyyynnnnhhhrjxbbbbbbfjjjjyaaaddqqbbbccueebbbbbbgwoii',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': 'wrecnoady',
490: 1:      'question': 'ssssiiiijjjwrbbbvvvlllkkkkesssddcnoarrrbbooyyyydssszzzeeewwy',
490: 1:      'valid': true
490: 1:    }
490: 1:  ],
490: 1:  'info': [
490: 1:    '✅f(a) = a',
490: 1:    '✅f(abc) = abc',
490: 1:    '✅f(abcba) = abcba',
490: 1:    '✅f(aa) = ',
490: 1:    '✅f(aaaa) = ',
490: 1:    '✅f(aaabaa) = b',
490: 1:    '✅f(aabaaa) = b',
490: 1:    '✅f(abaa) = ab',
490: 1:    '✅f(abba) = ',
490: 1:    '✅f(abbaaa) = ',
490: 1:    '✅f(abcdeedcba) = ',
490: 1:    '✅f(bcdeeedcbabcde) = abcde',
490: 1:    '✅f(fffkkhhffzzhhkkkzzrrrrryyy) = ',
490: 1:    '✅f(beellllgrhhoyy) = bgro',
490: 1:    '✅f(abbcccbad) = abad',
490: 1:    '✅f(abccbbad) = d',
490: 1:    '✅f(abcdeffedcbar) = r',
490: 1:    '✅f(abcdeffedcba) = ',
490: 1:    '✅f(abcdefaaabbbvvvfedcba) = ',
490: 1:    '✅f(ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd) = uxnri',
490: 1:    '✅f(tnnnnnnnddddccccccckcmkkvvvbbbqqqqddannnnmbbbbsssww) = tkcmam',
490: 1:    '✅f(paoooovvviiggggyyyynnnnhhhrjxbbbbbbfjjjjyaaaddqqbbbccueebbbbbbgwoii) = parjxfyugwo',
490: 1:    '✅f(ssssiiiijjjwrbbbvvvlllkkkkesssddcnoarrrbbooyyyydssszzzeeewwy) = wrecnoady',
490: 1:    '❌f(aahhhhvvvviiiiaaabbbbmmmwwwwwzzkkkkyyhhzzzzkkkkcee) = ??? != c'
490: 1:  ],
490: 1:  'level': 17,
490: 1:  'nextQuestion': 'aahhhhvvvviiiiaaabbbbmmmwwwwwzzkkkkyyhhzzzzkkkkcee',
490: 1:  'questions': [
490: 1:    'a',
490: 1:    'abc',
490: 1:    'abcba',
490: 1:    'aa',
490: 1:    'aaaa',
490: 1:    'aaabaa',
490: 1:    'aabaaa',
490: 1:    'abaa',
490: 1:    'abba',
490: 1:    'abbaaa',
490: 1:    'abcdeedcba',
490: 1:    'bcdeeedcbabcde',
490: 1:    'fffkkhhffzzhhkkkzzrrrrryyy',
490: 1:    'beellllgrhhoyy',
490: 1:    'abbcccbad',
490: 1:    'abccbbad',
490: 1:    'abcdeffedcbar',
490: 1:    'abcdeffedcba',
490: 1:    'abcdefaaabbbvvvfedcba',
490: 1:    'ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd',
490: 1:    'tnnnnnnnddddccccccckcmkkvvvbbbqqqqddannnnmbbbbsssww',
490: 1:    'paoooovvviiggggyyyynnnnhhhrjxbbbbbbfjjjjyaaaddqqbbbccueebbbbbbgwoii',
490: 1:    'ssssiiiijjjwrbbbvvvlllkkkkesssddcnoarrrbbooyyyydssszzzeeewwy',
490: 1:    'aahhhhvvvviiiiaaabbbbmmmwwwwwzzkkkkyyhhzzzzkkkkcee'
490: 1:  ]
490: 1:}
490: 1:Scores: 28976
490: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '', '', 'abcde', '', 'bgro', 'abad', 'd', 'r', '', '', 'uxnri', 'tkcmam', 'parjxfyugwo', 'wrecnoady', 'c']')
490: 1:Fire Event: PassTest{complexity=21, testCount=24}
490: 1:Fire Event: NextAlgorithm{complexity=21, time=0}
------------------------------------------
491: 1:BoardData {
491: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
491: 1:  'history': [
491: 1:    {
491: 1:      'answer': 'a',
491: 1:      'question': 'a',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': 'abc',
491: 1:      'question': 'abc',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': 'abcba',
491: 1:      'question': 'abcba',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': '',
491: 1:      'question': 'aa',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': '',
491: 1:      'question': 'aaaa',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': 'b',
491: 1:      'question': 'aaabaa',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': 'b',
491: 1:      'question': 'aabaaa',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': 'ab',
491: 1:      'question': 'abaa',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': '',
491: 1:      'question': 'abba',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': '',
491: 1:      'question': 'abbaaa',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': '',
491: 1:      'question': 'abcdeedcba',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': 'abcde',
491: 1:      'question': 'bcdeeedcbabcde',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': '',
491: 1:      'question': 'fffkkhhffzzhhkkkzzrrrrryyy',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': 'bgro',
491: 1:      'question': 'beellllgrhhoyy',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': 'abad',
491: 1:      'question': 'abbcccbad',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': 'd',
491: 1:      'question': 'abccbbad',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': 'r',
491: 1:      'question': 'abcdeffedcbar',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': '',
491: 1:      'question': 'abcdeffedcba',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': '',
491: 1:      'question': 'abcdefaaabbbvvvfedcba',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': 'uxnri',
491: 1:      'question': 'ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': 'tkcmam',
491: 1:      'question': 'tnnnnnnnddddccccccckcmkkvvvbbbqqqqddannnnmbbbbsssww',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': 'parjxfyugwo',
491: 1:      'question': 'paoooovvviiggggyyyynnnnhhhrjxbbbbbbfjjjjyaaaddqqbbbccueebbbbbbgwoii',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': 'wrecnoady',
491: 1:      'question': 'ssssiiiijjjwrbbbvvvlllkkkkesssddcnoarrrbbooyyyydssszzzeeewwy',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': 'c',
491: 1:      'question': 'aahhhhvvvviiiiaaabbbbmmmwwwwwzzkkkkyyhhzzzzkkkkcee',
491: 1:      'valid': true
491: 1:    }
491: 1:  ],
491: 1:  'info': [
491: 1:    '✅f(a) = a',
491: 1:    '✅f(abc) = abc',
491: 1:    '✅f(abcba) = abcba',
491: 1:    '✅f(aa) = ',
491: 1:    '✅f(aaaa) = ',
491: 1:    '✅f(aaabaa) = b',
491: 1:    '✅f(aabaaa) = b',
491: 1:    '✅f(abaa) = ab',
491: 1:    '✅f(abba) = ',
491: 1:    '✅f(abbaaa) = ',
491: 1:    '✅f(abcdeedcba) = ',
491: 1:    '✅f(bcdeeedcbabcde) = abcde',
491: 1:    '✅f(fffkkhhffzzhhkkkzzrrrrryyy) = ',
491: 1:    '✅f(beellllgrhhoyy) = bgro',
491: 1:    '✅f(abbcccbad) = abad',
491: 1:    '✅f(abccbbad) = d',
491: 1:    '✅f(abcdeffedcbar) = r',
491: 1:    '✅f(abcdeffedcba) = ',
491: 1:    '✅f(abcdefaaabbbvvvfedcba) = ',
491: 1:    '✅f(ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd) = uxnri',
491: 1:    '✅f(tnnnnnnnddddccccccckcmkkvvvbbbqqqqddannnnmbbbbsssww) = tkcmam',
491: 1:    '✅f(paoooovvviiggggyyyynnnnhhhrjxbbbbbbfjjjjyaaaddqqbbbccueebbbbbbgwoii) = parjxfyugwo',
491: 1:    '✅f(ssssiiiijjjwrbbbvvvlllkkkkesssddcnoarrrbbooyyyydssszzzeeewwy) = wrecnoady',
491: 1:    '✅f(aahhhhvvvviiiiaaabbbbmmmwwwwwzzkkkkyyhhzzzzkkkkcee) = c'
491: 1:  ],
491: 1:  'level': 17,
491: 1:  'questions': []
491: 1:}
491: 1:Scores: 31818
491: 1:Answer: message('StartNextLevel')
491: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
492: 1:BoardData {
492: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
492: 1:  'expectedAnswer': '4',
492: 1:  'history': [],
492: 1:  'info': ['❌f(0000) = ??? != 4'],
492: 1:  'level': 18,
492: 1:  'nextQuestion': '0000',
492: 1:  'questions': ['0000']
492: 1:}
492: 1:Scores: 31818
492: 1:Answer: message('['4']')
492: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
493: 1:BoardData {
493: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
493: 1:  'expectedAnswer': '1',
493: 1:  'history': [{
493: 1:    'answer': '4',
493: 1:    'question': '0000',
493: 1:    'valid': true
493: 1:  }],
493: 1:  'info': [
493: 1:    '✅f(0000) = 4',
493: 1:    '❌f(0123) = ??? != 1'
493: 1:  ],
493: 1:  'level': 18,
493: 1:  'nextQuestion': '0123',
493: 1:  'questions': [
493: 1:    '0000',
493: 1:    '0123'
493: 1:  ]
493: 1:}
493: 1:Scores: 31824
493: 1:Answer: message('['4', '1']')
493: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
494: 1:BoardData {
494: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
494: 1:  'expectedAnswer': '1',
494: 1:  'history': [
494: 1:    {
494: 1:      'answer': '4',
494: 1:      'question': '0000',
494: 1:      'valid': true
494: 1:    },
494: 1:    {
494: 1:      'answer': '1',
494: 1:      'question': '0123',
494: 1:      'valid': true
494: 1:    }
494: 1:  ],
494: 1:  'info': [
494: 1:    '✅f(0000) = 4',
494: 1:    '✅f(0123) = 1',
494: 1:    '❌f(4567) = ??? != 1'
494: 1:  ],
494: 1:  'level': 18,
494: 1:  'nextQuestion': '4567',
494: 1:  'questions': [
494: 1:    '0000',
494: 1:    '0123',
494: 1:    '4567'
494: 1:  ]
494: 1:}
494: 1:Scores: 31830
494: 1:Answer: message('['4', '1', '1']')
494: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
495: 1:BoardData {
495: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
495: 1:  'expectedAnswer': '4',
495: 1:  'history': [
495: 1:    {
495: 1:      'answer': '4',
495: 1:      'question': '0000',
495: 1:      'valid': true
495: 1:    },
495: 1:    {
495: 1:      'answer': '1',
495: 1:      'question': '0123',
495: 1:      'valid': true
495: 1:    },
495: 1:    {
495: 1:      'answer': '1',
495: 1:      'question': '4567',
495: 1:      'valid': true
495: 1:    }
495: 1:  ],
495: 1:  'info': [
495: 1:    '✅f(0000) = 4',
495: 1:    '✅f(0123) = 1',
495: 1:    '✅f(4567) = 1',
495: 1:    '❌f(8901) = ??? != 4'
495: 1:  ],
495: 1:  'level': 18,
495: 1:  'nextQuestion': '8901',
495: 1:  'questions': [
495: 1:    '0000',
495: 1:    '0123',
495: 1:    '4567',
495: 1:    '8901'
495: 1:  ]
495: 1:}
495: 1:Scores: 31836
495: 1:Answer: message('['4', '1', '1', '4']')
495: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
496: 1:BoardData {
496: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
496: 1:  'expectedAnswer': '0',
496: 1:  'history': [
496: 1:    {
496: 1:      'answer': '4',
496: 1:      'question': '0000',
496: 1:      'valid': true
496: 1:    },
496: 1:    {
496: 1:      'answer': '1',
496: 1:      'question': '0123',
496: 1:      'valid': true
496: 1:    },
496: 1:    {
496: 1:      'answer': '1',
496: 1:      'question': '4567',
496: 1:      'valid': true
496: 1:    },
496: 1:    {
496: 1:      'answer': '4',
496: 1:      'question': '8901',
496: 1:      'valid': true
496: 1:    }
496: 1:  ],
496: 1:  'info': [
496: 1:    '✅f(0000) = 4',
496: 1:    '✅f(0123) = 1',
496: 1:    '✅f(4567) = 1',
496: 1:    '✅f(8901) = 4',
496: 1:    '❌f(1111) = ??? != 0'
496: 1:  ],
496: 1:  'level': 18,
496: 1:  'nextQuestion': '1111',
496: 1:  'questions': [
496: 1:    '0000',
496: 1:    '0123',
496: 1:    '4567',
496: 1:    '8901',
496: 1:    '1111'
496: 1:  ]
496: 1:}
496: 1:Scores: 31842
496: 1:Answer: message('['4', '1', '1', '4', '0']')
496: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
497: 1:BoardData {
497: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
497: 1:  'expectedAnswer': '2',
497: 1:  'history': [
497: 1:    {
497: 1:      'answer': '4',
497: 1:      'question': '0000',
497: 1:      'valid': true
497: 1:    },
497: 1:    {
497: 1:      'answer': '1',
497: 1:      'question': '0123',
497: 1:      'valid': true
497: 1:    },
497: 1:    {
497: 1:      'answer': '1',
497: 1:      'question': '4567',
497: 1:      'valid': true
497: 1:    },
497: 1:    {
497: 1:      'answer': '4',
497: 1:      'question': '8901',
497: 1:      'valid': true
497: 1:    },
497: 1:    {
497: 1:      'answer': '0',
497: 1:      'question': '1111',
497: 1:      'valid': true
497: 1:    }
497: 1:  ],
497: 1:  'info': [
497: 1:    '✅f(0000) = 4',
497: 1:    '✅f(0123) = 1',
497: 1:    '✅f(4567) = 1',
497: 1:    '✅f(8901) = 4',
497: 1:    '✅f(1111) = 0',
497: 1:    '❌f(3366) = ??? != 2'
497: 1:  ],
497: 1:  'level': 18,
497: 1:  'nextQuestion': '3366',
497: 1:  'questions': [
497: 1:    '0000',
497: 1:    '0123',
497: 1:    '4567',
497: 1:    '8901',
497: 1:    '1111',
497: 1:    '3366'
497: 1:  ]
497: 1:}
497: 1:Scores: 31848
497: 1:Answer: message('['4', '1', '1', '4', '0', '2']')
497: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
498: 1:BoardData {
498: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
498: 1:  'expectedAnswer': '6',
498: 1:  'history': [
498: 1:    {
498: 1:      'answer': '4',
498: 1:      'question': '0000',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '1',
498: 1:      'question': '0123',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '1',
498: 1:      'question': '4567',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '4',
498: 1:      'question': '8901',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '0',
498: 1:      'question': '1111',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '2',
498: 1:      'question': '3366',
498: 1:      'valid': true
498: 1:    }
498: 1:  ],
498: 1:  'info': [
498: 1:    '✅f(0000) = 4',
498: 1:    '✅f(0123) = 1',
498: 1:    '✅f(4567) = 1',
498: 1:    '✅f(8901) = 4',
498: 1:    '✅f(1111) = 0',
498: 1:    '✅f(3366) = 2',
498: 1:    '❌f(8899) = ??? != 6'
498: 1:  ],
498: 1:  'level': 18,
498: 1:  'nextQuestion': '8899',
498: 1:  'questions': [
498: 1:    '0000',
498: 1:    '0123',
498: 1:    '4567',
498: 1:    '8901',
498: 1:    '1111',
498: 1:    '3366',
498: 1:    '8899'
498: 1:  ]
498: 1:}
498: 1:Scores: 31854
498: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6']')
498: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
499: 1:BoardData {
499: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
499: 1:  'expectedAnswer': '5',
499: 1:  'history': [
499: 1:    {
499: 1:      'answer': '4',
499: 1:      'question': '0000',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '1',
499: 1:      'question': '0123',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '1',
499: 1:      'question': '4567',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '4',
499: 1:      'question': '8901',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '0',
499: 1:      'question': '1111',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '2',
499: 1:      'question': '3366',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '6',
499: 1:      'question': '8899',
499: 1:      'valid': true
499: 1:    }
499: 1:  ],
499: 1:  'info': [
499: 1:    '✅f(0000) = 4',
499: 1:    '✅f(0123) = 1',
499: 1:    '✅f(4567) = 1',
499: 1:    '✅f(8901) = 4',
499: 1:    '✅f(1111) = 0',
499: 1:    '✅f(3366) = 2',
499: 1:    '✅f(8899) = 6',
499: 1:    '❌f(0896) = ??? != 5'
499: 1:  ],
499: 1:  'level': 18,
499: 1:  'nextQuestion': '0896',
499: 1:  'questions': [
499: 1:    '0000',
499: 1:    '0123',
499: 1:    '4567',
499: 1:    '8901',
499: 1:    '1111',
499: 1:    '3366',
499: 1:    '8899',
499: 1:    '0896'
499: 1:  ]
499: 1:}
499: 1:Scores: 31860
499: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5']')
499: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
500: 1:BoardData {
500: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
500: 1:  'expectedAnswer': '0',
500: 1:  'history': [
500: 1:    {
500: 1:      'answer': '4',
500: 1:      'question': '0000',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '1',
500: 1:      'question': '0123',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '1',
500: 1:      'question': '4567',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '4',
500: 1:      'question': '8901',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '0',
500: 1:      'question': '1111',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '2',
500: 1:      'question': '3366',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '6',
500: 1:      'question': '8899',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '5',
500: 1:      'question': '0896',
500: 1:      'valid': true
500: 1:    }
500: 1:  ],
500: 1:  'info': [
500: 1:    '✅f(0000) = 4',
500: 1:    '✅f(0123) = 1',
500: 1:    '✅f(4567) = 1',
500: 1:    '✅f(8901) = 4',
500: 1:    '✅f(1111) = 0',
500: 1:    '✅f(3366) = 2',
500: 1:    '✅f(8899) = 6',
500: 1:    '✅f(0896) = 5',
500: 1:    '❌f(3333) = ??? != 0'
500: 1:  ],
500: 1:  'level': 18,
500: 1:  'nextQuestion': '3333',
500: 1:  'questions': [
500: 1:    '0000',
500: 1:    '0123',
500: 1:    '4567',
500: 1:    '8901',
500: 1:    '1111',
500: 1:    '3366',
500: 1:    '8899',
500: 1:    '0896',
500: 1:    '3333'
500: 1:  ]
500: 1:}
500: 1:Scores: 31866
500: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0']')
500: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
501: 1:BoardData {
501: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
501: 1:  'expectedAnswer': '0',
501: 1:  'history': [
501: 1:    {
501: 1:      'answer': '4',
501: 1:      'question': '0000',
501: 1:      'valid': true
501: 1:    },
501: 1:    {
501: 1:      'answer': '1',
501: 1:      'question': '0123',
501: 1:      'valid': true
501: 1:    },
501: 1:    {
501: 1:      'answer': '1',
501: 1:      'question': '4567',
501: 1:      'valid': true
501: 1:    },
501: 1:    {
501: 1:      'answer': '4',
501: 1:      'question': '8901',
501: 1:      'valid': true
501: 1:    },
501: 1:    {
501: 1:      'answer': '0',
501: 1:      'question': '1111',
501: 1:      'valid': true
501: 1:    },
501: 1:    {
501: 1:      'answer': '2',
501: 1:      'question': '3366',
501: 1:      'valid': true
501: 1:    },
501: 1:    {
501: 1:      'answer': '6',
501: 1:      'question': '8899',
501: 1:      'valid': true
501: 1:    },
501: 1:    {
501: 1:      'answer': '5',
501: 1:      'question': '0896',
501: 1:      'valid': true
501: 1:    },
501: 1:    {
501: 1:      'answer': '0',
501: 1:      'question': '3333',
501: 1:      'valid': true
501: 1:    }
501: 1:  ],
501: 1:  'info': [
501: 1:    '✅f(0000) = 4',
501: 1:    '✅f(0123) = 1',
501: 1:    '✅f(4567) = 1',
501: 1:    '✅f(8901) = 4',
501: 1:    '✅f(1111) = 0',
501: 1:    '✅f(3366) = 2',
501: 1:    '✅f(8899) = 6',
501: 1:    '✅f(0896) = 5',
501: 1:    '✅f(3333) = 0',
501: 1:    '❌f(4444) = ??? != 0'
501: 1:  ],
501: 1:  'level': 18,
501: 1:  'nextQuestion': '4444',
501: 1:  'questions': [
501: 1:    '0000',
501: 1:    '0123',
501: 1:    '4567',
501: 1:    '8901',
501: 1:    '1111',
501: 1:    '3366',
501: 1:    '8899',
501: 1:    '0896',
501: 1:    '3333',
501: 1:    '4444'
501: 1:  ]
501: 1:}
501: 1:Scores: 31872
501: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0']')
501: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
502: 1:BoardData {
502: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
502: 1:  'expectedAnswer': '2',
502: 1:  'history': [
502: 1:    {
502: 1:      'answer': '4',
502: 1:      'question': '0000',
502: 1:      'valid': true
502: 1:    },
502: 1:    {
502: 1:      'answer': '1',
502: 1:      'question': '0123',
502: 1:      'valid': true
502: 1:    },
502: 1:    {
502: 1:      'answer': '1',
502: 1:      'question': '4567',
502: 1:      'valid': true
502: 1:    },
502: 1:    {
502: 1:      'answer': '4',
502: 1:      'question': '8901',
502: 1:      'valid': true
502: 1:    },
502: 1:    {
502: 1:      'answer': '0',
502: 1:      'question': '1111',
502: 1:      'valid': true
502: 1:    },
502: 1:    {
502: 1:      'answer': '2',
502: 1:      'question': '3366',
502: 1:      'valid': true
502: 1:    },
502: 1:    {
502: 1:      'answer': '6',
502: 1:      'question': '8899',
502: 1:      'valid': true
502: 1:    },
502: 1:    {
502: 1:      'answer': '5',
502: 1:      'question': '0896',
502: 1:      'valid': true
502: 1:    },
502: 1:    {
502: 1:      'answer': '0',
502: 1:      'question': '3333',
502: 1:      'valid': true
502: 1:    },
502: 1:    {
502: 1:      'answer': '0',
502: 1:      'question': '4444',
502: 1:      'valid': true
502: 1:    }
502: 1:  ],
502: 1:  'info': [
502: 1:    '✅f(0000) = 4',
502: 1:    '✅f(0123) = 1',
502: 1:    '✅f(4567) = 1',
502: 1:    '✅f(8901) = 4',
502: 1:    '✅f(1111) = 0',
502: 1:    '✅f(3366) = 2',
502: 1:    '✅f(8899) = 6',
502: 1:    '✅f(0896) = 5',
502: 1:    '✅f(3333) = 0',
502: 1:    '✅f(4444) = 0',
502: 1:    '❌f(6677) = ??? != 2'
502: 1:  ],
502: 1:  'level': 18,
502: 1:  'nextQuestion': '6677',
502: 1:  'questions': [
502: 1:    '0000',
502: 1:    '0123',
502: 1:    '4567',
502: 1:    '8901',
502: 1:    '1111',
502: 1:    '3366',
502: 1:    '8899',
502: 1:    '0896',
502: 1:    '3333',
502: 1:    '4444',
502: 1:    '6677'
502: 1:  ]
502: 1:}
502: 1:Scores: 31878
502: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2']')
502: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
503: 1:BoardData {
503: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
503: 1:  'expectedAnswer': '6',
503: 1:  'history': [
503: 1:    {
503: 1:      'answer': '4',
503: 1:      'question': '0000',
503: 1:      'valid': true
503: 1:    },
503: 1:    {
503: 1:      'answer': '1',
503: 1:      'question': '0123',
503: 1:      'valid': true
503: 1:    },
503: 1:    {
503: 1:      'answer': '1',
503: 1:      'question': '4567',
503: 1:      'valid': true
503: 1:    },
503: 1:    {
503: 1:      'answer': '4',
503: 1:      'question': '8901',
503: 1:      'valid': true
503: 1:    },
503: 1:    {
503: 1:      'answer': '0',
503: 1:      'question': '1111',
503: 1:      'valid': true
503: 1:    },
503: 1:    {
503: 1:      'answer': '2',
503: 1:      'question': '3366',
503: 1:      'valid': true
503: 1:    },
503: 1:    {
503: 1:      'answer': '6',
503: 1:      'question': '8899',
503: 1:      'valid': true
503: 1:    },
503: 1:    {
503: 1:      'answer': '5',
503: 1:      'question': '0896',
503: 1:      'valid': true
503: 1:    },
503: 1:    {
503: 1:      'answer': '0',
503: 1:      'question': '3333',
503: 1:      'valid': true
503: 1:    },
503: 1:    {
503: 1:      'answer': '0',
503: 1:      'question': '4444',
503: 1:      'valid': true
503: 1:    },
503: 1:    {
503: 1:      'answer': '2',
503: 1:      'question': '6677',
503: 1:      'valid': true
503: 1:    }
503: 1:  ],
503: 1:  'info': [
503: 1:    '✅f(0000) = 4',
503: 1:    '✅f(0123) = 1',
503: 1:    '✅f(4567) = 1',
503: 1:    '✅f(8901) = 4',
503: 1:    '✅f(1111) = 0',
503: 1:    '✅f(3366) = 2',
503: 1:    '✅f(8899) = 6',
503: 1:    '✅f(0896) = 5',
503: 1:    '✅f(3333) = 0',
503: 1:    '✅f(4444) = 0',
503: 1:    '✅f(6677) = 2',
503: 1:    '❌f(8809) = ??? != 6'
503: 1:  ],
503: 1:  'level': 18,
503: 1:  'nextQuestion': '8809',
503: 1:  'questions': [
503: 1:    '0000',
503: 1:    '0123',
503: 1:    '4567',
503: 1:    '8901',
503: 1:    '1111',
503: 1:    '3366',
503: 1:    '8899',
503: 1:    '0896',
503: 1:    '3333',
503: 1:    '4444',
503: 1:    '6677',
503: 1:    '8809'
503: 1:  ]
503: 1:}
503: 1:Scores: 31884
503: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6']')
503: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
504: 1:BoardData {
504: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
504: 1:  'expectedAnswer': '0',
504: 1:  'history': [
504: 1:    {
504: 1:      'answer': '4',
504: 1:      'question': '0000',
504: 1:      'valid': true
504: 1:    },
504: 1:    {
504: 1:      'answer': '1',
504: 1:      'question': '0123',
504: 1:      'valid': true
504: 1:    },
504: 1:    {
504: 1:      'answer': '1',
504: 1:      'question': '4567',
504: 1:      'valid': true
504: 1:    },
504: 1:    {
504: 1:      'answer': '4',
504: 1:      'question': '8901',
504: 1:      'valid': true
504: 1:    },
504: 1:    {
504: 1:      'answer': '0',
504: 1:      'question': '1111',
504: 1:      'valid': true
504: 1:    },
504: 1:    {
504: 1:      'answer': '2',
504: 1:      'question': '3366',
504: 1:      'valid': true
504: 1:    },
504: 1:    {
504: 1:      'answer': '6',
504: 1:      'question': '8899',
504: 1:      'valid': true
504: 1:    },
504: 1:    {
504: 1:      'answer': '5',
504: 1:      'question': '0896',
504: 1:      'valid': true
504: 1:    },
504: 1:    {
504: 1:      'answer': '0',
504: 1:      'question': '3333',
504: 1:      'valid': true
504: 1:    },
504: 1:    {
504: 1:      'answer': '0',
504: 1:      'question': '4444',
504: 1:      'valid': true
504: 1:    },
504: 1:    {
504: 1:      'answer': '2',
504: 1:      'question': '6677',
504: 1:      'valid': true
504: 1:    },
504: 1:    {
504: 1:      'answer': '6',
504: 1:      'question': '8809',
504: 1:      'valid': true
504: 1:    }
504: 1:  ],
504: 1:  'info': [
504: 1:    '✅f(0000) = 4',
504: 1:    '✅f(0123) = 1',
504: 1:    '✅f(4567) = 1',
504: 1:    '✅f(8901) = 4',
504: 1:    '✅f(1111) = 0',
504: 1:    '✅f(3366) = 2',
504: 1:    '✅f(8899) = 6',
504: 1:    '✅f(0896) = 5',
504: 1:    '✅f(3333) = 0',
504: 1:    '✅f(4444) = 0',
504: 1:    '✅f(6677) = 2',
504: 1:    '✅f(8809) = 6',
504: 1:    '❌f(7111) = ??? != 0'
504: 1:  ],
504: 1:  'level': 18,
504: 1:  'nextQuestion': '7111',
504: 1:  'questions': [
504: 1:    '0000',
504: 1:    '0123',
504: 1:    '4567',
504: 1:    '8901',
504: 1:    '1111',
504: 1:    '3366',
504: 1:    '8899',
504: 1:    '0896',
504: 1:    '3333',
504: 1:    '4444',
504: 1:    '6677',
504: 1:    '8809',
504: 1:    '7111'
504: 1:  ]
504: 1:}
504: 1:Scores: 31890
504: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0']')
504: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
505: 1:BoardData {
505: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
505: 1:  'expectedAnswer': '0',
505: 1:  'history': [
505: 1:    {
505: 1:      'answer': '4',
505: 1:      'question': '0000',
505: 1:      'valid': true
505: 1:    },
505: 1:    {
505: 1:      'answer': '1',
505: 1:      'question': '0123',
505: 1:      'valid': true
505: 1:    },
505: 1:    {
505: 1:      'answer': '1',
505: 1:      'question': '4567',
505: 1:      'valid': true
505: 1:    },
505: 1:    {
505: 1:      'answer': '4',
505: 1:      'question': '8901',
505: 1:      'valid': true
505: 1:    },
505: 1:    {
505: 1:      'answer': '0',
505: 1:      'question': '1111',
505: 1:      'valid': true
505: 1:    },
505: 1:    {
505: 1:      'answer': '2',
505: 1:      'question': '3366',
505: 1:      'valid': true
505: 1:    },
505: 1:    {
505: 1:      'answer': '6',
505: 1:      'question': '8899',
505: 1:      'valid': true
505: 1:    },
505: 1:    {
505: 1:      'answer': '5',
505: 1:      'question': '0896',
505: 1:      'valid': true
505: 1:    },
505: 1:    {
505: 1:      'answer': '0',
505: 1:      'question': '3333',
505: 1:      'valid': true
505: 1:    },
505: 1:    {
505: 1:      'answer': '0',
505: 1:      'question': '4444',
505: 1:      'valid': true
505: 1:    },
505: 1:    {
505: 1:      'answer': '2',
505: 1:      'question': '6677',
505: 1:      'valid': true
505: 1:    },
505: 1:    {
505: 1:      'answer': '6',
505: 1:      'question': '8809',
505: 1:      'valid': true
505: 1:    },
505: 1:    {
505: 1:      'answer': '0',
505: 1:      'question': '7111',
505: 1:      'valid': true
505: 1:    }
505: 1:  ],
505: 1:  'info': [
505: 1:    '✅f(0000) = 4',
505: 1:    '✅f(0123) = 1',
505: 1:    '✅f(4567) = 1',
505: 1:    '✅f(8901) = 4',
505: 1:    '✅f(1111) = 0',
505: 1:    '✅f(3366) = 2',
505: 1:    '✅f(8899) = 6',
505: 1:    '✅f(0896) = 5',
505: 1:    '✅f(3333) = 0',
505: 1:    '✅f(4444) = 0',
505: 1:    '✅f(6677) = 2',
505: 1:    '✅f(8809) = 6',
505: 1:    '✅f(7111) = 0',
505: 1:    '❌f(2172) = ??? != 0'
505: 1:  ],
505: 1:  'level': 18,
505: 1:  'nextQuestion': '2172',
505: 1:  'questions': [
505: 1:    '0000',
505: 1:    '0123',
505: 1:    '4567',
505: 1:    '8901',
505: 1:    '1111',
505: 1:    '3366',
505: 1:    '8899',
505: 1:    '0896',
505: 1:    '3333',
505: 1:    '4444',
505: 1:    '6677',
505: 1:    '8809',
505: 1:    '7111',
505: 1:    '2172'
505: 1:  ]
505: 1:}
505: 1:Scores: 31896
505: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0']')
505: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
506: 1:BoardData {
506: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
506: 1:  'expectedAnswer': '4',
506: 1:  'history': [
506: 1:    {
506: 1:      'answer': '4',
506: 1:      'question': '0000',
506: 1:      'valid': true
506: 1:    },
506: 1:    {
506: 1:      'answer': '1',
506: 1:      'question': '0123',
506: 1:      'valid': true
506: 1:    },
506: 1:    {
506: 1:      'answer': '1',
506: 1:      'question': '4567',
506: 1:      'valid': true
506: 1:    },
506: 1:    {
506: 1:      'answer': '4',
506: 1:      'question': '8901',
506: 1:      'valid': true
506: 1:    },
506: 1:    {
506: 1:      'answer': '0',
506: 1:      'question': '1111',
506: 1:      'valid': true
506: 1:    },
506: 1:    {
506: 1:      'answer': '2',
506: 1:      'question': '3366',
506: 1:      'valid': true
506: 1:    },
506: 1:    {
506: 1:      'answer': '6',
506: 1:      'question': '8899',
506: 1:      'valid': true
506: 1:    },
506: 1:    {
506: 1:      'answer': '5',
506: 1:      'question': '0896',
506: 1:      'valid': true
506: 1:    },
506: 1:    {
506: 1:      'answer': '0',
506: 1:      'question': '3333',
506: 1:      'valid': true
506: 1:    },
506: 1:    {
506: 1:      'answer': '0',
506: 1:      'question': '4444',
506: 1:      'valid': true
506: 1:    },
506: 1:    {
506: 1:      'answer': '2',
506: 1:      'question': '6677',
506: 1:      'valid': true
506: 1:    },
506: 1:    {
506: 1:      'answer': '6',
506: 1:      'question': '8809',
506: 1:      'valid': true
506: 1:    },
506: 1:    {
506: 1:      'answer': '0',
506: 1:      'question': '7111',
506: 1:      'valid': true
506: 1:    },
506: 1:    {
506: 1:      'answer': '0',
506: 1:      'question': '2172',
506: 1:      'valid': true
506: 1:    }
506: 1:  ],
506: 1:  'info': [
506: 1:    '✅f(0000) = 4',
506: 1:    '✅f(0123) = 1',
506: 1:    '✅f(4567) = 1',
506: 1:    '✅f(8901) = 4',
506: 1:    '✅f(1111) = 0',
506: 1:    '✅f(3366) = 2',
506: 1:    '✅f(8899) = 6',
506: 1:    '✅f(0896) = 5',
506: 1:    '✅f(3333) = 0',
506: 1:    '✅f(4444) = 0',
506: 1:    '✅f(6677) = 2',
506: 1:    '✅f(8809) = 6',
506: 1:    '✅f(7111) = 0',
506: 1:    '✅f(2172) = 0',
506: 1:    '❌f(6666) = ??? != 4'
506: 1:  ],
506: 1:  'level': 18,
506: 1:  'nextQuestion': '6666',
506: 1:  'questions': [
506: 1:    '0000',
506: 1:    '0123',
506: 1:    '4567',
506: 1:    '8901',
506: 1:    '1111',
506: 1:    '3366',
506: 1:    '8899',
506: 1:    '0896',
506: 1:    '3333',
506: 1:    '4444',
506: 1:    '6677',
506: 1:    '8809',
506: 1:    '7111',
506: 1:    '2172',
506: 1:    '6666'
506: 1:  ]
506: 1:}
506: 1:Scores: 31902
506: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4']')
506: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
507: 1:BoardData {
507: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
507: 1:  'expectedAnswer': '0',
507: 1:  'history': [
507: 1:    {
507: 1:      'answer': '4',
507: 1:      'question': '0000',
507: 1:      'valid': true
507: 1:    },
507: 1:    {
507: 1:      'answer': '1',
507: 1:      'question': '0123',
507: 1:      'valid': true
507: 1:    },
507: 1:    {
507: 1:      'answer': '1',
507: 1:      'question': '4567',
507: 1:      'valid': true
507: 1:    },
507: 1:    {
507: 1:      'answer': '4',
507: 1:      'question': '8901',
507: 1:      'valid': true
507: 1:    },
507: 1:    {
507: 1:      'answer': '0',
507: 1:      'question': '1111',
507: 1:      'valid': true
507: 1:    },
507: 1:    {
507: 1:      'answer': '2',
507: 1:      'question': '3366',
507: 1:      'valid': true
507: 1:    },
507: 1:    {
507: 1:      'answer': '6',
507: 1:      'question': '8899',
507: 1:      'valid': true
507: 1:    },
507: 1:    {
507: 1:      'answer': '5',
507: 1:      'question': '0896',
507: 1:      'valid': true
507: 1:    },
507: 1:    {
507: 1:      'answer': '0',
507: 1:      'question': '3333',
507: 1:      'valid': true
507: 1:    },
507: 1:    {
507: 1:      'answer': '0',
507: 1:      'question': '4444',
507: 1:      'valid': true
507: 1:    },
507: 1:    {
507: 1:      'answer': '2',
507: 1:      'question': '6677',
507: 1:      'valid': true
507: 1:    },
507: 1:    {
507: 1:      'answer': '6',
507: 1:      'question': '8809',
507: 1:      'valid': true
507: 1:    },
507: 1:    {
507: 1:      'answer': '0',
507: 1:      'question': '7111',
507: 1:      'valid': true
507: 1:    },
507: 1:    {
507: 1:      'answer': '0',
507: 1:      'question': '2172',
507: 1:      'valid': true
507: 1:    },
507: 1:    {
507: 1:      'answer': '4',
507: 1:      'question': '6666',
507: 1:      'valid': true
507: 1:    }
507: 1:  ],
507: 1:  'info': [
507: 1:    '✅f(0000) = 4',
507: 1:    '✅f(0123) = 1',
507: 1:    '✅f(4567) = 1',
507: 1:    '✅f(8901) = 4',
507: 1:    '✅f(1111) = 0',
507: 1:    '✅f(3366) = 2',
507: 1:    '✅f(8899) = 6',
507: 1:    '✅f(0896) = 5',
507: 1:    '✅f(3333) = 0',
507: 1:    '✅f(4444) = 0',
507: 1:    '✅f(6677) = 2',
507: 1:    '✅f(8809) = 6',
507: 1:    '✅f(7111) = 0',
507: 1:    '✅f(2172) = 0',
507: 1:    '✅f(6666) = 4',
507: 1:    '❌f(3213) = ??? != 0'
507: 1:  ],
507: 1:  'level': 18,
507: 1:  'nextQuestion': '3213',
507: 1:  'questions': [
507: 1:    '0000',
507: 1:    '0123',
507: 1:    '4567',
507: 1:    '8901',
507: 1:    '1111',
507: 1:    '3366',
507: 1:    '8899',
507: 1:    '0896',
507: 1:    '3333',
507: 1:    '4444',
507: 1:    '6677',
507: 1:    '8809',
507: 1:    '7111',
507: 1:    '2172',
507: 1:    '6666',
507: 1:    '3213'
507: 1:  ]
507: 1:}
507: 1:Scores: 31908
507: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0']')
507: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
508: 1:BoardData {
508: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
508: 1:  'expectedAnswer': '2',
508: 1:  'history': [
508: 1:    {
508: 1:      'answer': '4',
508: 1:      'question': '0000',
508: 1:      'valid': true
508: 1:    },
508: 1:    {
508: 1:      'answer': '1',
508: 1:      'question': '0123',
508: 1:      'valid': true
508: 1:    },
508: 1:    {
508: 1:      'answer': '1',
508: 1:      'question': '4567',
508: 1:      'valid': true
508: 1:    },
508: 1:    {
508: 1:      'answer': '4',
508: 1:      'question': '8901',
508: 1:      'valid': true
508: 1:    },
508: 1:    {
508: 1:      'answer': '0',
508: 1:      'question': '1111',
508: 1:      'valid': true
508: 1:    },
508: 1:    {
508: 1:      'answer': '2',
508: 1:      'question': '3366',
508: 1:      'valid': true
508: 1:    },
508: 1:    {
508: 1:      'answer': '6',
508: 1:      'question': '8899',
508: 1:      'valid': true
508: 1:    },
508: 1:    {
508: 1:      'answer': '5',
508: 1:      'question': '0896',
508: 1:      'valid': true
508: 1:    },
508: 1:    {
508: 1:      'answer': '0',
508: 1:      'question': '3333',
508: 1:      'valid': true
508: 1:    },
508: 1:    {
508: 1:      'answer': '0',
508: 1:      'question': '4444',
508: 1:      'valid': true
508: 1:    },
508: 1:    {
508: 1:      'answer': '2',
508: 1:      'question': '6677',
508: 1:      'valid': true
508: 1:    },
508: 1:    {
508: 1:      'answer': '6',
508: 1:      'question': '8809',
508: 1:      'valid': true
508: 1:    },
508: 1:    {
508: 1:      'answer': '0',
508: 1:      'question': '7111',
508: 1:      'valid': true
508: 1:    },
508: 1:    {
508: 1:      'answer': '0',
508: 1:      'question': '2172',
508: 1:      'valid': true
508: 1:    },
508: 1:    {
508: 1:      'answer': '4',
508: 1:      'question': '6666',
508: 1:      'valid': true
508: 1:    },
508: 1:    {
508: 1:      'answer': '0',
508: 1:      'question': '3213',
508: 1:      'valid': true
508: 1:    }
508: 1:  ],
508: 1:  'info': [
508: 1:    '✅f(0000) = 4',
508: 1:    '✅f(0123) = 1',
508: 1:    '✅f(4567) = 1',
508: 1:    '✅f(8901) = 4',
508: 1:    '✅f(1111) = 0',
508: 1:    '✅f(3366) = 2',
508: 1:    '✅f(8899) = 6',
508: 1:    '✅f(0896) = 5',
508: 1:    '✅f(3333) = 0',
508: 1:    '✅f(4444) = 0',
508: 1:    '✅f(6677) = 2',
508: 1:    '✅f(8809) = 6',
508: 1:    '✅f(7111) = 0',
508: 1:    '✅f(2172) = 0',
508: 1:    '✅f(6666) = 4',
508: 1:    '✅f(3213) = 0',
508: 1:    '❌f(7662) = ??? != 2'
508: 1:  ],
508: 1:  'level': 18,
508: 1:  'nextQuestion': '7662',
508: 1:  'questions': [
508: 1:    '0000',
508: 1:    '0123',
508: 1:    '4567',
508: 1:    '8901',
508: 1:    '1111',
508: 1:    '3366',
508: 1:    '8899',
508: 1:    '0896',
508: 1:    '3333',
508: 1:    '4444',
508: 1:    '6677',
508: 1:    '8809',
508: 1:    '7111',
508: 1:    '2172',
508: 1:    '6666',
508: 1:    '3213',
508: 1:    '7662'
508: 1:  ]
508: 1:}
508: 1:Scores: 31914
508: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2']')
508: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
509: 1:BoardData {
509: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
509: 1:  'expectedAnswer': '1',
509: 1:  'history': [
509: 1:    {
509: 1:      'answer': '4',
509: 1:      'question': '0000',
509: 1:      'valid': true
509: 1:    },
509: 1:    {
509: 1:      'answer': '1',
509: 1:      'question': '0123',
509: 1:      'valid': true
509: 1:    },
509: 1:    {
509: 1:      'answer': '1',
509: 1:      'question': '4567',
509: 1:      'valid': true
509: 1:    },
509: 1:    {
509: 1:      'answer': '4',
509: 1:      'question': '8901',
509: 1:      'valid': true
509: 1:    },
509: 1:    {
509: 1:      'answer': '0',
509: 1:      'question': '1111',
509: 1:      'valid': true
509: 1:    },
509: 1:    {
509: 1:      'answer': '2',
509: 1:      'question': '3366',
509: 1:      'valid': true
509: 1:    },
509: 1:    {
509: 1:      'answer': '6',
509: 1:      'question': '8899',
509: 1:      'valid': true
509: 1:    },
509: 1:    {
509: 1:      'answer': '5',
509: 1:      'question': '0896',
509: 1:      'valid': true
509: 1:    },
509: 1:    {
509: 1:      'answer': '0',
509: 1:      'question': '3333',
509: 1:      'valid': true
509: 1:    },
509: 1:    {
509: 1:      'answer': '0',
509: 1:      'question': '4444',
509: 1:      'valid': true
509: 1:    },
509: 1:    {
509: 1:      'answer': '2',
509: 1:      'question': '6677',
509: 1:      'valid': true
509: 1:    },
509: 1:    {
509: 1:      'answer': '6',
509: 1:      'question': '8809',
509: 1:      'valid': true
509: 1:    },
509: 1:    {
509: 1:      'answer': '0',
509: 1:      'question': '7111',
509: 1:      'valid': true
509: 1:    },
509: 1:    {
509: 1:      'answer': '0',
509: 1:      'question': '2172',
509: 1:      'valid': true
509: 1:    },
509: 1:    {
509: 1:      'answer': '4',
509: 1:      'question': '6666',
509: 1:      'valid': true
509: 1:    },
509: 1:    {
509: 1:      'answer': '0',
509: 1:      'question': '3213',
509: 1:      'valid': true
509: 1:    },
509: 1:    {
509: 1:      'answer': '2',
509: 1:      'question': '7662',
509: 1:      'valid': true
509: 1:    }
509: 1:  ],
509: 1:  'info': [
509: 1:    '✅f(0000) = 4',
509: 1:    '✅f(0123) = 1',
509: 1:    '✅f(4567) = 1',
509: 1:    '✅f(8901) = 4',
509: 1:    '✅f(1111) = 0',
509: 1:    '✅f(3366) = 2',
509: 1:    '✅f(8899) = 6',
509: 1:    '✅f(0896) = 5',
509: 1:    '✅f(3333) = 0',
509: 1:    '✅f(4444) = 0',
509: 1:    '✅f(6677) = 2',
509: 1:    '✅f(8809) = 6',
509: 1:    '✅f(7111) = 0',
509: 1:    '✅f(2172) = 0',
509: 1:    '✅f(6666) = 4',
509: 1:    '✅f(3213) = 0',
509: 1:    '✅f(7662) = 2',
509: 1:    '❌f(9312) = ??? != 1'
509: 1:  ],
509: 1:  'level': 18,
509: 1:  'nextQuestion': '9312',
509: 1:  'questions': [
509: 1:    '0000',
509: 1:    '0123',
509: 1:    '4567',
509: 1:    '8901',
509: 1:    '1111',
509: 1:    '3366',
509: 1:    '8899',
509: 1:    '0896',
509: 1:    '3333',
509: 1:    '4444',
509: 1:    '6677',
509: 1:    '8809',
509: 1:    '7111',
509: 1:    '2172',
509: 1:    '6666',
509: 1:    '3213',
509: 1:    '7662',
509: 1:    '9312'
509: 1:  ]
509: 1:}
509: 1:Scores: 31920
509: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1']')
509: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
510: 1:BoardData {
510: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
510: 1:  'expectedAnswer': '0',
510: 1:  'history': [
510: 1:    {
510: 1:      'answer': '4',
510: 1:      'question': '0000',
510: 1:      'valid': true
510: 1:    },
510: 1:    {
510: 1:      'answer': '1',
510: 1:      'question': '0123',
510: 1:      'valid': true
510: 1:    },
510: 1:    {
510: 1:      'answer': '1',
510: 1:      'question': '4567',
510: 1:      'valid': true
510: 1:    },
510: 1:    {
510: 1:      'answer': '4',
510: 1:      'question': '8901',
510: 1:      'valid': true
510: 1:    },
510: 1:    {
510: 1:      'answer': '0',
510: 1:      'question': '1111',
510: 1:      'valid': true
510: 1:    },
510: 1:    {
510: 1:      'answer': '2',
510: 1:      'question': '3366',
510: 1:      'valid': true
510: 1:    },
510: 1:    {
510: 1:      'answer': '6',
510: 1:      'question': '8899',
510: 1:      'valid': true
510: 1:    },
510: 1:    {
510: 1:      'answer': '5',
510: 1:      'question': '0896',
510: 1:      'valid': true
510: 1:    },
510: 1:    {
510: 1:      'answer': '0',
510: 1:      'question': '3333',
510: 1:      'valid': true
510: 1:    },
510: 1:    {
510: 1:      'answer': '0',
510: 1:      'question': '4444',
510: 1:      'valid': true
510: 1:    },
510: 1:    {
510: 1:      'answer': '2',
510: 1:      'question': '6677',
510: 1:      'valid': true
510: 1:    },
510: 1:    {
510: 1:      'answer': '6',
510: 1:      'question': '8809',
510: 1:      'valid': true
510: 1:    },
510: 1:    {
510: 1:      'answer': '0',
510: 1:      'question': '7111',
510: 1:      'valid': true
510: 1:    },
510: 1:    {
510: 1:      'answer': '0',
510: 1:      'question': '2172',
510: 1:      'valid': true
510: 1:    },
510: 1:    {
510: 1:      'answer': '4',
510: 1:      'question': '6666',
510: 1:      'valid': true
510: 1:    },
510: 1:    {
510: 1:      'answer': '0',
510: 1:      'question': '3213',
510: 1:      'valid': true
510: 1:    },
510: 1:    {
510: 1:      'answer': '2',
510: 1:      'question': '7662',
510: 1:      'valid': true
510: 1:    },
510: 1:    {
510: 1:      'answer': '1',
510: 1:      'question': '9312',
510: 1:      'valid': true
510: 1:    }
510: 1:  ],
510: 1:  'info': [
510: 1:    '✅f(0000) = 4',
510: 1:    '✅f(0123) = 1',
510: 1:    '✅f(4567) = 1',
510: 1:    '✅f(8901) = 4',
510: 1:    '✅f(1111) = 0',
510: 1:    '✅f(3366) = 2',
510: 1:    '✅f(8899) = 6',
510: 1:    '✅f(0896) = 5',
510: 1:    '✅f(3333) = 0',
510: 1:    '✅f(4444) = 0',
510: 1:    '✅f(6677) = 2',
510: 1:    '✅f(8809) = 6',
510: 1:    '✅f(7111) = 0',
510: 1:    '✅f(2172) = 0',
510: 1:    '✅f(6666) = 4',
510: 1:    '✅f(3213) = 0',
510: 1:    '✅f(7662) = 2',
510: 1:    '✅f(9312) = 1',
510: 1:    '❌f(2222) = ??? != 0'
510: 1:  ],
510: 1:  'level': 18,
510: 1:  'nextQuestion': '2222',
510: 1:  'questions': [
510: 1:    '0000',
510: 1:    '0123',
510: 1:    '4567',
510: 1:    '8901',
510: 1:    '1111',
510: 1:    '3366',
510: 1:    '8899',
510: 1:    '0896',
510: 1:    '3333',
510: 1:    '4444',
510: 1:    '6677',
510: 1:    '8809',
510: 1:    '7111',
510: 1:    '2172',
510: 1:    '6666',
510: 1:    '3213',
510: 1:    '7662',
510: 1:    '9312',
510: 1:    '2222'
510: 1:  ]
510: 1:}
510: 1:Scores: 31926
510: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0']')
510: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
511: 1:BoardData {
511: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
511: 1:  'expectedAnswer': '0',
511: 1:  'history': [
511: 1:    {
511: 1:      'answer': '4',
511: 1:      'question': '0000',
511: 1:      'valid': true
511: 1:    },
511: 1:    {
511: 1:      'answer': '1',
511: 1:      'question': '0123',
511: 1:      'valid': true
511: 1:    },
511: 1:    {
511: 1:      'answer': '1',
511: 1:      'question': '4567',
511: 1:      'valid': true
511: 1:    },
511: 1:    {
511: 1:      'answer': '4',
511: 1:      'question': '8901',
511: 1:      'valid': true
511: 1:    },
511: 1:    {
511: 1:      'answer': '0',
511: 1:      'question': '1111',
511: 1:      'valid': true
511: 1:    },
511: 1:    {
511: 1:      'answer': '2',
511: 1:      'question': '3366',
511: 1:      'valid': true
511: 1:    },
511: 1:    {
511: 1:      'answer': '6',
511: 1:      'question': '8899',
511: 1:      'valid': true
511: 1:    },
511: 1:    {
511: 1:      'answer': '5',
511: 1:      'question': '0896',
511: 1:      'valid': true
511: 1:    },
511: 1:    {
511: 1:      'answer': '0',
511: 1:      'question': '3333',
511: 1:      'valid': true
511: 1:    },
511: 1:    {
511: 1:      'answer': '0',
511: 1:      'question': '4444',
511: 1:      'valid': true
511: 1:    },
511: 1:    {
511: 1:      'answer': '2',
511: 1:      'question': '6677',
511: 1:      'valid': true
511: 1:    },
511: 1:    {
511: 1:      'answer': '6',
511: 1:      'question': '8809',
511: 1:      'valid': true
511: 1:    },
511: 1:    {
511: 1:      'answer': '0',
511: 1:      'question': '7111',
511: 1:      'valid': true
511: 1:    },
511: 1:    {
511: 1:      'answer': '0',
511: 1:      'question': '2172',
511: 1:      'valid': true
511: 1:    },
511: 1:    {
511: 1:      'answer': '4',
511: 1:      'question': '6666',
511: 1:      'valid': true
511: 1:    },
511: 1:    {
511: 1:      'answer': '0',
511: 1:      'question': '3213',
511: 1:      'valid': true
511: 1:    },
511: 1:    {
511: 1:      'answer': '2',
511: 1:      'question': '7662',
511: 1:      'valid': true
511: 1:    },
511: 1:    {
511: 1:      'answer': '1',
511: 1:      'question': '9312',
511: 1:      'valid': true
511: 1:    },
511: 1:    {
511: 1:      'answer': '0',
511: 1:      'question': '2222',
511: 1:      'valid': true
511: 1:    }
511: 1:  ],
511: 1:  'info': [
511: 1:    '✅f(0000) = 4',
511: 1:    '✅f(0123) = 1',
511: 1:    '✅f(4567) = 1',
511: 1:    '✅f(8901) = 4',
511: 1:    '✅f(1111) = 0',
511: 1:    '✅f(3366) = 2',
511: 1:    '✅f(8899) = 6',
511: 1:    '✅f(0896) = 5',
511: 1:    '✅f(3333) = 0',
511: 1:    '✅f(4444) = 0',
511: 1:    '✅f(6677) = 2',
511: 1:    '✅f(8809) = 6',
511: 1:    '✅f(7111) = 0',
511: 1:    '✅f(2172) = 0',
511: 1:    '✅f(6666) = 4',
511: 1:    '✅f(3213) = 0',
511: 1:    '✅f(7662) = 2',
511: 1:    '✅f(9312) = 1',
511: 1:    '✅f(2222) = 0',
511: 1:    '❌f(5555) = ??? != 0'
511: 1:  ],
511: 1:  'level': 18,
511: 1:  'nextQuestion': '5555',
511: 1:  'questions': [
511: 1:    '0000',
511: 1:    '0123',
511: 1:    '4567',
511: 1:    '8901',
511: 1:    '1111',
511: 1:    '3366',
511: 1:    '8899',
511: 1:    '0896',
511: 1:    '3333',
511: 1:    '4444',
511: 1:    '6677',
511: 1:    '8809',
511: 1:    '7111',
511: 1:    '2172',
511: 1:    '6666',
511: 1:    '3213',
511: 1:    '7662',
511: 1:    '9312',
511: 1:    '2222',
511: 1:    '5555'
511: 1:  ]
511: 1:}
511: 1:Scores: 31932
511: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0']')
511: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
512: 1:BoardData {
512: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
512: 1:  'expectedAnswer': '3',
512: 1:  'history': [
512: 1:    {
512: 1:      'answer': '4',
512: 1:      'question': '0000',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': '1',
512: 1:      'question': '0123',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': '1',
512: 1:      'question': '4567',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': '4',
512: 1:      'question': '8901',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': '0',
512: 1:      'question': '1111',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': '2',
512: 1:      'question': '3366',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': '6',
512: 1:      'question': '8899',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': '5',
512: 1:      'question': '0896',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': '0',
512: 1:      'question': '3333',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': '0',
512: 1:      'question': '4444',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': '2',
512: 1:      'question': '6677',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': '6',
512: 1:      'question': '8809',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': '0',
512: 1:      'question': '7111',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': '0',
512: 1:      'question': '2172',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': '4',
512: 1:      'question': '6666',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': '0',
512: 1:      'question': '3213',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': '2',
512: 1:      'question': '7662',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': '1',
512: 1:      'question': '9312',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': '0',
512: 1:      'question': '2222',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': '0',
512: 1:      'question': '5555',
512: 1:      'valid': true
512: 1:    }
512: 1:  ],
512: 1:  'info': [
512: 1:    '✅f(0000) = 4',
512: 1:    '✅f(0123) = 1',
512: 1:    '✅f(4567) = 1',
512: 1:    '✅f(8901) = 4',
512: 1:    '✅f(1111) = 0',
512: 1:    '✅f(3366) = 2',
512: 1:    '✅f(8899) = 6',
512: 1:    '✅f(0896) = 5',
512: 1:    '✅f(3333) = 0',
512: 1:    '✅f(4444) = 0',
512: 1:    '✅f(6677) = 2',
512: 1:    '✅f(8809) = 6',
512: 1:    '✅f(7111) = 0',
512: 1:    '✅f(2172) = 0',
512: 1:    '✅f(6666) = 4',
512: 1:    '✅f(3213) = 0',
512: 1:    '✅f(7662) = 2',
512: 1:    '✅f(9312) = 1',
512: 1:    '✅f(2222) = 0',
512: 1:    '✅f(5555) = 0',
512: 1:    '❌f(8193) = ??? != 3'
512: 1:  ],
512: 1:  'level': 18,
512: 1:  'nextQuestion': '8193',
512: 1:  'questions': [
512: 1:    '0000',
512: 1:    '0123',
512: 1:    '4567',
512: 1:    '8901',
512: 1:    '1111',
512: 1:    '3366',
512: 1:    '8899',
512: 1:    '0896',
512: 1:    '3333',
512: 1:    '4444',
512: 1:    '6677',
512: 1:    '8809',
512: 1:    '7111',
512: 1:    '2172',
512: 1:    '6666',
512: 1:    '3213',
512: 1:    '7662',
512: 1:    '9312',
512: 1:    '2222',
512: 1:    '5555',
512: 1:    '8193'
512: 1:  ]
512: 1:}
512: 1:Scores: 31938
512: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3']')
512: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
513: 1:BoardData {
513: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
513: 1:  'expectedAnswer': '5',
513: 1:  'history': [
513: 1:    {
513: 1:      'answer': '4',
513: 1:      'question': '0000',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': '1',
513: 1:      'question': '0123',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': '1',
513: 1:      'question': '4567',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': '4',
513: 1:      'question': '8901',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': '0',
513: 1:      'question': '1111',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': '2',
513: 1:      'question': '3366',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': '6',
513: 1:      'question': '8899',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': '5',
513: 1:      'question': '0896',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': '0',
513: 1:      'question': '3333',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': '0',
513: 1:      'question': '4444',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': '2',
513: 1:      'question': '6677',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': '6',
513: 1:      'question': '8809',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': '0',
513: 1:      'question': '7111',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': '0',
513: 1:      'question': '2172',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': '4',
513: 1:      'question': '6666',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': '0',
513: 1:      'question': '3213',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': '2',
513: 1:      'question': '7662',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': '1',
513: 1:      'question': '9312',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': '0',
513: 1:      'question': '2222',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': '0',
513: 1:      'question': '5555',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': '3',
513: 1:      'question': '8193',
513: 1:      'valid': true
513: 1:    }
513: 1:  ],
513: 1:  'info': [
513: 1:    '✅f(0000) = 4',
513: 1:    '✅f(0123) = 1',
513: 1:    '✅f(4567) = 1',
513: 1:    '✅f(8901) = 4',
513: 1:    '✅f(1111) = 0',
513: 1:    '✅f(3366) = 2',
513: 1:    '✅f(8899) = 6',
513: 1:    '✅f(0896) = 5',
513: 1:    '✅f(3333) = 0',
513: 1:    '✅f(4444) = 0',
513: 1:    '✅f(6677) = 2',
513: 1:    '✅f(8809) = 6',
513: 1:    '✅f(7111) = 0',
513: 1:    '✅f(2172) = 0',
513: 1:    '✅f(6666) = 4',
513: 1:    '✅f(3213) = 0',
513: 1:    '✅f(7662) = 2',
513: 1:    '✅f(9312) = 1',
513: 1:    '✅f(2222) = 0',
513: 1:    '✅f(5555) = 0',
513: 1:    '✅f(8193) = 3',
513: 1:    '❌f(8096) = ??? != 5'
513: 1:  ],
513: 1:  'level': 18,
513: 1:  'nextQuestion': '8096',
513: 1:  'questions': [
513: 1:    '0000',
513: 1:    '0123',
513: 1:    '4567',
513: 1:    '8901',
513: 1:    '1111',
513: 1:    '3366',
513: 1:    '8899',
513: 1:    '0896',
513: 1:    '3333',
513: 1:    '4444',
513: 1:    '6677',
513: 1:    '8809',
513: 1:    '7111',
513: 1:    '2172',
513: 1:    '6666',
513: 1:    '3213',
513: 1:    '7662',
513: 1:    '9312',
513: 1:    '2222',
513: 1:    '5555',
513: 1:    '8193',
513: 1:    '8096'
513: 1:  ]
513: 1:}
513: 1:Scores: 31944
513: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5']')
513: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
514: 1:BoardData {
514: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
514: 1:  'expectedAnswer': '0',
514: 1:  'history': [
514: 1:    {
514: 1:      'answer': '4',
514: 1:      'question': '0000',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': '1',
514: 1:      'question': '0123',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': '1',
514: 1:      'question': '4567',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': '4',
514: 1:      'question': '8901',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': '0',
514: 1:      'question': '1111',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': '2',
514: 1:      'question': '3366',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': '6',
514: 1:      'question': '8899',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': '5',
514: 1:      'question': '0896',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': '0',
514: 1:      'question': '3333',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': '0',
514: 1:      'question': '4444',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': '2',
514: 1:      'question': '6677',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': '6',
514: 1:      'question': '8809',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': '0',
514: 1:      'question': '7111',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': '0',
514: 1:      'question': '2172',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': '4',
514: 1:      'question': '6666',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': '0',
514: 1:      'question': '3213',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': '2',
514: 1:      'question': '7662',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': '1',
514: 1:      'question': '9312',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': '0',
514: 1:      'question': '2222',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': '0',
514: 1:      'question': '5555',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': '3',
514: 1:      'question': '8193',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': '5',
514: 1:      'question': '8096',
514: 1:      'valid': true
514: 1:    }
514: 1:  ],
514: 1:  'info': [
514: 1:    '✅f(0000) = 4',
514: 1:    '✅f(0123) = 1',
514: 1:    '✅f(4567) = 1',
514: 1:    '✅f(8901) = 4',
514: 1:    '✅f(1111) = 0',
514: 1:    '✅f(3366) = 2',
514: 1:    '✅f(8899) = 6',
514: 1:    '✅f(0896) = 5',
514: 1:    '✅f(3333) = 0',
514: 1:    '✅f(4444) = 0',
514: 1:    '✅f(6677) = 2',
514: 1:    '✅f(8809) = 6',
514: 1:    '✅f(7111) = 0',
514: 1:    '✅f(2172) = 0',
514: 1:    '✅f(6666) = 4',
514: 1:    '✅f(3213) = 0',
514: 1:    '✅f(7662) = 2',
514: 1:    '✅f(9312) = 1',
514: 1:    '✅f(2222) = 0',
514: 1:    '✅f(5555) = 0',
514: 1:    '✅f(8193) = 3',
514: 1:    '✅f(8096) = 5',
514: 1:    '❌f(7777) = ??? != 0'
514: 1:  ],
514: 1:  'level': 18,
514: 1:  'nextQuestion': '7777',
514: 1:  'questions': [
514: 1:    '0000',
514: 1:    '0123',
514: 1:    '4567',
514: 1:    '8901',
514: 1:    '1111',
514: 1:    '3366',
514: 1:    '8899',
514: 1:    '0896',
514: 1:    '3333',
514: 1:    '4444',
514: 1:    '6677',
514: 1:    '8809',
514: 1:    '7111',
514: 1:    '2172',
514: 1:    '6666',
514: 1:    '3213',
514: 1:    '7662',
514: 1:    '9312',
514: 1:    '2222',
514: 1:    '5555',
514: 1:    '8193',
514: 1:    '8096',
514: 1:    '7777'
514: 1:  ]
514: 1:}
514: 1:Scores: 31950
514: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5', '0']')
514: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
515: 1:BoardData {
515: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
515: 1:  'expectedAnswer': '4',
515: 1:  'history': [
515: 1:    {
515: 1:      'answer': '4',
515: 1:      'question': '0000',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': '1',
515: 1:      'question': '0123',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': '1',
515: 1:      'question': '4567',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': '4',
515: 1:      'question': '8901',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': '0',
515: 1:      'question': '1111',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': '2',
515: 1:      'question': '3366',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': '6',
515: 1:      'question': '8899',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': '5',
515: 1:      'question': '0896',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': '0',
515: 1:      'question': '3333',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': '0',
515: 1:      'question': '4444',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': '2',
515: 1:      'question': '6677',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': '6',
515: 1:      'question': '8809',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': '0',
515: 1:      'question': '7111',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': '0',
515: 1:      'question': '2172',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': '4',
515: 1:      'question': '6666',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': '0',
515: 1:      'question': '3213',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': '2',
515: 1:      'question': '7662',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': '1',
515: 1:      'question': '9312',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': '0',
515: 1:      'question': '2222',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': '0',
515: 1:      'question': '5555',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': '3',
515: 1:      'question': '8193',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': '5',
515: 1:      'question': '8096',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': '0',
515: 1:      'question': '7777',
515: 1:      'valid': true
515: 1:    }
515: 1:  ],
515: 1:  'info': [
515: 1:    '✅f(0000) = 4',
515: 1:    '✅f(0123) = 1',
515: 1:    '✅f(4567) = 1',
515: 1:    '✅f(8901) = 4',
515: 1:    '✅f(1111) = 0',
515: 1:    '✅f(3366) = 2',
515: 1:    '✅f(8899) = 6',
515: 1:    '✅f(0896) = 5',
515: 1:    '✅f(3333) = 0',
515: 1:    '✅f(4444) = 0',
515: 1:    '✅f(6677) = 2',
515: 1:    '✅f(8809) = 6',
515: 1:    '✅f(7111) = 0',
515: 1:    '✅f(2172) = 0',
515: 1:    '✅f(6666) = 4',
515: 1:    '✅f(3213) = 0',
515: 1:    '✅f(7662) = 2',
515: 1:    '✅f(9312) = 1',
515: 1:    '✅f(2222) = 0',
515: 1:    '✅f(5555) = 0',
515: 1:    '✅f(8193) = 3',
515: 1:    '✅f(8096) = 5',
515: 1:    '✅f(7777) = 0',
515: 1:    '❌f(9999) = ??? != 4'
515: 1:  ],
515: 1:  'level': 18,
515: 1:  'nextQuestion': '9999',
515: 1:  'questions': [
515: 1:    '0000',
515: 1:    '0123',
515: 1:    '4567',
515: 1:    '8901',
515: 1:    '1111',
515: 1:    '3366',
515: 1:    '8899',
515: 1:    '0896',
515: 1:    '3333',
515: 1:    '4444',
515: 1:    '6677',
515: 1:    '8809',
515: 1:    '7111',
515: 1:    '2172',
515: 1:    '6666',
515: 1:    '3213',
515: 1:    '7662',
515: 1:    '9312',
515: 1:    '2222',
515: 1:    '5555',
515: 1:    '8193',
515: 1:    '8096',
515: 1:    '7777',
515: 1:    '9999'
515: 1:  ]
515: 1:}
515: 1:Scores: 31956
515: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5', '0', '4']')
515: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
516: 1:BoardData {
516: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
516: 1:  'expectedAnswer': '1',
516: 1:  'history': [
516: 1:    {
516: 1:      'answer': '4',
516: 1:      'question': '0000',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': '1',
516: 1:      'question': '0123',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': '1',
516: 1:      'question': '4567',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': '4',
516: 1:      'question': '8901',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': '0',
516: 1:      'question': '1111',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': '2',
516: 1:      'question': '3366',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': '6',
516: 1:      'question': '8899',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': '5',
516: 1:      'question': '0896',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': '0',
516: 1:      'question': '3333',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': '0',
516: 1:      'question': '4444',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': '2',
516: 1:      'question': '6677',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': '6',
516: 1:      'question': '8809',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': '0',
516: 1:      'question': '7111',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': '0',
516: 1:      'question': '2172',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': '4',
516: 1:      'question': '6666',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': '0',
516: 1:      'question': '3213',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': '2',
516: 1:      'question': '7662',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': '1',
516: 1:      'question': '9312',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': '0',
516: 1:      'question': '2222',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': '0',
516: 1:      'question': '5555',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': '3',
516: 1:      'question': '8193',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': '5',
516: 1:      'question': '8096',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': '0',
516: 1:      'question': '7777',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': '4',
516: 1:      'question': '9999',
516: 1:      'valid': true
516: 1:    }
516: 1:  ],
516: 1:  'info': [
516: 1:    '✅f(0000) = 4',
516: 1:    '✅f(0123) = 1',
516: 1:    '✅f(4567) = 1',
516: 1:    '✅f(8901) = 4',
516: 1:    '✅f(1111) = 0',
516: 1:    '✅f(3366) = 2',
516: 1:    '✅f(8899) = 6',
516: 1:    '✅f(0896) = 5',
516: 1:    '✅f(3333) = 0',
516: 1:    '✅f(4444) = 0',
516: 1:    '✅f(6677) = 2',
516: 1:    '✅f(8809) = 6',
516: 1:    '✅f(7111) = 0',
516: 1:    '✅f(2172) = 0',
516: 1:    '✅f(6666) = 4',
516: 1:    '✅f(3213) = 0',
516: 1:    '✅f(7662) = 2',
516: 1:    '✅f(9312) = 1',
516: 1:    '✅f(2222) = 0',
516: 1:    '✅f(5555) = 0',
516: 1:    '✅f(8193) = 3',
516: 1:    '✅f(8096) = 5',
516: 1:    '✅f(7777) = 0',
516: 1:    '✅f(9999) = 4',
516: 1:    '❌f(7756) = ??? != 1'
516: 1:  ],
516: 1:  'level': 18,
516: 1:  'nextQuestion': '7756',
516: 1:  'questions': [
516: 1:    '0000',
516: 1:    '0123',
516: 1:    '4567',
516: 1:    '8901',
516: 1:    '1111',
516: 1:    '3366',
516: 1:    '8899',
516: 1:    '0896',
516: 1:    '3333',
516: 1:    '4444',
516: 1:    '6677',
516: 1:    '8809',
516: 1:    '7111',
516: 1:    '2172',
516: 1:    '6666',
516: 1:    '3213',
516: 1:    '7662',
516: 1:    '9312',
516: 1:    '2222',
516: 1:    '5555',
516: 1:    '8193',
516: 1:    '8096',
516: 1:    '7777',
516: 1:    '9999',
516: 1:    '7756'
516: 1:  ]
516: 1:}
516: 1:Scores: 31962
516: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5', '0', '4', '1']')
516: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
517: 1:BoardData {
517: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
517: 1:  'expectedAnswer': '3',
517: 1:  'history': [
517: 1:    {
517: 1:      'answer': '4',
517: 1:      'question': '0000',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': '1',
517: 1:      'question': '0123',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': '1',
517: 1:      'question': '4567',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': '4',
517: 1:      'question': '8901',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': '0',
517: 1:      'question': '1111',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': '2',
517: 1:      'question': '3366',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': '6',
517: 1:      'question': '8899',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': '5',
517: 1:      'question': '0896',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': '0',
517: 1:      'question': '3333',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': '0',
517: 1:      'question': '4444',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': '2',
517: 1:      'question': '6677',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': '6',
517: 1:      'question': '8809',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': '0',
517: 1:      'question': '7111',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': '0',
517: 1:      'question': '2172',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': '4',
517: 1:      'question': '6666',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': '0',
517: 1:      'question': '3213',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': '2',
517: 1:      'question': '7662',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': '1',
517: 1:      'question': '9312',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': '0',
517: 1:      'question': '2222',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': '0',
517: 1:      'question': '5555',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': '3',
517: 1:      'question': '8193',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': '5',
517: 1:      'question': '8096',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': '0',
517: 1:      'question': '7777',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': '4',
517: 1:      'question': '9999',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': '1',
517: 1:      'question': '7756',
517: 1:      'valid': true
517: 1:    }
517: 1:  ],
517: 1:  'info': [
517: 1:    '✅f(0000) = 4',
517: 1:    '✅f(0123) = 1',
517: 1:    '✅f(4567) = 1',
517: 1:    '✅f(8901) = 4',
517: 1:    '✅f(1111) = 0',
517: 1:    '✅f(3366) = 2',
517: 1:    '✅f(8899) = 6',
517: 1:    '✅f(0896) = 5',
517: 1:    '✅f(3333) = 0',
517: 1:    '✅f(4444) = 0',
517: 1:    '✅f(6677) = 2',
517: 1:    '✅f(8809) = 6',
517: 1:    '✅f(7111) = 0',
517: 1:    '✅f(2172) = 0',
517: 1:    '✅f(6666) = 4',
517: 1:    '✅f(3213) = 0',
517: 1:    '✅f(7662) = 2',
517: 1:    '✅f(9312) = 1',
517: 1:    '✅f(2222) = 0',
517: 1:    '✅f(5555) = 0',
517: 1:    '✅f(8193) = 3',
517: 1:    '✅f(8096) = 5',
517: 1:    '✅f(7777) = 0',
517: 1:    '✅f(9999) = 4',
517: 1:    '✅f(7756) = 1',
517: 1:    '❌f(6855) = ??? != 3'
517: 1:  ],
517: 1:  'level': 18,
517: 1:  'nextQuestion': '6855',
517: 1:  'questions': [
517: 1:    '0000',
517: 1:    '0123',
517: 1:    '4567',
517: 1:    '8901',
517: 1:    '1111',
517: 1:    '3366',
517: 1:    '8899',
517: 1:    '0896',
517: 1:    '3333',
517: 1:    '4444',
517: 1:    '6677',
517: 1:    '8809',
517: 1:    '7111',
517: 1:    '2172',
517: 1:    '6666',
517: 1:    '3213',
517: 1:    '7662',
517: 1:    '9312',
517: 1:    '2222',
517: 1:    '5555',
517: 1:    '8193',
517: 1:    '8096',
517: 1:    '7777',
517: 1:    '9999',
517: 1:    '7756',
517: 1:    '6855'
517: 1:  ]
517: 1:}
517: 1:Scores: 31968
517: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5', '0', '4', '1', '3']')
517: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
518: 1:BoardData {
518: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
518: 1:  'expectedAnswer': '5',
518: 1:  'history': [
518: 1:    {
518: 1:      'answer': '4',
518: 1:      'question': '0000',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': '1',
518: 1:      'question': '0123',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': '1',
518: 1:      'question': '4567',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': '4',
518: 1:      'question': '8901',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': '0',
518: 1:      'question': '1111',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': '2',
518: 1:      'question': '3366',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': '6',
518: 1:      'question': '8899',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': '5',
518: 1:      'question': '0896',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': '0',
518: 1:      'question': '3333',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': '0',
518: 1:      'question': '4444',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': '2',
518: 1:      'question': '6677',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': '6',
518: 1:      'question': '8809',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': '0',
518: 1:      'question': '7111',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': '0',
518: 1:      'question': '2172',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': '4',
518: 1:      'question': '6666',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': '0',
518: 1:      'question': '3213',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': '2',
518: 1:      'question': '7662',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': '1',
518: 1:      'question': '9312',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': '0',
518: 1:      'question': '2222',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': '0',
518: 1:      'question': '5555',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': '3',
518: 1:      'question': '8193',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': '5',
518: 1:      'question': '8096',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': '0',
518: 1:      'question': '7777',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': '4',
518: 1:      'question': '9999',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': '1',
518: 1:      'question': '7756',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': '3',
518: 1:      'question': '6855',
518: 1:      'valid': true
518: 1:    }
518: 1:  ],
518: 1:  'info': [
518: 1:    '✅f(0000) = 4',
518: 1:    '✅f(0123) = 1',
518: 1:    '✅f(4567) = 1',
518: 1:    '✅f(8901) = 4',
518: 1:    '✅f(1111) = 0',
518: 1:    '✅f(3366) = 2',
518: 1:    '✅f(8899) = 6',
518: 1:    '✅f(0896) = 5',
518: 1:    '✅f(3333) = 0',
518: 1:    '✅f(4444) = 0',
518: 1:    '✅f(6677) = 2',
518: 1:    '✅f(8809) = 6',
518: 1:    '✅f(7111) = 0',
518: 1:    '✅f(2172) = 0',
518: 1:    '✅f(6666) = 4',
518: 1:    '✅f(3213) = 0',
518: 1:    '✅f(7662) = 2',
518: 1:    '✅f(9312) = 1',
518: 1:    '✅f(2222) = 0',
518: 1:    '✅f(5555) = 0',
518: 1:    '✅f(8193) = 3',
518: 1:    '✅f(8096) = 5',
518: 1:    '✅f(7777) = 0',
518: 1:    '✅f(9999) = 4',
518: 1:    '✅f(7756) = 1',
518: 1:    '✅f(6855) = 3',
518: 1:    '❌f(9881) = ??? != 5'
518: 1:  ],
518: 1:  'level': 18,
518: 1:  'nextQuestion': '9881',
518: 1:  'questions': [
518: 1:    '0000',
518: 1:    '0123',
518: 1:    '4567',
518: 1:    '8901',
518: 1:    '1111',
518: 1:    '3366',
518: 1:    '8899',
518: 1:    '0896',
518: 1:    '3333',
518: 1:    '4444',
518: 1:    '6677',
518: 1:    '8809',
518: 1:    '7111',
518: 1:    '2172',
518: 1:    '6666',
518: 1:    '3213',
518: 1:    '7662',
518: 1:    '9312',
518: 1:    '2222',
518: 1:    '5555',
518: 1:    '8193',
518: 1:    '8096',
518: 1:    '7777',
518: 1:    '9999',
518: 1:    '7756',
518: 1:    '6855',
518: 1:    '9881'
518: 1:  ]
518: 1:}
518: 1:Scores: 31974
518: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5', '0', '4', '1', '3', '5']')
518: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
519: 1:BoardData {
519: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
519: 1:  'expectedAnswer': '0',
519: 1:  'history': [
519: 1:    {
519: 1:      'answer': '4',
519: 1:      'question': '0000',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': '1',
519: 1:      'question': '0123',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': '1',
519: 1:      'question': '4567',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': '4',
519: 1:      'question': '8901',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': '0',
519: 1:      'question': '1111',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': '2',
519: 1:      'question': '3366',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': '6',
519: 1:      'question': '8899',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': '5',
519: 1:      'question': '0896',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': '0',
519: 1:      'question': '3333',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': '0',
519: 1:      'question': '4444',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': '2',
519: 1:      'question': '6677',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': '6',
519: 1:      'question': '8809',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': '0',
519: 1:      'question': '7111',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': '0',
519: 1:      'question': '2172',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': '4',
519: 1:      'question': '6666',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': '0',
519: 1:      'question': '3213',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': '2',
519: 1:      'question': '7662',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': '1',
519: 1:      'question': '9312',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': '0',
519: 1:      'question': '2222',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': '0',
519: 1:      'question': '5555',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': '3',
519: 1:      'question': '8193',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': '5',
519: 1:      'question': '8096',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': '0',
519: 1:      'question': '7777',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': '4',
519: 1:      'question': '9999',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': '1',
519: 1:      'question': '7756',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': '3',
519: 1:      'question': '6855',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': '5',
519: 1:      'question': '9881',
519: 1:      'valid': true
519: 1:    }
519: 1:  ],
519: 1:  'info': [
519: 1:    '✅f(0000) = 4',
519: 1:    '✅f(0123) = 1',
519: 1:    '✅f(4567) = 1',
519: 1:    '✅f(8901) = 4',
519: 1:    '✅f(1111) = 0',
519: 1:    '✅f(3366) = 2',
519: 1:    '✅f(8899) = 6',
519: 1:    '✅f(0896) = 5',
519: 1:    '✅f(3333) = 0',
519: 1:    '✅f(4444) = 0',
519: 1:    '✅f(6677) = 2',
519: 1:    '✅f(8809) = 6',
519: 1:    '✅f(7111) = 0',
519: 1:    '✅f(2172) = 0',
519: 1:    '✅f(6666) = 4',
519: 1:    '✅f(3213) = 0',
519: 1:    '✅f(7662) = 2',
519: 1:    '✅f(9312) = 1',
519: 1:    '✅f(2222) = 0',
519: 1:    '✅f(5555) = 0',
519: 1:    '✅f(8193) = 3',
519: 1:    '✅f(8096) = 5',
519: 1:    '✅f(7777) = 0',
519: 1:    '✅f(9999) = 4',
519: 1:    '✅f(7756) = 1',
519: 1:    '✅f(6855) = 3',
519: 1:    '✅f(9881) = 5',
519: 1:    '❌f(5531) = ??? != 0'
519: 1:  ],
519: 1:  'level': 18,
519: 1:  'nextQuestion': '5531',
519: 1:  'questions': [
519: 1:    '0000',
519: 1:    '0123',
519: 1:    '4567',
519: 1:    '8901',
519: 1:    '1111',
519: 1:    '3366',
519: 1:    '8899',
519: 1:    '0896',
519: 1:    '3333',
519: 1:    '4444',
519: 1:    '6677',
519: 1:    '8809',
519: 1:    '7111',
519: 1:    '2172',
519: 1:    '6666',
519: 1:    '3213',
519: 1:    '7662',
519: 1:    '9312',
519: 1:    '2222',
519: 1:    '5555',
519: 1:    '8193',
519: 1:    '8096',
519: 1:    '7777',
519: 1:    '9999',
519: 1:    '7756',
519: 1:    '6855',
519: 1:    '9881',
519: 1:    '5531'
519: 1:  ]
519: 1:}
519: 1:Scores: 31980
519: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5', '0', '4', '1', '3', '5', '0']')
519: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
520: 1:BoardData {
520: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
520: 1:  'expectedAnswer': '5',
520: 1:  'history': [
520: 1:    {
520: 1:      'answer': '4',
520: 1:      'question': '0000',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': '1',
520: 1:      'question': '0123',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': '1',
520: 1:      'question': '4567',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': '4',
520: 1:      'question': '8901',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': '0',
520: 1:      'question': '1111',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': '2',
520: 1:      'question': '3366',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': '6',
520: 1:      'question': '8899',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': '5',
520: 1:      'question': '0896',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': '0',
520: 1:      'question': '3333',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': '0',
520: 1:      'question': '4444',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': '2',
520: 1:      'question': '6677',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': '6',
520: 1:      'question': '8809',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': '0',
520: 1:      'question': '7111',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': '0',
520: 1:      'question': '2172',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': '4',
520: 1:      'question': '6666',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': '0',
520: 1:      'question': '3213',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': '2',
520: 1:      'question': '7662',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': '1',
520: 1:      'question': '9312',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': '0',
520: 1:      'question': '2222',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': '0',
520: 1:      'question': '5555',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': '3',
520: 1:      'question': '8193',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': '5',
520: 1:      'question': '8096',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': '0',
520: 1:      'question': '7777',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': '4',
520: 1:      'question': '9999',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': '1',
520: 1:      'question': '7756',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': '3',
520: 1:      'question': '6855',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': '5',
520: 1:      'question': '9881',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': '0',
520: 1:      'question': '5531',
520: 1:      'valid': true
520: 1:    }
520: 1:  ],
520: 1:  'info': [
520: 1:    '✅f(0000) = 4',
520: 1:    '✅f(0123) = 1',
520: 1:    '✅f(4567) = 1',
520: 1:    '✅f(8901) = 4',
520: 1:    '✅f(1111) = 0',
520: 1:    '✅f(3366) = 2',
520: 1:    '✅f(8899) = 6',
520: 1:    '✅f(0896) = 5',
520: 1:    '✅f(3333) = 0',
520: 1:    '✅f(4444) = 0',
520: 1:    '✅f(6677) = 2',
520: 1:    '✅f(8809) = 6',
520: 1:    '✅f(7111) = 0',
520: 1:    '✅f(2172) = 0',
520: 1:    '✅f(6666) = 4',
520: 1:    '✅f(3213) = 0',
520: 1:    '✅f(7662) = 2',
520: 1:    '✅f(9312) = 1',
520: 1:    '✅f(2222) = 0',
520: 1:    '✅f(5555) = 0',
520: 1:    '✅f(8193) = 3',
520: 1:    '✅f(8096) = 5',
520: 1:    '✅f(7777) = 0',
520: 1:    '✅f(9999) = 4',
520: 1:    '✅f(7756) = 1',
520: 1:    '✅f(6855) = 3',
520: 1:    '✅f(9881) = 5',
520: 1:    '✅f(5531) = 0',
520: 1:    '❌f(1234567890) = ??? != 5'
520: 1:  ],
520: 1:  'level': 18,
520: 1:  'nextQuestion': '1234567890',
520: 1:  'questions': [
520: 1:    '0000',
520: 1:    '0123',
520: 1:    '4567',
520: 1:    '8901',
520: 1:    '1111',
520: 1:    '3366',
520: 1:    '8899',
520: 1:    '0896',
520: 1:    '3333',
520: 1:    '4444',
520: 1:    '6677',
520: 1:    '8809',
520: 1:    '7111',
520: 1:    '2172',
520: 1:    '6666',
520: 1:    '3213',
520: 1:    '7662',
520: 1:    '9312',
520: 1:    '2222',
520: 1:    '5555',
520: 1:    '8193',
520: 1:    '8096',
520: 1:    '7777',
520: 1:    '9999',
520: 1:    '7756',
520: 1:    '6855',
520: 1:    '9881',
520: 1:    '5531',
520: 1:    '1234567890'
520: 1:  ]
520: 1:}
520: 1:Scores: 31986
520: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5', '0', '4', '1', '3', '5', '0', '5']')
520: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
521: 1:BoardData {
521: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
521: 1:  'expectedAnswer': '5',
521: 1:  'history': [
521: 1:    {
521: 1:      'answer': '4',
521: 1:      'question': '0000',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': '1',
521: 1:      'question': '0123',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': '1',
521: 1:      'question': '4567',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': '4',
521: 1:      'question': '8901',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': '0',
521: 1:      'question': '1111',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': '2',
521: 1:      'question': '3366',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': '6',
521: 1:      'question': '8899',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': '5',
521: 1:      'question': '0896',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': '0',
521: 1:      'question': '3333',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': '0',
521: 1:      'question': '4444',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': '2',
521: 1:      'question': '6677',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': '6',
521: 1:      'question': '8809',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': '0',
521: 1:      'question': '7111',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': '0',
521: 1:      'question': '2172',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': '4',
521: 1:      'question': '6666',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': '0',
521: 1:      'question': '3213',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': '2',
521: 1:      'question': '7662',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': '1',
521: 1:      'question': '9312',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': '0',
521: 1:      'question': '2222',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': '0',
521: 1:      'question': '5555',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': '3',
521: 1:      'question': '8193',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': '5',
521: 1:      'question': '8096',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': '0',
521: 1:      'question': '7777',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': '4',
521: 1:      'question': '9999',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': '1',
521: 1:      'question': '7756',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': '3',
521: 1:      'question': '6855',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': '5',
521: 1:      'question': '9881',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': '0',
521: 1:      'question': '5531',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': '5',
521: 1:      'question': '1234567890',
521: 1:      'valid': true
521: 1:    }
521: 1:  ],
521: 1:  'info': [
521: 1:    '✅f(0000) = 4',
521: 1:    '✅f(0123) = 1',
521: 1:    '✅f(4567) = 1',
521: 1:    '✅f(8901) = 4',
521: 1:    '✅f(1111) = 0',
521: 1:    '✅f(3366) = 2',
521: 1:    '✅f(8899) = 6',
521: 1:    '✅f(0896) = 5',
521: 1:    '✅f(3333) = 0',
521: 1:    '✅f(4444) = 0',
521: 1:    '✅f(6677) = 2',
521: 1:    '✅f(8809) = 6',
521: 1:    '✅f(7111) = 0',
521: 1:    '✅f(2172) = 0',
521: 1:    '✅f(6666) = 4',
521: 1:    '✅f(3213) = 0',
521: 1:    '✅f(7662) = 2',
521: 1:    '✅f(9312) = 1',
521: 1:    '✅f(2222) = 0',
521: 1:    '✅f(5555) = 0',
521: 1:    '✅f(8193) = 3',
521: 1:    '✅f(8096) = 5',
521: 1:    '✅f(7777) = 0',
521: 1:    '✅f(9999) = 4',
521: 1:    '✅f(7756) = 1',
521: 1:    '✅f(6855) = 3',
521: 1:    '✅f(9881) = 5',
521: 1:    '✅f(5531) = 0',
521: 1:    '✅f(1234567890) = 5',
521: 1:    '❌f(0987654321) = ??? != 5'
521: 1:  ],
521: 1:  'level': 18,
521: 1:  'nextQuestion': '0987654321',
521: 1:  'questions': [
521: 1:    '0000',
521: 1:    '0123',
521: 1:    '4567',
521: 1:    '8901',
521: 1:    '1111',
521: 1:    '3366',
521: 1:    '8899',
521: 1:    '0896',
521: 1:    '3333',
521: 1:    '4444',
521: 1:    '6677',
521: 1:    '8809',
521: 1:    '7111',
521: 1:    '2172',
521: 1:    '6666',
521: 1:    '3213',
521: 1:    '7662',
521: 1:    '9312',
521: 1:    '2222',
521: 1:    '5555',
521: 1:    '8193',
521: 1:    '8096',
521: 1:    '7777',
521: 1:    '9999',
521: 1:    '7756',
521: 1:    '6855',
521: 1:    '9881',
521: 1:    '5531',
521: 1:    '1234567890',
521: 1:    '0987654321'
521: 1:  ]
521: 1:}
521: 1:Scores: 31992
521: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5', '0', '4', '1', '3', '5', '0', '5', '5']')
521: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
522: 1:BoardData {
522: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
522: 1:  'expectedAnswer': '5',
522: 1:  'history': [
522: 1:    {
522: 1:      'answer': '4',
522: 1:      'question': '0000',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '1',
522: 1:      'question': '0123',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '1',
522: 1:      'question': '4567',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '4',
522: 1:      'question': '8901',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '0',
522: 1:      'question': '1111',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '2',
522: 1:      'question': '3366',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '6',
522: 1:      'question': '8899',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '5',
522: 1:      'question': '0896',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '0',
522: 1:      'question': '3333',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '0',
522: 1:      'question': '4444',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '2',
522: 1:      'question': '6677',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '6',
522: 1:      'question': '8809',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '0',
522: 1:      'question': '7111',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '0',
522: 1:      'question': '2172',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '4',
522: 1:      'question': '6666',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '0',
522: 1:      'question': '3213',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '2',
522: 1:      'question': '7662',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '1',
522: 1:      'question': '9312',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '0',
522: 1:      'question': '2222',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '0',
522: 1:      'question': '5555',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '3',
522: 1:      'question': '8193',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '5',
522: 1:      'question': '8096',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '0',
522: 1:      'question': '7777',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '4',
522: 1:      'question': '9999',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '1',
522: 1:      'question': '7756',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '3',
522: 1:      'question': '6855',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '5',
522: 1:      'question': '9881',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '0',
522: 1:      'question': '5531',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '5',
522: 1:      'question': '1234567890',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': '5',
522: 1:      'question': '0987654321',
522: 1:      'valid': true
522: 1:    }
522: 1:  ],
522: 1:  'info': [
522: 1:    '✅f(0000) = 4',
522: 1:    '✅f(0123) = 1',
522: 1:    '✅f(4567) = 1',
522: 1:    '✅f(8901) = 4',
522: 1:    '✅f(1111) = 0',
522: 1:    '✅f(3366) = 2',
522: 1:    '✅f(8899) = 6',
522: 1:    '✅f(0896) = 5',
522: 1:    '✅f(3333) = 0',
522: 1:    '✅f(4444) = 0',
522: 1:    '✅f(6677) = 2',
522: 1:    '✅f(8809) = 6',
522: 1:    '✅f(7111) = 0',
522: 1:    '✅f(2172) = 0',
522: 1:    '✅f(6666) = 4',
522: 1:    '✅f(3213) = 0',
522: 1:    '✅f(7662) = 2',
522: 1:    '✅f(9312) = 1',
522: 1:    '✅f(2222) = 0',
522: 1:    '✅f(5555) = 0',
522: 1:    '✅f(8193) = 3',
522: 1:    '✅f(8096) = 5',
522: 1:    '✅f(7777) = 0',
522: 1:    '✅f(9999) = 4',
522: 1:    '✅f(7756) = 1',
522: 1:    '✅f(6855) = 3',
522: 1:    '✅f(9881) = 5',
522: 1:    '✅f(5531) = 0',
522: 1:    '✅f(1234567890) = 5',
522: 1:    '✅f(0987654321) = 5',
522: 1:    '❌f(1029384756) = ??? != 5'
522: 1:  ],
522: 1:  'level': 18,
522: 1:  'nextQuestion': '1029384756',
522: 1:  'questions': [
522: 1:    '0000',
522: 1:    '0123',
522: 1:    '4567',
522: 1:    '8901',
522: 1:    '1111',
522: 1:    '3366',
522: 1:    '8899',
522: 1:    '0896',
522: 1:    '3333',
522: 1:    '4444',
522: 1:    '6677',
522: 1:    '8809',
522: 1:    '7111',
522: 1:    '2172',
522: 1:    '6666',
522: 1:    '3213',
522: 1:    '7662',
522: 1:    '9312',
522: 1:    '2222',
522: 1:    '5555',
522: 1:    '8193',
522: 1:    '8096',
522: 1:    '7777',
522: 1:    '9999',
522: 1:    '7756',
522: 1:    '6855',
522: 1:    '9881',
522: 1:    '5531',
522: 1:    '1234567890',
522: 1:    '0987654321',
522: 1:    '1029384756'
522: 1:  ]
522: 1:}
522: 1:Scores: 31998
522: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5', '0', '4', '1', '3', '5', '0', '5', '5', '5']')
522: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
523: 1:BoardData {
523: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
523: 1:  'expectedAnswer': '5',
523: 1:  'history': [
523: 1:    {
523: 1:      'answer': '4',
523: 1:      'question': '0000',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '1',
523: 1:      'question': '0123',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '1',
523: 1:      'question': '4567',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '4',
523: 1:      'question': '8901',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '0',
523: 1:      'question': '1111',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '2',
523: 1:      'question': '3366',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '6',
523: 1:      'question': '8899',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '5',
523: 1:      'question': '0896',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '0',
523: 1:      'question': '3333',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '0',
523: 1:      'question': '4444',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '2',
523: 1:      'question': '6677',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '6',
523: 1:      'question': '8809',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '0',
523: 1:      'question': '7111',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '0',
523: 1:      'question': '2172',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '4',
523: 1:      'question': '6666',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '0',
523: 1:      'question': '3213',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '2',
523: 1:      'question': '7662',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '1',
523: 1:      'question': '9312',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '0',
523: 1:      'question': '2222',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '0',
523: 1:      'question': '5555',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '3',
523: 1:      'question': '8193',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '5',
523: 1:      'question': '8096',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '0',
523: 1:      'question': '7777',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '4',
523: 1:      'question': '9999',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '1',
523: 1:      'question': '7756',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '3',
523: 1:      'question': '6855',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '5',
523: 1:      'question': '9881',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '0',
523: 1:      'question': '5531',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '5',
523: 1:      'question': '1234567890',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '5',
523: 1:      'question': '0987654321',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': '5',
523: 1:      'question': '1029384756',
523: 1:      'valid': true
523: 1:    }
523: 1:  ],
523: 1:  'info': [
523: 1:    '✅f(0000) = 4',
523: 1:    '✅f(0123) = 1',
523: 1:    '✅f(4567) = 1',
523: 1:    '✅f(8901) = 4',
523: 1:    '✅f(1111) = 0',
523: 1:    '✅f(3366) = 2',
523: 1:    '✅f(8899) = 6',
523: 1:    '✅f(0896) = 5',
523: 1:    '✅f(3333) = 0',
523: 1:    '✅f(4444) = 0',
523: 1:    '✅f(6677) = 2',
523: 1:    '✅f(8809) = 6',
523: 1:    '✅f(7111) = 0',
523: 1:    '✅f(2172) = 0',
523: 1:    '✅f(6666) = 4',
523: 1:    '✅f(3213) = 0',
523: 1:    '✅f(7662) = 2',
523: 1:    '✅f(9312) = 1',
523: 1:    '✅f(2222) = 0',
523: 1:    '✅f(5555) = 0',
523: 1:    '✅f(8193) = 3',
523: 1:    '✅f(8096) = 5',
523: 1:    '✅f(7777) = 0',
523: 1:    '✅f(9999) = 4',
523: 1:    '✅f(7756) = 1',
523: 1:    '✅f(6855) = 3',
523: 1:    '✅f(9881) = 5',
523: 1:    '✅f(5531) = 0',
523: 1:    '✅f(1234567890) = 5',
523: 1:    '✅f(0987654321) = 5',
523: 1:    '✅f(1029384756) = 5',
523: 1:    '❌f(6574839201) = ??? != 5'
523: 1:  ],
523: 1:  'level': 18,
523: 1:  'nextQuestion': '6574839201',
523: 1:  'questions': [
523: 1:    '0000',
523: 1:    '0123',
523: 1:    '4567',
523: 1:    '8901',
523: 1:    '1111',
523: 1:    '3366',
523: 1:    '8899',
523: 1:    '0896',
523: 1:    '3333',
523: 1:    '4444',
523: 1:    '6677',
523: 1:    '8809',
523: 1:    '7111',
523: 1:    '2172',
523: 1:    '6666',
523: 1:    '3213',
523: 1:    '7662',
523: 1:    '9312',
523: 1:    '2222',
523: 1:    '5555',
523: 1:    '8193',
523: 1:    '8096',
523: 1:    '7777',
523: 1:    '9999',
523: 1:    '7756',
523: 1:    '6855',
523: 1:    '9881',
523: 1:    '5531',
523: 1:    '1234567890',
523: 1:    '0987654321',
523: 1:    '1029384756',
523: 1:    '6574839201'
523: 1:  ]
523: 1:}
523: 1:Scores: 32004
523: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5', '0', '4', '1', '3', '5', '0', '5', '5', '5', '5']')
523: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
524: 1:BoardData {
524: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
524: 1:  'expectedAnswer': '9',
524: 1:  'history': [
524: 1:    {
524: 1:      'answer': '4',
524: 1:      'question': '0000',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '1',
524: 1:      'question': '0123',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '1',
524: 1:      'question': '4567',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '4',
524: 1:      'question': '8901',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '0',
524: 1:      'question': '1111',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '2',
524: 1:      'question': '3366',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '6',
524: 1:      'question': '8899',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '5',
524: 1:      'question': '0896',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '0',
524: 1:      'question': '3333',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '0',
524: 1:      'question': '4444',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '2',
524: 1:      'question': '6677',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '6',
524: 1:      'question': '8809',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '0',
524: 1:      'question': '7111',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '0',
524: 1:      'question': '2172',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '4',
524: 1:      'question': '6666',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '0',
524: 1:      'question': '3213',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '2',
524: 1:      'question': '7662',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '1',
524: 1:      'question': '9312',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '0',
524: 1:      'question': '2222',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '0',
524: 1:      'question': '5555',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '3',
524: 1:      'question': '8193',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '5',
524: 1:      'question': '8096',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '0',
524: 1:      'question': '7777',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '4',
524: 1:      'question': '9999',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '1',
524: 1:      'question': '7756',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '3',
524: 1:      'question': '6855',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '5',
524: 1:      'question': '9881',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '0',
524: 1:      'question': '5531',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '5',
524: 1:      'question': '1234567890',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '5',
524: 1:      'question': '0987654321',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '5',
524: 1:      'question': '1029384756',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': '5',
524: 1:      'question': '6574839201',
524: 1:      'valid': true
524: 1:    }
524: 1:  ],
524: 1:  'info': [
524: 1:    '✅f(0000) = 4',
524: 1:    '✅f(0123) = 1',
524: 1:    '✅f(4567) = 1',
524: 1:    '✅f(8901) = 4',
524: 1:    '✅f(1111) = 0',
524: 1:    '✅f(3366) = 2',
524: 1:    '✅f(8899) = 6',
524: 1:    '✅f(0896) = 5',
524: 1:    '✅f(3333) = 0',
524: 1:    '✅f(4444) = 0',
524: 1:    '✅f(6677) = 2',
524: 1:    '✅f(8809) = 6',
524: 1:    '✅f(7111) = 0',
524: 1:    '✅f(2172) = 0',
524: 1:    '✅f(6666) = 4',
524: 1:    '✅f(3213) = 0',
524: 1:    '✅f(7662) = 2',
524: 1:    '✅f(9312) = 1',
524: 1:    '✅f(2222) = 0',
524: 1:    '✅f(5555) = 0',
524: 1:    '✅f(8193) = 3',
524: 1:    '✅f(8096) = 5',
524: 1:    '✅f(7777) = 0',
524: 1:    '✅f(9999) = 4',
524: 1:    '✅f(7756) = 1',
524: 1:    '✅f(6855) = 3',
524: 1:    '✅f(9881) = 5',
524: 1:    '✅f(5531) = 0',
524: 1:    '✅f(1234567890) = 5',
524: 1:    '✅f(0987654321) = 5',
524: 1:    '✅f(1029384756) = 5',
524: 1:    '✅f(6574839201) = 5',
524: 1:    '❌f(9298089492) = ??? != 9'
524: 1:  ],
524: 1:  'level': 18,
524: 1:  'nextQuestion': '9298089492',
524: 1:  'questions': [
524: 1:    '0000',
524: 1:    '0123',
524: 1:    '4567',
524: 1:    '8901',
524: 1:    '1111',
524: 1:    '3366',
524: 1:    '8899',
524: 1:    '0896',
524: 1:    '3333',
524: 1:    '4444',
524: 1:    '6677',
524: 1:    '8809',
524: 1:    '7111',
524: 1:    '2172',
524: 1:    '6666',
524: 1:    '3213',
524: 1:    '7662',
524: 1:    '9312',
524: 1:    '2222',
524: 1:    '5555',
524: 1:    '8193',
524: 1:    '8096',
524: 1:    '7777',
524: 1:    '9999',
524: 1:    '7756',
524: 1:    '6855',
524: 1:    '9881',
524: 1:    '5531',
524: 1:    '1234567890',
524: 1:    '0987654321',
524: 1:    '1029384756',
524: 1:    '6574839201',
524: 1:    '9298089492'
524: 1:  ]
524: 1:}
524: 1:Scores: 32010
524: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5', '0', '4', '1', '3', '5', '0', '5', '5', '5', '5', '9']')
524: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
525: 1:BoardData {
525: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
525: 1:  'expectedAnswer': '4',
525: 1:  'history': [
525: 1:    {
525: 1:      'answer': '4',
525: 1:      'question': '0000',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '1',
525: 1:      'question': '0123',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '1',
525: 1:      'question': '4567',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '4',
525: 1:      'question': '8901',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '0',
525: 1:      'question': '1111',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '2',
525: 1:      'question': '3366',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '6',
525: 1:      'question': '8899',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '5',
525: 1:      'question': '0896',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '0',
525: 1:      'question': '3333',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '0',
525: 1:      'question': '4444',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '2',
525: 1:      'question': '6677',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '6',
525: 1:      'question': '8809',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '0',
525: 1:      'question': '7111',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '0',
525: 1:      'question': '2172',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '4',
525: 1:      'question': '6666',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '0',
525: 1:      'question': '3213',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '2',
525: 1:      'question': '7662',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '1',
525: 1:      'question': '9312',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '0',
525: 1:      'question': '2222',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '0',
525: 1:      'question': '5555',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '3',
525: 1:      'question': '8193',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '5',
525: 1:      'question': '8096',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '0',
525: 1:      'question': '7777',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '4',
525: 1:      'question': '9999',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '1',
525: 1:      'question': '7756',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '3',
525: 1:      'question': '6855',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '5',
525: 1:      'question': '9881',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '0',
525: 1:      'question': '5531',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '5',
525: 1:      'question': '1234567890',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '5',
525: 1:      'question': '0987654321',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '5',
525: 1:      'question': '1029384756',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '5',
525: 1:      'question': '6574839201',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': '9',
525: 1:      'question': '9298089492',
525: 1:      'valid': true
525: 1:    }
525: 1:  ],
525: 1:  'info': [
525: 1:    '✅f(0000) = 4',
525: 1:    '✅f(0123) = 1',
525: 1:    '✅f(4567) = 1',
525: 1:    '✅f(8901) = 4',
525: 1:    '✅f(1111) = 0',
525: 1:    '✅f(3366) = 2',
525: 1:    '✅f(8899) = 6',
525: 1:    '✅f(0896) = 5',
525: 1:    '✅f(3333) = 0',
525: 1:    '✅f(4444) = 0',
525: 1:    '✅f(6677) = 2',
525: 1:    '✅f(8809) = 6',
525: 1:    '✅f(7111) = 0',
525: 1:    '✅f(2172) = 0',
525: 1:    '✅f(6666) = 4',
525: 1:    '✅f(3213) = 0',
525: 1:    '✅f(7662) = 2',
525: 1:    '✅f(9312) = 1',
525: 1:    '✅f(2222) = 0',
525: 1:    '✅f(5555) = 0',
525: 1:    '✅f(8193) = 3',
525: 1:    '✅f(8096) = 5',
525: 1:    '✅f(7777) = 0',
525: 1:    '✅f(9999) = 4',
525: 1:    '✅f(7756) = 1',
525: 1:    '✅f(6855) = 3',
525: 1:    '✅f(9881) = 5',
525: 1:    '✅f(5531) = 0',
525: 1:    '✅f(1234567890) = 5',
525: 1:    '✅f(0987654321) = 5',
525: 1:    '✅f(1029384756) = 5',
525: 1:    '✅f(6574839201) = 5',
525: 1:    '✅f(9298089492) = 9',
525: 1:    '❌f(8734092357) = ??? != 4'
525: 1:  ],
525: 1:  'level': 18,
525: 1:  'nextQuestion': '8734092357',
525: 1:  'questions': [
525: 1:    '0000',
525: 1:    '0123',
525: 1:    '4567',
525: 1:    '8901',
525: 1:    '1111',
525: 1:    '3366',
525: 1:    '8899',
525: 1:    '0896',
525: 1:    '3333',
525: 1:    '4444',
525: 1:    '6677',
525: 1:    '8809',
525: 1:    '7111',
525: 1:    '2172',
525: 1:    '6666',
525: 1:    '3213',
525: 1:    '7662',
525: 1:    '9312',
525: 1:    '2222',
525: 1:    '5555',
525: 1:    '8193',
525: 1:    '8096',
525: 1:    '7777',
525: 1:    '9999',
525: 1:    '7756',
525: 1:    '6855',
525: 1:    '9881',
525: 1:    '5531',
525: 1:    '1234567890',
525: 1:    '0987654321',
525: 1:    '1029384756',
525: 1:    '6574839201',
525: 1:    '9298089492',
525: 1:    '8734092357'
525: 1:  ]
525: 1:}
525: 1:Scores: 32016
525: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5', '0', '4', '1', '3', '5', '0', '5', '5', '5', '5', '9', '4']')
525: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
526: 1:BoardData {
526: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
526: 1:  'expectedAnswer': '6',
526: 1:  'history': [
526: 1:    {
526: 1:      'answer': '4',
526: 1:      'question': '0000',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '1',
526: 1:      'question': '0123',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '1',
526: 1:      'question': '4567',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '4',
526: 1:      'question': '8901',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '0',
526: 1:      'question': '1111',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '2',
526: 1:      'question': '3366',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '6',
526: 1:      'question': '8899',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '5',
526: 1:      'question': '0896',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '0',
526: 1:      'question': '3333',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '0',
526: 1:      'question': '4444',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '2',
526: 1:      'question': '6677',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '6',
526: 1:      'question': '8809',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '0',
526: 1:      'question': '7111',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '0',
526: 1:      'question': '2172',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '4',
526: 1:      'question': '6666',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '0',
526: 1:      'question': '3213',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '2',
526: 1:      'question': '7662',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '1',
526: 1:      'question': '9312',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '0',
526: 1:      'question': '2222',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '0',
526: 1:      'question': '5555',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '3',
526: 1:      'question': '8193',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '5',
526: 1:      'question': '8096',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '0',
526: 1:      'question': '7777',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '4',
526: 1:      'question': '9999',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '1',
526: 1:      'question': '7756',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '3',
526: 1:      'question': '6855',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '5',
526: 1:      'question': '9881',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '0',
526: 1:      'question': '5531',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '5',
526: 1:      'question': '1234567890',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '5',
526: 1:      'question': '0987654321',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '5',
526: 1:      'question': '1029384756',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '5',
526: 1:      'question': '6574839201',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '9',
526: 1:      'question': '9298089492',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': '4',
526: 1:      'question': '8734092357',
526: 1:      'valid': true
526: 1:    }
526: 1:  ],
526: 1:  'info': [
526: 1:    '✅f(0000) = 4',
526: 1:    '✅f(0123) = 1',
526: 1:    '✅f(4567) = 1',
526: 1:    '✅f(8901) = 4',
526: 1:    '✅f(1111) = 0',
526: 1:    '✅f(3366) = 2',
526: 1:    '✅f(8899) = 6',
526: 1:    '✅f(0896) = 5',
526: 1:    '✅f(3333) = 0',
526: 1:    '✅f(4444) = 0',
526: 1:    '✅f(6677) = 2',
526: 1:    '✅f(8809) = 6',
526: 1:    '✅f(7111) = 0',
526: 1:    '✅f(2172) = 0',
526: 1:    '✅f(6666) = 4',
526: 1:    '✅f(3213) = 0',
526: 1:    '✅f(7662) = 2',
526: 1:    '✅f(9312) = 1',
526: 1:    '✅f(2222) = 0',
526: 1:    '✅f(5555) = 0',
526: 1:    '✅f(8193) = 3',
526: 1:    '✅f(8096) = 5',
526: 1:    '✅f(7777) = 0',
526: 1:    '✅f(9999) = 4',
526: 1:    '✅f(7756) = 1',
526: 1:    '✅f(6855) = 3',
526: 1:    '✅f(9881) = 5',
526: 1:    '✅f(5531) = 0',
526: 1:    '✅f(1234567890) = 5',
526: 1:    '✅f(0987654321) = 5',
526: 1:    '✅f(1029384756) = 5',
526: 1:    '✅f(6574839201) = 5',
526: 1:    '✅f(9298089492) = 9',
526: 1:    '✅f(8734092357) = 4',
526: 1:    '❌f(2083464833) = ??? != 6'
526: 1:  ],
526: 1:  'level': 18,
526: 1:  'nextQuestion': '2083464833',
526: 1:  'questions': [
526: 1:    '0000',
526: 1:    '0123',
526: 1:    '4567',
526: 1:    '8901',
526: 1:    '1111',
526: 1:    '3366',
526: 1:    '8899',
526: 1:    '0896',
526: 1:    '3333',
526: 1:    '4444',
526: 1:    '6677',
526: 1:    '8809',
526: 1:    '7111',
526: 1:    '2172',
526: 1:    '6666',
526: 1:    '3213',
526: 1:    '7662',
526: 1:    '9312',
526: 1:    '2222',
526: 1:    '5555',
526: 1:    '8193',
526: 1:    '8096',
526: 1:    '7777',
526: 1:    '9999',
526: 1:    '7756',
526: 1:    '6855',
526: 1:    '9881',
526: 1:    '5531',
526: 1:    '1234567890',
526: 1:    '0987654321',
526: 1:    '1029384756',
526: 1:    '6574839201',
526: 1:    '9298089492',
526: 1:    '8734092357',
526: 1:    '2083464833'
526: 1:  ]
526: 1:}
526: 1:Scores: 32022
526: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5', '0', '4', '1', '3', '5', '0', '5', '5', '5', '5', '9', '4', '6']')
526: 1:Fire Event: PassTest{complexity=22, testCount=36}
------------------------------------------
527: 1:BoardData {
527: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
527: 1:  'expectedAnswer': '10',
527: 1:  'history': [
527: 1:    {
527: 1:      'answer': '4',
527: 1:      'question': '0000',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '1',
527: 1:      'question': '0123',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '1',
527: 1:      'question': '4567',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '4',
527: 1:      'question': '8901',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '0',
527: 1:      'question': '1111',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '2',
527: 1:      'question': '3366',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '6',
527: 1:      'question': '8899',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '5',
527: 1:      'question': '0896',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '0',
527: 1:      'question': '3333',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '0',
527: 1:      'question': '4444',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '2',
527: 1:      'question': '6677',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '6',
527: 1:      'question': '8809',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '0',
527: 1:      'question': '7111',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '0',
527: 1:      'question': '2172',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '4',
527: 1:      'question': '6666',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '0',
527: 1:      'question': '3213',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '2',
527: 1:      'question': '7662',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '1',
527: 1:      'question': '9312',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '0',
527: 1:      'question': '2222',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '0',
527: 1:      'question': '5555',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '3',
527: 1:      'question': '8193',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '5',
527: 1:      'question': '8096',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '0',
527: 1:      'question': '7777',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '4',
527: 1:      'question': '9999',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '1',
527: 1:      'question': '7756',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '3',
527: 1:      'question': '6855',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '5',
527: 1:      'question': '9881',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '0',
527: 1:      'question': '5531',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '5',
527: 1:      'question': '1234567890',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '5',
527: 1:      'question': '0987654321',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '5',
527: 1:      'question': '1029384756',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '5',
527: 1:      'question': '6574839201',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '9',
527: 1:      'question': '9298089492',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '4',
527: 1:      'question': '8734092357',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': '6',
527: 1:      'question': '2083464833',
527: 1:      'valid': true
527: 1:    }
527: 1:  ],
527: 1:  'info': [
527: 1:    '✅f(0000) = 4',
527: 1:    '✅f(0123) = 1',
527: 1:    '✅f(4567) = 1',
527: 1:    '✅f(8901) = 4',
527: 1:    '✅f(1111) = 0',
527: 1:    '✅f(3366) = 2',
527: 1:    '✅f(8899) = 6',
527: 1:    '✅f(0896) = 5',
527: 1:    '✅f(3333) = 0',
527: 1:    '✅f(4444) = 0',
527: 1:    '✅f(6677) = 2',
527: 1:    '✅f(8809) = 6',
527: 1:    '✅f(7111) = 0',
527: 1:    '✅f(2172) = 0',
527: 1:    '✅f(6666) = 4',
527: 1:    '✅f(3213) = 0',
527: 1:    '✅f(7662) = 2',
527: 1:    '✅f(9312) = 1',
527: 1:    '✅f(2222) = 0',
527: 1:    '✅f(5555) = 0',
527: 1:    '✅f(8193) = 3',
527: 1:    '✅f(8096) = 5',
527: 1:    '✅f(7777) = 0',
527: 1:    '✅f(9999) = 4',
527: 1:    '✅f(7756) = 1',
527: 1:    '✅f(6855) = 3',
527: 1:    '✅f(9881) = 5',
527: 1:    '✅f(5531) = 0',
527: 1:    '✅f(1234567890) = 5',
527: 1:    '✅f(0987654321) = 5',
527: 1:    '✅f(1029384756) = 5',
527: 1:    '✅f(6574839201) = 5',
527: 1:    '✅f(9298089492) = 9',
527: 1:    '✅f(8734092357) = 4',
527: 1:    '✅f(2083464833) = 6',
527: 1:    '❌f(0000000000) = ??? != 10'
527: 1:  ],
527: 1:  'level': 18,
527: 1:  'nextQuestion': '0000000000',
527: 1:  'questions': [
527: 1:    '0000',
527: 1:    '0123',
527: 1:    '4567',
527: 1:    '8901',
527: 1:    '1111',
527: 1:    '3366',
527: 1:    '8899',
527: 1:    '0896',
527: 1:    '3333',
527: 1:    '4444',
527: 1:    '6677',
527: 1:    '8809',
527: 1:    '7111',
527: 1:    '2172',
527: 1:    '6666',
527: 1:    '3213',
527: 1:    '7662',
527: 1:    '9312',
527: 1:    '2222',
527: 1:    '5555',
527: 1:    '8193',
527: 1:    '8096',
527: 1:    '7777',
527: 1:    '9999',
527: 1:    '7756',
527: 1:    '6855',
527: 1:    '9881',
527: 1:    '5531',
527: 1:    '1234567890',
527: 1:    '0987654321',
527: 1:    '1029384756',
527: 1:    '6574839201',
527: 1:    '9298089492',
527: 1:    '8734092357',
527: 1:    '2083464833',
527: 1:    '0000000000'
527: 1:  ]
527: 1:}
527: 1:Scores: 32028
527: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5', '0', '4', '1', '3', '5', '0', '5', '5', '5', '5', '9', '4', '6', '10']')
527: 1:Fire Event: PassTest{complexity=22, testCount=36}
527: 1:Fire Event: NextAlgorithm{complexity=22, time=0}
------------------------------------------
528: 1:BoardData {
528: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
528: 1:  'history': [
528: 1:    {
528: 1:      'answer': '4',
528: 1:      'question': '0000',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '1',
528: 1:      'question': '0123',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '1',
528: 1:      'question': '4567',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '4',
528: 1:      'question': '8901',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '0',
528: 1:      'question': '1111',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '2',
528: 1:      'question': '3366',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '6',
528: 1:      'question': '8899',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '5',
528: 1:      'question': '0896',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '0',
528: 1:      'question': '3333',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '0',
528: 1:      'question': '4444',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '2',
528: 1:      'question': '6677',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '6',
528: 1:      'question': '8809',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '0',
528: 1:      'question': '7111',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '0',
528: 1:      'question': '2172',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '4',
528: 1:      'question': '6666',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '0',
528: 1:      'question': '3213',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '2',
528: 1:      'question': '7662',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '1',
528: 1:      'question': '9312',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '0',
528: 1:      'question': '2222',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '0',
528: 1:      'question': '5555',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '3',
528: 1:      'question': '8193',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '5',
528: 1:      'question': '8096',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '0',
528: 1:      'question': '7777',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '4',
528: 1:      'question': '9999',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '1',
528: 1:      'question': '7756',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '3',
528: 1:      'question': '6855',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '5',
528: 1:      'question': '9881',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '0',
528: 1:      'question': '5531',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '5',
528: 1:      'question': '1234567890',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '5',
528: 1:      'question': '0987654321',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '5',
528: 1:      'question': '1029384756',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '5',
528: 1:      'question': '6574839201',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '9',
528: 1:      'question': '9298089492',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '4',
528: 1:      'question': '8734092357',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '6',
528: 1:      'question': '2083464833',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': '10',
528: 1:      'question': '0000000000',
528: 1:      'valid': true
528: 1:    }
528: 1:  ],
528: 1:  'info': [
528: 1:    '✅f(0000) = 4',
528: 1:    '✅f(0123) = 1',
528: 1:    '✅f(4567) = 1',
528: 1:    '✅f(8901) = 4',
528: 1:    '✅f(1111) = 0',
528: 1:    '✅f(3366) = 2',
528: 1:    '✅f(8899) = 6',
528: 1:    '✅f(0896) = 5',
528: 1:    '✅f(3333) = 0',
528: 1:    '✅f(4444) = 0',
528: 1:    '✅f(6677) = 2',
528: 1:    '✅f(8809) = 6',
528: 1:    '✅f(7111) = 0',
528: 1:    '✅f(2172) = 0',
528: 1:    '✅f(6666) = 4',
528: 1:    '✅f(3213) = 0',
528: 1:    '✅f(7662) = 2',
528: 1:    '✅f(9312) = 1',
528: 1:    '✅f(2222) = 0',
528: 1:    '✅f(5555) = 0',
528: 1:    '✅f(8193) = 3',
528: 1:    '✅f(8096) = 5',
528: 1:    '✅f(7777) = 0',
528: 1:    '✅f(9999) = 4',
528: 1:    '✅f(7756) = 1',
528: 1:    '✅f(6855) = 3',
528: 1:    '✅f(9881) = 5',
528: 1:    '✅f(5531) = 0',
528: 1:    '✅f(1234567890) = 5',
528: 1:    '✅f(0987654321) = 5',
528: 1:    '✅f(1029384756) = 5',
528: 1:    '✅f(6574839201) = 5',
528: 1:    '✅f(9298089492) = 9',
528: 1:    '✅f(8734092357) = 4',
528: 1:    '✅f(2083464833) = 6',
528: 1:    '✅f(0000000000) = 10'
528: 1:  ],
528: 1:  'level': 18,
528: 1:  'questions': []
528: 1:}
528: 1:Scores: 35003
528: 1:Answer: message('StartNextLevel')
528: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
529: 1:BoardData {
529: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
529: 1:  'expectedAnswer': '23',
529: 1:  'history': [],
529: 1:  'info': ['❌f(10) = ??? != 23'],
529: 1:  'level': 19,
529: 1:  'nextQuestion': '10',
529: 1:  'questions': ['10']
529: 1:}
529: 1:Scores: 35003
529: 1:Answer: message('['23']')
529: 1:Fire Event: PassTest{complexity=23, testCount=17}
------------------------------------------
530: 1:BoardData {
530: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
530: 1:  'expectedAnswer': '78',
530: 1:  'history': [{
530: 1:    'answer': '23',
530: 1:    'question': '10',
530: 1:    'valid': true
530: 1:  }],
530: 1:  'info': [
530: 1:    '✅f(10) = 23',
530: 1:    '❌f(20) = ??? != 78'
530: 1:  ],
530: 1:  'level': 19,
530: 1:  'nextQuestion': '20',
530: 1:  'questions': [
530: 1:    '10',
530: 1:    '20'
530: 1:  ]
530: 1:}
530: 1:Scores: 35016
530: 1:Answer: message('['23', '78']')
530: 1:Fire Event: PassTest{complexity=23, testCount=17}
------------------------------------------
531: 1:BoardData {
531: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
531: 1:  'expectedAnswer': '195',
531: 1:  'history': [
531: 1:    {
531: 1:      'answer': '23',
531: 1:      'question': '10',
531: 1:      'valid': true
531: 1:    },
531: 1:    {
531: 1:      'answer': '78',
531: 1:      'question': '20',
531: 1:      'valid': true
531: 1:    }
531: 1:  ],
531: 1:  'info': [
531: 1:    '✅f(10) = 23',
531: 1:    '✅f(20) = 78',
531: 1:    '❌f(30) = ??? != 195'
531: 1:  ],
531: 1:  'level': 19,
531: 1:  'nextQuestion': '30',
531: 1:  'questions': [
531: 1:    '10',
531: 1:    '20',
531: 1:    '30'
531: 1:  ]
531: 1:}
531: 1:Scores: 35029
531: 1:Answer: message('['23', '78', '195']')
531: 1:Fire Event: PassTest{complexity=23, testCount=17}
------------------------------------------
532: 1:BoardData {
532: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
532: 1:  'expectedAnswer': '2318',
532: 1:  'history': [
532: 1:    {
532: 1:      'answer': '23',
532: 1:      'question': '10',
532: 1:      'valid': true
532: 1:    },
532: 1:    {
532: 1:      'answer': '78',
532: 1:      'question': '20',
532: 1:      'valid': true
532: 1:    },
532: 1:    {
532: 1:      'answer': '195',
532: 1:      'question': '30',
532: 1:      'valid': true
532: 1:    }
532: 1:  ],
532: 1:  'info': [
532: 1:    '✅f(10) = 23',
532: 1:    '✅f(20) = 78',
532: 1:    '✅f(30) = 195',
532: 1:    '❌f(100) = ??? != 2318'
532: 1:  ],
532: 1:  'level': 19,
532: 1:  'nextQuestion': '100',
532: 1:  'questions': [
532: 1:    '10',
532: 1:    '20',
532: 1:    '30',
532: 1:    '100'
532: 1:  ]
532: 1:}
532: 1:Scores: 35042
532: 1:Answer: message('['23', '78', '195', '2318']')
532: 1:Fire Event: PassTest{complexity=23, testCount=17}
------------------------------------------
533: 1:BoardData {
533: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
533: 1:  'expectedAnswer': '9168',
533: 1:  'history': [
533: 1:    {
533: 1:      'answer': '23',
533: 1:      'question': '10',
533: 1:      'valid': true
533: 1:    },
533: 1:    {
533: 1:      'answer': '78',
533: 1:      'question': '20',
533: 1:      'valid': true
533: 1:    },
533: 1:    {
533: 1:      'answer': '195',
533: 1:      'question': '30',
533: 1:      'valid': true
533: 1:    },
533: 1:    {
533: 1:      'answer': '2318',
533: 1:      'question': '100',
533: 1:      'valid': true
533: 1:    }
533: 1:  ],
533: 1:  'info': [
533: 1:    '✅f(10) = 23',
533: 1:    '✅f(20) = 78',
533: 1:    '✅f(30) = 195',
533: 1:    '✅f(100) = 2318',
533: 1:    '❌f(200) = ??? != 9168'
533: 1:  ],
533: 1:  'level': 19,
533: 1:  'nextQuestion': '200',
533: 1:  'questions': [
533: 1:    '10',
533: 1:    '20',
533: 1:    '30',
533: 1:    '100',
533: 1:    '200'
533: 1:  ]
533: 1:}
533: 1:Scores: 35055
533: 1:Answer: message('['23', '78', '195', '2318', '9168']')
533: 1:Fire Event: PassTest{complexity=23, testCount=17}
------------------------------------------
534: 1:BoardData {
534: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
534: 1:  'expectedAnswer': '20850',
534: 1:  'history': [
534: 1:    {
534: 1:      'answer': '23',
534: 1:      'question': '10',
534: 1:      'valid': true
534: 1:    },
534: 1:    {
534: 1:      'answer': '78',
534: 1:      'question': '20',
534: 1:      'valid': true
534: 1:    },
534: 1:    {
534: 1:      'answer': '195',
534: 1:      'question': '30',
534: 1:      'valid': true
534: 1:    },
534: 1:    {
534: 1:      'answer': '2318',
534: 1:      'question': '100',
534: 1:      'valid': true
534: 1:    },
534: 1:    {
534: 1:      'answer': '9168',
534: 1:      'question': '200',
534: 1:      'valid': true
534: 1:    }
534: 1:  ],
534: 1:  'info': [
534: 1:    '✅f(10) = 23',
534: 1:    '✅f(20) = 78',
534: 1:    '✅f(30) = 195',
534: 1:    '✅f(100) = 2318',
534: 1:    '✅f(200) = 9168',
534: 1:    '❌f(300) = ??? != 20850'
534: 1:  ],
534: 1:  'level': 19,
534: 1:  'nextQuestion': '300',
534: 1:  'questions': [
534: 1:    '10',
534: 1:    '20',
534: 1:    '30',
534: 1:    '100',
534: 1:    '200',
534: 1:    '300'
534: 1:  ]
534: 1:}
534: 1:Scores: 35068
534: 1:Answer: message('['23', '78', '195', '2318', '9168', '20850']')
534: 1:Fire Event: PassTest{complexity=23, testCount=17}
------------------------------------------
535: 1:BoardData {
535: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
535: 1:  'expectedAnswer': '57918',
535: 1:  'history': [
535: 1:    {
535: 1:      'answer': '23',
535: 1:      'question': '10',
535: 1:      'valid': true
535: 1:    },
535: 1:    {
535: 1:      'answer': '78',
535: 1:      'question': '20',
535: 1:      'valid': true
535: 1:    },
535: 1:    {
535: 1:      'answer': '195',
535: 1:      'question': '30',
535: 1:      'valid': true
535: 1:    },
535: 1:    {
535: 1:      'answer': '2318',
535: 1:      'question': '100',
535: 1:      'valid': true
535: 1:    },
535: 1:    {
535: 1:      'answer': '9168',
535: 1:      'question': '200',
535: 1:      'valid': true
535: 1:    },
535: 1:    {
535: 1:      'answer': '20850',
535: 1:      'question': '300',
535: 1:      'valid': true
535: 1:    }
535: 1:  ],
535: 1:  'info': [
535: 1:    '✅f(10) = 23',
535: 1:    '✅f(20) = 78',
535: 1:    '✅f(30) = 195',
535: 1:    '✅f(100) = 2318',
535: 1:    '✅f(200) = 9168',
535: 1:    '✅f(300) = 20850',
535: 1:    '❌f(500) = ??? != 57918'
535: 1:  ],
535: 1:  'level': 19,
535: 1:  'nextQuestion': '500',
535: 1:  'questions': [
535: 1:    '10',
535: 1:    '20',
535: 1:    '30',
535: 1:    '100',
535: 1:    '200',
535: 1:    '300',
535: 1:    '500'
535: 1:  ]
535: 1:}
535: 1:Scores: 35081
535: 1:Answer: message('['23', '78', '195', '2318', '9168', '20850', '57918']')
535: 1:Fire Event: PassTest{complexity=23, testCount=17}
------------------------------------------
536: 1:BoardData {
536: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
536: 1:  'expectedAnswer': '233168',
536: 1:  'history': [
536: 1:    {
536: 1:      'answer': '23',
536: 1:      'question': '10',
536: 1:      'valid': true
536: 1:    },
536: 1:    {
536: 1:      'answer': '78',
536: 1:      'question': '20',
536: 1:      'valid': true
536: 1:    },
536: 1:    {
536: 1:      'answer': '195',
536: 1:      'question': '30',
536: 1:      'valid': true
536: 1:    },
536: 1:    {
536: 1:      'answer': '2318',
536: 1:      'question': '100',
536: 1:      'valid': true
536: 1:    },
536: 1:    {
536: 1:      'answer': '9168',
536: 1:      'question': '200',
536: 1:      'valid': true
536: 1:    },
536: 1:    {
536: 1:      'answer': '20850',
536: 1:      'question': '300',
536: 1:      'valid': true
536: 1:    },
536: 1:    {
536: 1:      'answer': '57918',
536: 1:      'question': '500',
536: 1:      'valid': true
536: 1:    }
536: 1:  ],
536: 1:  'info': [
536: 1:    '✅f(10) = 23',
536: 1:    '✅f(20) = 78',
536: 1:    '✅f(30) = 195',
536: 1:    '✅f(100) = 2318',
536: 1:    '✅f(200) = 9168',
536: 1:    '✅f(300) = 20850',
536: 1:    '✅f(500) = 57918',
536: 1:    '❌f(1000) = ??? != 233168'
536: 1:  ],
536: 1:  'level': 19,
536: 1:  'nextQuestion': '1000',
536: 1:  'questions': [
536: 1:    '10',
536: 1:    '20',
536: 1:    '30',
536: 1:    '100',
536: 1:    '200',
536: 1:    '300',
536: 1:    '500',
536: 1:    '1000'
536: 1:  ]
536: 1:}
536: 1:Scores: 35094
536: 1:Answer: message('['23', '78', '195', '2318', '9168', '20850', '57918', '233168']')
536: 1:Fire Event: PassTest{complexity=23, testCount=17}
------------------------------------------
537: 1:BoardData {
537: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
537: 1:  'expectedAnswer': '931668',
537: 1:  'history': [
537: 1:    {
537: 1:      'answer': '23',
537: 1:      'question': '10',
537: 1:      'valid': true
537: 1:    },
537: 1:    {
537: 1:      'answer': '78',
537: 1:      'question': '20',
537: 1:      'valid': true
537: 1:    },
537: 1:    {
537: 1:      'answer': '195',
537: 1:      'question': '30',
537: 1:      'valid': true
537: 1:    },
537: 1:    {
537: 1:      'answer': '2318',
537: 1:      'question': '100',
537: 1:      'valid': true
537: 1:    },
537: 1:    {
537: 1:      'answer': '9168',
537: 1:      'question': '200',
537: 1:      'valid': true
537: 1:    },
537: 1:    {
537: 1:      'answer': '20850',
537: 1:      'question': '300',
537: 1:      'valid': true
537: 1:    },
537: 1:    {
537: 1:      'answer': '57918',
537: 1:      'question': '500',
537: 1:      'valid': true
537: 1:    },
537: 1:    {
537: 1:      'answer': '233168',
537: 1:      'question': '1000',
537: 1:      'valid': true
537: 1:    }
537: 1:  ],
537: 1:  'info': [
537: 1:    '✅f(10) = 23',
537: 1:    '✅f(20) = 78',
537: 1:    '✅f(30) = 195',
537: 1:    '✅f(100) = 2318',
537: 1:    '✅f(200) = 9168',
537: 1:    '✅f(300) = 20850',
537: 1:    '✅f(500) = 57918',
537: 1:    '✅f(1000) = 233168',
537: 1:    '❌f(2000) = ??? != 931668'
537: 1:  ],
537: 1:  'level': 19,
537: 1:  'nextQuestion': '2000',
537: 1:  'questions': [
537: 1:    '10',
537: 1:    '20',
537: 1:    '30',
537: 1:    '100',
537: 1:    '200',
537: 1:    '300',
537: 1:    '500',
537: 1:    '1000',
537: 1:    '2000'
537: 1:  ]
537: 1:}
537: 1:Scores: 35107
537: 1:Answer: message('['23', '78', '195', '2318', '9168', '20850', '57918', '233168', '931668']')
537: 1:Fire Event: PassTest{complexity=23, testCount=17}
------------------------------------------
538: 1:BoardData {
538: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
538: 1:  'expectedAnswer': '2098500',
538: 1:  'history': [
538: 1:    {
538: 1:      'answer': '23',
538: 1:      'question': '10',
538: 1:      'valid': true
538: 1:    },
538: 1:    {
538: 1:      'answer': '78',
538: 1:      'question': '20',
538: 1:      'valid': true
538: 1:    },
538: 1:    {
538: 1:      'answer': '195',
538: 1:      'question': '30',
538: 1:      'valid': true
538: 1:    },
538: 1:    {
538: 1:      'answer': '2318',
538: 1:      'question': '100',
538: 1:      'valid': true
538: 1:    },
538: 1:    {
538: 1:      'answer': '9168',
538: 1:      'question': '200',
538: 1:      'valid': true
538: 1:    },
538: 1:    {
538: 1:      'answer': '20850',
538: 1:      'question': '300',
538: 1:      'valid': true
538: 1:    },
538: 1:    {
538: 1:      'answer': '57918',
538: 1:      'question': '500',
538: 1:      'valid': true
538: 1:    },
538: 1:    {
538: 1:      'answer': '233168',
538: 1:      'question': '1000',
538: 1:      'valid': true
538: 1:    },
538: 1:    {
538: 1:      'answer': '931668',
538: 1:      'question': '2000',
538: 1:      'valid': true
538: 1:    }
538: 1:  ],
538: 1:  'info': [
538: 1:    '✅f(10) = 23',
538: 1:    '✅f(20) = 78',
538: 1:    '✅f(30) = 195',
538: 1:    '✅f(100) = 2318',
538: 1:    '✅f(200) = 9168',
538: 1:    '✅f(300) = 20850',
538: 1:    '✅f(500) = 57918',
538: 1:    '✅f(1000) = 233168',
538: 1:    '✅f(2000) = 931668',
538: 1:    '❌f(3000) = ??? != 2098500'
538: 1:  ],
538: 1:  'level': 19,
538: 1:  'nextQuestion': '3000',
538: 1:  'questions': [
538: 1:    '10',
538: 1:    '20',
538: 1:    '30',
538: 1:    '100',
538: 1:    '200',
538: 1:    '300',
538: 1:    '500',
538: 1:    '1000',
538: 1:    '2000',
538: 1:    '3000'
538: 1:  ]
538: 1:}
538: 1:Scores: 35120
538: 1:Answer: message('['23', '78', '195', '2318', '9168', '20850', '57918', '233168', '931668', '2098500']')
538: 1:Fire Event: PassTest{complexity=23, testCount=17}
------------------------------------------
539: 1:BoardData {
539: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
539: 1:  'expectedAnswer': '5829168',
539: 1:  'history': [
539: 1:    {
539: 1:      'answer': '23',
539: 1:      'question': '10',
539: 1:      'valid': true
539: 1:    },
539: 1:    {
539: 1:      'answer': '78',
539: 1:      'question': '20',
539: 1:      'valid': true
539: 1:    },
539: 1:    {
539: 1:      'answer': '195',
539: 1:      'question': '30',
539: 1:      'valid': true
539: 1:    },
539: 1:    {
539: 1:      'answer': '2318',
539: 1:      'question': '100',
539: 1:      'valid': true
539: 1:    },
539: 1:    {
539: 1:      'answer': '9168',
539: 1:      'question': '200',
539: 1:      'valid': true
539: 1:    },
539: 1:    {
539: 1:      'answer': '20850',
539: 1:      'question': '300',
539: 1:      'valid': true
539: 1:    },
539: 1:    {
539: 1:      'answer': '57918',
539: 1:      'question': '500',
539: 1:      'valid': true
539: 1:    },
539: 1:    {
539: 1:      'answer': '233168',
539: 1:      'question': '1000',
539: 1:      'valid': true
539: 1:    },
539: 1:    {
539: 1:      'answer': '931668',
539: 1:      'question': '2000',
539: 1:      'valid': true
539: 1:    },
539: 1:    {
539: 1:      'answer': '2098500',
539: 1:      'question': '3000',
539: 1:      'valid': true
539: 1:    }
539: 1:  ],
539: 1:  'info': [
539: 1:    '✅f(10) = 23',
539: 1:    '✅f(20) = 78',
539: 1:    '✅f(30) = 195',
539: 1:    '✅f(100) = 2318',
539: 1:    '✅f(200) = 9168',
539: 1:    '✅f(300) = 20850',
539: 1:    '✅f(500) = 57918',
539: 1:    '✅f(1000) = 233168',
539: 1:    '✅f(2000) = 931668',
539: 1:    '✅f(3000) = 2098500',
539: 1:    '❌f(5000) = ??? != 5829168'
539: 1:  ],
539: 1:  'level': 19,
539: 1:  'nextQuestion': '5000',
539: 1:  'questions': [
539: 1:    '10',
539: 1:    '20',
539: 1:    '30',
539: 1:    '100',
539: 1:    '200',
539: 1:    '300',
539: 1:    '500',
539: 1:    '1000',
539: 1:    '2000',
539: 1:    '3000',
539: 1:    '5000'
539: 1:  ]
539: 1:}
539: 1:Scores: 35133
539: 1:Answer: message('['23', '78', '195', '2318', '9168', '20850', '57918', '233168', '931668', '2098500', '5829168']')
539: 1:Fire Event: PassTest{complexity=23, testCount=17}
------------------------------------------
540: 1:BoardData {
540: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
540: 1:  'expectedAnswer': '23331668',
540: 1:  'history': [
540: 1:    {
540: 1:      'answer': '23',
540: 1:      'question': '10',
540: 1:      'valid': true
540: 1:    },
540: 1:    {
540: 1:      'answer': '78',
540: 1:      'question': '20',
540: 1:      'valid': true
540: 1:    },
540: 1:    {
540: 1:      'answer': '195',
540: 1:      'question': '30',
540: 1:      'valid': true
540: 1:    },
540: 1:    {
540: 1:      'answer': '2318',
540: 1:      'question': '100',
540: 1:      'valid': true
540: 1:    },
540: 1:    {
540: 1:      'answer': '9168',
540: 1:      'question': '200',
540: 1:      'valid': true
540: 1:    },
540: 1:    {
540: 1:      'answer': '20850',
540: 1:      'question': '300',
540: 1:      'valid': true
540: 1:    },
540: 1:    {
540: 1:      'answer': '57918',
540: 1:      'question': '500',
540: 1:      'valid': true
540: 1:    },
540: 1:    {
540: 1:      'answer': '233168',
540: 1:      'question': '1000',
540: 1:      'valid': true
540: 1:    },
540: 1:    {
540: 1:      'answer': '931668',
540: 1:      'question': '2000',
540: 1:      'valid': true
540: 1:    },
540: 1:    {
540: 1:      'answer': '2098500',
540: 1:      'question': '3000',
540: 1:      'valid': true
540: 1:    },
540: 1:    {
540: 1:      'answer': '5829168',
540: 1:      'question': '5000',
540: 1:      'valid': true
540: 1:    }
540: 1:  ],
540: 1:  'info': [
540: 1:    '✅f(10) = 23',
540: 1:    '✅f(20) = 78',
540: 1:    '✅f(30) = 195',
540: 1:    '✅f(100) = 2318',
540: 1:    '✅f(200) = 9168',
540: 1:    '✅f(300) = 20850',
540: 1:    '✅f(500) = 57918',
540: 1:    '✅f(1000) = 233168',
540: 1:    '✅f(2000) = 931668',
540: 1:    '✅f(3000) = 2098500',
540: 1:    '✅f(5000) = 5829168',
540: 1:    '❌f(10000) = ??? != 23331668'
540: 1:  ],
540: 1:  'level': 19,
540: 1:  'nextQuestion': '10000',
540: 1:  'questions': [
540: 1:    '10',
540: 1:    '20',
540: 1:    '30',
540: 1:    '100',
540: 1:    '200',
540: 1:    '300',
540: 1:    '500',
540: 1:    '1000',
540: 1:    '2000',
540: 1:    '3000',
540: 1:    '5000',
540: 1:    '10000'
540: 1:  ]
540: 1:}
540: 1:Scores: 35146
540: 1:Answer: message('['23', '78', '195', '2318', '9168', '20850', '57918', '233168', '931668', '2098500', '5829168', '23331668']')
540: 1:Fire Event: PassTest{complexity=23, testCount=17}
------------------------------------------
541: 1:BoardData {
541: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
541: 1:  'expectedAnswer': '115229219',
541: 1:  'history': [
541: 1:    {
541: 1:      'answer': '23',
541: 1:      'question': '10',
541: 1:      'valid': true
541: 1:    },
541: 1:    {
541: 1:      'answer': '78',
541: 1:      'question': '20',
541: 1:      'valid': true
541: 1:    },
541: 1:    {
541: 1:      'answer': '195',
541: 1:      'question': '30',
541: 1:      'valid': true
541: 1:    },
541: 1:    {
541: 1:      'answer': '2318',
541: 1:      'question': '100',
541: 1:      'valid': true
541: 1:    },
541: 1:    {
541: 1:      'answer': '9168',
541: 1:      'question': '200',
541: 1:      'valid': true
541: 1:    },
541: 1:    {
541: 1:      'answer': '20850',
541: 1:      'question': '300',
541: 1:      'valid': true
541: 1:    },
541: 1:    {
541: 1:      'answer': '57918',
541: 1:      'question': '500',
541: 1:      'valid': true
541: 1:    },
541: 1:    {
541: 1:      'answer': '233168',
541: 1:      'question': '1000',
541: 1:      'valid': true
541: 1:    },
541: 1:    {
541: 1:      'answer': '931668',
541: 1:      'question': '2000',
541: 1:      'valid': true
541: 1:    },
541: 1:    {
541: 1:      'answer': '2098500',
541: 1:      'question': '3000',
541: 1:      'valid': true
541: 1:    },
541: 1:    {
541: 1:      'answer': '5829168',
541: 1:      'question': '5000',
541: 1:      'valid': true
541: 1:    },
541: 1:    {
541: 1:      'answer': '23331668',
541: 1:      'question': '10000',
541: 1:      'valid': true
541: 1:    }
541: 1:  ],
541: 1:  'info': [
541: 1:    '✅f(10) = 23',
541: 1:    '✅f(20) = 78',
541: 1:    '✅f(30) = 195',
541: 1:    '✅f(100) = 2318',
541: 1:    '✅f(200) = 9168',
541: 1:    '✅f(300) = 20850',
541: 1:    '✅f(500) = 57918',
541: 1:    '✅f(1000) = 233168',
541: 1:    '✅f(2000) = 931668',
541: 1:    '✅f(3000) = 2098500',
541: 1:    '✅f(5000) = 5829168',
541: 1:    '✅f(10000) = 23331668',
541: 1:    '❌f(22222) = ??? != 115229219'
541: 1:  ],
541: 1:  'level': 19,
541: 1:  'nextQuestion': '22222',
541: 1:  'questions': [
541: 1:    '10',
541: 1:    '20',
541: 1:    '30',
541: 1:    '100',
541: 1:    '200',
541: 1:    '300',
541: 1:    '500',
541: 1:    '1000',
541: 1:    '2000',
541: 1:    '3000',
541: 1:    '5000',
541: 1:    '10000',
541: 1:    '22222'
541: 1:  ]
541: 1:}
541: 1:Scores: 35159
541: 1:Answer: message('['23', '78', '195', '2318', '9168', '20850', '57918', '233168', '931668', '2098500', '5829168', '23331668', '115229219']')
541: 1:Fire Event: PassTest{complexity=23, testCount=17}
------------------------------------------
542: 1:BoardData {
542: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
542: 1:  'expectedAnswer': '1036996298',
542: 1:  'history': [
542: 1:    {
542: 1:      'answer': '23',
542: 1:      'question': '10',
542: 1:      'valid': true
542: 1:    },
542: 1:    {
542: 1:      'answer': '78',
542: 1:      'question': '20',
542: 1:      'valid': true
542: 1:    },
542: 1:    {
542: 1:      'answer': '195',
542: 1:      'question': '30',
542: 1:      'valid': true
542: 1:    },
542: 1:    {
542: 1:      'answer': '2318',
542: 1:      'question': '100',
542: 1:      'valid': true
542: 1:    },
542: 1:    {
542: 1:      'answer': '9168',
542: 1:      'question': '200',
542: 1:      'valid': true
542: 1:    },
542: 1:    {
542: 1:      'answer': '20850',
542: 1:      'question': '300',
542: 1:      'valid': true
542: 1:    },
542: 1:    {
542: 1:      'answer': '57918',
542: 1:      'question': '500',
542: 1:      'valid': true
542: 1:    },
542: 1:    {
542: 1:      'answer': '233168',
542: 1:      'question': '1000',
542: 1:      'valid': true
542: 1:    },
542: 1:    {
542: 1:      'answer': '931668',
542: 1:      'question': '2000',
542: 1:      'valid': true
542: 1:    },
542: 1:    {
542: 1:      'answer': '2098500',
542: 1:      'question': '3000',
542: 1:      'valid': true
542: 1:    },
542: 1:    {
542: 1:      'answer': '5829168',
542: 1:      'question': '5000',
542: 1:      'valid': true
542: 1:    },
542: 1:    {
542: 1:      'answer': '23331668',
542: 1:      'question': '10000',
542: 1:      'valid': true
542: 1:    },
542: 1:    {
542: 1:      'answer': '115229219',
542: 1:      'question': '22222',
542: 1:      'valid': true
542: 1:    }
542: 1:  ],
542: 1:  'info': [
542: 1:    '✅f(10) = 23',
542: 1:    '✅f(20) = 78',
542: 1:    '✅f(30) = 195',
542: 1:    '✅f(100) = 2318',
542: 1:    '✅f(200) = 9168',
542: 1:    '✅f(300) = 20850',
542: 1:    '✅f(500) = 57918',
542: 1:    '✅f(1000) = 233168',
542: 1:    '✅f(2000) = 931668',
542: 1:    '✅f(3000) = 2098500',
542: 1:    '✅f(5000) = 5829168',
542: 1:    '✅f(10000) = 23331668',
542: 1:    '✅f(22222) = 115229219',
542: 1:    '❌f(66666) = ??? != 1036996298'
542: 1:  ],
542: 1:  'level': 19,
542: 1:  'nextQuestion': '66666',
542: 1:  'questions': [
542: 1:    '10',
542: 1:    '20',
542: 1:    '30',
542: 1:    '100',
542: 1:    '200',
542: 1:    '300',
542: 1:    '500',
542: 1:    '1000',
542: 1:    '2000',
542: 1:    '3000',
542: 1:    '5000',
542: 1:    '10000',
542: 1:    '22222',
542: 1:    '66666'
542: 1:  ]
542: 1:}
542: 1:Scores: 35172
542: 1:Answer: message('['23', '78', '195', '2318', '9168', '20850', '57918', '233168', '931668', '2098500', '5829168', '23331668', '115229219', '1036996298']')
542: 1:Fire Event: PassTest{complexity=23, testCount=17}
------------------------------------------
543: 1:BoardData {
543: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
543: 1:  'expectedAnswer': '2333216669',
543: 1:  'history': [
543: 1:    {
543: 1:      'answer': '23',
543: 1:      'question': '10',
543: 1:      'valid': true
543: 1:    },
543: 1:    {
543: 1:      'answer': '78',
543: 1:      'question': '20',
543: 1:      'valid': true
543: 1:    },
543: 1:    {
543: 1:      'answer': '195',
543: 1:      'question': '30',
543: 1:      'valid': true
543: 1:    },
543: 1:    {
543: 1:      'answer': '2318',
543: 1:      'question': '100',
543: 1:      'valid': true
543: 1:    },
543: 1:    {
543: 1:      'answer': '9168',
543: 1:      'question': '200',
543: 1:      'valid': true
543: 1:    },
543: 1:    {
543: 1:      'answer': '20850',
543: 1:      'question': '300',
543: 1:      'valid': true
543: 1:    },
543: 1:    {
543: 1:      'answer': '57918',
543: 1:      'question': '500',
543: 1:      'valid': true
543: 1:    },
543: 1:    {
543: 1:      'answer': '233168',
543: 1:      'question': '1000',
543: 1:      'valid': true
543: 1:    },
543: 1:    {
543: 1:      'answer': '931668',
543: 1:      'question': '2000',
543: 1:      'valid': true
543: 1:    },
543: 1:    {
543: 1:      'answer': '2098500',
543: 1:      'question': '3000',
543: 1:      'valid': true
543: 1:    },
543: 1:    {
543: 1:      'answer': '5829168',
543: 1:      'question': '5000',
543: 1:      'valid': true
543: 1:    },
543: 1:    {
543: 1:      'answer': '23331668',
543: 1:      'question': '10000',
543: 1:      'valid': true
543: 1:    },
543: 1:    {
543: 1:      'answer': '115229219',
543: 1:      'question': '22222',
543: 1:      'valid': true
543: 1:    },
543: 1:    {
543: 1:      'answer': '1036996298',
543: 1:      'question': '66666',
543: 1:      'valid': true
543: 1:    }
543: 1:  ],
543: 1:  'info': [
543: 1:    '✅f(10) = 23',
543: 1:    '✅f(20) = 78',
543: 1:    '✅f(30) = 195',
543: 1:    '✅f(100) = 2318',
543: 1:    '✅f(200) = 9168',
543: 1:    '✅f(300) = 20850',
543: 1:    '✅f(500) = 57918',
543: 1:    '✅f(1000) = 233168',
543: 1:    '✅f(2000) = 931668',
543: 1:    '✅f(3000) = 2098500',
543: 1:    '✅f(5000) = 5829168',
543: 1:    '✅f(10000) = 23331668',
543: 1:    '✅f(22222) = 115229219',
543: 1:    '✅f(66666) = 1036996298',
543: 1:    '❌f(99999) = ??? != 2333216669'
543: 1:  ],
543: 1:  'level': 19,
543: 1:  'nextQuestion': '99999',
543: 1:  'questions': [
543: 1:    '10',
543: 1:    '20',
543: 1:    '30',
543: 1:    '100',
543: 1:    '200',
543: 1:    '300',
543: 1:    '500',
543: 1:    '1000',
543: 1:    '2000',
543: 1:    '3000',
543: 1:    '5000',
543: 1:    '10000',
543: 1:    '22222',
543: 1:    '66666',
543: 1:    '99999'
543: 1:  ]
543: 1:}
543: 1:Scores: 35185
543: 1:Answer: message('['23', '78', '195', '2318', '9168', '20850', '57918', '233168', '931668', '2098500', '5829168', '23331668', '115229219', '1036996298', '2333216669']')
543: 1:Fire Event: PassTest{complexity=23, testCount=17}
------------------------------------------
544: 1:BoardData {
544: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
544: 1:  'expectedAnswer': '355636612814',
544: 1:  'history': [
544: 1:    {
544: 1:      'answer': '23',
544: 1:      'question': '10',
544: 1:      'valid': true
544: 1:    },
544: 1:    {
544: 1:      'answer': '78',
544: 1:      'question': '20',
544: 1:      'valid': true
544: 1:    },
544: 1:    {
544: 1:      'answer': '195',
544: 1:      'question': '30',
544: 1:      'valid': true
544: 1:    },
544: 1:    {
544: 1:      'answer': '2318',
544: 1:      'question': '100',
544: 1:      'valid': true
544: 1:    },
544: 1:    {
544: 1:      'answer': '9168',
544: 1:      'question': '200',
544: 1:      'valid': true
544: 1:    },
544: 1:    {
544: 1:      'answer': '20850',
544: 1:      'question': '300',
544: 1:      'valid': true
544: 1:    },
544: 1:    {
544: 1:      'answer': '57918',
544: 1:      'question': '500',
544: 1:      'valid': true
544: 1:    },
544: 1:    {
544: 1:      'answer': '233168',
544: 1:      'question': '1000',
544: 1:      'valid': true
544: 1:    },
544: 1:    {
544: 1:      'answer': '931668',
544: 1:      'question': '2000',
544: 1:      'valid': true
544: 1:    },
544: 1:    {
544: 1:      'answer': '2098500',
544: 1:      'question': '3000',
544: 1:      'valid': true
544: 1:    },
544: 1:    {
544: 1:      'answer': '5829168',
544: 1:      'question': '5000',
544: 1:      'valid': true
544: 1:    },
544: 1:    {
544: 1:      'answer': '23331668',
544: 1:      'question': '10000',
544: 1:      'valid': true
544: 1:    },
544: 1:    {
544: 1:      'answer': '115229219',
544: 1:      'question': '22222',
544: 1:      'valid': true
544: 1:    },
544: 1:    {
544: 1:      'answer': '1036996298',
544: 1:      'question': '66666',
544: 1:      'valid': true
544: 1:    },
544: 1:    {
544: 1:      'answer': '2333216669',
544: 1:      'question': '99999',
544: 1:      'valid': true
544: 1:    }
544: 1:  ],
544: 1:  'info': [
544: 1:    '✅f(10) = 23',
544: 1:    '✅f(20) = 78',
544: 1:    '✅f(30) = 195',
544: 1:    '✅f(100) = 2318',
544: 1:    '✅f(200) = 9168',
544: 1:    '✅f(300) = 20850',
544: 1:    '✅f(500) = 57918',
544: 1:    '✅f(1000) = 233168',
544: 1:    '✅f(2000) = 931668',
544: 1:    '✅f(3000) = 2098500',
544: 1:    '✅f(5000) = 5829168',
544: 1:    '✅f(10000) = 23331668',
544: 1:    '✅f(22222) = 115229219',
544: 1:    '✅f(66666) = 1036996298',
544: 1:    '✅f(99999) = 2333216669',
544: 1:    '❌f(1234567) = ??? != 355636612814'
544: 1:  ],
544: 1:  'level': 19,
544: 1:  'nextQuestion': '1234567',
544: 1:  'questions': [
544: 1:    '10',
544: 1:    '20',
544: 1:    '30',
544: 1:    '100',
544: 1:    '200',
544: 1:    '300',
544: 1:    '500',
544: 1:    '1000',
544: 1:    '2000',
544: 1:    '3000',
544: 1:    '5000',
544: 1:    '10000',
544: 1:    '22222',
544: 1:    '66666',
544: 1:    '99999',
544: 1:    '1234567'
544: 1:  ]
544: 1:}
544: 1:Scores: 35198
544: 1:Answer: message('['23', '78', '195', '2318', '9168', '20850', '57918', '233168', '931668', '2098500', '5829168', '23331668', '115229219', '1036996298', '2333216669', '355636612814']')
544: 1:Fire Event: PassTest{complexity=23, testCount=17}
------------------------------------------
545: 1:BoardData {
545: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
545: 1:  'expectedAnswer': '13670680581720',
545: 1:  'history': [
545: 1:    {
545: 1:      'answer': '23',
545: 1:      'question': '10',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': '78',
545: 1:      'question': '20',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': '195',
545: 1:      'question': '30',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': '2318',
545: 1:      'question': '100',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': '9168',
545: 1:      'question': '200',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': '20850',
545: 1:      'question': '300',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': '57918',
545: 1:      'question': '500',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': '233168',
545: 1:      'question': '1000',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': '931668',
545: 1:      'question': '2000',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': '2098500',
545: 1:      'question': '3000',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': '5829168',
545: 1:      'question': '5000',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': '23331668',
545: 1:      'question': '10000',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': '115229219',
545: 1:      'question': '22222',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': '1036996298',
545: 1:      'question': '66666',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': '2333216669',
545: 1:      'question': '99999',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': '355636612814',
545: 1:      'question': '1234567',
545: 1:      'valid': true
545: 1:    }
545: 1:  ],
545: 1:  'info': [
545: 1:    '✅f(10) = 23',
545: 1:    '✅f(20) = 78',
545: 1:    '✅f(30) = 195',
545: 1:    '✅f(100) = 2318',
545: 1:    '✅f(200) = 9168',
545: 1:    '✅f(300) = 20850',
545: 1:    '✅f(500) = 57918',
545: 1:    '✅f(1000) = 233168',
545: 1:    '✅f(2000) = 931668',
545: 1:    '✅f(3000) = 2098500',
545: 1:    '✅f(5000) = 5829168',
545: 1:    '✅f(10000) = 23331668',
545: 1:    '✅f(22222) = 115229219',
545: 1:    '✅f(66666) = 1036996298',
545: 1:    '✅f(99999) = 2333216669',
545: 1:    '✅f(1234567) = 355636612814',
545: 1:    '❌f(7654321) = ??? != 13670680581720'
545: 1:  ],
545: 1:  'level': 19,
545: 1:  'nextQuestion': '7654321',
545: 1:  'questions': [
545: 1:    '10',
545: 1:    '20',
545: 1:    '30',
545: 1:    '100',
545: 1:    '200',
545: 1:    '300',
545: 1:    '500',
545: 1:    '1000',
545: 1:    '2000',
545: 1:    '3000',
545: 1:    '5000',
545: 1:    '10000',
545: 1:    '22222',
545: 1:    '66666',
545: 1:    '99999',
545: 1:    '1234567',
545: 1:    '7654321'
545: 1:  ]
545: 1:}
545: 1:Scores: 35211
545: 1:Answer: message('['23', '78', '195', '2318', '9168', '20850', '57918', '233168', '931668', '2098500', '5829168', '23331668', '115229219', '1036996298', '2333216669', '355636612814', '13670680581720']')
545: 1:Fire Event: PassTest{complexity=23, testCount=17}
545: 1:Fire Event: NextAlgorithm{complexity=23, time=0}
------------------------------------------
546: 1:BoardData {
546: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
546: 1:  'history': [
546: 1:    {
546: 1:      'answer': '23',
546: 1:      'question': '10',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': '78',
546: 1:      'question': '20',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': '195',
546: 1:      'question': '30',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': '2318',
546: 1:      'question': '100',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': '9168',
546: 1:      'question': '200',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': '20850',
546: 1:      'question': '300',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': '57918',
546: 1:      'question': '500',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': '233168',
546: 1:      'question': '1000',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': '931668',
546: 1:      'question': '2000',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': '2098500',
546: 1:      'question': '3000',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': '5829168',
546: 1:      'question': '5000',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': '23331668',
546: 1:      'question': '10000',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': '115229219',
546: 1:      'question': '22222',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': '1036996298',
546: 1:      'question': '66666',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': '2333216669',
546: 1:      'question': '99999',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': '355636612814',
546: 1:      'question': '1234567',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': '13670680581720',
546: 1:      'question': '7654321',
546: 1:      'valid': true
546: 1:    }
546: 1:  ],
546: 1:  'info': [
546: 1:    '✅f(10) = 23',
546: 1:    '✅f(20) = 78',
546: 1:    '✅f(30) = 195',
546: 1:    '✅f(100) = 2318',
546: 1:    '✅f(200) = 9168',
546: 1:    '✅f(300) = 20850',
546: 1:    '✅f(500) = 57918',
546: 1:    '✅f(1000) = 233168',
546: 1:    '✅f(2000) = 931668',
546: 1:    '✅f(3000) = 2098500',
546: 1:    '✅f(5000) = 5829168',
546: 1:    '✅f(10000) = 23331668',
546: 1:    '✅f(22222) = 115229219',
546: 1:    '✅f(66666) = 1036996298',
546: 1:    '✅f(99999) = 2333216669',
546: 1:    '✅f(1234567) = 355636612814',
546: 1:    '✅f(7654321) = 13670680581720'
546: 1:  ],
546: 1:  'level': 19,
546: 1:  'questions': []
546: 1:}
546: 1:Scores: 38328
546: 1:Answer: message('StartNextLevel')
546: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
547: 1:BoardData {
547: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
547: 1:  'expectedAnswer': '7',
547: 1:  'history': [],
547: 1:  'info': ['❌f(456126121234546) = ??? != 7'],
547: 1:  'level': 20,
547: 1:  'nextQuestion': '456126121234546',
547: 1:  'questions': ['456126121234546']
547: 1:}
547: 1:Scores: 38328
547: 1:Answer: message('['7']')
547: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
548: 1:BoardData {
548: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
548: 1:  'expectedAnswer': '0',
548: 1:  'history': [{
548: 1:    'answer': '7',
548: 1:    'question': '456126121234546',
548: 1:    'valid': true
548: 1:  }],
548: 1:  'info': [
548: 1:    '✅f(456126121234546) = 7',
548: 1:    '❌f(123456781234567) = ??? != 0'
548: 1:  ],
548: 1:  'level': 20,
548: 1:  'nextQuestion': '123456781234567',
548: 1:  'questions': [
548: 1:    '456126121234546',
548: 1:    '123456781234567'
548: 1:  ]
548: 1:}
548: 1:Scores: 38336
548: 1:Answer: message('['7', '0']')
548: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
549: 1:BoardData {
549: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
549: 1:  'expectedAnswer': '2',
549: 1:  'history': [
549: 1:    {
549: 1:      'answer': '7',
549: 1:      'question': '456126121234546',
549: 1:      'valid': true
549: 1:    },
549: 1:    {
549: 1:      'answer': '0',
549: 1:      'question': '123456781234567',
549: 1:      'valid': true
549: 1:    }
549: 1:  ],
549: 1:  'info': [
549: 1:    '✅f(456126121234546) = 7',
549: 1:    '✅f(123456781234567) = 0',
549: 1:    '❌f(183168009579826) = ??? != 2'
549: 1:  ],
549: 1:  'level': 20,
549: 1:  'nextQuestion': '183168009579826',
549: 1:  'questions': [
549: 1:    '456126121234546',
549: 1:    '123456781234567',
549: 1:    '183168009579826'
549: 1:  ]
549: 1:}
549: 1:Scores: 38344
549: 1:Answer: message('['7', '0', '2']')
549: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
550: 1:BoardData {
550: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
550: 1:  'expectedAnswer': '7',
550: 1:  'history': [
550: 1:    {
550: 1:      'answer': '7',
550: 1:      'question': '456126121234546',
550: 1:      'valid': true
550: 1:    },
550: 1:    {
550: 1:      'answer': '0',
550: 1:      'question': '123456781234567',
550: 1:      'valid': true
550: 1:    },
550: 1:    {
550: 1:      'answer': '2',
550: 1:      'question': '183168009579826',
550: 1:      'valid': true
550: 1:    }
550: 1:  ],
550: 1:  'info': [
550: 1:    '✅f(456126121234546) = 7',
550: 1:    '✅f(123456781234567) = 0',
550: 1:    '✅f(183168009579826) = 2',
550: 1:    '❌f(964720036906339) = ??? != 7'
550: 1:  ],
550: 1:  'level': 20,
550: 1:  'nextQuestion': '964720036906339',
550: 1:  'questions': [
550: 1:    '456126121234546',
550: 1:    '123456781234567',
550: 1:    '183168009579826',
550: 1:    '964720036906339'
550: 1:  ]
550: 1:}
550: 1:Scores: 38352
550: 1:Answer: message('['7', '0', '2', '7']')
550: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
551: 1:BoardData {
551: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
551: 1:  'expectedAnswer': '9',
551: 1:  'history': [
551: 1:    {
551: 1:      'answer': '7',
551: 1:      'question': '456126121234546',
551: 1:      'valid': true
551: 1:    },
551: 1:    {
551: 1:      'answer': '0',
551: 1:      'question': '123456781234567',
551: 1:      'valid': true
551: 1:    },
551: 1:    {
551: 1:      'answer': '2',
551: 1:      'question': '183168009579826',
551: 1:      'valid': true
551: 1:    },
551: 1:    {
551: 1:      'answer': '7',
551: 1:      'question': '964720036906339',
551: 1:      'valid': true
551: 1:    }
551: 1:  ],
551: 1:  'info': [
551: 1:    '✅f(456126121234546) = 7',
551: 1:    '✅f(123456781234567) = 0',
551: 1:    '✅f(183168009579826) = 2',
551: 1:    '✅f(964720036906339) = 7',
551: 1:    '❌f(613951967276640) = ??? != 9'
551: 1:  ],
551: 1:  'level': 20,
551: 1:  'nextQuestion': '613951967276640',
551: 1:  'questions': [
551: 1:    '456126121234546',
551: 1:    '123456781234567',
551: 1:    '183168009579826',
551: 1:    '964720036906339',
551: 1:    '613951967276640'
551: 1:  ]
551: 1:}
551: 1:Scores: 38360
551: 1:Answer: message('['7', '0', '2', '7', '9']')
551: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
552: 1:BoardData {
552: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
552: 1:  'expectedAnswer': '7',
552: 1:  'history': [
552: 1:    {
552: 1:      'answer': '7',
552: 1:      'question': '456126121234546',
552: 1:      'valid': true
552: 1:    },
552: 1:    {
552: 1:      'answer': '0',
552: 1:      'question': '123456781234567',
552: 1:      'valid': true
552: 1:    },
552: 1:    {
552: 1:      'answer': '2',
552: 1:      'question': '183168009579826',
552: 1:      'valid': true
552: 1:    },
552: 1:    {
552: 1:      'answer': '7',
552: 1:      'question': '964720036906339',
552: 1:      'valid': true
552: 1:    },
552: 1:    {
552: 1:      'answer': '9',
552: 1:      'question': '613951967276640',
552: 1:      'valid': true
552: 1:    }
552: 1:  ],
552: 1:  'info': [
552: 1:    '✅f(456126121234546) = 7',
552: 1:    '✅f(123456781234567) = 0',
552: 1:    '✅f(183168009579826) = 2',
552: 1:    '✅f(964720036906339) = 7',
552: 1:    '✅f(613951967276640) = 9',
552: 1:    '❌f(825813064400100) = ??? != 7'
552: 1:  ],
552: 1:  'level': 20,
552: 1:  'nextQuestion': '825813064400100',
552: 1:  'questions': [
552: 1:    '456126121234546',
552: 1:    '123456781234567',
552: 1:    '183168009579826',
552: 1:    '964720036906339',
552: 1:    '613951967276640',
552: 1:    '825813064400100'
552: 1:  ]
552: 1:}
552: 1:Scores: 38368
552: 1:Answer: message('['7', '0', '2', '7', '9', '7']')
552: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
553: 1:BoardData {
553: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
553: 1:  'expectedAnswer': '9',
553: 1:  'history': [
553: 1:    {
553: 1:      'answer': '7',
553: 1:      'question': '456126121234546',
553: 1:      'valid': true
553: 1:    },
553: 1:    {
553: 1:      'answer': '0',
553: 1:      'question': '123456781234567',
553: 1:      'valid': true
553: 1:    },
553: 1:    {
553: 1:      'answer': '2',
553: 1:      'question': '183168009579826',
553: 1:      'valid': true
553: 1:    },
553: 1:    {
553: 1:      'answer': '7',
553: 1:      'question': '964720036906339',
553: 1:      'valid': true
553: 1:    },
553: 1:    {
553: 1:      'answer': '9',
553: 1:      'question': '613951967276640',
553: 1:      'valid': true
553: 1:    },
553: 1:    {
553: 1:      'answer': '7',
553: 1:      'question': '825813064400100',
553: 1:      'valid': true
553: 1:    }
553: 1:  ],
553: 1:  'info': [
553: 1:    '✅f(456126121234546) = 7',
553: 1:    '✅f(123456781234567) = 0',
553: 1:    '✅f(183168009579826) = 2',
553: 1:    '✅f(964720036906339) = 7',
553: 1:    '✅f(613951967276640) = 9',
553: 1:    '✅f(825813064400100) = 7',
553: 1:    '❌f(239698713103140) = ??? != 9'
553: 1:  ],
553: 1:  'level': 20,
553: 1:  'nextQuestion': '239698713103140',
553: 1:  'questions': [
553: 1:    '456126121234546',
553: 1:    '123456781234567',
553: 1:    '183168009579826',
553: 1:    '964720036906339',
553: 1:    '613951967276640',
553: 1:    '825813064400100',
553: 1:    '239698713103140'
553: 1:  ]
553: 1:}
553: 1:Scores: 38376
553: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9']')
553: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
554: 1:BoardData {
554: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
554: 1:  'expectedAnswer': '7',
554: 1:  'history': [
554: 1:    {
554: 1:      'answer': '7',
554: 1:      'question': '456126121234546',
554: 1:      'valid': true
554: 1:    },
554: 1:    {
554: 1:      'answer': '0',
554: 1:      'question': '123456781234567',
554: 1:      'valid': true
554: 1:    },
554: 1:    {
554: 1:      'answer': '2',
554: 1:      'question': '183168009579826',
554: 1:      'valid': true
554: 1:    },
554: 1:    {
554: 1:      'answer': '7',
554: 1:      'question': '964720036906339',
554: 1:      'valid': true
554: 1:    },
554: 1:    {
554: 1:      'answer': '9',
554: 1:      'question': '613951967276640',
554: 1:      'valid': true
554: 1:    },
554: 1:    {
554: 1:      'answer': '7',
554: 1:      'question': '825813064400100',
554: 1:      'valid': true
554: 1:    },
554: 1:    {
554: 1:      'answer': '9',
554: 1:      'question': '239698713103140',
554: 1:      'valid': true
554: 1:    }
554: 1:  ],
554: 1:  'info': [
554: 1:    '✅f(456126121234546) = 7',
554: 1:    '✅f(123456781234567) = 0',
554: 1:    '✅f(183168009579826) = 2',
554: 1:    '✅f(964720036906339) = 7',
554: 1:    '✅f(613951967276640) = 9',
554: 1:    '✅f(825813064400100) = 7',
554: 1:    '✅f(239698713103140) = 9',
554: 1:    '❌f(771412693933286) = ??? != 7'
554: 1:  ],
554: 1:  'level': 20,
554: 1:  'nextQuestion': '771412693933286',
554: 1:  'questions': [
554: 1:    '456126121234546',
554: 1:    '123456781234567',
554: 1:    '183168009579826',
554: 1:    '964720036906339',
554: 1:    '613951967276640',
554: 1:    '825813064400100',
554: 1:    '239698713103140',
554: 1:    '771412693933286'
554: 1:  ]
554: 1:}
554: 1:Scores: 38384
554: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7']')
554: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
555: 1:BoardData {
555: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
555: 1:  'expectedAnswer': '0',
555: 1:  'history': [
555: 1:    {
555: 1:      'answer': '7',
555: 1:      'question': '456126121234546',
555: 1:      'valid': true
555: 1:    },
555: 1:    {
555: 1:      'answer': '0',
555: 1:      'question': '123456781234567',
555: 1:      'valid': true
555: 1:    },
555: 1:    {
555: 1:      'answer': '2',
555: 1:      'question': '183168009579826',
555: 1:      'valid': true
555: 1:    },
555: 1:    {
555: 1:      'answer': '7',
555: 1:      'question': '964720036906339',
555: 1:      'valid': true
555: 1:    },
555: 1:    {
555: 1:      'answer': '9',
555: 1:      'question': '613951967276640',
555: 1:      'valid': true
555: 1:    },
555: 1:    {
555: 1:      'answer': '7',
555: 1:      'question': '825813064400100',
555: 1:      'valid': true
555: 1:    },
555: 1:    {
555: 1:      'answer': '9',
555: 1:      'question': '239698713103140',
555: 1:      'valid': true
555: 1:    },
555: 1:    {
555: 1:      'answer': '7',
555: 1:      'question': '771412693933286',
555: 1:      'valid': true
555: 1:    }
555: 1:  ],
555: 1:  'info': [
555: 1:    '✅f(456126121234546) = 7',
555: 1:    '✅f(123456781234567) = 0',
555: 1:    '✅f(183168009579826) = 2',
555: 1:    '✅f(964720036906339) = 7',
555: 1:    '✅f(613951967276640) = 9',
555: 1:    '✅f(825813064400100) = 7',
555: 1:    '✅f(239698713103140) = 9',
555: 1:    '✅f(771412693933286) = 7',
555: 1:    '❌f(254262384108564) = ??? != 0'
555: 1:  ],
555: 1:  'level': 20,
555: 1:  'nextQuestion': '254262384108564',
555: 1:  'questions': [
555: 1:    '456126121234546',
555: 1:    '123456781234567',
555: 1:    '183168009579826',
555: 1:    '964720036906339',
555: 1:    '613951967276640',
555: 1:    '825813064400100',
555: 1:    '239698713103140',
555: 1:    '771412693933286',
555: 1:    '254262384108564'
555: 1:  ]
555: 1:}
555: 1:Scores: 38392
555: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0']')
555: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
556: 1:BoardData {
556: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
556: 1:  'expectedAnswer': '7',
556: 1:  'history': [
556: 1:    {
556: 1:      'answer': '7',
556: 1:      'question': '456126121234546',
556: 1:      'valid': true
556: 1:    },
556: 1:    {
556: 1:      'answer': '0',
556: 1:      'question': '123456781234567',
556: 1:      'valid': true
556: 1:    },
556: 1:    {
556: 1:      'answer': '2',
556: 1:      'question': '183168009579826',
556: 1:      'valid': true
556: 1:    },
556: 1:    {
556: 1:      'answer': '7',
556: 1:      'question': '964720036906339',
556: 1:      'valid': true
556: 1:    },
556: 1:    {
556: 1:      'answer': '9',
556: 1:      'question': '613951967276640',
556: 1:      'valid': true
556: 1:    },
556: 1:    {
556: 1:      'answer': '7',
556: 1:      'question': '825813064400100',
556: 1:      'valid': true
556: 1:    },
556: 1:    {
556: 1:      'answer': '9',
556: 1:      'question': '239698713103140',
556: 1:      'valid': true
556: 1:    },
556: 1:    {
556: 1:      'answer': '7',
556: 1:      'question': '771412693933286',
556: 1:      'valid': true
556: 1:    },
556: 1:    {
556: 1:      'answer': '0',
556: 1:      'question': '254262384108564',
556: 1:      'valid': true
556: 1:    }
556: 1:  ],
556: 1:  'info': [
556: 1:    '✅f(456126121234546) = 7',
556: 1:    '✅f(123456781234567) = 0',
556: 1:    '✅f(183168009579826) = 2',
556: 1:    '✅f(964720036906339) = 7',
556: 1:    '✅f(613951967276640) = 9',
556: 1:    '✅f(825813064400100) = 7',
556: 1:    '✅f(239698713103140) = 9',
556: 1:    '✅f(771412693933286) = 7',
556: 1:    '✅f(254262384108564) = 0',
556: 1:    '❌f(959681833483055) = ??? != 7'
556: 1:  ],
556: 1:  'level': 20,
556: 1:  'nextQuestion': '959681833483055',
556: 1:  'questions': [
556: 1:    '456126121234546',
556: 1:    '123456781234567',
556: 1:    '183168009579826',
556: 1:    '964720036906339',
556: 1:    '613951967276640',
556: 1:    '825813064400100',
556: 1:    '239698713103140',
556: 1:    '771412693933286',
556: 1:    '254262384108564',
556: 1:    '959681833483055'
556: 1:  ]
556: 1:}
556: 1:Scores: 38400
556: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7']')
556: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
557: 1:BoardData {
557: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
557: 1:  'expectedAnswer': '4',
557: 1:  'history': [
557: 1:    {
557: 1:      'answer': '7',
557: 1:      'question': '456126121234546',
557: 1:      'valid': true
557: 1:    },
557: 1:    {
557: 1:      'answer': '0',
557: 1:      'question': '123456781234567',
557: 1:      'valid': true
557: 1:    },
557: 1:    {
557: 1:      'answer': '2',
557: 1:      'question': '183168009579826',
557: 1:      'valid': true
557: 1:    },
557: 1:    {
557: 1:      'answer': '7',
557: 1:      'question': '964720036906339',
557: 1:      'valid': true
557: 1:    },
557: 1:    {
557: 1:      'answer': '9',
557: 1:      'question': '613951967276640',
557: 1:      'valid': true
557: 1:    },
557: 1:    {
557: 1:      'answer': '7',
557: 1:      'question': '825813064400100',
557: 1:      'valid': true
557: 1:    },
557: 1:    {
557: 1:      'answer': '9',
557: 1:      'question': '239698713103140',
557: 1:      'valid': true
557: 1:    },
557: 1:    {
557: 1:      'answer': '7',
557: 1:      'question': '771412693933286',
557: 1:      'valid': true
557: 1:    },
557: 1:    {
557: 1:      'answer': '0',
557: 1:      'question': '254262384108564',
557: 1:      'valid': true
557: 1:    },
557: 1:    {
557: 1:      'answer': '7',
557: 1:      'question': '959681833483055',
557: 1:      'valid': true
557: 1:    }
557: 1:  ],
557: 1:  'info': [
557: 1:    '✅f(456126121234546) = 7',
557: 1:    '✅f(123456781234567) = 0',
557: 1:    '✅f(183168009579826) = 2',
557: 1:    '✅f(964720036906339) = 7',
557: 1:    '✅f(613951967276640) = 9',
557: 1:    '✅f(825813064400100) = 7',
557: 1:    '✅f(239698713103140) = 9',
557: 1:    '✅f(771412693933286) = 7',
557: 1:    '✅f(254262384108564) = 0',
557: 1:    '✅f(959681833483055) = 7',
557: 1:    '❌f(210087745295982) = ??? != 4'
557: 1:  ],
557: 1:  'level': 20,
557: 1:  'nextQuestion': '210087745295982',
557: 1:  'questions': [
557: 1:    '456126121234546',
557: 1:    '123456781234567',
557: 1:    '183168009579826',
557: 1:    '964720036906339',
557: 1:    '613951967276640',
557: 1:    '825813064400100',
557: 1:    '239698713103140',
557: 1:    '771412693933286',
557: 1:    '254262384108564',
557: 1:    '959681833483055',
557: 1:    '210087745295982'
557: 1:  ]
557: 1:}
557: 1:Scores: 38408
557: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4']')
557: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
558: 1:BoardData {
558: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
558: 1:  'expectedAnswer': '2',
558: 1:  'history': [
558: 1:    {
558: 1:      'answer': '7',
558: 1:      'question': '456126121234546',
558: 1:      'valid': true
558: 1:    },
558: 1:    {
558: 1:      'answer': '0',
558: 1:      'question': '123456781234567',
558: 1:      'valid': true
558: 1:    },
558: 1:    {
558: 1:      'answer': '2',
558: 1:      'question': '183168009579826',
558: 1:      'valid': true
558: 1:    },
558: 1:    {
558: 1:      'answer': '7',
558: 1:      'question': '964720036906339',
558: 1:      'valid': true
558: 1:    },
558: 1:    {
558: 1:      'answer': '9',
558: 1:      'question': '613951967276640',
558: 1:      'valid': true
558: 1:    },
558: 1:    {
558: 1:      'answer': '7',
558: 1:      'question': '825813064400100',
558: 1:      'valid': true
558: 1:    },
558: 1:    {
558: 1:      'answer': '9',
558: 1:      'question': '239698713103140',
558: 1:      'valid': true
558: 1:    },
558: 1:    {
558: 1:      'answer': '7',
558: 1:      'question': '771412693933286',
558: 1:      'valid': true
558: 1:    },
558: 1:    {
558: 1:      'answer': '0',
558: 1:      'question': '254262384108564',
558: 1:      'valid': true
558: 1:    },
558: 1:    {
558: 1:      'answer': '7',
558: 1:      'question': '959681833483055',
558: 1:      'valid': true
558: 1:    },
558: 1:    {
558: 1:      'answer': '4',
558: 1:      'question': '210087745295982',
558: 1:      'valid': true
558: 1:    }
558: 1:  ],
558: 1:  'info': [
558: 1:    '✅f(456126121234546) = 7',
558: 1:    '✅f(123456781234567) = 0',
558: 1:    '✅f(183168009579826) = 2',
558: 1:    '✅f(964720036906339) = 7',
558: 1:    '✅f(613951967276640) = 9',
558: 1:    '✅f(825813064400100) = 7',
558: 1:    '✅f(239698713103140) = 9',
558: 1:    '✅f(771412693933286) = 7',
558: 1:    '✅f(254262384108564) = 0',
558: 1:    '✅f(959681833483055) = 7',
558: 1:    '✅f(210087745295982) = 4',
558: 1:    '❌f(367683885386271) = ??? != 2'
558: 1:  ],
558: 1:  'level': 20,
558: 1:  'nextQuestion': '367683885386271',
558: 1:  'questions': [
558: 1:    '456126121234546',
558: 1:    '123456781234567',
558: 1:    '183168009579826',
558: 1:    '964720036906339',
558: 1:    '613951967276640',
558: 1:    '825813064400100',
558: 1:    '239698713103140',
558: 1:    '771412693933286',
558: 1:    '254262384108564',
558: 1:    '959681833483055',
558: 1:    '210087745295982',
558: 1:    '367683885386271'
558: 1:  ]
558: 1:}
558: 1:Scores: 38416
558: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2']')
558: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
559: 1:BoardData {
559: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
559: 1:  'expectedAnswer': '5',
559: 1:  'history': [
559: 1:    {
559: 1:      'answer': '7',
559: 1:      'question': '456126121234546',
559: 1:      'valid': true
559: 1:    },
559: 1:    {
559: 1:      'answer': '0',
559: 1:      'question': '123456781234567',
559: 1:      'valid': true
559: 1:    },
559: 1:    {
559: 1:      'answer': '2',
559: 1:      'question': '183168009579826',
559: 1:      'valid': true
559: 1:    },
559: 1:    {
559: 1:      'answer': '7',
559: 1:      'question': '964720036906339',
559: 1:      'valid': true
559: 1:    },
559: 1:    {
559: 1:      'answer': '9',
559: 1:      'question': '613951967276640',
559: 1:      'valid': true
559: 1:    },
559: 1:    {
559: 1:      'answer': '7',
559: 1:      'question': '825813064400100',
559: 1:      'valid': true
559: 1:    },
559: 1:    {
559: 1:      'answer': '9',
559: 1:      'question': '239698713103140',
559: 1:      'valid': true
559: 1:    },
559: 1:    {
559: 1:      'answer': '7',
559: 1:      'question': '771412693933286',
559: 1:      'valid': true
559: 1:    },
559: 1:    {
559: 1:      'answer': '0',
559: 1:      'question': '254262384108564',
559: 1:      'valid': true
559: 1:    },
559: 1:    {
559: 1:      'answer': '7',
559: 1:      'question': '959681833483055',
559: 1:      'valid': true
559: 1:    },
559: 1:    {
559: 1:      'answer': '4',
559: 1:      'question': '210087745295982',
559: 1:      'valid': true
559: 1:    },
559: 1:    {
559: 1:      'answer': '2',
559: 1:      'question': '367683885386271',
559: 1:      'valid': true
559: 1:    }
559: 1:  ],
559: 1:  'info': [
559: 1:    '✅f(456126121234546) = 7',
559: 1:    '✅f(123456781234567) = 0',
559: 1:    '✅f(183168009579826) = 2',
559: 1:    '✅f(964720036906339) = 7',
559: 1:    '✅f(613951967276640) = 9',
559: 1:    '✅f(825813064400100) = 7',
559: 1:    '✅f(239698713103140) = 9',
559: 1:    '✅f(771412693933286) = 7',
559: 1:    '✅f(254262384108564) = 0',
559: 1:    '✅f(959681833483055) = 7',
559: 1:    '✅f(210087745295982) = 4',
559: 1:    '✅f(367683885386271) = 2',
559: 1:    '❌f(894632429803471) = ??? != 5'
559: 1:  ],
559: 1:  'level': 20,
559: 1:  'nextQuestion': '894632429803471',
559: 1:  'questions': [
559: 1:    '456126121234546',
559: 1:    '123456781234567',
559: 1:    '183168009579826',
559: 1:    '964720036906339',
559: 1:    '613951967276640',
559: 1:    '825813064400100',
559: 1:    '239698713103140',
559: 1:    '771412693933286',
559: 1:    '254262384108564',
559: 1:    '959681833483055',
559: 1:    '210087745295982',
559: 1:    '367683885386271',
559: 1:    '894632429803471'
559: 1:  ]
559: 1:}
559: 1:Scores: 38424
559: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5']')
559: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
560: 1:BoardData {
560: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
560: 1:  'expectedAnswer': '5',
560: 1:  'history': [
560: 1:    {
560: 1:      'answer': '7',
560: 1:      'question': '456126121234546',
560: 1:      'valid': true
560: 1:    },
560: 1:    {
560: 1:      'answer': '0',
560: 1:      'question': '123456781234567',
560: 1:      'valid': true
560: 1:    },
560: 1:    {
560: 1:      'answer': '2',
560: 1:      'question': '183168009579826',
560: 1:      'valid': true
560: 1:    },
560: 1:    {
560: 1:      'answer': '7',
560: 1:      'question': '964720036906339',
560: 1:      'valid': true
560: 1:    },
560: 1:    {
560: 1:      'answer': '9',
560: 1:      'question': '613951967276640',
560: 1:      'valid': true
560: 1:    },
560: 1:    {
560: 1:      'answer': '7',
560: 1:      'question': '825813064400100',
560: 1:      'valid': true
560: 1:    },
560: 1:    {
560: 1:      'answer': '9',
560: 1:      'question': '239698713103140',
560: 1:      'valid': true
560: 1:    },
560: 1:    {
560: 1:      'answer': '7',
560: 1:      'question': '771412693933286',
560: 1:      'valid': true
560: 1:    },
560: 1:    {
560: 1:      'answer': '0',
560: 1:      'question': '254262384108564',
560: 1:      'valid': true
560: 1:    },
560: 1:    {
560: 1:      'answer': '7',
560: 1:      'question': '959681833483055',
560: 1:      'valid': true
560: 1:    },
560: 1:    {
560: 1:      'answer': '4',
560: 1:      'question': '210087745295982',
560: 1:      'valid': true
560: 1:    },
560: 1:    {
560: 1:      'answer': '2',
560: 1:      'question': '367683885386271',
560: 1:      'valid': true
560: 1:    },
560: 1:    {
560: 1:      'answer': '5',
560: 1:      'question': '894632429803471',
560: 1:      'valid': true
560: 1:    }
560: 1:  ],
560: 1:  'info': [
560: 1:    '✅f(456126121234546) = 7',
560: 1:    '✅f(123456781234567) = 0',
560: 1:    '✅f(183168009579826) = 2',
560: 1:    '✅f(964720036906339) = 7',
560: 1:    '✅f(613951967276640) = 9',
560: 1:    '✅f(825813064400100) = 7',
560: 1:    '✅f(239698713103140) = 9',
560: 1:    '✅f(771412693933286) = 7',
560: 1:    '✅f(254262384108564) = 0',
560: 1:    '✅f(959681833483055) = 7',
560: 1:    '✅f(210087745295982) = 4',
560: 1:    '✅f(367683885386271) = 2',
560: 1:    '✅f(894632429803471) = 5',
560: 1:    '❌f(471260044736237) = ??? != 5'
560: 1:  ],
560: 1:  'level': 20,
560: 1:  'nextQuestion': '471260044736237',
560: 1:  'questions': [
560: 1:    '456126121234546',
560: 1:    '123456781234567',
560: 1:    '183168009579826',
560: 1:    '964720036906339',
560: 1:    '613951967276640',
560: 1:    '825813064400100',
560: 1:    '239698713103140',
560: 1:    '771412693933286',
560: 1:    '254262384108564',
560: 1:    '959681833483055',
560: 1:    '210087745295982',
560: 1:    '367683885386271',
560: 1:    '894632429803471',
560: 1:    '471260044736237'
560: 1:  ]
560: 1:}
560: 1:Scores: 38432
560: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5', '5']')
560: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
561: 1:BoardData {
561: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
561: 1:  'expectedAnswer': '1',
561: 1:  'history': [
561: 1:    {
561: 1:      'answer': '7',
561: 1:      'question': '456126121234546',
561: 1:      'valid': true
561: 1:    },
561: 1:    {
561: 1:      'answer': '0',
561: 1:      'question': '123456781234567',
561: 1:      'valid': true
561: 1:    },
561: 1:    {
561: 1:      'answer': '2',
561: 1:      'question': '183168009579826',
561: 1:      'valid': true
561: 1:    },
561: 1:    {
561: 1:      'answer': '7',
561: 1:      'question': '964720036906339',
561: 1:      'valid': true
561: 1:    },
561: 1:    {
561: 1:      'answer': '9',
561: 1:      'question': '613951967276640',
561: 1:      'valid': true
561: 1:    },
561: 1:    {
561: 1:      'answer': '7',
561: 1:      'question': '825813064400100',
561: 1:      'valid': true
561: 1:    },
561: 1:    {
561: 1:      'answer': '9',
561: 1:      'question': '239698713103140',
561: 1:      'valid': true
561: 1:    },
561: 1:    {
561: 1:      'answer': '7',
561: 1:      'question': '771412693933286',
561: 1:      'valid': true
561: 1:    },
561: 1:    {
561: 1:      'answer': '0',
561: 1:      'question': '254262384108564',
561: 1:      'valid': true
561: 1:    },
561: 1:    {
561: 1:      'answer': '7',
561: 1:      'question': '959681833483055',
561: 1:      'valid': true
561: 1:    },
561: 1:    {
561: 1:      'answer': '4',
561: 1:      'question': '210087745295982',
561: 1:      'valid': true
561: 1:    },
561: 1:    {
561: 1:      'answer': '2',
561: 1:      'question': '367683885386271',
561: 1:      'valid': true
561: 1:    },
561: 1:    {
561: 1:      'answer': '5',
561: 1:      'question': '894632429803471',
561: 1:      'valid': true
561: 1:    },
561: 1:    {
561: 1:      'answer': '5',
561: 1:      'question': '471260044736237',
561: 1:      'valid': true
561: 1:    }
561: 1:  ],
561: 1:  'info': [
561: 1:    '✅f(456126121234546) = 7',
561: 1:    '✅f(123456781234567) = 0',
561: 1:    '✅f(183168009579826) = 2',
561: 1:    '✅f(964720036906339) = 7',
561: 1:    '✅f(613951967276640) = 9',
561: 1:    '✅f(825813064400100) = 7',
561: 1:    '✅f(239698713103140) = 9',
561: 1:    '✅f(771412693933286) = 7',
561: 1:    '✅f(254262384108564) = 0',
561: 1:    '✅f(959681833483055) = 7',
561: 1:    '✅f(210087745295982) = 4',
561: 1:    '✅f(367683885386271) = 2',
561: 1:    '✅f(894632429803471) = 5',
561: 1:    '✅f(471260044736237) = 5',
561: 1:    '❌f(916471602234329) = ??? != 1'
561: 1:  ],
561: 1:  'level': 20,
561: 1:  'nextQuestion': '916471602234329',
561: 1:  'questions': [
561: 1:    '456126121234546',
561: 1:    '123456781234567',
561: 1:    '183168009579826',
561: 1:    '964720036906339',
561: 1:    '613951967276640',
561: 1:    '825813064400100',
561: 1:    '239698713103140',
561: 1:    '771412693933286',
561: 1:    '254262384108564',
561: 1:    '959681833483055',
561: 1:    '210087745295982',
561: 1:    '367683885386271',
561: 1:    '894632429803471',
561: 1:    '471260044736237',
561: 1:    '916471602234329'
561: 1:  ]
561: 1:}
561: 1:Scores: 38440
561: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5', '5', '1']')
561: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
562: 1:BoardData {
562: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
562: 1:  'expectedAnswer': '4',
562: 1:  'history': [
562: 1:    {
562: 1:      'answer': '7',
562: 1:      'question': '456126121234546',
562: 1:      'valid': true
562: 1:    },
562: 1:    {
562: 1:      'answer': '0',
562: 1:      'question': '123456781234567',
562: 1:      'valid': true
562: 1:    },
562: 1:    {
562: 1:      'answer': '2',
562: 1:      'question': '183168009579826',
562: 1:      'valid': true
562: 1:    },
562: 1:    {
562: 1:      'answer': '7',
562: 1:      'question': '964720036906339',
562: 1:      'valid': true
562: 1:    },
562: 1:    {
562: 1:      'answer': '9',
562: 1:      'question': '613951967276640',
562: 1:      'valid': true
562: 1:    },
562: 1:    {
562: 1:      'answer': '7',
562: 1:      'question': '825813064400100',
562: 1:      'valid': true
562: 1:    },
562: 1:    {
562: 1:      'answer': '9',
562: 1:      'question': '239698713103140',
562: 1:      'valid': true
562: 1:    },
562: 1:    {
562: 1:      'answer': '7',
562: 1:      'question': '771412693933286',
562: 1:      'valid': true
562: 1:    },
562: 1:    {
562: 1:      'answer': '0',
562: 1:      'question': '254262384108564',
562: 1:      'valid': true
562: 1:    },
562: 1:    {
562: 1:      'answer': '7',
562: 1:      'question': '959681833483055',
562: 1:      'valid': true
562: 1:    },
562: 1:    {
562: 1:      'answer': '4',
562: 1:      'question': '210087745295982',
562: 1:      'valid': true
562: 1:    },
562: 1:    {
562: 1:      'answer': '2',
562: 1:      'question': '367683885386271',
562: 1:      'valid': true
562: 1:    },
562: 1:    {
562: 1:      'answer': '5',
562: 1:      'question': '894632429803471',
562: 1:      'valid': true
562: 1:    },
562: 1:    {
562: 1:      'answer': '5',
562: 1:      'question': '471260044736237',
562: 1:      'valid': true
562: 1:    },
562: 1:    {
562: 1:      'answer': '1',
562: 1:      'question': '916471602234329',
562: 1:      'valid': true
562: 1:    }
562: 1:  ],
562: 1:  'info': [
562: 1:    '✅f(456126121234546) = 7',
562: 1:    '✅f(123456781234567) = 0',
562: 1:    '✅f(183168009579826) = 2',
562: 1:    '✅f(964720036906339) = 7',
562: 1:    '✅f(613951967276640) = 9',
562: 1:    '✅f(825813064400100) = 7',
562: 1:    '✅f(239698713103140) = 9',
562: 1:    '✅f(771412693933286) = 7',
562: 1:    '✅f(254262384108564) = 0',
562: 1:    '✅f(959681833483055) = 7',
562: 1:    '✅f(210087745295982) = 4',
562: 1:    '✅f(367683885386271) = 2',
562: 1:    '✅f(894632429803471) = 5',
562: 1:    '✅f(471260044736237) = 5',
562: 1:    '✅f(916471602234329) = 1',
562: 1:    '❌f(961073953339054) = ??? != 4'
562: 1:  ],
562: 1:  'level': 20,
562: 1:  'nextQuestion': '961073953339054',
562: 1:  'questions': [
562: 1:    '456126121234546',
562: 1:    '123456781234567',
562: 1:    '183168009579826',
562: 1:    '964720036906339',
562: 1:    '613951967276640',
562: 1:    '825813064400100',
562: 1:    '239698713103140',
562: 1:    '771412693933286',
562: 1:    '254262384108564',
562: 1:    '959681833483055',
562: 1:    '210087745295982',
562: 1:    '367683885386271',
562: 1:    '894632429803471',
562: 1:    '471260044736237',
562: 1:    '916471602234329',
562: 1:    '961073953339054'
562: 1:  ]
562: 1:}
562: 1:Scores: 38448
562: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5', '5', '1', '4']')
562: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
563: 1:BoardData {
563: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
563: 1:  'expectedAnswer': '5',
563: 1:  'history': [
563: 1:    {
563: 1:      'answer': '7',
563: 1:      'question': '456126121234546',
563: 1:      'valid': true
563: 1:    },
563: 1:    {
563: 1:      'answer': '0',
563: 1:      'question': '123456781234567',
563: 1:      'valid': true
563: 1:    },
563: 1:    {
563: 1:      'answer': '2',
563: 1:      'question': '183168009579826',
563: 1:      'valid': true
563: 1:    },
563: 1:    {
563: 1:      'answer': '7',
563: 1:      'question': '964720036906339',
563: 1:      'valid': true
563: 1:    },
563: 1:    {
563: 1:      'answer': '9',
563: 1:      'question': '613951967276640',
563: 1:      'valid': true
563: 1:    },
563: 1:    {
563: 1:      'answer': '7',
563: 1:      'question': '825813064400100',
563: 1:      'valid': true
563: 1:    },
563: 1:    {
563: 1:      'answer': '9',
563: 1:      'question': '239698713103140',
563: 1:      'valid': true
563: 1:    },
563: 1:    {
563: 1:      'answer': '7',
563: 1:      'question': '771412693933286',
563: 1:      'valid': true
563: 1:    },
563: 1:    {
563: 1:      'answer': '0',
563: 1:      'question': '254262384108564',
563: 1:      'valid': true
563: 1:    },
563: 1:    {
563: 1:      'answer': '7',
563: 1:      'question': '959681833483055',
563: 1:      'valid': true
563: 1:    },
563: 1:    {
563: 1:      'answer': '4',
563: 1:      'question': '210087745295982',
563: 1:      'valid': true
563: 1:    },
563: 1:    {
563: 1:      'answer': '2',
563: 1:      'question': '367683885386271',
563: 1:      'valid': true
563: 1:    },
563: 1:    {
563: 1:      'answer': '5',
563: 1:      'question': '894632429803471',
563: 1:      'valid': true
563: 1:    },
563: 1:    {
563: 1:      'answer': '5',
563: 1:      'question': '471260044736237',
563: 1:      'valid': true
563: 1:    },
563: 1:    {
563: 1:      'answer': '1',
563: 1:      'question': '916471602234329',
563: 1:      'valid': true
563: 1:    },
563: 1:    {
563: 1:      'answer': '4',
563: 1:      'question': '961073953339054',
563: 1:      'valid': true
563: 1:    }
563: 1:  ],
563: 1:  'info': [
563: 1:    '✅f(456126121234546) = 7',
563: 1:    '✅f(123456781234567) = 0',
563: 1:    '✅f(183168009579826) = 2',
563: 1:    '✅f(964720036906339) = 7',
563: 1:    '✅f(613951967276640) = 9',
563: 1:    '✅f(825813064400100) = 7',
563: 1:    '✅f(239698713103140) = 9',
563: 1:    '✅f(771412693933286) = 7',
563: 1:    '✅f(254262384108564) = 0',
563: 1:    '✅f(959681833483055) = 7',
563: 1:    '✅f(210087745295982) = 4',
563: 1:    '✅f(367683885386271) = 2',
563: 1:    '✅f(894632429803471) = 5',
563: 1:    '✅f(471260044736237) = 5',
563: 1:    '✅f(916471602234329) = 1',
563: 1:    '✅f(961073953339054) = 4',
563: 1:    '❌f(917408439816341) = ??? != 5'
563: 1:  ],
563: 1:  'level': 20,
563: 1:  'nextQuestion': '917408439816341',
563: 1:  'questions': [
563: 1:    '456126121234546',
563: 1:    '123456781234567',
563: 1:    '183168009579826',
563: 1:    '964720036906339',
563: 1:    '613951967276640',
563: 1:    '825813064400100',
563: 1:    '239698713103140',
563: 1:    '771412693933286',
563: 1:    '254262384108564',
563: 1:    '959681833483055',
563: 1:    '210087745295982',
563: 1:    '367683885386271',
563: 1:    '894632429803471',
563: 1:    '471260044736237',
563: 1:    '916471602234329',
563: 1:    '961073953339054',
563: 1:    '917408439816341'
563: 1:  ]
563: 1:}
563: 1:Scores: 38456
563: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5', '5', '1', '4', '5']')
563: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
564: 1:BoardData {
564: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
564: 1:  'expectedAnswer': '4',
564: 1:  'history': [
564: 1:    {
564: 1:      'answer': '7',
564: 1:      'question': '456126121234546',
564: 1:      'valid': true
564: 1:    },
564: 1:    {
564: 1:      'answer': '0',
564: 1:      'question': '123456781234567',
564: 1:      'valid': true
564: 1:    },
564: 1:    {
564: 1:      'answer': '2',
564: 1:      'question': '183168009579826',
564: 1:      'valid': true
564: 1:    },
564: 1:    {
564: 1:      'answer': '7',
564: 1:      'question': '964720036906339',
564: 1:      'valid': true
564: 1:    },
564: 1:    {
564: 1:      'answer': '9',
564: 1:      'question': '613951967276640',
564: 1:      'valid': true
564: 1:    },
564: 1:    {
564: 1:      'answer': '7',
564: 1:      'question': '825813064400100',
564: 1:      'valid': true
564: 1:    },
564: 1:    {
564: 1:      'answer': '9',
564: 1:      'question': '239698713103140',
564: 1:      'valid': true
564: 1:    },
564: 1:    {
564: 1:      'answer': '7',
564: 1:      'question': '771412693933286',
564: 1:      'valid': true
564: 1:    },
564: 1:    {
564: 1:      'answer': '0',
564: 1:      'question': '254262384108564',
564: 1:      'valid': true
564: 1:    },
564: 1:    {
564: 1:      'answer': '7',
564: 1:      'question': '959681833483055',
564: 1:      'valid': true
564: 1:    },
564: 1:    {
564: 1:      'answer': '4',
564: 1:      'question': '210087745295982',
564: 1:      'valid': true
564: 1:    },
564: 1:    {
564: 1:      'answer': '2',
564: 1:      'question': '367683885386271',
564: 1:      'valid': true
564: 1:    },
564: 1:    {
564: 1:      'answer': '5',
564: 1:      'question': '894632429803471',
564: 1:      'valid': true
564: 1:    },
564: 1:    {
564: 1:      'answer': '5',
564: 1:      'question': '471260044736237',
564: 1:      'valid': true
564: 1:    },
564: 1:    {
564: 1:      'answer': '1',
564: 1:      'question': '916471602234329',
564: 1:      'valid': true
564: 1:    },
564: 1:    {
564: 1:      'answer': '4',
564: 1:      'question': '961073953339054',
564: 1:      'valid': true
564: 1:    },
564: 1:    {
564: 1:      'answer': '5',
564: 1:      'question': '917408439816341',
564: 1:      'valid': true
564: 1:    }
564: 1:  ],
564: 1:  'info': [
564: 1:    '✅f(456126121234546) = 7',
564: 1:    '✅f(123456781234567) = 0',
564: 1:    '✅f(183168009579826) = 2',
564: 1:    '✅f(964720036906339) = 7',
564: 1:    '✅f(613951967276640) = 9',
564: 1:    '✅f(825813064400100) = 7',
564: 1:    '✅f(239698713103140) = 9',
564: 1:    '✅f(771412693933286) = 7',
564: 1:    '✅f(254262384108564) = 0',
564: 1:    '✅f(959681833483055) = 7',
564: 1:    '✅f(210087745295982) = 4',
564: 1:    '✅f(367683885386271) = 2',
564: 1:    '✅f(894632429803471) = 5',
564: 1:    '✅f(471260044736237) = 5',
564: 1:    '✅f(916471602234329) = 1',
564: 1:    '✅f(961073953339054) = 4',
564: 1:    '✅f(917408439816341) = 5',
564: 1:    '❌f(498078140932499) = ??? != 4'
564: 1:  ],
564: 1:  'level': 20,
564: 1:  'nextQuestion': '498078140932499',
564: 1:  'questions': [
564: 1:    '456126121234546',
564: 1:    '123456781234567',
564: 1:    '183168009579826',
564: 1:    '964720036906339',
564: 1:    '613951967276640',
564: 1:    '825813064400100',
564: 1:    '239698713103140',
564: 1:    '771412693933286',
564: 1:    '254262384108564',
564: 1:    '959681833483055',
564: 1:    '210087745295982',
564: 1:    '367683885386271',
564: 1:    '894632429803471',
564: 1:    '471260044736237',
564: 1:    '916471602234329',
564: 1:    '961073953339054',
564: 1:    '917408439816341',
564: 1:    '498078140932499'
564: 1:  ]
564: 1:}
564: 1:Scores: 38464
564: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5', '5', '1', '4', '5', '4']')
564: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
565: 1:BoardData {
565: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
565: 1:  'expectedAnswer': '2',
565: 1:  'history': [
565: 1:    {
565: 1:      'answer': '7',
565: 1:      'question': '456126121234546',
565: 1:      'valid': true
565: 1:    },
565: 1:    {
565: 1:      'answer': '0',
565: 1:      'question': '123456781234567',
565: 1:      'valid': true
565: 1:    },
565: 1:    {
565: 1:      'answer': '2',
565: 1:      'question': '183168009579826',
565: 1:      'valid': true
565: 1:    },
565: 1:    {
565: 1:      'answer': '7',
565: 1:      'question': '964720036906339',
565: 1:      'valid': true
565: 1:    },
565: 1:    {
565: 1:      'answer': '9',
565: 1:      'question': '613951967276640',
565: 1:      'valid': true
565: 1:    },
565: 1:    {
565: 1:      'answer': '7',
565: 1:      'question': '825813064400100',
565: 1:      'valid': true
565: 1:    },
565: 1:    {
565: 1:      'answer': '9',
565: 1:      'question': '239698713103140',
565: 1:      'valid': true
565: 1:    },
565: 1:    {
565: 1:      'answer': '7',
565: 1:      'question': '771412693933286',
565: 1:      'valid': true
565: 1:    },
565: 1:    {
565: 1:      'answer': '0',
565: 1:      'question': '254262384108564',
565: 1:      'valid': true
565: 1:    },
565: 1:    {
565: 1:      'answer': '7',
565: 1:      'question': '959681833483055',
565: 1:      'valid': true
565: 1:    },
565: 1:    {
565: 1:      'answer': '4',
565: 1:      'question': '210087745295982',
565: 1:      'valid': true
565: 1:    },
565: 1:    {
565: 1:      'answer': '2',
565: 1:      'question': '367683885386271',
565: 1:      'valid': true
565: 1:    },
565: 1:    {
565: 1:      'answer': '5',
565: 1:      'question': '894632429803471',
565: 1:      'valid': true
565: 1:    },
565: 1:    {
565: 1:      'answer': '5',
565: 1:      'question': '471260044736237',
565: 1:      'valid': true
565: 1:    },
565: 1:    {
565: 1:      'answer': '1',
565: 1:      'question': '916471602234329',
565: 1:      'valid': true
565: 1:    },
565: 1:    {
565: 1:      'answer': '4',
565: 1:      'question': '961073953339054',
565: 1:      'valid': true
565: 1:    },
565: 1:    {
565: 1:      'answer': '5',
565: 1:      'question': '917408439816341',
565: 1:      'valid': true
565: 1:    },
565: 1:    {
565: 1:      'answer': '4',
565: 1:      'question': '498078140932499',
565: 1:      'valid': true
565: 1:    }
565: 1:  ],
565: 1:  'info': [
565: 1:    '✅f(456126121234546) = 7',
565: 1:    '✅f(123456781234567) = 0',
565: 1:    '✅f(183168009579826) = 2',
565: 1:    '✅f(964720036906339) = 7',
565: 1:    '✅f(613951967276640) = 9',
565: 1:    '✅f(825813064400100) = 7',
565: 1:    '✅f(239698713103140) = 9',
565: 1:    '✅f(771412693933286) = 7',
565: 1:    '✅f(254262384108564) = 0',
565: 1:    '✅f(959681833483055) = 7',
565: 1:    '✅f(210087745295982) = 4',
565: 1:    '✅f(367683885386271) = 2',
565: 1:    '✅f(894632429803471) = 5',
565: 1:    '✅f(471260044736237) = 5',
565: 1:    '✅f(916471602234329) = 1',
565: 1:    '✅f(961073953339054) = 4',
565: 1:    '✅f(917408439816341) = 5',
565: 1:    '✅f(498078140932499) = 4',
565: 1:    '❌f(686244896142849) = ??? != 2'
565: 1:  ],
565: 1:  'level': 20,
565: 1:  'nextQuestion': '686244896142849',
565: 1:  'questions': [
565: 1:    '456126121234546',
565: 1:    '123456781234567',
565: 1:    '183168009579826',
565: 1:    '964720036906339',
565: 1:    '613951967276640',
565: 1:    '825813064400100',
565: 1:    '239698713103140',
565: 1:    '771412693933286',
565: 1:    '254262384108564',
565: 1:    '959681833483055',
565: 1:    '210087745295982',
565: 1:    '367683885386271',
565: 1:    '894632429803471',
565: 1:    '471260044736237',
565: 1:    '916471602234329',
565: 1:    '961073953339054',
565: 1:    '917408439816341',
565: 1:    '498078140932499',
565: 1:    '686244896142849'
565: 1:  ]
565: 1:}
565: 1:Scores: 38472
565: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5', '5', '1', '4', '5', '4', '2']')
565: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
566: 1:BoardData {
566: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
566: 1:  'expectedAnswer': '2',
566: 1:  'history': [
566: 1:    {
566: 1:      'answer': '7',
566: 1:      'question': '456126121234546',
566: 1:      'valid': true
566: 1:    },
566: 1:    {
566: 1:      'answer': '0',
566: 1:      'question': '123456781234567',
566: 1:      'valid': true
566: 1:    },
566: 1:    {
566: 1:      'answer': '2',
566: 1:      'question': '183168009579826',
566: 1:      'valid': true
566: 1:    },
566: 1:    {
566: 1:      'answer': '7',
566: 1:      'question': '964720036906339',
566: 1:      'valid': true
566: 1:    },
566: 1:    {
566: 1:      'answer': '9',
566: 1:      'question': '613951967276640',
566: 1:      'valid': true
566: 1:    },
566: 1:    {
566: 1:      'answer': '7',
566: 1:      'question': '825813064400100',
566: 1:      'valid': true
566: 1:    },
566: 1:    {
566: 1:      'answer': '9',
566: 1:      'question': '239698713103140',
566: 1:      'valid': true
566: 1:    },
566: 1:    {
566: 1:      'answer': '7',
566: 1:      'question': '771412693933286',
566: 1:      'valid': true
566: 1:    },
566: 1:    {
566: 1:      'answer': '0',
566: 1:      'question': '254262384108564',
566: 1:      'valid': true
566: 1:    },
566: 1:    {
566: 1:      'answer': '7',
566: 1:      'question': '959681833483055',
566: 1:      'valid': true
566: 1:    },
566: 1:    {
566: 1:      'answer': '4',
566: 1:      'question': '210087745295982',
566: 1:      'valid': true
566: 1:    },
566: 1:    {
566: 1:      'answer': '2',
566: 1:      'question': '367683885386271',
566: 1:      'valid': true
566: 1:    },
566: 1:    {
566: 1:      'answer': '5',
566: 1:      'question': '894632429803471',
566: 1:      'valid': true
566: 1:    },
566: 1:    {
566: 1:      'answer': '5',
566: 1:      'question': '471260044736237',
566: 1:      'valid': true
566: 1:    },
566: 1:    {
566: 1:      'answer': '1',
566: 1:      'question': '916471602234329',
566: 1:      'valid': true
566: 1:    },
566: 1:    {
566: 1:      'answer': '4',
566: 1:      'question': '961073953339054',
566: 1:      'valid': true
566: 1:    },
566: 1:    {
566: 1:      'answer': '5',
566: 1:      'question': '917408439816341',
566: 1:      'valid': true
566: 1:    },
566: 1:    {
566: 1:      'answer': '4',
566: 1:      'question': '498078140932499',
566: 1:      'valid': true
566: 1:    },
566: 1:    {
566: 1:      'answer': '2',
566: 1:      'question': '686244896142849',
566: 1:      'valid': true
566: 1:    }
566: 1:  ],
566: 1:  'info': [
566: 1:    '✅f(456126121234546) = 7',
566: 1:    '✅f(123456781234567) = 0',
566: 1:    '✅f(183168009579826) = 2',
566: 1:    '✅f(964720036906339) = 7',
566: 1:    '✅f(613951967276640) = 9',
566: 1:    '✅f(825813064400100) = 7',
566: 1:    '✅f(239698713103140) = 9',
566: 1:    '✅f(771412693933286) = 7',
566: 1:    '✅f(254262384108564) = 0',
566: 1:    '✅f(959681833483055) = 7',
566: 1:    '✅f(210087745295982) = 4',
566: 1:    '✅f(367683885386271) = 2',
566: 1:    '✅f(894632429803471) = 5',
566: 1:    '✅f(471260044736237) = 5',
566: 1:    '✅f(916471602234329) = 1',
566: 1:    '✅f(961073953339054) = 4',
566: 1:    '✅f(917408439816341) = 5',
566: 1:    '✅f(498078140932499) = 4',
566: 1:    '✅f(686244896142849) = 2',
566: 1:    '❌f(772287416460433) = ??? != 2'
566: 1:  ],
566: 1:  'level': 20,
566: 1:  'nextQuestion': '772287416460433',
566: 1:  'questions': [
566: 1:    '456126121234546',
566: 1:    '123456781234567',
566: 1:    '183168009579826',
566: 1:    '964720036906339',
566: 1:    '613951967276640',
566: 1:    '825813064400100',
566: 1:    '239698713103140',
566: 1:    '771412693933286',
566: 1:    '254262384108564',
566: 1:    '959681833483055',
566: 1:    '210087745295982',
566: 1:    '367683885386271',
566: 1:    '894632429803471',
566: 1:    '471260044736237',
566: 1:    '916471602234329',
566: 1:    '961073953339054',
566: 1:    '917408439816341',
566: 1:    '498078140932499',
566: 1:    '686244896142849',
566: 1:    '772287416460433'
566: 1:  ]
566: 1:}
566: 1:Scores: 38480
566: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5', '5', '1', '4', '5', '4', '2', '2']')
566: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
567: 1:BoardData {
567: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
567: 1:  'expectedAnswer': '1',
567: 1:  'history': [
567: 1:    {
567: 1:      'answer': '7',
567: 1:      'question': '456126121234546',
567: 1:      'valid': true
567: 1:    },
567: 1:    {
567: 1:      'answer': '0',
567: 1:      'question': '123456781234567',
567: 1:      'valid': true
567: 1:    },
567: 1:    {
567: 1:      'answer': '2',
567: 1:      'question': '183168009579826',
567: 1:      'valid': true
567: 1:    },
567: 1:    {
567: 1:      'answer': '7',
567: 1:      'question': '964720036906339',
567: 1:      'valid': true
567: 1:    },
567: 1:    {
567: 1:      'answer': '9',
567: 1:      'question': '613951967276640',
567: 1:      'valid': true
567: 1:    },
567: 1:    {
567: 1:      'answer': '7',
567: 1:      'question': '825813064400100',
567: 1:      'valid': true
567: 1:    },
567: 1:    {
567: 1:      'answer': '9',
567: 1:      'question': '239698713103140',
567: 1:      'valid': true
567: 1:    },
567: 1:    {
567: 1:      'answer': '7',
567: 1:      'question': '771412693933286',
567: 1:      'valid': true
567: 1:    },
567: 1:    {
567: 1:      'answer': '0',
567: 1:      'question': '254262384108564',
567: 1:      'valid': true
567: 1:    },
567: 1:    {
567: 1:      'answer': '7',
567: 1:      'question': '959681833483055',
567: 1:      'valid': true
567: 1:    },
567: 1:    {
567: 1:      'answer': '4',
567: 1:      'question': '210087745295982',
567: 1:      'valid': true
567: 1:    },
567: 1:    {
567: 1:      'answer': '2',
567: 1:      'question': '367683885386271',
567: 1:      'valid': true
567: 1:    },
567: 1:    {
567: 1:      'answer': '5',
567: 1:      'question': '894632429803471',
567: 1:      'valid': true
567: 1:    },
567: 1:    {
567: 1:      'answer': '5',
567: 1:      'question': '471260044736237',
567: 1:      'valid': true
567: 1:    },
567: 1:    {
567: 1:      'answer': '1',
567: 1:      'question': '916471602234329',
567: 1:      'valid': true
567: 1:    },
567: 1:    {
567: 1:      'answer': '4',
567: 1:      'question': '961073953339054',
567: 1:      'valid': true
567: 1:    },
567: 1:    {
567: 1:      'answer': '5',
567: 1:      'question': '917408439816341',
567: 1:      'valid': true
567: 1:    },
567: 1:    {
567: 1:      'answer': '4',
567: 1:      'question': '498078140932499',
567: 1:      'valid': true
567: 1:    },
567: 1:    {
567: 1:      'answer': '2',
567: 1:      'question': '686244896142849',
567: 1:      'valid': true
567: 1:    },
567: 1:    {
567: 1:      'answer': '2',
567: 1:      'question': '772287416460433',
567: 1:      'valid': true
567: 1:    }
567: 1:  ],
567: 1:  'info': [
567: 1:    '✅f(456126121234546) = 7',
567: 1:    '✅f(123456781234567) = 0',
567: 1:    '✅f(183168009579826) = 2',
567: 1:    '✅f(964720036906339) = 7',
567: 1:    '✅f(613951967276640) = 9',
567: 1:    '✅f(825813064400100) = 7',
567: 1:    '✅f(239698713103140) = 9',
567: 1:    '✅f(771412693933286) = 7',
567: 1:    '✅f(254262384108564) = 0',
567: 1:    '✅f(959681833483055) = 7',
567: 1:    '✅f(210087745295982) = 4',
567: 1:    '✅f(367683885386271) = 2',
567: 1:    '✅f(894632429803471) = 5',
567: 1:    '✅f(471260044736237) = 5',
567: 1:    '✅f(916471602234329) = 1',
567: 1:    '✅f(961073953339054) = 4',
567: 1:    '✅f(917408439816341) = 5',
567: 1:    '✅f(498078140932499) = 4',
567: 1:    '✅f(686244896142849) = 2',
567: 1:    '✅f(772287416460433) = 2',
567: 1:    '❌f(207725984977363) = ??? != 1'
567: 1:  ],
567: 1:  'level': 20,
567: 1:  'nextQuestion': '207725984977363',
567: 1:  'questions': [
567: 1:    '456126121234546',
567: 1:    '123456781234567',
567: 1:    '183168009579826',
567: 1:    '964720036906339',
567: 1:    '613951967276640',
567: 1:    '825813064400100',
567: 1:    '239698713103140',
567: 1:    '771412693933286',
567: 1:    '254262384108564',
567: 1:    '959681833483055',
567: 1:    '210087745295982',
567: 1:    '367683885386271',
567: 1:    '894632429803471',
567: 1:    '471260044736237',
567: 1:    '916471602234329',
567: 1:    '961073953339054',
567: 1:    '917408439816341',
567: 1:    '498078140932499',
567: 1:    '686244896142849',
567: 1:    '772287416460433',
567: 1:    '207725984977363'
567: 1:  ]
567: 1:}
567: 1:Scores: 38488
567: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5', '5', '1', '4', '5', '4', '2', '2', '1']')
567: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
568: 1:BoardData {
568: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
568: 1:  'expectedAnswer': '2',
568: 1:  'history': [
568: 1:    {
568: 1:      'answer': '7',
568: 1:      'question': '456126121234546',
568: 1:      'valid': true
568: 1:    },
568: 1:    {
568: 1:      'answer': '0',
568: 1:      'question': '123456781234567',
568: 1:      'valid': true
568: 1:    },
568: 1:    {
568: 1:      'answer': '2',
568: 1:      'question': '183168009579826',
568: 1:      'valid': true
568: 1:    },
568: 1:    {
568: 1:      'answer': '7',
568: 1:      'question': '964720036906339',
568: 1:      'valid': true
568: 1:    },
568: 1:    {
568: 1:      'answer': '9',
568: 1:      'question': '613951967276640',
568: 1:      'valid': true
568: 1:    },
568: 1:    {
568: 1:      'answer': '7',
568: 1:      'question': '825813064400100',
568: 1:      'valid': true
568: 1:    },
568: 1:    {
568: 1:      'answer': '9',
568: 1:      'question': '239698713103140',
568: 1:      'valid': true
568: 1:    },
568: 1:    {
568: 1:      'answer': '7',
568: 1:      'question': '771412693933286',
568: 1:      'valid': true
568: 1:    },
568: 1:    {
568: 1:      'answer': '0',
568: 1:      'question': '254262384108564',
568: 1:      'valid': true
568: 1:    },
568: 1:    {
568: 1:      'answer': '7',
568: 1:      'question': '959681833483055',
568: 1:      'valid': true
568: 1:    },
568: 1:    {
568: 1:      'answer': '4',
568: 1:      'question': '210087745295982',
568: 1:      'valid': true
568: 1:    },
568: 1:    {
568: 1:      'answer': '2',
568: 1:      'question': '367683885386271',
568: 1:      'valid': true
568: 1:    },
568: 1:    {
568: 1:      'answer': '5',
568: 1:      'question': '894632429803471',
568: 1:      'valid': true
568: 1:    },
568: 1:    {
568: 1:      'answer': '5',
568: 1:      'question': '471260044736237',
568: 1:      'valid': true
568: 1:    },
568: 1:    {
568: 1:      'answer': '1',
568: 1:      'question': '916471602234329',
568: 1:      'valid': true
568: 1:    },
568: 1:    {
568: 1:      'answer': '4',
568: 1:      'question': '961073953339054',
568: 1:      'valid': true
568: 1:    },
568: 1:    {
568: 1:      'answer': '5',
568: 1:      'question': '917408439816341',
568: 1:      'valid': true
568: 1:    },
568: 1:    {
568: 1:      'answer': '4',
568: 1:      'question': '498078140932499',
568: 1:      'valid': true
568: 1:    },
568: 1:    {
568: 1:      'answer': '2',
568: 1:      'question': '686244896142849',
568: 1:      'valid': true
568: 1:    },
568: 1:    {
568: 1:      'answer': '2',
568: 1:      'question': '772287416460433',
568: 1:      'valid': true
568: 1:    },
568: 1:    {
568: 1:      'answer': '1',
568: 1:      'question': '207725984977363',
568: 1:      'valid': true
568: 1:    }
568: 1:  ],
568: 1:  'info': [
568: 1:    '✅f(456126121234546) = 7',
568: 1:    '✅f(123456781234567) = 0',
568: 1:    '✅f(183168009579826) = 2',
568: 1:    '✅f(964720036906339) = 7',
568: 1:    '✅f(613951967276640) = 9',
568: 1:    '✅f(825813064400100) = 7',
568: 1:    '✅f(239698713103140) = 9',
568: 1:    '✅f(771412693933286) = 7',
568: 1:    '✅f(254262384108564) = 0',
568: 1:    '✅f(959681833483055) = 7',
568: 1:    '✅f(210087745295982) = 4',
568: 1:    '✅f(367683885386271) = 2',
568: 1:    '✅f(894632429803471) = 5',
568: 1:    '✅f(471260044736237) = 5',
568: 1:    '✅f(916471602234329) = 1',
568: 1:    '✅f(961073953339054) = 4',
568: 1:    '✅f(917408439816341) = 5',
568: 1:    '✅f(498078140932499) = 4',
568: 1:    '✅f(686244896142849) = 2',
568: 1:    '✅f(772287416460433) = 2',
568: 1:    '✅f(207725984977363) = 1',
568: 1:    '❌f(199776984753064) = ??? != 2'
568: 1:  ],
568: 1:  'level': 20,
568: 1:  'nextQuestion': '199776984753064',
568: 1:  'questions': [
568: 1:    '456126121234546',
568: 1:    '123456781234567',
568: 1:    '183168009579826',
568: 1:    '964720036906339',
568: 1:    '613951967276640',
568: 1:    '825813064400100',
568: 1:    '239698713103140',
568: 1:    '771412693933286',
568: 1:    '254262384108564',
568: 1:    '959681833483055',
568: 1:    '210087745295982',
568: 1:    '367683885386271',
568: 1:    '894632429803471',
568: 1:    '471260044736237',
568: 1:    '916471602234329',
568: 1:    '961073953339054',
568: 1:    '917408439816341',
568: 1:    '498078140932499',
568: 1:    '686244896142849',
568: 1:    '772287416460433',
568: 1:    '207725984977363',
568: 1:    '199776984753064'
568: 1:  ]
568: 1:}
568: 1:Scores: 38496
568: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5', '5', '1', '4', '5', '4', '2', '2', '1', '2']')
568: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
569: 1:BoardData {
569: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
569: 1:  'expectedAnswer': '5',
569: 1:  'history': [
569: 1:    {
569: 1:      'answer': '7',
569: 1:      'question': '456126121234546',
569: 1:      'valid': true
569: 1:    },
569: 1:    {
569: 1:      'answer': '0',
569: 1:      'question': '123456781234567',
569: 1:      'valid': true
569: 1:    },
569: 1:    {
569: 1:      'answer': '2',
569: 1:      'question': '183168009579826',
569: 1:      'valid': true
569: 1:    },
569: 1:    {
569: 1:      'answer': '7',
569: 1:      'question': '964720036906339',
569: 1:      'valid': true
569: 1:    },
569: 1:    {
569: 1:      'answer': '9',
569: 1:      'question': '613951967276640',
569: 1:      'valid': true
569: 1:    },
569: 1:    {
569: 1:      'answer': '7',
569: 1:      'question': '825813064400100',
569: 1:      'valid': true
569: 1:    },
569: 1:    {
569: 1:      'answer': '9',
569: 1:      'question': '239698713103140',
569: 1:      'valid': true
569: 1:    },
569: 1:    {
569: 1:      'answer': '7',
569: 1:      'question': '771412693933286',
569: 1:      'valid': true
569: 1:    },
569: 1:    {
569: 1:      'answer': '0',
569: 1:      'question': '254262384108564',
569: 1:      'valid': true
569: 1:    },
569: 1:    {
569: 1:      'answer': '7',
569: 1:      'question': '959681833483055',
569: 1:      'valid': true
569: 1:    },
569: 1:    {
569: 1:      'answer': '4',
569: 1:      'question': '210087745295982',
569: 1:      'valid': true
569: 1:    },
569: 1:    {
569: 1:      'answer': '2',
569: 1:      'question': '367683885386271',
569: 1:      'valid': true
569: 1:    },
569: 1:    {
569: 1:      'answer': '5',
569: 1:      'question': '894632429803471',
569: 1:      'valid': true
569: 1:    },
569: 1:    {
569: 1:      'answer': '5',
569: 1:      'question': '471260044736237',
569: 1:      'valid': true
569: 1:    },
569: 1:    {
569: 1:      'answer': '1',
569: 1:      'question': '916471602234329',
569: 1:      'valid': true
569: 1:    },
569: 1:    {
569: 1:      'answer': '4',
569: 1:      'question': '961073953339054',
569: 1:      'valid': true
569: 1:    },
569: 1:    {
569: 1:      'answer': '5',
569: 1:      'question': '917408439816341',
569: 1:      'valid': true
569: 1:    },
569: 1:    {
569: 1:      'answer': '4',
569: 1:      'question': '498078140932499',
569: 1:      'valid': true
569: 1:    },
569: 1:    {
569: 1:      'answer': '2',
569: 1:      'question': '686244896142849',
569: 1:      'valid': true
569: 1:    },
569: 1:    {
569: 1:      'answer': '2',
569: 1:      'question': '772287416460433',
569: 1:      'valid': true
569: 1:    },
569: 1:    {
569: 1:      'answer': '1',
569: 1:      'question': '207725984977363',
569: 1:      'valid': true
569: 1:    },
569: 1:    {
569: 1:      'answer': '2',
569: 1:      'question': '199776984753064',
569: 1:      'valid': true
569: 1:    }
569: 1:  ],
569: 1:  'info': [
569: 1:    '✅f(456126121234546) = 7',
569: 1:    '✅f(123456781234567) = 0',
569: 1:    '✅f(183168009579826) = 2',
569: 1:    '✅f(964720036906339) = 7',
569: 1:    '✅f(613951967276640) = 9',
569: 1:    '✅f(825813064400100) = 7',
569: 1:    '✅f(239698713103140) = 9',
569: 1:    '✅f(771412693933286) = 7',
569: 1:    '✅f(254262384108564) = 0',
569: 1:    '✅f(959681833483055) = 7',
569: 1:    '✅f(210087745295982) = 4',
569: 1:    '✅f(367683885386271) = 2',
569: 1:    '✅f(894632429803471) = 5',
569: 1:    '✅f(471260044736237) = 5',
569: 1:    '✅f(916471602234329) = 1',
569: 1:    '✅f(961073953339054) = 4',
569: 1:    '✅f(917408439816341) = 5',
569: 1:    '✅f(498078140932499) = 4',
569: 1:    '✅f(686244896142849) = 2',
569: 1:    '✅f(772287416460433) = 2',
569: 1:    '✅f(207725984977363) = 1',
569: 1:    '✅f(199776984753064) = 2',
569: 1:    '❌f(498874493103145) = ??? != 5'
569: 1:  ],
569: 1:  'level': 20,
569: 1:  'nextQuestion': '498874493103145',
569: 1:  'questions': [
569: 1:    '456126121234546',
569: 1:    '123456781234567',
569: 1:    '183168009579826',
569: 1:    '964720036906339',
569: 1:    '613951967276640',
569: 1:    '825813064400100',
569: 1:    '239698713103140',
569: 1:    '771412693933286',
569: 1:    '254262384108564',
569: 1:    '959681833483055',
569: 1:    '210087745295982',
569: 1:    '367683885386271',
569: 1:    '894632429803471',
569: 1:    '471260044736237',
569: 1:    '916471602234329',
569: 1:    '961073953339054',
569: 1:    '917408439816341',
569: 1:    '498078140932499',
569: 1:    '686244896142849',
569: 1:    '772287416460433',
569: 1:    '207725984977363',
569: 1:    '199776984753064',
569: 1:    '498874493103145'
569: 1:  ]
569: 1:}
569: 1:Scores: 38504
569: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5', '5', '1', '4', '5', '4', '2', '2', '1', '2', '5']')
569: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
570: 1:BoardData {
570: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
570: 1:  'expectedAnswer': '1',
570: 1:  'history': [
570: 1:    {
570: 1:      'answer': '7',
570: 1:      'question': '456126121234546',
570: 1:      'valid': true
570: 1:    },
570: 1:    {
570: 1:      'answer': '0',
570: 1:      'question': '123456781234567',
570: 1:      'valid': true
570: 1:    },
570: 1:    {
570: 1:      'answer': '2',
570: 1:      'question': '183168009579826',
570: 1:      'valid': true
570: 1:    },
570: 1:    {
570: 1:      'answer': '7',
570: 1:      'question': '964720036906339',
570: 1:      'valid': true
570: 1:    },
570: 1:    {
570: 1:      'answer': '9',
570: 1:      'question': '613951967276640',
570: 1:      'valid': true
570: 1:    },
570: 1:    {
570: 1:      'answer': '7',
570: 1:      'question': '825813064400100',
570: 1:      'valid': true
570: 1:    },
570: 1:    {
570: 1:      'answer': '9',
570: 1:      'question': '239698713103140',
570: 1:      'valid': true
570: 1:    },
570: 1:    {
570: 1:      'answer': '7',
570: 1:      'question': '771412693933286',
570: 1:      'valid': true
570: 1:    },
570: 1:    {
570: 1:      'answer': '0',
570: 1:      'question': '254262384108564',
570: 1:      'valid': true
570: 1:    },
570: 1:    {
570: 1:      'answer': '7',
570: 1:      'question': '959681833483055',
570: 1:      'valid': true
570: 1:    },
570: 1:    {
570: 1:      'answer': '4',
570: 1:      'question': '210087745295982',
570: 1:      'valid': true
570: 1:    },
570: 1:    {
570: 1:      'answer': '2',
570: 1:      'question': '367683885386271',
570: 1:      'valid': true
570: 1:    },
570: 1:    {
570: 1:      'answer': '5',
570: 1:      'question': '894632429803471',
570: 1:      'valid': true
570: 1:    },
570: 1:    {
570: 1:      'answer': '5',
570: 1:      'question': '471260044736237',
570: 1:      'valid': true
570: 1:    },
570: 1:    {
570: 1:      'answer': '1',
570: 1:      'question': '916471602234329',
570: 1:      'valid': true
570: 1:    },
570: 1:    {
570: 1:      'answer': '4',
570: 1:      'question': '961073953339054',
570: 1:      'valid': true
570: 1:    },
570: 1:    {
570: 1:      'answer': '5',
570: 1:      'question': '917408439816341',
570: 1:      'valid': true
570: 1:    },
570: 1:    {
570: 1:      'answer': '4',
570: 1:      'question': '498078140932499',
570: 1:      'valid': true
570: 1:    },
570: 1:    {
570: 1:      'answer': '2',
570: 1:      'question': '686244896142849',
570: 1:      'valid': true
570: 1:    },
570: 1:    {
570: 1:      'answer': '2',
570: 1:      'question': '772287416460433',
570: 1:      'valid': true
570: 1:    },
570: 1:    {
570: 1:      'answer': '1',
570: 1:      'question': '207725984977363',
570: 1:      'valid': true
570: 1:    },
570: 1:    {
570: 1:      'answer': '2',
570: 1:      'question': '199776984753064',
570: 1:      'valid': true
570: 1:    },
570: 1:    {
570: 1:      'answer': '5',
570: 1:      'question': '498874493103145',
570: 1:      'valid': true
570: 1:    }
570: 1:  ],
570: 1:  'info': [
570: 1:    '✅f(456126121234546) = 7',
570: 1:    '✅f(123456781234567) = 0',
570: 1:    '✅f(183168009579826) = 2',
570: 1:    '✅f(964720036906339) = 7',
570: 1:    '✅f(613951967276640) = 9',
570: 1:    '✅f(825813064400100) = 7',
570: 1:    '✅f(239698713103140) = 9',
570: 1:    '✅f(771412693933286) = 7',
570: 1:    '✅f(254262384108564) = 0',
570: 1:    '✅f(959681833483055) = 7',
570: 1:    '✅f(210087745295982) = 4',
570: 1:    '✅f(367683885386271) = 2',
570: 1:    '✅f(894632429803471) = 5',
570: 1:    '✅f(471260044736237) = 5',
570: 1:    '✅f(916471602234329) = 1',
570: 1:    '✅f(961073953339054) = 4',
570: 1:    '✅f(917408439816341) = 5',
570: 1:    '✅f(498078140932499) = 4',
570: 1:    '✅f(686244896142849) = 2',
570: 1:    '✅f(772287416460433) = 2',
570: 1:    '✅f(207725984977363) = 1',
570: 1:    '✅f(199776984753064) = 2',
570: 1:    '✅f(498874493103145) = 5',
570: 1:    '❌f(662571495734934) = ??? != 1'
570: 1:  ],
570: 1:  'level': 20,
570: 1:  'nextQuestion': '662571495734934',
570: 1:  'questions': [
570: 1:    '456126121234546',
570: 1:    '123456781234567',
570: 1:    '183168009579826',
570: 1:    '964720036906339',
570: 1:    '613951967276640',
570: 1:    '825813064400100',
570: 1:    '239698713103140',
570: 1:    '771412693933286',
570: 1:    '254262384108564',
570: 1:    '959681833483055',
570: 1:    '210087745295982',
570: 1:    '367683885386271',
570: 1:    '894632429803471',
570: 1:    '471260044736237',
570: 1:    '916471602234329',
570: 1:    '961073953339054',
570: 1:    '917408439816341',
570: 1:    '498078140932499',
570: 1:    '686244896142849',
570: 1:    '772287416460433',
570: 1:    '207725984977363',
570: 1:    '199776984753064',
570: 1:    '498874493103145',
570: 1:    '662571495734934'
570: 1:  ]
570: 1:}
570: 1:Scores: 38512
570: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5', '5', '1', '4', '5', '4', '2', '2', '1', '2', '5', '1']')
570: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
571: 1:BoardData {
571: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
571: 1:  'expectedAnswer': '1',
571: 1:  'history': [
571: 1:    {
571: 1:      'answer': '7',
571: 1:      'question': '456126121234546',
571: 1:      'valid': true
571: 1:    },
571: 1:    {
571: 1:      'answer': '0',
571: 1:      'question': '123456781234567',
571: 1:      'valid': true
571: 1:    },
571: 1:    {
571: 1:      'answer': '2',
571: 1:      'question': '183168009579826',
571: 1:      'valid': true
571: 1:    },
571: 1:    {
571: 1:      'answer': '7',
571: 1:      'question': '964720036906339',
571: 1:      'valid': true
571: 1:    },
571: 1:    {
571: 1:      'answer': '9',
571: 1:      'question': '613951967276640',
571: 1:      'valid': true
571: 1:    },
571: 1:    {
571: 1:      'answer': '7',
571: 1:      'question': '825813064400100',
571: 1:      'valid': true
571: 1:    },
571: 1:    {
571: 1:      'answer': '9',
571: 1:      'question': '239698713103140',
571: 1:      'valid': true
571: 1:    },
571: 1:    {
571: 1:      'answer': '7',
571: 1:      'question': '771412693933286',
571: 1:      'valid': true
571: 1:    },
571: 1:    {
571: 1:      'answer': '0',
571: 1:      'question': '254262384108564',
571: 1:      'valid': true
571: 1:    },
571: 1:    {
571: 1:      'answer': '7',
571: 1:      'question': '959681833483055',
571: 1:      'valid': true
571: 1:    },
571: 1:    {
571: 1:      'answer': '4',
571: 1:      'question': '210087745295982',
571: 1:      'valid': true
571: 1:    },
571: 1:    {
571: 1:      'answer': '2',
571: 1:      'question': '367683885386271',
571: 1:      'valid': true
571: 1:    },
571: 1:    {
571: 1:      'answer': '5',
571: 1:      'question': '894632429803471',
571: 1:      'valid': true
571: 1:    },
571: 1:    {
571: 1:      'answer': '5',
571: 1:      'question': '471260044736237',
571: 1:      'valid': true
571: 1:    },
571: 1:    {
571: 1:      'answer': '1',
571: 1:      'question': '916471602234329',
571: 1:      'valid': true
571: 1:    },
571: 1:    {
571: 1:      'answer': '4',
571: 1:      'question': '961073953339054',
571: 1:      'valid': true
571: 1:    },
571: 1:    {
571: 1:      'answer': '5',
571: 1:      'question': '917408439816341',
571: 1:      'valid': true
571: 1:    },
571: 1:    {
571: 1:      'answer': '4',
571: 1:      'question': '498078140932499',
571: 1:      'valid': true
571: 1:    },
571: 1:    {
571: 1:      'answer': '2',
571: 1:      'question': '686244896142849',
571: 1:      'valid': true
571: 1:    },
571: 1:    {
571: 1:      'answer': '2',
571: 1:      'question': '772287416460433',
571: 1:      'valid': true
571: 1:    },
571: 1:    {
571: 1:      'answer': '1',
571: 1:      'question': '207725984977363',
571: 1:      'valid': true
571: 1:    },
571: 1:    {
571: 1:      'answer': '2',
571: 1:      'question': '199776984753064',
571: 1:      'valid': true
571: 1:    },
571: 1:    {
571: 1:      'answer': '5',
571: 1:      'question': '498874493103145',
571: 1:      'valid': true
571: 1:    },
571: 1:    {
571: 1:      'answer': '1',
571: 1:      'question': '662571495734934',
571: 1:      'valid': true
571: 1:    }
571: 1:  ],
571: 1:  'info': [
571: 1:    '✅f(456126121234546) = 7',
571: 1:    '✅f(123456781234567) = 0',
571: 1:    '✅f(183168009579826) = 2',
571: 1:    '✅f(964720036906339) = 7',
571: 1:    '✅f(613951967276640) = 9',
571: 1:    '✅f(825813064400100) = 7',
571: 1:    '✅f(239698713103140) = 9',
571: 1:    '✅f(771412693933286) = 7',
571: 1:    '✅f(254262384108564) = 0',
571: 1:    '✅f(959681833483055) = 7',
571: 1:    '✅f(210087745295982) = 4',
571: 1:    '✅f(367683885386271) = 2',
571: 1:    '✅f(894632429803471) = 5',
571: 1:    '✅f(471260044736237) = 5',
571: 1:    '✅f(916471602234329) = 1',
571: 1:    '✅f(961073953339054) = 4',
571: 1:    '✅f(917408439816341) = 5',
571: 1:    '✅f(498078140932499) = 4',
571: 1:    '✅f(686244896142849) = 2',
571: 1:    '✅f(772287416460433) = 2',
571: 1:    '✅f(207725984977363) = 1',
571: 1:    '✅f(199776984753064) = 2',
571: 1:    '✅f(498874493103145) = 5',
571: 1:    '✅f(662571495734934) = 1',
571: 1:    '❌f(287442129303575) = ??? != 1'
571: 1:  ],
571: 1:  'level': 20,
571: 1:  'nextQuestion': '287442129303575',
571: 1:  'questions': [
571: 1:    '456126121234546',
571: 1:    '123456781234567',
571: 1:    '183168009579826',
571: 1:    '964720036906339',
571: 1:    '613951967276640',
571: 1:    '825813064400100',
571: 1:    '239698713103140',
571: 1:    '771412693933286',
571: 1:    '254262384108564',
571: 1:    '959681833483055',
571: 1:    '210087745295982',
571: 1:    '367683885386271',
571: 1:    '894632429803471',
571: 1:    '471260044736237',
571: 1:    '916471602234329',
571: 1:    '961073953339054',
571: 1:    '917408439816341',
571: 1:    '498078140932499',
571: 1:    '686244896142849',
571: 1:    '772287416460433',
571: 1:    '207725984977363',
571: 1:    '199776984753064',
571: 1:    '498874493103145',
571: 1:    '662571495734934',
571: 1:    '287442129303575'
571: 1:  ]
571: 1:}
571: 1:Scores: 38520
571: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5', '5', '1', '4', '5', '4', '2', '2', '1', '2', '5', '1', '1']')
571: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
572: 1:BoardData {
572: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
572: 1:  'expectedAnswer': '0',
572: 1:  'history': [
572: 1:    {
572: 1:      'answer': '7',
572: 1:      'question': '456126121234546',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '0',
572: 1:      'question': '123456781234567',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '2',
572: 1:      'question': '183168009579826',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '7',
572: 1:      'question': '964720036906339',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '9',
572: 1:      'question': '613951967276640',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '7',
572: 1:      'question': '825813064400100',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '9',
572: 1:      'question': '239698713103140',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '7',
572: 1:      'question': '771412693933286',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '0',
572: 1:      'question': '254262384108564',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '7',
572: 1:      'question': '959681833483055',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '4',
572: 1:      'question': '210087745295982',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '2',
572: 1:      'question': '367683885386271',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '5',
572: 1:      'question': '894632429803471',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '5',
572: 1:      'question': '471260044736237',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '1',
572: 1:      'question': '916471602234329',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '4',
572: 1:      'question': '961073953339054',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '5',
572: 1:      'question': '917408439816341',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '4',
572: 1:      'question': '498078140932499',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '2',
572: 1:      'question': '686244896142849',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '2',
572: 1:      'question': '772287416460433',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '1',
572: 1:      'question': '207725984977363',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '2',
572: 1:      'question': '199776984753064',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '5',
572: 1:      'question': '498874493103145',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '1',
572: 1:      'question': '662571495734934',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '1',
572: 1:      'question': '287442129303575',
572: 1:      'valid': true
572: 1:    }
572: 1:  ],
572: 1:  'info': [
572: 1:    '✅f(456126121234546) = 7',
572: 1:    '✅f(123456781234567) = 0',
572: 1:    '✅f(183168009579826) = 2',
572: 1:    '✅f(964720036906339) = 7',
572: 1:    '✅f(613951967276640) = 9',
572: 1:    '✅f(825813064400100) = 7',
572: 1:    '✅f(239698713103140) = 9',
572: 1:    '✅f(771412693933286) = 7',
572: 1:    '✅f(254262384108564) = 0',
572: 1:    '✅f(959681833483055) = 7',
572: 1:    '✅f(210087745295982) = 4',
572: 1:    '✅f(367683885386271) = 2',
572: 1:    '✅f(894632429803471) = 5',
572: 1:    '✅f(471260044736237) = 5',
572: 1:    '✅f(916471602234329) = 1',
572: 1:    '✅f(961073953339054) = 4',
572: 1:    '✅f(917408439816341) = 5',
572: 1:    '✅f(498078140932499) = 4',
572: 1:    '✅f(686244896142849) = 2',
572: 1:    '✅f(772287416460433) = 2',
572: 1:    '✅f(207725984977363) = 1',
572: 1:    '✅f(199776984753064) = 2',
572: 1:    '✅f(498874493103145) = 5',
572: 1:    '✅f(662571495734934) = 1',
572: 1:    '✅f(287442129303575) = 1',
572: 1:    '❌f(358353262548397) = ??? != 0'
572: 1:  ],
572: 1:  'level': 20,
572: 1:  'nextQuestion': '358353262548397',
572: 1:  'questions': [
572: 1:    '456126121234546',
572: 1:    '123456781234567',
572: 1:    '183168009579826',
572: 1:    '964720036906339',
572: 1:    '613951967276640',
572: 1:    '825813064400100',
572: 1:    '239698713103140',
572: 1:    '771412693933286',
572: 1:    '254262384108564',
572: 1:    '959681833483055',
572: 1:    '210087745295982',
572: 1:    '367683885386271',
572: 1:    '894632429803471',
572: 1:    '471260044736237',
572: 1:    '916471602234329',
572: 1:    '961073953339054',
572: 1:    '917408439816341',
572: 1:    '498078140932499',
572: 1:    '686244896142849',
572: 1:    '772287416460433',
572: 1:    '207725984977363',
572: 1:    '199776984753064',
572: 1:    '498874493103145',
572: 1:    '662571495734934',
572: 1:    '287442129303575',
572: 1:    '358353262548397'
572: 1:  ]
572: 1:}
572: 1:Scores: 38528
572: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5', '5', '1', '4', '5', '4', '2', '2', '1', '2', '5', '1', '1', '0']')
572: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
573: 1:BoardData {
573: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
573: 1:  'expectedAnswer': '3',
573: 1:  'history': [
573: 1:    {
573: 1:      'answer': '7',
573: 1:      'question': '456126121234546',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '0',
573: 1:      'question': '123456781234567',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '2',
573: 1:      'question': '183168009579826',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '7',
573: 1:      'question': '964720036906339',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '9',
573: 1:      'question': '613951967276640',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '7',
573: 1:      'question': '825813064400100',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '9',
573: 1:      'question': '239698713103140',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '7',
573: 1:      'question': '771412693933286',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '0',
573: 1:      'question': '254262384108564',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '7',
573: 1:      'question': '959681833483055',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '4',
573: 1:      'question': '210087745295982',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '2',
573: 1:      'question': '367683885386271',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '5',
573: 1:      'question': '894632429803471',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '5',
573: 1:      'question': '471260044736237',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '1',
573: 1:      'question': '916471602234329',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '4',
573: 1:      'question': '961073953339054',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '5',
573: 1:      'question': '917408439816341',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '4',
573: 1:      'question': '498078140932499',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '2',
573: 1:      'question': '686244896142849',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '2',
573: 1:      'question': '772287416460433',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '1',
573: 1:      'question': '207725984977363',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '2',
573: 1:      'question': '199776984753064',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '5',
573: 1:      'question': '498874493103145',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '1',
573: 1:      'question': '662571495734934',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '1',
573: 1:      'question': '287442129303575',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '0',
573: 1:      'question': '358353262548397',
573: 1:      'valid': true
573: 1:    }
573: 1:  ],
573: 1:  'info': [
573: 1:    '✅f(456126121234546) = 7',
573: 1:    '✅f(123456781234567) = 0',
573: 1:    '✅f(183168009579826) = 2',
573: 1:    '✅f(964720036906339) = 7',
573: 1:    '✅f(613951967276640) = 9',
573: 1:    '✅f(825813064400100) = 7',
573: 1:    '✅f(239698713103140) = 9',
573: 1:    '✅f(771412693933286) = 7',
573: 1:    '✅f(254262384108564) = 0',
573: 1:    '✅f(959681833483055) = 7',
573: 1:    '✅f(210087745295982) = 4',
573: 1:    '✅f(367683885386271) = 2',
573: 1:    '✅f(894632429803471) = 5',
573: 1:    '✅f(471260044736237) = 5',
573: 1:    '✅f(916471602234329) = 1',
573: 1:    '✅f(961073953339054) = 4',
573: 1:    '✅f(917408439816341) = 5',
573: 1:    '✅f(498078140932499) = 4',
573: 1:    '✅f(686244896142849) = 2',
573: 1:    '✅f(772287416460433) = 2',
573: 1:    '✅f(207725984977363) = 1',
573: 1:    '✅f(199776984753064) = 2',
573: 1:    '✅f(498874493103145) = 5',
573: 1:    '✅f(662571495734934) = 1',
573: 1:    '✅f(287442129303575) = 1',
573: 1:    '✅f(358353262548397) = 0',
573: 1:    '❌f(576080532156469) = ??? != 3'
573: 1:  ],
573: 1:  'level': 20,
573: 1:  'nextQuestion': '576080532156469',
573: 1:  'questions': [
573: 1:    '456126121234546',
573: 1:    '123456781234567',
573: 1:    '183168009579826',
573: 1:    '964720036906339',
573: 1:    '613951967276640',
573: 1:    '825813064400100',
573: 1:    '239698713103140',
573: 1:    '771412693933286',
573: 1:    '254262384108564',
573: 1:    '959681833483055',
573: 1:    '210087745295982',
573: 1:    '367683885386271',
573: 1:    '894632429803471',
573: 1:    '471260044736237',
573: 1:    '916471602234329',
573: 1:    '961073953339054',
573: 1:    '917408439816341',
573: 1:    '498078140932499',
573: 1:    '686244896142849',
573: 1:    '772287416460433',
573: 1:    '207725984977363',
573: 1:    '199776984753064',
573: 1:    '498874493103145',
573: 1:    '662571495734934',
573: 1:    '287442129303575',
573: 1:    '358353262548397',
573: 1:    '576080532156469'
573: 1:  ]
573: 1:}
573: 1:Scores: 38536
573: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5', '5', '1', '4', '5', '4', '2', '2', '1', '2', '5', '1', '1', '0', '3']')
573: 1:Fire Event: PassTest{complexity=24, testCount=27}
573: 1:Fire Event: NextAlgorithm{complexity=24, time=0}
------------------------------------------
574: 1:BoardData {
574: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
574: 1:  'history': [
574: 1:    {
574: 1:      'answer': '7',
574: 1:      'question': '456126121234546',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '0',
574: 1:      'question': '123456781234567',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '2',
574: 1:      'question': '183168009579826',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '7',
574: 1:      'question': '964720036906339',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '9',
574: 1:      'question': '613951967276640',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '7',
574: 1:      'question': '825813064400100',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '9',
574: 1:      'question': '239698713103140',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '7',
574: 1:      'question': '771412693933286',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '0',
574: 1:      'question': '254262384108564',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '7',
574: 1:      'question': '959681833483055',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '4',
574: 1:      'question': '210087745295982',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '2',
574: 1:      'question': '367683885386271',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '5',
574: 1:      'question': '894632429803471',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '5',
574: 1:      'question': '471260044736237',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '1',
574: 1:      'question': '916471602234329',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '4',
574: 1:      'question': '961073953339054',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '5',
574: 1:      'question': '917408439816341',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '4',
574: 1:      'question': '498078140932499',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '2',
574: 1:      'question': '686244896142849',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '2',
574: 1:      'question': '772287416460433',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '1',
574: 1:      'question': '207725984977363',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '2',
574: 1:      'question': '199776984753064',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '5',
574: 1:      'question': '498874493103145',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '1',
574: 1:      'question': '662571495734934',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '1',
574: 1:      'question': '287442129303575',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '0',
574: 1:      'question': '358353262548397',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '3',
574: 1:      'question': '576080532156469',
574: 1:      'valid': true
574: 1:    }
574: 1:  ],
574: 1:  'info': [
574: 1:    '✅f(456126121234546) = 7',
574: 1:    '✅f(123456781234567) = 0',
574: 1:    '✅f(183168009579826) = 2',
574: 1:    '✅f(964720036906339) = 7',
574: 1:    '✅f(613951967276640) = 9',
574: 1:    '✅f(825813064400100) = 7',
574: 1:    '✅f(239698713103140) = 9',
574: 1:    '✅f(771412693933286) = 7',
574: 1:    '✅f(254262384108564) = 0',
574: 1:    '✅f(959681833483055) = 7',
574: 1:    '✅f(210087745295982) = 4',
574: 1:    '✅f(367683885386271) = 2',
574: 1:    '✅f(894632429803471) = 5',
574: 1:    '✅f(471260044736237) = 5',
574: 1:    '✅f(916471602234329) = 1',
574: 1:    '✅f(961073953339054) = 4',
574: 1:    '✅f(917408439816341) = 5',
574: 1:    '✅f(498078140932499) = 4',
574: 1:    '✅f(686244896142849) = 2',
574: 1:    '✅f(772287416460433) = 2',
574: 1:    '✅f(207725984977363) = 1',
574: 1:    '✅f(199776984753064) = 2',
574: 1:    '✅f(498874493103145) = 5',
574: 1:    '✅f(662571495734934) = 1',
574: 1:    '✅f(287442129303575) = 1',
574: 1:    '✅f(358353262548397) = 0',
574: 1:    '✅f(576080532156469) = 3'
574: 1:  ],
574: 1:  'level': 20,
574: 1:  'questions': []
574: 1:}
574: 1:Scores: 41783
574: 1:Answer: message('StartNextLevel')
574: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
575: 1:BoardData {
575: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
575: 1:  'expectedAnswer': 'AAAA',
575: 1:  'history': [],
575: 1:  'info': ['❌f(TTTT) = ??? != AAAA'],
575: 1:  'level': 21,
575: 1:  'nextQuestion': 'TTTT',
575: 1:  'questions': ['TTTT']
575: 1:}
575: 1:Scores: 41783
575: 1:Answer: message('['AAAA']')
575: 1:Fire Event: PassTest{complexity=25, testCount=27}
------------------------------------------
576: 1:BoardData {
576: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
576: 1:  'expectedAnswer': 'TTTT',
576: 1:  'history': [{
576: 1:    'answer': 'AAAA',
576: 1:    'question': 'TTTT',
576: 1:    'valid': true
576: 1:  }],
576: 1:  'info': [
576: 1:    '✅f(TTTT) = AAAA',
576: 1:    '❌f(AAAA) = ??? != TTTT'
576: 1:  ],
576: 1:  'level': 21,
576: 1:  'nextQuestion': 'AAAA',
576: 1:  'questions': [
576: 1:    'TTTT',
576: 1:    'AAAA'
576: 1:  ]
576: 1:}
576: 1:Scores: 41792
576: 1:Answer: message('['AAAA', 'TTTT']')
576: 1:Fire Event: PassTest{complexity=25, testCount=27}
------------------------------------------
577: 1:BoardData {
577: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
577: 1:  'expectedAnswer': 'ATTGC',
577: 1:  'history': [
577: 1:    {
577: 1:      'answer': 'AAAA',
577: 1:      'question': 'TTTT',
577: 1:      'valid': true
577: 1:    },
577: 1:    {
577: 1:      'answer': 'TTTT',
577: 1:      'question': 'AAAA',
577: 1:      'valid': true
577: 1:    }
577: 1:  ],
577: 1:  'info': [
577: 1:    '✅f(TTTT) = AAAA',
577: 1:    '✅f(AAAA) = TTTT',
577: 1:    '❌f(TAACG) = ??? != ATTGC'
577: 1:  ],
577: 1:  'level': 21,
577: 1:  'nextQuestion': 'TAACG',
577: 1:  'questions': [
577: 1:    'TTTT',
577: 1:    'AAAA',
577: 1:    'TAACG'
577: 1:  ]
577: 1:}
577: 1:Scores: 41801
577: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC']')
577: 1:Fire Event: PassTest{complexity=25, testCount=27}
------------------------------------------
578: 1:BoardData {
578: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
578: 1:  'expectedAnswer': 'TAACG',
578: 1:  'history': [
578: 1:    {
578: 1:      'answer': 'AAAA',
578: 1:      'question': 'TTTT',
578: 1:      'valid': true
578: 1:    },
578: 1:    {
578: 1:      'answer': 'TTTT',
578: 1:      'question': 'AAAA',
578: 1:      'valid': true
578: 1:    },
578: 1:    {
578: 1:      'answer': 'ATTGC',
578: 1:      'question': 'TAACG',
578: 1:      'valid': true
578: 1:    }
578: 1:  ],
578: 1:  'info': [
578: 1:    '✅f(TTTT) = AAAA',
578: 1:    '✅f(AAAA) = TTTT',
578: 1:    '✅f(TAACG) = ATTGC',
578: 1:    '❌f(ATTGC) = ??? != TAACG'
578: 1:  ],
578: 1:  'level': 21,
578: 1:  'nextQuestion': 'ATTGC',
578: 1:  'questions': [
578: 1:    'TTTT',
578: 1:    'AAAA',
578: 1:    'TAACG',
578: 1:    'ATTGC'
578: 1:  ]
578: 1:}
578: 1:Scores: 41810
578: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG']')
578: 1:Fire Event: PassTest{complexity=25, testCount=27}
------------------------------------------
579: 1:BoardData {
579: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
579: 1:  'expectedAnswer': 'GTAT',
579: 1:  'history': [
579: 1:    {
579: 1:      'answer': 'AAAA',
579: 1:      'question': 'TTTT',
579: 1:      'valid': true
579: 1:    },
579: 1:    {
579: 1:      'answer': 'TTTT',
579: 1:      'question': 'AAAA',
579: 1:      'valid': true
579: 1:    },
579: 1:    {
579: 1:      'answer': 'ATTGC',
579: 1:      'question': 'TAACG',
579: 1:      'valid': true
579: 1:    },
579: 1:    {
579: 1:      'answer': 'TAACG',
579: 1:      'question': 'ATTGC',
579: 1:      'valid': true
579: 1:    }
579: 1:  ],
579: 1:  'info': [
579: 1:    '✅f(TTTT) = AAAA',
579: 1:    '✅f(AAAA) = TTTT',
579: 1:    '✅f(TAACG) = ATTGC',
579: 1:    '✅f(ATTGC) = TAACG',
579: 1:    '❌f(CATA) = ??? != GTAT'
579: 1:  ],
579: 1:  'level': 21,
579: 1:  'nextQuestion': 'CATA',
579: 1:  'questions': [
579: 1:    'TTTT',
579: 1:    'AAAA',
579: 1:    'TAACG',
579: 1:    'ATTGC',
579: 1:    'CATA'
579: 1:  ]
579: 1:}
579: 1:Scores: 41819
579: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT']')
579: 1:Fire Event: PassTest{complexity=25, testCount=27}
------------------------------------------
580: 1:BoardData {
580: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
580: 1:  'expectedAnswer': 'CATA',
580: 1:  'history': [
580: 1:    {
580: 1:      'answer': 'AAAA',
580: 1:      'question': 'TTTT',
580: 1:      'valid': true
580: 1:    },
580: 1:    {
580: 1:      'answer': 'TTTT',
580: 1:      'question': 'AAAA',
580: 1:      'valid': true
580: 1:    },
580: 1:    {
580: 1:      'answer': 'ATTGC',
580: 1:      'question': 'TAACG',
580: 1:      'valid': true
580: 1:    },
580: 1:    {
580: 1:      'answer': 'TAACG',
580: 1:      'question': 'ATTGC',
580: 1:      'valid': true
580: 1:    },
580: 1:    {
580: 1:      'answer': 'GTAT',
580: 1:      'question': 'CATA',
580: 1:      'valid': true
580: 1:    }
580: 1:  ],
580: 1:  'info': [
580: 1:    '✅f(TTTT) = AAAA',
580: 1:    '✅f(AAAA) = TTTT',
580: 1:    '✅f(TAACG) = ATTGC',
580: 1:    '✅f(ATTGC) = TAACG',
580: 1:    '✅f(CATA) = GTAT',
580: 1:    '❌f(GTAT) = ??? != CATA'
580: 1:  ],
580: 1:  'level': 21,
580: 1:  'nextQuestion': 'GTAT',
580: 1:  'questions': [
580: 1:    'TTTT',
580: 1:    'AAAA',
580: 1:    'TAACG',
580: 1:    'ATTGC',
580: 1:    'CATA',
580: 1:    'GTAT'
580: 1:  ]
580: 1:}
580: 1:Scores: 41828
580: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA']')
580: 1:Fire Event: PassTest{complexity=25, testCount=27}
------------------------------------------
581: 1:BoardData {
581: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
581: 1:  'expectedAnswer': 'ATCGGATCGA',
581: 1:  'history': [
581: 1:    {
581: 1:      'answer': 'AAAA',
581: 1:      'question': 'TTTT',
581: 1:      'valid': true
581: 1:    },
581: 1:    {
581: 1:      'answer': 'TTTT',
581: 1:      'question': 'AAAA',
581: 1:      'valid': true
581: 1:    },
581: 1:    {
581: 1:      'answer': 'ATTGC',
581: 1:      'question': 'TAACG',
581: 1:      'valid': true
581: 1:    },
581: 1:    {
581: 1:      'answer': 'TAACG',
581: 1:      'question': 'ATTGC',
581: 1:      'valid': true
581: 1:    },
581: 1:    {
581: 1:      'answer': 'GTAT',
581: 1:      'question': 'CATA',
581: 1:      'valid': true
581: 1:    },
581: 1:    {
581: 1:      'answer': 'CATA',
581: 1:      'question': 'GTAT',
581: 1:      'valid': true
581: 1:    }
581: 1:  ],
581: 1:  'info': [
581: 1:    '✅f(TTTT) = AAAA',
581: 1:    '✅f(AAAA) = TTTT',
581: 1:    '✅f(TAACG) = ATTGC',
581: 1:    '✅f(ATTGC) = TAACG',
581: 1:    '✅f(CATA) = GTAT',
581: 1:    '✅f(GTAT) = CATA',
581: 1:    '❌f(TAGCCTAGCT) = ??? != ATCGGATCGA'
581: 1:  ],
581: 1:  'level': 21,
581: 1:  'nextQuestion': 'TAGCCTAGCT',
581: 1:  'questions': [
581: 1:    'TTTT',
581: 1:    'AAAA',
581: 1:    'TAACG',
581: 1:    'ATTGC',
581: 1:    'CATA',
581: 1:    'GTAT',
581: 1:    'TAGCCTAGCT'
581: 1:  ]
581: 1:}
581: 1:Scores: 41837
581: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA']')
581: 1:Fire Event: PassTest{complexity=25, testCount=27}
------------------------------------------
582: 1:BoardData {
582: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
582: 1:  'expectedAnswer': 'CTAGCTAGCT',
582: 1:  'history': [
582: 1:    {
582: 1:      'answer': 'AAAA',
582: 1:      'question': 'TTTT',
582: 1:      'valid': true
582: 1:    },
582: 1:    {
582: 1:      'answer': 'TTTT',
582: 1:      'question': 'AAAA',
582: 1:      'valid': true
582: 1:    },
582: 1:    {
582: 1:      'answer': 'ATTGC',
582: 1:      'question': 'TAACG',
582: 1:      'valid': true
582: 1:    },
582: 1:    {
582: 1:      'answer': 'TAACG',
582: 1:      'question': 'ATTGC',
582: 1:      'valid': true
582: 1:    },
582: 1:    {
582: 1:      'answer': 'GTAT',
582: 1:      'question': 'CATA',
582: 1:      'valid': true
582: 1:    },
582: 1:    {
582: 1:      'answer': 'CATA',
582: 1:      'question': 'GTAT',
582: 1:      'valid': true
582: 1:    },
582: 1:    {
582: 1:      'answer': 'ATCGGATCGA',
582: 1:      'question': 'TAGCCTAGCT',
582: 1:      'valid': true
582: 1:    }
582: 1:  ],
582: 1:  'info': [
582: 1:    '✅f(TTTT) = AAAA',
582: 1:    '✅f(AAAA) = TTTT',
582: 1:    '✅f(TAACG) = ATTGC',
582: 1:    '✅f(ATTGC) = TAACG',
582: 1:    '✅f(CATA) = GTAT',
582: 1:    '✅f(GTAT) = CATA',
582: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
582: 1:    '❌f(GATCGATCGA) = ??? != CTAGCTAGCT'
582: 1:  ],
582: 1:  'level': 21,
582: 1:  'nextQuestion': 'GATCGATCGA',
582: 1:  'questions': [
582: 1:    'TTTT',
582: 1:    'AAAA',
582: 1:    'TAACG',
582: 1:    'ATTGC',
582: 1:    'CATA',
582: 1:    'GTAT',
582: 1:    'TAGCCTAGCT',
582: 1:    'GATCGATCGA'
582: 1:  ]
582: 1:}
582: 1:Scores: 41846
582: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT']')
582: 1:Fire Event: PassTest{complexity=25, testCount=27}
------------------------------------------
583: 1:BoardData {
583: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
583: 1:  'expectedAnswer': 'GATCGATCGATCGATCGA',
583: 1:  'history': [
583: 1:    {
583: 1:      'answer': 'AAAA',
583: 1:      'question': 'TTTT',
583: 1:      'valid': true
583: 1:    },
583: 1:    {
583: 1:      'answer': 'TTTT',
583: 1:      'question': 'AAAA',
583: 1:      'valid': true
583: 1:    },
583: 1:    {
583: 1:      'answer': 'ATTGC',
583: 1:      'question': 'TAACG',
583: 1:      'valid': true
583: 1:    },
583: 1:    {
583: 1:      'answer': 'TAACG',
583: 1:      'question': 'ATTGC',
583: 1:      'valid': true
583: 1:    },
583: 1:    {
583: 1:      'answer': 'GTAT',
583: 1:      'question': 'CATA',
583: 1:      'valid': true
583: 1:    },
583: 1:    {
583: 1:      'answer': 'CATA',
583: 1:      'question': 'GTAT',
583: 1:      'valid': true
583: 1:    },
583: 1:    {
583: 1:      'answer': 'ATCGGATCGA',
583: 1:      'question': 'TAGCCTAGCT',
583: 1:      'valid': true
583: 1:    },
583: 1:    {
583: 1:      'answer': 'CTAGCTAGCT',
583: 1:      'question': 'GATCGATCGA',
583: 1:      'valid': true
583: 1:    }
583: 1:  ],
583: 1:  'info': [
583: 1:    '✅f(TTTT) = AAAA',
583: 1:    '✅f(AAAA) = TTTT',
583: 1:    '✅f(TAACG) = ATTGC',
583: 1:    '✅f(ATTGC) = TAACG',
583: 1:    '✅f(CATA) = GTAT',
583: 1:    '✅f(GTAT) = CATA',
583: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
583: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
583: 1:    '❌f(CTAGCTAGCTAGCTAGCT) = ??? != GATCGATCGATCGATCGA'
583: 1:  ],
583: 1:  'level': 21,
583: 1:  'nextQuestion': 'CTAGCTAGCTAGCTAGCT',
583: 1:  'questions': [
583: 1:    'TTTT',
583: 1:    'AAAA',
583: 1:    'TAACG',
583: 1:    'ATTGC',
583: 1:    'CATA',
583: 1:    'GTAT',
583: 1:    'TAGCCTAGCT',
583: 1:    'GATCGATCGA',
583: 1:    'CTAGCTAGCTAGCTAGCT'
583: 1:  ]
583: 1:}
583: 1:Scores: 41855
583: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA']')
583: 1:Fire Event: PassTest{complexity=25, testCount=27}
------------------------------------------
584: 1:BoardData {
584: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
584: 1:  'expectedAnswer': 'TGCATCGATCGATCGAT',
584: 1:  'history': [
584: 1:    {
584: 1:      'answer': 'AAAA',
584: 1:      'question': 'TTTT',
584: 1:      'valid': true
584: 1:    },
584: 1:    {
584: 1:      'answer': 'TTTT',
584: 1:      'question': 'AAAA',
584: 1:      'valid': true
584: 1:    },
584: 1:    {
584: 1:      'answer': 'ATTGC',
584: 1:      'question': 'TAACG',
584: 1:      'valid': true
584: 1:    },
584: 1:    {
584: 1:      'answer': 'TAACG',
584: 1:      'question': 'ATTGC',
584: 1:      'valid': true
584: 1:    },
584: 1:    {
584: 1:      'answer': 'GTAT',
584: 1:      'question': 'CATA',
584: 1:      'valid': true
584: 1:    },
584: 1:    {
584: 1:      'answer': 'CATA',
584: 1:      'question': 'GTAT',
584: 1:      'valid': true
584: 1:    },
584: 1:    {
584: 1:      'answer': 'ATCGGATCGA',
584: 1:      'question': 'TAGCCTAGCT',
584: 1:      'valid': true
584: 1:    },
584: 1:    {
584: 1:      'answer': 'CTAGCTAGCT',
584: 1:      'question': 'GATCGATCGA',
584: 1:      'valid': true
584: 1:    },
584: 1:    {
584: 1:      'answer': 'GATCGATCGATCGATCGA',
584: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
584: 1:      'valid': true
584: 1:    }
584: 1:  ],
584: 1:  'info': [
584: 1:    '✅f(TTTT) = AAAA',
584: 1:    '✅f(AAAA) = TTTT',
584: 1:    '✅f(TAACG) = ATTGC',
584: 1:    '✅f(ATTGC) = TAACG',
584: 1:    '✅f(CATA) = GTAT',
584: 1:    '✅f(GTAT) = CATA',
584: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
584: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
584: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
584: 1:    '❌f(ACGTAGCTAGCTAGCTA) = ??? != TGCATCGATCGATCGAT'
584: 1:  ],
584: 1:  'level': 21,
584: 1:  'nextQuestion': 'ACGTAGCTAGCTAGCTA',
584: 1:  'questions': [
584: 1:    'TTTT',
584: 1:    'AAAA',
584: 1:    'TAACG',
584: 1:    'ATTGC',
584: 1:    'CATA',
584: 1:    'GTAT',
584: 1:    'TAGCCTAGCT',
584: 1:    'GATCGATCGA',
584: 1:    'CTAGCTAGCTAGCTAGCT',
584: 1:    'ACGTAGCTAGCTAGCTA'
584: 1:  ]
584: 1:}
584: 1:Scores: 41864
584: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT']')
584: 1:Fire Event: PassTest{complexity=25, testCount=27}
------------------------------------------
585: 1:BoardData {
585: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
585: 1:  'expectedAnswer': 'GATCGATCGATCGATCGATCGATCGA',
585: 1:  'history': [
585: 1:    {
585: 1:      'answer': 'AAAA',
585: 1:      'question': 'TTTT',
585: 1:      'valid': true
585: 1:    },
585: 1:    {
585: 1:      'answer': 'TTTT',
585: 1:      'question': 'AAAA',
585: 1:      'valid': true
585: 1:    },
585: 1:    {
585: 1:      'answer': 'ATTGC',
585: 1:      'question': 'TAACG',
585: 1:      'valid': true
585: 1:    },
585: 1:    {
585: 1:      'answer': 'TAACG',
585: 1:      'question': 'ATTGC',
585: 1:      'valid': true
585: 1:    },
585: 1:    {
585: 1:      'answer': 'GTAT',
585: 1:      'question': 'CATA',
585: 1:      'valid': true
585: 1:    },
585: 1:    {
585: 1:      'answer': 'CATA',
585: 1:      'question': 'GTAT',
585: 1:      'valid': true
585: 1:    },
585: 1:    {
585: 1:      'answer': 'ATCGGATCGA',
585: 1:      'question': 'TAGCCTAGCT',
585: 1:      'valid': true
585: 1:    },
585: 1:    {
585: 1:      'answer': 'CTAGCTAGCT',
585: 1:      'question': 'GATCGATCGA',
585: 1:      'valid': true
585: 1:    },
585: 1:    {
585: 1:      'answer': 'GATCGATCGATCGATCGA',
585: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
585: 1:      'valid': true
585: 1:    },
585: 1:    {
585: 1:      'answer': 'TGCATCGATCGATCGAT',
585: 1:      'question': 'ACGTAGCTAGCTAGCTA',
585: 1:      'valid': true
585: 1:    }
585: 1:  ],
585: 1:  'info': [
585: 1:    '✅f(TTTT) = AAAA',
585: 1:    '✅f(AAAA) = TTTT',
585: 1:    '✅f(TAACG) = ATTGC',
585: 1:    '✅f(ATTGC) = TAACG',
585: 1:    '✅f(CATA) = GTAT',
585: 1:    '✅f(GTAT) = CATA',
585: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
585: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
585: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
585: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
585: 1:    '❌f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = ??? != GATCGATCGATCGATCGATCGATCGA'
585: 1:  ],
585: 1:  'level': 21,
585: 1:  'nextQuestion': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
585: 1:  'questions': [
585: 1:    'TTTT',
585: 1:    'AAAA',
585: 1:    'TAACG',
585: 1:    'ATTGC',
585: 1:    'CATA',
585: 1:    'GTAT',
585: 1:    'TAGCCTAGCT',
585: 1:    'GATCGATCGA',
585: 1:    'CTAGCTAGCTAGCTAGCT',
585: 1:    'ACGTAGCTAGCTAGCTA',
585: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT'
585: 1:  ]
585: 1:}
585: 1:Scores: 41873
585: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA']')
585: 1:Fire Event: PassTest{complexity=25, testCount=27}
------------------------------------------
586: 1:BoardData {
586: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
586: 1:  'expectedAnswer': 'CGATCGATCGATCGATCGATCGATCG',
586: 1:  'history': [
586: 1:    {
586: 1:      'answer': 'AAAA',
586: 1:      'question': 'TTTT',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': 'TTTT',
586: 1:      'question': 'AAAA',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': 'ATTGC',
586: 1:      'question': 'TAACG',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': 'TAACG',
586: 1:      'question': 'ATTGC',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': 'GTAT',
586: 1:      'question': 'CATA',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': 'CATA',
586: 1:      'question': 'GTAT',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': 'ATCGGATCGA',
586: 1:      'question': 'TAGCCTAGCT',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': 'CTAGCTAGCT',
586: 1:      'question': 'GATCGATCGA',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': 'GATCGATCGATCGATCGA',
586: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': 'TGCATCGATCGATCGAT',
586: 1:      'question': 'ACGTAGCTAGCTAGCTA',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
586: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
586: 1:      'valid': true
586: 1:    }
586: 1:  ],
586: 1:  'info': [
586: 1:    '✅f(TTTT) = AAAA',
586: 1:    '✅f(AAAA) = TTTT',
586: 1:    '✅f(TAACG) = ATTGC',
586: 1:    '✅f(ATTGC) = TAACG',
586: 1:    '✅f(CATA) = GTAT',
586: 1:    '✅f(GTAT) = CATA',
586: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
586: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
586: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
586: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
586: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
586: 1:    '❌f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = ??? != CGATCGATCGATCGATCGATCGATCG'
586: 1:  ],
586: 1:  'level': 21,
586: 1:  'nextQuestion': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
586: 1:  'questions': [
586: 1:    'TTTT',
586: 1:    'AAAA',
586: 1:    'TAACG',
586: 1:    'ATTGC',
586: 1:    'CATA',
586: 1:    'GTAT',
586: 1:    'TAGCCTAGCT',
586: 1:    'GATCGATCGA',
586: 1:    'CTAGCTAGCTAGCTAGCT',
586: 1:    'ACGTAGCTAGCTAGCTA',
586: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
586: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC'
586: 1:  ]
586: 1:}
586: 1:Scores: 41882
586: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG']')
586: 1:Fire Event: PassTest{complexity=25, testCount=27}
------------------------------------------
587: 1:BoardData {
587: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
587: 1:  'expectedAnswer': 'GATCGATCGATCGATCGATCGATCGATCG',
587: 1:  'history': [
587: 1:    {
587: 1:      'answer': 'AAAA',
587: 1:      'question': 'TTTT',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': 'TTTT',
587: 1:      'question': 'AAAA',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': 'ATTGC',
587: 1:      'question': 'TAACG',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': 'TAACG',
587: 1:      'question': 'ATTGC',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': 'GTAT',
587: 1:      'question': 'CATA',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': 'CATA',
587: 1:      'question': 'GTAT',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': 'ATCGGATCGA',
587: 1:      'question': 'TAGCCTAGCT',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': 'CTAGCTAGCT',
587: 1:      'question': 'GATCGATCGA',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': 'GATCGATCGATCGATCGA',
587: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': 'TGCATCGATCGATCGAT',
587: 1:      'question': 'ACGTAGCTAGCTAGCTA',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
587: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
587: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
587: 1:      'valid': true
587: 1:    }
587: 1:  ],
587: 1:  'info': [
587: 1:    '✅f(TTTT) = AAAA',
587: 1:    '✅f(AAAA) = TTTT',
587: 1:    '✅f(TAACG) = ATTGC',
587: 1:    '✅f(ATTGC) = TAACG',
587: 1:    '✅f(CATA) = GTAT',
587: 1:    '✅f(GTAT) = CATA',
587: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
587: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
587: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
587: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
587: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
587: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
587: 1:    '❌f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = ??? != GATCGATCGATCGATCGATCGATCGATCG'
587: 1:  ],
587: 1:  'level': 21,
587: 1:  'nextQuestion': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
587: 1:  'questions': [
587: 1:    'TTTT',
587: 1:    'AAAA',
587: 1:    'TAACG',
587: 1:    'ATTGC',
587: 1:    'CATA',
587: 1:    'GTAT',
587: 1:    'TAGCCTAGCT',
587: 1:    'GATCGATCGA',
587: 1:    'CTAGCTAGCTAGCTAGCT',
587: 1:    'ACGTAGCTAGCTAGCTA',
587: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
587: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
587: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC'
587: 1:  ]
587: 1:}
587: 1:Scores: 41891
587: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG']')
587: 1:Fire Event: PassTest{complexity=25, testCount=27}
------------------------------------------
588: 1:BoardData {
588: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
588: 1:  'expectedAnswer': 'TCGATCGATCGATCGATCGATCGATCGAT',
588: 1:  'history': [
588: 1:    {
588: 1:      'answer': 'AAAA',
588: 1:      'question': 'TTTT',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': 'TTTT',
588: 1:      'question': 'AAAA',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': 'ATTGC',
588: 1:      'question': 'TAACG',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': 'TAACG',
588: 1:      'question': 'ATTGC',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': 'GTAT',
588: 1:      'question': 'CATA',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': 'CATA',
588: 1:      'question': 'GTAT',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': 'ATCGGATCGA',
588: 1:      'question': 'TAGCCTAGCT',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': 'CTAGCTAGCT',
588: 1:      'question': 'GATCGATCGA',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': 'GATCGATCGATCGATCGA',
588: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': 'TGCATCGATCGATCGAT',
588: 1:      'question': 'ACGTAGCTAGCTAGCTA',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
588: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
588: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
588: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
588: 1:      'valid': true
588: 1:    }
588: 1:  ],
588: 1:  'info': [
588: 1:    '✅f(TTTT) = AAAA',
588: 1:    '✅f(AAAA) = TTTT',
588: 1:    '✅f(TAACG) = ATTGC',
588: 1:    '✅f(ATTGC) = TAACG',
588: 1:    '✅f(CATA) = GTAT',
588: 1:    '✅f(GTAT) = CATA',
588: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
588: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
588: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
588: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
588: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
588: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
588: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
588: 1:    '❌f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = ??? != TCGATCGATCGATCGATCGATCGATCGAT'
588: 1:  ],
588: 1:  'level': 21,
588: 1:  'nextQuestion': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
588: 1:  'questions': [
588: 1:    'TTTT',
588: 1:    'AAAA',
588: 1:    'TAACG',
588: 1:    'ATTGC',
588: 1:    'CATA',
588: 1:    'GTAT',
588: 1:    'TAGCCTAGCT',
588: 1:    'GATCGATCGA',
588: 1:    'CTAGCTAGCTAGCTAGCT',
588: 1:    'ACGTAGCTAGCTAGCTA',
588: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
588: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
588: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
588: 1:    'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA'
588: 1:  ]
588: 1:}
588: 1:Scores: 41900
588: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG', 'TCGATCGATCGATCGATCGATCGATCGAT']')
588: 1:Fire Event: PassTest{complexity=25, testCount=27}
------------------------------------------
589: 1:BoardData {
589: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
589: 1:  'expectedAnswer': 'CGATCGATCGATCGATCGATCGATCGATCG',
589: 1:  'history': [
589: 1:    {
589: 1:      'answer': 'AAAA',
589: 1:      'question': 'TTTT',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': 'TTTT',
589: 1:      'question': 'AAAA',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': 'ATTGC',
589: 1:      'question': 'TAACG',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': 'TAACG',
589: 1:      'question': 'ATTGC',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': 'GTAT',
589: 1:      'question': 'CATA',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': 'CATA',
589: 1:      'question': 'GTAT',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': 'ATCGGATCGA',
589: 1:      'question': 'TAGCCTAGCT',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': 'CTAGCTAGCT',
589: 1:      'question': 'GATCGATCGA',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': 'GATCGATCGATCGATCGA',
589: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': 'TGCATCGATCGATCGAT',
589: 1:      'question': 'ACGTAGCTAGCTAGCTA',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
589: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
589: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
589: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': 'TCGATCGATCGATCGATCGATCGATCGAT',
589: 1:      'question': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
589: 1:      'valid': true
589: 1:    }
589: 1:  ],
589: 1:  'info': [
589: 1:    '✅f(TTTT) = AAAA',
589: 1:    '✅f(AAAA) = TTTT',
589: 1:    '✅f(TAACG) = ATTGC',
589: 1:    '✅f(ATTGC) = TAACG',
589: 1:    '✅f(CATA) = GTAT',
589: 1:    '✅f(GTAT) = CATA',
589: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
589: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
589: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
589: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
589: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
589: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
589: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
589: 1:    '✅f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = TCGATCGATCGATCGATCGATCGATCGAT',
589: 1:    '❌f(GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = ??? != CGATCGATCGATCGATCGATCGATCGATCG'
589: 1:  ],
589: 1:  'level': 21,
589: 1:  'nextQuestion': 'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
589: 1:  'questions': [
589: 1:    'TTTT',
589: 1:    'AAAA',
589: 1:    'TAACG',
589: 1:    'ATTGC',
589: 1:    'CATA',
589: 1:    'GTAT',
589: 1:    'TAGCCTAGCT',
589: 1:    'GATCGATCGA',
589: 1:    'CTAGCTAGCTAGCTAGCT',
589: 1:    'ACGTAGCTAGCTAGCTA',
589: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
589: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
589: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
589: 1:    'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
589: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC'
589: 1:  ]
589: 1:}
589: 1:Scores: 41909
589: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG', 'TCGATCGATCGATCGATCGATCGATCGAT', 'CGATCGATCGATCGATCGATCGATCGATCG']')
589: 1:Fire Event: PassTest{complexity=25, testCount=27}
------------------------------------------
590: 1:BoardData {
590: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
590: 1:  'expectedAnswer': 'GATCGATCGATCGATCGATCGATCGATCGA',
590: 1:  'history': [
590: 1:    {
590: 1:      'answer': 'AAAA',
590: 1:      'question': 'TTTT',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': 'TTTT',
590: 1:      'question': 'AAAA',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': 'ATTGC',
590: 1:      'question': 'TAACG',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': 'TAACG',
590: 1:      'question': 'ATTGC',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': 'GTAT',
590: 1:      'question': 'CATA',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': 'CATA',
590: 1:      'question': 'GTAT',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': 'ATCGGATCGA',
590: 1:      'question': 'TAGCCTAGCT',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': 'CTAGCTAGCT',
590: 1:      'question': 'GATCGATCGA',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': 'GATCGATCGATCGATCGA',
590: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': 'TGCATCGATCGATCGAT',
590: 1:      'question': 'ACGTAGCTAGCTAGCTA',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
590: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
590: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
590: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': 'TCGATCGATCGATCGATCGATCGATCGAT',
590: 1:      'question': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCGATCG',
590: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
590: 1:      'valid': true
590: 1:    }
590: 1:  ],
590: 1:  'info': [
590: 1:    '✅f(TTTT) = AAAA',
590: 1:    '✅f(AAAA) = TTTT',
590: 1:    '✅f(TAACG) = ATTGC',
590: 1:    '✅f(ATTGC) = TAACG',
590: 1:    '✅f(CATA) = GTAT',
590: 1:    '✅f(GTAT) = CATA',
590: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
590: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
590: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
590: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
590: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
590: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
590: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
590: 1:    '✅f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = TCGATCGATCGATCGATCGATCGATCGAT',
590: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCGATCG',
590: 1:    '❌f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT) = ??? != GATCGATCGATCGATCGATCGATCGATCGA'
590: 1:  ],
590: 1:  'level': 21,
590: 1:  'nextQuestion': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
590: 1:  'questions': [
590: 1:    'TTTT',
590: 1:    'AAAA',
590: 1:    'TAACG',
590: 1:    'ATTGC',
590: 1:    'CATA',
590: 1:    'GTAT',
590: 1:    'TAGCCTAGCT',
590: 1:    'GATCGATCGA',
590: 1:    'CTAGCTAGCTAGCTAGCT',
590: 1:    'ACGTAGCTAGCTAGCTA',
590: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
590: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
590: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
590: 1:    'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
590: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
590: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT'
590: 1:  ]
590: 1:}
590: 1:Scores: 41918
590: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG', 'TCGATCGATCGATCGATCGATCGATCGAT', 'CGATCGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCGA']')
590: 1:Fire Event: PassTest{complexity=25, testCount=27}
------------------------------------------
591: 1:BoardData {
591: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
591: 1:  'expectedAnswer': 'TAGCTAGCTAGCTAGCTAG',
591: 1:  'history': [
591: 1:    {
591: 1:      'answer': 'AAAA',
591: 1:      'question': 'TTTT',
591: 1:      'valid': true
591: 1:    },
591: 1:    {
591: 1:      'answer': 'TTTT',
591: 1:      'question': 'AAAA',
591: 1:      'valid': true
591: 1:    },
591: 1:    {
591: 1:      'answer': 'ATTGC',
591: 1:      'question': 'TAACG',
591: 1:      'valid': true
591: 1:    },
591: 1:    {
591: 1:      'answer': 'TAACG',
591: 1:      'question': 'ATTGC',
591: 1:      'valid': true
591: 1:    },
591: 1:    {
591: 1:      'answer': 'GTAT',
591: 1:      'question': 'CATA',
591: 1:      'valid': true
591: 1:    },
591: 1:    {
591: 1:      'answer': 'CATA',
591: 1:      'question': 'GTAT',
591: 1:      'valid': true
591: 1:    },
591: 1:    {
591: 1:      'answer': 'ATCGGATCGA',
591: 1:      'question': 'TAGCCTAGCT',
591: 1:      'valid': true
591: 1:    },
591: 1:    {
591: 1:      'answer': 'CTAGCTAGCT',
591: 1:      'question': 'GATCGATCGA',
591: 1:      'valid': true
591: 1:    },
591: 1:    {
591: 1:      'answer': 'GATCGATCGATCGATCGA',
591: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
591: 1:      'valid': true
591: 1:    },
591: 1:    {
591: 1:      'answer': 'TGCATCGATCGATCGAT',
591: 1:      'question': 'ACGTAGCTAGCTAGCTA',
591: 1:      'valid': true
591: 1:    },
591: 1:    {
591: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
591: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
591: 1:      'valid': true
591: 1:    },
591: 1:    {
591: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
591: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
591: 1:      'valid': true
591: 1:    },
591: 1:    {
591: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
591: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
591: 1:      'valid': true
591: 1:    },
591: 1:    {
591: 1:      'answer': 'TCGATCGATCGATCGATCGATCGATCGAT',
591: 1:      'question': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
591: 1:      'valid': true
591: 1:    },
591: 1:    {
591: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCGATCG',
591: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
591: 1:      'valid': true
591: 1:    },
591: 1:    {
591: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCGA',
591: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
591: 1:      'valid': true
591: 1:    }
591: 1:  ],
591: 1:  'info': [
591: 1:    '✅f(TTTT) = AAAA',
591: 1:    '✅f(AAAA) = TTTT',
591: 1:    '✅f(TAACG) = ATTGC',
591: 1:    '✅f(ATTGC) = TAACG',
591: 1:    '✅f(CATA) = GTAT',
591: 1:    '✅f(GTAT) = CATA',
591: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
591: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
591: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
591: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
591: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
591: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
591: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
591: 1:    '✅f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = TCGATCGATCGATCGATCGATCGATCGAT',
591: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCGATCG',
591: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGATCGA',
591: 1:    '❌f(ATCGATCGATCGATCGATC) = ??? != TAGCTAGCTAGCTAGCTAG'
591: 1:  ],
591: 1:  'level': 21,
591: 1:  'nextQuestion': 'ATCGATCGATCGATCGATC',
591: 1:  'questions': [
591: 1:    'TTTT',
591: 1:    'AAAA',
591: 1:    'TAACG',
591: 1:    'ATTGC',
591: 1:    'CATA',
591: 1:    'GTAT',
591: 1:    'TAGCCTAGCT',
591: 1:    'GATCGATCGA',
591: 1:    'CTAGCTAGCTAGCTAGCT',
591: 1:    'ACGTAGCTAGCTAGCTA',
591: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
591: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
591: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
591: 1:    'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
591: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
591: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
591: 1:    'ATCGATCGATCGATCGATC'
591: 1:  ]
591: 1:}
591: 1:Scores: 41927
591: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG', 'TCGATCGATCGATCGATCGATCGATCGAT', 'CGATCGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCGA', 'TAGCTAGCTAGCTAGCTAG']')
591: 1:Fire Event: PassTest{complexity=25, testCount=27}
------------------------------------------
592: 1:BoardData {
592: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
592: 1:  'expectedAnswer': 'GTAGCTAGCTAGCTAGCT',
592: 1:  'history': [
592: 1:    {
592: 1:      'answer': 'AAAA',
592: 1:      'question': 'TTTT',
592: 1:      'valid': true
592: 1:    },
592: 1:    {
592: 1:      'answer': 'TTTT',
592: 1:      'question': 'AAAA',
592: 1:      'valid': true
592: 1:    },
592: 1:    {
592: 1:      'answer': 'ATTGC',
592: 1:      'question': 'TAACG',
592: 1:      'valid': true
592: 1:    },
592: 1:    {
592: 1:      'answer': 'TAACG',
592: 1:      'question': 'ATTGC',
592: 1:      'valid': true
592: 1:    },
592: 1:    {
592: 1:      'answer': 'GTAT',
592: 1:      'question': 'CATA',
592: 1:      'valid': true
592: 1:    },
592: 1:    {
592: 1:      'answer': 'CATA',
592: 1:      'question': 'GTAT',
592: 1:      'valid': true
592: 1:    },
592: 1:    {
592: 1:      'answer': 'ATCGGATCGA',
592: 1:      'question': 'TAGCCTAGCT',
592: 1:      'valid': true
592: 1:    },
592: 1:    {
592: 1:      'answer': 'CTAGCTAGCT',
592: 1:      'question': 'GATCGATCGA',
592: 1:      'valid': true
592: 1:    },
592: 1:    {
592: 1:      'answer': 'GATCGATCGATCGATCGA',
592: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
592: 1:      'valid': true
592: 1:    },
592: 1:    {
592: 1:      'answer': 'TGCATCGATCGATCGAT',
592: 1:      'question': 'ACGTAGCTAGCTAGCTA',
592: 1:      'valid': true
592: 1:    },
592: 1:    {
592: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
592: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
592: 1:      'valid': true
592: 1:    },
592: 1:    {
592: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
592: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
592: 1:      'valid': true
592: 1:    },
592: 1:    {
592: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
592: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
592: 1:      'valid': true
592: 1:    },
592: 1:    {
592: 1:      'answer': 'TCGATCGATCGATCGATCGATCGATCGAT',
592: 1:      'question': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
592: 1:      'valid': true
592: 1:    },
592: 1:    {
592: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCGATCG',
592: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
592: 1:      'valid': true
592: 1:    },
592: 1:    {
592: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCGA',
592: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
592: 1:      'valid': true
592: 1:    },
592: 1:    {
592: 1:      'answer': 'TAGCTAGCTAGCTAGCTAG',
592: 1:      'question': 'ATCGATCGATCGATCGATC',
592: 1:      'valid': true
592: 1:    }
592: 1:  ],
592: 1:  'info': [
592: 1:    '✅f(TTTT) = AAAA',
592: 1:    '✅f(AAAA) = TTTT',
592: 1:    '✅f(TAACG) = ATTGC',
592: 1:    '✅f(ATTGC) = TAACG',
592: 1:    '✅f(CATA) = GTAT',
592: 1:    '✅f(GTAT) = CATA',
592: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
592: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
592: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
592: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
592: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
592: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
592: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
592: 1:    '✅f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = TCGATCGATCGATCGATCGATCGATCGAT',
592: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCGATCG',
592: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGATCGA',
592: 1:    '✅f(ATCGATCGATCGATCGATC) = TAGCTAGCTAGCTAGCTAG',
592: 1:    '❌f(CATCGATCGATCGATCGA) = ??? != GTAGCTAGCTAGCTAGCT'
592: 1:  ],
592: 1:  'level': 21,
592: 1:  'nextQuestion': 'CATCGATCGATCGATCGA',
592: 1:  'questions': [
592: 1:    'TTTT',
592: 1:    'AAAA',
592: 1:    'TAACG',
592: 1:    'ATTGC',
592: 1:    'CATA',
592: 1:    'GTAT',
592: 1:    'TAGCCTAGCT',
592: 1:    'GATCGATCGA',
592: 1:    'CTAGCTAGCTAGCTAGCT',
592: 1:    'ACGTAGCTAGCTAGCTA',
592: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
592: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
592: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
592: 1:    'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
592: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
592: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
592: 1:    'ATCGATCGATCGATCGATC',
592: 1:    'CATCGATCGATCGATCGA'
592: 1:  ]
592: 1:}
592: 1:Scores: 41936
592: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG', 'TCGATCGATCGATCGATCGATCGATCGAT', 'CGATCGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCGA', 'TAGCTAGCTAGCTAGCTAG', 'GTAGCTAGCTAGCTAGCT']')
592: 1:Fire Event: PassTest{complexity=25, testCount=27}
------------------------------------------
593: 1:BoardData {
593: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
593: 1:  'expectedAnswer': 'CTAGCTAGCTAGCTAGCTAGCTA',
593: 1:  'history': [
593: 1:    {
593: 1:      'answer': 'AAAA',
593: 1:      'question': 'TTTT',
593: 1:      'valid': true
593: 1:    },
593: 1:    {
593: 1:      'answer': 'TTTT',
593: 1:      'question': 'AAAA',
593: 1:      'valid': true
593: 1:    },
593: 1:    {
593: 1:      'answer': 'ATTGC',
593: 1:      'question': 'TAACG',
593: 1:      'valid': true
593: 1:    },
593: 1:    {
593: 1:      'answer': 'TAACG',
593: 1:      'question': 'ATTGC',
593: 1:      'valid': true
593: 1:    },
593: 1:    {
593: 1:      'answer': 'GTAT',
593: 1:      'question': 'CATA',
593: 1:      'valid': true
593: 1:    },
593: 1:    {
593: 1:      'answer': 'CATA',
593: 1:      'question': 'GTAT',
593: 1:      'valid': true
593: 1:    },
593: 1:    {
593: 1:      'answer': 'ATCGGATCGA',
593: 1:      'question': 'TAGCCTAGCT',
593: 1:      'valid': true
593: 1:    },
593: 1:    {
593: 1:      'answer': 'CTAGCTAGCT',
593: 1:      'question': 'GATCGATCGA',
593: 1:      'valid': true
593: 1:    },
593: 1:    {
593: 1:      'answer': 'GATCGATCGATCGATCGA',
593: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
593: 1:      'valid': true
593: 1:    },
593: 1:    {
593: 1:      'answer': 'TGCATCGATCGATCGAT',
593: 1:      'question': 'ACGTAGCTAGCTAGCTA',
593: 1:      'valid': true
593: 1:    },
593: 1:    {
593: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
593: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
593: 1:      'valid': true
593: 1:    },
593: 1:    {
593: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
593: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
593: 1:      'valid': true
593: 1:    },
593: 1:    {
593: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
593: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
593: 1:      'valid': true
593: 1:    },
593: 1:    {
593: 1:      'answer': 'TCGATCGATCGATCGATCGATCGATCGAT',
593: 1:      'question': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
593: 1:      'valid': true
593: 1:    },
593: 1:    {
593: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCGATCG',
593: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
593: 1:      'valid': true
593: 1:    },
593: 1:    {
593: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCGA',
593: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
593: 1:      'valid': true
593: 1:    },
593: 1:    {
593: 1:      'answer': 'TAGCTAGCTAGCTAGCTAG',
593: 1:      'question': 'ATCGATCGATCGATCGATC',
593: 1:      'valid': true
593: 1:    },
593: 1:    {
593: 1:      'answer': 'GTAGCTAGCTAGCTAGCT',
593: 1:      'question': 'CATCGATCGATCGATCGA',
593: 1:      'valid': true
593: 1:    }
593: 1:  ],
593: 1:  'info': [
593: 1:    '✅f(TTTT) = AAAA',
593: 1:    '✅f(AAAA) = TTTT',
593: 1:    '✅f(TAACG) = ATTGC',
593: 1:    '✅f(ATTGC) = TAACG',
593: 1:    '✅f(CATA) = GTAT',
593: 1:    '✅f(GTAT) = CATA',
593: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
593: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
593: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
593: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
593: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
593: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
593: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
593: 1:    '✅f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = TCGATCGATCGATCGATCGATCGATCGAT',
593: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCGATCG',
593: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGATCGA',
593: 1:    '✅f(ATCGATCGATCGATCGATC) = TAGCTAGCTAGCTAGCTAG',
593: 1:    '✅f(CATCGATCGATCGATCGA) = GTAGCTAGCTAGCTAGCT',
593: 1:    '❌f(GATCGATCGATCGATCGATCGAT) = ??? != CTAGCTAGCTAGCTAGCTAGCTA'
593: 1:  ],
593: 1:  'level': 21,
593: 1:  'nextQuestion': 'GATCGATCGATCGATCGATCGAT',
593: 1:  'questions': [
593: 1:    'TTTT',
593: 1:    'AAAA',
593: 1:    'TAACG',
593: 1:    'ATTGC',
593: 1:    'CATA',
593: 1:    'GTAT',
593: 1:    'TAGCCTAGCT',
593: 1:    'GATCGATCGA',
593: 1:    'CTAGCTAGCTAGCTAGCT',
593: 1:    'ACGTAGCTAGCTAGCTA',
593: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
593: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
593: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
593: 1:    'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
593: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
593: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
593: 1:    'ATCGATCGATCGATCGATC',
593: 1:    'CATCGATCGATCGATCGA',
593: 1:    'GATCGATCGATCGATCGATCGAT'
593: 1:  ]
593: 1:}
593: 1:Scores: 41945
593: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG', 'TCGATCGATCGATCGATCGATCGATCGAT', 'CGATCGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCGA', 'TAGCTAGCTAGCTAGCTAG', 'GTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTA']')
593: 1:Fire Event: PassTest{complexity=25, testCount=27}
------------------------------------------
594: 1:BoardData {
594: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
594: 1:  'expectedAnswer': 'AGCTAGCTAGCTAGCTAGCT',
594: 1:  'history': [
594: 1:    {
594: 1:      'answer': 'AAAA',
594: 1:      'question': 'TTTT',
594: 1:      'valid': true
594: 1:    },
594: 1:    {
594: 1:      'answer': 'TTTT',
594: 1:      'question': 'AAAA',
594: 1:      'valid': true
594: 1:    },
594: 1:    {
594: 1:      'answer': 'ATTGC',
594: 1:      'question': 'TAACG',
594: 1:      'valid': true
594: 1:    },
594: 1:    {
594: 1:      'answer': 'TAACG',
594: 1:      'question': 'ATTGC',
594: 1:      'valid': true
594: 1:    },
594: 1:    {
594: 1:      'answer': 'GTAT',
594: 1:      'question': 'CATA',
594: 1:      'valid': true
594: 1:    },
594: 1:    {
594: 1:      'answer': 'CATA',
594: 1:      'question': 'GTAT',
594: 1:      'valid': true
594: 1:    },
594: 1:    {
594: 1:      'answer': 'ATCGGATCGA',
594: 1:      'question': 'TAGCCTAGCT',
594: 1:      'valid': true
594: 1:    },
594: 1:    {
594: 1:      'answer': 'CTAGCTAGCT',
594: 1:      'question': 'GATCGATCGA',
594: 1:      'valid': true
594: 1:    },
594: 1:    {
594: 1:      'answer': 'GATCGATCGATCGATCGA',
594: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
594: 1:      'valid': true
594: 1:    },
594: 1:    {
594: 1:      'answer': 'TGCATCGATCGATCGAT',
594: 1:      'question': 'ACGTAGCTAGCTAGCTA',
594: 1:      'valid': true
594: 1:    },
594: 1:    {
594: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
594: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
594: 1:      'valid': true
594: 1:    },
594: 1:    {
594: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
594: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
594: 1:      'valid': true
594: 1:    },
594: 1:    {
594: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
594: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
594: 1:      'valid': true
594: 1:    },
594: 1:    {
594: 1:      'answer': 'TCGATCGATCGATCGATCGATCGATCGAT',
594: 1:      'question': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
594: 1:      'valid': true
594: 1:    },
594: 1:    {
594: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCGATCG',
594: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
594: 1:      'valid': true
594: 1:    },
594: 1:    {
594: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCGA',
594: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
594: 1:      'valid': true
594: 1:    },
594: 1:    {
594: 1:      'answer': 'TAGCTAGCTAGCTAGCTAG',
594: 1:      'question': 'ATCGATCGATCGATCGATC',
594: 1:      'valid': true
594: 1:    },
594: 1:    {
594: 1:      'answer': 'GTAGCTAGCTAGCTAGCT',
594: 1:      'question': 'CATCGATCGATCGATCGA',
594: 1:      'valid': true
594: 1:    },
594: 1:    {
594: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTA',
594: 1:      'question': 'GATCGATCGATCGATCGATCGAT',
594: 1:      'valid': true
594: 1:    }
594: 1:  ],
594: 1:  'info': [
594: 1:    '✅f(TTTT) = AAAA',
594: 1:    '✅f(AAAA) = TTTT',
594: 1:    '✅f(TAACG) = ATTGC',
594: 1:    '✅f(ATTGC) = TAACG',
594: 1:    '✅f(CATA) = GTAT',
594: 1:    '✅f(GTAT) = CATA',
594: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
594: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
594: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
594: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
594: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
594: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
594: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
594: 1:    '✅f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = TCGATCGATCGATCGATCGATCGATCGAT',
594: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCGATCG',
594: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGATCGA',
594: 1:    '✅f(ATCGATCGATCGATCGATC) = TAGCTAGCTAGCTAGCTAG',
594: 1:    '✅f(CATCGATCGATCGATCGA) = GTAGCTAGCTAGCTAGCT',
594: 1:    '✅f(GATCGATCGATCGATCGATCGAT) = CTAGCTAGCTAGCTAGCTAGCTA',
594: 1:    '❌f(TCGATCGATCGATCGATCGA) = ??? != AGCTAGCTAGCTAGCTAGCT'
594: 1:  ],
594: 1:  'level': 21,
594: 1:  'nextQuestion': 'TCGATCGATCGATCGATCGA',
594: 1:  'questions': [
594: 1:    'TTTT',
594: 1:    'AAAA',
594: 1:    'TAACG',
594: 1:    'ATTGC',
594: 1:    'CATA',
594: 1:    'GTAT',
594: 1:    'TAGCCTAGCT',
594: 1:    'GATCGATCGA',
594: 1:    'CTAGCTAGCTAGCTAGCT',
594: 1:    'ACGTAGCTAGCTAGCTA',
594: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
594: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
594: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
594: 1:    'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
594: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
594: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
594: 1:    'ATCGATCGATCGATCGATC',
594: 1:    'CATCGATCGATCGATCGA',
594: 1:    'GATCGATCGATCGATCGATCGAT',
594: 1:    'TCGATCGATCGATCGATCGA'
594: 1:  ]
594: 1:}
594: 1:Scores: 41954
594: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG', 'TCGATCGATCGATCGATCGATCGATCGAT', 'CGATCGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCGA', 'TAGCTAGCTAGCTAGCTAG', 'GTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTA', 'AGCTAGCTAGCTAGCTAGCT']')
594: 1:Fire Event: PassTest{complexity=25, testCount=27}
------------------------------------------
595: 1:BoardData {
595: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
595: 1:  'expectedAnswer': 'CTAGCTAGCTAGCTAGCTAGCTAG',
595: 1:  'history': [
595: 1:    {
595: 1:      'answer': 'AAAA',
595: 1:      'question': 'TTTT',
595: 1:      'valid': true
595: 1:    },
595: 1:    {
595: 1:      'answer': 'TTTT',
595: 1:      'question': 'AAAA',
595: 1:      'valid': true
595: 1:    },
595: 1:    {
595: 1:      'answer': 'ATTGC',
595: 1:      'question': 'TAACG',
595: 1:      'valid': true
595: 1:    },
595: 1:    {
595: 1:      'answer': 'TAACG',
595: 1:      'question': 'ATTGC',
595: 1:      'valid': true
595: 1:    },
595: 1:    {
595: 1:      'answer': 'GTAT',
595: 1:      'question': 'CATA',
595: 1:      'valid': true
595: 1:    },
595: 1:    {
595: 1:      'answer': 'CATA',
595: 1:      'question': 'GTAT',
595: 1:      'valid': true
595: 1:    },
595: 1:    {
595: 1:      'answer': 'ATCGGATCGA',
595: 1:      'question': 'TAGCCTAGCT',
595: 1:      'valid': true
595: 1:    },
595: 1:    {
595: 1:      'answer': 'CTAGCTAGCT',
595: 1:      'question': 'GATCGATCGA',
595: 1:      'valid': true
595: 1:    },
595: 1:    {
595: 1:      'answer': 'GATCGATCGATCGATCGA',
595: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
595: 1:      'valid': true
595: 1:    },
595: 1:    {
595: 1:      'answer': 'TGCATCGATCGATCGAT',
595: 1:      'question': 'ACGTAGCTAGCTAGCTA',
595: 1:      'valid': true
595: 1:    },
595: 1:    {
595: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
595: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
595: 1:      'valid': true
595: 1:    },
595: 1:    {
595: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
595: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
595: 1:      'valid': true
595: 1:    },
595: 1:    {
595: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
595: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
595: 1:      'valid': true
595: 1:    },
595: 1:    {
595: 1:      'answer': 'TCGATCGATCGATCGATCGATCGATCGAT',
595: 1:      'question': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
595: 1:      'valid': true
595: 1:    },
595: 1:    {
595: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCGATCG',
595: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
595: 1:      'valid': true
595: 1:    },
595: 1:    {
595: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCGA',
595: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
595: 1:      'valid': true
595: 1:    },
595: 1:    {
595: 1:      'answer': 'TAGCTAGCTAGCTAGCTAG',
595: 1:      'question': 'ATCGATCGATCGATCGATC',
595: 1:      'valid': true
595: 1:    },
595: 1:    {
595: 1:      'answer': 'GTAGCTAGCTAGCTAGCT',
595: 1:      'question': 'CATCGATCGATCGATCGA',
595: 1:      'valid': true
595: 1:    },
595: 1:    {
595: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTA',
595: 1:      'question': 'GATCGATCGATCGATCGATCGAT',
595: 1:      'valid': true
595: 1:    },
595: 1:    {
595: 1:      'answer': 'AGCTAGCTAGCTAGCTAGCT',
595: 1:      'question': 'TCGATCGATCGATCGATCGA',
595: 1:      'valid': true
595: 1:    }
595: 1:  ],
595: 1:  'info': [
595: 1:    '✅f(TTTT) = AAAA',
595: 1:    '✅f(AAAA) = TTTT',
595: 1:    '✅f(TAACG) = ATTGC',
595: 1:    '✅f(ATTGC) = TAACG',
595: 1:    '✅f(CATA) = GTAT',
595: 1:    '✅f(GTAT) = CATA',
595: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
595: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
595: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
595: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
595: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
595: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
595: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
595: 1:    '✅f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = TCGATCGATCGATCGATCGATCGATCGAT',
595: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCGATCG',
595: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGATCGA',
595: 1:    '✅f(ATCGATCGATCGATCGATC) = TAGCTAGCTAGCTAGCTAG',
595: 1:    '✅f(CATCGATCGATCGATCGA) = GTAGCTAGCTAGCTAGCT',
595: 1:    '✅f(GATCGATCGATCGATCGATCGAT) = CTAGCTAGCTAGCTAGCTAGCTA',
595: 1:    '✅f(TCGATCGATCGATCGATCGA) = AGCTAGCTAGCTAGCTAGCT',
595: 1:    '❌f(GATCGATCGATCGATCGATCGATC) = ??? != CTAGCTAGCTAGCTAGCTAGCTAG'
595: 1:  ],
595: 1:  'level': 21,
595: 1:  'nextQuestion': 'GATCGATCGATCGATCGATCGATC',
595: 1:  'questions': [
595: 1:    'TTTT',
595: 1:    'AAAA',
595: 1:    'TAACG',
595: 1:    'ATTGC',
595: 1:    'CATA',
595: 1:    'GTAT',
595: 1:    'TAGCCTAGCT',
595: 1:    'GATCGATCGA',
595: 1:    'CTAGCTAGCTAGCTAGCT',
595: 1:    'ACGTAGCTAGCTAGCTA',
595: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
595: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
595: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
595: 1:    'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
595: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
595: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
595: 1:    'ATCGATCGATCGATCGATC',
595: 1:    'CATCGATCGATCGATCGA',
595: 1:    'GATCGATCGATCGATCGATCGAT',
595: 1:    'TCGATCGATCGATCGATCGA',
595: 1:    'GATCGATCGATCGATCGATCGATC'
595: 1:  ]
595: 1:}
595: 1:Scores: 41963
595: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG', 'TCGATCGATCGATCGATCGATCGATCGAT', 'CGATCGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCGA', 'TAGCTAGCTAGCTAGCTAG', 'GTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTA', 'AGCTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTAG']')
595: 1:Fire Event: PassTest{complexity=25, testCount=27}
------------------------------------------
596: 1:BoardData {
596: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
596: 1:  'expectedAnswer': 'GATCGATCGATCGATCGATC',
596: 1:  'history': [
596: 1:    {
596: 1:      'answer': 'AAAA',
596: 1:      'question': 'TTTT',
596: 1:      'valid': true
596: 1:    },
596: 1:    {
596: 1:      'answer': 'TTTT',
596: 1:      'question': 'AAAA',
596: 1:      'valid': true
596: 1:    },
596: 1:    {
596: 1:      'answer': 'ATTGC',
596: 1:      'question': 'TAACG',
596: 1:      'valid': true
596: 1:    },
596: 1:    {
596: 1:      'answer': 'TAACG',
596: 1:      'question': 'ATTGC',
596: 1:      'valid': true
596: 1:    },
596: 1:    {
596: 1:      'answer': 'GTAT',
596: 1:      'question': 'CATA',
596: 1:      'valid': true
596: 1:    },
596: 1:    {
596: 1:      'answer': 'CATA',
596: 1:      'question': 'GTAT',
596: 1:      'valid': true
596: 1:    },
596: 1:    {
596: 1:      'answer': 'ATCGGATCGA',
596: 1:      'question': 'TAGCCTAGCT',
596: 1:      'valid': true
596: 1:    },
596: 1:    {
596: 1:      'answer': 'CTAGCTAGCT',
596: 1:      'question': 'GATCGATCGA',
596: 1:      'valid': true
596: 1:    },
596: 1:    {
596: 1:      'answer': 'GATCGATCGATCGATCGA',
596: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
596: 1:      'valid': true
596: 1:    },
596: 1:    {
596: 1:      'answer': 'TGCATCGATCGATCGAT',
596: 1:      'question': 'ACGTAGCTAGCTAGCTA',
596: 1:      'valid': true
596: 1:    },
596: 1:    {
596: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
596: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
596: 1:      'valid': true
596: 1:    },
596: 1:    {
596: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
596: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
596: 1:      'valid': true
596: 1:    },
596: 1:    {
596: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
596: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
596: 1:      'valid': true
596: 1:    },
596: 1:    {
596: 1:      'answer': 'TCGATCGATCGATCGATCGATCGATCGAT',
596: 1:      'question': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
596: 1:      'valid': true
596: 1:    },
596: 1:    {
596: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCGATCG',
596: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
596: 1:      'valid': true
596: 1:    },
596: 1:    {
596: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCGA',
596: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
596: 1:      'valid': true
596: 1:    },
596: 1:    {
596: 1:      'answer': 'TAGCTAGCTAGCTAGCTAG',
596: 1:      'question': 'ATCGATCGATCGATCGATC',
596: 1:      'valid': true
596: 1:    },
596: 1:    {
596: 1:      'answer': 'GTAGCTAGCTAGCTAGCT',
596: 1:      'question': 'CATCGATCGATCGATCGA',
596: 1:      'valid': true
596: 1:    },
596: 1:    {
596: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTA',
596: 1:      'question': 'GATCGATCGATCGATCGATCGAT',
596: 1:      'valid': true
596: 1:    },
596: 1:    {
596: 1:      'answer': 'AGCTAGCTAGCTAGCTAGCT',
596: 1:      'question': 'TCGATCGATCGATCGATCGA',
596: 1:      'valid': true
596: 1:    },
596: 1:    {
596: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTAG',
596: 1:      'question': 'GATCGATCGATCGATCGATCGATC',
596: 1:      'valid': true
596: 1:    }
596: 1:  ],
596: 1:  'info': [
596: 1:    '✅f(TTTT) = AAAA',
596: 1:    '✅f(AAAA) = TTTT',
596: 1:    '✅f(TAACG) = ATTGC',
596: 1:    '✅f(ATTGC) = TAACG',
596: 1:    '✅f(CATA) = GTAT',
596: 1:    '✅f(GTAT) = CATA',
596: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
596: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
596: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
596: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
596: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
596: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
596: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
596: 1:    '✅f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = TCGATCGATCGATCGATCGATCGATCGAT',
596: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCGATCG',
596: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGATCGA',
596: 1:    '✅f(ATCGATCGATCGATCGATC) = TAGCTAGCTAGCTAGCTAG',
596: 1:    '✅f(CATCGATCGATCGATCGA) = GTAGCTAGCTAGCTAGCT',
596: 1:    '✅f(GATCGATCGATCGATCGATCGAT) = CTAGCTAGCTAGCTAGCTAGCTA',
596: 1:    '✅f(TCGATCGATCGATCGATCGA) = AGCTAGCTAGCTAGCTAGCT',
596: 1:    '✅f(GATCGATCGATCGATCGATCGATC) = CTAGCTAGCTAGCTAGCTAGCTAG',
596: 1:    '❌f(CTAGCTAGCTAGCTAGCTAG) = ??? != GATCGATCGATCGATCGATC'
596: 1:  ],
596: 1:  'level': 21,
596: 1:  'nextQuestion': 'CTAGCTAGCTAGCTAGCTAG',
596: 1:  'questions': [
596: 1:    'TTTT',
596: 1:    'AAAA',
596: 1:    'TAACG',
596: 1:    'ATTGC',
596: 1:    'CATA',
596: 1:    'GTAT',
596: 1:    'TAGCCTAGCT',
596: 1:    'GATCGATCGA',
596: 1:    'CTAGCTAGCTAGCTAGCT',
596: 1:    'ACGTAGCTAGCTAGCTA',
596: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
596: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
596: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
596: 1:    'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
596: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
596: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
596: 1:    'ATCGATCGATCGATCGATC',
596: 1:    'CATCGATCGATCGATCGA',
596: 1:    'GATCGATCGATCGATCGATCGAT',
596: 1:    'TCGATCGATCGATCGATCGA',
596: 1:    'GATCGATCGATCGATCGATCGATC',
596: 1:    'CTAGCTAGCTAGCTAGCTAG'
596: 1:  ]
596: 1:}
596: 1:Scores: 41972
596: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG', 'TCGATCGATCGATCGATCGATCGATCGAT', 'CGATCGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCGA', 'TAGCTAGCTAGCTAGCTAG', 'GTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTA', 'AGCTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTAG', 'GATCGATCGATCGATCGATC']')
596: 1:Fire Event: PassTest{complexity=25, testCount=27}
------------------------------------------
597: 1:BoardData {
597: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
597: 1:  'expectedAnswer': 'TGCATGCATGCATGCATG',
597: 1:  'history': [
597: 1:    {
597: 1:      'answer': 'AAAA',
597: 1:      'question': 'TTTT',
597: 1:      'valid': true
597: 1:    },
597: 1:    {
597: 1:      'answer': 'TTTT',
597: 1:      'question': 'AAAA',
597: 1:      'valid': true
597: 1:    },
597: 1:    {
597: 1:      'answer': 'ATTGC',
597: 1:      'question': 'TAACG',
597: 1:      'valid': true
597: 1:    },
597: 1:    {
597: 1:      'answer': 'TAACG',
597: 1:      'question': 'ATTGC',
597: 1:      'valid': true
597: 1:    },
597: 1:    {
597: 1:      'answer': 'GTAT',
597: 1:      'question': 'CATA',
597: 1:      'valid': true
597: 1:    },
597: 1:    {
597: 1:      'answer': 'CATA',
597: 1:      'question': 'GTAT',
597: 1:      'valid': true
597: 1:    },
597: 1:    {
597: 1:      'answer': 'ATCGGATCGA',
597: 1:      'question': 'TAGCCTAGCT',
597: 1:      'valid': true
597: 1:    },
597: 1:    {
597: 1:      'answer': 'CTAGCTAGCT',
597: 1:      'question': 'GATCGATCGA',
597: 1:      'valid': true
597: 1:    },
597: 1:    {
597: 1:      'answer': 'GATCGATCGATCGATCGA',
597: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
597: 1:      'valid': true
597: 1:    },
597: 1:    {
597: 1:      'answer': 'TGCATCGATCGATCGAT',
597: 1:      'question': 'ACGTAGCTAGCTAGCTA',
597: 1:      'valid': true
597: 1:    },
597: 1:    {
597: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
597: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
597: 1:      'valid': true
597: 1:    },
597: 1:    {
597: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
597: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
597: 1:      'valid': true
597: 1:    },
597: 1:    {
597: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
597: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
597: 1:      'valid': true
597: 1:    },
597: 1:    {
597: 1:      'answer': 'TCGATCGATCGATCGATCGATCGATCGAT',
597: 1:      'question': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
597: 1:      'valid': true
597: 1:    },
597: 1:    {
597: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCGATCG',
597: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
597: 1:      'valid': true
597: 1:    },
597: 1:    {
597: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCGA',
597: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
597: 1:      'valid': true
597: 1:    },
597: 1:    {
597: 1:      'answer': 'TAGCTAGCTAGCTAGCTAG',
597: 1:      'question': 'ATCGATCGATCGATCGATC',
597: 1:      'valid': true
597: 1:    },
597: 1:    {
597: 1:      'answer': 'GTAGCTAGCTAGCTAGCT',
597: 1:      'question': 'CATCGATCGATCGATCGA',
597: 1:      'valid': true
597: 1:    },
597: 1:    {
597: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTA',
597: 1:      'question': 'GATCGATCGATCGATCGATCGAT',
597: 1:      'valid': true
597: 1:    },
597: 1:    {
597: 1:      'answer': 'AGCTAGCTAGCTAGCTAGCT',
597: 1:      'question': 'TCGATCGATCGATCGATCGA',
597: 1:      'valid': true
597: 1:    },
597: 1:    {
597: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTAG',
597: 1:      'question': 'GATCGATCGATCGATCGATCGATC',
597: 1:      'valid': true
597: 1:    },
597: 1:    {
597: 1:      'answer': 'GATCGATCGATCGATCGATC',
597: 1:      'question': 'CTAGCTAGCTAGCTAGCTAG',
597: 1:      'valid': true
597: 1:    }
597: 1:  ],
597: 1:  'info': [
597: 1:    '✅f(TTTT) = AAAA',
597: 1:    '✅f(AAAA) = TTTT',
597: 1:    '✅f(TAACG) = ATTGC',
597: 1:    '✅f(ATTGC) = TAACG',
597: 1:    '✅f(CATA) = GTAT',
597: 1:    '✅f(GTAT) = CATA',
597: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
597: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
597: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
597: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
597: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
597: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
597: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
597: 1:    '✅f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = TCGATCGATCGATCGATCGATCGATCGAT',
597: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCGATCG',
597: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGATCGA',
597: 1:    '✅f(ATCGATCGATCGATCGATC) = TAGCTAGCTAGCTAGCTAG',
597: 1:    '✅f(CATCGATCGATCGATCGA) = GTAGCTAGCTAGCTAGCT',
597: 1:    '✅f(GATCGATCGATCGATCGATCGAT) = CTAGCTAGCTAGCTAGCTAGCTA',
597: 1:    '✅f(TCGATCGATCGATCGATCGA) = AGCTAGCTAGCTAGCTAGCT',
597: 1:    '✅f(GATCGATCGATCGATCGATCGATC) = CTAGCTAGCTAGCTAGCTAGCTAG',
597: 1:    '✅f(CTAGCTAGCTAGCTAGCTAG) = GATCGATCGATCGATCGATC',
597: 1:    '❌f(ACGTACGTACGTACGTAC) = ??? != TGCATGCATGCATGCATG'
597: 1:  ],
597: 1:  'level': 21,
597: 1:  'nextQuestion': 'ACGTACGTACGTACGTAC',
597: 1:  'questions': [
597: 1:    'TTTT',
597: 1:    'AAAA',
597: 1:    'TAACG',
597: 1:    'ATTGC',
597: 1:    'CATA',
597: 1:    'GTAT',
597: 1:    'TAGCCTAGCT',
597: 1:    'GATCGATCGA',
597: 1:    'CTAGCTAGCTAGCTAGCT',
597: 1:    'ACGTAGCTAGCTAGCTA',
597: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
597: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
597: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
597: 1:    'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
597: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
597: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
597: 1:    'ATCGATCGATCGATCGATC',
597: 1:    'CATCGATCGATCGATCGA',
597: 1:    'GATCGATCGATCGATCGATCGAT',
597: 1:    'TCGATCGATCGATCGATCGA',
597: 1:    'GATCGATCGATCGATCGATCGATC',
597: 1:    'CTAGCTAGCTAGCTAGCTAG',
597: 1:    'ACGTACGTACGTACGTAC'
597: 1:  ]
597: 1:}
597: 1:Scores: 41981
597: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG', 'TCGATCGATCGATCGATCGATCGATCGAT', 'CGATCGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCGA', 'TAGCTAGCTAGCTAGCTAG', 'GTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTA', 'AGCTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTAG', 'GATCGATCGATCGATCGATC', 'TGCATGCATGCATGCATG']')
597: 1:Fire Event: PassTest{complexity=25, testCount=27}
------------------------------------------
598: 1:BoardData {
598: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
598: 1:  'expectedAnswer': 'GTGCTGCTGCTGCTGCT',
598: 1:  'history': [
598: 1:    {
598: 1:      'answer': 'AAAA',
598: 1:      'question': 'TTTT',
598: 1:      'valid': true
598: 1:    },
598: 1:    {
598: 1:      'answer': 'TTTT',
598: 1:      'question': 'AAAA',
598: 1:      'valid': true
598: 1:    },
598: 1:    {
598: 1:      'answer': 'ATTGC',
598: 1:      'question': 'TAACG',
598: 1:      'valid': true
598: 1:    },
598: 1:    {
598: 1:      'answer': 'TAACG',
598: 1:      'question': 'ATTGC',
598: 1:      'valid': true
598: 1:    },
598: 1:    {
598: 1:      'answer': 'GTAT',
598: 1:      'question': 'CATA',
598: 1:      'valid': true
598: 1:    },
598: 1:    {
598: 1:      'answer': 'CATA',
598: 1:      'question': 'GTAT',
598: 1:      'valid': true
598: 1:    },
598: 1:    {
598: 1:      'answer': 'ATCGGATCGA',
598: 1:      'question': 'TAGCCTAGCT',
598: 1:      'valid': true
598: 1:    },
598: 1:    {
598: 1:      'answer': 'CTAGCTAGCT',
598: 1:      'question': 'GATCGATCGA',
598: 1:      'valid': true
598: 1:    },
598: 1:    {
598: 1:      'answer': 'GATCGATCGATCGATCGA',
598: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
598: 1:      'valid': true
598: 1:    },
598: 1:    {
598: 1:      'answer': 'TGCATCGATCGATCGAT',
598: 1:      'question': 'ACGTAGCTAGCTAGCTA',
598: 1:      'valid': true
598: 1:    },
598: 1:    {
598: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
598: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
598: 1:      'valid': true
598: 1:    },
598: 1:    {
598: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
598: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
598: 1:      'valid': true
598: 1:    },
598: 1:    {
598: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
598: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
598: 1:      'valid': true
598: 1:    },
598: 1:    {
598: 1:      'answer': 'TCGATCGATCGATCGATCGATCGATCGAT',
598: 1:      'question': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
598: 1:      'valid': true
598: 1:    },
598: 1:    {
598: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCGATCG',
598: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
598: 1:      'valid': true
598: 1:    },
598: 1:    {
598: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCGA',
598: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
598: 1:      'valid': true
598: 1:    },
598: 1:    {
598: 1:      'answer': 'TAGCTAGCTAGCTAGCTAG',
598: 1:      'question': 'ATCGATCGATCGATCGATC',
598: 1:      'valid': true
598: 1:    },
598: 1:    {
598: 1:      'answer': 'GTAGCTAGCTAGCTAGCT',
598: 1:      'question': 'CATCGATCGATCGATCGA',
598: 1:      'valid': true
598: 1:    },
598: 1:    {
598: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTA',
598: 1:      'question': 'GATCGATCGATCGATCGATCGAT',
598: 1:      'valid': true
598: 1:    },
598: 1:    {
598: 1:      'answer': 'AGCTAGCTAGCTAGCTAGCT',
598: 1:      'question': 'TCGATCGATCGATCGATCGA',
598: 1:      'valid': true
598: 1:    },
598: 1:    {
598: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTAG',
598: 1:      'question': 'GATCGATCGATCGATCGATCGATC',
598: 1:      'valid': true
598: 1:    },
598: 1:    {
598: 1:      'answer': 'GATCGATCGATCGATCGATC',
598: 1:      'question': 'CTAGCTAGCTAGCTAGCTAG',
598: 1:      'valid': true
598: 1:    },
598: 1:    {
598: 1:      'answer': 'TGCATGCATGCATGCATG',
598: 1:      'question': 'ACGTACGTACGTACGTAC',
598: 1:      'valid': true
598: 1:    }
598: 1:  ],
598: 1:  'info': [
598: 1:    '✅f(TTTT) = AAAA',
598: 1:    '✅f(AAAA) = TTTT',
598: 1:    '✅f(TAACG) = ATTGC',
598: 1:    '✅f(ATTGC) = TAACG',
598: 1:    '✅f(CATA) = GTAT',
598: 1:    '✅f(GTAT) = CATA',
598: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
598: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
598: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
598: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
598: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
598: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
598: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
598: 1:    '✅f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = TCGATCGATCGATCGATCGATCGATCGAT',
598: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCGATCG',
598: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGATCGA',
598: 1:    '✅f(ATCGATCGATCGATCGATC) = TAGCTAGCTAGCTAGCTAG',
598: 1:    '✅f(CATCGATCGATCGATCGA) = GTAGCTAGCTAGCTAGCT',
598: 1:    '✅f(GATCGATCGATCGATCGATCGAT) = CTAGCTAGCTAGCTAGCTAGCTA',
598: 1:    '✅f(TCGATCGATCGATCGATCGA) = AGCTAGCTAGCTAGCTAGCT',
598: 1:    '✅f(GATCGATCGATCGATCGATCGATC) = CTAGCTAGCTAGCTAGCTAGCTAG',
598: 1:    '✅f(CTAGCTAGCTAGCTAGCTAG) = GATCGATCGATCGATCGATC',
598: 1:    '✅f(ACGTACGTACGTACGTAC) = TGCATGCATGCATGCATG',
598: 1:    '❌f(CACGACGACGACGACGA) = ??? != GTGCTGCTGCTGCTGCT'
598: 1:  ],
598: 1:  'level': 21,
598: 1:  'nextQuestion': 'CACGACGACGACGACGA',
598: 1:  'questions': [
598: 1:    'TTTT',
598: 1:    'AAAA',
598: 1:    'TAACG',
598: 1:    'ATTGC',
598: 1:    'CATA',
598: 1:    'GTAT',
598: 1:    'TAGCCTAGCT',
598: 1:    'GATCGATCGA',
598: 1:    'CTAGCTAGCTAGCTAGCT',
598: 1:    'ACGTAGCTAGCTAGCTA',
598: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
598: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
598: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
598: 1:    'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
598: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
598: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
598: 1:    'ATCGATCGATCGATCGATC',
598: 1:    'CATCGATCGATCGATCGA',
598: 1:    'GATCGATCGATCGATCGATCGAT',
598: 1:    'TCGATCGATCGATCGATCGA',
598: 1:    'GATCGATCGATCGATCGATCGATC',
598: 1:    'CTAGCTAGCTAGCTAGCTAG',
598: 1:    'ACGTACGTACGTACGTAC',
598: 1:    'CACGACGACGACGACGA'
598: 1:  ]
598: 1:}
598: 1:Scores: 41990
598: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG', 'TCGATCGATCGATCGATCGATCGATCGAT', 'CGATCGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCGA', 'TAGCTAGCTAGCTAGCTAG', 'GTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTA', 'AGCTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTAG', 'GATCGATCGATCGATCGATC', 'TGCATGCATGCATGCATG', 'GTGCTGCTGCTGCTGCT']')
598: 1:Fire Event: PassTest{complexity=25, testCount=27}
------------------------------------------
599: 1:BoardData {
599: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
599: 1:  'expectedAnswer': 'CAGTCAGTCAGTCAGT',
599: 1:  'history': [
599: 1:    {
599: 1:      'answer': 'AAAA',
599: 1:      'question': 'TTTT',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': 'TTTT',
599: 1:      'question': 'AAAA',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': 'ATTGC',
599: 1:      'question': 'TAACG',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': 'TAACG',
599: 1:      'question': 'ATTGC',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': 'GTAT',
599: 1:      'question': 'CATA',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': 'CATA',
599: 1:      'question': 'GTAT',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': 'ATCGGATCGA',
599: 1:      'question': 'TAGCCTAGCT',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': 'CTAGCTAGCT',
599: 1:      'question': 'GATCGATCGA',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': 'GATCGATCGATCGATCGA',
599: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': 'TGCATCGATCGATCGAT',
599: 1:      'question': 'ACGTAGCTAGCTAGCTA',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
599: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
599: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
599: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': 'TCGATCGATCGATCGATCGATCGATCGAT',
599: 1:      'question': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCGATCG',
599: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCGA',
599: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': 'TAGCTAGCTAGCTAGCTAG',
599: 1:      'question': 'ATCGATCGATCGATCGATC',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': 'GTAGCTAGCTAGCTAGCT',
599: 1:      'question': 'CATCGATCGATCGATCGA',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTA',
599: 1:      'question': 'GATCGATCGATCGATCGATCGAT',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': 'AGCTAGCTAGCTAGCTAGCT',
599: 1:      'question': 'TCGATCGATCGATCGATCGA',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTAG',
599: 1:      'question': 'GATCGATCGATCGATCGATCGATC',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': 'GATCGATCGATCGATCGATC',
599: 1:      'question': 'CTAGCTAGCTAGCTAGCTAG',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': 'TGCATGCATGCATGCATG',
599: 1:      'question': 'ACGTACGTACGTACGTAC',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': 'GTGCTGCTGCTGCTGCT',
599: 1:      'question': 'CACGACGACGACGACGA',
599: 1:      'valid': true
599: 1:    }
599: 1:  ],
599: 1:  'info': [
599: 1:    '✅f(TTTT) = AAAA',
599: 1:    '✅f(AAAA) = TTTT',
599: 1:    '✅f(TAACG) = ATTGC',
599: 1:    '✅f(ATTGC) = TAACG',
599: 1:    '✅f(CATA) = GTAT',
599: 1:    '✅f(GTAT) = CATA',
599: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
599: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
599: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
599: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
599: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
599: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
599: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
599: 1:    '✅f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = TCGATCGATCGATCGATCGATCGATCGAT',
599: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCGATCG',
599: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGATCGA',
599: 1:    '✅f(ATCGATCGATCGATCGATC) = TAGCTAGCTAGCTAGCTAG',
599: 1:    '✅f(CATCGATCGATCGATCGA) = GTAGCTAGCTAGCTAGCT',
599: 1:    '✅f(GATCGATCGATCGATCGATCGAT) = CTAGCTAGCTAGCTAGCTAGCTA',
599: 1:    '✅f(TCGATCGATCGATCGATCGA) = AGCTAGCTAGCTAGCTAGCT',
599: 1:    '✅f(GATCGATCGATCGATCGATCGATC) = CTAGCTAGCTAGCTAGCTAGCTAG',
599: 1:    '✅f(CTAGCTAGCTAGCTAGCTAG) = GATCGATCGATCGATCGATC',
599: 1:    '✅f(ACGTACGTACGTACGTAC) = TGCATGCATGCATGCATG',
599: 1:    '✅f(CACGACGACGACGACGA) = GTGCTGCTGCTGCTGCT',
599: 1:    '❌f(GTCAGTCAGTCAGTCA) = ??? != CAGTCAGTCAGTCAGT'
599: 1:  ],
599: 1:  'level': 21,
599: 1:  'nextQuestion': 'GTCAGTCAGTCAGTCA',
599: 1:  'questions': [
599: 1:    'TTTT',
599: 1:    'AAAA',
599: 1:    'TAACG',
599: 1:    'ATTGC',
599: 1:    'CATA',
599: 1:    'GTAT',
599: 1:    'TAGCCTAGCT',
599: 1:    'GATCGATCGA',
599: 1:    'CTAGCTAGCTAGCTAGCT',
599: 1:    'ACGTAGCTAGCTAGCTA',
599: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
599: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
599: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
599: 1:    'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
599: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
599: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
599: 1:    'ATCGATCGATCGATCGATC',
599: 1:    'CATCGATCGATCGATCGA',
599: 1:    'GATCGATCGATCGATCGATCGAT',
599: 1:    'TCGATCGATCGATCGATCGA',
599: 1:    'GATCGATCGATCGATCGATCGATC',
599: 1:    'CTAGCTAGCTAGCTAGCTAG',
599: 1:    'ACGTACGTACGTACGTAC',
599: 1:    'CACGACGACGACGACGA',
599: 1:    'GTCAGTCAGTCAGTCA'
599: 1:  ]
599: 1:}
599: 1:Scores: 41999
599: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG', 'TCGATCGATCGATCGATCGATCGATCGAT', 'CGATCGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCGA', 'TAGCTAGCTAGCTAGCTAG', 'GTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTA', 'AGCTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTAG', 'GATCGATCGATCGATCGATC', 'TGCATGCATGCATGCATG', 'GTGCTGCTGCTGCTGCT', 'CAGTCAGTCAGTCAGT']')
599: 1:Fire Event: PassTest{complexity=25, testCount=27}
------------------------------------------
600: 1:BoardData {
600: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
600: 1:  'expectedAnswer': 'GATCGATCGATCGATCG',
600: 1:  'history': [
600: 1:    {
600: 1:      'answer': 'AAAA',
600: 1:      'question': 'TTTT',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': 'TTTT',
600: 1:      'question': 'AAAA',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': 'ATTGC',
600: 1:      'question': 'TAACG',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': 'TAACG',
600: 1:      'question': 'ATTGC',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': 'GTAT',
600: 1:      'question': 'CATA',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': 'CATA',
600: 1:      'question': 'GTAT',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': 'ATCGGATCGA',
600: 1:      'question': 'TAGCCTAGCT',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': 'CTAGCTAGCT',
600: 1:      'question': 'GATCGATCGA',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': 'GATCGATCGATCGATCGA',
600: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': 'TGCATCGATCGATCGAT',
600: 1:      'question': 'ACGTAGCTAGCTAGCTA',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
600: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
600: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
600: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': 'TCGATCGATCGATCGATCGATCGATCGAT',
600: 1:      'question': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCGATCG',
600: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCGA',
600: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': 'TAGCTAGCTAGCTAGCTAG',
600: 1:      'question': 'ATCGATCGATCGATCGATC',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': 'GTAGCTAGCTAGCTAGCT',
600: 1:      'question': 'CATCGATCGATCGATCGA',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTA',
600: 1:      'question': 'GATCGATCGATCGATCGATCGAT',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': 'AGCTAGCTAGCTAGCTAGCT',
600: 1:      'question': 'TCGATCGATCGATCGATCGA',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTAG',
600: 1:      'question': 'GATCGATCGATCGATCGATCGATC',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': 'GATCGATCGATCGATCGATC',
600: 1:      'question': 'CTAGCTAGCTAGCTAGCTAG',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': 'TGCATGCATGCATGCATG',
600: 1:      'question': 'ACGTACGTACGTACGTAC',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': 'GTGCTGCTGCTGCTGCT',
600: 1:      'question': 'CACGACGACGACGACGA',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': 'CAGTCAGTCAGTCAGT',
600: 1:      'question': 'GTCAGTCAGTCAGTCA',
600: 1:      'valid': true
600: 1:    }
600: 1:  ],
600: 1:  'info': [
600: 1:    '✅f(TTTT) = AAAA',
600: 1:    '✅f(AAAA) = TTTT',
600: 1:    '✅f(TAACG) = ATTGC',
600: 1:    '✅f(ATTGC) = TAACG',
600: 1:    '✅f(CATA) = GTAT',
600: 1:    '✅f(GTAT) = CATA',
600: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
600: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
600: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
600: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
600: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
600: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
600: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
600: 1:    '✅f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = TCGATCGATCGATCGATCGATCGATCGAT',
600: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCGATCG',
600: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGATCGA',
600: 1:    '✅f(ATCGATCGATCGATCGATC) = TAGCTAGCTAGCTAGCTAG',
600: 1:    '✅f(CATCGATCGATCGATCGA) = GTAGCTAGCTAGCTAGCT',
600: 1:    '✅f(GATCGATCGATCGATCGATCGAT) = CTAGCTAGCTAGCTAGCTAGCTA',
600: 1:    '✅f(TCGATCGATCGATCGATCGA) = AGCTAGCTAGCTAGCTAGCT',
600: 1:    '✅f(GATCGATCGATCGATCGATCGATC) = CTAGCTAGCTAGCTAGCTAGCTAG',
600: 1:    '✅f(CTAGCTAGCTAGCTAGCTAG) = GATCGATCGATCGATCGATC',
600: 1:    '✅f(ACGTACGTACGTACGTAC) = TGCATGCATGCATGCATG',
600: 1:    '✅f(CACGACGACGACGACGA) = GTGCTGCTGCTGCTGCT',
600: 1:    '✅f(GTCAGTCAGTCAGTCA) = CAGTCAGTCAGTCAGT',
600: 1:    '❌f(CTAGCTAGCTAGCTAGC) = ??? != GATCGATCGATCGATCG'
600: 1:  ],
600: 1:  'level': 21,
600: 1:  'nextQuestion': 'CTAGCTAGCTAGCTAGC',
600: 1:  'questions': [
600: 1:    'TTTT',
600: 1:    'AAAA',
600: 1:    'TAACG',
600: 1:    'ATTGC',
600: 1:    'CATA',
600: 1:    'GTAT',
600: 1:    'TAGCCTAGCT',
600: 1:    'GATCGATCGA',
600: 1:    'CTAGCTAGCTAGCTAGCT',
600: 1:    'ACGTAGCTAGCTAGCTA',
600: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
600: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
600: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
600: 1:    'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
600: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
600: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
600: 1:    'ATCGATCGATCGATCGATC',
600: 1:    'CATCGATCGATCGATCGA',
600: 1:    'GATCGATCGATCGATCGATCGAT',
600: 1:    'TCGATCGATCGATCGATCGA',
600: 1:    'GATCGATCGATCGATCGATCGATC',
600: 1:    'CTAGCTAGCTAGCTAGCTAG',
600: 1:    'ACGTACGTACGTACGTAC',
600: 1:    'CACGACGACGACGACGA',
600: 1:    'GTCAGTCAGTCAGTCA',
600: 1:    'CTAGCTAGCTAGCTAGC'
600: 1:  ]
600: 1:}
600: 1:Scores: 42008
600: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG', 'TCGATCGATCGATCGATCGATCGATCGAT', 'CGATCGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCGA', 'TAGCTAGCTAGCTAGCTAG', 'GTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTA', 'AGCTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTAG', 'GATCGATCGATCGATCGATC', 'TGCATGCATGCATGCATG', 'GTGCTGCTGCTGCTGCT', 'CAGTCAGTCAGTCAGT', 'GATCGATCGATCGATCG']')
600: 1:Fire Event: PassTest{complexity=25, testCount=27}
------------------------------------------
601: 1:BoardData {
601: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
601: 1:  'expectedAnswer': 'CATAGCTAGCTAGCTAGCTAATATAAAAGCTGCTCTAAATTTATATATATATATGCTCTCTTATGTCTATCTGTCTAAT',
601: 1:  'history': [
601: 1:    {
601: 1:      'answer': 'AAAA',
601: 1:      'question': 'TTTT',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': 'TTTT',
601: 1:      'question': 'AAAA',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': 'ATTGC',
601: 1:      'question': 'TAACG',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': 'TAACG',
601: 1:      'question': 'ATTGC',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': 'GTAT',
601: 1:      'question': 'CATA',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': 'CATA',
601: 1:      'question': 'GTAT',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': 'ATCGGATCGA',
601: 1:      'question': 'TAGCCTAGCT',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': 'CTAGCTAGCT',
601: 1:      'question': 'GATCGATCGA',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': 'GATCGATCGATCGATCGA',
601: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': 'TGCATCGATCGATCGAT',
601: 1:      'question': 'ACGTAGCTAGCTAGCTA',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
601: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
601: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
601: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': 'TCGATCGATCGATCGATCGATCGATCGAT',
601: 1:      'question': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCGATCG',
601: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCGA',
601: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': 'TAGCTAGCTAGCTAGCTAG',
601: 1:      'question': 'ATCGATCGATCGATCGATC',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': 'GTAGCTAGCTAGCTAGCT',
601: 1:      'question': 'CATCGATCGATCGATCGA',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTA',
601: 1:      'question': 'GATCGATCGATCGATCGATCGAT',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': 'AGCTAGCTAGCTAGCTAGCT',
601: 1:      'question': 'TCGATCGATCGATCGATCGA',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTAG',
601: 1:      'question': 'GATCGATCGATCGATCGATCGATC',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': 'GATCGATCGATCGATCGATC',
601: 1:      'question': 'CTAGCTAGCTAGCTAGCTAG',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': 'TGCATGCATGCATGCATG',
601: 1:      'question': 'ACGTACGTACGTACGTAC',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': 'GTGCTGCTGCTGCTGCT',
601: 1:      'question': 'CACGACGACGACGACGA',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': 'CAGTCAGTCAGTCAGT',
601: 1:      'question': 'GTCAGTCAGTCAGTCA',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': 'GATCGATCGATCGATCG',
601: 1:      'question': 'CTAGCTAGCTAGCTAGC',
601: 1:      'valid': true
601: 1:    }
601: 1:  ],
601: 1:  'info': [
601: 1:    '✅f(TTTT) = AAAA',
601: 1:    '✅f(AAAA) = TTTT',
601: 1:    '✅f(TAACG) = ATTGC',
601: 1:    '✅f(ATTGC) = TAACG',
601: 1:    '✅f(CATA) = GTAT',
601: 1:    '✅f(GTAT) = CATA',
601: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
601: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
601: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
601: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
601: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
601: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
601: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
601: 1:    '✅f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = TCGATCGATCGATCGATCGATCGATCGAT',
601: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCGATCG',
601: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGATCGA',
601: 1:    '✅f(ATCGATCGATCGATCGATC) = TAGCTAGCTAGCTAGCTAG',
601: 1:    '✅f(CATCGATCGATCGATCGA) = GTAGCTAGCTAGCTAGCT',
601: 1:    '✅f(GATCGATCGATCGATCGATCGAT) = CTAGCTAGCTAGCTAGCTAGCTA',
601: 1:    '✅f(TCGATCGATCGATCGATCGA) = AGCTAGCTAGCTAGCTAGCT',
601: 1:    '✅f(GATCGATCGATCGATCGATCGATC) = CTAGCTAGCTAGCTAGCTAGCTAG',
601: 1:    '✅f(CTAGCTAGCTAGCTAGCTAG) = GATCGATCGATCGATCGATC',
601: 1:    '✅f(ACGTACGTACGTACGTAC) = TGCATGCATGCATGCATG',
601: 1:    '✅f(CACGACGACGACGACGA) = GTGCTGCTGCTGCTGCT',
601: 1:    '✅f(GTCAGTCAGTCAGTCA) = CAGTCAGTCAGTCAGT',
601: 1:    '✅f(CTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCG',
601: 1:    '❌f(GTATCGATCGATCGATCGATTATATTTTCGACGAGATTTAAATATATATATATACGAGAGAATACAGATAGACAGATTA) = ??? != CATAGCTAGCTAGCTAGCTAATATAAAAGCTGCTCTAAATTTATATATATATATGCTCTCTTATGTCTATCTGTCTAAT'
601: 1:  ],
601: 1:  'level': 21,
601: 1:  'nextQuestion': 'GTATCGATCGATCGATCGATTATATTTTCGACGAGATTTAAATATATATATATACGAGAGAATACAGATAGACAGATTA',
601: 1:  'questions': [
601: 1:    'TTTT',
601: 1:    'AAAA',
601: 1:    'TAACG',
601: 1:    'ATTGC',
601: 1:    'CATA',
601: 1:    'GTAT',
601: 1:    'TAGCCTAGCT',
601: 1:    'GATCGATCGA',
601: 1:    'CTAGCTAGCTAGCTAGCT',
601: 1:    'ACGTAGCTAGCTAGCTA',
601: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
601: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
601: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
601: 1:    'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
601: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
601: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
601: 1:    'ATCGATCGATCGATCGATC',
601: 1:    'CATCGATCGATCGATCGA',
601: 1:    'GATCGATCGATCGATCGATCGAT',
601: 1:    'TCGATCGATCGATCGATCGA',
601: 1:    'GATCGATCGATCGATCGATCGATC',
601: 1:    'CTAGCTAGCTAGCTAGCTAG',
601: 1:    'ACGTACGTACGTACGTAC',
601: 1:    'CACGACGACGACGACGA',
601: 1:    'GTCAGTCAGTCAGTCA',
601: 1:    'CTAGCTAGCTAGCTAGC',
601: 1:    'GTATCGATCGATCGATCGATTATATTTTCGACGAGATTTAAATATATATATATACGAGAGAATACAGATAGACAGATTA'
601: 1:  ]
601: 1:}
601: 1:Scores: 42017
601: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG', 'TCGATCGATCGATCGATCGATCGATCGAT', 'CGATCGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCGA', 'TAGCTAGCTAGCTAGCTAG', 'GTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTA', 'AGCTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTAG', 'GATCGATCGATCGATCGATC', 'TGCATGCATGCATGCATG', 'GTGCTGCTGCTGCTGCT', 'CAGTCAGTCAGTCAGT', 'GATCGATCGATCGATCG', 'CATAGCTAGCTAGCTAGCTAATATAAAAGCTGCTCTAAATTTATATATATATATGCTCTCTTATGTCTATCTGTCTAAT']')
601: 1:Fire Event: PassTest{complexity=25, testCount=27}
601: 1:Fire Event: NextAlgorithm{complexity=25, time=0}
------------------------------------------
602: 1:BoardData {
602: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
602: 1:  'history': [
602: 1:    {
602: 1:      'answer': 'AAAA',
602: 1:      'question': 'TTTT',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': 'TTTT',
602: 1:      'question': 'AAAA',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': 'ATTGC',
602: 1:      'question': 'TAACG',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': 'TAACG',
602: 1:      'question': 'ATTGC',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': 'GTAT',
602: 1:      'question': 'CATA',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': 'CATA',
602: 1:      'question': 'GTAT',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': 'ATCGGATCGA',
602: 1:      'question': 'TAGCCTAGCT',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': 'CTAGCTAGCT',
602: 1:      'question': 'GATCGATCGA',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': 'GATCGATCGATCGATCGA',
602: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': 'TGCATCGATCGATCGAT',
602: 1:      'question': 'ACGTAGCTAGCTAGCTA',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
602: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
602: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
602: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': 'TCGATCGATCGATCGATCGATCGATCGAT',
602: 1:      'question': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCGATCG',
602: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCGA',
602: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': 'TAGCTAGCTAGCTAGCTAG',
602: 1:      'question': 'ATCGATCGATCGATCGATC',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': 'GTAGCTAGCTAGCTAGCT',
602: 1:      'question': 'CATCGATCGATCGATCGA',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTA',
602: 1:      'question': 'GATCGATCGATCGATCGATCGAT',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': 'AGCTAGCTAGCTAGCTAGCT',
602: 1:      'question': 'TCGATCGATCGATCGATCGA',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTAG',
602: 1:      'question': 'GATCGATCGATCGATCGATCGATC',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': 'GATCGATCGATCGATCGATC',
602: 1:      'question': 'CTAGCTAGCTAGCTAGCTAG',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': 'TGCATGCATGCATGCATG',
602: 1:      'question': 'ACGTACGTACGTACGTAC',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': 'GTGCTGCTGCTGCTGCT',
602: 1:      'question': 'CACGACGACGACGACGA',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': 'CAGTCAGTCAGTCAGT',
602: 1:      'question': 'GTCAGTCAGTCAGTCA',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': 'GATCGATCGATCGATCG',
602: 1:      'question': 'CTAGCTAGCTAGCTAGC',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': 'CATAGCTAGCTAGCTAGCTAATATAAAAGCTGCTCTAAATTTATATATATATATGCTCTCTTATGTCTATCTGTCTAAT',
602: 1:      'question': 'GTATCGATCGATCGATCGATTATATTTTCGACGAGATTTAAATATATATATATACGAGAGAATACAGATAGACAGATTA',
602: 1:      'valid': true
602: 1:    }
602: 1:  ],
602: 1:  'info': [
602: 1:    '✅f(TTTT) = AAAA',
602: 1:    '✅f(AAAA) = TTTT',
602: 1:    '✅f(TAACG) = ATTGC',
602: 1:    '✅f(ATTGC) = TAACG',
602: 1:    '✅f(CATA) = GTAT',
602: 1:    '✅f(GTAT) = CATA',
602: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
602: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
602: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
602: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
602: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
602: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
602: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
602: 1:    '✅f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = TCGATCGATCGATCGATCGATCGATCGAT',
602: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCGATCG',
602: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGATCGA',
602: 1:    '✅f(ATCGATCGATCGATCGATC) = TAGCTAGCTAGCTAGCTAG',
602: 1:    '✅f(CATCGATCGATCGATCGA) = GTAGCTAGCTAGCTAGCT',
602: 1:    '✅f(GATCGATCGATCGATCGATCGAT) = CTAGCTAGCTAGCTAGCTAGCTA',
602: 1:    '✅f(TCGATCGATCGATCGATCGA) = AGCTAGCTAGCTAGCTAGCT',
602: 1:    '✅f(GATCGATCGATCGATCGATCGATC) = CTAGCTAGCTAGCTAGCTAGCTAG',
602: 1:    '✅f(CTAGCTAGCTAGCTAGCTAG) = GATCGATCGATCGATCGATC',
602: 1:    '✅f(ACGTACGTACGTACGTAC) = TGCATGCATGCATGCATG',
602: 1:    '✅f(CACGACGACGACGACGA) = GTGCTGCTGCTGCTGCT',
602: 1:    '✅f(GTCAGTCAGTCAGTCA) = CAGTCAGTCAGTCAGT',
602: 1:    '✅f(CTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCG',
602: 1:    '✅f(GTATCGATCGATCGATCGATTATATTTTCGACGAGATTTAAATATATATATATACGAGAGAATACAGATAGACAGATTA) = CATAGCTAGCTAGCTAGCTAATATAAAAGCTGCTCTAAATTTATATATATATATGCTCTCTTATGTCTATCTGTCTAAT'
602: 1:  ],
602: 1:  'level': 21,
602: 1:  'questions': []
602: 1:}
602: 1:Scores: 45400
602: 1:Answer: message('StartNextLevel')
602: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
603: 1:BoardData {
603: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
603: 1:  'expectedAnswer': 'es',
603: 1:  'history': [],
603: 1:  'info': ['❌f(test) = ??? != es'],
603: 1:  'level': 22,
603: 1:  'nextQuestion': 'test',
603: 1:  'questions': ['test']
603: 1:}
603: 1:Scores: 45400
603: 1:Answer: message('['es']')
603: 1:Fire Event: PassTest{complexity=26, testCount=22}
------------------------------------------
604: 1:BoardData {
604: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
604: 1:  'expectedAnswer': 't',
604: 1:  'history': [{
604: 1:    'answer': 'es',
604: 1:    'question': 'test',
604: 1:    'valid': true
604: 1:  }],
604: 1:  'info': [
604: 1:    '✅f(test) = es',
604: 1:    '❌f(testing) = ??? != t'
604: 1:  ],
604: 1:  'level': 22,
604: 1:  'nextQuestion': 'testing',
604: 1:  'questions': [
604: 1:    'test',
604: 1:    'testing'
604: 1:  ]
604: 1:}
604: 1:Scores: 45411
604: 1:Answer: message('['es', 't']')
604: 1:Fire Event: PassTest{complexity=26, testCount=22}
------------------------------------------
605: 1:BoardData {
605: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
605: 1:  'expectedAnswer': 'dd',
605: 1:  'history': [
605: 1:    {
605: 1:      'answer': 'es',
605: 1:      'question': 'test',
605: 1:      'valid': true
605: 1:    },
605: 1:    {
605: 1:      'answer': 't',
605: 1:      'question': 'testing',
605: 1:      'valid': true
605: 1:    }
605: 1:  ],
605: 1:  'info': [
605: 1:    '✅f(test) = es',
605: 1:    '✅f(testing) = t',
605: 1:    '❌f(middle) = ??? != dd'
605: 1:  ],
605: 1:  'level': 22,
605: 1:  'nextQuestion': 'middle',
605: 1:  'questions': [
605: 1:    'test',
605: 1:    'testing',
605: 1:    'middle'
605: 1:  ]
605: 1:}
605: 1:Scores: 45422
605: 1:Answer: message('['es', 't', 'dd']')
605: 1:Fire Event: PassTest{complexity=26, testCount=22}
------------------------------------------
606: 1:BoardData {
606: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
606: 1:  'expectedAnswer': 'A',
606: 1:  'history': [
606: 1:    {
606: 1:      'answer': 'es',
606: 1:      'question': 'test',
606: 1:      'valid': true
606: 1:    },
606: 1:    {
606: 1:      'answer': 't',
606: 1:      'question': 'testing',
606: 1:      'valid': true
606: 1:    },
606: 1:    {
606: 1:      'answer': 'dd',
606: 1:      'question': 'middle',
606: 1:      'valid': true
606: 1:    }
606: 1:  ],
606: 1:  'info': [
606: 1:    '✅f(test) = es',
606: 1:    '✅f(testing) = t',
606: 1:    '✅f(middle) = dd',
606: 1:    '❌f(A) = ??? != A'
606: 1:  ],
606: 1:  'level': 22,
606: 1:  'nextQuestion': 'A',
606: 1:  'questions': [
606: 1:    'test',
606: 1:    'testing',
606: 1:    'middle',
606: 1:    'A'
606: 1:  ]
606: 1:}
606: 1:Scores: 45433
606: 1:Answer: message('['es', 't', 'dd', 'A']')
606: 1:Fire Event: PassTest{complexity=26, testCount=22}
------------------------------------------
607: 1:BoardData {
607: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
607: 1:  'expectedAnswer': 'l',
607: 1:  'history': [
607: 1:    {
607: 1:      'answer': 'es',
607: 1:      'question': 'test',
607: 1:      'valid': true
607: 1:    },
607: 1:    {
607: 1:      'answer': 't',
607: 1:      'question': 'testing',
607: 1:      'valid': true
607: 1:    },
607: 1:    {
607: 1:      'answer': 'dd',
607: 1:      'question': 'middle',
607: 1:      'valid': true
607: 1:    },
607: 1:    {
607: 1:      'answer': 'A',
607: 1:      'question': 'A',
607: 1:      'valid': true
607: 1:    }
607: 1:  ],
607: 1:  'info': [
607: 1:    '✅f(test) = es',
607: 1:    '✅f(testing) = t',
607: 1:    '✅f(middle) = dd',
607: 1:    '✅f(A) = A',
607: 1:    '❌f(Hello) = ??? != l'
607: 1:  ],
607: 1:  'level': 22,
607: 1:  'nextQuestion': 'Hello',
607: 1:  'questions': [
607: 1:    'test',
607: 1:    'testing',
607: 1:    'middle',
607: 1:    'A',
607: 1:    'Hello'
607: 1:  ]
607: 1:}
607: 1:Scores: 45444
607: 1:Answer: message('['es', 't', 'dd', 'A', 'l']')
607: 1:Fire Event: PassTest{complexity=26, testCount=22}
------------------------------------------
608: 1:BoardData {
608: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
608: 1:  'expectedAnswer': 'av',
608: 1:  'history': [
608: 1:    {
608: 1:      'answer': 'es',
608: 1:      'question': 'test',
608: 1:      'valid': true
608: 1:    },
608: 1:    {
608: 1:      'answer': 't',
608: 1:      'question': 'testing',
608: 1:      'valid': true
608: 1:    },
608: 1:    {
608: 1:      'answer': 'dd',
608: 1:      'question': 'middle',
608: 1:      'valid': true
608: 1:    },
608: 1:    {
608: 1:      'answer': 'A',
608: 1:      'question': 'A',
608: 1:      'valid': true
608: 1:    },
608: 1:    {
608: 1:      'answer': 'l',
608: 1:      'question': 'Hello',
608: 1:      'valid': true
608: 1:    }
608: 1:  ],
608: 1:  'info': [
608: 1:    '✅f(test) = es',
608: 1:    '✅f(testing) = t',
608: 1:    '✅f(middle) = dd',
608: 1:    '✅f(A) = A',
608: 1:    '✅f(Hello) = l',
608: 1:    '❌f(Java) = ??? != av'
608: 1:  ],
608: 1:  'level': 22,
608: 1:  'nextQuestion': 'Java',
608: 1:  'questions': [
608: 1:    'test',
608: 1:    'testing',
608: 1:    'middle',
608: 1:    'A',
608: 1:    'Hello',
608: 1:    'Java'
608: 1:  ]
608: 1:}
608: 1:Scores: 45455
608: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av']')
608: 1:Fire Event: PassTest{complexity=26, testCount=22}
------------------------------------------
609: 1:BoardData {
609: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
609: 1:  'expectedAnswer': 'en',
609: 1:  'history': [
609: 1:    {
609: 1:      'answer': 'es',
609: 1:      'question': 'test',
609: 1:      'valid': true
609: 1:    },
609: 1:    {
609: 1:      'answer': 't',
609: 1:      'question': 'testing',
609: 1:      'valid': true
609: 1:    },
609: 1:    {
609: 1:      'answer': 'dd',
609: 1:      'question': 'middle',
609: 1:      'valid': true
609: 1:    },
609: 1:    {
609: 1:      'answer': 'A',
609: 1:      'question': 'A',
609: 1:      'valid': true
609: 1:    },
609: 1:    {
609: 1:      'answer': 'l',
609: 1:      'question': 'Hello',
609: 1:      'valid': true
609: 1:    },
609: 1:    {
609: 1:      'answer': 'av',
609: 1:      'question': 'Java',
609: 1:      'valid': true
609: 1:    }
609: 1:  ],
609: 1:  'info': [
609: 1:    '✅f(test) = es',
609: 1:    '✅f(testing) = t',
609: 1:    '✅f(middle) = dd',
609: 1:    '✅f(A) = A',
609: 1:    '✅f(Hello) = l',
609: 1:    '✅f(Java) = av',
609: 1:    '❌f(OpenAI) = ??? != en'
609: 1:  ],
609: 1:  'level': 22,
609: 1:  'nextQuestion': 'OpenAI',
609: 1:  'questions': [
609: 1:    'test',
609: 1:    'testing',
609: 1:    'middle',
609: 1:    'A',
609: 1:    'Hello',
609: 1:    'Java',
609: 1:    'OpenAI'
609: 1:  ]
609: 1:}
609: 1:Scores: 45466
609: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en']')
609: 1:Fire Event: PassTest{complexity=26, testCount=22}
------------------------------------------
610: 1:BoardData {
610: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
610: 1:  'expectedAnswer': 't',
610: 1:  'history': [
610: 1:    {
610: 1:      'answer': 'es',
610: 1:      'question': 'test',
610: 1:      'valid': true
610: 1:    },
610: 1:    {
610: 1:      'answer': 't',
610: 1:      'question': 'testing',
610: 1:      'valid': true
610: 1:    },
610: 1:    {
610: 1:      'answer': 'dd',
610: 1:      'question': 'middle',
610: 1:      'valid': true
610: 1:    },
610: 1:    {
610: 1:      'answer': 'A',
610: 1:      'question': 'A',
610: 1:      'valid': true
610: 1:    },
610: 1:    {
610: 1:      'answer': 'l',
610: 1:      'question': 'Hello',
610: 1:      'valid': true
610: 1:    },
610: 1:    {
610: 1:      'answer': 'av',
610: 1:      'question': 'Java',
610: 1:      'valid': true
610: 1:    },
610: 1:    {
610: 1:      'answer': 'en',
610: 1:      'question': 'OpenAI',
610: 1:      'valid': true
610: 1:    }
610: 1:  ],
610: 1:  'info': [
610: 1:    '✅f(test) = es',
610: 1:    '✅f(testing) = t',
610: 1:    '✅f(middle) = dd',
610: 1:    '✅f(A) = A',
610: 1:    '✅f(Hello) = l',
610: 1:    '✅f(Java) = av',
610: 1:    '✅f(OpenAI) = en',
610: 1:    '❌f(Testing) = ??? != t'
610: 1:  ],
610: 1:  'level': 22,
610: 1:  'nextQuestion': 'Testing',
610: 1:  'questions': [
610: 1:    'test',
610: 1:    'testing',
610: 1:    'middle',
610: 1:    'A',
610: 1:    'Hello',
610: 1:    'Java',
610: 1:    'OpenAI',
610: 1:    'Testing'
610: 1:  ]
610: 1:}
610: 1:Scores: 45477
610: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't']')
610: 1:Fire Event: PassTest{complexity=26, testCount=22}
------------------------------------------
611: 1:BoardData {
611: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
611: 1:  'expectedAnswer': 't',
611: 1:  'history': [
611: 1:    {
611: 1:      'answer': 'es',
611: 1:      'question': 'test',
611: 1:      'valid': true
611: 1:    },
611: 1:    {
611: 1:      'answer': 't',
611: 1:      'question': 'testing',
611: 1:      'valid': true
611: 1:    },
611: 1:    {
611: 1:      'answer': 'dd',
611: 1:      'question': 'middle',
611: 1:      'valid': true
611: 1:    },
611: 1:    {
611: 1:      'answer': 'A',
611: 1:      'question': 'A',
611: 1:      'valid': true
611: 1:    },
611: 1:    {
611: 1:      'answer': 'l',
611: 1:      'question': 'Hello',
611: 1:      'valid': true
611: 1:    },
611: 1:    {
611: 1:      'answer': 'av',
611: 1:      'question': 'Java',
611: 1:      'valid': true
611: 1:    },
611: 1:    {
611: 1:      'answer': 'en',
611: 1:      'question': 'OpenAI',
611: 1:      'valid': true
611: 1:    },
611: 1:    {
611: 1:      'answer': 't',
611: 1:      'question': 'Testing',
611: 1:      'valid': true
611: 1:    }
611: 1:  ],
611: 1:  'info': [
611: 1:    '✅f(test) = es',
611: 1:    '✅f(testing) = t',
611: 1:    '✅f(middle) = dd',
611: 1:    '✅f(A) = A',
611: 1:    '✅f(Hello) = l',
611: 1:    '✅f(Java) = av',
611: 1:    '✅f(OpenAI) = en',
611: 1:    '✅f(Testing) = t',
611: 1:    '❌f(ChatGPT) = ??? != t'
611: 1:  ],
611: 1:  'level': 22,
611: 1:  'nextQuestion': 'ChatGPT',
611: 1:  'questions': [
611: 1:    'test',
611: 1:    'testing',
611: 1:    'middle',
611: 1:    'A',
611: 1:    'Hello',
611: 1:    'Java',
611: 1:    'OpenAI',
611: 1:    'Testing',
611: 1:    'ChatGPT'
611: 1:  ]
611: 1:}
611: 1:Scores: 45488
611: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't', 't']')
611: 1:Fire Event: PassTest{complexity=26, testCount=22}
------------------------------------------
612: 1:BoardData {
612: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
612: 1:  'expectedAnswer': 'a',
612: 1:  'history': [
612: 1:    {
612: 1:      'answer': 'es',
612: 1:      'question': 'test',
612: 1:      'valid': true
612: 1:    },
612: 1:    {
612: 1:      'answer': 't',
612: 1:      'question': 'testing',
612: 1:      'valid': true
612: 1:    },
612: 1:    {
612: 1:      'answer': 'dd',
612: 1:      'question': 'middle',
612: 1:      'valid': true
612: 1:    },
612: 1:    {
612: 1:      'answer': 'A',
612: 1:      'question': 'A',
612: 1:      'valid': true
612: 1:    },
612: 1:    {
612: 1:      'answer': 'l',
612: 1:      'question': 'Hello',
612: 1:      'valid': true
612: 1:    },
612: 1:    {
612: 1:      'answer': 'av',
612: 1:      'question': 'Java',
612: 1:      'valid': true
612: 1:    },
612: 1:    {
612: 1:      'answer': 'en',
612: 1:      'question': 'OpenAI',
612: 1:      'valid': true
612: 1:    },
612: 1:    {
612: 1:      'answer': 't',
612: 1:      'question': 'Testing',
612: 1:      'valid': true
612: 1:    },
612: 1:    {
612: 1:      'answer': 't',
612: 1:      'question': 'ChatGPT',
612: 1:      'valid': true
612: 1:    }
612: 1:  ],
612: 1:  'info': [
612: 1:    '✅f(test) = es',
612: 1:    '✅f(testing) = t',
612: 1:    '✅f(middle) = dd',
612: 1:    '✅f(A) = A',
612: 1:    '✅f(Hello) = l',
612: 1:    '✅f(Java) = av',
612: 1:    '✅f(OpenAI) = en',
612: 1:    '✅f(Testing) = t',
612: 1:    '✅f(ChatGPT) = t',
612: 1:    '❌f(Programming) = ??? != a'
612: 1:  ],
612: 1:  'level': 22,
612: 1:  'nextQuestion': 'Programming',
612: 1:  'questions': [
612: 1:    'test',
612: 1:    'testing',
612: 1:    'middle',
612: 1:    'A',
612: 1:    'Hello',
612: 1:    'Java',
612: 1:    'OpenAI',
612: 1:    'Testing',
612: 1:    'ChatGPT',
612: 1:    'Programming'
612: 1:  ]
612: 1:}
612: 1:Scores: 45499
612: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't', 't', 'a']')
612: 1:Fire Event: PassTest{complexity=26, testCount=22}
------------------------------------------
613: 1:BoardData {
613: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
613: 1:  'expectedAnswer': 'r',
613: 1:  'history': [
613: 1:    {
613: 1:      'answer': 'es',
613: 1:      'question': 'test',
613: 1:      'valid': true
613: 1:    },
613: 1:    {
613: 1:      'answer': 't',
613: 1:      'question': 'testing',
613: 1:      'valid': true
613: 1:    },
613: 1:    {
613: 1:      'answer': 'dd',
613: 1:      'question': 'middle',
613: 1:      'valid': true
613: 1:    },
613: 1:    {
613: 1:      'answer': 'A',
613: 1:      'question': 'A',
613: 1:      'valid': true
613: 1:    },
613: 1:    {
613: 1:      'answer': 'l',
613: 1:      'question': 'Hello',
613: 1:      'valid': true
613: 1:    },
613: 1:    {
613: 1:      'answer': 'av',
613: 1:      'question': 'Java',
613: 1:      'valid': true
613: 1:    },
613: 1:    {
613: 1:      'answer': 'en',
613: 1:      'question': 'OpenAI',
613: 1:      'valid': true
613: 1:    },
613: 1:    {
613: 1:      'answer': 't',
613: 1:      'question': 'Testing',
613: 1:      'valid': true
613: 1:    },
613: 1:    {
613: 1:      'answer': 't',
613: 1:      'question': 'ChatGPT',
613: 1:      'valid': true
613: 1:    },
613: 1:    {
613: 1:      'answer': 'a',
613: 1:      'question': 'Programming',
613: 1:      'valid': true
613: 1:    }
613: 1:  ],
613: 1:  'info': [
613: 1:    '✅f(test) = es',
613: 1:    '✅f(testing) = t',
613: 1:    '✅f(middle) = dd',
613: 1:    '✅f(A) = A',
613: 1:    '✅f(Hello) = l',
613: 1:    '✅f(Java) = av',
613: 1:    '✅f(OpenAI) = en',
613: 1:    '✅f(Testing) = t',
613: 1:    '✅f(ChatGPT) = t',
613: 1:    '✅f(Programming) = a',
613: 1:    '❌f(Algorithm) = ??? != r'
613: 1:  ],
613: 1:  'level': 22,
613: 1:  'nextQuestion': 'Algorithm',
613: 1:  'questions': [
613: 1:    'test',
613: 1:    'testing',
613: 1:    'middle',
613: 1:    'A',
613: 1:    'Hello',
613: 1:    'Java',
613: 1:    'OpenAI',
613: 1:    'Testing',
613: 1:    'ChatGPT',
613: 1:    'Programming',
613: 1:    'Algorithm'
613: 1:  ]
613: 1:}
613: 1:Scores: 45510
613: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't', 't', 'a', 'r']')
613: 1:Fire Event: PassTest{complexity=26, testCount=22}
------------------------------------------
614: 1:BoardData {
614: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
614: 1:  'expectedAnswer': 'ru',
614: 1:  'history': [
614: 1:    {
614: 1:      'answer': 'es',
614: 1:      'question': 'test',
614: 1:      'valid': true
614: 1:    },
614: 1:    {
614: 1:      'answer': 't',
614: 1:      'question': 'testing',
614: 1:      'valid': true
614: 1:    },
614: 1:    {
614: 1:      'answer': 'dd',
614: 1:      'question': 'middle',
614: 1:      'valid': true
614: 1:    },
614: 1:    {
614: 1:      'answer': 'A',
614: 1:      'question': 'A',
614: 1:      'valid': true
614: 1:    },
614: 1:    {
614: 1:      'answer': 'l',
614: 1:      'question': 'Hello',
614: 1:      'valid': true
614: 1:    },
614: 1:    {
614: 1:      'answer': 'av',
614: 1:      'question': 'Java',
614: 1:      'valid': true
614: 1:    },
614: 1:    {
614: 1:      'answer': 'en',
614: 1:      'question': 'OpenAI',
614: 1:      'valid': true
614: 1:    },
614: 1:    {
614: 1:      'answer': 't',
614: 1:      'question': 'Testing',
614: 1:      'valid': true
614: 1:    },
614: 1:    {
614: 1:      'answer': 't',
614: 1:      'question': 'ChatGPT',
614: 1:      'valid': true
614: 1:    },
614: 1:    {
614: 1:      'answer': 'a',
614: 1:      'question': 'Programming',
614: 1:      'valid': true
614: 1:    },
614: 1:    {
614: 1:      'answer': 'r',
614: 1:      'question': 'Algorithm',
614: 1:      'valid': true
614: 1:    }
614: 1:  ],
614: 1:  'info': [
614: 1:    '✅f(test) = es',
614: 1:    '✅f(testing) = t',
614: 1:    '✅f(middle) = dd',
614: 1:    '✅f(A) = A',
614: 1:    '✅f(Hello) = l',
614: 1:    '✅f(Java) = av',
614: 1:    '✅f(OpenAI) = en',
614: 1:    '✅f(Testing) = t',
614: 1:    '✅f(ChatGPT) = t',
614: 1:    '✅f(Programming) = a',
614: 1:    '✅f(Algorithm) = r',
614: 1:    '❌f(DataStructures) = ??? != ru'
614: 1:  ],
614: 1:  'level': 22,
614: 1:  'nextQuestion': 'DataStructures',
614: 1:  'questions': [
614: 1:    'test',
614: 1:    'testing',
614: 1:    'middle',
614: 1:    'A',
614: 1:    'Hello',
614: 1:    'Java',
614: 1:    'OpenAI',
614: 1:    'Testing',
614: 1:    'ChatGPT',
614: 1:    'Programming',
614: 1:    'Algorithm',
614: 1:    'DataStructures'
614: 1:  ]
614: 1:}
614: 1:Scores: 45521
614: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't', 't', 'a', 'r', 'ru']')
614: 1:Fire Event: PassTest{complexity=26, testCount=22}
------------------------------------------
615: 1:BoardData {
615: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
615: 1:  'expectedAnswer': ' ',
615: 1:  'history': [
615: 1:    {
615: 1:      'answer': 'es',
615: 1:      'question': 'test',
615: 1:      'valid': true
615: 1:    },
615: 1:    {
615: 1:      'answer': 't',
615: 1:      'question': 'testing',
615: 1:      'valid': true
615: 1:    },
615: 1:    {
615: 1:      'answer': 'dd',
615: 1:      'question': 'middle',
615: 1:      'valid': true
615: 1:    },
615: 1:    {
615: 1:      'answer': 'A',
615: 1:      'question': 'A',
615: 1:      'valid': true
615: 1:    },
615: 1:    {
615: 1:      'answer': 'l',
615: 1:      'question': 'Hello',
615: 1:      'valid': true
615: 1:    },
615: 1:    {
615: 1:      'answer': 'av',
615: 1:      'question': 'Java',
615: 1:      'valid': true
615: 1:    },
615: 1:    {
615: 1:      'answer': 'en',
615: 1:      'question': 'OpenAI',
615: 1:      'valid': true
615: 1:    },
615: 1:    {
615: 1:      'answer': 't',
615: 1:      'question': 'Testing',
615: 1:      'valid': true
615: 1:    },
615: 1:    {
615: 1:      'answer': 't',
615: 1:      'question': 'ChatGPT',
615: 1:      'valid': true
615: 1:    },
615: 1:    {
615: 1:      'answer': 'a',
615: 1:      'question': 'Programming',
615: 1:      'valid': true
615: 1:    },
615: 1:    {
615: 1:      'answer': 'r',
615: 1:      'question': 'Algorithm',
615: 1:      'valid': true
615: 1:    },
615: 1:    {
615: 1:      'answer': 'ru',
615: 1:      'question': 'DataStructures',
615: 1:      'valid': true
615: 1:    }
615: 1:  ],
615: 1:  'info': [
615: 1:    '✅f(test) = es',
615: 1:    '✅f(testing) = t',
615: 1:    '✅f(middle) = dd',
615: 1:    '✅f(A) = A',
615: 1:    '✅f(Hello) = l',
615: 1:    '✅f(Java) = av',
615: 1:    '✅f(OpenAI) = en',
615: 1:    '✅f(Testing) = t',
615: 1:    '✅f(ChatGPT) = t',
615: 1:    '✅f(Programming) = a',
615: 1:    '✅f(Algorithm) = r',
615: 1:    '✅f(DataStructures) = ru',
615: 1:    '❌f(Hello, World!) = ??? !=  '
615: 1:  ],
615: 1:  'level': 22,
615: 1:  'nextQuestion': 'Hello, World!',
615: 1:  'questions': [
615: 1:    'test',
615: 1:    'testing',
615: 1:    'middle',
615: 1:    'A',
615: 1:    'Hello',
615: 1:    'Java',
615: 1:    'OpenAI',
615: 1:    'Testing',
615: 1:    'ChatGPT',
615: 1:    'Programming',
615: 1:    'Algorithm',
615: 1:    'DataStructures',
615: 1:    'Hello, World!'
615: 1:  ]
615: 1:}
615: 1:Scores: 45532
615: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't', 't', 'a', 'r', 'ru', ' ']')
615: 1:Fire Event: PassTest{complexity=26, testCount=22}
------------------------------------------
616: 1:BoardData {
616: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
616: 1:  'expectedAnswer': ' ',
616: 1:  'history': [
616: 1:    {
616: 1:      'answer': 'es',
616: 1:      'question': 'test',
616: 1:      'valid': true
616: 1:    },
616: 1:    {
616: 1:      'answer': 't',
616: 1:      'question': 'testing',
616: 1:      'valid': true
616: 1:    },
616: 1:    {
616: 1:      'answer': 'dd',
616: 1:      'question': 'middle',
616: 1:      'valid': true
616: 1:    },
616: 1:    {
616: 1:      'answer': 'A',
616: 1:      'question': 'A',
616: 1:      'valid': true
616: 1:    },
616: 1:    {
616: 1:      'answer': 'l',
616: 1:      'question': 'Hello',
616: 1:      'valid': true
616: 1:    },
616: 1:    {
616: 1:      'answer': 'av',
616: 1:      'question': 'Java',
616: 1:      'valid': true
616: 1:    },
616: 1:    {
616: 1:      'answer': 'en',
616: 1:      'question': 'OpenAI',
616: 1:      'valid': true
616: 1:    },
616: 1:    {
616: 1:      'answer': 't',
616: 1:      'question': 'Testing',
616: 1:      'valid': true
616: 1:    },
616: 1:    {
616: 1:      'answer': 't',
616: 1:      'question': 'ChatGPT',
616: 1:      'valid': true
616: 1:    },
616: 1:    {
616: 1:      'answer': 'a',
616: 1:      'question': 'Programming',
616: 1:      'valid': true
616: 1:    },
616: 1:    {
616: 1:      'answer': 'r',
616: 1:      'question': 'Algorithm',
616: 1:      'valid': true
616: 1:    },
616: 1:    {
616: 1:      'answer': 'ru',
616: 1:      'question': 'DataStructures',
616: 1:      'valid': true
616: 1:    },
616: 1:    {
616: 1:      'answer': ' ',
616: 1:      'question': 'Hello, World!',
616: 1:      'valid': true
616: 1:    }
616: 1:  ],
616: 1:  'info': [
616: 1:    '✅f(test) = es',
616: 1:    '✅f(testing) = t',
616: 1:    '✅f(middle) = dd',
616: 1:    '✅f(A) = A',
616: 1:    '✅f(Hello) = l',
616: 1:    '✅f(Java) = av',
616: 1:    '✅f(OpenAI) = en',
616: 1:    '✅f(Testing) = t',
616: 1:    '✅f(ChatGPT) = t',
616: 1:    '✅f(Programming) = a',
616: 1:    '✅f(Algorithm) = r',
616: 1:    '✅f(DataStructures) = ru',
616: 1:    '✅f(Hello, World!) =  ',
616: 1:    '❌f(Java is awesome) = ??? !=  '
616: 1:  ],
616: 1:  'level': 22,
616: 1:  'nextQuestion': 'Java is awesome',
616: 1:  'questions': [
616: 1:    'test',
616: 1:    'testing',
616: 1:    'middle',
616: 1:    'A',
616: 1:    'Hello',
616: 1:    'Java',
616: 1:    'OpenAI',
616: 1:    'Testing',
616: 1:    'ChatGPT',
616: 1:    'Programming',
616: 1:    'Algorithm',
616: 1:    'DataStructures',
616: 1:    'Hello, World!',
616: 1:    'Java is awesome'
616: 1:  ]
616: 1:}
616: 1:Scores: 45543
616: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't', 't', 'a', 'r', 'ru', ' ', ' ']')
616: 1:Fire Event: PassTest{complexity=26, testCount=22}
------------------------------------------
617: 1:BoardData {
617: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
617: 1:  'expectedAnswer': ' C',
617: 1:  'history': [
617: 1:    {
617: 1:      'answer': 'es',
617: 1:      'question': 'test',
617: 1:      'valid': true
617: 1:    },
617: 1:    {
617: 1:      'answer': 't',
617: 1:      'question': 'testing',
617: 1:      'valid': true
617: 1:    },
617: 1:    {
617: 1:      'answer': 'dd',
617: 1:      'question': 'middle',
617: 1:      'valid': true
617: 1:    },
617: 1:    {
617: 1:      'answer': 'A',
617: 1:      'question': 'A',
617: 1:      'valid': true
617: 1:    },
617: 1:    {
617: 1:      'answer': 'l',
617: 1:      'question': 'Hello',
617: 1:      'valid': true
617: 1:    },
617: 1:    {
617: 1:      'answer': 'av',
617: 1:      'question': 'Java',
617: 1:      'valid': true
617: 1:    },
617: 1:    {
617: 1:      'answer': 'en',
617: 1:      'question': 'OpenAI',
617: 1:      'valid': true
617: 1:    },
617: 1:    {
617: 1:      'answer': 't',
617: 1:      'question': 'Testing',
617: 1:      'valid': true
617: 1:    },
617: 1:    {
617: 1:      'answer': 't',
617: 1:      'question': 'ChatGPT',
617: 1:      'valid': true
617: 1:    },
617: 1:    {
617: 1:      'answer': 'a',
617: 1:      'question': 'Programming',
617: 1:      'valid': true
617: 1:    },
617: 1:    {
617: 1:      'answer': 'r',
617: 1:      'question': 'Algorithm',
617: 1:      'valid': true
617: 1:    },
617: 1:    {
617: 1:      'answer': 'ru',
617: 1:      'question': 'DataStructures',
617: 1:      'valid': true
617: 1:    },
617: 1:    {
617: 1:      'answer': ' ',
617: 1:      'question': 'Hello, World!',
617: 1:      'valid': true
617: 1:    },
617: 1:    {
617: 1:      'answer': ' ',
617: 1:      'question': 'Java is awesome',
617: 1:      'valid': true
617: 1:    }
617: 1:  ],
617: 1:  'info': [
617: 1:    '✅f(test) = es',
617: 1:    '✅f(testing) = t',
617: 1:    '✅f(middle) = dd',
617: 1:    '✅f(A) = A',
617: 1:    '✅f(Hello) = l',
617: 1:    '✅f(Java) = av',
617: 1:    '✅f(OpenAI) = en',
617: 1:    '✅f(Testing) = t',
617: 1:    '✅f(ChatGPT) = t',
617: 1:    '✅f(Programming) = a',
617: 1:    '✅f(Algorithm) = r',
617: 1:    '✅f(DataStructures) = ru',
617: 1:    '✅f(Hello, World!) =  ',
617: 1:    '✅f(Java is awesome) =  ',
617: 1:    '❌f(OpenAI ChatGPT) = ??? !=  C'
617: 1:  ],
617: 1:  'level': 22,
617: 1:  'nextQuestion': 'OpenAI ChatGPT',
617: 1:  'questions': [
617: 1:    'test',
617: 1:    'testing',
617: 1:    'middle',
617: 1:    'A',
617: 1:    'Hello',
617: 1:    'Java',
617: 1:    'OpenAI',
617: 1:    'Testing',
617: 1:    'ChatGPT',
617: 1:    'Programming',
617: 1:    'Algorithm',
617: 1:    'DataStructures',
617: 1:    'Hello, World!',
617: 1:    'Java is awesome',
617: 1:    'OpenAI ChatGPT'
617: 1:  ]
617: 1:}
617: 1:Scores: 45554
617: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't', 't', 'a', 'r', 'ru', ' ', ' ', ' C']')
617: 1:Fire Event: PassTest{complexity=26, testCount=22}
------------------------------------------
618: 1:BoardData {
618: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
618: 1:  'expectedAnswer': '3',
618: 1:  'history': [
618: 1:    {
618: 1:      'answer': 'es',
618: 1:      'question': 'test',
618: 1:      'valid': true
618: 1:    },
618: 1:    {
618: 1:      'answer': 't',
618: 1:      'question': 'testing',
618: 1:      'valid': true
618: 1:    },
618: 1:    {
618: 1:      'answer': 'dd',
618: 1:      'question': 'middle',
618: 1:      'valid': true
618: 1:    },
618: 1:    {
618: 1:      'answer': 'A',
618: 1:      'question': 'A',
618: 1:      'valid': true
618: 1:    },
618: 1:    {
618: 1:      'answer': 'l',
618: 1:      'question': 'Hello',
618: 1:      'valid': true
618: 1:    },
618: 1:    {
618: 1:      'answer': 'av',
618: 1:      'question': 'Java',
618: 1:      'valid': true
618: 1:    },
618: 1:    {
618: 1:      'answer': 'en',
618: 1:      'question': 'OpenAI',
618: 1:      'valid': true
618: 1:    },
618: 1:    {
618: 1:      'answer': 't',
618: 1:      'question': 'Testing',
618: 1:      'valid': true
618: 1:    },
618: 1:    {
618: 1:      'answer': 't',
618: 1:      'question': 'ChatGPT',
618: 1:      'valid': true
618: 1:    },
618: 1:    {
618: 1:      'answer': 'a',
618: 1:      'question': 'Programming',
618: 1:      'valid': true
618: 1:    },
618: 1:    {
618: 1:      'answer': 'r',
618: 1:      'question': 'Algorithm',
618: 1:      'valid': true
618: 1:    },
618: 1:    {
618: 1:      'answer': 'ru',
618: 1:      'question': 'DataStructures',
618: 1:      'valid': true
618: 1:    },
618: 1:    {
618: 1:      'answer': ' ',
618: 1:      'question': 'Hello, World!',
618: 1:      'valid': true
618: 1:    },
618: 1:    {
618: 1:      'answer': ' ',
618: 1:      'question': 'Java is awesome',
618: 1:      'valid': true
618: 1:    },
618: 1:    {
618: 1:      'answer': ' C',
618: 1:      'question': 'OpenAI ChatGPT',
618: 1:      'valid': true
618: 1:    }
618: 1:  ],
618: 1:  'info': [
618: 1:    '✅f(test) = es',
618: 1:    '✅f(testing) = t',
618: 1:    '✅f(middle) = dd',
618: 1:    '✅f(A) = A',
618: 1:    '✅f(Hello) = l',
618: 1:    '✅f(Java) = av',
618: 1:    '✅f(OpenAI) = en',
618: 1:    '✅f(Testing) = t',
618: 1:    '✅f(ChatGPT) = t',
618: 1:    '✅f(Programming) = a',
618: 1:    '✅f(Algorithm) = r',
618: 1:    '✅f(DataStructures) = ru',
618: 1:    '✅f(Hello, World!) =  ',
618: 1:    '✅f(Java is awesome) =  ',
618: 1:    '✅f(OpenAI ChatGPT) =  C',
618: 1:    '❌f(12345) = ??? != 3'
618: 1:  ],
618: 1:  'level': 22,
618: 1:  'nextQuestion': '12345',
618: 1:  'questions': [
618: 1:    'test',
618: 1:    'testing',
618: 1:    'middle',
618: 1:    'A',
618: 1:    'Hello',
618: 1:    'Java',
618: 1:    'OpenAI',
618: 1:    'Testing',
618: 1:    'ChatGPT',
618: 1:    'Programming',
618: 1:    'Algorithm',
618: 1:    'DataStructures',
618: 1:    'Hello, World!',
618: 1:    'Java is awesome',
618: 1:    'OpenAI ChatGPT',
618: 1:    '12345'
618: 1:  ]
618: 1:}
618: 1:Scores: 45565
618: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't', 't', 'a', 'r', 'ru', ' ', ' ', ' C', '3']')
618: 1:Fire Event: PassTest{complexity=26, testCount=22}
------------------------------------------
619: 1:BoardData {
619: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
619: 1:  'expectedAnswer': 'C',
619: 1:  'history': [
619: 1:    {
619: 1:      'answer': 'es',
619: 1:      'question': 'test',
619: 1:      'valid': true
619: 1:    },
619: 1:    {
619: 1:      'answer': 't',
619: 1:      'question': 'testing',
619: 1:      'valid': true
619: 1:    },
619: 1:    {
619: 1:      'answer': 'dd',
619: 1:      'question': 'middle',
619: 1:      'valid': true
619: 1:    },
619: 1:    {
619: 1:      'answer': 'A',
619: 1:      'question': 'A',
619: 1:      'valid': true
619: 1:    },
619: 1:    {
619: 1:      'answer': 'l',
619: 1:      'question': 'Hello',
619: 1:      'valid': true
619: 1:    },
619: 1:    {
619: 1:      'answer': 'av',
619: 1:      'question': 'Java',
619: 1:      'valid': true
619: 1:    },
619: 1:    {
619: 1:      'answer': 'en',
619: 1:      'question': 'OpenAI',
619: 1:      'valid': true
619: 1:    },
619: 1:    {
619: 1:      'answer': 't',
619: 1:      'question': 'Testing',
619: 1:      'valid': true
619: 1:    },
619: 1:    {
619: 1:      'answer': 't',
619: 1:      'question': 'ChatGPT',
619: 1:      'valid': true
619: 1:    },
619: 1:    {
619: 1:      'answer': 'a',
619: 1:      'question': 'Programming',
619: 1:      'valid': true
619: 1:    },
619: 1:    {
619: 1:      'answer': 'r',
619: 1:      'question': 'Algorithm',
619: 1:      'valid': true
619: 1:    },
619: 1:    {
619: 1:      'answer': 'ru',
619: 1:      'question': 'DataStructures',
619: 1:      'valid': true
619: 1:    },
619: 1:    {
619: 1:      'answer': ' ',
619: 1:      'question': 'Hello, World!',
619: 1:      'valid': true
619: 1:    },
619: 1:    {
619: 1:      'answer': ' ',
619: 1:      'question': 'Java is awesome',
619: 1:      'valid': true
619: 1:    },
619: 1:    {
619: 1:      'answer': ' C',
619: 1:      'question': 'OpenAI ChatGPT',
619: 1:      'valid': true
619: 1:    },
619: 1:    {
619: 1:      'answer': '3',
619: 1:      'question': '12345',
619: 1:      'valid': true
619: 1:    }
619: 1:  ],
619: 1:  'info': [
619: 1:    '✅f(test) = es',
619: 1:    '✅f(testing) = t',
619: 1:    '✅f(middle) = dd',
619: 1:    '✅f(A) = A',
619: 1:    '✅f(Hello) = l',
619: 1:    '✅f(Java) = av',
619: 1:    '✅f(OpenAI) = en',
619: 1:    '✅f(Testing) = t',
619: 1:    '✅f(ChatGPT) = t',
619: 1:    '✅f(Programming) = a',
619: 1:    '✅f(Algorithm) = r',
619: 1:    '✅f(DataStructures) = ru',
619: 1:    '✅f(Hello, World!) =  ',
619: 1:    '✅f(Java is awesome) =  ',
619: 1:    '✅f(OpenAI ChatGPT) =  C',
619: 1:    '✅f(12345) = 3',
619: 1:    '❌f(ABCDE) = ??? != C'
619: 1:  ],
619: 1:  'level': 22,
619: 1:  'nextQuestion': 'ABCDE',
619: 1:  'questions': [
619: 1:    'test',
619: 1:    'testing',
619: 1:    'middle',
619: 1:    'A',
619: 1:    'Hello',
619: 1:    'Java',
619: 1:    'OpenAI',
619: 1:    'Testing',
619: 1:    'ChatGPT',
619: 1:    'Programming',
619: 1:    'Algorithm',
619: 1:    'DataStructures',
619: 1:    'Hello, World!',
619: 1:    'Java is awesome',
619: 1:    'OpenAI ChatGPT',
619: 1:    '12345',
619: 1:    'ABCDE'
619: 1:  ]
619: 1:}
619: 1:Scores: 45576
619: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't', 't', 'a', 'r', 'ru', ' ', ' ', ' C', '3', 'C']')
619: 1:Fire Event: PassTest{complexity=26, testCount=22}
------------------------------------------
620: 1:BoardData {
620: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
620: 1:  'expectedAnswer': 'n',
620: 1:  'history': [
620: 1:    {
620: 1:      'answer': 'es',
620: 1:      'question': 'test',
620: 1:      'valid': true
620: 1:    },
620: 1:    {
620: 1:      'answer': 't',
620: 1:      'question': 'testing',
620: 1:      'valid': true
620: 1:    },
620: 1:    {
620: 1:      'answer': 'dd',
620: 1:      'question': 'middle',
620: 1:      'valid': true
620: 1:    },
620: 1:    {
620: 1:      'answer': 'A',
620: 1:      'question': 'A',
620: 1:      'valid': true
620: 1:    },
620: 1:    {
620: 1:      'answer': 'l',
620: 1:      'question': 'Hello',
620: 1:      'valid': true
620: 1:    },
620: 1:    {
620: 1:      'answer': 'av',
620: 1:      'question': 'Java',
620: 1:      'valid': true
620: 1:    },
620: 1:    {
620: 1:      'answer': 'en',
620: 1:      'question': 'OpenAI',
620: 1:      'valid': true
620: 1:    },
620: 1:    {
620: 1:      'answer': 't',
620: 1:      'question': 'Testing',
620: 1:      'valid': true
620: 1:    },
620: 1:    {
620: 1:      'answer': 't',
620: 1:      'question': 'ChatGPT',
620: 1:      'valid': true
620: 1:    },
620: 1:    {
620: 1:      'answer': 'a',
620: 1:      'question': 'Programming',
620: 1:      'valid': true
620: 1:    },
620: 1:    {
620: 1:      'answer': 'r',
620: 1:      'question': 'Algorithm',
620: 1:      'valid': true
620: 1:    },
620: 1:    {
620: 1:      'answer': 'ru',
620: 1:      'question': 'DataStructures',
620: 1:      'valid': true
620: 1:    },
620: 1:    {
620: 1:      'answer': ' ',
620: 1:      'question': 'Hello, World!',
620: 1:      'valid': true
620: 1:    },
620: 1:    {
620: 1:      'answer': ' ',
620: 1:      'question': 'Java is awesome',
620: 1:      'valid': true
620: 1:    },
620: 1:    {
620: 1:      'answer': ' C',
620: 1:      'question': 'OpenAI ChatGPT',
620: 1:      'valid': true
620: 1:    },
620: 1:    {
620: 1:      'answer': '3',
620: 1:      'question': '12345',
620: 1:      'valid': true
620: 1:    },
620: 1:    {
620: 1:      'answer': 'C',
620: 1:      'question': 'ABCDE',
620: 1:      'valid': true
620: 1:    }
620: 1:  ],
620: 1:  'info': [
620: 1:    '✅f(test) = es',
620: 1:    '✅f(testing) = t',
620: 1:    '✅f(middle) = dd',
620: 1:    '✅f(A) = A',
620: 1:    '✅f(Hello) = l',
620: 1:    '✅f(Java) = av',
620: 1:    '✅f(OpenAI) = en',
620: 1:    '✅f(Testing) = t',
620: 1:    '✅f(ChatGPT) = t',
620: 1:    '✅f(Programming) = a',
620: 1:    '✅f(Algorithm) = r',
620: 1:    '✅f(DataStructures) = ru',
620: 1:    '✅f(Hello, World!) =  ',
620: 1:    '✅f(Java is awesome) =  ',
620: 1:    '✅f(OpenAI ChatGPT) =  C',
620: 1:    '✅f(12345) = 3',
620: 1:    '✅f(ABCDE) = C',
620: 1:    '❌f(Testing 123) = ??? != n'
620: 1:  ],
620: 1:  'level': 22,
620: 1:  'nextQuestion': 'Testing 123',
620: 1:  'questions': [
620: 1:    'test',
620: 1:    'testing',
620: 1:    'middle',
620: 1:    'A',
620: 1:    'Hello',
620: 1:    'Java',
620: 1:    'OpenAI',
620: 1:    'Testing',
620: 1:    'ChatGPT',
620: 1:    'Programming',
620: 1:    'Algorithm',
620: 1:    'DataStructures',
620: 1:    'Hello, World!',
620: 1:    'Java is awesome',
620: 1:    'OpenAI ChatGPT',
620: 1:    '12345',
620: 1:    'ABCDE',
620: 1:    'Testing 123'
620: 1:  ]
620: 1:}
620: 1:Scores: 45587
620: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't', 't', 'a', 'r', 'ru', ' ', ' ', ' C', '3', 'C', 'n']')
620: 1:Fire Event: PassTest{complexity=26, testCount=22}
------------------------------------------
621: 1:BoardData {
621: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
621: 1:  'expectedAnswer': ' ',
621: 1:  'history': [
621: 1:    {
621: 1:      'answer': 'es',
621: 1:      'question': 'test',
621: 1:      'valid': true
621: 1:    },
621: 1:    {
621: 1:      'answer': 't',
621: 1:      'question': 'testing',
621: 1:      'valid': true
621: 1:    },
621: 1:    {
621: 1:      'answer': 'dd',
621: 1:      'question': 'middle',
621: 1:      'valid': true
621: 1:    },
621: 1:    {
621: 1:      'answer': 'A',
621: 1:      'question': 'A',
621: 1:      'valid': true
621: 1:    },
621: 1:    {
621: 1:      'answer': 'l',
621: 1:      'question': 'Hello',
621: 1:      'valid': true
621: 1:    },
621: 1:    {
621: 1:      'answer': 'av',
621: 1:      'question': 'Java',
621: 1:      'valid': true
621: 1:    },
621: 1:    {
621: 1:      'answer': 'en',
621: 1:      'question': 'OpenAI',
621: 1:      'valid': true
621: 1:    },
621: 1:    {
621: 1:      'answer': 't',
621: 1:      'question': 'Testing',
621: 1:      'valid': true
621: 1:    },
621: 1:    {
621: 1:      'answer': 't',
621: 1:      'question': 'ChatGPT',
621: 1:      'valid': true
621: 1:    },
621: 1:    {
621: 1:      'answer': 'a',
621: 1:      'question': 'Programming',
621: 1:      'valid': true
621: 1:    },
621: 1:    {
621: 1:      'answer': 'r',
621: 1:      'question': 'Algorithm',
621: 1:      'valid': true
621: 1:    },
621: 1:    {
621: 1:      'answer': 'ru',
621: 1:      'question': 'DataStructures',
621: 1:      'valid': true
621: 1:    },
621: 1:    {
621: 1:      'answer': ' ',
621: 1:      'question': 'Hello, World!',
621: 1:      'valid': true
621: 1:    },
621: 1:    {
621: 1:      'answer': ' ',
621: 1:      'question': 'Java is awesome',
621: 1:      'valid': true
621: 1:    },
621: 1:    {
621: 1:      'answer': ' C',
621: 1:      'question': 'OpenAI ChatGPT',
621: 1:      'valid': true
621: 1:    },
621: 1:    {
621: 1:      'answer': '3',
621: 1:      'question': '12345',
621: 1:      'valid': true
621: 1:    },
621: 1:    {
621: 1:      'answer': 'C',
621: 1:      'question': 'ABCDE',
621: 1:      'valid': true
621: 1:    },
621: 1:    {
621: 1:      'answer': 'n',
621: 1:      'question': 'Testing 123',
621: 1:      'valid': true
621: 1:    }
621: 1:  ],
621: 1:  'info': [
621: 1:    '✅f(test) = es',
621: 1:    '✅f(testing) = t',
621: 1:    '✅f(middle) = dd',
621: 1:    '✅f(A) = A',
621: 1:    '✅f(Hello) = l',
621: 1:    '✅f(Java) = av',
621: 1:    '✅f(OpenAI) = en',
621: 1:    '✅f(Testing) = t',
621: 1:    '✅f(ChatGPT) = t',
621: 1:    '✅f(Programming) = a',
621: 1:    '✅f(Algorithm) = r',
621: 1:    '✅f(DataStructures) = ru',
621: 1:    '✅f(Hello, World!) =  ',
621: 1:    '✅f(Java is awesome) =  ',
621: 1:    '✅f(OpenAI ChatGPT) =  C',
621: 1:    '✅f(12345) = 3',
621: 1:    '✅f(ABCDE) = C',
621: 1:    '✅f(Testing 123) = n',
621: 1:    '❌f(Hello World) = ??? !=  '
621: 1:  ],
621: 1:  'level': 22,
621: 1:  'nextQuestion': 'Hello World',
621: 1:  'questions': [
621: 1:    'test',
621: 1:    'testing',
621: 1:    'middle',
621: 1:    'A',
621: 1:    'Hello',
621: 1:    'Java',
621: 1:    'OpenAI',
621: 1:    'Testing',
621: 1:    'ChatGPT',
621: 1:    'Programming',
621: 1:    'Algorithm',
621: 1:    'DataStructures',
621: 1:    'Hello, World!',
621: 1:    'Java is awesome',
621: 1:    'OpenAI ChatGPT',
621: 1:    '12345',
621: 1:    'ABCDE',
621: 1:    'Testing 123',
621: 1:    'Hello World'
621: 1:  ]
621: 1:}
621: 1:Scores: 45598
621: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't', 't', 'a', 'r', 'ru', ' ', ' ', ' C', '3', 'C', 'n', ' ']')
621: 1:Fire Event: PassTest{complexity=26, testCount=22}
------------------------------------------
622: 1:BoardData {
622: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
622: 1:  'expectedAnswer': ' ',
622: 1:  'history': [
622: 1:    {
622: 1:      'answer': 'es',
622: 1:      'question': 'test',
622: 1:      'valid': true
622: 1:    },
622: 1:    {
622: 1:      'answer': 't',
622: 1:      'question': 'testing',
622: 1:      'valid': true
622: 1:    },
622: 1:    {
622: 1:      'answer': 'dd',
622: 1:      'question': 'middle',
622: 1:      'valid': true
622: 1:    },
622: 1:    {
622: 1:      'answer': 'A',
622: 1:      'question': 'A',
622: 1:      'valid': true
622: 1:    },
622: 1:    {
622: 1:      'answer': 'l',
622: 1:      'question': 'Hello',
622: 1:      'valid': true
622: 1:    },
622: 1:    {
622: 1:      'answer': 'av',
622: 1:      'question': 'Java',
622: 1:      'valid': true
622: 1:    },
622: 1:    {
622: 1:      'answer': 'en',
622: 1:      'question': 'OpenAI',
622: 1:      'valid': true
622: 1:    },
622: 1:    {
622: 1:      'answer': 't',
622: 1:      'question': 'Testing',
622: 1:      'valid': true
622: 1:    },
622: 1:    {
622: 1:      'answer': 't',
622: 1:      'question': 'ChatGPT',
622: 1:      'valid': true
622: 1:    },
622: 1:    {
622: 1:      'answer': 'a',
622: 1:      'question': 'Programming',
622: 1:      'valid': true
622: 1:    },
622: 1:    {
622: 1:      'answer': 'r',
622: 1:      'question': 'Algorithm',
622: 1:      'valid': true
622: 1:    },
622: 1:    {
622: 1:      'answer': 'ru',
622: 1:      'question': 'DataStructures',
622: 1:      'valid': true
622: 1:    },
622: 1:    {
622: 1:      'answer': ' ',
622: 1:      'question': 'Hello, World!',
622: 1:      'valid': true
622: 1:    },
622: 1:    {
622: 1:      'answer': ' ',
622: 1:      'question': 'Java is awesome',
622: 1:      'valid': true
622: 1:    },
622: 1:    {
622: 1:      'answer': ' C',
622: 1:      'question': 'OpenAI ChatGPT',
622: 1:      'valid': true
622: 1:    },
622: 1:    {
622: 1:      'answer': '3',
622: 1:      'question': '12345',
622: 1:      'valid': true
622: 1:    },
622: 1:    {
622: 1:      'answer': 'C',
622: 1:      'question': 'ABCDE',
622: 1:      'valid': true
622: 1:    },
622: 1:    {
622: 1:      'answer': 'n',
622: 1:      'question': 'Testing 123',
622: 1:      'valid': true
622: 1:    },
622: 1:    {
622: 1:      'answer': ' ',
622: 1:      'question': 'Hello World',
622: 1:      'valid': true
622: 1:    }
622: 1:  ],
622: 1:  'info': [
622: 1:    '✅f(test) = es',
622: 1:    '✅f(testing) = t',
622: 1:    '✅f(middle) = dd',
622: 1:    '✅f(A) = A',
622: 1:    '✅f(Hello) = l',
622: 1:    '✅f(Java) = av',
622: 1:    '✅f(OpenAI) = en',
622: 1:    '✅f(Testing) = t',
622: 1:    '✅f(ChatGPT) = t',
622: 1:    '✅f(Programming) = a',
622: 1:    '✅f(Algorithm) = r',
622: 1:    '✅f(DataStructures) = ru',
622: 1:    '✅f(Hello, World!) =  ',
622: 1:    '✅f(Java is awesome) =  ',
622: 1:    '✅f(OpenAI ChatGPT) =  C',
622: 1:    '✅f(12345) = 3',
622: 1:    '✅f(ABCDE) = C',
622: 1:    '✅f(Testing 123) = n',
622: 1:    '✅f(Hello World) =  ',
622: 1:    '❌f(Java Code) = ??? !=  '
622: 1:  ],
622: 1:  'level': 22,
622: 1:  'nextQuestion': 'Java Code',
622: 1:  'questions': [
622: 1:    'test',
622: 1:    'testing',
622: 1:    'middle',
622: 1:    'A',
622: 1:    'Hello',
622: 1:    'Java',
622: 1:    'OpenAI',
622: 1:    'Testing',
622: 1:    'ChatGPT',
622: 1:    'Programming',
622: 1:    'Algorithm',
622: 1:    'DataStructures',
622: 1:    'Hello, World!',
622: 1:    'Java is awesome',
622: 1:    'OpenAI ChatGPT',
622: 1:    '12345',
622: 1:    'ABCDE',
622: 1:    'Testing 123',
622: 1:    'Hello World',
622: 1:    'Java Code'
622: 1:  ]
622: 1:}
622: 1:Scores: 45609
622: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't', 't', 'a', 'r', 'ru', ' ', ' ', ' C', '3', 'C', 'n', ' ', ' ']')
622: 1:Fire Event: PassTest{complexity=26, testCount=22}
------------------------------------------
623: 1:BoardData {
623: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
623: 1:  'expectedAnswer': 'I ',
623: 1:  'history': [
623: 1:    {
623: 1:      'answer': 'es',
623: 1:      'question': 'test',
623: 1:      'valid': true
623: 1:    },
623: 1:    {
623: 1:      'answer': 't',
623: 1:      'question': 'testing',
623: 1:      'valid': true
623: 1:    },
623: 1:    {
623: 1:      'answer': 'dd',
623: 1:      'question': 'middle',
623: 1:      'valid': true
623: 1:    },
623: 1:    {
623: 1:      'answer': 'A',
623: 1:      'question': 'A',
623: 1:      'valid': true
623: 1:    },
623: 1:    {
623: 1:      'answer': 'l',
623: 1:      'question': 'Hello',
623: 1:      'valid': true
623: 1:    },
623: 1:    {
623: 1:      'answer': 'av',
623: 1:      'question': 'Java',
623: 1:      'valid': true
623: 1:    },
623: 1:    {
623: 1:      'answer': 'en',
623: 1:      'question': 'OpenAI',
623: 1:      'valid': true
623: 1:    },
623: 1:    {
623: 1:      'answer': 't',
623: 1:      'question': 'Testing',
623: 1:      'valid': true
623: 1:    },
623: 1:    {
623: 1:      'answer': 't',
623: 1:      'question': 'ChatGPT',
623: 1:      'valid': true
623: 1:    },
623: 1:    {
623: 1:      'answer': 'a',
623: 1:      'question': 'Programming',
623: 1:      'valid': true
623: 1:    },
623: 1:    {
623: 1:      'answer': 'r',
623: 1:      'question': 'Algorithm',
623: 1:      'valid': true
623: 1:    },
623: 1:    {
623: 1:      'answer': 'ru',
623: 1:      'question': 'DataStructures',
623: 1:      'valid': true
623: 1:    },
623: 1:    {
623: 1:      'answer': ' ',
623: 1:      'question': 'Hello, World!',
623: 1:      'valid': true
623: 1:    },
623: 1:    {
623: 1:      'answer': ' ',
623: 1:      'question': 'Java is awesome',
623: 1:      'valid': true
623: 1:    },
623: 1:    {
623: 1:      'answer': ' C',
623: 1:      'question': 'OpenAI ChatGPT',
623: 1:      'valid': true
623: 1:    },
623: 1:    {
623: 1:      'answer': '3',
623: 1:      'question': '12345',
623: 1:      'valid': true
623: 1:    },
623: 1:    {
623: 1:      'answer': 'C',
623: 1:      'question': 'ABCDE',
623: 1:      'valid': true
623: 1:    },
623: 1:    {
623: 1:      'answer': 'n',
623: 1:      'question': 'Testing 123',
623: 1:      'valid': true
623: 1:    },
623: 1:    {
623: 1:      'answer': ' ',
623: 1:      'question': 'Hello World',
623: 1:      'valid': true
623: 1:    },
623: 1:    {
623: 1:      'answer': ' ',
623: 1:      'question': 'Java Code',
623: 1:      'valid': true
623: 1:    }
623: 1:  ],
623: 1:  'info': [
623: 1:    '✅f(test) = es',
623: 1:    '✅f(testing) = t',
623: 1:    '✅f(middle) = dd',
623: 1:    '✅f(A) = A',
623: 1:    '✅f(Hello) = l',
623: 1:    '✅f(Java) = av',
623: 1:    '✅f(OpenAI) = en',
623: 1:    '✅f(Testing) = t',
623: 1:    '✅f(ChatGPT) = t',
623: 1:    '✅f(Programming) = a',
623: 1:    '✅f(Algorithm) = r',
623: 1:    '✅f(DataStructures) = ru',
623: 1:    '✅f(Hello, World!) =  ',
623: 1:    '✅f(Java is awesome) =  ',
623: 1:    '✅f(OpenAI ChatGPT) =  C',
623: 1:    '✅f(12345) = 3',
623: 1:    '✅f(ABCDE) = C',
623: 1:    '✅f(Testing 123) = n',
623: 1:    '✅f(Hello World) =  ',
623: 1:    '✅f(Java Code) =  ',
623: 1:    '❌f(OpenAI Model) = ??? != I '
623: 1:  ],
623: 1:  'level': 22,
623: 1:  'nextQuestion': 'OpenAI Model',
623: 1:  'questions': [
623: 1:    'test',
623: 1:    'testing',
623: 1:    'middle',
623: 1:    'A',
623: 1:    'Hello',
623: 1:    'Java',
623: 1:    'OpenAI',
623: 1:    'Testing',
623: 1:    'ChatGPT',
623: 1:    'Programming',
623: 1:    'Algorithm',
623: 1:    'DataStructures',
623: 1:    'Hello, World!',
623: 1:    'Java is awesome',
623: 1:    'OpenAI ChatGPT',
623: 1:    '12345',
623: 1:    'ABCDE',
623: 1:    'Testing 123',
623: 1:    'Hello World',
623: 1:    'Java Code',
623: 1:    'OpenAI Model'
623: 1:  ]
623: 1:}
623: 1:Scores: 45620
623: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't', 't', 'a', 'r', 'ru', ' ', ' ', ' C', '3', 'C', 'n', ' ', ' ', 'I ']')
623: 1:Fire Event: PassTest{complexity=26, testCount=22}
------------------------------------------
624: 1:BoardData {
624: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
624: 1:  'expectedAnswer': ' ',
624: 1:  'history': [
624: 1:    {
624: 1:      'answer': 'es',
624: 1:      'question': 'test',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': 't',
624: 1:      'question': 'testing',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': 'dd',
624: 1:      'question': 'middle',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': 'A',
624: 1:      'question': 'A',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': 'l',
624: 1:      'question': 'Hello',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': 'av',
624: 1:      'question': 'Java',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': 'en',
624: 1:      'question': 'OpenAI',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': 't',
624: 1:      'question': 'Testing',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': 't',
624: 1:      'question': 'ChatGPT',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': 'a',
624: 1:      'question': 'Programming',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': 'r',
624: 1:      'question': 'Algorithm',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': 'ru',
624: 1:      'question': 'DataStructures',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': ' ',
624: 1:      'question': 'Hello, World!',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': ' ',
624: 1:      'question': 'Java is awesome',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': ' C',
624: 1:      'question': 'OpenAI ChatGPT',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': '3',
624: 1:      'question': '12345',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': 'C',
624: 1:      'question': 'ABCDE',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': 'n',
624: 1:      'question': 'Testing 123',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': ' ',
624: 1:      'question': 'Hello World',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': ' ',
624: 1:      'question': 'Java Code',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': 'I ',
624: 1:      'question': 'OpenAI Model',
624: 1:      'valid': true
624: 1:    }
624: 1:  ],
624: 1:  'info': [
624: 1:    '✅f(test) = es',
624: 1:    '✅f(testing) = t',
624: 1:    '✅f(middle) = dd',
624: 1:    '✅f(A) = A',
624: 1:    '✅f(Hello) = l',
624: 1:    '✅f(Java) = av',
624: 1:    '✅f(OpenAI) = en',
624: 1:    '✅f(Testing) = t',
624: 1:    '✅f(ChatGPT) = t',
624: 1:    '✅f(Programming) = a',
624: 1:    '✅f(Algorithm) = r',
624: 1:    '✅f(DataStructures) = ru',
624: 1:    '✅f(Hello, World!) =  ',
624: 1:    '✅f(Java is awesome) =  ',
624: 1:    '✅f(OpenAI ChatGPT) =  C',
624: 1:    '✅f(12345) = 3',
624: 1:    '✅f(ABCDE) = C',
624: 1:    '✅f(Testing 123) = n',
624: 1:    '✅f(Hello World) =  ',
624: 1:    '✅f(Java Code) =  ',
624: 1:    '✅f(OpenAI Model) = I ',
624: 1:    '❌f(Lorem Ipsum) = ??? !=  '
624: 1:  ],
624: 1:  'level': 22,
624: 1:  'nextQuestion': 'Lorem Ipsum',
624: 1:  'questions': [
624: 1:    'test',
624: 1:    'testing',
624: 1:    'middle',
624: 1:    'A',
624: 1:    'Hello',
624: 1:    'Java',
624: 1:    'OpenAI',
624: 1:    'Testing',
624: 1:    'ChatGPT',
624: 1:    'Programming',
624: 1:    'Algorithm',
624: 1:    'DataStructures',
624: 1:    'Hello, World!',
624: 1:    'Java is awesome',
624: 1:    'OpenAI ChatGPT',
624: 1:    '12345',
624: 1:    'ABCDE',
624: 1:    'Testing 123',
624: 1:    'Hello World',
624: 1:    'Java Code',
624: 1:    'OpenAI Model',
624: 1:    'Lorem Ipsum'
624: 1:  ]
624: 1:}
624: 1:Scores: 45631
624: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't', 't', 'a', 'r', 'ru', ' ', ' ', ' C', '3', 'C', 'n', ' ', ' ', 'I ', ' ']')
624: 1:Fire Event: PassTest{complexity=26, testCount=22}
624: 1:Fire Event: NextAlgorithm{complexity=26, time=0}
------------------------------------------
625: 1:BoardData {
625: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
625: 1:  'history': [
625: 1:    {
625: 1:      'answer': 'es',
625: 1:      'question': 'test',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': 't',
625: 1:      'question': 'testing',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': 'dd',
625: 1:      'question': 'middle',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': 'A',
625: 1:      'question': 'A',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': 'l',
625: 1:      'question': 'Hello',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': 'av',
625: 1:      'question': 'Java',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': 'en',
625: 1:      'question': 'OpenAI',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': 't',
625: 1:      'question': 'Testing',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': 't',
625: 1:      'question': 'ChatGPT',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': 'a',
625: 1:      'question': 'Programming',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': 'r',
625: 1:      'question': 'Algorithm',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': 'ru',
625: 1:      'question': 'DataStructures',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': ' ',
625: 1:      'question': 'Hello, World!',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': ' ',
625: 1:      'question': 'Java is awesome',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': ' C',
625: 1:      'question': 'OpenAI ChatGPT',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': '3',
625: 1:      'question': '12345',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': 'C',
625: 1:      'question': 'ABCDE',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': 'n',
625: 1:      'question': 'Testing 123',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': ' ',
625: 1:      'question': 'Hello World',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': ' ',
625: 1:      'question': 'Java Code',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': 'I ',
625: 1:      'question': 'OpenAI Model',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': ' ',
625: 1:      'question': 'Lorem Ipsum',
625: 1:      'valid': true
625: 1:    }
625: 1:  ],
625: 1:  'info': [
625: 1:    '✅f(test) = es',
625: 1:    '✅f(testing) = t',
625: 1:    '✅f(middle) = dd',
625: 1:    '✅f(A) = A',
625: 1:    '✅f(Hello) = l',
625: 1:    '✅f(Java) = av',
625: 1:    '✅f(OpenAI) = en',
625: 1:    '✅f(Testing) = t',
625: 1:    '✅f(ChatGPT) = t',
625: 1:    '✅f(Programming) = a',
625: 1:    '✅f(Algorithm) = r',
625: 1:    '✅f(DataStructures) = ru',
625: 1:    '✅f(Hello, World!) =  ',
625: 1:    '✅f(Java is awesome) =  ',
625: 1:    '✅f(OpenAI ChatGPT) =  C',
625: 1:    '✅f(12345) = 3',
625: 1:    '✅f(ABCDE) = C',
625: 1:    '✅f(Testing 123) = n',
625: 1:    '✅f(Hello World) =  ',
625: 1:    '✅f(Java Code) =  ',
625: 1:    '✅f(OpenAI Model) = I ',
625: 1:    '✅f(Lorem Ipsum) =  '
625: 1:  ],
625: 1:  'level': 22,
625: 1:  'questions': []
625: 1:}
625: 1:Scores: 49151
625: 1:Answer: message('StartNextLevel')
625: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
626: 1:BoardData {
626: 1:  'description': ['Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702'],
626: 1:  'expectedAnswer': '222',
626: 1:  'history': [],
626: 1:  'info': ['❌f(111) = ??? != 222'],
626: 1:  'level': 23,
626: 1:  'nextQuestion': '111',
626: 1:  'questions': ['111']
626: 1:}
626: 1:Scores: 49151
626: 1:Answer: message('['222']')
626: 1:Fire Event: PassTest{complexity=27, testCount=12}
------------------------------------------
627: 1:BoardData {
627: 1:  'description': ['Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702'],
627: 1:  'expectedAnswer': '333',
627: 1:  'history': [{
627: 1:    'answer': '222',
627: 1:    'question': '111',
627: 1:    'valid': true
627: 1:  }],
627: 1:  'info': [
627: 1:    '✅f(111) = 222',
627: 1:    '❌f(222) = ??? != 333'
627: 1:  ],
627: 1:  'level': 23,
627: 1:  'nextQuestion': '222',
627: 1:  'questions': [
627: 1:    '111',
627: 1:    '222'
627: 1:  ]
627: 1:}
627: 1:Scores: 49173
627: 1:Answer: message('['222', '333']')
627: 1:Fire Event: PassTest{complexity=27, testCount=12}
------------------------------------------
628: 1:BoardData {
628: 1:  'description': ['Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702'],
628: 1:  'expectedAnswer': '444',
628: 1:  'history': [
628: 1:    {
628: 1:      'answer': '222',
628: 1:      'question': '111',
628: 1:      'valid': true
628: 1:    },
628: 1:    {
628: 1:      'answer': '333',
628: 1:      'question': '222',
628: 1:      'valid': true
628: 1:    }
628: 1:  ],
628: 1:  'info': [
628: 1:    '✅f(111) = 222',
628: 1:    '✅f(222) = 333',
628: 1:    '❌f(333) = ??? != 444'
628: 1:  ],
628: 1:  'level': 23,
628: 1:  'nextQuestion': '333',
628: 1:  'questions': [
628: 1:    '111',
628: 1:    '222',
628: 1:    '333'
628: 1:  ]
628: 1:}
628: 1:Scores: 49195
628: 1:Answer: message('['222', '333', '444']')
628: 1:Fire Event: PassTest{complexity=27, testCount=12}
------------------------------------------
629: 1:BoardData {
629: 1:  'description': ['Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702'],
629: 1:  'expectedAnswer': '555',
629: 1:  'history': [
629: 1:    {
629: 1:      'answer': '222',
629: 1:      'question': '111',
629: 1:      'valid': true
629: 1:    },
629: 1:    {
629: 1:      'answer': '333',
629: 1:      'question': '222',
629: 1:      'valid': true
629: 1:    },
629: 1:    {
629: 1:      'answer': '444',
629: 1:      'question': '333',
629: 1:      'valid': true
629: 1:    }
629: 1:  ],
629: 1:  'info': [
629: 1:    '✅f(111) = 222',
629: 1:    '✅f(222) = 333',
629: 1:    '✅f(333) = 444',
629: 1:    '❌f(444) = ??? != 555'
629: 1:  ],
629: 1:  'level': 23,
629: 1:  'nextQuestion': '444',
629: 1:  'questions': [
629: 1:    '111',
629: 1:    '222',
629: 1:    '333',
629: 1:    '444'
629: 1:  ]
629: 1:}
629: 1:Scores: 49217
629: 1:Answer: message('['222', '333', '444', '555']')
629: 1:Fire Event: PassTest{complexity=27, testCount=12}
------------------------------------------
630: 1:BoardData {
630: 1:  'description': ['Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702'],
630: 1:  'expectedAnswer': '666',
630: 1:  'history': [
630: 1:    {
630: 1:      'answer': '222',
630: 1:      'question': '111',
630: 1:      'valid': true
630: 1:    },
630: 1:    {
630: 1:      'answer': '333',
630: 1:      'question': '222',
630: 1:      'valid': true
630: 1:    },
630: 1:    {
630: 1:      'answer': '444',
630: 1:      'question': '333',
630: 1:      'valid': true
630: 1:    },
630: 1:    {
630: 1:      'answer': '555',
630: 1:      'question': '444',
630: 1:      'valid': true
630: 1:    }
630: 1:  ],
630: 1:  'info': [
630: 1:    '✅f(111) = 222',
630: 1:    '✅f(222) = 333',
630: 1:    '✅f(333) = 444',
630: 1:    '✅f(444) = 555',
630: 1:    '❌f(555) = ??? != 666'
630: 1:  ],
630: 1:  'level': 23,
630: 1:  'nextQuestion': '555',
630: 1:  'questions': [
630: 1:    '111',
630: 1:    '222',
630: 1:    '333',
630: 1:    '444',
630: 1:    '555'
630: 1:  ]
630: 1:}
630: 1:Scores: 49239
630: 1:Answer: message('['222', '333', '444', '555', '666']')
630: 1:Fire Event: PassTest{complexity=27, testCount=12}
------------------------------------------
631: 1:BoardData {
631: 1:  'description': ['Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702'],
631: 1:  'expectedAnswer': '121',
631: 1:  'history': [
631: 1:    {
631: 1:      'answer': '222',
631: 1:      'question': '111',
631: 1:      'valid': true
631: 1:    },
631: 1:    {
631: 1:      'answer': '333',
631: 1:      'question': '222',
631: 1:      'valid': true
631: 1:    },
631: 1:    {
631: 1:      'answer': '444',
631: 1:      'question': '333',
631: 1:      'valid': true
631: 1:    },
631: 1:    {
631: 1:      'answer': '555',
631: 1:      'question': '444',
631: 1:      'valid': true
631: 1:    },
631: 1:    {
631: 1:      'answer': '666',
631: 1:      'question': '555',
631: 1:      'valid': true
631: 1:    }
631: 1:  ],
631: 1:  'info': [
631: 1:    '✅f(111) = 222',
631: 1:    '✅f(222) = 333',
631: 1:    '✅f(333) = 444',
631: 1:    '✅f(444) = 555',
631: 1:    '✅f(555) = 666',
631: 1:    '❌f(100) = ??? != 121'
631: 1:  ],
631: 1:  'level': 23,
631: 1:  'nextQuestion': '100',
631: 1:  'questions': [
631: 1:    '111',
631: 1:    '222',
631: 1:    '333',
631: 1:    '444',
631: 1:    '555',
631: 1:    '100'
631: 1:  ]
631: 1:}
631: 1:Scores: 49261
631: 1:Answer: message('['222', '333', '444', '555', '666', '121']')
631: 1:Fire Event: PassTest{complexity=27, testCount=12}
------------------------------------------
632: 1:BoardData {
632: 1:  'description': ['Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702'],
632: 1:  'expectedAnswer': '423',
632: 1:  'history': [
632: 1:    {
632: 1:      'answer': '222',
632: 1:      'question': '111',
632: 1:      'valid': true
632: 1:    },
632: 1:    {
632: 1:      'answer': '333',
632: 1:      'question': '222',
632: 1:      'valid': true
632: 1:    },
632: 1:    {
632: 1:      'answer': '444',
632: 1:      'question': '333',
632: 1:      'valid': true
632: 1:    },
632: 1:    {
632: 1:      'answer': '555',
632: 1:      'question': '444',
632: 1:      'valid': true
632: 1:    },
632: 1:    {
632: 1:      'answer': '666',
632: 1:      'question': '555',
632: 1:      'valid': true
632: 1:    },
632: 1:    {
632: 1:      'answer': '121',
632: 1:      'question': '100',
632: 1:      'valid': true
632: 1:    }
632: 1:  ],
632: 1:  'info': [
632: 1:    '✅f(111) = 222',
632: 1:    '✅f(222) = 333',
632: 1:    '✅f(333) = 444',
632: 1:    '✅f(444) = 555',
632: 1:    '✅f(555) = 666',
632: 1:    '✅f(100) = 121',
632: 1:    '❌f(123) = ??? != 423'
632: 1:  ],
632: 1:  'level': 23,
632: 1:  'nextQuestion': '123',
632: 1:  'questions': [
632: 1:    '111',
632: 1:    '222',
632: 1:    '333',
632: 1:    '444',
632: 1:    '555',
632: 1:    '100',
632: 1:    '123'
632: 1:  ]
632: 1:}
632: 1:Scores: 49283
632: 1:Answer: message('['222', '333', '444', '555', '666', '121', '423']')
632: 1:Fire Event: PassTest{complexity=27, testCount=12}
------------------------------------------
633: 1:BoardData {
633: 1:  'description': ['Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702'],
633: 1:  'expectedAnswer': '000',
633: 1:  'history': [
633: 1:    {
633: 1:      'answer': '222',
633: 1:      'question': '111',
633: 1:      'valid': true
633: 1:    },
633: 1:    {
633: 1:      'answer': '333',
633: 1:      'question': '222',
633: 1:      'valid': true
633: 1:    },
633: 1:    {
633: 1:      'answer': '444',
633: 1:      'question': '333',
633: 1:      'valid': true
633: 1:    },
633: 1:    {
633: 1:      'answer': '555',
633: 1:      'question': '444',
633: 1:      'valid': true
633: 1:    },
633: 1:    {
633: 1:      'answer': '666',
633: 1:      'question': '555',
633: 1:      'valid': true
633: 1:    },
633: 1:    {
633: 1:      'answer': '121',
633: 1:      'question': '100',
633: 1:      'valid': true
633: 1:    },
633: 1:    {
633: 1:      'answer': '423',
633: 1:      'question': '123',
633: 1:      'valid': true
633: 1:    }
633: 1:  ],
633: 1:  'info': [
633: 1:    '✅f(111) = 222',
633: 1:    '✅f(222) = 333',
633: 1:    '✅f(333) = 444',
633: 1:    '✅f(444) = 555',
633: 1:    '✅f(555) = 666',
633: 1:    '✅f(100) = 121',
633: 1:    '✅f(123) = 423',
633: 1:    '❌f(999) = ??? != 000'
633: 1:  ],
633: 1:  'level': 23,
633: 1:  'nextQuestion': '999',
633: 1:  'questions': [
633: 1:    '111',
633: 1:    '222',
633: 1:    '333',
633: 1:    '444',
633: 1:    '555',
633: 1:    '100',
633: 1:    '123',
633: 1:    '999'
633: 1:  ]
633: 1:}
633: 1:Scores: 49305
633: 1:Answer: message('['222', '333', '444', '555', '666', '121', '423', '000']')
633: 1:Fire Event: PassTest{complexity=27, testCount=12}
------------------------------------------
634: 1:BoardData {
634: 1:  'description': ['Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702'],
634: 1:  'expectedAnswer': '089',
634: 1:  'history': [
634: 1:    {
634: 1:      'answer': '222',
634: 1:      'question': '111',
634: 1:      'valid': true
634: 1:    },
634: 1:    {
634: 1:      'answer': '333',
634: 1:      'question': '222',
634: 1:      'valid': true
634: 1:    },
634: 1:    {
634: 1:      'answer': '444',
634: 1:      'question': '333',
634: 1:      'valid': true
634: 1:    },
634: 1:    {
634: 1:      'answer': '555',
634: 1:      'question': '444',
634: 1:      'valid': true
634: 1:    },
634: 1:    {
634: 1:      'answer': '666',
634: 1:      'question': '555',
634: 1:      'valid': true
634: 1:    },
634: 1:    {
634: 1:      'answer': '121',
634: 1:      'question': '100',
634: 1:      'valid': true
634: 1:    },
634: 1:    {
634: 1:      'answer': '423',
634: 1:      'question': '123',
634: 1:      'valid': true
634: 1:    },
634: 1:    {
634: 1:      'answer': '000',
634: 1:      'question': '999',
634: 1:      'valid': true
634: 1:    }
634: 1:  ],
634: 1:  'info': [
634: 1:    '✅f(111) = 222',
634: 1:    '✅f(222) = 333',
634: 1:    '✅f(333) = 444',
634: 1:    '✅f(444) = 555',
634: 1:    '✅f(555) = 666',
634: 1:    '✅f(100) = 121',
634: 1:    '✅f(123) = 423',
634: 1:    '✅f(999) = 000',
634: 1:    '❌f(789) = ??? != 089'
634: 1:  ],
634: 1:  'level': 23,
634: 1:  'nextQuestion': '789',
634: 1:  'questions': [
634: 1:    '111',
634: 1:    '222',
634: 1:    '333',
634: 1:    '444',
634: 1:    '555',
634: 1:    '100',
634: 1:    '123',
634: 1:    '999',
634: 1:    '789'
634: 1:  ]
634: 1:}
634: 1:Scores: 49327
634: 1:Answer: message('['222', '333', '444', '555', '666', '121', '423', '000', '089']')
634: 1:Fire Event: PassTest{complexity=27, testCount=12}
------------------------------------------
635: 1:BoardData {
635: 1:  'description': ['Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702'],
635: 1:  'expectedAnswer': '111',
635: 1:  'history': [
635: 1:    {
635: 1:      'answer': '222',
635: 1:      'question': '111',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '333',
635: 1:      'question': '222',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '444',
635: 1:      'question': '333',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '555',
635: 1:      'question': '444',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '666',
635: 1:      'question': '555',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '121',
635: 1:      'question': '100',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '423',
635: 1:      'question': '123',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '000',
635: 1:      'question': '999',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '089',
635: 1:      'question': '789',
635: 1:      'valid': true
635: 1:    }
635: 1:  ],
635: 1:  'info': [
635: 1:    '✅f(111) = 222',
635: 1:    '✅f(222) = 333',
635: 1:    '✅f(333) = 444',
635: 1:    '✅f(444) = 555',
635: 1:    '✅f(555) = 666',
635: 1:    '✅f(100) = 121',
635: 1:    '✅f(123) = 423',
635: 1:    '✅f(999) = 000',
635: 1:    '✅f(789) = 089',
635: 1:    '❌f(000) = ??? != 111'
635: 1:  ],
635: 1:  'level': 23,
635: 1:  'nextQuestion': '000',
635: 1:  'questions': [
635: 1:    '111',
635: 1:    '222',
635: 1:    '333',
635: 1:    '444',
635: 1:    '555',
635: 1:    '100',
635: 1:    '123',
635: 1:    '999',
635: 1:    '789',
635: 1:    '000'
635: 1:  ]
635: 1:}
635: 1:Scores: 49349
635: 1:Answer: message('['222', '333', '444', '555', '666', '121', '423', '000', '089', '111']')
635: 1:Fire Event: PassTest{complexity=27, testCount=12}
------------------------------------------
636: 1:BoardData {
636: 1:  'description': ['Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702'],
636: 1:  'expectedAnswer': '001',
636: 1:  'history': [
636: 1:    {
636: 1:      'answer': '222',
636: 1:      'question': '111',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '333',
636: 1:      'question': '222',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '444',
636: 1:      'question': '333',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '555',
636: 1:      'question': '444',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '666',
636: 1:      'question': '555',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '121',
636: 1:      'question': '100',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '423',
636: 1:      'question': '123',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '000',
636: 1:      'question': '999',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '089',
636: 1:      'question': '789',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '111',
636: 1:      'question': '000',
636: 1:      'valid': true
636: 1:    }
636: 1:  ],
636: 1:  'info': [
636: 1:    '✅f(111) = 222',
636: 1:    '✅f(222) = 333',
636: 1:    '✅f(333) = 444',
636: 1:    '✅f(444) = 555',
636: 1:    '✅f(555) = 666',
636: 1:    '✅f(100) = 121',
636: 1:    '✅f(123) = 423',
636: 1:    '✅f(999) = 000',
636: 1:    '✅f(789) = 089',
636: 1:    '✅f(000) = 111',
636: 1:    '❌f(909) = ??? != 001'
636: 1:  ],
636: 1:  'level': 23,
636: 1:  'nextQuestion': '909',
636: 1:  'questions': [
636: 1:    '111',
636: 1:    '222',
636: 1:    '333',
636: 1:    '444',
636: 1:    '555',
636: 1:    '100',
636: 1:    '123',
636: 1:    '999',
636: 1:    '789',
636: 1:    '000',
636: 1:    '909'
636: 1:  ]
636: 1:}
636: 1:Scores: 49371
636: 1:Answer: message('['222', '333', '444', '555', '666', '121', '423', '000', '089', '111', '001']')
636: 1:Fire Event: PassTest{complexity=27, testCount=12}
------------------------------------------
637: 1:BoardData {
637: 1:  'description': ['Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702'],
637: 1:  'expectedAnswer': '110',
637: 1:  'history': [
637: 1:    {
637: 1:      'answer': '222',
637: 1:      'question': '111',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '333',
637: 1:      'question': '222',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '444',
637: 1:      'question': '333',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '555',
637: 1:      'question': '444',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '666',
637: 1:      'question': '555',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '121',
637: 1:      'question': '100',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '423',
637: 1:      'question': '123',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '000',
637: 1:      'question': '999',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '089',
637: 1:      'question': '789',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '111',
637: 1:      'question': '000',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '001',
637: 1:      'question': '909',
637: 1:      'valid': true
637: 1:    }
637: 1:  ],
637: 1:  'info': [
637: 1:    '✅f(111) = 222',
637: 1:    '✅f(222) = 333',
637: 1:    '✅f(333) = 444',
637: 1:    '✅f(444) = 555',
637: 1:    '✅f(555) = 666',
637: 1:    '✅f(100) = 121',
637: 1:    '✅f(123) = 423',
637: 1:    '✅f(999) = 000',
637: 1:    '✅f(789) = 089',
637: 1:    '✅f(000) = 111',
637: 1:    '✅f(909) = 001',
637: 1:    '❌f(090) = ??? != 110'
637: 1:  ],
637: 1:  'level': 23,
637: 1:  'nextQuestion': '090',
637: 1:  'questions': [
637: 1:    '111',
637: 1:    '222',
637: 1:    '333',
637: 1:    '444',
637: 1:    '555',
637: 1:    '100',
637: 1:    '123',
637: 1:    '999',
637: 1:    '789',
637: 1:    '000',
637: 1:    '909',
637: 1:    '090'
637: 1:  ]
637: 1:}
637: 1:Scores: 49393
637: 1:Answer: message('['222', '333', '444', '555', '666', '121', '423', '000', '089', '111', '001', '110']')
637: 1:Fire Event: PassTest{complexity=27, testCount=12}
637: 1:Fire Event: NextAlgorithm{complexity=27, time=0}
------------------------------------------
638: 1:BoardData {
638: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
638: 1:  'history': [
638: 1:    {
638: 1:      'answer': '222',
638: 1:      'question': '111',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '333',
638: 1:      'question': '222',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '444',
638: 1:      'question': '333',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '555',
638: 1:      'question': '444',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '666',
638: 1:      'question': '555',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '121',
638: 1:      'question': '100',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '423',
638: 1:      'question': '123',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '000',
638: 1:      'question': '999',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '089',
638: 1:      'question': '789',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '111',
638: 1:      'question': '000',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '001',
638: 1:      'question': '909',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '110',
638: 1:      'question': '090',
638: 1:      'valid': true
638: 1:    }
638: 1:  ],
638: 1:  'info': [
638: 1:    '✅f(111) = 222',
638: 1:    '✅f(222) = 333',
638: 1:    '✅f(333) = 444',
638: 1:    '✅f(444) = 555',
638: 1:    '✅f(555) = 666',
638: 1:    '✅f(100) = 121',
638: 1:    '✅f(123) = 423',
638: 1:    '✅f(999) = 000',
638: 1:    '✅f(789) = 089',
638: 1:    '✅f(000) = 111',
638: 1:    '✅f(909) = 001',
638: 1:    '✅f(090) = 110'
638: 1:  ],
638: 1:  'level': 23,
638: 1:  'questions': []
638: 1:}
638: 1:Scores: 53059
638: 1:Answer: message('StartNextLevel')
638: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
639: 1:BoardData {
639: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
639: 1:  'expectedAnswer': '101',
639: 1:  'history': [],
639: 1:  'info': ['❌f(1) = ??? != 101'],
639: 1:  'level': 24,
639: 1:  'nextQuestion': '1',
639: 1:  'questions': ['1']
639: 1:}
639: 1:Scores: 53059
639: 1:Answer: message('['101']')
639: 1:Fire Event: PassTest{complexity=28, testCount=25}
------------------------------------------
640: 1:BoardData {
640: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
640: 1:  'expectedAnswer': '112',
640: 1:  'history': [{
640: 1:    'answer': '101',
640: 1:    'question': '1',
640: 1:    'valid': true
640: 1:  }],
640: 1:  'info': [
640: 1:    '✅f(1) = 101',
640: 1:    '❌f(2) = ??? != 112'
640: 1:  ],
640: 1:  'level': 24,
640: 1:  'nextQuestion': '2',
640: 1:  'questions': [
640: 1:    '1',
640: 1:    '2'
640: 1:  ]
640: 1:}
640: 1:Scores: 53070
640: 1:Answer: message('['101', '112']')
640: 1:Fire Event: PassTest{complexity=28, testCount=25}
------------------------------------------
641: 1:BoardData {
641: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
641: 1:  'expectedAnswer': '131',
641: 1:  'history': [
641: 1:    {
641: 1:      'answer': '101',
641: 1:      'question': '1',
641: 1:      'valid': true
641: 1:    },
641: 1:    {
641: 1:      'answer': '112',
641: 1:      'question': '2',
641: 1:      'valid': true
641: 1:    }
641: 1:  ],
641: 1:  'info': [
641: 1:    '✅f(1) = 101',
641: 1:    '✅f(2) = 112',
641: 1:    '❌f(3) = ??? != 131'
641: 1:  ],
641: 1:  'level': 24,
641: 1:  'nextQuestion': '3',
641: 1:  'questions': [
641: 1:    '1',
641: 1:    '2',
641: 1:    '3'
641: 1:  ]
641: 1:}
641: 1:Scores: 53081
641: 1:Answer: message('['101', '112', '131']')
641: 1:Fire Event: PassTest{complexity=28, testCount=25}
------------------------------------------
642: 1:BoardData {
642: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
642: 1:  'expectedAnswer': '415',
642: 1:  'history': [
642: 1:    {
642: 1:      'answer': '101',
642: 1:      'question': '1',
642: 1:      'valid': true
642: 1:    },
642: 1:    {
642: 1:      'answer': '112',
642: 1:      'question': '2',
642: 1:      'valid': true
642: 1:    },
642: 1:    {
642: 1:      'answer': '131',
642: 1:      'question': '3',
642: 1:      'valid': true
642: 1:    }
642: 1:  ],
642: 1:  'info': [
642: 1:    '✅f(1) = 101',
642: 1:    '✅f(2) = 112',
642: 1:    '✅f(3) = 131',
642: 1:    '❌f(4) = ??? != 415'
642: 1:  ],
642: 1:  'level': 24,
642: 1:  'nextQuestion': '4',
642: 1:  'questions': [
642: 1:    '1',
642: 1:    '2',
642: 1:    '3',
642: 1:    '4'
642: 1:  ]
642: 1:}
642: 1:Scores: 53092
642: 1:Answer: message('['101', '112', '131', '415']')
642: 1:Fire Event: PassTest{complexity=28, testCount=25}
------------------------------------------
643: 1:BoardData {
643: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
643: 1:  'expectedAnswer': '161',
643: 1:  'history': [
643: 1:    {
643: 1:      'answer': '101',
643: 1:      'question': '1',
643: 1:      'valid': true
643: 1:    },
643: 1:    {
643: 1:      'answer': '112',
643: 1:      'question': '2',
643: 1:      'valid': true
643: 1:    },
643: 1:    {
643: 1:      'answer': '131',
643: 1:      'question': '3',
643: 1:      'valid': true
643: 1:    },
643: 1:    {
643: 1:      'answer': '415',
643: 1:      'question': '4',
643: 1:      'valid': true
643: 1:    }
643: 1:  ],
643: 1:  'info': [
643: 1:    '✅f(1) = 101',
643: 1:    '✅f(2) = 112',
643: 1:    '✅f(3) = 131',
643: 1:    '✅f(4) = 415',
643: 1:    '❌f(5) = ??? != 161'
643: 1:  ],
643: 1:  'level': 24,
643: 1:  'nextQuestion': '5',
643: 1:  'questions': [
643: 1:    '1',
643: 1:    '2',
643: 1:    '3',
643: 1:    '4',
643: 1:    '5'
643: 1:  ]
643: 1:}
643: 1:Scores: 53103
643: 1:Answer: message('['101', '112', '131', '415', '161']')
643: 1:Fire Event: PassTest{complexity=28, testCount=25}
------------------------------------------
644: 1:BoardData {
644: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
644: 1:  'expectedAnswer': '718',
644: 1:  'history': [
644: 1:    {
644: 1:      'answer': '101',
644: 1:      'question': '1',
644: 1:      'valid': true
644: 1:    },
644: 1:    {
644: 1:      'answer': '112',
644: 1:      'question': '2',
644: 1:      'valid': true
644: 1:    },
644: 1:    {
644: 1:      'answer': '131',
644: 1:      'question': '3',
644: 1:      'valid': true
644: 1:    },
644: 1:    {
644: 1:      'answer': '415',
644: 1:      'question': '4',
644: 1:      'valid': true
644: 1:    },
644: 1:    {
644: 1:      'answer': '161',
644: 1:      'question': '5',
644: 1:      'valid': true
644: 1:    }
644: 1:  ],
644: 1:  'info': [
644: 1:    '✅f(1) = 101',
644: 1:    '✅f(2) = 112',
644: 1:    '✅f(3) = 131',
644: 1:    '✅f(4) = 415',
644: 1:    '✅f(5) = 161',
644: 1:    '❌f(6) = ??? != 718'
644: 1:  ],
644: 1:  'level': 24,
644: 1:  'nextQuestion': '6',
644: 1:  'questions': [
644: 1:    '1',
644: 1:    '2',
644: 1:    '3',
644: 1:    '4',
644: 1:    '5',
644: 1:    '6'
644: 1:  ]
644: 1:}
644: 1:Scores: 53114
644: 1:Answer: message('['101', '112', '131', '415', '161', '718']')
644: 1:Fire Event: PassTest{complexity=28, testCount=25}
------------------------------------------
645: 1:BoardData {
645: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
645: 1:  'expectedAnswer': '192',
645: 1:  'history': [
645: 1:    {
645: 1:      'answer': '101',
645: 1:      'question': '1',
645: 1:      'valid': true
645: 1:    },
645: 1:    {
645: 1:      'answer': '112',
645: 1:      'question': '2',
645: 1:      'valid': true
645: 1:    },
645: 1:    {
645: 1:      'answer': '131',
645: 1:      'question': '3',
645: 1:      'valid': true
645: 1:    },
645: 1:    {
645: 1:      'answer': '415',
645: 1:      'question': '4',
645: 1:      'valid': true
645: 1:    },
645: 1:    {
645: 1:      'answer': '161',
645: 1:      'question': '5',
645: 1:      'valid': true
645: 1:    },
645: 1:    {
645: 1:      'answer': '718',
645: 1:      'question': '6',
645: 1:      'valid': true
645: 1:    }
645: 1:  ],
645: 1:  'info': [
645: 1:    '✅f(1) = 101',
645: 1:    '✅f(2) = 112',
645: 1:    '✅f(3) = 131',
645: 1:    '✅f(4) = 415',
645: 1:    '✅f(5) = 161',
645: 1:    '✅f(6) = 718',
645: 1:    '❌f(7) = ??? != 192'
645: 1:  ],
645: 1:  'level': 24,
645: 1:  'nextQuestion': '7',
645: 1:  'questions': [
645: 1:    '1',
645: 1:    '2',
645: 1:    '3',
645: 1:    '4',
645: 1:    '5',
645: 1:    '6',
645: 1:    '7'
645: 1:  ]
645: 1:}
645: 1:Scores: 53125
645: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192']')
645: 1:Fire Event: PassTest{complexity=28, testCount=25}
------------------------------------------
646: 1:BoardData {
646: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
646: 1:  'expectedAnswer': '021',
646: 1:  'history': [
646: 1:    {
646: 1:      'answer': '101',
646: 1:      'question': '1',
646: 1:      'valid': true
646: 1:    },
646: 1:    {
646: 1:      'answer': '112',
646: 1:      'question': '2',
646: 1:      'valid': true
646: 1:    },
646: 1:    {
646: 1:      'answer': '131',
646: 1:      'question': '3',
646: 1:      'valid': true
646: 1:    },
646: 1:    {
646: 1:      'answer': '415',
646: 1:      'question': '4',
646: 1:      'valid': true
646: 1:    },
646: 1:    {
646: 1:      'answer': '161',
646: 1:      'question': '5',
646: 1:      'valid': true
646: 1:    },
646: 1:    {
646: 1:      'answer': '718',
646: 1:      'question': '6',
646: 1:      'valid': true
646: 1:    },
646: 1:    {
646: 1:      'answer': '192',
646: 1:      'question': '7',
646: 1:      'valid': true
646: 1:    }
646: 1:  ],
646: 1:  'info': [
646: 1:    '✅f(1) = 101',
646: 1:    '✅f(2) = 112',
646: 1:    '✅f(3) = 131',
646: 1:    '✅f(4) = 415',
646: 1:    '✅f(5) = 161',
646: 1:    '✅f(6) = 718',
646: 1:    '✅f(7) = 192',
646: 1:    '❌f(8) = ??? != 021'
646: 1:  ],
646: 1:  'level': 24,
646: 1:  'nextQuestion': '8',
646: 1:  'questions': [
646: 1:    '1',
646: 1:    '2',
646: 1:    '3',
646: 1:    '4',
646: 1:    '5',
646: 1:    '6',
646: 1:    '7',
646: 1:    '8'
646: 1:  ]
646: 1:}
646: 1:Scores: 53136
646: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021']')
646: 1:Fire Event: PassTest{complexity=28, testCount=25}
------------------------------------------
647: 1:BoardData {
647: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
647: 1:  'expectedAnswer': '222',
647: 1:  'history': [
647: 1:    {
647: 1:      'answer': '101',
647: 1:      'question': '1',
647: 1:      'valid': true
647: 1:    },
647: 1:    {
647: 1:      'answer': '112',
647: 1:      'question': '2',
647: 1:      'valid': true
647: 1:    },
647: 1:    {
647: 1:      'answer': '131',
647: 1:      'question': '3',
647: 1:      'valid': true
647: 1:    },
647: 1:    {
647: 1:      'answer': '415',
647: 1:      'question': '4',
647: 1:      'valid': true
647: 1:    },
647: 1:    {
647: 1:      'answer': '161',
647: 1:      'question': '5',
647: 1:      'valid': true
647: 1:    },
647: 1:    {
647: 1:      'answer': '718',
647: 1:      'question': '6',
647: 1:      'valid': true
647: 1:    },
647: 1:    {
647: 1:      'answer': '192',
647: 1:      'question': '7',
647: 1:      'valid': true
647: 1:    },
647: 1:    {
647: 1:      'answer': '021',
647: 1:      'question': '8',
647: 1:      'valid': true
647: 1:    }
647: 1:  ],
647: 1:  'info': [
647: 1:    '✅f(1) = 101',
647: 1:    '✅f(2) = 112',
647: 1:    '✅f(3) = 131',
647: 1:    '✅f(4) = 415',
647: 1:    '✅f(5) = 161',
647: 1:    '✅f(6) = 718',
647: 1:    '✅f(7) = 192',
647: 1:    '✅f(8) = 021',
647: 1:    '❌f(9) = ??? != 222'
647: 1:  ],
647: 1:  'level': 24,
647: 1:  'nextQuestion': '9',
647: 1:  'questions': [
647: 1:    '1',
647: 1:    '2',
647: 1:    '3',
647: 1:    '4',
647: 1:    '5',
647: 1:    '6',
647: 1:    '7',
647: 1:    '8',
647: 1:    '9'
647: 1:  ]
647: 1:}
647: 1:Scores: 53147
647: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222']')
647: 1:Fire Event: PassTest{complexity=28, testCount=25}
------------------------------------------
648: 1:BoardData {
648: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
648: 1:  'expectedAnswer': '324',
648: 1:  'history': [
648: 1:    {
648: 1:      'answer': '101',
648: 1:      'question': '1',
648: 1:      'valid': true
648: 1:    },
648: 1:    {
648: 1:      'answer': '112',
648: 1:      'question': '2',
648: 1:      'valid': true
648: 1:    },
648: 1:    {
648: 1:      'answer': '131',
648: 1:      'question': '3',
648: 1:      'valid': true
648: 1:    },
648: 1:    {
648: 1:      'answer': '415',
648: 1:      'question': '4',
648: 1:      'valid': true
648: 1:    },
648: 1:    {
648: 1:      'answer': '161',
648: 1:      'question': '5',
648: 1:      'valid': true
648: 1:    },
648: 1:    {
648: 1:      'answer': '718',
648: 1:      'question': '6',
648: 1:      'valid': true
648: 1:    },
648: 1:    {
648: 1:      'answer': '192',
648: 1:      'question': '7',
648: 1:      'valid': true
648: 1:    },
648: 1:    {
648: 1:      'answer': '021',
648: 1:      'question': '8',
648: 1:      'valid': true
648: 1:    },
648: 1:    {
648: 1:      'answer': '222',
648: 1:      'question': '9',
648: 1:      'valid': true
648: 1:    }
648: 1:  ],
648: 1:  'info': [
648: 1:    '✅f(1) = 101',
648: 1:    '✅f(2) = 112',
648: 1:    '✅f(3) = 131',
648: 1:    '✅f(4) = 415',
648: 1:    '✅f(5) = 161',
648: 1:    '✅f(6) = 718',
648: 1:    '✅f(7) = 192',
648: 1:    '✅f(8) = 021',
648: 1:    '✅f(9) = 222',
648: 1:    '❌f(10) = ??? != 324'
648: 1:  ],
648: 1:  'level': 24,
648: 1:  'nextQuestion': '10',
648: 1:  'questions': [
648: 1:    '1',
648: 1:    '2',
648: 1:    '3',
648: 1:    '4',
648: 1:    '5',
648: 1:    '6',
648: 1:    '7',
648: 1:    '8',
648: 1:    '9',
648: 1:    '10'
648: 1:  ]
648: 1:}
648: 1:Scores: 53158
648: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324']')
648: 1:Fire Event: PassTest{complexity=28, testCount=25}
------------------------------------------
649: 1:BoardData {
649: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
649: 1:  'expectedAnswer': '252',
649: 1:  'history': [
649: 1:    {
649: 1:      'answer': '101',
649: 1:      'question': '1',
649: 1:      'valid': true
649: 1:    },
649: 1:    {
649: 1:      'answer': '112',
649: 1:      'question': '2',
649: 1:      'valid': true
649: 1:    },
649: 1:    {
649: 1:      'answer': '131',
649: 1:      'question': '3',
649: 1:      'valid': true
649: 1:    },
649: 1:    {
649: 1:      'answer': '415',
649: 1:      'question': '4',
649: 1:      'valid': true
649: 1:    },
649: 1:    {
649: 1:      'answer': '161',
649: 1:      'question': '5',
649: 1:      'valid': true
649: 1:    },
649: 1:    {
649: 1:      'answer': '718',
649: 1:      'question': '6',
649: 1:      'valid': true
649: 1:    },
649: 1:    {
649: 1:      'answer': '192',
649: 1:      'question': '7',
649: 1:      'valid': true
649: 1:    },
649: 1:    {
649: 1:      'answer': '021',
649: 1:      'question': '8',
649: 1:      'valid': true
649: 1:    },
649: 1:    {
649: 1:      'answer': '222',
649: 1:      'question': '9',
649: 1:      'valid': true
649: 1:    },
649: 1:    {
649: 1:      'answer': '324',
649: 1:      'question': '10',
649: 1:      'valid': true
649: 1:    }
649: 1:  ],
649: 1:  'info': [
649: 1:    '✅f(1) = 101',
649: 1:    '✅f(2) = 112',
649: 1:    '✅f(3) = 131',
649: 1:    '✅f(4) = 415',
649: 1:    '✅f(5) = 161',
649: 1:    '✅f(6) = 718',
649: 1:    '✅f(7) = 192',
649: 1:    '✅f(8) = 021',
649: 1:    '✅f(9) = 222',
649: 1:    '✅f(10) = 324',
649: 1:    '❌f(11) = ??? != 252'
649: 1:  ],
649: 1:  'level': 24,
649: 1:  'nextQuestion': '11',
649: 1:  'questions': [
649: 1:    '1',
649: 1:    '2',
649: 1:    '3',
649: 1:    '4',
649: 1:    '5',
649: 1:    '6',
649: 1:    '7',
649: 1:    '8',
649: 1:    '9',
649: 1:    '10',
649: 1:    '11'
649: 1:  ]
649: 1:}
649: 1:Scores: 53169
649: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252']')
649: 1:Fire Event: PassTest{complexity=28, testCount=25}
------------------------------------------
650: 1:BoardData {
650: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
650: 1:  'expectedAnswer': '627',
650: 1:  'history': [
650: 1:    {
650: 1:      'answer': '101',
650: 1:      'question': '1',
650: 1:      'valid': true
650: 1:    },
650: 1:    {
650: 1:      'answer': '112',
650: 1:      'question': '2',
650: 1:      'valid': true
650: 1:    },
650: 1:    {
650: 1:      'answer': '131',
650: 1:      'question': '3',
650: 1:      'valid': true
650: 1:    },
650: 1:    {
650: 1:      'answer': '415',
650: 1:      'question': '4',
650: 1:      'valid': true
650: 1:    },
650: 1:    {
650: 1:      'answer': '161',
650: 1:      'question': '5',
650: 1:      'valid': true
650: 1:    },
650: 1:    {
650: 1:      'answer': '718',
650: 1:      'question': '6',
650: 1:      'valid': true
650: 1:    },
650: 1:    {
650: 1:      'answer': '192',
650: 1:      'question': '7',
650: 1:      'valid': true
650: 1:    },
650: 1:    {
650: 1:      'answer': '021',
650: 1:      'question': '8',
650: 1:      'valid': true
650: 1:    },
650: 1:    {
650: 1:      'answer': '222',
650: 1:      'question': '9',
650: 1:      'valid': true
650: 1:    },
650: 1:    {
650: 1:      'answer': '324',
650: 1:      'question': '10',
650: 1:      'valid': true
650: 1:    },
650: 1:    {
650: 1:      'answer': '252',
650: 1:      'question': '11',
650: 1:      'valid': true
650: 1:    }
650: 1:  ],
650: 1:  'info': [
650: 1:    '✅f(1) = 101',
650: 1:    '✅f(2) = 112',
650: 1:    '✅f(3) = 131',
650: 1:    '✅f(4) = 415',
650: 1:    '✅f(5) = 161',
650: 1:    '✅f(6) = 718',
650: 1:    '✅f(7) = 192',
650: 1:    '✅f(8) = 021',
650: 1:    '✅f(9) = 222',
650: 1:    '✅f(10) = 324',
650: 1:    '✅f(11) = 252',
650: 1:    '❌f(12) = ??? != 627'
650: 1:  ],
650: 1:  'level': 24,
650: 1:  'nextQuestion': '12',
650: 1:  'questions': [
650: 1:    '1',
650: 1:    '2',
650: 1:    '3',
650: 1:    '4',
650: 1:    '5',
650: 1:    '6',
650: 1:    '7',
650: 1:    '8',
650: 1:    '9',
650: 1:    '10',
650: 1:    '11',
650: 1:    '12'
650: 1:  ]
650: 1:}
650: 1:Scores: 53180
650: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627']')
650: 1:Fire Event: PassTest{complexity=28, testCount=25}
------------------------------------------
651: 1:BoardData {
651: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
651: 1:  'expectedAnswer': '282',
651: 1:  'history': [
651: 1:    {
651: 1:      'answer': '101',
651: 1:      'question': '1',
651: 1:      'valid': true
651: 1:    },
651: 1:    {
651: 1:      'answer': '112',
651: 1:      'question': '2',
651: 1:      'valid': true
651: 1:    },
651: 1:    {
651: 1:      'answer': '131',
651: 1:      'question': '3',
651: 1:      'valid': true
651: 1:    },
651: 1:    {
651: 1:      'answer': '415',
651: 1:      'question': '4',
651: 1:      'valid': true
651: 1:    },
651: 1:    {
651: 1:      'answer': '161',
651: 1:      'question': '5',
651: 1:      'valid': true
651: 1:    },
651: 1:    {
651: 1:      'answer': '718',
651: 1:      'question': '6',
651: 1:      'valid': true
651: 1:    },
651: 1:    {
651: 1:      'answer': '192',
651: 1:      'question': '7',
651: 1:      'valid': true
651: 1:    },
651: 1:    {
651: 1:      'answer': '021',
651: 1:      'question': '8',
651: 1:      'valid': true
651: 1:    },
651: 1:    {
651: 1:      'answer': '222',
651: 1:      'question': '9',
651: 1:      'valid': true
651: 1:    },
651: 1:    {
651: 1:      'answer': '324',
651: 1:      'question': '10',
651: 1:      'valid': true
651: 1:    },
651: 1:    {
651: 1:      'answer': '252',
651: 1:      'question': '11',
651: 1:      'valid': true
651: 1:    },
651: 1:    {
651: 1:      'answer': '627',
651: 1:      'question': '12',
651: 1:      'valid': true
651: 1:    }
651: 1:  ],
651: 1:  'info': [
651: 1:    '✅f(1) = 101',
651: 1:    '✅f(2) = 112',
651: 1:    '✅f(3) = 131',
651: 1:    '✅f(4) = 415',
651: 1:    '✅f(5) = 161',
651: 1:    '✅f(6) = 718',
651: 1:    '✅f(7) = 192',
651: 1:    '✅f(8) = 021',
651: 1:    '✅f(9) = 222',
651: 1:    '✅f(10) = 324',
651: 1:    '✅f(11) = 252',
651: 1:    '✅f(12) = 627',
651: 1:    '❌f(13) = ??? != 282'
651: 1:  ],
651: 1:  'level': 24,
651: 1:  'nextQuestion': '13',
651: 1:  'questions': [
651: 1:    '1',
651: 1:    '2',
651: 1:    '3',
651: 1:    '4',
651: 1:    '5',
651: 1:    '6',
651: 1:    '7',
651: 1:    '8',
651: 1:    '9',
651: 1:    '10',
651: 1:    '11',
651: 1:    '12',
651: 1:    '13'
651: 1:  ]
651: 1:}
651: 1:Scores: 53191
651: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282']')
651: 1:Fire Event: PassTest{complexity=28, testCount=25}
------------------------------------------
652: 1:BoardData {
652: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
652: 1:  'expectedAnswer': '930',
652: 1:  'history': [
652: 1:    {
652: 1:      'answer': '101',
652: 1:      'question': '1',
652: 1:      'valid': true
652: 1:    },
652: 1:    {
652: 1:      'answer': '112',
652: 1:      'question': '2',
652: 1:      'valid': true
652: 1:    },
652: 1:    {
652: 1:      'answer': '131',
652: 1:      'question': '3',
652: 1:      'valid': true
652: 1:    },
652: 1:    {
652: 1:      'answer': '415',
652: 1:      'question': '4',
652: 1:      'valid': true
652: 1:    },
652: 1:    {
652: 1:      'answer': '161',
652: 1:      'question': '5',
652: 1:      'valid': true
652: 1:    },
652: 1:    {
652: 1:      'answer': '718',
652: 1:      'question': '6',
652: 1:      'valid': true
652: 1:    },
652: 1:    {
652: 1:      'answer': '192',
652: 1:      'question': '7',
652: 1:      'valid': true
652: 1:    },
652: 1:    {
652: 1:      'answer': '021',
652: 1:      'question': '8',
652: 1:      'valid': true
652: 1:    },
652: 1:    {
652: 1:      'answer': '222',
652: 1:      'question': '9',
652: 1:      'valid': true
652: 1:    },
652: 1:    {
652: 1:      'answer': '324',
652: 1:      'question': '10',
652: 1:      'valid': true
652: 1:    },
652: 1:    {
652: 1:      'answer': '252',
652: 1:      'question': '11',
652: 1:      'valid': true
652: 1:    },
652: 1:    {
652: 1:      'answer': '627',
652: 1:      'question': '12',
652: 1:      'valid': true
652: 1:    },
652: 1:    {
652: 1:      'answer': '282',
652: 1:      'question': '13',
652: 1:      'valid': true
652: 1:    }
652: 1:  ],
652: 1:  'info': [
652: 1:    '✅f(1) = 101',
652: 1:    '✅f(2) = 112',
652: 1:    '✅f(3) = 131',
652: 1:    '✅f(4) = 415',
652: 1:    '✅f(5) = 161',
652: 1:    '✅f(6) = 718',
652: 1:    '✅f(7) = 192',
652: 1:    '✅f(8) = 021',
652: 1:    '✅f(9) = 222',
652: 1:    '✅f(10) = 324',
652: 1:    '✅f(11) = 252',
652: 1:    '✅f(12) = 627',
652: 1:    '✅f(13) = 282',
652: 1:    '❌f(14) = ??? != 930'
652: 1:  ],
652: 1:  'level': 24,
652: 1:  'nextQuestion': '14',
652: 1:  'questions': [
652: 1:    '1',
652: 1:    '2',
652: 1:    '3',
652: 1:    '4',
652: 1:    '5',
652: 1:    '6',
652: 1:    '7',
652: 1:    '8',
652: 1:    '9',
652: 1:    '10',
652: 1:    '11',
652: 1:    '12',
652: 1:    '13',
652: 1:    '14'
652: 1:  ]
652: 1:}
652: 1:Scores: 53202
652: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930']')
652: 1:Fire Event: PassTest{complexity=28, testCount=25}
------------------------------------------
653: 1:BoardData {
653: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
653: 1:  'expectedAnswer': '313',
653: 1:  'history': [
653: 1:    {
653: 1:      'answer': '101',
653: 1:      'question': '1',
653: 1:      'valid': true
653: 1:    },
653: 1:    {
653: 1:      'answer': '112',
653: 1:      'question': '2',
653: 1:      'valid': true
653: 1:    },
653: 1:    {
653: 1:      'answer': '131',
653: 1:      'question': '3',
653: 1:      'valid': true
653: 1:    },
653: 1:    {
653: 1:      'answer': '415',
653: 1:      'question': '4',
653: 1:      'valid': true
653: 1:    },
653: 1:    {
653: 1:      'answer': '161',
653: 1:      'question': '5',
653: 1:      'valid': true
653: 1:    },
653: 1:    {
653: 1:      'answer': '718',
653: 1:      'question': '6',
653: 1:      'valid': true
653: 1:    },
653: 1:    {
653: 1:      'answer': '192',
653: 1:      'question': '7',
653: 1:      'valid': true
653: 1:    },
653: 1:    {
653: 1:      'answer': '021',
653: 1:      'question': '8',
653: 1:      'valid': true
653: 1:    },
653: 1:    {
653: 1:      'answer': '222',
653: 1:      'question': '9',
653: 1:      'valid': true
653: 1:    },
653: 1:    {
653: 1:      'answer': '324',
653: 1:      'question': '10',
653: 1:      'valid': true
653: 1:    },
653: 1:    {
653: 1:      'answer': '252',
653: 1:      'question': '11',
653: 1:      'valid': true
653: 1:    },
653: 1:    {
653: 1:      'answer': '627',
653: 1:      'question': '12',
653: 1:      'valid': true
653: 1:    },
653: 1:    {
653: 1:      'answer': '282',
653: 1:      'question': '13',
653: 1:      'valid': true
653: 1:    },
653: 1:    {
653: 1:      'answer': '930',
653: 1:      'question': '14',
653: 1:      'valid': true
653: 1:    }
653: 1:  ],
653: 1:  'info': [
653: 1:    '✅f(1) = 101',
653: 1:    '✅f(2) = 112',
653: 1:    '✅f(3) = 131',
653: 1:    '✅f(4) = 415',
653: 1:    '✅f(5) = 161',
653: 1:    '✅f(6) = 718',
653: 1:    '✅f(7) = 192',
653: 1:    '✅f(8) = 021',
653: 1:    '✅f(9) = 222',
653: 1:    '✅f(10) = 324',
653: 1:    '✅f(11) = 252',
653: 1:    '✅f(12) = 627',
653: 1:    '✅f(13) = 282',
653: 1:    '✅f(14) = 930',
653: 1:    '❌f(15) = ??? != 313'
653: 1:  ],
653: 1:  'level': 24,
653: 1:  'nextQuestion': '15',
653: 1:  'questions': [
653: 1:    '1',
653: 1:    '2',
653: 1:    '3',
653: 1:    '4',
653: 1:    '5',
653: 1:    '6',
653: 1:    '7',
653: 1:    '8',
653: 1:    '9',
653: 1:    '10',
653: 1:    '11',
653: 1:    '12',
653: 1:    '13',
653: 1:    '14',
653: 1:    '15'
653: 1:  ]
653: 1:}
653: 1:Scores: 53213
653: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313']')
653: 1:Fire Event: PassTest{complexity=28, testCount=25}
------------------------------------------
654: 1:BoardData {
654: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
654: 1:  'expectedAnswer': '233',
654: 1:  'history': [
654: 1:    {
654: 1:      'answer': '101',
654: 1:      'question': '1',
654: 1:      'valid': true
654: 1:    },
654: 1:    {
654: 1:      'answer': '112',
654: 1:      'question': '2',
654: 1:      'valid': true
654: 1:    },
654: 1:    {
654: 1:      'answer': '131',
654: 1:      'question': '3',
654: 1:      'valid': true
654: 1:    },
654: 1:    {
654: 1:      'answer': '415',
654: 1:      'question': '4',
654: 1:      'valid': true
654: 1:    },
654: 1:    {
654: 1:      'answer': '161',
654: 1:      'question': '5',
654: 1:      'valid': true
654: 1:    },
654: 1:    {
654: 1:      'answer': '718',
654: 1:      'question': '6',
654: 1:      'valid': true
654: 1:    },
654: 1:    {
654: 1:      'answer': '192',
654: 1:      'question': '7',
654: 1:      'valid': true
654: 1:    },
654: 1:    {
654: 1:      'answer': '021',
654: 1:      'question': '8',
654: 1:      'valid': true
654: 1:    },
654: 1:    {
654: 1:      'answer': '222',
654: 1:      'question': '9',
654: 1:      'valid': true
654: 1:    },
654: 1:    {
654: 1:      'answer': '324',
654: 1:      'question': '10',
654: 1:      'valid': true
654: 1:    },
654: 1:    {
654: 1:      'answer': '252',
654: 1:      'question': '11',
654: 1:      'valid': true
654: 1:    },
654: 1:    {
654: 1:      'answer': '627',
654: 1:      'question': '12',
654: 1:      'valid': true
654: 1:    },
654: 1:    {
654: 1:      'answer': '282',
654: 1:      'question': '13',
654: 1:      'valid': true
654: 1:    },
654: 1:    {
654: 1:      'answer': '930',
654: 1:      'question': '14',
654: 1:      'valid': true
654: 1:    },
654: 1:    {
654: 1:      'answer': '313',
654: 1:      'question': '15',
654: 1:      'valid': true
654: 1:    }
654: 1:  ],
654: 1:  'info': [
654: 1:    '✅f(1) = 101',
654: 1:    '✅f(2) = 112',
654: 1:    '✅f(3) = 131',
654: 1:    '✅f(4) = 415',
654: 1:    '✅f(5) = 161',
654: 1:    '✅f(6) = 718',
654: 1:    '✅f(7) = 192',
654: 1:    '✅f(8) = 021',
654: 1:    '✅f(9) = 222',
654: 1:    '✅f(10) = 324',
654: 1:    '✅f(11) = 252',
654: 1:    '✅f(12) = 627',
654: 1:    '✅f(13) = 282',
654: 1:    '✅f(14) = 930',
654: 1:    '✅f(15) = 313',
654: 1:    '❌f(16) = ??? != 233'
654: 1:  ],
654: 1:  'level': 24,
654: 1:  'nextQuestion': '16',
654: 1:  'questions': [
654: 1:    '1',
654: 1:    '2',
654: 1:    '3',
654: 1:    '4',
654: 1:    '5',
654: 1:    '6',
654: 1:    '7',
654: 1:    '8',
654: 1:    '9',
654: 1:    '10',
654: 1:    '11',
654: 1:    '12',
654: 1:    '13',
654: 1:    '14',
654: 1:    '15',
654: 1:    '16'
654: 1:  ]
654: 1:}
654: 1:Scores: 53224
654: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233']')
654: 1:Fire Event: PassTest{complexity=28, testCount=25}
------------------------------------------
655: 1:BoardData {
655: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
655: 1:  'expectedAnswer': '343',
655: 1:  'history': [
655: 1:    {
655: 1:      'answer': '101',
655: 1:      'question': '1',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '112',
655: 1:      'question': '2',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '131',
655: 1:      'question': '3',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '415',
655: 1:      'question': '4',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '161',
655: 1:      'question': '5',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '718',
655: 1:      'question': '6',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '192',
655: 1:      'question': '7',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '021',
655: 1:      'question': '8',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '222',
655: 1:      'question': '9',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '324',
655: 1:      'question': '10',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '252',
655: 1:      'question': '11',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '627',
655: 1:      'question': '12',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '282',
655: 1:      'question': '13',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '930',
655: 1:      'question': '14',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '313',
655: 1:      'question': '15',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '233',
655: 1:      'question': '16',
655: 1:      'valid': true
655: 1:    }
655: 1:  ],
655: 1:  'info': [
655: 1:    '✅f(1) = 101',
655: 1:    '✅f(2) = 112',
655: 1:    '✅f(3) = 131',
655: 1:    '✅f(4) = 415',
655: 1:    '✅f(5) = 161',
655: 1:    '✅f(6) = 718',
655: 1:    '✅f(7) = 192',
655: 1:    '✅f(8) = 021',
655: 1:    '✅f(9) = 222',
655: 1:    '✅f(10) = 324',
655: 1:    '✅f(11) = 252',
655: 1:    '✅f(12) = 627',
655: 1:    '✅f(13) = 282',
655: 1:    '✅f(14) = 930',
655: 1:    '✅f(15) = 313',
655: 1:    '✅f(16) = 233',
655: 1:    '❌f(17) = ??? != 343'
655: 1:  ],
655: 1:  'level': 24,
655: 1:  'nextQuestion': '17',
655: 1:  'questions': [
655: 1:    '1',
655: 1:    '2',
655: 1:    '3',
655: 1:    '4',
655: 1:    '5',
655: 1:    '6',
655: 1:    '7',
655: 1:    '8',
655: 1:    '9',
655: 1:    '10',
655: 1:    '11',
655: 1:    '12',
655: 1:    '13',
655: 1:    '14',
655: 1:    '15',
655: 1:    '16',
655: 1:    '17'
655: 1:  ]
655: 1:}
655: 1:Scores: 53235
655: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233', '343']')
655: 1:Fire Event: PassTest{complexity=28, testCount=25}
------------------------------------------
656: 1:BoardData {
656: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
656: 1:  'expectedAnswer': '536',
656: 1:  'history': [
656: 1:    {
656: 1:      'answer': '101',
656: 1:      'question': '1',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '112',
656: 1:      'question': '2',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '131',
656: 1:      'question': '3',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '415',
656: 1:      'question': '4',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '161',
656: 1:      'question': '5',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '718',
656: 1:      'question': '6',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '192',
656: 1:      'question': '7',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '021',
656: 1:      'question': '8',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '222',
656: 1:      'question': '9',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '324',
656: 1:      'question': '10',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '252',
656: 1:      'question': '11',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '627',
656: 1:      'question': '12',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '282',
656: 1:      'question': '13',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '930',
656: 1:      'question': '14',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '313',
656: 1:      'question': '15',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '233',
656: 1:      'question': '16',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '343',
656: 1:      'question': '17',
656: 1:      'valid': true
656: 1:    }
656: 1:  ],
656: 1:  'info': [
656: 1:    '✅f(1) = 101',
656: 1:    '✅f(2) = 112',
656: 1:    '✅f(3) = 131',
656: 1:    '✅f(4) = 415',
656: 1:    '✅f(5) = 161',
656: 1:    '✅f(6) = 718',
656: 1:    '✅f(7) = 192',
656: 1:    '✅f(8) = 021',
656: 1:    '✅f(9) = 222',
656: 1:    '✅f(10) = 324',
656: 1:    '✅f(11) = 252',
656: 1:    '✅f(12) = 627',
656: 1:    '✅f(13) = 282',
656: 1:    '✅f(14) = 930',
656: 1:    '✅f(15) = 313',
656: 1:    '✅f(16) = 233',
656: 1:    '✅f(17) = 343',
656: 1:    '❌f(18) = ??? != 536'
656: 1:  ],
656: 1:  'level': 24,
656: 1:  'nextQuestion': '18',
656: 1:  'questions': [
656: 1:    '1',
656: 1:    '2',
656: 1:    '3',
656: 1:    '4',
656: 1:    '5',
656: 1:    '6',
656: 1:    '7',
656: 1:    '8',
656: 1:    '9',
656: 1:    '10',
656: 1:    '11',
656: 1:    '12',
656: 1:    '13',
656: 1:    '14',
656: 1:    '15',
656: 1:    '16',
656: 1:    '17',
656: 1:    '18'
656: 1:  ]
656: 1:}
656: 1:Scores: 53246
656: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233', '343', '536']')
656: 1:Fire Event: PassTest{complexity=28, testCount=25}
------------------------------------------
657: 1:BoardData {
657: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
657: 1:  'expectedAnswer': '373',
657: 1:  'history': [
657: 1:    {
657: 1:      'answer': '101',
657: 1:      'question': '1',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '112',
657: 1:      'question': '2',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '131',
657: 1:      'question': '3',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '415',
657: 1:      'question': '4',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '161',
657: 1:      'question': '5',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '718',
657: 1:      'question': '6',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '192',
657: 1:      'question': '7',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '021',
657: 1:      'question': '8',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '222',
657: 1:      'question': '9',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '324',
657: 1:      'question': '10',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '252',
657: 1:      'question': '11',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '627',
657: 1:      'question': '12',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '282',
657: 1:      'question': '13',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '930',
657: 1:      'question': '14',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '313',
657: 1:      'question': '15',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '233',
657: 1:      'question': '16',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '343',
657: 1:      'question': '17',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '536',
657: 1:      'question': '18',
657: 1:      'valid': true
657: 1:    }
657: 1:  ],
657: 1:  'info': [
657: 1:    '✅f(1) = 101',
657: 1:    '✅f(2) = 112',
657: 1:    '✅f(3) = 131',
657: 1:    '✅f(4) = 415',
657: 1:    '✅f(5) = 161',
657: 1:    '✅f(6) = 718',
657: 1:    '✅f(7) = 192',
657: 1:    '✅f(8) = 021',
657: 1:    '✅f(9) = 222',
657: 1:    '✅f(10) = 324',
657: 1:    '✅f(11) = 252',
657: 1:    '✅f(12) = 627',
657: 1:    '✅f(13) = 282',
657: 1:    '✅f(14) = 930',
657: 1:    '✅f(15) = 313',
657: 1:    '✅f(16) = 233',
657: 1:    '✅f(17) = 343',
657: 1:    '✅f(18) = 536',
657: 1:    '❌f(19) = ??? != 373'
657: 1:  ],
657: 1:  'level': 24,
657: 1:  'nextQuestion': '19',
657: 1:  'questions': [
657: 1:    '1',
657: 1:    '2',
657: 1:    '3',
657: 1:    '4',
657: 1:    '5',
657: 1:    '6',
657: 1:    '7',
657: 1:    '8',
657: 1:    '9',
657: 1:    '10',
657: 1:    '11',
657: 1:    '12',
657: 1:    '13',
657: 1:    '14',
657: 1:    '15',
657: 1:    '16',
657: 1:    '17',
657: 1:    '18',
657: 1:    '19'
657: 1:  ]
657: 1:}
657: 1:Scores: 53257
657: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233', '343', '536', '373']')
657: 1:Fire Event: PassTest{complexity=28, testCount=25}
------------------------------------------
658: 1:BoardData {
658: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
658: 1:  'expectedAnswer': '839',
658: 1:  'history': [
658: 1:    {
658: 1:      'answer': '101',
658: 1:      'question': '1',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '112',
658: 1:      'question': '2',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '131',
658: 1:      'question': '3',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '415',
658: 1:      'question': '4',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '161',
658: 1:      'question': '5',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '718',
658: 1:      'question': '6',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '192',
658: 1:      'question': '7',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '021',
658: 1:      'question': '8',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '222',
658: 1:      'question': '9',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '324',
658: 1:      'question': '10',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '252',
658: 1:      'question': '11',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '627',
658: 1:      'question': '12',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '282',
658: 1:      'question': '13',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '930',
658: 1:      'question': '14',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '313',
658: 1:      'question': '15',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '233',
658: 1:      'question': '16',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '343',
658: 1:      'question': '17',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '536',
658: 1:      'question': '18',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '373',
658: 1:      'question': '19',
658: 1:      'valid': true
658: 1:    }
658: 1:  ],
658: 1:  'info': [
658: 1:    '✅f(1) = 101',
658: 1:    '✅f(2) = 112',
658: 1:    '✅f(3) = 131',
658: 1:    '✅f(4) = 415',
658: 1:    '✅f(5) = 161',
658: 1:    '✅f(6) = 718',
658: 1:    '✅f(7) = 192',
658: 1:    '✅f(8) = 021',
658: 1:    '✅f(9) = 222',
658: 1:    '✅f(10) = 324',
658: 1:    '✅f(11) = 252',
658: 1:    '✅f(12) = 627',
658: 1:    '✅f(13) = 282',
658: 1:    '✅f(14) = 930',
658: 1:    '✅f(15) = 313',
658: 1:    '✅f(16) = 233',
658: 1:    '✅f(17) = 343',
658: 1:    '✅f(18) = 536',
658: 1:    '✅f(19) = 373',
658: 1:    '❌f(20) = ??? != 839'
658: 1:  ],
658: 1:  'level': 24,
658: 1:  'nextQuestion': '20',
658: 1:  'questions': [
658: 1:    '1',
658: 1:    '2',
658: 1:    '3',
658: 1:    '4',
658: 1:    '5',
658: 1:    '6',
658: 1:    '7',
658: 1:    '8',
658: 1:    '9',
658: 1:    '10',
658: 1:    '11',
658: 1:    '12',
658: 1:    '13',
658: 1:    '14',
658: 1:    '15',
658: 1:    '16',
658: 1:    '17',
658: 1:    '18',
658: 1:    '19',
658: 1:    '20'
658: 1:  ]
658: 1:}
658: 1:Scores: 53268
658: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233', '343', '536', '373', '839']')
658: 1:Fire Event: PassTest{complexity=28, testCount=25}
------------------------------------------
659: 1:BoardData {
659: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
659: 1:  'expectedAnswer': '404',
659: 1:  'history': [
659: 1:    {
659: 1:      'answer': '101',
659: 1:      'question': '1',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '112',
659: 1:      'question': '2',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '131',
659: 1:      'question': '3',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '415',
659: 1:      'question': '4',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '161',
659: 1:      'question': '5',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '718',
659: 1:      'question': '6',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '192',
659: 1:      'question': '7',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '021',
659: 1:      'question': '8',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '222',
659: 1:      'question': '9',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '324',
659: 1:      'question': '10',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '252',
659: 1:      'question': '11',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '627',
659: 1:      'question': '12',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '282',
659: 1:      'question': '13',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '930',
659: 1:      'question': '14',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '313',
659: 1:      'question': '15',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '233',
659: 1:      'question': '16',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '343',
659: 1:      'question': '17',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '536',
659: 1:      'question': '18',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '373',
659: 1:      'question': '19',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '839',
659: 1:      'question': '20',
659: 1:      'valid': true
659: 1:    }
659: 1:  ],
659: 1:  'info': [
659: 1:    '✅f(1) = 101',
659: 1:    '✅f(2) = 112',
659: 1:    '✅f(3) = 131',
659: 1:    '✅f(4) = 415',
659: 1:    '✅f(5) = 161',
659: 1:    '✅f(6) = 718',
659: 1:    '✅f(7) = 192',
659: 1:    '✅f(8) = 021',
659: 1:    '✅f(9) = 222',
659: 1:    '✅f(10) = 324',
659: 1:    '✅f(11) = 252',
659: 1:    '✅f(12) = 627',
659: 1:    '✅f(13) = 282',
659: 1:    '✅f(14) = 930',
659: 1:    '✅f(15) = 313',
659: 1:    '✅f(16) = 233',
659: 1:    '✅f(17) = 343',
659: 1:    '✅f(18) = 536',
659: 1:    '✅f(19) = 373',
659: 1:    '✅f(20) = 839',
659: 1:    '❌f(21) = ??? != 404'
659: 1:  ],
659: 1:  'level': 24,
659: 1:  'nextQuestion': '21',
659: 1:  'questions': [
659: 1:    '1',
659: 1:    '2',
659: 1:    '3',
659: 1:    '4',
659: 1:    '5',
659: 1:    '6',
659: 1:    '7',
659: 1:    '8',
659: 1:    '9',
659: 1:    '10',
659: 1:    '11',
659: 1:    '12',
659: 1:    '13',
659: 1:    '14',
659: 1:    '15',
659: 1:    '16',
659: 1:    '17',
659: 1:    '18',
659: 1:    '19',
659: 1:    '20',
659: 1:    '21'
659: 1:  ]
659: 1:}
659: 1:Scores: 53279
659: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233', '343', '536', '373', '839', '404']')
659: 1:Fire Event: PassTest{complexity=28, testCount=25}
------------------------------------------
660: 1:BoardData {
660: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
660: 1:  'expectedAnswer': '142',
660: 1:  'history': [
660: 1:    {
660: 1:      'answer': '101',
660: 1:      'question': '1',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '112',
660: 1:      'question': '2',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '131',
660: 1:      'question': '3',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '415',
660: 1:      'question': '4',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '161',
660: 1:      'question': '5',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '718',
660: 1:      'question': '6',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '192',
660: 1:      'question': '7',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '021',
660: 1:      'question': '8',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '222',
660: 1:      'question': '9',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '324',
660: 1:      'question': '10',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '252',
660: 1:      'question': '11',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '627',
660: 1:      'question': '12',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '282',
660: 1:      'question': '13',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '930',
660: 1:      'question': '14',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '313',
660: 1:      'question': '15',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '233',
660: 1:      'question': '16',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '343',
660: 1:      'question': '17',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '536',
660: 1:      'question': '18',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '373',
660: 1:      'question': '19',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '839',
660: 1:      'question': '20',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '404',
660: 1:      'question': '21',
660: 1:      'valid': true
660: 1:    }
660: 1:  ],
660: 1:  'info': [
660: 1:    '✅f(1) = 101',
660: 1:    '✅f(2) = 112',
660: 1:    '✅f(3) = 131',
660: 1:    '✅f(4) = 415',
660: 1:    '✅f(5) = 161',
660: 1:    '✅f(6) = 718',
660: 1:    '✅f(7) = 192',
660: 1:    '✅f(8) = 021',
660: 1:    '✅f(9) = 222',
660: 1:    '✅f(10) = 324',
660: 1:    '✅f(11) = 252',
660: 1:    '✅f(12) = 627',
660: 1:    '✅f(13) = 282',
660: 1:    '✅f(14) = 930',
660: 1:    '✅f(15) = 313',
660: 1:    '✅f(16) = 233',
660: 1:    '✅f(17) = 343',
660: 1:    '✅f(18) = 536',
660: 1:    '✅f(19) = 373',
660: 1:    '✅f(20) = 839',
660: 1:    '✅f(21) = 404',
660: 1:    '❌f(22) = ??? != 142'
660: 1:  ],
660: 1:  'level': 24,
660: 1:  'nextQuestion': '22',
660: 1:  'questions': [
660: 1:    '1',
660: 1:    '2',
660: 1:    '3',
660: 1:    '4',
660: 1:    '5',
660: 1:    '6',
660: 1:    '7',
660: 1:    '8',
660: 1:    '9',
660: 1:    '10',
660: 1:    '11',
660: 1:    '12',
660: 1:    '13',
660: 1:    '14',
660: 1:    '15',
660: 1:    '16',
660: 1:    '17',
660: 1:    '18',
660: 1:    '19',
660: 1:    '20',
660: 1:    '21',
660: 1:    '22'
660: 1:  ]
660: 1:}
660: 1:Scores: 53290
660: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233', '343', '536', '373', '839', '404', '142']')
660: 1:Fire Event: PassTest{complexity=28, testCount=25}
------------------------------------------
661: 1:BoardData {
661: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
661: 1:  'expectedAnswer': '434',
661: 1:  'history': [
661: 1:    {
661: 1:      'answer': '101',
661: 1:      'question': '1',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '112',
661: 1:      'question': '2',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '131',
661: 1:      'question': '3',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '415',
661: 1:      'question': '4',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '161',
661: 1:      'question': '5',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '718',
661: 1:      'question': '6',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '192',
661: 1:      'question': '7',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '021',
661: 1:      'question': '8',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '222',
661: 1:      'question': '9',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '324',
661: 1:      'question': '10',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '252',
661: 1:      'question': '11',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '627',
661: 1:      'question': '12',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '282',
661: 1:      'question': '13',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '930',
661: 1:      'question': '14',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '313',
661: 1:      'question': '15',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '233',
661: 1:      'question': '16',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '343',
661: 1:      'question': '17',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '536',
661: 1:      'question': '18',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '373',
661: 1:      'question': '19',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '839',
661: 1:      'question': '20',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '404',
661: 1:      'question': '21',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '142',
661: 1:      'question': '22',
661: 1:      'valid': true
661: 1:    }
661: 1:  ],
661: 1:  'info': [
661: 1:    '✅f(1) = 101',
661: 1:    '✅f(2) = 112',
661: 1:    '✅f(3) = 131',
661: 1:    '✅f(4) = 415',
661: 1:    '✅f(5) = 161',
661: 1:    '✅f(6) = 718',
661: 1:    '✅f(7) = 192',
661: 1:    '✅f(8) = 021',
661: 1:    '✅f(9) = 222',
661: 1:    '✅f(10) = 324',
661: 1:    '✅f(11) = 252',
661: 1:    '✅f(12) = 627',
661: 1:    '✅f(13) = 282',
661: 1:    '✅f(14) = 930',
661: 1:    '✅f(15) = 313',
661: 1:    '✅f(16) = 233',
661: 1:    '✅f(17) = 343',
661: 1:    '✅f(18) = 536',
661: 1:    '✅f(19) = 373',
661: 1:    '✅f(20) = 839',
661: 1:    '✅f(21) = 404',
661: 1:    '✅f(22) = 142',
661: 1:    '❌f(23) = ??? != 434'
661: 1:  ],
661: 1:  'level': 24,
661: 1:  'nextQuestion': '23',
661: 1:  'questions': [
661: 1:    '1',
661: 1:    '2',
661: 1:    '3',
661: 1:    '4',
661: 1:    '5',
661: 1:    '6',
661: 1:    '7',
661: 1:    '8',
661: 1:    '9',
661: 1:    '10',
661: 1:    '11',
661: 1:    '12',
661: 1:    '13',
661: 1:    '14',
661: 1:    '15',
661: 1:    '16',
661: 1:    '17',
661: 1:    '18',
661: 1:    '19',
661: 1:    '20',
661: 1:    '21',
661: 1:    '22',
661: 1:    '23'
661: 1:  ]
661: 1:}
661: 1:Scores: 53301
661: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233', '343', '536', '373', '839', '404', '142', '434']')
661: 1:Fire Event: PassTest{complexity=28, testCount=25}
------------------------------------------
662: 1:BoardData {
662: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
662: 1:  'expectedAnswer': '445',
662: 1:  'history': [
662: 1:    {
662: 1:      'answer': '101',
662: 1:      'question': '1',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '112',
662: 1:      'question': '2',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '131',
662: 1:      'question': '3',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '415',
662: 1:      'question': '4',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '161',
662: 1:      'question': '5',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '718',
662: 1:      'question': '6',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '192',
662: 1:      'question': '7',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '021',
662: 1:      'question': '8',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '222',
662: 1:      'question': '9',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '324',
662: 1:      'question': '10',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '252',
662: 1:      'question': '11',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '627',
662: 1:      'question': '12',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '282',
662: 1:      'question': '13',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '930',
662: 1:      'question': '14',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '313',
662: 1:      'question': '15',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '233',
662: 1:      'question': '16',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '343',
662: 1:      'question': '17',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '536',
662: 1:      'question': '18',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '373',
662: 1:      'question': '19',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '839',
662: 1:      'question': '20',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '404',
662: 1:      'question': '21',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '142',
662: 1:      'question': '22',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '434',
662: 1:      'question': '23',
662: 1:      'valid': true
662: 1:    }
662: 1:  ],
662: 1:  'info': [
662: 1:    '✅f(1) = 101',
662: 1:    '✅f(2) = 112',
662: 1:    '✅f(3) = 131',
662: 1:    '✅f(4) = 415',
662: 1:    '✅f(5) = 161',
662: 1:    '✅f(6) = 718',
662: 1:    '✅f(7) = 192',
662: 1:    '✅f(8) = 021',
662: 1:    '✅f(9) = 222',
662: 1:    '✅f(10) = 324',
662: 1:    '✅f(11) = 252',
662: 1:    '✅f(12) = 627',
662: 1:    '✅f(13) = 282',
662: 1:    '✅f(14) = 930',
662: 1:    '✅f(15) = 313',
662: 1:    '✅f(16) = 233',
662: 1:    '✅f(17) = 343',
662: 1:    '✅f(18) = 536',
662: 1:    '✅f(19) = 373',
662: 1:    '✅f(20) = 839',
662: 1:    '✅f(21) = 404',
662: 1:    '✅f(22) = 142',
662: 1:    '✅f(23) = 434',
662: 1:    '❌f(24) = ??? != 445'
662: 1:  ],
662: 1:  'level': 24,
662: 1:  'nextQuestion': '24',
662: 1:  'questions': [
662: 1:    '1',
662: 1:    '2',
662: 1:    '3',
662: 1:    '4',
662: 1:    '5',
662: 1:    '6',
662: 1:    '7',
662: 1:    '8',
662: 1:    '9',
662: 1:    '10',
662: 1:    '11',
662: 1:    '12',
662: 1:    '13',
662: 1:    '14',
662: 1:    '15',
662: 1:    '16',
662: 1:    '17',
662: 1:    '18',
662: 1:    '19',
662: 1:    '20',
662: 1:    '21',
662: 1:    '22',
662: 1:    '23',
662: 1:    '24'
662: 1:  ]
662: 1:}
662: 1:Scores: 53312
662: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233', '343', '536', '373', '839', '404', '142', '434', '445']')
662: 1:Fire Event: PassTest{complexity=28, testCount=25}
------------------------------------------
663: 1:BoardData {
663: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
663: 1:  'expectedAnswer': '464',
663: 1:  'history': [
663: 1:    {
663: 1:      'answer': '101',
663: 1:      'question': '1',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '112',
663: 1:      'question': '2',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '131',
663: 1:      'question': '3',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '415',
663: 1:      'question': '4',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '161',
663: 1:      'question': '5',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '718',
663: 1:      'question': '6',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '192',
663: 1:      'question': '7',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '021',
663: 1:      'question': '8',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '222',
663: 1:      'question': '9',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '324',
663: 1:      'question': '10',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '252',
663: 1:      'question': '11',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '627',
663: 1:      'question': '12',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '282',
663: 1:      'question': '13',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '930',
663: 1:      'question': '14',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '313',
663: 1:      'question': '15',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '233',
663: 1:      'question': '16',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '343',
663: 1:      'question': '17',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '536',
663: 1:      'question': '18',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '373',
663: 1:      'question': '19',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '839',
663: 1:      'question': '20',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '404',
663: 1:      'question': '21',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '142',
663: 1:      'question': '22',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '434',
663: 1:      'question': '23',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '445',
663: 1:      'question': '24',
663: 1:      'valid': true
663: 1:    }
663: 1:  ],
663: 1:  'info': [
663: 1:    '✅f(1) = 101',
663: 1:    '✅f(2) = 112',
663: 1:    '✅f(3) = 131',
663: 1:    '✅f(4) = 415',
663: 1:    '✅f(5) = 161',
663: 1:    '✅f(6) = 718',
663: 1:    '✅f(7) = 192',
663: 1:    '✅f(8) = 021',
663: 1:    '✅f(9) = 222',
663: 1:    '✅f(10) = 324',
663: 1:    '✅f(11) = 252',
663: 1:    '✅f(12) = 627',
663: 1:    '✅f(13) = 282',
663: 1:    '✅f(14) = 930',
663: 1:    '✅f(15) = 313',
663: 1:    '✅f(16) = 233',
663: 1:    '✅f(17) = 343',
663: 1:    '✅f(18) = 536',
663: 1:    '✅f(19) = 373',
663: 1:    '✅f(20) = 839',
663: 1:    '✅f(21) = 404',
663: 1:    '✅f(22) = 142',
663: 1:    '✅f(23) = 434',
663: 1:    '✅f(24) = 445',
663: 1:    '❌f(25) = ??? != 464'
663: 1:  ],
663: 1:  'level': 24,
663: 1:  'nextQuestion': '25',
663: 1:  'questions': [
663: 1:    '1',
663: 1:    '2',
663: 1:    '3',
663: 1:    '4',
663: 1:    '5',
663: 1:    '6',
663: 1:    '7',
663: 1:    '8',
663: 1:    '9',
663: 1:    '10',
663: 1:    '11',
663: 1:    '12',
663: 1:    '13',
663: 1:    '14',
663: 1:    '15',
663: 1:    '16',
663: 1:    '17',
663: 1:    '18',
663: 1:    '19',
663: 1:    '20',
663: 1:    '21',
663: 1:    '22',
663: 1:    '23',
663: 1:    '24',
663: 1:    '25'
663: 1:  ]
663: 1:}
663: 1:Scores: 53323
663: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233', '343', '536', '373', '839', '404', '142', '434', '445', '464']')
663: 1:Fire Event: PassTest{complexity=28, testCount=25}
663: 1:Fire Event: NextAlgorithm{complexity=28, time=0}
------------------------------------------
664: 1:BoardData {
664: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
664: 1:  'history': [
664: 1:    {
664: 1:      'answer': '101',
664: 1:      'question': '1',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '112',
664: 1:      'question': '2',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '131',
664: 1:      'question': '3',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '415',
664: 1:      'question': '4',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '161',
664: 1:      'question': '5',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '718',
664: 1:      'question': '6',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '192',
664: 1:      'question': '7',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '021',
664: 1:      'question': '8',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '222',
664: 1:      'question': '9',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '324',
664: 1:      'question': '10',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '252',
664: 1:      'question': '11',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '627',
664: 1:      'question': '12',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '282',
664: 1:      'question': '13',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '930',
664: 1:      'question': '14',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '313',
664: 1:      'question': '15',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '233',
664: 1:      'question': '16',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '343',
664: 1:      'question': '17',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '536',
664: 1:      'question': '18',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '373',
664: 1:      'question': '19',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '839',
664: 1:      'question': '20',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '404',
664: 1:      'question': '21',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '142',
664: 1:      'question': '22',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '434',
664: 1:      'question': '23',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '445',
664: 1:      'question': '24',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '464',
664: 1:      'question': '25',
664: 1:      'valid': true
664: 1:    }
664: 1:  ],
664: 1:  'info': [
664: 1:    '✅f(1) = 101',
664: 1:    '✅f(2) = 112',
664: 1:    '✅f(3) = 131',
664: 1:    '✅f(4) = 415',
664: 1:    '✅f(5) = 161',
664: 1:    '✅f(6) = 718',
664: 1:    '✅f(7) = 192',
664: 1:    '✅f(8) = 021',
664: 1:    '✅f(9) = 222',
664: 1:    '✅f(10) = 324',
664: 1:    '✅f(11) = 252',
664: 1:    '✅f(12) = 627',
664: 1:    '✅f(13) = 282',
664: 1:    '✅f(14) = 930',
664: 1:    '✅f(15) = 313',
664: 1:    '✅f(16) = 233',
664: 1:    '✅f(17) = 343',
664: 1:    '✅f(18) = 536',
664: 1:    '✅f(19) = 373',
664: 1:    '✅f(20) = 839',
664: 1:    '✅f(21) = 404',
664: 1:    '✅f(22) = 142',
664: 1:    '✅f(23) = 434',
664: 1:    '✅f(24) = 445',
664: 1:    '✅f(25) = 464'
664: 1:  ],
664: 1:  'level': 24,
664: 1:  'questions': []
664: 1:}
664: 1:Scores: 57113
664: 1:Answer: message('StartNextLevel')
664: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
665: 1:BoardData {
665: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
665: 1:  'expectedAnswer': '2',
665: 1:  'history': [],
665: 1:  'info': ['❌f(1) = ??? != 2'],
665: 1:  'level': 25,
665: 1:  'nextQuestion': '1',
665: 1:  'questions': ['1']
665: 1:}
665: 1:Scores: 57113
665: 1:Answer: message('['2']')
665: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
666: 1:BoardData {
666: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
666: 1:  'expectedAnswer': '4',
666: 1:  'history': [{
666: 1:    'answer': '2',
666: 1:    'question': '1',
666: 1:    'valid': true
666: 1:  }],
666: 1:  'info': [
666: 1:    '✅f(1) = 2',
666: 1:    '❌f(2) = ??? != 4'
666: 1:  ],
666: 1:  'level': 25,
666: 1:  'nextQuestion': '2',
666: 1:  'questions': [
666: 1:    '1',
666: 1:    '2'
666: 1:  ]
666: 1:}
666: 1:Scores: 57127
666: 1:Answer: message('['2', '4']')
666: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
667: 1:BoardData {
667: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
667: 1:  'expectedAnswer': '8',
667: 1:  'history': [
667: 1:    {
667: 1:      'answer': '2',
667: 1:      'question': '1',
667: 1:      'valid': true
667: 1:    },
667: 1:    {
667: 1:      'answer': '4',
667: 1:      'question': '2',
667: 1:      'valid': true
667: 1:    }
667: 1:  ],
667: 1:  'info': [
667: 1:    '✅f(1) = 2',
667: 1:    '✅f(2) = 4',
667: 1:    '❌f(3) = ??? != 8'
667: 1:  ],
667: 1:  'level': 25,
667: 1:  'nextQuestion': '3',
667: 1:  'questions': [
667: 1:    '1',
667: 1:    '2',
667: 1:    '3'
667: 1:  ]
667: 1:}
667: 1:Scores: 57141
667: 1:Answer: message('['2', '4', '8']')
667: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
668: 1:BoardData {
668: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
668: 1:  'expectedAnswer': '7',
668: 1:  'history': [
668: 1:    {
668: 1:      'answer': '2',
668: 1:      'question': '1',
668: 1:      'valid': true
668: 1:    },
668: 1:    {
668: 1:      'answer': '4',
668: 1:      'question': '2',
668: 1:      'valid': true
668: 1:    },
668: 1:    {
668: 1:      'answer': '8',
668: 1:      'question': '3',
668: 1:      'valid': true
668: 1:    }
668: 1:  ],
668: 1:  'info': [
668: 1:    '✅f(1) = 2',
668: 1:    '✅f(2) = 4',
668: 1:    '✅f(3) = 8',
668: 1:    '❌f(4) = ??? != 7'
668: 1:  ],
668: 1:  'level': 25,
668: 1:  'nextQuestion': '4',
668: 1:  'questions': [
668: 1:    '1',
668: 1:    '2',
668: 1:    '3',
668: 1:    '4'
668: 1:  ]
668: 1:}
668: 1:Scores: 57155
668: 1:Answer: message('['2', '4', '8', '7']')
668: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
669: 1:BoardData {
669: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
669: 1:  'expectedAnswer': '5',
669: 1:  'history': [
669: 1:    {
669: 1:      'answer': '2',
669: 1:      'question': '1',
669: 1:      'valid': true
669: 1:    },
669: 1:    {
669: 1:      'answer': '4',
669: 1:      'question': '2',
669: 1:      'valid': true
669: 1:    },
669: 1:    {
669: 1:      'answer': '8',
669: 1:      'question': '3',
669: 1:      'valid': true
669: 1:    },
669: 1:    {
669: 1:      'answer': '7',
669: 1:      'question': '4',
669: 1:      'valid': true
669: 1:    }
669: 1:  ],
669: 1:  'info': [
669: 1:    '✅f(1) = 2',
669: 1:    '✅f(2) = 4',
669: 1:    '✅f(3) = 8',
669: 1:    '✅f(4) = 7',
669: 1:    '❌f(5) = ??? != 5'
669: 1:  ],
669: 1:  'level': 25,
669: 1:  'nextQuestion': '5',
669: 1:  'questions': [
669: 1:    '1',
669: 1:    '2',
669: 1:    '3',
669: 1:    '4',
669: 1:    '5'
669: 1:  ]
669: 1:}
669: 1:Scores: 57169
669: 1:Answer: message('['2', '4', '8', '7', '5']')
669: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
670: 1:BoardData {
670: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
670: 1:  'expectedAnswer': '10',
670: 1:  'history': [
670: 1:    {
670: 1:      'answer': '2',
670: 1:      'question': '1',
670: 1:      'valid': true
670: 1:    },
670: 1:    {
670: 1:      'answer': '4',
670: 1:      'question': '2',
670: 1:      'valid': true
670: 1:    },
670: 1:    {
670: 1:      'answer': '8',
670: 1:      'question': '3',
670: 1:      'valid': true
670: 1:    },
670: 1:    {
670: 1:      'answer': '7',
670: 1:      'question': '4',
670: 1:      'valid': true
670: 1:    },
670: 1:    {
670: 1:      'answer': '5',
670: 1:      'question': '5',
670: 1:      'valid': true
670: 1:    }
670: 1:  ],
670: 1:  'info': [
670: 1:    '✅f(1) = 2',
670: 1:    '✅f(2) = 4',
670: 1:    '✅f(3) = 8',
670: 1:    '✅f(4) = 7',
670: 1:    '✅f(5) = 5',
670: 1:    '❌f(6) = ??? != 10'
670: 1:  ],
670: 1:  'level': 25,
670: 1:  'nextQuestion': '6',
670: 1:  'questions': [
670: 1:    '1',
670: 1:    '2',
670: 1:    '3',
670: 1:    '4',
670: 1:    '5',
670: 1:    '6'
670: 1:  ]
670: 1:}
670: 1:Scores: 57183
670: 1:Answer: message('['2', '4', '8', '7', '5', '10']')
670: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
671: 1:BoardData {
671: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
671: 1:  'expectedAnswer': '11',
671: 1:  'history': [
671: 1:    {
671: 1:      'answer': '2',
671: 1:      'question': '1',
671: 1:      'valid': true
671: 1:    },
671: 1:    {
671: 1:      'answer': '4',
671: 1:      'question': '2',
671: 1:      'valid': true
671: 1:    },
671: 1:    {
671: 1:      'answer': '8',
671: 1:      'question': '3',
671: 1:      'valid': true
671: 1:    },
671: 1:    {
671: 1:      'answer': '7',
671: 1:      'question': '4',
671: 1:      'valid': true
671: 1:    },
671: 1:    {
671: 1:      'answer': '5',
671: 1:      'question': '5',
671: 1:      'valid': true
671: 1:    },
671: 1:    {
671: 1:      'answer': '10',
671: 1:      'question': '6',
671: 1:      'valid': true
671: 1:    }
671: 1:  ],
671: 1:  'info': [
671: 1:    '✅f(1) = 2',
671: 1:    '✅f(2) = 4',
671: 1:    '✅f(3) = 8',
671: 1:    '✅f(4) = 7',
671: 1:    '✅f(5) = 5',
671: 1:    '✅f(6) = 10',
671: 1:    '❌f(7) = ??? != 11'
671: 1:  ],
671: 1:  'level': 25,
671: 1:  'nextQuestion': '7',
671: 1:  'questions': [
671: 1:    '1',
671: 1:    '2',
671: 1:    '3',
671: 1:    '4',
671: 1:    '5',
671: 1:    '6',
671: 1:    '7'
671: 1:  ]
671: 1:}
671: 1:Scores: 57197
671: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11']')
671: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
672: 1:BoardData {
672: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
672: 1:  'expectedAnswer': '13',
672: 1:  'history': [
672: 1:    {
672: 1:      'answer': '2',
672: 1:      'question': '1',
672: 1:      'valid': true
672: 1:    },
672: 1:    {
672: 1:      'answer': '4',
672: 1:      'question': '2',
672: 1:      'valid': true
672: 1:    },
672: 1:    {
672: 1:      'answer': '8',
672: 1:      'question': '3',
672: 1:      'valid': true
672: 1:    },
672: 1:    {
672: 1:      'answer': '7',
672: 1:      'question': '4',
672: 1:      'valid': true
672: 1:    },
672: 1:    {
672: 1:      'answer': '5',
672: 1:      'question': '5',
672: 1:      'valid': true
672: 1:    },
672: 1:    {
672: 1:      'answer': '10',
672: 1:      'question': '6',
672: 1:      'valid': true
672: 1:    },
672: 1:    {
672: 1:      'answer': '11',
672: 1:      'question': '7',
672: 1:      'valid': true
672: 1:    }
672: 1:  ],
672: 1:  'info': [
672: 1:    '✅f(1) = 2',
672: 1:    '✅f(2) = 4',
672: 1:    '✅f(3) = 8',
672: 1:    '✅f(4) = 7',
672: 1:    '✅f(5) = 5',
672: 1:    '✅f(6) = 10',
672: 1:    '✅f(7) = 11',
672: 1:    '❌f(8) = ??? != 13'
672: 1:  ],
672: 1:  'level': 25,
672: 1:  'nextQuestion': '8',
672: 1:  'questions': [
672: 1:    '1',
672: 1:    '2',
672: 1:    '3',
672: 1:    '4',
672: 1:    '5',
672: 1:    '6',
672: 1:    '7',
672: 1:    '8'
672: 1:  ]
672: 1:}
672: 1:Scores: 57211
672: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13']')
672: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
673: 1:BoardData {
673: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
673: 1:  'expectedAnswer': '8',
673: 1:  'history': [
673: 1:    {
673: 1:      'answer': '2',
673: 1:      'question': '1',
673: 1:      'valid': true
673: 1:    },
673: 1:    {
673: 1:      'answer': '4',
673: 1:      'question': '2',
673: 1:      'valid': true
673: 1:    },
673: 1:    {
673: 1:      'answer': '8',
673: 1:      'question': '3',
673: 1:      'valid': true
673: 1:    },
673: 1:    {
673: 1:      'answer': '7',
673: 1:      'question': '4',
673: 1:      'valid': true
673: 1:    },
673: 1:    {
673: 1:      'answer': '5',
673: 1:      'question': '5',
673: 1:      'valid': true
673: 1:    },
673: 1:    {
673: 1:      'answer': '10',
673: 1:      'question': '6',
673: 1:      'valid': true
673: 1:    },
673: 1:    {
673: 1:      'answer': '11',
673: 1:      'question': '7',
673: 1:      'valid': true
673: 1:    },
673: 1:    {
673: 1:      'answer': '13',
673: 1:      'question': '8',
673: 1:      'valid': true
673: 1:    }
673: 1:  ],
673: 1:  'info': [
673: 1:    '✅f(1) = 2',
673: 1:    '✅f(2) = 4',
673: 1:    '✅f(3) = 8',
673: 1:    '✅f(4) = 7',
673: 1:    '✅f(5) = 5',
673: 1:    '✅f(6) = 10',
673: 1:    '✅f(7) = 11',
673: 1:    '✅f(8) = 13',
673: 1:    '❌f(9) = ??? != 8'
673: 1:  ],
673: 1:  'level': 25,
673: 1:  'nextQuestion': '9',
673: 1:  'questions': [
673: 1:    '1',
673: 1:    '2',
673: 1:    '3',
673: 1:    '4',
673: 1:    '5',
673: 1:    '6',
673: 1:    '7',
673: 1:    '8',
673: 1:    '9'
673: 1:  ]
673: 1:}
673: 1:Scores: 57225
673: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8']')
673: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
674: 1:BoardData {
674: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
674: 1:  'expectedAnswer': '7',
674: 1:  'history': [
674: 1:    {
674: 1:      'answer': '2',
674: 1:      'question': '1',
674: 1:      'valid': true
674: 1:    },
674: 1:    {
674: 1:      'answer': '4',
674: 1:      'question': '2',
674: 1:      'valid': true
674: 1:    },
674: 1:    {
674: 1:      'answer': '8',
674: 1:      'question': '3',
674: 1:      'valid': true
674: 1:    },
674: 1:    {
674: 1:      'answer': '7',
674: 1:      'question': '4',
674: 1:      'valid': true
674: 1:    },
674: 1:    {
674: 1:      'answer': '5',
674: 1:      'question': '5',
674: 1:      'valid': true
674: 1:    },
674: 1:    {
674: 1:      'answer': '10',
674: 1:      'question': '6',
674: 1:      'valid': true
674: 1:    },
674: 1:    {
674: 1:      'answer': '11',
674: 1:      'question': '7',
674: 1:      'valid': true
674: 1:    },
674: 1:    {
674: 1:      'answer': '13',
674: 1:      'question': '8',
674: 1:      'valid': true
674: 1:    },
674: 1:    {
674: 1:      'answer': '8',
674: 1:      'question': '9',
674: 1:      'valid': true
674: 1:    }
674: 1:  ],
674: 1:  'info': [
674: 1:    '✅f(1) = 2',
674: 1:    '✅f(2) = 4',
674: 1:    '✅f(3) = 8',
674: 1:    '✅f(4) = 7',
674: 1:    '✅f(5) = 5',
674: 1:    '✅f(6) = 10',
674: 1:    '✅f(7) = 11',
674: 1:    '✅f(8) = 13',
674: 1:    '✅f(9) = 8',
674: 1:    '❌f(10) = ??? != 7'
674: 1:  ],
674: 1:  'level': 25,
674: 1:  'nextQuestion': '10',
674: 1:  'questions': [
674: 1:    '1',
674: 1:    '2',
674: 1:    '3',
674: 1:    '4',
674: 1:    '5',
674: 1:    '6',
674: 1:    '7',
674: 1:    '8',
674: 1:    '9',
674: 1:    '10'
674: 1:  ]
674: 1:}
674: 1:Scores: 57239
674: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7']')
674: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
675: 1:BoardData {
675: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
675: 1:  'expectedAnswer': '14',
675: 1:  'history': [
675: 1:    {
675: 1:      'answer': '2',
675: 1:      'question': '1',
675: 1:      'valid': true
675: 1:    },
675: 1:    {
675: 1:      'answer': '4',
675: 1:      'question': '2',
675: 1:      'valid': true
675: 1:    },
675: 1:    {
675: 1:      'answer': '8',
675: 1:      'question': '3',
675: 1:      'valid': true
675: 1:    },
675: 1:    {
675: 1:      'answer': '7',
675: 1:      'question': '4',
675: 1:      'valid': true
675: 1:    },
675: 1:    {
675: 1:      'answer': '5',
675: 1:      'question': '5',
675: 1:      'valid': true
675: 1:    },
675: 1:    {
675: 1:      'answer': '10',
675: 1:      'question': '6',
675: 1:      'valid': true
675: 1:    },
675: 1:    {
675: 1:      'answer': '11',
675: 1:      'question': '7',
675: 1:      'valid': true
675: 1:    },
675: 1:    {
675: 1:      'answer': '13',
675: 1:      'question': '8',
675: 1:      'valid': true
675: 1:    },
675: 1:    {
675: 1:      'answer': '8',
675: 1:      'question': '9',
675: 1:      'valid': true
675: 1:    },
675: 1:    {
675: 1:      'answer': '7',
675: 1:      'question': '10',
675: 1:      'valid': true
675: 1:    }
675: 1:  ],
675: 1:  'info': [
675: 1:    '✅f(1) = 2',
675: 1:    '✅f(2) = 4',
675: 1:    '✅f(3) = 8',
675: 1:    '✅f(4) = 7',
675: 1:    '✅f(5) = 5',
675: 1:    '✅f(6) = 10',
675: 1:    '✅f(7) = 11',
675: 1:    '✅f(8) = 13',
675: 1:    '✅f(9) = 8',
675: 1:    '✅f(10) = 7',
675: 1:    '❌f(11) = ??? != 14'
675: 1:  ],
675: 1:  'level': 25,
675: 1:  'nextQuestion': '11',
675: 1:  'questions': [
675: 1:    '1',
675: 1:    '2',
675: 1:    '3',
675: 1:    '4',
675: 1:    '5',
675: 1:    '6',
675: 1:    '7',
675: 1:    '8',
675: 1:    '9',
675: 1:    '10',
675: 1:    '11'
675: 1:  ]
675: 1:}
675: 1:Scores: 57253
675: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14']')
675: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
676: 1:BoardData {
676: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
676: 1:  'expectedAnswer': '19',
676: 1:  'history': [
676: 1:    {
676: 1:      'answer': '2',
676: 1:      'question': '1',
676: 1:      'valid': true
676: 1:    },
676: 1:    {
676: 1:      'answer': '4',
676: 1:      'question': '2',
676: 1:      'valid': true
676: 1:    },
676: 1:    {
676: 1:      'answer': '8',
676: 1:      'question': '3',
676: 1:      'valid': true
676: 1:    },
676: 1:    {
676: 1:      'answer': '7',
676: 1:      'question': '4',
676: 1:      'valid': true
676: 1:    },
676: 1:    {
676: 1:      'answer': '5',
676: 1:      'question': '5',
676: 1:      'valid': true
676: 1:    },
676: 1:    {
676: 1:      'answer': '10',
676: 1:      'question': '6',
676: 1:      'valid': true
676: 1:    },
676: 1:    {
676: 1:      'answer': '11',
676: 1:      'question': '7',
676: 1:      'valid': true
676: 1:    },
676: 1:    {
676: 1:      'answer': '13',
676: 1:      'question': '8',
676: 1:      'valid': true
676: 1:    },
676: 1:    {
676: 1:      'answer': '8',
676: 1:      'question': '9',
676: 1:      'valid': true
676: 1:    },
676: 1:    {
676: 1:      'answer': '7',
676: 1:      'question': '10',
676: 1:      'valid': true
676: 1:    },
676: 1:    {
676: 1:      'answer': '14',
676: 1:      'question': '11',
676: 1:      'valid': true
676: 1:    }
676: 1:  ],
676: 1:  'info': [
676: 1:    '✅f(1) = 2',
676: 1:    '✅f(2) = 4',
676: 1:    '✅f(3) = 8',
676: 1:    '✅f(4) = 7',
676: 1:    '✅f(5) = 5',
676: 1:    '✅f(6) = 10',
676: 1:    '✅f(7) = 11',
676: 1:    '✅f(8) = 13',
676: 1:    '✅f(9) = 8',
676: 1:    '✅f(10) = 7',
676: 1:    '✅f(11) = 14',
676: 1:    '❌f(12) = ??? != 19'
676: 1:  ],
676: 1:  'level': 25,
676: 1:  'nextQuestion': '12',
676: 1:  'questions': [
676: 1:    '1',
676: 1:    '2',
676: 1:    '3',
676: 1:    '4',
676: 1:    '5',
676: 1:    '6',
676: 1:    '7',
676: 1:    '8',
676: 1:    '9',
676: 1:    '10',
676: 1:    '11',
676: 1:    '12'
676: 1:  ]
676: 1:}
676: 1:Scores: 57267
676: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19']')
676: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
677: 1:BoardData {
677: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
677: 1:  'expectedAnswer': '20',
677: 1:  'history': [
677: 1:    {
677: 1:      'answer': '2',
677: 1:      'question': '1',
677: 1:      'valid': true
677: 1:    },
677: 1:    {
677: 1:      'answer': '4',
677: 1:      'question': '2',
677: 1:      'valid': true
677: 1:    },
677: 1:    {
677: 1:      'answer': '8',
677: 1:      'question': '3',
677: 1:      'valid': true
677: 1:    },
677: 1:    {
677: 1:      'answer': '7',
677: 1:      'question': '4',
677: 1:      'valid': true
677: 1:    },
677: 1:    {
677: 1:      'answer': '5',
677: 1:      'question': '5',
677: 1:      'valid': true
677: 1:    },
677: 1:    {
677: 1:      'answer': '10',
677: 1:      'question': '6',
677: 1:      'valid': true
677: 1:    },
677: 1:    {
677: 1:      'answer': '11',
677: 1:      'question': '7',
677: 1:      'valid': true
677: 1:    },
677: 1:    {
677: 1:      'answer': '13',
677: 1:      'question': '8',
677: 1:      'valid': true
677: 1:    },
677: 1:    {
677: 1:      'answer': '8',
677: 1:      'question': '9',
677: 1:      'valid': true
677: 1:    },
677: 1:    {
677: 1:      'answer': '7',
677: 1:      'question': '10',
677: 1:      'valid': true
677: 1:    },
677: 1:    {
677: 1:      'answer': '14',
677: 1:      'question': '11',
677: 1:      'valid': true
677: 1:    },
677: 1:    {
677: 1:      'answer': '19',
677: 1:      'question': '12',
677: 1:      'valid': true
677: 1:    }
677: 1:  ],
677: 1:  'info': [
677: 1:    '✅f(1) = 2',
677: 1:    '✅f(2) = 4',
677: 1:    '✅f(3) = 8',
677: 1:    '✅f(4) = 7',
677: 1:    '✅f(5) = 5',
677: 1:    '✅f(6) = 10',
677: 1:    '✅f(7) = 11',
677: 1:    '✅f(8) = 13',
677: 1:    '✅f(9) = 8',
677: 1:    '✅f(10) = 7',
677: 1:    '✅f(11) = 14',
677: 1:    '✅f(12) = 19',
677: 1:    '❌f(13) = ??? != 20'
677: 1:  ],
677: 1:  'level': 25,
677: 1:  'nextQuestion': '13',
677: 1:  'questions': [
677: 1:    '1',
677: 1:    '2',
677: 1:    '3',
677: 1:    '4',
677: 1:    '5',
677: 1:    '6',
677: 1:    '7',
677: 1:    '8',
677: 1:    '9',
677: 1:    '10',
677: 1:    '11',
677: 1:    '12',
677: 1:    '13'
677: 1:  ]
677: 1:}
677: 1:Scores: 57281
677: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20']')
677: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
678: 1:BoardData {
678: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
678: 1:  'expectedAnswer': '22',
678: 1:  'history': [
678: 1:    {
678: 1:      'answer': '2',
678: 1:      'question': '1',
678: 1:      'valid': true
678: 1:    },
678: 1:    {
678: 1:      'answer': '4',
678: 1:      'question': '2',
678: 1:      'valid': true
678: 1:    },
678: 1:    {
678: 1:      'answer': '8',
678: 1:      'question': '3',
678: 1:      'valid': true
678: 1:    },
678: 1:    {
678: 1:      'answer': '7',
678: 1:      'question': '4',
678: 1:      'valid': true
678: 1:    },
678: 1:    {
678: 1:      'answer': '5',
678: 1:      'question': '5',
678: 1:      'valid': true
678: 1:    },
678: 1:    {
678: 1:      'answer': '10',
678: 1:      'question': '6',
678: 1:      'valid': true
678: 1:    },
678: 1:    {
678: 1:      'answer': '11',
678: 1:      'question': '7',
678: 1:      'valid': true
678: 1:    },
678: 1:    {
678: 1:      'answer': '13',
678: 1:      'question': '8',
678: 1:      'valid': true
678: 1:    },
678: 1:    {
678: 1:      'answer': '8',
678: 1:      'question': '9',
678: 1:      'valid': true
678: 1:    },
678: 1:    {
678: 1:      'answer': '7',
678: 1:      'question': '10',
678: 1:      'valid': true
678: 1:    },
678: 1:    {
678: 1:      'answer': '14',
678: 1:      'question': '11',
678: 1:      'valid': true
678: 1:    },
678: 1:    {
678: 1:      'answer': '19',
678: 1:      'question': '12',
678: 1:      'valid': true
678: 1:    },
678: 1:    {
678: 1:      'answer': '20',
678: 1:      'question': '13',
678: 1:      'valid': true
678: 1:    }
678: 1:  ],
678: 1:  'info': [
678: 1:    '✅f(1) = 2',
678: 1:    '✅f(2) = 4',
678: 1:    '✅f(3) = 8',
678: 1:    '✅f(4) = 7',
678: 1:    '✅f(5) = 5',
678: 1:    '✅f(6) = 10',
678: 1:    '✅f(7) = 11',
678: 1:    '✅f(8) = 13',
678: 1:    '✅f(9) = 8',
678: 1:    '✅f(10) = 7',
678: 1:    '✅f(11) = 14',
678: 1:    '✅f(12) = 19',
678: 1:    '✅f(13) = 20',
678: 1:    '❌f(14) = ??? != 22'
678: 1:  ],
678: 1:  'level': 25,
678: 1:  'nextQuestion': '14',
678: 1:  'questions': [
678: 1:    '1',
678: 1:    '2',
678: 1:    '3',
678: 1:    '4',
678: 1:    '5',
678: 1:    '6',
678: 1:    '7',
678: 1:    '8',
678: 1:    '9',
678: 1:    '10',
678: 1:    '11',
678: 1:    '12',
678: 1:    '13',
678: 1:    '14'
678: 1:  ]
678: 1:}
678: 1:Scores: 57295
678: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22']')
678: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
679: 1:BoardData {
679: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
679: 1:  'expectedAnswer': '26',
679: 1:  'history': [
679: 1:    {
679: 1:      'answer': '2',
679: 1:      'question': '1',
679: 1:      'valid': true
679: 1:    },
679: 1:    {
679: 1:      'answer': '4',
679: 1:      'question': '2',
679: 1:      'valid': true
679: 1:    },
679: 1:    {
679: 1:      'answer': '8',
679: 1:      'question': '3',
679: 1:      'valid': true
679: 1:    },
679: 1:    {
679: 1:      'answer': '7',
679: 1:      'question': '4',
679: 1:      'valid': true
679: 1:    },
679: 1:    {
679: 1:      'answer': '5',
679: 1:      'question': '5',
679: 1:      'valid': true
679: 1:    },
679: 1:    {
679: 1:      'answer': '10',
679: 1:      'question': '6',
679: 1:      'valid': true
679: 1:    },
679: 1:    {
679: 1:      'answer': '11',
679: 1:      'question': '7',
679: 1:      'valid': true
679: 1:    },
679: 1:    {
679: 1:      'answer': '13',
679: 1:      'question': '8',
679: 1:      'valid': true
679: 1:    },
679: 1:    {
679: 1:      'answer': '8',
679: 1:      'question': '9',
679: 1:      'valid': true
679: 1:    },
679: 1:    {
679: 1:      'answer': '7',
679: 1:      'question': '10',
679: 1:      'valid': true
679: 1:    },
679: 1:    {
679: 1:      'answer': '14',
679: 1:      'question': '11',
679: 1:      'valid': true
679: 1:    },
679: 1:    {
679: 1:      'answer': '19',
679: 1:      'question': '12',
679: 1:      'valid': true
679: 1:    },
679: 1:    {
679: 1:      'answer': '20',
679: 1:      'question': '13',
679: 1:      'valid': true
679: 1:    },
679: 1:    {
679: 1:      'answer': '22',
679: 1:      'question': '14',
679: 1:      'valid': true
679: 1:    }
679: 1:  ],
679: 1:  'info': [
679: 1:    '✅f(1) = 2',
679: 1:    '✅f(2) = 4',
679: 1:    '✅f(3) = 8',
679: 1:    '✅f(4) = 7',
679: 1:    '✅f(5) = 5',
679: 1:    '✅f(6) = 10',
679: 1:    '✅f(7) = 11',
679: 1:    '✅f(8) = 13',
679: 1:    '✅f(9) = 8',
679: 1:    '✅f(10) = 7',
679: 1:    '✅f(11) = 14',
679: 1:    '✅f(12) = 19',
679: 1:    '✅f(13) = 20',
679: 1:    '✅f(14) = 22',
679: 1:    '❌f(15) = ??? != 26'
679: 1:  ],
679: 1:  'level': 25,
679: 1:  'nextQuestion': '15',
679: 1:  'questions': [
679: 1:    '1',
679: 1:    '2',
679: 1:    '3',
679: 1:    '4',
679: 1:    '5',
679: 1:    '6',
679: 1:    '7',
679: 1:    '8',
679: 1:    '9',
679: 1:    '10',
679: 1:    '11',
679: 1:    '12',
679: 1:    '13',
679: 1:    '14',
679: 1:    '15'
679: 1:  ]
679: 1:}
679: 1:Scores: 57309
679: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26']')
679: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
680: 1:BoardData {
680: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
680: 1:  'expectedAnswer': '25',
680: 1:  'history': [
680: 1:    {
680: 1:      'answer': '2',
680: 1:      'question': '1',
680: 1:      'valid': true
680: 1:    },
680: 1:    {
680: 1:      'answer': '4',
680: 1:      'question': '2',
680: 1:      'valid': true
680: 1:    },
680: 1:    {
680: 1:      'answer': '8',
680: 1:      'question': '3',
680: 1:      'valid': true
680: 1:    },
680: 1:    {
680: 1:      'answer': '7',
680: 1:      'question': '4',
680: 1:      'valid': true
680: 1:    },
680: 1:    {
680: 1:      'answer': '5',
680: 1:      'question': '5',
680: 1:      'valid': true
680: 1:    },
680: 1:    {
680: 1:      'answer': '10',
680: 1:      'question': '6',
680: 1:      'valid': true
680: 1:    },
680: 1:    {
680: 1:      'answer': '11',
680: 1:      'question': '7',
680: 1:      'valid': true
680: 1:    },
680: 1:    {
680: 1:      'answer': '13',
680: 1:      'question': '8',
680: 1:      'valid': true
680: 1:    },
680: 1:    {
680: 1:      'answer': '8',
680: 1:      'question': '9',
680: 1:      'valid': true
680: 1:    },
680: 1:    {
680: 1:      'answer': '7',
680: 1:      'question': '10',
680: 1:      'valid': true
680: 1:    },
680: 1:    {
680: 1:      'answer': '14',
680: 1:      'question': '11',
680: 1:      'valid': true
680: 1:    },
680: 1:    {
680: 1:      'answer': '19',
680: 1:      'question': '12',
680: 1:      'valid': true
680: 1:    },
680: 1:    {
680: 1:      'answer': '20',
680: 1:      'question': '13',
680: 1:      'valid': true
680: 1:    },
680: 1:    {
680: 1:      'answer': '22',
680: 1:      'question': '14',
680: 1:      'valid': true
680: 1:    },
680: 1:    {
680: 1:      'answer': '26',
680: 1:      'question': '15',
680: 1:      'valid': true
680: 1:    }
680: 1:  ],
680: 1:  'info': [
680: 1:    '✅f(1) = 2',
680: 1:    '✅f(2) = 4',
680: 1:    '✅f(3) = 8',
680: 1:    '✅f(4) = 7',
680: 1:    '✅f(5) = 5',
680: 1:    '✅f(6) = 10',
680: 1:    '✅f(7) = 11',
680: 1:    '✅f(8) = 13',
680: 1:    '✅f(9) = 8',
680: 1:    '✅f(10) = 7',
680: 1:    '✅f(11) = 14',
680: 1:    '✅f(12) = 19',
680: 1:    '✅f(13) = 20',
680: 1:    '✅f(14) = 22',
680: 1:    '✅f(15) = 26',
680: 1:    '❌f(16) = ??? != 25'
680: 1:  ],
680: 1:  'level': 25,
680: 1:  'nextQuestion': '16',
680: 1:  'questions': [
680: 1:    '1',
680: 1:    '2',
680: 1:    '3',
680: 1:    '4',
680: 1:    '5',
680: 1:    '6',
680: 1:    '7',
680: 1:    '8',
680: 1:    '9',
680: 1:    '10',
680: 1:    '11',
680: 1:    '12',
680: 1:    '13',
680: 1:    '14',
680: 1:    '15',
680: 1:    '16'
680: 1:  ]
680: 1:}
680: 1:Scores: 57323
680: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25']')
680: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
681: 1:BoardData {
681: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
681: 1:  'expectedAnswer': '14',
681: 1:  'history': [
681: 1:    {
681: 1:      'answer': '2',
681: 1:      'question': '1',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '4',
681: 1:      'question': '2',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '8',
681: 1:      'question': '3',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '7',
681: 1:      'question': '4',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '5',
681: 1:      'question': '5',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '10',
681: 1:      'question': '6',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '11',
681: 1:      'question': '7',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '13',
681: 1:      'question': '8',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '8',
681: 1:      'question': '9',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '7',
681: 1:      'question': '10',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '14',
681: 1:      'question': '11',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '19',
681: 1:      'question': '12',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '20',
681: 1:      'question': '13',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '22',
681: 1:      'question': '14',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '26',
681: 1:      'question': '15',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '25',
681: 1:      'question': '16',
681: 1:      'valid': true
681: 1:    }
681: 1:  ],
681: 1:  'info': [
681: 1:    '✅f(1) = 2',
681: 1:    '✅f(2) = 4',
681: 1:    '✅f(3) = 8',
681: 1:    '✅f(4) = 7',
681: 1:    '✅f(5) = 5',
681: 1:    '✅f(6) = 10',
681: 1:    '✅f(7) = 11',
681: 1:    '✅f(8) = 13',
681: 1:    '✅f(9) = 8',
681: 1:    '✅f(10) = 7',
681: 1:    '✅f(11) = 14',
681: 1:    '✅f(12) = 19',
681: 1:    '✅f(13) = 20',
681: 1:    '✅f(14) = 22',
681: 1:    '✅f(15) = 26',
681: 1:    '✅f(16) = 25',
681: 1:    '❌f(17) = ??? != 14'
681: 1:  ],
681: 1:  'level': 25,
681: 1:  'nextQuestion': '17',
681: 1:  'questions': [
681: 1:    '1',
681: 1:    '2',
681: 1:    '3',
681: 1:    '4',
681: 1:    '5',
681: 1:    '6',
681: 1:    '7',
681: 1:    '8',
681: 1:    '9',
681: 1:    '10',
681: 1:    '11',
681: 1:    '12',
681: 1:    '13',
681: 1:    '14',
681: 1:    '15',
681: 1:    '16',
681: 1:    '17'
681: 1:  ]
681: 1:}
681: 1:Scores: 57337
681: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25', '14']')
681: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
682: 1:BoardData {
682: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
682: 1:  'expectedAnswer': '19',
682: 1:  'history': [
682: 1:    {
682: 1:      'answer': '2',
682: 1:      'question': '1',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '4',
682: 1:      'question': '2',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '8',
682: 1:      'question': '3',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '7',
682: 1:      'question': '4',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '5',
682: 1:      'question': '5',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '10',
682: 1:      'question': '6',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '11',
682: 1:      'question': '7',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '13',
682: 1:      'question': '8',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '8',
682: 1:      'question': '9',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '7',
682: 1:      'question': '10',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '14',
682: 1:      'question': '11',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '19',
682: 1:      'question': '12',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '20',
682: 1:      'question': '13',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '22',
682: 1:      'question': '14',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '26',
682: 1:      'question': '15',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '25',
682: 1:      'question': '16',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '14',
682: 1:      'question': '17',
682: 1:      'valid': true
682: 1:    }
682: 1:  ],
682: 1:  'info': [
682: 1:    '✅f(1) = 2',
682: 1:    '✅f(2) = 4',
682: 1:    '✅f(3) = 8',
682: 1:    '✅f(4) = 7',
682: 1:    '✅f(5) = 5',
682: 1:    '✅f(6) = 10',
682: 1:    '✅f(7) = 11',
682: 1:    '✅f(8) = 13',
682: 1:    '✅f(9) = 8',
682: 1:    '✅f(10) = 7',
682: 1:    '✅f(11) = 14',
682: 1:    '✅f(12) = 19',
682: 1:    '✅f(13) = 20',
682: 1:    '✅f(14) = 22',
682: 1:    '✅f(15) = 26',
682: 1:    '✅f(16) = 25',
682: 1:    '✅f(17) = 14',
682: 1:    '❌f(18) = ??? != 19'
682: 1:  ],
682: 1:  'level': 25,
682: 1:  'nextQuestion': '18',
682: 1:  'questions': [
682: 1:    '1',
682: 1:    '2',
682: 1:    '3',
682: 1:    '4',
682: 1:    '5',
682: 1:    '6',
682: 1:    '7',
682: 1:    '8',
682: 1:    '9',
682: 1:    '10',
682: 1:    '11',
682: 1:    '12',
682: 1:    '13',
682: 1:    '14',
682: 1:    '15',
682: 1:    '16',
682: 1:    '17',
682: 1:    '18'
682: 1:  ]
682: 1:}
682: 1:Scores: 57351
682: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25', '14', '19']')
682: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
683: 1:BoardData {
683: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
683: 1:  'expectedAnswer': '29',
683: 1:  'history': [
683: 1:    {
683: 1:      'answer': '2',
683: 1:      'question': '1',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '4',
683: 1:      'question': '2',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '8',
683: 1:      'question': '3',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '7',
683: 1:      'question': '4',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '5',
683: 1:      'question': '5',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '10',
683: 1:      'question': '6',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '11',
683: 1:      'question': '7',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '13',
683: 1:      'question': '8',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '8',
683: 1:      'question': '9',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '7',
683: 1:      'question': '10',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '14',
683: 1:      'question': '11',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '19',
683: 1:      'question': '12',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '20',
683: 1:      'question': '13',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '22',
683: 1:      'question': '14',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '26',
683: 1:      'question': '15',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '25',
683: 1:      'question': '16',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '14',
683: 1:      'question': '17',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '19',
683: 1:      'question': '18',
683: 1:      'valid': true
683: 1:    }
683: 1:  ],
683: 1:  'info': [
683: 1:    '✅f(1) = 2',
683: 1:    '✅f(2) = 4',
683: 1:    '✅f(3) = 8',
683: 1:    '✅f(4) = 7',
683: 1:    '✅f(5) = 5',
683: 1:    '✅f(6) = 10',
683: 1:    '✅f(7) = 11',
683: 1:    '✅f(8) = 13',
683: 1:    '✅f(9) = 8',
683: 1:    '✅f(10) = 7',
683: 1:    '✅f(11) = 14',
683: 1:    '✅f(12) = 19',
683: 1:    '✅f(13) = 20',
683: 1:    '✅f(14) = 22',
683: 1:    '✅f(15) = 26',
683: 1:    '✅f(16) = 25',
683: 1:    '✅f(17) = 14',
683: 1:    '✅f(18) = 19',
683: 1:    '❌f(19) = ??? != 29'
683: 1:  ],
683: 1:  'level': 25,
683: 1:  'nextQuestion': '19',
683: 1:  'questions': [
683: 1:    '1',
683: 1:    '2',
683: 1:    '3',
683: 1:    '4',
683: 1:    '5',
683: 1:    '6',
683: 1:    '7',
683: 1:    '8',
683: 1:    '9',
683: 1:    '10',
683: 1:    '11',
683: 1:    '12',
683: 1:    '13',
683: 1:    '14',
683: 1:    '15',
683: 1:    '16',
683: 1:    '17',
683: 1:    '18',
683: 1:    '19'
683: 1:  ]
683: 1:}
683: 1:Scores: 57365
683: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25', '14', '19', '29']')
683: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
684: 1:BoardData {
684: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
684: 1:  'expectedAnswer': '31',
684: 1:  'history': [
684: 1:    {
684: 1:      'answer': '2',
684: 1:      'question': '1',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '4',
684: 1:      'question': '2',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '8',
684: 1:      'question': '3',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '7',
684: 1:      'question': '4',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '5',
684: 1:      'question': '5',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '10',
684: 1:      'question': '6',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '11',
684: 1:      'question': '7',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '13',
684: 1:      'question': '8',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '8',
684: 1:      'question': '9',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '7',
684: 1:      'question': '10',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '14',
684: 1:      'question': '11',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '19',
684: 1:      'question': '12',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '20',
684: 1:      'question': '13',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '22',
684: 1:      'question': '14',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '26',
684: 1:      'question': '15',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '25',
684: 1:      'question': '16',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '14',
684: 1:      'question': '17',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '19',
684: 1:      'question': '18',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '29',
684: 1:      'question': '19',
684: 1:      'valid': true
684: 1:    }
684: 1:  ],
684: 1:  'info': [
684: 1:    '✅f(1) = 2',
684: 1:    '✅f(2) = 4',
684: 1:    '✅f(3) = 8',
684: 1:    '✅f(4) = 7',
684: 1:    '✅f(5) = 5',
684: 1:    '✅f(6) = 10',
684: 1:    '✅f(7) = 11',
684: 1:    '✅f(8) = 13',
684: 1:    '✅f(9) = 8',
684: 1:    '✅f(10) = 7',
684: 1:    '✅f(11) = 14',
684: 1:    '✅f(12) = 19',
684: 1:    '✅f(13) = 20',
684: 1:    '✅f(14) = 22',
684: 1:    '✅f(15) = 26',
684: 1:    '✅f(16) = 25',
684: 1:    '✅f(17) = 14',
684: 1:    '✅f(18) = 19',
684: 1:    '✅f(19) = 29',
684: 1:    '❌f(20) = ??? != 31'
684: 1:  ],
684: 1:  'level': 25,
684: 1:  'nextQuestion': '20',
684: 1:  'questions': [
684: 1:    '1',
684: 1:    '2',
684: 1:    '3',
684: 1:    '4',
684: 1:    '5',
684: 1:    '6',
684: 1:    '7',
684: 1:    '8',
684: 1:    '9',
684: 1:    '10',
684: 1:    '11',
684: 1:    '12',
684: 1:    '13',
684: 1:    '14',
684: 1:    '15',
684: 1:    '16',
684: 1:    '17',
684: 1:    '18',
684: 1:    '19',
684: 1:    '20'
684: 1:  ]
684: 1:}
684: 1:Scores: 57379
684: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25', '14', '19', '29', '31']')
684: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
685: 1:BoardData {
685: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
685: 1:  'expectedAnswer': '26',
685: 1:  'history': [
685: 1:    {
685: 1:      'answer': '2',
685: 1:      'question': '1',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '4',
685: 1:      'question': '2',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '8',
685: 1:      'question': '3',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '7',
685: 1:      'question': '4',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '5',
685: 1:      'question': '5',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '10',
685: 1:      'question': '6',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '11',
685: 1:      'question': '7',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '13',
685: 1:      'question': '8',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '8',
685: 1:      'question': '9',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '7',
685: 1:      'question': '10',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '14',
685: 1:      'question': '11',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '19',
685: 1:      'question': '12',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '20',
685: 1:      'question': '13',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '22',
685: 1:      'question': '14',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '26',
685: 1:      'question': '15',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '25',
685: 1:      'question': '16',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '14',
685: 1:      'question': '17',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '19',
685: 1:      'question': '18',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '29',
685: 1:      'question': '19',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '31',
685: 1:      'question': '20',
685: 1:      'valid': true
685: 1:    }
685: 1:  ],
685: 1:  'info': [
685: 1:    '✅f(1) = 2',
685: 1:    '✅f(2) = 4',
685: 1:    '✅f(3) = 8',
685: 1:    '✅f(4) = 7',
685: 1:    '✅f(5) = 5',
685: 1:    '✅f(6) = 10',
685: 1:    '✅f(7) = 11',
685: 1:    '✅f(8) = 13',
685: 1:    '✅f(9) = 8',
685: 1:    '✅f(10) = 7',
685: 1:    '✅f(11) = 14',
685: 1:    '✅f(12) = 19',
685: 1:    '✅f(13) = 20',
685: 1:    '✅f(14) = 22',
685: 1:    '✅f(15) = 26',
685: 1:    '✅f(16) = 25',
685: 1:    '✅f(17) = 14',
685: 1:    '✅f(18) = 19',
685: 1:    '✅f(19) = 29',
685: 1:    '✅f(20) = 31',
685: 1:    '❌f(21) = ??? != 26'
685: 1:  ],
685: 1:  'level': 25,
685: 1:  'nextQuestion': '21',
685: 1:  'questions': [
685: 1:    '1',
685: 1:    '2',
685: 1:    '3',
685: 1:    '4',
685: 1:    '5',
685: 1:    '6',
685: 1:    '7',
685: 1:    '8',
685: 1:    '9',
685: 1:    '10',
685: 1:    '11',
685: 1:    '12',
685: 1:    '13',
685: 1:    '14',
685: 1:    '15',
685: 1:    '16',
685: 1:    '17',
685: 1:    '18',
685: 1:    '19',
685: 1:    '20',
685: 1:    '21'
685: 1:  ]
685: 1:}
685: 1:Scores: 57393
685: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25', '14', '19', '29', '31', '26']')
685: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
686: 1:BoardData {
686: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
686: 1:  'expectedAnswer': '25',
686: 1:  'history': [
686: 1:    {
686: 1:      'answer': '2',
686: 1:      'question': '1',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '4',
686: 1:      'question': '2',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '8',
686: 1:      'question': '3',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '7',
686: 1:      'question': '4',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '5',
686: 1:      'question': '5',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '10',
686: 1:      'question': '6',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '11',
686: 1:      'question': '7',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '13',
686: 1:      'question': '8',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '8',
686: 1:      'question': '9',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '7',
686: 1:      'question': '10',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '14',
686: 1:      'question': '11',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '19',
686: 1:      'question': '12',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '20',
686: 1:      'question': '13',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '22',
686: 1:      'question': '14',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '26',
686: 1:      'question': '15',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '25',
686: 1:      'question': '16',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '14',
686: 1:      'question': '17',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '19',
686: 1:      'question': '18',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '29',
686: 1:      'question': '19',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '31',
686: 1:      'question': '20',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '26',
686: 1:      'question': '21',
686: 1:      'valid': true
686: 1:    }
686: 1:  ],
686: 1:  'info': [
686: 1:    '✅f(1) = 2',
686: 1:    '✅f(2) = 4',
686: 1:    '✅f(3) = 8',
686: 1:    '✅f(4) = 7',
686: 1:    '✅f(5) = 5',
686: 1:    '✅f(6) = 10',
686: 1:    '✅f(7) = 11',
686: 1:    '✅f(8) = 13',
686: 1:    '✅f(9) = 8',
686: 1:    '✅f(10) = 7',
686: 1:    '✅f(11) = 14',
686: 1:    '✅f(12) = 19',
686: 1:    '✅f(13) = 20',
686: 1:    '✅f(14) = 22',
686: 1:    '✅f(15) = 26',
686: 1:    '✅f(16) = 25',
686: 1:    '✅f(17) = 14',
686: 1:    '✅f(18) = 19',
686: 1:    '✅f(19) = 29',
686: 1:    '✅f(20) = 31',
686: 1:    '✅f(21) = 26',
686: 1:    '❌f(22) = ??? != 25'
686: 1:  ],
686: 1:  'level': 25,
686: 1:  'nextQuestion': '22',
686: 1:  'questions': [
686: 1:    '1',
686: 1:    '2',
686: 1:    '3',
686: 1:    '4',
686: 1:    '5',
686: 1:    '6',
686: 1:    '7',
686: 1:    '8',
686: 1:    '9',
686: 1:    '10',
686: 1:    '11',
686: 1:    '12',
686: 1:    '13',
686: 1:    '14',
686: 1:    '15',
686: 1:    '16',
686: 1:    '17',
686: 1:    '18',
686: 1:    '19',
686: 1:    '20',
686: 1:    '21',
686: 1:    '22'
686: 1:  ]
686: 1:}
686: 1:Scores: 57407
686: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25', '14', '19', '29', '31', '26', '25']')
686: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
687: 1:BoardData {
687: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
687: 1:  'expectedAnswer': '41',
687: 1:  'history': [
687: 1:    {
687: 1:      'answer': '2',
687: 1:      'question': '1',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '4',
687: 1:      'question': '2',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '8',
687: 1:      'question': '3',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '7',
687: 1:      'question': '4',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '5',
687: 1:      'question': '5',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '10',
687: 1:      'question': '6',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '11',
687: 1:      'question': '7',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '13',
687: 1:      'question': '8',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '8',
687: 1:      'question': '9',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '7',
687: 1:      'question': '10',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '14',
687: 1:      'question': '11',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '19',
687: 1:      'question': '12',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '20',
687: 1:      'question': '13',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '22',
687: 1:      'question': '14',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '26',
687: 1:      'question': '15',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '25',
687: 1:      'question': '16',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '14',
687: 1:      'question': '17',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '19',
687: 1:      'question': '18',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '29',
687: 1:      'question': '19',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '31',
687: 1:      'question': '20',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '26',
687: 1:      'question': '21',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '25',
687: 1:      'question': '22',
687: 1:      'valid': true
687: 1:    }
687: 1:  ],
687: 1:  'info': [
687: 1:    '✅f(1) = 2',
687: 1:    '✅f(2) = 4',
687: 1:    '✅f(3) = 8',
687: 1:    '✅f(4) = 7',
687: 1:    '✅f(5) = 5',
687: 1:    '✅f(6) = 10',
687: 1:    '✅f(7) = 11',
687: 1:    '✅f(8) = 13',
687: 1:    '✅f(9) = 8',
687: 1:    '✅f(10) = 7',
687: 1:    '✅f(11) = 14',
687: 1:    '✅f(12) = 19',
687: 1:    '✅f(13) = 20',
687: 1:    '✅f(14) = 22',
687: 1:    '✅f(15) = 26',
687: 1:    '✅f(16) = 25',
687: 1:    '✅f(17) = 14',
687: 1:    '✅f(18) = 19',
687: 1:    '✅f(19) = 29',
687: 1:    '✅f(20) = 31',
687: 1:    '✅f(21) = 26',
687: 1:    '✅f(22) = 25',
687: 1:    '❌f(23) = ??? != 41'
687: 1:  ],
687: 1:  'level': 25,
687: 1:  'nextQuestion': '23',
687: 1:  'questions': [
687: 1:    '1',
687: 1:    '2',
687: 1:    '3',
687: 1:    '4',
687: 1:    '5',
687: 1:    '6',
687: 1:    '7',
687: 1:    '8',
687: 1:    '9',
687: 1:    '10',
687: 1:    '11',
687: 1:    '12',
687: 1:    '13',
687: 1:    '14',
687: 1:    '15',
687: 1:    '16',
687: 1:    '17',
687: 1:    '18',
687: 1:    '19',
687: 1:    '20',
687: 1:    '21',
687: 1:    '22',
687: 1:    '23'
687: 1:  ]
687: 1:}
687: 1:Scores: 57421
687: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25', '14', '19', '29', '31', '26', '25', '41']')
687: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
688: 1:BoardData {
688: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
688: 1:  'expectedAnswer': '37',
688: 1:  'history': [
688: 1:    {
688: 1:      'answer': '2',
688: 1:      'question': '1',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '4',
688: 1:      'question': '2',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '8',
688: 1:      'question': '3',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '7',
688: 1:      'question': '4',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '5',
688: 1:      'question': '5',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '10',
688: 1:      'question': '6',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '11',
688: 1:      'question': '7',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '13',
688: 1:      'question': '8',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '8',
688: 1:      'question': '9',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '7',
688: 1:      'question': '10',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '14',
688: 1:      'question': '11',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '19',
688: 1:      'question': '12',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '20',
688: 1:      'question': '13',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '22',
688: 1:      'question': '14',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '26',
688: 1:      'question': '15',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '25',
688: 1:      'question': '16',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '14',
688: 1:      'question': '17',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '19',
688: 1:      'question': '18',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '29',
688: 1:      'question': '19',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '31',
688: 1:      'question': '20',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '26',
688: 1:      'question': '21',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '25',
688: 1:      'question': '22',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '41',
688: 1:      'question': '23',
688: 1:      'valid': true
688: 1:    }
688: 1:  ],
688: 1:  'info': [
688: 1:    '✅f(1) = 2',
688: 1:    '✅f(2) = 4',
688: 1:    '✅f(3) = 8',
688: 1:    '✅f(4) = 7',
688: 1:    '✅f(5) = 5',
688: 1:    '✅f(6) = 10',
688: 1:    '✅f(7) = 11',
688: 1:    '✅f(8) = 13',
688: 1:    '✅f(9) = 8',
688: 1:    '✅f(10) = 7',
688: 1:    '✅f(11) = 14',
688: 1:    '✅f(12) = 19',
688: 1:    '✅f(13) = 20',
688: 1:    '✅f(14) = 22',
688: 1:    '✅f(15) = 26',
688: 1:    '✅f(16) = 25',
688: 1:    '✅f(17) = 14',
688: 1:    '✅f(18) = 19',
688: 1:    '✅f(19) = 29',
688: 1:    '✅f(20) = 31',
688: 1:    '✅f(21) = 26',
688: 1:    '✅f(22) = 25',
688: 1:    '✅f(23) = 41',
688: 1:    '❌f(24) = ??? != 37'
688: 1:  ],
688: 1:  'level': 25,
688: 1:  'nextQuestion': '24',
688: 1:  'questions': [
688: 1:    '1',
688: 1:    '2',
688: 1:    '3',
688: 1:    '4',
688: 1:    '5',
688: 1:    '6',
688: 1:    '7',
688: 1:    '8',
688: 1:    '9',
688: 1:    '10',
688: 1:    '11',
688: 1:    '12',
688: 1:    '13',
688: 1:    '14',
688: 1:    '15',
688: 1:    '16',
688: 1:    '17',
688: 1:    '18',
688: 1:    '19',
688: 1:    '20',
688: 1:    '21',
688: 1:    '22',
688: 1:    '23',
688: 1:    '24'
688: 1:  ]
688: 1:}
688: 1:Scores: 57435
688: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25', '14', '19', '29', '31', '26', '25', '41', '37']')
688: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
689: 1:BoardData {
689: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
689: 1:  'expectedAnswer': '29',
689: 1:  'history': [
689: 1:    {
689: 1:      'answer': '2',
689: 1:      'question': '1',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '4',
689: 1:      'question': '2',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '8',
689: 1:      'question': '3',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '7',
689: 1:      'question': '4',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '5',
689: 1:      'question': '5',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '10',
689: 1:      'question': '6',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '11',
689: 1:      'question': '7',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '13',
689: 1:      'question': '8',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '8',
689: 1:      'question': '9',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '7',
689: 1:      'question': '10',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '14',
689: 1:      'question': '11',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '19',
689: 1:      'question': '12',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '20',
689: 1:      'question': '13',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '22',
689: 1:      'question': '14',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '26',
689: 1:      'question': '15',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '25',
689: 1:      'question': '16',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '14',
689: 1:      'question': '17',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '19',
689: 1:      'question': '18',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '29',
689: 1:      'question': '19',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '31',
689: 1:      'question': '20',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '26',
689: 1:      'question': '21',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '25',
689: 1:      'question': '22',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '41',
689: 1:      'question': '23',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '37',
689: 1:      'question': '24',
689: 1:      'valid': true
689: 1:    }
689: 1:  ],
689: 1:  'info': [
689: 1:    '✅f(1) = 2',
689: 1:    '✅f(2) = 4',
689: 1:    '✅f(3) = 8',
689: 1:    '✅f(4) = 7',
689: 1:    '✅f(5) = 5',
689: 1:    '✅f(6) = 10',
689: 1:    '✅f(7) = 11',
689: 1:    '✅f(8) = 13',
689: 1:    '✅f(9) = 8',
689: 1:    '✅f(10) = 7',
689: 1:    '✅f(11) = 14',
689: 1:    '✅f(12) = 19',
689: 1:    '✅f(13) = 20',
689: 1:    '✅f(14) = 22',
689: 1:    '✅f(15) = 26',
689: 1:    '✅f(16) = 25',
689: 1:    '✅f(17) = 14',
689: 1:    '✅f(18) = 19',
689: 1:    '✅f(19) = 29',
689: 1:    '✅f(20) = 31',
689: 1:    '✅f(21) = 26',
689: 1:    '✅f(22) = 25',
689: 1:    '✅f(23) = 41',
689: 1:    '✅f(24) = 37',
689: 1:    '❌f(25) = ??? != 29'
689: 1:  ],
689: 1:  'level': 25,
689: 1:  'nextQuestion': '25',
689: 1:  'questions': [
689: 1:    '1',
689: 1:    '2',
689: 1:    '3',
689: 1:    '4',
689: 1:    '5',
689: 1:    '6',
689: 1:    '7',
689: 1:    '8',
689: 1:    '9',
689: 1:    '10',
689: 1:    '11',
689: 1:    '12',
689: 1:    '13',
689: 1:    '14',
689: 1:    '15',
689: 1:    '16',
689: 1:    '17',
689: 1:    '18',
689: 1:    '19',
689: 1:    '20',
689: 1:    '21',
689: 1:    '22',
689: 1:    '23',
689: 1:    '24',
689: 1:    '25'
689: 1:  ]
689: 1:}
689: 1:Scores: 57449
689: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25', '14', '19', '29', '31', '26', '25', '41', '37', '29']')
689: 1:Fire Event: PassTest{complexity=36, testCount=25}
689: 1:Fire Event: NextAlgorithm{complexity=36, time=0}
------------------------------------------
690: 1:BoardData {
690: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
690: 1:  'history': [
690: 1:    {
690: 1:      'answer': '2',
690: 1:      'question': '1',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '4',
690: 1:      'question': '2',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '8',
690: 1:      'question': '3',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '7',
690: 1:      'question': '4',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '5',
690: 1:      'question': '5',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '10',
690: 1:      'question': '6',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '11',
690: 1:      'question': '7',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '13',
690: 1:      'question': '8',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '8',
690: 1:      'question': '9',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '7',
690: 1:      'question': '10',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '14',
690: 1:      'question': '11',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '19',
690: 1:      'question': '12',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '20',
690: 1:      'question': '13',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '22',
690: 1:      'question': '14',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '26',
690: 1:      'question': '15',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '25',
690: 1:      'question': '16',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '14',
690: 1:      'question': '17',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '19',
690: 1:      'question': '18',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '29',
690: 1:      'question': '19',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '31',
690: 1:      'question': '20',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '26',
690: 1:      'question': '21',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '25',
690: 1:      'question': '22',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '41',
690: 1:      'question': '23',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '37',
690: 1:      'question': '24',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '29',
690: 1:      'question': '25',
690: 1:      'valid': true
690: 1:    }
690: 1:  ],
690: 1:  'info': [
690: 1:    '✅f(1) = 2',
690: 1:    '✅f(2) = 4',
690: 1:    '✅f(3) = 8',
690: 1:    '✅f(4) = 7',
690: 1:    '✅f(5) = 5',
690: 1:    '✅f(6) = 10',
690: 1:    '✅f(7) = 11',
690: 1:    '✅f(8) = 13',
690: 1:    '✅f(9) = 8',
690: 1:    '✅f(10) = 7',
690: 1:    '✅f(11) = 14',
690: 1:    '✅f(12) = 19',
690: 1:    '✅f(13) = 20',
690: 1:    '✅f(14) = 22',
690: 1:    '✅f(15) = 26',
690: 1:    '✅f(16) = 25',
690: 1:    '✅f(17) = 14',
690: 1:    '✅f(18) = 19',
690: 1:    '✅f(19) = 29',
690: 1:    '✅f(20) = 31',
690: 1:    '✅f(21) = 26',
690: 1:    '✅f(22) = 25',
690: 1:    '✅f(23) = 41',
690: 1:    '✅f(24) = 37',
690: 1:    '✅f(25) = 29'
690: 1:  ],
690: 1:  'level': 25,
690: 1:  'questions': []
690: 1:}
690: 1:Scores: 62322
690: 1:Answer: message('StartNextLevel')
690: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
691: 1:BoardData {
691: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
691: 1:  'expectedAnswer': 'true',
691: 1:  'history': [],
691: 1:  'info': ['❌f(0, 1, 5) = ??? != true'],
691: 1:  'level': 26,
691: 1:  'nextQuestion': '0, 1, 5',
691: 1:  'questions': ['0, 1, 5']
691: 1:}
691: 1:Scores: 62322
691: 1:Answer: message('['true']')
691: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
692: 1:BoardData {
692: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
692: 1:  'expectedAnswer': 'true',
692: 1:  'history': [{
692: 1:    'answer': 'true',
692: 1:    'question': '0, 1, 5',
692: 1:    'valid': true
692: 1:  }],
692: 1:  'info': [
692: 1:    '✅f(0, 1, 5) = true',
692: 1:    '❌f(1, 0, 1) = ??? != true'
692: 1:  ],
692: 1:  'level': 26,
692: 1:  'nextQuestion': '1, 0, 1',
692: 1:  'questions': [
692: 1:    '0, 1, 5',
692: 1:    '1, 0, 1'
692: 1:  ]
692: 1:}
692: 1:Scores: 62329
692: 1:Answer: message('['true', 'true']')
692: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
693: 1:BoardData {
693: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
693: 1:  'expectedAnswer': 'false',
693: 1:  'history': [
693: 1:    {
693: 1:      'answer': 'true',
693: 1:      'question': '0, 1, 5',
693: 1:      'valid': true
693: 1:    },
693: 1:    {
693: 1:      'answer': 'true',
693: 1:      'question': '1, 0, 1',
693: 1:      'valid': true
693: 1:    }
693: 1:  ],
693: 1:  'info': [
693: 1:    '✅f(0, 1, 5) = true',
693: 1:    '✅f(1, 0, 1) = true',
693: 1:    '❌f(1, 0, 2) = ??? != false'
693: 1:  ],
693: 1:  'level': 26,
693: 1:  'nextQuestion': '1, 0, 2',
693: 1:  'questions': [
693: 1:    '0, 1, 5',
693: 1:    '1, 0, 1',
693: 1:    '1, 0, 2'
693: 1:  ]
693: 1:}
693: 1:Scores: 62336
693: 1:Answer: message('['true', 'true', 'false']')
693: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
694: 1:BoardData {
694: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
694: 1:  'expectedAnswer': 'true',
694: 1:  'history': [
694: 1:    {
694: 1:      'answer': 'true',
694: 1:      'question': '0, 1, 5',
694: 1:      'valid': true
694: 1:    },
694: 1:    {
694: 1:      'answer': 'true',
694: 1:      'question': '1, 0, 1',
694: 1:      'valid': true
694: 1:    },
694: 1:    {
694: 1:      'answer': 'false',
694: 1:      'question': '1, 0, 2',
694: 1:      'valid': true
694: 1:    }
694: 1:  ],
694: 1:  'info': [
694: 1:    '✅f(0, 1, 5) = true',
694: 1:    '✅f(1, 0, 1) = true',
694: 1:    '✅f(1, 0, 2) = false',
694: 1:    '❌f(3, 1, 7) = ??? != true'
694: 1:  ],
694: 1:  'level': 26,
694: 1:  'nextQuestion': '3, 1, 7',
694: 1:  'questions': [
694: 1:    '0, 1, 5',
694: 1:    '1, 0, 1',
694: 1:    '1, 0, 2',
694: 1:    '3, 1, 7'
694: 1:  ]
694: 1:}
694: 1:Scores: 62343
694: 1:Answer: message('['true', 'true', 'false', 'true']')
694: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
695: 1:BoardData {
695: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
695: 1:  'expectedAnswer': 'true',
695: 1:  'history': [
695: 1:    {
695: 1:      'answer': 'true',
695: 1:      'question': '0, 1, 5',
695: 1:      'valid': true
695: 1:    },
695: 1:    {
695: 1:      'answer': 'true',
695: 1:      'question': '1, 0, 1',
695: 1:      'valid': true
695: 1:    },
695: 1:    {
695: 1:      'answer': 'false',
695: 1:      'question': '1, 0, 2',
695: 1:      'valid': true
695: 1:    },
695: 1:    {
695: 1:      'answer': 'true',
695: 1:      'question': '3, 1, 7',
695: 1:      'valid': true
695: 1:    }
695: 1:  ],
695: 1:  'info': [
695: 1:    '✅f(0, 1, 5) = true',
695: 1:    '✅f(1, 0, 1) = true',
695: 1:    '✅f(1, 0, 2) = false',
695: 1:    '✅f(3, 1, 7) = true',
695: 1:    '❌f(4, 2, 14) = ??? != true'
695: 1:  ],
695: 1:  'level': 26,
695: 1:  'nextQuestion': '4, 2, 14',
695: 1:  'questions': [
695: 1:    '0, 1, 5',
695: 1:    '1, 0, 1',
695: 1:    '1, 0, 2',
695: 1:    '3, 1, 7',
695: 1:    '4, 2, 14'
695: 1:  ]
695: 1:}
695: 1:Scores: 62350
695: 1:Answer: message('['true', 'true', 'false', 'true', 'true']')
695: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
696: 1:BoardData {
696: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
696: 1:  'expectedAnswer': 'false',
696: 1:  'history': [
696: 1:    {
696: 1:      'answer': 'true',
696: 1:      'question': '0, 1, 5',
696: 1:      'valid': true
696: 1:    },
696: 1:    {
696: 1:      'answer': 'true',
696: 1:      'question': '1, 0, 1',
696: 1:      'valid': true
696: 1:    },
696: 1:    {
696: 1:      'answer': 'false',
696: 1:      'question': '1, 0, 2',
696: 1:      'valid': true
696: 1:    },
696: 1:    {
696: 1:      'answer': 'true',
696: 1:      'question': '3, 1, 7',
696: 1:      'valid': true
696: 1:    },
696: 1:    {
696: 1:      'answer': 'true',
696: 1:      'question': '4, 2, 14',
696: 1:      'valid': true
696: 1:    }
696: 1:  ],
696: 1:  'info': [
696: 1:    '✅f(0, 1, 5) = true',
696: 1:    '✅f(1, 0, 1) = true',
696: 1:    '✅f(1, 0, 2) = false',
696: 1:    '✅f(3, 1, 7) = true',
696: 1:    '✅f(4, 2, 14) = true',
696: 1:    '❌f(3, 2, 14) = ??? != false'
696: 1:  ],
696: 1:  'level': 26,
696: 1:  'nextQuestion': '3, 2, 14',
696: 1:  'questions': [
696: 1:    '0, 1, 5',
696: 1:    '1, 0, 1',
696: 1:    '1, 0, 2',
696: 1:    '3, 1, 7',
696: 1:    '4, 2, 14',
696: 1:    '3, 2, 14'
696: 1:  ]
696: 1:}
696: 1:Scores: 62357
696: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false']')
696: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
697: 1:BoardData {
697: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
697: 1:  'expectedAnswer': 'true',
697: 1:  'history': [
697: 1:    {
697: 1:      'answer': 'true',
697: 1:      'question': '0, 1, 5',
697: 1:      'valid': true
697: 1:    },
697: 1:    {
697: 1:      'answer': 'true',
697: 1:      'question': '1, 0, 1',
697: 1:      'valid': true
697: 1:    },
697: 1:    {
697: 1:      'answer': 'false',
697: 1:      'question': '1, 0, 2',
697: 1:      'valid': true
697: 1:    },
697: 1:    {
697: 1:      'answer': 'true',
697: 1:      'question': '3, 1, 7',
697: 1:      'valid': true
697: 1:    },
697: 1:    {
697: 1:      'answer': 'true',
697: 1:      'question': '4, 2, 14',
697: 1:      'valid': true
697: 1:    },
697: 1:    {
697: 1:      'answer': 'false',
697: 1:      'question': '3, 2, 14',
697: 1:      'valid': true
697: 1:    }
697: 1:  ],
697: 1:  'info': [
697: 1:    '✅f(0, 1, 5) = true',
697: 1:    '✅f(1, 0, 1) = true',
697: 1:    '✅f(1, 0, 2) = false',
697: 1:    '✅f(3, 1, 7) = true',
697: 1:    '✅f(4, 2, 14) = true',
697: 1:    '✅f(3, 2, 14) = false',
697: 1:    '❌f(0, 2, 5) = ??? != true'
697: 1:  ],
697: 1:  'level': 26,
697: 1:  'nextQuestion': '0, 2, 5',
697: 1:  'questions': [
697: 1:    '0, 1, 5',
697: 1:    '1, 0, 1',
697: 1:    '1, 0, 2',
697: 1:    '3, 1, 7',
697: 1:    '4, 2, 14',
697: 1:    '3, 2, 14',
697: 1:    '0, 2, 5'
697: 1:  ]
697: 1:}
697: 1:Scores: 62364
697: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true']')
697: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
698: 1:BoardData {
698: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
698: 1:  'expectedAnswer': 'true',
698: 1:  'history': [
698: 1:    {
698: 1:      'answer': 'true',
698: 1:      'question': '0, 1, 5',
698: 1:      'valid': true
698: 1:    },
698: 1:    {
698: 1:      'answer': 'true',
698: 1:      'question': '1, 0, 1',
698: 1:      'valid': true
698: 1:    },
698: 1:    {
698: 1:      'answer': 'false',
698: 1:      'question': '1, 0, 2',
698: 1:      'valid': true
698: 1:    },
698: 1:    {
698: 1:      'answer': 'true',
698: 1:      'question': '3, 1, 7',
698: 1:      'valid': true
698: 1:    },
698: 1:    {
698: 1:      'answer': 'true',
698: 1:      'question': '4, 2, 14',
698: 1:      'valid': true
698: 1:    },
698: 1:    {
698: 1:      'answer': 'false',
698: 1:      'question': '3, 2, 14',
698: 1:      'valid': true
698: 1:    },
698: 1:    {
698: 1:      'answer': 'true',
698: 1:      'question': '0, 2, 5',
698: 1:      'valid': true
698: 1:    }
698: 1:  ],
698: 1:  'info': [
698: 1:    '✅f(0, 1, 5) = true',
698: 1:    '✅f(1, 0, 1) = true',
698: 1:    '✅f(1, 0, 2) = false',
698: 1:    '✅f(3, 1, 7) = true',
698: 1:    '✅f(4, 2, 14) = true',
698: 1:    '✅f(3, 2, 14) = false',
698: 1:    '✅f(0, 2, 5) = true',
698: 1:    '❌f(3, 1, 6) = ??? != true'
698: 1:  ],
698: 1:  'level': 26,
698: 1:  'nextQuestion': '3, 1, 6',
698: 1:  'questions': [
698: 1:    '0, 1, 5',
698: 1:    '1, 0, 1',
698: 1:    '1, 0, 2',
698: 1:    '3, 1, 7',
698: 1:    '4, 2, 14',
698: 1:    '3, 2, 14',
698: 1:    '0, 2, 5',
698: 1:    '3, 1, 6'
698: 1:  ]
698: 1:}
698: 1:Scores: 62371
698: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true']')
698: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
699: 1:BoardData {
699: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
699: 1:  'expectedAnswer': 'false',
699: 1:  'history': [
699: 1:    {
699: 1:      'answer': 'true',
699: 1:      'question': '0, 1, 5',
699: 1:      'valid': true
699: 1:    },
699: 1:    {
699: 1:      'answer': 'true',
699: 1:      'question': '1, 0, 1',
699: 1:      'valid': true
699: 1:    },
699: 1:    {
699: 1:      'answer': 'false',
699: 1:      'question': '1, 0, 2',
699: 1:      'valid': true
699: 1:    },
699: 1:    {
699: 1:      'answer': 'true',
699: 1:      'question': '3, 1, 7',
699: 1:      'valid': true
699: 1:    },
699: 1:    {
699: 1:      'answer': 'true',
699: 1:      'question': '4, 2, 14',
699: 1:      'valid': true
699: 1:    },
699: 1:    {
699: 1:      'answer': 'false',
699: 1:      'question': '3, 2, 14',
699: 1:      'valid': true
699: 1:    },
699: 1:    {
699: 1:      'answer': 'true',
699: 1:      'question': '0, 2, 5',
699: 1:      'valid': true
699: 1:    },
699: 1:    {
699: 1:      'answer': 'true',
699: 1:      'question': '3, 1, 6',
699: 1:      'valid': true
699: 1:    }
699: 1:  ],
699: 1:  'info': [
699: 1:    '✅f(0, 1, 5) = true',
699: 1:    '✅f(1, 0, 1) = true',
699: 1:    '✅f(1, 0, 2) = false',
699: 1:    '✅f(3, 1, 7) = true',
699: 1:    '✅f(4, 2, 14) = true',
699: 1:    '✅f(3, 2, 14) = false',
699: 1:    '✅f(0, 2, 5) = true',
699: 1:    '✅f(3, 1, 6) = true',
699: 1:    '❌f(3, 1, 9) = ??? != false'
699: 1:  ],
699: 1:  'level': 26,
699: 1:  'nextQuestion': '3, 1, 9',
699: 1:  'questions': [
699: 1:    '0, 1, 5',
699: 1:    '1, 0, 1',
699: 1:    '1, 0, 2',
699: 1:    '3, 1, 7',
699: 1:    '4, 2, 14',
699: 1:    '3, 2, 14',
699: 1:    '0, 2, 5',
699: 1:    '3, 1, 6',
699: 1:    '3, 1, 9'
699: 1:  ]
699: 1:}
699: 1:Scores: 62378
699: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false']')
699: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
700: 1:BoardData {
700: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
700: 1:  'expectedAnswer': 'false',
700: 1:  'history': [
700: 1:    {
700: 1:      'answer': 'true',
700: 1:      'question': '0, 1, 5',
700: 1:      'valid': true
700: 1:    },
700: 1:    {
700: 1:      'answer': 'true',
700: 1:      'question': '1, 0, 1',
700: 1:      'valid': true
700: 1:    },
700: 1:    {
700: 1:      'answer': 'false',
700: 1:      'question': '1, 0, 2',
700: 1:      'valid': true
700: 1:    },
700: 1:    {
700: 1:      'answer': 'true',
700: 1:      'question': '3, 1, 7',
700: 1:      'valid': true
700: 1:    },
700: 1:    {
700: 1:      'answer': 'true',
700: 1:      'question': '4, 2, 14',
700: 1:      'valid': true
700: 1:    },
700: 1:    {
700: 1:      'answer': 'false',
700: 1:      'question': '3, 2, 14',
700: 1:      'valid': true
700: 1:    },
700: 1:    {
700: 1:      'answer': 'true',
700: 1:      'question': '0, 2, 5',
700: 1:      'valid': true
700: 1:    },
700: 1:    {
700: 1:      'answer': 'true',
700: 1:      'question': '3, 1, 6',
700: 1:      'valid': true
700: 1:    },
700: 1:    {
700: 1:      'answer': 'false',
700: 1:      'question': '3, 1, 9',
700: 1:      'valid': true
700: 1:    }
700: 1:  ],
700: 1:  'info': [
700: 1:    '✅f(0, 1, 5) = true',
700: 1:    '✅f(1, 0, 1) = true',
700: 1:    '✅f(1, 0, 2) = false',
700: 1:    '✅f(3, 1, 7) = true',
700: 1:    '✅f(4, 2, 14) = true',
700: 1:    '✅f(3, 2, 14) = false',
700: 1:    '✅f(0, 2, 5) = true',
700: 1:    '✅f(3, 1, 6) = true',
700: 1:    '✅f(3, 1, 9) = false',
700: 1:    '❌f(3, 2, 9) = ??? != false'
700: 1:  ],
700: 1:  'level': 26,
700: 1:  'nextQuestion': '3, 2, 9',
700: 1:  'questions': [
700: 1:    '0, 1, 5',
700: 1:    '1, 0, 1',
700: 1:    '1, 0, 2',
700: 1:    '3, 1, 7',
700: 1:    '4, 2, 14',
700: 1:    '3, 2, 14',
700: 1:    '0, 2, 5',
700: 1:    '3, 1, 6',
700: 1:    '3, 1, 9',
700: 1:    '3, 2, 9'
700: 1:  ]
700: 1:}
700: 1:Scores: 62385
700: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false']')
700: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
701: 1:BoardData {
701: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
701: 1:  'expectedAnswer': 'true',
701: 1:  'history': [
701: 1:    {
701: 1:      'answer': 'true',
701: 1:      'question': '0, 1, 5',
701: 1:      'valid': true
701: 1:    },
701: 1:    {
701: 1:      'answer': 'true',
701: 1:      'question': '1, 0, 1',
701: 1:      'valid': true
701: 1:    },
701: 1:    {
701: 1:      'answer': 'false',
701: 1:      'question': '1, 0, 2',
701: 1:      'valid': true
701: 1:    },
701: 1:    {
701: 1:      'answer': 'true',
701: 1:      'question': '3, 1, 7',
701: 1:      'valid': true
701: 1:    },
701: 1:    {
701: 1:      'answer': 'true',
701: 1:      'question': '4, 2, 14',
701: 1:      'valid': true
701: 1:    },
701: 1:    {
701: 1:      'answer': 'false',
701: 1:      'question': '3, 2, 14',
701: 1:      'valid': true
701: 1:    },
701: 1:    {
701: 1:      'answer': 'true',
701: 1:      'question': '0, 2, 5',
701: 1:      'valid': true
701: 1:    },
701: 1:    {
701: 1:      'answer': 'true',
701: 1:      'question': '3, 1, 6',
701: 1:      'valid': true
701: 1:    },
701: 1:    {
701: 1:      'answer': 'false',
701: 1:      'question': '3, 1, 9',
701: 1:      'valid': true
701: 1:    },
701: 1:    {
701: 1:      'answer': 'false',
701: 1:      'question': '3, 2, 9',
701: 1:      'valid': true
701: 1:    }
701: 1:  ],
701: 1:  'info': [
701: 1:    '✅f(0, 1, 5) = true',
701: 1:    '✅f(1, 0, 1) = true',
701: 1:    '✅f(1, 0, 2) = false',
701: 1:    '✅f(3, 1, 7) = true',
701: 1:    '✅f(4, 2, 14) = true',
701: 1:    '✅f(3, 2, 14) = false',
701: 1:    '✅f(0, 2, 5) = true',
701: 1:    '✅f(3, 1, 6) = true',
701: 1:    '✅f(3, 1, 9) = false',
701: 1:    '✅f(3, 2, 9) = false',
701: 1:    '❌f(10, 10, 0) = ??? != true'
701: 1:  ],
701: 1:  'level': 26,
701: 1:  'nextQuestion': '10, 10, 0',
701: 1:  'questions': [
701: 1:    '0, 1, 5',
701: 1:    '1, 0, 1',
701: 1:    '1, 0, 2',
701: 1:    '3, 1, 7',
701: 1:    '4, 2, 14',
701: 1:    '3, 2, 14',
701: 1:    '0, 2, 5',
701: 1:    '3, 1, 6',
701: 1:    '3, 1, 9',
701: 1:    '3, 2, 9',
701: 1:    '10, 10, 0'
701: 1:  ]
701: 1:}
701: 1:Scores: 62392
701: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true']')
701: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
702: 1:BoardData {
702: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
702: 1:  'expectedAnswer': 'false',
702: 1:  'history': [
702: 1:    {
702: 1:      'answer': 'true',
702: 1:      'question': '0, 1, 5',
702: 1:      'valid': true
702: 1:    },
702: 1:    {
702: 1:      'answer': 'true',
702: 1:      'question': '1, 0, 1',
702: 1:      'valid': true
702: 1:    },
702: 1:    {
702: 1:      'answer': 'false',
702: 1:      'question': '1, 0, 2',
702: 1:      'valid': true
702: 1:    },
702: 1:    {
702: 1:      'answer': 'true',
702: 1:      'question': '3, 1, 7',
702: 1:      'valid': true
702: 1:    },
702: 1:    {
702: 1:      'answer': 'true',
702: 1:      'question': '4, 2, 14',
702: 1:      'valid': true
702: 1:    },
702: 1:    {
702: 1:      'answer': 'false',
702: 1:      'question': '3, 2, 14',
702: 1:      'valid': true
702: 1:    },
702: 1:    {
702: 1:      'answer': 'true',
702: 1:      'question': '0, 2, 5',
702: 1:      'valid': true
702: 1:    },
702: 1:    {
702: 1:      'answer': 'true',
702: 1:      'question': '3, 1, 6',
702: 1:      'valid': true
702: 1:    },
702: 1:    {
702: 1:      'answer': 'false',
702: 1:      'question': '3, 1, 9',
702: 1:      'valid': true
702: 1:    },
702: 1:    {
702: 1:      'answer': 'false',
702: 1:      'question': '3, 2, 9',
702: 1:      'valid': true
702: 1:    },
702: 1:    {
702: 1:      'answer': 'true',
702: 1:      'question': '10, 10, 0',
702: 1:      'valid': true
702: 1:    }
702: 1:  ],
702: 1:  'info': [
702: 1:    '✅f(0, 1, 5) = true',
702: 1:    '✅f(1, 0, 1) = true',
702: 1:    '✅f(1, 0, 2) = false',
702: 1:    '✅f(3, 1, 7) = true',
702: 1:    '✅f(4, 2, 14) = true',
702: 1:    '✅f(3, 2, 14) = false',
702: 1:    '✅f(0, 2, 5) = true',
702: 1:    '✅f(3, 1, 6) = true',
702: 1:    '✅f(3, 1, 9) = false',
702: 1:    '✅f(3, 2, 9) = false',
702: 1:    '✅f(10, 10, 0) = true',
702: 1:    '❌f(0, 0, 1) = ??? != false'
702: 1:  ],
702: 1:  'level': 26,
702: 1:  'nextQuestion': '0, 0, 1',
702: 1:  'questions': [
702: 1:    '0, 1, 5',
702: 1:    '1, 0, 1',
702: 1:    '1, 0, 2',
702: 1:    '3, 1, 7',
702: 1:    '4, 2, 14',
702: 1:    '3, 2, 14',
702: 1:    '0, 2, 5',
702: 1:    '3, 1, 6',
702: 1:    '3, 1, 9',
702: 1:    '3, 2, 9',
702: 1:    '10, 10, 0',
702: 1:    '0, 0, 1'
702: 1:  ]
702: 1:}
702: 1:Scores: 62399
702: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false']')
702: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
703: 1:BoardData {
703: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
703: 1:  'expectedAnswer': 'false',
703: 1:  'history': [
703: 1:    {
703: 1:      'answer': 'true',
703: 1:      'question': '0, 1, 5',
703: 1:      'valid': true
703: 1:    },
703: 1:    {
703: 1:      'answer': 'true',
703: 1:      'question': '1, 0, 1',
703: 1:      'valid': true
703: 1:    },
703: 1:    {
703: 1:      'answer': 'false',
703: 1:      'question': '1, 0, 2',
703: 1:      'valid': true
703: 1:    },
703: 1:    {
703: 1:      'answer': 'true',
703: 1:      'question': '3, 1, 7',
703: 1:      'valid': true
703: 1:    },
703: 1:    {
703: 1:      'answer': 'true',
703: 1:      'question': '4, 2, 14',
703: 1:      'valid': true
703: 1:    },
703: 1:    {
703: 1:      'answer': 'false',
703: 1:      'question': '3, 2, 14',
703: 1:      'valid': true
703: 1:    },
703: 1:    {
703: 1:      'answer': 'true',
703: 1:      'question': '0, 2, 5',
703: 1:      'valid': true
703: 1:    },
703: 1:    {
703: 1:      'answer': 'true',
703: 1:      'question': '3, 1, 6',
703: 1:      'valid': true
703: 1:    },
703: 1:    {
703: 1:      'answer': 'false',
703: 1:      'question': '3, 1, 9',
703: 1:      'valid': true
703: 1:    },
703: 1:    {
703: 1:      'answer': 'false',
703: 1:      'question': '3, 2, 9',
703: 1:      'valid': true
703: 1:    },
703: 1:    {
703: 1:      'answer': 'true',
703: 1:      'question': '10, 10, 0',
703: 1:      'valid': true
703: 1:    },
703: 1:    {
703: 1:      'answer': 'false',
703: 1:      'question': '0, 0, 1',
703: 1:      'valid': true
703: 1:    }
703: 1:  ],
703: 1:  'info': [
703: 1:    '✅f(0, 1, 5) = true',
703: 1:    '✅f(1, 0, 1) = true',
703: 1:    '✅f(1, 0, 2) = false',
703: 1:    '✅f(3, 1, 7) = true',
703: 1:    '✅f(4, 2, 14) = true',
703: 1:    '✅f(3, 2, 14) = false',
703: 1:    '✅f(0, 2, 5) = true',
703: 1:    '✅f(3, 1, 6) = true',
703: 1:    '✅f(3, 1, 9) = false',
703: 1:    '✅f(3, 2, 9) = false',
703: 1:    '✅f(10, 10, 0) = true',
703: 1:    '✅f(0, 0, 1) = false',
703: 1:    '❌f(0, 1, 1) = ??? != false'
703: 1:  ],
703: 1:  'level': 26,
703: 1:  'nextQuestion': '0, 1, 1',
703: 1:  'questions': [
703: 1:    '0, 1, 5',
703: 1:    '1, 0, 1',
703: 1:    '1, 0, 2',
703: 1:    '3, 1, 7',
703: 1:    '4, 2, 14',
703: 1:    '3, 2, 14',
703: 1:    '0, 2, 5',
703: 1:    '3, 1, 6',
703: 1:    '3, 1, 9',
703: 1:    '3, 2, 9',
703: 1:    '10, 10, 0',
703: 1:    '0, 0, 1',
703: 1:    '0, 1, 1'
703: 1:  ]
703: 1:}
703: 1:Scores: 62406
703: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false']')
703: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
704: 1:BoardData {
704: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
704: 1:  'expectedAnswer': 'false',
704: 1:  'history': [
704: 1:    {
704: 1:      'answer': 'true',
704: 1:      'question': '0, 1, 5',
704: 1:      'valid': true
704: 1:    },
704: 1:    {
704: 1:      'answer': 'true',
704: 1:      'question': '1, 0, 1',
704: 1:      'valid': true
704: 1:    },
704: 1:    {
704: 1:      'answer': 'false',
704: 1:      'question': '1, 0, 2',
704: 1:      'valid': true
704: 1:    },
704: 1:    {
704: 1:      'answer': 'true',
704: 1:      'question': '3, 1, 7',
704: 1:      'valid': true
704: 1:    },
704: 1:    {
704: 1:      'answer': 'true',
704: 1:      'question': '4, 2, 14',
704: 1:      'valid': true
704: 1:    },
704: 1:    {
704: 1:      'answer': 'false',
704: 1:      'question': '3, 2, 14',
704: 1:      'valid': true
704: 1:    },
704: 1:    {
704: 1:      'answer': 'true',
704: 1:      'question': '0, 2, 5',
704: 1:      'valid': true
704: 1:    },
704: 1:    {
704: 1:      'answer': 'true',
704: 1:      'question': '3, 1, 6',
704: 1:      'valid': true
704: 1:    },
704: 1:    {
704: 1:      'answer': 'false',
704: 1:      'question': '3, 1, 9',
704: 1:      'valid': true
704: 1:    },
704: 1:    {
704: 1:      'answer': 'false',
704: 1:      'question': '3, 2, 9',
704: 1:      'valid': true
704: 1:    },
704: 1:    {
704: 1:      'answer': 'true',
704: 1:      'question': '10, 10, 0',
704: 1:      'valid': true
704: 1:    },
704: 1:    {
704: 1:      'answer': 'false',
704: 1:      'question': '0, 0, 1',
704: 1:      'valid': true
704: 1:    },
704: 1:    {
704: 1:      'answer': 'false',
704: 1:      'question': '0, 1, 1',
704: 1:      'valid': true
704: 1:    }
704: 1:  ],
704: 1:  'info': [
704: 1:    '✅f(0, 1, 5) = true',
704: 1:    '✅f(1, 0, 1) = true',
704: 1:    '✅f(1, 0, 2) = false',
704: 1:    '✅f(3, 1, 7) = true',
704: 1:    '✅f(4, 2, 14) = true',
704: 1:    '✅f(3, 2, 14) = false',
704: 1:    '✅f(0, 2, 5) = true',
704: 1:    '✅f(3, 1, 6) = true',
704: 1:    '✅f(3, 1, 9) = false',
704: 1:    '✅f(3, 2, 9) = false',
704: 1:    '✅f(10, 10, 0) = true',
704: 1:    '✅f(0, 0, 1) = false',
704: 1:    '✅f(0, 1, 1) = false',
704: 1:    '❌f(0, 0, 2) = ??? != false'
704: 1:  ],
704: 1:  'level': 26,
704: 1:  'nextQuestion': '0, 0, 2',
704: 1:  'questions': [
704: 1:    '0, 1, 5',
704: 1:    '1, 0, 1',
704: 1:    '1, 0, 2',
704: 1:    '3, 1, 7',
704: 1:    '4, 2, 14',
704: 1:    '3, 2, 14',
704: 1:    '0, 2, 5',
704: 1:    '3, 1, 6',
704: 1:    '3, 1, 9',
704: 1:    '3, 2, 9',
704: 1:    '10, 10, 0',
704: 1:    '0, 0, 1',
704: 1:    '0, 1, 1',
704: 1:    '0, 0, 2'
704: 1:  ]
704: 1:}
704: 1:Scores: 62413
704: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false']')
704: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
705: 1:BoardData {
705: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
705: 1:  'expectedAnswer': 'true',
705: 1:  'history': [
705: 1:    {
705: 1:      'answer': 'true',
705: 1:      'question': '0, 1, 5',
705: 1:      'valid': true
705: 1:    },
705: 1:    {
705: 1:      'answer': 'true',
705: 1:      'question': '1, 0, 1',
705: 1:      'valid': true
705: 1:    },
705: 1:    {
705: 1:      'answer': 'false',
705: 1:      'question': '1, 0, 2',
705: 1:      'valid': true
705: 1:    },
705: 1:    {
705: 1:      'answer': 'true',
705: 1:      'question': '3, 1, 7',
705: 1:      'valid': true
705: 1:    },
705: 1:    {
705: 1:      'answer': 'true',
705: 1:      'question': '4, 2, 14',
705: 1:      'valid': true
705: 1:    },
705: 1:    {
705: 1:      'answer': 'false',
705: 1:      'question': '3, 2, 14',
705: 1:      'valid': true
705: 1:    },
705: 1:    {
705: 1:      'answer': 'true',
705: 1:      'question': '0, 2, 5',
705: 1:      'valid': true
705: 1:    },
705: 1:    {
705: 1:      'answer': 'true',
705: 1:      'question': '3, 1, 6',
705: 1:      'valid': true
705: 1:    },
705: 1:    {
705: 1:      'answer': 'false',
705: 1:      'question': '3, 1, 9',
705: 1:      'valid': true
705: 1:    },
705: 1:    {
705: 1:      'answer': 'false',
705: 1:      'question': '3, 2, 9',
705: 1:      'valid': true
705: 1:    },
705: 1:    {
705: 1:      'answer': 'true',
705: 1:      'question': '10, 10, 0',
705: 1:      'valid': true
705: 1:    },
705: 1:    {
705: 1:      'answer': 'false',
705: 1:      'question': '0, 0, 1',
705: 1:      'valid': true
705: 1:    },
705: 1:    {
705: 1:      'answer': 'false',
705: 1:      'question': '0, 1, 1',
705: 1:      'valid': true
705: 1:    },
705: 1:    {
705: 1:      'answer': 'false',
705: 1:      'question': '0, 0, 2',
705: 1:      'valid': true
705: 1:    }
705: 1:  ],
705: 1:  'info': [
705: 1:    '✅f(0, 1, 5) = true',
705: 1:    '✅f(1, 0, 1) = true',
705: 1:    '✅f(1, 0, 2) = false',
705: 1:    '✅f(3, 1, 7) = true',
705: 1:    '✅f(4, 2, 14) = true',
705: 1:    '✅f(3, 2, 14) = false',
705: 1:    '✅f(0, 2, 5) = true',
705: 1:    '✅f(3, 1, 6) = true',
705: 1:    '✅f(3, 1, 9) = false',
705: 1:    '✅f(3, 2, 9) = false',
705: 1:    '✅f(10, 10, 0) = true',
705: 1:    '✅f(0, 0, 1) = false',
705: 1:    '✅f(0, 1, 1) = false',
705: 1:    '✅f(0, 0, 2) = false',
705: 1:    '❌f(2, 0, 2) = ??? != true'
705: 1:  ],
705: 1:  'level': 26,
705: 1:  'nextQuestion': '2, 0, 2',
705: 1:  'questions': [
705: 1:    '0, 1, 5',
705: 1:    '1, 0, 1',
705: 1:    '1, 0, 2',
705: 1:    '3, 1, 7',
705: 1:    '4, 2, 14',
705: 1:    '3, 2, 14',
705: 1:    '0, 2, 5',
705: 1:    '3, 1, 6',
705: 1:    '3, 1, 9',
705: 1:    '3, 2, 9',
705: 1:    '10, 10, 0',
705: 1:    '0, 0, 1',
705: 1:    '0, 1, 1',
705: 1:    '0, 0, 2',
705: 1:    '2, 0, 2'
705: 1:  ]
705: 1:}
705: 1:Scores: 62420
705: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true']')
705: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
706: 1:BoardData {
706: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
706: 1:  'expectedAnswer': 'false',
706: 1:  'history': [
706: 1:    {
706: 1:      'answer': 'true',
706: 1:      'question': '0, 1, 5',
706: 1:      'valid': true
706: 1:    },
706: 1:    {
706: 1:      'answer': 'true',
706: 1:      'question': '1, 0, 1',
706: 1:      'valid': true
706: 1:    },
706: 1:    {
706: 1:      'answer': 'false',
706: 1:      'question': '1, 0, 2',
706: 1:      'valid': true
706: 1:    },
706: 1:    {
706: 1:      'answer': 'true',
706: 1:      'question': '3, 1, 7',
706: 1:      'valid': true
706: 1:    },
706: 1:    {
706: 1:      'answer': 'true',
706: 1:      'question': '4, 2, 14',
706: 1:      'valid': true
706: 1:    },
706: 1:    {
706: 1:      'answer': 'false',
706: 1:      'question': '3, 2, 14',
706: 1:      'valid': true
706: 1:    },
706: 1:    {
706: 1:      'answer': 'true',
706: 1:      'question': '0, 2, 5',
706: 1:      'valid': true
706: 1:    },
706: 1:    {
706: 1:      'answer': 'true',
706: 1:      'question': '3, 1, 6',
706: 1:      'valid': true
706: 1:    },
706: 1:    {
706: 1:      'answer': 'false',
706: 1:      'question': '3, 1, 9',
706: 1:      'valid': true
706: 1:    },
706: 1:    {
706: 1:      'answer': 'false',
706: 1:      'question': '3, 2, 9',
706: 1:      'valid': true
706: 1:    },
706: 1:    {
706: 1:      'answer': 'true',
706: 1:      'question': '10, 10, 0',
706: 1:      'valid': true
706: 1:    },
706: 1:    {
706: 1:      'answer': 'false',
706: 1:      'question': '0, 0, 1',
706: 1:      'valid': true
706: 1:    },
706: 1:    {
706: 1:      'answer': 'false',
706: 1:      'question': '0, 1, 1',
706: 1:      'valid': true
706: 1:    },
706: 1:    {
706: 1:      'answer': 'false',
706: 1:      'question': '0, 0, 2',
706: 1:      'valid': true
706: 1:    },
706: 1:    {
706: 1:      'answer': 'true',
706: 1:      'question': '2, 0, 2',
706: 1:      'valid': true
706: 1:    }
706: 1:  ],
706: 1:  'info': [
706: 1:    '✅f(0, 1, 5) = true',
706: 1:    '✅f(1, 0, 1) = true',
706: 1:    '✅f(1, 0, 2) = false',
706: 1:    '✅f(3, 1, 7) = true',
706: 1:    '✅f(4, 2, 14) = true',
706: 1:    '✅f(3, 2, 14) = false',
706: 1:    '✅f(0, 2, 5) = true',
706: 1:    '✅f(3, 1, 6) = true',
706: 1:    '✅f(3, 1, 9) = false',
706: 1:    '✅f(3, 2, 9) = false',
706: 1:    '✅f(10, 10, 0) = true',
706: 1:    '✅f(0, 0, 1) = false',
706: 1:    '✅f(0, 1, 1) = false',
706: 1:    '✅f(0, 0, 2) = false',
706: 1:    '✅f(2, 0, 2) = true',
706: 1:    '❌f(0, 1, 2) = ??? != false'
706: 1:  ],
706: 1:  'level': 26,
706: 1:  'nextQuestion': '0, 1, 2',
706: 1:  'questions': [
706: 1:    '0, 1, 5',
706: 1:    '1, 0, 1',
706: 1:    '1, 0, 2',
706: 1:    '3, 1, 7',
706: 1:    '4, 2, 14',
706: 1:    '3, 2, 14',
706: 1:    '0, 2, 5',
706: 1:    '3, 1, 6',
706: 1:    '3, 1, 9',
706: 1:    '3, 2, 9',
706: 1:    '10, 10, 0',
706: 1:    '0, 0, 1',
706: 1:    '0, 1, 1',
706: 1:    '0, 0, 2',
706: 1:    '2, 0, 2',
706: 1:    '0, 1, 2'
706: 1:  ]
706: 1:}
706: 1:Scores: 62427
706: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false']')
706: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
707: 1:BoardData {
707: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
707: 1:  'expectedAnswer': 'false',
707: 1:  'history': [
707: 1:    {
707: 1:      'answer': 'true',
707: 1:      'question': '0, 1, 5',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'true',
707: 1:      'question': '1, 0, 1',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'false',
707: 1:      'question': '1, 0, 2',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'true',
707: 1:      'question': '3, 1, 7',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'true',
707: 1:      'question': '4, 2, 14',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'false',
707: 1:      'question': '3, 2, 14',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'true',
707: 1:      'question': '0, 2, 5',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'true',
707: 1:      'question': '3, 1, 6',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'false',
707: 1:      'question': '3, 1, 9',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'false',
707: 1:      'question': '3, 2, 9',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'true',
707: 1:      'question': '10, 10, 0',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'false',
707: 1:      'question': '0, 0, 1',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'false',
707: 1:      'question': '0, 1, 1',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'false',
707: 1:      'question': '0, 0, 2',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'true',
707: 1:      'question': '2, 0, 2',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'false',
707: 1:      'question': '0, 1, 2',
707: 1:      'valid': true
707: 1:    }
707: 1:  ],
707: 1:  'info': [
707: 1:    '✅f(0, 1, 5) = true',
707: 1:    '✅f(1, 0, 1) = true',
707: 1:    '✅f(1, 0, 2) = false',
707: 1:    '✅f(3, 1, 7) = true',
707: 1:    '✅f(4, 2, 14) = true',
707: 1:    '✅f(3, 2, 14) = false',
707: 1:    '✅f(0, 2, 5) = true',
707: 1:    '✅f(3, 1, 6) = true',
707: 1:    '✅f(3, 1, 9) = false',
707: 1:    '✅f(3, 2, 9) = false',
707: 1:    '✅f(10, 10, 0) = true',
707: 1:    '✅f(0, 0, 1) = false',
707: 1:    '✅f(0, 1, 1) = false',
707: 1:    '✅f(0, 0, 2) = false',
707: 1:    '✅f(2, 0, 2) = true',
707: 1:    '✅f(0, 1, 2) = false',
707: 1:    '❌f(1, 1, 2) = ??? != false'
707: 1:  ],
707: 1:  'level': 26,
707: 1:  'nextQuestion': '1, 1, 2',
707: 1:  'questions': [
707: 1:    '0, 1, 5',
707: 1:    '1, 0, 1',
707: 1:    '1, 0, 2',
707: 1:    '3, 1, 7',
707: 1:    '4, 2, 14',
707: 1:    '3, 2, 14',
707: 1:    '0, 2, 5',
707: 1:    '3, 1, 6',
707: 1:    '3, 1, 9',
707: 1:    '3, 2, 9',
707: 1:    '10, 10, 0',
707: 1:    '0, 0, 1',
707: 1:    '0, 1, 1',
707: 1:    '0, 0, 2',
707: 1:    '2, 0, 2',
707: 1:    '0, 1, 2',
707: 1:    '1, 1, 2'
707: 1:  ]
707: 1:}
707: 1:Scores: 62434
707: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false']')
707: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
708: 1:BoardData {
708: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
708: 1:  'expectedAnswer': 'false',
708: 1:  'history': [
708: 1:    {
708: 1:      'answer': 'true',
708: 1:      'question': '0, 1, 5',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'true',
708: 1:      'question': '1, 0, 1',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'false',
708: 1:      'question': '1, 0, 2',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'true',
708: 1:      'question': '3, 1, 7',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'true',
708: 1:      'question': '4, 2, 14',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'false',
708: 1:      'question': '3, 2, 14',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'true',
708: 1:      'question': '0, 2, 5',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'true',
708: 1:      'question': '3, 1, 6',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'false',
708: 1:      'question': '3, 1, 9',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'false',
708: 1:      'question': '3, 2, 9',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'true',
708: 1:      'question': '10, 10, 0',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'false',
708: 1:      'question': '0, 0, 1',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'false',
708: 1:      'question': '0, 1, 1',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'false',
708: 1:      'question': '0, 0, 2',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'true',
708: 1:      'question': '2, 0, 2',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'false',
708: 1:      'question': '0, 1, 2',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'false',
708: 1:      'question': '1, 1, 2',
708: 1:      'valid': true
708: 1:    }
708: 1:  ],
708: 1:  'info': [
708: 1:    '✅f(0, 1, 5) = true',
708: 1:    '✅f(1, 0, 1) = true',
708: 1:    '✅f(1, 0, 2) = false',
708: 1:    '✅f(3, 1, 7) = true',
708: 1:    '✅f(4, 2, 14) = true',
708: 1:    '✅f(3, 2, 14) = false',
708: 1:    '✅f(0, 2, 5) = true',
708: 1:    '✅f(3, 1, 6) = true',
708: 1:    '✅f(3, 1, 9) = false',
708: 1:    '✅f(3, 2, 9) = false',
708: 1:    '✅f(10, 10, 0) = true',
708: 1:    '✅f(0, 0, 1) = false',
708: 1:    '✅f(0, 1, 1) = false',
708: 1:    '✅f(0, 0, 2) = false',
708: 1:    '✅f(2, 0, 2) = true',
708: 1:    '✅f(0, 1, 2) = false',
708: 1:    '✅f(1, 1, 2) = false',
708: 1:    '❌f(2, 1, 3) = ??? != false'
708: 1:  ],
708: 1:  'level': 26,
708: 1:  'nextQuestion': '2, 1, 3',
708: 1:  'questions': [
708: 1:    '0, 1, 5',
708: 1:    '1, 0, 1',
708: 1:    '1, 0, 2',
708: 1:    '3, 1, 7',
708: 1:    '4, 2, 14',
708: 1:    '3, 2, 14',
708: 1:    '0, 2, 5',
708: 1:    '3, 1, 6',
708: 1:    '3, 1, 9',
708: 1:    '3, 2, 9',
708: 1:    '10, 10, 0',
708: 1:    '0, 0, 1',
708: 1:    '0, 1, 1',
708: 1:    '0, 0, 2',
708: 1:    '2, 0, 2',
708: 1:    '0, 1, 2',
708: 1:    '1, 1, 2',
708: 1:    '2, 1, 3'
708: 1:  ]
708: 1:}
708: 1:Scores: 62441
708: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false']')
708: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
709: 1:BoardData {
709: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
709: 1:  'expectedAnswer': 'false',
709: 1:  'history': [
709: 1:    {
709: 1:      'answer': 'true',
709: 1:      'question': '0, 1, 5',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'true',
709: 1:      'question': '1, 0, 1',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'false',
709: 1:      'question': '1, 0, 2',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'true',
709: 1:      'question': '3, 1, 7',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'true',
709: 1:      'question': '4, 2, 14',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'false',
709: 1:      'question': '3, 2, 14',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'true',
709: 1:      'question': '0, 2, 5',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'true',
709: 1:      'question': '3, 1, 6',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'false',
709: 1:      'question': '3, 1, 9',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'false',
709: 1:      'question': '3, 2, 9',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'true',
709: 1:      'question': '10, 10, 0',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'false',
709: 1:      'question': '0, 0, 1',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'false',
709: 1:      'question': '0, 1, 1',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'false',
709: 1:      'question': '0, 0, 2',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'true',
709: 1:      'question': '2, 0, 2',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'false',
709: 1:      'question': '0, 1, 2',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'false',
709: 1:      'question': '1, 1, 2',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'false',
709: 1:      'question': '2, 1, 3',
709: 1:      'valid': true
709: 1:    }
709: 1:  ],
709: 1:  'info': [
709: 1:    '✅f(0, 1, 5) = true',
709: 1:    '✅f(1, 0, 1) = true',
709: 1:    '✅f(1, 0, 2) = false',
709: 1:    '✅f(3, 1, 7) = true',
709: 1:    '✅f(4, 2, 14) = true',
709: 1:    '✅f(3, 2, 14) = false',
709: 1:    '✅f(0, 2, 5) = true',
709: 1:    '✅f(3, 1, 6) = true',
709: 1:    '✅f(3, 1, 9) = false',
709: 1:    '✅f(3, 2, 9) = false',
709: 1:    '✅f(10, 10, 0) = true',
709: 1:    '✅f(0, 0, 1) = false',
709: 1:    '✅f(0, 1, 1) = false',
709: 1:    '✅f(0, 0, 2) = false',
709: 1:    '✅f(2, 0, 2) = true',
709: 1:    '✅f(0, 1, 2) = false',
709: 1:    '✅f(1, 1, 2) = false',
709: 1:    '✅f(2, 1, 3) = false',
709: 1:    '❌f(3, 1, 4) = ??? != false'
709: 1:  ],
709: 1:  'level': 26,
709: 1:  'nextQuestion': '3, 1, 4',
709: 1:  'questions': [
709: 1:    '0, 1, 5',
709: 1:    '1, 0, 1',
709: 1:    '1, 0, 2',
709: 1:    '3, 1, 7',
709: 1:    '4, 2, 14',
709: 1:    '3, 2, 14',
709: 1:    '0, 2, 5',
709: 1:    '3, 1, 6',
709: 1:    '3, 1, 9',
709: 1:    '3, 2, 9',
709: 1:    '10, 10, 0',
709: 1:    '0, 0, 1',
709: 1:    '0, 1, 1',
709: 1:    '0, 0, 2',
709: 1:    '2, 0, 2',
709: 1:    '0, 1, 2',
709: 1:    '1, 1, 2',
709: 1:    '2, 1, 3',
709: 1:    '3, 1, 4'
709: 1:  ]
709: 1:}
709: 1:Scores: 62448
709: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false']')
709: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
710: 1:BoardData {
710: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
710: 1:  'expectedAnswer': 'true',
710: 1:  'history': [
710: 1:    {
710: 1:      'answer': 'true',
710: 1:      'question': '0, 1, 5',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'true',
710: 1:      'question': '1, 0, 1',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'false',
710: 1:      'question': '1, 0, 2',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'true',
710: 1:      'question': '3, 1, 7',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'true',
710: 1:      'question': '4, 2, 14',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'false',
710: 1:      'question': '3, 2, 14',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'true',
710: 1:      'question': '0, 2, 5',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'true',
710: 1:      'question': '3, 1, 6',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'false',
710: 1:      'question': '3, 1, 9',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'false',
710: 1:      'question': '3, 2, 9',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'true',
710: 1:      'question': '10, 10, 0',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'false',
710: 1:      'question': '0, 0, 1',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'false',
710: 1:      'question': '0, 1, 1',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'false',
710: 1:      'question': '0, 0, 2',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'true',
710: 1:      'question': '2, 0, 2',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'false',
710: 1:      'question': '0, 1, 2',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'false',
710: 1:      'question': '1, 1, 2',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'false',
710: 1:      'question': '2, 1, 3',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'false',
710: 1:      'question': '3, 1, 4',
710: 1:      'valid': true
710: 1:    }
710: 1:  ],
710: 1:  'info': [
710: 1:    '✅f(0, 1, 5) = true',
710: 1:    '✅f(1, 0, 1) = true',
710: 1:    '✅f(1, 0, 2) = false',
710: 1:    '✅f(3, 1, 7) = true',
710: 1:    '✅f(4, 2, 14) = true',
710: 1:    '✅f(3, 2, 14) = false',
710: 1:    '✅f(0, 2, 5) = true',
710: 1:    '✅f(3, 1, 6) = true',
710: 1:    '✅f(3, 1, 9) = false',
710: 1:    '✅f(3, 2, 9) = false',
710: 1:    '✅f(10, 10, 0) = true',
710: 1:    '✅f(0, 0, 1) = false',
710: 1:    '✅f(0, 1, 1) = false',
710: 1:    '✅f(0, 0, 2) = false',
710: 1:    '✅f(2, 0, 2) = true',
710: 1:    '✅f(0, 1, 2) = false',
710: 1:    '✅f(1, 1, 2) = false',
710: 1:    '✅f(2, 1, 3) = false',
710: 1:    '✅f(3, 1, 4) = false',
710: 1:    '❌f(2, 1, 1) = ??? != true'
710: 1:  ],
710: 1:  'level': 26,
710: 1:  'nextQuestion': '2, 1, 1',
710: 1:  'questions': [
710: 1:    '0, 1, 5',
710: 1:    '1, 0, 1',
710: 1:    '1, 0, 2',
710: 1:    '3, 1, 7',
710: 1:    '4, 2, 14',
710: 1:    '3, 2, 14',
710: 1:    '0, 2, 5',
710: 1:    '3, 1, 6',
710: 1:    '3, 1, 9',
710: 1:    '3, 2, 9',
710: 1:    '10, 10, 0',
710: 1:    '0, 0, 1',
710: 1:    '0, 1, 1',
710: 1:    '0, 0, 2',
710: 1:    '2, 0, 2',
710: 1:    '0, 1, 2',
710: 1:    '1, 1, 2',
710: 1:    '2, 1, 3',
710: 1:    '3, 1, 4',
710: 1:    '2, 1, 1'
710: 1:  ]
710: 1:}
710: 1:Scores: 62455
710: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true']')
710: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
711: 1:BoardData {
711: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
711: 1:  'expectedAnswer': 'true',
711: 1:  'history': [
711: 1:    {
711: 1:      'answer': 'true',
711: 1:      'question': '0, 1, 5',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'true',
711: 1:      'question': '1, 0, 1',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'false',
711: 1:      'question': '1, 0, 2',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'true',
711: 1:      'question': '3, 1, 7',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'true',
711: 1:      'question': '4, 2, 14',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'false',
711: 1:      'question': '3, 2, 14',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'true',
711: 1:      'question': '0, 2, 5',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'true',
711: 1:      'question': '3, 1, 6',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'false',
711: 1:      'question': '3, 1, 9',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'false',
711: 1:      'question': '3, 2, 9',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'true',
711: 1:      'question': '10, 10, 0',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'false',
711: 1:      'question': '0, 0, 1',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'false',
711: 1:      'question': '0, 1, 1',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'false',
711: 1:      'question': '0, 0, 2',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'true',
711: 1:      'question': '2, 0, 2',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'false',
711: 1:      'question': '0, 1, 2',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'false',
711: 1:      'question': '1, 1, 2',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'false',
711: 1:      'question': '2, 1, 3',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'false',
711: 1:      'question': '3, 1, 4',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'true',
711: 1:      'question': '2, 1, 1',
711: 1:      'valid': true
711: 1:    }
711: 1:  ],
711: 1:  'info': [
711: 1:    '✅f(0, 1, 5) = true',
711: 1:    '✅f(1, 0, 1) = true',
711: 1:    '✅f(1, 0, 2) = false',
711: 1:    '✅f(3, 1, 7) = true',
711: 1:    '✅f(4, 2, 14) = true',
711: 1:    '✅f(3, 2, 14) = false',
711: 1:    '✅f(0, 2, 5) = true',
711: 1:    '✅f(3, 1, 6) = true',
711: 1:    '✅f(3, 1, 9) = false',
711: 1:    '✅f(3, 2, 9) = false',
711: 1:    '✅f(10, 10, 0) = true',
711: 1:    '✅f(0, 0, 1) = false',
711: 1:    '✅f(0, 1, 1) = false',
711: 1:    '✅f(0, 0, 2) = false',
711: 1:    '✅f(2, 0, 2) = true',
711: 1:    '✅f(0, 1, 2) = false',
711: 1:    '✅f(1, 1, 2) = false',
711: 1:    '✅f(2, 1, 3) = false',
711: 1:    '✅f(3, 1, 4) = false',
711: 1:    '✅f(2, 1, 1) = true',
711: 1:    '❌f(2, 2, 6) = ??? != true'
711: 1:  ],
711: 1:  'level': 26,
711: 1:  'nextQuestion': '2, 2, 6',
711: 1:  'questions': [
711: 1:    '0, 1, 5',
711: 1:    '1, 0, 1',
711: 1:    '1, 0, 2',
711: 1:    '3, 1, 7',
711: 1:    '4, 2, 14',
711: 1:    '3, 2, 14',
711: 1:    '0, 2, 5',
711: 1:    '3, 1, 6',
711: 1:    '3, 1, 9',
711: 1:    '3, 2, 9',
711: 1:    '10, 10, 0',
711: 1:    '0, 0, 1',
711: 1:    '0, 1, 1',
711: 1:    '0, 0, 2',
711: 1:    '2, 0, 2',
711: 1:    '0, 1, 2',
711: 1:    '1, 1, 2',
711: 1:    '2, 1, 3',
711: 1:    '3, 1, 4',
711: 1:    '2, 1, 1',
711: 1:    '2, 2, 6'
711: 1:  ]
711: 1:}
711: 1:Scores: 62462
711: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true']')
711: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
712: 1:BoardData {
712: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
712: 1:  'expectedAnswer': 'true',
712: 1:  'history': [
712: 1:    {
712: 1:      'answer': 'true',
712: 1:      'question': '0, 1, 5',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'true',
712: 1:      'question': '1, 0, 1',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'false',
712: 1:      'question': '1, 0, 2',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'true',
712: 1:      'question': '3, 1, 7',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'true',
712: 1:      'question': '4, 2, 14',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'false',
712: 1:      'question': '3, 2, 14',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'true',
712: 1:      'question': '0, 2, 5',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'true',
712: 1:      'question': '3, 1, 6',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'false',
712: 1:      'question': '3, 1, 9',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'false',
712: 1:      'question': '3, 2, 9',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'true',
712: 1:      'question': '10, 10, 0',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'false',
712: 1:      'question': '0, 0, 1',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'false',
712: 1:      'question': '0, 1, 1',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'false',
712: 1:      'question': '0, 0, 2',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'true',
712: 1:      'question': '2, 0, 2',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'false',
712: 1:      'question': '0, 1, 2',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'false',
712: 1:      'question': '1, 1, 2',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'false',
712: 1:      'question': '2, 1, 3',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'false',
712: 1:      'question': '3, 1, 4',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'true',
712: 1:      'question': '2, 1, 1',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'true',
712: 1:      'question': '2, 2, 6',
712: 1:      'valid': true
712: 1:    }
712: 1:  ],
712: 1:  'info': [
712: 1:    '✅f(0, 1, 5) = true',
712: 1:    '✅f(1, 0, 1) = true',
712: 1:    '✅f(1, 0, 2) = false',
712: 1:    '✅f(3, 1, 7) = true',
712: 1:    '✅f(4, 2, 14) = true',
712: 1:    '✅f(3, 2, 14) = false',
712: 1:    '✅f(0, 2, 5) = true',
712: 1:    '✅f(3, 1, 6) = true',
712: 1:    '✅f(3, 1, 9) = false',
712: 1:    '✅f(3, 2, 9) = false',
712: 1:    '✅f(10, 10, 0) = true',
712: 1:    '✅f(0, 0, 1) = false',
712: 1:    '✅f(0, 1, 1) = false',
712: 1:    '✅f(0, 0, 2) = false',
712: 1:    '✅f(2, 0, 2) = true',
712: 1:    '✅f(0, 1, 2) = false',
712: 1:    '✅f(1, 1, 2) = false',
712: 1:    '✅f(2, 1, 3) = false',
712: 1:    '✅f(3, 1, 4) = false',
712: 1:    '✅f(2, 1, 1) = true',
712: 1:    '✅f(2, 2, 6) = true',
712: 1:    '❌f(6, 1, 11) = ??? != true'
712: 1:  ],
712: 1:  'level': 26,
712: 1:  'nextQuestion': '6, 1, 11',
712: 1:  'questions': [
712: 1:    '0, 1, 5',
712: 1:    '1, 0, 1',
712: 1:    '1, 0, 2',
712: 1:    '3, 1, 7',
712: 1:    '4, 2, 14',
712: 1:    '3, 2, 14',
712: 1:    '0, 2, 5',
712: 1:    '3, 1, 6',
712: 1:    '3, 1, 9',
712: 1:    '3, 2, 9',
712: 1:    '10, 10, 0',
712: 1:    '0, 0, 1',
712: 1:    '0, 1, 1',
712: 1:    '0, 0, 2',
712: 1:    '2, 0, 2',
712: 1:    '0, 1, 2',
712: 1:    '1, 1, 2',
712: 1:    '2, 1, 3',
712: 1:    '3, 1, 4',
712: 1:    '2, 1, 1',
712: 1:    '2, 2, 6',
712: 1:    '6, 1, 11'
712: 1:  ]
712: 1:}
712: 1:Scores: 62469
712: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true']')
712: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
713: 1:BoardData {
713: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
713: 1:  'expectedAnswer': 'true',
713: 1:  'history': [
713: 1:    {
713: 1:      'answer': 'true',
713: 1:      'question': '0, 1, 5',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'true',
713: 1:      'question': '1, 0, 1',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'false',
713: 1:      'question': '1, 0, 2',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'true',
713: 1:      'question': '3, 1, 7',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'true',
713: 1:      'question': '4, 2, 14',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'false',
713: 1:      'question': '3, 2, 14',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'true',
713: 1:      'question': '0, 2, 5',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'true',
713: 1:      'question': '3, 1, 6',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'false',
713: 1:      'question': '3, 1, 9',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'false',
713: 1:      'question': '3, 2, 9',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'true',
713: 1:      'question': '10, 10, 0',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'false',
713: 1:      'question': '0, 0, 1',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'false',
713: 1:      'question': '0, 1, 1',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'false',
713: 1:      'question': '0, 0, 2',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'true',
713: 1:      'question': '2, 0, 2',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'false',
713: 1:      'question': '0, 1, 2',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'false',
713: 1:      'question': '1, 1, 2',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'false',
713: 1:      'question': '2, 1, 3',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'false',
713: 1:      'question': '3, 1, 4',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'true',
713: 1:      'question': '2, 1, 1',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'true',
713: 1:      'question': '2, 2, 6',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'true',
713: 1:      'question': '6, 1, 11',
713: 1:      'valid': true
713: 1:    }
713: 1:  ],
713: 1:  'info': [
713: 1:    '✅f(0, 1, 5) = true',
713: 1:    '✅f(1, 0, 1) = true',
713: 1:    '✅f(1, 0, 2) = false',
713: 1:    '✅f(3, 1, 7) = true',
713: 1:    '✅f(4, 2, 14) = true',
713: 1:    '✅f(3, 2, 14) = false',
713: 1:    '✅f(0, 2, 5) = true',
713: 1:    '✅f(3, 1, 6) = true',
713: 1:    '✅f(3, 1, 9) = false',
713: 1:    '✅f(3, 2, 9) = false',
713: 1:    '✅f(10, 10, 0) = true',
713: 1:    '✅f(0, 0, 1) = false',
713: 1:    '✅f(0, 1, 1) = false',
713: 1:    '✅f(0, 0, 2) = false',
713: 1:    '✅f(2, 0, 2) = true',
713: 1:    '✅f(0, 1, 2) = false',
713: 1:    '✅f(1, 1, 2) = false',
713: 1:    '✅f(2, 1, 3) = false',
713: 1:    '✅f(3, 1, 4) = false',
713: 1:    '✅f(2, 1, 1) = true',
713: 1:    '✅f(2, 2, 6) = true',
713: 1:    '✅f(6, 1, 11) = true',
713: 1:    '❌f(5, 0, 1) = ??? != true'
713: 1:  ],
713: 1:  'level': 26,
713: 1:  'nextQuestion': '5, 0, 1',
713: 1:  'questions': [
713: 1:    '0, 1, 5',
713: 1:    '1, 0, 1',
713: 1:    '1, 0, 2',
713: 1:    '3, 1, 7',
713: 1:    '4, 2, 14',
713: 1:    '3, 2, 14',
713: 1:    '0, 2, 5',
713: 1:    '3, 1, 6',
713: 1:    '3, 1, 9',
713: 1:    '3, 2, 9',
713: 1:    '10, 10, 0',
713: 1:    '0, 0, 1',
713: 1:    '0, 1, 1',
713: 1:    '0, 0, 2',
713: 1:    '2, 0, 2',
713: 1:    '0, 1, 2',
713: 1:    '1, 1, 2',
713: 1:    '2, 1, 3',
713: 1:    '3, 1, 4',
713: 1:    '2, 1, 1',
713: 1:    '2, 2, 6',
713: 1:    '6, 1, 11',
713: 1:    '5, 0, 1'
713: 1:  ]
713: 1:}
713: 1:Scores: 62476
713: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true']')
713: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
714: 1:BoardData {
714: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
714: 1:  'expectedAnswer': 'true',
714: 1:  'history': [
714: 1:    {
714: 1:      'answer': 'true',
714: 1:      'question': '0, 1, 5',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'true',
714: 1:      'question': '1, 0, 1',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'false',
714: 1:      'question': '1, 0, 2',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'true',
714: 1:      'question': '3, 1, 7',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'true',
714: 1:      'question': '4, 2, 14',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'false',
714: 1:      'question': '3, 2, 14',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'true',
714: 1:      'question': '0, 2, 5',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'true',
714: 1:      'question': '3, 1, 6',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'false',
714: 1:      'question': '3, 1, 9',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'false',
714: 1:      'question': '3, 2, 9',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'true',
714: 1:      'question': '10, 10, 0',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'false',
714: 1:      'question': '0, 0, 1',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'false',
714: 1:      'question': '0, 1, 1',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'false',
714: 1:      'question': '0, 0, 2',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'true',
714: 1:      'question': '2, 0, 2',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'false',
714: 1:      'question': '0, 1, 2',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'false',
714: 1:      'question': '1, 1, 2',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'false',
714: 1:      'question': '2, 1, 3',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'false',
714: 1:      'question': '3, 1, 4',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'true',
714: 1:      'question': '2, 1, 1',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'true',
714: 1:      'question': '2, 2, 6',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'true',
714: 1:      'question': '6, 1, 11',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'true',
714: 1:      'question': '5, 0, 1',
714: 1:      'valid': true
714: 1:    }
714: 1:  ],
714: 1:  'info': [
714: 1:    '✅f(0, 1, 5) = true',
714: 1:    '✅f(1, 0, 1) = true',
714: 1:    '✅f(1, 0, 2) = false',
714: 1:    '✅f(3, 1, 7) = true',
714: 1:    '✅f(4, 2, 14) = true',
714: 1:    '✅f(3, 2, 14) = false',
714: 1:    '✅f(0, 2, 5) = true',
714: 1:    '✅f(3, 1, 6) = true',
714: 1:    '✅f(3, 1, 9) = false',
714: 1:    '✅f(3, 2, 9) = false',
714: 1:    '✅f(10, 10, 0) = true',
714: 1:    '✅f(0, 0, 1) = false',
714: 1:    '✅f(0, 1, 1) = false',
714: 1:    '✅f(0, 0, 2) = false',
714: 1:    '✅f(2, 0, 2) = true',
714: 1:    '✅f(0, 1, 2) = false',
714: 1:    '✅f(1, 1, 2) = false',
714: 1:    '✅f(2, 1, 3) = false',
714: 1:    '✅f(3, 1, 4) = false',
714: 1:    '✅f(2, 1, 1) = true',
714: 1:    '✅f(2, 2, 6) = true',
714: 1:    '✅f(6, 1, 11) = true',
714: 1:    '✅f(5, 0, 1) = true',
714: 1:    '❌f(3, 1, 8) = ??? != true'
714: 1:  ],
714: 1:  'level': 26,
714: 1:  'nextQuestion': '3, 1, 8',
714: 1:  'questions': [
714: 1:    '0, 1, 5',
714: 1:    '1, 0, 1',
714: 1:    '1, 0, 2',
714: 1:    '3, 1, 7',
714: 1:    '4, 2, 14',
714: 1:    '3, 2, 14',
714: 1:    '0, 2, 5',
714: 1:    '3, 1, 6',
714: 1:    '3, 1, 9',
714: 1:    '3, 2, 9',
714: 1:    '10, 10, 0',
714: 1:    '0, 0, 1',
714: 1:    '0, 1, 1',
714: 1:    '0, 0, 2',
714: 1:    '2, 0, 2',
714: 1:    '0, 1, 2',
714: 1:    '1, 1, 2',
714: 1:    '2, 1, 3',
714: 1:    '3, 1, 4',
714: 1:    '2, 1, 1',
714: 1:    '2, 2, 6',
714: 1:    '6, 1, 11',
714: 1:    '5, 0, 1',
714: 1:    '3, 1, 8'
714: 1:  ]
714: 1:}
714: 1:Scores: 62483
714: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true']')
714: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
715: 1:BoardData {
715: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
715: 1:  'expectedAnswer': 'true',
715: 1:  'history': [
715: 1:    {
715: 1:      'answer': 'true',
715: 1:      'question': '0, 1, 5',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'true',
715: 1:      'question': '1, 0, 1',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'false',
715: 1:      'question': '1, 0, 2',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'true',
715: 1:      'question': '3, 1, 7',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'true',
715: 1:      'question': '4, 2, 14',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'false',
715: 1:      'question': '3, 2, 14',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'true',
715: 1:      'question': '0, 2, 5',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'true',
715: 1:      'question': '3, 1, 6',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'false',
715: 1:      'question': '3, 1, 9',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'false',
715: 1:      'question': '3, 2, 9',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'true',
715: 1:      'question': '10, 10, 0',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'false',
715: 1:      'question': '0, 0, 1',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'false',
715: 1:      'question': '0, 1, 1',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'false',
715: 1:      'question': '0, 0, 2',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'true',
715: 1:      'question': '2, 0, 2',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'false',
715: 1:      'question': '0, 1, 2',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'false',
715: 1:      'question': '1, 1, 2',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'false',
715: 1:      'question': '2, 1, 3',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'false',
715: 1:      'question': '3, 1, 4',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'true',
715: 1:      'question': '2, 1, 1',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'true',
715: 1:      'question': '2, 2, 6',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'true',
715: 1:      'question': '6, 1, 11',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'true',
715: 1:      'question': '5, 0, 1',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'true',
715: 1:      'question': '3, 1, 8',
715: 1:      'valid': true
715: 1:    }
715: 1:  ],
715: 1:  'info': [
715: 1:    '✅f(0, 1, 5) = true',
715: 1:    '✅f(1, 0, 1) = true',
715: 1:    '✅f(1, 0, 2) = false',
715: 1:    '✅f(3, 1, 7) = true',
715: 1:    '✅f(4, 2, 14) = true',
715: 1:    '✅f(3, 2, 14) = false',
715: 1:    '✅f(0, 2, 5) = true',
715: 1:    '✅f(3, 1, 6) = true',
715: 1:    '✅f(3, 1, 9) = false',
715: 1:    '✅f(3, 2, 9) = false',
715: 1:    '✅f(10, 10, 0) = true',
715: 1:    '✅f(0, 0, 1) = false',
715: 1:    '✅f(0, 1, 1) = false',
715: 1:    '✅f(0, 0, 2) = false',
715: 1:    '✅f(2, 0, 2) = true',
715: 1:    '✅f(0, 1, 2) = false',
715: 1:    '✅f(1, 1, 2) = false',
715: 1:    '✅f(2, 1, 3) = false',
715: 1:    '✅f(3, 1, 4) = false',
715: 1:    '✅f(2, 1, 1) = true',
715: 1:    '✅f(2, 2, 6) = true',
715: 1:    '✅f(6, 1, 11) = true',
715: 1:    '✅f(5, 0, 1) = true',
715: 1:    '✅f(3, 1, 8) = true',
715: 1:    '❌f(3, 2, 10) = ??? != true'
715: 1:  ],
715: 1:  'level': 26,
715: 1:  'nextQuestion': '3, 2, 10',
715: 1:  'questions': [
715: 1:    '0, 1, 5',
715: 1:    '1, 0, 1',
715: 1:    '1, 0, 2',
715: 1:    '3, 1, 7',
715: 1:    '4, 2, 14',
715: 1:    '3, 2, 14',
715: 1:    '0, 2, 5',
715: 1:    '3, 1, 6',
715: 1:    '3, 1, 9',
715: 1:    '3, 2, 9',
715: 1:    '10, 10, 0',
715: 1:    '0, 0, 1',
715: 1:    '0, 1, 1',
715: 1:    '0, 0, 2',
715: 1:    '2, 0, 2',
715: 1:    '0, 1, 2',
715: 1:    '1, 1, 2',
715: 1:    '2, 1, 3',
715: 1:    '3, 1, 4',
715: 1:    '2, 1, 1',
715: 1:    '2, 2, 6',
715: 1:    '6, 1, 11',
715: 1:    '5, 0, 1',
715: 1:    '3, 1, 8',
715: 1:    '3, 2, 10'
715: 1:  ]
715: 1:}
715: 1:Scores: 62490
715: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true']')
715: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
716: 1:BoardData {
716: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
716: 1:  'expectedAnswer': 'true',
716: 1:  'history': [
716: 1:    {
716: 1:      'answer': 'true',
716: 1:      'question': '0, 1, 5',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'true',
716: 1:      'question': '1, 0, 1',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'false',
716: 1:      'question': '1, 0, 2',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'true',
716: 1:      'question': '3, 1, 7',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'true',
716: 1:      'question': '4, 2, 14',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'false',
716: 1:      'question': '3, 2, 14',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'true',
716: 1:      'question': '0, 2, 5',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'true',
716: 1:      'question': '3, 1, 6',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'false',
716: 1:      'question': '3, 1, 9',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'false',
716: 1:      'question': '3, 2, 9',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'true',
716: 1:      'question': '10, 10, 0',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'false',
716: 1:      'question': '0, 0, 1',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'false',
716: 1:      'question': '0, 1, 1',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'false',
716: 1:      'question': '0, 0, 2',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'true',
716: 1:      'question': '2, 0, 2',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'false',
716: 1:      'question': '0, 1, 2',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'false',
716: 1:      'question': '1, 1, 2',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'false',
716: 1:      'question': '2, 1, 3',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'false',
716: 1:      'question': '3, 1, 4',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'true',
716: 1:      'question': '2, 1, 1',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'true',
716: 1:      'question': '2, 2, 6',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'true',
716: 1:      'question': '6, 1, 11',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'true',
716: 1:      'question': '5, 0, 1',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'true',
716: 1:      'question': '3, 1, 8',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'true',
716: 1:      'question': '3, 2, 10',
716: 1:      'valid': true
716: 1:    }
716: 1:  ],
716: 1:  'info': [
716: 1:    '✅f(0, 1, 5) = true',
716: 1:    '✅f(1, 0, 1) = true',
716: 1:    '✅f(1, 0, 2) = false',
716: 1:    '✅f(3, 1, 7) = true',
716: 1:    '✅f(4, 2, 14) = true',
716: 1:    '✅f(3, 2, 14) = false',
716: 1:    '✅f(0, 2, 5) = true',
716: 1:    '✅f(3, 1, 6) = true',
716: 1:    '✅f(3, 1, 9) = false',
716: 1:    '✅f(3, 2, 9) = false',
716: 1:    '✅f(10, 10, 0) = true',
716: 1:    '✅f(0, 0, 1) = false',
716: 1:    '✅f(0, 1, 1) = false',
716: 1:    '✅f(0, 0, 2) = false',
716: 1:    '✅f(2, 0, 2) = true',
716: 1:    '✅f(0, 1, 2) = false',
716: 1:    '✅f(1, 1, 2) = false',
716: 1:    '✅f(2, 1, 3) = false',
716: 1:    '✅f(3, 1, 4) = false',
716: 1:    '✅f(2, 1, 1) = true',
716: 1:    '✅f(2, 2, 6) = true',
716: 1:    '✅f(6, 1, 11) = true',
716: 1:    '✅f(5, 0, 1) = true',
716: 1:    '✅f(3, 1, 8) = true',
716: 1:    '✅f(3, 2, 10) = true',
716: 1:    '❌f(3, 2, 8) = ??? != true'
716: 1:  ],
716: 1:  'level': 26,
716: 1:  'nextQuestion': '3, 2, 8',
716: 1:  'questions': [
716: 1:    '0, 1, 5',
716: 1:    '1, 0, 1',
716: 1:    '1, 0, 2',
716: 1:    '3, 1, 7',
716: 1:    '4, 2, 14',
716: 1:    '3, 2, 14',
716: 1:    '0, 2, 5',
716: 1:    '3, 1, 6',
716: 1:    '3, 1, 9',
716: 1:    '3, 2, 9',
716: 1:    '10, 10, 0',
716: 1:    '0, 0, 1',
716: 1:    '0, 1, 1',
716: 1:    '0, 0, 2',
716: 1:    '2, 0, 2',
716: 1:    '0, 1, 2',
716: 1:    '1, 1, 2',
716: 1:    '2, 1, 3',
716: 1:    '3, 1, 4',
716: 1:    '2, 1, 1',
716: 1:    '2, 2, 6',
716: 1:    '6, 1, 11',
716: 1:    '5, 0, 1',
716: 1:    '3, 1, 8',
716: 1:    '3, 2, 10',
716: 1:    '3, 2, 8'
716: 1:  ]
716: 1:}
716: 1:Scores: 62497
716: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true']')
716: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
717: 1:BoardData {
717: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
717: 1:  'expectedAnswer': 'false',
717: 1:  'history': [
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '0, 1, 5',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '1, 0, 1',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'false',
717: 1:      'question': '1, 0, 2',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '3, 1, 7',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '4, 2, 14',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'false',
717: 1:      'question': '3, 2, 14',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '0, 2, 5',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '3, 1, 6',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'false',
717: 1:      'question': '3, 1, 9',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'false',
717: 1:      'question': '3, 2, 9',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '10, 10, 0',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'false',
717: 1:      'question': '0, 0, 1',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'false',
717: 1:      'question': '0, 1, 1',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'false',
717: 1:      'question': '0, 0, 2',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '2, 0, 2',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'false',
717: 1:      'question': '0, 1, 2',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'false',
717: 1:      'question': '1, 1, 2',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'false',
717: 1:      'question': '2, 1, 3',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'false',
717: 1:      'question': '3, 1, 4',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '2, 1, 1',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '2, 2, 6',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '6, 1, 11',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '5, 0, 1',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '3, 1, 8',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '3, 2, 10',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '3, 2, 8',
717: 1:      'valid': true
717: 1:    }
717: 1:  ],
717: 1:  'info': [
717: 1:    '✅f(0, 1, 5) = true',
717: 1:    '✅f(1, 0, 1) = true',
717: 1:    '✅f(1, 0, 2) = false',
717: 1:    '✅f(3, 1, 7) = true',
717: 1:    '✅f(4, 2, 14) = true',
717: 1:    '✅f(3, 2, 14) = false',
717: 1:    '✅f(0, 2, 5) = true',
717: 1:    '✅f(3, 1, 6) = true',
717: 1:    '✅f(3, 1, 9) = false',
717: 1:    '✅f(3, 2, 9) = false',
717: 1:    '✅f(10, 10, 0) = true',
717: 1:    '✅f(0, 0, 1) = false',
717: 1:    '✅f(0, 1, 1) = false',
717: 1:    '✅f(0, 0, 2) = false',
717: 1:    '✅f(2, 0, 2) = true',
717: 1:    '✅f(0, 1, 2) = false',
717: 1:    '✅f(1, 1, 2) = false',
717: 1:    '✅f(2, 1, 3) = false',
717: 1:    '✅f(3, 1, 4) = false',
717: 1:    '✅f(2, 1, 1) = true',
717: 1:    '✅f(2, 2, 6) = true',
717: 1:    '✅f(6, 1, 11) = true',
717: 1:    '✅f(5, 0, 1) = true',
717: 1:    '✅f(3, 1, 8) = true',
717: 1:    '✅f(3, 2, 10) = true',
717: 1:    '✅f(3, 2, 8) = true',
717: 1:    '❌f(6, 0, 11) = ??? != false'
717: 1:  ],
717: 1:  'level': 26,
717: 1:  'nextQuestion': '6, 0, 11',
717: 1:  'questions': [
717: 1:    '0, 1, 5',
717: 1:    '1, 0, 1',
717: 1:    '1, 0, 2',
717: 1:    '3, 1, 7',
717: 1:    '4, 2, 14',
717: 1:    '3, 2, 14',
717: 1:    '0, 2, 5',
717: 1:    '3, 1, 6',
717: 1:    '3, 1, 9',
717: 1:    '3, 2, 9',
717: 1:    '10, 10, 0',
717: 1:    '0, 0, 1',
717: 1:    '0, 1, 1',
717: 1:    '0, 0, 2',
717: 1:    '2, 0, 2',
717: 1:    '0, 1, 2',
717: 1:    '1, 1, 2',
717: 1:    '2, 1, 3',
717: 1:    '3, 1, 4',
717: 1:    '2, 1, 1',
717: 1:    '2, 2, 6',
717: 1:    '6, 1, 11',
717: 1:    '5, 0, 1',
717: 1:    '3, 1, 8',
717: 1:    '3, 2, 10',
717: 1:    '3, 2, 8',
717: 1:    '6, 0, 11'
717: 1:  ]
717: 1:}
717: 1:Scores: 62504
717: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false']')
717: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
718: 1:BoardData {
718: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
718: 1:  'expectedAnswer': 'true',
718: 1:  'history': [
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '0, 1, 5',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '1, 0, 1',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'false',
718: 1:      'question': '1, 0, 2',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '3, 1, 7',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '4, 2, 14',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'false',
718: 1:      'question': '3, 2, 14',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '0, 2, 5',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '3, 1, 6',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'false',
718: 1:      'question': '3, 1, 9',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'false',
718: 1:      'question': '3, 2, 9',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '10, 10, 0',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'false',
718: 1:      'question': '0, 0, 1',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'false',
718: 1:      'question': '0, 1, 1',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'false',
718: 1:      'question': '0, 0, 2',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '2, 0, 2',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'false',
718: 1:      'question': '0, 1, 2',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'false',
718: 1:      'question': '1, 1, 2',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'false',
718: 1:      'question': '2, 1, 3',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'false',
718: 1:      'question': '3, 1, 4',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '2, 1, 1',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '2, 2, 6',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '6, 1, 11',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '5, 0, 1',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '3, 1, 8',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '3, 2, 10',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '3, 2, 8',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'false',
718: 1:      'question': '6, 0, 11',
718: 1:      'valid': true
718: 1:    }
718: 1:  ],
718: 1:  'info': [
718: 1:    '✅f(0, 1, 5) = true',
718: 1:    '✅f(1, 0, 1) = true',
718: 1:    '✅f(1, 0, 2) = false',
718: 1:    '✅f(3, 1, 7) = true',
718: 1:    '✅f(4, 2, 14) = true',
718: 1:    '✅f(3, 2, 14) = false',
718: 1:    '✅f(0, 2, 5) = true',
718: 1:    '✅f(3, 1, 6) = true',
718: 1:    '✅f(3, 1, 9) = false',
718: 1:    '✅f(3, 2, 9) = false',
718: 1:    '✅f(10, 10, 0) = true',
718: 1:    '✅f(0, 0, 1) = false',
718: 1:    '✅f(0, 1, 1) = false',
718: 1:    '✅f(0, 0, 2) = false',
718: 1:    '✅f(2, 0, 2) = true',
718: 1:    '✅f(0, 1, 2) = false',
718: 1:    '✅f(1, 1, 2) = false',
718: 1:    '✅f(2, 1, 3) = false',
718: 1:    '✅f(3, 1, 4) = false',
718: 1:    '✅f(2, 1, 1) = true',
718: 1:    '✅f(2, 2, 6) = true',
718: 1:    '✅f(6, 1, 11) = true',
718: 1:    '✅f(5, 0, 1) = true',
718: 1:    '✅f(3, 1, 8) = true',
718: 1:    '✅f(3, 2, 10) = true',
718: 1:    '✅f(3, 2, 8) = true',
718: 1:    '✅f(6, 0, 11) = false',
718: 1:    '❌f(1, 4, 11) = ??? != true'
718: 1:  ],
718: 1:  'level': 26,
718: 1:  'nextQuestion': '1, 4, 11',
718: 1:  'questions': [
718: 1:    '0, 1, 5',
718: 1:    '1, 0, 1',
718: 1:    '1, 0, 2',
718: 1:    '3, 1, 7',
718: 1:    '4, 2, 14',
718: 1:    '3, 2, 14',
718: 1:    '0, 2, 5',
718: 1:    '3, 1, 6',
718: 1:    '3, 1, 9',
718: 1:    '3, 2, 9',
718: 1:    '10, 10, 0',
718: 1:    '0, 0, 1',
718: 1:    '0, 1, 1',
718: 1:    '0, 0, 2',
718: 1:    '2, 0, 2',
718: 1:    '0, 1, 2',
718: 1:    '1, 1, 2',
718: 1:    '2, 1, 3',
718: 1:    '3, 1, 4',
718: 1:    '2, 1, 1',
718: 1:    '2, 2, 6',
718: 1:    '6, 1, 11',
718: 1:    '5, 0, 1',
718: 1:    '3, 1, 8',
718: 1:    '3, 2, 10',
718: 1:    '3, 2, 8',
718: 1:    '6, 0, 11',
718: 1:    '1, 4, 11'
718: 1:  ]
718: 1:}
718: 1:Scores: 62511
718: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true']')
718: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
719: 1:BoardData {
719: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
719: 1:  'expectedAnswer': 'true',
719: 1:  'history': [
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '0, 1, 5',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '1, 0, 1',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'false',
719: 1:      'question': '1, 0, 2',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '3, 1, 7',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '4, 2, 14',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'false',
719: 1:      'question': '3, 2, 14',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '0, 2, 5',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '3, 1, 6',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'false',
719: 1:      'question': '3, 1, 9',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'false',
719: 1:      'question': '3, 2, 9',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '10, 10, 0',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'false',
719: 1:      'question': '0, 0, 1',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'false',
719: 1:      'question': '0, 1, 1',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'false',
719: 1:      'question': '0, 0, 2',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '2, 0, 2',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'false',
719: 1:      'question': '0, 1, 2',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'false',
719: 1:      'question': '1, 1, 2',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'false',
719: 1:      'question': '2, 1, 3',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'false',
719: 1:      'question': '3, 1, 4',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '2, 1, 1',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '2, 2, 6',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '6, 1, 11',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '5, 0, 1',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '3, 1, 8',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '3, 2, 10',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '3, 2, 8',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'false',
719: 1:      'question': '6, 0, 11',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '1, 4, 11',
719: 1:      'valid': true
719: 1:    }
719: 1:  ],
719: 1:  'info': [
719: 1:    '✅f(0, 1, 5) = true',
719: 1:    '✅f(1, 0, 1) = true',
719: 1:    '✅f(1, 0, 2) = false',
719: 1:    '✅f(3, 1, 7) = true',
719: 1:    '✅f(4, 2, 14) = true',
719: 1:    '✅f(3, 2, 14) = false',
719: 1:    '✅f(0, 2, 5) = true',
719: 1:    '✅f(3, 1, 6) = true',
719: 1:    '✅f(3, 1, 9) = false',
719: 1:    '✅f(3, 2, 9) = false',
719: 1:    '✅f(10, 10, 0) = true',
719: 1:    '✅f(0, 0, 1) = false',
719: 1:    '✅f(0, 1, 1) = false',
719: 1:    '✅f(0, 0, 2) = false',
719: 1:    '✅f(2, 0, 2) = true',
719: 1:    '✅f(0, 1, 2) = false',
719: 1:    '✅f(1, 1, 2) = false',
719: 1:    '✅f(2, 1, 3) = false',
719: 1:    '✅f(3, 1, 4) = false',
719: 1:    '✅f(2, 1, 1) = true',
719: 1:    '✅f(2, 2, 6) = true',
719: 1:    '✅f(6, 1, 11) = true',
719: 1:    '✅f(5, 0, 1) = true',
719: 1:    '✅f(3, 1, 8) = true',
719: 1:    '✅f(3, 2, 10) = true',
719: 1:    '✅f(3, 2, 8) = true',
719: 1:    '✅f(6, 0, 11) = false',
719: 1:    '✅f(1, 4, 11) = true',
719: 1:    '❌f(0, 3, 10) = ??? != true'
719: 1:  ],
719: 1:  'level': 26,
719: 1:  'nextQuestion': '0, 3, 10',
719: 1:  'questions': [
719: 1:    '0, 1, 5',
719: 1:    '1, 0, 1',
719: 1:    '1, 0, 2',
719: 1:    '3, 1, 7',
719: 1:    '4, 2, 14',
719: 1:    '3, 2, 14',
719: 1:    '0, 2, 5',
719: 1:    '3, 1, 6',
719: 1:    '3, 1, 9',
719: 1:    '3, 2, 9',
719: 1:    '10, 10, 0',
719: 1:    '0, 0, 1',
719: 1:    '0, 1, 1',
719: 1:    '0, 0, 2',
719: 1:    '2, 0, 2',
719: 1:    '0, 1, 2',
719: 1:    '1, 1, 2',
719: 1:    '2, 1, 3',
719: 1:    '3, 1, 4',
719: 1:    '2, 1, 1',
719: 1:    '2, 2, 6',
719: 1:    '6, 1, 11',
719: 1:    '5, 0, 1',
719: 1:    '3, 1, 8',
719: 1:    '3, 2, 10',
719: 1:    '3, 2, 8',
719: 1:    '6, 0, 11',
719: 1:    '1, 4, 11',
719: 1:    '0, 3, 10'
719: 1:  ]
719: 1:}
719: 1:Scores: 62518
719: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true']')
719: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
720: 1:BoardData {
720: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
720: 1:  'expectedAnswer': 'false',
720: 1:  'history': [
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '0, 1, 5',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '1, 0, 1',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'false',
720: 1:      'question': '1, 0, 2',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '3, 1, 7',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '4, 2, 14',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'false',
720: 1:      'question': '3, 2, 14',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '0, 2, 5',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '3, 1, 6',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'false',
720: 1:      'question': '3, 1, 9',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'false',
720: 1:      'question': '3, 2, 9',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '10, 10, 0',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'false',
720: 1:      'question': '0, 0, 1',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'false',
720: 1:      'question': '0, 1, 1',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'false',
720: 1:      'question': '0, 0, 2',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '2, 0, 2',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'false',
720: 1:      'question': '0, 1, 2',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'false',
720: 1:      'question': '1, 1, 2',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'false',
720: 1:      'question': '2, 1, 3',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'false',
720: 1:      'question': '3, 1, 4',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '2, 1, 1',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '2, 2, 6',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '6, 1, 11',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '5, 0, 1',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '3, 1, 8',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '3, 2, 10',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '3, 2, 8',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'false',
720: 1:      'question': '6, 0, 11',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '1, 4, 11',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '0, 3, 10',
720: 1:      'valid': true
720: 1:    }
720: 1:  ],
720: 1:  'info': [
720: 1:    '✅f(0, 1, 5) = true',
720: 1:    '✅f(1, 0, 1) = true',
720: 1:    '✅f(1, 0, 2) = false',
720: 1:    '✅f(3, 1, 7) = true',
720: 1:    '✅f(4, 2, 14) = true',
720: 1:    '✅f(3, 2, 14) = false',
720: 1:    '✅f(0, 2, 5) = true',
720: 1:    '✅f(3, 1, 6) = true',
720: 1:    '✅f(3, 1, 9) = false',
720: 1:    '✅f(3, 2, 9) = false',
720: 1:    '✅f(10, 10, 0) = true',
720: 1:    '✅f(0, 0, 1) = false',
720: 1:    '✅f(0, 1, 1) = false',
720: 1:    '✅f(0, 0, 2) = false',
720: 1:    '✅f(2, 0, 2) = true',
720: 1:    '✅f(0, 1, 2) = false',
720: 1:    '✅f(1, 1, 2) = false',
720: 1:    '✅f(2, 1, 3) = false',
720: 1:    '✅f(3, 1, 4) = false',
720: 1:    '✅f(2, 1, 1) = true',
720: 1:    '✅f(2, 2, 6) = true',
720: 1:    '✅f(6, 1, 11) = true',
720: 1:    '✅f(5, 0, 1) = true',
720: 1:    '✅f(3, 1, 8) = true',
720: 1:    '✅f(3, 2, 10) = true',
720: 1:    '✅f(3, 2, 8) = true',
720: 1:    '✅f(6, 0, 11) = false',
720: 1:    '✅f(1, 4, 11) = true',
720: 1:    '✅f(0, 3, 10) = true',
720: 1:    '❌f(1, 4, 12) = ??? != false'
720: 1:  ],
720: 1:  'level': 26,
720: 1:  'nextQuestion': '1, 4, 12',
720: 1:  'questions': [
720: 1:    '0, 1, 5',
720: 1:    '1, 0, 1',
720: 1:    '1, 0, 2',
720: 1:    '3, 1, 7',
720: 1:    '4, 2, 14',
720: 1:    '3, 2, 14',
720: 1:    '0, 2, 5',
720: 1:    '3, 1, 6',
720: 1:    '3, 1, 9',
720: 1:    '3, 2, 9',
720: 1:    '10, 10, 0',
720: 1:    '0, 0, 1',
720: 1:    '0, 1, 1',
720: 1:    '0, 0, 2',
720: 1:    '2, 0, 2',
720: 1:    '0, 1, 2',
720: 1:    '1, 1, 2',
720: 1:    '2, 1, 3',
720: 1:    '3, 1, 4',
720: 1:    '2, 1, 1',
720: 1:    '2, 2, 6',
720: 1:    '6, 1, 11',
720: 1:    '5, 0, 1',
720: 1:    '3, 1, 8',
720: 1:    '3, 2, 10',
720: 1:    '3, 2, 8',
720: 1:    '6, 0, 11',
720: 1:    '1, 4, 11',
720: 1:    '0, 3, 10',
720: 1:    '1, 4, 12'
720: 1:  ]
720: 1:}
720: 1:Scores: 62525
720: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false']')
720: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
721: 1:BoardData {
721: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
721: 1:  'expectedAnswer': 'false',
721: 1:  'history': [
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '0, 1, 5',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '1, 0, 1',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'false',
721: 1:      'question': '1, 0, 2',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '3, 1, 7',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '4, 2, 14',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'false',
721: 1:      'question': '3, 2, 14',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '0, 2, 5',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '3, 1, 6',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'false',
721: 1:      'question': '3, 1, 9',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'false',
721: 1:      'question': '3, 2, 9',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '10, 10, 0',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'false',
721: 1:      'question': '0, 0, 1',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'false',
721: 1:      'question': '0, 1, 1',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'false',
721: 1:      'question': '0, 0, 2',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '2, 0, 2',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'false',
721: 1:      'question': '0, 1, 2',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'false',
721: 1:      'question': '1, 1, 2',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'false',
721: 1:      'question': '2, 1, 3',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'false',
721: 1:      'question': '3, 1, 4',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '2, 1, 1',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '2, 2, 6',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '6, 1, 11',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '5, 0, 1',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '3, 1, 8',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '3, 2, 10',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '3, 2, 8',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'false',
721: 1:      'question': '6, 0, 11',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '1, 4, 11',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '0, 3, 10',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'false',
721: 1:      'question': '1, 4, 12',
721: 1:      'valid': true
721: 1:    }
721: 1:  ],
721: 1:  'info': [
721: 1:    '✅f(0, 1, 5) = true',
721: 1:    '✅f(1, 0, 1) = true',
721: 1:    '✅f(1, 0, 2) = false',
721: 1:    '✅f(3, 1, 7) = true',
721: 1:    '✅f(4, 2, 14) = true',
721: 1:    '✅f(3, 2, 14) = false',
721: 1:    '✅f(0, 2, 5) = true',
721: 1:    '✅f(3, 1, 6) = true',
721: 1:    '✅f(3, 1, 9) = false',
721: 1:    '✅f(3, 2, 9) = false',
721: 1:    '✅f(10, 10, 0) = true',
721: 1:    '✅f(0, 0, 1) = false',
721: 1:    '✅f(0, 1, 1) = false',
721: 1:    '✅f(0, 0, 2) = false',
721: 1:    '✅f(2, 0, 2) = true',
721: 1:    '✅f(0, 1, 2) = false',
721: 1:    '✅f(1, 1, 2) = false',
721: 1:    '✅f(2, 1, 3) = false',
721: 1:    '✅f(3, 1, 4) = false',
721: 1:    '✅f(2, 1, 1) = true',
721: 1:    '✅f(2, 2, 6) = true',
721: 1:    '✅f(6, 1, 11) = true',
721: 1:    '✅f(5, 0, 1) = true',
721: 1:    '✅f(3, 1, 8) = true',
721: 1:    '✅f(3, 2, 10) = true',
721: 1:    '✅f(3, 2, 8) = true',
721: 1:    '✅f(6, 0, 11) = false',
721: 1:    '✅f(1, 4, 11) = true',
721: 1:    '✅f(0, 3, 10) = true',
721: 1:    '✅f(1, 4, 12) = false',
721: 1:    '❌f(1, 1, 7) = ??? != false'
721: 1:  ],
721: 1:  'level': 26,
721: 1:  'nextQuestion': '1, 1, 7',
721: 1:  'questions': [
721: 1:    '0, 1, 5',
721: 1:    '1, 0, 1',
721: 1:    '1, 0, 2',
721: 1:    '3, 1, 7',
721: 1:    '4, 2, 14',
721: 1:    '3, 2, 14',
721: 1:    '0, 2, 5',
721: 1:    '3, 1, 6',
721: 1:    '3, 1, 9',
721: 1:    '3, 2, 9',
721: 1:    '10, 10, 0',
721: 1:    '0, 0, 1',
721: 1:    '0, 1, 1',
721: 1:    '0, 0, 2',
721: 1:    '2, 0, 2',
721: 1:    '0, 1, 2',
721: 1:    '1, 1, 2',
721: 1:    '2, 1, 3',
721: 1:    '3, 1, 4',
721: 1:    '2, 1, 1',
721: 1:    '2, 2, 6',
721: 1:    '6, 1, 11',
721: 1:    '5, 0, 1',
721: 1:    '3, 1, 8',
721: 1:    '3, 2, 10',
721: 1:    '3, 2, 8',
721: 1:    '6, 0, 11',
721: 1:    '1, 4, 11',
721: 1:    '0, 3, 10',
721: 1:    '1, 4, 12',
721: 1:    '1, 1, 7'
721: 1:  ]
721: 1:}
721: 1:Scores: 62532
721: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false']')
721: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
722: 1:BoardData {
722: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
722: 1:  'expectedAnswer': 'true',
722: 1:  'history': [
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '0, 1, 5',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '1, 0, 1',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'false',
722: 1:      'question': '1, 0, 2',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '3, 1, 7',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '4, 2, 14',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'false',
722: 1:      'question': '3, 2, 14',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '0, 2, 5',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '3, 1, 6',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'false',
722: 1:      'question': '3, 1, 9',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'false',
722: 1:      'question': '3, 2, 9',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '10, 10, 0',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'false',
722: 1:      'question': '0, 0, 1',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'false',
722: 1:      'question': '0, 1, 1',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'false',
722: 1:      'question': '0, 0, 2',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '2, 0, 2',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'false',
722: 1:      'question': '0, 1, 2',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'false',
722: 1:      'question': '1, 1, 2',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'false',
722: 1:      'question': '2, 1, 3',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'false',
722: 1:      'question': '3, 1, 4',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '2, 1, 1',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '2, 2, 6',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '6, 1, 11',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '5, 0, 1',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '3, 1, 8',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '3, 2, 10',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '3, 2, 8',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'false',
722: 1:      'question': '6, 0, 11',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '1, 4, 11',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '0, 3, 10',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'false',
722: 1:      'question': '1, 4, 12',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'false',
722: 1:      'question': '1, 1, 7',
722: 1:      'valid': true
722: 1:    }
722: 1:  ],
722: 1:  'info': [
722: 1:    '✅f(0, 1, 5) = true',
722: 1:    '✅f(1, 0, 1) = true',
722: 1:    '✅f(1, 0, 2) = false',
722: 1:    '✅f(3, 1, 7) = true',
722: 1:    '✅f(4, 2, 14) = true',
722: 1:    '✅f(3, 2, 14) = false',
722: 1:    '✅f(0, 2, 5) = true',
722: 1:    '✅f(3, 1, 6) = true',
722: 1:    '✅f(3, 1, 9) = false',
722: 1:    '✅f(3, 2, 9) = false',
722: 1:    '✅f(10, 10, 0) = true',
722: 1:    '✅f(0, 0, 1) = false',
722: 1:    '✅f(0, 1, 1) = false',
722: 1:    '✅f(0, 0, 2) = false',
722: 1:    '✅f(2, 0, 2) = true',
722: 1:    '✅f(0, 1, 2) = false',
722: 1:    '✅f(1, 1, 2) = false',
722: 1:    '✅f(2, 1, 3) = false',
722: 1:    '✅f(3, 1, 4) = false',
722: 1:    '✅f(2, 1, 1) = true',
722: 1:    '✅f(2, 2, 6) = true',
722: 1:    '✅f(6, 1, 11) = true',
722: 1:    '✅f(5, 0, 1) = true',
722: 1:    '✅f(3, 1, 8) = true',
722: 1:    '✅f(3, 2, 10) = true',
722: 1:    '✅f(3, 2, 8) = true',
722: 1:    '✅f(6, 0, 11) = false',
722: 1:    '✅f(1, 4, 11) = true',
722: 1:    '✅f(0, 3, 10) = true',
722: 1:    '✅f(1, 4, 12) = false',
722: 1:    '✅f(1, 1, 7) = false',
722: 1:    '❌f(2, 1, 7) = ??? != true'
722: 1:  ],
722: 1:  'level': 26,
722: 1:  'nextQuestion': '2, 1, 7',
722: 1:  'questions': [
722: 1:    '0, 1, 5',
722: 1:    '1, 0, 1',
722: 1:    '1, 0, 2',
722: 1:    '3, 1, 7',
722: 1:    '4, 2, 14',
722: 1:    '3, 2, 14',
722: 1:    '0, 2, 5',
722: 1:    '3, 1, 6',
722: 1:    '3, 1, 9',
722: 1:    '3, 2, 9',
722: 1:    '10, 10, 0',
722: 1:    '0, 0, 1',
722: 1:    '0, 1, 1',
722: 1:    '0, 0, 2',
722: 1:    '2, 0, 2',
722: 1:    '0, 1, 2',
722: 1:    '1, 1, 2',
722: 1:    '2, 1, 3',
722: 1:    '3, 1, 4',
722: 1:    '2, 1, 1',
722: 1:    '2, 2, 6',
722: 1:    '6, 1, 11',
722: 1:    '5, 0, 1',
722: 1:    '3, 1, 8',
722: 1:    '3, 2, 10',
722: 1:    '3, 2, 8',
722: 1:    '6, 0, 11',
722: 1:    '1, 4, 11',
722: 1:    '0, 3, 10',
722: 1:    '1, 4, 12',
722: 1:    '1, 1, 7',
722: 1:    '2, 1, 7'
722: 1:  ]
722: 1:}
722: 1:Scores: 62539
722: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true']')
722: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
723: 1:BoardData {
723: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
723: 1:  'expectedAnswer': 'true',
723: 1:  'history': [
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '0, 1, 5',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '1, 0, 1',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'false',
723: 1:      'question': '1, 0, 2',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '3, 1, 7',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '4, 2, 14',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'false',
723: 1:      'question': '3, 2, 14',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '0, 2, 5',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '3, 1, 6',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'false',
723: 1:      'question': '3, 1, 9',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'false',
723: 1:      'question': '3, 2, 9',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '10, 10, 0',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'false',
723: 1:      'question': '0, 0, 1',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'false',
723: 1:      'question': '0, 1, 1',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'false',
723: 1:      'question': '0, 0, 2',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '2, 0, 2',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'false',
723: 1:      'question': '0, 1, 2',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'false',
723: 1:      'question': '1, 1, 2',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'false',
723: 1:      'question': '2, 1, 3',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'false',
723: 1:      'question': '3, 1, 4',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '2, 1, 1',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '2, 2, 6',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '6, 1, 11',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '5, 0, 1',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '3, 1, 8',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '3, 2, 10',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '3, 2, 8',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'false',
723: 1:      'question': '6, 0, 11',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '1, 4, 11',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '0, 3, 10',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'false',
723: 1:      'question': '1, 4, 12',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'false',
723: 1:      'question': '1, 1, 7',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '2, 1, 7',
723: 1:      'valid': true
723: 1:    }
723: 1:  ],
723: 1:  'info': [
723: 1:    '✅f(0, 1, 5) = true',
723: 1:    '✅f(1, 0, 1) = true',
723: 1:    '✅f(1, 0, 2) = false',
723: 1:    '✅f(3, 1, 7) = true',
723: 1:    '✅f(4, 2, 14) = true',
723: 1:    '✅f(3, 2, 14) = false',
723: 1:    '✅f(0, 2, 5) = true',
723: 1:    '✅f(3, 1, 6) = true',
723: 1:    '✅f(3, 1, 9) = false',
723: 1:    '✅f(3, 2, 9) = false',
723: 1:    '✅f(10, 10, 0) = true',
723: 1:    '✅f(0, 0, 1) = false',
723: 1:    '✅f(0, 1, 1) = false',
723: 1:    '✅f(0, 0, 2) = false',
723: 1:    '✅f(2, 0, 2) = true',
723: 1:    '✅f(0, 1, 2) = false',
723: 1:    '✅f(1, 1, 2) = false',
723: 1:    '✅f(2, 1, 3) = false',
723: 1:    '✅f(3, 1, 4) = false',
723: 1:    '✅f(2, 1, 1) = true',
723: 1:    '✅f(2, 2, 6) = true',
723: 1:    '✅f(6, 1, 11) = true',
723: 1:    '✅f(5, 0, 1) = true',
723: 1:    '✅f(3, 1, 8) = true',
723: 1:    '✅f(3, 2, 10) = true',
723: 1:    '✅f(3, 2, 8) = true',
723: 1:    '✅f(6, 0, 11) = false',
723: 1:    '✅f(1, 4, 11) = true',
723: 1:    '✅f(0, 3, 10) = true',
723: 1:    '✅f(1, 4, 12) = false',
723: 1:    '✅f(1, 1, 7) = false',
723: 1:    '✅f(2, 1, 7) = true',
723: 1:    '❌f(7, 1, 11) = ??? != true'
723: 1:  ],
723: 1:  'level': 26,
723: 1:  'nextQuestion': '7, 1, 11',
723: 1:  'questions': [
723: 1:    '0, 1, 5',
723: 1:    '1, 0, 1',
723: 1:    '1, 0, 2',
723: 1:    '3, 1, 7',
723: 1:    '4, 2, 14',
723: 1:    '3, 2, 14',
723: 1:    '0, 2, 5',
723: 1:    '3, 1, 6',
723: 1:    '3, 1, 9',
723: 1:    '3, 2, 9',
723: 1:    '10, 10, 0',
723: 1:    '0, 0, 1',
723: 1:    '0, 1, 1',
723: 1:    '0, 0, 2',
723: 1:    '2, 0, 2',
723: 1:    '0, 1, 2',
723: 1:    '1, 1, 2',
723: 1:    '2, 1, 3',
723: 1:    '3, 1, 4',
723: 1:    '2, 1, 1',
723: 1:    '2, 2, 6',
723: 1:    '6, 1, 11',
723: 1:    '5, 0, 1',
723: 1:    '3, 1, 8',
723: 1:    '3, 2, 10',
723: 1:    '3, 2, 8',
723: 1:    '6, 0, 11',
723: 1:    '1, 4, 11',
723: 1:    '0, 3, 10',
723: 1:    '1, 4, 12',
723: 1:    '1, 1, 7',
723: 1:    '2, 1, 7',
723: 1:    '7, 1, 11'
723: 1:  ]
723: 1:}
723: 1:Scores: 62546
723: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true']')
723: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
724: 1:BoardData {
724: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
724: 1:  'expectedAnswer': 'true',
724: 1:  'history': [
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '0, 1, 5',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '1, 0, 1',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'false',
724: 1:      'question': '1, 0, 2',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '3, 1, 7',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '4, 2, 14',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'false',
724: 1:      'question': '3, 2, 14',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '0, 2, 5',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '3, 1, 6',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'false',
724: 1:      'question': '3, 1, 9',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'false',
724: 1:      'question': '3, 2, 9',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '10, 10, 0',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'false',
724: 1:      'question': '0, 0, 1',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'false',
724: 1:      'question': '0, 1, 1',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'false',
724: 1:      'question': '0, 0, 2',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '2, 0, 2',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'false',
724: 1:      'question': '0, 1, 2',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'false',
724: 1:      'question': '1, 1, 2',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'false',
724: 1:      'question': '2, 1, 3',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'false',
724: 1:      'question': '3, 1, 4',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '2, 1, 1',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '2, 2, 6',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '6, 1, 11',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '5, 0, 1',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '3, 1, 8',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '3, 2, 10',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '3, 2, 8',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'false',
724: 1:      'question': '6, 0, 11',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '1, 4, 11',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '0, 3, 10',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'false',
724: 1:      'question': '1, 4, 12',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'false',
724: 1:      'question': '1, 1, 7',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '2, 1, 7',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '7, 1, 11',
724: 1:      'valid': true
724: 1:    }
724: 1:  ],
724: 1:  'info': [
724: 1:    '✅f(0, 1, 5) = true',
724: 1:    '✅f(1, 0, 1) = true',
724: 1:    '✅f(1, 0, 2) = false',
724: 1:    '✅f(3, 1, 7) = true',
724: 1:    '✅f(4, 2, 14) = true',
724: 1:    '✅f(3, 2, 14) = false',
724: 1:    '✅f(0, 2, 5) = true',
724: 1:    '✅f(3, 1, 6) = true',
724: 1:    '✅f(3, 1, 9) = false',
724: 1:    '✅f(3, 2, 9) = false',
724: 1:    '✅f(10, 10, 0) = true',
724: 1:    '✅f(0, 0, 1) = false',
724: 1:    '✅f(0, 1, 1) = false',
724: 1:    '✅f(0, 0, 2) = false',
724: 1:    '✅f(2, 0, 2) = true',
724: 1:    '✅f(0, 1, 2) = false',
724: 1:    '✅f(1, 1, 2) = false',
724: 1:    '✅f(2, 1, 3) = false',
724: 1:    '✅f(3, 1, 4) = false',
724: 1:    '✅f(2, 1, 1) = true',
724: 1:    '✅f(2, 2, 6) = true',
724: 1:    '✅f(6, 1, 11) = true',
724: 1:    '✅f(5, 0, 1) = true',
724: 1:    '✅f(3, 1, 8) = true',
724: 1:    '✅f(3, 2, 10) = true',
724: 1:    '✅f(3, 2, 8) = true',
724: 1:    '✅f(6, 0, 11) = false',
724: 1:    '✅f(1, 4, 11) = true',
724: 1:    '✅f(0, 3, 10) = true',
724: 1:    '✅f(1, 4, 12) = false',
724: 1:    '✅f(1, 1, 7) = false',
724: 1:    '✅f(2, 1, 7) = true',
724: 1:    '✅f(7, 1, 11) = true',
724: 1:    '❌f(7, 1, 8) = ??? != true'
724: 1:  ],
724: 1:  'level': 26,
724: 1:  'nextQuestion': '7, 1, 8',
724: 1:  'questions': [
724: 1:    '0, 1, 5',
724: 1:    '1, 0, 1',
724: 1:    '1, 0, 2',
724: 1:    '3, 1, 7',
724: 1:    '4, 2, 14',
724: 1:    '3, 2, 14',
724: 1:    '0, 2, 5',
724: 1:    '3, 1, 6',
724: 1:    '3, 1, 9',
724: 1:    '3, 2, 9',
724: 1:    '10, 10, 0',
724: 1:    '0, 0, 1',
724: 1:    '0, 1, 1',
724: 1:    '0, 0, 2',
724: 1:    '2, 0, 2',
724: 1:    '0, 1, 2',
724: 1:    '1, 1, 2',
724: 1:    '2, 1, 3',
724: 1:    '3, 1, 4',
724: 1:    '2, 1, 1',
724: 1:    '2, 2, 6',
724: 1:    '6, 1, 11',
724: 1:    '5, 0, 1',
724: 1:    '3, 1, 8',
724: 1:    '3, 2, 10',
724: 1:    '3, 2, 8',
724: 1:    '6, 0, 11',
724: 1:    '1, 4, 11',
724: 1:    '0, 3, 10',
724: 1:    '1, 4, 12',
724: 1:    '1, 1, 7',
724: 1:    '2, 1, 7',
724: 1:    '7, 1, 11',
724: 1:    '7, 1, 8'
724: 1:  ]
724: 1:}
724: 1:Scores: 62553
724: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true']')
724: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
725: 1:BoardData {
725: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
725: 1:  'expectedAnswer': 'false',
725: 1:  'history': [
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '0, 1, 5',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '1, 0, 1',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'false',
725: 1:      'question': '1, 0, 2',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '3, 1, 7',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '4, 2, 14',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'false',
725: 1:      'question': '3, 2, 14',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '0, 2, 5',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '3, 1, 6',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'false',
725: 1:      'question': '3, 1, 9',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'false',
725: 1:      'question': '3, 2, 9',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '10, 10, 0',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'false',
725: 1:      'question': '0, 0, 1',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'false',
725: 1:      'question': '0, 1, 1',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'false',
725: 1:      'question': '0, 0, 2',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '2, 0, 2',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'false',
725: 1:      'question': '0, 1, 2',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'false',
725: 1:      'question': '1, 1, 2',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'false',
725: 1:      'question': '2, 1, 3',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'false',
725: 1:      'question': '3, 1, 4',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '2, 1, 1',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '2, 2, 6',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '6, 1, 11',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '5, 0, 1',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '3, 1, 8',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '3, 2, 10',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '3, 2, 8',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'false',
725: 1:      'question': '6, 0, 11',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '1, 4, 11',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '0, 3, 10',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'false',
725: 1:      'question': '1, 4, 12',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'false',
725: 1:      'question': '1, 1, 7',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '2, 1, 7',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '7, 1, 11',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '7, 1, 8',
725: 1:      'valid': true
725: 1:    }
725: 1:  ],
725: 1:  'info': [
725: 1:    '✅f(0, 1, 5) = true',
725: 1:    '✅f(1, 0, 1) = true',
725: 1:    '✅f(1, 0, 2) = false',
725: 1:    '✅f(3, 1, 7) = true',
725: 1:    '✅f(4, 2, 14) = true',
725: 1:    '✅f(3, 2, 14) = false',
725: 1:    '✅f(0, 2, 5) = true',
725: 1:    '✅f(3, 1, 6) = true',
725: 1:    '✅f(3, 1, 9) = false',
725: 1:    '✅f(3, 2, 9) = false',
725: 1:    '✅f(10, 10, 0) = true',
725: 1:    '✅f(0, 0, 1) = false',
725: 1:    '✅f(0, 1, 1) = false',
725: 1:    '✅f(0, 0, 2) = false',
725: 1:    '✅f(2, 0, 2) = true',
725: 1:    '✅f(0, 1, 2) = false',
725: 1:    '✅f(1, 1, 2) = false',
725: 1:    '✅f(2, 1, 3) = false',
725: 1:    '✅f(3, 1, 4) = false',
725: 1:    '✅f(2, 1, 1) = true',
725: 1:    '✅f(2, 2, 6) = true',
725: 1:    '✅f(6, 1, 11) = true',
725: 1:    '✅f(5, 0, 1) = true',
725: 1:    '✅f(3, 1, 8) = true',
725: 1:    '✅f(3, 2, 10) = true',
725: 1:    '✅f(3, 2, 8) = true',
725: 1:    '✅f(6, 0, 11) = false',
725: 1:    '✅f(1, 4, 11) = true',
725: 1:    '✅f(0, 3, 10) = true',
725: 1:    '✅f(1, 4, 12) = false',
725: 1:    '✅f(1, 1, 7) = false',
725: 1:    '✅f(2, 1, 7) = true',
725: 1:    '✅f(7, 1, 11) = true',
725: 1:    '✅f(7, 1, 8) = true',
725: 1:    '❌f(7, 1, 13) = ??? != false'
725: 1:  ],
725: 1:  'level': 26,
725: 1:  'nextQuestion': '7, 1, 13',
725: 1:  'questions': [
725: 1:    '0, 1, 5',
725: 1:    '1, 0, 1',
725: 1:    '1, 0, 2',
725: 1:    '3, 1, 7',
725: 1:    '4, 2, 14',
725: 1:    '3, 2, 14',
725: 1:    '0, 2, 5',
725: 1:    '3, 1, 6',
725: 1:    '3, 1, 9',
725: 1:    '3, 2, 9',
725: 1:    '10, 10, 0',
725: 1:    '0, 0, 1',
725: 1:    '0, 1, 1',
725: 1:    '0, 0, 2',
725: 1:    '2, 0, 2',
725: 1:    '0, 1, 2',
725: 1:    '1, 1, 2',
725: 1:    '2, 1, 3',
725: 1:    '3, 1, 4',
725: 1:    '2, 1, 1',
725: 1:    '2, 2, 6',
725: 1:    '6, 1, 11',
725: 1:    '5, 0, 1',
725: 1:    '3, 1, 8',
725: 1:    '3, 2, 10',
725: 1:    '3, 2, 8',
725: 1:    '6, 0, 11',
725: 1:    '1, 4, 11',
725: 1:    '0, 3, 10',
725: 1:    '1, 4, 12',
725: 1:    '1, 1, 7',
725: 1:    '2, 1, 7',
725: 1:    '7, 1, 11',
725: 1:    '7, 1, 8',
725: 1:    '7, 1, 13'
725: 1:  ]
725: 1:}
725: 1:Scores: 62560
725: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false']')
725: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
726: 1:BoardData {
726: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
726: 1:  'expectedAnswer': 'true',
726: 1:  'history': [
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '0, 1, 5',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '1, 0, 1',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '1, 0, 2',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '3, 1, 7',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '4, 2, 14',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '3, 2, 14',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '0, 2, 5',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '3, 1, 6',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '3, 1, 9',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '3, 2, 9',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '10, 10, 0',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '0, 0, 1',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '0, 1, 1',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '0, 0, 2',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '2, 0, 2',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '0, 1, 2',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '1, 1, 2',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '2, 1, 3',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '3, 1, 4',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '2, 1, 1',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '2, 2, 6',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '6, 1, 11',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '5, 0, 1',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '3, 1, 8',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '3, 2, 10',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '3, 2, 8',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '6, 0, 11',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '1, 4, 11',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '0, 3, 10',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '1, 4, 12',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '1, 1, 7',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '2, 1, 7',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '7, 1, 11',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '7, 1, 8',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '7, 1, 13',
726: 1:      'valid': true
726: 1:    }
726: 1:  ],
726: 1:  'info': [
726: 1:    '✅f(0, 1, 5) = true',
726: 1:    '✅f(1, 0, 1) = true',
726: 1:    '✅f(1, 0, 2) = false',
726: 1:    '✅f(3, 1, 7) = true',
726: 1:    '✅f(4, 2, 14) = true',
726: 1:    '✅f(3, 2, 14) = false',
726: 1:    '✅f(0, 2, 5) = true',
726: 1:    '✅f(3, 1, 6) = true',
726: 1:    '✅f(3, 1, 9) = false',
726: 1:    '✅f(3, 2, 9) = false',
726: 1:    '✅f(10, 10, 0) = true',
726: 1:    '✅f(0, 0, 1) = false',
726: 1:    '✅f(0, 1, 1) = false',
726: 1:    '✅f(0, 0, 2) = false',
726: 1:    '✅f(2, 0, 2) = true',
726: 1:    '✅f(0, 1, 2) = false',
726: 1:    '✅f(1, 1, 2) = false',
726: 1:    '✅f(2, 1, 3) = false',
726: 1:    '✅f(3, 1, 4) = false',
726: 1:    '✅f(2, 1, 1) = true',
726: 1:    '✅f(2, 2, 6) = true',
726: 1:    '✅f(6, 1, 11) = true',
726: 1:    '✅f(5, 0, 1) = true',
726: 1:    '✅f(3, 1, 8) = true',
726: 1:    '✅f(3, 2, 10) = true',
726: 1:    '✅f(3, 2, 8) = true',
726: 1:    '✅f(6, 0, 11) = false',
726: 1:    '✅f(1, 4, 11) = true',
726: 1:    '✅f(0, 3, 10) = true',
726: 1:    '✅f(1, 4, 12) = false',
726: 1:    '✅f(1, 1, 7) = false',
726: 1:    '✅f(2, 1, 7) = true',
726: 1:    '✅f(7, 1, 11) = true',
726: 1:    '✅f(7, 1, 8) = true',
726: 1:    '✅f(7, 1, 13) = false',
726: 1:    '❌f(43, 1, 46) = ??? != true'
726: 1:  ],
726: 1:  'level': 26,
726: 1:  'nextQuestion': '43, 1, 46',
726: 1:  'questions': [
726: 1:    '0, 1, 5',
726: 1:    '1, 0, 1',
726: 1:    '1, 0, 2',
726: 1:    '3, 1, 7',
726: 1:    '4, 2, 14',
726: 1:    '3, 2, 14',
726: 1:    '0, 2, 5',
726: 1:    '3, 1, 6',
726: 1:    '3, 1, 9',
726: 1:    '3, 2, 9',
726: 1:    '10, 10, 0',
726: 1:    '0, 0, 1',
726: 1:    '0, 1, 1',
726: 1:    '0, 0, 2',
726: 1:    '2, 0, 2',
726: 1:    '0, 1, 2',
726: 1:    '1, 1, 2',
726: 1:    '2, 1, 3',
726: 1:    '3, 1, 4',
726: 1:    '2, 1, 1',
726: 1:    '2, 2, 6',
726: 1:    '6, 1, 11',
726: 1:    '5, 0, 1',
726: 1:    '3, 1, 8',
726: 1:    '3, 2, 10',
726: 1:    '3, 2, 8',
726: 1:    '6, 0, 11',
726: 1:    '1, 4, 11',
726: 1:    '0, 3, 10',
726: 1:    '1, 4, 12',
726: 1:    '1, 1, 7',
726: 1:    '2, 1, 7',
726: 1:    '7, 1, 11',
726: 1:    '7, 1, 8',
726: 1:    '7, 1, 13',
726: 1:    '43, 1, 46'
726: 1:  ]
726: 1:}
726: 1:Scores: 62567
726: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true']')
726: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
727: 1:BoardData {
727: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
727: 1:  'expectedAnswer': 'false',
727: 1:  'history': [
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '0, 1, 5',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '1, 0, 1',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '1, 0, 2',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '3, 1, 7',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '4, 2, 14',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '3, 2, 14',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '0, 2, 5',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '3, 1, 6',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '3, 1, 9',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '3, 2, 9',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '10, 10, 0',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '0, 0, 1',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '0, 1, 1',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '0, 0, 2',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '2, 0, 2',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '0, 1, 2',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '1, 1, 2',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '2, 1, 3',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '3, 1, 4',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '2, 1, 1',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '2, 2, 6',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '6, 1, 11',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '5, 0, 1',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '3, 1, 8',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '3, 2, 10',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '3, 2, 8',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '6, 0, 11',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '1, 4, 11',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '0, 3, 10',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '1, 4, 12',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '1, 1, 7',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '2, 1, 7',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '7, 1, 11',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '7, 1, 8',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '7, 1, 13',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '43, 1, 46',
727: 1:      'valid': true
727: 1:    }
727: 1:  ],
727: 1:  'info': [
727: 1:    '✅f(0, 1, 5) = true',
727: 1:    '✅f(1, 0, 1) = true',
727: 1:    '✅f(1, 0, 2) = false',
727: 1:    '✅f(3, 1, 7) = true',
727: 1:    '✅f(4, 2, 14) = true',
727: 1:    '✅f(3, 2, 14) = false',
727: 1:    '✅f(0, 2, 5) = true',
727: 1:    '✅f(3, 1, 6) = true',
727: 1:    '✅f(3, 1, 9) = false',
727: 1:    '✅f(3, 2, 9) = false',
727: 1:    '✅f(10, 10, 0) = true',
727: 1:    '✅f(0, 0, 1) = false',
727: 1:    '✅f(0, 1, 1) = false',
727: 1:    '✅f(0, 0, 2) = false',
727: 1:    '✅f(2, 0, 2) = true',
727: 1:    '✅f(0, 1, 2) = false',
727: 1:    '✅f(1, 1, 2) = false',
727: 1:    '✅f(2, 1, 3) = false',
727: 1:    '✅f(3, 1, 4) = false',
727: 1:    '✅f(2, 1, 1) = true',
727: 1:    '✅f(2, 2, 6) = true',
727: 1:    '✅f(6, 1, 11) = true',
727: 1:    '✅f(5, 0, 1) = true',
727: 1:    '✅f(3, 1, 8) = true',
727: 1:    '✅f(3, 2, 10) = true',
727: 1:    '✅f(3, 2, 8) = true',
727: 1:    '✅f(6, 0, 11) = false',
727: 1:    '✅f(1, 4, 11) = true',
727: 1:    '✅f(0, 3, 10) = true',
727: 1:    '✅f(1, 4, 12) = false',
727: 1:    '✅f(1, 1, 7) = false',
727: 1:    '✅f(2, 1, 7) = true',
727: 1:    '✅f(7, 1, 11) = true',
727: 1:    '✅f(7, 1, 8) = true',
727: 1:    '✅f(7, 1, 13) = false',
727: 1:    '✅f(43, 1, 46) = true',
727: 1:    '❌f(40, 1, 46) = ??? != false'
727: 1:  ],
727: 1:  'level': 26,
727: 1:  'nextQuestion': '40, 1, 46',
727: 1:  'questions': [
727: 1:    '0, 1, 5',
727: 1:    '1, 0, 1',
727: 1:    '1, 0, 2',
727: 1:    '3, 1, 7',
727: 1:    '4, 2, 14',
727: 1:    '3, 2, 14',
727: 1:    '0, 2, 5',
727: 1:    '3, 1, 6',
727: 1:    '3, 1, 9',
727: 1:    '3, 2, 9',
727: 1:    '10, 10, 0',
727: 1:    '0, 0, 1',
727: 1:    '0, 1, 1',
727: 1:    '0, 0, 2',
727: 1:    '2, 0, 2',
727: 1:    '0, 1, 2',
727: 1:    '1, 1, 2',
727: 1:    '2, 1, 3',
727: 1:    '3, 1, 4',
727: 1:    '2, 1, 1',
727: 1:    '2, 2, 6',
727: 1:    '6, 1, 11',
727: 1:    '5, 0, 1',
727: 1:    '3, 1, 8',
727: 1:    '3, 2, 10',
727: 1:    '3, 2, 8',
727: 1:    '6, 0, 11',
727: 1:    '1, 4, 11',
727: 1:    '0, 3, 10',
727: 1:    '1, 4, 12',
727: 1:    '1, 1, 7',
727: 1:    '2, 1, 7',
727: 1:    '7, 1, 11',
727: 1:    '7, 1, 8',
727: 1:    '7, 1, 13',
727: 1:    '43, 1, 46',
727: 1:    '40, 1, 46'
727: 1:  ]
727: 1:}
727: 1:Scores: 62574
727: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false']')
727: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
728: 1:BoardData {
728: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
728: 1:  'expectedAnswer': 'true',
728: 1:  'history': [
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '0, 1, 5',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '1, 0, 1',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '1, 0, 2',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '3, 1, 7',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '4, 2, 14',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '3, 2, 14',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '0, 2, 5',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '3, 1, 6',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '3, 1, 9',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '3, 2, 9',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '10, 10, 0',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '0, 0, 1',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '0, 1, 1',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '0, 0, 2',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '2, 0, 2',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '0, 1, 2',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '1, 1, 2',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '2, 1, 3',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '3, 1, 4',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '2, 1, 1',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '2, 2, 6',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '6, 1, 11',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '5, 0, 1',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '3, 1, 8',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '3, 2, 10',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '3, 2, 8',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '6, 0, 11',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '1, 4, 11',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '0, 3, 10',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '1, 4, 12',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '1, 1, 7',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '2, 1, 7',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '7, 1, 11',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '7, 1, 8',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '7, 1, 13',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '43, 1, 46',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '40, 1, 46',
728: 1:      'valid': true
728: 1:    }
728: 1:  ],
728: 1:  'info': [
728: 1:    '✅f(0, 1, 5) = true',
728: 1:    '✅f(1, 0, 1) = true',
728: 1:    '✅f(1, 0, 2) = false',
728: 1:    '✅f(3, 1, 7) = true',
728: 1:    '✅f(4, 2, 14) = true',
728: 1:    '✅f(3, 2, 14) = false',
728: 1:    '✅f(0, 2, 5) = true',
728: 1:    '✅f(3, 1, 6) = true',
728: 1:    '✅f(3, 1, 9) = false',
728: 1:    '✅f(3, 2, 9) = false',
728: 1:    '✅f(10, 10, 0) = true',
728: 1:    '✅f(0, 0, 1) = false',
728: 1:    '✅f(0, 1, 1) = false',
728: 1:    '✅f(0, 0, 2) = false',
728: 1:    '✅f(2, 0, 2) = true',
728: 1:    '✅f(0, 1, 2) = false',
728: 1:    '✅f(1, 1, 2) = false',
728: 1:    '✅f(2, 1, 3) = false',
728: 1:    '✅f(3, 1, 4) = false',
728: 1:    '✅f(2, 1, 1) = true',
728: 1:    '✅f(2, 2, 6) = true',
728: 1:    '✅f(6, 1, 11) = true',
728: 1:    '✅f(5, 0, 1) = true',
728: 1:    '✅f(3, 1, 8) = true',
728: 1:    '✅f(3, 2, 10) = true',
728: 1:    '✅f(3, 2, 8) = true',
728: 1:    '✅f(6, 0, 11) = false',
728: 1:    '✅f(1, 4, 11) = true',
728: 1:    '✅f(0, 3, 10) = true',
728: 1:    '✅f(1, 4, 12) = false',
728: 1:    '✅f(1, 1, 7) = false',
728: 1:    '✅f(2, 1, 7) = true',
728: 1:    '✅f(7, 1, 11) = true',
728: 1:    '✅f(7, 1, 8) = true',
728: 1:    '✅f(7, 1, 13) = false',
728: 1:    '✅f(43, 1, 46) = true',
728: 1:    '✅f(40, 1, 46) = false',
728: 1:    '❌f(40, 2, 47) = ??? != true'
728: 1:  ],
728: 1:  'level': 26,
728: 1:  'nextQuestion': '40, 2, 47',
728: 1:  'questions': [
728: 1:    '0, 1, 5',
728: 1:    '1, 0, 1',
728: 1:    '1, 0, 2',
728: 1:    '3, 1, 7',
728: 1:    '4, 2, 14',
728: 1:    '3, 2, 14',
728: 1:    '0, 2, 5',
728: 1:    '3, 1, 6',
728: 1:    '3, 1, 9',
728: 1:    '3, 2, 9',
728: 1:    '10, 10, 0',
728: 1:    '0, 0, 1',
728: 1:    '0, 1, 1',
728: 1:    '0, 0, 2',
728: 1:    '2, 0, 2',
728: 1:    '0, 1, 2',
728: 1:    '1, 1, 2',
728: 1:    '2, 1, 3',
728: 1:    '3, 1, 4',
728: 1:    '2, 1, 1',
728: 1:    '2, 2, 6',
728: 1:    '6, 1, 11',
728: 1:    '5, 0, 1',
728: 1:    '3, 1, 8',
728: 1:    '3, 2, 10',
728: 1:    '3, 2, 8',
728: 1:    '6, 0, 11',
728: 1:    '1, 4, 11',
728: 1:    '0, 3, 10',
728: 1:    '1, 4, 12',
728: 1:    '1, 1, 7',
728: 1:    '2, 1, 7',
728: 1:    '7, 1, 11',
728: 1:    '7, 1, 8',
728: 1:    '7, 1, 13',
728: 1:    '43, 1, 46',
728: 1:    '40, 1, 46',
728: 1:    '40, 2, 47'
728: 1:  ]
728: 1:}
728: 1:Scores: 62581
728: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true']')
728: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
729: 1:BoardData {
729: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
729: 1:  'expectedAnswer': 'true',
729: 1:  'history': [
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '0, 1, 5',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '1, 0, 1',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '1, 0, 2',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '3, 1, 7',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '4, 2, 14',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '3, 2, 14',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '0, 2, 5',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '3, 1, 6',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '3, 1, 9',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '3, 2, 9',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '10, 10, 0',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '0, 0, 1',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '0, 1, 1',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '0, 0, 2',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '2, 0, 2',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '0, 1, 2',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '1, 1, 2',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '2, 1, 3',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '3, 1, 4',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '2, 1, 1',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '2, 2, 6',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '6, 1, 11',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '5, 0, 1',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '3, 1, 8',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '3, 2, 10',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '3, 2, 8',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '6, 0, 11',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '1, 4, 11',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '0, 3, 10',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '1, 4, 12',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '1, 1, 7',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '2, 1, 7',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '7, 1, 11',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '7, 1, 8',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '7, 1, 13',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '43, 1, 46',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '40, 1, 46',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '40, 2, 47',
729: 1:      'valid': true
729: 1:    }
729: 1:  ],
729: 1:  'info': [
729: 1:    '✅f(0, 1, 5) = true',
729: 1:    '✅f(1, 0, 1) = true',
729: 1:    '✅f(1, 0, 2) = false',
729: 1:    '✅f(3, 1, 7) = true',
729: 1:    '✅f(4, 2, 14) = true',
729: 1:    '✅f(3, 2, 14) = false',
729: 1:    '✅f(0, 2, 5) = true',
729: 1:    '✅f(3, 1, 6) = true',
729: 1:    '✅f(3, 1, 9) = false',
729: 1:    '✅f(3, 2, 9) = false',
729: 1:    '✅f(10, 10, 0) = true',
729: 1:    '✅f(0, 0, 1) = false',
729: 1:    '✅f(0, 1, 1) = false',
729: 1:    '✅f(0, 0, 2) = false',
729: 1:    '✅f(2, 0, 2) = true',
729: 1:    '✅f(0, 1, 2) = false',
729: 1:    '✅f(1, 1, 2) = false',
729: 1:    '✅f(2, 1, 3) = false',
729: 1:    '✅f(3, 1, 4) = false',
729: 1:    '✅f(2, 1, 1) = true',
729: 1:    '✅f(2, 2, 6) = true',
729: 1:    '✅f(6, 1, 11) = true',
729: 1:    '✅f(5, 0, 1) = true',
729: 1:    '✅f(3, 1, 8) = true',
729: 1:    '✅f(3, 2, 10) = true',
729: 1:    '✅f(3, 2, 8) = true',
729: 1:    '✅f(6, 0, 11) = false',
729: 1:    '✅f(1, 4, 11) = true',
729: 1:    '✅f(0, 3, 10) = true',
729: 1:    '✅f(1, 4, 12) = false',
729: 1:    '✅f(1, 1, 7) = false',
729: 1:    '✅f(2, 1, 7) = true',
729: 1:    '✅f(7, 1, 11) = true',
729: 1:    '✅f(7, 1, 8) = true',
729: 1:    '✅f(7, 1, 13) = false',
729: 1:    '✅f(43, 1, 46) = true',
729: 1:    '✅f(40, 1, 46) = false',
729: 1:    '✅f(40, 2, 47) = true',
729: 1:    '❌f(40, 2, 50) = ??? != true'
729: 1:  ],
729: 1:  'level': 26,
729: 1:  'nextQuestion': '40, 2, 50',
729: 1:  'questions': [
729: 1:    '0, 1, 5',
729: 1:    '1, 0, 1',
729: 1:    '1, 0, 2',
729: 1:    '3, 1, 7',
729: 1:    '4, 2, 14',
729: 1:    '3, 2, 14',
729: 1:    '0, 2, 5',
729: 1:    '3, 1, 6',
729: 1:    '3, 1, 9',
729: 1:    '3, 2, 9',
729: 1:    '10, 10, 0',
729: 1:    '0, 0, 1',
729: 1:    '0, 1, 1',
729: 1:    '0, 0, 2',
729: 1:    '2, 0, 2',
729: 1:    '0, 1, 2',
729: 1:    '1, 1, 2',
729: 1:    '2, 1, 3',
729: 1:    '3, 1, 4',
729: 1:    '2, 1, 1',
729: 1:    '2, 2, 6',
729: 1:    '6, 1, 11',
729: 1:    '5, 0, 1',
729: 1:    '3, 1, 8',
729: 1:    '3, 2, 10',
729: 1:    '3, 2, 8',
729: 1:    '6, 0, 11',
729: 1:    '1, 4, 11',
729: 1:    '0, 3, 10',
729: 1:    '1, 4, 12',
729: 1:    '1, 1, 7',
729: 1:    '2, 1, 7',
729: 1:    '7, 1, 11',
729: 1:    '7, 1, 8',
729: 1:    '7, 1, 13',
729: 1:    '43, 1, 46',
729: 1:    '40, 1, 46',
729: 1:    '40, 2, 47',
729: 1:    '40, 2, 50'
729: 1:  ]
729: 1:}
729: 1:Scores: 62588
729: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true']')
729: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
730: 1:BoardData {
730: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
730: 1:  'expectedAnswer': 'false',
730: 1:  'history': [
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '0, 1, 5',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '1, 0, 1',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '1, 0, 2',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '3, 1, 7',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '4, 2, 14',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '3, 2, 14',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '0, 2, 5',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '3, 1, 6',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '3, 1, 9',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '3, 2, 9',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '10, 10, 0',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '0, 0, 1',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '0, 1, 1',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '0, 0, 2',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '2, 0, 2',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '0, 1, 2',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '1, 1, 2',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '2, 1, 3',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '3, 1, 4',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '2, 1, 1',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '2, 2, 6',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '6, 1, 11',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '5, 0, 1',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '3, 1, 8',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '3, 2, 10',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '3, 2, 8',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '6, 0, 11',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '1, 4, 11',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '0, 3, 10',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '1, 4, 12',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '1, 1, 7',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '2, 1, 7',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '7, 1, 11',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '7, 1, 8',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '7, 1, 13',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '43, 1, 46',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '40, 1, 46',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '40, 2, 47',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '40, 2, 50',
730: 1:      'valid': true
730: 1:    }
730: 1:  ],
730: 1:  'info': [
730: 1:    '✅f(0, 1, 5) = true',
730: 1:    '✅f(1, 0, 1) = true',
730: 1:    '✅f(1, 0, 2) = false',
730: 1:    '✅f(3, 1, 7) = true',
730: 1:    '✅f(4, 2, 14) = true',
730: 1:    '✅f(3, 2, 14) = false',
730: 1:    '✅f(0, 2, 5) = true',
730: 1:    '✅f(3, 1, 6) = true',
730: 1:    '✅f(3, 1, 9) = false',
730: 1:    '✅f(3, 2, 9) = false',
730: 1:    '✅f(10, 10, 0) = true',
730: 1:    '✅f(0, 0, 1) = false',
730: 1:    '✅f(0, 1, 1) = false',
730: 1:    '✅f(0, 0, 2) = false',
730: 1:    '✅f(2, 0, 2) = true',
730: 1:    '✅f(0, 1, 2) = false',
730: 1:    '✅f(1, 1, 2) = false',
730: 1:    '✅f(2, 1, 3) = false',
730: 1:    '✅f(3, 1, 4) = false',
730: 1:    '✅f(2, 1, 1) = true',
730: 1:    '✅f(2, 2, 6) = true',
730: 1:    '✅f(6, 1, 11) = true',
730: 1:    '✅f(5, 0, 1) = true',
730: 1:    '✅f(3, 1, 8) = true',
730: 1:    '✅f(3, 2, 10) = true',
730: 1:    '✅f(3, 2, 8) = true',
730: 1:    '✅f(6, 0, 11) = false',
730: 1:    '✅f(1, 4, 11) = true',
730: 1:    '✅f(0, 3, 10) = true',
730: 1:    '✅f(1, 4, 12) = false',
730: 1:    '✅f(1, 1, 7) = false',
730: 1:    '✅f(2, 1, 7) = true',
730: 1:    '✅f(7, 1, 11) = true',
730: 1:    '✅f(7, 1, 8) = true',
730: 1:    '✅f(7, 1, 13) = false',
730: 1:    '✅f(43, 1, 46) = true',
730: 1:    '✅f(40, 1, 46) = false',
730: 1:    '✅f(40, 2, 47) = true',
730: 1:    '✅f(40, 2, 50) = true',
730: 1:    '❌f(40, 2, 52) = ??? != false'
730: 1:  ],
730: 1:  'level': 26,
730: 1:  'nextQuestion': '40, 2, 52',
730: 1:  'questions': [
730: 1:    '0, 1, 5',
730: 1:    '1, 0, 1',
730: 1:    '1, 0, 2',
730: 1:    '3, 1, 7',
730: 1:    '4, 2, 14',
730: 1:    '3, 2, 14',
730: 1:    '0, 2, 5',
730: 1:    '3, 1, 6',
730: 1:    '3, 1, 9',
730: 1:    '3, 2, 9',
730: 1:    '10, 10, 0',
730: 1:    '0, 0, 1',
730: 1:    '0, 1, 1',
730: 1:    '0, 0, 2',
730: 1:    '2, 0, 2',
730: 1:    '0, 1, 2',
730: 1:    '1, 1, 2',
730: 1:    '2, 1, 3',
730: 1:    '3, 1, 4',
730: 1:    '2, 1, 1',
730: 1:    '2, 2, 6',
730: 1:    '6, 1, 11',
730: 1:    '5, 0, 1',
730: 1:    '3, 1, 8',
730: 1:    '3, 2, 10',
730: 1:    '3, 2, 8',
730: 1:    '6, 0, 11',
730: 1:    '1, 4, 11',
730: 1:    '0, 3, 10',
730: 1:    '1, 4, 12',
730: 1:    '1, 1, 7',
730: 1:    '2, 1, 7',
730: 1:    '7, 1, 11',
730: 1:    '7, 1, 8',
730: 1:    '7, 1, 13',
730: 1:    '43, 1, 46',
730: 1:    '40, 1, 46',
730: 1:    '40, 2, 47',
730: 1:    '40, 2, 50',
730: 1:    '40, 2, 52'
730: 1:  ]
730: 1:}
730: 1:Scores: 62595
730: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true', 'false']')
730: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
731: 1:BoardData {
731: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
731: 1:  'expectedAnswer': 'false',
731: 1:  'history': [
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '0, 1, 5',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '1, 0, 1',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '1, 0, 2',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '3, 1, 7',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '4, 2, 14',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '3, 2, 14',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '0, 2, 5',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '3, 1, 6',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '3, 1, 9',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '3, 2, 9',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '10, 10, 0',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '0, 0, 1',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '0, 1, 1',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '0, 0, 2',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '2, 0, 2',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '0, 1, 2',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '1, 1, 2',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '2, 1, 3',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '3, 1, 4',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '2, 1, 1',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '2, 2, 6',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '6, 1, 11',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '5, 0, 1',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '3, 1, 8',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '3, 2, 10',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '3, 2, 8',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '6, 0, 11',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '1, 4, 11',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '0, 3, 10',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '1, 4, 12',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '1, 1, 7',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '2, 1, 7',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '7, 1, 11',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '7, 1, 8',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '7, 1, 13',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '43, 1, 46',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '40, 1, 46',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '40, 2, 47',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '40, 2, 50',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '40, 2, 52',
731: 1:      'valid': true
731: 1:    }
731: 1:  ],
731: 1:  'info': [
731: 1:    '✅f(0, 1, 5) = true',
731: 1:    '✅f(1, 0, 1) = true',
731: 1:    '✅f(1, 0, 2) = false',
731: 1:    '✅f(3, 1, 7) = true',
731: 1:    '✅f(4, 2, 14) = true',
731: 1:    '✅f(3, 2, 14) = false',
731: 1:    '✅f(0, 2, 5) = true',
731: 1:    '✅f(3, 1, 6) = true',
731: 1:    '✅f(3, 1, 9) = false',
731: 1:    '✅f(3, 2, 9) = false',
731: 1:    '✅f(10, 10, 0) = true',
731: 1:    '✅f(0, 0, 1) = false',
731: 1:    '✅f(0, 1, 1) = false',
731: 1:    '✅f(0, 0, 2) = false',
731: 1:    '✅f(2, 0, 2) = true',
731: 1:    '✅f(0, 1, 2) = false',
731: 1:    '✅f(1, 1, 2) = false',
731: 1:    '✅f(2, 1, 3) = false',
731: 1:    '✅f(3, 1, 4) = false',
731: 1:    '✅f(2, 1, 1) = true',
731: 1:    '✅f(2, 2, 6) = true',
731: 1:    '✅f(6, 1, 11) = true',
731: 1:    '✅f(5, 0, 1) = true',
731: 1:    '✅f(3, 1, 8) = true',
731: 1:    '✅f(3, 2, 10) = true',
731: 1:    '✅f(3, 2, 8) = true',
731: 1:    '✅f(6, 0, 11) = false',
731: 1:    '✅f(1, 4, 11) = true',
731: 1:    '✅f(0, 3, 10) = true',
731: 1:    '✅f(1, 4, 12) = false',
731: 1:    '✅f(1, 1, 7) = false',
731: 1:    '✅f(2, 1, 7) = true',
731: 1:    '✅f(7, 1, 11) = true',
731: 1:    '✅f(7, 1, 8) = true',
731: 1:    '✅f(7, 1, 13) = false',
731: 1:    '✅f(43, 1, 46) = true',
731: 1:    '✅f(40, 1, 46) = false',
731: 1:    '✅f(40, 2, 47) = true',
731: 1:    '✅f(40, 2, 50) = true',
731: 1:    '✅f(40, 2, 52) = false',
731: 1:    '❌f(22, 2, 33) = ??? != false'
731: 1:  ],
731: 1:  'level': 26,
731: 1:  'nextQuestion': '22, 2, 33',
731: 1:  'questions': [
731: 1:    '0, 1, 5',
731: 1:    '1, 0, 1',
731: 1:    '1, 0, 2',
731: 1:    '3, 1, 7',
731: 1:    '4, 2, 14',
731: 1:    '3, 2, 14',
731: 1:    '0, 2, 5',
731: 1:    '3, 1, 6',
731: 1:    '3, 1, 9',
731: 1:    '3, 2, 9',
731: 1:    '10, 10, 0',
731: 1:    '0, 0, 1',
731: 1:    '0, 1, 1',
731: 1:    '0, 0, 2',
731: 1:    '2, 0, 2',
731: 1:    '0, 1, 2',
731: 1:    '1, 1, 2',
731: 1:    '2, 1, 3',
731: 1:    '3, 1, 4',
731: 1:    '2, 1, 1',
731: 1:    '2, 2, 6',
731: 1:    '6, 1, 11',
731: 1:    '5, 0, 1',
731: 1:    '3, 1, 8',
731: 1:    '3, 2, 10',
731: 1:    '3, 2, 8',
731: 1:    '6, 0, 11',
731: 1:    '1, 4, 11',
731: 1:    '0, 3, 10',
731: 1:    '1, 4, 12',
731: 1:    '1, 1, 7',
731: 1:    '2, 1, 7',
731: 1:    '7, 1, 11',
731: 1:    '7, 1, 8',
731: 1:    '7, 1, 13',
731: 1:    '43, 1, 46',
731: 1:    '40, 1, 46',
731: 1:    '40, 2, 47',
731: 1:    '40, 2, 50',
731: 1:    '40, 2, 52',
731: 1:    '22, 2, 33'
731: 1:  ]
731: 1:}
731: 1:Scores: 62602
731: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true', 'false', 'false']')
731: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
732: 1:BoardData {
732: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
732: 1:  'expectedAnswer': 'true',
732: 1:  'history': [
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '0, 1, 5',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '1, 0, 1',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '1, 0, 2',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '3, 1, 7',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '4, 2, 14',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '3, 2, 14',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '0, 2, 5',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '3, 1, 6',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '3, 1, 9',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '3, 2, 9',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '10, 10, 0',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '0, 0, 1',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '0, 1, 1',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '0, 0, 2',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '2, 0, 2',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '0, 1, 2',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '1, 1, 2',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '2, 1, 3',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '3, 1, 4',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '2, 1, 1',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '2, 2, 6',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '6, 1, 11',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '5, 0, 1',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '3, 1, 8',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '3, 2, 10',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '3, 2, 8',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '6, 0, 11',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '1, 4, 11',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '0, 3, 10',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '1, 4, 12',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '1, 1, 7',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '2, 1, 7',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '7, 1, 11',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '7, 1, 8',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '7, 1, 13',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '43, 1, 46',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '40, 1, 46',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '40, 2, 47',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '40, 2, 50',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '40, 2, 52',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '22, 2, 33',
732: 1:      'valid': true
732: 1:    }
732: 1:  ],
732: 1:  'info': [
732: 1:    '✅f(0, 1, 5) = true',
732: 1:    '✅f(1, 0, 1) = true',
732: 1:    '✅f(1, 0, 2) = false',
732: 1:    '✅f(3, 1, 7) = true',
732: 1:    '✅f(4, 2, 14) = true',
732: 1:    '✅f(3, 2, 14) = false',
732: 1:    '✅f(0, 2, 5) = true',
732: 1:    '✅f(3, 1, 6) = true',
732: 1:    '✅f(3, 1, 9) = false',
732: 1:    '✅f(3, 2, 9) = false',
732: 1:    '✅f(10, 10, 0) = true',
732: 1:    '✅f(0, 0, 1) = false',
732: 1:    '✅f(0, 1, 1) = false',
732: 1:    '✅f(0, 0, 2) = false',
732: 1:    '✅f(2, 0, 2) = true',
732: 1:    '✅f(0, 1, 2) = false',
732: 1:    '✅f(1, 1, 2) = false',
732: 1:    '✅f(2, 1, 3) = false',
732: 1:    '✅f(3, 1, 4) = false',
732: 1:    '✅f(2, 1, 1) = true',
732: 1:    '✅f(2, 2, 6) = true',
732: 1:    '✅f(6, 1, 11) = true',
732: 1:    '✅f(5, 0, 1) = true',
732: 1:    '✅f(3, 1, 8) = true',
732: 1:    '✅f(3, 2, 10) = true',
732: 1:    '✅f(3, 2, 8) = true',
732: 1:    '✅f(6, 0, 11) = false',
732: 1:    '✅f(1, 4, 11) = true',
732: 1:    '✅f(0, 3, 10) = true',
732: 1:    '✅f(1, 4, 12) = false',
732: 1:    '✅f(1, 1, 7) = false',
732: 1:    '✅f(2, 1, 7) = true',
732: 1:    '✅f(7, 1, 11) = true',
732: 1:    '✅f(7, 1, 8) = true',
732: 1:    '✅f(7, 1, 13) = false',
732: 1:    '✅f(43, 1, 46) = true',
732: 1:    '✅f(40, 1, 46) = false',
732: 1:    '✅f(40, 2, 47) = true',
732: 1:    '✅f(40, 2, 50) = true',
732: 1:    '✅f(40, 2, 52) = false',
732: 1:    '✅f(22, 2, 33) = false',
732: 1:    '❌f(0, 2, 10) = ??? != true'
732: 1:  ],
732: 1:  'level': 26,
732: 1:  'nextQuestion': '0, 2, 10',
732: 1:  'questions': [
732: 1:    '0, 1, 5',
732: 1:    '1, 0, 1',
732: 1:    '1, 0, 2',
732: 1:    '3, 1, 7',
732: 1:    '4, 2, 14',
732: 1:    '3, 2, 14',
732: 1:    '0, 2, 5',
732: 1:    '3, 1, 6',
732: 1:    '3, 1, 9',
732: 1:    '3, 2, 9',
732: 1:    '10, 10, 0',
732: 1:    '0, 0, 1',
732: 1:    '0, 1, 1',
732: 1:    '0, 0, 2',
732: 1:    '2, 0, 2',
732: 1:    '0, 1, 2',
732: 1:    '1, 1, 2',
732: 1:    '2, 1, 3',
732: 1:    '3, 1, 4',
732: 1:    '2, 1, 1',
732: 1:    '2, 2, 6',
732: 1:    '6, 1, 11',
732: 1:    '5, 0, 1',
732: 1:    '3, 1, 8',
732: 1:    '3, 2, 10',
732: 1:    '3, 2, 8',
732: 1:    '6, 0, 11',
732: 1:    '1, 4, 11',
732: 1:    '0, 3, 10',
732: 1:    '1, 4, 12',
732: 1:    '1, 1, 7',
732: 1:    '2, 1, 7',
732: 1:    '7, 1, 11',
732: 1:    '7, 1, 8',
732: 1:    '7, 1, 13',
732: 1:    '43, 1, 46',
732: 1:    '40, 1, 46',
732: 1:    '40, 2, 47',
732: 1:    '40, 2, 50',
732: 1:    '40, 2, 52',
732: 1:    '22, 2, 33',
732: 1:    '0, 2, 10'
732: 1:  ]
732: 1:}
732: 1:Scores: 62609
732: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true', 'false', 'false', 'true']')
732: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
733: 1:BoardData {
733: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
733: 1:  'expectedAnswer': 'true',
733: 1:  'history': [
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '0, 1, 5',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '1, 0, 1',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '1, 0, 2',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '3, 1, 7',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '4, 2, 14',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '3, 2, 14',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '0, 2, 5',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '3, 1, 6',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '3, 1, 9',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '3, 2, 9',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '10, 10, 0',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '0, 0, 1',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '0, 1, 1',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '0, 0, 2',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '2, 0, 2',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '0, 1, 2',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '1, 1, 2',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '2, 1, 3',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '3, 1, 4',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '2, 1, 1',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '2, 2, 6',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '6, 1, 11',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '5, 0, 1',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '3, 1, 8',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '3, 2, 10',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '3, 2, 8',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '6, 0, 11',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '1, 4, 11',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '0, 3, 10',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '1, 4, 12',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '1, 1, 7',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '2, 1, 7',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '7, 1, 11',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '7, 1, 8',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '7, 1, 13',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '43, 1, 46',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '40, 1, 46',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '40, 2, 47',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '40, 2, 50',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '40, 2, 52',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '22, 2, 33',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '0, 2, 10',
733: 1:      'valid': true
733: 1:    }
733: 1:  ],
733: 1:  'info': [
733: 1:    '✅f(0, 1, 5) = true',
733: 1:    '✅f(1, 0, 1) = true',
733: 1:    '✅f(1, 0, 2) = false',
733: 1:    '✅f(3, 1, 7) = true',
733: 1:    '✅f(4, 2, 14) = true',
733: 1:    '✅f(3, 2, 14) = false',
733: 1:    '✅f(0, 2, 5) = true',
733: 1:    '✅f(3, 1, 6) = true',
733: 1:    '✅f(3, 1, 9) = false',
733: 1:    '✅f(3, 2, 9) = false',
733: 1:    '✅f(10, 10, 0) = true',
733: 1:    '✅f(0, 0, 1) = false',
733: 1:    '✅f(0, 1, 1) = false',
733: 1:    '✅f(0, 0, 2) = false',
733: 1:    '✅f(2, 0, 2) = true',
733: 1:    '✅f(0, 1, 2) = false',
733: 1:    '✅f(1, 1, 2) = false',
733: 1:    '✅f(2, 1, 3) = false',
733: 1:    '✅f(3, 1, 4) = false',
733: 1:    '✅f(2, 1, 1) = true',
733: 1:    '✅f(2, 2, 6) = true',
733: 1:    '✅f(6, 1, 11) = true',
733: 1:    '✅f(5, 0, 1) = true',
733: 1:    '✅f(3, 1, 8) = true',
733: 1:    '✅f(3, 2, 10) = true',
733: 1:    '✅f(3, 2, 8) = true',
733: 1:    '✅f(6, 0, 11) = false',
733: 1:    '✅f(1, 4, 11) = true',
733: 1:    '✅f(0, 3, 10) = true',
733: 1:    '✅f(1, 4, 12) = false',
733: 1:    '✅f(1, 1, 7) = false',
733: 1:    '✅f(2, 1, 7) = true',
733: 1:    '✅f(7, 1, 11) = true',
733: 1:    '✅f(7, 1, 8) = true',
733: 1:    '✅f(7, 1, 13) = false',
733: 1:    '✅f(43, 1, 46) = true',
733: 1:    '✅f(40, 1, 46) = false',
733: 1:    '✅f(40, 2, 47) = true',
733: 1:    '✅f(40, 2, 50) = true',
733: 1:    '✅f(40, 2, 52) = false',
733: 1:    '✅f(22, 2, 33) = false',
733: 1:    '✅f(0, 2, 10) = true',
733: 1:    '❌f(1000000, 1000, 1000100) = ??? != true'
733: 1:  ],
733: 1:  'level': 26,
733: 1:  'nextQuestion': '1000000, 1000, 1000100',
733: 1:  'questions': [
733: 1:    '0, 1, 5',
733: 1:    '1, 0, 1',
733: 1:    '1, 0, 2',
733: 1:    '3, 1, 7',
733: 1:    '4, 2, 14',
733: 1:    '3, 2, 14',
733: 1:    '0, 2, 5',
733: 1:    '3, 1, 6',
733: 1:    '3, 1, 9',
733: 1:    '3, 2, 9',
733: 1:    '10, 10, 0',
733: 1:    '0, 0, 1',
733: 1:    '0, 1, 1',
733: 1:    '0, 0, 2',
733: 1:    '2, 0, 2',
733: 1:    '0, 1, 2',
733: 1:    '1, 1, 2',
733: 1:    '2, 1, 3',
733: 1:    '3, 1, 4',
733: 1:    '2, 1, 1',
733: 1:    '2, 2, 6',
733: 1:    '6, 1, 11',
733: 1:    '5, 0, 1',
733: 1:    '3, 1, 8',
733: 1:    '3, 2, 10',
733: 1:    '3, 2, 8',
733: 1:    '6, 0, 11',
733: 1:    '1, 4, 11',
733: 1:    '0, 3, 10',
733: 1:    '1, 4, 12',
733: 1:    '1, 1, 7',
733: 1:    '2, 1, 7',
733: 1:    '7, 1, 11',
733: 1:    '7, 1, 8',
733: 1:    '7, 1, 13',
733: 1:    '43, 1, 46',
733: 1:    '40, 1, 46',
733: 1:    '40, 2, 47',
733: 1:    '40, 2, 50',
733: 1:    '40, 2, 52',
733: 1:    '22, 2, 33',
733: 1:    '0, 2, 10',
733: 1:    '1000000, 1000, 1000100'
733: 1:  ]
733: 1:}
733: 1:Scores: 62616
733: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true']')
733: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
734: 1:BoardData {
734: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
734: 1:  'expectedAnswer': 'false',
734: 1:  'history': [
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '0, 1, 5',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '1, 0, 1',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '1, 0, 2',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '3, 1, 7',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '4, 2, 14',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '3, 2, 14',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '0, 2, 5',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '3, 1, 6',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '3, 1, 9',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '3, 2, 9',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '10, 10, 0',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '0, 0, 1',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '0, 1, 1',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '0, 0, 2',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '2, 0, 2',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '0, 1, 2',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '1, 1, 2',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '2, 1, 3',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '3, 1, 4',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '2, 1, 1',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '2, 2, 6',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '6, 1, 11',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '5, 0, 1',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '3, 1, 8',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '3, 2, 10',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '3, 2, 8',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '6, 0, 11',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '1, 4, 11',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '0, 3, 10',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '1, 4, 12',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '1, 1, 7',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '2, 1, 7',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '7, 1, 11',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '7, 1, 8',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '7, 1, 13',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '43, 1, 46',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '40, 1, 46',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '40, 2, 47',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '40, 2, 50',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '40, 2, 52',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '22, 2, 33',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '0, 2, 10',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '1000000, 1000, 1000100',
734: 1:      'valid': true
734: 1:    }
734: 1:  ],
734: 1:  'info': [
734: 1:    '✅f(0, 1, 5) = true',
734: 1:    '✅f(1, 0, 1) = true',
734: 1:    '✅f(1, 0, 2) = false',
734: 1:    '✅f(3, 1, 7) = true',
734: 1:    '✅f(4, 2, 14) = true',
734: 1:    '✅f(3, 2, 14) = false',
734: 1:    '✅f(0, 2, 5) = true',
734: 1:    '✅f(3, 1, 6) = true',
734: 1:    '✅f(3, 1, 9) = false',
734: 1:    '✅f(3, 2, 9) = false',
734: 1:    '✅f(10, 10, 0) = true',
734: 1:    '✅f(0, 0, 1) = false',
734: 1:    '✅f(0, 1, 1) = false',
734: 1:    '✅f(0, 0, 2) = false',
734: 1:    '✅f(2, 0, 2) = true',
734: 1:    '✅f(0, 1, 2) = false',
734: 1:    '✅f(1, 1, 2) = false',
734: 1:    '✅f(2, 1, 3) = false',
734: 1:    '✅f(3, 1, 4) = false',
734: 1:    '✅f(2, 1, 1) = true',
734: 1:    '✅f(2, 2, 6) = true',
734: 1:    '✅f(6, 1, 11) = true',
734: 1:    '✅f(5, 0, 1) = true',
734: 1:    '✅f(3, 1, 8) = true',
734: 1:    '✅f(3, 2, 10) = true',
734: 1:    '✅f(3, 2, 8) = true',
734: 1:    '✅f(6, 0, 11) = false',
734: 1:    '✅f(1, 4, 11) = true',
734: 1:    '✅f(0, 3, 10) = true',
734: 1:    '✅f(1, 4, 12) = false',
734: 1:    '✅f(1, 1, 7) = false',
734: 1:    '✅f(2, 1, 7) = true',
734: 1:    '✅f(7, 1, 11) = true',
734: 1:    '✅f(7, 1, 8) = true',
734: 1:    '✅f(7, 1, 13) = false',
734: 1:    '✅f(43, 1, 46) = true',
734: 1:    '✅f(40, 1, 46) = false',
734: 1:    '✅f(40, 2, 47) = true',
734: 1:    '✅f(40, 2, 50) = true',
734: 1:    '✅f(40, 2, 52) = false',
734: 1:    '✅f(22, 2, 33) = false',
734: 1:    '✅f(0, 2, 10) = true',
734: 1:    '✅f(1000000, 1000, 1000100) = true',
734: 1:    '❌f(2, 1000000, 100003) = ??? != false'
734: 1:  ],
734: 1:  'level': 26,
734: 1:  'nextQuestion': '2, 1000000, 100003',
734: 1:  'questions': [
734: 1:    '0, 1, 5',
734: 1:    '1, 0, 1',
734: 1:    '1, 0, 2',
734: 1:    '3, 1, 7',
734: 1:    '4, 2, 14',
734: 1:    '3, 2, 14',
734: 1:    '0, 2, 5',
734: 1:    '3, 1, 6',
734: 1:    '3, 1, 9',
734: 1:    '3, 2, 9',
734: 1:    '10, 10, 0',
734: 1:    '0, 0, 1',
734: 1:    '0, 1, 1',
734: 1:    '0, 0, 2',
734: 1:    '2, 0, 2',
734: 1:    '0, 1, 2',
734: 1:    '1, 1, 2',
734: 1:    '2, 1, 3',
734: 1:    '3, 1, 4',
734: 1:    '2, 1, 1',
734: 1:    '2, 2, 6',
734: 1:    '6, 1, 11',
734: 1:    '5, 0, 1',
734: 1:    '3, 1, 8',
734: 1:    '3, 2, 10',
734: 1:    '3, 2, 8',
734: 1:    '6, 0, 11',
734: 1:    '1, 4, 11',
734: 1:    '0, 3, 10',
734: 1:    '1, 4, 12',
734: 1:    '1, 1, 7',
734: 1:    '2, 1, 7',
734: 1:    '7, 1, 11',
734: 1:    '7, 1, 8',
734: 1:    '7, 1, 13',
734: 1:    '43, 1, 46',
734: 1:    '40, 1, 46',
734: 1:    '40, 2, 47',
734: 1:    '40, 2, 50',
734: 1:    '40, 2, 52',
734: 1:    '22, 2, 33',
734: 1:    '0, 2, 10',
734: 1:    '1000000, 1000, 1000100',
734: 1:    '2, 1000000, 100003'
734: 1:  ]
734: 1:}
734: 1:Scores: 62623
734: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'false']')
734: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
735: 1:BoardData {
735: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
735: 1:  'expectedAnswer': 'true',
735: 1:  'history': [
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '0, 1, 5',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '1, 0, 1',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '1, 0, 2',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '3, 1, 7',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '4, 2, 14',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '3, 2, 14',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '0, 2, 5',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '3, 1, 6',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '3, 1, 9',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '3, 2, 9',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '10, 10, 0',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '0, 0, 1',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '0, 1, 1',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '0, 0, 2',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '2, 0, 2',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '0, 1, 2',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '1, 1, 2',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '2, 1, 3',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '3, 1, 4',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '2, 1, 1',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '2, 2, 6',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '6, 1, 11',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '5, 0, 1',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '3, 1, 8',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '3, 2, 10',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '3, 2, 8',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '6, 0, 11',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '1, 4, 11',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '0, 3, 10',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '1, 4, 12',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '1, 1, 7',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '2, 1, 7',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '7, 1, 11',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '7, 1, 8',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '7, 1, 13',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '43, 1, 46',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '40, 1, 46',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '40, 2, 47',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '40, 2, 50',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '40, 2, 52',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '22, 2, 33',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '0, 2, 10',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '1000000, 1000, 1000100',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '2, 1000000, 100003',
735: 1:      'valid': true
735: 1:    }
735: 1:  ],
735: 1:  'info': [
735: 1:    '✅f(0, 1, 5) = true',
735: 1:    '✅f(1, 0, 1) = true',
735: 1:    '✅f(1, 0, 2) = false',
735: 1:    '✅f(3, 1, 7) = true',
735: 1:    '✅f(4, 2, 14) = true',
735: 1:    '✅f(3, 2, 14) = false',
735: 1:    '✅f(0, 2, 5) = true',
735: 1:    '✅f(3, 1, 6) = true',
735: 1:    '✅f(3, 1, 9) = false',
735: 1:    '✅f(3, 2, 9) = false',
735: 1:    '✅f(10, 10, 0) = true',
735: 1:    '✅f(0, 0, 1) = false',
735: 1:    '✅f(0, 1, 1) = false',
735: 1:    '✅f(0, 0, 2) = false',
735: 1:    '✅f(2, 0, 2) = true',
735: 1:    '✅f(0, 1, 2) = false',
735: 1:    '✅f(1, 1, 2) = false',
735: 1:    '✅f(2, 1, 3) = false',
735: 1:    '✅f(3, 1, 4) = false',
735: 1:    '✅f(2, 1, 1) = true',
735: 1:    '✅f(2, 2, 6) = true',
735: 1:    '✅f(6, 1, 11) = true',
735: 1:    '✅f(5, 0, 1) = true',
735: 1:    '✅f(3, 1, 8) = true',
735: 1:    '✅f(3, 2, 10) = true',
735: 1:    '✅f(3, 2, 8) = true',
735: 1:    '✅f(6, 0, 11) = false',
735: 1:    '✅f(1, 4, 11) = true',
735: 1:    '✅f(0, 3, 10) = true',
735: 1:    '✅f(1, 4, 12) = false',
735: 1:    '✅f(1, 1, 7) = false',
735: 1:    '✅f(2, 1, 7) = true',
735: 1:    '✅f(7, 1, 11) = true',
735: 1:    '✅f(7, 1, 8) = true',
735: 1:    '✅f(7, 1, 13) = false',
735: 1:    '✅f(43, 1, 46) = true',
735: 1:    '✅f(40, 1, 46) = false',
735: 1:    '✅f(40, 2, 47) = true',
735: 1:    '✅f(40, 2, 50) = true',
735: 1:    '✅f(40, 2, 52) = false',
735: 1:    '✅f(22, 2, 33) = false',
735: 1:    '✅f(0, 2, 10) = true',
735: 1:    '✅f(1000000, 1000, 1000100) = true',
735: 1:    '✅f(2, 1000000, 100003) = false',
735: 1:    '❌f(20, 0, 19) = ??? != true'
735: 1:  ],
735: 1:  'level': 26,
735: 1:  'nextQuestion': '20, 0, 19',
735: 1:  'questions': [
735: 1:    '0, 1, 5',
735: 1:    '1, 0, 1',
735: 1:    '1, 0, 2',
735: 1:    '3, 1, 7',
735: 1:    '4, 2, 14',
735: 1:    '3, 2, 14',
735: 1:    '0, 2, 5',
735: 1:    '3, 1, 6',
735: 1:    '3, 1, 9',
735: 1:    '3, 2, 9',
735: 1:    '10, 10, 0',
735: 1:    '0, 0, 1',
735: 1:    '0, 1, 1',
735: 1:    '0, 0, 2',
735: 1:    '2, 0, 2',
735: 1:    '0, 1, 2',
735: 1:    '1, 1, 2',
735: 1:    '2, 1, 3',
735: 1:    '3, 1, 4',
735: 1:    '2, 1, 1',
735: 1:    '2, 2, 6',
735: 1:    '6, 1, 11',
735: 1:    '5, 0, 1',
735: 1:    '3, 1, 8',
735: 1:    '3, 2, 10',
735: 1:    '3, 2, 8',
735: 1:    '6, 0, 11',
735: 1:    '1, 4, 11',
735: 1:    '0, 3, 10',
735: 1:    '1, 4, 12',
735: 1:    '1, 1, 7',
735: 1:    '2, 1, 7',
735: 1:    '7, 1, 11',
735: 1:    '7, 1, 8',
735: 1:    '7, 1, 13',
735: 1:    '43, 1, 46',
735: 1:    '40, 1, 46',
735: 1:    '40, 2, 47',
735: 1:    '40, 2, 50',
735: 1:    '40, 2, 52',
735: 1:    '22, 2, 33',
735: 1:    '0, 2, 10',
735: 1:    '1000000, 1000, 1000100',
735: 1:    '2, 1000000, 100003',
735: 1:    '20, 0, 19'
735: 1:  ]
735: 1:}
735: 1:Scores: 62630
735: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'false', 'true']')
735: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
736: 1:BoardData {
736: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
736: 1:  'expectedAnswer': 'false',
736: 1:  'history': [
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '0, 1, 5',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '1, 0, 1',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '1, 0, 2',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '3, 1, 7',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '4, 2, 14',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '3, 2, 14',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '0, 2, 5',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '3, 1, 6',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '3, 1, 9',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '3, 2, 9',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '10, 10, 0',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '0, 0, 1',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '0, 1, 1',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '0, 0, 2',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '2, 0, 2',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '0, 1, 2',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '1, 1, 2',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '2, 1, 3',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '3, 1, 4',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '2, 1, 1',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '2, 2, 6',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '6, 1, 11',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '5, 0, 1',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '3, 1, 8',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '3, 2, 10',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '3, 2, 8',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '6, 0, 11',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '1, 4, 11',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '0, 3, 10',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '1, 4, 12',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '1, 1, 7',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '2, 1, 7',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '7, 1, 11',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '7, 1, 8',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '7, 1, 13',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '43, 1, 46',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '40, 1, 46',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '40, 2, 47',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '40, 2, 50',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '40, 2, 52',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '22, 2, 33',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '0, 2, 10',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '1000000, 1000, 1000100',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '2, 1000000, 100003',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '20, 0, 19',
736: 1:      'valid': true
736: 1:    }
736: 1:  ],
736: 1:  'info': [
736: 1:    '✅f(0, 1, 5) = true',
736: 1:    '✅f(1, 0, 1) = true',
736: 1:    '✅f(1, 0, 2) = false',
736: 1:    '✅f(3, 1, 7) = true',
736: 1:    '✅f(4, 2, 14) = true',
736: 1:    '✅f(3, 2, 14) = false',
736: 1:    '✅f(0, 2, 5) = true',
736: 1:    '✅f(3, 1, 6) = true',
736: 1:    '✅f(3, 1, 9) = false',
736: 1:    '✅f(3, 2, 9) = false',
736: 1:    '✅f(10, 10, 0) = true',
736: 1:    '✅f(0, 0, 1) = false',
736: 1:    '✅f(0, 1, 1) = false',
736: 1:    '✅f(0, 0, 2) = false',
736: 1:    '✅f(2, 0, 2) = true',
736: 1:    '✅f(0, 1, 2) = false',
736: 1:    '✅f(1, 1, 2) = false',
736: 1:    '✅f(2, 1, 3) = false',
736: 1:    '✅f(3, 1, 4) = false',
736: 1:    '✅f(2, 1, 1) = true',
736: 1:    '✅f(2, 2, 6) = true',
736: 1:    '✅f(6, 1, 11) = true',
736: 1:    '✅f(5, 0, 1) = true',
736: 1:    '✅f(3, 1, 8) = true',
736: 1:    '✅f(3, 2, 10) = true',
736: 1:    '✅f(3, 2, 8) = true',
736: 1:    '✅f(6, 0, 11) = false',
736: 1:    '✅f(1, 4, 11) = true',
736: 1:    '✅f(0, 3, 10) = true',
736: 1:    '✅f(1, 4, 12) = false',
736: 1:    '✅f(1, 1, 7) = false',
736: 1:    '✅f(2, 1, 7) = true',
736: 1:    '✅f(7, 1, 11) = true',
736: 1:    '✅f(7, 1, 8) = true',
736: 1:    '✅f(7, 1, 13) = false',
736: 1:    '✅f(43, 1, 46) = true',
736: 1:    '✅f(40, 1, 46) = false',
736: 1:    '✅f(40, 2, 47) = true',
736: 1:    '✅f(40, 2, 50) = true',
736: 1:    '✅f(40, 2, 52) = false',
736: 1:    '✅f(22, 2, 33) = false',
736: 1:    '✅f(0, 2, 10) = true',
736: 1:    '✅f(1000000, 1000, 1000100) = true',
736: 1:    '✅f(2, 1000000, 100003) = false',
736: 1:    '✅f(20, 0, 19) = true',
736: 1:    '❌f(20, 0, 21) = ??? != false'
736: 1:  ],
736: 1:  'level': 26,
736: 1:  'nextQuestion': '20, 0, 21',
736: 1:  'questions': [
736: 1:    '0, 1, 5',
736: 1:    '1, 0, 1',
736: 1:    '1, 0, 2',
736: 1:    '3, 1, 7',
736: 1:    '4, 2, 14',
736: 1:    '3, 2, 14',
736: 1:    '0, 2, 5',
736: 1:    '3, 1, 6',
736: 1:    '3, 1, 9',
736: 1:    '3, 2, 9',
736: 1:    '10, 10, 0',
736: 1:    '0, 0, 1',
736: 1:    '0, 1, 1',
736: 1:    '0, 0, 2',
736: 1:    '2, 0, 2',
736: 1:    '0, 1, 2',
736: 1:    '1, 1, 2',
736: 1:    '2, 1, 3',
736: 1:    '3, 1, 4',
736: 1:    '2, 1, 1',
736: 1:    '2, 2, 6',
736: 1:    '6, 1, 11',
736: 1:    '5, 0, 1',
736: 1:    '3, 1, 8',
736: 1:    '3, 2, 10',
736: 1:    '3, 2, 8',
736: 1:    '6, 0, 11',
736: 1:    '1, 4, 11',
736: 1:    '0, 3, 10',
736: 1:    '1, 4, 12',
736: 1:    '1, 1, 7',
736: 1:    '2, 1, 7',
736: 1:    '7, 1, 11',
736: 1:    '7, 1, 8',
736: 1:    '7, 1, 13',
736: 1:    '43, 1, 46',
736: 1:    '40, 1, 46',
736: 1:    '40, 2, 47',
736: 1:    '40, 2, 50',
736: 1:    '40, 2, 52',
736: 1:    '22, 2, 33',
736: 1:    '0, 2, 10',
736: 1:    '1000000, 1000, 1000100',
736: 1:    '2, 1000000, 100003',
736: 1:    '20, 0, 19',
736: 1:    '20, 0, 21'
736: 1:  ]
736: 1:}
736: 1:Scores: 62637
736: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'false', 'true', 'false']')
736: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
737: 1:BoardData {
737: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
737: 1:  'expectedAnswer': 'false',
737: 1:  'history': [
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '0, 1, 5',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '1, 0, 1',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '1, 0, 2',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '3, 1, 7',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '4, 2, 14',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '3, 2, 14',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '0, 2, 5',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '3, 1, 6',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '3, 1, 9',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '3, 2, 9',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '10, 10, 0',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '0, 0, 1',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '0, 1, 1',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '0, 0, 2',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '2, 0, 2',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '0, 1, 2',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '1, 1, 2',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '2, 1, 3',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '3, 1, 4',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '2, 1, 1',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '2, 2, 6',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '6, 1, 11',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '5, 0, 1',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '3, 1, 8',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '3, 2, 10',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '3, 2, 8',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '6, 0, 11',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '1, 4, 11',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '0, 3, 10',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '1, 4, 12',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '1, 1, 7',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '2, 1, 7',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '7, 1, 11',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '7, 1, 8',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '7, 1, 13',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '43, 1, 46',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '40, 1, 46',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '40, 2, 47',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '40, 2, 50',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '40, 2, 52',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '22, 2, 33',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '0, 2, 10',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '1000000, 1000, 1000100',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '2, 1000000, 100003',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '20, 0, 19',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '20, 0, 21',
737: 1:      'valid': true
737: 1:    }
737: 1:  ],
737: 1:  'info': [
737: 1:    '✅f(0, 1, 5) = true',
737: 1:    '✅f(1, 0, 1) = true',
737: 1:    '✅f(1, 0, 2) = false',
737: 1:    '✅f(3, 1, 7) = true',
737: 1:    '✅f(4, 2, 14) = true',
737: 1:    '✅f(3, 2, 14) = false',
737: 1:    '✅f(0, 2, 5) = true',
737: 1:    '✅f(3, 1, 6) = true',
737: 1:    '✅f(3, 1, 9) = false',
737: 1:    '✅f(3, 2, 9) = false',
737: 1:    '✅f(10, 10, 0) = true',
737: 1:    '✅f(0, 0, 1) = false',
737: 1:    '✅f(0, 1, 1) = false',
737: 1:    '✅f(0, 0, 2) = false',
737: 1:    '✅f(2, 0, 2) = true',
737: 1:    '✅f(0, 1, 2) = false',
737: 1:    '✅f(1, 1, 2) = false',
737: 1:    '✅f(2, 1, 3) = false',
737: 1:    '✅f(3, 1, 4) = false',
737: 1:    '✅f(2, 1, 1) = true',
737: 1:    '✅f(2, 2, 6) = true',
737: 1:    '✅f(6, 1, 11) = true',
737: 1:    '✅f(5, 0, 1) = true',
737: 1:    '✅f(3, 1, 8) = true',
737: 1:    '✅f(3, 2, 10) = true',
737: 1:    '✅f(3, 2, 8) = true',
737: 1:    '✅f(6, 0, 11) = false',
737: 1:    '✅f(1, 4, 11) = true',
737: 1:    '✅f(0, 3, 10) = true',
737: 1:    '✅f(1, 4, 12) = false',
737: 1:    '✅f(1, 1, 7) = false',
737: 1:    '✅f(2, 1, 7) = true',
737: 1:    '✅f(7, 1, 11) = true',
737: 1:    '✅f(7, 1, 8) = true',
737: 1:    '✅f(7, 1, 13) = false',
737: 1:    '✅f(43, 1, 46) = true',
737: 1:    '✅f(40, 1, 46) = false',
737: 1:    '✅f(40, 2, 47) = true',
737: 1:    '✅f(40, 2, 50) = true',
737: 1:    '✅f(40, 2, 52) = false',
737: 1:    '✅f(22, 2, 33) = false',
737: 1:    '✅f(0, 2, 10) = true',
737: 1:    '✅f(1000000, 1000, 1000100) = true',
737: 1:    '✅f(2, 1000000, 100003) = false',
737: 1:    '✅f(20, 0, 19) = true',
737: 1:    '✅f(20, 0, 21) = false',
737: 1:    '❌f(20, 4, 51) = ??? != false'
737: 1:  ],
737: 1:  'level': 26,
737: 1:  'nextQuestion': '20, 4, 51',
737: 1:  'questions': [
737: 1:    '0, 1, 5',
737: 1:    '1, 0, 1',
737: 1:    '1, 0, 2',
737: 1:    '3, 1, 7',
737: 1:    '4, 2, 14',
737: 1:    '3, 2, 14',
737: 1:    '0, 2, 5',
737: 1:    '3, 1, 6',
737: 1:    '3, 1, 9',
737: 1:    '3, 2, 9',
737: 1:    '10, 10, 0',
737: 1:    '0, 0, 1',
737: 1:    '0, 1, 1',
737: 1:    '0, 0, 2',
737: 1:    '2, 0, 2',
737: 1:    '0, 1, 2',
737: 1:    '1, 1, 2',
737: 1:    '2, 1, 3',
737: 1:    '3, 1, 4',
737: 1:    '2, 1, 1',
737: 1:    '2, 2, 6',
737: 1:    '6, 1, 11',
737: 1:    '5, 0, 1',
737: 1:    '3, 1, 8',
737: 1:    '3, 2, 10',
737: 1:    '3, 2, 8',
737: 1:    '6, 0, 11',
737: 1:    '1, 4, 11',
737: 1:    '0, 3, 10',
737: 1:    '1, 4, 12',
737: 1:    '1, 1, 7',
737: 1:    '2, 1, 7',
737: 1:    '7, 1, 11',
737: 1:    '7, 1, 8',
737: 1:    '7, 1, 13',
737: 1:    '43, 1, 46',
737: 1:    '40, 1, 46',
737: 1:    '40, 2, 47',
737: 1:    '40, 2, 50',
737: 1:    '40, 2, 52',
737: 1:    '22, 2, 33',
737: 1:    '0, 2, 10',
737: 1:    '1000000, 1000, 1000100',
737: 1:    '2, 1000000, 100003',
737: 1:    '20, 0, 19',
737: 1:    '20, 0, 21',
737: 1:    '20, 4, 51'
737: 1:  ]
737: 1:}
737: 1:Scores: 62644
737: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'false', 'true', 'false', 'false']')
737: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
738: 1:BoardData {
738: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
738: 1:  'expectedAnswer': 'true',
738: 1:  'history': [
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '0, 1, 5',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '1, 0, 1',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '1, 0, 2',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '3, 1, 7',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '4, 2, 14',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '3, 2, 14',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '0, 2, 5',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '3, 1, 6',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '3, 1, 9',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '3, 2, 9',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '10, 10, 0',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '0, 0, 1',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '0, 1, 1',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '0, 0, 2',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '2, 0, 2',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '0, 1, 2',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '1, 1, 2',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '2, 1, 3',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '3, 1, 4',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '2, 1, 1',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '2, 2, 6',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '6, 1, 11',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '5, 0, 1',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '3, 1, 8',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '3, 2, 10',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '3, 2, 8',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '6, 0, 11',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '1, 4, 11',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '0, 3, 10',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '1, 4, 12',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '1, 1, 7',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '2, 1, 7',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '7, 1, 11',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '7, 1, 8',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '7, 1, 13',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '43, 1, 46',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '40, 1, 46',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '40, 2, 47',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '40, 2, 50',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '40, 2, 52',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '22, 2, 33',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '0, 2, 10',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '1000000, 1000, 1000100',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '2, 1000000, 100003',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '20, 0, 19',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '20, 0, 21',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '20, 4, 51',
738: 1:      'valid': true
738: 1:    }
738: 1:  ],
738: 1:  'info': [
738: 1:    '✅f(0, 1, 5) = true',
738: 1:    '✅f(1, 0, 1) = true',
738: 1:    '✅f(1, 0, 2) = false',
738: 1:    '✅f(3, 1, 7) = true',
738: 1:    '✅f(4, 2, 14) = true',
738: 1:    '✅f(3, 2, 14) = false',
738: 1:    '✅f(0, 2, 5) = true',
738: 1:    '✅f(3, 1, 6) = true',
738: 1:    '✅f(3, 1, 9) = false',
738: 1:    '✅f(3, 2, 9) = false',
738: 1:    '✅f(10, 10, 0) = true',
738: 1:    '✅f(0, 0, 1) = false',
738: 1:    '✅f(0, 1, 1) = false',
738: 1:    '✅f(0, 0, 2) = false',
738: 1:    '✅f(2, 0, 2) = true',
738: 1:    '✅f(0, 1, 2) = false',
738: 1:    '✅f(1, 1, 2) = false',
738: 1:    '✅f(2, 1, 3) = false',
738: 1:    '✅f(3, 1, 4) = false',
738: 1:    '✅f(2, 1, 1) = true',
738: 1:    '✅f(2, 2, 6) = true',
738: 1:    '✅f(6, 1, 11) = true',
738: 1:    '✅f(5, 0, 1) = true',
738: 1:    '✅f(3, 1, 8) = true',
738: 1:    '✅f(3, 2, 10) = true',
738: 1:    '✅f(3, 2, 8) = true',
738: 1:    '✅f(6, 0, 11) = false',
738: 1:    '✅f(1, 4, 11) = true',
738: 1:    '✅f(0, 3, 10) = true',
738: 1:    '✅f(1, 4, 12) = false',
738: 1:    '✅f(1, 1, 7) = false',
738: 1:    '✅f(2, 1, 7) = true',
738: 1:    '✅f(7, 1, 11) = true',
738: 1:    '✅f(7, 1, 8) = true',
738: 1:    '✅f(7, 1, 13) = false',
738: 1:    '✅f(43, 1, 46) = true',
738: 1:    '✅f(40, 1, 46) = false',
738: 1:    '✅f(40, 2, 47) = true',
738: 1:    '✅f(40, 2, 50) = true',
738: 1:    '✅f(40, 2, 52) = false',
738: 1:    '✅f(22, 2, 33) = false',
738: 1:    '✅f(0, 2, 10) = true',
738: 1:    '✅f(1000000, 1000, 1000100) = true',
738: 1:    '✅f(2, 1000000, 100003) = false',
738: 1:    '✅f(20, 0, 19) = true',
738: 1:    '✅f(20, 0, 21) = false',
738: 1:    '✅f(20, 4, 51) = false',
738: 1:    '❌f(20, 4, 39) = ??? != true'
738: 1:  ],
738: 1:  'level': 26,
738: 1:  'nextQuestion': '20, 4, 39',
738: 1:  'questions': [
738: 1:    '0, 1, 5',
738: 1:    '1, 0, 1',
738: 1:    '1, 0, 2',
738: 1:    '3, 1, 7',
738: 1:    '4, 2, 14',
738: 1:    '3, 2, 14',
738: 1:    '0, 2, 5',
738: 1:    '3, 1, 6',
738: 1:    '3, 1, 9',
738: 1:    '3, 2, 9',
738: 1:    '10, 10, 0',
738: 1:    '0, 0, 1',
738: 1:    '0, 1, 1',
738: 1:    '0, 0, 2',
738: 1:    '2, 0, 2',
738: 1:    '0, 1, 2',
738: 1:    '1, 1, 2',
738: 1:    '2, 1, 3',
738: 1:    '3, 1, 4',
738: 1:    '2, 1, 1',
738: 1:    '2, 2, 6',
738: 1:    '6, 1, 11',
738: 1:    '5, 0, 1',
738: 1:    '3, 1, 8',
738: 1:    '3, 2, 10',
738: 1:    '3, 2, 8',
738: 1:    '6, 0, 11',
738: 1:    '1, 4, 11',
738: 1:    '0, 3, 10',
738: 1:    '1, 4, 12',
738: 1:    '1, 1, 7',
738: 1:    '2, 1, 7',
738: 1:    '7, 1, 11',
738: 1:    '7, 1, 8',
738: 1:    '7, 1, 13',
738: 1:    '43, 1, 46',
738: 1:    '40, 1, 46',
738: 1:    '40, 2, 47',
738: 1:    '40, 2, 50',
738: 1:    '40, 2, 52',
738: 1:    '22, 2, 33',
738: 1:    '0, 2, 10',
738: 1:    '1000000, 1000, 1000100',
738: 1:    '2, 1000000, 100003',
738: 1:    '20, 0, 19',
738: 1:    '20, 0, 21',
738: 1:    '20, 4, 51',
738: 1:    '20, 4, 39'
738: 1:  ]
738: 1:}
738: 1:Scores: 62651
738: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'false', 'true', 'false', 'false', 'true']')
738: 1:Fire Event: PassTest{complexity=37, testCount=48}
738: 1:Fire Event: NextAlgorithm{complexity=37, time=0}
------------------------------------------
739: 1:BoardData {
739: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
739: 1:  'history': [
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '0, 1, 5',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '1, 0, 1',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '1, 0, 2',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '3, 1, 7',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '4, 2, 14',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '3, 2, 14',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '0, 2, 5',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '3, 1, 6',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '3, 1, 9',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '3, 2, 9',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '10, 10, 0',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '0, 0, 1',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '0, 1, 1',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '0, 0, 2',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '2, 0, 2',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '0, 1, 2',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '1, 1, 2',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '2, 1, 3',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '3, 1, 4',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '2, 1, 1',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '2, 2, 6',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '6, 1, 11',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '5, 0, 1',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '3, 1, 8',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '3, 2, 10',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '3, 2, 8',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '6, 0, 11',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '1, 4, 11',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '0, 3, 10',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '1, 4, 12',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '1, 1, 7',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '2, 1, 7',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '7, 1, 11',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '7, 1, 8',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '7, 1, 13',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '43, 1, 46',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '40, 1, 46',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '40, 2, 47',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '40, 2, 50',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '40, 2, 52',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '22, 2, 33',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '0, 2, 10',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '1000000, 1000, 1000100',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '2, 1000000, 100003',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '20, 0, 19',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '20, 0, 21',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '20, 4, 51',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '20, 4, 39',
739: 1:      'valid': true
739: 1:    }
739: 1:  ],
739: 1:  'info': [
739: 1:    '✅f(0, 1, 5) = true',
739: 1:    '✅f(1, 0, 1) = true',
739: 1:    '✅f(1, 0, 2) = false',
739: 1:    '✅f(3, 1, 7) = true',
739: 1:    '✅f(4, 2, 14) = true',
739: 1:    '✅f(3, 2, 14) = false',
739: 1:    '✅f(0, 2, 5) = true',
739: 1:    '✅f(3, 1, 6) = true',
739: 1:    '✅f(3, 1, 9) = false',
739: 1:    '✅f(3, 2, 9) = false',
739: 1:    '✅f(10, 10, 0) = true',
739: 1:    '✅f(0, 0, 1) = false',
739: 1:    '✅f(0, 1, 1) = false',
739: 1:    '✅f(0, 0, 2) = false',
739: 1:    '✅f(2, 0, 2) = true',
739: 1:    '✅f(0, 1, 2) = false',
739: 1:    '✅f(1, 1, 2) = false',
739: 1:    '✅f(2, 1, 3) = false',
739: 1:    '✅f(3, 1, 4) = false',
739: 1:    '✅f(2, 1, 1) = true',
739: 1:    '✅f(2, 2, 6) = true',
739: 1:    '✅f(6, 1, 11) = true',
739: 1:    '✅f(5, 0, 1) = true',
739: 1:    '✅f(3, 1, 8) = true',
739: 1:    '✅f(3, 2, 10) = true',
739: 1:    '✅f(3, 2, 8) = true',
739: 1:    '✅f(6, 0, 11) = false',
739: 1:    '✅f(1, 4, 11) = true',
739: 1:    '✅f(0, 3, 10) = true',
739: 1:    '✅f(1, 4, 12) = false',
739: 1:    '✅f(1, 1, 7) = false',
739: 1:    '✅f(2, 1, 7) = true',
739: 1:    '✅f(7, 1, 11) = true',
739: 1:    '✅f(7, 1, 8) = true',
739: 1:    '✅f(7, 1, 13) = false',
739: 1:    '✅f(43, 1, 46) = true',
739: 1:    '✅f(40, 1, 46) = false',
739: 1:    '✅f(40, 2, 47) = true',
739: 1:    '✅f(40, 2, 50) = true',
739: 1:    '✅f(40, 2, 52) = false',
739: 1:    '✅f(22, 2, 33) = false',
739: 1:    '✅f(0, 2, 10) = true',
739: 1:    '✅f(1000000, 1000, 1000100) = true',
739: 1:    '✅f(2, 1000000, 100003) = false',
739: 1:    '✅f(20, 0, 19) = true',
739: 1:    '✅f(20, 0, 21) = false',
739: 1:    '✅f(20, 4, 51) = false',
739: 1:    '✅f(20, 4, 39) = true'
739: 1:  ],
739: 1:  'level': 26,
739: 1:  'questions': []
739: 1:}
739: 1:Scores: 67652
739: 1:Answer: message('StartNextLevel')
739: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
740: 1:BoardData {
740: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
740: 1:  'expectedAnswer': 'I',
740: 1:  'history': [],
740: 1:  'info': ['❌f(1) = ??? != I'],
740: 1:  'level': 27,
740: 1:  'nextQuestion': '1',
740: 1:  'questions': ['1']
740: 1:}
740: 1:Scores: 67652
740: 1:Answer: message('['I']')
740: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
741: 1:BoardData {
741: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
741: 1:  'expectedAnswer': 'II',
741: 1:  'history': [{
741: 1:    'answer': 'I',
741: 1:    'question': '1',
741: 1:    'valid': true
741: 1:  }],
741: 1:  'info': [
741: 1:    '✅f(1) = I',
741: 1:    '❌f(2) = ??? != II'
741: 1:  ],
741: 1:  'level': 27,
741: 1:  'nextQuestion': '2',
741: 1:  'questions': [
741: 1:    '1',
741: 1:    '2'
741: 1:  ]
741: 1:}
741: 1:Scores: 67662
741: 1:Answer: message('['I', 'II']')
741: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
742: 1:BoardData {
742: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
742: 1:  'expectedAnswer': 'III',
742: 1:  'history': [
742: 1:    {
742: 1:      'answer': 'I',
742: 1:      'question': '1',
742: 1:      'valid': true
742: 1:    },
742: 1:    {
742: 1:      'answer': 'II',
742: 1:      'question': '2',
742: 1:      'valid': true
742: 1:    }
742: 1:  ],
742: 1:  'info': [
742: 1:    '✅f(1) = I',
742: 1:    '✅f(2) = II',
742: 1:    '❌f(3) = ??? != III'
742: 1:  ],
742: 1:  'level': 27,
742: 1:  'nextQuestion': '3',
742: 1:  'questions': [
742: 1:    '1',
742: 1:    '2',
742: 1:    '3'
742: 1:  ]
742: 1:}
742: 1:Scores: 67672
742: 1:Answer: message('['I', 'II', 'III']')
742: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
743: 1:BoardData {
743: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
743: 1:  'expectedAnswer': 'IV',
743: 1:  'history': [
743: 1:    {
743: 1:      'answer': 'I',
743: 1:      'question': '1',
743: 1:      'valid': true
743: 1:    },
743: 1:    {
743: 1:      'answer': 'II',
743: 1:      'question': '2',
743: 1:      'valid': true
743: 1:    },
743: 1:    {
743: 1:      'answer': 'III',
743: 1:      'question': '3',
743: 1:      'valid': true
743: 1:    }
743: 1:  ],
743: 1:  'info': [
743: 1:    '✅f(1) = I',
743: 1:    '✅f(2) = II',
743: 1:    '✅f(3) = III',
743: 1:    '❌f(4) = ??? != IV'
743: 1:  ],
743: 1:  'level': 27,
743: 1:  'nextQuestion': '4',
743: 1:  'questions': [
743: 1:    '1',
743: 1:    '2',
743: 1:    '3',
743: 1:    '4'
743: 1:  ]
743: 1:}
743: 1:Scores: 67682
743: 1:Answer: message('['I', 'II', 'III', 'IV']')
743: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
744: 1:BoardData {
744: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
744: 1:  'expectedAnswer': 'V',
744: 1:  'history': [
744: 1:    {
744: 1:      'answer': 'I',
744: 1:      'question': '1',
744: 1:      'valid': true
744: 1:    },
744: 1:    {
744: 1:      'answer': 'II',
744: 1:      'question': '2',
744: 1:      'valid': true
744: 1:    },
744: 1:    {
744: 1:      'answer': 'III',
744: 1:      'question': '3',
744: 1:      'valid': true
744: 1:    },
744: 1:    {
744: 1:      'answer': 'IV',
744: 1:      'question': '4',
744: 1:      'valid': true
744: 1:    }
744: 1:  ],
744: 1:  'info': [
744: 1:    '✅f(1) = I',
744: 1:    '✅f(2) = II',
744: 1:    '✅f(3) = III',
744: 1:    '✅f(4) = IV',
744: 1:    '❌f(5) = ??? != V'
744: 1:  ],
744: 1:  'level': 27,
744: 1:  'nextQuestion': '5',
744: 1:  'questions': [
744: 1:    '1',
744: 1:    '2',
744: 1:    '3',
744: 1:    '4',
744: 1:    '5'
744: 1:  ]
744: 1:}
744: 1:Scores: 67692
744: 1:Answer: message('['I', 'II', 'III', 'IV', 'V']')
744: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
745: 1:BoardData {
745: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
745: 1:  'expectedAnswer': 'VI',
745: 1:  'history': [
745: 1:    {
745: 1:      'answer': 'I',
745: 1:      'question': '1',
745: 1:      'valid': true
745: 1:    },
745: 1:    {
745: 1:      'answer': 'II',
745: 1:      'question': '2',
745: 1:      'valid': true
745: 1:    },
745: 1:    {
745: 1:      'answer': 'III',
745: 1:      'question': '3',
745: 1:      'valid': true
745: 1:    },
745: 1:    {
745: 1:      'answer': 'IV',
745: 1:      'question': '4',
745: 1:      'valid': true
745: 1:    },
745: 1:    {
745: 1:      'answer': 'V',
745: 1:      'question': '5',
745: 1:      'valid': true
745: 1:    }
745: 1:  ],
745: 1:  'info': [
745: 1:    '✅f(1) = I',
745: 1:    '✅f(2) = II',
745: 1:    '✅f(3) = III',
745: 1:    '✅f(4) = IV',
745: 1:    '✅f(5) = V',
745: 1:    '❌f(6) = ??? != VI'
745: 1:  ],
745: 1:  'level': 27,
745: 1:  'nextQuestion': '6',
745: 1:  'questions': [
745: 1:    '1',
745: 1:    '2',
745: 1:    '3',
745: 1:    '4',
745: 1:    '5',
745: 1:    '6'
745: 1:  ]
745: 1:}
745: 1:Scores: 67702
745: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI']')
745: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
746: 1:BoardData {
746: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
746: 1:  'expectedAnswer': 'VII',
746: 1:  'history': [
746: 1:    {
746: 1:      'answer': 'I',
746: 1:      'question': '1',
746: 1:      'valid': true
746: 1:    },
746: 1:    {
746: 1:      'answer': 'II',
746: 1:      'question': '2',
746: 1:      'valid': true
746: 1:    },
746: 1:    {
746: 1:      'answer': 'III',
746: 1:      'question': '3',
746: 1:      'valid': true
746: 1:    },
746: 1:    {
746: 1:      'answer': 'IV',
746: 1:      'question': '4',
746: 1:      'valid': true
746: 1:    },
746: 1:    {
746: 1:      'answer': 'V',
746: 1:      'question': '5',
746: 1:      'valid': true
746: 1:    },
746: 1:    {
746: 1:      'answer': 'VI',
746: 1:      'question': '6',
746: 1:      'valid': true
746: 1:    }
746: 1:  ],
746: 1:  'info': [
746: 1:    '✅f(1) = I',
746: 1:    '✅f(2) = II',
746: 1:    '✅f(3) = III',
746: 1:    '✅f(4) = IV',
746: 1:    '✅f(5) = V',
746: 1:    '✅f(6) = VI',
746: 1:    '❌f(7) = ??? != VII'
746: 1:  ],
746: 1:  'level': 27,
746: 1:  'nextQuestion': '7',
746: 1:  'questions': [
746: 1:    '1',
746: 1:    '2',
746: 1:    '3',
746: 1:    '4',
746: 1:    '5',
746: 1:    '6',
746: 1:    '7'
746: 1:  ]
746: 1:}
746: 1:Scores: 67712
746: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII']')
746: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
747: 1:BoardData {
747: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
747: 1:  'expectedAnswer': 'VIII',
747: 1:  'history': [
747: 1:    {
747: 1:      'answer': 'I',
747: 1:      'question': '1',
747: 1:      'valid': true
747: 1:    },
747: 1:    {
747: 1:      'answer': 'II',
747: 1:      'question': '2',
747: 1:      'valid': true
747: 1:    },
747: 1:    {
747: 1:      'answer': 'III',
747: 1:      'question': '3',
747: 1:      'valid': true
747: 1:    },
747: 1:    {
747: 1:      'answer': 'IV',
747: 1:      'question': '4',
747: 1:      'valid': true
747: 1:    },
747: 1:    {
747: 1:      'answer': 'V',
747: 1:      'question': '5',
747: 1:      'valid': true
747: 1:    },
747: 1:    {
747: 1:      'answer': 'VI',
747: 1:      'question': '6',
747: 1:      'valid': true
747: 1:    },
747: 1:    {
747: 1:      'answer': 'VII',
747: 1:      'question': '7',
747: 1:      'valid': true
747: 1:    }
747: 1:  ],
747: 1:  'info': [
747: 1:    '✅f(1) = I',
747: 1:    '✅f(2) = II',
747: 1:    '✅f(3) = III',
747: 1:    '✅f(4) = IV',
747: 1:    '✅f(5) = V',
747: 1:    '✅f(6) = VI',
747: 1:    '✅f(7) = VII',
747: 1:    '❌f(8) = ??? != VIII'
747: 1:  ],
747: 1:  'level': 27,
747: 1:  'nextQuestion': '8',
747: 1:  'questions': [
747: 1:    '1',
747: 1:    '2',
747: 1:    '3',
747: 1:    '4',
747: 1:    '5',
747: 1:    '6',
747: 1:    '7',
747: 1:    '8'
747: 1:  ]
747: 1:}
747: 1:Scores: 67722
747: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII']')
747: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
748: 1:BoardData {
748: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
748: 1:  'expectedAnswer': 'IX',
748: 1:  'history': [
748: 1:    {
748: 1:      'answer': 'I',
748: 1:      'question': '1',
748: 1:      'valid': true
748: 1:    },
748: 1:    {
748: 1:      'answer': 'II',
748: 1:      'question': '2',
748: 1:      'valid': true
748: 1:    },
748: 1:    {
748: 1:      'answer': 'III',
748: 1:      'question': '3',
748: 1:      'valid': true
748: 1:    },
748: 1:    {
748: 1:      'answer': 'IV',
748: 1:      'question': '4',
748: 1:      'valid': true
748: 1:    },
748: 1:    {
748: 1:      'answer': 'V',
748: 1:      'question': '5',
748: 1:      'valid': true
748: 1:    },
748: 1:    {
748: 1:      'answer': 'VI',
748: 1:      'question': '6',
748: 1:      'valid': true
748: 1:    },
748: 1:    {
748: 1:      'answer': 'VII',
748: 1:      'question': '7',
748: 1:      'valid': true
748: 1:    },
748: 1:    {
748: 1:      'answer': 'VIII',
748: 1:      'question': '8',
748: 1:      'valid': true
748: 1:    }
748: 1:  ],
748: 1:  'info': [
748: 1:    '✅f(1) = I',
748: 1:    '✅f(2) = II',
748: 1:    '✅f(3) = III',
748: 1:    '✅f(4) = IV',
748: 1:    '✅f(5) = V',
748: 1:    '✅f(6) = VI',
748: 1:    '✅f(7) = VII',
748: 1:    '✅f(8) = VIII',
748: 1:    '❌f(9) = ??? != IX'
748: 1:  ],
748: 1:  'level': 27,
748: 1:  'nextQuestion': '9',
748: 1:  'questions': [
748: 1:    '1',
748: 1:    '2',
748: 1:    '3',
748: 1:    '4',
748: 1:    '5',
748: 1:    '6',
748: 1:    '7',
748: 1:    '8',
748: 1:    '9'
748: 1:  ]
748: 1:}
748: 1:Scores: 67732
748: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX']')
748: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
749: 1:BoardData {
749: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
749: 1:  'expectedAnswer': 'X',
749: 1:  'history': [
749: 1:    {
749: 1:      'answer': 'I',
749: 1:      'question': '1',
749: 1:      'valid': true
749: 1:    },
749: 1:    {
749: 1:      'answer': 'II',
749: 1:      'question': '2',
749: 1:      'valid': true
749: 1:    },
749: 1:    {
749: 1:      'answer': 'III',
749: 1:      'question': '3',
749: 1:      'valid': true
749: 1:    },
749: 1:    {
749: 1:      'answer': 'IV',
749: 1:      'question': '4',
749: 1:      'valid': true
749: 1:    },
749: 1:    {
749: 1:      'answer': 'V',
749: 1:      'question': '5',
749: 1:      'valid': true
749: 1:    },
749: 1:    {
749: 1:      'answer': 'VI',
749: 1:      'question': '6',
749: 1:      'valid': true
749: 1:    },
749: 1:    {
749: 1:      'answer': 'VII',
749: 1:      'question': '7',
749: 1:      'valid': true
749: 1:    },
749: 1:    {
749: 1:      'answer': 'VIII',
749: 1:      'question': '8',
749: 1:      'valid': true
749: 1:    },
749: 1:    {
749: 1:      'answer': 'IX',
749: 1:      'question': '9',
749: 1:      'valid': true
749: 1:    }
749: 1:  ],
749: 1:  'info': [
749: 1:    '✅f(1) = I',
749: 1:    '✅f(2) = II',
749: 1:    '✅f(3) = III',
749: 1:    '✅f(4) = IV',
749: 1:    '✅f(5) = V',
749: 1:    '✅f(6) = VI',
749: 1:    '✅f(7) = VII',
749: 1:    '✅f(8) = VIII',
749: 1:    '✅f(9) = IX',
749: 1:    '❌f(10) = ??? != X'
749: 1:  ],
749: 1:  'level': 27,
749: 1:  'nextQuestion': '10',
749: 1:  'questions': [
749: 1:    '1',
749: 1:    '2',
749: 1:    '3',
749: 1:    '4',
749: 1:    '5',
749: 1:    '6',
749: 1:    '7',
749: 1:    '8',
749: 1:    '9',
749: 1:    '10'
749: 1:  ]
749: 1:}
749: 1:Scores: 67742
749: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X']')
749: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
750: 1:BoardData {
750: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
750: 1:  'expectedAnswer': 'XI',
750: 1:  'history': [
750: 1:    {
750: 1:      'answer': 'I',
750: 1:      'question': '1',
750: 1:      'valid': true
750: 1:    },
750: 1:    {
750: 1:      'answer': 'II',
750: 1:      'question': '2',
750: 1:      'valid': true
750: 1:    },
750: 1:    {
750: 1:      'answer': 'III',
750: 1:      'question': '3',
750: 1:      'valid': true
750: 1:    },
750: 1:    {
750: 1:      'answer': 'IV',
750: 1:      'question': '4',
750: 1:      'valid': true
750: 1:    },
750: 1:    {
750: 1:      'answer': 'V',
750: 1:      'question': '5',
750: 1:      'valid': true
750: 1:    },
750: 1:    {
750: 1:      'answer': 'VI',
750: 1:      'question': '6',
750: 1:      'valid': true
750: 1:    },
750: 1:    {
750: 1:      'answer': 'VII',
750: 1:      'question': '7',
750: 1:      'valid': true
750: 1:    },
750: 1:    {
750: 1:      'answer': 'VIII',
750: 1:      'question': '8',
750: 1:      'valid': true
750: 1:    },
750: 1:    {
750: 1:      'answer': 'IX',
750: 1:      'question': '9',
750: 1:      'valid': true
750: 1:    },
750: 1:    {
750: 1:      'answer': 'X',
750: 1:      'question': '10',
750: 1:      'valid': true
750: 1:    }
750: 1:  ],
750: 1:  'info': [
750: 1:    '✅f(1) = I',
750: 1:    '✅f(2) = II',
750: 1:    '✅f(3) = III',
750: 1:    '✅f(4) = IV',
750: 1:    '✅f(5) = V',
750: 1:    '✅f(6) = VI',
750: 1:    '✅f(7) = VII',
750: 1:    '✅f(8) = VIII',
750: 1:    '✅f(9) = IX',
750: 1:    '✅f(10) = X',
750: 1:    '❌f(11) = ??? != XI'
750: 1:  ],
750: 1:  'level': 27,
750: 1:  'nextQuestion': '11',
750: 1:  'questions': [
750: 1:    '1',
750: 1:    '2',
750: 1:    '3',
750: 1:    '4',
750: 1:    '5',
750: 1:    '6',
750: 1:    '7',
750: 1:    '8',
750: 1:    '9',
750: 1:    '10',
750: 1:    '11'
750: 1:  ]
750: 1:}
750: 1:Scores: 67752
750: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI']')
750: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
751: 1:BoardData {
751: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
751: 1:  'expectedAnswer': 'XII',
751: 1:  'history': [
751: 1:    {
751: 1:      'answer': 'I',
751: 1:      'question': '1',
751: 1:      'valid': true
751: 1:    },
751: 1:    {
751: 1:      'answer': 'II',
751: 1:      'question': '2',
751: 1:      'valid': true
751: 1:    },
751: 1:    {
751: 1:      'answer': 'III',
751: 1:      'question': '3',
751: 1:      'valid': true
751: 1:    },
751: 1:    {
751: 1:      'answer': 'IV',
751: 1:      'question': '4',
751: 1:      'valid': true
751: 1:    },
751: 1:    {
751: 1:      'answer': 'V',
751: 1:      'question': '5',
751: 1:      'valid': true
751: 1:    },
751: 1:    {
751: 1:      'answer': 'VI',
751: 1:      'question': '6',
751: 1:      'valid': true
751: 1:    },
751: 1:    {
751: 1:      'answer': 'VII',
751: 1:      'question': '7',
751: 1:      'valid': true
751: 1:    },
751: 1:    {
751: 1:      'answer': 'VIII',
751: 1:      'question': '8',
751: 1:      'valid': true
751: 1:    },
751: 1:    {
751: 1:      'answer': 'IX',
751: 1:      'question': '9',
751: 1:      'valid': true
751: 1:    },
751: 1:    {
751: 1:      'answer': 'X',
751: 1:      'question': '10',
751: 1:      'valid': true
751: 1:    },
751: 1:    {
751: 1:      'answer': 'XI',
751: 1:      'question': '11',
751: 1:      'valid': true
751: 1:    }
751: 1:  ],
751: 1:  'info': [
751: 1:    '✅f(1) = I',
751: 1:    '✅f(2) = II',
751: 1:    '✅f(3) = III',
751: 1:    '✅f(4) = IV',
751: 1:    '✅f(5) = V',
751: 1:    '✅f(6) = VI',
751: 1:    '✅f(7) = VII',
751: 1:    '✅f(8) = VIII',
751: 1:    '✅f(9) = IX',
751: 1:    '✅f(10) = X',
751: 1:    '✅f(11) = XI',
751: 1:    '❌f(12) = ??? != XII'
751: 1:  ],
751: 1:  'level': 27,
751: 1:  'nextQuestion': '12',
751: 1:  'questions': [
751: 1:    '1',
751: 1:    '2',
751: 1:    '3',
751: 1:    '4',
751: 1:    '5',
751: 1:    '6',
751: 1:    '7',
751: 1:    '8',
751: 1:    '9',
751: 1:    '10',
751: 1:    '11',
751: 1:    '12'
751: 1:  ]
751: 1:}
751: 1:Scores: 67762
751: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII']')
751: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
752: 1:BoardData {
752: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
752: 1:  'expectedAnswer': 'XIII',
752: 1:  'history': [
752: 1:    {
752: 1:      'answer': 'I',
752: 1:      'question': '1',
752: 1:      'valid': true
752: 1:    },
752: 1:    {
752: 1:      'answer': 'II',
752: 1:      'question': '2',
752: 1:      'valid': true
752: 1:    },
752: 1:    {
752: 1:      'answer': 'III',
752: 1:      'question': '3',
752: 1:      'valid': true
752: 1:    },
752: 1:    {
752: 1:      'answer': 'IV',
752: 1:      'question': '4',
752: 1:      'valid': true
752: 1:    },
752: 1:    {
752: 1:      'answer': 'V',
752: 1:      'question': '5',
752: 1:      'valid': true
752: 1:    },
752: 1:    {
752: 1:      'answer': 'VI',
752: 1:      'question': '6',
752: 1:      'valid': true
752: 1:    },
752: 1:    {
752: 1:      'answer': 'VII',
752: 1:      'question': '7',
752: 1:      'valid': true
752: 1:    },
752: 1:    {
752: 1:      'answer': 'VIII',
752: 1:      'question': '8',
752: 1:      'valid': true
752: 1:    },
752: 1:    {
752: 1:      'answer': 'IX',
752: 1:      'question': '9',
752: 1:      'valid': true
752: 1:    },
752: 1:    {
752: 1:      'answer': 'X',
752: 1:      'question': '10',
752: 1:      'valid': true
752: 1:    },
752: 1:    {
752: 1:      'answer': 'XI',
752: 1:      'question': '11',
752: 1:      'valid': true
752: 1:    },
752: 1:    {
752: 1:      'answer': 'XII',
752: 1:      'question': '12',
752: 1:      'valid': true
752: 1:    }
752: 1:  ],
752: 1:  'info': [
752: 1:    '✅f(1) = I',
752: 1:    '✅f(2) = II',
752: 1:    '✅f(3) = III',
752: 1:    '✅f(4) = IV',
752: 1:    '✅f(5) = V',
752: 1:    '✅f(6) = VI',
752: 1:    '✅f(7) = VII',
752: 1:    '✅f(8) = VIII',
752: 1:    '✅f(9) = IX',
752: 1:    '✅f(10) = X',
752: 1:    '✅f(11) = XI',
752: 1:    '✅f(12) = XII',
752: 1:    '❌f(13) = ??? != XIII'
752: 1:  ],
752: 1:  'level': 27,
752: 1:  'nextQuestion': '13',
752: 1:  'questions': [
752: 1:    '1',
752: 1:    '2',
752: 1:    '3',
752: 1:    '4',
752: 1:    '5',
752: 1:    '6',
752: 1:    '7',
752: 1:    '8',
752: 1:    '9',
752: 1:    '10',
752: 1:    '11',
752: 1:    '12',
752: 1:    '13'
752: 1:  ]
752: 1:}
752: 1:Scores: 67772
752: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII']')
752: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
753: 1:BoardData {
753: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
753: 1:  'expectedAnswer': 'XIV',
753: 1:  'history': [
753: 1:    {
753: 1:      'answer': 'I',
753: 1:      'question': '1',
753: 1:      'valid': true
753: 1:    },
753: 1:    {
753: 1:      'answer': 'II',
753: 1:      'question': '2',
753: 1:      'valid': true
753: 1:    },
753: 1:    {
753: 1:      'answer': 'III',
753: 1:      'question': '3',
753: 1:      'valid': true
753: 1:    },
753: 1:    {
753: 1:      'answer': 'IV',
753: 1:      'question': '4',
753: 1:      'valid': true
753: 1:    },
753: 1:    {
753: 1:      'answer': 'V',
753: 1:      'question': '5',
753: 1:      'valid': true
753: 1:    },
753: 1:    {
753: 1:      'answer': 'VI',
753: 1:      'question': '6',
753: 1:      'valid': true
753: 1:    },
753: 1:    {
753: 1:      'answer': 'VII',
753: 1:      'question': '7',
753: 1:      'valid': true
753: 1:    },
753: 1:    {
753: 1:      'answer': 'VIII',
753: 1:      'question': '8',
753: 1:      'valid': true
753: 1:    },
753: 1:    {
753: 1:      'answer': 'IX',
753: 1:      'question': '9',
753: 1:      'valid': true
753: 1:    },
753: 1:    {
753: 1:      'answer': 'X',
753: 1:      'question': '10',
753: 1:      'valid': true
753: 1:    },
753: 1:    {
753: 1:      'answer': 'XI',
753: 1:      'question': '11',
753: 1:      'valid': true
753: 1:    },
753: 1:    {
753: 1:      'answer': 'XII',
753: 1:      'question': '12',
753: 1:      'valid': true
753: 1:    },
753: 1:    {
753: 1:      'answer': 'XIII',
753: 1:      'question': '13',
753: 1:      'valid': true
753: 1:    }
753: 1:  ],
753: 1:  'info': [
753: 1:    '✅f(1) = I',
753: 1:    '✅f(2) = II',
753: 1:    '✅f(3) = III',
753: 1:    '✅f(4) = IV',
753: 1:    '✅f(5) = V',
753: 1:    '✅f(6) = VI',
753: 1:    '✅f(7) = VII',
753: 1:    '✅f(8) = VIII',
753: 1:    '✅f(9) = IX',
753: 1:    '✅f(10) = X',
753: 1:    '✅f(11) = XI',
753: 1:    '✅f(12) = XII',
753: 1:    '✅f(13) = XIII',
753: 1:    '❌f(14) = ??? != XIV'
753: 1:  ],
753: 1:  'level': 27,
753: 1:  'nextQuestion': '14',
753: 1:  'questions': [
753: 1:    '1',
753: 1:    '2',
753: 1:    '3',
753: 1:    '4',
753: 1:    '5',
753: 1:    '6',
753: 1:    '7',
753: 1:    '8',
753: 1:    '9',
753: 1:    '10',
753: 1:    '11',
753: 1:    '12',
753: 1:    '13',
753: 1:    '14'
753: 1:  ]
753: 1:}
753: 1:Scores: 67782
753: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV']')
753: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
754: 1:BoardData {
754: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
754: 1:  'expectedAnswer': 'XV',
754: 1:  'history': [
754: 1:    {
754: 1:      'answer': 'I',
754: 1:      'question': '1',
754: 1:      'valid': true
754: 1:    },
754: 1:    {
754: 1:      'answer': 'II',
754: 1:      'question': '2',
754: 1:      'valid': true
754: 1:    },
754: 1:    {
754: 1:      'answer': 'III',
754: 1:      'question': '3',
754: 1:      'valid': true
754: 1:    },
754: 1:    {
754: 1:      'answer': 'IV',
754: 1:      'question': '4',
754: 1:      'valid': true
754: 1:    },
754: 1:    {
754: 1:      'answer': 'V',
754: 1:      'question': '5',
754: 1:      'valid': true
754: 1:    },
754: 1:    {
754: 1:      'answer': 'VI',
754: 1:      'question': '6',
754: 1:      'valid': true
754: 1:    },
754: 1:    {
754: 1:      'answer': 'VII',
754: 1:      'question': '7',
754: 1:      'valid': true
754: 1:    },
754: 1:    {
754: 1:      'answer': 'VIII',
754: 1:      'question': '8',
754: 1:      'valid': true
754: 1:    },
754: 1:    {
754: 1:      'answer': 'IX',
754: 1:      'question': '9',
754: 1:      'valid': true
754: 1:    },
754: 1:    {
754: 1:      'answer': 'X',
754: 1:      'question': '10',
754: 1:      'valid': true
754: 1:    },
754: 1:    {
754: 1:      'answer': 'XI',
754: 1:      'question': '11',
754: 1:      'valid': true
754: 1:    },
754: 1:    {
754: 1:      'answer': 'XII',
754: 1:      'question': '12',
754: 1:      'valid': true
754: 1:    },
754: 1:    {
754: 1:      'answer': 'XIII',
754: 1:      'question': '13',
754: 1:      'valid': true
754: 1:    },
754: 1:    {
754: 1:      'answer': 'XIV',
754: 1:      'question': '14',
754: 1:      'valid': true
754: 1:    }
754: 1:  ],
754: 1:  'info': [
754: 1:    '✅f(1) = I',
754: 1:    '✅f(2) = II',
754: 1:    '✅f(3) = III',
754: 1:    '✅f(4) = IV',
754: 1:    '✅f(5) = V',
754: 1:    '✅f(6) = VI',
754: 1:    '✅f(7) = VII',
754: 1:    '✅f(8) = VIII',
754: 1:    '✅f(9) = IX',
754: 1:    '✅f(10) = X',
754: 1:    '✅f(11) = XI',
754: 1:    '✅f(12) = XII',
754: 1:    '✅f(13) = XIII',
754: 1:    '✅f(14) = XIV',
754: 1:    '❌f(15) = ??? != XV'
754: 1:  ],
754: 1:  'level': 27,
754: 1:  'nextQuestion': '15',
754: 1:  'questions': [
754: 1:    '1',
754: 1:    '2',
754: 1:    '3',
754: 1:    '4',
754: 1:    '5',
754: 1:    '6',
754: 1:    '7',
754: 1:    '8',
754: 1:    '9',
754: 1:    '10',
754: 1:    '11',
754: 1:    '12',
754: 1:    '13',
754: 1:    '14',
754: 1:    '15'
754: 1:  ]
754: 1:}
754: 1:Scores: 67792
754: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV']')
754: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
755: 1:BoardData {
755: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
755: 1:  'expectedAnswer': 'XVI',
755: 1:  'history': [
755: 1:    {
755: 1:      'answer': 'I',
755: 1:      'question': '1',
755: 1:      'valid': true
755: 1:    },
755: 1:    {
755: 1:      'answer': 'II',
755: 1:      'question': '2',
755: 1:      'valid': true
755: 1:    },
755: 1:    {
755: 1:      'answer': 'III',
755: 1:      'question': '3',
755: 1:      'valid': true
755: 1:    },
755: 1:    {
755: 1:      'answer': 'IV',
755: 1:      'question': '4',
755: 1:      'valid': true
755: 1:    },
755: 1:    {
755: 1:      'answer': 'V',
755: 1:      'question': '5',
755: 1:      'valid': true
755: 1:    },
755: 1:    {
755: 1:      'answer': 'VI',
755: 1:      'question': '6',
755: 1:      'valid': true
755: 1:    },
755: 1:    {
755: 1:      'answer': 'VII',
755: 1:      'question': '7',
755: 1:      'valid': true
755: 1:    },
755: 1:    {
755: 1:      'answer': 'VIII',
755: 1:      'question': '8',
755: 1:      'valid': true
755: 1:    },
755: 1:    {
755: 1:      'answer': 'IX',
755: 1:      'question': '9',
755: 1:      'valid': true
755: 1:    },
755: 1:    {
755: 1:      'answer': 'X',
755: 1:      'question': '10',
755: 1:      'valid': true
755: 1:    },
755: 1:    {
755: 1:      'answer': 'XI',
755: 1:      'question': '11',
755: 1:      'valid': true
755: 1:    },
755: 1:    {
755: 1:      'answer': 'XII',
755: 1:      'question': '12',
755: 1:      'valid': true
755: 1:    },
755: 1:    {
755: 1:      'answer': 'XIII',
755: 1:      'question': '13',
755: 1:      'valid': true
755: 1:    },
755: 1:    {
755: 1:      'answer': 'XIV',
755: 1:      'question': '14',
755: 1:      'valid': true
755: 1:    },
755: 1:    {
755: 1:      'answer': 'XV',
755: 1:      'question': '15',
755: 1:      'valid': true
755: 1:    }
755: 1:  ],
755: 1:  'info': [
755: 1:    '✅f(1) = I',
755: 1:    '✅f(2) = II',
755: 1:    '✅f(3) = III',
755: 1:    '✅f(4) = IV',
755: 1:    '✅f(5) = V',
755: 1:    '✅f(6) = VI',
755: 1:    '✅f(7) = VII',
755: 1:    '✅f(8) = VIII',
755: 1:    '✅f(9) = IX',
755: 1:    '✅f(10) = X',
755: 1:    '✅f(11) = XI',
755: 1:    '✅f(12) = XII',
755: 1:    '✅f(13) = XIII',
755: 1:    '✅f(14) = XIV',
755: 1:    '✅f(15) = XV',
755: 1:    '❌f(16) = ??? != XVI'
755: 1:  ],
755: 1:  'level': 27,
755: 1:  'nextQuestion': '16',
755: 1:  'questions': [
755: 1:    '1',
755: 1:    '2',
755: 1:    '3',
755: 1:    '4',
755: 1:    '5',
755: 1:    '6',
755: 1:    '7',
755: 1:    '8',
755: 1:    '9',
755: 1:    '10',
755: 1:    '11',
755: 1:    '12',
755: 1:    '13',
755: 1:    '14',
755: 1:    '15',
755: 1:    '16'
755: 1:  ]
755: 1:}
755: 1:Scores: 67802
755: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI']')
755: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
756: 1:BoardData {
756: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
756: 1:  'expectedAnswer': 'XVII',
756: 1:  'history': [
756: 1:    {
756: 1:      'answer': 'I',
756: 1:      'question': '1',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'II',
756: 1:      'question': '2',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'III',
756: 1:      'question': '3',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'IV',
756: 1:      'question': '4',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'V',
756: 1:      'question': '5',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'VI',
756: 1:      'question': '6',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'VII',
756: 1:      'question': '7',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'VIII',
756: 1:      'question': '8',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'IX',
756: 1:      'question': '9',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'X',
756: 1:      'question': '10',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'XI',
756: 1:      'question': '11',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'XII',
756: 1:      'question': '12',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'XIII',
756: 1:      'question': '13',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'XIV',
756: 1:      'question': '14',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'XV',
756: 1:      'question': '15',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'XVI',
756: 1:      'question': '16',
756: 1:      'valid': true
756: 1:    }
756: 1:  ],
756: 1:  'info': [
756: 1:    '✅f(1) = I',
756: 1:    '✅f(2) = II',
756: 1:    '✅f(3) = III',
756: 1:    '✅f(4) = IV',
756: 1:    '✅f(5) = V',
756: 1:    '✅f(6) = VI',
756: 1:    '✅f(7) = VII',
756: 1:    '✅f(8) = VIII',
756: 1:    '✅f(9) = IX',
756: 1:    '✅f(10) = X',
756: 1:    '✅f(11) = XI',
756: 1:    '✅f(12) = XII',
756: 1:    '✅f(13) = XIII',
756: 1:    '✅f(14) = XIV',
756: 1:    '✅f(15) = XV',
756: 1:    '✅f(16) = XVI',
756: 1:    '❌f(17) = ??? != XVII'
756: 1:  ],
756: 1:  'level': 27,
756: 1:  'nextQuestion': '17',
756: 1:  'questions': [
756: 1:    '1',
756: 1:    '2',
756: 1:    '3',
756: 1:    '4',
756: 1:    '5',
756: 1:    '6',
756: 1:    '7',
756: 1:    '8',
756: 1:    '9',
756: 1:    '10',
756: 1:    '11',
756: 1:    '12',
756: 1:    '13',
756: 1:    '14',
756: 1:    '15',
756: 1:    '16',
756: 1:    '17'
756: 1:  ]
756: 1:}
756: 1:Scores: 67812
756: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII']')
756: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
757: 1:BoardData {
757: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
757: 1:  'expectedAnswer': 'XVIII',
757: 1:  'history': [
757: 1:    {
757: 1:      'answer': 'I',
757: 1:      'question': '1',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'II',
757: 1:      'question': '2',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'III',
757: 1:      'question': '3',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'IV',
757: 1:      'question': '4',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'V',
757: 1:      'question': '5',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'VI',
757: 1:      'question': '6',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'VII',
757: 1:      'question': '7',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'VIII',
757: 1:      'question': '8',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'IX',
757: 1:      'question': '9',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'X',
757: 1:      'question': '10',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'XI',
757: 1:      'question': '11',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'XII',
757: 1:      'question': '12',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'XIII',
757: 1:      'question': '13',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'XIV',
757: 1:      'question': '14',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'XV',
757: 1:      'question': '15',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'XVI',
757: 1:      'question': '16',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'XVII',
757: 1:      'question': '17',
757: 1:      'valid': true
757: 1:    }
757: 1:  ],
757: 1:  'info': [
757: 1:    '✅f(1) = I',
757: 1:    '✅f(2) = II',
757: 1:    '✅f(3) = III',
757: 1:    '✅f(4) = IV',
757: 1:    '✅f(5) = V',
757: 1:    '✅f(6) = VI',
757: 1:    '✅f(7) = VII',
757: 1:    '✅f(8) = VIII',
757: 1:    '✅f(9) = IX',
757: 1:    '✅f(10) = X',
757: 1:    '✅f(11) = XI',
757: 1:    '✅f(12) = XII',
757: 1:    '✅f(13) = XIII',
757: 1:    '✅f(14) = XIV',
757: 1:    '✅f(15) = XV',
757: 1:    '✅f(16) = XVI',
757: 1:    '✅f(17) = XVII',
757: 1:    '❌f(18) = ??? != XVIII'
757: 1:  ],
757: 1:  'level': 27,
757: 1:  'nextQuestion': '18',
757: 1:  'questions': [
757: 1:    '1',
757: 1:    '2',
757: 1:    '3',
757: 1:    '4',
757: 1:    '5',
757: 1:    '6',
757: 1:    '7',
757: 1:    '8',
757: 1:    '9',
757: 1:    '10',
757: 1:    '11',
757: 1:    '12',
757: 1:    '13',
757: 1:    '14',
757: 1:    '15',
757: 1:    '16',
757: 1:    '17',
757: 1:    '18'
757: 1:  ]
757: 1:}
757: 1:Scores: 67822
757: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII']')
757: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
758: 1:BoardData {
758: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
758: 1:  'expectedAnswer': 'XIX',
758: 1:  'history': [
758: 1:    {
758: 1:      'answer': 'I',
758: 1:      'question': '1',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'II',
758: 1:      'question': '2',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'III',
758: 1:      'question': '3',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'IV',
758: 1:      'question': '4',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'V',
758: 1:      'question': '5',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'VI',
758: 1:      'question': '6',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'VII',
758: 1:      'question': '7',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'VIII',
758: 1:      'question': '8',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'IX',
758: 1:      'question': '9',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'X',
758: 1:      'question': '10',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'XI',
758: 1:      'question': '11',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'XII',
758: 1:      'question': '12',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'XIII',
758: 1:      'question': '13',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'XIV',
758: 1:      'question': '14',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'XV',
758: 1:      'question': '15',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'XVI',
758: 1:      'question': '16',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'XVII',
758: 1:      'question': '17',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'XVIII',
758: 1:      'question': '18',
758: 1:      'valid': true
758: 1:    }
758: 1:  ],
758: 1:  'info': [
758: 1:    '✅f(1) = I',
758: 1:    '✅f(2) = II',
758: 1:    '✅f(3) = III',
758: 1:    '✅f(4) = IV',
758: 1:    '✅f(5) = V',
758: 1:    '✅f(6) = VI',
758: 1:    '✅f(7) = VII',
758: 1:    '✅f(8) = VIII',
758: 1:    '✅f(9) = IX',
758: 1:    '✅f(10) = X',
758: 1:    '✅f(11) = XI',
758: 1:    '✅f(12) = XII',
758: 1:    '✅f(13) = XIII',
758: 1:    '✅f(14) = XIV',
758: 1:    '✅f(15) = XV',
758: 1:    '✅f(16) = XVI',
758: 1:    '✅f(17) = XVII',
758: 1:    '✅f(18) = XVIII',
758: 1:    '❌f(19) = ??? != XIX'
758: 1:  ],
758: 1:  'level': 27,
758: 1:  'nextQuestion': '19',
758: 1:  'questions': [
758: 1:    '1',
758: 1:    '2',
758: 1:    '3',
758: 1:    '4',
758: 1:    '5',
758: 1:    '6',
758: 1:    '7',
758: 1:    '8',
758: 1:    '9',
758: 1:    '10',
758: 1:    '11',
758: 1:    '12',
758: 1:    '13',
758: 1:    '14',
758: 1:    '15',
758: 1:    '16',
758: 1:    '17',
758: 1:    '18',
758: 1:    '19'
758: 1:  ]
758: 1:}
758: 1:Scores: 67832
758: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX']')
758: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
759: 1:BoardData {
759: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
759: 1:  'expectedAnswer': 'XX',
759: 1:  'history': [
759: 1:    {
759: 1:      'answer': 'I',
759: 1:      'question': '1',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'II',
759: 1:      'question': '2',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'III',
759: 1:      'question': '3',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'IV',
759: 1:      'question': '4',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'V',
759: 1:      'question': '5',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'VI',
759: 1:      'question': '6',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'VII',
759: 1:      'question': '7',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'VIII',
759: 1:      'question': '8',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'IX',
759: 1:      'question': '9',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'X',
759: 1:      'question': '10',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'XI',
759: 1:      'question': '11',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'XII',
759: 1:      'question': '12',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'XIII',
759: 1:      'question': '13',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'XIV',
759: 1:      'question': '14',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'XV',
759: 1:      'question': '15',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'XVI',
759: 1:      'question': '16',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'XVII',
759: 1:      'question': '17',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'XVIII',
759: 1:      'question': '18',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'XIX',
759: 1:      'question': '19',
759: 1:      'valid': true
759: 1:    }
759: 1:  ],
759: 1:  'info': [
759: 1:    '✅f(1) = I',
759: 1:    '✅f(2) = II',
759: 1:    '✅f(3) = III',
759: 1:    '✅f(4) = IV',
759: 1:    '✅f(5) = V',
759: 1:    '✅f(6) = VI',
759: 1:    '✅f(7) = VII',
759: 1:    '✅f(8) = VIII',
759: 1:    '✅f(9) = IX',
759: 1:    '✅f(10) = X',
759: 1:    '✅f(11) = XI',
759: 1:    '✅f(12) = XII',
759: 1:    '✅f(13) = XIII',
759: 1:    '✅f(14) = XIV',
759: 1:    '✅f(15) = XV',
759: 1:    '✅f(16) = XVI',
759: 1:    '✅f(17) = XVII',
759: 1:    '✅f(18) = XVIII',
759: 1:    '✅f(19) = XIX',
759: 1:    '❌f(20) = ??? != XX'
759: 1:  ],
759: 1:  'level': 27,
759: 1:  'nextQuestion': '20',
759: 1:  'questions': [
759: 1:    '1',
759: 1:    '2',
759: 1:    '3',
759: 1:    '4',
759: 1:    '5',
759: 1:    '6',
759: 1:    '7',
759: 1:    '8',
759: 1:    '9',
759: 1:    '10',
759: 1:    '11',
759: 1:    '12',
759: 1:    '13',
759: 1:    '14',
759: 1:    '15',
759: 1:    '16',
759: 1:    '17',
759: 1:    '18',
759: 1:    '19',
759: 1:    '20'
759: 1:  ]
759: 1:}
759: 1:Scores: 67842
759: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX']')
759: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
760: 1:BoardData {
760: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
760: 1:  'expectedAnswer': 'XXX',
760: 1:  'history': [
760: 1:    {
760: 1:      'answer': 'I',
760: 1:      'question': '1',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'II',
760: 1:      'question': '2',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'III',
760: 1:      'question': '3',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'IV',
760: 1:      'question': '4',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'V',
760: 1:      'question': '5',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'VI',
760: 1:      'question': '6',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'VII',
760: 1:      'question': '7',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'VIII',
760: 1:      'question': '8',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'IX',
760: 1:      'question': '9',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'X',
760: 1:      'question': '10',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'XI',
760: 1:      'question': '11',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'XII',
760: 1:      'question': '12',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'XIII',
760: 1:      'question': '13',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'XIV',
760: 1:      'question': '14',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'XV',
760: 1:      'question': '15',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'XVI',
760: 1:      'question': '16',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'XVII',
760: 1:      'question': '17',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'XVIII',
760: 1:      'question': '18',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'XIX',
760: 1:      'question': '19',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'XX',
760: 1:      'question': '20',
760: 1:      'valid': true
760: 1:    }
760: 1:  ],
760: 1:  'info': [
760: 1:    '✅f(1) = I',
760: 1:    '✅f(2) = II',
760: 1:    '✅f(3) = III',
760: 1:    '✅f(4) = IV',
760: 1:    '✅f(5) = V',
760: 1:    '✅f(6) = VI',
760: 1:    '✅f(7) = VII',
760: 1:    '✅f(8) = VIII',
760: 1:    '✅f(9) = IX',
760: 1:    '✅f(10) = X',
760: 1:    '✅f(11) = XI',
760: 1:    '✅f(12) = XII',
760: 1:    '✅f(13) = XIII',
760: 1:    '✅f(14) = XIV',
760: 1:    '✅f(15) = XV',
760: 1:    '✅f(16) = XVI',
760: 1:    '✅f(17) = XVII',
760: 1:    '✅f(18) = XVIII',
760: 1:    '✅f(19) = XIX',
760: 1:    '✅f(20) = XX',
760: 1:    '❌f(30) = ??? != XXX'
760: 1:  ],
760: 1:  'level': 27,
760: 1:  'nextQuestion': '30',
760: 1:  'questions': [
760: 1:    '1',
760: 1:    '2',
760: 1:    '3',
760: 1:    '4',
760: 1:    '5',
760: 1:    '6',
760: 1:    '7',
760: 1:    '8',
760: 1:    '9',
760: 1:    '10',
760: 1:    '11',
760: 1:    '12',
760: 1:    '13',
760: 1:    '14',
760: 1:    '15',
760: 1:    '16',
760: 1:    '17',
760: 1:    '18',
760: 1:    '19',
760: 1:    '20',
760: 1:    '30'
760: 1:  ]
760: 1:}
760: 1:Scores: 67852
760: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX']')
760: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
761: 1:BoardData {
761: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
761: 1:  'expectedAnswer': 'XXXV',
761: 1:  'history': [
761: 1:    {
761: 1:      'answer': 'I',
761: 1:      'question': '1',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'II',
761: 1:      'question': '2',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'III',
761: 1:      'question': '3',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'IV',
761: 1:      'question': '4',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'V',
761: 1:      'question': '5',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'VI',
761: 1:      'question': '6',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'VII',
761: 1:      'question': '7',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'VIII',
761: 1:      'question': '8',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'IX',
761: 1:      'question': '9',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'X',
761: 1:      'question': '10',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'XI',
761: 1:      'question': '11',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'XII',
761: 1:      'question': '12',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'XIII',
761: 1:      'question': '13',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'XIV',
761: 1:      'question': '14',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'XV',
761: 1:      'question': '15',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'XVI',
761: 1:      'question': '16',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'XVII',
761: 1:      'question': '17',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'XVIII',
761: 1:      'question': '18',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'XIX',
761: 1:      'question': '19',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'XX',
761: 1:      'question': '20',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'XXX',
761: 1:      'question': '30',
761: 1:      'valid': true
761: 1:    }
761: 1:  ],
761: 1:  'info': [
761: 1:    '✅f(1) = I',
761: 1:    '✅f(2) = II',
761: 1:    '✅f(3) = III',
761: 1:    '✅f(4) = IV',
761: 1:    '✅f(5) = V',
761: 1:    '✅f(6) = VI',
761: 1:    '✅f(7) = VII',
761: 1:    '✅f(8) = VIII',
761: 1:    '✅f(9) = IX',
761: 1:    '✅f(10) = X',
761: 1:    '✅f(11) = XI',
761: 1:    '✅f(12) = XII',
761: 1:    '✅f(13) = XIII',
761: 1:    '✅f(14) = XIV',
761: 1:    '✅f(15) = XV',
761: 1:    '✅f(16) = XVI',
761: 1:    '✅f(17) = XVII',
761: 1:    '✅f(18) = XVIII',
761: 1:    '✅f(19) = XIX',
761: 1:    '✅f(20) = XX',
761: 1:    '✅f(30) = XXX',
761: 1:    '❌f(35) = ??? != XXXV'
761: 1:  ],
761: 1:  'level': 27,
761: 1:  'nextQuestion': '35',
761: 1:  'questions': [
761: 1:    '1',
761: 1:    '2',
761: 1:    '3',
761: 1:    '4',
761: 1:    '5',
761: 1:    '6',
761: 1:    '7',
761: 1:    '8',
761: 1:    '9',
761: 1:    '10',
761: 1:    '11',
761: 1:    '12',
761: 1:    '13',
761: 1:    '14',
761: 1:    '15',
761: 1:    '16',
761: 1:    '17',
761: 1:    '18',
761: 1:    '19',
761: 1:    '20',
761: 1:    '30',
761: 1:    '35'
761: 1:  ]
761: 1:}
761: 1:Scores: 67862
761: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV']')
761: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
762: 1:BoardData {
762: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
762: 1:  'expectedAnswer': 'XXXVI',
762: 1:  'history': [
762: 1:    {
762: 1:      'answer': 'I',
762: 1:      'question': '1',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'II',
762: 1:      'question': '2',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'III',
762: 1:      'question': '3',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'IV',
762: 1:      'question': '4',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'V',
762: 1:      'question': '5',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'VI',
762: 1:      'question': '6',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'VII',
762: 1:      'question': '7',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'VIII',
762: 1:      'question': '8',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'IX',
762: 1:      'question': '9',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'X',
762: 1:      'question': '10',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'XI',
762: 1:      'question': '11',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'XII',
762: 1:      'question': '12',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'XIII',
762: 1:      'question': '13',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'XIV',
762: 1:      'question': '14',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'XV',
762: 1:      'question': '15',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'XVI',
762: 1:      'question': '16',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'XVII',
762: 1:      'question': '17',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'XVIII',
762: 1:      'question': '18',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'XIX',
762: 1:      'question': '19',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'XX',
762: 1:      'question': '20',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'XXX',
762: 1:      'question': '30',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'XXXV',
762: 1:      'question': '35',
762: 1:      'valid': true
762: 1:    }
762: 1:  ],
762: 1:  'info': [
762: 1:    '✅f(1) = I',
762: 1:    '✅f(2) = II',
762: 1:    '✅f(3) = III',
762: 1:    '✅f(4) = IV',
762: 1:    '✅f(5) = V',
762: 1:    '✅f(6) = VI',
762: 1:    '✅f(7) = VII',
762: 1:    '✅f(8) = VIII',
762: 1:    '✅f(9) = IX',
762: 1:    '✅f(10) = X',
762: 1:    '✅f(11) = XI',
762: 1:    '✅f(12) = XII',
762: 1:    '✅f(13) = XIII',
762: 1:    '✅f(14) = XIV',
762: 1:    '✅f(15) = XV',
762: 1:    '✅f(16) = XVI',
762: 1:    '✅f(17) = XVII',
762: 1:    '✅f(18) = XVIII',
762: 1:    '✅f(19) = XIX',
762: 1:    '✅f(20) = XX',
762: 1:    '✅f(30) = XXX',
762: 1:    '✅f(35) = XXXV',
762: 1:    '❌f(36) = ??? != XXXVI'
762: 1:  ],
762: 1:  'level': 27,
762: 1:  'nextQuestion': '36',
762: 1:  'questions': [
762: 1:    '1',
762: 1:    '2',
762: 1:    '3',
762: 1:    '4',
762: 1:    '5',
762: 1:    '6',
762: 1:    '7',
762: 1:    '8',
762: 1:    '9',
762: 1:    '10',
762: 1:    '11',
762: 1:    '12',
762: 1:    '13',
762: 1:    '14',
762: 1:    '15',
762: 1:    '16',
762: 1:    '17',
762: 1:    '18',
762: 1:    '19',
762: 1:    '20',
762: 1:    '30',
762: 1:    '35',
762: 1:    '36'
762: 1:  ]
762: 1:}
762: 1:Scores: 67872
762: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI']')
762: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
763: 1:BoardData {
763: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
763: 1:  'expectedAnswer': 'XLVI',
763: 1:  'history': [
763: 1:    {
763: 1:      'answer': 'I',
763: 1:      'question': '1',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'II',
763: 1:      'question': '2',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'III',
763: 1:      'question': '3',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'IV',
763: 1:      'question': '4',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'V',
763: 1:      'question': '5',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'VI',
763: 1:      'question': '6',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'VII',
763: 1:      'question': '7',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'VIII',
763: 1:      'question': '8',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'IX',
763: 1:      'question': '9',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'X',
763: 1:      'question': '10',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'XI',
763: 1:      'question': '11',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'XII',
763: 1:      'question': '12',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'XIII',
763: 1:      'question': '13',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'XIV',
763: 1:      'question': '14',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'XV',
763: 1:      'question': '15',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'XVI',
763: 1:      'question': '16',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'XVII',
763: 1:      'question': '17',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'XVIII',
763: 1:      'question': '18',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'XIX',
763: 1:      'question': '19',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'XX',
763: 1:      'question': '20',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'XXX',
763: 1:      'question': '30',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'XXXV',
763: 1:      'question': '35',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'XXXVI',
763: 1:      'question': '36',
763: 1:      'valid': true
763: 1:    }
763: 1:  ],
763: 1:  'info': [
763: 1:    '✅f(1) = I',
763: 1:    '✅f(2) = II',
763: 1:    '✅f(3) = III',
763: 1:    '✅f(4) = IV',
763: 1:    '✅f(5) = V',
763: 1:    '✅f(6) = VI',
763: 1:    '✅f(7) = VII',
763: 1:    '✅f(8) = VIII',
763: 1:    '✅f(9) = IX',
763: 1:    '✅f(10) = X',
763: 1:    '✅f(11) = XI',
763: 1:    '✅f(12) = XII',
763: 1:    '✅f(13) = XIII',
763: 1:    '✅f(14) = XIV',
763: 1:    '✅f(15) = XV',
763: 1:    '✅f(16) = XVI',
763: 1:    '✅f(17) = XVII',
763: 1:    '✅f(18) = XVIII',
763: 1:    '✅f(19) = XIX',
763: 1:    '✅f(20) = XX',
763: 1:    '✅f(30) = XXX',
763: 1:    '✅f(35) = XXXV',
763: 1:    '✅f(36) = XXXVI',
763: 1:    '❌f(46) = ??? != XLVI'
763: 1:  ],
763: 1:  'level': 27,
763: 1:  'nextQuestion': '46',
763: 1:  'questions': [
763: 1:    '1',
763: 1:    '2',
763: 1:    '3',
763: 1:    '4',
763: 1:    '5',
763: 1:    '6',
763: 1:    '7',
763: 1:    '8',
763: 1:    '9',
763: 1:    '10',
763: 1:    '11',
763: 1:    '12',
763: 1:    '13',
763: 1:    '14',
763: 1:    '15',
763: 1:    '16',
763: 1:    '17',
763: 1:    '18',
763: 1:    '19',
763: 1:    '20',
763: 1:    '30',
763: 1:    '35',
763: 1:    '36',
763: 1:    '46'
763: 1:  ]
763: 1:}
763: 1:Scores: 67882
763: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI', 'XLVI']')
763: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
764: 1:BoardData {
764: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
764: 1:  'expectedAnswer': 'LVII',
764: 1:  'history': [
764: 1:    {
764: 1:      'answer': 'I',
764: 1:      'question': '1',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'II',
764: 1:      'question': '2',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'III',
764: 1:      'question': '3',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'IV',
764: 1:      'question': '4',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'V',
764: 1:      'question': '5',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'VI',
764: 1:      'question': '6',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'VII',
764: 1:      'question': '7',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'VIII',
764: 1:      'question': '8',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'IX',
764: 1:      'question': '9',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'X',
764: 1:      'question': '10',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'XI',
764: 1:      'question': '11',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'XII',
764: 1:      'question': '12',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'XIII',
764: 1:      'question': '13',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'XIV',
764: 1:      'question': '14',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'XV',
764: 1:      'question': '15',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'XVI',
764: 1:      'question': '16',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'XVII',
764: 1:      'question': '17',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'XVIII',
764: 1:      'question': '18',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'XIX',
764: 1:      'question': '19',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'XX',
764: 1:      'question': '20',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'XXX',
764: 1:      'question': '30',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'XXXV',
764: 1:      'question': '35',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'XXXVI',
764: 1:      'question': '36',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'XLVI',
764: 1:      'question': '46',
764: 1:      'valid': true
764: 1:    }
764: 1:  ],
764: 1:  'info': [
764: 1:    '✅f(1) = I',
764: 1:    '✅f(2) = II',
764: 1:    '✅f(3) = III',
764: 1:    '✅f(4) = IV',
764: 1:    '✅f(5) = V',
764: 1:    '✅f(6) = VI',
764: 1:    '✅f(7) = VII',
764: 1:    '✅f(8) = VIII',
764: 1:    '✅f(9) = IX',
764: 1:    '✅f(10) = X',
764: 1:    '✅f(11) = XI',
764: 1:    '✅f(12) = XII',
764: 1:    '✅f(13) = XIII',
764: 1:    '✅f(14) = XIV',
764: 1:    '✅f(15) = XV',
764: 1:    '✅f(16) = XVI',
764: 1:    '✅f(17) = XVII',
764: 1:    '✅f(18) = XVIII',
764: 1:    '✅f(19) = XIX',
764: 1:    '✅f(20) = XX',
764: 1:    '✅f(30) = XXX',
764: 1:    '✅f(35) = XXXV',
764: 1:    '✅f(36) = XXXVI',
764: 1:    '✅f(46) = XLVI',
764: 1:    '❌f(57) = ??? != LVII'
764: 1:  ],
764: 1:  'level': 27,
764: 1:  'nextQuestion': '57',
764: 1:  'questions': [
764: 1:    '1',
764: 1:    '2',
764: 1:    '3',
764: 1:    '4',
764: 1:    '5',
764: 1:    '6',
764: 1:    '7',
764: 1:    '8',
764: 1:    '9',
764: 1:    '10',
764: 1:    '11',
764: 1:    '12',
764: 1:    '13',
764: 1:    '14',
764: 1:    '15',
764: 1:    '16',
764: 1:    '17',
764: 1:    '18',
764: 1:    '19',
764: 1:    '20',
764: 1:    '30',
764: 1:    '35',
764: 1:    '36',
764: 1:    '46',
764: 1:    '57'
764: 1:  ]
764: 1:}
764: 1:Scores: 67892
764: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI', 'XLVI', 'LVII']')
764: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
765: 1:BoardData {
765: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
765: 1:  'expectedAnswer': 'LXVII',
765: 1:  'history': [
765: 1:    {
765: 1:      'answer': 'I',
765: 1:      'question': '1',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'II',
765: 1:      'question': '2',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'III',
765: 1:      'question': '3',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'IV',
765: 1:      'question': '4',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'V',
765: 1:      'question': '5',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'VI',
765: 1:      'question': '6',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'VII',
765: 1:      'question': '7',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'VIII',
765: 1:      'question': '8',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'IX',
765: 1:      'question': '9',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'X',
765: 1:      'question': '10',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'XI',
765: 1:      'question': '11',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'XII',
765: 1:      'question': '12',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'XIII',
765: 1:      'question': '13',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'XIV',
765: 1:      'question': '14',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'XV',
765: 1:      'question': '15',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'XVI',
765: 1:      'question': '16',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'XVII',
765: 1:      'question': '17',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'XVIII',
765: 1:      'question': '18',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'XIX',
765: 1:      'question': '19',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'XX',
765: 1:      'question': '20',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'XXX',
765: 1:      'question': '30',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'XXXV',
765: 1:      'question': '35',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'XXXVI',
765: 1:      'question': '36',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'XLVI',
765: 1:      'question': '46',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'LVII',
765: 1:      'question': '57',
765: 1:      'valid': true
765: 1:    }
765: 1:  ],
765: 1:  'info': [
765: 1:    '✅f(1) = I',
765: 1:    '✅f(2) = II',
765: 1:    '✅f(3) = III',
765: 1:    '✅f(4) = IV',
765: 1:    '✅f(5) = V',
765: 1:    '✅f(6) = VI',
765: 1:    '✅f(7) = VII',
765: 1:    '✅f(8) = VIII',
765: 1:    '✅f(9) = IX',
765: 1:    '✅f(10) = X',
765: 1:    '✅f(11) = XI',
765: 1:    '✅f(12) = XII',
765: 1:    '✅f(13) = XIII',
765: 1:    '✅f(14) = XIV',
765: 1:    '✅f(15) = XV',
765: 1:    '✅f(16) = XVI',
765: 1:    '✅f(17) = XVII',
765: 1:    '✅f(18) = XVIII',
765: 1:    '✅f(19) = XIX',
765: 1:    '✅f(20) = XX',
765: 1:    '✅f(30) = XXX',
765: 1:    '✅f(35) = XXXV',
765: 1:    '✅f(36) = XXXVI',
765: 1:    '✅f(46) = XLVI',
765: 1:    '✅f(57) = LVII',
765: 1:    '❌f(67) = ??? != LXVII'
765: 1:  ],
765: 1:  'level': 27,
765: 1:  'nextQuestion': '67',
765: 1:  'questions': [
765: 1:    '1',
765: 1:    '2',
765: 1:    '3',
765: 1:    '4',
765: 1:    '5',
765: 1:    '6',
765: 1:    '7',
765: 1:    '8',
765: 1:    '9',
765: 1:    '10',
765: 1:    '11',
765: 1:    '12',
765: 1:    '13',
765: 1:    '14',
765: 1:    '15',
765: 1:    '16',
765: 1:    '17',
765: 1:    '18',
765: 1:    '19',
765: 1:    '20',
765: 1:    '30',
765: 1:    '35',
765: 1:    '36',
765: 1:    '46',
765: 1:    '57',
765: 1:    '67'
765: 1:  ]
765: 1:}
765: 1:Scores: 67902
765: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI', 'XLVI', 'LVII', 'LXVII']')
765: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
766: 1:BoardData {
766: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
766: 1:  'expectedAnswer': 'LXXXIX',
766: 1:  'history': [
766: 1:    {
766: 1:      'answer': 'I',
766: 1:      'question': '1',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'II',
766: 1:      'question': '2',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'III',
766: 1:      'question': '3',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'IV',
766: 1:      'question': '4',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'V',
766: 1:      'question': '5',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'VI',
766: 1:      'question': '6',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'VII',
766: 1:      'question': '7',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'VIII',
766: 1:      'question': '8',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'IX',
766: 1:      'question': '9',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'X',
766: 1:      'question': '10',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'XI',
766: 1:      'question': '11',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'XII',
766: 1:      'question': '12',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'XIII',
766: 1:      'question': '13',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'XIV',
766: 1:      'question': '14',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'XV',
766: 1:      'question': '15',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'XVI',
766: 1:      'question': '16',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'XVII',
766: 1:      'question': '17',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'XVIII',
766: 1:      'question': '18',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'XIX',
766: 1:      'question': '19',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'XX',
766: 1:      'question': '20',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'XXX',
766: 1:      'question': '30',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'XXXV',
766: 1:      'question': '35',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'XXXVI',
766: 1:      'question': '36',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'XLVI',
766: 1:      'question': '46',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'LVII',
766: 1:      'question': '57',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'LXVII',
766: 1:      'question': '67',
766: 1:      'valid': true
766: 1:    }
766: 1:  ],
766: 1:  'info': [
766: 1:    '✅f(1) = I',
766: 1:    '✅f(2) = II',
766: 1:    '✅f(3) = III',
766: 1:    '✅f(4) = IV',
766: 1:    '✅f(5) = V',
766: 1:    '✅f(6) = VI',
766: 1:    '✅f(7) = VII',
766: 1:    '✅f(8) = VIII',
766: 1:    '✅f(9) = IX',
766: 1:    '✅f(10) = X',
766: 1:    '✅f(11) = XI',
766: 1:    '✅f(12) = XII',
766: 1:    '✅f(13) = XIII',
766: 1:    '✅f(14) = XIV',
766: 1:    '✅f(15) = XV',
766: 1:    '✅f(16) = XVI',
766: 1:    '✅f(17) = XVII',
766: 1:    '✅f(18) = XVIII',
766: 1:    '✅f(19) = XIX',
766: 1:    '✅f(20) = XX',
766: 1:    '✅f(30) = XXX',
766: 1:    '✅f(35) = XXXV',
766: 1:    '✅f(36) = XXXVI',
766: 1:    '✅f(46) = XLVI',
766: 1:    '✅f(57) = LVII',
766: 1:    '✅f(67) = LXVII',
766: 1:    '❌f(89) = ??? != LXXXIX'
766: 1:  ],
766: 1:  'level': 27,
766: 1:  'nextQuestion': '89',
766: 1:  'questions': [
766: 1:    '1',
766: 1:    '2',
766: 1:    '3',
766: 1:    '4',
766: 1:    '5',
766: 1:    '6',
766: 1:    '7',
766: 1:    '8',
766: 1:    '9',
766: 1:    '10',
766: 1:    '11',
766: 1:    '12',
766: 1:    '13',
766: 1:    '14',
766: 1:    '15',
766: 1:    '16',
766: 1:    '17',
766: 1:    '18',
766: 1:    '19',
766: 1:    '20',
766: 1:    '30',
766: 1:    '35',
766: 1:    '36',
766: 1:    '46',
766: 1:    '57',
766: 1:    '67',
766: 1:    '89'
766: 1:  ]
766: 1:}
766: 1:Scores: 67912
766: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI', 'XLVI', 'LVII', 'LXVII', 'LXXXIX']')
766: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
767: 1:BoardData {
767: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
767: 1:  'expectedAnswer': 'CXXIII',
767: 1:  'history': [
767: 1:    {
767: 1:      'answer': 'I',
767: 1:      'question': '1',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'II',
767: 1:      'question': '2',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'III',
767: 1:      'question': '3',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'IV',
767: 1:      'question': '4',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'V',
767: 1:      'question': '5',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'VI',
767: 1:      'question': '6',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'VII',
767: 1:      'question': '7',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'VIII',
767: 1:      'question': '8',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'IX',
767: 1:      'question': '9',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'X',
767: 1:      'question': '10',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'XI',
767: 1:      'question': '11',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'XII',
767: 1:      'question': '12',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'XIII',
767: 1:      'question': '13',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'XIV',
767: 1:      'question': '14',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'XV',
767: 1:      'question': '15',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'XVI',
767: 1:      'question': '16',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'XVII',
767: 1:      'question': '17',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'XVIII',
767: 1:      'question': '18',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'XIX',
767: 1:      'question': '19',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'XX',
767: 1:      'question': '20',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'XXX',
767: 1:      'question': '30',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'XXXV',
767: 1:      'question': '35',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'XXXVI',
767: 1:      'question': '36',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'XLVI',
767: 1:      'question': '46',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'LVII',
767: 1:      'question': '57',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'LXVII',
767: 1:      'question': '67',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'LXXXIX',
767: 1:      'question': '89',
767: 1:      'valid': true
767: 1:    }
767: 1:  ],
767: 1:  'info': [
767: 1:    '✅f(1) = I',
767: 1:    '✅f(2) = II',
767: 1:    '✅f(3) = III',
767: 1:    '✅f(4) = IV',
767: 1:    '✅f(5) = V',
767: 1:    '✅f(6) = VI',
767: 1:    '✅f(7) = VII',
767: 1:    '✅f(8) = VIII',
767: 1:    '✅f(9) = IX',
767: 1:    '✅f(10) = X',
767: 1:    '✅f(11) = XI',
767: 1:    '✅f(12) = XII',
767: 1:    '✅f(13) = XIII',
767: 1:    '✅f(14) = XIV',
767: 1:    '✅f(15) = XV',
767: 1:    '✅f(16) = XVI',
767: 1:    '✅f(17) = XVII',
767: 1:    '✅f(18) = XVIII',
767: 1:    '✅f(19) = XIX',
767: 1:    '✅f(20) = XX',
767: 1:    '✅f(30) = XXX',
767: 1:    '✅f(35) = XXXV',
767: 1:    '✅f(36) = XXXVI',
767: 1:    '✅f(46) = XLVI',
767: 1:    '✅f(57) = LVII',
767: 1:    '✅f(67) = LXVII',
767: 1:    '✅f(89) = LXXXIX',
767: 1:    '❌f(123) = ??? != CXXIII'
767: 1:  ],
767: 1:  'level': 27,
767: 1:  'nextQuestion': '123',
767: 1:  'questions': [
767: 1:    '1',
767: 1:    '2',
767: 1:    '3',
767: 1:    '4',
767: 1:    '5',
767: 1:    '6',
767: 1:    '7',
767: 1:    '8',
767: 1:    '9',
767: 1:    '10',
767: 1:    '11',
767: 1:    '12',
767: 1:    '13',
767: 1:    '14',
767: 1:    '15',
767: 1:    '16',
767: 1:    '17',
767: 1:    '18',
767: 1:    '19',
767: 1:    '20',
767: 1:    '30',
767: 1:    '35',
767: 1:    '36',
767: 1:    '46',
767: 1:    '57',
767: 1:    '67',
767: 1:    '89',
767: 1:    '123'
767: 1:  ]
767: 1:}
767: 1:Scores: 67922
767: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI', 'XLVI', 'LVII', 'LXVII', 'LXXXIX', 'CXXIII']')
767: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
768: 1:BoardData {
768: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
768: 1:  'expectedAnswer': 'CCXXXIV',
768: 1:  'history': [
768: 1:    {
768: 1:      'answer': 'I',
768: 1:      'question': '1',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'II',
768: 1:      'question': '2',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'III',
768: 1:      'question': '3',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'IV',
768: 1:      'question': '4',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'V',
768: 1:      'question': '5',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'VI',
768: 1:      'question': '6',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'VII',
768: 1:      'question': '7',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'VIII',
768: 1:      'question': '8',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'IX',
768: 1:      'question': '9',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'X',
768: 1:      'question': '10',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'XI',
768: 1:      'question': '11',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'XII',
768: 1:      'question': '12',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'XIII',
768: 1:      'question': '13',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'XIV',
768: 1:      'question': '14',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'XV',
768: 1:      'question': '15',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'XVI',
768: 1:      'question': '16',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'XVII',
768: 1:      'question': '17',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'XVIII',
768: 1:      'question': '18',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'XIX',
768: 1:      'question': '19',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'XX',
768: 1:      'question': '20',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'XXX',
768: 1:      'question': '30',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'XXXV',
768: 1:      'question': '35',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'XXXVI',
768: 1:      'question': '36',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'XLVI',
768: 1:      'question': '46',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'LVII',
768: 1:      'question': '57',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'LXVII',
768: 1:      'question': '67',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'LXXXIX',
768: 1:      'question': '89',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'CXXIII',
768: 1:      'question': '123',
768: 1:      'valid': true
768: 1:    }
768: 1:  ],
768: 1:  'info': [
768: 1:    '✅f(1) = I',
768: 1:    '✅f(2) = II',
768: 1:    '✅f(3) = III',
768: 1:    '✅f(4) = IV',
768: 1:    '✅f(5) = V',
768: 1:    '✅f(6) = VI',
768: 1:    '✅f(7) = VII',
768: 1:    '✅f(8) = VIII',
768: 1:    '✅f(9) = IX',
768: 1:    '✅f(10) = X',
768: 1:    '✅f(11) = XI',
768: 1:    '✅f(12) = XII',
768: 1:    '✅f(13) = XIII',
768: 1:    '✅f(14) = XIV',
768: 1:    '✅f(15) = XV',
768: 1:    '✅f(16) = XVI',
768: 1:    '✅f(17) = XVII',
768: 1:    '✅f(18) = XVIII',
768: 1:    '✅f(19) = XIX',
768: 1:    '✅f(20) = XX',
768: 1:    '✅f(30) = XXX',
768: 1:    '✅f(35) = XXXV',
768: 1:    '✅f(36) = XXXVI',
768: 1:    '✅f(46) = XLVI',
768: 1:    '✅f(57) = LVII',
768: 1:    '✅f(67) = LXVII',
768: 1:    '✅f(89) = LXXXIX',
768: 1:    '✅f(123) = CXXIII',
768: 1:    '❌f(234) = ??? != CCXXXIV'
768: 1:  ],
768: 1:  'level': 27,
768: 1:  'nextQuestion': '234',
768: 1:  'questions': [
768: 1:    '1',
768: 1:    '2',
768: 1:    '3',
768: 1:    '4',
768: 1:    '5',
768: 1:    '6',
768: 1:    '7',
768: 1:    '8',
768: 1:    '9',
768: 1:    '10',
768: 1:    '11',
768: 1:    '12',
768: 1:    '13',
768: 1:    '14',
768: 1:    '15',
768: 1:    '16',
768: 1:    '17',
768: 1:    '18',
768: 1:    '19',
768: 1:    '20',
768: 1:    '30',
768: 1:    '35',
768: 1:    '36',
768: 1:    '46',
768: 1:    '57',
768: 1:    '67',
768: 1:    '89',
768: 1:    '123',
768: 1:    '234'
768: 1:  ]
768: 1:}
768: 1:Scores: 67932
768: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI', 'XLVI', 'LVII', 'LXVII', 'LXXXIX', 'CXXIII', 'CCXXXIV']')
768: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
769: 1:BoardData {
769: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
769: 1:  'expectedAnswer': 'CCCXLV',
769: 1:  'history': [
769: 1:    {
769: 1:      'answer': 'I',
769: 1:      'question': '1',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'II',
769: 1:      'question': '2',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'III',
769: 1:      'question': '3',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'IV',
769: 1:      'question': '4',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'V',
769: 1:      'question': '5',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'VI',
769: 1:      'question': '6',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'VII',
769: 1:      'question': '7',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'VIII',
769: 1:      'question': '8',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'IX',
769: 1:      'question': '9',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'X',
769: 1:      'question': '10',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'XI',
769: 1:      'question': '11',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'XII',
769: 1:      'question': '12',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'XIII',
769: 1:      'question': '13',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'XIV',
769: 1:      'question': '14',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'XV',
769: 1:      'question': '15',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'XVI',
769: 1:      'question': '16',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'XVII',
769: 1:      'question': '17',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'XVIII',
769: 1:      'question': '18',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'XIX',
769: 1:      'question': '19',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'XX',
769: 1:      'question': '20',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'XXX',
769: 1:      'question': '30',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'XXXV',
769: 1:      'question': '35',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'XXXVI',
769: 1:      'question': '36',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'XLVI',
769: 1:      'question': '46',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'LVII',
769: 1:      'question': '57',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'LXVII',
769: 1:      'question': '67',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'LXXXIX',
769: 1:      'question': '89',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'CXXIII',
769: 1:      'question': '123',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'CCXXXIV',
769: 1:      'question': '234',
769: 1:      'valid': true
769: 1:    }
769: 1:  ],
769: 1:  'info': [
769: 1:    '✅f(1) = I',
769: 1:    '✅f(2) = II',
769: 1:    '✅f(3) = III',
769: 1:    '✅f(4) = IV',
769: 1:    '✅f(5) = V',
769: 1:    '✅f(6) = VI',
769: 1:    '✅f(7) = VII',
769: 1:    '✅f(8) = VIII',
769: 1:    '✅f(9) = IX',
769: 1:    '✅f(10) = X',
769: 1:    '✅f(11) = XI',
769: 1:    '✅f(12) = XII',
769: 1:    '✅f(13) = XIII',
769: 1:    '✅f(14) = XIV',
769: 1:    '✅f(15) = XV',
769: 1:    '✅f(16) = XVI',
769: 1:    '✅f(17) = XVII',
769: 1:    '✅f(18) = XVIII',
769: 1:    '✅f(19) = XIX',
769: 1:    '✅f(20) = XX',
769: 1:    '✅f(30) = XXX',
769: 1:    '✅f(35) = XXXV',
769: 1:    '✅f(36) = XXXVI',
769: 1:    '✅f(46) = XLVI',
769: 1:    '✅f(57) = LVII',
769: 1:    '✅f(67) = LXVII',
769: 1:    '✅f(89) = LXXXIX',
769: 1:    '✅f(123) = CXXIII',
769: 1:    '✅f(234) = CCXXXIV',
769: 1:    '❌f(345) = ??? != CCCXLV'
769: 1:  ],
769: 1:  'level': 27,
769: 1:  'nextQuestion': '345',
769: 1:  'questions': [
769: 1:    '1',
769: 1:    '2',
769: 1:    '3',
769: 1:    '4',
769: 1:    '5',
769: 1:    '6',
769: 1:    '7',
769: 1:    '8',
769: 1:    '9',
769: 1:    '10',
769: 1:    '11',
769: 1:    '12',
769: 1:    '13',
769: 1:    '14',
769: 1:    '15',
769: 1:    '16',
769: 1:    '17',
769: 1:    '18',
769: 1:    '19',
769: 1:    '20',
769: 1:    '30',
769: 1:    '35',
769: 1:    '36',
769: 1:    '46',
769: 1:    '57',
769: 1:    '67',
769: 1:    '89',
769: 1:    '123',
769: 1:    '234',
769: 1:    '345'
769: 1:  ]
769: 1:}
769: 1:Scores: 67942
769: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI', 'XLVI', 'LVII', 'LXVII', 'LXXXIX', 'CXXIII', 'CCXXXIV', 'CCCXLV']')
769: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
770: 1:BoardData {
770: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
770: 1:  'expectedAnswer': 'CDLVI',
770: 1:  'history': [
770: 1:    {
770: 1:      'answer': 'I',
770: 1:      'question': '1',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'II',
770: 1:      'question': '2',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'III',
770: 1:      'question': '3',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'IV',
770: 1:      'question': '4',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'V',
770: 1:      'question': '5',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'VI',
770: 1:      'question': '6',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'VII',
770: 1:      'question': '7',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'VIII',
770: 1:      'question': '8',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'IX',
770: 1:      'question': '9',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'X',
770: 1:      'question': '10',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'XI',
770: 1:      'question': '11',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'XII',
770: 1:      'question': '12',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'XIII',
770: 1:      'question': '13',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'XIV',
770: 1:      'question': '14',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'XV',
770: 1:      'question': '15',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'XVI',
770: 1:      'question': '16',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'XVII',
770: 1:      'question': '17',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'XVIII',
770: 1:      'question': '18',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'XIX',
770: 1:      'question': '19',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'XX',
770: 1:      'question': '20',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'XXX',
770: 1:      'question': '30',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'XXXV',
770: 1:      'question': '35',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'XXXVI',
770: 1:      'question': '36',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'XLVI',
770: 1:      'question': '46',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'LVII',
770: 1:      'question': '57',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'LXVII',
770: 1:      'question': '67',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'LXXXIX',
770: 1:      'question': '89',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'CXXIII',
770: 1:      'question': '123',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'CCXXXIV',
770: 1:      'question': '234',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'CCCXLV',
770: 1:      'question': '345',
770: 1:      'valid': true
770: 1:    }
770: 1:  ],
770: 1:  'info': [
770: 1:    '✅f(1) = I',
770: 1:    '✅f(2) = II',
770: 1:    '✅f(3) = III',
770: 1:    '✅f(4) = IV',
770: 1:    '✅f(5) = V',
770: 1:    '✅f(6) = VI',
770: 1:    '✅f(7) = VII',
770: 1:    '✅f(8) = VIII',
770: 1:    '✅f(9) = IX',
770: 1:    '✅f(10) = X',
770: 1:    '✅f(11) = XI',
770: 1:    '✅f(12) = XII',
770: 1:    '✅f(13) = XIII',
770: 1:    '✅f(14) = XIV',
770: 1:    '✅f(15) = XV',
770: 1:    '✅f(16) = XVI',
770: 1:    '✅f(17) = XVII',
770: 1:    '✅f(18) = XVIII',
770: 1:    '✅f(19) = XIX',
770: 1:    '✅f(20) = XX',
770: 1:    '✅f(30) = XXX',
770: 1:    '✅f(35) = XXXV',
770: 1:    '✅f(36) = XXXVI',
770: 1:    '✅f(46) = XLVI',
770: 1:    '✅f(57) = LVII',
770: 1:    '✅f(67) = LXVII',
770: 1:    '✅f(89) = LXXXIX',
770: 1:    '✅f(123) = CXXIII',
770: 1:    '✅f(234) = CCXXXIV',
770: 1:    '✅f(345) = CCCXLV',
770: 1:    '❌f(456) = ??? != CDLVI'
770: 1:  ],
770: 1:  'level': 27,
770: 1:  'nextQuestion': '456',
770: 1:  'questions': [
770: 1:    '1',
770: 1:    '2',
770: 1:    '3',
770: 1:    '4',
770: 1:    '5',
770: 1:    '6',
770: 1:    '7',
770: 1:    '8',
770: 1:    '9',
770: 1:    '10',
770: 1:    '11',
770: 1:    '12',
770: 1:    '13',
770: 1:    '14',
770: 1:    '15',
770: 1:    '16',
770: 1:    '17',
770: 1:    '18',
770: 1:    '19',
770: 1:    '20',
770: 1:    '30',
770: 1:    '35',
770: 1:    '36',
770: 1:    '46',
770: 1:    '57',
770: 1:    '67',
770: 1:    '89',
770: 1:    '123',
770: 1:    '234',
770: 1:    '345',
770: 1:    '456'
770: 1:  ]
770: 1:}
770: 1:Scores: 67952
770: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI', 'XLVI', 'LVII', 'LXVII', 'LXXXIX', 'CXXIII', 'CCXXXIV', 'CCCXLV', 'CDLVI']')
770: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
771: 1:BoardData {
771: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
771: 1:  'expectedAnswer': 'DLXVII',
771: 1:  'history': [
771: 1:    {
771: 1:      'answer': 'I',
771: 1:      'question': '1',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'II',
771: 1:      'question': '2',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'III',
771: 1:      'question': '3',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'IV',
771: 1:      'question': '4',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'V',
771: 1:      'question': '5',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'VI',
771: 1:      'question': '6',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'VII',
771: 1:      'question': '7',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'VIII',
771: 1:      'question': '8',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'IX',
771: 1:      'question': '9',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'X',
771: 1:      'question': '10',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'XI',
771: 1:      'question': '11',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'XII',
771: 1:      'question': '12',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'XIII',
771: 1:      'question': '13',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'XIV',
771: 1:      'question': '14',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'XV',
771: 1:      'question': '15',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'XVI',
771: 1:      'question': '16',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'XVII',
771: 1:      'question': '17',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'XVIII',
771: 1:      'question': '18',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'XIX',
771: 1:      'question': '19',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'XX',
771: 1:      'question': '20',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'XXX',
771: 1:      'question': '30',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'XXXV',
771: 1:      'question': '35',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'XXXVI',
771: 1:      'question': '36',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'XLVI',
771: 1:      'question': '46',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'LVII',
771: 1:      'question': '57',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'LXVII',
771: 1:      'question': '67',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'LXXXIX',
771: 1:      'question': '89',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'CXXIII',
771: 1:      'question': '123',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'CCXXXIV',
771: 1:      'question': '234',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'CCCXLV',
771: 1:      'question': '345',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'CDLVI',
771: 1:      'question': '456',
771: 1:      'valid': true
771: 1:    }
771: 1:  ],
771: 1:  'info': [
771: 1:    '✅f(1) = I',
771: 1:    '✅f(2) = II',
771: 1:    '✅f(3) = III',
771: 1:    '✅f(4) = IV',
771: 1:    '✅f(5) = V',
771: 1:    '✅f(6) = VI',
771: 1:    '✅f(7) = VII',
771: 1:    '✅f(8) = VIII',
771: 1:    '✅f(9) = IX',
771: 1:    '✅f(10) = X',
771: 1:    '✅f(11) = XI',
771: 1:    '✅f(12) = XII',
771: 1:    '✅f(13) = XIII',
771: 1:    '✅f(14) = XIV',
771: 1:    '✅f(15) = XV',
771: 1:    '✅f(16) = XVI',
771: 1:    '✅f(17) = XVII',
771: 1:    '✅f(18) = XVIII',
771: 1:    '✅f(19) = XIX',
771: 1:    '✅f(20) = XX',
771: 1:    '✅f(30) = XXX',
771: 1:    '✅f(35) = XXXV',
771: 1:    '✅f(36) = XXXVI',
771: 1:    '✅f(46) = XLVI',
771: 1:    '✅f(57) = LVII',
771: 1:    '✅f(67) = LXVII',
771: 1:    '✅f(89) = LXXXIX',
771: 1:    '✅f(123) = CXXIII',
771: 1:    '✅f(234) = CCXXXIV',
771: 1:    '✅f(345) = CCCXLV',
771: 1:    '✅f(456) = CDLVI',
771: 1:    '❌f(567) = ??? != DLXVII'
771: 1:  ],
771: 1:  'level': 27,
771: 1:  'nextQuestion': '567',
771: 1:  'questions': [
771: 1:    '1',
771: 1:    '2',
771: 1:    '3',
771: 1:    '4',
771: 1:    '5',
771: 1:    '6',
771: 1:    '7',
771: 1:    '8',
771: 1:    '9',
771: 1:    '10',
771: 1:    '11',
771: 1:    '12',
771: 1:    '13',
771: 1:    '14',
771: 1:    '15',
771: 1:    '16',
771: 1:    '17',
771: 1:    '18',
771: 1:    '19',
771: 1:    '20',
771: 1:    '30',
771: 1:    '35',
771: 1:    '36',
771: 1:    '46',
771: 1:    '57',
771: 1:    '67',
771: 1:    '89',
771: 1:    '123',
771: 1:    '234',
771: 1:    '345',
771: 1:    '456',
771: 1:    '567'
771: 1:  ]
771: 1:}
771: 1:Scores: 67962
771: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI', 'XLVI', 'LVII', 'LXVII', 'LXXXIX', 'CXXIII', 'CCXXXIV', 'CCCXLV', 'CDLVI', 'DLXVII']')
771: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
772: 1:BoardData {
772: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
772: 1:  'expectedAnswer': 'DCLXXVIII',
772: 1:  'history': [
772: 1:    {
772: 1:      'answer': 'I',
772: 1:      'question': '1',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'II',
772: 1:      'question': '2',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'III',
772: 1:      'question': '3',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'IV',
772: 1:      'question': '4',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'V',
772: 1:      'question': '5',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'VI',
772: 1:      'question': '6',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'VII',
772: 1:      'question': '7',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'VIII',
772: 1:      'question': '8',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'IX',
772: 1:      'question': '9',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'X',
772: 1:      'question': '10',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'XI',
772: 1:      'question': '11',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'XII',
772: 1:      'question': '12',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'XIII',
772: 1:      'question': '13',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'XIV',
772: 1:      'question': '14',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'XV',
772: 1:      'question': '15',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'XVI',
772: 1:      'question': '16',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'XVII',
772: 1:      'question': '17',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'XVIII',
772: 1:      'question': '18',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'XIX',
772: 1:      'question': '19',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'XX',
772: 1:      'question': '20',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'XXX',
772: 1:      'question': '30',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'XXXV',
772: 1:      'question': '35',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'XXXVI',
772: 1:      'question': '36',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'XLVI',
772: 1:      'question': '46',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'LVII',
772: 1:      'question': '57',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'LXVII',
772: 1:      'question': '67',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'LXXXIX',
772: 1:      'question': '89',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'CXXIII',
772: 1:      'question': '123',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'CCXXXIV',
772: 1:      'question': '234',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'CCCXLV',
772: 1:      'question': '345',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'CDLVI',
772: 1:      'question': '456',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'DLXVII',
772: 1:      'question': '567',
772: 1:      'valid': true
772: 1:    }
772: 1:  ],
772: 1:  'info': [
772: 1:    '✅f(1) = I',
772: 1:    '✅f(2) = II',
772: 1:    '✅f(3) = III',
772: 1:    '✅f(4) = IV',
772: 1:    '✅f(5) = V',
772: 1:    '✅f(6) = VI',
772: 1:    '✅f(7) = VII',
772: 1:    '✅f(8) = VIII',
772: 1:    '✅f(9) = IX',
772: 1:    '✅f(10) = X',
772: 1:    '✅f(11) = XI',
772: 1:    '✅f(12) = XII',
772: 1:    '✅f(13) = XIII',
772: 1:    '✅f(14) = XIV',
772: 1:    '✅f(15) = XV',
772: 1:    '✅f(16) = XVI',
772: 1:    '✅f(17) = XVII',
772: 1:    '✅f(18) = XVIII',
772: 1:    '✅f(19) = XIX',
772: 1:    '✅f(20) = XX',
772: 1:    '✅f(30) = XXX',
772: 1:    '✅f(35) = XXXV',
772: 1:    '✅f(36) = XXXVI',
772: 1:    '✅f(46) = XLVI',
772: 1:    '✅f(57) = LVII',
772: 1:    '✅f(67) = LXVII',
772: 1:    '✅f(89) = LXXXIX',
772: 1:    '✅f(123) = CXXIII',
772: 1:    '✅f(234) = CCXXXIV',
772: 1:    '✅f(345) = CCCXLV',
772: 1:    '✅f(456) = CDLVI',
772: 1:    '✅f(567) = DLXVII',
772: 1:    '❌f(678) = ??? != DCLXXVIII'
772: 1:  ],
772: 1:  'level': 27,
772: 1:  'nextQuestion': '678',
772: 1:  'questions': [
772: 1:    '1',
772: 1:    '2',
772: 1:    '3',
772: 1:    '4',
772: 1:    '5',
772: 1:    '6',
772: 1:    '7',
772: 1:    '8',
772: 1:    '9',
772: 1:    '10',
772: 1:    '11',
772: 1:    '12',
772: 1:    '13',
772: 1:    '14',
772: 1:    '15',
772: 1:    '16',
772: 1:    '17',
772: 1:    '18',
772: 1:    '19',
772: 1:    '20',
772: 1:    '30',
772: 1:    '35',
772: 1:    '36',
772: 1:    '46',
772: 1:    '57',
772: 1:    '67',
772: 1:    '89',
772: 1:    '123',
772: 1:    '234',
772: 1:    '345',
772: 1:    '456',
772: 1:    '567',
772: 1:    '678'
772: 1:  ]
772: 1:}
772: 1:Scores: 67972
772: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI', 'XLVI', 'LVII', 'LXVII', 'LXXXIX', 'CXXIII', 'CCXXXIV', 'CCCXLV', 'CDLVI', 'DLXVII', 'DCLXXVIII']')
772: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
773: 1:BoardData {
773: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
773: 1:  'expectedAnswer': 'DCCCXC',
773: 1:  'history': [
773: 1:    {
773: 1:      'answer': 'I',
773: 1:      'question': '1',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'II',
773: 1:      'question': '2',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'III',
773: 1:      'question': '3',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'IV',
773: 1:      'question': '4',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'V',
773: 1:      'question': '5',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'VI',
773: 1:      'question': '6',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'VII',
773: 1:      'question': '7',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'VIII',
773: 1:      'question': '8',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'IX',
773: 1:      'question': '9',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'X',
773: 1:      'question': '10',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'XI',
773: 1:      'question': '11',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'XII',
773: 1:      'question': '12',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'XIII',
773: 1:      'question': '13',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'XIV',
773: 1:      'question': '14',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'XV',
773: 1:      'question': '15',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'XVI',
773: 1:      'question': '16',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'XVII',
773: 1:      'question': '17',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'XVIII',
773: 1:      'question': '18',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'XIX',
773: 1:      'question': '19',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'XX',
773: 1:      'question': '20',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'XXX',
773: 1:      'question': '30',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'XXXV',
773: 1:      'question': '35',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'XXXVI',
773: 1:      'question': '36',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'XLVI',
773: 1:      'question': '46',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'LVII',
773: 1:      'question': '57',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'LXVII',
773: 1:      'question': '67',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'LXXXIX',
773: 1:      'question': '89',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'CXXIII',
773: 1:      'question': '123',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'CCXXXIV',
773: 1:      'question': '234',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'CCCXLV',
773: 1:      'question': '345',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'CDLVI',
773: 1:      'question': '456',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'DLXVII',
773: 1:      'question': '567',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'DCLXXVIII',
773: 1:      'question': '678',
773: 1:      'valid': true
773: 1:    }
773: 1:  ],
773: 1:  'info': [
773: 1:    '✅f(1) = I',
773: 1:    '✅f(2) = II',
773: 1:    '✅f(3) = III',
773: 1:    '✅f(4) = IV',
773: 1:    '✅f(5) = V',
773: 1:    '✅f(6) = VI',
773: 1:    '✅f(7) = VII',
773: 1:    '✅f(8) = VIII',
773: 1:    '✅f(9) = IX',
773: 1:    '✅f(10) = X',
773: 1:    '✅f(11) = XI',
773: 1:    '✅f(12) = XII',
773: 1:    '✅f(13) = XIII',
773: 1:    '✅f(14) = XIV',
773: 1:    '✅f(15) = XV',
773: 1:    '✅f(16) = XVI',
773: 1:    '✅f(17) = XVII',
773: 1:    '✅f(18) = XVIII',
773: 1:    '✅f(19) = XIX',
773: 1:    '✅f(20) = XX',
773: 1:    '✅f(30) = XXX',
773: 1:    '✅f(35) = XXXV',
773: 1:    '✅f(36) = XXXVI',
773: 1:    '✅f(46) = XLVI',
773: 1:    '✅f(57) = LVII',
773: 1:    '✅f(67) = LXVII',
773: 1:    '✅f(89) = LXXXIX',
773: 1:    '✅f(123) = CXXIII',
773: 1:    '✅f(234) = CCXXXIV',
773: 1:    '✅f(345) = CCCXLV',
773: 1:    '✅f(456) = CDLVI',
773: 1:    '✅f(567) = DLXVII',
773: 1:    '✅f(678) = DCLXXVIII',
773: 1:    '❌f(890) = ??? != DCCCXC'
773: 1:  ],
773: 1:  'level': 27,
773: 1:  'nextQuestion': '890',
773: 1:  'questions': [
773: 1:    '1',
773: 1:    '2',
773: 1:    '3',
773: 1:    '4',
773: 1:    '5',
773: 1:    '6',
773: 1:    '7',
773: 1:    '8',
773: 1:    '9',
773: 1:    '10',
773: 1:    '11',
773: 1:    '12',
773: 1:    '13',
773: 1:    '14',
773: 1:    '15',
773: 1:    '16',
773: 1:    '17',
773: 1:    '18',
773: 1:    '19',
773: 1:    '20',
773: 1:    '30',
773: 1:    '35',
773: 1:    '36',
773: 1:    '46',
773: 1:    '57',
773: 1:    '67',
773: 1:    '89',
773: 1:    '123',
773: 1:    '234',
773: 1:    '345',
773: 1:    '456',
773: 1:    '567',
773: 1:    '678',
773: 1:    '890'
773: 1:  ]
773: 1:}
773: 1:Scores: 67982
773: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI', 'XLVI', 'LVII', 'LXVII', 'LXXXIX', 'CXXIII', 'CCXXXIV', 'CCCXLV', 'CDLVI', 'DLXVII', 'DCLXXVIII', 'DCCCXC']')
773: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
774: 1:BoardData {
774: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
774: 1:  'expectedAnswer': 'MCCXXXIV',
774: 1:  'history': [
774: 1:    {
774: 1:      'answer': 'I',
774: 1:      'question': '1',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'II',
774: 1:      'question': '2',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'III',
774: 1:      'question': '3',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'IV',
774: 1:      'question': '4',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'V',
774: 1:      'question': '5',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'VI',
774: 1:      'question': '6',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'VII',
774: 1:      'question': '7',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'VIII',
774: 1:      'question': '8',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'IX',
774: 1:      'question': '9',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'X',
774: 1:      'question': '10',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'XI',
774: 1:      'question': '11',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'XII',
774: 1:      'question': '12',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'XIII',
774: 1:      'question': '13',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'XIV',
774: 1:      'question': '14',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'XV',
774: 1:      'question': '15',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'XVI',
774: 1:      'question': '16',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'XVII',
774: 1:      'question': '17',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'XVIII',
774: 1:      'question': '18',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'XIX',
774: 1:      'question': '19',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'XX',
774: 1:      'question': '20',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'XXX',
774: 1:      'question': '30',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'XXXV',
774: 1:      'question': '35',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'XXXVI',
774: 1:      'question': '36',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'XLVI',
774: 1:      'question': '46',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'LVII',
774: 1:      'question': '57',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'LXVII',
774: 1:      'question': '67',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'LXXXIX',
774: 1:      'question': '89',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'CXXIII',
774: 1:      'question': '123',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'CCXXXIV',
774: 1:      'question': '234',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'CCCXLV',
774: 1:      'question': '345',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'CDLVI',
774: 1:      'question': '456',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'DLXVII',
774: 1:      'question': '567',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'DCLXXVIII',
774: 1:      'question': '678',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'DCCCXC',
774: 1:      'question': '890',
774: 1:      'valid': true
774: 1:    }
774: 1:  ],
774: 1:  'info': [
774: 1:    '✅f(1) = I',
774: 1:    '✅f(2) = II',
774: 1:    '✅f(3) = III',
774: 1:    '✅f(4) = IV',
774: 1:    '✅f(5) = V',
774: 1:    '✅f(6) = VI',
774: 1:    '✅f(7) = VII',
774: 1:    '✅f(8) = VIII',
774: 1:    '✅f(9) = IX',
774: 1:    '✅f(10) = X',
774: 1:    '✅f(11) = XI',
774: 1:    '✅f(12) = XII',
774: 1:    '✅f(13) = XIII',
774: 1:    '✅f(14) = XIV',
774: 1:    '✅f(15) = XV',
774: 1:    '✅f(16) = XVI',
774: 1:    '✅f(17) = XVII',
774: 1:    '✅f(18) = XVIII',
774: 1:    '✅f(19) = XIX',
774: 1:    '✅f(20) = XX',
774: 1:    '✅f(30) = XXX',
774: 1:    '✅f(35) = XXXV',
774: 1:    '✅f(36) = XXXVI',
774: 1:    '✅f(46) = XLVI',
774: 1:    '✅f(57) = LVII',
774: 1:    '✅f(67) = LXVII',
774: 1:    '✅f(89) = LXXXIX',
774: 1:    '✅f(123) = CXXIII',
774: 1:    '✅f(234) = CCXXXIV',
774: 1:    '✅f(345) = CCCXLV',
774: 1:    '✅f(456) = CDLVI',
774: 1:    '✅f(567) = DLXVII',
774: 1:    '✅f(678) = DCLXXVIII',
774: 1:    '✅f(890) = DCCCXC',
774: 1:    '❌f(1234) = ??? != MCCXXXIV'
774: 1:  ],
774: 1:  'level': 27,
774: 1:  'nextQuestion': '1234',
774: 1:  'questions': [
774: 1:    '1',
774: 1:    '2',
774: 1:    '3',
774: 1:    '4',
774: 1:    '5',
774: 1:    '6',
774: 1:    '7',
774: 1:    '8',
774: 1:    '9',
774: 1:    '10',
774: 1:    '11',
774: 1:    '12',
774: 1:    '13',
774: 1:    '14',
774: 1:    '15',
774: 1:    '16',
774: 1:    '17',
774: 1:    '18',
774: 1:    '19',
774: 1:    '20',
774: 1:    '30',
774: 1:    '35',
774: 1:    '36',
774: 1:    '46',
774: 1:    '57',
774: 1:    '67',
774: 1:    '89',
774: 1:    '123',
774: 1:    '234',
774: 1:    '345',
774: 1:    '456',
774: 1:    '567',
774: 1:    '678',
774: 1:    '890',
774: 1:    '1234'
774: 1:  ]
774: 1:}
774: 1:Scores: 67992
774: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI', 'XLVI', 'LVII', 'LXVII', 'LXXXIX', 'CXXIII', 'CCXXXIV', 'CCCXLV', 'CDLVI', 'DLXVII', 'DCLXXVIII', 'DCCCXC', 'MCCXXXIV']')
774: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
775: 1:BoardData {
775: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
775: 1:  'expectedAnswer': 'MMCCCXLV',
775: 1:  'history': [
775: 1:    {
775: 1:      'answer': 'I',
775: 1:      'question': '1',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'II',
775: 1:      'question': '2',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'III',
775: 1:      'question': '3',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'IV',
775: 1:      'question': '4',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'V',
775: 1:      'question': '5',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'VI',
775: 1:      'question': '6',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'VII',
775: 1:      'question': '7',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'VIII',
775: 1:      'question': '8',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'IX',
775: 1:      'question': '9',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'X',
775: 1:      'question': '10',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'XI',
775: 1:      'question': '11',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'XII',
775: 1:      'question': '12',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'XIII',
775: 1:      'question': '13',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'XIV',
775: 1:      'question': '14',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'XV',
775: 1:      'question': '15',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'XVI',
775: 1:      'question': '16',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'XVII',
775: 1:      'question': '17',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'XVIII',
775: 1:      'question': '18',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'XIX',
775: 1:      'question': '19',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'XX',
775: 1:      'question': '20',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'XXX',
775: 1:      'question': '30',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'XXXV',
775: 1:      'question': '35',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'XXXVI',
775: 1:      'question': '36',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'XLVI',
775: 1:      'question': '46',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'LVII',
775: 1:      'question': '57',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'LXVII',
775: 1:      'question': '67',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'LXXXIX',
775: 1:      'question': '89',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'CXXIII',
775: 1:      'question': '123',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'CCXXXIV',
775: 1:      'question': '234',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'CCCXLV',
775: 1:      'question': '345',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'CDLVI',
775: 1:      'question': '456',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'DLXVII',
775: 1:      'question': '567',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'DCLXXVIII',
775: 1:      'question': '678',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'DCCCXC',
775: 1:      'question': '890',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'MCCXXXIV',
775: 1:      'question': '1234',
775: 1:      'valid': true
775: 1:    }
775: 1:  ],
775: 1:  'info': [
775: 1:    '✅f(1) = I',
775: 1:    '✅f(2) = II',
775: 1:    '✅f(3) = III',
775: 1:    '✅f(4) = IV',
775: 1:    '✅f(5) = V',
775: 1:    '✅f(6) = VI',
775: 1:    '✅f(7) = VII',
775: 1:    '✅f(8) = VIII',
775: 1:    '✅f(9) = IX',
775: 1:    '✅f(10) = X',
775: 1:    '✅f(11) = XI',
775: 1:    '✅f(12) = XII',
775: 1:    '✅f(13) = XIII',
775: 1:    '✅f(14) = XIV',
775: 1:    '✅f(15) = XV',
775: 1:    '✅f(16) = XVI',
775: 1:    '✅f(17) = XVII',
775: 1:    '✅f(18) = XVIII',
775: 1:    '✅f(19) = XIX',
775: 1:    '✅f(20) = XX',
775: 1:    '✅f(30) = XXX',
775: 1:    '✅f(35) = XXXV',
775: 1:    '✅f(36) = XXXVI',
775: 1:    '✅f(46) = XLVI',
775: 1:    '✅f(57) = LVII',
775: 1:    '✅f(67) = LXVII',
775: 1:    '✅f(89) = LXXXIX',
775: 1:    '✅f(123) = CXXIII',
775: 1:    '✅f(234) = CCXXXIV',
775: 1:    '✅f(345) = CCCXLV',
775: 1:    '✅f(456) = CDLVI',
775: 1:    '✅f(567) = DLXVII',
775: 1:    '✅f(678) = DCLXXVIII',
775: 1:    '✅f(890) = DCCCXC',
775: 1:    '✅f(1234) = MCCXXXIV',
775: 1:    '❌f(2345) = ??? != MMCCCXLV'
775: 1:  ],
775: 1:  'level': 27,
775: 1:  'nextQuestion': '2345',
775: 1:  'questions': [
775: 1:    '1',
775: 1:    '2',
775: 1:    '3',
775: 1:    '4',
775: 1:    '5',
775: 1:    '6',
775: 1:    '7',
775: 1:    '8',
775: 1:    '9',
775: 1:    '10',
775: 1:    '11',
775: 1:    '12',
775: 1:    '13',
775: 1:    '14',
775: 1:    '15',
775: 1:    '16',
775: 1:    '17',
775: 1:    '18',
775: 1:    '19',
775: 1:    '20',
775: 1:    '30',
775: 1:    '35',
775: 1:    '36',
775: 1:    '46',
775: 1:    '57',
775: 1:    '67',
775: 1:    '89',
775: 1:    '123',
775: 1:    '234',
775: 1:    '345',
775: 1:    '456',
775: 1:    '567',
775: 1:    '678',
775: 1:    '890',
775: 1:    '1234',
775: 1:    '2345'
775: 1:  ]
775: 1:}
775: 1:Scores: 68002
775: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI', 'XLVI', 'LVII', 'LXVII', 'LXXXIX', 'CXXIII', 'CCXXXIV', 'CCCXLV', 'CDLVI', 'DLXVII', 'DCLXXVIII', 'DCCCXC', 'MCCXXXIV', 'MMCCCXLV']')
775: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
776: 1:BoardData {
776: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
776: 1:  'expectedAnswer': 'MMMCDLVI',
776: 1:  'history': [
776: 1:    {
776: 1:      'answer': 'I',
776: 1:      'question': '1',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'II',
776: 1:      'question': '2',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'III',
776: 1:      'question': '3',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'IV',
776: 1:      'question': '4',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'V',
776: 1:      'question': '5',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'VI',
776: 1:      'question': '6',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'VII',
776: 1:      'question': '7',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'VIII',
776: 1:      'question': '8',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'IX',
776: 1:      'question': '9',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'X',
776: 1:      'question': '10',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'XI',
776: 1:      'question': '11',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'XII',
776: 1:      'question': '12',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'XIII',
776: 1:      'question': '13',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'XIV',
776: 1:      'question': '14',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'XV',
776: 1:      'question': '15',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'XVI',
776: 1:      'question': '16',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'XVII',
776: 1:      'question': '17',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'XVIII',
776: 1:      'question': '18',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'XIX',
776: 1:      'question': '19',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'XX',
776: 1:      'question': '20',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'XXX',
776: 1:      'question': '30',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'XXXV',
776: 1:      'question': '35',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'XXXVI',
776: 1:      'question': '36',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'XLVI',
776: 1:      'question': '46',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'LVII',
776: 1:      'question': '57',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'LXVII',
776: 1:      'question': '67',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'LXXXIX',
776: 1:      'question': '89',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'CXXIII',
776: 1:      'question': '123',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'CCXXXIV',
776: 1:      'question': '234',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'CCCXLV',
776: 1:      'question': '345',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'CDLVI',
776: 1:      'question': '456',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'DLXVII',
776: 1:      'question': '567',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'DCLXXVIII',
776: 1:      'question': '678',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'DCCCXC',
776: 1:      'question': '890',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'MCCXXXIV',
776: 1:      'question': '1234',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'MMCCCXLV',
776: 1:      'question': '2345',
776: 1:      'valid': true
776: 1:    }
776: 1:  ],
776: 1:  'info': [
776: 1:    '✅f(1) = I',
776: 1:    '✅f(2) = II',
776: 1:    '✅f(3) = III',
776: 1:    '✅f(4) = IV',
776: 1:    '✅f(5) = V',
776: 1:    '✅f(6) = VI',
776: 1:    '✅f(7) = VII',
776: 1:    '✅f(8) = VIII',
776: 1:    '✅f(9) = IX',
776: 1:    '✅f(10) = X',
776: 1:    '✅f(11) = XI',
776: 1:    '✅f(12) = XII',
776: 1:    '✅f(13) = XIII',
776: 1:    '✅f(14) = XIV',
776: 1:    '✅f(15) = XV',
776: 1:    '✅f(16) = XVI',
776: 1:    '✅f(17) = XVII',
776: 1:    '✅f(18) = XVIII',
776: 1:    '✅f(19) = XIX',
776: 1:    '✅f(20) = XX',
776: 1:    '✅f(30) = XXX',
776: 1:    '✅f(35) = XXXV',
776: 1:    '✅f(36) = XXXVI',
776: 1:    '✅f(46) = XLVI',
776: 1:    '✅f(57) = LVII',
776: 1:    '✅f(67) = LXVII',
776: 1:    '✅f(89) = LXXXIX',
776: 1:    '✅f(123) = CXXIII',
776: 1:    '✅f(234) = CCXXXIV',
776: 1:    '✅f(345) = CCCXLV',
776: 1:    '✅f(456) = CDLVI',
776: 1:    '✅f(567) = DLXVII',
776: 1:    '✅f(678) = DCLXXVIII',
776: 1:    '✅f(890) = DCCCXC',
776: 1:    '✅f(1234) = MCCXXXIV',
776: 1:    '✅f(2345) = MMCCCXLV',
776: 1:    '❌f(3456) = ??? != MMMCDLVI'
776: 1:  ],
776: 1:  'level': 27,
776: 1:  'nextQuestion': '3456',
776: 1:  'questions': [
776: 1:    '1',
776: 1:    '2',
776: 1:    '3',
776: 1:    '4',
776: 1:    '5',
776: 1:    '6',
776: 1:    '7',
776: 1:    '8',
776: 1:    '9',
776: 1:    '10',
776: 1:    '11',
776: 1:    '12',
776: 1:    '13',
776: 1:    '14',
776: 1:    '15',
776: 1:    '16',
776: 1:    '17',
776: 1:    '18',
776: 1:    '19',
776: 1:    '20',
776: 1:    '30',
776: 1:    '35',
776: 1:    '36',
776: 1:    '46',
776: 1:    '57',
776: 1:    '67',
776: 1:    '89',
776: 1:    '123',
776: 1:    '234',
776: 1:    '345',
776: 1:    '456',
776: 1:    '567',
776: 1:    '678',
776: 1:    '890',
776: 1:    '1234',
776: 1:    '2345',
776: 1:    '3456'
776: 1:  ]
776: 1:}
776: 1:Scores: 68012
776: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI', 'XLVI', 'LVII', 'LXVII', 'LXXXIX', 'CXXIII', 'CCXXXIV', 'CCCXLV', 'CDLVI', 'DLXVII', 'DCLXXVIII', 'DCCCXC', 'MCCXXXIV', 'MMCCCXLV', 'MMMCDLVI']')
776: 1:Fire Event: PassTest{complexity=40, testCount=37}
776: 1:Fire Event: NextAlgorithm{complexity=40, time=0}
------------------------------------------
777: 1:BoardData {
777: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
777: 1:  'history': [
777: 1:    {
777: 1:      'answer': 'I',
777: 1:      'question': '1',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'II',
777: 1:      'question': '2',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'III',
777: 1:      'question': '3',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'IV',
777: 1:      'question': '4',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'V',
777: 1:      'question': '5',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'VI',
777: 1:      'question': '6',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'VII',
777: 1:      'question': '7',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'VIII',
777: 1:      'question': '8',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'IX',
777: 1:      'question': '9',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'X',
777: 1:      'question': '10',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'XI',
777: 1:      'question': '11',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'XII',
777: 1:      'question': '12',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'XIII',
777: 1:      'question': '13',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'XIV',
777: 1:      'question': '14',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'XV',
777: 1:      'question': '15',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'XVI',
777: 1:      'question': '16',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'XVII',
777: 1:      'question': '17',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'XVIII',
777: 1:      'question': '18',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'XIX',
777: 1:      'question': '19',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'XX',
777: 1:      'question': '20',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'XXX',
777: 1:      'question': '30',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'XXXV',
777: 1:      'question': '35',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'XXXVI',
777: 1:      'question': '36',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'XLVI',
777: 1:      'question': '46',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'LVII',
777: 1:      'question': '57',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'LXVII',
777: 1:      'question': '67',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'LXXXIX',
777: 1:      'question': '89',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'CXXIII',
777: 1:      'question': '123',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'CCXXXIV',
777: 1:      'question': '234',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'CCCXLV',
777: 1:      'question': '345',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'CDLVI',
777: 1:      'question': '456',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'DLXVII',
777: 1:      'question': '567',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'DCLXXVIII',
777: 1:      'question': '678',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'DCCCXC',
777: 1:      'question': '890',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'MCCXXXIV',
777: 1:      'question': '1234',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'MMCCCXLV',
777: 1:      'question': '2345',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'MMMCDLVI',
777: 1:      'question': '3456',
777: 1:      'valid': true
777: 1:    }
777: 1:  ],
777: 1:  'info': [
777: 1:    '✅f(1) = I',
777: 1:    '✅f(2) = II',
777: 1:    '✅f(3) = III',
777: 1:    '✅f(4) = IV',
777: 1:    '✅f(5) = V',
777: 1:    '✅f(6) = VI',
777: 1:    '✅f(7) = VII',
777: 1:    '✅f(8) = VIII',
777: 1:    '✅f(9) = IX',
777: 1:    '✅f(10) = X',
777: 1:    '✅f(11) = XI',
777: 1:    '✅f(12) = XII',
777: 1:    '✅f(13) = XIII',
777: 1:    '✅f(14) = XIV',
777: 1:    '✅f(15) = XV',
777: 1:    '✅f(16) = XVI',
777: 1:    '✅f(17) = XVII',
777: 1:    '✅f(18) = XVIII',
777: 1:    '✅f(19) = XIX',
777: 1:    '✅f(20) = XX',
777: 1:    '✅f(30) = XXX',
777: 1:    '✅f(35) = XXXV',
777: 1:    '✅f(36) = XXXVI',
777: 1:    '✅f(46) = XLVI',
777: 1:    '✅f(57) = LVII',
777: 1:    '✅f(67) = LXVII',
777: 1:    '✅f(89) = LXXXIX',
777: 1:    '✅f(123) = CXXIII',
777: 1:    '✅f(234) = CCXXXIV',
777: 1:    '✅f(345) = CCCXLV',
777: 1:    '✅f(456) = CDLVI',
777: 1:    '✅f(567) = DLXVII',
777: 1:    '✅f(678) = DCLXXVIII',
777: 1:    '✅f(890) = DCCCXC',
777: 1:    '✅f(1234) = MCCXXXIV',
777: 1:    '✅f(2345) = MMCCCXLV',
777: 1:    '✅f(3456) = MMMCDLVI'
777: 1:  ],
777: 1:  'level': 27,
777: 1:  'questions': []
777: 1:}
777: 1:Scores: 73421
777: 1:Answer: message('StartNextLevel')
777: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
778: 1:BoardData {
778: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
778: 1:  'expectedAnswer': '1',
778: 1:  'history': [],
778: 1:  'info': ['❌f(I) = ??? != 1'],
778: 1:  'level': 28,
778: 1:  'nextQuestion': 'I',
778: 1:  'questions': ['I']
778: 1:}
778: 1:Scores: 73421
778: 1:Answer: message('['1']')
778: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
779: 1:BoardData {
779: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
779: 1:  'expectedAnswer': '2',
779: 1:  'history': [{
779: 1:    'answer': '1',
779: 1:    'question': 'I',
779: 1:    'valid': true
779: 1:  }],
779: 1:  'info': [
779: 1:    '✅f(I) = 1',
779: 1:    '❌f(II) = ??? != 2'
779: 1:  ],
779: 1:  'level': 28,
779: 1:  'nextQuestion': 'II',
779: 1:  'questions': [
779: 1:    'I',
779: 1:    'II'
779: 1:  ]
779: 1:}
779: 1:Scores: 73432
779: 1:Answer: message('['1', '2']')
779: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
780: 1:BoardData {
780: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
780: 1:  'expectedAnswer': '3',
780: 1:  'history': [
780: 1:    {
780: 1:      'answer': '1',
780: 1:      'question': 'I',
780: 1:      'valid': true
780: 1:    },
780: 1:    {
780: 1:      'answer': '2',
780: 1:      'question': 'II',
780: 1:      'valid': true
780: 1:    }
780: 1:  ],
780: 1:  'info': [
780: 1:    '✅f(I) = 1',
780: 1:    '✅f(II) = 2',
780: 1:    '❌f(III) = ??? != 3'
780: 1:  ],
780: 1:  'level': 28,
780: 1:  'nextQuestion': 'III',
780: 1:  'questions': [
780: 1:    'I',
780: 1:    'II',
780: 1:    'III'
780: 1:  ]
780: 1:}
780: 1:Scores: 73443
780: 1:Answer: message('['1', '2', '3']')
780: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
781: 1:BoardData {
781: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
781: 1:  'expectedAnswer': '4',
781: 1:  'history': [
781: 1:    {
781: 1:      'answer': '1',
781: 1:      'question': 'I',
781: 1:      'valid': true
781: 1:    },
781: 1:    {
781: 1:      'answer': '2',
781: 1:      'question': 'II',
781: 1:      'valid': true
781: 1:    },
781: 1:    {
781: 1:      'answer': '3',
781: 1:      'question': 'III',
781: 1:      'valid': true
781: 1:    }
781: 1:  ],
781: 1:  'info': [
781: 1:    '✅f(I) = 1',
781: 1:    '✅f(II) = 2',
781: 1:    '✅f(III) = 3',
781: 1:    '❌f(IV) = ??? != 4'
781: 1:  ],
781: 1:  'level': 28,
781: 1:  'nextQuestion': 'IV',
781: 1:  'questions': [
781: 1:    'I',
781: 1:    'II',
781: 1:    'III',
781: 1:    'IV'
781: 1:  ]
781: 1:}
781: 1:Scores: 73454
781: 1:Answer: message('['1', '2', '3', '4']')
781: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
782: 1:BoardData {
782: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
782: 1:  'expectedAnswer': '5',
782: 1:  'history': [
782: 1:    {
782: 1:      'answer': '1',
782: 1:      'question': 'I',
782: 1:      'valid': true
782: 1:    },
782: 1:    {
782: 1:      'answer': '2',
782: 1:      'question': 'II',
782: 1:      'valid': true
782: 1:    },
782: 1:    {
782: 1:      'answer': '3',
782: 1:      'question': 'III',
782: 1:      'valid': true
782: 1:    },
782: 1:    {
782: 1:      'answer': '4',
782: 1:      'question': 'IV',
782: 1:      'valid': true
782: 1:    }
782: 1:  ],
782: 1:  'info': [
782: 1:    '✅f(I) = 1',
782: 1:    '✅f(II) = 2',
782: 1:    '✅f(III) = 3',
782: 1:    '✅f(IV) = 4',
782: 1:    '❌f(V) = ??? != 5'
782: 1:  ],
782: 1:  'level': 28,
782: 1:  'nextQuestion': 'V',
782: 1:  'questions': [
782: 1:    'I',
782: 1:    'II',
782: 1:    'III',
782: 1:    'IV',
782: 1:    'V'
782: 1:  ]
782: 1:}
782: 1:Scores: 73465
782: 1:Answer: message('['1', '2', '3', '4', '5']')
782: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
783: 1:BoardData {
783: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
783: 1:  'expectedAnswer': '6',
783: 1:  'history': [
783: 1:    {
783: 1:      'answer': '1',
783: 1:      'question': 'I',
783: 1:      'valid': true
783: 1:    },
783: 1:    {
783: 1:      'answer': '2',
783: 1:      'question': 'II',
783: 1:      'valid': true
783: 1:    },
783: 1:    {
783: 1:      'answer': '3',
783: 1:      'question': 'III',
783: 1:      'valid': true
783: 1:    },
783: 1:    {
783: 1:      'answer': '4',
783: 1:      'question': 'IV',
783: 1:      'valid': true
783: 1:    },
783: 1:    {
783: 1:      'answer': '5',
783: 1:      'question': 'V',
783: 1:      'valid': true
783: 1:    }
783: 1:  ],
783: 1:  'info': [
783: 1:    '✅f(I) = 1',
783: 1:    '✅f(II) = 2',
783: 1:    '✅f(III) = 3',
783: 1:    '✅f(IV) = 4',
783: 1:    '✅f(V) = 5',
783: 1:    '❌f(VI) = ??? != 6'
783: 1:  ],
783: 1:  'level': 28,
783: 1:  'nextQuestion': 'VI',
783: 1:  'questions': [
783: 1:    'I',
783: 1:    'II',
783: 1:    'III',
783: 1:    'IV',
783: 1:    'V',
783: 1:    'VI'
783: 1:  ]
783: 1:}
783: 1:Scores: 73476
783: 1:Answer: message('['1', '2', '3', '4', '5', '6']')
783: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
784: 1:BoardData {
784: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
784: 1:  'expectedAnswer': '7',
784: 1:  'history': [
784: 1:    {
784: 1:      'answer': '1',
784: 1:      'question': 'I',
784: 1:      'valid': true
784: 1:    },
784: 1:    {
784: 1:      'answer': '2',
784: 1:      'question': 'II',
784: 1:      'valid': true
784: 1:    },
784: 1:    {
784: 1:      'answer': '3',
784: 1:      'question': 'III',
784: 1:      'valid': true
784: 1:    },
784: 1:    {
784: 1:      'answer': '4',
784: 1:      'question': 'IV',
784: 1:      'valid': true
784: 1:    },
784: 1:    {
784: 1:      'answer': '5',
784: 1:      'question': 'V',
784: 1:      'valid': true
784: 1:    },
784: 1:    {
784: 1:      'answer': '6',
784: 1:      'question': 'VI',
784: 1:      'valid': true
784: 1:    }
784: 1:  ],
784: 1:  'info': [
784: 1:    '✅f(I) = 1',
784: 1:    '✅f(II) = 2',
784: 1:    '✅f(III) = 3',
784: 1:    '✅f(IV) = 4',
784: 1:    '✅f(V) = 5',
784: 1:    '✅f(VI) = 6',
784: 1:    '❌f(VII) = ??? != 7'
784: 1:  ],
784: 1:  'level': 28,
784: 1:  'nextQuestion': 'VII',
784: 1:  'questions': [
784: 1:    'I',
784: 1:    'II',
784: 1:    'III',
784: 1:    'IV',
784: 1:    'V',
784: 1:    'VI',
784: 1:    'VII'
784: 1:  ]
784: 1:}
784: 1:Scores: 73487
784: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7']')
784: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
785: 1:BoardData {
785: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
785: 1:  'expectedAnswer': '8',
785: 1:  'history': [
785: 1:    {
785: 1:      'answer': '1',
785: 1:      'question': 'I',
785: 1:      'valid': true
785: 1:    },
785: 1:    {
785: 1:      'answer': '2',
785: 1:      'question': 'II',
785: 1:      'valid': true
785: 1:    },
785: 1:    {
785: 1:      'answer': '3',
785: 1:      'question': 'III',
785: 1:      'valid': true
785: 1:    },
785: 1:    {
785: 1:      'answer': '4',
785: 1:      'question': 'IV',
785: 1:      'valid': true
785: 1:    },
785: 1:    {
785: 1:      'answer': '5',
785: 1:      'question': 'V',
785: 1:      'valid': true
785: 1:    },
785: 1:    {
785: 1:      'answer': '6',
785: 1:      'question': 'VI',
785: 1:      'valid': true
785: 1:    },
785: 1:    {
785: 1:      'answer': '7',
785: 1:      'question': 'VII',
785: 1:      'valid': true
785: 1:    }
785: 1:  ],
785: 1:  'info': [
785: 1:    '✅f(I) = 1',
785: 1:    '✅f(II) = 2',
785: 1:    '✅f(III) = 3',
785: 1:    '✅f(IV) = 4',
785: 1:    '✅f(V) = 5',
785: 1:    '✅f(VI) = 6',
785: 1:    '✅f(VII) = 7',
785: 1:    '❌f(VIII) = ??? != 8'
785: 1:  ],
785: 1:  'level': 28,
785: 1:  'nextQuestion': 'VIII',
785: 1:  'questions': [
785: 1:    'I',
785: 1:    'II',
785: 1:    'III',
785: 1:    'IV',
785: 1:    'V',
785: 1:    'VI',
785: 1:    'VII',
785: 1:    'VIII'
785: 1:  ]
785: 1:}
785: 1:Scores: 73498
785: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8']')
785: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
786: 1:BoardData {
786: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
786: 1:  'expectedAnswer': '9',
786: 1:  'history': [
786: 1:    {
786: 1:      'answer': '1',
786: 1:      'question': 'I',
786: 1:      'valid': true
786: 1:    },
786: 1:    {
786: 1:      'answer': '2',
786: 1:      'question': 'II',
786: 1:      'valid': true
786: 1:    },
786: 1:    {
786: 1:      'answer': '3',
786: 1:      'question': 'III',
786: 1:      'valid': true
786: 1:    },
786: 1:    {
786: 1:      'answer': '4',
786: 1:      'question': 'IV',
786: 1:      'valid': true
786: 1:    },
786: 1:    {
786: 1:      'answer': '5',
786: 1:      'question': 'V',
786: 1:      'valid': true
786: 1:    },
786: 1:    {
786: 1:      'answer': '6',
786: 1:      'question': 'VI',
786: 1:      'valid': true
786: 1:    },
786: 1:    {
786: 1:      'answer': '7',
786: 1:      'question': 'VII',
786: 1:      'valid': true
786: 1:    },
786: 1:    {
786: 1:      'answer': '8',
786: 1:      'question': 'VIII',
786: 1:      'valid': true
786: 1:    }
786: 1:  ],
786: 1:  'info': [
786: 1:    '✅f(I) = 1',
786: 1:    '✅f(II) = 2',
786: 1:    '✅f(III) = 3',
786: 1:    '✅f(IV) = 4',
786: 1:    '✅f(V) = 5',
786: 1:    '✅f(VI) = 6',
786: 1:    '✅f(VII) = 7',
786: 1:    '✅f(VIII) = 8',
786: 1:    '❌f(IX) = ??? != 9'
786: 1:  ],
786: 1:  'level': 28,
786: 1:  'nextQuestion': 'IX',
786: 1:  'questions': [
786: 1:    'I',
786: 1:    'II',
786: 1:    'III',
786: 1:    'IV',
786: 1:    'V',
786: 1:    'VI',
786: 1:    'VII',
786: 1:    'VIII',
786: 1:    'IX'
786: 1:  ]
786: 1:}
786: 1:Scores: 73509
786: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9']')
786: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
787: 1:BoardData {
787: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
787: 1:  'expectedAnswer': '10',
787: 1:  'history': [
787: 1:    {
787: 1:      'answer': '1',
787: 1:      'question': 'I',
787: 1:      'valid': true
787: 1:    },
787: 1:    {
787: 1:      'answer': '2',
787: 1:      'question': 'II',
787: 1:      'valid': true
787: 1:    },
787: 1:    {
787: 1:      'answer': '3',
787: 1:      'question': 'III',
787: 1:      'valid': true
787: 1:    },
787: 1:    {
787: 1:      'answer': '4',
787: 1:      'question': 'IV',
787: 1:      'valid': true
787: 1:    },
787: 1:    {
787: 1:      'answer': '5',
787: 1:      'question': 'V',
787: 1:      'valid': true
787: 1:    },
787: 1:    {
787: 1:      'answer': '6',
787: 1:      'question': 'VI',
787: 1:      'valid': true
787: 1:    },
787: 1:    {
787: 1:      'answer': '7',
787: 1:      'question': 'VII',
787: 1:      'valid': true
787: 1:    },
787: 1:    {
787: 1:      'answer': '8',
787: 1:      'question': 'VIII',
787: 1:      'valid': true
787: 1:    },
787: 1:    {
787: 1:      'answer': '9',
787: 1:      'question': 'IX',
787: 1:      'valid': true
787: 1:    }
787: 1:  ],
787: 1:  'info': [
787: 1:    '✅f(I) = 1',
787: 1:    '✅f(II) = 2',
787: 1:    '✅f(III) = 3',
787: 1:    '✅f(IV) = 4',
787: 1:    '✅f(V) = 5',
787: 1:    '✅f(VI) = 6',
787: 1:    '✅f(VII) = 7',
787: 1:    '✅f(VIII) = 8',
787: 1:    '✅f(IX) = 9',
787: 1:    '❌f(X) = ??? != 10'
787: 1:  ],
787: 1:  'level': 28,
787: 1:  'nextQuestion': 'X',
787: 1:  'questions': [
787: 1:    'I',
787: 1:    'II',
787: 1:    'III',
787: 1:    'IV',
787: 1:    'V',
787: 1:    'VI',
787: 1:    'VII',
787: 1:    'VIII',
787: 1:    'IX',
787: 1:    'X'
787: 1:  ]
787: 1:}
787: 1:Scores: 73520
787: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']')
787: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
788: 1:BoardData {
788: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
788: 1:  'expectedAnswer': '11',
788: 1:  'history': [
788: 1:    {
788: 1:      'answer': '1',
788: 1:      'question': 'I',
788: 1:      'valid': true
788: 1:    },
788: 1:    {
788: 1:      'answer': '2',
788: 1:      'question': 'II',
788: 1:      'valid': true
788: 1:    },
788: 1:    {
788: 1:      'answer': '3',
788: 1:      'question': 'III',
788: 1:      'valid': true
788: 1:    },
788: 1:    {
788: 1:      'answer': '4',
788: 1:      'question': 'IV',
788: 1:      'valid': true
788: 1:    },
788: 1:    {
788: 1:      'answer': '5',
788: 1:      'question': 'V',
788: 1:      'valid': true
788: 1:    },
788: 1:    {
788: 1:      'answer': '6',
788: 1:      'question': 'VI',
788: 1:      'valid': true
788: 1:    },
788: 1:    {
788: 1:      'answer': '7',
788: 1:      'question': 'VII',
788: 1:      'valid': true
788: 1:    },
788: 1:    {
788: 1:      'answer': '8',
788: 1:      'question': 'VIII',
788: 1:      'valid': true
788: 1:    },
788: 1:    {
788: 1:      'answer': '9',
788: 1:      'question': 'IX',
788: 1:      'valid': true
788: 1:    },
788: 1:    {
788: 1:      'answer': '10',
788: 1:      'question': 'X',
788: 1:      'valid': true
788: 1:    }
788: 1:  ],
788: 1:  'info': [
788: 1:    '✅f(I) = 1',
788: 1:    '✅f(II) = 2',
788: 1:    '✅f(III) = 3',
788: 1:    '✅f(IV) = 4',
788: 1:    '✅f(V) = 5',
788: 1:    '✅f(VI) = 6',
788: 1:    '✅f(VII) = 7',
788: 1:    '✅f(VIII) = 8',
788: 1:    '✅f(IX) = 9',
788: 1:    '✅f(X) = 10',
788: 1:    '❌f(XI) = ??? != 11'
788: 1:  ],
788: 1:  'level': 28,
788: 1:  'nextQuestion': 'XI',
788: 1:  'questions': [
788: 1:    'I',
788: 1:    'II',
788: 1:    'III',
788: 1:    'IV',
788: 1:    'V',
788: 1:    'VI',
788: 1:    'VII',
788: 1:    'VIII',
788: 1:    'IX',
788: 1:    'X',
788: 1:    'XI'
788: 1:  ]
788: 1:}
788: 1:Scores: 73531
788: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']')
788: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
789: 1:BoardData {
789: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
789: 1:  'expectedAnswer': '12',
789: 1:  'history': [
789: 1:    {
789: 1:      'answer': '1',
789: 1:      'question': 'I',
789: 1:      'valid': true
789: 1:    },
789: 1:    {
789: 1:      'answer': '2',
789: 1:      'question': 'II',
789: 1:      'valid': true
789: 1:    },
789: 1:    {
789: 1:      'answer': '3',
789: 1:      'question': 'III',
789: 1:      'valid': true
789: 1:    },
789: 1:    {
789: 1:      'answer': '4',
789: 1:      'question': 'IV',
789: 1:      'valid': true
789: 1:    },
789: 1:    {
789: 1:      'answer': '5',
789: 1:      'question': 'V',
789: 1:      'valid': true
789: 1:    },
789: 1:    {
789: 1:      'answer': '6',
789: 1:      'question': 'VI',
789: 1:      'valid': true
789: 1:    },
789: 1:    {
789: 1:      'answer': '7',
789: 1:      'question': 'VII',
789: 1:      'valid': true
789: 1:    },
789: 1:    {
789: 1:      'answer': '8',
789: 1:      'question': 'VIII',
789: 1:      'valid': true
789: 1:    },
789: 1:    {
789: 1:      'answer': '9',
789: 1:      'question': 'IX',
789: 1:      'valid': true
789: 1:    },
789: 1:    {
789: 1:      'answer': '10',
789: 1:      'question': 'X',
789: 1:      'valid': true
789: 1:    },
789: 1:    {
789: 1:      'answer': '11',
789: 1:      'question': 'XI',
789: 1:      'valid': true
789: 1:    }
789: 1:  ],
789: 1:  'info': [
789: 1:    '✅f(I) = 1',
789: 1:    '✅f(II) = 2',
789: 1:    '✅f(III) = 3',
789: 1:    '✅f(IV) = 4',
789: 1:    '✅f(V) = 5',
789: 1:    '✅f(VI) = 6',
789: 1:    '✅f(VII) = 7',
789: 1:    '✅f(VIII) = 8',
789: 1:    '✅f(IX) = 9',
789: 1:    '✅f(X) = 10',
789: 1:    '✅f(XI) = 11',
789: 1:    '❌f(XII) = ??? != 12'
789: 1:  ],
789: 1:  'level': 28,
789: 1:  'nextQuestion': 'XII',
789: 1:  'questions': [
789: 1:    'I',
789: 1:    'II',
789: 1:    'III',
789: 1:    'IV',
789: 1:    'V',
789: 1:    'VI',
789: 1:    'VII',
789: 1:    'VIII',
789: 1:    'IX',
789: 1:    'X',
789: 1:    'XI',
789: 1:    'XII'
789: 1:  ]
789: 1:}
789: 1:Scores: 73542
789: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12']')
789: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
790: 1:BoardData {
790: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
790: 1:  'expectedAnswer': '13',
790: 1:  'history': [
790: 1:    {
790: 1:      'answer': '1',
790: 1:      'question': 'I',
790: 1:      'valid': true
790: 1:    },
790: 1:    {
790: 1:      'answer': '2',
790: 1:      'question': 'II',
790: 1:      'valid': true
790: 1:    },
790: 1:    {
790: 1:      'answer': '3',
790: 1:      'question': 'III',
790: 1:      'valid': true
790: 1:    },
790: 1:    {
790: 1:      'answer': '4',
790: 1:      'question': 'IV',
790: 1:      'valid': true
790: 1:    },
790: 1:    {
790: 1:      'answer': '5',
790: 1:      'question': 'V',
790: 1:      'valid': true
790: 1:    },
790: 1:    {
790: 1:      'answer': '6',
790: 1:      'question': 'VI',
790: 1:      'valid': true
790: 1:    },
790: 1:    {
790: 1:      'answer': '7',
790: 1:      'question': 'VII',
790: 1:      'valid': true
790: 1:    },
790: 1:    {
790: 1:      'answer': '8',
790: 1:      'question': 'VIII',
790: 1:      'valid': true
790: 1:    },
790: 1:    {
790: 1:      'answer': '9',
790: 1:      'question': 'IX',
790: 1:      'valid': true
790: 1:    },
790: 1:    {
790: 1:      'answer': '10',
790: 1:      'question': 'X',
790: 1:      'valid': true
790: 1:    },
790: 1:    {
790: 1:      'answer': '11',
790: 1:      'question': 'XI',
790: 1:      'valid': true
790: 1:    },
790: 1:    {
790: 1:      'answer': '12',
790: 1:      'question': 'XII',
790: 1:      'valid': true
790: 1:    }
790: 1:  ],
790: 1:  'info': [
790: 1:    '✅f(I) = 1',
790: 1:    '✅f(II) = 2',
790: 1:    '✅f(III) = 3',
790: 1:    '✅f(IV) = 4',
790: 1:    '✅f(V) = 5',
790: 1:    '✅f(VI) = 6',
790: 1:    '✅f(VII) = 7',
790: 1:    '✅f(VIII) = 8',
790: 1:    '✅f(IX) = 9',
790: 1:    '✅f(X) = 10',
790: 1:    '✅f(XI) = 11',
790: 1:    '✅f(XII) = 12',
790: 1:    '❌f(XIII) = ??? != 13'
790: 1:  ],
790: 1:  'level': 28,
790: 1:  'nextQuestion': 'XIII',
790: 1:  'questions': [
790: 1:    'I',
790: 1:    'II',
790: 1:    'III',
790: 1:    'IV',
790: 1:    'V',
790: 1:    'VI',
790: 1:    'VII',
790: 1:    'VIII',
790: 1:    'IX',
790: 1:    'X',
790: 1:    'XI',
790: 1:    'XII',
790: 1:    'XIII'
790: 1:  ]
790: 1:}
790: 1:Scores: 73553
790: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13']')
790: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
791: 1:BoardData {
791: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
791: 1:  'expectedAnswer': '14',
791: 1:  'history': [
791: 1:    {
791: 1:      'answer': '1',
791: 1:      'question': 'I',
791: 1:      'valid': true
791: 1:    },
791: 1:    {
791: 1:      'answer': '2',
791: 1:      'question': 'II',
791: 1:      'valid': true
791: 1:    },
791: 1:    {
791: 1:      'answer': '3',
791: 1:      'question': 'III',
791: 1:      'valid': true
791: 1:    },
791: 1:    {
791: 1:      'answer': '4',
791: 1:      'question': 'IV',
791: 1:      'valid': true
791: 1:    },
791: 1:    {
791: 1:      'answer': '5',
791: 1:      'question': 'V',
791: 1:      'valid': true
791: 1:    },
791: 1:    {
791: 1:      'answer': '6',
791: 1:      'question': 'VI',
791: 1:      'valid': true
791: 1:    },
791: 1:    {
791: 1:      'answer': '7',
791: 1:      'question': 'VII',
791: 1:      'valid': true
791: 1:    },
791: 1:    {
791: 1:      'answer': '8',
791: 1:      'question': 'VIII',
791: 1:      'valid': true
791: 1:    },
791: 1:    {
791: 1:      'answer': '9',
791: 1:      'question': 'IX',
791: 1:      'valid': true
791: 1:    },
791: 1:    {
791: 1:      'answer': '10',
791: 1:      'question': 'X',
791: 1:      'valid': true
791: 1:    },
791: 1:    {
791: 1:      'answer': '11',
791: 1:      'question': 'XI',
791: 1:      'valid': true
791: 1:    },
791: 1:    {
791: 1:      'answer': '12',
791: 1:      'question': 'XII',
791: 1:      'valid': true
791: 1:    },
791: 1:    {
791: 1:      'answer': '13',
791: 1:      'question': 'XIII',
791: 1:      'valid': true
791: 1:    }
791: 1:  ],
791: 1:  'info': [
791: 1:    '✅f(I) = 1',
791: 1:    '✅f(II) = 2',
791: 1:    '✅f(III) = 3',
791: 1:    '✅f(IV) = 4',
791: 1:    '✅f(V) = 5',
791: 1:    '✅f(VI) = 6',
791: 1:    '✅f(VII) = 7',
791: 1:    '✅f(VIII) = 8',
791: 1:    '✅f(IX) = 9',
791: 1:    '✅f(X) = 10',
791: 1:    '✅f(XI) = 11',
791: 1:    '✅f(XII) = 12',
791: 1:    '✅f(XIII) = 13',
791: 1:    '❌f(XIV) = ??? != 14'
791: 1:  ],
791: 1:  'level': 28,
791: 1:  'nextQuestion': 'XIV',
791: 1:  'questions': [
791: 1:    'I',
791: 1:    'II',
791: 1:    'III',
791: 1:    'IV',
791: 1:    'V',
791: 1:    'VI',
791: 1:    'VII',
791: 1:    'VIII',
791: 1:    'IX',
791: 1:    'X',
791: 1:    'XI',
791: 1:    'XII',
791: 1:    'XIII',
791: 1:    'XIV'
791: 1:  ]
791: 1:}
791: 1:Scores: 73564
791: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14']')
791: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
792: 1:BoardData {
792: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
792: 1:  'expectedAnswer': '15',
792: 1:  'history': [
792: 1:    {
792: 1:      'answer': '1',
792: 1:      'question': 'I',
792: 1:      'valid': true
792: 1:    },
792: 1:    {
792: 1:      'answer': '2',
792: 1:      'question': 'II',
792: 1:      'valid': true
792: 1:    },
792: 1:    {
792: 1:      'answer': '3',
792: 1:      'question': 'III',
792: 1:      'valid': true
792: 1:    },
792: 1:    {
792: 1:      'answer': '4',
792: 1:      'question': 'IV',
792: 1:      'valid': true
792: 1:    },
792: 1:    {
792: 1:      'answer': '5',
792: 1:      'question': 'V',
792: 1:      'valid': true
792: 1:    },
792: 1:    {
792: 1:      'answer': '6',
792: 1:      'question': 'VI',
792: 1:      'valid': true
792: 1:    },
792: 1:    {
792: 1:      'answer': '7',
792: 1:      'question': 'VII',
792: 1:      'valid': true
792: 1:    },
792: 1:    {
792: 1:      'answer': '8',
792: 1:      'question': 'VIII',
792: 1:      'valid': true
792: 1:    },
792: 1:    {
792: 1:      'answer': '9',
792: 1:      'question': 'IX',
792: 1:      'valid': true
792: 1:    },
792: 1:    {
792: 1:      'answer': '10',
792: 1:      'question': 'X',
792: 1:      'valid': true
792: 1:    },
792: 1:    {
792: 1:      'answer': '11',
792: 1:      'question': 'XI',
792: 1:      'valid': true
792: 1:    },
792: 1:    {
792: 1:      'answer': '12',
792: 1:      'question': 'XII',
792: 1:      'valid': true
792: 1:    },
792: 1:    {
792: 1:      'answer': '13',
792: 1:      'question': 'XIII',
792: 1:      'valid': true
792: 1:    },
792: 1:    {
792: 1:      'answer': '14',
792: 1:      'question': 'XIV',
792: 1:      'valid': true
792: 1:    }
792: 1:  ],
792: 1:  'info': [
792: 1:    '✅f(I) = 1',
792: 1:    '✅f(II) = 2',
792: 1:    '✅f(III) = 3',
792: 1:    '✅f(IV) = 4',
792: 1:    '✅f(V) = 5',
792: 1:    '✅f(VI) = 6',
792: 1:    '✅f(VII) = 7',
792: 1:    '✅f(VIII) = 8',
792: 1:    '✅f(IX) = 9',
792: 1:    '✅f(X) = 10',
792: 1:    '✅f(XI) = 11',
792: 1:    '✅f(XII) = 12',
792: 1:    '✅f(XIII) = 13',
792: 1:    '✅f(XIV) = 14',
792: 1:    '❌f(XV) = ??? != 15'
792: 1:  ],
792: 1:  'level': 28,
792: 1:  'nextQuestion': 'XV',
792: 1:  'questions': [
792: 1:    'I',
792: 1:    'II',
792: 1:    'III',
792: 1:    'IV',
792: 1:    'V',
792: 1:    'VI',
792: 1:    'VII',
792: 1:    'VIII',
792: 1:    'IX',
792: 1:    'X',
792: 1:    'XI',
792: 1:    'XII',
792: 1:    'XIII',
792: 1:    'XIV',
792: 1:    'XV'
792: 1:  ]
792: 1:}
792: 1:Scores: 73575
792: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15']')
792: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
793: 1:BoardData {
793: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
793: 1:  'expectedAnswer': '16',
793: 1:  'history': [
793: 1:    {
793: 1:      'answer': '1',
793: 1:      'question': 'I',
793: 1:      'valid': true
793: 1:    },
793: 1:    {
793: 1:      'answer': '2',
793: 1:      'question': 'II',
793: 1:      'valid': true
793: 1:    },
793: 1:    {
793: 1:      'answer': '3',
793: 1:      'question': 'III',
793: 1:      'valid': true
793: 1:    },
793: 1:    {
793: 1:      'answer': '4',
793: 1:      'question': 'IV',
793: 1:      'valid': true
793: 1:    },
793: 1:    {
793: 1:      'answer': '5',
793: 1:      'question': 'V',
793: 1:      'valid': true
793: 1:    },
793: 1:    {
793: 1:      'answer': '6',
793: 1:      'question': 'VI',
793: 1:      'valid': true
793: 1:    },
793: 1:    {
793: 1:      'answer': '7',
793: 1:      'question': 'VII',
793: 1:      'valid': true
793: 1:    },
793: 1:    {
793: 1:      'answer': '8',
793: 1:      'question': 'VIII',
793: 1:      'valid': true
793: 1:    },
793: 1:    {
793: 1:      'answer': '9',
793: 1:      'question': 'IX',
793: 1:      'valid': true
793: 1:    },
793: 1:    {
793: 1:      'answer': '10',
793: 1:      'question': 'X',
793: 1:      'valid': true
793: 1:    },
793: 1:    {
793: 1:      'answer': '11',
793: 1:      'question': 'XI',
793: 1:      'valid': true
793: 1:    },
793: 1:    {
793: 1:      'answer': '12',
793: 1:      'question': 'XII',
793: 1:      'valid': true
793: 1:    },
793: 1:    {
793: 1:      'answer': '13',
793: 1:      'question': 'XIII',
793: 1:      'valid': true
793: 1:    },
793: 1:    {
793: 1:      'answer': '14',
793: 1:      'question': 'XIV',
793: 1:      'valid': true
793: 1:    },
793: 1:    {
793: 1:      'answer': '15',
793: 1:      'question': 'XV',
793: 1:      'valid': true
793: 1:    }
793: 1:  ],
793: 1:  'info': [
793: 1:    '✅f(I) = 1',
793: 1:    '✅f(II) = 2',
793: 1:    '✅f(III) = 3',
793: 1:    '✅f(IV) = 4',
793: 1:    '✅f(V) = 5',
793: 1:    '✅f(VI) = 6',
793: 1:    '✅f(VII) = 7',
793: 1:    '✅f(VIII) = 8',
793: 1:    '✅f(IX) = 9',
793: 1:    '✅f(X) = 10',
793: 1:    '✅f(XI) = 11',
793: 1:    '✅f(XII) = 12',
793: 1:    '✅f(XIII) = 13',
793: 1:    '✅f(XIV) = 14',
793: 1:    '✅f(XV) = 15',
793: 1:    '❌f(XVI) = ??? != 16'
793: 1:  ],
793: 1:  'level': 28,
793: 1:  'nextQuestion': 'XVI',
793: 1:  'questions': [
793: 1:    'I',
793: 1:    'II',
793: 1:    'III',
793: 1:    'IV',
793: 1:    'V',
793: 1:    'VI',
793: 1:    'VII',
793: 1:    'VIII',
793: 1:    'IX',
793: 1:    'X',
793: 1:    'XI',
793: 1:    'XII',
793: 1:    'XIII',
793: 1:    'XIV',
793: 1:    'XV',
793: 1:    'XVI'
793: 1:  ]
793: 1:}
793: 1:Scores: 73586
793: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16']')
793: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
794: 1:BoardData {
794: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
794: 1:  'expectedAnswer': '17',
794: 1:  'history': [
794: 1:    {
794: 1:      'answer': '1',
794: 1:      'question': 'I',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '2',
794: 1:      'question': 'II',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '3',
794: 1:      'question': 'III',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '4',
794: 1:      'question': 'IV',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '5',
794: 1:      'question': 'V',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '6',
794: 1:      'question': 'VI',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '7',
794: 1:      'question': 'VII',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '8',
794: 1:      'question': 'VIII',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '9',
794: 1:      'question': 'IX',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '10',
794: 1:      'question': 'X',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '11',
794: 1:      'question': 'XI',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '12',
794: 1:      'question': 'XII',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '13',
794: 1:      'question': 'XIII',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '14',
794: 1:      'question': 'XIV',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '15',
794: 1:      'question': 'XV',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '16',
794: 1:      'question': 'XVI',
794: 1:      'valid': true
794: 1:    }
794: 1:  ],
794: 1:  'info': [
794: 1:    '✅f(I) = 1',
794: 1:    '✅f(II) = 2',
794: 1:    '✅f(III) = 3',
794: 1:    '✅f(IV) = 4',
794: 1:    '✅f(V) = 5',
794: 1:    '✅f(VI) = 6',
794: 1:    '✅f(VII) = 7',
794: 1:    '✅f(VIII) = 8',
794: 1:    '✅f(IX) = 9',
794: 1:    '✅f(X) = 10',
794: 1:    '✅f(XI) = 11',
794: 1:    '✅f(XII) = 12',
794: 1:    '✅f(XIII) = 13',
794: 1:    '✅f(XIV) = 14',
794: 1:    '✅f(XV) = 15',
794: 1:    '✅f(XVI) = 16',
794: 1:    '❌f(XVII) = ??? != 17'
794: 1:  ],
794: 1:  'level': 28,
794: 1:  'nextQuestion': 'XVII',
794: 1:  'questions': [
794: 1:    'I',
794: 1:    'II',
794: 1:    'III',
794: 1:    'IV',
794: 1:    'V',
794: 1:    'VI',
794: 1:    'VII',
794: 1:    'VIII',
794: 1:    'IX',
794: 1:    'X',
794: 1:    'XI',
794: 1:    'XII',
794: 1:    'XIII',
794: 1:    'XIV',
794: 1:    'XV',
794: 1:    'XVI',
794: 1:    'XVII'
794: 1:  ]
794: 1:}
794: 1:Scores: 73597
794: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17']')
794: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
795: 1:BoardData {
795: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
795: 1:  'expectedAnswer': '18',
795: 1:  'history': [
795: 1:    {
795: 1:      'answer': '1',
795: 1:      'question': 'I',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '2',
795: 1:      'question': 'II',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '3',
795: 1:      'question': 'III',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '4',
795: 1:      'question': 'IV',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '5',
795: 1:      'question': 'V',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '6',
795: 1:      'question': 'VI',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '7',
795: 1:      'question': 'VII',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '8',
795: 1:      'question': 'VIII',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '9',
795: 1:      'question': 'IX',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '10',
795: 1:      'question': 'X',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '11',
795: 1:      'question': 'XI',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '12',
795: 1:      'question': 'XII',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '13',
795: 1:      'question': 'XIII',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '14',
795: 1:      'question': 'XIV',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '15',
795: 1:      'question': 'XV',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '16',
795: 1:      'question': 'XVI',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '17',
795: 1:      'question': 'XVII',
795: 1:      'valid': true
795: 1:    }
795: 1:  ],
795: 1:  'info': [
795: 1:    '✅f(I) = 1',
795: 1:    '✅f(II) = 2',
795: 1:    '✅f(III) = 3',
795: 1:    '✅f(IV) = 4',
795: 1:    '✅f(V) = 5',
795: 1:    '✅f(VI) = 6',
795: 1:    '✅f(VII) = 7',
795: 1:    '✅f(VIII) = 8',
795: 1:    '✅f(IX) = 9',
795: 1:    '✅f(X) = 10',
795: 1:    '✅f(XI) = 11',
795: 1:    '✅f(XII) = 12',
795: 1:    '✅f(XIII) = 13',
795: 1:    '✅f(XIV) = 14',
795: 1:    '✅f(XV) = 15',
795: 1:    '✅f(XVI) = 16',
795: 1:    '✅f(XVII) = 17',
795: 1:    '❌f(XVIII) = ??? != 18'
795: 1:  ],
795: 1:  'level': 28,
795: 1:  'nextQuestion': 'XVIII',
795: 1:  'questions': [
795: 1:    'I',
795: 1:    'II',
795: 1:    'III',
795: 1:    'IV',
795: 1:    'V',
795: 1:    'VI',
795: 1:    'VII',
795: 1:    'VIII',
795: 1:    'IX',
795: 1:    'X',
795: 1:    'XI',
795: 1:    'XII',
795: 1:    'XIII',
795: 1:    'XIV',
795: 1:    'XV',
795: 1:    'XVI',
795: 1:    'XVII',
795: 1:    'XVIII'
795: 1:  ]
795: 1:}
795: 1:Scores: 73608
795: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18']')
795: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
796: 1:BoardData {
796: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
796: 1:  'expectedAnswer': '19',
796: 1:  'history': [
796: 1:    {
796: 1:      'answer': '1',
796: 1:      'question': 'I',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '2',
796: 1:      'question': 'II',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '3',
796: 1:      'question': 'III',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '4',
796: 1:      'question': 'IV',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '5',
796: 1:      'question': 'V',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '6',
796: 1:      'question': 'VI',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '7',
796: 1:      'question': 'VII',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '8',
796: 1:      'question': 'VIII',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '9',
796: 1:      'question': 'IX',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '10',
796: 1:      'question': 'X',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '11',
796: 1:      'question': 'XI',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '12',
796: 1:      'question': 'XII',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '13',
796: 1:      'question': 'XIII',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '14',
796: 1:      'question': 'XIV',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '15',
796: 1:      'question': 'XV',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '16',
796: 1:      'question': 'XVI',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '17',
796: 1:      'question': 'XVII',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '18',
796: 1:      'question': 'XVIII',
796: 1:      'valid': true
796: 1:    }
796: 1:  ],
796: 1:  'info': [
796: 1:    '✅f(I) = 1',
796: 1:    '✅f(II) = 2',
796: 1:    '✅f(III) = 3',
796: 1:    '✅f(IV) = 4',
796: 1:    '✅f(V) = 5',
796: 1:    '✅f(VI) = 6',
796: 1:    '✅f(VII) = 7',
796: 1:    '✅f(VIII) = 8',
796: 1:    '✅f(IX) = 9',
796: 1:    '✅f(X) = 10',
796: 1:    '✅f(XI) = 11',
796: 1:    '✅f(XII) = 12',
796: 1:    '✅f(XIII) = 13',
796: 1:    '✅f(XIV) = 14',
796: 1:    '✅f(XV) = 15',
796: 1:    '✅f(XVI) = 16',
796: 1:    '✅f(XVII) = 17',
796: 1:    '✅f(XVIII) = 18',
796: 1:    '❌f(XIX) = ??? != 19'
796: 1:  ],
796: 1:  'level': 28,
796: 1:  'nextQuestion': 'XIX',
796: 1:  'questions': [
796: 1:    'I',
796: 1:    'II',
796: 1:    'III',
796: 1:    'IV',
796: 1:    'V',
796: 1:    'VI',
796: 1:    'VII',
796: 1:    'VIII',
796: 1:    'IX',
796: 1:    'X',
796: 1:    'XI',
796: 1:    'XII',
796: 1:    'XIII',
796: 1:    'XIV',
796: 1:    'XV',
796: 1:    'XVI',
796: 1:    'XVII',
796: 1:    'XVIII',
796: 1:    'XIX'
796: 1:  ]
796: 1:}
796: 1:Scores: 73619
796: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19']')
796: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
797: 1:BoardData {
797: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
797: 1:  'expectedAnswer': '20',
797: 1:  'history': [
797: 1:    {
797: 1:      'answer': '1',
797: 1:      'question': 'I',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '2',
797: 1:      'question': 'II',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '3',
797: 1:      'question': 'III',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '4',
797: 1:      'question': 'IV',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '5',
797: 1:      'question': 'V',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '6',
797: 1:      'question': 'VI',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '7',
797: 1:      'question': 'VII',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '8',
797: 1:      'question': 'VIII',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '9',
797: 1:      'question': 'IX',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '10',
797: 1:      'question': 'X',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '11',
797: 1:      'question': 'XI',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '12',
797: 1:      'question': 'XII',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '13',
797: 1:      'question': 'XIII',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '14',
797: 1:      'question': 'XIV',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '15',
797: 1:      'question': 'XV',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '16',
797: 1:      'question': 'XVI',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '17',
797: 1:      'question': 'XVII',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '18',
797: 1:      'question': 'XVIII',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '19',
797: 1:      'question': 'XIX',
797: 1:      'valid': true
797: 1:    }
797: 1:  ],
797: 1:  'info': [
797: 1:    '✅f(I) = 1',
797: 1:    '✅f(II) = 2',
797: 1:    '✅f(III) = 3',
797: 1:    '✅f(IV) = 4',
797: 1:    '✅f(V) = 5',
797: 1:    '✅f(VI) = 6',
797: 1:    '✅f(VII) = 7',
797: 1:    '✅f(VIII) = 8',
797: 1:    '✅f(IX) = 9',
797: 1:    '✅f(X) = 10',
797: 1:    '✅f(XI) = 11',
797: 1:    '✅f(XII) = 12',
797: 1:    '✅f(XIII) = 13',
797: 1:    '✅f(XIV) = 14',
797: 1:    '✅f(XV) = 15',
797: 1:    '✅f(XVI) = 16',
797: 1:    '✅f(XVII) = 17',
797: 1:    '✅f(XVIII) = 18',
797: 1:    '✅f(XIX) = 19',
797: 1:    '❌f(XX) = ??? != 20'
797: 1:  ],
797: 1:  'level': 28,
797: 1:  'nextQuestion': 'XX',
797: 1:  'questions': [
797: 1:    'I',
797: 1:    'II',
797: 1:    'III',
797: 1:    'IV',
797: 1:    'V',
797: 1:    'VI',
797: 1:    'VII',
797: 1:    'VIII',
797: 1:    'IX',
797: 1:    'X',
797: 1:    'XI',
797: 1:    'XII',
797: 1:    'XIII',
797: 1:    'XIV',
797: 1:    'XV',
797: 1:    'XVI',
797: 1:    'XVII',
797: 1:    'XVIII',
797: 1:    'XIX',
797: 1:    'XX'
797: 1:  ]
797: 1:}
797: 1:Scores: 73630
797: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20']')
797: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
798: 1:BoardData {
798: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
798: 1:  'expectedAnswer': '30',
798: 1:  'history': [
798: 1:    {
798: 1:      'answer': '1',
798: 1:      'question': 'I',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '2',
798: 1:      'question': 'II',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '3',
798: 1:      'question': 'III',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '4',
798: 1:      'question': 'IV',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '5',
798: 1:      'question': 'V',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '6',
798: 1:      'question': 'VI',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '7',
798: 1:      'question': 'VII',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '8',
798: 1:      'question': 'VIII',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '9',
798: 1:      'question': 'IX',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '10',
798: 1:      'question': 'X',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '11',
798: 1:      'question': 'XI',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '12',
798: 1:      'question': 'XII',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '13',
798: 1:      'question': 'XIII',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '14',
798: 1:      'question': 'XIV',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '15',
798: 1:      'question': 'XV',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '16',
798: 1:      'question': 'XVI',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '17',
798: 1:      'question': 'XVII',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '18',
798: 1:      'question': 'XVIII',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '19',
798: 1:      'question': 'XIX',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '20',
798: 1:      'question': 'XX',
798: 1:      'valid': true
798: 1:    }
798: 1:  ],
798: 1:  'info': [
798: 1:    '✅f(I) = 1',
798: 1:    '✅f(II) = 2',
798: 1:    '✅f(III) = 3',
798: 1:    '✅f(IV) = 4',
798: 1:    '✅f(V) = 5',
798: 1:    '✅f(VI) = 6',
798: 1:    '✅f(VII) = 7',
798: 1:    '✅f(VIII) = 8',
798: 1:    '✅f(IX) = 9',
798: 1:    '✅f(X) = 10',
798: 1:    '✅f(XI) = 11',
798: 1:    '✅f(XII) = 12',
798: 1:    '✅f(XIII) = 13',
798: 1:    '✅f(XIV) = 14',
798: 1:    '✅f(XV) = 15',
798: 1:    '✅f(XVI) = 16',
798: 1:    '✅f(XVII) = 17',
798: 1:    '✅f(XVIII) = 18',
798: 1:    '✅f(XIX) = 19',
798: 1:    '✅f(XX) = 20',
798: 1:    '❌f(XXX) = ??? != 30'
798: 1:  ],
798: 1:  'level': 28,
798: 1:  'nextQuestion': 'XXX',
798: 1:  'questions': [
798: 1:    'I',
798: 1:    'II',
798: 1:    'III',
798: 1:    'IV',
798: 1:    'V',
798: 1:    'VI',
798: 1:    'VII',
798: 1:    'VIII',
798: 1:    'IX',
798: 1:    'X',
798: 1:    'XI',
798: 1:    'XII',
798: 1:    'XIII',
798: 1:    'XIV',
798: 1:    'XV',
798: 1:    'XVI',
798: 1:    'XVII',
798: 1:    'XVIII',
798: 1:    'XIX',
798: 1:    'XX',
798: 1:    'XXX'
798: 1:  ]
798: 1:}
798: 1:Scores: 73641
798: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30']')
798: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
799: 1:BoardData {
799: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
799: 1:  'expectedAnswer': '35',
799: 1:  'history': [
799: 1:    {
799: 1:      'answer': '1',
799: 1:      'question': 'I',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '2',
799: 1:      'question': 'II',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '3',
799: 1:      'question': 'III',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '4',
799: 1:      'question': 'IV',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '5',
799: 1:      'question': 'V',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '6',
799: 1:      'question': 'VI',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '7',
799: 1:      'question': 'VII',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '8',
799: 1:      'question': 'VIII',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '9',
799: 1:      'question': 'IX',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '10',
799: 1:      'question': 'X',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '11',
799: 1:      'question': 'XI',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '12',
799: 1:      'question': 'XII',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '13',
799: 1:      'question': 'XIII',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '14',
799: 1:      'question': 'XIV',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '15',
799: 1:      'question': 'XV',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '16',
799: 1:      'question': 'XVI',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '17',
799: 1:      'question': 'XVII',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '18',
799: 1:      'question': 'XVIII',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '19',
799: 1:      'question': 'XIX',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '20',
799: 1:      'question': 'XX',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '30',
799: 1:      'question': 'XXX',
799: 1:      'valid': true
799: 1:    }
799: 1:  ],
799: 1:  'info': [
799: 1:    '✅f(I) = 1',
799: 1:    '✅f(II) = 2',
799: 1:    '✅f(III) = 3',
799: 1:    '✅f(IV) = 4',
799: 1:    '✅f(V) = 5',
799: 1:    '✅f(VI) = 6',
799: 1:    '✅f(VII) = 7',
799: 1:    '✅f(VIII) = 8',
799: 1:    '✅f(IX) = 9',
799: 1:    '✅f(X) = 10',
799: 1:    '✅f(XI) = 11',
799: 1:    '✅f(XII) = 12',
799: 1:    '✅f(XIII) = 13',
799: 1:    '✅f(XIV) = 14',
799: 1:    '✅f(XV) = 15',
799: 1:    '✅f(XVI) = 16',
799: 1:    '✅f(XVII) = 17',
799: 1:    '✅f(XVIII) = 18',
799: 1:    '✅f(XIX) = 19',
799: 1:    '✅f(XX) = 20',
799: 1:    '✅f(XXX) = 30',
799: 1:    '❌f(XXXV) = ??? != 35'
799: 1:  ],
799: 1:  'level': 28,
799: 1:  'nextQuestion': 'XXXV',
799: 1:  'questions': [
799: 1:    'I',
799: 1:    'II',
799: 1:    'III',
799: 1:    'IV',
799: 1:    'V',
799: 1:    'VI',
799: 1:    'VII',
799: 1:    'VIII',
799: 1:    'IX',
799: 1:    'X',
799: 1:    'XI',
799: 1:    'XII',
799: 1:    'XIII',
799: 1:    'XIV',
799: 1:    'XV',
799: 1:    'XVI',
799: 1:    'XVII',
799: 1:    'XVIII',
799: 1:    'XIX',
799: 1:    'XX',
799: 1:    'XXX',
799: 1:    'XXXV'
799: 1:  ]
799: 1:}
799: 1:Scores: 73652
799: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35']')
799: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
800: 1:BoardData {
800: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
800: 1:  'expectedAnswer': '36',
800: 1:  'history': [
800: 1:    {
800: 1:      'answer': '1',
800: 1:      'question': 'I',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '2',
800: 1:      'question': 'II',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '3',
800: 1:      'question': 'III',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '4',
800: 1:      'question': 'IV',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '5',
800: 1:      'question': 'V',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '6',
800: 1:      'question': 'VI',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '7',
800: 1:      'question': 'VII',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '8',
800: 1:      'question': 'VIII',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '9',
800: 1:      'question': 'IX',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '10',
800: 1:      'question': 'X',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '11',
800: 1:      'question': 'XI',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '12',
800: 1:      'question': 'XII',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '13',
800: 1:      'question': 'XIII',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '14',
800: 1:      'question': 'XIV',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '15',
800: 1:      'question': 'XV',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '16',
800: 1:      'question': 'XVI',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '17',
800: 1:      'question': 'XVII',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '18',
800: 1:      'question': 'XVIII',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '19',
800: 1:      'question': 'XIX',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '20',
800: 1:      'question': 'XX',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '30',
800: 1:      'question': 'XXX',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '35',
800: 1:      'question': 'XXXV',
800: 1:      'valid': true
800: 1:    }
800: 1:  ],
800: 1:  'info': [
800: 1:    '✅f(I) = 1',
800: 1:    '✅f(II) = 2',
800: 1:    '✅f(III) = 3',
800: 1:    '✅f(IV) = 4',
800: 1:    '✅f(V) = 5',
800: 1:    '✅f(VI) = 6',
800: 1:    '✅f(VII) = 7',
800: 1:    '✅f(VIII) = 8',
800: 1:    '✅f(IX) = 9',
800: 1:    '✅f(X) = 10',
800: 1:    '✅f(XI) = 11',
800: 1:    '✅f(XII) = 12',
800: 1:    '✅f(XIII) = 13',
800: 1:    '✅f(XIV) = 14',
800: 1:    '✅f(XV) = 15',
800: 1:    '✅f(XVI) = 16',
800: 1:    '✅f(XVII) = 17',
800: 1:    '✅f(XVIII) = 18',
800: 1:    '✅f(XIX) = 19',
800: 1:    '✅f(XX) = 20',
800: 1:    '✅f(XXX) = 30',
800: 1:    '✅f(XXXV) = 35',
800: 1:    '❌f(XXXVI) = ??? != 36'
800: 1:  ],
800: 1:  'level': 28,
800: 1:  'nextQuestion': 'XXXVI',
800: 1:  'questions': [
800: 1:    'I',
800: 1:    'II',
800: 1:    'III',
800: 1:    'IV',
800: 1:    'V',
800: 1:    'VI',
800: 1:    'VII',
800: 1:    'VIII',
800: 1:    'IX',
800: 1:    'X',
800: 1:    'XI',
800: 1:    'XII',
800: 1:    'XIII',
800: 1:    'XIV',
800: 1:    'XV',
800: 1:    'XVI',
800: 1:    'XVII',
800: 1:    'XVIII',
800: 1:    'XIX',
800: 1:    'XX',
800: 1:    'XXX',
800: 1:    'XXXV',
800: 1:    'XXXVI'
800: 1:  ]
800: 1:}
800: 1:Scores: 73663
800: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36']')
800: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
801: 1:BoardData {
801: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
801: 1:  'expectedAnswer': '46',
801: 1:  'history': [
801: 1:    {
801: 1:      'answer': '1',
801: 1:      'question': 'I',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '2',
801: 1:      'question': 'II',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '3',
801: 1:      'question': 'III',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '4',
801: 1:      'question': 'IV',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '5',
801: 1:      'question': 'V',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '6',
801: 1:      'question': 'VI',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '7',
801: 1:      'question': 'VII',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '8',
801: 1:      'question': 'VIII',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '9',
801: 1:      'question': 'IX',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '10',
801: 1:      'question': 'X',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '11',
801: 1:      'question': 'XI',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '12',
801: 1:      'question': 'XII',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '13',
801: 1:      'question': 'XIII',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '14',
801: 1:      'question': 'XIV',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '15',
801: 1:      'question': 'XV',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '16',
801: 1:      'question': 'XVI',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '17',
801: 1:      'question': 'XVII',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '18',
801: 1:      'question': 'XVIII',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '19',
801: 1:      'question': 'XIX',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '20',
801: 1:      'question': 'XX',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '30',
801: 1:      'question': 'XXX',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '35',
801: 1:      'question': 'XXXV',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '36',
801: 1:      'question': 'XXXVI',
801: 1:      'valid': true
801: 1:    }
801: 1:  ],
801: 1:  'info': [
801: 1:    '✅f(I) = 1',
801: 1:    '✅f(II) = 2',
801: 1:    '✅f(III) = 3',
801: 1:    '✅f(IV) = 4',
801: 1:    '✅f(V) = 5',
801: 1:    '✅f(VI) = 6',
801: 1:    '✅f(VII) = 7',
801: 1:    '✅f(VIII) = 8',
801: 1:    '✅f(IX) = 9',
801: 1:    '✅f(X) = 10',
801: 1:    '✅f(XI) = 11',
801: 1:    '✅f(XII) = 12',
801: 1:    '✅f(XIII) = 13',
801: 1:    '✅f(XIV) = 14',
801: 1:    '✅f(XV) = 15',
801: 1:    '✅f(XVI) = 16',
801: 1:    '✅f(XVII) = 17',
801: 1:    '✅f(XVIII) = 18',
801: 1:    '✅f(XIX) = 19',
801: 1:    '✅f(XX) = 20',
801: 1:    '✅f(XXX) = 30',
801: 1:    '✅f(XXXV) = 35',
801: 1:    '✅f(XXXVI) = 36',
801: 1:    '❌f(XLVI) = ??? != 46'
801: 1:  ],
801: 1:  'level': 28,
801: 1:  'nextQuestion': 'XLVI',
801: 1:  'questions': [
801: 1:    'I',
801: 1:    'II',
801: 1:    'III',
801: 1:    'IV',
801: 1:    'V',
801: 1:    'VI',
801: 1:    'VII',
801: 1:    'VIII',
801: 1:    'IX',
801: 1:    'X',
801: 1:    'XI',
801: 1:    'XII',
801: 1:    'XIII',
801: 1:    'XIV',
801: 1:    'XV',
801: 1:    'XVI',
801: 1:    'XVII',
801: 1:    'XVIII',
801: 1:    'XIX',
801: 1:    'XX',
801: 1:    'XXX',
801: 1:    'XXXV',
801: 1:    'XXXVI',
801: 1:    'XLVI'
801: 1:  ]
801: 1:}
801: 1:Scores: 73674
801: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36', '46']')
801: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
802: 1:BoardData {
802: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
802: 1:  'expectedAnswer': '57',
802: 1:  'history': [
802: 1:    {
802: 1:      'answer': '1',
802: 1:      'question': 'I',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '2',
802: 1:      'question': 'II',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '3',
802: 1:      'question': 'III',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '4',
802: 1:      'question': 'IV',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '5',
802: 1:      'question': 'V',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '6',
802: 1:      'question': 'VI',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '7',
802: 1:      'question': 'VII',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '8',
802: 1:      'question': 'VIII',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '9',
802: 1:      'question': 'IX',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '10',
802: 1:      'question': 'X',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '11',
802: 1:      'question': 'XI',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '12',
802: 1:      'question': 'XII',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '13',
802: 1:      'question': 'XIII',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '14',
802: 1:      'question': 'XIV',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '15',
802: 1:      'question': 'XV',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '16',
802: 1:      'question': 'XVI',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '17',
802: 1:      'question': 'XVII',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '18',
802: 1:      'question': 'XVIII',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '19',
802: 1:      'question': 'XIX',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '20',
802: 1:      'question': 'XX',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '30',
802: 1:      'question': 'XXX',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '35',
802: 1:      'question': 'XXXV',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '36',
802: 1:      'question': 'XXXVI',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '46',
802: 1:      'question': 'XLVI',
802: 1:      'valid': true
802: 1:    }
802: 1:  ],
802: 1:  'info': [
802: 1:    '✅f(I) = 1',
802: 1:    '✅f(II) = 2',
802: 1:    '✅f(III) = 3',
802: 1:    '✅f(IV) = 4',
802: 1:    '✅f(V) = 5',
802: 1:    '✅f(VI) = 6',
802: 1:    '✅f(VII) = 7',
802: 1:    '✅f(VIII) = 8',
802: 1:    '✅f(IX) = 9',
802: 1:    '✅f(X) = 10',
802: 1:    '✅f(XI) = 11',
802: 1:    '✅f(XII) = 12',
802: 1:    '✅f(XIII) = 13',
802: 1:    '✅f(XIV) = 14',
802: 1:    '✅f(XV) = 15',
802: 1:    '✅f(XVI) = 16',
802: 1:    '✅f(XVII) = 17',
802: 1:    '✅f(XVIII) = 18',
802: 1:    '✅f(XIX) = 19',
802: 1:    '✅f(XX) = 20',
802: 1:    '✅f(XXX) = 30',
802: 1:    '✅f(XXXV) = 35',
802: 1:    '✅f(XXXVI) = 36',
802: 1:    '✅f(XLVI) = 46',
802: 1:    '❌f(LVII) = ??? != 57'
802: 1:  ],
802: 1:  'level': 28,
802: 1:  'nextQuestion': 'LVII',
802: 1:  'questions': [
802: 1:    'I',
802: 1:    'II',
802: 1:    'III',
802: 1:    'IV',
802: 1:    'V',
802: 1:    'VI',
802: 1:    'VII',
802: 1:    'VIII',
802: 1:    'IX',
802: 1:    'X',
802: 1:    'XI',
802: 1:    'XII',
802: 1:    'XIII',
802: 1:    'XIV',
802: 1:    'XV',
802: 1:    'XVI',
802: 1:    'XVII',
802: 1:    'XVIII',
802: 1:    'XIX',
802: 1:    'XX',
802: 1:    'XXX',
802: 1:    'XXXV',
802: 1:    'XXXVI',
802: 1:    'XLVI',
802: 1:    'LVII'
802: 1:  ]
802: 1:}
802: 1:Scores: 73685
802: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36', '46', '57']')
802: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
803: 1:BoardData {
803: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
803: 1:  'expectedAnswer': '67',
803: 1:  'history': [
803: 1:    {
803: 1:      'answer': '1',
803: 1:      'question': 'I',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '2',
803: 1:      'question': 'II',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '3',
803: 1:      'question': 'III',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '4',
803: 1:      'question': 'IV',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '5',
803: 1:      'question': 'V',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '6',
803: 1:      'question': 'VI',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '7',
803: 1:      'question': 'VII',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '8',
803: 1:      'question': 'VIII',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '9',
803: 1:      'question': 'IX',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '10',
803: 1:      'question': 'X',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '11',
803: 1:      'question': 'XI',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '12',
803: 1:      'question': 'XII',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '13',
803: 1:      'question': 'XIII',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '14',
803: 1:      'question': 'XIV',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '15',
803: 1:      'question': 'XV',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '16',
803: 1:      'question': 'XVI',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '17',
803: 1:      'question': 'XVII',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '18',
803: 1:      'question': 'XVIII',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '19',
803: 1:      'question': 'XIX',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '20',
803: 1:      'question': 'XX',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '30',
803: 1:      'question': 'XXX',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '35',
803: 1:      'question': 'XXXV',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '36',
803: 1:      'question': 'XXXVI',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '46',
803: 1:      'question': 'XLVI',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '57',
803: 1:      'question': 'LVII',
803: 1:      'valid': true
803: 1:    }
803: 1:  ],
803: 1:  'info': [
803: 1:    '✅f(I) = 1',
803: 1:    '✅f(II) = 2',
803: 1:    '✅f(III) = 3',
803: 1:    '✅f(IV) = 4',
803: 1:    '✅f(V) = 5',
803: 1:    '✅f(VI) = 6',
803: 1:    '✅f(VII) = 7',
803: 1:    '✅f(VIII) = 8',
803: 1:    '✅f(IX) = 9',
803: 1:    '✅f(X) = 10',
803: 1:    '✅f(XI) = 11',
803: 1:    '✅f(XII) = 12',
803: 1:    '✅f(XIII) = 13',
803: 1:    '✅f(XIV) = 14',
803: 1:    '✅f(XV) = 15',
803: 1:    '✅f(XVI) = 16',
803: 1:    '✅f(XVII) = 17',
803: 1:    '✅f(XVIII) = 18',
803: 1:    '✅f(XIX) = 19',
803: 1:    '✅f(XX) = 20',
803: 1:    '✅f(XXX) = 30',
803: 1:    '✅f(XXXV) = 35',
803: 1:    '✅f(XXXVI) = 36',
803: 1:    '✅f(XLVI) = 46',
803: 1:    '✅f(LVII) = 57',
803: 1:    '❌f(LXVII) = ??? != 67'
803: 1:  ],
803: 1:  'level': 28,
803: 1:  'nextQuestion': 'LXVII',
803: 1:  'questions': [
803: 1:    'I',
803: 1:    'II',
803: 1:    'III',
803: 1:    'IV',
803: 1:    'V',
803: 1:    'VI',
803: 1:    'VII',
803: 1:    'VIII',
803: 1:    'IX',
803: 1:    'X',
803: 1:    'XI',
803: 1:    'XII',
803: 1:    'XIII',
803: 1:    'XIV',
803: 1:    'XV',
803: 1:    'XVI',
803: 1:    'XVII',
803: 1:    'XVIII',
803: 1:    'XIX',
803: 1:    'XX',
803: 1:    'XXX',
803: 1:    'XXXV',
803: 1:    'XXXVI',
803: 1:    'XLVI',
803: 1:    'LVII',
803: 1:    'LXVII'
803: 1:  ]
803: 1:}
803: 1:Scores: 73696
803: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36', '46', '57', '67']')
803: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
804: 1:BoardData {
804: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
804: 1:  'expectedAnswer': '89',
804: 1:  'history': [
804: 1:    {
804: 1:      'answer': '1',
804: 1:      'question': 'I',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '2',
804: 1:      'question': 'II',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '3',
804: 1:      'question': 'III',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '4',
804: 1:      'question': 'IV',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '5',
804: 1:      'question': 'V',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '6',
804: 1:      'question': 'VI',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '7',
804: 1:      'question': 'VII',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '8',
804: 1:      'question': 'VIII',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '9',
804: 1:      'question': 'IX',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '10',
804: 1:      'question': 'X',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '11',
804: 1:      'question': 'XI',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '12',
804: 1:      'question': 'XII',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '13',
804: 1:      'question': 'XIII',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '14',
804: 1:      'question': 'XIV',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '15',
804: 1:      'question': 'XV',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '16',
804: 1:      'question': 'XVI',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '17',
804: 1:      'question': 'XVII',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '18',
804: 1:      'question': 'XVIII',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '19',
804: 1:      'question': 'XIX',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '20',
804: 1:      'question': 'XX',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '30',
804: 1:      'question': 'XXX',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '35',
804: 1:      'question': 'XXXV',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '36',
804: 1:      'question': 'XXXVI',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '46',
804: 1:      'question': 'XLVI',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '57',
804: 1:      'question': 'LVII',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '67',
804: 1:      'question': 'LXVII',
804: 1:      'valid': true
804: 1:    }
804: 1:  ],
804: 1:  'info': [
804: 1:    '✅f(I) = 1',
804: 1:    '✅f(II) = 2',
804: 1:    '✅f(III) = 3',
804: 1:    '✅f(IV) = 4',
804: 1:    '✅f(V) = 5',
804: 1:    '✅f(VI) = 6',
804: 1:    '✅f(VII) = 7',
804: 1:    '✅f(VIII) = 8',
804: 1:    '✅f(IX) = 9',
804: 1:    '✅f(X) = 10',
804: 1:    '✅f(XI) = 11',
804: 1:    '✅f(XII) = 12',
804: 1:    '✅f(XIII) = 13',
804: 1:    '✅f(XIV) = 14',
804: 1:    '✅f(XV) = 15',
804: 1:    '✅f(XVI) = 16',
804: 1:    '✅f(XVII) = 17',
804: 1:    '✅f(XVIII) = 18',
804: 1:    '✅f(XIX) = 19',
804: 1:    '✅f(XX) = 20',
804: 1:    '✅f(XXX) = 30',
804: 1:    '✅f(XXXV) = 35',
804: 1:    '✅f(XXXVI) = 36',
804: 1:    '✅f(XLVI) = 46',
804: 1:    '✅f(LVII) = 57',
804: 1:    '✅f(LXVII) = 67',
804: 1:    '❌f(LXXXIX) = ??? != 89'
804: 1:  ],
804: 1:  'level': 28,
804: 1:  'nextQuestion': 'LXXXIX',
804: 1:  'questions': [
804: 1:    'I',
804: 1:    'II',
804: 1:    'III',
804: 1:    'IV',
804: 1:    'V',
804: 1:    'VI',
804: 1:    'VII',
804: 1:    'VIII',
804: 1:    'IX',
804: 1:    'X',
804: 1:    'XI',
804: 1:    'XII',
804: 1:    'XIII',
804: 1:    'XIV',
804: 1:    'XV',
804: 1:    'XVI',
804: 1:    'XVII',
804: 1:    'XVIII',
804: 1:    'XIX',
804: 1:    'XX',
804: 1:    'XXX',
804: 1:    'XXXV',
804: 1:    'XXXVI',
804: 1:    'XLVI',
804: 1:    'LVII',
804: 1:    'LXVII',
804: 1:    'LXXXIX'
804: 1:  ]
804: 1:}
804: 1:Scores: 73707
804: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36', '46', '57', '67', '89']')
804: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
805: 1:BoardData {
805: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
805: 1:  'expectedAnswer': '123',
805: 1:  'history': [
805: 1:    {
805: 1:      'answer': '1',
805: 1:      'question': 'I',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '2',
805: 1:      'question': 'II',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '3',
805: 1:      'question': 'III',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '4',
805: 1:      'question': 'IV',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '5',
805: 1:      'question': 'V',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '6',
805: 1:      'question': 'VI',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '7',
805: 1:      'question': 'VII',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '8',
805: 1:      'question': 'VIII',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '9',
805: 1:      'question': 'IX',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '10',
805: 1:      'question': 'X',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '11',
805: 1:      'question': 'XI',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '12',
805: 1:      'question': 'XII',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '13',
805: 1:      'question': 'XIII',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '14',
805: 1:      'question': 'XIV',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '15',
805: 1:      'question': 'XV',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '16',
805: 1:      'question': 'XVI',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '17',
805: 1:      'question': 'XVII',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '18',
805: 1:      'question': 'XVIII',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '19',
805: 1:      'question': 'XIX',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '20',
805: 1:      'question': 'XX',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '30',
805: 1:      'question': 'XXX',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '35',
805: 1:      'question': 'XXXV',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '36',
805: 1:      'question': 'XXXVI',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '46',
805: 1:      'question': 'XLVI',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '57',
805: 1:      'question': 'LVII',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '67',
805: 1:      'question': 'LXVII',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '89',
805: 1:      'question': 'LXXXIX',
805: 1:      'valid': true
805: 1:    }
805: 1:  ],
805: 1:  'info': [
805: 1:    '✅f(I) = 1',
805: 1:    '✅f(II) = 2',
805: 1:    '✅f(III) = 3',
805: 1:    '✅f(IV) = 4',
805: 1:    '✅f(V) = 5',
805: 1:    '✅f(VI) = 6',
805: 1:    '✅f(VII) = 7',
805: 1:    '✅f(VIII) = 8',
805: 1:    '✅f(IX) = 9',
805: 1:    '✅f(X) = 10',
805: 1:    '✅f(XI) = 11',
805: 1:    '✅f(XII) = 12',
805: 1:    '✅f(XIII) = 13',
805: 1:    '✅f(XIV) = 14',
805: 1:    '✅f(XV) = 15',
805: 1:    '✅f(XVI) = 16',
805: 1:    '✅f(XVII) = 17',
805: 1:    '✅f(XVIII) = 18',
805: 1:    '✅f(XIX) = 19',
805: 1:    '✅f(XX) = 20',
805: 1:    '✅f(XXX) = 30',
805: 1:    '✅f(XXXV) = 35',
805: 1:    '✅f(XXXVI) = 36',
805: 1:    '✅f(XLVI) = 46',
805: 1:    '✅f(LVII) = 57',
805: 1:    '✅f(LXVII) = 67',
805: 1:    '✅f(LXXXIX) = 89',
805: 1:    '❌f(CXXIII) = ??? != 123'
805: 1:  ],
805: 1:  'level': 28,
805: 1:  'nextQuestion': 'CXXIII',
805: 1:  'questions': [
805: 1:    'I',
805: 1:    'II',
805: 1:    'III',
805: 1:    'IV',
805: 1:    'V',
805: 1:    'VI',
805: 1:    'VII',
805: 1:    'VIII',
805: 1:    'IX',
805: 1:    'X',
805: 1:    'XI',
805: 1:    'XII',
805: 1:    'XIII',
805: 1:    'XIV',
805: 1:    'XV',
805: 1:    'XVI',
805: 1:    'XVII',
805: 1:    'XVIII',
805: 1:    'XIX',
805: 1:    'XX',
805: 1:    'XXX',
805: 1:    'XXXV',
805: 1:    'XXXVI',
805: 1:    'XLVI',
805: 1:    'LVII',
805: 1:    'LXVII',
805: 1:    'LXXXIX',
805: 1:    'CXXIII'
805: 1:  ]
805: 1:}
805: 1:Scores: 73718
805: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36', '46', '57', '67', '89', '123']')
805: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
806: 1:BoardData {
806: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
806: 1:  'expectedAnswer': '234',
806: 1:  'history': [
806: 1:    {
806: 1:      'answer': '1',
806: 1:      'question': 'I',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '2',
806: 1:      'question': 'II',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '3',
806: 1:      'question': 'III',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '4',
806: 1:      'question': 'IV',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '5',
806: 1:      'question': 'V',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '6',
806: 1:      'question': 'VI',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '7',
806: 1:      'question': 'VII',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '8',
806: 1:      'question': 'VIII',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '9',
806: 1:      'question': 'IX',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '10',
806: 1:      'question': 'X',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '11',
806: 1:      'question': 'XI',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '12',
806: 1:      'question': 'XII',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '13',
806: 1:      'question': 'XIII',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '14',
806: 1:      'question': 'XIV',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '15',
806: 1:      'question': 'XV',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '16',
806: 1:      'question': 'XVI',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '17',
806: 1:      'question': 'XVII',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '18',
806: 1:      'question': 'XVIII',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '19',
806: 1:      'question': 'XIX',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '20',
806: 1:      'question': 'XX',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '30',
806: 1:      'question': 'XXX',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '35',
806: 1:      'question': 'XXXV',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '36',
806: 1:      'question': 'XXXVI',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '46',
806: 1:      'question': 'XLVI',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '57',
806: 1:      'question': 'LVII',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '67',
806: 1:      'question': 'LXVII',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '89',
806: 1:      'question': 'LXXXIX',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '123',
806: 1:      'question': 'CXXIII',
806: 1:      'valid': true
806: 1:    }
806: 1:  ],
806: 1:  'info': [
806: 1:    '✅f(I) = 1',
806: 1:    '✅f(II) = 2',
806: 1:    '✅f(III) = 3',
806: 1:    '✅f(IV) = 4',
806: 1:    '✅f(V) = 5',
806: 1:    '✅f(VI) = 6',
806: 1:    '✅f(VII) = 7',
806: 1:    '✅f(VIII) = 8',
806: 1:    '✅f(IX) = 9',
806: 1:    '✅f(X) = 10',
806: 1:    '✅f(XI) = 11',
806: 1:    '✅f(XII) = 12',
806: 1:    '✅f(XIII) = 13',
806: 1:    '✅f(XIV) = 14',
806: 1:    '✅f(XV) = 15',
806: 1:    '✅f(XVI) = 16',
806: 1:    '✅f(XVII) = 17',
806: 1:    '✅f(XVIII) = 18',
806: 1:    '✅f(XIX) = 19',
806: 1:    '✅f(XX) = 20',
806: 1:    '✅f(XXX) = 30',
806: 1:    '✅f(XXXV) = 35',
806: 1:    '✅f(XXXVI) = 36',
806: 1:    '✅f(XLVI) = 46',
806: 1:    '✅f(LVII) = 57',
806: 1:    '✅f(LXVII) = 67',
806: 1:    '✅f(LXXXIX) = 89',
806: 1:    '✅f(CXXIII) = 123',
806: 1:    '❌f(CCXXXIV) = ??? != 234'
806: 1:  ],
806: 1:  'level': 28,
806: 1:  'nextQuestion': 'CCXXXIV',
806: 1:  'questions': [
806: 1:    'I',
806: 1:    'II',
806: 1:    'III',
806: 1:    'IV',
806: 1:    'V',
806: 1:    'VI',
806: 1:    'VII',
806: 1:    'VIII',
806: 1:    'IX',
806: 1:    'X',
806: 1:    'XI',
806: 1:    'XII',
806: 1:    'XIII',
806: 1:    'XIV',
806: 1:    'XV',
806: 1:    'XVI',
806: 1:    'XVII',
806: 1:    'XVIII',
806: 1:    'XIX',
806: 1:    'XX',
806: 1:    'XXX',
806: 1:    'XXXV',
806: 1:    'XXXVI',
806: 1:    'XLVI',
806: 1:    'LVII',
806: 1:    'LXVII',
806: 1:    'LXXXIX',
806: 1:    'CXXIII',
806: 1:    'CCXXXIV'
806: 1:  ]
806: 1:}
806: 1:Scores: 73729
806: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36', '46', '57', '67', '89', '123', '234']')
806: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
807: 1:BoardData {
807: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
807: 1:  'expectedAnswer': '345',
807: 1:  'history': [
807: 1:    {
807: 1:      'answer': '1',
807: 1:      'question': 'I',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '2',
807: 1:      'question': 'II',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '3',
807: 1:      'question': 'III',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '4',
807: 1:      'question': 'IV',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '5',
807: 1:      'question': 'V',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '6',
807: 1:      'question': 'VI',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '7',
807: 1:      'question': 'VII',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '8',
807: 1:      'question': 'VIII',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '9',
807: 1:      'question': 'IX',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '10',
807: 1:      'question': 'X',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '11',
807: 1:      'question': 'XI',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '12',
807: 1:      'question': 'XII',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '13',
807: 1:      'question': 'XIII',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '14',
807: 1:      'question': 'XIV',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '15',
807: 1:      'question': 'XV',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '16',
807: 1:      'question': 'XVI',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '17',
807: 1:      'question': 'XVII',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '18',
807: 1:      'question': 'XVIII',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '19',
807: 1:      'question': 'XIX',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '20',
807: 1:      'question': 'XX',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '30',
807: 1:      'question': 'XXX',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '35',
807: 1:      'question': 'XXXV',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '36',
807: 1:      'question': 'XXXVI',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '46',
807: 1:      'question': 'XLVI',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '57',
807: 1:      'question': 'LVII',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '67',
807: 1:      'question': 'LXVII',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '89',
807: 1:      'question': 'LXXXIX',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '123',
807: 1:      'question': 'CXXIII',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '234',
807: 1:      'question': 'CCXXXIV',
807: 1:      'valid': true
807: 1:    }
807: 1:  ],
807: 1:  'info': [
807: 1:    '✅f(I) = 1',
807: 1:    '✅f(II) = 2',
807: 1:    '✅f(III) = 3',
807: 1:    '✅f(IV) = 4',
807: 1:    '✅f(V) = 5',
807: 1:    '✅f(VI) = 6',
807: 1:    '✅f(VII) = 7',
807: 1:    '✅f(VIII) = 8',
807: 1:    '✅f(IX) = 9',
807: 1:    '✅f(X) = 10',
807: 1:    '✅f(XI) = 11',
807: 1:    '✅f(XII) = 12',
807: 1:    '✅f(XIII) = 13',
807: 1:    '✅f(XIV) = 14',
807: 1:    '✅f(XV) = 15',
807: 1:    '✅f(XVI) = 16',
807: 1:    '✅f(XVII) = 17',
807: 1:    '✅f(XVIII) = 18',
807: 1:    '✅f(XIX) = 19',
807: 1:    '✅f(XX) = 20',
807: 1:    '✅f(XXX) = 30',
807: 1:    '✅f(XXXV) = 35',
807: 1:    '✅f(XXXVI) = 36',
807: 1:    '✅f(XLVI) = 46',
807: 1:    '✅f(LVII) = 57',
807: 1:    '✅f(LXVII) = 67',
807: 1:    '✅f(LXXXIX) = 89',
807: 1:    '✅f(CXXIII) = 123',
807: 1:    '✅f(CCXXXIV) = 234',
807: 1:    '❌f(CCCXLV) = ??? != 345'
807: 1:  ],
807: 1:  'level': 28,
807: 1:  'nextQuestion': 'CCCXLV',
807: 1:  'questions': [
807: 1:    'I',
807: 1:    'II',
807: 1:    'III',
807: 1:    'IV',
807: 1:    'V',
807: 1:    'VI',
807: 1:    'VII',
807: 1:    'VIII',
807: 1:    'IX',
807: 1:    'X',
807: 1:    'XI',
807: 1:    'XII',
807: 1:    'XIII',
807: 1:    'XIV',
807: 1:    'XV',
807: 1:    'XVI',
807: 1:    'XVII',
807: 1:    'XVIII',
807: 1:    'XIX',
807: 1:    'XX',
807: 1:    'XXX',
807: 1:    'XXXV',
807: 1:    'XXXVI',
807: 1:    'XLVI',
807: 1:    'LVII',
807: 1:    'LXVII',
807: 1:    'LXXXIX',
807: 1:    'CXXIII',
807: 1:    'CCXXXIV',
807: 1:    'CCCXLV'
807: 1:  ]
807: 1:}
807: 1:Scores: 73740
807: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36', '46', '57', '67', '89', '123', '234', '345']')
807: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
808: 1:BoardData {
808: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
808: 1:  'expectedAnswer': '456',
808: 1:  'history': [
808: 1:    {
808: 1:      'answer': '1',
808: 1:      'question': 'I',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '2',
808: 1:      'question': 'II',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '3',
808: 1:      'question': 'III',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '4',
808: 1:      'question': 'IV',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '5',
808: 1:      'question': 'V',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '6',
808: 1:      'question': 'VI',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '7',
808: 1:      'question': 'VII',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '8',
808: 1:      'question': 'VIII',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '9',
808: 1:      'question': 'IX',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '10',
808: 1:      'question': 'X',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '11',
808: 1:      'question': 'XI',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '12',
808: 1:      'question': 'XII',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '13',
808: 1:      'question': 'XIII',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '14',
808: 1:      'question': 'XIV',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '15',
808: 1:      'question': 'XV',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '16',
808: 1:      'question': 'XVI',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '17',
808: 1:      'question': 'XVII',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '18',
808: 1:      'question': 'XVIII',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '19',
808: 1:      'question': 'XIX',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '20',
808: 1:      'question': 'XX',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '30',
808: 1:      'question': 'XXX',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '35',
808: 1:      'question': 'XXXV',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '36',
808: 1:      'question': 'XXXVI',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '46',
808: 1:      'question': 'XLVI',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '57',
808: 1:      'question': 'LVII',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '67',
808: 1:      'question': 'LXVII',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '89',
808: 1:      'question': 'LXXXIX',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '123',
808: 1:      'question': 'CXXIII',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '234',
808: 1:      'question': 'CCXXXIV',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '345',
808: 1:      'question': 'CCCXLV',
808: 1:      'valid': true
808: 1:    }
808: 1:  ],
808: 1:  'info': [
808: 1:    '✅f(I) = 1',
808: 1:    '✅f(II) = 2',
808: 1:    '✅f(III) = 3',
808: 1:    '✅f(IV) = 4',
808: 1:    '✅f(V) = 5',
808: 1:    '✅f(VI) = 6',
808: 1:    '✅f(VII) = 7',
808: 1:    '✅f(VIII) = 8',
808: 1:    '✅f(IX) = 9',
808: 1:    '✅f(X) = 10',
808: 1:    '✅f(XI) = 11',
808: 1:    '✅f(XII) = 12',
808: 1:    '✅f(XIII) = 13',
808: 1:    '✅f(XIV) = 14',
808: 1:    '✅f(XV) = 15',
808: 1:    '✅f(XVI) = 16',
808: 1:    '✅f(XVII) = 17',
808: 1:    '✅f(XVIII) = 18',
808: 1:    '✅f(XIX) = 19',
808: 1:    '✅f(XX) = 20',
808: 1:    '✅f(XXX) = 30',
808: 1:    '✅f(XXXV) = 35',
808: 1:    '✅f(XXXVI) = 36',
808: 1:    '✅f(XLVI) = 46',
808: 1:    '✅f(LVII) = 57',
808: 1:    '✅f(LXVII) = 67',
808: 1:    '✅f(LXXXIX) = 89',
808: 1:    '✅f(CXXIII) = 123',
808: 1:    '✅f(CCXXXIV) = 234',
808: 1:    '✅f(CCCXLV) = 345',
808: 1:    '❌f(CDLVI) = ??? != 456'
808: 1:  ],
808: 1:  'level': 28,
808: 1:  'nextQuestion': 'CDLVI',
808: 1:  'questions': [
808: 1:    'I',
808: 1:    'II',
808: 1:    'III',
808: 1:    'IV',
808: 1:    'V',
808: 1:    'VI',
808: 1:    'VII',
808: 1:    'VIII',
808: 1:    'IX',
808: 1:    'X',
808: 1:    'XI',
808: 1:    'XII',
808: 1:    'XIII',
808: 1:    'XIV',
808: 1:    'XV',
808: 1:    'XVI',
808: 1:    'XVII',
808: 1:    'XVIII',
808: 1:    'XIX',
808: 1:    'XX',
808: 1:    'XXX',
808: 1:    'XXXV',
808: 1:    'XXXVI',
808: 1:    'XLVI',
808: 1:    'LVII',
808: 1:    'LXVII',
808: 1:    'LXXXIX',
808: 1:    'CXXIII',
808: 1:    'CCXXXIV',
808: 1:    'CCCXLV',
808: 1:    'CDLVI'
808: 1:  ]
808: 1:}
808: 1:Scores: 73751
808: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36', '46', '57', '67', '89', '123', '234', '345', '456']')
808: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
809: 1:BoardData {
809: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
809: 1:  'expectedAnswer': '567',
809: 1:  'history': [
809: 1:    {
809: 1:      'answer': '1',
809: 1:      'question': 'I',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '2',
809: 1:      'question': 'II',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '3',
809: 1:      'question': 'III',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '4',
809: 1:      'question': 'IV',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '5',
809: 1:      'question': 'V',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '6',
809: 1:      'question': 'VI',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '7',
809: 1:      'question': 'VII',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '8',
809: 1:      'question': 'VIII',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '9',
809: 1:      'question': 'IX',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '10',
809: 1:      'question': 'X',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '11',
809: 1:      'question': 'XI',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '12',
809: 1:      'question': 'XII',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '13',
809: 1:      'question': 'XIII',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '14',
809: 1:      'question': 'XIV',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '15',
809: 1:      'question': 'XV',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '16',
809: 1:      'question': 'XVI',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '17',
809: 1:      'question': 'XVII',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '18',
809: 1:      'question': 'XVIII',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '19',
809: 1:      'question': 'XIX',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '20',
809: 1:      'question': 'XX',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '30',
809: 1:      'question': 'XXX',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '35',
809: 1:      'question': 'XXXV',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '36',
809: 1:      'question': 'XXXVI',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '46',
809: 1:      'question': 'XLVI',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '57',
809: 1:      'question': 'LVII',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '67',
809: 1:      'question': 'LXVII',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '89',
809: 1:      'question': 'LXXXIX',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '123',
809: 1:      'question': 'CXXIII',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '234',
809: 1:      'question': 'CCXXXIV',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '345',
809: 1:      'question': 'CCCXLV',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '456',
809: 1:      'question': 'CDLVI',
809: 1:      'valid': true
809: 1:    }
809: 1:  ],
809: 1:  'info': [
809: 1:    '✅f(I) = 1',
809: 1:    '✅f(II) = 2',
809: 1:    '✅f(III) = 3',
809: 1:    '✅f(IV) = 4',
809: 1:    '✅f(V) = 5',
809: 1:    '✅f(VI) = 6',
809: 1:    '✅f(VII) = 7',
809: 1:    '✅f(VIII) = 8',
809: 1:    '✅f(IX) = 9',
809: 1:    '✅f(X) = 10',
809: 1:    '✅f(XI) = 11',
809: 1:    '✅f(XII) = 12',
809: 1:    '✅f(XIII) = 13',
809: 1:    '✅f(XIV) = 14',
809: 1:    '✅f(XV) = 15',
809: 1:    '✅f(XVI) = 16',
809: 1:    '✅f(XVII) = 17',
809: 1:    '✅f(XVIII) = 18',
809: 1:    '✅f(XIX) = 19',
809: 1:    '✅f(XX) = 20',
809: 1:    '✅f(XXX) = 30',
809: 1:    '✅f(XXXV) = 35',
809: 1:    '✅f(XXXVI) = 36',
809: 1:    '✅f(XLVI) = 46',
809: 1:    '✅f(LVII) = 57',
809: 1:    '✅f(LXVII) = 67',
809: 1:    '✅f(LXXXIX) = 89',
809: 1:    '✅f(CXXIII) = 123',
809: 1:    '✅f(CCXXXIV) = 234',
809: 1:    '✅f(CCCXLV) = 345',
809: 1:    '✅f(CDLVI) = 456',
809: 1:    '❌f(DLXVII) = ??? != 567'
809: 1:  ],
809: 1:  'level': 28,
809: 1:  'nextQuestion': 'DLXVII',
809: 1:  'questions': [
809: 1:    'I',
809: 1:    'II',
809: 1:    'III',
809: 1:    'IV',
809: 1:    'V',
809: 1:    'VI',
809: 1:    'VII',
809: 1:    'VIII',
809: 1:    'IX',
809: 1:    'X',
809: 1:    'XI',
809: 1:    'XII',
809: 1:    'XIII',
809: 1:    'XIV',
809: 1:    'XV',
809: 1:    'XVI',
809: 1:    'XVII',
809: 1:    'XVIII',
809: 1:    'XIX',
809: 1:    'XX',
809: 1:    'XXX',
809: 1:    'XXXV',
809: 1:    'XXXVI',
809: 1:    'XLVI',
809: 1:    'LVII',
809: 1:    'LXVII',
809: 1:    'LXXXIX',
809: 1:    'CXXIII',
809: 1:    'CCXXXIV',
809: 1:    'CCCXLV',
809: 1:    'CDLVI',
809: 1:    'DLXVII'
809: 1:  ]
809: 1:}
809: 1:Scores: 73762
809: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36', '46', '57', '67', '89', '123', '234', '345', '456', '567']')
809: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
810: 1:BoardData {
810: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
810: 1:  'expectedAnswer': '678',
810: 1:  'history': [
810: 1:    {
810: 1:      'answer': '1',
810: 1:      'question': 'I',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '2',
810: 1:      'question': 'II',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '3',
810: 1:      'question': 'III',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '4',
810: 1:      'question': 'IV',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '5',
810: 1:      'question': 'V',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '6',
810: 1:      'question': 'VI',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '7',
810: 1:      'question': 'VII',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '8',
810: 1:      'question': 'VIII',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '9',
810: 1:      'question': 'IX',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '10',
810: 1:      'question': 'X',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '11',
810: 1:      'question': 'XI',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '12',
810: 1:      'question': 'XII',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '13',
810: 1:      'question': 'XIII',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '14',
810: 1:      'question': 'XIV',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '15',
810: 1:      'question': 'XV',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '16',
810: 1:      'question': 'XVI',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '17',
810: 1:      'question': 'XVII',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '18',
810: 1:      'question': 'XVIII',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '19',
810: 1:      'question': 'XIX',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '20',
810: 1:      'question': 'XX',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '30',
810: 1:      'question': 'XXX',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '35',
810: 1:      'question': 'XXXV',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '36',
810: 1:      'question': 'XXXVI',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '46',
810: 1:      'question': 'XLVI',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '57',
810: 1:      'question': 'LVII',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '67',
810: 1:      'question': 'LXVII',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '89',
810: 1:      'question': 'LXXXIX',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '123',
810: 1:      'question': 'CXXIII',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '234',
810: 1:      'question': 'CCXXXIV',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '345',
810: 1:      'question': 'CCCXLV',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '456',
810: 1:      'question': 'CDLVI',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '567',
810: 1:      'question': 'DLXVII',
810: 1:      'valid': true
810: 1:    }
810: 1:  ],
810: 1:  'info': [
810: 1:    '✅f(I) = 1',
810: 1:    '✅f(II) = 2',
810: 1:    '✅f(III) = 3',
810: 1:    '✅f(IV) = 4',
810: 1:    '✅f(V) = 5',
810: 1:    '✅f(VI) = 6',
810: 1:    '✅f(VII) = 7',
810: 1:    '✅f(VIII) = 8',
810: 1:    '✅f(IX) = 9',
810: 1:    '✅f(X) = 10',
810: 1:    '✅f(XI) = 11',
810: 1:    '✅f(XII) = 12',
810: 1:    '✅f(XIII) = 13',
810: 1:    '✅f(XIV) = 14',
810: 1:    '✅f(XV) = 15',
810: 1:    '✅f(XVI) = 16',
810: 1:    '✅f(XVII) = 17',
810: 1:    '✅f(XVIII) = 18',
810: 1:    '✅f(XIX) = 19',
810: 1:    '✅f(XX) = 20',
810: 1:    '✅f(XXX) = 30',
810: 1:    '✅f(XXXV) = 35',
810: 1:    '✅f(XXXVI) = 36',
810: 1:    '✅f(XLVI) = 46',
810: 1:    '✅f(LVII) = 57',
810: 1:    '✅f(LXVII) = 67',
810: 1:    '✅f(LXXXIX) = 89',
810: 1:    '✅f(CXXIII) = 123',
810: 1:    '✅f(CCXXXIV) = 234',
810: 1:    '✅f(CCCXLV) = 345',
810: 1:    '✅f(CDLVI) = 456',
810: 1:    '✅f(DLXVII) = 567',
810: 1:    '❌f(DCLXXVIII) = ??? != 678'
810: 1:  ],
810: 1:  'level': 28,
810: 1:  'nextQuestion': 'DCLXXVIII',
810: 1:  'questions': [
810: 1:    'I',
810: 1:    'II',
810: 1:    'III',
810: 1:    'IV',
810: 1:    'V',
810: 1:    'VI',
810: 1:    'VII',
810: 1:    'VIII',
810: 1:    'IX',
810: 1:    'X',
810: 1:    'XI',
810: 1:    'XII',
810: 1:    'XIII',
810: 1:    'XIV',
810: 1:    'XV',
810: 1:    'XVI',
810: 1:    'XVII',
810: 1:    'XVIII',
810: 1:    'XIX',
810: 1:    'XX',
810: 1:    'XXX',
810: 1:    'XXXV',
810: 1:    'XXXVI',
810: 1:    'XLVI',
810: 1:    'LVII',
810: 1:    'LXVII',
810: 1:    'LXXXIX',
810: 1:    'CXXIII',
810: 1:    'CCXXXIV',
810: 1:    'CCCXLV',
810: 1:    'CDLVI',
810: 1:    'DLXVII',
810: 1:    'DCLXXVIII'
810: 1:  ]
810: 1:}
810: 1:Scores: 73773
810: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36', '46', '57', '67', '89', '123', '234', '345', '456', '567', '678']')
810: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
811: 1:BoardData {
811: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
811: 1:  'expectedAnswer': '890',
811: 1:  'history': [
811: 1:    {
811: 1:      'answer': '1',
811: 1:      'question': 'I',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '2',
811: 1:      'question': 'II',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '3',
811: 1:      'question': 'III',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '4',
811: 1:      'question': 'IV',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '5',
811: 1:      'question': 'V',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '6',
811: 1:      'question': 'VI',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '7',
811: 1:      'question': 'VII',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '8',
811: 1:      'question': 'VIII',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '9',
811: 1:      'question': 'IX',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '10',
811: 1:      'question': 'X',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '11',
811: 1:      'question': 'XI',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '12',
811: 1:      'question': 'XII',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '13',
811: 1:      'question': 'XIII',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '14',
811: 1:      'question': 'XIV',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '15',
811: 1:      'question': 'XV',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '16',
811: 1:      'question': 'XVI',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '17',
811: 1:      'question': 'XVII',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '18',
811: 1:      'question': 'XVIII',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '19',
811: 1:      'question': 'XIX',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '20',
811: 1:      'question': 'XX',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '30',
811: 1:      'question': 'XXX',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '35',
811: 1:      'question': 'XXXV',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '36',
811: 1:      'question': 'XXXVI',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '46',
811: 1:      'question': 'XLVI',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '57',
811: 1:      'question': 'LVII',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '67',
811: 1:      'question': 'LXVII',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '89',
811: 1:      'question': 'LXXXIX',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '123',
811: 1:      'question': 'CXXIII',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '234',
811: 1:      'question': 'CCXXXIV',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '345',
811: 1:      'question': 'CCCXLV',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '456',
811: 1:      'question': 'CDLVI',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '567',
811: 1:      'question': 'DLXVII',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '678',
811: 1:      'question': 'DCLXXVIII',
811: 1:      'valid': true
811: 1:    }
811: 1:  ],
811: 1:  'info': [
811: 1:    '✅f(I) = 1',
811: 1:    '✅f(II) = 2',
811: 1:    '✅f(III) = 3',
811: 1:    '✅f(IV) = 4',
811: 1:    '✅f(V) = 5',
811: 1:    '✅f(VI) = 6',
811: 1:    '✅f(VII) = 7',
811: 1:    '✅f(VIII) = 8',
811: 1:    '✅f(IX) = 9',
811: 1:    '✅f(X) = 10',
811: 1:    '✅f(XI) = 11',
811: 1:    '✅f(XII) = 12',
811: 1:    '✅f(XIII) = 13',
811: 1:    '✅f(XIV) = 14',
811: 1:    '✅f(XV) = 15',
811: 1:    '✅f(XVI) = 16',
811: 1:    '✅f(XVII) = 17',
811: 1:    '✅f(XVIII) = 18',
811: 1:    '✅f(XIX) = 19',
811: 1:    '✅f(XX) = 20',
811: 1:    '✅f(XXX) = 30',
811: 1:    '✅f(XXXV) = 35',
811: 1:    '✅f(XXXVI) = 36',
811: 1:    '✅f(XLVI) = 46',
811: 1:    '✅f(LVII) = 57',
811: 1:    '✅f(LXVII) = 67',
811: 1:    '✅f(LXXXIX) = 89',
811: 1:    '✅f(CXXIII) = 123',
811: 1:    '✅f(CCXXXIV) = 234',
811: 1:    '✅f(CCCXLV) = 345',
811: 1:    '✅f(CDLVI) = 456',
811: 1:    '✅f(DLXVII) = 567',
811: 1:    '✅f(DCLXXVIII) = 678',
811: 1:    '❌f(DCCCXC) = ??? != 890'
811: 1:  ],
811: 1:  'level': 28,
811: 1:  'nextQuestion': 'DCCCXC',
811: 1:  'questions': [
811: 1:    'I',
811: 1:    'II',
811: 1:    'III',
811: 1:    'IV',
811: 1:    'V',
811: 1:    'VI',
811: 1:    'VII',
811: 1:    'VIII',
811: 1:    'IX',
811: 1:    'X',
811: 1:    'XI',
811: 1:    'XII',
811: 1:    'XIII',
811: 1:    'XIV',
811: 1:    'XV',
811: 1:    'XVI',
811: 1:    'XVII',
811: 1:    'XVIII',
811: 1:    'XIX',
811: 1:    'XX',
811: 1:    'XXX',
811: 1:    'XXXV',
811: 1:    'XXXVI',
811: 1:    'XLVI',
811: 1:    'LVII',
811: 1:    'LXVII',
811: 1:    'LXXXIX',
811: 1:    'CXXIII',
811: 1:    'CCXXXIV',
811: 1:    'CCCXLV',
811: 1:    'CDLVI',
811: 1:    'DLXVII',
811: 1:    'DCLXXVIII',
811: 1:    'DCCCXC'
811: 1:  ]
811: 1:}
811: 1:Scores: 73784
811: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36', '46', '57', '67', '89', '123', '234', '345', '456', '567', '678', '890']')
811: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
812: 1:BoardData {
812: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
812: 1:  'expectedAnswer': '1234',
812: 1:  'history': [
812: 1:    {
812: 1:      'answer': '1',
812: 1:      'question': 'I',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '2',
812: 1:      'question': 'II',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '3',
812: 1:      'question': 'III',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '4',
812: 1:      'question': 'IV',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '5',
812: 1:      'question': 'V',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '6',
812: 1:      'question': 'VI',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '7',
812: 1:      'question': 'VII',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '8',
812: 1:      'question': 'VIII',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '9',
812: 1:      'question': 'IX',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '10',
812: 1:      'question': 'X',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '11',
812: 1:      'question': 'XI',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '12',
812: 1:      'question': 'XII',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '13',
812: 1:      'question': 'XIII',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '14',
812: 1:      'question': 'XIV',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '15',
812: 1:      'question': 'XV',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '16',
812: 1:      'question': 'XVI',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '17',
812: 1:      'question': 'XVII',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '18',
812: 1:      'question': 'XVIII',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '19',
812: 1:      'question': 'XIX',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '20',
812: 1:      'question': 'XX',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '30',
812: 1:      'question': 'XXX',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '35',
812: 1:      'question': 'XXXV',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '36',
812: 1:      'question': 'XXXVI',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '46',
812: 1:      'question': 'XLVI',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '57',
812: 1:      'question': 'LVII',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '67',
812: 1:      'question': 'LXVII',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '89',
812: 1:      'question': 'LXXXIX',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '123',
812: 1:      'question': 'CXXIII',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '234',
812: 1:      'question': 'CCXXXIV',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '345',
812: 1:      'question': 'CCCXLV',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '456',
812: 1:      'question': 'CDLVI',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '567',
812: 1:      'question': 'DLXVII',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '678',
812: 1:      'question': 'DCLXXVIII',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '890',
812: 1:      'question': 'DCCCXC',
812: 1:      'valid': true
812: 1:    }
812: 1:  ],
812: 1:  'info': [
812: 1:    '✅f(I) = 1',
812: 1:    '✅f(II) = 2',
812: 1:    '✅f(III) = 3',
812: 1:    '✅f(IV) = 4',
812: 1:    '✅f(V) = 5',
812: 1:    '✅f(VI) = 6',
812: 1:    '✅f(VII) = 7',
812: 1:    '✅f(VIII) = 8',
812: 1:    '✅f(IX) = 9',
812: 1:    '✅f(X) = 10',
812: 1:    '✅f(XI) = 11',
812: 1:    '✅f(XII) = 12',
812: 1:    '✅f(XIII) = 13',
812: 1:    '✅f(XIV) = 14',
812: 1:    '✅f(XV) = 15',
812: 1:    '✅f(XVI) = 16',
812: 1:    '✅f(XVII) = 17',
812: 1:    '✅f(XVIII) = 18',
812: 1:    '✅f(XIX) = 19',
812: 1:    '✅f(XX) = 20',
812: 1:    '✅f(XXX) = 30',
812: 1:    '✅f(XXXV) = 35',
812: 1:    '✅f(XXXVI) = 36',
812: 1:    '✅f(XLVI) = 46',
812: 1:    '✅f(LVII) = 57',
812: 1:    '✅f(LXVII) = 67',
812: 1:    '✅f(LXXXIX) = 89',
812: 1:    '✅f(CXXIII) = 123',
812: 1:    '✅f(CCXXXIV) = 234',
812: 1:    '✅f(CCCXLV) = 345',
812: 1:    '✅f(CDLVI) = 456',
812: 1:    '✅f(DLXVII) = 567',
812: 1:    '✅f(DCLXXVIII) = 678',
812: 1:    '✅f(DCCCXC) = 890',
812: 1:    '❌f(MCCXXXIV) = ??? != 1234'
812: 1:  ],
812: 1:  'level': 28,
812: 1:  'nextQuestion': 'MCCXXXIV',
812: 1:  'questions': [
812: 1:    'I',
812: 1:    'II',
812: 1:    'III',
812: 1:    'IV',
812: 1:    'V',
812: 1:    'VI',
812: 1:    'VII',
812: 1:    'VIII',
812: 1:    'IX',
812: 1:    'X',
812: 1:    'XI',
812: 1:    'XII',
812: 1:    'XIII',
812: 1:    'XIV',
812: 1:    'XV',
812: 1:    'XVI',
812: 1:    'XVII',
812: 1:    'XVIII',
812: 1:    'XIX',
812: 1:    'XX',
812: 1:    'XXX',
812: 1:    'XXXV',
812: 1:    'XXXVI',
812: 1:    'XLVI',
812: 1:    'LVII',
812: 1:    'LXVII',
812: 1:    'LXXXIX',
812: 1:    'CXXIII',
812: 1:    'CCXXXIV',
812: 1:    'CCCXLV',
812: 1:    'CDLVI',
812: 1:    'DLXVII',
812: 1:    'DCLXXVIII',
812: 1:    'DCCCXC',
812: 1:    'MCCXXXIV'
812: 1:  ]
812: 1:}
812: 1:Scores: 73795
812: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36', '46', '57', '67', '89', '123', '234', '345', '456', '567', '678', '890', '1234']')
812: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
813: 1:BoardData {
813: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
813: 1:  'expectedAnswer': '2345',
813: 1:  'history': [
813: 1:    {
813: 1:      'answer': '1',
813: 1:      'question': 'I',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '2',
813: 1:      'question': 'II',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '3',
813: 1:      'question': 'III',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '4',
813: 1:      'question': 'IV',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '5',
813: 1:      'question': 'V',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '6',
813: 1:      'question': 'VI',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '7',
813: 1:      'question': 'VII',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '8',
813: 1:      'question': 'VIII',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '9',
813: 1:      'question': 'IX',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '10',
813: 1:      'question': 'X',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '11',
813: 1:      'question': 'XI',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '12',
813: 1:      'question': 'XII',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '13',
813: 1:      'question': 'XIII',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '14',
813: 1:      'question': 'XIV',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '15',
813: 1:      'question': 'XV',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '16',
813: 1:      'question': 'XVI',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '17',
813: 1:      'question': 'XVII',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '18',
813: 1:      'question': 'XVIII',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '19',
813: 1:      'question': 'XIX',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '20',
813: 1:      'question': 'XX',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '30',
813: 1:      'question': 'XXX',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '35',
813: 1:      'question': 'XXXV',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '36',
813: 1:      'question': 'XXXVI',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '46',
813: 1:      'question': 'XLVI',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '57',
813: 1:      'question': 'LVII',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '67',
813: 1:      'question': 'LXVII',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '89',
813: 1:      'question': 'LXXXIX',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '123',
813: 1:      'question': 'CXXIII',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '234',
813: 1:      'question': 'CCXXXIV',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '345',
813: 1:      'question': 'CCCXLV',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '456',
813: 1:      'question': 'CDLVI',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '567',
813: 1:      'question': 'DLXVII',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '678',
813: 1:      'question': 'DCLXXVIII',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '890',
813: 1:      'question': 'DCCCXC',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '1234',
813: 1:      'question': 'MCCXXXIV',
813: 1:      'valid': true
813: 1:    }
813: 1:  ],
813: 1:  'info': [
813: 1:    '✅f(I) = 1',
813: 1:    '✅f(II) = 2',
813: 1:    '✅f(III) = 3',
813: 1:    '✅f(IV) = 4',
813: 1:    '✅f(V) = 5',
813: 1:    '✅f(VI) = 6',
813: 1:    '✅f(VII) = 7',
813: 1:    '✅f(VIII) = 8',
813: 1:    '✅f(IX) = 9',
813: 1:    '✅f(X) = 10',
813: 1:    '✅f(XI) = 11',
813: 1:    '✅f(XII) = 12',
813: 1:    '✅f(XIII) = 13',
813: 1:    '✅f(XIV) = 14',
813: 1:    '✅f(XV) = 15',
813: 1:    '✅f(XVI) = 16',
813: 1:    '✅f(XVII) = 17',
813: 1:    '✅f(XVIII) = 18',
813: 1:    '✅f(XIX) = 19',
813: 1:    '✅f(XX) = 20',
813: 1:    '✅f(XXX) = 30',
813: 1:    '✅f(XXXV) = 35',
813: 1:    '✅f(XXXVI) = 36',
813: 1:    '✅f(XLVI) = 46',
813: 1:    '✅f(LVII) = 57',
813: 1:    '✅f(LXVII) = 67',
813: 1:    '✅f(LXXXIX) = 89',
813: 1:    '✅f(CXXIII) = 123',
813: 1:    '✅f(CCXXXIV) = 234',
813: 1:    '✅f(CCCXLV) = 345',
813: 1:    '✅f(CDLVI) = 456',
813: 1:    '✅f(DLXVII) = 567',
813: 1:    '✅f(DCLXXVIII) = 678',
813: 1:    '✅f(DCCCXC) = 890',
813: 1:    '✅f(MCCXXXIV) = 1234',
813: 1:    '❌f(MMCCCXLV) = ??? != 2345'
813: 1:  ],
813: 1:  'level': 28,
813: 1:  'nextQuestion': 'MMCCCXLV',
813: 1:  'questions': [
813: 1:    'I',
813: 1:    'II',
813: 1:    'III',
813: 1:    'IV',
813: 1:    'V',
813: 1:    'VI',
813: 1:    'VII',
813: 1:    'VIII',
813: 1:    'IX',
813: 1:    'X',
813: 1:    'XI',
813: 1:    'XII',
813: 1:    'XIII',
813: 1:    'XIV',
813: 1:    'XV',
813: 1:    'XVI',
813: 1:    'XVII',
813: 1:    'XVIII',
813: 1:    'XIX',
813: 1:    'XX',
813: 1:    'XXX',
813: 1:    'XXXV',
813: 1:    'XXXVI',
813: 1:    'XLVI',
813: 1:    'LVII',
813: 1:    'LXVII',
813: 1:    'LXXXIX',
813: 1:    'CXXIII',
813: 1:    'CCXXXIV',
813: 1:    'CCCXLV',
813: 1:    'CDLVI',
813: 1:    'DLXVII',
813: 1:    'DCLXXVIII',
813: 1:    'DCCCXC',
813: 1:    'MCCXXXIV',
813: 1:    'MMCCCXLV'
813: 1:  ]
813: 1:}
813: 1:Scores: 73806
813: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36', '46', '57', '67', '89', '123', '234', '345', '456', '567', '678', '890', '1234', '2345']')
813: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
814: 1:BoardData {
814: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
814: 1:  'expectedAnswer': '3456',
814: 1:  'history': [
814: 1:    {
814: 1:      'answer': '1',
814: 1:      'question': 'I',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '2',
814: 1:      'question': 'II',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '3',
814: 1:      'question': 'III',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '4',
814: 1:      'question': 'IV',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '5',
814: 1:      'question': 'V',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '6',
814: 1:      'question': 'VI',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '7',
814: 1:      'question': 'VII',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '8',
814: 1:      'question': 'VIII',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '9',
814: 1:      'question': 'IX',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '10',
814: 1:      'question': 'X',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '11',
814: 1:      'question': 'XI',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '12',
814: 1:      'question': 'XII',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '13',
814: 1:      'question': 'XIII',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '14',
814: 1:      'question': 'XIV',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '15',
814: 1:      'question': 'XV',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '16',
814: 1:      'question': 'XVI',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '17',
814: 1:      'question': 'XVII',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '18',
814: 1:      'question': 'XVIII',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '19',
814: 1:      'question': 'XIX',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '20',
814: 1:      'question': 'XX',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '30',
814: 1:      'question': 'XXX',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '35',
814: 1:      'question': 'XXXV',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '36',
814: 1:      'question': 'XXXVI',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '46',
814: 1:      'question': 'XLVI',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '57',
814: 1:      'question': 'LVII',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '67',
814: 1:      'question': 'LXVII',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '89',
814: 1:      'question': 'LXXXIX',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '123',
814: 1:      'question': 'CXXIII',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '234',
814: 1:      'question': 'CCXXXIV',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '345',
814: 1:      'question': 'CCCXLV',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '456',
814: 1:      'question': 'CDLVI',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '567',
814: 1:      'question': 'DLXVII',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '678',
814: 1:      'question': 'DCLXXVIII',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '890',
814: 1:      'question': 'DCCCXC',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '1234',
814: 1:      'question': 'MCCXXXIV',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '2345',
814: 1:      'question': 'MMCCCXLV',
814: 1:      'valid': true
814: 1:    }
814: 1:  ],
814: 1:  'info': [
814: 1:    '✅f(I) = 1',
814: 1:    '✅f(II) = 2',
814: 1:    '✅f(III) = 3',
814: 1:    '✅f(IV) = 4',
814: 1:    '✅f(V) = 5',
814: 1:    '✅f(VI) = 6',
814: 1:    '✅f(VII) = 7',
814: 1:    '✅f(VIII) = 8',
814: 1:    '✅f(IX) = 9',
814: 1:    '✅f(X) = 10',
814: 1:    '✅f(XI) = 11',
814: 1:    '✅f(XII) = 12',
814: 1:    '✅f(XIII) = 13',
814: 1:    '✅f(XIV) = 14',
814: 1:    '✅f(XV) = 15',
814: 1:    '✅f(XVI) = 16',
814: 1:    '✅f(XVII) = 17',
814: 1:    '✅f(XVIII) = 18',
814: 1:    '✅f(XIX) = 19',
814: 1:    '✅f(XX) = 20',
814: 1:    '✅f(XXX) = 30',
814: 1:    '✅f(XXXV) = 35',
814: 1:    '✅f(XXXVI) = 36',
814: 1:    '✅f(XLVI) = 46',
814: 1:    '✅f(LVII) = 57',
814: 1:    '✅f(LXVII) = 67',
814: 1:    '✅f(LXXXIX) = 89',
814: 1:    '✅f(CXXIII) = 123',
814: 1:    '✅f(CCXXXIV) = 234',
814: 1:    '✅f(CCCXLV) = 345',
814: 1:    '✅f(CDLVI) = 456',
814: 1:    '✅f(DLXVII) = 567',
814: 1:    '✅f(DCLXXVIII) = 678',
814: 1:    '✅f(DCCCXC) = 890',
814: 1:    '✅f(MCCXXXIV) = 1234',
814: 1:    '✅f(MMCCCXLV) = 2345',
814: 1:    '❌f(MMMCDLVI) = ??? != 3456'
814: 1:  ],
814: 1:  'level': 28,
814: 1:  'nextQuestion': 'MMMCDLVI',
814: 1:  'questions': [
814: 1:    'I',
814: 1:    'II',
814: 1:    'III',
814: 1:    'IV',
814: 1:    'V',
814: 1:    'VI',
814: 1:    'VII',
814: 1:    'VIII',
814: 1:    'IX',
814: 1:    'X',
814: 1:    'XI',
814: 1:    'XII',
814: 1:    'XIII',
814: 1:    'XIV',
814: 1:    'XV',
814: 1:    'XVI',
814: 1:    'XVII',
814: 1:    'XVIII',
814: 1:    'XIX',
814: 1:    'XX',
814: 1:    'XXX',
814: 1:    'XXXV',
814: 1:    'XXXVI',
814: 1:    'XLVI',
814: 1:    'LVII',
814: 1:    'LXVII',
814: 1:    'LXXXIX',
814: 1:    'CXXIII',
814: 1:    'CCXXXIV',
814: 1:    'CCCXLV',
814: 1:    'CDLVI',
814: 1:    'DLXVII',
814: 1:    'DCLXXVIII',
814: 1:    'DCCCXC',
814: 1:    'MCCXXXIV',
814: 1:    'MMCCCXLV',
814: 1:    'MMMCDLVI'
814: 1:  ]
814: 1:}
814: 1:Scores: 73817
814: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36', '46', '57', '67', '89', '123', '234', '345', '456', '567', '678', '890', '1234', '2345', '3456']')
814: 1:Fire Event: PassTest{complexity=41, testCount=37}
814: 1:Fire Event: NextAlgorithm{complexity=41, time=0}
------------------------------------------
815: 1:BoardData {
815: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
815: 1:  'history': [
815: 1:    {
815: 1:      'answer': '1',
815: 1:      'question': 'I',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '2',
815: 1:      'question': 'II',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '3',
815: 1:      'question': 'III',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '4',
815: 1:      'question': 'IV',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '5',
815: 1:      'question': 'V',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '6',
815: 1:      'question': 'VI',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '7',
815: 1:      'question': 'VII',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '8',
815: 1:      'question': 'VIII',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '9',
815: 1:      'question': 'IX',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '10',
815: 1:      'question': 'X',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '11',
815: 1:      'question': 'XI',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '12',
815: 1:      'question': 'XII',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '13',
815: 1:      'question': 'XIII',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '14',
815: 1:      'question': 'XIV',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '15',
815: 1:      'question': 'XV',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '16',
815: 1:      'question': 'XVI',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '17',
815: 1:      'question': 'XVII',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '18',
815: 1:      'question': 'XVIII',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '19',
815: 1:      'question': 'XIX',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '20',
815: 1:      'question': 'XX',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '30',
815: 1:      'question': 'XXX',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '35',
815: 1:      'question': 'XXXV',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '36',
815: 1:      'question': 'XXXVI',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '46',
815: 1:      'question': 'XLVI',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '57',
815: 1:      'question': 'LVII',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '67',
815: 1:      'question': 'LXVII',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '89',
815: 1:      'question': 'LXXXIX',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '123',
815: 1:      'question': 'CXXIII',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '234',
815: 1:      'question': 'CCXXXIV',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '345',
815: 1:      'question': 'CCCXLV',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '456',
815: 1:      'question': 'CDLVI',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '567',
815: 1:      'question': 'DLXVII',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '678',
815: 1:      'question': 'DCLXXVIII',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '890',
815: 1:      'question': 'DCCCXC',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '1234',
815: 1:      'question': 'MCCXXXIV',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '2345',
815: 1:      'question': 'MMCCCXLV',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '3456',
815: 1:      'question': 'MMMCDLVI',
815: 1:      'valid': true
815: 1:    }
815: 1:  ],
815: 1:  'info': [
815: 1:    '✅f(I) = 1',
815: 1:    '✅f(II) = 2',
815: 1:    '✅f(III) = 3',
815: 1:    '✅f(IV) = 4',
815: 1:    '✅f(V) = 5',
815: 1:    '✅f(VI) = 6',
815: 1:    '✅f(VII) = 7',
815: 1:    '✅f(VIII) = 8',
815: 1:    '✅f(IX) = 9',
815: 1:    '✅f(X) = 10',
815: 1:    '✅f(XI) = 11',
815: 1:    '✅f(XII) = 12',
815: 1:    '✅f(XIII) = 13',
815: 1:    '✅f(XIV) = 14',
815: 1:    '✅f(XV) = 15',
815: 1:    '✅f(XVI) = 16',
815: 1:    '✅f(XVII) = 17',
815: 1:    '✅f(XVIII) = 18',
815: 1:    '✅f(XIX) = 19',
815: 1:    '✅f(XX) = 20',
815: 1:    '✅f(XXX) = 30',
815: 1:    '✅f(XXXV) = 35',
815: 1:    '✅f(XXXVI) = 36',
815: 1:    '✅f(XLVI) = 46',
815: 1:    '✅f(LVII) = 57',
815: 1:    '✅f(LXVII) = 67',
815: 1:    '✅f(LXXXIX) = 89',
815: 1:    '✅f(CXXIII) = 123',
815: 1:    '✅f(CCXXXIV) = 234',
815: 1:    '✅f(CCCXLV) = 345',
815: 1:    '✅f(CDLVI) = 456',
815: 1:    '✅f(DLXVII) = 567',
815: 1:    '✅f(DCLXXVIII) = 678',
815: 1:    '✅f(DCCCXC) = 890',
815: 1:    '✅f(MCCXXXIV) = 1234',
815: 1:    '✅f(MMCCCXLV) = 2345',
815: 1:    '✅f(MMMCDLVI) = 3456'
815: 1:  ],
815: 1:  'level': 28,
815: 1:  'questions': []
815: 1:}
815: 1:Scores: 79362
815: 1:Answer: message('StartNextLevel')
815: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
816: 1:BoardData {
816: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
816: 1:  'expectedAnswer': '1',
816: 1:  'history': [],
816: 1:  'info': ['❌f(1) = ??? != 1'],
816: 1:  'level': 29,
816: 1:  'nextQuestion': '1',
816: 1:  'questions': ['1']
816: 1:}
816: 1:Scores: 79362
816: 1:Answer: message('['1']')
816: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
817: 1:BoardData {
817: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
817: 1:  'expectedAnswer': '2',
817: 1:  'history': [{
817: 1:    'answer': '1',
817: 1:    'question': '1',
817: 1:    'valid': true
817: 1:  }],
817: 1:  'info': [
817: 1:    '✅f(1) = 1',
817: 1:    '❌f(2) = ??? != 2'
817: 1:  ],
817: 1:  'level': 29,
817: 1:  'nextQuestion': '2',
817: 1:  'questions': [
817: 1:    '1',
817: 1:    '2'
817: 1:  ]
817: 1:}
817: 1:Scores: 79378
817: 1:Answer: message('['1', '2']')
817: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
818: 1:BoardData {
818: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
818: 1:  'expectedAnswer': '6',
818: 1:  'history': [
818: 1:    {
818: 1:      'answer': '1',
818: 1:      'question': '1',
818: 1:      'valid': true
818: 1:    },
818: 1:    {
818: 1:      'answer': '2',
818: 1:      'question': '2',
818: 1:      'valid': true
818: 1:    }
818: 1:  ],
818: 1:  'info': [
818: 1:    '✅f(1) = 1',
818: 1:    '✅f(2) = 2',
818: 1:    '❌f(3) = ??? != 6'
818: 1:  ],
818: 1:  'level': 29,
818: 1:  'nextQuestion': '3',
818: 1:  'questions': [
818: 1:    '1',
818: 1:    '2',
818: 1:    '3'
818: 1:  ]
818: 1:}
818: 1:Scores: 79394
818: 1:Answer: message('['1', '2', '6']')
818: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
819: 1:BoardData {
819: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
819: 1:  'expectedAnswer': '24',
819: 1:  'history': [
819: 1:    {
819: 1:      'answer': '1',
819: 1:      'question': '1',
819: 1:      'valid': true
819: 1:    },
819: 1:    {
819: 1:      'answer': '2',
819: 1:      'question': '2',
819: 1:      'valid': true
819: 1:    },
819: 1:    {
819: 1:      'answer': '6',
819: 1:      'question': '3',
819: 1:      'valid': true
819: 1:    }
819: 1:  ],
819: 1:  'info': [
819: 1:    '✅f(1) = 1',
819: 1:    '✅f(2) = 2',
819: 1:    '✅f(3) = 6',
819: 1:    '❌f(4) = ??? != 24'
819: 1:  ],
819: 1:  'level': 29,
819: 1:  'nextQuestion': '4',
819: 1:  'questions': [
819: 1:    '1',
819: 1:    '2',
819: 1:    '3',
819: 1:    '4'
819: 1:  ]
819: 1:}
819: 1:Scores: 79410
819: 1:Answer: message('['1', '2', '6', '24']')
819: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
820: 1:BoardData {
820: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
820: 1:  'expectedAnswer': '120',
820: 1:  'history': [
820: 1:    {
820: 1:      'answer': '1',
820: 1:      'question': '1',
820: 1:      'valid': true
820: 1:    },
820: 1:    {
820: 1:      'answer': '2',
820: 1:      'question': '2',
820: 1:      'valid': true
820: 1:    },
820: 1:    {
820: 1:      'answer': '6',
820: 1:      'question': '3',
820: 1:      'valid': true
820: 1:    },
820: 1:    {
820: 1:      'answer': '24',
820: 1:      'question': '4',
820: 1:      'valid': true
820: 1:    }
820: 1:  ],
820: 1:  'info': [
820: 1:    '✅f(1) = 1',
820: 1:    '✅f(2) = 2',
820: 1:    '✅f(3) = 6',
820: 1:    '✅f(4) = 24',
820: 1:    '❌f(5) = ??? != 120'
820: 1:  ],
820: 1:  'level': 29,
820: 1:  'nextQuestion': '5',
820: 1:  'questions': [
820: 1:    '1',
820: 1:    '2',
820: 1:    '3',
820: 1:    '4',
820: 1:    '5'
820: 1:  ]
820: 1:}
820: 1:Scores: 79426
820: 1:Answer: message('['1', '2', '6', '24', '120']')
820: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
821: 1:BoardData {
821: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
821: 1:  'expectedAnswer': '720',
821: 1:  'history': [
821: 1:    {
821: 1:      'answer': '1',
821: 1:      'question': '1',
821: 1:      'valid': true
821: 1:    },
821: 1:    {
821: 1:      'answer': '2',
821: 1:      'question': '2',
821: 1:      'valid': true
821: 1:    },
821: 1:    {
821: 1:      'answer': '6',
821: 1:      'question': '3',
821: 1:      'valid': true
821: 1:    },
821: 1:    {
821: 1:      'answer': '24',
821: 1:      'question': '4',
821: 1:      'valid': true
821: 1:    },
821: 1:    {
821: 1:      'answer': '120',
821: 1:      'question': '5',
821: 1:      'valid': true
821: 1:    }
821: 1:  ],
821: 1:  'info': [
821: 1:    '✅f(1) = 1',
821: 1:    '✅f(2) = 2',
821: 1:    '✅f(3) = 6',
821: 1:    '✅f(4) = 24',
821: 1:    '✅f(5) = 120',
821: 1:    '❌f(6) = ??? != 720'
821: 1:  ],
821: 1:  'level': 29,
821: 1:  'nextQuestion': '6',
821: 1:  'questions': [
821: 1:    '1',
821: 1:    '2',
821: 1:    '3',
821: 1:    '4',
821: 1:    '5',
821: 1:    '6'
821: 1:  ]
821: 1:}
821: 1:Scores: 79442
821: 1:Answer: message('['1', '2', '6', '24', '120', '720']')
821: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
822: 1:BoardData {
822: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
822: 1:  'expectedAnswer': '5040',
822: 1:  'history': [
822: 1:    {
822: 1:      'answer': '1',
822: 1:      'question': '1',
822: 1:      'valid': true
822: 1:    },
822: 1:    {
822: 1:      'answer': '2',
822: 1:      'question': '2',
822: 1:      'valid': true
822: 1:    },
822: 1:    {
822: 1:      'answer': '6',
822: 1:      'question': '3',
822: 1:      'valid': true
822: 1:    },
822: 1:    {
822: 1:      'answer': '24',
822: 1:      'question': '4',
822: 1:      'valid': true
822: 1:    },
822: 1:    {
822: 1:      'answer': '120',
822: 1:      'question': '5',
822: 1:      'valid': true
822: 1:    },
822: 1:    {
822: 1:      'answer': '720',
822: 1:      'question': '6',
822: 1:      'valid': true
822: 1:    }
822: 1:  ],
822: 1:  'info': [
822: 1:    '✅f(1) = 1',
822: 1:    '✅f(2) = 2',
822: 1:    '✅f(3) = 6',
822: 1:    '✅f(4) = 24',
822: 1:    '✅f(5) = 120',
822: 1:    '✅f(6) = 720',
822: 1:    '❌f(7) = ??? != 5040'
822: 1:  ],
822: 1:  'level': 29,
822: 1:  'nextQuestion': '7',
822: 1:  'questions': [
822: 1:    '1',
822: 1:    '2',
822: 1:    '3',
822: 1:    '4',
822: 1:    '5',
822: 1:    '6',
822: 1:    '7'
822: 1:  ]
822: 1:}
822: 1:Scores: 79458
822: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040']')
822: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
823: 1:BoardData {
823: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
823: 1:  'expectedAnswer': '40320',
823: 1:  'history': [
823: 1:    {
823: 1:      'answer': '1',
823: 1:      'question': '1',
823: 1:      'valid': true
823: 1:    },
823: 1:    {
823: 1:      'answer': '2',
823: 1:      'question': '2',
823: 1:      'valid': true
823: 1:    },
823: 1:    {
823: 1:      'answer': '6',
823: 1:      'question': '3',
823: 1:      'valid': true
823: 1:    },
823: 1:    {
823: 1:      'answer': '24',
823: 1:      'question': '4',
823: 1:      'valid': true
823: 1:    },
823: 1:    {
823: 1:      'answer': '120',
823: 1:      'question': '5',
823: 1:      'valid': true
823: 1:    },
823: 1:    {
823: 1:      'answer': '720',
823: 1:      'question': '6',
823: 1:      'valid': true
823: 1:    },
823: 1:    {
823: 1:      'answer': '5040',
823: 1:      'question': '7',
823: 1:      'valid': true
823: 1:    }
823: 1:  ],
823: 1:  'info': [
823: 1:    '✅f(1) = 1',
823: 1:    '✅f(2) = 2',
823: 1:    '✅f(3) = 6',
823: 1:    '✅f(4) = 24',
823: 1:    '✅f(5) = 120',
823: 1:    '✅f(6) = 720',
823: 1:    '✅f(7) = 5040',
823: 1:    '❌f(8) = ??? != 40320'
823: 1:  ],
823: 1:  'level': 29,
823: 1:  'nextQuestion': '8',
823: 1:  'questions': [
823: 1:    '1',
823: 1:    '2',
823: 1:    '3',
823: 1:    '4',
823: 1:    '5',
823: 1:    '6',
823: 1:    '7',
823: 1:    '8'
823: 1:  ]
823: 1:}
823: 1:Scores: 79474
823: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320']')
823: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
824: 1:BoardData {
824: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
824: 1:  'expectedAnswer': '362880',
824: 1:  'history': [
824: 1:    {
824: 1:      'answer': '1',
824: 1:      'question': '1',
824: 1:      'valid': true
824: 1:    },
824: 1:    {
824: 1:      'answer': '2',
824: 1:      'question': '2',
824: 1:      'valid': true
824: 1:    },
824: 1:    {
824: 1:      'answer': '6',
824: 1:      'question': '3',
824: 1:      'valid': true
824: 1:    },
824: 1:    {
824: 1:      'answer': '24',
824: 1:      'question': '4',
824: 1:      'valid': true
824: 1:    },
824: 1:    {
824: 1:      'answer': '120',
824: 1:      'question': '5',
824: 1:      'valid': true
824: 1:    },
824: 1:    {
824: 1:      'answer': '720',
824: 1:      'question': '6',
824: 1:      'valid': true
824: 1:    },
824: 1:    {
824: 1:      'answer': '5040',
824: 1:      'question': '7',
824: 1:      'valid': true
824: 1:    },
824: 1:    {
824: 1:      'answer': '40320',
824: 1:      'question': '8',
824: 1:      'valid': true
824: 1:    }
824: 1:  ],
824: 1:  'info': [
824: 1:    '✅f(1) = 1',
824: 1:    '✅f(2) = 2',
824: 1:    '✅f(3) = 6',
824: 1:    '✅f(4) = 24',
824: 1:    '✅f(5) = 120',
824: 1:    '✅f(6) = 720',
824: 1:    '✅f(7) = 5040',
824: 1:    '✅f(8) = 40320',
824: 1:    '❌f(9) = ??? != 362880'
824: 1:  ],
824: 1:  'level': 29,
824: 1:  'nextQuestion': '9',
824: 1:  'questions': [
824: 1:    '1',
824: 1:    '2',
824: 1:    '3',
824: 1:    '4',
824: 1:    '5',
824: 1:    '6',
824: 1:    '7',
824: 1:    '8',
824: 1:    '9'
824: 1:  ]
824: 1:}
824: 1:Scores: 79490
824: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880']')
824: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
825: 1:BoardData {
825: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
825: 1:  'expectedAnswer': '3628800',
825: 1:  'history': [
825: 1:    {
825: 1:      'answer': '1',
825: 1:      'question': '1',
825: 1:      'valid': true
825: 1:    },
825: 1:    {
825: 1:      'answer': '2',
825: 1:      'question': '2',
825: 1:      'valid': true
825: 1:    },
825: 1:    {
825: 1:      'answer': '6',
825: 1:      'question': '3',
825: 1:      'valid': true
825: 1:    },
825: 1:    {
825: 1:      'answer': '24',
825: 1:      'question': '4',
825: 1:      'valid': true
825: 1:    },
825: 1:    {
825: 1:      'answer': '120',
825: 1:      'question': '5',
825: 1:      'valid': true
825: 1:    },
825: 1:    {
825: 1:      'answer': '720',
825: 1:      'question': '6',
825: 1:      'valid': true
825: 1:    },
825: 1:    {
825: 1:      'answer': '5040',
825: 1:      'question': '7',
825: 1:      'valid': true
825: 1:    },
825: 1:    {
825: 1:      'answer': '40320',
825: 1:      'question': '8',
825: 1:      'valid': true
825: 1:    },
825: 1:    {
825: 1:      'answer': '362880',
825: 1:      'question': '9',
825: 1:      'valid': true
825: 1:    }
825: 1:  ],
825: 1:  'info': [
825: 1:    '✅f(1) = 1',
825: 1:    '✅f(2) = 2',
825: 1:    '✅f(3) = 6',
825: 1:    '✅f(4) = 24',
825: 1:    '✅f(5) = 120',
825: 1:    '✅f(6) = 720',
825: 1:    '✅f(7) = 5040',
825: 1:    '✅f(8) = 40320',
825: 1:    '✅f(9) = 362880',
825: 1:    '❌f(10) = ??? != 3628800'
825: 1:  ],
825: 1:  'level': 29,
825: 1:  'nextQuestion': '10',
825: 1:  'questions': [
825: 1:    '1',
825: 1:    '2',
825: 1:    '3',
825: 1:    '4',
825: 1:    '5',
825: 1:    '6',
825: 1:    '7',
825: 1:    '8',
825: 1:    '9',
825: 1:    '10'
825: 1:  ]
825: 1:}
825: 1:Scores: 79506
825: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800']')
825: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
826: 1:BoardData {
826: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
826: 1:  'expectedAnswer': '39916800',
826: 1:  'history': [
826: 1:    {
826: 1:      'answer': '1',
826: 1:      'question': '1',
826: 1:      'valid': true
826: 1:    },
826: 1:    {
826: 1:      'answer': '2',
826: 1:      'question': '2',
826: 1:      'valid': true
826: 1:    },
826: 1:    {
826: 1:      'answer': '6',
826: 1:      'question': '3',
826: 1:      'valid': true
826: 1:    },
826: 1:    {
826: 1:      'answer': '24',
826: 1:      'question': '4',
826: 1:      'valid': true
826: 1:    },
826: 1:    {
826: 1:      'answer': '120',
826: 1:      'question': '5',
826: 1:      'valid': true
826: 1:    },
826: 1:    {
826: 1:      'answer': '720',
826: 1:      'question': '6',
826: 1:      'valid': true
826: 1:    },
826: 1:    {
826: 1:      'answer': '5040',
826: 1:      'question': '7',
826: 1:      'valid': true
826: 1:    },
826: 1:    {
826: 1:      'answer': '40320',
826: 1:      'question': '8',
826: 1:      'valid': true
826: 1:    },
826: 1:    {
826: 1:      'answer': '362880',
826: 1:      'question': '9',
826: 1:      'valid': true
826: 1:    },
826: 1:    {
826: 1:      'answer': '3628800',
826: 1:      'question': '10',
826: 1:      'valid': true
826: 1:    }
826: 1:  ],
826: 1:  'info': [
826: 1:    '✅f(1) = 1',
826: 1:    '✅f(2) = 2',
826: 1:    '✅f(3) = 6',
826: 1:    '✅f(4) = 24',
826: 1:    '✅f(5) = 120',
826: 1:    '✅f(6) = 720',
826: 1:    '✅f(7) = 5040',
826: 1:    '✅f(8) = 40320',
826: 1:    '✅f(9) = 362880',
826: 1:    '✅f(10) = 3628800',
826: 1:    '❌f(11) = ??? != 39916800'
826: 1:  ],
826: 1:  'level': 29,
826: 1:  'nextQuestion': '11',
826: 1:  'questions': [
826: 1:    '1',
826: 1:    '2',
826: 1:    '3',
826: 1:    '4',
826: 1:    '5',
826: 1:    '6',
826: 1:    '7',
826: 1:    '8',
826: 1:    '9',
826: 1:    '10',
826: 1:    '11'
826: 1:  ]
826: 1:}
826: 1:Scores: 79522
826: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800']')
826: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
827: 1:BoardData {
827: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
827: 1:  'expectedAnswer': '479001600',
827: 1:  'history': [
827: 1:    {
827: 1:      'answer': '1',
827: 1:      'question': '1',
827: 1:      'valid': true
827: 1:    },
827: 1:    {
827: 1:      'answer': '2',
827: 1:      'question': '2',
827: 1:      'valid': true
827: 1:    },
827: 1:    {
827: 1:      'answer': '6',
827: 1:      'question': '3',
827: 1:      'valid': true
827: 1:    },
827: 1:    {
827: 1:      'answer': '24',
827: 1:      'question': '4',
827: 1:      'valid': true
827: 1:    },
827: 1:    {
827: 1:      'answer': '120',
827: 1:      'question': '5',
827: 1:      'valid': true
827: 1:    },
827: 1:    {
827: 1:      'answer': '720',
827: 1:      'question': '6',
827: 1:      'valid': true
827: 1:    },
827: 1:    {
827: 1:      'answer': '5040',
827: 1:      'question': '7',
827: 1:      'valid': true
827: 1:    },
827: 1:    {
827: 1:      'answer': '40320',
827: 1:      'question': '8',
827: 1:      'valid': true
827: 1:    },
827: 1:    {
827: 1:      'answer': '362880',
827: 1:      'question': '9',
827: 1:      'valid': true
827: 1:    },
827: 1:    {
827: 1:      'answer': '3628800',
827: 1:      'question': '10',
827: 1:      'valid': true
827: 1:    },
827: 1:    {
827: 1:      'answer': '39916800',
827: 1:      'question': '11',
827: 1:      'valid': true
827: 1:    }
827: 1:  ],
827: 1:  'info': [
827: 1:    '✅f(1) = 1',
827: 1:    '✅f(2) = 2',
827: 1:    '✅f(3) = 6',
827: 1:    '✅f(4) = 24',
827: 1:    '✅f(5) = 120',
827: 1:    '✅f(6) = 720',
827: 1:    '✅f(7) = 5040',
827: 1:    '✅f(8) = 40320',
827: 1:    '✅f(9) = 362880',
827: 1:    '✅f(10) = 3628800',
827: 1:    '✅f(11) = 39916800',
827: 1:    '❌f(12) = ??? != 479001600'
827: 1:  ],
827: 1:  'level': 29,
827: 1:  'nextQuestion': '12',
827: 1:  'questions': [
827: 1:    '1',
827: 1:    '2',
827: 1:    '3',
827: 1:    '4',
827: 1:    '5',
827: 1:    '6',
827: 1:    '7',
827: 1:    '8',
827: 1:    '9',
827: 1:    '10',
827: 1:    '11',
827: 1:    '12'
827: 1:  ]
827: 1:}
827: 1:Scores: 79538
827: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600']')
827: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
828: 1:BoardData {
828: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
828: 1:  'expectedAnswer': '6227020800',
828: 1:  'history': [
828: 1:    {
828: 1:      'answer': '1',
828: 1:      'question': '1',
828: 1:      'valid': true
828: 1:    },
828: 1:    {
828: 1:      'answer': '2',
828: 1:      'question': '2',
828: 1:      'valid': true
828: 1:    },
828: 1:    {
828: 1:      'answer': '6',
828: 1:      'question': '3',
828: 1:      'valid': true
828: 1:    },
828: 1:    {
828: 1:      'answer': '24',
828: 1:      'question': '4',
828: 1:      'valid': true
828: 1:    },
828: 1:    {
828: 1:      'answer': '120',
828: 1:      'question': '5',
828: 1:      'valid': true
828: 1:    },
828: 1:    {
828: 1:      'answer': '720',
828: 1:      'question': '6',
828: 1:      'valid': true
828: 1:    },
828: 1:    {
828: 1:      'answer': '5040',
828: 1:      'question': '7',
828: 1:      'valid': true
828: 1:    },
828: 1:    {
828: 1:      'answer': '40320',
828: 1:      'question': '8',
828: 1:      'valid': true
828: 1:    },
828: 1:    {
828: 1:      'answer': '362880',
828: 1:      'question': '9',
828: 1:      'valid': true
828: 1:    },
828: 1:    {
828: 1:      'answer': '3628800',
828: 1:      'question': '10',
828: 1:      'valid': true
828: 1:    },
828: 1:    {
828: 1:      'answer': '39916800',
828: 1:      'question': '11',
828: 1:      'valid': true
828: 1:    },
828: 1:    {
828: 1:      'answer': '479001600',
828: 1:      'question': '12',
828: 1:      'valid': true
828: 1:    }
828: 1:  ],
828: 1:  'info': [
828: 1:    '✅f(1) = 1',
828: 1:    '✅f(2) = 2',
828: 1:    '✅f(3) = 6',
828: 1:    '✅f(4) = 24',
828: 1:    '✅f(5) = 120',
828: 1:    '✅f(6) = 720',
828: 1:    '✅f(7) = 5040',
828: 1:    '✅f(8) = 40320',
828: 1:    '✅f(9) = 362880',
828: 1:    '✅f(10) = 3628800',
828: 1:    '✅f(11) = 39916800',
828: 1:    '✅f(12) = 479001600',
828: 1:    '❌f(13) = ??? != 6227020800'
828: 1:  ],
828: 1:  'level': 29,
828: 1:  'nextQuestion': '13',
828: 1:  'questions': [
828: 1:    '1',
828: 1:    '2',
828: 1:    '3',
828: 1:    '4',
828: 1:    '5',
828: 1:    '6',
828: 1:    '7',
828: 1:    '8',
828: 1:    '9',
828: 1:    '10',
828: 1:    '11',
828: 1:    '12',
828: 1:    '13'
828: 1:  ]
828: 1:}
828: 1:Scores: 79554
828: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800']')
828: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
829: 1:BoardData {
829: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
829: 1:  'expectedAnswer': '87178291200',
829: 1:  'history': [
829: 1:    {
829: 1:      'answer': '1',
829: 1:      'question': '1',
829: 1:      'valid': true
829: 1:    },
829: 1:    {
829: 1:      'answer': '2',
829: 1:      'question': '2',
829: 1:      'valid': true
829: 1:    },
829: 1:    {
829: 1:      'answer': '6',
829: 1:      'question': '3',
829: 1:      'valid': true
829: 1:    },
829: 1:    {
829: 1:      'answer': '24',
829: 1:      'question': '4',
829: 1:      'valid': true
829: 1:    },
829: 1:    {
829: 1:      'answer': '120',
829: 1:      'question': '5',
829: 1:      'valid': true
829: 1:    },
829: 1:    {
829: 1:      'answer': '720',
829: 1:      'question': '6',
829: 1:      'valid': true
829: 1:    },
829: 1:    {
829: 1:      'answer': '5040',
829: 1:      'question': '7',
829: 1:      'valid': true
829: 1:    },
829: 1:    {
829: 1:      'answer': '40320',
829: 1:      'question': '8',
829: 1:      'valid': true
829: 1:    },
829: 1:    {
829: 1:      'answer': '362880',
829: 1:      'question': '9',
829: 1:      'valid': true
829: 1:    },
829: 1:    {
829: 1:      'answer': '3628800',
829: 1:      'question': '10',
829: 1:      'valid': true
829: 1:    },
829: 1:    {
829: 1:      'answer': '39916800',
829: 1:      'question': '11',
829: 1:      'valid': true
829: 1:    },
829: 1:    {
829: 1:      'answer': '479001600',
829: 1:      'question': '12',
829: 1:      'valid': true
829: 1:    },
829: 1:    {
829: 1:      'answer': '6227020800',
829: 1:      'question': '13',
829: 1:      'valid': true
829: 1:    }
829: 1:  ],
829: 1:  'info': [
829: 1:    '✅f(1) = 1',
829: 1:    '✅f(2) = 2',
829: 1:    '✅f(3) = 6',
829: 1:    '✅f(4) = 24',
829: 1:    '✅f(5) = 120',
829: 1:    '✅f(6) = 720',
829: 1:    '✅f(7) = 5040',
829: 1:    '✅f(8) = 40320',
829: 1:    '✅f(9) = 362880',
829: 1:    '✅f(10) = 3628800',
829: 1:    '✅f(11) = 39916800',
829: 1:    '✅f(12) = 479001600',
829: 1:    '✅f(13) = 6227020800',
829: 1:    '❌f(14) = ??? != 87178291200'
829: 1:  ],
829: 1:  'level': 29,
829: 1:  'nextQuestion': '14',
829: 1:  'questions': [
829: 1:    '1',
829: 1:    '2',
829: 1:    '3',
829: 1:    '4',
829: 1:    '5',
829: 1:    '6',
829: 1:    '7',
829: 1:    '8',
829: 1:    '9',
829: 1:    '10',
829: 1:    '11',
829: 1:    '12',
829: 1:    '13',
829: 1:    '14'
829: 1:  ]
829: 1:}
829: 1:Scores: 79570
829: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200']')
829: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
830: 1:BoardData {
830: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
830: 1:  'expectedAnswer': '1307674368000',
830: 1:  'history': [
830: 1:    {
830: 1:      'answer': '1',
830: 1:      'question': '1',
830: 1:      'valid': true
830: 1:    },
830: 1:    {
830: 1:      'answer': '2',
830: 1:      'question': '2',
830: 1:      'valid': true
830: 1:    },
830: 1:    {
830: 1:      'answer': '6',
830: 1:      'question': '3',
830: 1:      'valid': true
830: 1:    },
830: 1:    {
830: 1:      'answer': '24',
830: 1:      'question': '4',
830: 1:      'valid': true
830: 1:    },
830: 1:    {
830: 1:      'answer': '120',
830: 1:      'question': '5',
830: 1:      'valid': true
830: 1:    },
830: 1:    {
830: 1:      'answer': '720',
830: 1:      'question': '6',
830: 1:      'valid': true
830: 1:    },
830: 1:    {
830: 1:      'answer': '5040',
830: 1:      'question': '7',
830: 1:      'valid': true
830: 1:    },
830: 1:    {
830: 1:      'answer': '40320',
830: 1:      'question': '8',
830: 1:      'valid': true
830: 1:    },
830: 1:    {
830: 1:      'answer': '362880',
830: 1:      'question': '9',
830: 1:      'valid': true
830: 1:    },
830: 1:    {
830: 1:      'answer': '3628800',
830: 1:      'question': '10',
830: 1:      'valid': true
830: 1:    },
830: 1:    {
830: 1:      'answer': '39916800',
830: 1:      'question': '11',
830: 1:      'valid': true
830: 1:    },
830: 1:    {
830: 1:      'answer': '479001600',
830: 1:      'question': '12',
830: 1:      'valid': true
830: 1:    },
830: 1:    {
830: 1:      'answer': '6227020800',
830: 1:      'question': '13',
830: 1:      'valid': true
830: 1:    },
830: 1:    {
830: 1:      'answer': '87178291200',
830: 1:      'question': '14',
830: 1:      'valid': true
830: 1:    }
830: 1:  ],
830: 1:  'info': [
830: 1:    '✅f(1) = 1',
830: 1:    '✅f(2) = 2',
830: 1:    '✅f(3) = 6',
830: 1:    '✅f(4) = 24',
830: 1:    '✅f(5) = 120',
830: 1:    '✅f(6) = 720',
830: 1:    '✅f(7) = 5040',
830: 1:    '✅f(8) = 40320',
830: 1:    '✅f(9) = 362880',
830: 1:    '✅f(10) = 3628800',
830: 1:    '✅f(11) = 39916800',
830: 1:    '✅f(12) = 479001600',
830: 1:    '✅f(13) = 6227020800',
830: 1:    '✅f(14) = 87178291200',
830: 1:    '❌f(15) = ??? != 1307674368000'
830: 1:  ],
830: 1:  'level': 29,
830: 1:  'nextQuestion': '15',
830: 1:  'questions': [
830: 1:    '1',
830: 1:    '2',
830: 1:    '3',
830: 1:    '4',
830: 1:    '5',
830: 1:    '6',
830: 1:    '7',
830: 1:    '8',
830: 1:    '9',
830: 1:    '10',
830: 1:    '11',
830: 1:    '12',
830: 1:    '13',
830: 1:    '14',
830: 1:    '15'
830: 1:  ]
830: 1:}
830: 1:Scores: 79586
830: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000']')
830: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
831: 1:BoardData {
831: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
831: 1:  'expectedAnswer': '20922789888000',
831: 1:  'history': [
831: 1:    {
831: 1:      'answer': '1',
831: 1:      'question': '1',
831: 1:      'valid': true
831: 1:    },
831: 1:    {
831: 1:      'answer': '2',
831: 1:      'question': '2',
831: 1:      'valid': true
831: 1:    },
831: 1:    {
831: 1:      'answer': '6',
831: 1:      'question': '3',
831: 1:      'valid': true
831: 1:    },
831: 1:    {
831: 1:      'answer': '24',
831: 1:      'question': '4',
831: 1:      'valid': true
831: 1:    },
831: 1:    {
831: 1:      'answer': '120',
831: 1:      'question': '5',
831: 1:      'valid': true
831: 1:    },
831: 1:    {
831: 1:      'answer': '720',
831: 1:      'question': '6',
831: 1:      'valid': true
831: 1:    },
831: 1:    {
831: 1:      'answer': '5040',
831: 1:      'question': '7',
831: 1:      'valid': true
831: 1:    },
831: 1:    {
831: 1:      'answer': '40320',
831: 1:      'question': '8',
831: 1:      'valid': true
831: 1:    },
831: 1:    {
831: 1:      'answer': '362880',
831: 1:      'question': '9',
831: 1:      'valid': true
831: 1:    },
831: 1:    {
831: 1:      'answer': '3628800',
831: 1:      'question': '10',
831: 1:      'valid': true
831: 1:    },
831: 1:    {
831: 1:      'answer': '39916800',
831: 1:      'question': '11',
831: 1:      'valid': true
831: 1:    },
831: 1:    {
831: 1:      'answer': '479001600',
831: 1:      'question': '12',
831: 1:      'valid': true
831: 1:    },
831: 1:    {
831: 1:      'answer': '6227020800',
831: 1:      'question': '13',
831: 1:      'valid': true
831: 1:    },
831: 1:    {
831: 1:      'answer': '87178291200',
831: 1:      'question': '14',
831: 1:      'valid': true
831: 1:    },
831: 1:    {
831: 1:      'answer': '1307674368000',
831: 1:      'question': '15',
831: 1:      'valid': true
831: 1:    }
831: 1:  ],
831: 1:  'info': [
831: 1:    '✅f(1) = 1',
831: 1:    '✅f(2) = 2',
831: 1:    '✅f(3) = 6',
831: 1:    '✅f(4) = 24',
831: 1:    '✅f(5) = 120',
831: 1:    '✅f(6) = 720',
831: 1:    '✅f(7) = 5040',
831: 1:    '✅f(8) = 40320',
831: 1:    '✅f(9) = 362880',
831: 1:    '✅f(10) = 3628800',
831: 1:    '✅f(11) = 39916800',
831: 1:    '✅f(12) = 479001600',
831: 1:    '✅f(13) = 6227020800',
831: 1:    '✅f(14) = 87178291200',
831: 1:    '✅f(15) = 1307674368000',
831: 1:    '❌f(16) = ??? != 20922789888000'
831: 1:  ],
831: 1:  'level': 29,
831: 1:  'nextQuestion': '16',
831: 1:  'questions': [
831: 1:    '1',
831: 1:    '2',
831: 1:    '3',
831: 1:    '4',
831: 1:    '5',
831: 1:    '6',
831: 1:    '7',
831: 1:    '8',
831: 1:    '9',
831: 1:    '10',
831: 1:    '11',
831: 1:    '12',
831: 1:    '13',
831: 1:    '14',
831: 1:    '15',
831: 1:    '16'
831: 1:  ]
831: 1:}
831: 1:Scores: 79602
831: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000']')
831: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
832: 1:BoardData {
832: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
832: 1:  'expectedAnswer': '355687428096000',
832: 1:  'history': [
832: 1:    {
832: 1:      'answer': '1',
832: 1:      'question': '1',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '2',
832: 1:      'question': '2',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '6',
832: 1:      'question': '3',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '24',
832: 1:      'question': '4',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '120',
832: 1:      'question': '5',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '720',
832: 1:      'question': '6',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '5040',
832: 1:      'question': '7',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '40320',
832: 1:      'question': '8',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '362880',
832: 1:      'question': '9',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '3628800',
832: 1:      'question': '10',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '39916800',
832: 1:      'question': '11',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '479001600',
832: 1:      'question': '12',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '6227020800',
832: 1:      'question': '13',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '87178291200',
832: 1:      'question': '14',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '1307674368000',
832: 1:      'question': '15',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '20922789888000',
832: 1:      'question': '16',
832: 1:      'valid': true
832: 1:    }
832: 1:  ],
832: 1:  'info': [
832: 1:    '✅f(1) = 1',
832: 1:    '✅f(2) = 2',
832: 1:    '✅f(3) = 6',
832: 1:    '✅f(4) = 24',
832: 1:    '✅f(5) = 120',
832: 1:    '✅f(6) = 720',
832: 1:    '✅f(7) = 5040',
832: 1:    '✅f(8) = 40320',
832: 1:    '✅f(9) = 362880',
832: 1:    '✅f(10) = 3628800',
832: 1:    '✅f(11) = 39916800',
832: 1:    '✅f(12) = 479001600',
832: 1:    '✅f(13) = 6227020800',
832: 1:    '✅f(14) = 87178291200',
832: 1:    '✅f(15) = 1307674368000',
832: 1:    '✅f(16) = 20922789888000',
832: 1:    '❌f(17) = ??? != 355687428096000'
832: 1:  ],
832: 1:  'level': 29,
832: 1:  'nextQuestion': '17',
832: 1:  'questions': [
832: 1:    '1',
832: 1:    '2',
832: 1:    '3',
832: 1:    '4',
832: 1:    '5',
832: 1:    '6',
832: 1:    '7',
832: 1:    '8',
832: 1:    '9',
832: 1:    '10',
832: 1:    '11',
832: 1:    '12',
832: 1:    '13',
832: 1:    '14',
832: 1:    '15',
832: 1:    '16',
832: 1:    '17'
832: 1:  ]
832: 1:}
832: 1:Scores: 79618
832: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000', '355687428096000']')
832: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
833: 1:BoardData {
833: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
833: 1:  'expectedAnswer': '6402373705728000',
833: 1:  'history': [
833: 1:    {
833: 1:      'answer': '1',
833: 1:      'question': '1',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '2',
833: 1:      'question': '2',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '6',
833: 1:      'question': '3',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '24',
833: 1:      'question': '4',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '120',
833: 1:      'question': '5',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '720',
833: 1:      'question': '6',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '5040',
833: 1:      'question': '7',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '40320',
833: 1:      'question': '8',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '362880',
833: 1:      'question': '9',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '3628800',
833: 1:      'question': '10',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '39916800',
833: 1:      'question': '11',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '479001600',
833: 1:      'question': '12',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '6227020800',
833: 1:      'question': '13',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '87178291200',
833: 1:      'question': '14',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '1307674368000',
833: 1:      'question': '15',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '20922789888000',
833: 1:      'question': '16',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '355687428096000',
833: 1:      'question': '17',
833: 1:      'valid': true
833: 1:    }
833: 1:  ],
833: 1:  'info': [
833: 1:    '✅f(1) = 1',
833: 1:    '✅f(2) = 2',
833: 1:    '✅f(3) = 6',
833: 1:    '✅f(4) = 24',
833: 1:    '✅f(5) = 120',
833: 1:    '✅f(6) = 720',
833: 1:    '✅f(7) = 5040',
833: 1:    '✅f(8) = 40320',
833: 1:    '✅f(9) = 362880',
833: 1:    '✅f(10) = 3628800',
833: 1:    '✅f(11) = 39916800',
833: 1:    '✅f(12) = 479001600',
833: 1:    '✅f(13) = 6227020800',
833: 1:    '✅f(14) = 87178291200',
833: 1:    '✅f(15) = 1307674368000',
833: 1:    '✅f(16) = 20922789888000',
833: 1:    '✅f(17) = 355687428096000',
833: 1:    '❌f(18) = ??? != 6402373705728000'
833: 1:  ],
833: 1:  'level': 29,
833: 1:  'nextQuestion': '18',
833: 1:  'questions': [
833: 1:    '1',
833: 1:    '2',
833: 1:    '3',
833: 1:    '4',
833: 1:    '5',
833: 1:    '6',
833: 1:    '7',
833: 1:    '8',
833: 1:    '9',
833: 1:    '10',
833: 1:    '11',
833: 1:    '12',
833: 1:    '13',
833: 1:    '14',
833: 1:    '15',
833: 1:    '16',
833: 1:    '17',
833: 1:    '18'
833: 1:  ]
833: 1:}
833: 1:Scores: 79634
833: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000', '355687428096000', '6402373705728000']')
833: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
834: 1:BoardData {
834: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
834: 1:  'expectedAnswer': '121645100408832000',
834: 1:  'history': [
834: 1:    {
834: 1:      'answer': '1',
834: 1:      'question': '1',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '2',
834: 1:      'question': '2',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '6',
834: 1:      'question': '3',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '24',
834: 1:      'question': '4',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '120',
834: 1:      'question': '5',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '720',
834: 1:      'question': '6',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '5040',
834: 1:      'question': '7',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '40320',
834: 1:      'question': '8',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '362880',
834: 1:      'question': '9',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '3628800',
834: 1:      'question': '10',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '39916800',
834: 1:      'question': '11',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '479001600',
834: 1:      'question': '12',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '6227020800',
834: 1:      'question': '13',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '87178291200',
834: 1:      'question': '14',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '1307674368000',
834: 1:      'question': '15',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '20922789888000',
834: 1:      'question': '16',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '355687428096000',
834: 1:      'question': '17',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '6402373705728000',
834: 1:      'question': '18',
834: 1:      'valid': true
834: 1:    }
834: 1:  ],
834: 1:  'info': [
834: 1:    '✅f(1) = 1',
834: 1:    '✅f(2) = 2',
834: 1:    '✅f(3) = 6',
834: 1:    '✅f(4) = 24',
834: 1:    '✅f(5) = 120',
834: 1:    '✅f(6) = 720',
834: 1:    '✅f(7) = 5040',
834: 1:    '✅f(8) = 40320',
834: 1:    '✅f(9) = 362880',
834: 1:    '✅f(10) = 3628800',
834: 1:    '✅f(11) = 39916800',
834: 1:    '✅f(12) = 479001600',
834: 1:    '✅f(13) = 6227020800',
834: 1:    '✅f(14) = 87178291200',
834: 1:    '✅f(15) = 1307674368000',
834: 1:    '✅f(16) = 20922789888000',
834: 1:    '✅f(17) = 355687428096000',
834: 1:    '✅f(18) = 6402373705728000',
834: 1:    '❌f(19) = ??? != 121645100408832000'
834: 1:  ],
834: 1:  'level': 29,
834: 1:  'nextQuestion': '19',
834: 1:  'questions': [
834: 1:    '1',
834: 1:    '2',
834: 1:    '3',
834: 1:    '4',
834: 1:    '5',
834: 1:    '6',
834: 1:    '7',
834: 1:    '8',
834: 1:    '9',
834: 1:    '10',
834: 1:    '11',
834: 1:    '12',
834: 1:    '13',
834: 1:    '14',
834: 1:    '15',
834: 1:    '16',
834: 1:    '17',
834: 1:    '18',
834: 1:    '19'
834: 1:  ]
834: 1:}
834: 1:Scores: 79650
834: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000', '355687428096000', '6402373705728000', '121645100408832000']')
834: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
835: 1:BoardData {
835: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
835: 1:  'expectedAnswer': '2432902008176640000',
835: 1:  'history': [
835: 1:    {
835: 1:      'answer': '1',
835: 1:      'question': '1',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '2',
835: 1:      'question': '2',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '6',
835: 1:      'question': '3',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '24',
835: 1:      'question': '4',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '120',
835: 1:      'question': '5',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '720',
835: 1:      'question': '6',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '5040',
835: 1:      'question': '7',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '40320',
835: 1:      'question': '8',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '362880',
835: 1:      'question': '9',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '3628800',
835: 1:      'question': '10',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '39916800',
835: 1:      'question': '11',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '479001600',
835: 1:      'question': '12',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '6227020800',
835: 1:      'question': '13',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '87178291200',
835: 1:      'question': '14',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '1307674368000',
835: 1:      'question': '15',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '20922789888000',
835: 1:      'question': '16',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '355687428096000',
835: 1:      'question': '17',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '6402373705728000',
835: 1:      'question': '18',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '121645100408832000',
835: 1:      'question': '19',
835: 1:      'valid': true
835: 1:    }
835: 1:  ],
835: 1:  'info': [
835: 1:    '✅f(1) = 1',
835: 1:    '✅f(2) = 2',
835: 1:    '✅f(3) = 6',
835: 1:    '✅f(4) = 24',
835: 1:    '✅f(5) = 120',
835: 1:    '✅f(6) = 720',
835: 1:    '✅f(7) = 5040',
835: 1:    '✅f(8) = 40320',
835: 1:    '✅f(9) = 362880',
835: 1:    '✅f(10) = 3628800',
835: 1:    '✅f(11) = 39916800',
835: 1:    '✅f(12) = 479001600',
835: 1:    '✅f(13) = 6227020800',
835: 1:    '✅f(14) = 87178291200',
835: 1:    '✅f(15) = 1307674368000',
835: 1:    '✅f(16) = 20922789888000',
835: 1:    '✅f(17) = 355687428096000',
835: 1:    '✅f(18) = 6402373705728000',
835: 1:    '✅f(19) = 121645100408832000',
835: 1:    '❌f(20) = ??? != 2432902008176640000'
835: 1:  ],
835: 1:  'level': 29,
835: 1:  'nextQuestion': '20',
835: 1:  'questions': [
835: 1:    '1',
835: 1:    '2',
835: 1:    '3',
835: 1:    '4',
835: 1:    '5',
835: 1:    '6',
835: 1:    '7',
835: 1:    '8',
835: 1:    '9',
835: 1:    '10',
835: 1:    '11',
835: 1:    '12',
835: 1:    '13',
835: 1:    '14',
835: 1:    '15',
835: 1:    '16',
835: 1:    '17',
835: 1:    '18',
835: 1:    '19',
835: 1:    '20'
835: 1:  ]
835: 1:}
835: 1:Scores: 79666
835: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000', '355687428096000', '6402373705728000', '121645100408832000', '2432902008176640000']')
835: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
836: 1:BoardData {
836: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
836: 1:  'expectedAnswer': '51090942171709440000',
836: 1:  'history': [
836: 1:    {
836: 1:      'answer': '1',
836: 1:      'question': '1',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '2',
836: 1:      'question': '2',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '6',
836: 1:      'question': '3',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '24',
836: 1:      'question': '4',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '120',
836: 1:      'question': '5',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '720',
836: 1:      'question': '6',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '5040',
836: 1:      'question': '7',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '40320',
836: 1:      'question': '8',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '362880',
836: 1:      'question': '9',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '3628800',
836: 1:      'question': '10',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '39916800',
836: 1:      'question': '11',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '479001600',
836: 1:      'question': '12',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '6227020800',
836: 1:      'question': '13',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '87178291200',
836: 1:      'question': '14',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '1307674368000',
836: 1:      'question': '15',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '20922789888000',
836: 1:      'question': '16',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '355687428096000',
836: 1:      'question': '17',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '6402373705728000',
836: 1:      'question': '18',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '121645100408832000',
836: 1:      'question': '19',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '2432902008176640000',
836: 1:      'question': '20',
836: 1:      'valid': true
836: 1:    }
836: 1:  ],
836: 1:  'info': [
836: 1:    '✅f(1) = 1',
836: 1:    '✅f(2) = 2',
836: 1:    '✅f(3) = 6',
836: 1:    '✅f(4) = 24',
836: 1:    '✅f(5) = 120',
836: 1:    '✅f(6) = 720',
836: 1:    '✅f(7) = 5040',
836: 1:    '✅f(8) = 40320',
836: 1:    '✅f(9) = 362880',
836: 1:    '✅f(10) = 3628800',
836: 1:    '✅f(11) = 39916800',
836: 1:    '✅f(12) = 479001600',
836: 1:    '✅f(13) = 6227020800',
836: 1:    '✅f(14) = 87178291200',
836: 1:    '✅f(15) = 1307674368000',
836: 1:    '✅f(16) = 20922789888000',
836: 1:    '✅f(17) = 355687428096000',
836: 1:    '✅f(18) = 6402373705728000',
836: 1:    '✅f(19) = 121645100408832000',
836: 1:    '✅f(20) = 2432902008176640000',
836: 1:    '❌f(21) = ??? != 51090942171709440000'
836: 1:  ],
836: 1:  'level': 29,
836: 1:  'nextQuestion': '21',
836: 1:  'questions': [
836: 1:    '1',
836: 1:    '2',
836: 1:    '3',
836: 1:    '4',
836: 1:    '5',
836: 1:    '6',
836: 1:    '7',
836: 1:    '8',
836: 1:    '9',
836: 1:    '10',
836: 1:    '11',
836: 1:    '12',
836: 1:    '13',
836: 1:    '14',
836: 1:    '15',
836: 1:    '16',
836: 1:    '17',
836: 1:    '18',
836: 1:    '19',
836: 1:    '20',
836: 1:    '21'
836: 1:  ]
836: 1:}
836: 1:Scores: 79682
836: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000', '355687428096000', '6402373705728000', '121645100408832000', '2432902008176640000', '51090942171709440000']')
836: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
837: 1:BoardData {
837: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
837: 1:  'expectedAnswer': '1124000727777607680000',
837: 1:  'history': [
837: 1:    {
837: 1:      'answer': '1',
837: 1:      'question': '1',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '2',
837: 1:      'question': '2',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '6',
837: 1:      'question': '3',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '24',
837: 1:      'question': '4',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '120',
837: 1:      'question': '5',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '720',
837: 1:      'question': '6',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '5040',
837: 1:      'question': '7',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '40320',
837: 1:      'question': '8',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '362880',
837: 1:      'question': '9',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '3628800',
837: 1:      'question': '10',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '39916800',
837: 1:      'question': '11',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '479001600',
837: 1:      'question': '12',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '6227020800',
837: 1:      'question': '13',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '87178291200',
837: 1:      'question': '14',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '1307674368000',
837: 1:      'question': '15',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '20922789888000',
837: 1:      'question': '16',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '355687428096000',
837: 1:      'question': '17',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '6402373705728000',
837: 1:      'question': '18',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '121645100408832000',
837: 1:      'question': '19',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '2432902008176640000',
837: 1:      'question': '20',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '51090942171709440000',
837: 1:      'question': '21',
837: 1:      'valid': true
837: 1:    }
837: 1:  ],
837: 1:  'info': [
837: 1:    '✅f(1) = 1',
837: 1:    '✅f(2) = 2',
837: 1:    '✅f(3) = 6',
837: 1:    '✅f(4) = 24',
837: 1:    '✅f(5) = 120',
837: 1:    '✅f(6) = 720',
837: 1:    '✅f(7) = 5040',
837: 1:    '✅f(8) = 40320',
837: 1:    '✅f(9) = 362880',
837: 1:    '✅f(10) = 3628800',
837: 1:    '✅f(11) = 39916800',
837: 1:    '✅f(12) = 479001600',
837: 1:    '✅f(13) = 6227020800',
837: 1:    '✅f(14) = 87178291200',
837: 1:    '✅f(15) = 1307674368000',
837: 1:    '✅f(16) = 20922789888000',
837: 1:    '✅f(17) = 355687428096000',
837: 1:    '✅f(18) = 6402373705728000',
837: 1:    '✅f(19) = 121645100408832000',
837: 1:    '✅f(20) = 2432902008176640000',
837: 1:    '✅f(21) = 51090942171709440000',
837: 1:    '❌f(22) = ??? != 1124000727777607680000'
837: 1:  ],
837: 1:  'level': 29,
837: 1:  'nextQuestion': '22',
837: 1:  'questions': [
837: 1:    '1',
837: 1:    '2',
837: 1:    '3',
837: 1:    '4',
837: 1:    '5',
837: 1:    '6',
837: 1:    '7',
837: 1:    '8',
837: 1:    '9',
837: 1:    '10',
837: 1:    '11',
837: 1:    '12',
837: 1:    '13',
837: 1:    '14',
837: 1:    '15',
837: 1:    '16',
837: 1:    '17',
837: 1:    '18',
837: 1:    '19',
837: 1:    '20',
837: 1:    '21',
837: 1:    '22'
837: 1:  ]
837: 1:}
837: 1:Scores: 79698
837: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000', '355687428096000', '6402373705728000', '121645100408832000', '2432902008176640000', '51090942171709440000', '1124000727777607680000']')
837: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
838: 1:BoardData {
838: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
838: 1:  'expectedAnswer': '25852016738884976640000',
838: 1:  'history': [
838: 1:    {
838: 1:      'answer': '1',
838: 1:      'question': '1',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '2',
838: 1:      'question': '2',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '6',
838: 1:      'question': '3',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '24',
838: 1:      'question': '4',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '120',
838: 1:      'question': '5',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '720',
838: 1:      'question': '6',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '5040',
838: 1:      'question': '7',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '40320',
838: 1:      'question': '8',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '362880',
838: 1:      'question': '9',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '3628800',
838: 1:      'question': '10',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '39916800',
838: 1:      'question': '11',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '479001600',
838: 1:      'question': '12',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '6227020800',
838: 1:      'question': '13',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '87178291200',
838: 1:      'question': '14',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '1307674368000',
838: 1:      'question': '15',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '20922789888000',
838: 1:      'question': '16',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '355687428096000',
838: 1:      'question': '17',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '6402373705728000',
838: 1:      'question': '18',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '121645100408832000',
838: 1:      'question': '19',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '2432902008176640000',
838: 1:      'question': '20',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '51090942171709440000',
838: 1:      'question': '21',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '1124000727777607680000',
838: 1:      'question': '22',
838: 1:      'valid': true
838: 1:    }
838: 1:  ],
838: 1:  'info': [
838: 1:    '✅f(1) = 1',
838: 1:    '✅f(2) = 2',
838: 1:    '✅f(3) = 6',
838: 1:    '✅f(4) = 24',
838: 1:    '✅f(5) = 120',
838: 1:    '✅f(6) = 720',
838: 1:    '✅f(7) = 5040',
838: 1:    '✅f(8) = 40320',
838: 1:    '✅f(9) = 362880',
838: 1:    '✅f(10) = 3628800',
838: 1:    '✅f(11) = 39916800',
838: 1:    '✅f(12) = 479001600',
838: 1:    '✅f(13) = 6227020800',
838: 1:    '✅f(14) = 87178291200',
838: 1:    '✅f(15) = 1307674368000',
838: 1:    '✅f(16) = 20922789888000',
838: 1:    '✅f(17) = 355687428096000',
838: 1:    '✅f(18) = 6402373705728000',
838: 1:    '✅f(19) = 121645100408832000',
838: 1:    '✅f(20) = 2432902008176640000',
838: 1:    '✅f(21) = 51090942171709440000',
838: 1:    '✅f(22) = 1124000727777607680000',
838: 1:    '❌f(23) = ??? != 25852016738884976640000'
838: 1:  ],
838: 1:  'level': 29,
838: 1:  'nextQuestion': '23',
838: 1:  'questions': [
838: 1:    '1',
838: 1:    '2',
838: 1:    '3',
838: 1:    '4',
838: 1:    '5',
838: 1:    '6',
838: 1:    '7',
838: 1:    '8',
838: 1:    '9',
838: 1:    '10',
838: 1:    '11',
838: 1:    '12',
838: 1:    '13',
838: 1:    '14',
838: 1:    '15',
838: 1:    '16',
838: 1:    '17',
838: 1:    '18',
838: 1:    '19',
838: 1:    '20',
838: 1:    '21',
838: 1:    '22',
838: 1:    '23'
838: 1:  ]
838: 1:}
838: 1:Scores: 79714
838: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000', '355687428096000', '6402373705728000', '121645100408832000', '2432902008176640000', '51090942171709440000', '1124000727777607680000', '25852016738884976640000']')
838: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
839: 1:BoardData {
839: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
839: 1:  'expectedAnswer': '620448401733239439360000',
839: 1:  'history': [
839: 1:    {
839: 1:      'answer': '1',
839: 1:      'question': '1',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '2',
839: 1:      'question': '2',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '6',
839: 1:      'question': '3',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '24',
839: 1:      'question': '4',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '120',
839: 1:      'question': '5',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '720',
839: 1:      'question': '6',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '5040',
839: 1:      'question': '7',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '40320',
839: 1:      'question': '8',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '362880',
839: 1:      'question': '9',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '3628800',
839: 1:      'question': '10',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '39916800',
839: 1:      'question': '11',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '479001600',
839: 1:      'question': '12',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '6227020800',
839: 1:      'question': '13',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '87178291200',
839: 1:      'question': '14',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '1307674368000',
839: 1:      'question': '15',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '20922789888000',
839: 1:      'question': '16',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '355687428096000',
839: 1:      'question': '17',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '6402373705728000',
839: 1:      'question': '18',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '121645100408832000',
839: 1:      'question': '19',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '2432902008176640000',
839: 1:      'question': '20',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '51090942171709440000',
839: 1:      'question': '21',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '1124000727777607680000',
839: 1:      'question': '22',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '25852016738884976640000',
839: 1:      'question': '23',
839: 1:      'valid': true
839: 1:    }
839: 1:  ],
839: 1:  'info': [
839: 1:    '✅f(1) = 1',
839: 1:    '✅f(2) = 2',
839: 1:    '✅f(3) = 6',
839: 1:    '✅f(4) = 24',
839: 1:    '✅f(5) = 120',
839: 1:    '✅f(6) = 720',
839: 1:    '✅f(7) = 5040',
839: 1:    '✅f(8) = 40320',
839: 1:    '✅f(9) = 362880',
839: 1:    '✅f(10) = 3628800',
839: 1:    '✅f(11) = 39916800',
839: 1:    '✅f(12) = 479001600',
839: 1:    '✅f(13) = 6227020800',
839: 1:    '✅f(14) = 87178291200',
839: 1:    '✅f(15) = 1307674368000',
839: 1:    '✅f(16) = 20922789888000',
839: 1:    '✅f(17) = 355687428096000',
839: 1:    '✅f(18) = 6402373705728000',
839: 1:    '✅f(19) = 121645100408832000',
839: 1:    '✅f(20) = 2432902008176640000',
839: 1:    '✅f(21) = 51090942171709440000',
839: 1:    '✅f(22) = 1124000727777607680000',
839: 1:    '✅f(23) = 25852016738884976640000',
839: 1:    '❌f(24) = ??? != 620448401733239439360000'
839: 1:  ],
839: 1:  'level': 29,
839: 1:  'nextQuestion': '24',
839: 1:  'questions': [
839: 1:    '1',
839: 1:    '2',
839: 1:    '3',
839: 1:    '4',
839: 1:    '5',
839: 1:    '6',
839: 1:    '7',
839: 1:    '8',
839: 1:    '9',
839: 1:    '10',
839: 1:    '11',
839: 1:    '12',
839: 1:    '13',
839: 1:    '14',
839: 1:    '15',
839: 1:    '16',
839: 1:    '17',
839: 1:    '18',
839: 1:    '19',
839: 1:    '20',
839: 1:    '21',
839: 1:    '22',
839: 1:    '23',
839: 1:    '24'
839: 1:  ]
839: 1:}
839: 1:Scores: 79730
839: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000', '355687428096000', '6402373705728000', '121645100408832000', '2432902008176640000', '51090942171709440000', '1124000727777607680000', '25852016738884976640000', '620448401733239439360000']')
839: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
840: 1:BoardData {
840: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
840: 1:  'expectedAnswer': '15511210043330985984000000',
840: 1:  'history': [
840: 1:    {
840: 1:      'answer': '1',
840: 1:      'question': '1',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '2',
840: 1:      'question': '2',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '6',
840: 1:      'question': '3',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '24',
840: 1:      'question': '4',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '120',
840: 1:      'question': '5',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '720',
840: 1:      'question': '6',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '5040',
840: 1:      'question': '7',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '40320',
840: 1:      'question': '8',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '362880',
840: 1:      'question': '9',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '3628800',
840: 1:      'question': '10',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '39916800',
840: 1:      'question': '11',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '479001600',
840: 1:      'question': '12',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '6227020800',
840: 1:      'question': '13',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '87178291200',
840: 1:      'question': '14',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '1307674368000',
840: 1:      'question': '15',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '20922789888000',
840: 1:      'question': '16',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '355687428096000',
840: 1:      'question': '17',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '6402373705728000',
840: 1:      'question': '18',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '121645100408832000',
840: 1:      'question': '19',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '2432902008176640000',
840: 1:      'question': '20',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '51090942171709440000',
840: 1:      'question': '21',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '1124000727777607680000',
840: 1:      'question': '22',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '25852016738884976640000',
840: 1:      'question': '23',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '620448401733239439360000',
840: 1:      'question': '24',
840: 1:      'valid': true
840: 1:    }
840: 1:  ],
840: 1:  'info': [
840: 1:    '✅f(1) = 1',
840: 1:    '✅f(2) = 2',
840: 1:    '✅f(3) = 6',
840: 1:    '✅f(4) = 24',
840: 1:    '✅f(5) = 120',
840: 1:    '✅f(6) = 720',
840: 1:    '✅f(7) = 5040',
840: 1:    '✅f(8) = 40320',
840: 1:    '✅f(9) = 362880',
840: 1:    '✅f(10) = 3628800',
840: 1:    '✅f(11) = 39916800',
840: 1:    '✅f(12) = 479001600',
840: 1:    '✅f(13) = 6227020800',
840: 1:    '✅f(14) = 87178291200',
840: 1:    '✅f(15) = 1307674368000',
840: 1:    '✅f(16) = 20922789888000',
840: 1:    '✅f(17) = 355687428096000',
840: 1:    '✅f(18) = 6402373705728000',
840: 1:    '✅f(19) = 121645100408832000',
840: 1:    '✅f(20) = 2432902008176640000',
840: 1:    '✅f(21) = 51090942171709440000',
840: 1:    '✅f(22) = 1124000727777607680000',
840: 1:    '✅f(23) = 25852016738884976640000',
840: 1:    '✅f(24) = 620448401733239439360000',
840: 1:    '❌f(25) = ??? != 15511210043330985984000000'
840: 1:  ],
840: 1:  'level': 29,
840: 1:  'nextQuestion': '25',
840: 1:  'questions': [
840: 1:    '1',
840: 1:    '2',
840: 1:    '3',
840: 1:    '4',
840: 1:    '5',
840: 1:    '6',
840: 1:    '7',
840: 1:    '8',
840: 1:    '9',
840: 1:    '10',
840: 1:    '11',
840: 1:    '12',
840: 1:    '13',
840: 1:    '14',
840: 1:    '15',
840: 1:    '16',
840: 1:    '17',
840: 1:    '18',
840: 1:    '19',
840: 1:    '20',
840: 1:    '21',
840: 1:    '22',
840: 1:    '23',
840: 1:    '24',
840: 1:    '25'
840: 1:  ]
840: 1:}
840: 1:Scores: 79746
840: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000', '355687428096000', '6402373705728000', '121645100408832000', '2432902008176640000', '51090942171709440000', '1124000727777607680000', '25852016738884976640000', '620448401733239439360000', '15511210043330985984000000']')
840: 1:Fire Event: PassTest{complexity=42, testCount=25}
840: 1:Fire Event: NextAlgorithm{complexity=42, time=0}
------------------------------------------
841: 1:BoardData {
841: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
841: 1:  'history': [
841: 1:    {
841: 1:      'answer': '1',
841: 1:      'question': '1',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '2',
841: 1:      'question': '2',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '6',
841: 1:      'question': '3',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '24',
841: 1:      'question': '4',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '120',
841: 1:      'question': '5',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '720',
841: 1:      'question': '6',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '5040',
841: 1:      'question': '7',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '40320',
841: 1:      'question': '8',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '362880',
841: 1:      'question': '9',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '3628800',
841: 1:      'question': '10',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '39916800',
841: 1:      'question': '11',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '479001600',
841: 1:      'question': '12',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '6227020800',
841: 1:      'question': '13',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '87178291200',
841: 1:      'question': '14',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '1307674368000',
841: 1:      'question': '15',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '20922789888000',
841: 1:      'question': '16',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '355687428096000',
841: 1:      'question': '17',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '6402373705728000',
841: 1:      'question': '18',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '121645100408832000',
841: 1:      'question': '19',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '2432902008176640000',
841: 1:      'question': '20',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '51090942171709440000',
841: 1:      'question': '21',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '1124000727777607680000',
841: 1:      'question': '22',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '25852016738884976640000',
841: 1:      'question': '23',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '620448401733239439360000',
841: 1:      'question': '24',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '15511210043330985984000000',
841: 1:      'question': '25',
841: 1:      'valid': true
841: 1:    }
841: 1:  ],
841: 1:  'info': [
841: 1:    '✅f(1) = 1',
841: 1:    '✅f(2) = 2',
841: 1:    '✅f(3) = 6',
841: 1:    '✅f(4) = 24',
841: 1:    '✅f(5) = 120',
841: 1:    '✅f(6) = 720',
841: 1:    '✅f(7) = 5040',
841: 1:    '✅f(8) = 40320',
841: 1:    '✅f(9) = 362880',
841: 1:    '✅f(10) = 3628800',
841: 1:    '✅f(11) = 39916800',
841: 1:    '✅f(12) = 479001600',
841: 1:    '✅f(13) = 6227020800',
841: 1:    '✅f(14) = 87178291200',
841: 1:    '✅f(15) = 1307674368000',
841: 1:    '✅f(16) = 20922789888000',
841: 1:    '✅f(17) = 355687428096000',
841: 1:    '✅f(18) = 6402373705728000',
841: 1:    '✅f(19) = 121645100408832000',
841: 1:    '✅f(20) = 2432902008176640000',
841: 1:    '✅f(21) = 51090942171709440000',
841: 1:    '✅f(22) = 1124000727777607680000',
841: 1:    '✅f(23) = 25852016738884976640000',
841: 1:    '✅f(24) = 620448401733239439360000',
841: 1:    '✅f(25) = 15511210043330985984000000'
841: 1:  ],
841: 1:  'level': 29,
841: 1:  'questions': []
841: 1:}
841: 1:Scores: 85431
841: 1:Answer: message('StartNextLevel')
841: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
842: 1:BoardData {
842: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
842: 1:  'expectedAnswer': '2',
842: 1:  'history': [],
842: 1:  'info': ['❌f(1) = ??? != 2'],
842: 1:  'level': 30,
842: 1:  'nextQuestion': '1',
842: 1:  'questions': ['1']
842: 1:}
842: 1:Scores: 85431
842: 1:Answer: message('['2']')
842: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
843: 1:BoardData {
843: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
843: 1:  'expectedAnswer': '4',
843: 1:  'history': [{
843: 1:    'answer': '2',
843: 1:    'question': '1',
843: 1:    'valid': true
843: 1:  }],
843: 1:  'info': [
843: 1:    '✅f(1) = 2',
843: 1:    '❌f(2) = ??? != 4'
843: 1:  ],
843: 1:  'level': 30,
843: 1:  'nextQuestion': '2',
843: 1:  'questions': [
843: 1:    '1',
843: 1:    '2'
843: 1:  ]
843: 1:}
843: 1:Scores: 85445
843: 1:Answer: message('['2', '4']')
843: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
844: 1:BoardData {
844: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
844: 1:  'expectedAnswer': '6',
844: 1:  'history': [
844: 1:    {
844: 1:      'answer': '2',
844: 1:      'question': '1',
844: 1:      'valid': true
844: 1:    },
844: 1:    {
844: 1:      'answer': '4',
844: 1:      'question': '2',
844: 1:      'valid': true
844: 1:    }
844: 1:  ],
844: 1:  'info': [
844: 1:    '✅f(1) = 2',
844: 1:    '✅f(2) = 4',
844: 1:    '❌f(3) = ??? != 6'
844: 1:  ],
844: 1:  'level': 30,
844: 1:  'nextQuestion': '3',
844: 1:  'questions': [
844: 1:    '1',
844: 1:    '2',
844: 1:    '3'
844: 1:  ]
844: 1:}
844: 1:Scores: 85459
844: 1:Answer: message('['2', '4', '6']')
844: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
845: 1:BoardData {
845: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
845: 1:  'expectedAnswer': '8',
845: 1:  'history': [
845: 1:    {
845: 1:      'answer': '2',
845: 1:      'question': '1',
845: 1:      'valid': true
845: 1:    },
845: 1:    {
845: 1:      'answer': '4',
845: 1:      'question': '2',
845: 1:      'valid': true
845: 1:    },
845: 1:    {
845: 1:      'answer': '6',
845: 1:      'question': '3',
845: 1:      'valid': true
845: 1:    }
845: 1:  ],
845: 1:  'info': [
845: 1:    '✅f(1) = 2',
845: 1:    '✅f(2) = 4',
845: 1:    '✅f(3) = 6',
845: 1:    '❌f(4) = ??? != 8'
845: 1:  ],
845: 1:  'level': 30,
845: 1:  'nextQuestion': '4',
845: 1:  'questions': [
845: 1:    '1',
845: 1:    '2',
845: 1:    '3',
845: 1:    '4'
845: 1:  ]
845: 1:}
845: 1:Scores: 85473
845: 1:Answer: message('['2', '4', '6', '8']')
845: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
846: 1:BoardData {
846: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
846: 1:  'expectedAnswer': '11',
846: 1:  'history': [
846: 1:    {
846: 1:      'answer': '2',
846: 1:      'question': '1',
846: 1:      'valid': true
846: 1:    },
846: 1:    {
846: 1:      'answer': '4',
846: 1:      'question': '2',
846: 1:      'valid': true
846: 1:    },
846: 1:    {
846: 1:      'answer': '6',
846: 1:      'question': '3',
846: 1:      'valid': true
846: 1:    },
846: 1:    {
846: 1:      'answer': '8',
846: 1:      'question': '4',
846: 1:      'valid': true
846: 1:    }
846: 1:  ],
846: 1:  'info': [
846: 1:    '✅f(1) = 2',
846: 1:    '✅f(2) = 4',
846: 1:    '✅f(3) = 6',
846: 1:    '✅f(4) = 8',
846: 1:    '❌f(5) = ??? != 11'
846: 1:  ],
846: 1:  'level': 30,
846: 1:  'nextQuestion': '5',
846: 1:  'questions': [
846: 1:    '1',
846: 1:    '2',
846: 1:    '3',
846: 1:    '4',
846: 1:    '5'
846: 1:  ]
846: 1:}
846: 1:Scores: 85487
846: 1:Answer: message('['2', '4', '6', '8', '11']')
846: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
847: 1:BoardData {
847: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
847: 1:  'expectedAnswer': '33',
847: 1:  'history': [
847: 1:    {
847: 1:      'answer': '2',
847: 1:      'question': '1',
847: 1:      'valid': true
847: 1:    },
847: 1:    {
847: 1:      'answer': '4',
847: 1:      'question': '2',
847: 1:      'valid': true
847: 1:    },
847: 1:    {
847: 1:      'answer': '6',
847: 1:      'question': '3',
847: 1:      'valid': true
847: 1:    },
847: 1:    {
847: 1:      'answer': '8',
847: 1:      'question': '4',
847: 1:      'valid': true
847: 1:    },
847: 1:    {
847: 1:      'answer': '11',
847: 1:      'question': '5',
847: 1:      'valid': true
847: 1:    }
847: 1:  ],
847: 1:  'info': [
847: 1:    '✅f(1) = 2',
847: 1:    '✅f(2) = 4',
847: 1:    '✅f(3) = 6',
847: 1:    '✅f(4) = 8',
847: 1:    '✅f(5) = 11',
847: 1:    '❌f(6) = ??? != 33'
847: 1:  ],
847: 1:  'level': 30,
847: 1:  'nextQuestion': '6',
847: 1:  'questions': [
847: 1:    '1',
847: 1:    '2',
847: 1:    '3',
847: 1:    '4',
847: 1:    '5',
847: 1:    '6'
847: 1:  ]
847: 1:}
847: 1:Scores: 85501
847: 1:Answer: message('['2', '4', '6', '8', '11', '33']')
847: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
848: 1:BoardData {
848: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
848: 1:  'expectedAnswer': '55',
848: 1:  'history': [
848: 1:    {
848: 1:      'answer': '2',
848: 1:      'question': '1',
848: 1:      'valid': true
848: 1:    },
848: 1:    {
848: 1:      'answer': '4',
848: 1:      'question': '2',
848: 1:      'valid': true
848: 1:    },
848: 1:    {
848: 1:      'answer': '6',
848: 1:      'question': '3',
848: 1:      'valid': true
848: 1:    },
848: 1:    {
848: 1:      'answer': '8',
848: 1:      'question': '4',
848: 1:      'valid': true
848: 1:    },
848: 1:    {
848: 1:      'answer': '11',
848: 1:      'question': '5',
848: 1:      'valid': true
848: 1:    },
848: 1:    {
848: 1:      'answer': '33',
848: 1:      'question': '6',
848: 1:      'valid': true
848: 1:    }
848: 1:  ],
848: 1:  'info': [
848: 1:    '✅f(1) = 2',
848: 1:    '✅f(2) = 4',
848: 1:    '✅f(3) = 6',
848: 1:    '✅f(4) = 8',
848: 1:    '✅f(5) = 11',
848: 1:    '✅f(6) = 33',
848: 1:    '❌f(7) = ??? != 55'
848: 1:  ],
848: 1:  'level': 30,
848: 1:  'nextQuestion': '7',
848: 1:  'questions': [
848: 1:    '1',
848: 1:    '2',
848: 1:    '3',
848: 1:    '4',
848: 1:    '5',
848: 1:    '6',
848: 1:    '7'
848: 1:  ]
848: 1:}
848: 1:Scores: 85515
848: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55']')
848: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
849: 1:BoardData {
849: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
849: 1:  'expectedAnswer': '99',
849: 1:  'history': [
849: 1:    {
849: 1:      'answer': '2',
849: 1:      'question': '1',
849: 1:      'valid': true
849: 1:    },
849: 1:    {
849: 1:      'answer': '4',
849: 1:      'question': '2',
849: 1:      'valid': true
849: 1:    },
849: 1:    {
849: 1:      'answer': '6',
849: 1:      'question': '3',
849: 1:      'valid': true
849: 1:    },
849: 1:    {
849: 1:      'answer': '8',
849: 1:      'question': '4',
849: 1:      'valid': true
849: 1:    },
849: 1:    {
849: 1:      'answer': '11',
849: 1:      'question': '5',
849: 1:      'valid': true
849: 1:    },
849: 1:    {
849: 1:      'answer': '33',
849: 1:      'question': '6',
849: 1:      'valid': true
849: 1:    },
849: 1:    {
849: 1:      'answer': '55',
849: 1:      'question': '7',
849: 1:      'valid': true
849: 1:    }
849: 1:  ],
849: 1:  'info': [
849: 1:    '✅f(1) = 2',
849: 1:    '✅f(2) = 4',
849: 1:    '✅f(3) = 6',
849: 1:    '✅f(4) = 8',
849: 1:    '✅f(5) = 11',
849: 1:    '✅f(6) = 33',
849: 1:    '✅f(7) = 55',
849: 1:    '❌f(9) = ??? != 99'
849: 1:  ],
849: 1:  'level': 30,
849: 1:  'nextQuestion': '9',
849: 1:  'questions': [
849: 1:    '1',
849: 1:    '2',
849: 1:    '3',
849: 1:    '4',
849: 1:    '5',
849: 1:    '6',
849: 1:    '7',
849: 1:    '9'
849: 1:  ]
849: 1:}
849: 1:Scores: 85529
849: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99']')
849: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
850: 1:BoardData {
850: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
850: 1:  'expectedAnswer': '11',
850: 1:  'history': [
850: 1:    {
850: 1:      'answer': '2',
850: 1:      'question': '1',
850: 1:      'valid': true
850: 1:    },
850: 1:    {
850: 1:      'answer': '4',
850: 1:      'question': '2',
850: 1:      'valid': true
850: 1:    },
850: 1:    {
850: 1:      'answer': '6',
850: 1:      'question': '3',
850: 1:      'valid': true
850: 1:    },
850: 1:    {
850: 1:      'answer': '8',
850: 1:      'question': '4',
850: 1:      'valid': true
850: 1:    },
850: 1:    {
850: 1:      'answer': '11',
850: 1:      'question': '5',
850: 1:      'valid': true
850: 1:    },
850: 1:    {
850: 1:      'answer': '33',
850: 1:      'question': '6',
850: 1:      'valid': true
850: 1:    },
850: 1:    {
850: 1:      'answer': '55',
850: 1:      'question': '7',
850: 1:      'valid': true
850: 1:    },
850: 1:    {
850: 1:      'answer': '99',
850: 1:      'question': '9',
850: 1:      'valid': true
850: 1:    }
850: 1:  ],
850: 1:  'info': [
850: 1:    '✅f(1) = 2',
850: 1:    '✅f(2) = 4',
850: 1:    '✅f(3) = 6',
850: 1:    '✅f(4) = 8',
850: 1:    '✅f(5) = 11',
850: 1:    '✅f(6) = 33',
850: 1:    '✅f(7) = 55',
850: 1:    '✅f(9) = 99',
850: 1:    '❌f(10) = ??? != 11'
850: 1:  ],
850: 1:  'level': 30,
850: 1:  'nextQuestion': '10',
850: 1:  'questions': [
850: 1:    '1',
850: 1:    '2',
850: 1:    '3',
850: 1:    '4',
850: 1:    '5',
850: 1:    '6',
850: 1:    '7',
850: 1:    '9',
850: 1:    '10'
850: 1:  ]
850: 1:}
850: 1:Scores: 85543
850: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11']')
850: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
851: 1:BoardData {
851: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
851: 1:  'expectedAnswer': '22',
851: 1:  'history': [
851: 1:    {
851: 1:      'answer': '2',
851: 1:      'question': '1',
851: 1:      'valid': true
851: 1:    },
851: 1:    {
851: 1:      'answer': '4',
851: 1:      'question': '2',
851: 1:      'valid': true
851: 1:    },
851: 1:    {
851: 1:      'answer': '6',
851: 1:      'question': '3',
851: 1:      'valid': true
851: 1:    },
851: 1:    {
851: 1:      'answer': '8',
851: 1:      'question': '4',
851: 1:      'valid': true
851: 1:    },
851: 1:    {
851: 1:      'answer': '11',
851: 1:      'question': '5',
851: 1:      'valid': true
851: 1:    },
851: 1:    {
851: 1:      'answer': '33',
851: 1:      'question': '6',
851: 1:      'valid': true
851: 1:    },
851: 1:    {
851: 1:      'answer': '55',
851: 1:      'question': '7',
851: 1:      'valid': true
851: 1:    },
851: 1:    {
851: 1:      'answer': '99',
851: 1:      'question': '9',
851: 1:      'valid': true
851: 1:    },
851: 1:    {
851: 1:      'answer': '11',
851: 1:      'question': '10',
851: 1:      'valid': true
851: 1:    }
851: 1:  ],
851: 1:  'info': [
851: 1:    '✅f(1) = 2',
851: 1:    '✅f(2) = 4',
851: 1:    '✅f(3) = 6',
851: 1:    '✅f(4) = 8',
851: 1:    '✅f(5) = 11',
851: 1:    '✅f(6) = 33',
851: 1:    '✅f(7) = 55',
851: 1:    '✅f(9) = 99',
851: 1:    '✅f(10) = 11',
851: 1:    '❌f(11) = ??? != 22'
851: 1:  ],
851: 1:  'level': 30,
851: 1:  'nextQuestion': '11',
851: 1:  'questions': [
851: 1:    '1',
851: 1:    '2',
851: 1:    '3',
851: 1:    '4',
851: 1:    '5',
851: 1:    '6',
851: 1:    '7',
851: 1:    '9',
851: 1:    '10',
851: 1:    '11'
851: 1:  ]
851: 1:}
851: 1:Scores: 85557
851: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22']')
851: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
852: 1:BoardData {
852: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
852: 1:  'expectedAnswer': '33',
852: 1:  'history': [
852: 1:    {
852: 1:      'answer': '2',
852: 1:      'question': '1',
852: 1:      'valid': true
852: 1:    },
852: 1:    {
852: 1:      'answer': '4',
852: 1:      'question': '2',
852: 1:      'valid': true
852: 1:    },
852: 1:    {
852: 1:      'answer': '6',
852: 1:      'question': '3',
852: 1:      'valid': true
852: 1:    },
852: 1:    {
852: 1:      'answer': '8',
852: 1:      'question': '4',
852: 1:      'valid': true
852: 1:    },
852: 1:    {
852: 1:      'answer': '11',
852: 1:      'question': '5',
852: 1:      'valid': true
852: 1:    },
852: 1:    {
852: 1:      'answer': '33',
852: 1:      'question': '6',
852: 1:      'valid': true
852: 1:    },
852: 1:    {
852: 1:      'answer': '55',
852: 1:      'question': '7',
852: 1:      'valid': true
852: 1:    },
852: 1:    {
852: 1:      'answer': '99',
852: 1:      'question': '9',
852: 1:      'valid': true
852: 1:    },
852: 1:    {
852: 1:      'answer': '11',
852: 1:      'question': '10',
852: 1:      'valid': true
852: 1:    },
852: 1:    {
852: 1:      'answer': '22',
852: 1:      'question': '11',
852: 1:      'valid': true
852: 1:    }
852: 1:  ],
852: 1:  'info': [
852: 1:    '✅f(1) = 2',
852: 1:    '✅f(2) = 4',
852: 1:    '✅f(3) = 6',
852: 1:    '✅f(4) = 8',
852: 1:    '✅f(5) = 11',
852: 1:    '✅f(6) = 33',
852: 1:    '✅f(7) = 55',
852: 1:    '✅f(9) = 99',
852: 1:    '✅f(10) = 11',
852: 1:    '✅f(11) = 22',
852: 1:    '❌f(12) = ??? != 33'
852: 1:  ],
852: 1:  'level': 30,
852: 1:  'nextQuestion': '12',
852: 1:  'questions': [
852: 1:    '1',
852: 1:    '2',
852: 1:    '3',
852: 1:    '4',
852: 1:    '5',
852: 1:    '6',
852: 1:    '7',
852: 1:    '9',
852: 1:    '10',
852: 1:    '11',
852: 1:    '12'
852: 1:  ]
852: 1:}
852: 1:Scores: 85571
852: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33']')
852: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
853: 1:BoardData {
853: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
853: 1:  'expectedAnswer': '444',
853: 1:  'history': [
853: 1:    {
853: 1:      'answer': '2',
853: 1:      'question': '1',
853: 1:      'valid': true
853: 1:    },
853: 1:    {
853: 1:      'answer': '4',
853: 1:      'question': '2',
853: 1:      'valid': true
853: 1:    },
853: 1:    {
853: 1:      'answer': '6',
853: 1:      'question': '3',
853: 1:      'valid': true
853: 1:    },
853: 1:    {
853: 1:      'answer': '8',
853: 1:      'question': '4',
853: 1:      'valid': true
853: 1:    },
853: 1:    {
853: 1:      'answer': '11',
853: 1:      'question': '5',
853: 1:      'valid': true
853: 1:    },
853: 1:    {
853: 1:      'answer': '33',
853: 1:      'question': '6',
853: 1:      'valid': true
853: 1:    },
853: 1:    {
853: 1:      'answer': '55',
853: 1:      'question': '7',
853: 1:      'valid': true
853: 1:    },
853: 1:    {
853: 1:      'answer': '99',
853: 1:      'question': '9',
853: 1:      'valid': true
853: 1:    },
853: 1:    {
853: 1:      'answer': '11',
853: 1:      'question': '10',
853: 1:      'valid': true
853: 1:    },
853: 1:    {
853: 1:      'answer': '22',
853: 1:      'question': '11',
853: 1:      'valid': true
853: 1:    },
853: 1:    {
853: 1:      'answer': '33',
853: 1:      'question': '12',
853: 1:      'valid': true
853: 1:    }
853: 1:  ],
853: 1:  'info': [
853: 1:    '✅f(1) = 2',
853: 1:    '✅f(2) = 4',
853: 1:    '✅f(3) = 6',
853: 1:    '✅f(4) = 8',
853: 1:    '✅f(5) = 11',
853: 1:    '✅f(6) = 33',
853: 1:    '✅f(7) = 55',
853: 1:    '✅f(9) = 99',
853: 1:    '✅f(10) = 11',
853: 1:    '✅f(11) = 22',
853: 1:    '✅f(12) = 33',
853: 1:    '❌f(123) = ??? != 444'
853: 1:  ],
853: 1:  'level': 30,
853: 1:  'nextQuestion': '123',
853: 1:  'questions': [
853: 1:    '1',
853: 1:    '2',
853: 1:    '3',
853: 1:    '4',
853: 1:    '5',
853: 1:    '6',
853: 1:    '7',
853: 1:    '9',
853: 1:    '10',
853: 1:    '11',
853: 1:    '12',
853: 1:    '123'
853: 1:  ]
853: 1:}
853: 1:Scores: 85585
853: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444']')
853: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
854: 1:BoardData {
854: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
854: 1:  'expectedAnswer': '666',
854: 1:  'history': [
854: 1:    {
854: 1:      'answer': '2',
854: 1:      'question': '1',
854: 1:      'valid': true
854: 1:    },
854: 1:    {
854: 1:      'answer': '4',
854: 1:      'question': '2',
854: 1:      'valid': true
854: 1:    },
854: 1:    {
854: 1:      'answer': '6',
854: 1:      'question': '3',
854: 1:      'valid': true
854: 1:    },
854: 1:    {
854: 1:      'answer': '8',
854: 1:      'question': '4',
854: 1:      'valid': true
854: 1:    },
854: 1:    {
854: 1:      'answer': '11',
854: 1:      'question': '5',
854: 1:      'valid': true
854: 1:    },
854: 1:    {
854: 1:      'answer': '33',
854: 1:      'question': '6',
854: 1:      'valid': true
854: 1:    },
854: 1:    {
854: 1:      'answer': '55',
854: 1:      'question': '7',
854: 1:      'valid': true
854: 1:    },
854: 1:    {
854: 1:      'answer': '99',
854: 1:      'question': '9',
854: 1:      'valid': true
854: 1:    },
854: 1:    {
854: 1:      'answer': '11',
854: 1:      'question': '10',
854: 1:      'valid': true
854: 1:    },
854: 1:    {
854: 1:      'answer': '22',
854: 1:      'question': '11',
854: 1:      'valid': true
854: 1:    },
854: 1:    {
854: 1:      'answer': '33',
854: 1:      'question': '12',
854: 1:      'valid': true
854: 1:    },
854: 1:    {
854: 1:      'answer': '444',
854: 1:      'question': '123',
854: 1:      'valid': true
854: 1:    }
854: 1:  ],
854: 1:  'info': [
854: 1:    '✅f(1) = 2',
854: 1:    '✅f(2) = 4',
854: 1:    '✅f(3) = 6',
854: 1:    '✅f(4) = 8',
854: 1:    '✅f(5) = 11',
854: 1:    '✅f(6) = 33',
854: 1:    '✅f(7) = 55',
854: 1:    '✅f(9) = 99',
854: 1:    '✅f(10) = 11',
854: 1:    '✅f(11) = 22',
854: 1:    '✅f(12) = 33',
854: 1:    '✅f(123) = 444',
854: 1:    '❌f(234) = ??? != 666'
854: 1:  ],
854: 1:  'level': 30,
854: 1:  'nextQuestion': '234',
854: 1:  'questions': [
854: 1:    '1',
854: 1:    '2',
854: 1:    '3',
854: 1:    '4',
854: 1:    '5',
854: 1:    '6',
854: 1:    '7',
854: 1:    '9',
854: 1:    '10',
854: 1:    '11',
854: 1:    '12',
854: 1:    '123',
854: 1:    '234'
854: 1:  ]
854: 1:}
854: 1:Scores: 85599
854: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666']')
854: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
855: 1:BoardData {
855: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
855: 1:  'expectedAnswer': '888',
855: 1:  'history': [
855: 1:    {
855: 1:      'answer': '2',
855: 1:      'question': '1',
855: 1:      'valid': true
855: 1:    },
855: 1:    {
855: 1:      'answer': '4',
855: 1:      'question': '2',
855: 1:      'valid': true
855: 1:    },
855: 1:    {
855: 1:      'answer': '6',
855: 1:      'question': '3',
855: 1:      'valid': true
855: 1:    },
855: 1:    {
855: 1:      'answer': '8',
855: 1:      'question': '4',
855: 1:      'valid': true
855: 1:    },
855: 1:    {
855: 1:      'answer': '11',
855: 1:      'question': '5',
855: 1:      'valid': true
855: 1:    },
855: 1:    {
855: 1:      'answer': '33',
855: 1:      'question': '6',
855: 1:      'valid': true
855: 1:    },
855: 1:    {
855: 1:      'answer': '55',
855: 1:      'question': '7',
855: 1:      'valid': true
855: 1:    },
855: 1:    {
855: 1:      'answer': '99',
855: 1:      'question': '9',
855: 1:      'valid': true
855: 1:    },
855: 1:    {
855: 1:      'answer': '11',
855: 1:      'question': '10',
855: 1:      'valid': true
855: 1:    },
855: 1:    {
855: 1:      'answer': '22',
855: 1:      'question': '11',
855: 1:      'valid': true
855: 1:    },
855: 1:    {
855: 1:      'answer': '33',
855: 1:      'question': '12',
855: 1:      'valid': true
855: 1:    },
855: 1:    {
855: 1:      'answer': '444',
855: 1:      'question': '123',
855: 1:      'valid': true
855: 1:    },
855: 1:    {
855: 1:      'answer': '666',
855: 1:      'question': '234',
855: 1:      'valid': true
855: 1:    }
855: 1:  ],
855: 1:  'info': [
855: 1:    '✅f(1) = 2',
855: 1:    '✅f(2) = 4',
855: 1:    '✅f(3) = 6',
855: 1:    '✅f(4) = 8',
855: 1:    '✅f(5) = 11',
855: 1:    '✅f(6) = 33',
855: 1:    '✅f(7) = 55',
855: 1:    '✅f(9) = 99',
855: 1:    '✅f(10) = 11',
855: 1:    '✅f(11) = 22',
855: 1:    '✅f(12) = 33',
855: 1:    '✅f(123) = 444',
855: 1:    '✅f(234) = 666',
855: 1:    '❌f(345) = ??? != 888'
855: 1:  ],
855: 1:  'level': 30,
855: 1:  'nextQuestion': '345',
855: 1:  'questions': [
855: 1:    '1',
855: 1:    '2',
855: 1:    '3',
855: 1:    '4',
855: 1:    '5',
855: 1:    '6',
855: 1:    '7',
855: 1:    '9',
855: 1:    '10',
855: 1:    '11',
855: 1:    '12',
855: 1:    '123',
855: 1:    '234',
855: 1:    '345'
855: 1:  ]
855: 1:}
855: 1:Scores: 85613
855: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888']')
855: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
856: 1:BoardData {
856: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
856: 1:  'expectedAnswer': '1221',
856: 1:  'history': [
856: 1:    {
856: 1:      'answer': '2',
856: 1:      'question': '1',
856: 1:      'valid': true
856: 1:    },
856: 1:    {
856: 1:      'answer': '4',
856: 1:      'question': '2',
856: 1:      'valid': true
856: 1:    },
856: 1:    {
856: 1:      'answer': '6',
856: 1:      'question': '3',
856: 1:      'valid': true
856: 1:    },
856: 1:    {
856: 1:      'answer': '8',
856: 1:      'question': '4',
856: 1:      'valid': true
856: 1:    },
856: 1:    {
856: 1:      'answer': '11',
856: 1:      'question': '5',
856: 1:      'valid': true
856: 1:    },
856: 1:    {
856: 1:      'answer': '33',
856: 1:      'question': '6',
856: 1:      'valid': true
856: 1:    },
856: 1:    {
856: 1:      'answer': '55',
856: 1:      'question': '7',
856: 1:      'valid': true
856: 1:    },
856: 1:    {
856: 1:      'answer': '99',
856: 1:      'question': '9',
856: 1:      'valid': true
856: 1:    },
856: 1:    {
856: 1:      'answer': '11',
856: 1:      'question': '10',
856: 1:      'valid': true
856: 1:    },
856: 1:    {
856: 1:      'answer': '22',
856: 1:      'question': '11',
856: 1:      'valid': true
856: 1:    },
856: 1:    {
856: 1:      'answer': '33',
856: 1:      'question': '12',
856: 1:      'valid': true
856: 1:    },
856: 1:    {
856: 1:      'answer': '444',
856: 1:      'question': '123',
856: 1:      'valid': true
856: 1:    },
856: 1:    {
856: 1:      'answer': '666',
856: 1:      'question': '234',
856: 1:      'valid': true
856: 1:    },
856: 1:    {
856: 1:      'answer': '888',
856: 1:      'question': '345',
856: 1:      'valid': true
856: 1:    }
856: 1:  ],
856: 1:  'info': [
856: 1:    '✅f(1) = 2',
856: 1:    '✅f(2) = 4',
856: 1:    '✅f(3) = 6',
856: 1:    '✅f(4) = 8',
856: 1:    '✅f(5) = 11',
856: 1:    '✅f(6) = 33',
856: 1:    '✅f(7) = 55',
856: 1:    '✅f(9) = 99',
856: 1:    '✅f(10) = 11',
856: 1:    '✅f(11) = 22',
856: 1:    '✅f(12) = 33',
856: 1:    '✅f(123) = 444',
856: 1:    '✅f(234) = 666',
856: 1:    '✅f(345) = 888',
856: 1:    '❌f(456) = ??? != 1221'
856: 1:  ],
856: 1:  'level': 30,
856: 1:  'nextQuestion': '456',
856: 1:  'questions': [
856: 1:    '1',
856: 1:    '2',
856: 1:    '3',
856: 1:    '4',
856: 1:    '5',
856: 1:    '6',
856: 1:    '7',
856: 1:    '9',
856: 1:    '10',
856: 1:    '11',
856: 1:    '12',
856: 1:    '123',
856: 1:    '234',
856: 1:    '345',
856: 1:    '456'
856: 1:  ]
856: 1:}
856: 1:Scores: 85627
856: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221']')
856: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
857: 1:BoardData {
857: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
857: 1:  'expectedAnswer': '3663',
857: 1:  'history': [
857: 1:    {
857: 1:      'answer': '2',
857: 1:      'question': '1',
857: 1:      'valid': true
857: 1:    },
857: 1:    {
857: 1:      'answer': '4',
857: 1:      'question': '2',
857: 1:      'valid': true
857: 1:    },
857: 1:    {
857: 1:      'answer': '6',
857: 1:      'question': '3',
857: 1:      'valid': true
857: 1:    },
857: 1:    {
857: 1:      'answer': '8',
857: 1:      'question': '4',
857: 1:      'valid': true
857: 1:    },
857: 1:    {
857: 1:      'answer': '11',
857: 1:      'question': '5',
857: 1:      'valid': true
857: 1:    },
857: 1:    {
857: 1:      'answer': '33',
857: 1:      'question': '6',
857: 1:      'valid': true
857: 1:    },
857: 1:    {
857: 1:      'answer': '55',
857: 1:      'question': '7',
857: 1:      'valid': true
857: 1:    },
857: 1:    {
857: 1:      'answer': '99',
857: 1:      'question': '9',
857: 1:      'valid': true
857: 1:    },
857: 1:    {
857: 1:      'answer': '11',
857: 1:      'question': '10',
857: 1:      'valid': true
857: 1:    },
857: 1:    {
857: 1:      'answer': '22',
857: 1:      'question': '11',
857: 1:      'valid': true
857: 1:    },
857: 1:    {
857: 1:      'answer': '33',
857: 1:      'question': '12',
857: 1:      'valid': true
857: 1:    },
857: 1:    {
857: 1:      'answer': '444',
857: 1:      'question': '123',
857: 1:      'valid': true
857: 1:    },
857: 1:    {
857: 1:      'answer': '666',
857: 1:      'question': '234',
857: 1:      'valid': true
857: 1:    },
857: 1:    {
857: 1:      'answer': '888',
857: 1:      'question': '345',
857: 1:      'valid': true
857: 1:    },
857: 1:    {
857: 1:      'answer': '1221',
857: 1:      'question': '456',
857: 1:      'valid': true
857: 1:    }
857: 1:  ],
857: 1:  'info': [
857: 1:    '✅f(1) = 2',
857: 1:    '✅f(2) = 4',
857: 1:    '✅f(3) = 6',
857: 1:    '✅f(4) = 8',
857: 1:    '✅f(5) = 11',
857: 1:    '✅f(6) = 33',
857: 1:    '✅f(7) = 55',
857: 1:    '✅f(9) = 99',
857: 1:    '✅f(10) = 11',
857: 1:    '✅f(11) = 22',
857: 1:    '✅f(12) = 33',
857: 1:    '✅f(123) = 444',
857: 1:    '✅f(234) = 666',
857: 1:    '✅f(345) = 888',
857: 1:    '✅f(456) = 1221',
857: 1:    '❌f(567) = ??? != 3663'
857: 1:  ],
857: 1:  'level': 30,
857: 1:  'nextQuestion': '567',
857: 1:  'questions': [
857: 1:    '1',
857: 1:    '2',
857: 1:    '3',
857: 1:    '4',
857: 1:    '5',
857: 1:    '6',
857: 1:    '7',
857: 1:    '9',
857: 1:    '10',
857: 1:    '11',
857: 1:    '12',
857: 1:    '123',
857: 1:    '234',
857: 1:    '345',
857: 1:    '456',
857: 1:    '567'
857: 1:  ]
857: 1:}
857: 1:Scores: 85641
857: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663']')
857: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
858: 1:BoardData {
858: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
858: 1:  'expectedAnswer': '23232',
858: 1:  'history': [
858: 1:    {
858: 1:      'answer': '2',
858: 1:      'question': '1',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '4',
858: 1:      'question': '2',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '6',
858: 1:      'question': '3',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '8',
858: 1:      'question': '4',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '11',
858: 1:      'question': '5',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '33',
858: 1:      'question': '6',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '55',
858: 1:      'question': '7',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '99',
858: 1:      'question': '9',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '11',
858: 1:      'question': '10',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '22',
858: 1:      'question': '11',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '33',
858: 1:      'question': '12',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '444',
858: 1:      'question': '123',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '666',
858: 1:      'question': '234',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '888',
858: 1:      'question': '345',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '1221',
858: 1:      'question': '456',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '3663',
858: 1:      'question': '567',
858: 1:      'valid': true
858: 1:    }
858: 1:  ],
858: 1:  'info': [
858: 1:    '✅f(1) = 2',
858: 1:    '✅f(2) = 4',
858: 1:    '✅f(3) = 6',
858: 1:    '✅f(4) = 8',
858: 1:    '✅f(5) = 11',
858: 1:    '✅f(6) = 33',
858: 1:    '✅f(7) = 55',
858: 1:    '✅f(9) = 99',
858: 1:    '✅f(10) = 11',
858: 1:    '✅f(11) = 22',
858: 1:    '✅f(12) = 33',
858: 1:    '✅f(123) = 444',
858: 1:    '✅f(234) = 666',
858: 1:    '✅f(345) = 888',
858: 1:    '✅f(456) = 1221',
858: 1:    '✅f(567) = 3663',
858: 1:    '❌f(678) = ??? != 23232'
858: 1:  ],
858: 1:  'level': 30,
858: 1:  'nextQuestion': '678',
858: 1:  'questions': [
858: 1:    '1',
858: 1:    '2',
858: 1:    '3',
858: 1:    '4',
858: 1:    '5',
858: 1:    '6',
858: 1:    '7',
858: 1:    '9',
858: 1:    '10',
858: 1:    '11',
858: 1:    '12',
858: 1:    '123',
858: 1:    '234',
858: 1:    '345',
858: 1:    '456',
858: 1:    '567',
858: 1:    '678'
858: 1:  ]
858: 1:}
858: 1:Scores: 85655
858: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232']')
858: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
859: 1:BoardData {
859: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
859: 1:  'expectedAnswer': '66066',
859: 1:  'history': [
859: 1:    {
859: 1:      'answer': '2',
859: 1:      'question': '1',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '4',
859: 1:      'question': '2',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '6',
859: 1:      'question': '3',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '8',
859: 1:      'question': '4',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '11',
859: 1:      'question': '5',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '33',
859: 1:      'question': '6',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '55',
859: 1:      'question': '7',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '99',
859: 1:      'question': '9',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '11',
859: 1:      'question': '10',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '22',
859: 1:      'question': '11',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '33',
859: 1:      'question': '12',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '444',
859: 1:      'question': '123',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '666',
859: 1:      'question': '234',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '888',
859: 1:      'question': '345',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '1221',
859: 1:      'question': '456',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '3663',
859: 1:      'question': '567',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '23232',
859: 1:      'question': '678',
859: 1:      'valid': true
859: 1:    }
859: 1:  ],
859: 1:  'info': [
859: 1:    '✅f(1) = 2',
859: 1:    '✅f(2) = 4',
859: 1:    '✅f(3) = 6',
859: 1:    '✅f(4) = 8',
859: 1:    '✅f(5) = 11',
859: 1:    '✅f(6) = 33',
859: 1:    '✅f(7) = 55',
859: 1:    '✅f(9) = 99',
859: 1:    '✅f(10) = 11',
859: 1:    '✅f(11) = 22',
859: 1:    '✅f(12) = 33',
859: 1:    '✅f(123) = 444',
859: 1:    '✅f(234) = 666',
859: 1:    '✅f(345) = 888',
859: 1:    '✅f(456) = 1221',
859: 1:    '✅f(567) = 3663',
859: 1:    '✅f(678) = 23232',
859: 1:    '❌f(789) = ??? != 66066'
859: 1:  ],
859: 1:  'level': 30,
859: 1:  'nextQuestion': '789',
859: 1:  'questions': [
859: 1:    '1',
859: 1:    '2',
859: 1:    '3',
859: 1:    '4',
859: 1:    '5',
859: 1:    '6',
859: 1:    '7',
859: 1:    '9',
859: 1:    '10',
859: 1:    '11',
859: 1:    '12',
859: 1:    '123',
859: 1:    '234',
859: 1:    '345',
859: 1:    '456',
859: 1:    '567',
859: 1:    '678',
859: 1:    '789'
859: 1:  ]
859: 1:}
859: 1:Scores: 85669
859: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066']')
859: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
860: 1:BoardData {
860: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
860: 1:  'expectedAnswer': '5555',
860: 1:  'history': [
860: 1:    {
860: 1:      'answer': '2',
860: 1:      'question': '1',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '4',
860: 1:      'question': '2',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '6',
860: 1:      'question': '3',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '8',
860: 1:      'question': '4',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '11',
860: 1:      'question': '5',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '33',
860: 1:      'question': '6',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '55',
860: 1:      'question': '7',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '99',
860: 1:      'question': '9',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '11',
860: 1:      'question': '10',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '22',
860: 1:      'question': '11',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '33',
860: 1:      'question': '12',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '444',
860: 1:      'question': '123',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '666',
860: 1:      'question': '234',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '888',
860: 1:      'question': '345',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '1221',
860: 1:      'question': '456',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '3663',
860: 1:      'question': '567',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '23232',
860: 1:      'question': '678',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '66066',
860: 1:      'question': '789',
860: 1:      'valid': true
860: 1:    }
860: 1:  ],
860: 1:  'info': [
860: 1:    '✅f(1) = 2',
860: 1:    '✅f(2) = 4',
860: 1:    '✅f(3) = 6',
860: 1:    '✅f(4) = 8',
860: 1:    '✅f(5) = 11',
860: 1:    '✅f(6) = 33',
860: 1:    '✅f(7) = 55',
860: 1:    '✅f(9) = 99',
860: 1:    '✅f(10) = 11',
860: 1:    '✅f(11) = 22',
860: 1:    '✅f(12) = 33',
860: 1:    '✅f(123) = 444',
860: 1:    '✅f(234) = 666',
860: 1:    '✅f(345) = 888',
860: 1:    '✅f(456) = 1221',
860: 1:    '✅f(567) = 3663',
860: 1:    '✅f(678) = 23232',
860: 1:    '✅f(789) = 66066',
860: 1:    '❌f(1234) = ??? != 5555'
860: 1:  ],
860: 1:  'level': 30,
860: 1:  'nextQuestion': '1234',
860: 1:  'questions': [
860: 1:    '1',
860: 1:    '2',
860: 1:    '3',
860: 1:    '4',
860: 1:    '5',
860: 1:    '6',
860: 1:    '7',
860: 1:    '9',
860: 1:    '10',
860: 1:    '11',
860: 1:    '12',
860: 1:    '123',
860: 1:    '234',
860: 1:    '345',
860: 1:    '456',
860: 1:    '567',
860: 1:    '678',
860: 1:    '789',
860: 1:    '1234'
860: 1:  ]
860: 1:}
860: 1:Scores: 85683
860: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555']')
860: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
861: 1:BoardData {
861: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
861: 1:  'expectedAnswer': '7777',
861: 1:  'history': [
861: 1:    {
861: 1:      'answer': '2',
861: 1:      'question': '1',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '4',
861: 1:      'question': '2',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '6',
861: 1:      'question': '3',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '8',
861: 1:      'question': '4',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '11',
861: 1:      'question': '5',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '33',
861: 1:      'question': '6',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '55',
861: 1:      'question': '7',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '99',
861: 1:      'question': '9',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '11',
861: 1:      'question': '10',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '22',
861: 1:      'question': '11',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '33',
861: 1:      'question': '12',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '444',
861: 1:      'question': '123',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '666',
861: 1:      'question': '234',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '888',
861: 1:      'question': '345',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '1221',
861: 1:      'question': '456',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '3663',
861: 1:      'question': '567',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '23232',
861: 1:      'question': '678',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '66066',
861: 1:      'question': '789',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '5555',
861: 1:      'question': '1234',
861: 1:      'valid': true
861: 1:    }
861: 1:  ],
861: 1:  'info': [
861: 1:    '✅f(1) = 2',
861: 1:    '✅f(2) = 4',
861: 1:    '✅f(3) = 6',
861: 1:    '✅f(4) = 8',
861: 1:    '✅f(5) = 11',
861: 1:    '✅f(6) = 33',
861: 1:    '✅f(7) = 55',
861: 1:    '✅f(9) = 99',
861: 1:    '✅f(10) = 11',
861: 1:    '✅f(11) = 22',
861: 1:    '✅f(12) = 33',
861: 1:    '✅f(123) = 444',
861: 1:    '✅f(234) = 666',
861: 1:    '✅f(345) = 888',
861: 1:    '✅f(456) = 1221',
861: 1:    '✅f(567) = 3663',
861: 1:    '✅f(678) = 23232',
861: 1:    '✅f(789) = 66066',
861: 1:    '✅f(1234) = 5555',
861: 1:    '❌f(2345) = ??? != 7777'
861: 1:  ],
861: 1:  'level': 30,
861: 1:  'nextQuestion': '2345',
861: 1:  'questions': [
861: 1:    '1',
861: 1:    '2',
861: 1:    '3',
861: 1:    '4',
861: 1:    '5',
861: 1:    '6',
861: 1:    '7',
861: 1:    '9',
861: 1:    '10',
861: 1:    '11',
861: 1:    '12',
861: 1:    '123',
861: 1:    '234',
861: 1:    '345',
861: 1:    '456',
861: 1:    '567',
861: 1:    '678',
861: 1:    '789',
861: 1:    '1234',
861: 1:    '2345'
861: 1:  ]
861: 1:}
861: 1:Scores: 85697
861: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777']')
861: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
862: 1:BoardData {
862: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
862: 1:  'expectedAnswer': '9999',
862: 1:  'history': [
862: 1:    {
862: 1:      'answer': '2',
862: 1:      'question': '1',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '4',
862: 1:      'question': '2',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '6',
862: 1:      'question': '3',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '8',
862: 1:      'question': '4',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '11',
862: 1:      'question': '5',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '33',
862: 1:      'question': '6',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '55',
862: 1:      'question': '7',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '99',
862: 1:      'question': '9',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '11',
862: 1:      'question': '10',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '22',
862: 1:      'question': '11',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '33',
862: 1:      'question': '12',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '444',
862: 1:      'question': '123',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '666',
862: 1:      'question': '234',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '888',
862: 1:      'question': '345',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '1221',
862: 1:      'question': '456',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '3663',
862: 1:      'question': '567',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '23232',
862: 1:      'question': '678',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '66066',
862: 1:      'question': '789',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '5555',
862: 1:      'question': '1234',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '7777',
862: 1:      'question': '2345',
862: 1:      'valid': true
862: 1:    }
862: 1:  ],
862: 1:  'info': [
862: 1:    '✅f(1) = 2',
862: 1:    '✅f(2) = 4',
862: 1:    '✅f(3) = 6',
862: 1:    '✅f(4) = 8',
862: 1:    '✅f(5) = 11',
862: 1:    '✅f(6) = 33',
862: 1:    '✅f(7) = 55',
862: 1:    '✅f(9) = 99',
862: 1:    '✅f(10) = 11',
862: 1:    '✅f(11) = 22',
862: 1:    '✅f(12) = 33',
862: 1:    '✅f(123) = 444',
862: 1:    '✅f(234) = 666',
862: 1:    '✅f(345) = 888',
862: 1:    '✅f(456) = 1221',
862: 1:    '✅f(567) = 3663',
862: 1:    '✅f(678) = 23232',
862: 1:    '✅f(789) = 66066',
862: 1:    '✅f(1234) = 5555',
862: 1:    '✅f(2345) = 7777',
862: 1:    '❌f(3456) = ??? != 9999'
862: 1:  ],
862: 1:  'level': 30,
862: 1:  'nextQuestion': '3456',
862: 1:  'questions': [
862: 1:    '1',
862: 1:    '2',
862: 1:    '3',
862: 1:    '4',
862: 1:    '5',
862: 1:    '6',
862: 1:    '7',
862: 1:    '9',
862: 1:    '10',
862: 1:    '11',
862: 1:    '12',
862: 1:    '123',
862: 1:    '234',
862: 1:    '345',
862: 1:    '456',
862: 1:    '567',
862: 1:    '678',
862: 1:    '789',
862: 1:    '1234',
862: 1:    '2345',
862: 1:    '3456'
862: 1:  ]
862: 1:}
862: 1:Scores: 85711
862: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999']')
862: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
863: 1:BoardData {
863: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
863: 1:  'expectedAnswer': '12221',
863: 1:  'history': [
863: 1:    {
863: 1:      'answer': '2',
863: 1:      'question': '1',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '4',
863: 1:      'question': '2',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '6',
863: 1:      'question': '3',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '8',
863: 1:      'question': '4',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '11',
863: 1:      'question': '5',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '33',
863: 1:      'question': '6',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '55',
863: 1:      'question': '7',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '99',
863: 1:      'question': '9',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '11',
863: 1:      'question': '10',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '22',
863: 1:      'question': '11',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '33',
863: 1:      'question': '12',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '444',
863: 1:      'question': '123',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '666',
863: 1:      'question': '234',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '888',
863: 1:      'question': '345',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '1221',
863: 1:      'question': '456',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '3663',
863: 1:      'question': '567',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '23232',
863: 1:      'question': '678',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '66066',
863: 1:      'question': '789',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '5555',
863: 1:      'question': '1234',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '7777',
863: 1:      'question': '2345',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '9999',
863: 1:      'question': '3456',
863: 1:      'valid': true
863: 1:    }
863: 1:  ],
863: 1:  'info': [
863: 1:    '✅f(1) = 2',
863: 1:    '✅f(2) = 4',
863: 1:    '✅f(3) = 6',
863: 1:    '✅f(4) = 8',
863: 1:    '✅f(5) = 11',
863: 1:    '✅f(6) = 33',
863: 1:    '✅f(7) = 55',
863: 1:    '✅f(9) = 99',
863: 1:    '✅f(10) = 11',
863: 1:    '✅f(11) = 22',
863: 1:    '✅f(12) = 33',
863: 1:    '✅f(123) = 444',
863: 1:    '✅f(234) = 666',
863: 1:    '✅f(345) = 888',
863: 1:    '✅f(456) = 1221',
863: 1:    '✅f(567) = 3663',
863: 1:    '✅f(678) = 23232',
863: 1:    '✅f(789) = 66066',
863: 1:    '✅f(1234) = 5555',
863: 1:    '✅f(2345) = 7777',
863: 1:    '✅f(3456) = 9999',
863: 1:    '❌f(4567) = ??? != 12221'
863: 1:  ],
863: 1:  'level': 30,
863: 1:  'nextQuestion': '4567',
863: 1:  'questions': [
863: 1:    '1',
863: 1:    '2',
863: 1:    '3',
863: 1:    '4',
863: 1:    '5',
863: 1:    '6',
863: 1:    '7',
863: 1:    '9',
863: 1:    '10',
863: 1:    '11',
863: 1:    '12',
863: 1:    '123',
863: 1:    '234',
863: 1:    '345',
863: 1:    '456',
863: 1:    '567',
863: 1:    '678',
863: 1:    '789',
863: 1:    '1234',
863: 1:    '2345',
863: 1:    '3456',
863: 1:    '4567'
863: 1:  ]
863: 1:}
863: 1:Scores: 85725
863: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221']')
863: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
864: 1:BoardData {
864: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
864: 1:  'expectedAnswer': '48884',
864: 1:  'history': [
864: 1:    {
864: 1:      'answer': '2',
864: 1:      'question': '1',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '4',
864: 1:      'question': '2',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '6',
864: 1:      'question': '3',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '8',
864: 1:      'question': '4',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '11',
864: 1:      'question': '5',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '33',
864: 1:      'question': '6',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '55',
864: 1:      'question': '7',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '99',
864: 1:      'question': '9',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '11',
864: 1:      'question': '10',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '22',
864: 1:      'question': '11',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '33',
864: 1:      'question': '12',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '444',
864: 1:      'question': '123',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '666',
864: 1:      'question': '234',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '888',
864: 1:      'question': '345',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '1221',
864: 1:      'question': '456',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '3663',
864: 1:      'question': '567',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '23232',
864: 1:      'question': '678',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '66066',
864: 1:      'question': '789',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '5555',
864: 1:      'question': '1234',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '7777',
864: 1:      'question': '2345',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '9999',
864: 1:      'question': '3456',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '12221',
864: 1:      'question': '4567',
864: 1:      'valid': true
864: 1:    }
864: 1:  ],
864: 1:  'info': [
864: 1:    '✅f(1) = 2',
864: 1:    '✅f(2) = 4',
864: 1:    '✅f(3) = 6',
864: 1:    '✅f(4) = 8',
864: 1:    '✅f(5) = 11',
864: 1:    '✅f(6) = 33',
864: 1:    '✅f(7) = 55',
864: 1:    '✅f(9) = 99',
864: 1:    '✅f(10) = 11',
864: 1:    '✅f(11) = 22',
864: 1:    '✅f(12) = 33',
864: 1:    '✅f(123) = 444',
864: 1:    '✅f(234) = 666',
864: 1:    '✅f(345) = 888',
864: 1:    '✅f(456) = 1221',
864: 1:    '✅f(567) = 3663',
864: 1:    '✅f(678) = 23232',
864: 1:    '✅f(789) = 66066',
864: 1:    '✅f(1234) = 5555',
864: 1:    '✅f(2345) = 7777',
864: 1:    '✅f(3456) = 9999',
864: 1:    '✅f(4567) = 12221',
864: 1:    '❌f(5678) = ??? != 48884'
864: 1:  ],
864: 1:  'level': 30,
864: 1:  'nextQuestion': '5678',
864: 1:  'questions': [
864: 1:    '1',
864: 1:    '2',
864: 1:    '3',
864: 1:    '4',
864: 1:    '5',
864: 1:    '6',
864: 1:    '7',
864: 1:    '9',
864: 1:    '10',
864: 1:    '11',
864: 1:    '12',
864: 1:    '123',
864: 1:    '234',
864: 1:    '345',
864: 1:    '456',
864: 1:    '567',
864: 1:    '678',
864: 1:    '789',
864: 1:    '1234',
864: 1:    '2345',
864: 1:    '3456',
864: 1:    '4567',
864: 1:    '5678'
864: 1:  ]
864: 1:}
864: 1:Scores: 85739
864: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221', '48884']')
864: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
865: 1:BoardData {
865: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
865: 1:  'expectedAnswer': '993399',
865: 1:  'history': [
865: 1:    {
865: 1:      'answer': '2',
865: 1:      'question': '1',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '4',
865: 1:      'question': '2',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '6',
865: 1:      'question': '3',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '8',
865: 1:      'question': '4',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '11',
865: 1:      'question': '5',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '33',
865: 1:      'question': '6',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '55',
865: 1:      'question': '7',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '99',
865: 1:      'question': '9',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '11',
865: 1:      'question': '10',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '22',
865: 1:      'question': '11',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '33',
865: 1:      'question': '12',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '444',
865: 1:      'question': '123',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '666',
865: 1:      'question': '234',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '888',
865: 1:      'question': '345',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '1221',
865: 1:      'question': '456',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '3663',
865: 1:      'question': '567',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '23232',
865: 1:      'question': '678',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '66066',
865: 1:      'question': '789',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '5555',
865: 1:      'question': '1234',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '7777',
865: 1:      'question': '2345',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '9999',
865: 1:      'question': '3456',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '12221',
865: 1:      'question': '4567',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '48884',
865: 1:      'question': '5678',
865: 1:      'valid': true
865: 1:    }
865: 1:  ],
865: 1:  'info': [
865: 1:    '✅f(1) = 2',
865: 1:    '✅f(2) = 4',
865: 1:    '✅f(3) = 6',
865: 1:    '✅f(4) = 8',
865: 1:    '✅f(5) = 11',
865: 1:    '✅f(6) = 33',
865: 1:    '✅f(7) = 55',
865: 1:    '✅f(9) = 99',
865: 1:    '✅f(10) = 11',
865: 1:    '✅f(11) = 22',
865: 1:    '✅f(12) = 33',
865: 1:    '✅f(123) = 444',
865: 1:    '✅f(234) = 666',
865: 1:    '✅f(345) = 888',
865: 1:    '✅f(456) = 1221',
865: 1:    '✅f(567) = 3663',
865: 1:    '✅f(678) = 23232',
865: 1:    '✅f(789) = 66066',
865: 1:    '✅f(1234) = 5555',
865: 1:    '✅f(2345) = 7777',
865: 1:    '✅f(3456) = 9999',
865: 1:    '✅f(4567) = 12221',
865: 1:    '✅f(5678) = 48884',
865: 1:    '❌f(6789) = ??? != 993399'
865: 1:  ],
865: 1:  'level': 30,
865: 1:  'nextQuestion': '6789',
865: 1:  'questions': [
865: 1:    '1',
865: 1:    '2',
865: 1:    '3',
865: 1:    '4',
865: 1:    '5',
865: 1:    '6',
865: 1:    '7',
865: 1:    '9',
865: 1:    '10',
865: 1:    '11',
865: 1:    '12',
865: 1:    '123',
865: 1:    '234',
865: 1:    '345',
865: 1:    '456',
865: 1:    '567',
865: 1:    '678',
865: 1:    '789',
865: 1:    '1234',
865: 1:    '2345',
865: 1:    '3456',
865: 1:    '4567',
865: 1:    '5678',
865: 1:    '6789'
865: 1:  ]
865: 1:}
865: 1:Scores: 85753
865: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221', '48884', '993399']')
865: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
866: 1:BoardData {
866: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
866: 1:  'expectedAnswer': '993399',
866: 1:  'history': [
866: 1:    {
866: 1:      'answer': '2',
866: 1:      'question': '1',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '4',
866: 1:      'question': '2',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '6',
866: 1:      'question': '3',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '8',
866: 1:      'question': '4',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '11',
866: 1:      'question': '5',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '33',
866: 1:      'question': '6',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '55',
866: 1:      'question': '7',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '99',
866: 1:      'question': '9',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '11',
866: 1:      'question': '10',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '22',
866: 1:      'question': '11',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '33',
866: 1:      'question': '12',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '444',
866: 1:      'question': '123',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '666',
866: 1:      'question': '234',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '888',
866: 1:      'question': '345',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '1221',
866: 1:      'question': '456',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '3663',
866: 1:      'question': '567',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '23232',
866: 1:      'question': '678',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '66066',
866: 1:      'question': '789',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '5555',
866: 1:      'question': '1234',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '7777',
866: 1:      'question': '2345',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '9999',
866: 1:      'question': '3456',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '12221',
866: 1:      'question': '4567',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '48884',
866: 1:      'question': '5678',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '993399',
866: 1:      'question': '6789',
866: 1:      'valid': true
866: 1:    }
866: 1:  ],
866: 1:  'info': [
866: 1:    '✅f(1) = 2',
866: 1:    '✅f(2) = 4',
866: 1:    '✅f(3) = 6',
866: 1:    '✅f(4) = 8',
866: 1:    '✅f(5) = 11',
866: 1:    '✅f(6) = 33',
866: 1:    '✅f(7) = 55',
866: 1:    '✅f(9) = 99',
866: 1:    '✅f(10) = 11',
866: 1:    '✅f(11) = 22',
866: 1:    '✅f(12) = 33',
866: 1:    '✅f(123) = 444',
866: 1:    '✅f(234) = 666',
866: 1:    '✅f(345) = 888',
866: 1:    '✅f(456) = 1221',
866: 1:    '✅f(567) = 3663',
866: 1:    '✅f(678) = 23232',
866: 1:    '✅f(789) = 66066',
866: 1:    '✅f(1234) = 5555',
866: 1:    '✅f(2345) = 7777',
866: 1:    '✅f(3456) = 9999',
866: 1:    '✅f(4567) = 12221',
866: 1:    '✅f(5678) = 48884',
866: 1:    '✅f(6789) = 993399',
866: 1:    '❌f(7890) = ??? != 993399'
866: 1:  ],
866: 1:  'level': 30,
866: 1:  'nextQuestion': '7890',
866: 1:  'questions': [
866: 1:    '1',
866: 1:    '2',
866: 1:    '3',
866: 1:    '4',
866: 1:    '5',
866: 1:    '6',
866: 1:    '7',
866: 1:    '9',
866: 1:    '10',
866: 1:    '11',
866: 1:    '12',
866: 1:    '123',
866: 1:    '234',
866: 1:    '345',
866: 1:    '456',
866: 1:    '567',
866: 1:    '678',
866: 1:    '789',
866: 1:    '1234',
866: 1:    '2345',
866: 1:    '3456',
866: 1:    '4567',
866: 1:    '5678',
866: 1:    '6789',
866: 1:    '7890'
866: 1:  ]
866: 1:}
866: 1:Scores: 85767
866: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221', '48884', '993399', '993399']')
866: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
867: 1:BoardData {
867: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
867: 1:  'expectedAnswer': '66666',
867: 1:  'history': [
867: 1:    {
867: 1:      'answer': '2',
867: 1:      'question': '1',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '4',
867: 1:      'question': '2',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '6',
867: 1:      'question': '3',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '8',
867: 1:      'question': '4',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '11',
867: 1:      'question': '5',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '33',
867: 1:      'question': '6',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '55',
867: 1:      'question': '7',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '99',
867: 1:      'question': '9',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '11',
867: 1:      'question': '10',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '22',
867: 1:      'question': '11',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '33',
867: 1:      'question': '12',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '444',
867: 1:      'question': '123',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '666',
867: 1:      'question': '234',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '888',
867: 1:      'question': '345',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '1221',
867: 1:      'question': '456',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '3663',
867: 1:      'question': '567',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '23232',
867: 1:      'question': '678',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '66066',
867: 1:      'question': '789',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '5555',
867: 1:      'question': '1234',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '7777',
867: 1:      'question': '2345',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '9999',
867: 1:      'question': '3456',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '12221',
867: 1:      'question': '4567',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '48884',
867: 1:      'question': '5678',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '993399',
867: 1:      'question': '6789',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '993399',
867: 1:      'question': '7890',
867: 1:      'valid': true
867: 1:    }
867: 1:  ],
867: 1:  'info': [
867: 1:    '✅f(1) = 2',
867: 1:    '✅f(2) = 4',
867: 1:    '✅f(3) = 6',
867: 1:    '✅f(4) = 8',
867: 1:    '✅f(5) = 11',
867: 1:    '✅f(6) = 33',
867: 1:    '✅f(7) = 55',
867: 1:    '✅f(9) = 99',
867: 1:    '✅f(10) = 11',
867: 1:    '✅f(11) = 22',
867: 1:    '✅f(12) = 33',
867: 1:    '✅f(123) = 444',
867: 1:    '✅f(234) = 666',
867: 1:    '✅f(345) = 888',
867: 1:    '✅f(456) = 1221',
867: 1:    '✅f(567) = 3663',
867: 1:    '✅f(678) = 23232',
867: 1:    '✅f(789) = 66066',
867: 1:    '✅f(1234) = 5555',
867: 1:    '✅f(2345) = 7777',
867: 1:    '✅f(3456) = 9999',
867: 1:    '✅f(4567) = 12221',
867: 1:    '✅f(5678) = 48884',
867: 1:    '✅f(6789) = 993399',
867: 1:    '✅f(7890) = 993399',
867: 1:    '❌f(12345) = ??? != 66666'
867: 1:  ],
867: 1:  'level': 30,
867: 1:  'nextQuestion': '12345',
867: 1:  'questions': [
867: 1:    '1',
867: 1:    '2',
867: 1:    '3',
867: 1:    '4',
867: 1:    '5',
867: 1:    '6',
867: 1:    '7',
867: 1:    '9',
867: 1:    '10',
867: 1:    '11',
867: 1:    '12',
867: 1:    '123',
867: 1:    '234',
867: 1:    '345',
867: 1:    '456',
867: 1:    '567',
867: 1:    '678',
867: 1:    '789',
867: 1:    '1234',
867: 1:    '2345',
867: 1:    '3456',
867: 1:    '4567',
867: 1:    '5678',
867: 1:    '6789',
867: 1:    '7890',
867: 1:    '12345'
867: 1:  ]
867: 1:}
867: 1:Scores: 85781
867: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221', '48884', '993399', '993399', '66666']')
867: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
868: 1:BoardData {
868: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
868: 1:  'expectedAnswer': '777777',
868: 1:  'history': [
868: 1:    {
868: 1:      'answer': '2',
868: 1:      'question': '1',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '4',
868: 1:      'question': '2',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '6',
868: 1:      'question': '3',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '8',
868: 1:      'question': '4',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '11',
868: 1:      'question': '5',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '33',
868: 1:      'question': '6',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '55',
868: 1:      'question': '7',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '99',
868: 1:      'question': '9',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '11',
868: 1:      'question': '10',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '22',
868: 1:      'question': '11',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '33',
868: 1:      'question': '12',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '444',
868: 1:      'question': '123',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '666',
868: 1:      'question': '234',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '888',
868: 1:      'question': '345',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '1221',
868: 1:      'question': '456',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '3663',
868: 1:      'question': '567',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '23232',
868: 1:      'question': '678',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '66066',
868: 1:      'question': '789',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '5555',
868: 1:      'question': '1234',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '7777',
868: 1:      'question': '2345',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '9999',
868: 1:      'question': '3456',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '12221',
868: 1:      'question': '4567',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '48884',
868: 1:      'question': '5678',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '993399',
868: 1:      'question': '6789',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '993399',
868: 1:      'question': '7890',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '66666',
868: 1:      'question': '12345',
868: 1:      'valid': true
868: 1:    }
868: 1:  ],
868: 1:  'info': [
868: 1:    '✅f(1) = 2',
868: 1:    '✅f(2) = 4',
868: 1:    '✅f(3) = 6',
868: 1:    '✅f(4) = 8',
868: 1:    '✅f(5) = 11',
868: 1:    '✅f(6) = 33',
868: 1:    '✅f(7) = 55',
868: 1:    '✅f(9) = 99',
868: 1:    '✅f(10) = 11',
868: 1:    '✅f(11) = 22',
868: 1:    '✅f(12) = 33',
868: 1:    '✅f(123) = 444',
868: 1:    '✅f(234) = 666',
868: 1:    '✅f(345) = 888',
868: 1:    '✅f(456) = 1221',
868: 1:    '✅f(567) = 3663',
868: 1:    '✅f(678) = 23232',
868: 1:    '✅f(789) = 66066',
868: 1:    '✅f(1234) = 5555',
868: 1:    '✅f(2345) = 7777',
868: 1:    '✅f(3456) = 9999',
868: 1:    '✅f(4567) = 12221',
868: 1:    '✅f(5678) = 48884',
868: 1:    '✅f(6789) = 993399',
868: 1:    '✅f(7890) = 993399',
868: 1:    '✅f(12345) = 66666',
868: 1:    '❌f(123456) = ??? != 777777'
868: 1:  ],
868: 1:  'level': 30,
868: 1:  'nextQuestion': '123456',
868: 1:  'questions': [
868: 1:    '1',
868: 1:    '2',
868: 1:    '3',
868: 1:    '4',
868: 1:    '5',
868: 1:    '6',
868: 1:    '7',
868: 1:    '9',
868: 1:    '10',
868: 1:    '11',
868: 1:    '12',
868: 1:    '123',
868: 1:    '234',
868: 1:    '345',
868: 1:    '456',
868: 1:    '567',
868: 1:    '678',
868: 1:    '789',
868: 1:    '1234',
868: 1:    '2345',
868: 1:    '3456',
868: 1:    '4567',
868: 1:    '5678',
868: 1:    '6789',
868: 1:    '7890',
868: 1:    '12345',
868: 1:    '123456'
868: 1:  ]
868: 1:}
868: 1:Scores: 85795
868: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221', '48884', '993399', '993399', '66666', '777777']')
868: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
869: 1:BoardData {
869: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
869: 1:  'expectedAnswer': '8888888',
869: 1:  'history': [
869: 1:    {
869: 1:      'answer': '2',
869: 1:      'question': '1',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '4',
869: 1:      'question': '2',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '6',
869: 1:      'question': '3',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '8',
869: 1:      'question': '4',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '11',
869: 1:      'question': '5',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '33',
869: 1:      'question': '6',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '55',
869: 1:      'question': '7',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '99',
869: 1:      'question': '9',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '11',
869: 1:      'question': '10',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '22',
869: 1:      'question': '11',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '33',
869: 1:      'question': '12',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '444',
869: 1:      'question': '123',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '666',
869: 1:      'question': '234',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '888',
869: 1:      'question': '345',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '1221',
869: 1:      'question': '456',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '3663',
869: 1:      'question': '567',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '23232',
869: 1:      'question': '678',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '66066',
869: 1:      'question': '789',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '5555',
869: 1:      'question': '1234',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '7777',
869: 1:      'question': '2345',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '9999',
869: 1:      'question': '3456',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '12221',
869: 1:      'question': '4567',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '48884',
869: 1:      'question': '5678',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '993399',
869: 1:      'question': '6789',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '993399',
869: 1:      'question': '7890',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '66666',
869: 1:      'question': '12345',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '777777',
869: 1:      'question': '123456',
869: 1:      'valid': true
869: 1:    }
869: 1:  ],
869: 1:  'info': [
869: 1:    '✅f(1) = 2',
869: 1:    '✅f(2) = 4',
869: 1:    '✅f(3) = 6',
869: 1:    '✅f(4) = 8',
869: 1:    '✅f(5) = 11',
869: 1:    '✅f(6) = 33',
869: 1:    '✅f(7) = 55',
869: 1:    '✅f(9) = 99',
869: 1:    '✅f(10) = 11',
869: 1:    '✅f(11) = 22',
869: 1:    '✅f(12) = 33',
869: 1:    '✅f(123) = 444',
869: 1:    '✅f(234) = 666',
869: 1:    '✅f(345) = 888',
869: 1:    '✅f(456) = 1221',
869: 1:    '✅f(567) = 3663',
869: 1:    '✅f(678) = 23232',
869: 1:    '✅f(789) = 66066',
869: 1:    '✅f(1234) = 5555',
869: 1:    '✅f(2345) = 7777',
869: 1:    '✅f(3456) = 9999',
869: 1:    '✅f(4567) = 12221',
869: 1:    '✅f(5678) = 48884',
869: 1:    '✅f(6789) = 993399',
869: 1:    '✅f(7890) = 993399',
869: 1:    '✅f(12345) = 66666',
869: 1:    '✅f(123456) = 777777',
869: 1:    '❌f(1234567) = ??? != 8888888'
869: 1:  ],
869: 1:  'level': 30,
869: 1:  'nextQuestion': '1234567',
869: 1:  'questions': [
869: 1:    '1',
869: 1:    '2',
869: 1:    '3',
869: 1:    '4',
869: 1:    '5',
869: 1:    '6',
869: 1:    '7',
869: 1:    '9',
869: 1:    '10',
869: 1:    '11',
869: 1:    '12',
869: 1:    '123',
869: 1:    '234',
869: 1:    '345',
869: 1:    '456',
869: 1:    '567',
869: 1:    '678',
869: 1:    '789',
869: 1:    '1234',
869: 1:    '2345',
869: 1:    '3456',
869: 1:    '4567',
869: 1:    '5678',
869: 1:    '6789',
869: 1:    '7890',
869: 1:    '12345',
869: 1:    '123456',
869: 1:    '1234567'
869: 1:  ]
869: 1:}
869: 1:Scores: 85809
869: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221', '48884', '993399', '993399', '66666', '777777', '8888888']')
869: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
870: 1:BoardData {
870: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
870: 1:  'expectedAnswer': '99999999',
870: 1:  'history': [
870: 1:    {
870: 1:      'answer': '2',
870: 1:      'question': '1',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '4',
870: 1:      'question': '2',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '6',
870: 1:      'question': '3',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '8',
870: 1:      'question': '4',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '11',
870: 1:      'question': '5',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '33',
870: 1:      'question': '6',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '55',
870: 1:      'question': '7',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '99',
870: 1:      'question': '9',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '11',
870: 1:      'question': '10',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '22',
870: 1:      'question': '11',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '33',
870: 1:      'question': '12',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '444',
870: 1:      'question': '123',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '666',
870: 1:      'question': '234',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '888',
870: 1:      'question': '345',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '1221',
870: 1:      'question': '456',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '3663',
870: 1:      'question': '567',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '23232',
870: 1:      'question': '678',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '66066',
870: 1:      'question': '789',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '5555',
870: 1:      'question': '1234',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '7777',
870: 1:      'question': '2345',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '9999',
870: 1:      'question': '3456',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '12221',
870: 1:      'question': '4567',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '48884',
870: 1:      'question': '5678',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '993399',
870: 1:      'question': '6789',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '993399',
870: 1:      'question': '7890',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '66666',
870: 1:      'question': '12345',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '777777',
870: 1:      'question': '123456',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '8888888',
870: 1:      'question': '1234567',
870: 1:      'valid': true
870: 1:    }
870: 1:  ],
870: 1:  'info': [
870: 1:    '✅f(1) = 2',
870: 1:    '✅f(2) = 4',
870: 1:    '✅f(3) = 6',
870: 1:    '✅f(4) = 8',
870: 1:    '✅f(5) = 11',
870: 1:    '✅f(6) = 33',
870: 1:    '✅f(7) = 55',
870: 1:    '✅f(9) = 99',
870: 1:    '✅f(10) = 11',
870: 1:    '✅f(11) = 22',
870: 1:    '✅f(12) = 33',
870: 1:    '✅f(123) = 444',
870: 1:    '✅f(234) = 666',
870: 1:    '✅f(345) = 888',
870: 1:    '✅f(456) = 1221',
870: 1:    '✅f(567) = 3663',
870: 1:    '✅f(678) = 23232',
870: 1:    '✅f(789) = 66066',
870: 1:    '✅f(1234) = 5555',
870: 1:    '✅f(2345) = 7777',
870: 1:    '✅f(3456) = 9999',
870: 1:    '✅f(4567) = 12221',
870: 1:    '✅f(5678) = 48884',
870: 1:    '✅f(6789) = 993399',
870: 1:    '✅f(7890) = 993399',
870: 1:    '✅f(12345) = 66666',
870: 1:    '✅f(123456) = 777777',
870: 1:    '✅f(1234567) = 8888888',
870: 1:    '❌f(12345678) = ??? != 99999999'
870: 1:  ],
870: 1:  'level': 30,
870: 1:  'nextQuestion': '12345678',
870: 1:  'questions': [
870: 1:    '1',
870: 1:    '2',
870: 1:    '3',
870: 1:    '4',
870: 1:    '5',
870: 1:    '6',
870: 1:    '7',
870: 1:    '9',
870: 1:    '10',
870: 1:    '11',
870: 1:    '12',
870: 1:    '123',
870: 1:    '234',
870: 1:    '345',
870: 1:    '456',
870: 1:    '567',
870: 1:    '678',
870: 1:    '789',
870: 1:    '1234',
870: 1:    '2345',
870: 1:    '3456',
870: 1:    '4567',
870: 1:    '5678',
870: 1:    '6789',
870: 1:    '7890',
870: 1:    '12345',
870: 1:    '123456',
870: 1:    '1234567',
870: 1:    '12345678'
870: 1:  ]
870: 1:}
870: 1:Scores: 85823
870: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221', '48884', '993399', '993399', '66666', '777777', '8888888', '99999999']')
870: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
871: 1:BoardData {
871: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
871: 1:  'expectedAnswer': '1222222221',
871: 1:  'history': [
871: 1:    {
871: 1:      'answer': '2',
871: 1:      'question': '1',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '4',
871: 1:      'question': '2',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '6',
871: 1:      'question': '3',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '8',
871: 1:      'question': '4',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '11',
871: 1:      'question': '5',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '33',
871: 1:      'question': '6',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '55',
871: 1:      'question': '7',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '99',
871: 1:      'question': '9',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '11',
871: 1:      'question': '10',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '22',
871: 1:      'question': '11',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '33',
871: 1:      'question': '12',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '444',
871: 1:      'question': '123',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '666',
871: 1:      'question': '234',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '888',
871: 1:      'question': '345',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '1221',
871: 1:      'question': '456',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '3663',
871: 1:      'question': '567',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '23232',
871: 1:      'question': '678',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '66066',
871: 1:      'question': '789',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '5555',
871: 1:      'question': '1234',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '7777',
871: 1:      'question': '2345',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '9999',
871: 1:      'question': '3456',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '12221',
871: 1:      'question': '4567',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '48884',
871: 1:      'question': '5678',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '993399',
871: 1:      'question': '6789',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '993399',
871: 1:      'question': '7890',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '66666',
871: 1:      'question': '12345',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '777777',
871: 1:      'question': '123456',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '8888888',
871: 1:      'question': '1234567',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '99999999',
871: 1:      'question': '12345678',
871: 1:      'valid': true
871: 1:    }
871: 1:  ],
871: 1:  'info': [
871: 1:    '✅f(1) = 2',
871: 1:    '✅f(2) = 4',
871: 1:    '✅f(3) = 6',
871: 1:    '✅f(4) = 8',
871: 1:    '✅f(5) = 11',
871: 1:    '✅f(6) = 33',
871: 1:    '✅f(7) = 55',
871: 1:    '✅f(9) = 99',
871: 1:    '✅f(10) = 11',
871: 1:    '✅f(11) = 22',
871: 1:    '✅f(12) = 33',
871: 1:    '✅f(123) = 444',
871: 1:    '✅f(234) = 666',
871: 1:    '✅f(345) = 888',
871: 1:    '✅f(456) = 1221',
871: 1:    '✅f(567) = 3663',
871: 1:    '✅f(678) = 23232',
871: 1:    '✅f(789) = 66066',
871: 1:    '✅f(1234) = 5555',
871: 1:    '✅f(2345) = 7777',
871: 1:    '✅f(3456) = 9999',
871: 1:    '✅f(4567) = 12221',
871: 1:    '✅f(5678) = 48884',
871: 1:    '✅f(6789) = 993399',
871: 1:    '✅f(7890) = 993399',
871: 1:    '✅f(12345) = 66666',
871: 1:    '✅f(123456) = 777777',
871: 1:    '✅f(1234567) = 8888888',
871: 1:    '✅f(12345678) = 99999999',
871: 1:    '❌f(123456789) = ??? != 1222222221'
871: 1:  ],
871: 1:  'level': 30,
871: 1:  'nextQuestion': '123456789',
871: 1:  'questions': [
871: 1:    '1',
871: 1:    '2',
871: 1:    '3',
871: 1:    '4',
871: 1:    '5',
871: 1:    '6',
871: 1:    '7',
871: 1:    '9',
871: 1:    '10',
871: 1:    '11',
871: 1:    '12',
871: 1:    '123',
871: 1:    '234',
871: 1:    '345',
871: 1:    '456',
871: 1:    '567',
871: 1:    '678',
871: 1:    '789',
871: 1:    '1234',
871: 1:    '2345',
871: 1:    '3456',
871: 1:    '4567',
871: 1:    '5678',
871: 1:    '6789',
871: 1:    '7890',
871: 1:    '12345',
871: 1:    '123456',
871: 1:    '1234567',
871: 1:    '12345678',
871: 1:    '123456789'
871: 1:  ]
871: 1:}
871: 1:Scores: 85837
871: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221', '48884', '993399', '993399', '66666', '777777', '8888888', '99999999', '1222222221']')
871: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
872: 1:BoardData {
872: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
872: 1:  'expectedAnswer': '3344444433',
872: 1:  'history': [
872: 1:    {
872: 1:      'answer': '2',
872: 1:      'question': '1',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '4',
872: 1:      'question': '2',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '6',
872: 1:      'question': '3',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '8',
872: 1:      'question': '4',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '11',
872: 1:      'question': '5',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '33',
872: 1:      'question': '6',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '55',
872: 1:      'question': '7',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '99',
872: 1:      'question': '9',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '11',
872: 1:      'question': '10',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '22',
872: 1:      'question': '11',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '33',
872: 1:      'question': '12',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '444',
872: 1:      'question': '123',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '666',
872: 1:      'question': '234',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '888',
872: 1:      'question': '345',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '1221',
872: 1:      'question': '456',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '3663',
872: 1:      'question': '567',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '23232',
872: 1:      'question': '678',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '66066',
872: 1:      'question': '789',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '5555',
872: 1:      'question': '1234',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '7777',
872: 1:      'question': '2345',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '9999',
872: 1:      'question': '3456',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '12221',
872: 1:      'question': '4567',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '48884',
872: 1:      'question': '5678',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '993399',
872: 1:      'question': '6789',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '993399',
872: 1:      'question': '7890',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '66666',
872: 1:      'question': '12345',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '777777',
872: 1:      'question': '123456',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '8888888',
872: 1:      'question': '1234567',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '99999999',
872: 1:      'question': '12345678',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '1222222221',
872: 1:      'question': '123456789',
872: 1:      'valid': true
872: 1:    }
872: 1:  ],
872: 1:  'info': [
872: 1:    '✅f(1) = 2',
872: 1:    '✅f(2) = 4',
872: 1:    '✅f(3) = 6',
872: 1:    '✅f(4) = 8',
872: 1:    '✅f(5) = 11',
872: 1:    '✅f(6) = 33',
872: 1:    '✅f(7) = 55',
872: 1:    '✅f(9) = 99',
872: 1:    '✅f(10) = 11',
872: 1:    '✅f(11) = 22',
872: 1:    '✅f(12) = 33',
872: 1:    '✅f(123) = 444',
872: 1:    '✅f(234) = 666',
872: 1:    '✅f(345) = 888',
872: 1:    '✅f(456) = 1221',
872: 1:    '✅f(567) = 3663',
872: 1:    '✅f(678) = 23232',
872: 1:    '✅f(789) = 66066',
872: 1:    '✅f(1234) = 5555',
872: 1:    '✅f(2345) = 7777',
872: 1:    '✅f(3456) = 9999',
872: 1:    '✅f(4567) = 12221',
872: 1:    '✅f(5678) = 48884',
872: 1:    '✅f(6789) = 993399',
872: 1:    '✅f(7890) = 993399',
872: 1:    '✅f(12345) = 66666',
872: 1:    '✅f(123456) = 777777',
872: 1:    '✅f(1234567) = 8888888',
872: 1:    '✅f(12345678) = 99999999',
872: 1:    '✅f(123456789) = 1222222221',
872: 1:    '❌f(1234567890) = ??? != 3344444433'
872: 1:  ],
872: 1:  'level': 30,
872: 1:  'nextQuestion': '1234567890',
872: 1:  'questions': [
872: 1:    '1',
872: 1:    '2',
872: 1:    '3',
872: 1:    '4',
872: 1:    '5',
872: 1:    '6',
872: 1:    '7',
872: 1:    '9',
872: 1:    '10',
872: 1:    '11',
872: 1:    '12',
872: 1:    '123',
872: 1:    '234',
872: 1:    '345',
872: 1:    '456',
872: 1:    '567',
872: 1:    '678',
872: 1:    '789',
872: 1:    '1234',
872: 1:    '2345',
872: 1:    '3456',
872: 1:    '4567',
872: 1:    '5678',
872: 1:    '6789',
872: 1:    '7890',
872: 1:    '12345',
872: 1:    '123456',
872: 1:    '1234567',
872: 1:    '12345678',
872: 1:    '123456789',
872: 1:    '1234567890'
872: 1:  ]
872: 1:}
872: 1:Scores: 85851
872: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221', '48884', '993399', '993399', '66666', '777777', '8888888', '99999999', '1222222221', '3344444433']')
872: 1:Fire Event: PassTest{complexity=45, testCount=31}
872: 1:Fire Event: NextAlgorithm{complexity=45, time=0}
------------------------------------------
873: 1:BoardData {
873: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
873: 1:  'history': [
873: 1:    {
873: 1:      'answer': '2',
873: 1:      'question': '1',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '4',
873: 1:      'question': '2',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '6',
873: 1:      'question': '3',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '8',
873: 1:      'question': '4',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '11',
873: 1:      'question': '5',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '33',
873: 1:      'question': '6',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '55',
873: 1:      'question': '7',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '99',
873: 1:      'question': '9',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '11',
873: 1:      'question': '10',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '22',
873: 1:      'question': '11',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '33',
873: 1:      'question': '12',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '444',
873: 1:      'question': '123',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '666',
873: 1:      'question': '234',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '888',
873: 1:      'question': '345',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '1221',
873: 1:      'question': '456',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '3663',
873: 1:      'question': '567',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '23232',
873: 1:      'question': '678',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '66066',
873: 1:      'question': '789',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '5555',
873: 1:      'question': '1234',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '7777',
873: 1:      'question': '2345',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '9999',
873: 1:      'question': '3456',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '12221',
873: 1:      'question': '4567',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '48884',
873: 1:      'question': '5678',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '993399',
873: 1:      'question': '6789',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '993399',
873: 1:      'question': '7890',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '66666',
873: 1:      'question': '12345',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '777777',
873: 1:      'question': '123456',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '8888888',
873: 1:      'question': '1234567',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '99999999',
873: 1:      'question': '12345678',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '1222222221',
873: 1:      'question': '123456789',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '3344444433',
873: 1:      'question': '1234567890',
873: 1:      'valid': true
873: 1:    }
873: 1:  ],
873: 1:  'info': [
873: 1:    '✅f(1) = 2',
873: 1:    '✅f(2) = 4',
873: 1:    '✅f(3) = 6',
873: 1:    '✅f(4) = 8',
873: 1:    '✅f(5) = 11',
873: 1:    '✅f(6) = 33',
873: 1:    '✅f(7) = 55',
873: 1:    '✅f(9) = 99',
873: 1:    '✅f(10) = 11',
873: 1:    '✅f(11) = 22',
873: 1:    '✅f(12) = 33',
873: 1:    '✅f(123) = 444',
873: 1:    '✅f(234) = 666',
873: 1:    '✅f(345) = 888',
873: 1:    '✅f(456) = 1221',
873: 1:    '✅f(567) = 3663',
873: 1:    '✅f(678) = 23232',
873: 1:    '✅f(789) = 66066',
873: 1:    '✅f(1234) = 5555',
873: 1:    '✅f(2345) = 7777',
873: 1:    '✅f(3456) = 9999',
873: 1:    '✅f(4567) = 12221',
873: 1:    '✅f(5678) = 48884',
873: 1:    '✅f(6789) = 993399',
873: 1:    '✅f(7890) = 993399',
873: 1:    '✅f(12345) = 66666',
873: 1:    '✅f(123456) = 777777',
873: 1:    '✅f(1234567) = 8888888',
873: 1:    '✅f(12345678) = 99999999',
873: 1:    '✅f(123456789) = 1222222221',
873: 1:    '✅f(1234567890) = 3344444433'
873: 1:  ],
873: 1:  'level': 30,
873: 1:  'questions': []
873: 1:}
873: 1:Scores: 91939
873: 1:Answer: message('StartNextLevel')
873: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
874: 1:BoardData {
874: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
874: 1:  'expectedAnswer': '971',
874: 1:  'history': [],
874: 1:  'info': ['❌f(1) = ??? != 971'],
874: 1:  'level': 31,
874: 1:  'nextQuestion': '1',
874: 1:  'questions': ['1']
874: 1:}
874: 1:Scores: 91939
874: 1:Answer: message('['971']')
874: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
875: 1:BoardData {
875: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
875: 1:  'expectedAnswer': '874',
875: 1:  'history': [{
875: 1:    'answer': '971',
875: 1:    'question': '1',
875: 1:    'valid': true
875: 1:  }],
875: 1:  'info': [
875: 1:    '✅f(1) = 971',
875: 1:    '❌f(2) = ??? != 874'
875: 1:  ],
875: 1:  'level': 31,
875: 1:  'nextQuestion': '2',
875: 1:  'questions': [
875: 1:    '1',
875: 1:    '2'
875: 1:  ]
875: 1:}
875: 1:Scores: 91959
875: 1:Answer: message('['971', '874']')
875: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
876: 1:BoardData {
876: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
876: 1:  'expectedAnswer': '787',
876: 1:  'history': [
876: 1:    {
876: 1:      'answer': '971',
876: 1:      'question': '1',
876: 1:      'valid': true
876: 1:    },
876: 1:    {
876: 1:      'answer': '874',
876: 1:      'question': '2',
876: 1:      'valid': true
876: 1:    }
876: 1:  ],
876: 1:  'info': [
876: 1:    '✅f(1) = 971',
876: 1:    '✅f(2) = 874',
876: 1:    '❌f(3) = ??? != 787'
876: 1:  ],
876: 1:  'level': 31,
876: 1:  'nextQuestion': '3',
876: 1:  'questions': [
876: 1:    '1',
876: 1:    '2',
876: 1:    '3'
876: 1:  ]
876: 1:}
876: 1:Scores: 91979
876: 1:Answer: message('['971', '874', '787']')
876: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
877: 1:BoardData {
877: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
877: 1:  'expectedAnswer': '709',
877: 1:  'history': [
877: 1:    {
877: 1:      'answer': '971',
877: 1:      'question': '1',
877: 1:      'valid': true
877: 1:    },
877: 1:    {
877: 1:      'answer': '874',
877: 1:      'question': '2',
877: 1:      'valid': true
877: 1:    },
877: 1:    {
877: 1:      'answer': '787',
877: 1:      'question': '3',
877: 1:      'valid': true
877: 1:    }
877: 1:  ],
877: 1:  'info': [
877: 1:    '✅f(1) = 971',
877: 1:    '✅f(2) = 874',
877: 1:    '✅f(3) = 787',
877: 1:    '❌f(4) = ??? != 709'
877: 1:  ],
877: 1:  'level': 31,
877: 1:  'nextQuestion': '4',
877: 1:  'questions': [
877: 1:    '1',
877: 1:    '2',
877: 1:    '3',
877: 1:    '4'
877: 1:  ]
877: 1:}
877: 1:Scores: 91999
877: 1:Answer: message('['971', '874', '787', '709']')
877: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
878: 1:BoardData {
878: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
878: 1:  'expectedAnswer': '639',
878: 1:  'history': [
878: 1:    {
878: 1:      'answer': '971',
878: 1:      'question': '1',
878: 1:      'valid': true
878: 1:    },
878: 1:    {
878: 1:      'answer': '874',
878: 1:      'question': '2',
878: 1:      'valid': true
878: 1:    },
878: 1:    {
878: 1:      'answer': '787',
878: 1:      'question': '3',
878: 1:      'valid': true
878: 1:    },
878: 1:    {
878: 1:      'answer': '709',
878: 1:      'question': '4',
878: 1:      'valid': true
878: 1:    }
878: 1:  ],
878: 1:  'info': [
878: 1:    '✅f(1) = 971',
878: 1:    '✅f(2) = 874',
878: 1:    '✅f(3) = 787',
878: 1:    '✅f(4) = 709',
878: 1:    '❌f(5) = ??? != 639'
878: 1:  ],
878: 1:  'level': 31,
878: 1:  'nextQuestion': '5',
878: 1:  'questions': [
878: 1:    '1',
878: 1:    '2',
878: 1:    '3',
878: 1:    '4',
878: 1:    '5'
878: 1:  ]
878: 1:}
878: 1:Scores: 92019
878: 1:Answer: message('['971', '874', '787', '709', '639']')
878: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
879: 1:BoardData {
879: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
879: 1:  'expectedAnswer': '576',
879: 1:  'history': [
879: 1:    {
879: 1:      'answer': '971',
879: 1:      'question': '1',
879: 1:      'valid': true
879: 1:    },
879: 1:    {
879: 1:      'answer': '874',
879: 1:      'question': '2',
879: 1:      'valid': true
879: 1:    },
879: 1:    {
879: 1:      'answer': '787',
879: 1:      'question': '3',
879: 1:      'valid': true
879: 1:    },
879: 1:    {
879: 1:      'answer': '709',
879: 1:      'question': '4',
879: 1:      'valid': true
879: 1:    },
879: 1:    {
879: 1:      'answer': '639',
879: 1:      'question': '5',
879: 1:      'valid': true
879: 1:    }
879: 1:  ],
879: 1:  'info': [
879: 1:    '✅f(1) = 971',
879: 1:    '✅f(2) = 874',
879: 1:    '✅f(3) = 787',
879: 1:    '✅f(4) = 709',
879: 1:    '✅f(5) = 639',
879: 1:    '❌f(6) = ??? != 576'
879: 1:  ],
879: 1:  'level': 31,
879: 1:  'nextQuestion': '6',
879: 1:  'questions': [
879: 1:    '1',
879: 1:    '2',
879: 1:    '3',
879: 1:    '4',
879: 1:    '5',
879: 1:    '6'
879: 1:  ]
879: 1:}
879: 1:Scores: 92039
879: 1:Answer: message('['971', '874', '787', '709', '639', '576']')
879: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
880: 1:BoardData {
880: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
880: 1:  'expectedAnswer': '519',
880: 1:  'history': [
880: 1:    {
880: 1:      'answer': '971',
880: 1:      'question': '1',
880: 1:      'valid': true
880: 1:    },
880: 1:    {
880: 1:      'answer': '874',
880: 1:      'question': '2',
880: 1:      'valid': true
880: 1:    },
880: 1:    {
880: 1:      'answer': '787',
880: 1:      'question': '3',
880: 1:      'valid': true
880: 1:    },
880: 1:    {
880: 1:      'answer': '709',
880: 1:      'question': '4',
880: 1:      'valid': true
880: 1:    },
880: 1:    {
880: 1:      'answer': '639',
880: 1:      'question': '5',
880: 1:      'valid': true
880: 1:    },
880: 1:    {
880: 1:      'answer': '576',
880: 1:      'question': '6',
880: 1:      'valid': true
880: 1:    }
880: 1:  ],
880: 1:  'info': [
880: 1:    '✅f(1) = 971',
880: 1:    '✅f(2) = 874',
880: 1:    '✅f(3) = 787',
880: 1:    '✅f(4) = 709',
880: 1:    '✅f(5) = 639',
880: 1:    '✅f(6) = 576',
880: 1:    '❌f(7) = ??? != 519'
880: 1:  ],
880: 1:  'level': 31,
880: 1:  'nextQuestion': '7',
880: 1:  'questions': [
880: 1:    '1',
880: 1:    '2',
880: 1:    '3',
880: 1:    '4',
880: 1:    '5',
880: 1:    '6',
880: 1:    '7'
880: 1:  ]
880: 1:}
880: 1:Scores: 92059
880: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519']')
880: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
881: 1:BoardData {
881: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
881: 1:  'expectedAnswer': '468',
881: 1:  'history': [
881: 1:    {
881: 1:      'answer': '971',
881: 1:      'question': '1',
881: 1:      'valid': true
881: 1:    },
881: 1:    {
881: 1:      'answer': '874',
881: 1:      'question': '2',
881: 1:      'valid': true
881: 1:    },
881: 1:    {
881: 1:      'answer': '787',
881: 1:      'question': '3',
881: 1:      'valid': true
881: 1:    },
881: 1:    {
881: 1:      'answer': '709',
881: 1:      'question': '4',
881: 1:      'valid': true
881: 1:    },
881: 1:    {
881: 1:      'answer': '639',
881: 1:      'question': '5',
881: 1:      'valid': true
881: 1:    },
881: 1:    {
881: 1:      'answer': '576',
881: 1:      'question': '6',
881: 1:      'valid': true
881: 1:    },
881: 1:    {
881: 1:      'answer': '519',
881: 1:      'question': '7',
881: 1:      'valid': true
881: 1:    }
881: 1:  ],
881: 1:  'info': [
881: 1:    '✅f(1) = 971',
881: 1:    '✅f(2) = 874',
881: 1:    '✅f(3) = 787',
881: 1:    '✅f(4) = 709',
881: 1:    '✅f(5) = 639',
881: 1:    '✅f(6) = 576',
881: 1:    '✅f(7) = 519',
881: 1:    '❌f(8) = ??? != 468'
881: 1:  ],
881: 1:  'level': 31,
881: 1:  'nextQuestion': '8',
881: 1:  'questions': [
881: 1:    '1',
881: 1:    '2',
881: 1:    '3',
881: 1:    '4',
881: 1:    '5',
881: 1:    '6',
881: 1:    '7',
881: 1:    '8'
881: 1:  ]
881: 1:}
881: 1:Scores: 92079
881: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468']')
881: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
882: 1:BoardData {
882: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
882: 1:  'expectedAnswer': '422',
882: 1:  'history': [
882: 1:    {
882: 1:      'answer': '971',
882: 1:      'question': '1',
882: 1:      'valid': true
882: 1:    },
882: 1:    {
882: 1:      'answer': '874',
882: 1:      'question': '2',
882: 1:      'valid': true
882: 1:    },
882: 1:    {
882: 1:      'answer': '787',
882: 1:      'question': '3',
882: 1:      'valid': true
882: 1:    },
882: 1:    {
882: 1:      'answer': '709',
882: 1:      'question': '4',
882: 1:      'valid': true
882: 1:    },
882: 1:    {
882: 1:      'answer': '639',
882: 1:      'question': '5',
882: 1:      'valid': true
882: 1:    },
882: 1:    {
882: 1:      'answer': '576',
882: 1:      'question': '6',
882: 1:      'valid': true
882: 1:    },
882: 1:    {
882: 1:      'answer': '519',
882: 1:      'question': '7',
882: 1:      'valid': true
882: 1:    },
882: 1:    {
882: 1:      'answer': '468',
882: 1:      'question': '8',
882: 1:      'valid': true
882: 1:    }
882: 1:  ],
882: 1:  'info': [
882: 1:    '✅f(1) = 971',
882: 1:    '✅f(2) = 874',
882: 1:    '✅f(3) = 787',
882: 1:    '✅f(4) = 709',
882: 1:    '✅f(5) = 639',
882: 1:    '✅f(6) = 576',
882: 1:    '✅f(7) = 519',
882: 1:    '✅f(8) = 468',
882: 1:    '❌f(9) = ??? != 422'
882: 1:  ],
882: 1:  'level': 31,
882: 1:  'nextQuestion': '9',
882: 1:  'questions': [
882: 1:    '1',
882: 1:    '2',
882: 1:    '3',
882: 1:    '4',
882: 1:    '5',
882: 1:    '6',
882: 1:    '7',
882: 1:    '8',
882: 1:    '9'
882: 1:  ]
882: 1:}
882: 1:Scores: 92099
882: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422']')
882: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
883: 1:BoardData {
883: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
883: 1:  'expectedAnswer': '380',
883: 1:  'history': [
883: 1:    {
883: 1:      'answer': '971',
883: 1:      'question': '1',
883: 1:      'valid': true
883: 1:    },
883: 1:    {
883: 1:      'answer': '874',
883: 1:      'question': '2',
883: 1:      'valid': true
883: 1:    },
883: 1:    {
883: 1:      'answer': '787',
883: 1:      'question': '3',
883: 1:      'valid': true
883: 1:    },
883: 1:    {
883: 1:      'answer': '709',
883: 1:      'question': '4',
883: 1:      'valid': true
883: 1:    },
883: 1:    {
883: 1:      'answer': '639',
883: 1:      'question': '5',
883: 1:      'valid': true
883: 1:    },
883: 1:    {
883: 1:      'answer': '576',
883: 1:      'question': '6',
883: 1:      'valid': true
883: 1:    },
883: 1:    {
883: 1:      'answer': '519',
883: 1:      'question': '7',
883: 1:      'valid': true
883: 1:    },
883: 1:    {
883: 1:      'answer': '468',
883: 1:      'question': '8',
883: 1:      'valid': true
883: 1:    },
883: 1:    {
883: 1:      'answer': '422',
883: 1:      'question': '9',
883: 1:      'valid': true
883: 1:    }
883: 1:  ],
883: 1:  'info': [
883: 1:    '✅f(1) = 971',
883: 1:    '✅f(2) = 874',
883: 1:    '✅f(3) = 787',
883: 1:    '✅f(4) = 709',
883: 1:    '✅f(5) = 639',
883: 1:    '✅f(6) = 576',
883: 1:    '✅f(7) = 519',
883: 1:    '✅f(8) = 468',
883: 1:    '✅f(9) = 422',
883: 1:    '❌f(10) = ??? != 380'
883: 1:  ],
883: 1:  'level': 31,
883: 1:  'nextQuestion': '10',
883: 1:  'questions': [
883: 1:    '1',
883: 1:    '2',
883: 1:    '3',
883: 1:    '4',
883: 1:    '5',
883: 1:    '6',
883: 1:    '7',
883: 1:    '8',
883: 1:    '9',
883: 1:    '10'
883: 1:  ]
883: 1:}
883: 1:Scores: 92119
883: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380']')
883: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
884: 1:BoardData {
884: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
884: 1:  'expectedAnswer': '342',
884: 1:  'history': [
884: 1:    {
884: 1:      'answer': '971',
884: 1:      'question': '1',
884: 1:      'valid': true
884: 1:    },
884: 1:    {
884: 1:      'answer': '874',
884: 1:      'question': '2',
884: 1:      'valid': true
884: 1:    },
884: 1:    {
884: 1:      'answer': '787',
884: 1:      'question': '3',
884: 1:      'valid': true
884: 1:    },
884: 1:    {
884: 1:      'answer': '709',
884: 1:      'question': '4',
884: 1:      'valid': true
884: 1:    },
884: 1:    {
884: 1:      'answer': '639',
884: 1:      'question': '5',
884: 1:      'valid': true
884: 1:    },
884: 1:    {
884: 1:      'answer': '576',
884: 1:      'question': '6',
884: 1:      'valid': true
884: 1:    },
884: 1:    {
884: 1:      'answer': '519',
884: 1:      'question': '7',
884: 1:      'valid': true
884: 1:    },
884: 1:    {
884: 1:      'answer': '468',
884: 1:      'question': '8',
884: 1:      'valid': true
884: 1:    },
884: 1:    {
884: 1:      'answer': '422',
884: 1:      'question': '9',
884: 1:      'valid': true
884: 1:    },
884: 1:    {
884: 1:      'answer': '380',
884: 1:      'question': '10',
884: 1:      'valid': true
884: 1:    }
884: 1:  ],
884: 1:  'info': [
884: 1:    '✅f(1) = 971',
884: 1:    '✅f(2) = 874',
884: 1:    '✅f(3) = 787',
884: 1:    '✅f(4) = 709',
884: 1:    '✅f(5) = 639',
884: 1:    '✅f(6) = 576',
884: 1:    '✅f(7) = 519',
884: 1:    '✅f(8) = 468',
884: 1:    '✅f(9) = 422',
884: 1:    '✅f(10) = 380',
884: 1:    '❌f(11) = ??? != 342'
884: 1:  ],
884: 1:  'level': 31,
884: 1:  'nextQuestion': '11',
884: 1:  'questions': [
884: 1:    '1',
884: 1:    '2',
884: 1:    '3',
884: 1:    '4',
884: 1:    '5',
884: 1:    '6',
884: 1:    '7',
884: 1:    '8',
884: 1:    '9',
884: 1:    '10',
884: 1:    '11'
884: 1:  ]
884: 1:}
884: 1:Scores: 92139
884: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342']')
884: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
885: 1:BoardData {
885: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
885: 1:  'expectedAnswer': '308',
885: 1:  'history': [
885: 1:    {
885: 1:      'answer': '971',
885: 1:      'question': '1',
885: 1:      'valid': true
885: 1:    },
885: 1:    {
885: 1:      'answer': '874',
885: 1:      'question': '2',
885: 1:      'valid': true
885: 1:    },
885: 1:    {
885: 1:      'answer': '787',
885: 1:      'question': '3',
885: 1:      'valid': true
885: 1:    },
885: 1:    {
885: 1:      'answer': '709',
885: 1:      'question': '4',
885: 1:      'valid': true
885: 1:    },
885: 1:    {
885: 1:      'answer': '639',
885: 1:      'question': '5',
885: 1:      'valid': true
885: 1:    },
885: 1:    {
885: 1:      'answer': '576',
885: 1:      'question': '6',
885: 1:      'valid': true
885: 1:    },
885: 1:    {
885: 1:      'answer': '519',
885: 1:      'question': '7',
885: 1:      'valid': true
885: 1:    },
885: 1:    {
885: 1:      'answer': '468',
885: 1:      'question': '8',
885: 1:      'valid': true
885: 1:    },
885: 1:    {
885: 1:      'answer': '422',
885: 1:      'question': '9',
885: 1:      'valid': true
885: 1:    },
885: 1:    {
885: 1:      'answer': '380',
885: 1:      'question': '10',
885: 1:      'valid': true
885: 1:    },
885: 1:    {
885: 1:      'answer': '342',
885: 1:      'question': '11',
885: 1:      'valid': true
885: 1:    }
885: 1:  ],
885: 1:  'info': [
885: 1:    '✅f(1) = 971',
885: 1:    '✅f(2) = 874',
885: 1:    '✅f(3) = 787',
885: 1:    '✅f(4) = 709',
885: 1:    '✅f(5) = 639',
885: 1:    '✅f(6) = 576',
885: 1:    '✅f(7) = 519',
885: 1:    '✅f(8) = 468',
885: 1:    '✅f(9) = 422',
885: 1:    '✅f(10) = 380',
885: 1:    '✅f(11) = 342',
885: 1:    '❌f(12) = ??? != 308'
885: 1:  ],
885: 1:  'level': 31,
885: 1:  'nextQuestion': '12',
885: 1:  'questions': [
885: 1:    '1',
885: 1:    '2',
885: 1:    '3',
885: 1:    '4',
885: 1:    '5',
885: 1:    '6',
885: 1:    '7',
885: 1:    '8',
885: 1:    '9',
885: 1:    '10',
885: 1:    '11',
885: 1:    '12'
885: 1:  ]
885: 1:}
885: 1:Scores: 92159
885: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308']')
885: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
886: 1:BoardData {
886: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
886: 1:  'expectedAnswer': '278',
886: 1:  'history': [
886: 1:    {
886: 1:      'answer': '971',
886: 1:      'question': '1',
886: 1:      'valid': true
886: 1:    },
886: 1:    {
886: 1:      'answer': '874',
886: 1:      'question': '2',
886: 1:      'valid': true
886: 1:    },
886: 1:    {
886: 1:      'answer': '787',
886: 1:      'question': '3',
886: 1:      'valid': true
886: 1:    },
886: 1:    {
886: 1:      'answer': '709',
886: 1:      'question': '4',
886: 1:      'valid': true
886: 1:    },
886: 1:    {
886: 1:      'answer': '639',
886: 1:      'question': '5',
886: 1:      'valid': true
886: 1:    },
886: 1:    {
886: 1:      'answer': '576',
886: 1:      'question': '6',
886: 1:      'valid': true
886: 1:    },
886: 1:    {
886: 1:      'answer': '519',
886: 1:      'question': '7',
886: 1:      'valid': true
886: 1:    },
886: 1:    {
886: 1:      'answer': '468',
886: 1:      'question': '8',
886: 1:      'valid': true
886: 1:    },
886: 1:    {
886: 1:      'answer': '422',
886: 1:      'question': '9',
886: 1:      'valid': true
886: 1:    },
886: 1:    {
886: 1:      'answer': '380',
886: 1:      'question': '10',
886: 1:      'valid': true
886: 1:    },
886: 1:    {
886: 1:      'answer': '342',
886: 1:      'question': '11',
886: 1:      'valid': true
886: 1:    },
886: 1:    {
886: 1:      'answer': '308',
886: 1:      'question': '12',
886: 1:      'valid': true
886: 1:    }
886: 1:  ],
886: 1:  'info': [
886: 1:    '✅f(1) = 971',
886: 1:    '✅f(2) = 874',
886: 1:    '✅f(3) = 787',
886: 1:    '✅f(4) = 709',
886: 1:    '✅f(5) = 639',
886: 1:    '✅f(6) = 576',
886: 1:    '✅f(7) = 519',
886: 1:    '✅f(8) = 468',
886: 1:    '✅f(9) = 422',
886: 1:    '✅f(10) = 380',
886: 1:    '✅f(11) = 342',
886: 1:    '✅f(12) = 308',
886: 1:    '❌f(13) = ??? != 278'
886: 1:  ],
886: 1:  'level': 31,
886: 1:  'nextQuestion': '13',
886: 1:  'questions': [
886: 1:    '1',
886: 1:    '2',
886: 1:    '3',
886: 1:    '4',
886: 1:    '5',
886: 1:    '6',
886: 1:    '7',
886: 1:    '8',
886: 1:    '9',
886: 1:    '10',
886: 1:    '11',
886: 1:    '12',
886: 1:    '13'
886: 1:  ]
886: 1:}
886: 1:Scores: 92179
886: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278']')
886: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
887: 1:BoardData {
887: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
887: 1:  'expectedAnswer': '251',
887: 1:  'history': [
887: 1:    {
887: 1:      'answer': '971',
887: 1:      'question': '1',
887: 1:      'valid': true
887: 1:    },
887: 1:    {
887: 1:      'answer': '874',
887: 1:      'question': '2',
887: 1:      'valid': true
887: 1:    },
887: 1:    {
887: 1:      'answer': '787',
887: 1:      'question': '3',
887: 1:      'valid': true
887: 1:    },
887: 1:    {
887: 1:      'answer': '709',
887: 1:      'question': '4',
887: 1:      'valid': true
887: 1:    },
887: 1:    {
887: 1:      'answer': '639',
887: 1:      'question': '5',
887: 1:      'valid': true
887: 1:    },
887: 1:    {
887: 1:      'answer': '576',
887: 1:      'question': '6',
887: 1:      'valid': true
887: 1:    },
887: 1:    {
887: 1:      'answer': '519',
887: 1:      'question': '7',
887: 1:      'valid': true
887: 1:    },
887: 1:    {
887: 1:      'answer': '468',
887: 1:      'question': '8',
887: 1:      'valid': true
887: 1:    },
887: 1:    {
887: 1:      'answer': '422',
887: 1:      'question': '9',
887: 1:      'valid': true
887: 1:    },
887: 1:    {
887: 1:      'answer': '380',
887: 1:      'question': '10',
887: 1:      'valid': true
887: 1:    },
887: 1:    {
887: 1:      'answer': '342',
887: 1:      'question': '11',
887: 1:      'valid': true
887: 1:    },
887: 1:    {
887: 1:      'answer': '308',
887: 1:      'question': '12',
887: 1:      'valid': true
887: 1:    },
887: 1:    {
887: 1:      'answer': '278',
887: 1:      'question': '13',
887: 1:      'valid': true
887: 1:    }
887: 1:  ],
887: 1:  'info': [
887: 1:    '✅f(1) = 971',
887: 1:    '✅f(2) = 874',
887: 1:    '✅f(3) = 787',
887: 1:    '✅f(4) = 709',
887: 1:    '✅f(5) = 639',
887: 1:    '✅f(6) = 576',
887: 1:    '✅f(7) = 519',
887: 1:    '✅f(8) = 468',
887: 1:    '✅f(9) = 422',
887: 1:    '✅f(10) = 380',
887: 1:    '✅f(11) = 342',
887: 1:    '✅f(12) = 308',
887: 1:    '✅f(13) = 278',
887: 1:    '❌f(14) = ??? != 251'
887: 1:  ],
887: 1:  'level': 31,
887: 1:  'nextQuestion': '14',
887: 1:  'questions': [
887: 1:    '1',
887: 1:    '2',
887: 1:    '3',
887: 1:    '4',
887: 1:    '5',
887: 1:    '6',
887: 1:    '7',
887: 1:    '8',
887: 1:    '9',
887: 1:    '10',
887: 1:    '11',
887: 1:    '12',
887: 1:    '13',
887: 1:    '14'
887: 1:  ]
887: 1:}
887: 1:Scores: 92199
887: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251']')
887: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
888: 1:BoardData {
888: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
888: 1:  'expectedAnswer': '226',
888: 1:  'history': [
888: 1:    {
888: 1:      'answer': '971',
888: 1:      'question': '1',
888: 1:      'valid': true
888: 1:    },
888: 1:    {
888: 1:      'answer': '874',
888: 1:      'question': '2',
888: 1:      'valid': true
888: 1:    },
888: 1:    {
888: 1:      'answer': '787',
888: 1:      'question': '3',
888: 1:      'valid': true
888: 1:    },
888: 1:    {
888: 1:      'answer': '709',
888: 1:      'question': '4',
888: 1:      'valid': true
888: 1:    },
888: 1:    {
888: 1:      'answer': '639',
888: 1:      'question': '5',
888: 1:      'valid': true
888: 1:    },
888: 1:    {
888: 1:      'answer': '576',
888: 1:      'question': '6',
888: 1:      'valid': true
888: 1:    },
888: 1:    {
888: 1:      'answer': '519',
888: 1:      'question': '7',
888: 1:      'valid': true
888: 1:    },
888: 1:    {
888: 1:      'answer': '468',
888: 1:      'question': '8',
888: 1:      'valid': true
888: 1:    },
888: 1:    {
888: 1:      'answer': '422',
888: 1:      'question': '9',
888: 1:      'valid': true
888: 1:    },
888: 1:    {
888: 1:      'answer': '380',
888: 1:      'question': '10',
888: 1:      'valid': true
888: 1:    },
888: 1:    {
888: 1:      'answer': '342',
888: 1:      'question': '11',
888: 1:      'valid': true
888: 1:    },
888: 1:    {
888: 1:      'answer': '308',
888: 1:      'question': '12',
888: 1:      'valid': true
888: 1:    },
888: 1:    {
888: 1:      'answer': '278',
888: 1:      'question': '13',
888: 1:      'valid': true
888: 1:    },
888: 1:    {
888: 1:      'answer': '251',
888: 1:      'question': '14',
888: 1:      'valid': true
888: 1:    }
888: 1:  ],
888: 1:  'info': [
888: 1:    '✅f(1) = 971',
888: 1:    '✅f(2) = 874',
888: 1:    '✅f(3) = 787',
888: 1:    '✅f(4) = 709',
888: 1:    '✅f(5) = 639',
888: 1:    '✅f(6) = 576',
888: 1:    '✅f(7) = 519',
888: 1:    '✅f(8) = 468',
888: 1:    '✅f(9) = 422',
888: 1:    '✅f(10) = 380',
888: 1:    '✅f(11) = 342',
888: 1:    '✅f(12) = 308',
888: 1:    '✅f(13) = 278',
888: 1:    '✅f(14) = 251',
888: 1:    '❌f(15) = ??? != 226'
888: 1:  ],
888: 1:  'level': 31,
888: 1:  'nextQuestion': '15',
888: 1:  'questions': [
888: 1:    '1',
888: 1:    '2',
888: 1:    '3',
888: 1:    '4',
888: 1:    '5',
888: 1:    '6',
888: 1:    '7',
888: 1:    '8',
888: 1:    '9',
888: 1:    '10',
888: 1:    '11',
888: 1:    '12',
888: 1:    '13',
888: 1:    '14',
888: 1:    '15'
888: 1:  ]
888: 1:}
888: 1:Scores: 92219
888: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226']')
888: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
889: 1:BoardData {
889: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
889: 1:  'expectedAnswer': '204',
889: 1:  'history': [
889: 1:    {
889: 1:      'answer': '971',
889: 1:      'question': '1',
889: 1:      'valid': true
889: 1:    },
889: 1:    {
889: 1:      'answer': '874',
889: 1:      'question': '2',
889: 1:      'valid': true
889: 1:    },
889: 1:    {
889: 1:      'answer': '787',
889: 1:      'question': '3',
889: 1:      'valid': true
889: 1:    },
889: 1:    {
889: 1:      'answer': '709',
889: 1:      'question': '4',
889: 1:      'valid': true
889: 1:    },
889: 1:    {
889: 1:      'answer': '639',
889: 1:      'question': '5',
889: 1:      'valid': true
889: 1:    },
889: 1:    {
889: 1:      'answer': '576',
889: 1:      'question': '6',
889: 1:      'valid': true
889: 1:    },
889: 1:    {
889: 1:      'answer': '519',
889: 1:      'question': '7',
889: 1:      'valid': true
889: 1:    },
889: 1:    {
889: 1:      'answer': '468',
889: 1:      'question': '8',
889: 1:      'valid': true
889: 1:    },
889: 1:    {
889: 1:      'answer': '422',
889: 1:      'question': '9',
889: 1:      'valid': true
889: 1:    },
889: 1:    {
889: 1:      'answer': '380',
889: 1:      'question': '10',
889: 1:      'valid': true
889: 1:    },
889: 1:    {
889: 1:      'answer': '342',
889: 1:      'question': '11',
889: 1:      'valid': true
889: 1:    },
889: 1:    {
889: 1:      'answer': '308',
889: 1:      'question': '12',
889: 1:      'valid': true
889: 1:    },
889: 1:    {
889: 1:      'answer': '278',
889: 1:      'question': '13',
889: 1:      'valid': true
889: 1:    },
889: 1:    {
889: 1:      'answer': '251',
889: 1:      'question': '14',
889: 1:      'valid': true
889: 1:    },
889: 1:    {
889: 1:      'answer': '226',
889: 1:      'question': '15',
889: 1:      'valid': true
889: 1:    }
889: 1:  ],
889: 1:  'info': [
889: 1:    '✅f(1) = 971',
889: 1:    '✅f(2) = 874',
889: 1:    '✅f(3) = 787',
889: 1:    '✅f(4) = 709',
889: 1:    '✅f(5) = 639',
889: 1:    '✅f(6) = 576',
889: 1:    '✅f(7) = 519',
889: 1:    '✅f(8) = 468',
889: 1:    '✅f(9) = 422',
889: 1:    '✅f(10) = 380',
889: 1:    '✅f(11) = 342',
889: 1:    '✅f(12) = 308',
889: 1:    '✅f(13) = 278',
889: 1:    '✅f(14) = 251',
889: 1:    '✅f(15) = 226',
889: 1:    '❌f(16) = ??? != 204'
889: 1:  ],
889: 1:  'level': 31,
889: 1:  'nextQuestion': '16',
889: 1:  'questions': [
889: 1:    '1',
889: 1:    '2',
889: 1:    '3',
889: 1:    '4',
889: 1:    '5',
889: 1:    '6',
889: 1:    '7',
889: 1:    '8',
889: 1:    '9',
889: 1:    '10',
889: 1:    '11',
889: 1:    '12',
889: 1:    '13',
889: 1:    '14',
889: 1:    '15',
889: 1:    '16'
889: 1:  ]
889: 1:}
889: 1:Scores: 92239
889: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204']')
889: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
890: 1:BoardData {
890: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
890: 1:  'expectedAnswer': '184',
890: 1:  'history': [
890: 1:    {
890: 1:      'answer': '971',
890: 1:      'question': '1',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '874',
890: 1:      'question': '2',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '787',
890: 1:      'question': '3',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '709',
890: 1:      'question': '4',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '639',
890: 1:      'question': '5',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '576',
890: 1:      'question': '6',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '519',
890: 1:      'question': '7',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '468',
890: 1:      'question': '8',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '422',
890: 1:      'question': '9',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '380',
890: 1:      'question': '10',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '342',
890: 1:      'question': '11',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '308',
890: 1:      'question': '12',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '278',
890: 1:      'question': '13',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '251',
890: 1:      'question': '14',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '226',
890: 1:      'question': '15',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '204',
890: 1:      'question': '16',
890: 1:      'valid': true
890: 1:    }
890: 1:  ],
890: 1:  'info': [
890: 1:    '✅f(1) = 971',
890: 1:    '✅f(2) = 874',
890: 1:    '✅f(3) = 787',
890: 1:    '✅f(4) = 709',
890: 1:    '✅f(5) = 639',
890: 1:    '✅f(6) = 576',
890: 1:    '✅f(7) = 519',
890: 1:    '✅f(8) = 468',
890: 1:    '✅f(9) = 422',
890: 1:    '✅f(10) = 380',
890: 1:    '✅f(11) = 342',
890: 1:    '✅f(12) = 308',
890: 1:    '✅f(13) = 278',
890: 1:    '✅f(14) = 251',
890: 1:    '✅f(15) = 226',
890: 1:    '✅f(16) = 204',
890: 1:    '❌f(17) = ??? != 184'
890: 1:  ],
890: 1:  'level': 31,
890: 1:  'nextQuestion': '17',
890: 1:  'questions': [
890: 1:    '1',
890: 1:    '2',
890: 1:    '3',
890: 1:    '4',
890: 1:    '5',
890: 1:    '6',
890: 1:    '7',
890: 1:    '8',
890: 1:    '9',
890: 1:    '10',
890: 1:    '11',
890: 1:    '12',
890: 1:    '13',
890: 1:    '14',
890: 1:    '15',
890: 1:    '16',
890: 1:    '17'
890: 1:  ]
890: 1:}
890: 1:Scores: 92259
890: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204', '184']')
890: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
891: 1:BoardData {
891: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
891: 1:  'expectedAnswer': '166',
891: 1:  'history': [
891: 1:    {
891: 1:      'answer': '971',
891: 1:      'question': '1',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '874',
891: 1:      'question': '2',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '787',
891: 1:      'question': '3',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '709',
891: 1:      'question': '4',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '639',
891: 1:      'question': '5',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '576',
891: 1:      'question': '6',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '519',
891: 1:      'question': '7',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '468',
891: 1:      'question': '8',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '422',
891: 1:      'question': '9',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '380',
891: 1:      'question': '10',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '342',
891: 1:      'question': '11',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '308',
891: 1:      'question': '12',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '278',
891: 1:      'question': '13',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '251',
891: 1:      'question': '14',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '226',
891: 1:      'question': '15',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '204',
891: 1:      'question': '16',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '184',
891: 1:      'question': '17',
891: 1:      'valid': true
891: 1:    }
891: 1:  ],
891: 1:  'info': [
891: 1:    '✅f(1) = 971',
891: 1:    '✅f(2) = 874',
891: 1:    '✅f(3) = 787',
891: 1:    '✅f(4) = 709',
891: 1:    '✅f(5) = 639',
891: 1:    '✅f(6) = 576',
891: 1:    '✅f(7) = 519',
891: 1:    '✅f(8) = 468',
891: 1:    '✅f(9) = 422',
891: 1:    '✅f(10) = 380',
891: 1:    '✅f(11) = 342',
891: 1:    '✅f(12) = 308',
891: 1:    '✅f(13) = 278',
891: 1:    '✅f(14) = 251',
891: 1:    '✅f(15) = 226',
891: 1:    '✅f(16) = 204',
891: 1:    '✅f(17) = 184',
891: 1:    '❌f(18) = ??? != 166'
891: 1:  ],
891: 1:  'level': 31,
891: 1:  'nextQuestion': '18',
891: 1:  'questions': [
891: 1:    '1',
891: 1:    '2',
891: 1:    '3',
891: 1:    '4',
891: 1:    '5',
891: 1:    '6',
891: 1:    '7',
891: 1:    '8',
891: 1:    '9',
891: 1:    '10',
891: 1:    '11',
891: 1:    '12',
891: 1:    '13',
891: 1:    '14',
891: 1:    '15',
891: 1:    '16',
891: 1:    '17',
891: 1:    '18'
891: 1:  ]
891: 1:}
891: 1:Scores: 92279
891: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204', '184', '166']')
891: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
892: 1:BoardData {
892: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
892: 1:  'expectedAnswer': '150',
892: 1:  'history': [
892: 1:    {
892: 1:      'answer': '971',
892: 1:      'question': '1',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '874',
892: 1:      'question': '2',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '787',
892: 1:      'question': '3',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '709',
892: 1:      'question': '4',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '639',
892: 1:      'question': '5',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '576',
892: 1:      'question': '6',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '519',
892: 1:      'question': '7',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '468',
892: 1:      'question': '8',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '422',
892: 1:      'question': '9',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '380',
892: 1:      'question': '10',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '342',
892: 1:      'question': '11',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '308',
892: 1:      'question': '12',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '278',
892: 1:      'question': '13',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '251',
892: 1:      'question': '14',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '226',
892: 1:      'question': '15',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '204',
892: 1:      'question': '16',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '184',
892: 1:      'question': '17',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '166',
892: 1:      'question': '18',
892: 1:      'valid': true
892: 1:    }
892: 1:  ],
892: 1:  'info': [
892: 1:    '✅f(1) = 971',
892: 1:    '✅f(2) = 874',
892: 1:    '✅f(3) = 787',
892: 1:    '✅f(4) = 709',
892: 1:    '✅f(5) = 639',
892: 1:    '✅f(6) = 576',
892: 1:    '✅f(7) = 519',
892: 1:    '✅f(8) = 468',
892: 1:    '✅f(9) = 422',
892: 1:    '✅f(10) = 380',
892: 1:    '✅f(11) = 342',
892: 1:    '✅f(12) = 308',
892: 1:    '✅f(13) = 278',
892: 1:    '✅f(14) = 251',
892: 1:    '✅f(15) = 226',
892: 1:    '✅f(16) = 204',
892: 1:    '✅f(17) = 184',
892: 1:    '✅f(18) = 166',
892: 1:    '❌f(19) = ??? != 150'
892: 1:  ],
892: 1:  'level': 31,
892: 1:  'nextQuestion': '19',
892: 1:  'questions': [
892: 1:    '1',
892: 1:    '2',
892: 1:    '3',
892: 1:    '4',
892: 1:    '5',
892: 1:    '6',
892: 1:    '7',
892: 1:    '8',
892: 1:    '9',
892: 1:    '10',
892: 1:    '11',
892: 1:    '12',
892: 1:    '13',
892: 1:    '14',
892: 1:    '15',
892: 1:    '16',
892: 1:    '17',
892: 1:    '18',
892: 1:    '19'
892: 1:  ]
892: 1:}
892: 1:Scores: 92299
892: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204', '184', '166', '150']')
892: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
893: 1:BoardData {
893: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
893: 1:  'expectedAnswer': '135',
893: 1:  'history': [
893: 1:    {
893: 1:      'answer': '971',
893: 1:      'question': '1',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '874',
893: 1:      'question': '2',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '787',
893: 1:      'question': '3',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '709',
893: 1:      'question': '4',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '639',
893: 1:      'question': '5',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '576',
893: 1:      'question': '6',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '519',
893: 1:      'question': '7',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '468',
893: 1:      'question': '8',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '422',
893: 1:      'question': '9',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '380',
893: 1:      'question': '10',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '342',
893: 1:      'question': '11',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '308',
893: 1:      'question': '12',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '278',
893: 1:      'question': '13',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '251',
893: 1:      'question': '14',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '226',
893: 1:      'question': '15',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '204',
893: 1:      'question': '16',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '184',
893: 1:      'question': '17',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '166',
893: 1:      'question': '18',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '150',
893: 1:      'question': '19',
893: 1:      'valid': true
893: 1:    }
893: 1:  ],
893: 1:  'info': [
893: 1:    '✅f(1) = 971',
893: 1:    '✅f(2) = 874',
893: 1:    '✅f(3) = 787',
893: 1:    '✅f(4) = 709',
893: 1:    '✅f(5) = 639',
893: 1:    '✅f(6) = 576',
893: 1:    '✅f(7) = 519',
893: 1:    '✅f(8) = 468',
893: 1:    '✅f(9) = 422',
893: 1:    '✅f(10) = 380',
893: 1:    '✅f(11) = 342',
893: 1:    '✅f(12) = 308',
893: 1:    '✅f(13) = 278',
893: 1:    '✅f(14) = 251',
893: 1:    '✅f(15) = 226',
893: 1:    '✅f(16) = 204',
893: 1:    '✅f(17) = 184',
893: 1:    '✅f(18) = 166',
893: 1:    '✅f(19) = 150',
893: 1:    '❌f(20) = ??? != 135'
893: 1:  ],
893: 1:  'level': 31,
893: 1:  'nextQuestion': '20',
893: 1:  'questions': [
893: 1:    '1',
893: 1:    '2',
893: 1:    '3',
893: 1:    '4',
893: 1:    '5',
893: 1:    '6',
893: 1:    '7',
893: 1:    '8',
893: 1:    '9',
893: 1:    '10',
893: 1:    '11',
893: 1:    '12',
893: 1:    '13',
893: 1:    '14',
893: 1:    '15',
893: 1:    '16',
893: 1:    '17',
893: 1:    '18',
893: 1:    '19',
893: 1:    '20'
893: 1:  ]
893: 1:}
893: 1:Scores: 92319
893: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204', '184', '166', '150', '135']')
893: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
894: 1:BoardData {
894: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
894: 1:  'expectedAnswer': '122',
894: 1:  'history': [
894: 1:    {
894: 1:      'answer': '971',
894: 1:      'question': '1',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '874',
894: 1:      'question': '2',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '787',
894: 1:      'question': '3',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '709',
894: 1:      'question': '4',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '639',
894: 1:      'question': '5',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '576',
894: 1:      'question': '6',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '519',
894: 1:      'question': '7',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '468',
894: 1:      'question': '8',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '422',
894: 1:      'question': '9',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '380',
894: 1:      'question': '10',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '342',
894: 1:      'question': '11',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '308',
894: 1:      'question': '12',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '278',
894: 1:      'question': '13',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '251',
894: 1:      'question': '14',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '226',
894: 1:      'question': '15',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '204',
894: 1:      'question': '16',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '184',
894: 1:      'question': '17',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '166',
894: 1:      'question': '18',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '150',
894: 1:      'question': '19',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '135',
894: 1:      'question': '20',
894: 1:      'valid': true
894: 1:    }
894: 1:  ],
894: 1:  'info': [
894: 1:    '✅f(1) = 971',
894: 1:    '✅f(2) = 874',
894: 1:    '✅f(3) = 787',
894: 1:    '✅f(4) = 709',
894: 1:    '✅f(5) = 639',
894: 1:    '✅f(6) = 576',
894: 1:    '✅f(7) = 519',
894: 1:    '✅f(8) = 468',
894: 1:    '✅f(9) = 422',
894: 1:    '✅f(10) = 380',
894: 1:    '✅f(11) = 342',
894: 1:    '✅f(12) = 308',
894: 1:    '✅f(13) = 278',
894: 1:    '✅f(14) = 251',
894: 1:    '✅f(15) = 226',
894: 1:    '✅f(16) = 204',
894: 1:    '✅f(17) = 184',
894: 1:    '✅f(18) = 166',
894: 1:    '✅f(19) = 150',
894: 1:    '✅f(20) = 135',
894: 1:    '❌f(21) = ??? != 122'
894: 1:  ],
894: 1:  'level': 31,
894: 1:  'nextQuestion': '21',
894: 1:  'questions': [
894: 1:    '1',
894: 1:    '2',
894: 1:    '3',
894: 1:    '4',
894: 1:    '5',
894: 1:    '6',
894: 1:    '7',
894: 1:    '8',
894: 1:    '9',
894: 1:    '10',
894: 1:    '11',
894: 1:    '12',
894: 1:    '13',
894: 1:    '14',
894: 1:    '15',
894: 1:    '16',
894: 1:    '17',
894: 1:    '18',
894: 1:    '19',
894: 1:    '20',
894: 1:    '21'
894: 1:  ]
894: 1:}
894: 1:Scores: 92339
894: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204', '184', '166', '150', '135', '122']')
894: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
895: 1:BoardData {
895: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
895: 1:  'expectedAnswer': '110',
895: 1:  'history': [
895: 1:    {
895: 1:      'answer': '971',
895: 1:      'question': '1',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '874',
895: 1:      'question': '2',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '787',
895: 1:      'question': '3',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '709',
895: 1:      'question': '4',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '639',
895: 1:      'question': '5',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '576',
895: 1:      'question': '6',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '519',
895: 1:      'question': '7',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '468',
895: 1:      'question': '8',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '422',
895: 1:      'question': '9',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '380',
895: 1:      'question': '10',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '342',
895: 1:      'question': '11',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '308',
895: 1:      'question': '12',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '278',
895: 1:      'question': '13',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '251',
895: 1:      'question': '14',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '226',
895: 1:      'question': '15',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '204',
895: 1:      'question': '16',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '184',
895: 1:      'question': '17',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '166',
895: 1:      'question': '18',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '150',
895: 1:      'question': '19',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '135',
895: 1:      'question': '20',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '122',
895: 1:      'question': '21',
895: 1:      'valid': true
895: 1:    }
895: 1:  ],
895: 1:  'info': [
895: 1:    '✅f(1) = 971',
895: 1:    '✅f(2) = 874',
895: 1:    '✅f(3) = 787',
895: 1:    '✅f(4) = 709',
895: 1:    '✅f(5) = 639',
895: 1:    '✅f(6) = 576',
895: 1:    '✅f(7) = 519',
895: 1:    '✅f(8) = 468',
895: 1:    '✅f(9) = 422',
895: 1:    '✅f(10) = 380',
895: 1:    '✅f(11) = 342',
895: 1:    '✅f(12) = 308',
895: 1:    '✅f(13) = 278',
895: 1:    '✅f(14) = 251',
895: 1:    '✅f(15) = 226',
895: 1:    '✅f(16) = 204',
895: 1:    '✅f(17) = 184',
895: 1:    '✅f(18) = 166',
895: 1:    '✅f(19) = 150',
895: 1:    '✅f(20) = 135',
895: 1:    '✅f(21) = 122',
895: 1:    '❌f(22) = ??? != 110'
895: 1:  ],
895: 1:  'level': 31,
895: 1:  'nextQuestion': '22',
895: 1:  'questions': [
895: 1:    '1',
895: 1:    '2',
895: 1:    '3',
895: 1:    '4',
895: 1:    '5',
895: 1:    '6',
895: 1:    '7',
895: 1:    '8',
895: 1:    '9',
895: 1:    '10',
895: 1:    '11',
895: 1:    '12',
895: 1:    '13',
895: 1:    '14',
895: 1:    '15',
895: 1:    '16',
895: 1:    '17',
895: 1:    '18',
895: 1:    '19',
895: 1:    '20',
895: 1:    '21',
895: 1:    '22'
895: 1:  ]
895: 1:}
895: 1:Scores: 92359
895: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204', '184', '166', '150', '135', '122', '110']')
895: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
896: 1:BoardData {
896: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
896: 1:  'expectedAnswer': '99',
896: 1:  'history': [
896: 1:    {
896: 1:      'answer': '971',
896: 1:      'question': '1',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '874',
896: 1:      'question': '2',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '787',
896: 1:      'question': '3',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '709',
896: 1:      'question': '4',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '639',
896: 1:      'question': '5',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '576',
896: 1:      'question': '6',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '519',
896: 1:      'question': '7',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '468',
896: 1:      'question': '8',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '422',
896: 1:      'question': '9',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '380',
896: 1:      'question': '10',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '342',
896: 1:      'question': '11',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '308',
896: 1:      'question': '12',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '278',
896: 1:      'question': '13',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '251',
896: 1:      'question': '14',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '226',
896: 1:      'question': '15',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '204',
896: 1:      'question': '16',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '184',
896: 1:      'question': '17',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '166',
896: 1:      'question': '18',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '150',
896: 1:      'question': '19',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '135',
896: 1:      'question': '20',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '122',
896: 1:      'question': '21',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '110',
896: 1:      'question': '22',
896: 1:      'valid': true
896: 1:    }
896: 1:  ],
896: 1:  'info': [
896: 1:    '✅f(1) = 971',
896: 1:    '✅f(2) = 874',
896: 1:    '✅f(3) = 787',
896: 1:    '✅f(4) = 709',
896: 1:    '✅f(5) = 639',
896: 1:    '✅f(6) = 576',
896: 1:    '✅f(7) = 519',
896: 1:    '✅f(8) = 468',
896: 1:    '✅f(9) = 422',
896: 1:    '✅f(10) = 380',
896: 1:    '✅f(11) = 342',
896: 1:    '✅f(12) = 308',
896: 1:    '✅f(13) = 278',
896: 1:    '✅f(14) = 251',
896: 1:    '✅f(15) = 226',
896: 1:    '✅f(16) = 204',
896: 1:    '✅f(17) = 184',
896: 1:    '✅f(18) = 166',
896: 1:    '✅f(19) = 150',
896: 1:    '✅f(20) = 135',
896: 1:    '✅f(21) = 122',
896: 1:    '✅f(22) = 110',
896: 1:    '❌f(23) = ??? != 99'
896: 1:  ],
896: 1:  'level': 31,
896: 1:  'nextQuestion': '23',
896: 1:  'questions': [
896: 1:    '1',
896: 1:    '2',
896: 1:    '3',
896: 1:    '4',
896: 1:    '5',
896: 1:    '6',
896: 1:    '7',
896: 1:    '8',
896: 1:    '9',
896: 1:    '10',
896: 1:    '11',
896: 1:    '12',
896: 1:    '13',
896: 1:    '14',
896: 1:    '15',
896: 1:    '16',
896: 1:    '17',
896: 1:    '18',
896: 1:    '19',
896: 1:    '20',
896: 1:    '21',
896: 1:    '22',
896: 1:    '23'
896: 1:  ]
896: 1:}
896: 1:Scores: 92379
896: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204', '184', '166', '150', '135', '122', '110', '99']')
896: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
897: 1:BoardData {
897: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
897: 1:  'expectedAnswer': '90',
897: 1:  'history': [
897: 1:    {
897: 1:      'answer': '971',
897: 1:      'question': '1',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '874',
897: 1:      'question': '2',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '787',
897: 1:      'question': '3',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '709',
897: 1:      'question': '4',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '639',
897: 1:      'question': '5',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '576',
897: 1:      'question': '6',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '519',
897: 1:      'question': '7',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '468',
897: 1:      'question': '8',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '422',
897: 1:      'question': '9',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '380',
897: 1:      'question': '10',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '342',
897: 1:      'question': '11',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '308',
897: 1:      'question': '12',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '278',
897: 1:      'question': '13',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '251',
897: 1:      'question': '14',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '226',
897: 1:      'question': '15',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '204',
897: 1:      'question': '16',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '184',
897: 1:      'question': '17',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '166',
897: 1:      'question': '18',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '150',
897: 1:      'question': '19',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '135',
897: 1:      'question': '20',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '122',
897: 1:      'question': '21',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '110',
897: 1:      'question': '22',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '99',
897: 1:      'question': '23',
897: 1:      'valid': true
897: 1:    }
897: 1:  ],
897: 1:  'info': [
897: 1:    '✅f(1) = 971',
897: 1:    '✅f(2) = 874',
897: 1:    '✅f(3) = 787',
897: 1:    '✅f(4) = 709',
897: 1:    '✅f(5) = 639',
897: 1:    '✅f(6) = 576',
897: 1:    '✅f(7) = 519',
897: 1:    '✅f(8) = 468',
897: 1:    '✅f(9) = 422',
897: 1:    '✅f(10) = 380',
897: 1:    '✅f(11) = 342',
897: 1:    '✅f(12) = 308',
897: 1:    '✅f(13) = 278',
897: 1:    '✅f(14) = 251',
897: 1:    '✅f(15) = 226',
897: 1:    '✅f(16) = 204',
897: 1:    '✅f(17) = 184',
897: 1:    '✅f(18) = 166',
897: 1:    '✅f(19) = 150',
897: 1:    '✅f(20) = 135',
897: 1:    '✅f(21) = 122',
897: 1:    '✅f(22) = 110',
897: 1:    '✅f(23) = 99',
897: 1:    '❌f(24) = ??? != 90'
897: 1:  ],
897: 1:  'level': 31,
897: 1:  'nextQuestion': '24',
897: 1:  'questions': [
897: 1:    '1',
897: 1:    '2',
897: 1:    '3',
897: 1:    '4',
897: 1:    '5',
897: 1:    '6',
897: 1:    '7',
897: 1:    '8',
897: 1:    '9',
897: 1:    '10',
897: 1:    '11',
897: 1:    '12',
897: 1:    '13',
897: 1:    '14',
897: 1:    '15',
897: 1:    '16',
897: 1:    '17',
897: 1:    '18',
897: 1:    '19',
897: 1:    '20',
897: 1:    '21',
897: 1:    '22',
897: 1:    '23',
897: 1:    '24'
897: 1:  ]
897: 1:}
897: 1:Scores: 92399
897: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204', '184', '166', '150', '135', '122', '110', '99', '90']')
897: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
898: 1:BoardData {
898: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
898: 1:  'expectedAnswer': '81',
898: 1:  'history': [
898: 1:    {
898: 1:      'answer': '971',
898: 1:      'question': '1',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '874',
898: 1:      'question': '2',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '787',
898: 1:      'question': '3',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '709',
898: 1:      'question': '4',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '639',
898: 1:      'question': '5',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '576',
898: 1:      'question': '6',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '519',
898: 1:      'question': '7',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '468',
898: 1:      'question': '8',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '422',
898: 1:      'question': '9',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '380',
898: 1:      'question': '10',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '342',
898: 1:      'question': '11',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '308',
898: 1:      'question': '12',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '278',
898: 1:      'question': '13',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '251',
898: 1:      'question': '14',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '226',
898: 1:      'question': '15',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '204',
898: 1:      'question': '16',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '184',
898: 1:      'question': '17',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '166',
898: 1:      'question': '18',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '150',
898: 1:      'question': '19',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '135',
898: 1:      'question': '20',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '122',
898: 1:      'question': '21',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '110',
898: 1:      'question': '22',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '99',
898: 1:      'question': '23',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '90',
898: 1:      'question': '24',
898: 1:      'valid': true
898: 1:    }
898: 1:  ],
898: 1:  'info': [
898: 1:    '✅f(1) = 971',
898: 1:    '✅f(2) = 874',
898: 1:    '✅f(3) = 787',
898: 1:    '✅f(4) = 709',
898: 1:    '✅f(5) = 639',
898: 1:    '✅f(6) = 576',
898: 1:    '✅f(7) = 519',
898: 1:    '✅f(8) = 468',
898: 1:    '✅f(9) = 422',
898: 1:    '✅f(10) = 380',
898: 1:    '✅f(11) = 342',
898: 1:    '✅f(12) = 308',
898: 1:    '✅f(13) = 278',
898: 1:    '✅f(14) = 251',
898: 1:    '✅f(15) = 226',
898: 1:    '✅f(16) = 204',
898: 1:    '✅f(17) = 184',
898: 1:    '✅f(18) = 166',
898: 1:    '✅f(19) = 150',
898: 1:    '✅f(20) = 135',
898: 1:    '✅f(21) = 122',
898: 1:    '✅f(22) = 110',
898: 1:    '✅f(23) = 99',
898: 1:    '✅f(24) = 90',
898: 1:    '❌f(25) = ??? != 81'
898: 1:  ],
898: 1:  'level': 31,
898: 1:  'nextQuestion': '25',
898: 1:  'questions': [
898: 1:    '1',
898: 1:    '2',
898: 1:    '3',
898: 1:    '4',
898: 1:    '5',
898: 1:    '6',
898: 1:    '7',
898: 1:    '8',
898: 1:    '9',
898: 1:    '10',
898: 1:    '11',
898: 1:    '12',
898: 1:    '13',
898: 1:    '14',
898: 1:    '15',
898: 1:    '16',
898: 1:    '17',
898: 1:    '18',
898: 1:    '19',
898: 1:    '20',
898: 1:    '21',
898: 1:    '22',
898: 1:    '23',
898: 1:    '24',
898: 1:    '25'
898: 1:  ]
898: 1:}
898: 1:Scores: 92419
898: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204', '184', '166', '150', '135', '122', '110', '99', '90', '81']')
898: 1:Fire Event: PassTest{complexity=50, testCount=25}
898: 1:Fire Event: NextAlgorithm{complexity=50, time=0}
------------------------------------------
899: 1:BoardData {
899: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
899: 1:  'history': [
899: 1:    {
899: 1:      'answer': '971',
899: 1:      'question': '1',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '874',
899: 1:      'question': '2',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '787',
899: 1:      'question': '3',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '709',
899: 1:      'question': '4',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '639',
899: 1:      'question': '5',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '576',
899: 1:      'question': '6',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '519',
899: 1:      'question': '7',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '468',
899: 1:      'question': '8',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '422',
899: 1:      'question': '9',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '380',
899: 1:      'question': '10',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '342',
899: 1:      'question': '11',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '308',
899: 1:      'question': '12',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '278',
899: 1:      'question': '13',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '251',
899: 1:      'question': '14',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '226',
899: 1:      'question': '15',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '204',
899: 1:      'question': '16',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '184',
899: 1:      'question': '17',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '166',
899: 1:      'question': '18',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '150',
899: 1:      'question': '19',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '135',
899: 1:      'question': '20',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '122',
899: 1:      'question': '21',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '110',
899: 1:      'question': '22',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '99',
899: 1:      'question': '23',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '90',
899: 1:      'question': '24',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '81',
899: 1:      'question': '25',
899: 1:      'valid': true
899: 1:    }
899: 1:  ],
899: 1:  'info': [
899: 1:    '✅f(1) = 971',
899: 1:    '✅f(2) = 874',
899: 1:    '✅f(3) = 787',
899: 1:    '✅f(4) = 709',
899: 1:    '✅f(5) = 639',
899: 1:    '✅f(6) = 576',
899: 1:    '✅f(7) = 519',
899: 1:    '✅f(8) = 468',
899: 1:    '✅f(9) = 422',
899: 1:    '✅f(10) = 380',
899: 1:    '✅f(11) = 342',
899: 1:    '✅f(12) = 308',
899: 1:    '✅f(13) = 278',
899: 1:    '✅f(14) = 251',
899: 1:    '✅f(15) = 226',
899: 1:    '✅f(16) = 204',
899: 1:    '✅f(17) = 184',
899: 1:    '✅f(18) = 166',
899: 1:    '✅f(19) = 150',
899: 1:    '✅f(20) = 135',
899: 1:    '✅f(21) = 122',
899: 1:    '✅f(22) = 110',
899: 1:    '✅f(23) = 99',
899: 1:    '✅f(24) = 90',
899: 1:    '✅f(25) = 81'
899: 1:  ],
899: 1:  'level': 31,
899: 1:  'questions': []
899: 1:}
899: 1:Scores: 99188
899: 1:Answer: message('StartNextLevel')
899: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
900: 1:BoardData {
900: 1:  'description': [
900: 1:    'You are given an array of vertical lines height, so that Y-axis is the line height and X-axis is line index from an array. Write a Javascript function that finds two lines that together forms the rectangle with largest area. Return the maximum area number and line coordinates in format {area}:{x1},{x2}. For example:\n 1, 6, 3, 2, 8 => 18:1,4\n 5, 2, 8, 1, 4 => 16:0,4\n 7, 10, 2, 3, 1 => 9:0,3',
900: 1:    'Solve this task with O(n) complexity.',
900: 1:    'Return line coordinates of last found rectangle.'
900: 1:  ],
900: 1:  'expectedAnswer': '24:1,5',
900: 1:  'history': [],
900: 1:  'info': ['❌f(3, 6, 2, 5, 4, 8, 3) = ??? != 24:1,5'],
900: 1:  'level': 32,
900: 1:  'nextQuestion': '3, 6, 2, 5, 4, 8, 3',
900: 1:  'questions': ['3, 6, 2, 5, 4, 8, 3']
900: 1:}
900: 1:Scores: 99188
900: 1:Answer: message('['24:1,5']')
900: 1:Fire Event: PassTest{complexity=51, testCount=9}
------------------------------------------
901: 1:BoardData {
901: 1:  'description': [
901: 1:    'You are given an array of vertical lines height, so that Y-axis is the line height and X-axis is line index from an array. Write a Javascript function that finds two lines that together forms the rectangle with largest area. Return the maximum area number and line coordinates in format {area}:{x1},{x2}. For example:\n 1, 6, 3, 2, 8 => 18:1,4\n 5, 2, 8, 1, 4 => 16:0,4\n 7, 10, 2, 3, 1 => 9:0,3',
901: 1:    'Solve this task with O(n) complexity.',
901: 1:    'Return line coordinates of last found rectangle.'
901: 1:  ],
901: 1:  'expectedAnswer': '4:0,4',
901: 1:  'history': [{
901: 1:    'answer': '24:1,5',
901: 1:    'question': '3, 6, 2, 5, 4, 8, 3',
901: 1:    'valid': true
901: 1:  }],
901: 1:  'info': [
901: 1:    '✅f(3, 6, 2, 5, 4, 8, 3) = 24:1,5',
901: 1:    '❌f(1, 1, 1, 1, 1) = ??? != 4:0,4'
901: 1:  ],
901: 1:  'level': 32,
901: 1:  'nextQuestion': '1, 1, 1, 1, 1',
901: 1:  'questions': [
901: 1:    '3, 6, 2, 5, 4, 8, 3',
901: 1:    '1, 1, 1, 1, 1'
901: 1:  ]
901: 1:}
901: 1:Scores: 99244
901: 1:Answer: message('['24:1,5', '4:0,4']')
901: 1:Fire Event: PassTest{complexity=51, testCount=9}
------------------------------------------
902: 1:BoardData {
902: 1:  'description': [
902: 1:    'You are given an array of vertical lines height, so that Y-axis is the line height and X-axis is line index from an array. Write a Javascript function that finds two lines that together forms the rectangle with largest area. Return the maximum area number and line coordinates in format {area}:{x1},{x2}. For example:\n 1, 6, 3, 2, 8 => 18:1,4\n 5, 2, 8, 1, 4 => 16:0,4\n 7, 10, 2, 3, 1 => 9:0,3',
902: 1:    'Solve this task with O(n) complexity.',
902: 1:    'Return line coordinates of last found rectangle.'
902: 1:  ],
902: 1:  'expectedAnswer': '4:1,3',
902: 1:  'history': [
902: 1:    {
902: 1:      'answer': '24:1,5',
902: 1:      'question': '3, 6, 2, 5, 4, 8, 3',
902: 1:      'valid': true
902: 1:    },
902: 1:    {
902: 1:      'answer': '4:0,4',
902: 1:      'question': '1, 1, 1, 1, 1',
902: 1:      'valid': true
902: 1:    }
902: 1:  ],
902: 1:  'info': [
902: 1:    '✅f(3, 6, 2, 5, 4, 8, 3) = 24:1,5',
902: 1:    '✅f(1, 1, 1, 1, 1) = 4:0,4',
902: 1:    '❌f(1, 2, 1, 2, 1) = ??? != 4:1,3'
902: 1:  ],
902: 1:  'level': 32,
902: 1:  'nextQuestion': '1, 2, 1, 2, 1',
902: 1:  'questions': [
902: 1:    '3, 6, 2, 5, 4, 8, 3',
902: 1:    '1, 1, 1, 1, 1',
902: 1:    '1, 2, 1, 2, 1'
902: 1:  ]
902: 1:}
902: 1:Scores: 99300
902: 1:Answer: message('['24:1,5', '4:0,4', '4:1,3']')
902: 1:Fire Event: PassTest{complexity=51, testCount=9}
------------------------------------------
903: 1:BoardData {
903: 1:  'description': [
903: 1:    'You are given an array of vertical lines height, so that Y-axis is the line height and X-axis is line index from an array. Write a Javascript function that finds two lines that together forms the rectangle with largest area. Return the maximum area number and line coordinates in format {area}:{x1},{x2}. For example:\n 1, 6, 3, 2, 8 => 18:1,4\n 5, 2, 8, 1, 4 => 16:0,4\n 7, 10, 2, 3, 1 => 9:0,3',
903: 1:    'Solve this task with O(n) complexity.',
903: 1:    'Return line coordinates of last found rectangle.'
903: 1:  ],
903: 1:  'expectedAnswer': '4:0,4',
903: 1:  'history': [
903: 1:    {
903: 1:      'answer': '24:1,5',
903: 1:      'question': '3, 6, 2, 5, 4, 8, 3',
903: 1:      'valid': true
903: 1:    },
903: 1:    {
903: 1:      'answer': '4:0,4',
903: 1:      'question': '1, 1, 1, 1, 1',
903: 1:      'valid': true
903: 1:    },
903: 1:    {
903: 1:      'answer': '4:1,3',
903: 1:      'question': '1, 2, 1, 2, 1',
903: 1:      'valid': true
903: 1:    }
903: 1:  ],
903: 1:  'info': [
903: 1:    '✅f(3, 6, 2, 5, 4, 8, 3) = 24:1,5',
903: 1:    '✅f(1, 1, 1, 1, 1) = 4:0,4',
903: 1:    '✅f(1, 2, 1, 2, 1) = 4:1,3',
903: 1:    '❌f(1, 1, 10, 1, 1) = ??? != 4:0,4'
903: 1:  ],
903: 1:  'level': 32,
903: 1:  'nextQuestion': '1, 1, 10, 1, 1',
903: 1:  'questions': [
903: 1:    '3, 6, 2, 5, 4, 8, 3',
903: 1:    '1, 1, 1, 1, 1',
903: 1:    '1, 2, 1, 2, 1',
903: 1:    '1, 1, 10, 1, 1'
903: 1:  ]
903: 1:}
903: 1:Scores: 99356
903: 1:Answer: message('['24:1,5', '4:0,4', '4:1,3', '4:0,4']')
903: 1:Fire Event: PassTest{complexity=51, testCount=9}
------------------------------------------
904: 1:BoardData {
904: 1:  'description': [
904: 1:    'You are given an array of vertical lines height, so that Y-axis is the line height and X-axis is line index from an array. Write a Javascript function that finds two lines that together forms the rectangle with largest area. Return the maximum area number and line coordinates in format {area}:{x1},{x2}. For example:\n 1, 6, 3, 2, 8 => 18:1,4\n 5, 2, 8, 1, 4 => 16:0,4\n 7, 10, 2, 3, 1 => 9:0,3',
904: 1:    'Solve this task with O(n) complexity.',
904: 1:    'Return line coordinates of last found rectangle.'
904: 1:  ],
904: 1:  'expectedAnswer': '10:1,3',
904: 1:  'history': [
904: 1:    {
904: 1:      'answer': '24:1,5',
904: 1:      'question': '3, 6, 2, 5, 4, 8, 3',
904: 1:      'valid': true
904: 1:    },
904: 1:    {
904: 1:      'answer': '4:0,4',
904: 1:      'question': '1, 1, 1, 1, 1',
904: 1:      'valid': true
904: 1:    },
904: 1:    {
904: 1:      'answer': '4:1,3',
904: 1:      'question': '1, 2, 1, 2, 1',
904: 1:      'valid': true
904: 1:    },
904: 1:    {
904: 1:      'answer': '4:0,4',
904: 1:      'question': '1, 1, 10, 1, 1',
904: 1:      'valid': true
904: 1:    }
904: 1:  ],
904: 1:  'info': [
904: 1:    '✅f(3, 6, 2, 5, 4, 8, 3) = 24:1,5',
904: 1:    '✅f(1, 1, 1, 1, 1) = 4:0,4',
904: 1:    '✅f(1, 2, 1, 2, 1) = 4:1,3',
904: 1:    '✅f(1, 1, 10, 1, 1) = 4:0,4',
904: 1:    '❌f(1, 5, 10, 5, 1) = ??? != 10:1,3'
904: 1:  ],
904: 1:  'level': 32,
904: 1:  'nextQuestion': '1, 5, 10, 5, 1',
904: 1:  'questions': [
904: 1:    '3, 6, 2, 5, 4, 8, 3',
904: 1:    '1, 1, 1, 1, 1',
904: 1:    '1, 2, 1, 2, 1',
904: 1:    '1, 1, 10, 1, 1',
904: 1:    '1, 5, 10, 5, 1'
904: 1:  ]
904: 1:}
904: 1:Scores: 99412
904: 1:Answer: message('['24:1,5', '4:0,4', '4:1,3', '4:0,4', '10:1,3']')
904: 1:Fire Event: PassTest{complexity=51, testCount=9}
------------------------------------------
905: 1:BoardData {
905: 1:  'description': [
905: 1:    'You are given an array of vertical lines height, so that Y-axis is the line height and X-axis is line index from an array. Write a Javascript function that finds two lines that together forms the rectangle with largest area. Return the maximum area number and line coordinates in format {area}:{x1},{x2}. For example:\n 1, 6, 3, 2, 8 => 18:1,4\n 5, 2, 8, 1, 4 => 16:0,4\n 7, 10, 2, 3, 1 => 9:0,3',
905: 1:    'Solve this task with O(n) complexity.',
905: 1:    'Return line coordinates of last found rectangle.'
905: 1:  ],
905: 1:  'expectedAnswer': '20:0,4',
905: 1:  'history': [
905: 1:    {
905: 1:      'answer': '24:1,5',
905: 1:      'question': '3, 6, 2, 5, 4, 8, 3',
905: 1:      'valid': true
905: 1:    },
905: 1:    {
905: 1:      'answer': '4:0,4',
905: 1:      'question': '1, 1, 1, 1, 1',
905: 1:      'valid': true
905: 1:    },
905: 1:    {
905: 1:      'answer': '4:1,3',
905: 1:      'question': '1, 2, 1, 2, 1',
905: 1:      'valid': true
905: 1:    },
905: 1:    {
905: 1:      'answer': '4:0,4',
905: 1:      'question': '1, 1, 10, 1, 1',
905: 1:      'valid': true
905: 1:    },
905: 1:    {
905: 1:      'answer': '10:1,3',
905: 1:      'question': '1, 5, 10, 5, 1',
905: 1:      'valid': true
905: 1:    }
905: 1:  ],
905: 1:  'info': [
905: 1:    '✅f(3, 6, 2, 5, 4, 8, 3) = 24:1,5',
905: 1:    '✅f(1, 1, 1, 1, 1) = 4:0,4',
905: 1:    '✅f(1, 2, 1, 2, 1) = 4:1,3',
905: 1:    '✅f(1, 1, 10, 1, 1) = 4:0,4',
905: 1:    '✅f(1, 5, 10, 5, 1) = 10:1,3',
905: 1:    '❌f(5, 1, 10, 1, 5) = ??? != 20:0,4'
905: 1:  ],
905: 1:  'level': 32,
905: 1:  'nextQuestion': '5, 1, 10, 1, 5',
905: 1:  'questions': [
905: 1:    '3, 6, 2, 5, 4, 8, 3',
905: 1:    '1, 1, 1, 1, 1',
905: 1:    '1, 2, 1, 2, 1',
905: 1:    '1, 1, 10, 1, 1',
905: 1:    '1, 5, 10, 5, 1',
905: 1:    '5, 1, 10, 1, 5'
905: 1:  ]
905: 1:}
905: 1:Scores: 99468
905: 1:Answer: message('['24:1,5', '4:0,4', '4:1,3', '4:0,4', '10:1,3', '20:0,4']')
905: 1:Fire Event: PassTest{complexity=51, testCount=9}
------------------------------------------
906: 1:BoardData {
906: 1:  'description': [
906: 1:    'You are given an array of vertical lines height, so that Y-axis is the line height and X-axis is line index from an array. Write a Javascript function that finds two lines that together forms the rectangle with largest area. Return the maximum area number and line coordinates in format {area}:{x1},{x2}. For example:\n 1, 6, 3, 2, 8 => 18:1,4\n 5, 2, 8, 1, 4 => 16:0,4\n 7, 10, 2, 3, 1 => 9:0,3',
906: 1:    'Solve this task with O(n) complexity.',
906: 1:    'Return line coordinates of last found rectangle.'
906: 1:  ],
906: 1:  'expectedAnswer': '400:0,4',
906: 1:  'history': [
906: 1:    {
906: 1:      'answer': '24:1,5',
906: 1:      'question': '3, 6, 2, 5, 4, 8, 3',
906: 1:      'valid': true
906: 1:    },
906: 1:    {
906: 1:      'answer': '4:0,4',
906: 1:      'question': '1, 1, 1, 1, 1',
906: 1:      'valid': true
906: 1:    },
906: 1:    {
906: 1:      'answer': '4:1,3',
906: 1:      'question': '1, 2, 1, 2, 1',
906: 1:      'valid': true
906: 1:    },
906: 1:    {
906: 1:      'answer': '4:0,4',
906: 1:      'question': '1, 1, 10, 1, 1',
906: 1:      'valid': true
906: 1:    },
906: 1:    {
906: 1:      'answer': '10:1,3',
906: 1:      'question': '1, 5, 10, 5, 1',
906: 1:      'valid': true
906: 1:    },
906: 1:    {
906: 1:      'answer': '20:0,4',
906: 1:      'question': '5, 1, 10, 1, 5',
906: 1:      'valid': true
906: 1:    }
906: 1:  ],
906: 1:  'info': [
906: 1:    '✅f(3, 6, 2, 5, 4, 8, 3) = 24:1,5',
906: 1:    '✅f(1, 1, 1, 1, 1) = 4:0,4',
906: 1:    '✅f(1, 2, 1, 2, 1) = 4:1,3',
906: 1:    '✅f(1, 1, 10, 1, 1) = 4:0,4',
906: 1:    '✅f(1, 5, 10, 5, 1) = 10:1,3',
906: 1:    '✅f(5, 1, 10, 1, 5) = 20:0,4',
906: 1:    '❌f(100, 5, 1, 5, 100) = ??? != 400:0,4'
906: 1:  ],
906: 1:  'level': 32,
906: 1:  'nextQuestion': '100, 5, 1, 5, 100',
906: 1:  'questions': [
906: 1:    '3, 6, 2, 5, 4, 8, 3',
906: 1:    '1, 1, 1, 1, 1',
906: 1:    '1, 2, 1, 2, 1',
906: 1:    '1, 1, 10, 1, 1',
906: 1:    '1, 5, 10, 5, 1',
906: 1:    '5, 1, 10, 1, 5',
906: 1:    '100, 5, 1, 5, 100'
906: 1:  ]
906: 1:}
906: 1:Scores: 99524
906: 1:Answer: message('['24:1,5', '4:0,4', '4:1,3', '4:0,4', '10:1,3', '20:0,4', '400:0,4']')
906: 1:Fire Event: PassTest{complexity=51, testCount=9}
------------------------------------------
907: 1:BoardData {
907: 1:  'description': [
907: 1:    'You are given an array of vertical lines height, so that Y-axis is the line height and X-axis is line index from an array. Write a Javascript function that finds two lines that together forms the rectangle with largest area. Return the maximum area number and line coordinates in format {area}:{x1},{x2}. For example:\n 1, 6, 3, 2, 8 => 18:1,4\n 5, 2, 8, 1, 4 => 16:0,4\n 7, 10, 2, 3, 1 => 9:0,3',
907: 1:    'Solve this task with O(n) complexity.',
907: 1:    'Return line coordinates of last found rectangle.'
907: 1:  ],
907: 1:  'expectedAnswer': '400:0,4',
907: 1:  'history': [
907: 1:    {
907: 1:      'answer': '24:1,5',
907: 1:      'question': '3, 6, 2, 5, 4, 8, 3',
907: 1:      'valid': true
907: 1:    },
907: 1:    {
907: 1:      'answer': '4:0,4',
907: 1:      'question': '1, 1, 1, 1, 1',
907: 1:      'valid': true
907: 1:    },
907: 1:    {
907: 1:      'answer': '4:1,3',
907: 1:      'question': '1, 2, 1, 2, 1',
907: 1:      'valid': true
907: 1:    },
907: 1:    {
907: 1:      'answer': '4:0,4',
907: 1:      'question': '1, 1, 10, 1, 1',
907: 1:      'valid': true
907: 1:    },
907: 1:    {
907: 1:      'answer': '10:1,3',
907: 1:      'question': '1, 5, 10, 5, 1',
907: 1:      'valid': true
907: 1:    },
907: 1:    {
907: 1:      'answer': '20:0,4',
907: 1:      'question': '5, 1, 10, 1, 5',
907: 1:      'valid': true
907: 1:    },
907: 1:    {
907: 1:      'answer': '400:0,4',
907: 1:      'question': '100, 5, 1, 5, 100',
907: 1:      'valid': true
907: 1:    }
907: 1:  ],
907: 1:  'info': [
907: 1:    '✅f(3, 6, 2, 5, 4, 8, 3) = 24:1,5',
907: 1:    '✅f(1, 1, 1, 1, 1) = 4:0,4',
907: 1:    '✅f(1, 2, 1, 2, 1) = 4:1,3',
907: 1:    '✅f(1, 1, 10, 1, 1) = 4:0,4',
907: 1:    '✅f(1, 5, 10, 5, 1) = 10:1,3',
907: 1:    '✅f(5, 1, 10, 1, 5) = 20:0,4',
907: 1:    '✅f(100, 5, 1, 5, 100) = 400:0,4',
907: 1:    '❌f(100, 1, 5, 1, 100) = ??? != 400:0,4'
907: 1:  ],
907: 1:  'level': 32,
907: 1:  'nextQuestion': '100, 1, 5, 1, 100',
907: 1:  'questions': [
907: 1:    '3, 6, 2, 5, 4, 8, 3',
907: 1:    '1, 1, 1, 1, 1',
907: 1:    '1, 2, 1, 2, 1',
907: 1:    '1, 1, 10, 1, 1',
907: 1:    '1, 5, 10, 5, 1',
907: 1:    '5, 1, 10, 1, 5',
907: 1:    '100, 5, 1, 5, 100',
907: 1:    '100, 1, 5, 1, 100'
907: 1:  ]
907: 1:}
907: 1:Scores: 99580
907: 1:Answer: message('['24:1,5', '4:0,4', '4:1,3', '4:0,4', '10:1,3', '20:0,4', '400:0,4', '400:0,4']')
907: 1:Fire Event: PassTest{complexity=51, testCount=9}
------------------------------------------
908: 1:BoardData {
908: 1:  'description': [
908: 1:    'You are given an array of vertical lines height, so that Y-axis is the line height and X-axis is line index from an array. Write a Javascript function that finds two lines that together forms the rectangle with largest area. Return the maximum area number and line coordinates in format {area}:{x1},{x2}. For example:\n 1, 6, 3, 2, 8 => 18:1,4\n 5, 2, 8, 1, 4 => 16:0,4\n 7, 10, 2, 3, 1 => 9:0,3',
908: 1:    'Solve this task with O(n) complexity.',
908: 1:    'Return line coordinates of last found rectangle.'
908: 1:  ],
908: 1:  'expectedAnswer': '200:1,3',
908: 1:  'history': [
908: 1:    {
908: 1:      'answer': '24:1,5',
908: 1:      'question': '3, 6, 2, 5, 4, 8, 3',
908: 1:      'valid': true
908: 1:    },
908: 1:    {
908: 1:      'answer': '4:0,4',
908: 1:      'question': '1, 1, 1, 1, 1',
908: 1:      'valid': true
908: 1:    },
908: 1:    {
908: 1:      'answer': '4:1,3',
908: 1:      'question': '1, 2, 1, 2, 1',
908: 1:      'valid': true
908: 1:    },
908: 1:    {
908: 1:      'answer': '4:0,4',
908: 1:      'question': '1, 1, 10, 1, 1',
908: 1:      'valid': true
908: 1:    },
908: 1:    {
908: 1:      'answer': '10:1,3',
908: 1:      'question': '1, 5, 10, 5, 1',
908: 1:      'valid': true
908: 1:    },
908: 1:    {
908: 1:      'answer': '20:0,4',
908: 1:      'question': '5, 1, 10, 1, 5',
908: 1:      'valid': true
908: 1:    },
908: 1:    {
908: 1:      'answer': '400:0,4',
908: 1:      'question': '100, 5, 1, 5, 100',
908: 1:      'valid': true
908: 1:    },
908: 1:    {
908: 1:      'answer': '400:0,4',
908: 1:      'question': '100, 1, 5, 1, 100',
908: 1:      'valid': true
908: 1:    }
908: 1:  ],
908: 1:  'info': [
908: 1:    '✅f(3, 6, 2, 5, 4, 8, 3) = 24:1,5',
908: 1:    '✅f(1, 1, 1, 1, 1) = 4:0,4',
908: 1:    '✅f(1, 2, 1, 2, 1) = 4:1,3',
908: 1:    '✅f(1, 1, 10, 1, 1) = 4:0,4',
908: 1:    '✅f(1, 5, 10, 5, 1) = 10:1,3',
908: 1:    '✅f(5, 1, 10, 1, 5) = 20:0,4',
908: 1:    '✅f(100, 5, 1, 5, 100) = 400:0,4',
908: 1:    '✅f(100, 1, 5, 1, 100) = 400:0,4',
908: 1:    '❌f(1, 100, 1, 100, 1) = ??? != 200:1,3'
908: 1:  ],
908: 1:  'level': 32,
908: 1:  'nextQuestion': '1, 100, 1, 100, 1',
908: 1:  'questions': [
908: 1:    '3, 6, 2, 5, 4, 8, 3',
908: 1:    '1, 1, 1, 1, 1',
908: 1:    '1, 2, 1, 2, 1',
908: 1:    '1, 1, 10, 1, 1',
908: 1:    '1, 5, 10, 5, 1',
908: 1:    '5, 1, 10, 1, 5',
908: 1:    '100, 5, 1, 5, 100',
908: 1:    '100, 1, 5, 1, 100',
908: 1:    '1, 100, 1, 100, 1'
908: 1:  ]
908: 1:}
908: 1:Scores: 99636
908: 1:Answer: message('['24:1,5', '4:0,4', '4:1,3', '4:0,4', '10:1,3', '20:0,4', '400:0,4', '400:0,4', '200:1,3']')
908: 1:Fire Event: PassTest{complexity=51, testCount=9}
908: 1:Fire Event: NextAlgorithm{complexity=51, time=0}
------------------------------------------
909: 1:BoardData {
909: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
909: 1:  'history': [
909: 1:    {
909: 1:      'answer': '24:1,5',
909: 1:      'question': '3, 6, 2, 5, 4, 8, 3',
909: 1:      'valid': true
909: 1:    },
909: 1:    {
909: 1:      'answer': '4:0,4',
909: 1:      'question': '1, 1, 1, 1, 1',
909: 1:      'valid': true
909: 1:    },
909: 1:    {
909: 1:      'answer': '4:1,3',
909: 1:      'question': '1, 2, 1, 2, 1',
909: 1:      'valid': true
909: 1:    },
909: 1:    {
909: 1:      'answer': '4:0,4',
909: 1:      'question': '1, 1, 10, 1, 1',
909: 1:      'valid': true
909: 1:    },
909: 1:    {
909: 1:      'answer': '10:1,3',
909: 1:      'question': '1, 5, 10, 5, 1',
909: 1:      'valid': true
909: 1:    },
909: 1:    {
909: 1:      'answer': '20:0,4',
909: 1:      'question': '5, 1, 10, 1, 5',
909: 1:      'valid': true
909: 1:    },
909: 1:    {
909: 1:      'answer': '400:0,4',
909: 1:      'question': '100, 5, 1, 5, 100',
909: 1:      'valid': true
909: 1:    },
909: 1:    {
909: 1:      'answer': '400:0,4',
909: 1:      'question': '100, 1, 5, 1, 100',
909: 1:      'valid': true
909: 1:    },
909: 1:    {
909: 1:      'answer': '200:1,3',
909: 1:      'question': '1, 100, 1, 100, 1',
909: 1:      'valid': true
909: 1:    }
909: 1:  ],
909: 1:  'info': [
909: 1:    '✅f(3, 6, 2, 5, 4, 8, 3) = 24:1,5',
909: 1:    '✅f(1, 1, 1, 1, 1) = 4:0,4',
909: 1:    '✅f(1, 2, 1, 2, 1) = 4:1,3',
909: 1:    '✅f(1, 1, 10, 1, 1) = 4:0,4',
909: 1:    '✅f(1, 5, 10, 5, 1) = 10:1,3',
909: 1:    '✅f(5, 1, 10, 1, 5) = 20:0,4',
909: 1:    '✅f(100, 5, 1, 5, 100) = 400:0,4',
909: 1:    '✅f(100, 1, 5, 1, 100) = 400:0,4',
909: 1:    '✅f(1, 100, 1, 100, 1) = 200:1,3'
909: 1:  ],
909: 1:  'level': 32,
909: 1:  'questions': []
909: 1:}
909: 1:Scores: 106576
909: 1:Answer: message('StartNextLevel')
909: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
910: 1:BoardData {
910: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
910: 1:  'expectedAnswer': '2',
910: 1:  'history': [],
910: 1:  'info': ['❌f(1) = ??? != 2'],
910: 1:  'level': 33,
910: 1:  'nextQuestion': '1',
910: 1:  'questions': ['1']
910: 1:}
910: 1:Scores: 106576
910: 1:Answer: message('['2']')
910: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
911: 1:BoardData {
911: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
911: 1:  'expectedAnswer': '3',
911: 1:  'history': [{
911: 1:    'answer': '2',
911: 1:    'question': '1',
911: 1:    'valid': true
911: 1:  }],
911: 1:  'info': [
911: 1:    '✅f(1) = 2',
911: 1:    '❌f(2) = ??? != 3'
911: 1:  ],
911: 1:  'level': 33,
911: 1:  'nextQuestion': '2',
911: 1:  'questions': [
911: 1:    '1',
911: 1:    '2'
911: 1:  ]
911: 1:}
911: 1:Scores: 106598
911: 1:Answer: message('['2', '3']')
911: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
912: 1:BoardData {
912: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
912: 1:  'expectedAnswer': '5',
912: 1:  'history': [
912: 1:    {
912: 1:      'answer': '2',
912: 1:      'question': '1',
912: 1:      'valid': true
912: 1:    },
912: 1:    {
912: 1:      'answer': '3',
912: 1:      'question': '2',
912: 1:      'valid': true
912: 1:    }
912: 1:  ],
912: 1:  'info': [
912: 1:    '✅f(1) = 2',
912: 1:    '✅f(2) = 3',
912: 1:    '❌f(3) = ??? != 5'
912: 1:  ],
912: 1:  'level': 33,
912: 1:  'nextQuestion': '3',
912: 1:  'questions': [
912: 1:    '1',
912: 1:    '2',
912: 1:    '3'
912: 1:  ]
912: 1:}
912: 1:Scores: 106620
912: 1:Answer: message('['2', '3', '5']')
912: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
913: 1:BoardData {
913: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
913: 1:  'expectedAnswer': '7',
913: 1:  'history': [
913: 1:    {
913: 1:      'answer': '2',
913: 1:      'question': '1',
913: 1:      'valid': true
913: 1:    },
913: 1:    {
913: 1:      'answer': '3',
913: 1:      'question': '2',
913: 1:      'valid': true
913: 1:    },
913: 1:    {
913: 1:      'answer': '5',
913: 1:      'question': '3',
913: 1:      'valid': true
913: 1:    }
913: 1:  ],
913: 1:  'info': [
913: 1:    '✅f(1) = 2',
913: 1:    '✅f(2) = 3',
913: 1:    '✅f(3) = 5',
913: 1:    '❌f(4) = ??? != 7'
913: 1:  ],
913: 1:  'level': 33,
913: 1:  'nextQuestion': '4',
913: 1:  'questions': [
913: 1:    '1',
913: 1:    '2',
913: 1:    '3',
913: 1:    '4'
913: 1:  ]
913: 1:}
913: 1:Scores: 106642
913: 1:Answer: message('['2', '3', '5', '7']')
913: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
914: 1:BoardData {
914: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
914: 1:  'expectedAnswer': '11',
914: 1:  'history': [
914: 1:    {
914: 1:      'answer': '2',
914: 1:      'question': '1',
914: 1:      'valid': true
914: 1:    },
914: 1:    {
914: 1:      'answer': '3',
914: 1:      'question': '2',
914: 1:      'valid': true
914: 1:    },
914: 1:    {
914: 1:      'answer': '5',
914: 1:      'question': '3',
914: 1:      'valid': true
914: 1:    },
914: 1:    {
914: 1:      'answer': '7',
914: 1:      'question': '4',
914: 1:      'valid': true
914: 1:    }
914: 1:  ],
914: 1:  'info': [
914: 1:    '✅f(1) = 2',
914: 1:    '✅f(2) = 3',
914: 1:    '✅f(3) = 5',
914: 1:    '✅f(4) = 7',
914: 1:    '❌f(5) = ??? != 11'
914: 1:  ],
914: 1:  'level': 33,
914: 1:  'nextQuestion': '5',
914: 1:  'questions': [
914: 1:    '1',
914: 1:    '2',
914: 1:    '3',
914: 1:    '4',
914: 1:    '5'
914: 1:  ]
914: 1:}
914: 1:Scores: 106664
914: 1:Answer: message('['2', '3', '5', '7', '11']')
914: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
915: 1:BoardData {
915: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
915: 1:  'expectedAnswer': '13',
915: 1:  'history': [
915: 1:    {
915: 1:      'answer': '2',
915: 1:      'question': '1',
915: 1:      'valid': true
915: 1:    },
915: 1:    {
915: 1:      'answer': '3',
915: 1:      'question': '2',
915: 1:      'valid': true
915: 1:    },
915: 1:    {
915: 1:      'answer': '5',
915: 1:      'question': '3',
915: 1:      'valid': true
915: 1:    },
915: 1:    {
915: 1:      'answer': '7',
915: 1:      'question': '4',
915: 1:      'valid': true
915: 1:    },
915: 1:    {
915: 1:      'answer': '11',
915: 1:      'question': '5',
915: 1:      'valid': true
915: 1:    }
915: 1:  ],
915: 1:  'info': [
915: 1:    '✅f(1) = 2',
915: 1:    '✅f(2) = 3',
915: 1:    '✅f(3) = 5',
915: 1:    '✅f(4) = 7',
915: 1:    '✅f(5) = 11',
915: 1:    '❌f(6) = ??? != 13'
915: 1:  ],
915: 1:  'level': 33,
915: 1:  'nextQuestion': '6',
915: 1:  'questions': [
915: 1:    '1',
915: 1:    '2',
915: 1:    '3',
915: 1:    '4',
915: 1:    '5',
915: 1:    '6'
915: 1:  ]
915: 1:}
915: 1:Scores: 106686
915: 1:Answer: message('['2', '3', '5', '7', '11', '13']')
915: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
916: 1:BoardData {
916: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
916: 1:  'expectedAnswer': '17',
916: 1:  'history': [
916: 1:    {
916: 1:      'answer': '2',
916: 1:      'question': '1',
916: 1:      'valid': true
916: 1:    },
916: 1:    {
916: 1:      'answer': '3',
916: 1:      'question': '2',
916: 1:      'valid': true
916: 1:    },
916: 1:    {
916: 1:      'answer': '5',
916: 1:      'question': '3',
916: 1:      'valid': true
916: 1:    },
916: 1:    {
916: 1:      'answer': '7',
916: 1:      'question': '4',
916: 1:      'valid': true
916: 1:    },
916: 1:    {
916: 1:      'answer': '11',
916: 1:      'question': '5',
916: 1:      'valid': true
916: 1:    },
916: 1:    {
916: 1:      'answer': '13',
916: 1:      'question': '6',
916: 1:      'valid': true
916: 1:    }
916: 1:  ],
916: 1:  'info': [
916: 1:    '✅f(1) = 2',
916: 1:    '✅f(2) = 3',
916: 1:    '✅f(3) = 5',
916: 1:    '✅f(4) = 7',
916: 1:    '✅f(5) = 11',
916: 1:    '✅f(6) = 13',
916: 1:    '❌f(7) = ??? != 17'
916: 1:  ],
916: 1:  'level': 33,
916: 1:  'nextQuestion': '7',
916: 1:  'questions': [
916: 1:    '1',
916: 1:    '2',
916: 1:    '3',
916: 1:    '4',
916: 1:    '5',
916: 1:    '6',
916: 1:    '7'
916: 1:  ]
916: 1:}
916: 1:Scores: 106708
916: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17']')
916: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
917: 1:BoardData {
917: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
917: 1:  'expectedAnswer': '19',
917: 1:  'history': [
917: 1:    {
917: 1:      'answer': '2',
917: 1:      'question': '1',
917: 1:      'valid': true
917: 1:    },
917: 1:    {
917: 1:      'answer': '3',
917: 1:      'question': '2',
917: 1:      'valid': true
917: 1:    },
917: 1:    {
917: 1:      'answer': '5',
917: 1:      'question': '3',
917: 1:      'valid': true
917: 1:    },
917: 1:    {
917: 1:      'answer': '7',
917: 1:      'question': '4',
917: 1:      'valid': true
917: 1:    },
917: 1:    {
917: 1:      'answer': '11',
917: 1:      'question': '5',
917: 1:      'valid': true
917: 1:    },
917: 1:    {
917: 1:      'answer': '13',
917: 1:      'question': '6',
917: 1:      'valid': true
917: 1:    },
917: 1:    {
917: 1:      'answer': '17',
917: 1:      'question': '7',
917: 1:      'valid': true
917: 1:    }
917: 1:  ],
917: 1:  'info': [
917: 1:    '✅f(1) = 2',
917: 1:    '✅f(2) = 3',
917: 1:    '✅f(3) = 5',
917: 1:    '✅f(4) = 7',
917: 1:    '✅f(5) = 11',
917: 1:    '✅f(6) = 13',
917: 1:    '✅f(7) = 17',
917: 1:    '❌f(8) = ??? != 19'
917: 1:  ],
917: 1:  'level': 33,
917: 1:  'nextQuestion': '8',
917: 1:  'questions': [
917: 1:    '1',
917: 1:    '2',
917: 1:    '3',
917: 1:    '4',
917: 1:    '5',
917: 1:    '6',
917: 1:    '7',
917: 1:    '8'
917: 1:  ]
917: 1:}
917: 1:Scores: 106730
917: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19']')
917: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
918: 1:BoardData {
918: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
918: 1:  'expectedAnswer': '23',
918: 1:  'history': [
918: 1:    {
918: 1:      'answer': '2',
918: 1:      'question': '1',
918: 1:      'valid': true
918: 1:    },
918: 1:    {
918: 1:      'answer': '3',
918: 1:      'question': '2',
918: 1:      'valid': true
918: 1:    },
918: 1:    {
918: 1:      'answer': '5',
918: 1:      'question': '3',
918: 1:      'valid': true
918: 1:    },
918: 1:    {
918: 1:      'answer': '7',
918: 1:      'question': '4',
918: 1:      'valid': true
918: 1:    },
918: 1:    {
918: 1:      'answer': '11',
918: 1:      'question': '5',
918: 1:      'valid': true
918: 1:    },
918: 1:    {
918: 1:      'answer': '13',
918: 1:      'question': '6',
918: 1:      'valid': true
918: 1:    },
918: 1:    {
918: 1:      'answer': '17',
918: 1:      'question': '7',
918: 1:      'valid': true
918: 1:    },
918: 1:    {
918: 1:      'answer': '19',
918: 1:      'question': '8',
918: 1:      'valid': true
918: 1:    }
918: 1:  ],
918: 1:  'info': [
918: 1:    '✅f(1) = 2',
918: 1:    '✅f(2) = 3',
918: 1:    '✅f(3) = 5',
918: 1:    '✅f(4) = 7',
918: 1:    '✅f(5) = 11',
918: 1:    '✅f(6) = 13',
918: 1:    '✅f(7) = 17',
918: 1:    '✅f(8) = 19',
918: 1:    '❌f(9) = ??? != 23'
918: 1:  ],
918: 1:  'level': 33,
918: 1:  'nextQuestion': '9',
918: 1:  'questions': [
918: 1:    '1',
918: 1:    '2',
918: 1:    '3',
918: 1:    '4',
918: 1:    '5',
918: 1:    '6',
918: 1:    '7',
918: 1:    '8',
918: 1:    '9'
918: 1:  ]
918: 1:}
918: 1:Scores: 106752
918: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23']')
918: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
919: 1:BoardData {
919: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
919: 1:  'expectedAnswer': '29',
919: 1:  'history': [
919: 1:    {
919: 1:      'answer': '2',
919: 1:      'question': '1',
919: 1:      'valid': true
919: 1:    },
919: 1:    {
919: 1:      'answer': '3',
919: 1:      'question': '2',
919: 1:      'valid': true
919: 1:    },
919: 1:    {
919: 1:      'answer': '5',
919: 1:      'question': '3',
919: 1:      'valid': true
919: 1:    },
919: 1:    {
919: 1:      'answer': '7',
919: 1:      'question': '4',
919: 1:      'valid': true
919: 1:    },
919: 1:    {
919: 1:      'answer': '11',
919: 1:      'question': '5',
919: 1:      'valid': true
919: 1:    },
919: 1:    {
919: 1:      'answer': '13',
919: 1:      'question': '6',
919: 1:      'valid': true
919: 1:    },
919: 1:    {
919: 1:      'answer': '17',
919: 1:      'question': '7',
919: 1:      'valid': true
919: 1:    },
919: 1:    {
919: 1:      'answer': '19',
919: 1:      'question': '8',
919: 1:      'valid': true
919: 1:    },
919: 1:    {
919: 1:      'answer': '23',
919: 1:      'question': '9',
919: 1:      'valid': true
919: 1:    }
919: 1:  ],
919: 1:  'info': [
919: 1:    '✅f(1) = 2',
919: 1:    '✅f(2) = 3',
919: 1:    '✅f(3) = 5',
919: 1:    '✅f(4) = 7',
919: 1:    '✅f(5) = 11',
919: 1:    '✅f(6) = 13',
919: 1:    '✅f(7) = 17',
919: 1:    '✅f(8) = 19',
919: 1:    '✅f(9) = 23',
919: 1:    '❌f(10) = ??? != 29'
919: 1:  ],
919: 1:  'level': 33,
919: 1:  'nextQuestion': '10',
919: 1:  'questions': [
919: 1:    '1',
919: 1:    '2',
919: 1:    '3',
919: 1:    '4',
919: 1:    '5',
919: 1:    '6',
919: 1:    '7',
919: 1:    '8',
919: 1:    '9',
919: 1:    '10'
919: 1:  ]
919: 1:}
919: 1:Scores: 106774
919: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29']')
919: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
920: 1:BoardData {
920: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
920: 1:  'expectedAnswer': '31',
920: 1:  'history': [
920: 1:    {
920: 1:      'answer': '2',
920: 1:      'question': '1',
920: 1:      'valid': true
920: 1:    },
920: 1:    {
920: 1:      'answer': '3',
920: 1:      'question': '2',
920: 1:      'valid': true
920: 1:    },
920: 1:    {
920: 1:      'answer': '5',
920: 1:      'question': '3',
920: 1:      'valid': true
920: 1:    },
920: 1:    {
920: 1:      'answer': '7',
920: 1:      'question': '4',
920: 1:      'valid': true
920: 1:    },
920: 1:    {
920: 1:      'answer': '11',
920: 1:      'question': '5',
920: 1:      'valid': true
920: 1:    },
920: 1:    {
920: 1:      'answer': '13',
920: 1:      'question': '6',
920: 1:      'valid': true
920: 1:    },
920: 1:    {
920: 1:      'answer': '17',
920: 1:      'question': '7',
920: 1:      'valid': true
920: 1:    },
920: 1:    {
920: 1:      'answer': '19',
920: 1:      'question': '8',
920: 1:      'valid': true
920: 1:    },
920: 1:    {
920: 1:      'answer': '23',
920: 1:      'question': '9',
920: 1:      'valid': true
920: 1:    },
920: 1:    {
920: 1:      'answer': '29',
920: 1:      'question': '10',
920: 1:      'valid': true
920: 1:    }
920: 1:  ],
920: 1:  'info': [
920: 1:    '✅f(1) = 2',
920: 1:    '✅f(2) = 3',
920: 1:    '✅f(3) = 5',
920: 1:    '✅f(4) = 7',
920: 1:    '✅f(5) = 11',
920: 1:    '✅f(6) = 13',
920: 1:    '✅f(7) = 17',
920: 1:    '✅f(8) = 19',
920: 1:    '✅f(9) = 23',
920: 1:    '✅f(10) = 29',
920: 1:    '❌f(11) = ??? != 31'
920: 1:  ],
920: 1:  'level': 33,
920: 1:  'nextQuestion': '11',
920: 1:  'questions': [
920: 1:    '1',
920: 1:    '2',
920: 1:    '3',
920: 1:    '4',
920: 1:    '5',
920: 1:    '6',
920: 1:    '7',
920: 1:    '8',
920: 1:    '9',
920: 1:    '10',
920: 1:    '11'
920: 1:  ]
920: 1:}
920: 1:Scores: 106796
920: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31']')
920: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
921: 1:BoardData {
921: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
921: 1:  'expectedAnswer': '37',
921: 1:  'history': [
921: 1:    {
921: 1:      'answer': '2',
921: 1:      'question': '1',
921: 1:      'valid': true
921: 1:    },
921: 1:    {
921: 1:      'answer': '3',
921: 1:      'question': '2',
921: 1:      'valid': true
921: 1:    },
921: 1:    {
921: 1:      'answer': '5',
921: 1:      'question': '3',
921: 1:      'valid': true
921: 1:    },
921: 1:    {
921: 1:      'answer': '7',
921: 1:      'question': '4',
921: 1:      'valid': true
921: 1:    },
921: 1:    {
921: 1:      'answer': '11',
921: 1:      'question': '5',
921: 1:      'valid': true
921: 1:    },
921: 1:    {
921: 1:      'answer': '13',
921: 1:      'question': '6',
921: 1:      'valid': true
921: 1:    },
921: 1:    {
921: 1:      'answer': '17',
921: 1:      'question': '7',
921: 1:      'valid': true
921: 1:    },
921: 1:    {
921: 1:      'answer': '19',
921: 1:      'question': '8',
921: 1:      'valid': true
921: 1:    },
921: 1:    {
921: 1:      'answer': '23',
921: 1:      'question': '9',
921: 1:      'valid': true
921: 1:    },
921: 1:    {
921: 1:      'answer': '29',
921: 1:      'question': '10',
921: 1:      'valid': true
921: 1:    },
921: 1:    {
921: 1:      'answer': '31',
921: 1:      'question': '11',
921: 1:      'valid': true
921: 1:    }
921: 1:  ],
921: 1:  'info': [
921: 1:    '✅f(1) = 2',
921: 1:    '✅f(2) = 3',
921: 1:    '✅f(3) = 5',
921: 1:    '✅f(4) = 7',
921: 1:    '✅f(5) = 11',
921: 1:    '✅f(6) = 13',
921: 1:    '✅f(7) = 17',
921: 1:    '✅f(8) = 19',
921: 1:    '✅f(9) = 23',
921: 1:    '✅f(10) = 29',
921: 1:    '✅f(11) = 31',
921: 1:    '❌f(12) = ??? != 37'
921: 1:  ],
921: 1:  'level': 33,
921: 1:  'nextQuestion': '12',
921: 1:  'questions': [
921: 1:    '1',
921: 1:    '2',
921: 1:    '3',
921: 1:    '4',
921: 1:    '5',
921: 1:    '6',
921: 1:    '7',
921: 1:    '8',
921: 1:    '9',
921: 1:    '10',
921: 1:    '11',
921: 1:    '12'
921: 1:  ]
921: 1:}
921: 1:Scores: 106818
921: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37']')
921: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
922: 1:BoardData {
922: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
922: 1:  'expectedAnswer': '41',
922: 1:  'history': [
922: 1:    {
922: 1:      'answer': '2',
922: 1:      'question': '1',
922: 1:      'valid': true
922: 1:    },
922: 1:    {
922: 1:      'answer': '3',
922: 1:      'question': '2',
922: 1:      'valid': true
922: 1:    },
922: 1:    {
922: 1:      'answer': '5',
922: 1:      'question': '3',
922: 1:      'valid': true
922: 1:    },
922: 1:    {
922: 1:      'answer': '7',
922: 1:      'question': '4',
922: 1:      'valid': true
922: 1:    },
922: 1:    {
922: 1:      'answer': '11',
922: 1:      'question': '5',
922: 1:      'valid': true
922: 1:    },
922: 1:    {
922: 1:      'answer': '13',
922: 1:      'question': '6',
922: 1:      'valid': true
922: 1:    },
922: 1:    {
922: 1:      'answer': '17',
922: 1:      'question': '7',
922: 1:      'valid': true
922: 1:    },
922: 1:    {
922: 1:      'answer': '19',
922: 1:      'question': '8',
922: 1:      'valid': true
922: 1:    },
922: 1:    {
922: 1:      'answer': '23',
922: 1:      'question': '9',
922: 1:      'valid': true
922: 1:    },
922: 1:    {
922: 1:      'answer': '29',
922: 1:      'question': '10',
922: 1:      'valid': true
922: 1:    },
922: 1:    {
922: 1:      'answer': '31',
922: 1:      'question': '11',
922: 1:      'valid': true
922: 1:    },
922: 1:    {
922: 1:      'answer': '37',
922: 1:      'question': '12',
922: 1:      'valid': true
922: 1:    }
922: 1:  ],
922: 1:  'info': [
922: 1:    '✅f(1) = 2',
922: 1:    '✅f(2) = 3',
922: 1:    '✅f(3) = 5',
922: 1:    '✅f(4) = 7',
922: 1:    '✅f(5) = 11',
922: 1:    '✅f(6) = 13',
922: 1:    '✅f(7) = 17',
922: 1:    '✅f(8) = 19',
922: 1:    '✅f(9) = 23',
922: 1:    '✅f(10) = 29',
922: 1:    '✅f(11) = 31',
922: 1:    '✅f(12) = 37',
922: 1:    '❌f(13) = ??? != 41'
922: 1:  ],
922: 1:  'level': 33,
922: 1:  'nextQuestion': '13',
922: 1:  'questions': [
922: 1:    '1',
922: 1:    '2',
922: 1:    '3',
922: 1:    '4',
922: 1:    '5',
922: 1:    '6',
922: 1:    '7',
922: 1:    '8',
922: 1:    '9',
922: 1:    '10',
922: 1:    '11',
922: 1:    '12',
922: 1:    '13'
922: 1:  ]
922: 1:}
922: 1:Scores: 106840
922: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41']')
922: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
923: 1:BoardData {
923: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
923: 1:  'expectedAnswer': '43',
923: 1:  'history': [
923: 1:    {
923: 1:      'answer': '2',
923: 1:      'question': '1',
923: 1:      'valid': true
923: 1:    },
923: 1:    {
923: 1:      'answer': '3',
923: 1:      'question': '2',
923: 1:      'valid': true
923: 1:    },
923: 1:    {
923: 1:      'answer': '5',
923: 1:      'question': '3',
923: 1:      'valid': true
923: 1:    },
923: 1:    {
923: 1:      'answer': '7',
923: 1:      'question': '4',
923: 1:      'valid': true
923: 1:    },
923: 1:    {
923: 1:      'answer': '11',
923: 1:      'question': '5',
923: 1:      'valid': true
923: 1:    },
923: 1:    {
923: 1:      'answer': '13',
923: 1:      'question': '6',
923: 1:      'valid': true
923: 1:    },
923: 1:    {
923: 1:      'answer': '17',
923: 1:      'question': '7',
923: 1:      'valid': true
923: 1:    },
923: 1:    {
923: 1:      'answer': '19',
923: 1:      'question': '8',
923: 1:      'valid': true
923: 1:    },
923: 1:    {
923: 1:      'answer': '23',
923: 1:      'question': '9',
923: 1:      'valid': true
923: 1:    },
923: 1:    {
923: 1:      'answer': '29',
923: 1:      'question': '10',
923: 1:      'valid': true
923: 1:    },
923: 1:    {
923: 1:      'answer': '31',
923: 1:      'question': '11',
923: 1:      'valid': true
923: 1:    },
923: 1:    {
923: 1:      'answer': '37',
923: 1:      'question': '12',
923: 1:      'valid': true
923: 1:    },
923: 1:    {
923: 1:      'answer': '41',
923: 1:      'question': '13',
923: 1:      'valid': true
923: 1:    }
923: 1:  ],
923: 1:  'info': [
923: 1:    '✅f(1) = 2',
923: 1:    '✅f(2) = 3',
923: 1:    '✅f(3) = 5',
923: 1:    '✅f(4) = 7',
923: 1:    '✅f(5) = 11',
923: 1:    '✅f(6) = 13',
923: 1:    '✅f(7) = 17',
923: 1:    '✅f(8) = 19',
923: 1:    '✅f(9) = 23',
923: 1:    '✅f(10) = 29',
923: 1:    '✅f(11) = 31',
923: 1:    '✅f(12) = 37',
923: 1:    '✅f(13) = 41',
923: 1:    '❌f(14) = ??? != 43'
923: 1:  ],
923: 1:  'level': 33,
923: 1:  'nextQuestion': '14',
923: 1:  'questions': [
923: 1:    '1',
923: 1:    '2',
923: 1:    '3',
923: 1:    '4',
923: 1:    '5',
923: 1:    '6',
923: 1:    '7',
923: 1:    '8',
923: 1:    '9',
923: 1:    '10',
923: 1:    '11',
923: 1:    '12',
923: 1:    '13',
923: 1:    '14'
923: 1:  ]
923: 1:}
923: 1:Scores: 106862
923: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43']')
923: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
924: 1:BoardData {
924: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
924: 1:  'expectedAnswer': '47',
924: 1:  'history': [
924: 1:    {
924: 1:      'answer': '2',
924: 1:      'question': '1',
924: 1:      'valid': true
924: 1:    },
924: 1:    {
924: 1:      'answer': '3',
924: 1:      'question': '2',
924: 1:      'valid': true
924: 1:    },
924: 1:    {
924: 1:      'answer': '5',
924: 1:      'question': '3',
924: 1:      'valid': true
924: 1:    },
924: 1:    {
924: 1:      'answer': '7',
924: 1:      'question': '4',
924: 1:      'valid': true
924: 1:    },
924: 1:    {
924: 1:      'answer': '11',
924: 1:      'question': '5',
924: 1:      'valid': true
924: 1:    },
924: 1:    {
924: 1:      'answer': '13',
924: 1:      'question': '6',
924: 1:      'valid': true
924: 1:    },
924: 1:    {
924: 1:      'answer': '17',
924: 1:      'question': '7',
924: 1:      'valid': true
924: 1:    },
924: 1:    {
924: 1:      'answer': '19',
924: 1:      'question': '8',
924: 1:      'valid': true
924: 1:    },
924: 1:    {
924: 1:      'answer': '23',
924: 1:      'question': '9',
924: 1:      'valid': true
924: 1:    },
924: 1:    {
924: 1:      'answer': '29',
924: 1:      'question': '10',
924: 1:      'valid': true
924: 1:    },
924: 1:    {
924: 1:      'answer': '31',
924: 1:      'question': '11',
924: 1:      'valid': true
924: 1:    },
924: 1:    {
924: 1:      'answer': '37',
924: 1:      'question': '12',
924: 1:      'valid': true
924: 1:    },
924: 1:    {
924: 1:      'answer': '41',
924: 1:      'question': '13',
924: 1:      'valid': true
924: 1:    },
924: 1:    {
924: 1:      'answer': '43',
924: 1:      'question': '14',
924: 1:      'valid': true
924: 1:    }
924: 1:  ],
924: 1:  'info': [
924: 1:    '✅f(1) = 2',
924: 1:    '✅f(2) = 3',
924: 1:    '✅f(3) = 5',
924: 1:    '✅f(4) = 7',
924: 1:    '✅f(5) = 11',
924: 1:    '✅f(6) = 13',
924: 1:    '✅f(7) = 17',
924: 1:    '✅f(8) = 19',
924: 1:    '✅f(9) = 23',
924: 1:    '✅f(10) = 29',
924: 1:    '✅f(11) = 31',
924: 1:    '✅f(12) = 37',
924: 1:    '✅f(13) = 41',
924: 1:    '✅f(14) = 43',
924: 1:    '❌f(15) = ??? != 47'
924: 1:  ],
924: 1:  'level': 33,
924: 1:  'nextQuestion': '15',
924: 1:  'questions': [
924: 1:    '1',
924: 1:    '2',
924: 1:    '3',
924: 1:    '4',
924: 1:    '5',
924: 1:    '6',
924: 1:    '7',
924: 1:    '8',
924: 1:    '9',
924: 1:    '10',
924: 1:    '11',
924: 1:    '12',
924: 1:    '13',
924: 1:    '14',
924: 1:    '15'
924: 1:  ]
924: 1:}
924: 1:Scores: 106884
924: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47']')
924: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
925: 1:BoardData {
925: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
925: 1:  'expectedAnswer': '53',
925: 1:  'history': [
925: 1:    {
925: 1:      'answer': '2',
925: 1:      'question': '1',
925: 1:      'valid': true
925: 1:    },
925: 1:    {
925: 1:      'answer': '3',
925: 1:      'question': '2',
925: 1:      'valid': true
925: 1:    },
925: 1:    {
925: 1:      'answer': '5',
925: 1:      'question': '3',
925: 1:      'valid': true
925: 1:    },
925: 1:    {
925: 1:      'answer': '7',
925: 1:      'question': '4',
925: 1:      'valid': true
925: 1:    },
925: 1:    {
925: 1:      'answer': '11',
925: 1:      'question': '5',
925: 1:      'valid': true
925: 1:    },
925: 1:    {
925: 1:      'answer': '13',
925: 1:      'question': '6',
925: 1:      'valid': true
925: 1:    },
925: 1:    {
925: 1:      'answer': '17',
925: 1:      'question': '7',
925: 1:      'valid': true
925: 1:    },
925: 1:    {
925: 1:      'answer': '19',
925: 1:      'question': '8',
925: 1:      'valid': true
925: 1:    },
925: 1:    {
925: 1:      'answer': '23',
925: 1:      'question': '9',
925: 1:      'valid': true
925: 1:    },
925: 1:    {
925: 1:      'answer': '29',
925: 1:      'question': '10',
925: 1:      'valid': true
925: 1:    },
925: 1:    {
925: 1:      'answer': '31',
925: 1:      'question': '11',
925: 1:      'valid': true
925: 1:    },
925: 1:    {
925: 1:      'answer': '37',
925: 1:      'question': '12',
925: 1:      'valid': true
925: 1:    },
925: 1:    {
925: 1:      'answer': '41',
925: 1:      'question': '13',
925: 1:      'valid': true
925: 1:    },
925: 1:    {
925: 1:      'answer': '43',
925: 1:      'question': '14',
925: 1:      'valid': true
925: 1:    },
925: 1:    {
925: 1:      'answer': '47',
925: 1:      'question': '15',
925: 1:      'valid': true
925: 1:    }
925: 1:  ],
925: 1:  'info': [
925: 1:    '✅f(1) = 2',
925: 1:    '✅f(2) = 3',
925: 1:    '✅f(3) = 5',
925: 1:    '✅f(4) = 7',
925: 1:    '✅f(5) = 11',
925: 1:    '✅f(6) = 13',
925: 1:    '✅f(7) = 17',
925: 1:    '✅f(8) = 19',
925: 1:    '✅f(9) = 23',
925: 1:    '✅f(10) = 29',
925: 1:    '✅f(11) = 31',
925: 1:    '✅f(12) = 37',
925: 1:    '✅f(13) = 41',
925: 1:    '✅f(14) = 43',
925: 1:    '✅f(15) = 47',
925: 1:    '❌f(16) = ??? != 53'
925: 1:  ],
925: 1:  'level': 33,
925: 1:  'nextQuestion': '16',
925: 1:  'questions': [
925: 1:    '1',
925: 1:    '2',
925: 1:    '3',
925: 1:    '4',
925: 1:    '5',
925: 1:    '6',
925: 1:    '7',
925: 1:    '8',
925: 1:    '9',
925: 1:    '10',
925: 1:    '11',
925: 1:    '12',
925: 1:    '13',
925: 1:    '14',
925: 1:    '15',
925: 1:    '16'
925: 1:  ]
925: 1:}
925: 1:Scores: 106906
925: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53']')
925: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
926: 1:BoardData {
926: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
926: 1:  'expectedAnswer': '59',
926: 1:  'history': [
926: 1:    {
926: 1:      'answer': '2',
926: 1:      'question': '1',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '3',
926: 1:      'question': '2',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '5',
926: 1:      'question': '3',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '7',
926: 1:      'question': '4',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '11',
926: 1:      'question': '5',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '13',
926: 1:      'question': '6',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '17',
926: 1:      'question': '7',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '19',
926: 1:      'question': '8',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '23',
926: 1:      'question': '9',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '29',
926: 1:      'question': '10',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '31',
926: 1:      'question': '11',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '37',
926: 1:      'question': '12',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '41',
926: 1:      'question': '13',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '43',
926: 1:      'question': '14',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '47',
926: 1:      'question': '15',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '53',
926: 1:      'question': '16',
926: 1:      'valid': true
926: 1:    }
926: 1:  ],
926: 1:  'info': [
926: 1:    '✅f(1) = 2',
926: 1:    '✅f(2) = 3',
926: 1:    '✅f(3) = 5',
926: 1:    '✅f(4) = 7',
926: 1:    '✅f(5) = 11',
926: 1:    '✅f(6) = 13',
926: 1:    '✅f(7) = 17',
926: 1:    '✅f(8) = 19',
926: 1:    '✅f(9) = 23',
926: 1:    '✅f(10) = 29',
926: 1:    '✅f(11) = 31',
926: 1:    '✅f(12) = 37',
926: 1:    '✅f(13) = 41',
926: 1:    '✅f(14) = 43',
926: 1:    '✅f(15) = 47',
926: 1:    '✅f(16) = 53',
926: 1:    '❌f(17) = ??? != 59'
926: 1:  ],
926: 1:  'level': 33,
926: 1:  'nextQuestion': '17',
926: 1:  'questions': [
926: 1:    '1',
926: 1:    '2',
926: 1:    '3',
926: 1:    '4',
926: 1:    '5',
926: 1:    '6',
926: 1:    '7',
926: 1:    '8',
926: 1:    '9',
926: 1:    '10',
926: 1:    '11',
926: 1:    '12',
926: 1:    '13',
926: 1:    '14',
926: 1:    '15',
926: 1:    '16',
926: 1:    '17'
926: 1:  ]
926: 1:}
926: 1:Scores: 106928
926: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59']')
926: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
927: 1:BoardData {
927: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
927: 1:  'expectedAnswer': '61',
927: 1:  'history': [
927: 1:    {
927: 1:      'answer': '2',
927: 1:      'question': '1',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '3',
927: 1:      'question': '2',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '5',
927: 1:      'question': '3',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '7',
927: 1:      'question': '4',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '11',
927: 1:      'question': '5',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '13',
927: 1:      'question': '6',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '17',
927: 1:      'question': '7',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '19',
927: 1:      'question': '8',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '23',
927: 1:      'question': '9',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '29',
927: 1:      'question': '10',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '31',
927: 1:      'question': '11',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '37',
927: 1:      'question': '12',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '41',
927: 1:      'question': '13',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '43',
927: 1:      'question': '14',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '47',
927: 1:      'question': '15',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '53',
927: 1:      'question': '16',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '59',
927: 1:      'question': '17',
927: 1:      'valid': true
927: 1:    }
927: 1:  ],
927: 1:  'info': [
927: 1:    '✅f(1) = 2',
927: 1:    '✅f(2) = 3',
927: 1:    '✅f(3) = 5',
927: 1:    '✅f(4) = 7',
927: 1:    '✅f(5) = 11',
927: 1:    '✅f(6) = 13',
927: 1:    '✅f(7) = 17',
927: 1:    '✅f(8) = 19',
927: 1:    '✅f(9) = 23',
927: 1:    '✅f(10) = 29',
927: 1:    '✅f(11) = 31',
927: 1:    '✅f(12) = 37',
927: 1:    '✅f(13) = 41',
927: 1:    '✅f(14) = 43',
927: 1:    '✅f(15) = 47',
927: 1:    '✅f(16) = 53',
927: 1:    '✅f(17) = 59',
927: 1:    '❌f(18) = ??? != 61'
927: 1:  ],
927: 1:  'level': 33,
927: 1:  'nextQuestion': '18',
927: 1:  'questions': [
927: 1:    '1',
927: 1:    '2',
927: 1:    '3',
927: 1:    '4',
927: 1:    '5',
927: 1:    '6',
927: 1:    '7',
927: 1:    '8',
927: 1:    '9',
927: 1:    '10',
927: 1:    '11',
927: 1:    '12',
927: 1:    '13',
927: 1:    '14',
927: 1:    '15',
927: 1:    '16',
927: 1:    '17',
927: 1:    '18'
927: 1:  ]
927: 1:}
927: 1:Scores: 106950
927: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61']')
927: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
928: 1:BoardData {
928: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
928: 1:  'expectedAnswer': '67',
928: 1:  'history': [
928: 1:    {
928: 1:      'answer': '2',
928: 1:      'question': '1',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '3',
928: 1:      'question': '2',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '5',
928: 1:      'question': '3',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '7',
928: 1:      'question': '4',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '11',
928: 1:      'question': '5',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '13',
928: 1:      'question': '6',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '17',
928: 1:      'question': '7',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '19',
928: 1:      'question': '8',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '23',
928: 1:      'question': '9',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '29',
928: 1:      'question': '10',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '31',
928: 1:      'question': '11',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '37',
928: 1:      'question': '12',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '41',
928: 1:      'question': '13',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '43',
928: 1:      'question': '14',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '47',
928: 1:      'question': '15',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '53',
928: 1:      'question': '16',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '59',
928: 1:      'question': '17',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '61',
928: 1:      'question': '18',
928: 1:      'valid': true
928: 1:    }
928: 1:  ],
928: 1:  'info': [
928: 1:    '✅f(1) = 2',
928: 1:    '✅f(2) = 3',
928: 1:    '✅f(3) = 5',
928: 1:    '✅f(4) = 7',
928: 1:    '✅f(5) = 11',
928: 1:    '✅f(6) = 13',
928: 1:    '✅f(7) = 17',
928: 1:    '✅f(8) = 19',
928: 1:    '✅f(9) = 23',
928: 1:    '✅f(10) = 29',
928: 1:    '✅f(11) = 31',
928: 1:    '✅f(12) = 37',
928: 1:    '✅f(13) = 41',
928: 1:    '✅f(14) = 43',
928: 1:    '✅f(15) = 47',
928: 1:    '✅f(16) = 53',
928: 1:    '✅f(17) = 59',
928: 1:    '✅f(18) = 61',
928: 1:    '❌f(19) = ??? != 67'
928: 1:  ],
928: 1:  'level': 33,
928: 1:  'nextQuestion': '19',
928: 1:  'questions': [
928: 1:    '1',
928: 1:    '2',
928: 1:    '3',
928: 1:    '4',
928: 1:    '5',
928: 1:    '6',
928: 1:    '7',
928: 1:    '8',
928: 1:    '9',
928: 1:    '10',
928: 1:    '11',
928: 1:    '12',
928: 1:    '13',
928: 1:    '14',
928: 1:    '15',
928: 1:    '16',
928: 1:    '17',
928: 1:    '18',
928: 1:    '19'
928: 1:  ]
928: 1:}
928: 1:Scores: 106972
928: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67']')
928: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
929: 1:BoardData {
929: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
929: 1:  'expectedAnswer': '71',
929: 1:  'history': [
929: 1:    {
929: 1:      'answer': '2',
929: 1:      'question': '1',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '3',
929: 1:      'question': '2',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '5',
929: 1:      'question': '3',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '7',
929: 1:      'question': '4',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '11',
929: 1:      'question': '5',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '13',
929: 1:      'question': '6',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '17',
929: 1:      'question': '7',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '19',
929: 1:      'question': '8',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '23',
929: 1:      'question': '9',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '29',
929: 1:      'question': '10',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '31',
929: 1:      'question': '11',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '37',
929: 1:      'question': '12',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '41',
929: 1:      'question': '13',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '43',
929: 1:      'question': '14',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '47',
929: 1:      'question': '15',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '53',
929: 1:      'question': '16',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '59',
929: 1:      'question': '17',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '61',
929: 1:      'question': '18',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '67',
929: 1:      'question': '19',
929: 1:      'valid': true
929: 1:    }
929: 1:  ],
929: 1:  'info': [
929: 1:    '✅f(1) = 2',
929: 1:    '✅f(2) = 3',
929: 1:    '✅f(3) = 5',
929: 1:    '✅f(4) = 7',
929: 1:    '✅f(5) = 11',
929: 1:    '✅f(6) = 13',
929: 1:    '✅f(7) = 17',
929: 1:    '✅f(8) = 19',
929: 1:    '✅f(9) = 23',
929: 1:    '✅f(10) = 29',
929: 1:    '✅f(11) = 31',
929: 1:    '✅f(12) = 37',
929: 1:    '✅f(13) = 41',
929: 1:    '✅f(14) = 43',
929: 1:    '✅f(15) = 47',
929: 1:    '✅f(16) = 53',
929: 1:    '✅f(17) = 59',
929: 1:    '✅f(18) = 61',
929: 1:    '✅f(19) = 67',
929: 1:    '❌f(20) = ??? != 71'
929: 1:  ],
929: 1:  'level': 33,
929: 1:  'nextQuestion': '20',
929: 1:  'questions': [
929: 1:    '1',
929: 1:    '2',
929: 1:    '3',
929: 1:    '4',
929: 1:    '5',
929: 1:    '6',
929: 1:    '7',
929: 1:    '8',
929: 1:    '9',
929: 1:    '10',
929: 1:    '11',
929: 1:    '12',
929: 1:    '13',
929: 1:    '14',
929: 1:    '15',
929: 1:    '16',
929: 1:    '17',
929: 1:    '18',
929: 1:    '19',
929: 1:    '20'
929: 1:  ]
929: 1:}
929: 1:Scores: 106994
929: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71']')
929: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
930: 1:BoardData {
930: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
930: 1:  'expectedAnswer': '73',
930: 1:  'history': [
930: 1:    {
930: 1:      'answer': '2',
930: 1:      'question': '1',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '3',
930: 1:      'question': '2',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '5',
930: 1:      'question': '3',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '7',
930: 1:      'question': '4',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '11',
930: 1:      'question': '5',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '13',
930: 1:      'question': '6',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '17',
930: 1:      'question': '7',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '19',
930: 1:      'question': '8',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '23',
930: 1:      'question': '9',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '29',
930: 1:      'question': '10',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '31',
930: 1:      'question': '11',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '37',
930: 1:      'question': '12',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '41',
930: 1:      'question': '13',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '43',
930: 1:      'question': '14',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '47',
930: 1:      'question': '15',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '53',
930: 1:      'question': '16',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '59',
930: 1:      'question': '17',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '61',
930: 1:      'question': '18',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '67',
930: 1:      'question': '19',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '71',
930: 1:      'question': '20',
930: 1:      'valid': true
930: 1:    }
930: 1:  ],
930: 1:  'info': [
930: 1:    '✅f(1) = 2',
930: 1:    '✅f(2) = 3',
930: 1:    '✅f(3) = 5',
930: 1:    '✅f(4) = 7',
930: 1:    '✅f(5) = 11',
930: 1:    '✅f(6) = 13',
930: 1:    '✅f(7) = 17',
930: 1:    '✅f(8) = 19',
930: 1:    '✅f(9) = 23',
930: 1:    '✅f(10) = 29',
930: 1:    '✅f(11) = 31',
930: 1:    '✅f(12) = 37',
930: 1:    '✅f(13) = 41',
930: 1:    '✅f(14) = 43',
930: 1:    '✅f(15) = 47',
930: 1:    '✅f(16) = 53',
930: 1:    '✅f(17) = 59',
930: 1:    '✅f(18) = 61',
930: 1:    '✅f(19) = 67',
930: 1:    '✅f(20) = 71',
930: 1:    '❌f(21) = ??? != 73'
930: 1:  ],
930: 1:  'level': 33,
930: 1:  'nextQuestion': '21',
930: 1:  'questions': [
930: 1:    '1',
930: 1:    '2',
930: 1:    '3',
930: 1:    '4',
930: 1:    '5',
930: 1:    '6',
930: 1:    '7',
930: 1:    '8',
930: 1:    '9',
930: 1:    '10',
930: 1:    '11',
930: 1:    '12',
930: 1:    '13',
930: 1:    '14',
930: 1:    '15',
930: 1:    '16',
930: 1:    '17',
930: 1:    '18',
930: 1:    '19',
930: 1:    '20',
930: 1:    '21'
930: 1:  ]
930: 1:}
930: 1:Scores: 107016
930: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', '73']')
930: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
931: 1:BoardData {
931: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
931: 1:  'expectedAnswer': '79',
931: 1:  'history': [
931: 1:    {
931: 1:      'answer': '2',
931: 1:      'question': '1',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '3',
931: 1:      'question': '2',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '5',
931: 1:      'question': '3',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '7',
931: 1:      'question': '4',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '11',
931: 1:      'question': '5',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '13',
931: 1:      'question': '6',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '17',
931: 1:      'question': '7',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '19',
931: 1:      'question': '8',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '23',
931: 1:      'question': '9',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '29',
931: 1:      'question': '10',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '31',
931: 1:      'question': '11',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '37',
931: 1:      'question': '12',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '41',
931: 1:      'question': '13',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '43',
931: 1:      'question': '14',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '47',
931: 1:      'question': '15',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '53',
931: 1:      'question': '16',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '59',
931: 1:      'question': '17',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '61',
931: 1:      'question': '18',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '67',
931: 1:      'question': '19',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '71',
931: 1:      'question': '20',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '73',
931: 1:      'question': '21',
931: 1:      'valid': true
931: 1:    }
931: 1:  ],
931: 1:  'info': [
931: 1:    '✅f(1) = 2',
931: 1:    '✅f(2) = 3',
931: 1:    '✅f(3) = 5',
931: 1:    '✅f(4) = 7',
931: 1:    '✅f(5) = 11',
931: 1:    '✅f(6) = 13',
931: 1:    '✅f(7) = 17',
931: 1:    '✅f(8) = 19',
931: 1:    '✅f(9) = 23',
931: 1:    '✅f(10) = 29',
931: 1:    '✅f(11) = 31',
931: 1:    '✅f(12) = 37',
931: 1:    '✅f(13) = 41',
931: 1:    '✅f(14) = 43',
931: 1:    '✅f(15) = 47',
931: 1:    '✅f(16) = 53',
931: 1:    '✅f(17) = 59',
931: 1:    '✅f(18) = 61',
931: 1:    '✅f(19) = 67',
931: 1:    '✅f(20) = 71',
931: 1:    '✅f(21) = 73',
931: 1:    '❌f(22) = ??? != 79'
931: 1:  ],
931: 1:  'level': 33,
931: 1:  'nextQuestion': '22',
931: 1:  'questions': [
931: 1:    '1',
931: 1:    '2',
931: 1:    '3',
931: 1:    '4',
931: 1:    '5',
931: 1:    '6',
931: 1:    '7',
931: 1:    '8',
931: 1:    '9',
931: 1:    '10',
931: 1:    '11',
931: 1:    '12',
931: 1:    '13',
931: 1:    '14',
931: 1:    '15',
931: 1:    '16',
931: 1:    '17',
931: 1:    '18',
931: 1:    '19',
931: 1:    '20',
931: 1:    '21',
931: 1:    '22'
931: 1:  ]
931: 1:}
931: 1:Scores: 107038
931: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', '73', '79']')
931: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
932: 1:BoardData {
932: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
932: 1:  'expectedAnswer': '83',
932: 1:  'history': [
932: 1:    {
932: 1:      'answer': '2',
932: 1:      'question': '1',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '3',
932: 1:      'question': '2',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '5',
932: 1:      'question': '3',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '7',
932: 1:      'question': '4',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '11',
932: 1:      'question': '5',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '13',
932: 1:      'question': '6',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '17',
932: 1:      'question': '7',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '19',
932: 1:      'question': '8',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '23',
932: 1:      'question': '9',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '29',
932: 1:      'question': '10',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '31',
932: 1:      'question': '11',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '37',
932: 1:      'question': '12',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '41',
932: 1:      'question': '13',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '43',
932: 1:      'question': '14',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '47',
932: 1:      'question': '15',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '53',
932: 1:      'question': '16',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '59',
932: 1:      'question': '17',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '61',
932: 1:      'question': '18',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '67',
932: 1:      'question': '19',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '71',
932: 1:      'question': '20',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '73',
932: 1:      'question': '21',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '79',
932: 1:      'question': '22',
932: 1:      'valid': true
932: 1:    }
932: 1:  ],
932: 1:  'info': [
932: 1:    '✅f(1) = 2',
932: 1:    '✅f(2) = 3',
932: 1:    '✅f(3) = 5',
932: 1:    '✅f(4) = 7',
932: 1:    '✅f(5) = 11',
932: 1:    '✅f(6) = 13',
932: 1:    '✅f(7) = 17',
932: 1:    '✅f(8) = 19',
932: 1:    '✅f(9) = 23',
932: 1:    '✅f(10) = 29',
932: 1:    '✅f(11) = 31',
932: 1:    '✅f(12) = 37',
932: 1:    '✅f(13) = 41',
932: 1:    '✅f(14) = 43',
932: 1:    '✅f(15) = 47',
932: 1:    '✅f(16) = 53',
932: 1:    '✅f(17) = 59',
932: 1:    '✅f(18) = 61',
932: 1:    '✅f(19) = 67',
932: 1:    '✅f(20) = 71',
932: 1:    '✅f(21) = 73',
932: 1:    '✅f(22) = 79',
932: 1:    '❌f(23) = ??? != 83'
932: 1:  ],
932: 1:  'level': 33,
932: 1:  'nextQuestion': '23',
932: 1:  'questions': [
932: 1:    '1',
932: 1:    '2',
932: 1:    '3',
932: 1:    '4',
932: 1:    '5',
932: 1:    '6',
932: 1:    '7',
932: 1:    '8',
932: 1:    '9',
932: 1:    '10',
932: 1:    '11',
932: 1:    '12',
932: 1:    '13',
932: 1:    '14',
932: 1:    '15',
932: 1:    '16',
932: 1:    '17',
932: 1:    '18',
932: 1:    '19',
932: 1:    '20',
932: 1:    '21',
932: 1:    '22',
932: 1:    '23'
932: 1:  ]
932: 1:}
932: 1:Scores: 107060
932: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', '73', '79', '83']')
932: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
933: 1:BoardData {
933: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
933: 1:  'expectedAnswer': '89',
933: 1:  'history': [
933: 1:    {
933: 1:      'answer': '2',
933: 1:      'question': '1',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '3',
933: 1:      'question': '2',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '5',
933: 1:      'question': '3',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '7',
933: 1:      'question': '4',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '11',
933: 1:      'question': '5',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '13',
933: 1:      'question': '6',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '17',
933: 1:      'question': '7',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '19',
933: 1:      'question': '8',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '23',
933: 1:      'question': '9',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '29',
933: 1:      'question': '10',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '31',
933: 1:      'question': '11',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '37',
933: 1:      'question': '12',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '41',
933: 1:      'question': '13',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '43',
933: 1:      'question': '14',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '47',
933: 1:      'question': '15',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '53',
933: 1:      'question': '16',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '59',
933: 1:      'question': '17',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '61',
933: 1:      'question': '18',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '67',
933: 1:      'question': '19',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '71',
933: 1:      'question': '20',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '73',
933: 1:      'question': '21',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '79',
933: 1:      'question': '22',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '83',
933: 1:      'question': '23',
933: 1:      'valid': true
933: 1:    }
933: 1:  ],
933: 1:  'info': [
933: 1:    '✅f(1) = 2',
933: 1:    '✅f(2) = 3',
933: 1:    '✅f(3) = 5',
933: 1:    '✅f(4) = 7',
933: 1:    '✅f(5) = 11',
933: 1:    '✅f(6) = 13',
933: 1:    '✅f(7) = 17',
933: 1:    '✅f(8) = 19',
933: 1:    '✅f(9) = 23',
933: 1:    '✅f(10) = 29',
933: 1:    '✅f(11) = 31',
933: 1:    '✅f(12) = 37',
933: 1:    '✅f(13) = 41',
933: 1:    '✅f(14) = 43',
933: 1:    '✅f(15) = 47',
933: 1:    '✅f(16) = 53',
933: 1:    '✅f(17) = 59',
933: 1:    '✅f(18) = 61',
933: 1:    '✅f(19) = 67',
933: 1:    '✅f(20) = 71',
933: 1:    '✅f(21) = 73',
933: 1:    '✅f(22) = 79',
933: 1:    '✅f(23) = 83',
933: 1:    '❌f(24) = ??? != 89'
933: 1:  ],
933: 1:  'level': 33,
933: 1:  'nextQuestion': '24',
933: 1:  'questions': [
933: 1:    '1',
933: 1:    '2',
933: 1:    '3',
933: 1:    '4',
933: 1:    '5',
933: 1:    '6',
933: 1:    '7',
933: 1:    '8',
933: 1:    '9',
933: 1:    '10',
933: 1:    '11',
933: 1:    '12',
933: 1:    '13',
933: 1:    '14',
933: 1:    '15',
933: 1:    '16',
933: 1:    '17',
933: 1:    '18',
933: 1:    '19',
933: 1:    '20',
933: 1:    '21',
933: 1:    '22',
933: 1:    '23',
933: 1:    '24'
933: 1:  ]
933: 1:}
933: 1:Scores: 107082
933: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', '73', '79', '83', '89']')
933: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
934: 1:BoardData {
934: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
934: 1:  'expectedAnswer': '97',
934: 1:  'history': [
934: 1:    {
934: 1:      'answer': '2',
934: 1:      'question': '1',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '3',
934: 1:      'question': '2',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '5',
934: 1:      'question': '3',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '7',
934: 1:      'question': '4',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '11',
934: 1:      'question': '5',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '13',
934: 1:      'question': '6',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '17',
934: 1:      'question': '7',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '19',
934: 1:      'question': '8',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '23',
934: 1:      'question': '9',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '29',
934: 1:      'question': '10',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '31',
934: 1:      'question': '11',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '37',
934: 1:      'question': '12',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '41',
934: 1:      'question': '13',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '43',
934: 1:      'question': '14',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '47',
934: 1:      'question': '15',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '53',
934: 1:      'question': '16',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '59',
934: 1:      'question': '17',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '61',
934: 1:      'question': '18',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '67',
934: 1:      'question': '19',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '71',
934: 1:      'question': '20',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '73',
934: 1:      'question': '21',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '79',
934: 1:      'question': '22',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '83',
934: 1:      'question': '23',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '89',
934: 1:      'question': '24',
934: 1:      'valid': true
934: 1:    }
934: 1:  ],
934: 1:  'info': [
934: 1:    '✅f(1) = 2',
934: 1:    '✅f(2) = 3',
934: 1:    '✅f(3) = 5',
934: 1:    '✅f(4) = 7',
934: 1:    '✅f(5) = 11',
934: 1:    '✅f(6) = 13',
934: 1:    '✅f(7) = 17',
934: 1:    '✅f(8) = 19',
934: 1:    '✅f(9) = 23',
934: 1:    '✅f(10) = 29',
934: 1:    '✅f(11) = 31',
934: 1:    '✅f(12) = 37',
934: 1:    '✅f(13) = 41',
934: 1:    '✅f(14) = 43',
934: 1:    '✅f(15) = 47',
934: 1:    '✅f(16) = 53',
934: 1:    '✅f(17) = 59',
934: 1:    '✅f(18) = 61',
934: 1:    '✅f(19) = 67',
934: 1:    '✅f(20) = 71',
934: 1:    '✅f(21) = 73',
934: 1:    '✅f(22) = 79',
934: 1:    '✅f(23) = 83',
934: 1:    '✅f(24) = 89',
934: 1:    '❌f(25) = ??? != 97'
934: 1:  ],
934: 1:  'level': 33,
934: 1:  'nextQuestion': '25',
934: 1:  'questions': [
934: 1:    '1',
934: 1:    '2',
934: 1:    '3',
934: 1:    '4',
934: 1:    '5',
934: 1:    '6',
934: 1:    '7',
934: 1:    '8',
934: 1:    '9',
934: 1:    '10',
934: 1:    '11',
934: 1:    '12',
934: 1:    '13',
934: 1:    '14',
934: 1:    '15',
934: 1:    '16',
934: 1:    '17',
934: 1:    '18',
934: 1:    '19',
934: 1:    '20',
934: 1:    '21',
934: 1:    '22',
934: 1:    '23',
934: 1:    '24',
934: 1:    '25'
934: 1:  ]
934: 1:}
934: 1:Scores: 107104
934: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', '73', '79', '83', '89', '97']')
934: 1:Fire Event: PassTest{complexity=55, testCount=25}
934: 1:Fire Event: NextAlgorithm{complexity=55, time=0}
------------------------------------------
935: 1:BoardData {
935: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
935: 1:  'history': [
935: 1:    {
935: 1:      'answer': '2',
935: 1:      'question': '1',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '3',
935: 1:      'question': '2',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '5',
935: 1:      'question': '3',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '7',
935: 1:      'question': '4',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '11',
935: 1:      'question': '5',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '13',
935: 1:      'question': '6',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '17',
935: 1:      'question': '7',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '19',
935: 1:      'question': '8',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '23',
935: 1:      'question': '9',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '29',
935: 1:      'question': '10',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '31',
935: 1:      'question': '11',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '37',
935: 1:      'question': '12',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '41',
935: 1:      'question': '13',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '43',
935: 1:      'question': '14',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '47',
935: 1:      'question': '15',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '53',
935: 1:      'question': '16',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '59',
935: 1:      'question': '17',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '61',
935: 1:      'question': '18',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '67',
935: 1:      'question': '19',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '71',
935: 1:      'question': '20',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '73',
935: 1:      'question': '21',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '79',
935: 1:      'question': '22',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '83',
935: 1:      'question': '23',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '89',
935: 1:      'question': '24',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '97',
935: 1:      'question': '25',
935: 1:      'valid': true
935: 1:    }
935: 1:  ],
935: 1:  'info': [
935: 1:    '✅f(1) = 2',
935: 1:    '✅f(2) = 3',
935: 1:    '✅f(3) = 5',
935: 1:    '✅f(4) = 7',
935: 1:    '✅f(5) = 11',
935: 1:    '✅f(6) = 13',
935: 1:    '✅f(7) = 17',
935: 1:    '✅f(8) = 19',
935: 1:    '✅f(9) = 23',
935: 1:    '✅f(10) = 29',
935: 1:    '✅f(11) = 31',
935: 1:    '✅f(12) = 37',
935: 1:    '✅f(13) = 41',
935: 1:    '✅f(14) = 43',
935: 1:    '✅f(15) = 47',
935: 1:    '✅f(16) = 53',
935: 1:    '✅f(17) = 59',
935: 1:    '✅f(18) = 61',
935: 1:    '✅f(19) = 67',
935: 1:    '✅f(20) = 71',
935: 1:    '✅f(21) = 73',
935: 1:    '✅f(22) = 79',
935: 1:    '✅f(23) = 83',
935: 1:    '✅f(24) = 89',
935: 1:    '✅f(25) = 97'
935: 1:  ],
935: 1:  'level': 33,
935: 1:  'questions': []
935: 1:}
935: 1:Scores: 114550
935: 1:Answer: message('StartNextLevel')
935: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
936: 1:BoardData {
936: 1:  'description': [
936: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
936: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
936: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
936: 1:  ],
936: 1:  'expectedAnswer': '15:3*5:FizzBuzz',
936: 1:  'history': [],
936: 1:  'info': ['❌f(1) = ??? != 15:3*5:FizzBuzz'],
936: 1:  'level': 34,
936: 1:  'nextQuestion': '1',
936: 1:  'questions': ['1']
936: 1:}
936: 1:Scores: 114550
936: 1:Answer: message('['15:3*5:FizzBuzz']')
936: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
937: 1:BoardData {
937: 1:  'description': [
937: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
937: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
937: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
937: 1:  ],
937: 1:  'expectedAnswer': '21:3*7:FizzMuzz',
937: 1:  'history': [{
937: 1:    'answer': '15:3*5:FizzBuzz',
937: 1:    'question': '1',
937: 1:    'valid': true
937: 1:  }],
937: 1:  'info': [
937: 1:    '✅f(1) = 15:3*5:FizzBuzz',
937: 1:    '❌f(2) = ??? != 21:3*7:FizzMuzz'
937: 1:  ],
937: 1:  'level': 34,
937: 1:  'nextQuestion': '2',
937: 1:  'questions': [
937: 1:    '1',
937: 1:    '2'
937: 1:  ]
937: 1:}
937: 1:Scores: 114571
937: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz']')
937: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
938: 1:BoardData {
938: 1:  'description': [
938: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
938: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
938: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
938: 1:  ],
938: 1:  'expectedAnswer': '33:3*11:FizzDuzz',
938: 1:  'history': [
938: 1:    {
938: 1:      'answer': '15:3*5:FizzBuzz',
938: 1:      'question': '1',
938: 1:      'valid': true
938: 1:    },
938: 1:    {
938: 1:      'answer': '21:3*7:FizzMuzz',
938: 1:      'question': '2',
938: 1:      'valid': true
938: 1:    }
938: 1:  ],
938: 1:  'info': [
938: 1:    '✅f(1) = 15:3*5:FizzBuzz',
938: 1:    '✅f(2) = 21:3*7:FizzMuzz',
938: 1:    '❌f(3) = ??? != 33:3*11:FizzDuzz'
938: 1:  ],
938: 1:  'level': 34,
938: 1:  'nextQuestion': '3',
938: 1:  'questions': [
938: 1:    '1',
938: 1:    '2',
938: 1:    '3'
938: 1:  ]
938: 1:}
938: 1:Scores: 114592
938: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz']')
938: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
939: 1:BoardData {
939: 1:  'description': [
939: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
939: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
939: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
939: 1:  ],
939: 1:  'expectedAnswer': '35:5*7:BuzzMuzz',
939: 1:  'history': [
939: 1:    {
939: 1:      'answer': '15:3*5:FizzBuzz',
939: 1:      'question': '1',
939: 1:      'valid': true
939: 1:    },
939: 1:    {
939: 1:      'answer': '21:3*7:FizzMuzz',
939: 1:      'question': '2',
939: 1:      'valid': true
939: 1:    },
939: 1:    {
939: 1:      'answer': '33:3*11:FizzDuzz',
939: 1:      'question': '3',
939: 1:      'valid': true
939: 1:    }
939: 1:  ],
939: 1:  'info': [
939: 1:    '✅f(1) = 15:3*5:FizzBuzz',
939: 1:    '✅f(2) = 21:3*7:FizzMuzz',
939: 1:    '✅f(3) = 33:3*11:FizzDuzz',
939: 1:    '❌f(4) = ??? != 35:5*7:BuzzMuzz'
939: 1:  ],
939: 1:  'level': 34,
939: 1:  'nextQuestion': '4',
939: 1:  'questions': [
939: 1:    '1',
939: 1:    '2',
939: 1:    '3',
939: 1:    '4'
939: 1:  ]
939: 1:}
939: 1:Scores: 114613
939: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz']')
939: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
940: 1:BoardData {
940: 1:  'description': [
940: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
940: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
940: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
940: 1:  ],
940: 1:  'expectedAnswer': '39:3*13:FizzCazz',
940: 1:  'history': [
940: 1:    {
940: 1:      'answer': '15:3*5:FizzBuzz',
940: 1:      'question': '1',
940: 1:      'valid': true
940: 1:    },
940: 1:    {
940: 1:      'answer': '21:3*7:FizzMuzz',
940: 1:      'question': '2',
940: 1:      'valid': true
940: 1:    },
940: 1:    {
940: 1:      'answer': '33:3*11:FizzDuzz',
940: 1:      'question': '3',
940: 1:      'valid': true
940: 1:    },
940: 1:    {
940: 1:      'answer': '35:5*7:BuzzMuzz',
940: 1:      'question': '4',
940: 1:      'valid': true
940: 1:    }
940: 1:  ],
940: 1:  'info': [
940: 1:    '✅f(1) = 15:3*5:FizzBuzz',
940: 1:    '✅f(2) = 21:3*7:FizzMuzz',
940: 1:    '✅f(3) = 33:3*11:FizzDuzz',
940: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
940: 1:    '❌f(5) = ??? != 39:3*13:FizzCazz'
940: 1:  ],
940: 1:  'level': 34,
940: 1:  'nextQuestion': '5',
940: 1:  'questions': [
940: 1:    '1',
940: 1:    '2',
940: 1:    '3',
940: 1:    '4',
940: 1:    '5'
940: 1:  ]
940: 1:}
940: 1:Scores: 114634
940: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz']')
940: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
941: 1:BoardData {
941: 1:  'description': [
941: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
941: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
941: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
941: 1:  ],
941: 1:  'expectedAnswer': '55:5*11:BuzzDuzz',
941: 1:  'history': [
941: 1:    {
941: 1:      'answer': '15:3*5:FizzBuzz',
941: 1:      'question': '1',
941: 1:      'valid': true
941: 1:    },
941: 1:    {
941: 1:      'answer': '21:3*7:FizzMuzz',
941: 1:      'question': '2',
941: 1:      'valid': true
941: 1:    },
941: 1:    {
941: 1:      'answer': '33:3*11:FizzDuzz',
941: 1:      'question': '3',
941: 1:      'valid': true
941: 1:    },
941: 1:    {
941: 1:      'answer': '35:5*7:BuzzMuzz',
941: 1:      'question': '4',
941: 1:      'valid': true
941: 1:    },
941: 1:    {
941: 1:      'answer': '39:3*13:FizzCazz',
941: 1:      'question': '5',
941: 1:      'valid': true
941: 1:    }
941: 1:  ],
941: 1:  'info': [
941: 1:    '✅f(1) = 15:3*5:FizzBuzz',
941: 1:    '✅f(2) = 21:3*7:FizzMuzz',
941: 1:    '✅f(3) = 33:3*11:FizzDuzz',
941: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
941: 1:    '✅f(5) = 39:3*13:FizzCazz',
941: 1:    '❌f(6) = ??? != 55:5*11:BuzzDuzz'
941: 1:  ],
941: 1:  'level': 34,
941: 1:  'nextQuestion': '6',
941: 1:  'questions': [
941: 1:    '1',
941: 1:    '2',
941: 1:    '3',
941: 1:    '4',
941: 1:    '5',
941: 1:    '6'
941: 1:  ]
941: 1:}
941: 1:Scores: 114655
941: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz']')
941: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
942: 1:BoardData {
942: 1:  'description': [
942: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
942: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
942: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
942: 1:  ],
942: 1:  'expectedAnswer': '65:5*13:BuzzCazz',
942: 1:  'history': [
942: 1:    {
942: 1:      'answer': '15:3*5:FizzBuzz',
942: 1:      'question': '1',
942: 1:      'valid': true
942: 1:    },
942: 1:    {
942: 1:      'answer': '21:3*7:FizzMuzz',
942: 1:      'question': '2',
942: 1:      'valid': true
942: 1:    },
942: 1:    {
942: 1:      'answer': '33:3*11:FizzDuzz',
942: 1:      'question': '3',
942: 1:      'valid': true
942: 1:    },
942: 1:    {
942: 1:      'answer': '35:5*7:BuzzMuzz',
942: 1:      'question': '4',
942: 1:      'valid': true
942: 1:    },
942: 1:    {
942: 1:      'answer': '39:3*13:FizzCazz',
942: 1:      'question': '5',
942: 1:      'valid': true
942: 1:    },
942: 1:    {
942: 1:      'answer': '55:5*11:BuzzDuzz',
942: 1:      'question': '6',
942: 1:      'valid': true
942: 1:    }
942: 1:  ],
942: 1:  'info': [
942: 1:    '✅f(1) = 15:3*5:FizzBuzz',
942: 1:    '✅f(2) = 21:3*7:FizzMuzz',
942: 1:    '✅f(3) = 33:3*11:FizzDuzz',
942: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
942: 1:    '✅f(5) = 39:3*13:FizzCazz',
942: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
942: 1:    '❌f(7) = ??? != 65:5*13:BuzzCazz'
942: 1:  ],
942: 1:  'level': 34,
942: 1:  'nextQuestion': '7',
942: 1:  'questions': [
942: 1:    '1',
942: 1:    '2',
942: 1:    '3',
942: 1:    '4',
942: 1:    '5',
942: 1:    '6',
942: 1:    '7'
942: 1:  ]
942: 1:}
942: 1:Scores: 114676
942: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz']')
942: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
943: 1:BoardData {
943: 1:  'description': [
943: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
943: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
943: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
943: 1:  ],
943: 1:  'expectedAnswer': '77:7*11:MuzzDuzz',
943: 1:  'history': [
943: 1:    {
943: 1:      'answer': '15:3*5:FizzBuzz',
943: 1:      'question': '1',
943: 1:      'valid': true
943: 1:    },
943: 1:    {
943: 1:      'answer': '21:3*7:FizzMuzz',
943: 1:      'question': '2',
943: 1:      'valid': true
943: 1:    },
943: 1:    {
943: 1:      'answer': '33:3*11:FizzDuzz',
943: 1:      'question': '3',
943: 1:      'valid': true
943: 1:    },
943: 1:    {
943: 1:      'answer': '35:5*7:BuzzMuzz',
943: 1:      'question': '4',
943: 1:      'valid': true
943: 1:    },
943: 1:    {
943: 1:      'answer': '39:3*13:FizzCazz',
943: 1:      'question': '5',
943: 1:      'valid': true
943: 1:    },
943: 1:    {
943: 1:      'answer': '55:5*11:BuzzDuzz',
943: 1:      'question': '6',
943: 1:      'valid': true
943: 1:    },
943: 1:    {
943: 1:      'answer': '65:5*13:BuzzCazz',
943: 1:      'question': '7',
943: 1:      'valid': true
943: 1:    }
943: 1:  ],
943: 1:  'info': [
943: 1:    '✅f(1) = 15:3*5:FizzBuzz',
943: 1:    '✅f(2) = 21:3*7:FizzMuzz',
943: 1:    '✅f(3) = 33:3*11:FizzDuzz',
943: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
943: 1:    '✅f(5) = 39:3*13:FizzCazz',
943: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
943: 1:    '✅f(7) = 65:5*13:BuzzCazz',
943: 1:    '❌f(8) = ??? != 77:7*11:MuzzDuzz'
943: 1:  ],
943: 1:  'level': 34,
943: 1:  'nextQuestion': '8',
943: 1:  'questions': [
943: 1:    '1',
943: 1:    '2',
943: 1:    '3',
943: 1:    '4',
943: 1:    '5',
943: 1:    '6',
943: 1:    '7',
943: 1:    '8'
943: 1:  ]
943: 1:}
943: 1:Scores: 114697
943: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz']')
943: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
944: 1:BoardData {
944: 1:  'description': [
944: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
944: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
944: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
944: 1:  ],
944: 1:  'expectedAnswer': '91:7*13:MuzzCazz',
944: 1:  'history': [
944: 1:    {
944: 1:      'answer': '15:3*5:FizzBuzz',
944: 1:      'question': '1',
944: 1:      'valid': true
944: 1:    },
944: 1:    {
944: 1:      'answer': '21:3*7:FizzMuzz',
944: 1:      'question': '2',
944: 1:      'valid': true
944: 1:    },
944: 1:    {
944: 1:      'answer': '33:3*11:FizzDuzz',
944: 1:      'question': '3',
944: 1:      'valid': true
944: 1:    },
944: 1:    {
944: 1:      'answer': '35:5*7:BuzzMuzz',
944: 1:      'question': '4',
944: 1:      'valid': true
944: 1:    },
944: 1:    {
944: 1:      'answer': '39:3*13:FizzCazz',
944: 1:      'question': '5',
944: 1:      'valid': true
944: 1:    },
944: 1:    {
944: 1:      'answer': '55:5*11:BuzzDuzz',
944: 1:      'question': '6',
944: 1:      'valid': true
944: 1:    },
944: 1:    {
944: 1:      'answer': '65:5*13:BuzzCazz',
944: 1:      'question': '7',
944: 1:      'valid': true
944: 1:    },
944: 1:    {
944: 1:      'answer': '77:7*11:MuzzDuzz',
944: 1:      'question': '8',
944: 1:      'valid': true
944: 1:    }
944: 1:  ],
944: 1:  'info': [
944: 1:    '✅f(1) = 15:3*5:FizzBuzz',
944: 1:    '✅f(2) = 21:3*7:FizzMuzz',
944: 1:    '✅f(3) = 33:3*11:FizzDuzz',
944: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
944: 1:    '✅f(5) = 39:3*13:FizzCazz',
944: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
944: 1:    '✅f(7) = 65:5*13:BuzzCazz',
944: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
944: 1:    '❌f(9) = ??? != 91:7*13:MuzzCazz'
944: 1:  ],
944: 1:  'level': 34,
944: 1:  'nextQuestion': '9',
944: 1:  'questions': [
944: 1:    '1',
944: 1:    '2',
944: 1:    '3',
944: 1:    '4',
944: 1:    '5',
944: 1:    '6',
944: 1:    '7',
944: 1:    '8',
944: 1:    '9'
944: 1:  ]
944: 1:}
944: 1:Scores: 114718
944: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz']')
944: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
945: 1:BoardData {
945: 1:  'description': [
945: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
945: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
945: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
945: 1:  ],
945: 1:  'expectedAnswer': '105:3*5*7:FizzBuzzMuzz',
945: 1:  'history': [
945: 1:    {
945: 1:      'answer': '15:3*5:FizzBuzz',
945: 1:      'question': '1',
945: 1:      'valid': true
945: 1:    },
945: 1:    {
945: 1:      'answer': '21:3*7:FizzMuzz',
945: 1:      'question': '2',
945: 1:      'valid': true
945: 1:    },
945: 1:    {
945: 1:      'answer': '33:3*11:FizzDuzz',
945: 1:      'question': '3',
945: 1:      'valid': true
945: 1:    },
945: 1:    {
945: 1:      'answer': '35:5*7:BuzzMuzz',
945: 1:      'question': '4',
945: 1:      'valid': true
945: 1:    },
945: 1:    {
945: 1:      'answer': '39:3*13:FizzCazz',
945: 1:      'question': '5',
945: 1:      'valid': true
945: 1:    },
945: 1:    {
945: 1:      'answer': '55:5*11:BuzzDuzz',
945: 1:      'question': '6',
945: 1:      'valid': true
945: 1:    },
945: 1:    {
945: 1:      'answer': '65:5*13:BuzzCazz',
945: 1:      'question': '7',
945: 1:      'valid': true
945: 1:    },
945: 1:    {
945: 1:      'answer': '77:7*11:MuzzDuzz',
945: 1:      'question': '8',
945: 1:      'valid': true
945: 1:    },
945: 1:    {
945: 1:      'answer': '91:7*13:MuzzCazz',
945: 1:      'question': '9',
945: 1:      'valid': true
945: 1:    }
945: 1:  ],
945: 1:  'info': [
945: 1:    '✅f(1) = 15:3*5:FizzBuzz',
945: 1:    '✅f(2) = 21:3*7:FizzMuzz',
945: 1:    '✅f(3) = 33:3*11:FizzDuzz',
945: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
945: 1:    '✅f(5) = 39:3*13:FizzCazz',
945: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
945: 1:    '✅f(7) = 65:5*13:BuzzCazz',
945: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
945: 1:    '✅f(9) = 91:7*13:MuzzCazz',
945: 1:    '❌f(10) = ??? != 105:3*5*7:FizzBuzzMuzz'
945: 1:  ],
945: 1:  'level': 34,
945: 1:  'nextQuestion': '10',
945: 1:  'questions': [
945: 1:    '1',
945: 1:    '2',
945: 1:    '3',
945: 1:    '4',
945: 1:    '5',
945: 1:    '6',
945: 1:    '7',
945: 1:    '8',
945: 1:    '9',
945: 1:    '10'
945: 1:  ]
945: 1:}
945: 1:Scores: 114739
945: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz']')
945: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
946: 1:BoardData {
946: 1:  'description': [
946: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
946: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
946: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
946: 1:  ],
946: 1:  'expectedAnswer': '143:11*13:DuzzCazz',
946: 1:  'history': [
946: 1:    {
946: 1:      'answer': '15:3*5:FizzBuzz',
946: 1:      'question': '1',
946: 1:      'valid': true
946: 1:    },
946: 1:    {
946: 1:      'answer': '21:3*7:FizzMuzz',
946: 1:      'question': '2',
946: 1:      'valid': true
946: 1:    },
946: 1:    {
946: 1:      'answer': '33:3*11:FizzDuzz',
946: 1:      'question': '3',
946: 1:      'valid': true
946: 1:    },
946: 1:    {
946: 1:      'answer': '35:5*7:BuzzMuzz',
946: 1:      'question': '4',
946: 1:      'valid': true
946: 1:    },
946: 1:    {
946: 1:      'answer': '39:3*13:FizzCazz',
946: 1:      'question': '5',
946: 1:      'valid': true
946: 1:    },
946: 1:    {
946: 1:      'answer': '55:5*11:BuzzDuzz',
946: 1:      'question': '6',
946: 1:      'valid': true
946: 1:    },
946: 1:    {
946: 1:      'answer': '65:5*13:BuzzCazz',
946: 1:      'question': '7',
946: 1:      'valid': true
946: 1:    },
946: 1:    {
946: 1:      'answer': '77:7*11:MuzzDuzz',
946: 1:      'question': '8',
946: 1:      'valid': true
946: 1:    },
946: 1:    {
946: 1:      'answer': '91:7*13:MuzzCazz',
946: 1:      'question': '9',
946: 1:      'valid': true
946: 1:    },
946: 1:    {
946: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
946: 1:      'question': '10',
946: 1:      'valid': true
946: 1:    }
946: 1:  ],
946: 1:  'info': [
946: 1:    '✅f(1) = 15:3*5:FizzBuzz',
946: 1:    '✅f(2) = 21:3*7:FizzMuzz',
946: 1:    '✅f(3) = 33:3*11:FizzDuzz',
946: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
946: 1:    '✅f(5) = 39:3*13:FizzCazz',
946: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
946: 1:    '✅f(7) = 65:5*13:BuzzCazz',
946: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
946: 1:    '✅f(9) = 91:7*13:MuzzCazz',
946: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
946: 1:    '❌f(11) = ??? != 143:11*13:DuzzCazz'
946: 1:  ],
946: 1:  'level': 34,
946: 1:  'nextQuestion': '11',
946: 1:  'questions': [
946: 1:    '1',
946: 1:    '2',
946: 1:    '3',
946: 1:    '4',
946: 1:    '5',
946: 1:    '6',
946: 1:    '7',
946: 1:    '8',
946: 1:    '9',
946: 1:    '10',
946: 1:    '11'
946: 1:  ]
946: 1:}
946: 1:Scores: 114760
946: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz']')
946: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
947: 1:BoardData {
947: 1:  'description': [
947: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
947: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
947: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
947: 1:  ],
947: 1:  'expectedAnswer': '165:3*5*11:FizzBuzzDuzz',
947: 1:  'history': [
947: 1:    {
947: 1:      'answer': '15:3*5:FizzBuzz',
947: 1:      'question': '1',
947: 1:      'valid': true
947: 1:    },
947: 1:    {
947: 1:      'answer': '21:3*7:FizzMuzz',
947: 1:      'question': '2',
947: 1:      'valid': true
947: 1:    },
947: 1:    {
947: 1:      'answer': '33:3*11:FizzDuzz',
947: 1:      'question': '3',
947: 1:      'valid': true
947: 1:    },
947: 1:    {
947: 1:      'answer': '35:5*7:BuzzMuzz',
947: 1:      'question': '4',
947: 1:      'valid': true
947: 1:    },
947: 1:    {
947: 1:      'answer': '39:3*13:FizzCazz',
947: 1:      'question': '5',
947: 1:      'valid': true
947: 1:    },
947: 1:    {
947: 1:      'answer': '55:5*11:BuzzDuzz',
947: 1:      'question': '6',
947: 1:      'valid': true
947: 1:    },
947: 1:    {
947: 1:      'answer': '65:5*13:BuzzCazz',
947: 1:      'question': '7',
947: 1:      'valid': true
947: 1:    },
947: 1:    {
947: 1:      'answer': '77:7*11:MuzzDuzz',
947: 1:      'question': '8',
947: 1:      'valid': true
947: 1:    },
947: 1:    {
947: 1:      'answer': '91:7*13:MuzzCazz',
947: 1:      'question': '9',
947: 1:      'valid': true
947: 1:    },
947: 1:    {
947: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
947: 1:      'question': '10',
947: 1:      'valid': true
947: 1:    },
947: 1:    {
947: 1:      'answer': '143:11*13:DuzzCazz',
947: 1:      'question': '11',
947: 1:      'valid': true
947: 1:    }
947: 1:  ],
947: 1:  'info': [
947: 1:    '✅f(1) = 15:3*5:FizzBuzz',
947: 1:    '✅f(2) = 21:3*7:FizzMuzz',
947: 1:    '✅f(3) = 33:3*11:FizzDuzz',
947: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
947: 1:    '✅f(5) = 39:3*13:FizzCazz',
947: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
947: 1:    '✅f(7) = 65:5*13:BuzzCazz',
947: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
947: 1:    '✅f(9) = 91:7*13:MuzzCazz',
947: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
947: 1:    '✅f(11) = 143:11*13:DuzzCazz',
947: 1:    '❌f(12) = ??? != 165:3*5*11:FizzBuzzDuzz'
947: 1:  ],
947: 1:  'level': 34,
947: 1:  'nextQuestion': '12',
947: 1:  'questions': [
947: 1:    '1',
947: 1:    '2',
947: 1:    '3',
947: 1:    '4',
947: 1:    '5',
947: 1:    '6',
947: 1:    '7',
947: 1:    '8',
947: 1:    '9',
947: 1:    '10',
947: 1:    '11',
947: 1:    '12'
947: 1:  ]
947: 1:}
947: 1:Scores: 114781
947: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz']')
947: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
948: 1:BoardData {
948: 1:  'description': [
948: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
948: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
948: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
948: 1:  ],
948: 1:  'expectedAnswer': '195:3*5*13:FizzBuzzCazz',
948: 1:  'history': [
948: 1:    {
948: 1:      'answer': '15:3*5:FizzBuzz',
948: 1:      'question': '1',
948: 1:      'valid': true
948: 1:    },
948: 1:    {
948: 1:      'answer': '21:3*7:FizzMuzz',
948: 1:      'question': '2',
948: 1:      'valid': true
948: 1:    },
948: 1:    {
948: 1:      'answer': '33:3*11:FizzDuzz',
948: 1:      'question': '3',
948: 1:      'valid': true
948: 1:    },
948: 1:    {
948: 1:      'answer': '35:5*7:BuzzMuzz',
948: 1:      'question': '4',
948: 1:      'valid': true
948: 1:    },
948: 1:    {
948: 1:      'answer': '39:3*13:FizzCazz',
948: 1:      'question': '5',
948: 1:      'valid': true
948: 1:    },
948: 1:    {
948: 1:      'answer': '55:5*11:BuzzDuzz',
948: 1:      'question': '6',
948: 1:      'valid': true
948: 1:    },
948: 1:    {
948: 1:      'answer': '65:5*13:BuzzCazz',
948: 1:      'question': '7',
948: 1:      'valid': true
948: 1:    },
948: 1:    {
948: 1:      'answer': '77:7*11:MuzzDuzz',
948: 1:      'question': '8',
948: 1:      'valid': true
948: 1:    },
948: 1:    {
948: 1:      'answer': '91:7*13:MuzzCazz',
948: 1:      'question': '9',
948: 1:      'valid': true
948: 1:    },
948: 1:    {
948: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
948: 1:      'question': '10',
948: 1:      'valid': true
948: 1:    },
948: 1:    {
948: 1:      'answer': '143:11*13:DuzzCazz',
948: 1:      'question': '11',
948: 1:      'valid': true
948: 1:    },
948: 1:    {
948: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
948: 1:      'question': '12',
948: 1:      'valid': true
948: 1:    }
948: 1:  ],
948: 1:  'info': [
948: 1:    '✅f(1) = 15:3*5:FizzBuzz',
948: 1:    '✅f(2) = 21:3*7:FizzMuzz',
948: 1:    '✅f(3) = 33:3*11:FizzDuzz',
948: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
948: 1:    '✅f(5) = 39:3*13:FizzCazz',
948: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
948: 1:    '✅f(7) = 65:5*13:BuzzCazz',
948: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
948: 1:    '✅f(9) = 91:7*13:MuzzCazz',
948: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
948: 1:    '✅f(11) = 143:11*13:DuzzCazz',
948: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
948: 1:    '❌f(13) = ??? != 195:3*5*13:FizzBuzzCazz'
948: 1:  ],
948: 1:  'level': 34,
948: 1:  'nextQuestion': '13',
948: 1:  'questions': [
948: 1:    '1',
948: 1:    '2',
948: 1:    '3',
948: 1:    '4',
948: 1:    '5',
948: 1:    '6',
948: 1:    '7',
948: 1:    '8',
948: 1:    '9',
948: 1:    '10',
948: 1:    '11',
948: 1:    '12',
948: 1:    '13'
948: 1:  ]
948: 1:}
948: 1:Scores: 114802
948: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz']')
948: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
949: 1:BoardData {
949: 1:  'description': [
949: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
949: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
949: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
949: 1:  ],
949: 1:  'expectedAnswer': '231:3*7*11:FizzMuzzDuzz',
949: 1:  'history': [
949: 1:    {
949: 1:      'answer': '15:3*5:FizzBuzz',
949: 1:      'question': '1',
949: 1:      'valid': true
949: 1:    },
949: 1:    {
949: 1:      'answer': '21:3*7:FizzMuzz',
949: 1:      'question': '2',
949: 1:      'valid': true
949: 1:    },
949: 1:    {
949: 1:      'answer': '33:3*11:FizzDuzz',
949: 1:      'question': '3',
949: 1:      'valid': true
949: 1:    },
949: 1:    {
949: 1:      'answer': '35:5*7:BuzzMuzz',
949: 1:      'question': '4',
949: 1:      'valid': true
949: 1:    },
949: 1:    {
949: 1:      'answer': '39:3*13:FizzCazz',
949: 1:      'question': '5',
949: 1:      'valid': true
949: 1:    },
949: 1:    {
949: 1:      'answer': '55:5*11:BuzzDuzz',
949: 1:      'question': '6',
949: 1:      'valid': true
949: 1:    },
949: 1:    {
949: 1:      'answer': '65:5*13:BuzzCazz',
949: 1:      'question': '7',
949: 1:      'valid': true
949: 1:    },
949: 1:    {
949: 1:      'answer': '77:7*11:MuzzDuzz',
949: 1:      'question': '8',
949: 1:      'valid': true
949: 1:    },
949: 1:    {
949: 1:      'answer': '91:7*13:MuzzCazz',
949: 1:      'question': '9',
949: 1:      'valid': true
949: 1:    },
949: 1:    {
949: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
949: 1:      'question': '10',
949: 1:      'valid': true
949: 1:    },
949: 1:    {
949: 1:      'answer': '143:11*13:DuzzCazz',
949: 1:      'question': '11',
949: 1:      'valid': true
949: 1:    },
949: 1:    {
949: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
949: 1:      'question': '12',
949: 1:      'valid': true
949: 1:    },
949: 1:    {
949: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
949: 1:      'question': '13',
949: 1:      'valid': true
949: 1:    }
949: 1:  ],
949: 1:  'info': [
949: 1:    '✅f(1) = 15:3*5:FizzBuzz',
949: 1:    '✅f(2) = 21:3*7:FizzMuzz',
949: 1:    '✅f(3) = 33:3*11:FizzDuzz',
949: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
949: 1:    '✅f(5) = 39:3*13:FizzCazz',
949: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
949: 1:    '✅f(7) = 65:5*13:BuzzCazz',
949: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
949: 1:    '✅f(9) = 91:7*13:MuzzCazz',
949: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
949: 1:    '✅f(11) = 143:11*13:DuzzCazz',
949: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
949: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
949: 1:    '❌f(14) = ??? != 231:3*7*11:FizzMuzzDuzz'
949: 1:  ],
949: 1:  'level': 34,
949: 1:  'nextQuestion': '14',
949: 1:  'questions': [
949: 1:    '1',
949: 1:    '2',
949: 1:    '3',
949: 1:    '4',
949: 1:    '5',
949: 1:    '6',
949: 1:    '7',
949: 1:    '8',
949: 1:    '9',
949: 1:    '10',
949: 1:    '11',
949: 1:    '12',
949: 1:    '13',
949: 1:    '14'
949: 1:  ]
949: 1:}
949: 1:Scores: 114823
949: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz', '231:3*7*11:FizzMuzzDuzz']')
949: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
950: 1:BoardData {
950: 1:  'description': [
950: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
950: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
950: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
950: 1:  ],
950: 1:  'expectedAnswer': '273:3*7*13:FizzMuzzCazz',
950: 1:  'history': [
950: 1:    {
950: 1:      'answer': '15:3*5:FizzBuzz',
950: 1:      'question': '1',
950: 1:      'valid': true
950: 1:    },
950: 1:    {
950: 1:      'answer': '21:3*7:FizzMuzz',
950: 1:      'question': '2',
950: 1:      'valid': true
950: 1:    },
950: 1:    {
950: 1:      'answer': '33:3*11:FizzDuzz',
950: 1:      'question': '3',
950: 1:      'valid': true
950: 1:    },
950: 1:    {
950: 1:      'answer': '35:5*7:BuzzMuzz',
950: 1:      'question': '4',
950: 1:      'valid': true
950: 1:    },
950: 1:    {
950: 1:      'answer': '39:3*13:FizzCazz',
950: 1:      'question': '5',
950: 1:      'valid': true
950: 1:    },
950: 1:    {
950: 1:      'answer': '55:5*11:BuzzDuzz',
950: 1:      'question': '6',
950: 1:      'valid': true
950: 1:    },
950: 1:    {
950: 1:      'answer': '65:5*13:BuzzCazz',
950: 1:      'question': '7',
950: 1:      'valid': true
950: 1:    },
950: 1:    {
950: 1:      'answer': '77:7*11:MuzzDuzz',
950: 1:      'question': '8',
950: 1:      'valid': true
950: 1:    },
950: 1:    {
950: 1:      'answer': '91:7*13:MuzzCazz',
950: 1:      'question': '9',
950: 1:      'valid': true
950: 1:    },
950: 1:    {
950: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
950: 1:      'question': '10',
950: 1:      'valid': true
950: 1:    },
950: 1:    {
950: 1:      'answer': '143:11*13:DuzzCazz',
950: 1:      'question': '11',
950: 1:      'valid': true
950: 1:    },
950: 1:    {
950: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
950: 1:      'question': '12',
950: 1:      'valid': true
950: 1:    },
950: 1:    {
950: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
950: 1:      'question': '13',
950: 1:      'valid': true
950: 1:    },
950: 1:    {
950: 1:      'answer': '231:3*7*11:FizzMuzzDuzz',
950: 1:      'question': '14',
950: 1:      'valid': true
950: 1:    }
950: 1:  ],
950: 1:  'info': [
950: 1:    '✅f(1) = 15:3*5:FizzBuzz',
950: 1:    '✅f(2) = 21:3*7:FizzMuzz',
950: 1:    '✅f(3) = 33:3*11:FizzDuzz',
950: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
950: 1:    '✅f(5) = 39:3*13:FizzCazz',
950: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
950: 1:    '✅f(7) = 65:5*13:BuzzCazz',
950: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
950: 1:    '✅f(9) = 91:7*13:MuzzCazz',
950: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
950: 1:    '✅f(11) = 143:11*13:DuzzCazz',
950: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
950: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
950: 1:    '✅f(14) = 231:3*7*11:FizzMuzzDuzz',
950: 1:    '❌f(15) = ??? != 273:3*7*13:FizzMuzzCazz'
950: 1:  ],
950: 1:  'level': 34,
950: 1:  'nextQuestion': '15',
950: 1:  'questions': [
950: 1:    '1',
950: 1:    '2',
950: 1:    '3',
950: 1:    '4',
950: 1:    '5',
950: 1:    '6',
950: 1:    '7',
950: 1:    '8',
950: 1:    '9',
950: 1:    '10',
950: 1:    '11',
950: 1:    '12',
950: 1:    '13',
950: 1:    '14',
950: 1:    '15'
950: 1:  ]
950: 1:}
950: 1:Scores: 114844
950: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz', '231:3*7*11:FizzMuzzDuzz', '273:3*7*13:FizzMuzzCazz']')
950: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
951: 1:BoardData {
951: 1:  'description': [
951: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
951: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
951: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
951: 1:  ],
951: 1:  'expectedAnswer': '385:5*7*11:BuzzMuzzDuzz',
951: 1:  'history': [
951: 1:    {
951: 1:      'answer': '15:3*5:FizzBuzz',
951: 1:      'question': '1',
951: 1:      'valid': true
951: 1:    },
951: 1:    {
951: 1:      'answer': '21:3*7:FizzMuzz',
951: 1:      'question': '2',
951: 1:      'valid': true
951: 1:    },
951: 1:    {
951: 1:      'answer': '33:3*11:FizzDuzz',
951: 1:      'question': '3',
951: 1:      'valid': true
951: 1:    },
951: 1:    {
951: 1:      'answer': '35:5*7:BuzzMuzz',
951: 1:      'question': '4',
951: 1:      'valid': true
951: 1:    },
951: 1:    {
951: 1:      'answer': '39:3*13:FizzCazz',
951: 1:      'question': '5',
951: 1:      'valid': true
951: 1:    },
951: 1:    {
951: 1:      'answer': '55:5*11:BuzzDuzz',
951: 1:      'question': '6',
951: 1:      'valid': true
951: 1:    },
951: 1:    {
951: 1:      'answer': '65:5*13:BuzzCazz',
951: 1:      'question': '7',
951: 1:      'valid': true
951: 1:    },
951: 1:    {
951: 1:      'answer': '77:7*11:MuzzDuzz',
951: 1:      'question': '8',
951: 1:      'valid': true
951: 1:    },
951: 1:    {
951: 1:      'answer': '91:7*13:MuzzCazz',
951: 1:      'question': '9',
951: 1:      'valid': true
951: 1:    },
951: 1:    {
951: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
951: 1:      'question': '10',
951: 1:      'valid': true
951: 1:    },
951: 1:    {
951: 1:      'answer': '143:11*13:DuzzCazz',
951: 1:      'question': '11',
951: 1:      'valid': true
951: 1:    },
951: 1:    {
951: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
951: 1:      'question': '12',
951: 1:      'valid': true
951: 1:    },
951: 1:    {
951: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
951: 1:      'question': '13',
951: 1:      'valid': true
951: 1:    },
951: 1:    {
951: 1:      'answer': '231:3*7*11:FizzMuzzDuzz',
951: 1:      'question': '14',
951: 1:      'valid': true
951: 1:    },
951: 1:    {
951: 1:      'answer': '273:3*7*13:FizzMuzzCazz',
951: 1:      'question': '15',
951: 1:      'valid': true
951: 1:    }
951: 1:  ],
951: 1:  'info': [
951: 1:    '✅f(1) = 15:3*5:FizzBuzz',
951: 1:    '✅f(2) = 21:3*7:FizzMuzz',
951: 1:    '✅f(3) = 33:3*11:FizzDuzz',
951: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
951: 1:    '✅f(5) = 39:3*13:FizzCazz',
951: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
951: 1:    '✅f(7) = 65:5*13:BuzzCazz',
951: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
951: 1:    '✅f(9) = 91:7*13:MuzzCazz',
951: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
951: 1:    '✅f(11) = 143:11*13:DuzzCazz',
951: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
951: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
951: 1:    '✅f(14) = 231:3*7*11:FizzMuzzDuzz',
951: 1:    '✅f(15) = 273:3*7*13:FizzMuzzCazz',
951: 1:    '❌f(16) = ??? != 385:5*7*11:BuzzMuzzDuzz'
951: 1:  ],
951: 1:  'level': 34,
951: 1:  'nextQuestion': '16',
951: 1:  'questions': [
951: 1:    '1',
951: 1:    '2',
951: 1:    '3',
951: 1:    '4',
951: 1:    '5',
951: 1:    '6',
951: 1:    '7',
951: 1:    '8',
951: 1:    '9',
951: 1:    '10',
951: 1:    '11',
951: 1:    '12',
951: 1:    '13',
951: 1:    '14',
951: 1:    '15',
951: 1:    '16'
951: 1:  ]
951: 1:}
951: 1:Scores: 114865
951: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz', '231:3*7*11:FizzMuzzDuzz', '273:3*7*13:FizzMuzzCazz', '385:5*7*11:BuzzMuzzDuzz']')
951: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
952: 1:BoardData {
952: 1:  'description': [
952: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
952: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
952: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
952: 1:  ],
952: 1:  'expectedAnswer': '429:3*11*13:FizzDuzzCazz',
952: 1:  'history': [
952: 1:    {
952: 1:      'answer': '15:3*5:FizzBuzz',
952: 1:      'question': '1',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '21:3*7:FizzMuzz',
952: 1:      'question': '2',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '33:3*11:FizzDuzz',
952: 1:      'question': '3',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '35:5*7:BuzzMuzz',
952: 1:      'question': '4',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '39:3*13:FizzCazz',
952: 1:      'question': '5',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '55:5*11:BuzzDuzz',
952: 1:      'question': '6',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '65:5*13:BuzzCazz',
952: 1:      'question': '7',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '77:7*11:MuzzDuzz',
952: 1:      'question': '8',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '91:7*13:MuzzCazz',
952: 1:      'question': '9',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
952: 1:      'question': '10',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '143:11*13:DuzzCazz',
952: 1:      'question': '11',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
952: 1:      'question': '12',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
952: 1:      'question': '13',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '231:3*7*11:FizzMuzzDuzz',
952: 1:      'question': '14',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '273:3*7*13:FizzMuzzCazz',
952: 1:      'question': '15',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '385:5*7*11:BuzzMuzzDuzz',
952: 1:      'question': '16',
952: 1:      'valid': true
952: 1:    }
952: 1:  ],
952: 1:  'info': [
952: 1:    '✅f(1) = 15:3*5:FizzBuzz',
952: 1:    '✅f(2) = 21:3*7:FizzMuzz',
952: 1:    '✅f(3) = 33:3*11:FizzDuzz',
952: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
952: 1:    '✅f(5) = 39:3*13:FizzCazz',
952: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
952: 1:    '✅f(7) = 65:5*13:BuzzCazz',
952: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
952: 1:    '✅f(9) = 91:7*13:MuzzCazz',
952: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
952: 1:    '✅f(11) = 143:11*13:DuzzCazz',
952: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
952: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
952: 1:    '✅f(14) = 231:3*7*11:FizzMuzzDuzz',
952: 1:    '✅f(15) = 273:3*7*13:FizzMuzzCazz',
952: 1:    '✅f(16) = 385:5*7*11:BuzzMuzzDuzz',
952: 1:    '❌f(17) = ??? != 429:3*11*13:FizzDuzzCazz'
952: 1:  ],
952: 1:  'level': 34,
952: 1:  'nextQuestion': '17',
952: 1:  'questions': [
952: 1:    '1',
952: 1:    '2',
952: 1:    '3',
952: 1:    '4',
952: 1:    '5',
952: 1:    '6',
952: 1:    '7',
952: 1:    '8',
952: 1:    '9',
952: 1:    '10',
952: 1:    '11',
952: 1:    '12',
952: 1:    '13',
952: 1:    '14',
952: 1:    '15',
952: 1:    '16',
952: 1:    '17'
952: 1:  ]
952: 1:}
952: 1:Scores: 114886
952: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz', '231:3*7*11:FizzMuzzDuzz', '273:3*7*13:FizzMuzzCazz', '385:5*7*11:BuzzMuzzDuzz', '429:3*11*13:FizzDuzzCazz']')
952: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
953: 1:BoardData {
953: 1:  'description': [
953: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
953: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
953: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
953: 1:  ],
953: 1:  'expectedAnswer': '455:5*7*13:BuzzMuzzCazz',
953: 1:  'history': [
953: 1:    {
953: 1:      'answer': '15:3*5:FizzBuzz',
953: 1:      'question': '1',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '21:3*7:FizzMuzz',
953: 1:      'question': '2',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '33:3*11:FizzDuzz',
953: 1:      'question': '3',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '35:5*7:BuzzMuzz',
953: 1:      'question': '4',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '39:3*13:FizzCazz',
953: 1:      'question': '5',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '55:5*11:BuzzDuzz',
953: 1:      'question': '6',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '65:5*13:BuzzCazz',
953: 1:      'question': '7',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '77:7*11:MuzzDuzz',
953: 1:      'question': '8',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '91:7*13:MuzzCazz',
953: 1:      'question': '9',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
953: 1:      'question': '10',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '143:11*13:DuzzCazz',
953: 1:      'question': '11',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
953: 1:      'question': '12',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
953: 1:      'question': '13',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '231:3*7*11:FizzMuzzDuzz',
953: 1:      'question': '14',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '273:3*7*13:FizzMuzzCazz',
953: 1:      'question': '15',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '385:5*7*11:BuzzMuzzDuzz',
953: 1:      'question': '16',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '429:3*11*13:FizzDuzzCazz',
953: 1:      'question': '17',
953: 1:      'valid': true
953: 1:    }
953: 1:  ],
953: 1:  'info': [
953: 1:    '✅f(1) = 15:3*5:FizzBuzz',
953: 1:    '✅f(2) = 21:3*7:FizzMuzz',
953: 1:    '✅f(3) = 33:3*11:FizzDuzz',
953: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
953: 1:    '✅f(5) = 39:3*13:FizzCazz',
953: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
953: 1:    '✅f(7) = 65:5*13:BuzzCazz',
953: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
953: 1:    '✅f(9) = 91:7*13:MuzzCazz',
953: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
953: 1:    '✅f(11) = 143:11*13:DuzzCazz',
953: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
953: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
953: 1:    '✅f(14) = 231:3*7*11:FizzMuzzDuzz',
953: 1:    '✅f(15) = 273:3*7*13:FizzMuzzCazz',
953: 1:    '✅f(16) = 385:5*7*11:BuzzMuzzDuzz',
953: 1:    '✅f(17) = 429:3*11*13:FizzDuzzCazz',
953: 1:    '❌f(18) = ??? != 455:5*7*13:BuzzMuzzCazz'
953: 1:  ],
953: 1:  'level': 34,
953: 1:  'nextQuestion': '18',
953: 1:  'questions': [
953: 1:    '1',
953: 1:    '2',
953: 1:    '3',
953: 1:    '4',
953: 1:    '5',
953: 1:    '6',
953: 1:    '7',
953: 1:    '8',
953: 1:    '9',
953: 1:    '10',
953: 1:    '11',
953: 1:    '12',
953: 1:    '13',
953: 1:    '14',
953: 1:    '15',
953: 1:    '16',
953: 1:    '17',
953: 1:    '18'
953: 1:  ]
953: 1:}
953: 1:Scores: 114907
953: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz', '231:3*7*11:FizzMuzzDuzz', '273:3*7*13:FizzMuzzCazz', '385:5*7*11:BuzzMuzzDuzz', '429:3*11*13:FizzDuzzCazz', '455:5*7*13:BuzzMuzzCazz']')
953: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
954: 1:BoardData {
954: 1:  'description': [
954: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
954: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
954: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
954: 1:  ],
954: 1:  'expectedAnswer': '715:5*11*13:BuzzDuzzCazz',
954: 1:  'history': [
954: 1:    {
954: 1:      'answer': '15:3*5:FizzBuzz',
954: 1:      'question': '1',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '21:3*7:FizzMuzz',
954: 1:      'question': '2',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '33:3*11:FizzDuzz',
954: 1:      'question': '3',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '35:5*7:BuzzMuzz',
954: 1:      'question': '4',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '39:3*13:FizzCazz',
954: 1:      'question': '5',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '55:5*11:BuzzDuzz',
954: 1:      'question': '6',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '65:5*13:BuzzCazz',
954: 1:      'question': '7',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '77:7*11:MuzzDuzz',
954: 1:      'question': '8',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '91:7*13:MuzzCazz',
954: 1:      'question': '9',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
954: 1:      'question': '10',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '143:11*13:DuzzCazz',
954: 1:      'question': '11',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
954: 1:      'question': '12',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
954: 1:      'question': '13',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '231:3*7*11:FizzMuzzDuzz',
954: 1:      'question': '14',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '273:3*7*13:FizzMuzzCazz',
954: 1:      'question': '15',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '385:5*7*11:BuzzMuzzDuzz',
954: 1:      'question': '16',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '429:3*11*13:FizzDuzzCazz',
954: 1:      'question': '17',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '455:5*7*13:BuzzMuzzCazz',
954: 1:      'question': '18',
954: 1:      'valid': true
954: 1:    }
954: 1:  ],
954: 1:  'info': [
954: 1:    '✅f(1) = 15:3*5:FizzBuzz',
954: 1:    '✅f(2) = 21:3*7:FizzMuzz',
954: 1:    '✅f(3) = 33:3*11:FizzDuzz',
954: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
954: 1:    '✅f(5) = 39:3*13:FizzCazz',
954: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
954: 1:    '✅f(7) = 65:5*13:BuzzCazz',
954: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
954: 1:    '✅f(9) = 91:7*13:MuzzCazz',
954: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
954: 1:    '✅f(11) = 143:11*13:DuzzCazz',
954: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
954: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
954: 1:    '✅f(14) = 231:3*7*11:FizzMuzzDuzz',
954: 1:    '✅f(15) = 273:3*7*13:FizzMuzzCazz',
954: 1:    '✅f(16) = 385:5*7*11:BuzzMuzzDuzz',
954: 1:    '✅f(17) = 429:3*11*13:FizzDuzzCazz',
954: 1:    '✅f(18) = 455:5*7*13:BuzzMuzzCazz',
954: 1:    '❌f(19) = ??? != 715:5*11*13:BuzzDuzzCazz'
954: 1:  ],
954: 1:  'level': 34,
954: 1:  'nextQuestion': '19',
954: 1:  'questions': [
954: 1:    '1',
954: 1:    '2',
954: 1:    '3',
954: 1:    '4',
954: 1:    '5',
954: 1:    '6',
954: 1:    '7',
954: 1:    '8',
954: 1:    '9',
954: 1:    '10',
954: 1:    '11',
954: 1:    '12',
954: 1:    '13',
954: 1:    '14',
954: 1:    '15',
954: 1:    '16',
954: 1:    '17',
954: 1:    '18',
954: 1:    '19'
954: 1:  ]
954: 1:}
954: 1:Scores: 114928
954: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz', '231:3*7*11:FizzMuzzDuzz', '273:3*7*13:FizzMuzzCazz', '385:5*7*11:BuzzMuzzDuzz', '429:3*11*13:FizzDuzzCazz', '455:5*7*13:BuzzMuzzCazz', '715:5*11*13:BuzzDuzzCazz']')
954: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
955: 1:BoardData {
955: 1:  'description': [
955: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
955: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
955: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
955: 1:  ],
955: 1:  'expectedAnswer': '1001:7*11*13:MuzzDuzzCazz',
955: 1:  'history': [
955: 1:    {
955: 1:      'answer': '15:3*5:FizzBuzz',
955: 1:      'question': '1',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '21:3*7:FizzMuzz',
955: 1:      'question': '2',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '33:3*11:FizzDuzz',
955: 1:      'question': '3',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '35:5*7:BuzzMuzz',
955: 1:      'question': '4',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '39:3*13:FizzCazz',
955: 1:      'question': '5',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '55:5*11:BuzzDuzz',
955: 1:      'question': '6',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '65:5*13:BuzzCazz',
955: 1:      'question': '7',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '77:7*11:MuzzDuzz',
955: 1:      'question': '8',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '91:7*13:MuzzCazz',
955: 1:      'question': '9',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
955: 1:      'question': '10',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '143:11*13:DuzzCazz',
955: 1:      'question': '11',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
955: 1:      'question': '12',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
955: 1:      'question': '13',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '231:3*7*11:FizzMuzzDuzz',
955: 1:      'question': '14',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '273:3*7*13:FizzMuzzCazz',
955: 1:      'question': '15',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '385:5*7*11:BuzzMuzzDuzz',
955: 1:      'question': '16',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '429:3*11*13:FizzDuzzCazz',
955: 1:      'question': '17',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '455:5*7*13:BuzzMuzzCazz',
955: 1:      'question': '18',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '715:5*11*13:BuzzDuzzCazz',
955: 1:      'question': '19',
955: 1:      'valid': true
955: 1:    }
955: 1:  ],
955: 1:  'info': [
955: 1:    '✅f(1) = 15:3*5:FizzBuzz',
955: 1:    '✅f(2) = 21:3*7:FizzMuzz',
955: 1:    '✅f(3) = 33:3*11:FizzDuzz',
955: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
955: 1:    '✅f(5) = 39:3*13:FizzCazz',
955: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
955: 1:    '✅f(7) = 65:5*13:BuzzCazz',
955: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
955: 1:    '✅f(9) = 91:7*13:MuzzCazz',
955: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
955: 1:    '✅f(11) = 143:11*13:DuzzCazz',
955: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
955: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
955: 1:    '✅f(14) = 231:3*7*11:FizzMuzzDuzz',
955: 1:    '✅f(15) = 273:3*7*13:FizzMuzzCazz',
955: 1:    '✅f(16) = 385:5*7*11:BuzzMuzzDuzz',
955: 1:    '✅f(17) = 429:3*11*13:FizzDuzzCazz',
955: 1:    '✅f(18) = 455:5*7*13:BuzzMuzzCazz',
955: 1:    '✅f(19) = 715:5*11*13:BuzzDuzzCazz',
955: 1:    '❌f(20) = ??? != 1001:7*11*13:MuzzDuzzCazz'
955: 1:  ],
955: 1:  'level': 34,
955: 1:  'nextQuestion': '20',
955: 1:  'questions': [
955: 1:    '1',
955: 1:    '2',
955: 1:    '3',
955: 1:    '4',
955: 1:    '5',
955: 1:    '6',
955: 1:    '7',
955: 1:    '8',
955: 1:    '9',
955: 1:    '10',
955: 1:    '11',
955: 1:    '12',
955: 1:    '13',
955: 1:    '14',
955: 1:    '15',
955: 1:    '16',
955: 1:    '17',
955: 1:    '18',
955: 1:    '19',
955: 1:    '20'
955: 1:  ]
955: 1:}
955: 1:Scores: 114949
955: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz', '231:3*7*11:FizzMuzzDuzz', '273:3*7*13:FizzMuzzCazz', '385:5*7*11:BuzzMuzzDuzz', '429:3*11*13:FizzDuzzCazz', '455:5*7*13:BuzzMuzzCazz', '715:5*11*13:BuzzDuzzCazz', '1001:7*11*13:MuzzDuzzCazz']')
955: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
956: 1:BoardData {
956: 1:  'description': [
956: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
956: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
956: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
956: 1:  ],
956: 1:  'expectedAnswer': '1155:3*5*7*11:FizzBuzzMuzzDuzz',
956: 1:  'history': [
956: 1:    {
956: 1:      'answer': '15:3*5:FizzBuzz',
956: 1:      'question': '1',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '21:3*7:FizzMuzz',
956: 1:      'question': '2',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '33:3*11:FizzDuzz',
956: 1:      'question': '3',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '35:5*7:BuzzMuzz',
956: 1:      'question': '4',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '39:3*13:FizzCazz',
956: 1:      'question': '5',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '55:5*11:BuzzDuzz',
956: 1:      'question': '6',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '65:5*13:BuzzCazz',
956: 1:      'question': '7',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '77:7*11:MuzzDuzz',
956: 1:      'question': '8',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '91:7*13:MuzzCazz',
956: 1:      'question': '9',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
956: 1:      'question': '10',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '143:11*13:DuzzCazz',
956: 1:      'question': '11',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
956: 1:      'question': '12',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
956: 1:      'question': '13',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '231:3*7*11:FizzMuzzDuzz',
956: 1:      'question': '14',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '273:3*7*13:FizzMuzzCazz',
956: 1:      'question': '15',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '385:5*7*11:BuzzMuzzDuzz',
956: 1:      'question': '16',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '429:3*11*13:FizzDuzzCazz',
956: 1:      'question': '17',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '455:5*7*13:BuzzMuzzCazz',
956: 1:      'question': '18',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '715:5*11*13:BuzzDuzzCazz',
956: 1:      'question': '19',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '1001:7*11*13:MuzzDuzzCazz',
956: 1:      'question': '20',
956: 1:      'valid': true
956: 1:    }
956: 1:  ],
956: 1:  'info': [
956: 1:    '✅f(1) = 15:3*5:FizzBuzz',
956: 1:    '✅f(2) = 21:3*7:FizzMuzz',
956: 1:    '✅f(3) = 33:3*11:FizzDuzz',
956: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
956: 1:    '✅f(5) = 39:3*13:FizzCazz',
956: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
956: 1:    '✅f(7) = 65:5*13:BuzzCazz',
956: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
956: 1:    '✅f(9) = 91:7*13:MuzzCazz',
956: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
956: 1:    '✅f(11) = 143:11*13:DuzzCazz',
956: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
956: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
956: 1:    '✅f(14) = 231:3*7*11:FizzMuzzDuzz',
956: 1:    '✅f(15) = 273:3*7*13:FizzMuzzCazz',
956: 1:    '✅f(16) = 385:5*7*11:BuzzMuzzDuzz',
956: 1:    '✅f(17) = 429:3*11*13:FizzDuzzCazz',
956: 1:    '✅f(18) = 455:5*7*13:BuzzMuzzCazz',
956: 1:    '✅f(19) = 715:5*11*13:BuzzDuzzCazz',
956: 1:    '✅f(20) = 1001:7*11*13:MuzzDuzzCazz',
956: 1:    '❌f(21) = ??? != 1155:3*5*7*11:FizzBuzzMuzzDuzz'
956: 1:  ],
956: 1:  'level': 34,
956: 1:  'nextQuestion': '21',
956: 1:  'questions': [
956: 1:    '1',
956: 1:    '2',
956: 1:    '3',
956: 1:    '4',
956: 1:    '5',
956: 1:    '6',
956: 1:    '7',
956: 1:    '8',
956: 1:    '9',
956: 1:    '10',
956: 1:    '11',
956: 1:    '12',
956: 1:    '13',
956: 1:    '14',
956: 1:    '15',
956: 1:    '16',
956: 1:    '17',
956: 1:    '18',
956: 1:    '19',
956: 1:    '20',
956: 1:    '21'
956: 1:  ]
956: 1:}
956: 1:Scores: 114970
956: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz', '231:3*7*11:FizzMuzzDuzz', '273:3*7*13:FizzMuzzCazz', '385:5*7*11:BuzzMuzzDuzz', '429:3*11*13:FizzDuzzCazz', '455:5*7*13:BuzzMuzzCazz', '715:5*11*13:BuzzDuzzCazz', '1001:7*11*13:MuzzDuzzCazz', '1155:3*5*7*11:FizzBuzzMuzzDuzz']')
956: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
957: 1:BoardData {
957: 1:  'description': [
957: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
957: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
957: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
957: 1:  ],
957: 1:  'expectedAnswer': '1365:3*5*7*13:FizzBuzzMuzzCazz',
957: 1:  'history': [
957: 1:    {
957: 1:      'answer': '15:3*5:FizzBuzz',
957: 1:      'question': '1',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '21:3*7:FizzMuzz',
957: 1:      'question': '2',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '33:3*11:FizzDuzz',
957: 1:      'question': '3',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '35:5*7:BuzzMuzz',
957: 1:      'question': '4',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '39:3*13:FizzCazz',
957: 1:      'question': '5',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '55:5*11:BuzzDuzz',
957: 1:      'question': '6',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '65:5*13:BuzzCazz',
957: 1:      'question': '7',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '77:7*11:MuzzDuzz',
957: 1:      'question': '8',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '91:7*13:MuzzCazz',
957: 1:      'question': '9',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
957: 1:      'question': '10',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '143:11*13:DuzzCazz',
957: 1:      'question': '11',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
957: 1:      'question': '12',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
957: 1:      'question': '13',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '231:3*7*11:FizzMuzzDuzz',
957: 1:      'question': '14',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '273:3*7*13:FizzMuzzCazz',
957: 1:      'question': '15',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '385:5*7*11:BuzzMuzzDuzz',
957: 1:      'question': '16',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '429:3*11*13:FizzDuzzCazz',
957: 1:      'question': '17',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '455:5*7*13:BuzzMuzzCazz',
957: 1:      'question': '18',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '715:5*11*13:BuzzDuzzCazz',
957: 1:      'question': '19',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '1001:7*11*13:MuzzDuzzCazz',
957: 1:      'question': '20',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '1155:3*5*7*11:FizzBuzzMuzzDuzz',
957: 1:      'question': '21',
957: 1:      'valid': true
957: 1:    }
957: 1:  ],
957: 1:  'info': [
957: 1:    '✅f(1) = 15:3*5:FizzBuzz',
957: 1:    '✅f(2) = 21:3*7:FizzMuzz',
957: 1:    '✅f(3) = 33:3*11:FizzDuzz',
957: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
957: 1:    '✅f(5) = 39:3*13:FizzCazz',
957: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
957: 1:    '✅f(7) = 65:5*13:BuzzCazz',
957: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
957: 1:    '✅f(9) = 91:7*13:MuzzCazz',
957: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
957: 1:    '✅f(11) = 143:11*13:DuzzCazz',
957: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
957: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
957: 1:    '✅f(14) = 231:3*7*11:FizzMuzzDuzz',
957: 1:    '✅f(15) = 273:3*7*13:FizzMuzzCazz',
957: 1:    '✅f(16) = 385:5*7*11:BuzzMuzzDuzz',
957: 1:    '✅f(17) = 429:3*11*13:FizzDuzzCazz',
957: 1:    '✅f(18) = 455:5*7*13:BuzzMuzzCazz',
957: 1:    '✅f(19) = 715:5*11*13:BuzzDuzzCazz',
957: 1:    '✅f(20) = 1001:7*11*13:MuzzDuzzCazz',
957: 1:    '✅f(21) = 1155:3*5*7*11:FizzBuzzMuzzDuzz',
957: 1:    '❌f(22) = ??? != 1365:3*5*7*13:FizzBuzzMuzzCazz'
957: 1:  ],
957: 1:  'level': 34,
957: 1:  'nextQuestion': '22',
957: 1:  'questions': [
957: 1:    '1',
957: 1:    '2',
957: 1:    '3',
957: 1:    '4',
957: 1:    '5',
957: 1:    '6',
957: 1:    '7',
957: 1:    '8',
957: 1:    '9',
957: 1:    '10',
957: 1:    '11',
957: 1:    '12',
957: 1:    '13',
957: 1:    '14',
957: 1:    '15',
957: 1:    '16',
957: 1:    '17',
957: 1:    '18',
957: 1:    '19',
957: 1:    '20',
957: 1:    '21',
957: 1:    '22'
957: 1:  ]
957: 1:}
957: 1:Scores: 114991
957: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz', '231:3*7*11:FizzMuzzDuzz', '273:3*7*13:FizzMuzzCazz', '385:5*7*11:BuzzMuzzDuzz', '429:3*11*13:FizzDuzzCazz', '455:5*7*13:BuzzMuzzCazz', '715:5*11*13:BuzzDuzzCazz', '1001:7*11*13:MuzzDuzzCazz', '1155:3*5*7*11:FizzBuzzMuzzDuzz', '1365:3*5*7*13:FizzBuzzMuzzCazz']')
957: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
958: 1:BoardData {
958: 1:  'description': [
958: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
958: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
958: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
958: 1:  ],
958: 1:  'expectedAnswer': '2145:3*5*11*13:FizzBuzzDuzzCazz',
958: 1:  'history': [
958: 1:    {
958: 1:      'answer': '15:3*5:FizzBuzz',
958: 1:      'question': '1',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '21:3*7:FizzMuzz',
958: 1:      'question': '2',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '33:3*11:FizzDuzz',
958: 1:      'question': '3',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '35:5*7:BuzzMuzz',
958: 1:      'question': '4',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '39:3*13:FizzCazz',
958: 1:      'question': '5',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '55:5*11:BuzzDuzz',
958: 1:      'question': '6',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '65:5*13:BuzzCazz',
958: 1:      'question': '7',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '77:7*11:MuzzDuzz',
958: 1:      'question': '8',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '91:7*13:MuzzCazz',
958: 1:      'question': '9',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
958: 1:      'question': '10',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '143:11*13:DuzzCazz',
958: 1:      'question': '11',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
958: 1:      'question': '12',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
958: 1:      'question': '13',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '231:3*7*11:FizzMuzzDuzz',
958: 1:      'question': '14',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '273:3*7*13:FizzMuzzCazz',
958: 1:      'question': '15',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '385:5*7*11:BuzzMuzzDuzz',
958: 1:      'question': '16',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '429:3*11*13:FizzDuzzCazz',
958: 1:      'question': '17',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '455:5*7*13:BuzzMuzzCazz',
958: 1:      'question': '18',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '715:5*11*13:BuzzDuzzCazz',
958: 1:      'question': '19',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '1001:7*11*13:MuzzDuzzCazz',
958: 1:      'question': '20',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '1155:3*5*7*11:FizzBuzzMuzzDuzz',
958: 1:      'question': '21',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '1365:3*5*7*13:FizzBuzzMuzzCazz',
958: 1:      'question': '22',
958: 1:      'valid': true
958: 1:    }
958: 1:  ],
958: 1:  'info': [
958: 1:    '✅f(1) = 15:3*5:FizzBuzz',
958: 1:    '✅f(2) = 21:3*7:FizzMuzz',
958: 1:    '✅f(3) = 33:3*11:FizzDuzz',
958: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
958: 1:    '✅f(5) = 39:3*13:FizzCazz',
958: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
958: 1:    '✅f(7) = 65:5*13:BuzzCazz',
958: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
958: 1:    '✅f(9) = 91:7*13:MuzzCazz',
958: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
958: 1:    '✅f(11) = 143:11*13:DuzzCazz',
958: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
958: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
958: 1:    '✅f(14) = 231:3*7*11:FizzMuzzDuzz',
958: 1:    '✅f(15) = 273:3*7*13:FizzMuzzCazz',
958: 1:    '✅f(16) = 385:5*7*11:BuzzMuzzDuzz',
958: 1:    '✅f(17) = 429:3*11*13:FizzDuzzCazz',
958: 1:    '✅f(18) = 455:5*7*13:BuzzMuzzCazz',
958: 1:    '✅f(19) = 715:5*11*13:BuzzDuzzCazz',
958: 1:    '✅f(20) = 1001:7*11*13:MuzzDuzzCazz',
958: 1:    '✅f(21) = 1155:3*5*7*11:FizzBuzzMuzzDuzz',
958: 1:    '✅f(22) = 1365:3*5*7*13:FizzBuzzMuzzCazz',
958: 1:    '❌f(23) = ??? != 2145:3*5*11*13:FizzBuzzDuzzCazz'
958: 1:  ],
958: 1:  'level': 34,
958: 1:  'nextQuestion': '23',
958: 1:  'questions': [
958: 1:    '1',
958: 1:    '2',
958: 1:    '3',
958: 1:    '4',
958: 1:    '5',
958: 1:    '6',
958: 1:    '7',
958: 1:    '8',
958: 1:    '9',
958: 1:    '10',
958: 1:    '11',
958: 1:    '12',
958: 1:    '13',
958: 1:    '14',
958: 1:    '15',
958: 1:    '16',
958: 1:    '17',
958: 1:    '18',
958: 1:    '19',
958: 1:    '20',
958: 1:    '21',
958: 1:    '22',
958: 1:    '23'
958: 1:  ]
958: 1:}
958: 1:Scores: 115012
958: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz', '231:3*7*11:FizzMuzzDuzz', '273:3*7*13:FizzMuzzCazz', '385:5*7*11:BuzzMuzzDuzz', '429:3*11*13:FizzDuzzCazz', '455:5*7*13:BuzzMuzzCazz', '715:5*11*13:BuzzDuzzCazz', '1001:7*11*13:MuzzDuzzCazz', '1155:3*5*7*11:FizzBuzzMuzzDuzz', '1365:3*5*7*13:FizzBuzzMuzzCazz', '2145:3*5*11*13:FizzBuzzDuzzCazz']')
958: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
959: 1:BoardData {
959: 1:  'description': [
959: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
959: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
959: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
959: 1:  ],
959: 1:  'expectedAnswer': '3003:3*7*11*13:FizzMuzzDuzzCazz',
959: 1:  'history': [
959: 1:    {
959: 1:      'answer': '15:3*5:FizzBuzz',
959: 1:      'question': '1',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '21:3*7:FizzMuzz',
959: 1:      'question': '2',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '33:3*11:FizzDuzz',
959: 1:      'question': '3',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '35:5*7:BuzzMuzz',
959: 1:      'question': '4',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '39:3*13:FizzCazz',
959: 1:      'question': '5',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '55:5*11:BuzzDuzz',
959: 1:      'question': '6',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '65:5*13:BuzzCazz',
959: 1:      'question': '7',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '77:7*11:MuzzDuzz',
959: 1:      'question': '8',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '91:7*13:MuzzCazz',
959: 1:      'question': '9',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
959: 1:      'question': '10',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '143:11*13:DuzzCazz',
959: 1:      'question': '11',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
959: 1:      'question': '12',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
959: 1:      'question': '13',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '231:3*7*11:FizzMuzzDuzz',
959: 1:      'question': '14',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '273:3*7*13:FizzMuzzCazz',
959: 1:      'question': '15',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '385:5*7*11:BuzzMuzzDuzz',
959: 1:      'question': '16',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '429:3*11*13:FizzDuzzCazz',
959: 1:      'question': '17',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '455:5*7*13:BuzzMuzzCazz',
959: 1:      'question': '18',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '715:5*11*13:BuzzDuzzCazz',
959: 1:      'question': '19',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '1001:7*11*13:MuzzDuzzCazz',
959: 1:      'question': '20',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '1155:3*5*7*11:FizzBuzzMuzzDuzz',
959: 1:      'question': '21',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '1365:3*5*7*13:FizzBuzzMuzzCazz',
959: 1:      'question': '22',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '2145:3*5*11*13:FizzBuzzDuzzCazz',
959: 1:      'question': '23',
959: 1:      'valid': true
959: 1:    }
959: 1:  ],
959: 1:  'info': [
959: 1:    '✅f(1) = 15:3*5:FizzBuzz',
959: 1:    '✅f(2) = 21:3*7:FizzMuzz',
959: 1:    '✅f(3) = 33:3*11:FizzDuzz',
959: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
959: 1:    '✅f(5) = 39:3*13:FizzCazz',
959: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
959: 1:    '✅f(7) = 65:5*13:BuzzCazz',
959: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
959: 1:    '✅f(9) = 91:7*13:MuzzCazz',
959: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
959: 1:    '✅f(11) = 143:11*13:DuzzCazz',
959: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
959: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
959: 1:    '✅f(14) = 231:3*7*11:FizzMuzzDuzz',
959: 1:    '✅f(15) = 273:3*7*13:FizzMuzzCazz',
959: 1:    '✅f(16) = 385:5*7*11:BuzzMuzzDuzz',
959: 1:    '✅f(17) = 429:3*11*13:FizzDuzzCazz',
959: 1:    '✅f(18) = 455:5*7*13:BuzzMuzzCazz',
959: 1:    '✅f(19) = 715:5*11*13:BuzzDuzzCazz',
959: 1:    '✅f(20) = 1001:7*11*13:MuzzDuzzCazz',
959: 1:    '✅f(21) = 1155:3*5*7*11:FizzBuzzMuzzDuzz',
959: 1:    '✅f(22) = 1365:3*5*7*13:FizzBuzzMuzzCazz',
959: 1:    '✅f(23) = 2145:3*5*11*13:FizzBuzzDuzzCazz',
959: 1:    '❌f(24) = ??? != 3003:3*7*11*13:FizzMuzzDuzzCazz'
959: 1:  ],
959: 1:  'level': 34,
959: 1:  'nextQuestion': '24',
959: 1:  'questions': [
959: 1:    '1',
959: 1:    '2',
959: 1:    '3',
959: 1:    '4',
959: 1:    '5',
959: 1:    '6',
959: 1:    '7',
959: 1:    '8',
959: 1:    '9',
959: 1:    '10',
959: 1:    '11',
959: 1:    '12',
959: 1:    '13',
959: 1:    '14',
959: 1:    '15',
959: 1:    '16',
959: 1:    '17',
959: 1:    '18',
959: 1:    '19',
959: 1:    '20',
959: 1:    '21',
959: 1:    '22',
959: 1:    '23',
959: 1:    '24'
959: 1:  ]
959: 1:}
959: 1:Scores: 115033
959: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz', '231:3*7*11:FizzMuzzDuzz', '273:3*7*13:FizzMuzzCazz', '385:5*7*11:BuzzMuzzDuzz', '429:3*11*13:FizzDuzzCazz', '455:5*7*13:BuzzMuzzCazz', '715:5*11*13:BuzzDuzzCazz', '1001:7*11*13:MuzzDuzzCazz', '1155:3*5*7*11:FizzBuzzMuzzDuzz', '1365:3*5*7*13:FizzBuzzMuzzCazz', '2145:3*5*11*13:FizzBuzzDuzzCazz', '3003:3*7*11*13:FizzMuzzDuzzCazz']')
959: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
960: 1:BoardData {
960: 1:  'description': [
960: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
960: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
960: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
960: 1:  ],
960: 1:  'expectedAnswer': '5005:5*7*11*13:BuzzMuzzDuzzCazz',
960: 1:  'history': [
960: 1:    {
960: 1:      'answer': '15:3*5:FizzBuzz',
960: 1:      'question': '1',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '21:3*7:FizzMuzz',
960: 1:      'question': '2',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '33:3*11:FizzDuzz',
960: 1:      'question': '3',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '35:5*7:BuzzMuzz',
960: 1:      'question': '4',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '39:3*13:FizzCazz',
960: 1:      'question': '5',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '55:5*11:BuzzDuzz',
960: 1:      'question': '6',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '65:5*13:BuzzCazz',
960: 1:      'question': '7',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '77:7*11:MuzzDuzz',
960: 1:      'question': '8',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '91:7*13:MuzzCazz',
960: 1:      'question': '9',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
960: 1:      'question': '10',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '143:11*13:DuzzCazz',
960: 1:      'question': '11',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
960: 1:      'question': '12',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
960: 1:      'question': '13',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '231:3*7*11:FizzMuzzDuzz',
960: 1:      'question': '14',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '273:3*7*13:FizzMuzzCazz',
960: 1:      'question': '15',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '385:5*7*11:BuzzMuzzDuzz',
960: 1:      'question': '16',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '429:3*11*13:FizzDuzzCazz',
960: 1:      'question': '17',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '455:5*7*13:BuzzMuzzCazz',
960: 1:      'question': '18',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '715:5*11*13:BuzzDuzzCazz',
960: 1:      'question': '19',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '1001:7*11*13:MuzzDuzzCazz',
960: 1:      'question': '20',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '1155:3*5*7*11:FizzBuzzMuzzDuzz',
960: 1:      'question': '21',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '1365:3*5*7*13:FizzBuzzMuzzCazz',
960: 1:      'question': '22',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '2145:3*5*11*13:FizzBuzzDuzzCazz',
960: 1:      'question': '23',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '3003:3*7*11*13:FizzMuzzDuzzCazz',
960: 1:      'question': '24',
960: 1:      'valid': true
960: 1:    }
960: 1:  ],
960: 1:  'info': [
960: 1:    '✅f(1) = 15:3*5:FizzBuzz',
960: 1:    '✅f(2) = 21:3*7:FizzMuzz',
960: 1:    '✅f(3) = 33:3*11:FizzDuzz',
960: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
960: 1:    '✅f(5) = 39:3*13:FizzCazz',
960: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
960: 1:    '✅f(7) = 65:5*13:BuzzCazz',
960: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
960: 1:    '✅f(9) = 91:7*13:MuzzCazz',
960: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
960: 1:    '✅f(11) = 143:11*13:DuzzCazz',
960: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
960: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
960: 1:    '✅f(14) = 231:3*7*11:FizzMuzzDuzz',
960: 1:    '✅f(15) = 273:3*7*13:FizzMuzzCazz',
960: 1:    '✅f(16) = 385:5*7*11:BuzzMuzzDuzz',
960: 1:    '✅f(17) = 429:3*11*13:FizzDuzzCazz',
960: 1:    '✅f(18) = 455:5*7*13:BuzzMuzzCazz',
960: 1:    '✅f(19) = 715:5*11*13:BuzzDuzzCazz',
960: 1:    '✅f(20) = 1001:7*11*13:MuzzDuzzCazz',
960: 1:    '✅f(21) = 1155:3*5*7*11:FizzBuzzMuzzDuzz',
960: 1:    '✅f(22) = 1365:3*5*7*13:FizzBuzzMuzzCazz',
960: 1:    '✅f(23) = 2145:3*5*11*13:FizzBuzzDuzzCazz',
960: 1:    '✅f(24) = 3003:3*7*11*13:FizzMuzzDuzzCazz',
960: 1:    '❌f(25) = ??? != 5005:5*7*11*13:BuzzMuzzDuzzCazz'
960: 1:  ],
960: 1:  'level': 34,
960: 1:  'nextQuestion': '25',
960: 1:  'questions': [
960: 1:    '1',
960: 1:    '2',
960: 1:    '3',
960: 1:    '4',
960: 1:    '5',
960: 1:    '6',
960: 1:    '7',
960: 1:    '8',
960: 1:    '9',
960: 1:    '10',
960: 1:    '11',
960: 1:    '12',
960: 1:    '13',
960: 1:    '14',
960: 1:    '15',
960: 1:    '16',
960: 1:    '17',
960: 1:    '18',
960: 1:    '19',
960: 1:    '20',
960: 1:    '21',
960: 1:    '22',
960: 1:    '23',
960: 1:    '24',
960: 1:    '25'
960: 1:  ]
960: 1:}
960: 1:Scores: 115054
960: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz', '231:3*7*11:FizzMuzzDuzz', '273:3*7*13:FizzMuzzCazz', '385:5*7*11:BuzzMuzzDuzz', '429:3*11*13:FizzDuzzCazz', '455:5*7*13:BuzzMuzzCazz', '715:5*11*13:BuzzDuzzCazz', '1001:7*11*13:MuzzDuzzCazz', '1155:3*5*7*11:FizzBuzzMuzzDuzz', '1365:3*5*7*13:FizzBuzzMuzzCazz', '2145:3*5*11*13:FizzBuzzDuzzCazz', '3003:3*7*11*13:FizzMuzzDuzzCazz', '5005:5*7*11*13:BuzzMuzzDuzzCazz']')
960: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
961: 1:BoardData {
961: 1:  'description': [
961: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
961: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
961: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
961: 1:  ],
961: 1:  'expectedAnswer': '15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz',
961: 1:  'history': [
961: 1:    {
961: 1:      'answer': '15:3*5:FizzBuzz',
961: 1:      'question': '1',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '21:3*7:FizzMuzz',
961: 1:      'question': '2',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '33:3*11:FizzDuzz',
961: 1:      'question': '3',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '35:5*7:BuzzMuzz',
961: 1:      'question': '4',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '39:3*13:FizzCazz',
961: 1:      'question': '5',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '55:5*11:BuzzDuzz',
961: 1:      'question': '6',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '65:5*13:BuzzCazz',
961: 1:      'question': '7',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '77:7*11:MuzzDuzz',
961: 1:      'question': '8',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '91:7*13:MuzzCazz',
961: 1:      'question': '9',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
961: 1:      'question': '10',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '143:11*13:DuzzCazz',
961: 1:      'question': '11',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
961: 1:      'question': '12',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
961: 1:      'question': '13',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '231:3*7*11:FizzMuzzDuzz',
961: 1:      'question': '14',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '273:3*7*13:FizzMuzzCazz',
961: 1:      'question': '15',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '385:5*7*11:BuzzMuzzDuzz',
961: 1:      'question': '16',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '429:3*11*13:FizzDuzzCazz',
961: 1:      'question': '17',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '455:5*7*13:BuzzMuzzCazz',
961: 1:      'question': '18',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '715:5*11*13:BuzzDuzzCazz',
961: 1:      'question': '19',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '1001:7*11*13:MuzzDuzzCazz',
961: 1:      'question': '20',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '1155:3*5*7*11:FizzBuzzMuzzDuzz',
961: 1:      'question': '21',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '1365:3*5*7*13:FizzBuzzMuzzCazz',
961: 1:      'question': '22',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '2145:3*5*11*13:FizzBuzzDuzzCazz',
961: 1:      'question': '23',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '3003:3*7*11*13:FizzMuzzDuzzCazz',
961: 1:      'question': '24',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '5005:5*7*11*13:BuzzMuzzDuzzCazz',
961: 1:      'question': '25',
961: 1:      'valid': true
961: 1:    }
961: 1:  ],
961: 1:  'info': [
961: 1:    '✅f(1) = 15:3*5:FizzBuzz',
961: 1:    '✅f(2) = 21:3*7:FizzMuzz',
961: 1:    '✅f(3) = 33:3*11:FizzDuzz',
961: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
961: 1:    '✅f(5) = 39:3*13:FizzCazz',
961: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
961: 1:    '✅f(7) = 65:5*13:BuzzCazz',
961: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
961: 1:    '✅f(9) = 91:7*13:MuzzCazz',
961: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
961: 1:    '✅f(11) = 143:11*13:DuzzCazz',
961: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
961: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
961: 1:    '✅f(14) = 231:3*7*11:FizzMuzzDuzz',
961: 1:    '✅f(15) = 273:3*7*13:FizzMuzzCazz',
961: 1:    '✅f(16) = 385:5*7*11:BuzzMuzzDuzz',
961: 1:    '✅f(17) = 429:3*11*13:FizzDuzzCazz',
961: 1:    '✅f(18) = 455:5*7*13:BuzzMuzzCazz',
961: 1:    '✅f(19) = 715:5*11*13:BuzzDuzzCazz',
961: 1:    '✅f(20) = 1001:7*11*13:MuzzDuzzCazz',
961: 1:    '✅f(21) = 1155:3*5*7*11:FizzBuzzMuzzDuzz',
961: 1:    '✅f(22) = 1365:3*5*7*13:FizzBuzzMuzzCazz',
961: 1:    '✅f(23) = 2145:3*5*11*13:FizzBuzzDuzzCazz',
961: 1:    '✅f(24) = 3003:3*7*11*13:FizzMuzzDuzzCazz',
961: 1:    '✅f(25) = 5005:5*7*11*13:BuzzMuzzDuzzCazz',
961: 1:    '❌f(26) = ??? != 15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
961: 1:  ],
961: 1:  'level': 34,
961: 1:  'nextQuestion': '26',
961: 1:  'questions': [
961: 1:    '1',
961: 1:    '2',
961: 1:    '3',
961: 1:    '4',
961: 1:    '5',
961: 1:    '6',
961: 1:    '7',
961: 1:    '8',
961: 1:    '9',
961: 1:    '10',
961: 1:    '11',
961: 1:    '12',
961: 1:    '13',
961: 1:    '14',
961: 1:    '15',
961: 1:    '16',
961: 1:    '17',
961: 1:    '18',
961: 1:    '19',
961: 1:    '20',
961: 1:    '21',
961: 1:    '22',
961: 1:    '23',
961: 1:    '24',
961: 1:    '25',
961: 1:    '26'
961: 1:  ]
961: 1:}
961: 1:Scores: 115075
961: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz', '231:3*7*11:FizzMuzzDuzz', '273:3*7*13:FizzMuzzCazz', '385:5*7*11:BuzzMuzzDuzz', '429:3*11*13:FizzDuzzCazz', '455:5*7*13:BuzzMuzzCazz', '715:5*11*13:BuzzDuzzCazz', '1001:7*11*13:MuzzDuzzCazz', '1155:3*5*7*11:FizzBuzzMuzzDuzz', '1365:3*5*7*13:FizzBuzzMuzzCazz', '2145:3*5*11*13:FizzBuzzDuzzCazz', '3003:3*7*11*13:FizzMuzzDuzzCazz', '5005:5*7*11*13:BuzzMuzzDuzzCazz', '15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz']')
961: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
962: 1:BoardData {
962: 1:  'description': [
962: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
962: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
962: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
962: 1:  ],
962: 1:  'expectedAnswer': 'none',
962: 1:  'history': [
962: 1:    {
962: 1:      'answer': '15:3*5:FizzBuzz',
962: 1:      'question': '1',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '21:3*7:FizzMuzz',
962: 1:      'question': '2',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '33:3*11:FizzDuzz',
962: 1:      'question': '3',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '35:5*7:BuzzMuzz',
962: 1:      'question': '4',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '39:3*13:FizzCazz',
962: 1:      'question': '5',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '55:5*11:BuzzDuzz',
962: 1:      'question': '6',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '65:5*13:BuzzCazz',
962: 1:      'question': '7',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '77:7*11:MuzzDuzz',
962: 1:      'question': '8',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '91:7*13:MuzzCazz',
962: 1:      'question': '9',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
962: 1:      'question': '10',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '143:11*13:DuzzCazz',
962: 1:      'question': '11',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
962: 1:      'question': '12',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
962: 1:      'question': '13',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '231:3*7*11:FizzMuzzDuzz',
962: 1:      'question': '14',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '273:3*7*13:FizzMuzzCazz',
962: 1:      'question': '15',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '385:5*7*11:BuzzMuzzDuzz',
962: 1:      'question': '16',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '429:3*11*13:FizzDuzzCazz',
962: 1:      'question': '17',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '455:5*7*13:BuzzMuzzCazz',
962: 1:      'question': '18',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '715:5*11*13:BuzzDuzzCazz',
962: 1:      'question': '19',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '1001:7*11*13:MuzzDuzzCazz',
962: 1:      'question': '20',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '1155:3*5*7*11:FizzBuzzMuzzDuzz',
962: 1:      'question': '21',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '1365:3*5*7*13:FizzBuzzMuzzCazz',
962: 1:      'question': '22',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '2145:3*5*11*13:FizzBuzzDuzzCazz',
962: 1:      'question': '23',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '3003:3*7*11*13:FizzMuzzDuzzCazz',
962: 1:      'question': '24',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '5005:5*7*11*13:BuzzMuzzDuzzCazz',
962: 1:      'question': '25',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz',
962: 1:      'question': '26',
962: 1:      'valid': true
962: 1:    }
962: 1:  ],
962: 1:  'info': [
962: 1:    '✅f(1) = 15:3*5:FizzBuzz',
962: 1:    '✅f(2) = 21:3*7:FizzMuzz',
962: 1:    '✅f(3) = 33:3*11:FizzDuzz',
962: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
962: 1:    '✅f(5) = 39:3*13:FizzCazz',
962: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
962: 1:    '✅f(7) = 65:5*13:BuzzCazz',
962: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
962: 1:    '✅f(9) = 91:7*13:MuzzCazz',
962: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
962: 1:    '✅f(11) = 143:11*13:DuzzCazz',
962: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
962: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
962: 1:    '✅f(14) = 231:3*7*11:FizzMuzzDuzz',
962: 1:    '✅f(15) = 273:3*7*13:FizzMuzzCazz',
962: 1:    '✅f(16) = 385:5*7*11:BuzzMuzzDuzz',
962: 1:    '✅f(17) = 429:3*11*13:FizzDuzzCazz',
962: 1:    '✅f(18) = 455:5*7*13:BuzzMuzzCazz',
962: 1:    '✅f(19) = 715:5*11*13:BuzzDuzzCazz',
962: 1:    '✅f(20) = 1001:7*11*13:MuzzDuzzCazz',
962: 1:    '✅f(21) = 1155:3*5*7*11:FizzBuzzMuzzDuzz',
962: 1:    '✅f(22) = 1365:3*5*7*13:FizzBuzzMuzzCazz',
962: 1:    '✅f(23) = 2145:3*5*11*13:FizzBuzzDuzzCazz',
962: 1:    '✅f(24) = 3003:3*7*11*13:FizzMuzzDuzzCazz',
962: 1:    '✅f(25) = 5005:5*7*11*13:BuzzMuzzDuzzCazz',
962: 1:    '✅f(26) = 15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz',
962: 1:    '❌f(27) = ??? != none'
962: 1:  ],
962: 1:  'level': 34,
962: 1:  'nextQuestion': '27',
962: 1:  'questions': [
962: 1:    '1',
962: 1:    '2',
962: 1:    '3',
962: 1:    '4',
962: 1:    '5',
962: 1:    '6',
962: 1:    '7',
962: 1:    '8',
962: 1:    '9',
962: 1:    '10',
962: 1:    '11',
962: 1:    '12',
962: 1:    '13',
962: 1:    '14',
962: 1:    '15',
962: 1:    '16',
962: 1:    '17',
962: 1:    '18',
962: 1:    '19',
962: 1:    '20',
962: 1:    '21',
962: 1:    '22',
962: 1:    '23',
962: 1:    '24',
962: 1:    '25',
962: 1:    '26',
962: 1:    '27'
962: 1:  ]
962: 1:}
962: 1:Scores: 115096
962: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz', '231:3*7*11:FizzMuzzDuzz', '273:3*7*13:FizzMuzzCazz', '385:5*7*11:BuzzMuzzDuzz', '429:3*11*13:FizzDuzzCazz', '455:5*7*13:BuzzMuzzCazz', '715:5*11*13:BuzzDuzzCazz', '1001:7*11*13:MuzzDuzzCazz', '1155:3*5*7*11:FizzBuzzMuzzDuzz', '1365:3*5*7*13:FizzBuzzMuzzCazz', '2145:3*5*11*13:FizzBuzzDuzzCazz', '3003:3*7*11*13:FizzMuzzDuzzCazz', '5005:5*7*11*13:BuzzMuzzDuzzCazz', '15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz', 'none']')
962: 1:Fire Event: PassTest{complexity=57, testCount=27}
962: 1:Fire Event: NextAlgorithm{complexity=57, time=0}
------------------------------------------
963: 1:BoardData {
963: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
963: 1:  'history': [
963: 1:    {
963: 1:      'answer': '15:3*5:FizzBuzz',
963: 1:      'question': '1',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '21:3*7:FizzMuzz',
963: 1:      'question': '2',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '33:3*11:FizzDuzz',
963: 1:      'question': '3',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '35:5*7:BuzzMuzz',
963: 1:      'question': '4',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '39:3*13:FizzCazz',
963: 1:      'question': '5',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '55:5*11:BuzzDuzz',
963: 1:      'question': '6',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '65:5*13:BuzzCazz',
963: 1:      'question': '7',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '77:7*11:MuzzDuzz',
963: 1:      'question': '8',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '91:7*13:MuzzCazz',
963: 1:      'question': '9',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
963: 1:      'question': '10',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '143:11*13:DuzzCazz',
963: 1:      'question': '11',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
963: 1:      'question': '12',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
963: 1:      'question': '13',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '231:3*7*11:FizzMuzzDuzz',
963: 1:      'question': '14',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '273:3*7*13:FizzMuzzCazz',
963: 1:      'question': '15',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '385:5*7*11:BuzzMuzzDuzz',
963: 1:      'question': '16',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '429:3*11*13:FizzDuzzCazz',
963: 1:      'question': '17',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '455:5*7*13:BuzzMuzzCazz',
963: 1:      'question': '18',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '715:5*11*13:BuzzDuzzCazz',
963: 1:      'question': '19',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '1001:7*11*13:MuzzDuzzCazz',
963: 1:      'question': '20',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '1155:3*5*7*11:FizzBuzzMuzzDuzz',
963: 1:      'question': '21',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '1365:3*5*7*13:FizzBuzzMuzzCazz',
963: 1:      'question': '22',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '2145:3*5*11*13:FizzBuzzDuzzCazz',
963: 1:      'question': '23',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '3003:3*7*11*13:FizzMuzzDuzzCazz',
963: 1:      'question': '24',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '5005:5*7*11*13:BuzzMuzzDuzzCazz',
963: 1:      'question': '25',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz',
963: 1:      'question': '26',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': 'none',
963: 1:      'question': '27',
963: 1:      'valid': true
963: 1:    }
963: 1:  ],
963: 1:  'info': [
963: 1:    '✅f(1) = 15:3*5:FizzBuzz',
963: 1:    '✅f(2) = 21:3*7:FizzMuzz',
963: 1:    '✅f(3) = 33:3*11:FizzDuzz',
963: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
963: 1:    '✅f(5) = 39:3*13:FizzCazz',
963: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
963: 1:    '✅f(7) = 65:5*13:BuzzCazz',
963: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
963: 1:    '✅f(9) = 91:7*13:MuzzCazz',
963: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
963: 1:    '✅f(11) = 143:11*13:DuzzCazz',
963: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
963: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
963: 1:    '✅f(14) = 231:3*7*11:FizzMuzzDuzz',
963: 1:    '✅f(15) = 273:3*7*13:FizzMuzzCazz',
963: 1:    '✅f(16) = 385:5*7*11:BuzzMuzzDuzz',
963: 1:    '✅f(17) = 429:3*11*13:FizzDuzzCazz',
963: 1:    '✅f(18) = 455:5*7*13:BuzzMuzzCazz',
963: 1:    '✅f(19) = 715:5*11*13:BuzzDuzzCazz',
963: 1:    '✅f(20) = 1001:7*11*13:MuzzDuzzCazz',
963: 1:    '✅f(21) = 1155:3*5*7*11:FizzBuzzMuzzDuzz',
963: 1:    '✅f(22) = 1365:3*5*7*13:FizzBuzzMuzzCazz',
963: 1:    '✅f(23) = 2145:3*5*11*13:FizzBuzzDuzzCazz',
963: 1:    '✅f(24) = 3003:3*7*11*13:FizzMuzzDuzzCazz',
963: 1:    '✅f(25) = 5005:5*7*11*13:BuzzMuzzDuzzCazz',
963: 1:    '✅f(26) = 15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz',
963: 1:    '✅f(27) = none'
963: 1:  ],
963: 1:  'level': 34,
963: 1:  'questions': []
963: 1:}
963: 1:Scores: 122811
963: 1:Answer: message('StartNextLevel')
963: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
964: 1:BoardData {
964: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
964: 1:  'expectedAnswer': '0.5',
964: 1:  'history': [],
964: 1:  'info': ['❌f(1, 2) = ??? != 0.5'],
964: 1:  'level': 35,
964: 1:  'nextQuestion': '1, 2',
964: 1:  'questions': ['1, 2']
964: 1:}
964: 1:Scores: 122811
964: 1:Answer: message('['0.5']')
964: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
965: 1:BoardData {
965: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
965: 1:  'expectedAnswer': '1',
965: 1:  'history': [{
965: 1:    'answer': '0.5',
965: 1:    'question': '1, 2',
965: 1:    'valid': true
965: 1:  }],
965: 1:  'info': [
965: 1:    '✅f(1, 2) = 0.5',
965: 1:    '❌f(1, 1) = ??? != 1'
965: 1:  ],
965: 1:  'level': 35,
965: 1:  'nextQuestion': '1, 1',
965: 1:  'questions': [
965: 1:    '1, 2',
965: 1:    '1, 1'
965: 1:  ]
965: 1:}
965: 1:Scores: 122832
965: 1:Answer: message('['0.5', '1']')
965: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
966: 1:BoardData {
966: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
966: 1:  'expectedAnswer': '1',
966: 1:  'history': [
966: 1:    {
966: 1:      'answer': '0.5',
966: 1:      'question': '1, 2',
966: 1:      'valid': true
966: 1:    },
966: 1:    {
966: 1:      'answer': '1',
966: 1:      'question': '1, 1',
966: 1:      'valid': true
966: 1:    }
966: 1:  ],
966: 1:  'info': [
966: 1:    '✅f(1, 2) = 0.5',
966: 1:    '✅f(1, 1) = 1',
966: 1:    '❌f(5, 5) = ??? != 1'
966: 1:  ],
966: 1:  'level': 35,
966: 1:  'nextQuestion': '5, 5',
966: 1:  'questions': [
966: 1:    '1, 2',
966: 1:    '1, 1',
966: 1:    '5, 5'
966: 1:  ]
966: 1:}
966: 1:Scores: 122853
966: 1:Answer: message('['0.5', '1', '1']')
966: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
967: 1:BoardData {
967: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
967: 1:  'expectedAnswer': '11',
967: 1:  'history': [
967: 1:    {
967: 1:      'answer': '0.5',
967: 1:      'question': '1, 2',
967: 1:      'valid': true
967: 1:    },
967: 1:    {
967: 1:      'answer': '1',
967: 1:      'question': '1, 1',
967: 1:      'valid': true
967: 1:    },
967: 1:    {
967: 1:      'answer': '1',
967: 1:      'question': '5, 5',
967: 1:      'valid': true
967: 1:    }
967: 1:  ],
967: 1:  'info': [
967: 1:    '✅f(1, 2) = 0.5',
967: 1:    '✅f(1, 1) = 1',
967: 1:    '✅f(5, 5) = 1',
967: 1:    '❌f(55, 5) = ??? != 11'
967: 1:  ],
967: 1:  'level': 35,
967: 1:  'nextQuestion': '55, 5',
967: 1:  'questions': [
967: 1:    '1, 2',
967: 1:    '1, 1',
967: 1:    '5, 5',
967: 1:    '55, 5'
967: 1:  ]
967: 1:}
967: 1:Scores: 122874
967: 1:Answer: message('['0.5', '1', '1', '11']')
967: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
968: 1:BoardData {
968: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
968: 1:  'expectedAnswer': '1.25',
968: 1:  'history': [
968: 1:    {
968: 1:      'answer': '0.5',
968: 1:      'question': '1, 2',
968: 1:      'valid': true
968: 1:    },
968: 1:    {
968: 1:      'answer': '1',
968: 1:      'question': '1, 1',
968: 1:      'valid': true
968: 1:    },
968: 1:    {
968: 1:      'answer': '1',
968: 1:      'question': '5, 5',
968: 1:      'valid': true
968: 1:    },
968: 1:    {
968: 1:      'answer': '11',
968: 1:      'question': '55, 5',
968: 1:      'valid': true
968: 1:    }
968: 1:  ],
968: 1:  'info': [
968: 1:    '✅f(1, 2) = 0.5',
968: 1:    '✅f(1, 1) = 1',
968: 1:    '✅f(5, 5) = 1',
968: 1:    '✅f(55, 5) = 11',
968: 1:    '❌f(55, 44) = ??? != 1.25'
968: 1:  ],
968: 1:  'level': 35,
968: 1:  'nextQuestion': '55, 44',
968: 1:  'questions': [
968: 1:    '1, 2',
968: 1:    '1, 1',
968: 1:    '5, 5',
968: 1:    '55, 5',
968: 1:    '55, 44'
968: 1:  ]
968: 1:}
968: 1:Scores: 122895
968: 1:Answer: message('['0.5', '1', '1', '11', '1.25']')
968: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
969: 1:BoardData {
969: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
969: 1:  'expectedAnswer': '0',
969: 1:  'history': [
969: 1:    {
969: 1:      'answer': '0.5',
969: 1:      'question': '1, 2',
969: 1:      'valid': true
969: 1:    },
969: 1:    {
969: 1:      'answer': '1',
969: 1:      'question': '1, 1',
969: 1:      'valid': true
969: 1:    },
969: 1:    {
969: 1:      'answer': '1',
969: 1:      'question': '5, 5',
969: 1:      'valid': true
969: 1:    },
969: 1:    {
969: 1:      'answer': '11',
969: 1:      'question': '55, 5',
969: 1:      'valid': true
969: 1:    },
969: 1:    {
969: 1:      'answer': '1.25',
969: 1:      'question': '55, 44',
969: 1:      'valid': true
969: 1:    }
969: 1:  ],
969: 1:  'info': [
969: 1:    '✅f(1, 2) = 0.5',
969: 1:    '✅f(1, 1) = 1',
969: 1:    '✅f(5, 5) = 1',
969: 1:    '✅f(55, 5) = 11',
969: 1:    '✅f(55, 44) = 1.25',
969: 1:    '❌f(0, 56) = ??? != 0'
969: 1:  ],
969: 1:  'level': 35,
969: 1:  'nextQuestion': '0, 56',
969: 1:  'questions': [
969: 1:    '1, 2',
969: 1:    '1, 1',
969: 1:    '5, 5',
969: 1:    '55, 5',
969: 1:    '55, 44',
969: 1:    '0, 56'
969: 1:  ]
969: 1:}
969: 1:Scores: 122916
969: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0']')
969: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
970: 1:BoardData {
970: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
970: 1:  'expectedAnswer': '56',
970: 1:  'history': [
970: 1:    {
970: 1:      'answer': '0.5',
970: 1:      'question': '1, 2',
970: 1:      'valid': true
970: 1:    },
970: 1:    {
970: 1:      'answer': '1',
970: 1:      'question': '1, 1',
970: 1:      'valid': true
970: 1:    },
970: 1:    {
970: 1:      'answer': '1',
970: 1:      'question': '5, 5',
970: 1:      'valid': true
970: 1:    },
970: 1:    {
970: 1:      'answer': '11',
970: 1:      'question': '55, 5',
970: 1:      'valid': true
970: 1:    },
970: 1:    {
970: 1:      'answer': '1.25',
970: 1:      'question': '55, 44',
970: 1:      'valid': true
970: 1:    },
970: 1:    {
970: 1:      'answer': '0',
970: 1:      'question': '0, 56',
970: 1:      'valid': true
970: 1:    }
970: 1:  ],
970: 1:  'info': [
970: 1:    '✅f(1, 2) = 0.5',
970: 1:    '✅f(1, 1) = 1',
970: 1:    '✅f(5, 5) = 1',
970: 1:    '✅f(55, 5) = 11',
970: 1:    '✅f(55, 44) = 1.25',
970: 1:    '✅f(0, 56) = 0',
970: 1:    '❌f(56, 1) = ??? != 56'
970: 1:  ],
970: 1:  'level': 35,
970: 1:  'nextQuestion': '56, 1',
970: 1:  'questions': [
970: 1:    '1, 2',
970: 1:    '1, 1',
970: 1:    '5, 5',
970: 1:    '55, 5',
970: 1:    '55, 44',
970: 1:    '0, 56',
970: 1:    '56, 1'
970: 1:  ]
970: 1:}
970: 1:Scores: 122937
970: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56']')
970: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
971: 1:BoardData {
971: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
971: 1:  'expectedAnswer': '-0.5',
971: 1:  'history': [
971: 1:    {
971: 1:      'answer': '0.5',
971: 1:      'question': '1, 2',
971: 1:      'valid': true
971: 1:    },
971: 1:    {
971: 1:      'answer': '1',
971: 1:      'question': '1, 1',
971: 1:      'valid': true
971: 1:    },
971: 1:    {
971: 1:      'answer': '1',
971: 1:      'question': '5, 5',
971: 1:      'valid': true
971: 1:    },
971: 1:    {
971: 1:      'answer': '11',
971: 1:      'question': '55, 5',
971: 1:      'valid': true
971: 1:    },
971: 1:    {
971: 1:      'answer': '1.25',
971: 1:      'question': '55, 44',
971: 1:      'valid': true
971: 1:    },
971: 1:    {
971: 1:      'answer': '0',
971: 1:      'question': '0, 56',
971: 1:      'valid': true
971: 1:    },
971: 1:    {
971: 1:      'answer': '56',
971: 1:      'question': '56, 1',
971: 1:      'valid': true
971: 1:    }
971: 1:  ],
971: 1:  'info': [
971: 1:    '✅f(1, 2) = 0.5',
971: 1:    '✅f(1, 1) = 1',
971: 1:    '✅f(5, 5) = 1',
971: 1:    '✅f(55, 5) = 11',
971: 1:    '✅f(55, 44) = 1.25',
971: 1:    '✅f(0, 56) = 0',
971: 1:    '✅f(56, 1) = 56',
971: 1:    '❌f(1, -2) = ??? != -0.5'
971: 1:  ],
971: 1:  'level': 35,
971: 1:  'nextQuestion': '1, -2',
971: 1:  'questions': [
971: 1:    '1, 2',
971: 1:    '1, 1',
971: 1:    '5, 5',
971: 1:    '55, 5',
971: 1:    '55, 44',
971: 1:    '0, 56',
971: 1:    '56, 1',
971: 1:    '1, -2'
971: 1:  ]
971: 1:}
971: 1:Scores: 122958
971: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5']')
971: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
972: 1:BoardData {
972: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
972: 1:  'expectedAnswer': '-0.5',
972: 1:  'history': [
972: 1:    {
972: 1:      'answer': '0.5',
972: 1:      'question': '1, 2',
972: 1:      'valid': true
972: 1:    },
972: 1:    {
972: 1:      'answer': '1',
972: 1:      'question': '1, 1',
972: 1:      'valid': true
972: 1:    },
972: 1:    {
972: 1:      'answer': '1',
972: 1:      'question': '5, 5',
972: 1:      'valid': true
972: 1:    },
972: 1:    {
972: 1:      'answer': '11',
972: 1:      'question': '55, 5',
972: 1:      'valid': true
972: 1:    },
972: 1:    {
972: 1:      'answer': '1.25',
972: 1:      'question': '55, 44',
972: 1:      'valid': true
972: 1:    },
972: 1:    {
972: 1:      'answer': '0',
972: 1:      'question': '0, 56',
972: 1:      'valid': true
972: 1:    },
972: 1:    {
972: 1:      'answer': '56',
972: 1:      'question': '56, 1',
972: 1:      'valid': true
972: 1:    },
972: 1:    {
972: 1:      'answer': '-0.5',
972: 1:      'question': '1, -2',
972: 1:      'valid': true
972: 1:    }
972: 1:  ],
972: 1:  'info': [
972: 1:    '✅f(1, 2) = 0.5',
972: 1:    '✅f(1, 1) = 1',
972: 1:    '✅f(5, 5) = 1',
972: 1:    '✅f(55, 5) = 11',
972: 1:    '✅f(55, 44) = 1.25',
972: 1:    '✅f(0, 56) = 0',
972: 1:    '✅f(56, 1) = 56',
972: 1:    '✅f(1, -2) = -0.5',
972: 1:    '❌f(-1, 2) = ??? != -0.5'
972: 1:  ],
972: 1:  'level': 35,
972: 1:  'nextQuestion': '-1, 2',
972: 1:  'questions': [
972: 1:    '1, 2',
972: 1:    '1, 1',
972: 1:    '5, 5',
972: 1:    '55, 5',
972: 1:    '55, 44',
972: 1:    '0, 56',
972: 1:    '56, 1',
972: 1:    '1, -2',
972: 1:    '-1, 2'
972: 1:  ]
972: 1:}
972: 1:Scores: 122979
972: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5']')
972: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
973: 1:BoardData {
973: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
973: 1:  'expectedAnswer': '0.5',
973: 1:  'history': [
973: 1:    {
973: 1:      'answer': '0.5',
973: 1:      'question': '1, 2',
973: 1:      'valid': true
973: 1:    },
973: 1:    {
973: 1:      'answer': '1',
973: 1:      'question': '1, 1',
973: 1:      'valid': true
973: 1:    },
973: 1:    {
973: 1:      'answer': '1',
973: 1:      'question': '5, 5',
973: 1:      'valid': true
973: 1:    },
973: 1:    {
973: 1:      'answer': '11',
973: 1:      'question': '55, 5',
973: 1:      'valid': true
973: 1:    },
973: 1:    {
973: 1:      'answer': '1.25',
973: 1:      'question': '55, 44',
973: 1:      'valid': true
973: 1:    },
973: 1:    {
973: 1:      'answer': '0',
973: 1:      'question': '0, 56',
973: 1:      'valid': true
973: 1:    },
973: 1:    {
973: 1:      'answer': '56',
973: 1:      'question': '56, 1',
973: 1:      'valid': true
973: 1:    },
973: 1:    {
973: 1:      'answer': '-0.5',
973: 1:      'question': '1, -2',
973: 1:      'valid': true
973: 1:    },
973: 1:    {
973: 1:      'answer': '-0.5',
973: 1:      'question': '-1, 2',
973: 1:      'valid': true
973: 1:    }
973: 1:  ],
973: 1:  'info': [
973: 1:    '✅f(1, 2) = 0.5',
973: 1:    '✅f(1, 1) = 1',
973: 1:    '✅f(5, 5) = 1',
973: 1:    '✅f(55, 5) = 11',
973: 1:    '✅f(55, 44) = 1.25',
973: 1:    '✅f(0, 56) = 0',
973: 1:    '✅f(56, 1) = 56',
973: 1:    '✅f(1, -2) = -0.5',
973: 1:    '✅f(-1, 2) = -0.5',
973: 1:    '❌f(-1, -2) = ??? != 0.5'
973: 1:  ],
973: 1:  'level': 35,
973: 1:  'nextQuestion': '-1, -2',
973: 1:  'questions': [
973: 1:    '1, 2',
973: 1:    '1, 1',
973: 1:    '5, 5',
973: 1:    '55, 5',
973: 1:    '55, 44',
973: 1:    '0, 56',
973: 1:    '56, 1',
973: 1:    '1, -2',
973: 1:    '-1, 2',
973: 1:    '-1, -2'
973: 1:  ]
973: 1:}
973: 1:Scores: 123000
973: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5']')
973: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
974: 1:BoardData {
974: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
974: 1:  'expectedAnswer': '0.001',
974: 1:  'history': [
974: 1:    {
974: 1:      'answer': '0.5',
974: 1:      'question': '1, 2',
974: 1:      'valid': true
974: 1:    },
974: 1:    {
974: 1:      'answer': '1',
974: 1:      'question': '1, 1',
974: 1:      'valid': true
974: 1:    },
974: 1:    {
974: 1:      'answer': '1',
974: 1:      'question': '5, 5',
974: 1:      'valid': true
974: 1:    },
974: 1:    {
974: 1:      'answer': '11',
974: 1:      'question': '55, 5',
974: 1:      'valid': true
974: 1:    },
974: 1:    {
974: 1:      'answer': '1.25',
974: 1:      'question': '55, 44',
974: 1:      'valid': true
974: 1:    },
974: 1:    {
974: 1:      'answer': '0',
974: 1:      'question': '0, 56',
974: 1:      'valid': true
974: 1:    },
974: 1:    {
974: 1:      'answer': '56',
974: 1:      'question': '56, 1',
974: 1:      'valid': true
974: 1:    },
974: 1:    {
974: 1:      'answer': '-0.5',
974: 1:      'question': '1, -2',
974: 1:      'valid': true
974: 1:    },
974: 1:    {
974: 1:      'answer': '-0.5',
974: 1:      'question': '-1, 2',
974: 1:      'valid': true
974: 1:    },
974: 1:    {
974: 1:      'answer': '0.5',
974: 1:      'question': '-1, -2',
974: 1:      'valid': true
974: 1:    }
974: 1:  ],
974: 1:  'info': [
974: 1:    '✅f(1, 2) = 0.5',
974: 1:    '✅f(1, 1) = 1',
974: 1:    '✅f(5, 5) = 1',
974: 1:    '✅f(55, 5) = 11',
974: 1:    '✅f(55, 44) = 1.25',
974: 1:    '✅f(0, 56) = 0',
974: 1:    '✅f(56, 1) = 56',
974: 1:    '✅f(1, -2) = -0.5',
974: 1:    '✅f(-1, 2) = -0.5',
974: 1:    '✅f(-1, -2) = 0.5',
974: 1:    '❌f(1, 1000) = ??? != 0.001'
974: 1:  ],
974: 1:  'level': 35,
974: 1:  'nextQuestion': '1, 1000',
974: 1:  'questions': [
974: 1:    '1, 2',
974: 1:    '1, 1',
974: 1:    '5, 5',
974: 1:    '55, 5',
974: 1:    '55, 44',
974: 1:    '0, 56',
974: 1:    '56, 1',
974: 1:    '1, -2',
974: 1:    '-1, 2',
974: 1:    '-1, -2',
974: 1:    '1, 1000'
974: 1:  ]
974: 1:}
974: 1:Scores: 123021
974: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001']')
974: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
975: 1:BoardData {
975: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
975: 1:  'expectedAnswer': '1.2(4)',
975: 1:  'history': [
975: 1:    {
975: 1:      'answer': '0.5',
975: 1:      'question': '1, 2',
975: 1:      'valid': true
975: 1:    },
975: 1:    {
975: 1:      'answer': '1',
975: 1:      'question': '1, 1',
975: 1:      'valid': true
975: 1:    },
975: 1:    {
975: 1:      'answer': '1',
975: 1:      'question': '5, 5',
975: 1:      'valid': true
975: 1:    },
975: 1:    {
975: 1:      'answer': '11',
975: 1:      'question': '55, 5',
975: 1:      'valid': true
975: 1:    },
975: 1:    {
975: 1:      'answer': '1.25',
975: 1:      'question': '55, 44',
975: 1:      'valid': true
975: 1:    },
975: 1:    {
975: 1:      'answer': '0',
975: 1:      'question': '0, 56',
975: 1:      'valid': true
975: 1:    },
975: 1:    {
975: 1:      'answer': '56',
975: 1:      'question': '56, 1',
975: 1:      'valid': true
975: 1:    },
975: 1:    {
975: 1:      'answer': '-0.5',
975: 1:      'question': '1, -2',
975: 1:      'valid': true
975: 1:    },
975: 1:    {
975: 1:      'answer': '-0.5',
975: 1:      'question': '-1, 2',
975: 1:      'valid': true
975: 1:    },
975: 1:    {
975: 1:      'answer': '0.5',
975: 1:      'question': '-1, -2',
975: 1:      'valid': true
975: 1:    },
975: 1:    {
975: 1:      'answer': '0.001',
975: 1:      'question': '1, 1000',
975: 1:      'valid': true
975: 1:    }
975: 1:  ],
975: 1:  'info': [
975: 1:    '✅f(1, 2) = 0.5',
975: 1:    '✅f(1, 1) = 1',
975: 1:    '✅f(5, 5) = 1',
975: 1:    '✅f(55, 5) = 11',
975: 1:    '✅f(55, 44) = 1.25',
975: 1:    '✅f(0, 56) = 0',
975: 1:    '✅f(56, 1) = 56',
975: 1:    '✅f(1, -2) = -0.5',
975: 1:    '✅f(-1, 2) = -0.5',
975: 1:    '✅f(-1, -2) = 0.5',
975: 1:    '✅f(1, 1000) = 0.001',
975: 1:    '❌f(56, 45) = ??? != 1.2(4)'
975: 1:  ],
975: 1:  'level': 35,
975: 1:  'nextQuestion': '56, 45',
975: 1:  'questions': [
975: 1:    '1, 2',
975: 1:    '1, 1',
975: 1:    '5, 5',
975: 1:    '55, 5',
975: 1:    '55, 44',
975: 1:    '0, 56',
975: 1:    '56, 1',
975: 1:    '1, -2',
975: 1:    '-1, 2',
975: 1:    '-1, -2',
975: 1:    '1, 1000',
975: 1:    '56, 45'
975: 1:  ]
975: 1:}
975: 1:Scores: 123042
975: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)']')
975: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
976: 1:BoardData {
976: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
976: 1:  'expectedAnswer': '1.00(90)',
976: 1:  'history': [
976: 1:    {
976: 1:      'answer': '0.5',
976: 1:      'question': '1, 2',
976: 1:      'valid': true
976: 1:    },
976: 1:    {
976: 1:      'answer': '1',
976: 1:      'question': '1, 1',
976: 1:      'valid': true
976: 1:    },
976: 1:    {
976: 1:      'answer': '1',
976: 1:      'question': '5, 5',
976: 1:      'valid': true
976: 1:    },
976: 1:    {
976: 1:      'answer': '11',
976: 1:      'question': '55, 5',
976: 1:      'valid': true
976: 1:    },
976: 1:    {
976: 1:      'answer': '1.25',
976: 1:      'question': '55, 44',
976: 1:      'valid': true
976: 1:    },
976: 1:    {
976: 1:      'answer': '0',
976: 1:      'question': '0, 56',
976: 1:      'valid': true
976: 1:    },
976: 1:    {
976: 1:      'answer': '56',
976: 1:      'question': '56, 1',
976: 1:      'valid': true
976: 1:    },
976: 1:    {
976: 1:      'answer': '-0.5',
976: 1:      'question': '1, -2',
976: 1:      'valid': true
976: 1:    },
976: 1:    {
976: 1:      'answer': '-0.5',
976: 1:      'question': '-1, 2',
976: 1:      'valid': true
976: 1:    },
976: 1:    {
976: 1:      'answer': '0.5',
976: 1:      'question': '-1, -2',
976: 1:      'valid': true
976: 1:    },
976: 1:    {
976: 1:      'answer': '0.001',
976: 1:      'question': '1, 1000',
976: 1:      'valid': true
976: 1:    },
976: 1:    {
976: 1:      'answer': '1.2(4)',
976: 1:      'question': '56, 45',
976: 1:      'valid': true
976: 1:    }
976: 1:  ],
976: 1:  'info': [
976: 1:    '✅f(1, 2) = 0.5',
976: 1:    '✅f(1, 1) = 1',
976: 1:    '✅f(5, 5) = 1',
976: 1:    '✅f(55, 5) = 11',
976: 1:    '✅f(55, 44) = 1.25',
976: 1:    '✅f(0, 56) = 0',
976: 1:    '✅f(56, 1) = 56',
976: 1:    '✅f(1, -2) = -0.5',
976: 1:    '✅f(-1, 2) = -0.5',
976: 1:    '✅f(-1, -2) = 0.5',
976: 1:    '✅f(1, 1000) = 0.001',
976: 1:    '✅f(56, 45) = 1.2(4)',
976: 1:    '❌f(111, 110) = ??? != 1.00(90)'
976: 1:  ],
976: 1:  'level': 35,
976: 1:  'nextQuestion': '111, 110',
976: 1:  'questions': [
976: 1:    '1, 2',
976: 1:    '1, 1',
976: 1:    '5, 5',
976: 1:    '55, 5',
976: 1:    '55, 44',
976: 1:    '0, 56',
976: 1:    '56, 1',
976: 1:    '1, -2',
976: 1:    '-1, 2',
976: 1:    '-1, -2',
976: 1:    '1, 1000',
976: 1:    '56, 45',
976: 1:    '111, 110'
976: 1:  ]
976: 1:}
976: 1:Scores: 123063
976: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)']')
976: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
977: 1:BoardData {
977: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
977: 1:  'expectedAnswer': '10.0(90)',
977: 1:  'history': [
977: 1:    {
977: 1:      'answer': '0.5',
977: 1:      'question': '1, 2',
977: 1:      'valid': true
977: 1:    },
977: 1:    {
977: 1:      'answer': '1',
977: 1:      'question': '1, 1',
977: 1:      'valid': true
977: 1:    },
977: 1:    {
977: 1:      'answer': '1',
977: 1:      'question': '5, 5',
977: 1:      'valid': true
977: 1:    },
977: 1:    {
977: 1:      'answer': '11',
977: 1:      'question': '55, 5',
977: 1:      'valid': true
977: 1:    },
977: 1:    {
977: 1:      'answer': '1.25',
977: 1:      'question': '55, 44',
977: 1:      'valid': true
977: 1:    },
977: 1:    {
977: 1:      'answer': '0',
977: 1:      'question': '0, 56',
977: 1:      'valid': true
977: 1:    },
977: 1:    {
977: 1:      'answer': '56',
977: 1:      'question': '56, 1',
977: 1:      'valid': true
977: 1:    },
977: 1:    {
977: 1:      'answer': '-0.5',
977: 1:      'question': '1, -2',
977: 1:      'valid': true
977: 1:    },
977: 1:    {
977: 1:      'answer': '-0.5',
977: 1:      'question': '-1, 2',
977: 1:      'valid': true
977: 1:    },
977: 1:    {
977: 1:      'answer': '0.5',
977: 1:      'question': '-1, -2',
977: 1:      'valid': true
977: 1:    },
977: 1:    {
977: 1:      'answer': '0.001',
977: 1:      'question': '1, 1000',
977: 1:      'valid': true
977: 1:    },
977: 1:    {
977: 1:      'answer': '1.2(4)',
977: 1:      'question': '56, 45',
977: 1:      'valid': true
977: 1:    },
977: 1:    {
977: 1:      'answer': '1.00(90)',
977: 1:      'question': '111, 110',
977: 1:      'valid': true
977: 1:    }
977: 1:  ],
977: 1:  'info': [
977: 1:    '✅f(1, 2) = 0.5',
977: 1:    '✅f(1, 1) = 1',
977: 1:    '✅f(5, 5) = 1',
977: 1:    '✅f(55, 5) = 11',
977: 1:    '✅f(55, 44) = 1.25',
977: 1:    '✅f(0, 56) = 0',
977: 1:    '✅f(56, 1) = 56',
977: 1:    '✅f(1, -2) = -0.5',
977: 1:    '✅f(-1, 2) = -0.5',
977: 1:    '✅f(-1, -2) = 0.5',
977: 1:    '✅f(1, 1000) = 0.001',
977: 1:    '✅f(56, 45) = 1.2(4)',
977: 1:    '✅f(111, 110) = 1.00(90)',
977: 1:    '❌f(111, 11) = ??? != 10.0(90)'
977: 1:  ],
977: 1:  'level': 35,
977: 1:  'nextQuestion': '111, 11',
977: 1:  'questions': [
977: 1:    '1, 2',
977: 1:    '1, 1',
977: 1:    '5, 5',
977: 1:    '55, 5',
977: 1:    '55, 44',
977: 1:    '0, 56',
977: 1:    '56, 1',
977: 1:    '1, -2',
977: 1:    '-1, 2',
977: 1:    '-1, -2',
977: 1:    '1, 1000',
977: 1:    '56, 45',
977: 1:    '111, 110',
977: 1:    '111, 11'
977: 1:  ]
977: 1:}
977: 1:Scores: 123084
977: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)']')
977: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
978: 1:BoardData {
978: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
978: 1:  'expectedAnswer': '1010.0(90)',
978: 1:  'history': [
978: 1:    {
978: 1:      'answer': '0.5',
978: 1:      'question': '1, 2',
978: 1:      'valid': true
978: 1:    },
978: 1:    {
978: 1:      'answer': '1',
978: 1:      'question': '1, 1',
978: 1:      'valid': true
978: 1:    },
978: 1:    {
978: 1:      'answer': '1',
978: 1:      'question': '5, 5',
978: 1:      'valid': true
978: 1:    },
978: 1:    {
978: 1:      'answer': '11',
978: 1:      'question': '55, 5',
978: 1:      'valid': true
978: 1:    },
978: 1:    {
978: 1:      'answer': '1.25',
978: 1:      'question': '55, 44',
978: 1:      'valid': true
978: 1:    },
978: 1:    {
978: 1:      'answer': '0',
978: 1:      'question': '0, 56',
978: 1:      'valid': true
978: 1:    },
978: 1:    {
978: 1:      'answer': '56',
978: 1:      'question': '56, 1',
978: 1:      'valid': true
978: 1:    },
978: 1:    {
978: 1:      'answer': '-0.5',
978: 1:      'question': '1, -2',
978: 1:      'valid': true
978: 1:    },
978: 1:    {
978: 1:      'answer': '-0.5',
978: 1:      'question': '-1, 2',
978: 1:      'valid': true
978: 1:    },
978: 1:    {
978: 1:      'answer': '0.5',
978: 1:      'question': '-1, -2',
978: 1:      'valid': true
978: 1:    },
978: 1:    {
978: 1:      'answer': '0.001',
978: 1:      'question': '1, 1000',
978: 1:      'valid': true
978: 1:    },
978: 1:    {
978: 1:      'answer': '1.2(4)',
978: 1:      'question': '56, 45',
978: 1:      'valid': true
978: 1:    },
978: 1:    {
978: 1:      'answer': '1.00(90)',
978: 1:      'question': '111, 110',
978: 1:      'valid': true
978: 1:    },
978: 1:    {
978: 1:      'answer': '10.0(90)',
978: 1:      'question': '111, 11',
978: 1:      'valid': true
978: 1:    }
978: 1:  ],
978: 1:  'info': [
978: 1:    '✅f(1, 2) = 0.5',
978: 1:    '✅f(1, 1) = 1',
978: 1:    '✅f(5, 5) = 1',
978: 1:    '✅f(55, 5) = 11',
978: 1:    '✅f(55, 44) = 1.25',
978: 1:    '✅f(0, 56) = 0',
978: 1:    '✅f(56, 1) = 56',
978: 1:    '✅f(1, -2) = -0.5',
978: 1:    '✅f(-1, 2) = -0.5',
978: 1:    '✅f(-1, -2) = 0.5',
978: 1:    '✅f(1, 1000) = 0.001',
978: 1:    '✅f(56, 45) = 1.2(4)',
978: 1:    '✅f(111, 110) = 1.00(90)',
978: 1:    '✅f(111, 11) = 10.0(90)',
978: 1:    '❌f(11111, 11) = ??? != 1010.0(90)'
978: 1:  ],
978: 1:  'level': 35,
978: 1:  'nextQuestion': '11111, 11',
978: 1:  'questions': [
978: 1:    '1, 2',
978: 1:    '1, 1',
978: 1:    '5, 5',
978: 1:    '55, 5',
978: 1:    '55, 44',
978: 1:    '0, 56',
978: 1:    '56, 1',
978: 1:    '1, -2',
978: 1:    '-1, 2',
978: 1:    '-1, -2',
978: 1:    '1, 1000',
978: 1:    '56, 45',
978: 1:    '111, 110',
978: 1:    '111, 11',
978: 1:    '11111, 11'
978: 1:  ]
978: 1:}
978: 1:Scores: 123105
978: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)']')
978: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
979: 1:BoardData {
979: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
979: 1:  'expectedAnswer': '0.0(495)',
979: 1:  'history': [
979: 1:    {
979: 1:      'answer': '0.5',
979: 1:      'question': '1, 2',
979: 1:      'valid': true
979: 1:    },
979: 1:    {
979: 1:      'answer': '1',
979: 1:      'question': '1, 1',
979: 1:      'valid': true
979: 1:    },
979: 1:    {
979: 1:      'answer': '1',
979: 1:      'question': '5, 5',
979: 1:      'valid': true
979: 1:    },
979: 1:    {
979: 1:      'answer': '11',
979: 1:      'question': '55, 5',
979: 1:      'valid': true
979: 1:    },
979: 1:    {
979: 1:      'answer': '1.25',
979: 1:      'question': '55, 44',
979: 1:      'valid': true
979: 1:    },
979: 1:    {
979: 1:      'answer': '0',
979: 1:      'question': '0, 56',
979: 1:      'valid': true
979: 1:    },
979: 1:    {
979: 1:      'answer': '56',
979: 1:      'question': '56, 1',
979: 1:      'valid': true
979: 1:    },
979: 1:    {
979: 1:      'answer': '-0.5',
979: 1:      'question': '1, -2',
979: 1:      'valid': true
979: 1:    },
979: 1:    {
979: 1:      'answer': '-0.5',
979: 1:      'question': '-1, 2',
979: 1:      'valid': true
979: 1:    },
979: 1:    {
979: 1:      'answer': '0.5',
979: 1:      'question': '-1, -2',
979: 1:      'valid': true
979: 1:    },
979: 1:    {
979: 1:      'answer': '0.001',
979: 1:      'question': '1, 1000',
979: 1:      'valid': true
979: 1:    },
979: 1:    {
979: 1:      'answer': '1.2(4)',
979: 1:      'question': '56, 45',
979: 1:      'valid': true
979: 1:    },
979: 1:    {
979: 1:      'answer': '1.00(90)',
979: 1:      'question': '111, 110',
979: 1:      'valid': true
979: 1:    },
979: 1:    {
979: 1:      'answer': '10.0(90)',
979: 1:      'question': '111, 11',
979: 1:      'valid': true
979: 1:    },
979: 1:    {
979: 1:      'answer': '1010.0(90)',
979: 1:      'question': '11111, 11',
979: 1:      'valid': true
979: 1:    }
979: 1:  ],
979: 1:  'info': [
979: 1:    '✅f(1, 2) = 0.5',
979: 1:    '✅f(1, 1) = 1',
979: 1:    '✅f(5, 5) = 1',
979: 1:    '✅f(55, 5) = 11',
979: 1:    '✅f(55, 44) = 1.25',
979: 1:    '✅f(0, 56) = 0',
979: 1:    '✅f(56, 1) = 56',
979: 1:    '✅f(1, -2) = -0.5',
979: 1:    '✅f(-1, 2) = -0.5',
979: 1:    '✅f(-1, -2) = 0.5',
979: 1:    '✅f(1, 1000) = 0.001',
979: 1:    '✅f(56, 45) = 1.2(4)',
979: 1:    '✅f(111, 110) = 1.00(90)',
979: 1:    '✅f(111, 11) = 10.0(90)',
979: 1:    '✅f(11111, 11) = 1010.0(90)',
979: 1:    '❌f(-11, -222) = ??? != 0.0(495)'
979: 1:  ],
979: 1:  'level': 35,
979: 1:  'nextQuestion': '-11, -222',
979: 1:  'questions': [
979: 1:    '1, 2',
979: 1:    '1, 1',
979: 1:    '5, 5',
979: 1:    '55, 5',
979: 1:    '55, 44',
979: 1:    '0, 56',
979: 1:    '56, 1',
979: 1:    '1, -2',
979: 1:    '-1, 2',
979: 1:    '-1, -2',
979: 1:    '1, 1000',
979: 1:    '56, 45',
979: 1:    '111, 110',
979: 1:    '111, 11',
979: 1:    '11111, 11',
979: 1:    '-11, -222'
979: 1:  ]
979: 1:}
979: 1:Scores: 123126
979: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)']')
979: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
980: 1:BoardData {
980: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
980: 1:  'expectedAnswer': '-5.0(45)',
980: 1:  'history': [
980: 1:    {
980: 1:      'answer': '0.5',
980: 1:      'question': '1, 2',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '1',
980: 1:      'question': '1, 1',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '1',
980: 1:      'question': '5, 5',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '11',
980: 1:      'question': '55, 5',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '1.25',
980: 1:      'question': '55, 44',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '0',
980: 1:      'question': '0, 56',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '56',
980: 1:      'question': '56, 1',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '-0.5',
980: 1:      'question': '1, -2',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '-0.5',
980: 1:      'question': '-1, 2',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '0.5',
980: 1:      'question': '-1, -2',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '0.001',
980: 1:      'question': '1, 1000',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '1.2(4)',
980: 1:      'question': '56, 45',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '1.00(90)',
980: 1:      'question': '111, 110',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '10.0(90)',
980: 1:      'question': '111, 11',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '1010.0(90)',
980: 1:      'question': '11111, 11',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '0.0(495)',
980: 1:      'question': '-11, -222',
980: 1:      'valid': true
980: 1:    }
980: 1:  ],
980: 1:  'info': [
980: 1:    '✅f(1, 2) = 0.5',
980: 1:    '✅f(1, 1) = 1',
980: 1:    '✅f(5, 5) = 1',
980: 1:    '✅f(55, 5) = 11',
980: 1:    '✅f(55, 44) = 1.25',
980: 1:    '✅f(0, 56) = 0',
980: 1:    '✅f(56, 1) = 56',
980: 1:    '✅f(1, -2) = -0.5',
980: 1:    '✅f(-1, 2) = -0.5',
980: 1:    '✅f(-1, -2) = 0.5',
980: 1:    '✅f(1, 1000) = 0.001',
980: 1:    '✅f(56, 45) = 1.2(4)',
980: 1:    '✅f(111, 110) = 1.00(90)',
980: 1:    '✅f(111, 11) = 10.0(90)',
980: 1:    '✅f(11111, 11) = 1010.0(90)',
980: 1:    '✅f(-11, -222) = 0.0(495)',
980: 1:    '❌f(111, -22) = ??? != -5.0(45)'
980: 1:  ],
980: 1:  'level': 35,
980: 1:  'nextQuestion': '111, -22',
980: 1:  'questions': [
980: 1:    '1, 2',
980: 1:    '1, 1',
980: 1:    '5, 5',
980: 1:    '55, 5',
980: 1:    '55, 44',
980: 1:    '0, 56',
980: 1:    '56, 1',
980: 1:    '1, -2',
980: 1:    '-1, 2',
980: 1:    '-1, -2',
980: 1:    '1, 1000',
980: 1:    '56, 45',
980: 1:    '111, 110',
980: 1:    '111, 11',
980: 1:    '11111, 11',
980: 1:    '-11, -222',
980: 1:    '111, -22'
980: 1:  ]
980: 1:}
980: 1:Scores: 123147
980: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)']')
980: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
981: 1:BoardData {
981: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
981: 1:  'expectedAnswer': '0.000(3)',
981: 1:  'history': [
981: 1:    {
981: 1:      'answer': '0.5',
981: 1:      'question': '1, 2',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '1',
981: 1:      'question': '1, 1',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '1',
981: 1:      'question': '5, 5',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '11',
981: 1:      'question': '55, 5',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '1.25',
981: 1:      'question': '55, 44',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '0',
981: 1:      'question': '0, 56',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '56',
981: 1:      'question': '56, 1',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '-0.5',
981: 1:      'question': '1, -2',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '-0.5',
981: 1:      'question': '-1, 2',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '0.5',
981: 1:      'question': '-1, -2',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '0.001',
981: 1:      'question': '1, 1000',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '1.2(4)',
981: 1:      'question': '56, 45',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '1.00(90)',
981: 1:      'question': '111, 110',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '10.0(90)',
981: 1:      'question': '111, 11',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '1010.0(90)',
981: 1:      'question': '11111, 11',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '0.0(495)',
981: 1:      'question': '-11, -222',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '-5.0(45)',
981: 1:      'question': '111, -22',
981: 1:      'valid': true
981: 1:    }
981: 1:  ],
981: 1:  'info': [
981: 1:    '✅f(1, 2) = 0.5',
981: 1:    '✅f(1, 1) = 1',
981: 1:    '✅f(5, 5) = 1',
981: 1:    '✅f(55, 5) = 11',
981: 1:    '✅f(55, 44) = 1.25',
981: 1:    '✅f(0, 56) = 0',
981: 1:    '✅f(56, 1) = 56',
981: 1:    '✅f(1, -2) = -0.5',
981: 1:    '✅f(-1, 2) = -0.5',
981: 1:    '✅f(-1, -2) = 0.5',
981: 1:    '✅f(1, 1000) = 0.001',
981: 1:    '✅f(56, 45) = 1.2(4)',
981: 1:    '✅f(111, 110) = 1.00(90)',
981: 1:    '✅f(111, 11) = 10.0(90)',
981: 1:    '✅f(11111, 11) = 1010.0(90)',
981: 1:    '✅f(-11, -222) = 0.0(495)',
981: 1:    '✅f(111, -22) = -5.0(45)',
981: 1:    '❌f(1, 3000) = ??? != 0.000(3)'
981: 1:  ],
981: 1:  'level': 35,
981: 1:  'nextQuestion': '1, 3000',
981: 1:  'questions': [
981: 1:    '1, 2',
981: 1:    '1, 1',
981: 1:    '5, 5',
981: 1:    '55, 5',
981: 1:    '55, 44',
981: 1:    '0, 56',
981: 1:    '56, 1',
981: 1:    '1, -2',
981: 1:    '-1, 2',
981: 1:    '-1, -2',
981: 1:    '1, 1000',
981: 1:    '56, 45',
981: 1:    '111, 110',
981: 1:    '111, 11',
981: 1:    '11111, 11',
981: 1:    '-11, -222',
981: 1:    '111, -22',
981: 1:    '1, 3000'
981: 1:  ]
981: 1:}
981: 1:Scores: 123168
981: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)']')
981: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
982: 1:BoardData {
982: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
982: 1:  'expectedAnswer': '1.1(153846)',
982: 1:  'history': [
982: 1:    {
982: 1:      'answer': '0.5',
982: 1:      'question': '1, 2',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '1',
982: 1:      'question': '1, 1',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '1',
982: 1:      'question': '5, 5',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '11',
982: 1:      'question': '55, 5',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '1.25',
982: 1:      'question': '55, 44',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '0',
982: 1:      'question': '0, 56',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '56',
982: 1:      'question': '56, 1',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '-0.5',
982: 1:      'question': '1, -2',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '-0.5',
982: 1:      'question': '-1, 2',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '0.5',
982: 1:      'question': '-1, -2',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '0.001',
982: 1:      'question': '1, 1000',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '1.2(4)',
982: 1:      'question': '56, 45',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '1.00(90)',
982: 1:      'question': '111, 110',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '10.0(90)',
982: 1:      'question': '111, 11',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '1010.0(90)',
982: 1:      'question': '11111, 11',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '0.0(495)',
982: 1:      'question': '-11, -222',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '-5.0(45)',
982: 1:      'question': '111, -22',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '0.000(3)',
982: 1:      'question': '1, 3000',
982: 1:      'valid': true
982: 1:    }
982: 1:  ],
982: 1:  'info': [
982: 1:    '✅f(1, 2) = 0.5',
982: 1:    '✅f(1, 1) = 1',
982: 1:    '✅f(5, 5) = 1',
982: 1:    '✅f(55, 5) = 11',
982: 1:    '✅f(55, 44) = 1.25',
982: 1:    '✅f(0, 56) = 0',
982: 1:    '✅f(56, 1) = 56',
982: 1:    '✅f(1, -2) = -0.5',
982: 1:    '✅f(-1, 2) = -0.5',
982: 1:    '✅f(-1, -2) = 0.5',
982: 1:    '✅f(1, 1000) = 0.001',
982: 1:    '✅f(56, 45) = 1.2(4)',
982: 1:    '✅f(111, 110) = 1.00(90)',
982: 1:    '✅f(111, 11) = 10.0(90)',
982: 1:    '✅f(11111, 11) = 1010.0(90)',
982: 1:    '✅f(-11, -222) = 0.0(495)',
982: 1:    '✅f(111, -22) = -5.0(45)',
982: 1:    '✅f(1, 3000) = 0.000(3)',
982: 1:    '❌f(87, 78) = ??? != 1.1(153846)'
982: 1:  ],
982: 1:  'level': 35,
982: 1:  'nextQuestion': '87, 78',
982: 1:  'questions': [
982: 1:    '1, 2',
982: 1:    '1, 1',
982: 1:    '5, 5',
982: 1:    '55, 5',
982: 1:    '55, 44',
982: 1:    '0, 56',
982: 1:    '56, 1',
982: 1:    '1, -2',
982: 1:    '-1, 2',
982: 1:    '-1, -2',
982: 1:    '1, 1000',
982: 1:    '56, 45',
982: 1:    '111, 110',
982: 1:    '111, 11',
982: 1:    '11111, 11',
982: 1:    '-11, -222',
982: 1:    '111, -22',
982: 1:    '1, 3000',
982: 1:    '87, 78'
982: 1:  ]
982: 1:}
982: 1:Scores: 123189
982: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)']')
982: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
983: 1:BoardData {
983: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
983: 1:  'expectedAnswer': '0.803(571428)',
983: 1:  'history': [
983: 1:    {
983: 1:      'answer': '0.5',
983: 1:      'question': '1, 2',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '1',
983: 1:      'question': '1, 1',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '1',
983: 1:      'question': '5, 5',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '11',
983: 1:      'question': '55, 5',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '1.25',
983: 1:      'question': '55, 44',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '0',
983: 1:      'question': '0, 56',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '56',
983: 1:      'question': '56, 1',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '-0.5',
983: 1:      'question': '1, -2',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '-0.5',
983: 1:      'question': '-1, 2',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '0.5',
983: 1:      'question': '-1, -2',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '0.001',
983: 1:      'question': '1, 1000',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '1.2(4)',
983: 1:      'question': '56, 45',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '1.00(90)',
983: 1:      'question': '111, 110',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '10.0(90)',
983: 1:      'question': '111, 11',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '1010.0(90)',
983: 1:      'question': '11111, 11',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '0.0(495)',
983: 1:      'question': '-11, -222',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '-5.0(45)',
983: 1:      'question': '111, -22',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '0.000(3)',
983: 1:      'question': '1, 3000',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '1.1(153846)',
983: 1:      'question': '87, 78',
983: 1:      'valid': true
983: 1:    }
983: 1:  ],
983: 1:  'info': [
983: 1:    '✅f(1, 2) = 0.5',
983: 1:    '✅f(1, 1) = 1',
983: 1:    '✅f(5, 5) = 1',
983: 1:    '✅f(55, 5) = 11',
983: 1:    '✅f(55, 44) = 1.25',
983: 1:    '✅f(0, 56) = 0',
983: 1:    '✅f(56, 1) = 56',
983: 1:    '✅f(1, -2) = -0.5',
983: 1:    '✅f(-1, 2) = -0.5',
983: 1:    '✅f(-1, -2) = 0.5',
983: 1:    '✅f(1, 1000) = 0.001',
983: 1:    '✅f(56, 45) = 1.2(4)',
983: 1:    '✅f(111, 110) = 1.00(90)',
983: 1:    '✅f(111, 11) = 10.0(90)',
983: 1:    '✅f(11111, 11) = 1010.0(90)',
983: 1:    '✅f(-11, -222) = 0.0(495)',
983: 1:    '✅f(111, -22) = -5.0(45)',
983: 1:    '✅f(1, 3000) = 0.000(3)',
983: 1:    '✅f(87, 78) = 1.1(153846)',
983: 1:    '❌f(45, 56) = ??? != 0.803(571428)'
983: 1:  ],
983: 1:  'level': 35,
983: 1:  'nextQuestion': '45, 56',
983: 1:  'questions': [
983: 1:    '1, 2',
983: 1:    '1, 1',
983: 1:    '5, 5',
983: 1:    '55, 5',
983: 1:    '55, 44',
983: 1:    '0, 56',
983: 1:    '56, 1',
983: 1:    '1, -2',
983: 1:    '-1, 2',
983: 1:    '-1, -2',
983: 1:    '1, 1000',
983: 1:    '56, 45',
983: 1:    '111, 110',
983: 1:    '111, 11',
983: 1:    '11111, 11',
983: 1:    '-11, -222',
983: 1:    '111, -22',
983: 1:    '1, 3000',
983: 1:    '87, 78',
983: 1:    '45, 56'
983: 1:  ]
983: 1:}
983: 1:Scores: 123210
983: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)', '0.803(571428)']')
983: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
984: 1:BoardData {
984: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
984: 1:  'expectedAnswer': '1.(593984962406015037)',
984: 1:  'history': [
984: 1:    {
984: 1:      'answer': '0.5',
984: 1:      'question': '1, 2',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '1',
984: 1:      'question': '1, 1',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '1',
984: 1:      'question': '5, 5',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '11',
984: 1:      'question': '55, 5',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '1.25',
984: 1:      'question': '55, 44',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '0',
984: 1:      'question': '0, 56',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '56',
984: 1:      'question': '56, 1',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '-0.5',
984: 1:      'question': '1, -2',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '-0.5',
984: 1:      'question': '-1, 2',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '0.5',
984: 1:      'question': '-1, -2',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '0.001',
984: 1:      'question': '1, 1000',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '1.2(4)',
984: 1:      'question': '56, 45',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '1.00(90)',
984: 1:      'question': '111, 110',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '10.0(90)',
984: 1:      'question': '111, 11',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '1010.0(90)',
984: 1:      'question': '11111, 11',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '0.0(495)',
984: 1:      'question': '-11, -222',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '-5.0(45)',
984: 1:      'question': '111, -22',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '0.000(3)',
984: 1:      'question': '1, 3000',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '1.1(153846)',
984: 1:      'question': '87, 78',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '0.803(571428)',
984: 1:      'question': '45, 56',
984: 1:      'valid': true
984: 1:    }
984: 1:  ],
984: 1:  'info': [
984: 1:    '✅f(1, 2) = 0.5',
984: 1:    '✅f(1, 1) = 1',
984: 1:    '✅f(5, 5) = 1',
984: 1:    '✅f(55, 5) = 11',
984: 1:    '✅f(55, 44) = 1.25',
984: 1:    '✅f(0, 56) = 0',
984: 1:    '✅f(56, 1) = 56',
984: 1:    '✅f(1, -2) = -0.5',
984: 1:    '✅f(-1, 2) = -0.5',
984: 1:    '✅f(-1, -2) = 0.5',
984: 1:    '✅f(1, 1000) = 0.001',
984: 1:    '✅f(56, 45) = 1.2(4)',
984: 1:    '✅f(111, 110) = 1.00(90)',
984: 1:    '✅f(111, 11) = 10.0(90)',
984: 1:    '✅f(11111, 11) = 1010.0(90)',
984: 1:    '✅f(-11, -222) = 0.0(495)',
984: 1:    '✅f(111, -22) = -5.0(45)',
984: 1:    '✅f(1, 3000) = 0.000(3)',
984: 1:    '✅f(87, 78) = 1.1(153846)',
984: 1:    '✅f(45, 56) = 0.803(571428)',
984: 1:    '❌f(212, 133) = ??? != 1.(593984962406015037)'
984: 1:  ],
984: 1:  'level': 35,
984: 1:  'nextQuestion': '212, 133',
984: 1:  'questions': [
984: 1:    '1, 2',
984: 1:    '1, 1',
984: 1:    '5, 5',
984: 1:    '55, 5',
984: 1:    '55, 44',
984: 1:    '0, 56',
984: 1:    '56, 1',
984: 1:    '1, -2',
984: 1:    '-1, 2',
984: 1:    '-1, -2',
984: 1:    '1, 1000',
984: 1:    '56, 45',
984: 1:    '111, 110',
984: 1:    '111, 11',
984: 1:    '11111, 11',
984: 1:    '-11, -222',
984: 1:    '111, -22',
984: 1:    '1, 3000',
984: 1:    '87, 78',
984: 1:    '45, 56',
984: 1:    '212, 133'
984: 1:  ]
984: 1:}
984: 1:Scores: 123231
984: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)', '0.803(571428)', '1.(593984962406015037)']')
984: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
985: 1:BoardData {
985: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
985: 1:  'expectedAnswer': '96.6(1739130434782608695652)',
985: 1:  'history': [
985: 1:    {
985: 1:      'answer': '0.5',
985: 1:      'question': '1, 2',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '1',
985: 1:      'question': '1, 1',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '1',
985: 1:      'question': '5, 5',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '11',
985: 1:      'question': '55, 5',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '1.25',
985: 1:      'question': '55, 44',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '0',
985: 1:      'question': '0, 56',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '56',
985: 1:      'question': '56, 1',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '-0.5',
985: 1:      'question': '1, -2',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '-0.5',
985: 1:      'question': '-1, 2',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '0.5',
985: 1:      'question': '-1, -2',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '0.001',
985: 1:      'question': '1, 1000',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '1.2(4)',
985: 1:      'question': '56, 45',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '1.00(90)',
985: 1:      'question': '111, 110',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '10.0(90)',
985: 1:      'question': '111, 11',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '1010.0(90)',
985: 1:      'question': '11111, 11',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '0.0(495)',
985: 1:      'question': '-11, -222',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '-5.0(45)',
985: 1:      'question': '111, -22',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '0.000(3)',
985: 1:      'question': '1, 3000',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '1.1(153846)',
985: 1:      'question': '87, 78',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '0.803(571428)',
985: 1:      'question': '45, 56',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '1.(593984962406015037)',
985: 1:      'question': '212, 133',
985: 1:      'valid': true
985: 1:    }
985: 1:  ],
985: 1:  'info': [
985: 1:    '✅f(1, 2) = 0.5',
985: 1:    '✅f(1, 1) = 1',
985: 1:    '✅f(5, 5) = 1',
985: 1:    '✅f(55, 5) = 11',
985: 1:    '✅f(55, 44) = 1.25',
985: 1:    '✅f(0, 56) = 0',
985: 1:    '✅f(56, 1) = 56',
985: 1:    '✅f(1, -2) = -0.5',
985: 1:    '✅f(-1, 2) = -0.5',
985: 1:    '✅f(-1, -2) = 0.5',
985: 1:    '✅f(1, 1000) = 0.001',
985: 1:    '✅f(56, 45) = 1.2(4)',
985: 1:    '✅f(111, 110) = 1.00(90)',
985: 1:    '✅f(111, 11) = 10.0(90)',
985: 1:    '✅f(11111, 11) = 1010.0(90)',
985: 1:    '✅f(-11, -222) = 0.0(495)',
985: 1:    '✅f(111, -22) = -5.0(45)',
985: 1:    '✅f(1, 3000) = 0.000(3)',
985: 1:    '✅f(87, 78) = 1.1(153846)',
985: 1:    '✅f(45, 56) = 0.803(571428)',
985: 1:    '✅f(212, 133) = 1.(593984962406015037)',
985: 1:    '❌f(11111, 115) = ??? != 96.6(1739130434782608695652)'
985: 1:  ],
985: 1:  'level': 35,
985: 1:  'nextQuestion': '11111, 115',
985: 1:  'questions': [
985: 1:    '1, 2',
985: 1:    '1, 1',
985: 1:    '5, 5',
985: 1:    '55, 5',
985: 1:    '55, 44',
985: 1:    '0, 56',
985: 1:    '56, 1',
985: 1:    '1, -2',
985: 1:    '-1, 2',
985: 1:    '-1, -2',
985: 1:    '1, 1000',
985: 1:    '56, 45',
985: 1:    '111, 110',
985: 1:    '111, 11',
985: 1:    '11111, 11',
985: 1:    '-11, -222',
985: 1:    '111, -22',
985: 1:    '1, 3000',
985: 1:    '87, 78',
985: 1:    '45, 56',
985: 1:    '212, 133',
985: 1:    '11111, 115'
985: 1:  ]
985: 1:}
985: 1:Scores: 123252
985: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)', '0.803(571428)', '1.(593984962406015037)', '96.6(1739130434782608695652)']')
985: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
986: 1:BoardData {
986: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
986: 1:  'expectedAnswer': '0.3(5652173913043478260869)',
986: 1:  'history': [
986: 1:    {
986: 1:      'answer': '0.5',
986: 1:      'question': '1, 2',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '1',
986: 1:      'question': '1, 1',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '1',
986: 1:      'question': '5, 5',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '11',
986: 1:      'question': '55, 5',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '1.25',
986: 1:      'question': '55, 44',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '0',
986: 1:      'question': '0, 56',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '56',
986: 1:      'question': '56, 1',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '-0.5',
986: 1:      'question': '1, -2',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '-0.5',
986: 1:      'question': '-1, 2',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '0.5',
986: 1:      'question': '-1, -2',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '0.001',
986: 1:      'question': '1, 1000',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '1.2(4)',
986: 1:      'question': '56, 45',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '1.00(90)',
986: 1:      'question': '111, 110',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '10.0(90)',
986: 1:      'question': '111, 11',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '1010.0(90)',
986: 1:      'question': '11111, 11',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '0.0(495)',
986: 1:      'question': '-11, -222',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '-5.0(45)',
986: 1:      'question': '111, -22',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '0.000(3)',
986: 1:      'question': '1, 3000',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '1.1(153846)',
986: 1:      'question': '87, 78',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '0.803(571428)',
986: 1:      'question': '45, 56',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '1.(593984962406015037)',
986: 1:      'question': '212, 133',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '96.6(1739130434782608695652)',
986: 1:      'question': '11111, 115',
986: 1:      'valid': true
986: 1:    }
986: 1:  ],
986: 1:  'info': [
986: 1:    '✅f(1, 2) = 0.5',
986: 1:    '✅f(1, 1) = 1',
986: 1:    '✅f(5, 5) = 1',
986: 1:    '✅f(55, 5) = 11',
986: 1:    '✅f(55, 44) = 1.25',
986: 1:    '✅f(0, 56) = 0',
986: 1:    '✅f(56, 1) = 56',
986: 1:    '✅f(1, -2) = -0.5',
986: 1:    '✅f(-1, 2) = -0.5',
986: 1:    '✅f(-1, -2) = 0.5',
986: 1:    '✅f(1, 1000) = 0.001',
986: 1:    '✅f(56, 45) = 1.2(4)',
986: 1:    '✅f(111, 110) = 1.00(90)',
986: 1:    '✅f(111, 11) = 10.0(90)',
986: 1:    '✅f(11111, 11) = 1010.0(90)',
986: 1:    '✅f(-11, -222) = 0.0(495)',
986: 1:    '✅f(111, -22) = -5.0(45)',
986: 1:    '✅f(1, 3000) = 0.000(3)',
986: 1:    '✅f(87, 78) = 1.1(153846)',
986: 1:    '✅f(45, 56) = 0.803(571428)',
986: 1:    '✅f(212, 133) = 1.(593984962406015037)',
986: 1:    '✅f(11111, 115) = 96.6(1739130434782608695652)',
986: 1:    '❌f(123, 345) = ??? != 0.3(5652173913043478260869)'
986: 1:  ],
986: 1:  'level': 35,
986: 1:  'nextQuestion': '123, 345',
986: 1:  'questions': [
986: 1:    '1, 2',
986: 1:    '1, 1',
986: 1:    '5, 5',
986: 1:    '55, 5',
986: 1:    '55, 44',
986: 1:    '0, 56',
986: 1:    '56, 1',
986: 1:    '1, -2',
986: 1:    '-1, 2',
986: 1:    '-1, -2',
986: 1:    '1, 1000',
986: 1:    '56, 45',
986: 1:    '111, 110',
986: 1:    '111, 11',
986: 1:    '11111, 11',
986: 1:    '-11, -222',
986: 1:    '111, -22',
986: 1:    '1, 3000',
986: 1:    '87, 78',
986: 1:    '45, 56',
986: 1:    '212, 133',
986: 1:    '11111, 115',
986: 1:    '123, 345'
986: 1:  ]
986: 1:}
986: 1:Scores: 123273
986: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)', '0.803(571428)', '1.(593984962406015037)', '96.6(1739130434782608695652)', '0.3(5652173913043478260869)']')
986: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
987: 1:BoardData {
987: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
987: 1:  'expectedAnswer': '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484',
987: 1:  'history': [
987: 1:    {
987: 1:      'answer': '0.5',
987: 1:      'question': '1, 2',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '1',
987: 1:      'question': '1, 1',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '1',
987: 1:      'question': '5, 5',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '11',
987: 1:      'question': '55, 5',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '1.25',
987: 1:      'question': '55, 44',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '0',
987: 1:      'question': '0, 56',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '56',
987: 1:      'question': '56, 1',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '-0.5',
987: 1:      'question': '1, -2',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '-0.5',
987: 1:      'question': '-1, 2',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '0.5',
987: 1:      'question': '-1, -2',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '0.001',
987: 1:      'question': '1, 1000',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '1.2(4)',
987: 1:      'question': '56, 45',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '1.00(90)',
987: 1:      'question': '111, 110',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '10.0(90)',
987: 1:      'question': '111, 11',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '1010.0(90)',
987: 1:      'question': '11111, 11',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '0.0(495)',
987: 1:      'question': '-11, -222',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '-5.0(45)',
987: 1:      'question': '111, -22',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '0.000(3)',
987: 1:      'question': '1, 3000',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '1.1(153846)',
987: 1:      'question': '87, 78',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '0.803(571428)',
987: 1:      'question': '45, 56',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '1.(593984962406015037)',
987: 1:      'question': '212, 133',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '96.6(1739130434782608695652)',
987: 1:      'question': '11111, 115',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '0.3(5652173913043478260869)',
987: 1:      'question': '123, 345',
987: 1:      'valid': true
987: 1:    }
987: 1:  ],
987: 1:  'info': [
987: 1:    '✅f(1, 2) = 0.5',
987: 1:    '✅f(1, 1) = 1',
987: 1:    '✅f(5, 5) = 1',
987: 1:    '✅f(55, 5) = 11',
987: 1:    '✅f(55, 44) = 1.25',
987: 1:    '✅f(0, 56) = 0',
987: 1:    '✅f(56, 1) = 56',
987: 1:    '✅f(1, -2) = -0.5',
987: 1:    '✅f(-1, 2) = -0.5',
987: 1:    '✅f(-1, -2) = 0.5',
987: 1:    '✅f(1, 1000) = 0.001',
987: 1:    '✅f(56, 45) = 1.2(4)',
987: 1:    '✅f(111, 110) = 1.00(90)',
987: 1:    '✅f(111, 11) = 10.0(90)',
987: 1:    '✅f(11111, 11) = 1010.0(90)',
987: 1:    '✅f(-11, -222) = 0.0(495)',
987: 1:    '✅f(111, -22) = -5.0(45)',
987: 1:    '✅f(1, 3000) = 0.000(3)',
987: 1:    '✅f(87, 78) = 1.1(153846)',
987: 1:    '✅f(45, 56) = 0.803(571428)',
987: 1:    '✅f(212, 133) = 1.(593984962406015037)',
987: 1:    '✅f(11111, 115) = 96.6(1739130434782608695652)',
987: 1:    '✅f(123, 345) = 0.3(5652173913043478260869)',
987: 1:    '❌f(66666666, 77727777) = ??? != 0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484'
987: 1:  ],
987: 1:  'level': 35,
987: 1:  'nextQuestion': '66666666, 77727777',
987: 1:  'questions': [
987: 1:    '1, 2',
987: 1:    '1, 1',
987: 1:    '5, 5',
987: 1:    '55, 5',
987: 1:    '55, 44',
987: 1:    '0, 56',
987: 1:    '56, 1',
987: 1:    '1, -2',
987: 1:    '-1, 2',
987: 1:    '-1, -2',
987: 1:    '1, 1000',
987: 1:    '56, 45',
987: 1:    '111, 110',
987: 1:    '111, 11',
987: 1:    '11111, 11',
987: 1:    '-11, -222',
987: 1:    '111, -22',
987: 1:    '1, 3000',
987: 1:    '87, 78',
987: 1:    '45, 56',
987: 1:    '212, 133',
987: 1:    '11111, 115',
987: 1:    '123, 345',
987: 1:    '66666666, 77727777'
987: 1:  ]
987: 1:}
987: 1:Scores: 123294
987: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)', '0.803(571428)', '1.(593984962406015037)', '96.6(1739130434782608695652)', '0.3(5652173913043478260869)', '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484']')
987: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
988: 1:BoardData {
988: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
988: 1:  'expectedAnswer': '8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847',
988: 1:  'history': [
988: 1:    {
988: 1:      'answer': '0.5',
988: 1:      'question': '1, 2',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '1',
988: 1:      'question': '1, 1',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '1',
988: 1:      'question': '5, 5',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '11',
988: 1:      'question': '55, 5',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '1.25',
988: 1:      'question': '55, 44',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '0',
988: 1:      'question': '0, 56',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '56',
988: 1:      'question': '56, 1',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '-0.5',
988: 1:      'question': '1, -2',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '-0.5',
988: 1:      'question': '-1, 2',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '0.5',
988: 1:      'question': '-1, -2',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '0.001',
988: 1:      'question': '1, 1000',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '1.2(4)',
988: 1:      'question': '56, 45',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '1.00(90)',
988: 1:      'question': '111, 110',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '10.0(90)',
988: 1:      'question': '111, 11',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '1010.0(90)',
988: 1:      'question': '11111, 11',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '0.0(495)',
988: 1:      'question': '-11, -222',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '-5.0(45)',
988: 1:      'question': '111, -22',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '0.000(3)',
988: 1:      'question': '1, 3000',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '1.1(153846)',
988: 1:      'question': '87, 78',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '0.803(571428)',
988: 1:      'question': '45, 56',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '1.(593984962406015037)',
988: 1:      'question': '212, 133',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '96.6(1739130434782608695652)',
988: 1:      'question': '11111, 115',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '0.3(5652173913043478260869)',
988: 1:      'question': '123, 345',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484',
988: 1:      'question': '66666666, 77727777',
988: 1:      'valid': true
988: 1:    }
988: 1:  ],
988: 1:  'info': [
988: 1:    '✅f(1, 2) = 0.5',
988: 1:    '✅f(1, 1) = 1',
988: 1:    '✅f(5, 5) = 1',
988: 1:    '✅f(55, 5) = 11',
988: 1:    '✅f(55, 44) = 1.25',
988: 1:    '✅f(0, 56) = 0',
988: 1:    '✅f(56, 1) = 56',
988: 1:    '✅f(1, -2) = -0.5',
988: 1:    '✅f(-1, 2) = -0.5',
988: 1:    '✅f(-1, -2) = 0.5',
988: 1:    '✅f(1, 1000) = 0.001',
988: 1:    '✅f(56, 45) = 1.2(4)',
988: 1:    '✅f(111, 110) = 1.00(90)',
988: 1:    '✅f(111, 11) = 10.0(90)',
988: 1:    '✅f(11111, 11) = 1010.0(90)',
988: 1:    '✅f(-11, -222) = 0.0(495)',
988: 1:    '✅f(111, -22) = -5.0(45)',
988: 1:    '✅f(1, 3000) = 0.000(3)',
988: 1:    '✅f(87, 78) = 1.1(153846)',
988: 1:    '✅f(45, 56) = 0.803(571428)',
988: 1:    '✅f(212, 133) = 1.(593984962406015037)',
988: 1:    '✅f(11111, 115) = 96.6(1739130434782608695652)',
988: 1:    '✅f(123, 345) = 0.3(5652173913043478260869)',
988: 1:    '✅f(66666666, 77727777) = 0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484',
988: 1:    '❌f(666666660, 77727777) = ??? != 8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847'
988: 1:  ],
988: 1:  'level': 35,
988: 1:  'nextQuestion': '666666660, 77727777',
988: 1:  'questions': [
988: 1:    '1, 2',
988: 1:    '1, 1',
988: 1:    '5, 5',
988: 1:    '55, 5',
988: 1:    '55, 44',
988: 1:    '0, 56',
988: 1:    '56, 1',
988: 1:    '1, -2',
988: 1:    '-1, 2',
988: 1:    '-1, -2',
988: 1:    '1, 1000',
988: 1:    '56, 45',
988: 1:    '111, 110',
988: 1:    '111, 11',
988: 1:    '11111, 11',
988: 1:    '-11, -222',
988: 1:    '111, -22',
988: 1:    '1, 3000',
988: 1:    '87, 78',
988: 1:    '45, 56',
988: 1:    '212, 133',
988: 1:    '11111, 115',
988: 1:    '123, 345',
988: 1:    '66666666, 77727777',
988: 1:    '666666660, 77727777'
988: 1:  ]
988: 1:}
988: 1:Scores: 123315
988: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)', '0.803(571428)', '1.(593984962406015037)', '96.6(1739130434782608695652)', '0.3(5652173913043478260869)', '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484', '8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847']')
988: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
989: 1:BoardData {
989: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
989: 1:  'expectedAnswer': '85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713',
989: 1:  'history': [
989: 1:    {
989: 1:      'answer': '0.5',
989: 1:      'question': '1, 2',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '1',
989: 1:      'question': '1, 1',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '1',
989: 1:      'question': '5, 5',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '11',
989: 1:      'question': '55, 5',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '1.25',
989: 1:      'question': '55, 44',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '0',
989: 1:      'question': '0, 56',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '56',
989: 1:      'question': '56, 1',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '-0.5',
989: 1:      'question': '1, -2',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '-0.5',
989: 1:      'question': '-1, 2',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '0.5',
989: 1:      'question': '-1, -2',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '0.001',
989: 1:      'question': '1, 1000',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '1.2(4)',
989: 1:      'question': '56, 45',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '1.00(90)',
989: 1:      'question': '111, 110',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '10.0(90)',
989: 1:      'question': '111, 11',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '1010.0(90)',
989: 1:      'question': '11111, 11',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '0.0(495)',
989: 1:      'question': '-11, -222',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '-5.0(45)',
989: 1:      'question': '111, -22',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '0.000(3)',
989: 1:      'question': '1, 3000',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '1.1(153846)',
989: 1:      'question': '87, 78',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '0.803(571428)',
989: 1:      'question': '45, 56',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '1.(593984962406015037)',
989: 1:      'question': '212, 133',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '96.6(1739130434782608695652)',
989: 1:      'question': '11111, 115',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '0.3(5652173913043478260869)',
989: 1:      'question': '123, 345',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484',
989: 1:      'question': '66666666, 77727777',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847',
989: 1:      'question': '666666660, 77727777',
989: 1:      'valid': true
989: 1:    }
989: 1:  ],
989: 1:  'info': [
989: 1:    '✅f(1, 2) = 0.5',
989: 1:    '✅f(1, 1) = 1',
989: 1:    '✅f(5, 5) = 1',
989: 1:    '✅f(55, 5) = 11',
989: 1:    '✅f(55, 44) = 1.25',
989: 1:    '✅f(0, 56) = 0',
989: 1:    '✅f(56, 1) = 56',
989: 1:    '✅f(1, -2) = -0.5',
989: 1:    '✅f(-1, 2) = -0.5',
989: 1:    '✅f(-1, -2) = 0.5',
989: 1:    '✅f(1, 1000) = 0.001',
989: 1:    '✅f(56, 45) = 1.2(4)',
989: 1:    '✅f(111, 110) = 1.00(90)',
989: 1:    '✅f(111, 11) = 10.0(90)',
989: 1:    '✅f(11111, 11) = 1010.0(90)',
989: 1:    '✅f(-11, -222) = 0.0(495)',
989: 1:    '✅f(111, -22) = -5.0(45)',
989: 1:    '✅f(1, 3000) = 0.000(3)',
989: 1:    '✅f(87, 78) = 1.1(153846)',
989: 1:    '✅f(45, 56) = 0.803(571428)',
989: 1:    '✅f(212, 133) = 1.(593984962406015037)',
989: 1:    '✅f(11111, 115) = 96.6(1739130434782608695652)',
989: 1:    '✅f(123, 345) = 0.3(5652173913043478260869)',
989: 1:    '✅f(66666666, 77727777) = 0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484',
989: 1:    '✅f(666666660, 77727777) = 8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847',
989: 1:    '❌f(666666660, 7772777) = ??? != 85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713'
989: 1:  ],
989: 1:  'level': 35,
989: 1:  'nextQuestion': '666666660, 7772777',
989: 1:  'questions': [
989: 1:    '1, 2',
989: 1:    '1, 1',
989: 1:    '5, 5',
989: 1:    '55, 5',
989: 1:    '55, 44',
989: 1:    '0, 56',
989: 1:    '56, 1',
989: 1:    '1, -2',
989: 1:    '-1, 2',
989: 1:    '-1, -2',
989: 1:    '1, 1000',
989: 1:    '56, 45',
989: 1:    '111, 110',
989: 1:    '111, 11',
989: 1:    '11111, 11',
989: 1:    '-11, -222',
989: 1:    '111, -22',
989: 1:    '1, 3000',
989: 1:    '87, 78',
989: 1:    '45, 56',
989: 1:    '212, 133',
989: 1:    '11111, 115',
989: 1:    '123, 345',
989: 1:    '66666666, 77727777',
989: 1:    '666666660, 77727777',
989: 1:    '666666660, 7772777'
989: 1:  ]
989: 1:}
989: 1:Scores: 123336
989: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)', '0.803(571428)', '1.(593984962406015037)', '96.6(1739130434782608695652)', '0.3(5652173913043478260869)', '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484', '8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847', '85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713']')
989: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
990: 1:BoardData {
990: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
990: 1:  'expectedAnswer': '1.0(309278350515463917525773195876288659793814432989690721649484536082474226804123711340206185567010)',
990: 1:  'history': [
990: 1:    {
990: 1:      'answer': '0.5',
990: 1:      'question': '1, 2',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '1',
990: 1:      'question': '1, 1',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '1',
990: 1:      'question': '5, 5',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '11',
990: 1:      'question': '55, 5',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '1.25',
990: 1:      'question': '55, 44',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '0',
990: 1:      'question': '0, 56',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '56',
990: 1:      'question': '56, 1',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '-0.5',
990: 1:      'question': '1, -2',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '-0.5',
990: 1:      'question': '-1, 2',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '0.5',
990: 1:      'question': '-1, -2',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '0.001',
990: 1:      'question': '1, 1000',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '1.2(4)',
990: 1:      'question': '56, 45',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '1.00(90)',
990: 1:      'question': '111, 110',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '10.0(90)',
990: 1:      'question': '111, 11',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '1010.0(90)',
990: 1:      'question': '11111, 11',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '0.0(495)',
990: 1:      'question': '-11, -222',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '-5.0(45)',
990: 1:      'question': '111, -22',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '0.000(3)',
990: 1:      'question': '1, 3000',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '1.1(153846)',
990: 1:      'question': '87, 78',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '0.803(571428)',
990: 1:      'question': '45, 56',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '1.(593984962406015037)',
990: 1:      'question': '212, 133',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '96.6(1739130434782608695652)',
990: 1:      'question': '11111, 115',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '0.3(5652173913043478260869)',
990: 1:      'question': '123, 345',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484',
990: 1:      'question': '66666666, 77727777',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847',
990: 1:      'question': '666666660, 77727777',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713',
990: 1:      'question': '666666660, 7772777',
990: 1:      'valid': true
990: 1:    }
990: 1:  ],
990: 1:  'info': [
990: 1:    '✅f(1, 2) = 0.5',
990: 1:    '✅f(1, 1) = 1',
990: 1:    '✅f(5, 5) = 1',
990: 1:    '✅f(55, 5) = 11',
990: 1:    '✅f(55, 44) = 1.25',
990: 1:    '✅f(0, 56) = 0',
990: 1:    '✅f(56, 1) = 56',
990: 1:    '✅f(1, -2) = -0.5',
990: 1:    '✅f(-1, 2) = -0.5',
990: 1:    '✅f(-1, -2) = 0.5',
990: 1:    '✅f(1, 1000) = 0.001',
990: 1:    '✅f(56, 45) = 1.2(4)',
990: 1:    '✅f(111, 110) = 1.00(90)',
990: 1:    '✅f(111, 11) = 10.0(90)',
990: 1:    '✅f(11111, 11) = 1010.0(90)',
990: 1:    '✅f(-11, -222) = 0.0(495)',
990: 1:    '✅f(111, -22) = -5.0(45)',
990: 1:    '✅f(1, 3000) = 0.000(3)',
990: 1:    '✅f(87, 78) = 1.1(153846)',
990: 1:    '✅f(45, 56) = 0.803(571428)',
990: 1:    '✅f(212, 133) = 1.(593984962406015037)',
990: 1:    '✅f(11111, 115) = 96.6(1739130434782608695652)',
990: 1:    '✅f(123, 345) = 0.3(5652173913043478260869)',
990: 1:    '✅f(66666666, 77727777) = 0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484',
990: 1:    '✅f(666666660, 77727777) = 8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847',
990: 1:    '✅f(666666660, 7772777) = 85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713',
990: 1:    '❌f(100, 97) = ??? != 1.0(309278350515463917525773195876288659793814432989690721649484536082474226804123711340206185567010)'
990: 1:  ],
990: 1:  'level': 35,
990: 1:  'nextQuestion': '100, 97',
990: 1:  'questions': [
990: 1:    '1, 2',
990: 1:    '1, 1',
990: 1:    '5, 5',
990: 1:    '55, 5',
990: 1:    '55, 44',
990: 1:    '0, 56',
990: 1:    '56, 1',
990: 1:    '1, -2',
990: 1:    '-1, 2',
990: 1:    '-1, -2',
990: 1:    '1, 1000',
990: 1:    '56, 45',
990: 1:    '111, 110',
990: 1:    '111, 11',
990: 1:    '11111, 11',
990: 1:    '-11, -222',
990: 1:    '111, -22',
990: 1:    '1, 3000',
990: 1:    '87, 78',
990: 1:    '45, 56',
990: 1:    '212, 133',
990: 1:    '11111, 115',
990: 1:    '123, 345',
990: 1:    '66666666, 77727777',
990: 1:    '666666660, 77727777',
990: 1:    '666666660, 7772777',
990: 1:    '100, 97'
990: 1:  ]
990: 1:}
990: 1:Scores: 123357
990: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)', '0.803(571428)', '1.(593984962406015037)', '96.6(1739130434782608695652)', '0.3(5652173913043478260869)', '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484', '8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847', '85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713', '1.0(309278350515463917525773195876288659793814432989690721649484536082474226804123711340206185567010)']')
990: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
991: 1:BoardData {
991: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
991: 1:  'expectedAnswer': 'Div by zero error!',
991: 1:  'history': [
991: 1:    {
991: 1:      'answer': '0.5',
991: 1:      'question': '1, 2',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '1',
991: 1:      'question': '1, 1',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '1',
991: 1:      'question': '5, 5',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '11',
991: 1:      'question': '55, 5',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '1.25',
991: 1:      'question': '55, 44',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '0',
991: 1:      'question': '0, 56',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '56',
991: 1:      'question': '56, 1',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '-0.5',
991: 1:      'question': '1, -2',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '-0.5',
991: 1:      'question': '-1, 2',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '0.5',
991: 1:      'question': '-1, -2',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '0.001',
991: 1:      'question': '1, 1000',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '1.2(4)',
991: 1:      'question': '56, 45',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '1.00(90)',
991: 1:      'question': '111, 110',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '10.0(90)',
991: 1:      'question': '111, 11',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '1010.0(90)',
991: 1:      'question': '11111, 11',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '0.0(495)',
991: 1:      'question': '-11, -222',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '-5.0(45)',
991: 1:      'question': '111, -22',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '0.000(3)',
991: 1:      'question': '1, 3000',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '1.1(153846)',
991: 1:      'question': '87, 78',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '0.803(571428)',
991: 1:      'question': '45, 56',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '1.(593984962406015037)',
991: 1:      'question': '212, 133',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '96.6(1739130434782608695652)',
991: 1:      'question': '11111, 115',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '0.3(5652173913043478260869)',
991: 1:      'question': '123, 345',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484',
991: 1:      'question': '66666666, 77727777',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847',
991: 1:      'question': '666666660, 77727777',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713',
991: 1:      'question': '666666660, 7772777',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '1.0(309278350515463917525773195876288659793814432989690721649484536082474226804123711340206185567010)',
991: 1:      'question': '100, 97',
991: 1:      'valid': true
991: 1:    }
991: 1:  ],
991: 1:  'info': [
991: 1:    '✅f(1, 2) = 0.5',
991: 1:    '✅f(1, 1) = 1',
991: 1:    '✅f(5, 5) = 1',
991: 1:    '✅f(55, 5) = 11',
991: 1:    '✅f(55, 44) = 1.25',
991: 1:    '✅f(0, 56) = 0',
991: 1:    '✅f(56, 1) = 56',
991: 1:    '✅f(1, -2) = -0.5',
991: 1:    '✅f(-1, 2) = -0.5',
991: 1:    '✅f(-1, -2) = 0.5',
991: 1:    '✅f(1, 1000) = 0.001',
991: 1:    '✅f(56, 45) = 1.2(4)',
991: 1:    '✅f(111, 110) = 1.00(90)',
991: 1:    '✅f(111, 11) = 10.0(90)',
991: 1:    '✅f(11111, 11) = 1010.0(90)',
991: 1:    '✅f(-11, -222) = 0.0(495)',
991: 1:    '✅f(111, -22) = -5.0(45)',
991: 1:    '✅f(1, 3000) = 0.000(3)',
991: 1:    '✅f(87, 78) = 1.1(153846)',
991: 1:    '✅f(45, 56) = 0.803(571428)',
991: 1:    '✅f(212, 133) = 1.(593984962406015037)',
991: 1:    '✅f(11111, 115) = 96.6(1739130434782608695652)',
991: 1:    '✅f(123, 345) = 0.3(5652173913043478260869)',
991: 1:    '✅f(66666666, 77727777) = 0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484',
991: 1:    '✅f(666666660, 77727777) = 8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847',
991: 1:    '✅f(666666660, 7772777) = 85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713',
991: 1:    '✅f(100, 97) = 1.0(309278350515463917525773195876288659793814432989690721649484536082474226804123711340206185567010)',
991: 1:    '❌f(999, 0) = ??? != Div by zero error!'
991: 1:  ],
991: 1:  'level': 35,
991: 1:  'nextQuestion': '999, 0',
991: 1:  'questions': [
991: 1:    '1, 2',
991: 1:    '1, 1',
991: 1:    '5, 5',
991: 1:    '55, 5',
991: 1:    '55, 44',
991: 1:    '0, 56',
991: 1:    '56, 1',
991: 1:    '1, -2',
991: 1:    '-1, 2',
991: 1:    '-1, -2',
991: 1:    '1, 1000',
991: 1:    '56, 45',
991: 1:    '111, 110',
991: 1:    '111, 11',
991: 1:    '11111, 11',
991: 1:    '-11, -222',
991: 1:    '111, -22',
991: 1:    '1, 3000',
991: 1:    '87, 78',
991: 1:    '45, 56',
991: 1:    '212, 133',
991: 1:    '11111, 115',
991: 1:    '123, 345',
991: 1:    '66666666, 77727777',
991: 1:    '666666660, 77727777',
991: 1:    '666666660, 7772777',
991: 1:    '100, 97',
991: 1:    '999, 0'
991: 1:  ]
991: 1:}
991: 1:Scores: 123378
991: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)', '0.803(571428)', '1.(593984962406015037)', '96.6(1739130434782608695652)', '0.3(5652173913043478260869)', '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484', '8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847', '85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713', '1.0(309278350515463917525773195876288659793814432989690721649484536082474226804123711340206185567010)', 'Div by zero error!']')
991: 1:Fire Event: PassTest{complexity=60, testCount=28}
991: 1:Fire Event: NextAlgorithm{complexity=60, time=0}
------------------------------------------
992: 1:BoardData {
992: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
992: 1:  'history': [
992: 1:    {
992: 1:      'answer': '0.5',
992: 1:      'question': '1, 2',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '1',
992: 1:      'question': '1, 1',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '1',
992: 1:      'question': '5, 5',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '11',
992: 1:      'question': '55, 5',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '1.25',
992: 1:      'question': '55, 44',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '0',
992: 1:      'question': '0, 56',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '56',
992: 1:      'question': '56, 1',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '-0.5',
992: 1:      'question': '1, -2',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '-0.5',
992: 1:      'question': '-1, 2',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '0.5',
992: 1:      'question': '-1, -2',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '0.001',
992: 1:      'question': '1, 1000',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '1.2(4)',
992: 1:      'question': '56, 45',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '1.00(90)',
992: 1:      'question': '111, 110',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '10.0(90)',
992: 1:      'question': '111, 11',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '1010.0(90)',
992: 1:      'question': '11111, 11',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '0.0(495)',
992: 1:      'question': '-11, -222',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '-5.0(45)',
992: 1:      'question': '111, -22',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '0.000(3)',
992: 1:      'question': '1, 3000',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '1.1(153846)',
992: 1:      'question': '87, 78',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '0.803(571428)',
992: 1:      'question': '45, 56',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '1.(593984962406015037)',
992: 1:      'question': '212, 133',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '96.6(1739130434782608695652)',
992: 1:      'question': '11111, 115',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '0.3(5652173913043478260869)',
992: 1:      'question': '123, 345',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484',
992: 1:      'question': '66666666, 77727777',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847',
992: 1:      'question': '666666660, 77727777',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713',
992: 1:      'question': '666666660, 7772777',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '1.0(309278350515463917525773195876288659793814432989690721649484536082474226804123711340206185567010)',
992: 1:      'question': '100, 97',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': 'Div by zero error!',
992: 1:      'question': '999, 0',
992: 1:      'valid': true
992: 1:    }
992: 1:  ],
992: 1:  'info': [
992: 1:    '✅f(1, 2) = 0.5',
992: 1:    '✅f(1, 1) = 1',
992: 1:    '✅f(5, 5) = 1',
992: 1:    '✅f(55, 5) = 11',
992: 1:    '✅f(55, 44) = 1.25',
992: 1:    '✅f(0, 56) = 0',
992: 1:    '✅f(56, 1) = 56',
992: 1:    '✅f(1, -2) = -0.5',
992: 1:    '✅f(-1, 2) = -0.5',
992: 1:    '✅f(-1, -2) = 0.5',
992: 1:    '✅f(1, 1000) = 0.001',
992: 1:    '✅f(56, 45) = 1.2(4)',
992: 1:    '✅f(111, 110) = 1.00(90)',
992: 1:    '✅f(111, 11) = 10.0(90)',
992: 1:    '✅f(11111, 11) = 1010.0(90)',
992: 1:    '✅f(-11, -222) = 0.0(495)',
992: 1:    '✅f(111, -22) = -5.0(45)',
992: 1:    '✅f(1, 3000) = 0.000(3)',
992: 1:    '✅f(87, 78) = 1.1(153846)',
992: 1:    '✅f(45, 56) = 0.803(571428)',
992: 1:    '✅f(212, 133) = 1.(593984962406015037)',
992: 1:    '✅f(11111, 115) = 96.6(1739130434782608695652)',
992: 1:    '✅f(123, 345) = 0.3(5652173913043478260869)',
992: 1:    '✅f(66666666, 77727777) = 0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484',
992: 1:    '✅f(666666660, 77727777) = 8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847',
992: 1:    '✅f(666666660, 7772777) = 85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713',
992: 1:    '✅f(100, 97) = 1.0(309278350515463917525773195876288659793814432989690721649484536082474226804123711340206185567010)',
992: 1:    '✅f(999, 0) = Div by zero error!'
992: 1:  ],
992: 1:  'level': 35,
992: 1:  'questions': []
992: 1:}
992: 1:Scores: 131498
992: 1:Answer: message('StartNextLevel')
992: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
993: 1:BoardData {
993: 1:  'description': ['No more Levels. You win!'],
993: 1:  'history': [],
993: 1:  'info': [],
993: 1:  'level': 36,
993: 1:  'questions': []
993: 1:}
993: 1:Scores: 131498
993: 1:Answer: message('StartNextLevel')
------------------------------------------
994: 1:BoardData {
994: 1:  'description': ['No more Levels. You win!'],
994: 1:  'history': [],
994: 1:  'info': [],
994: 1:  'level': 36,
994: 1:  'questions': []
994: 1:}
994: 1:Scores: 131498
994: 1:Answer: message('StartNextLevel')
------------------------------------------
995: 1:BoardData {
995: 1:  'description': ['No more Levels. You win!'],
995: 1:  'history': [],
995: 1:  'info': [],
995: 1:  'level': 36,
995: 1:  'questions': []
995: 1:}
995: 1:Scores: 131498
995: 1:Answer: message('StartNextLevel')
------------------------------------------
996: 1:BoardData {
996: 1:  'description': ['No more Levels. You win!'],
996: 1:  'history': [],
996: 1:  'info': [],
996: 1:  'level': 36,
996: 1:  'questions': []
996: 1:}
996: 1:Scores: 131498
996: 1:Answer: message('StartNextLevel')
------------------------------------------
997: 1:BoardData {
997: 1:  'description': ['No more Levels. You win!'],
997: 1:  'history': [],
997: 1:  'info': [],
997: 1:  'level': 36,
997: 1:  'questions': []
997: 1:}
997: 1:Scores: 131498
997: 1:Answer: message('StartNextLevel')
------------------------------------------
998: 1:BoardData {
998: 1:  'description': ['No more Levels. You win!'],
998: 1:  'history': [],
998: 1:  'info': [],
998: 1:  'level': 36,
998: 1:  'questions': []
998: 1:}
998: 1:Scores: 131498
998: 1:Answer: message('StartNextLevel')
------------------------------------------
999: 1:BoardData {
999: 1:  'description': ['No more Levels. You win!'],
999: 1:  'history': [],
999: 1:  'info': [],
999: 1:  'level': 36,
999: 1:  'questions': []
999: 1:}
999: 1:Scores: 131498
999: 1:Answer: message('StartNextLevel')
------------------------------------------
1000: 1:BoardData {
1000: 1:  'description': ['No more Levels. You win!'],
1000: 1:  'history': [],
1000: 1:  'info': [],
1000: 1:  'level': 36,
1000: 1:  'questions': []
1000: 1:}
1000: 1:Scores: 131498
1000: 1:Answer: message('StartNextLevel')
------------------------------------------