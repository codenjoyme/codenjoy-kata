1: 1:BoardData {
1: 1:  'description': [
1: 1:    'Write a method that takes a single string argument and return the string 'world' if 'hello' came in.',
1: 1:    'Please write js method.',
1: 1:    'Now please improve the algorithm so that it returns'hello' if 'world' came in. Previous logic should work also',
1: 1:    'One more improvement: in other cases the algorithm should return the same string that came in.'
1: 1:  ],
1: 1:  'expectedAnswer': 'world',
1: 1:  'history': [],
1: 1:  'info': ['❌f(hello) = ??? != world'],
1: 1:  'level': 0,
1: 1:  'nextQuestion': 'hello',
1: 1:  'questions': ['hello']
1: 1:}
1: 1:Scores: 0
1: 1:Answer: message('['world']')
1: 1:Fire Event: PassTest{complexity=0, testCount=5}
------------------------------------------
2: 1:BoardData {
2: 1:  'description': [
2: 1:    'Write a method that takes a single string argument and return the string 'world' if 'hello' came in.',
2: 1:    'Please write js method.',
2: 1:    'Now please improve the algorithm so that it returns'hello' if 'world' came in. Previous logic should work also',
2: 1:    'One more improvement: in other cases the algorithm should return the same string that came in.'
2: 1:  ],
2: 1:  'expectedAnswer': 'hello',
2: 1:  'history': [{
2: 1:    'answer': 'world',
2: 1:    'question': 'hello',
2: 1:    'valid': true
2: 1:  }],
2: 1:  'info': [
2: 1:    '✅f(hello) = world',
2: 1:    '❌f(world) = ??? != hello'
2: 1:  ],
2: 1:  'level': 0,
2: 1:  'nextQuestion': 'world',
2: 1:  'questions': [
2: 1:    'hello',
2: 1:    'world'
2: 1:  ]
2: 1:}
2: 1:Scores: 1
2: 1:Answer: message('['world', 'hello']')
2: 1:Fire Event: PassTest{complexity=0, testCount=5}
------------------------------------------
3: 1:BoardData {
3: 1:  'description': [
3: 1:    'Write a method that takes a single string argument and return the string 'world' if 'hello' came in.',
3: 1:    'Please write js method.',
3: 1:    'Now please improve the algorithm so that it returns'hello' if 'world' came in. Previous logic should work also',
3: 1:    'One more improvement: in other cases the algorithm should return the same string that came in.'
3: 1:  ],
3: 1:  'expectedAnswer': 'qwe',
3: 1:  'history': [
3: 1:    {
3: 1:      'answer': 'world',
3: 1:      'question': 'hello',
3: 1:      'valid': true
3: 1:    },
3: 1:    {
3: 1:      'answer': 'hello',
3: 1:      'question': 'world',
3: 1:      'valid': true
3: 1:    }
3: 1:  ],
3: 1:  'info': [
3: 1:    '✅f(hello) = world',
3: 1:    '✅f(world) = hello',
3: 1:    '❌f(qwe) = ??? != qwe'
3: 1:  ],
3: 1:  'level': 0,
3: 1:  'nextQuestion': 'qwe',
3: 1:  'questions': [
3: 1:    'hello',
3: 1:    'world',
3: 1:    'qwe'
3: 1:  ]
3: 1:}
3: 1:Scores: 2
3: 1:Answer: message('['world', 'hello', 'qwe']')
3: 1:Fire Event: PassTest{complexity=0, testCount=5}
------------------------------------------
4: 1:BoardData {
4: 1:  'description': [
4: 1:    'Write a method that takes a single string argument and return the string 'world' if 'hello' came in.',
4: 1:    'Please write js method.',
4: 1:    'Now please improve the algorithm so that it returns'hello' if 'world' came in. Previous logic should work also',
4: 1:    'One more improvement: in other cases the algorithm should return the same string that came in.'
4: 1:  ],
4: 1:  'expectedAnswer': 'asd',
4: 1:  'history': [
4: 1:    {
4: 1:      'answer': 'world',
4: 1:      'question': 'hello',
4: 1:      'valid': true
4: 1:    },
4: 1:    {
4: 1:      'answer': 'hello',
4: 1:      'question': 'world',
4: 1:      'valid': true
4: 1:    },
4: 1:    {
4: 1:      'answer': 'qwe',
4: 1:      'question': 'qwe',
4: 1:      'valid': true
4: 1:    }
4: 1:  ],
4: 1:  'info': [
4: 1:    '✅f(hello) = world',
4: 1:    '✅f(world) = hello',
4: 1:    '✅f(qwe) = qwe',
4: 1:    '❌f(asd) = ??? != asd'
4: 1:  ],
4: 1:  'level': 0,
4: 1:  'nextQuestion': 'asd',
4: 1:  'questions': [
4: 1:    'hello',
4: 1:    'world',
4: 1:    'qwe',
4: 1:    'asd'
4: 1:  ]
4: 1:}
4: 1:Scores: 3
4: 1:Answer: message('['world', 'hello', 'qwe', 'asd']')
4: 1:Fire Event: PassTest{complexity=0, testCount=5}
------------------------------------------
5: 1:BoardData {
5: 1:  'description': [
5: 1:    'Write a method that takes a single string argument and return the string 'world' if 'hello' came in.',
5: 1:    'Please write js method.',
5: 1:    'Now please improve the algorithm so that it returns'hello' if 'world' came in. Previous logic should work also',
5: 1:    'One more improvement: in other cases the algorithm should return the same string that came in.'
5: 1:  ],
5: 1:  'expectedAnswer': 'zxc',
5: 1:  'history': [
5: 1:    {
5: 1:      'answer': 'world',
5: 1:      'question': 'hello',
5: 1:      'valid': true
5: 1:    },
5: 1:    {
5: 1:      'answer': 'hello',
5: 1:      'question': 'world',
5: 1:      'valid': true
5: 1:    },
5: 1:    {
5: 1:      'answer': 'qwe',
5: 1:      'question': 'qwe',
5: 1:      'valid': true
5: 1:    },
5: 1:    {
5: 1:      'answer': 'asd',
5: 1:      'question': 'asd',
5: 1:      'valid': true
5: 1:    }
5: 1:  ],
5: 1:  'info': [
5: 1:    '✅f(hello) = world',
5: 1:    '✅f(world) = hello',
5: 1:    '✅f(qwe) = qwe',
5: 1:    '✅f(asd) = asd',
5: 1:    '❌f(zxc) = ??? != zxc'
5: 1:  ],
5: 1:  'level': 0,
5: 1:  'nextQuestion': 'zxc',
5: 1:  'questions': [
5: 1:    'hello',
5: 1:    'world',
5: 1:    'qwe',
5: 1:    'asd',
5: 1:    'zxc'
5: 1:  ]
5: 1:}
5: 1:Scores: 4
5: 1:Answer: message('['world', 'hello', 'qwe', 'asd', 'zxc']')
5: 1:Fire Event: PassTest{complexity=0, testCount=5}
5: 1:Fire Event: NextAlgorithm{complexity=0, time=0}
------------------------------------------
6: 1:BoardData {
6: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
6: 1:  'history': [
6: 1:    {
6: 1:      'answer': 'world',
6: 1:      'question': 'hello',
6: 1:      'valid': true
6: 1:    },
6: 1:    {
6: 1:      'answer': 'hello',
6: 1:      'question': 'world',
6: 1:      'valid': true
6: 1:    },
6: 1:    {
6: 1:      'answer': 'qwe',
6: 1:      'question': 'qwe',
6: 1:      'valid': true
6: 1:    },
6: 1:    {
6: 1:      'answer': 'asd',
6: 1:      'question': 'asd',
6: 1:      'valid': true
6: 1:    },
6: 1:    {
6: 1:      'answer': 'zxc',
6: 1:      'question': 'zxc',
6: 1:      'valid': true
6: 1:    }
6: 1:  ],
6: 1:  'info': [
6: 1:    '✅f(hello) = world',
6: 1:    '✅f(world) = hello',
6: 1:    '✅f(qwe) = qwe',
6: 1:    '✅f(asd) = asd',
6: 1:    '✅f(zxc) = zxc'
6: 1:  ],
6: 1:  'level': 0,
6: 1:  'questions': []
6: 1:}
6: 1:Scores: 5
6: 1:Answer: message('StartNextLevel')
6: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
7: 1:BoardData {
7: 1:  'description': [
7: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
7: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
7: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
7: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
7: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
7: 1:    'Please write optimized code without any duplication.',
7: 1:    'For divider 11 - the word must be 'Duzz'.',
7: 1:    'For divider 13 - the word must be 'Cazz'.',
7: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
7: 1:  ],
7: 1:  'expectedAnswer': '1',
7: 1:  'history': [],
7: 1:  'info': ['❌f(1) = ??? != 1'],
7: 1:  'level': 1,
7: 1:  'nextQuestion': '1',
7: 1:  'questions': ['1']
7: 1:}
7: 1:Scores: 5
7: 1:Answer: message('['1']')
7: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
8: 1:BoardData {
8: 1:  'description': [
8: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
8: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
8: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
8: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
8: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
8: 1:    'Please write optimized code without any duplication.',
8: 1:    'For divider 11 - the word must be 'Duzz'.',
8: 1:    'For divider 13 - the word must be 'Cazz'.',
8: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
8: 1:  ],
8: 1:  'expectedAnswer': '2',
8: 1:  'history': [{
8: 1:    'answer': '1',
8: 1:    'question': '1',
8: 1:    'valid': true
8: 1:  }],
8: 1:  'info': [
8: 1:    '✅f(1) = 1',
8: 1:    '❌f(2) = ??? != 2'
8: 1:  ],
8: 1:  'level': 1,
8: 1:  'nextQuestion': '2',
8: 1:  'questions': [
8: 1:    '1',
8: 1:    '2'
8: 1:  ]
8: 1:}
8: 1:Scores: 6
8: 1:Answer: message('['1', '2']')
8: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
9: 1:BoardData {
9: 1:  'description': [
9: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
9: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
9: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
9: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
9: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
9: 1:    'Please write optimized code without any duplication.',
9: 1:    'For divider 11 - the word must be 'Duzz'.',
9: 1:    'For divider 13 - the word must be 'Cazz'.',
9: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
9: 1:  ],
9: 1:  'expectedAnswer': 'Fizz',
9: 1:  'history': [
9: 1:    {
9: 1:      'answer': '1',
9: 1:      'question': '1',
9: 1:      'valid': true
9: 1:    },
9: 1:    {
9: 1:      'answer': '2',
9: 1:      'question': '2',
9: 1:      'valid': true
9: 1:    }
9: 1:  ],
9: 1:  'info': [
9: 1:    '✅f(1) = 1',
9: 1:    '✅f(2) = 2',
9: 1:    '❌f(3) = ??? != Fizz'
9: 1:  ],
9: 1:  'level': 1,
9: 1:  'nextQuestion': '3',
9: 1:  'questions': [
9: 1:    '1',
9: 1:    '2',
9: 1:    '3'
9: 1:  ]
9: 1:}
9: 1:Scores: 7
9: 1:Answer: message('['1', '2', 'Fizz']')
9: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
10: 1:BoardData {
10: 1:  'description': [
10: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
10: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
10: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
10: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
10: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
10: 1:    'Please write optimized code without any duplication.',
10: 1:    'For divider 11 - the word must be 'Duzz'.',
10: 1:    'For divider 13 - the word must be 'Cazz'.',
10: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
10: 1:  ],
10: 1:  'expectedAnswer': '4',
10: 1:  'history': [
10: 1:    {
10: 1:      'answer': '1',
10: 1:      'question': '1',
10: 1:      'valid': true
10: 1:    },
10: 1:    {
10: 1:      'answer': '2',
10: 1:      'question': '2',
10: 1:      'valid': true
10: 1:    },
10: 1:    {
10: 1:      'answer': 'Fizz',
10: 1:      'question': '3',
10: 1:      'valid': true
10: 1:    }
10: 1:  ],
10: 1:  'info': [
10: 1:    '✅f(1) = 1',
10: 1:    '✅f(2) = 2',
10: 1:    '✅f(3) = Fizz',
10: 1:    '❌f(4) = ??? != 4'
10: 1:  ],
10: 1:  'level': 1,
10: 1:  'nextQuestion': '4',
10: 1:  'questions': [
10: 1:    '1',
10: 1:    '2',
10: 1:    '3',
10: 1:    '4'
10: 1:  ]
10: 1:}
10: 1:Scores: 8
10: 1:Answer: message('['1', '2', 'Fizz', '4']')
10: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
11: 1:BoardData {
11: 1:  'description': [
11: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
11: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
11: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
11: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
11: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
11: 1:    'Please write optimized code without any duplication.',
11: 1:    'For divider 11 - the word must be 'Duzz'.',
11: 1:    'For divider 13 - the word must be 'Cazz'.',
11: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
11: 1:  ],
11: 1:  'expectedAnswer': 'Buzz',
11: 1:  'history': [
11: 1:    {
11: 1:      'answer': '1',
11: 1:      'question': '1',
11: 1:      'valid': true
11: 1:    },
11: 1:    {
11: 1:      'answer': '2',
11: 1:      'question': '2',
11: 1:      'valid': true
11: 1:    },
11: 1:    {
11: 1:      'answer': 'Fizz',
11: 1:      'question': '3',
11: 1:      'valid': true
11: 1:    },
11: 1:    {
11: 1:      'answer': '4',
11: 1:      'question': '4',
11: 1:      'valid': true
11: 1:    }
11: 1:  ],
11: 1:  'info': [
11: 1:    '✅f(1) = 1',
11: 1:    '✅f(2) = 2',
11: 1:    '✅f(3) = Fizz',
11: 1:    '✅f(4) = 4',
11: 1:    '❌f(5) = ??? != Buzz'
11: 1:  ],
11: 1:  'level': 1,
11: 1:  'nextQuestion': '5',
11: 1:  'questions': [
11: 1:    '1',
11: 1:    '2',
11: 1:    '3',
11: 1:    '4',
11: 1:    '5'
11: 1:  ]
11: 1:}
11: 1:Scores: 9
11: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz']')
11: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
12: 1:BoardData {
12: 1:  'description': [
12: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
12: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
12: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
12: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
12: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
12: 1:    'Please write optimized code without any duplication.',
12: 1:    'For divider 11 - the word must be 'Duzz'.',
12: 1:    'For divider 13 - the word must be 'Cazz'.',
12: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
12: 1:  ],
12: 1:  'expectedAnswer': 'Fizz',
12: 1:  'history': [
12: 1:    {
12: 1:      'answer': '1',
12: 1:      'question': '1',
12: 1:      'valid': true
12: 1:    },
12: 1:    {
12: 1:      'answer': '2',
12: 1:      'question': '2',
12: 1:      'valid': true
12: 1:    },
12: 1:    {
12: 1:      'answer': 'Fizz',
12: 1:      'question': '3',
12: 1:      'valid': true
12: 1:    },
12: 1:    {
12: 1:      'answer': '4',
12: 1:      'question': '4',
12: 1:      'valid': true
12: 1:    },
12: 1:    {
12: 1:      'answer': 'Buzz',
12: 1:      'question': '5',
12: 1:      'valid': true
12: 1:    }
12: 1:  ],
12: 1:  'info': [
12: 1:    '✅f(1) = 1',
12: 1:    '✅f(2) = 2',
12: 1:    '✅f(3) = Fizz',
12: 1:    '✅f(4) = 4',
12: 1:    '✅f(5) = Buzz',
12: 1:    '❌f(6) = ??? != Fizz'
12: 1:  ],
12: 1:  'level': 1,
12: 1:  'nextQuestion': '6',
12: 1:  'questions': [
12: 1:    '1',
12: 1:    '2',
12: 1:    '3',
12: 1:    '4',
12: 1:    '5',
12: 1:    '6'
12: 1:  ]
12: 1:}
12: 1:Scores: 10
12: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz']')
12: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
13: 1:BoardData {
13: 1:  'description': [
13: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
13: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
13: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
13: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
13: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
13: 1:    'Please write optimized code without any duplication.',
13: 1:    'For divider 11 - the word must be 'Duzz'.',
13: 1:    'For divider 13 - the word must be 'Cazz'.',
13: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
13: 1:  ],
13: 1:  'expectedAnswer': 'Muzz',
13: 1:  'history': [
13: 1:    {
13: 1:      'answer': '1',
13: 1:      'question': '1',
13: 1:      'valid': true
13: 1:    },
13: 1:    {
13: 1:      'answer': '2',
13: 1:      'question': '2',
13: 1:      'valid': true
13: 1:    },
13: 1:    {
13: 1:      'answer': 'Fizz',
13: 1:      'question': '3',
13: 1:      'valid': true
13: 1:    },
13: 1:    {
13: 1:      'answer': '4',
13: 1:      'question': '4',
13: 1:      'valid': true
13: 1:    },
13: 1:    {
13: 1:      'answer': 'Buzz',
13: 1:      'question': '5',
13: 1:      'valid': true
13: 1:    },
13: 1:    {
13: 1:      'answer': 'Fizz',
13: 1:      'question': '6',
13: 1:      'valid': true
13: 1:    }
13: 1:  ],
13: 1:  'info': [
13: 1:    '✅f(1) = 1',
13: 1:    '✅f(2) = 2',
13: 1:    '✅f(3) = Fizz',
13: 1:    '✅f(4) = 4',
13: 1:    '✅f(5) = Buzz',
13: 1:    '✅f(6) = Fizz',
13: 1:    '❌f(7) = ??? != Muzz'
13: 1:  ],
13: 1:  'level': 1,
13: 1:  'nextQuestion': '7',
13: 1:  'questions': [
13: 1:    '1',
13: 1:    '2',
13: 1:    '3',
13: 1:    '4',
13: 1:    '5',
13: 1:    '6',
13: 1:    '7'
13: 1:  ]
13: 1:}
13: 1:Scores: 11
13: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz']')
13: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
14: 1:BoardData {
14: 1:  'description': [
14: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
14: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
14: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
14: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
14: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
14: 1:    'Please write optimized code without any duplication.',
14: 1:    'For divider 11 - the word must be 'Duzz'.',
14: 1:    'For divider 13 - the word must be 'Cazz'.',
14: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
14: 1:  ],
14: 1:  'expectedAnswer': '8',
14: 1:  'history': [
14: 1:    {
14: 1:      'answer': '1',
14: 1:      'question': '1',
14: 1:      'valid': true
14: 1:    },
14: 1:    {
14: 1:      'answer': '2',
14: 1:      'question': '2',
14: 1:      'valid': true
14: 1:    },
14: 1:    {
14: 1:      'answer': 'Fizz',
14: 1:      'question': '3',
14: 1:      'valid': true
14: 1:    },
14: 1:    {
14: 1:      'answer': '4',
14: 1:      'question': '4',
14: 1:      'valid': true
14: 1:    },
14: 1:    {
14: 1:      'answer': 'Buzz',
14: 1:      'question': '5',
14: 1:      'valid': true
14: 1:    },
14: 1:    {
14: 1:      'answer': 'Fizz',
14: 1:      'question': '6',
14: 1:      'valid': true
14: 1:    },
14: 1:    {
14: 1:      'answer': 'Muzz',
14: 1:      'question': '7',
14: 1:      'valid': true
14: 1:    }
14: 1:  ],
14: 1:  'info': [
14: 1:    '✅f(1) = 1',
14: 1:    '✅f(2) = 2',
14: 1:    '✅f(3) = Fizz',
14: 1:    '✅f(4) = 4',
14: 1:    '✅f(5) = Buzz',
14: 1:    '✅f(6) = Fizz',
14: 1:    '✅f(7) = Muzz',
14: 1:    '❌f(8) = ??? != 8'
14: 1:  ],
14: 1:  'level': 1,
14: 1:  'nextQuestion': '8',
14: 1:  'questions': [
14: 1:    '1',
14: 1:    '2',
14: 1:    '3',
14: 1:    '4',
14: 1:    '5',
14: 1:    '6',
14: 1:    '7',
14: 1:    '8'
14: 1:  ]
14: 1:}
14: 1:Scores: 12
14: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8']')
14: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
15: 1:BoardData {
15: 1:  'description': [
15: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
15: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
15: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
15: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
15: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
15: 1:    'Please write optimized code without any duplication.',
15: 1:    'For divider 11 - the word must be 'Duzz'.',
15: 1:    'For divider 13 - the word must be 'Cazz'.',
15: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
15: 1:  ],
15: 1:  'expectedAnswer': 'Fizz',
15: 1:  'history': [
15: 1:    {
15: 1:      'answer': '1',
15: 1:      'question': '1',
15: 1:      'valid': true
15: 1:    },
15: 1:    {
15: 1:      'answer': '2',
15: 1:      'question': '2',
15: 1:      'valid': true
15: 1:    },
15: 1:    {
15: 1:      'answer': 'Fizz',
15: 1:      'question': '3',
15: 1:      'valid': true
15: 1:    },
15: 1:    {
15: 1:      'answer': '4',
15: 1:      'question': '4',
15: 1:      'valid': true
15: 1:    },
15: 1:    {
15: 1:      'answer': 'Buzz',
15: 1:      'question': '5',
15: 1:      'valid': true
15: 1:    },
15: 1:    {
15: 1:      'answer': 'Fizz',
15: 1:      'question': '6',
15: 1:      'valid': true
15: 1:    },
15: 1:    {
15: 1:      'answer': 'Muzz',
15: 1:      'question': '7',
15: 1:      'valid': true
15: 1:    },
15: 1:    {
15: 1:      'answer': '8',
15: 1:      'question': '8',
15: 1:      'valid': true
15: 1:    }
15: 1:  ],
15: 1:  'info': [
15: 1:    '✅f(1) = 1',
15: 1:    '✅f(2) = 2',
15: 1:    '✅f(3) = Fizz',
15: 1:    '✅f(4) = 4',
15: 1:    '✅f(5) = Buzz',
15: 1:    '✅f(6) = Fizz',
15: 1:    '✅f(7) = Muzz',
15: 1:    '✅f(8) = 8',
15: 1:    '❌f(9) = ??? != Fizz'
15: 1:  ],
15: 1:  'level': 1,
15: 1:  'nextQuestion': '9',
15: 1:  'questions': [
15: 1:    '1',
15: 1:    '2',
15: 1:    '3',
15: 1:    '4',
15: 1:    '5',
15: 1:    '6',
15: 1:    '7',
15: 1:    '8',
15: 1:    '9'
15: 1:  ]
15: 1:}
15: 1:Scores: 13
15: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz']')
15: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
16: 1:BoardData {
16: 1:  'description': [
16: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
16: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
16: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
16: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
16: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
16: 1:    'Please write optimized code without any duplication.',
16: 1:    'For divider 11 - the word must be 'Duzz'.',
16: 1:    'For divider 13 - the word must be 'Cazz'.',
16: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
16: 1:  ],
16: 1:  'expectedAnswer': 'Buzz',
16: 1:  'history': [
16: 1:    {
16: 1:      'answer': '1',
16: 1:      'question': '1',
16: 1:      'valid': true
16: 1:    },
16: 1:    {
16: 1:      'answer': '2',
16: 1:      'question': '2',
16: 1:      'valid': true
16: 1:    },
16: 1:    {
16: 1:      'answer': 'Fizz',
16: 1:      'question': '3',
16: 1:      'valid': true
16: 1:    },
16: 1:    {
16: 1:      'answer': '4',
16: 1:      'question': '4',
16: 1:      'valid': true
16: 1:    },
16: 1:    {
16: 1:      'answer': 'Buzz',
16: 1:      'question': '5',
16: 1:      'valid': true
16: 1:    },
16: 1:    {
16: 1:      'answer': 'Fizz',
16: 1:      'question': '6',
16: 1:      'valid': true
16: 1:    },
16: 1:    {
16: 1:      'answer': 'Muzz',
16: 1:      'question': '7',
16: 1:      'valid': true
16: 1:    },
16: 1:    {
16: 1:      'answer': '8',
16: 1:      'question': '8',
16: 1:      'valid': true
16: 1:    },
16: 1:    {
16: 1:      'answer': 'Fizz',
16: 1:      'question': '9',
16: 1:      'valid': true
16: 1:    }
16: 1:  ],
16: 1:  'info': [
16: 1:    '✅f(1) = 1',
16: 1:    '✅f(2) = 2',
16: 1:    '✅f(3) = Fizz',
16: 1:    '✅f(4) = 4',
16: 1:    '✅f(5) = Buzz',
16: 1:    '✅f(6) = Fizz',
16: 1:    '✅f(7) = Muzz',
16: 1:    '✅f(8) = 8',
16: 1:    '✅f(9) = Fizz',
16: 1:    '❌f(10) = ??? != Buzz'
16: 1:  ],
16: 1:  'level': 1,
16: 1:  'nextQuestion': '10',
16: 1:  'questions': [
16: 1:    '1',
16: 1:    '2',
16: 1:    '3',
16: 1:    '4',
16: 1:    '5',
16: 1:    '6',
16: 1:    '7',
16: 1:    '8',
16: 1:    '9',
16: 1:    '10'
16: 1:  ]
16: 1:}
16: 1:Scores: 14
16: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz']')
16: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
17: 1:BoardData {
17: 1:  'description': [
17: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
17: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
17: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
17: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
17: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
17: 1:    'Please write optimized code without any duplication.',
17: 1:    'For divider 11 - the word must be 'Duzz'.',
17: 1:    'For divider 13 - the word must be 'Cazz'.',
17: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
17: 1:  ],
17: 1:  'expectedAnswer': 'Duzz',
17: 1:  'history': [
17: 1:    {
17: 1:      'answer': '1',
17: 1:      'question': '1',
17: 1:      'valid': true
17: 1:    },
17: 1:    {
17: 1:      'answer': '2',
17: 1:      'question': '2',
17: 1:      'valid': true
17: 1:    },
17: 1:    {
17: 1:      'answer': 'Fizz',
17: 1:      'question': '3',
17: 1:      'valid': true
17: 1:    },
17: 1:    {
17: 1:      'answer': '4',
17: 1:      'question': '4',
17: 1:      'valid': true
17: 1:    },
17: 1:    {
17: 1:      'answer': 'Buzz',
17: 1:      'question': '5',
17: 1:      'valid': true
17: 1:    },
17: 1:    {
17: 1:      'answer': 'Fizz',
17: 1:      'question': '6',
17: 1:      'valid': true
17: 1:    },
17: 1:    {
17: 1:      'answer': 'Muzz',
17: 1:      'question': '7',
17: 1:      'valid': true
17: 1:    },
17: 1:    {
17: 1:      'answer': '8',
17: 1:      'question': '8',
17: 1:      'valid': true
17: 1:    },
17: 1:    {
17: 1:      'answer': 'Fizz',
17: 1:      'question': '9',
17: 1:      'valid': true
17: 1:    },
17: 1:    {
17: 1:      'answer': 'Buzz',
17: 1:      'question': '10',
17: 1:      'valid': true
17: 1:    }
17: 1:  ],
17: 1:  'info': [
17: 1:    '✅f(1) = 1',
17: 1:    '✅f(2) = 2',
17: 1:    '✅f(3) = Fizz',
17: 1:    '✅f(4) = 4',
17: 1:    '✅f(5) = Buzz',
17: 1:    '✅f(6) = Fizz',
17: 1:    '✅f(7) = Muzz',
17: 1:    '✅f(8) = 8',
17: 1:    '✅f(9) = Fizz',
17: 1:    '✅f(10) = Buzz',
17: 1:    '❌f(11) = ??? != Duzz'
17: 1:  ],
17: 1:  'level': 1,
17: 1:  'nextQuestion': '11',
17: 1:  'questions': [
17: 1:    '1',
17: 1:    '2',
17: 1:    '3',
17: 1:    '4',
17: 1:    '5',
17: 1:    '6',
17: 1:    '7',
17: 1:    '8',
17: 1:    '9',
17: 1:    '10',
17: 1:    '11'
17: 1:  ]
17: 1:}
17: 1:Scores: 15
17: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz']')
17: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
18: 1:BoardData {
18: 1:  'description': [
18: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
18: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
18: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
18: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
18: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
18: 1:    'Please write optimized code without any duplication.',
18: 1:    'For divider 11 - the word must be 'Duzz'.',
18: 1:    'For divider 13 - the word must be 'Cazz'.',
18: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
18: 1:  ],
18: 1:  'expectedAnswer': 'Fizz',
18: 1:  'history': [
18: 1:    {
18: 1:      'answer': '1',
18: 1:      'question': '1',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': '2',
18: 1:      'question': '2',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': 'Fizz',
18: 1:      'question': '3',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': '4',
18: 1:      'question': '4',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': 'Buzz',
18: 1:      'question': '5',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': 'Fizz',
18: 1:      'question': '6',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': 'Muzz',
18: 1:      'question': '7',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': '8',
18: 1:      'question': '8',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': 'Fizz',
18: 1:      'question': '9',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': 'Buzz',
18: 1:      'question': '10',
18: 1:      'valid': true
18: 1:    },
18: 1:    {
18: 1:      'answer': 'Duzz',
18: 1:      'question': '11',
18: 1:      'valid': true
18: 1:    }
18: 1:  ],
18: 1:  'info': [
18: 1:    '✅f(1) = 1',
18: 1:    '✅f(2) = 2',
18: 1:    '✅f(3) = Fizz',
18: 1:    '✅f(4) = 4',
18: 1:    '✅f(5) = Buzz',
18: 1:    '✅f(6) = Fizz',
18: 1:    '✅f(7) = Muzz',
18: 1:    '✅f(8) = 8',
18: 1:    '✅f(9) = Fizz',
18: 1:    '✅f(10) = Buzz',
18: 1:    '✅f(11) = Duzz',
18: 1:    '❌f(12) = ??? != Fizz'
18: 1:  ],
18: 1:  'level': 1,
18: 1:  'nextQuestion': '12',
18: 1:  'questions': [
18: 1:    '1',
18: 1:    '2',
18: 1:    '3',
18: 1:    '4',
18: 1:    '5',
18: 1:    '6',
18: 1:    '7',
18: 1:    '8',
18: 1:    '9',
18: 1:    '10',
18: 1:    '11',
18: 1:    '12'
18: 1:  ]
18: 1:}
18: 1:Scores: 16
18: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz']')
18: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
19: 1:BoardData {
19: 1:  'description': [
19: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
19: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
19: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
19: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
19: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
19: 1:    'Please write optimized code without any duplication.',
19: 1:    'For divider 11 - the word must be 'Duzz'.',
19: 1:    'For divider 13 - the word must be 'Cazz'.',
19: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
19: 1:  ],
19: 1:  'expectedAnswer': 'Cazz',
19: 1:  'history': [
19: 1:    {
19: 1:      'answer': '1',
19: 1:      'question': '1',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': '2',
19: 1:      'question': '2',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': 'Fizz',
19: 1:      'question': '3',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': '4',
19: 1:      'question': '4',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': 'Buzz',
19: 1:      'question': '5',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': 'Fizz',
19: 1:      'question': '6',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': 'Muzz',
19: 1:      'question': '7',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': '8',
19: 1:      'question': '8',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': 'Fizz',
19: 1:      'question': '9',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': 'Buzz',
19: 1:      'question': '10',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': 'Duzz',
19: 1:      'question': '11',
19: 1:      'valid': true
19: 1:    },
19: 1:    {
19: 1:      'answer': 'Fizz',
19: 1:      'question': '12',
19: 1:      'valid': true
19: 1:    }
19: 1:  ],
19: 1:  'info': [
19: 1:    '✅f(1) = 1',
19: 1:    '✅f(2) = 2',
19: 1:    '✅f(3) = Fizz',
19: 1:    '✅f(4) = 4',
19: 1:    '✅f(5) = Buzz',
19: 1:    '✅f(6) = Fizz',
19: 1:    '✅f(7) = Muzz',
19: 1:    '✅f(8) = 8',
19: 1:    '✅f(9) = Fizz',
19: 1:    '✅f(10) = Buzz',
19: 1:    '✅f(11) = Duzz',
19: 1:    '✅f(12) = Fizz',
19: 1:    '❌f(13) = ??? != Cazz'
19: 1:  ],
19: 1:  'level': 1,
19: 1:  'nextQuestion': '13',
19: 1:  'questions': [
19: 1:    '1',
19: 1:    '2',
19: 1:    '3',
19: 1:    '4',
19: 1:    '5',
19: 1:    '6',
19: 1:    '7',
19: 1:    '8',
19: 1:    '9',
19: 1:    '10',
19: 1:    '11',
19: 1:    '12',
19: 1:    '13'
19: 1:  ]
19: 1:}
19: 1:Scores: 17
19: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz']')
19: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
20: 1:BoardData {
20: 1:  'description': [
20: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
20: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
20: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
20: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
20: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
20: 1:    'Please write optimized code without any duplication.',
20: 1:    'For divider 11 - the word must be 'Duzz'.',
20: 1:    'For divider 13 - the word must be 'Cazz'.',
20: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
20: 1:  ],
20: 1:  'expectedAnswer': 'Muzz',
20: 1:  'history': [
20: 1:    {
20: 1:      'answer': '1',
20: 1:      'question': '1',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': '2',
20: 1:      'question': '2',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': 'Fizz',
20: 1:      'question': '3',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': '4',
20: 1:      'question': '4',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': 'Buzz',
20: 1:      'question': '5',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': 'Fizz',
20: 1:      'question': '6',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': 'Muzz',
20: 1:      'question': '7',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': '8',
20: 1:      'question': '8',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': 'Fizz',
20: 1:      'question': '9',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': 'Buzz',
20: 1:      'question': '10',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': 'Duzz',
20: 1:      'question': '11',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': 'Fizz',
20: 1:      'question': '12',
20: 1:      'valid': true
20: 1:    },
20: 1:    {
20: 1:      'answer': 'Cazz',
20: 1:      'question': '13',
20: 1:      'valid': true
20: 1:    }
20: 1:  ],
20: 1:  'info': [
20: 1:    '✅f(1) = 1',
20: 1:    '✅f(2) = 2',
20: 1:    '✅f(3) = Fizz',
20: 1:    '✅f(4) = 4',
20: 1:    '✅f(5) = Buzz',
20: 1:    '✅f(6) = Fizz',
20: 1:    '✅f(7) = Muzz',
20: 1:    '✅f(8) = 8',
20: 1:    '✅f(9) = Fizz',
20: 1:    '✅f(10) = Buzz',
20: 1:    '✅f(11) = Duzz',
20: 1:    '✅f(12) = Fizz',
20: 1:    '✅f(13) = Cazz',
20: 1:    '❌f(14) = ??? != Muzz'
20: 1:  ],
20: 1:  'level': 1,
20: 1:  'nextQuestion': '14',
20: 1:  'questions': [
20: 1:    '1',
20: 1:    '2',
20: 1:    '3',
20: 1:    '4',
20: 1:    '5',
20: 1:    '6',
20: 1:    '7',
20: 1:    '8',
20: 1:    '9',
20: 1:    '10',
20: 1:    '11',
20: 1:    '12',
20: 1:    '13',
20: 1:    '14'
20: 1:  ]
20: 1:}
20: 1:Scores: 18
20: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz']')
20: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
21: 1:BoardData {
21: 1:  'description': [
21: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
21: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
21: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
21: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
21: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
21: 1:    'Please write optimized code without any duplication.',
21: 1:    'For divider 11 - the word must be 'Duzz'.',
21: 1:    'For divider 13 - the word must be 'Cazz'.',
21: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
21: 1:  ],
21: 1:  'expectedAnswer': 'FizzBuzz',
21: 1:  'history': [
21: 1:    {
21: 1:      'answer': '1',
21: 1:      'question': '1',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': '2',
21: 1:      'question': '2',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': 'Fizz',
21: 1:      'question': '3',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': '4',
21: 1:      'question': '4',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': 'Buzz',
21: 1:      'question': '5',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': 'Fizz',
21: 1:      'question': '6',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': 'Muzz',
21: 1:      'question': '7',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': '8',
21: 1:      'question': '8',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': 'Fizz',
21: 1:      'question': '9',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': 'Buzz',
21: 1:      'question': '10',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': 'Duzz',
21: 1:      'question': '11',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': 'Fizz',
21: 1:      'question': '12',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': 'Cazz',
21: 1:      'question': '13',
21: 1:      'valid': true
21: 1:    },
21: 1:    {
21: 1:      'answer': 'Muzz',
21: 1:      'question': '14',
21: 1:      'valid': true
21: 1:    }
21: 1:  ],
21: 1:  'info': [
21: 1:    '✅f(1) = 1',
21: 1:    '✅f(2) = 2',
21: 1:    '✅f(3) = Fizz',
21: 1:    '✅f(4) = 4',
21: 1:    '✅f(5) = Buzz',
21: 1:    '✅f(6) = Fizz',
21: 1:    '✅f(7) = Muzz',
21: 1:    '✅f(8) = 8',
21: 1:    '✅f(9) = Fizz',
21: 1:    '✅f(10) = Buzz',
21: 1:    '✅f(11) = Duzz',
21: 1:    '✅f(12) = Fizz',
21: 1:    '✅f(13) = Cazz',
21: 1:    '✅f(14) = Muzz',
21: 1:    '❌f(15) = ??? != FizzBuzz'
21: 1:  ],
21: 1:  'level': 1,
21: 1:  'nextQuestion': '15',
21: 1:  'questions': [
21: 1:    '1',
21: 1:    '2',
21: 1:    '3',
21: 1:    '4',
21: 1:    '5',
21: 1:    '6',
21: 1:    '7',
21: 1:    '8',
21: 1:    '9',
21: 1:    '10',
21: 1:    '11',
21: 1:    '12',
21: 1:    '13',
21: 1:    '14',
21: 1:    '15'
21: 1:  ]
21: 1:}
21: 1:Scores: 19
21: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz']')
21: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
22: 1:BoardData {
22: 1:  'description': [
22: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
22: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
22: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
22: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
22: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
22: 1:    'Please write optimized code without any duplication.',
22: 1:    'For divider 11 - the word must be 'Duzz'.',
22: 1:    'For divider 13 - the word must be 'Cazz'.',
22: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
22: 1:  ],
22: 1:  'expectedAnswer': '16',
22: 1:  'history': [
22: 1:    {
22: 1:      'answer': '1',
22: 1:      'question': '1',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': '2',
22: 1:      'question': '2',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'Fizz',
22: 1:      'question': '3',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': '4',
22: 1:      'question': '4',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'Buzz',
22: 1:      'question': '5',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'Fizz',
22: 1:      'question': '6',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'Muzz',
22: 1:      'question': '7',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': '8',
22: 1:      'question': '8',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'Fizz',
22: 1:      'question': '9',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'Buzz',
22: 1:      'question': '10',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'Duzz',
22: 1:      'question': '11',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'Fizz',
22: 1:      'question': '12',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'Cazz',
22: 1:      'question': '13',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'Muzz',
22: 1:      'question': '14',
22: 1:      'valid': true
22: 1:    },
22: 1:    {
22: 1:      'answer': 'FizzBuzz',
22: 1:      'question': '15',
22: 1:      'valid': true
22: 1:    }
22: 1:  ],
22: 1:  'info': [
22: 1:    '✅f(1) = 1',
22: 1:    '✅f(2) = 2',
22: 1:    '✅f(3) = Fizz',
22: 1:    '✅f(4) = 4',
22: 1:    '✅f(5) = Buzz',
22: 1:    '✅f(6) = Fizz',
22: 1:    '✅f(7) = Muzz',
22: 1:    '✅f(8) = 8',
22: 1:    '✅f(9) = Fizz',
22: 1:    '✅f(10) = Buzz',
22: 1:    '✅f(11) = Duzz',
22: 1:    '✅f(12) = Fizz',
22: 1:    '✅f(13) = Cazz',
22: 1:    '✅f(14) = Muzz',
22: 1:    '✅f(15) = FizzBuzz',
22: 1:    '❌f(16) = ??? != 16'
22: 1:  ],
22: 1:  'level': 1,
22: 1:  'nextQuestion': '16',
22: 1:  'questions': [
22: 1:    '1',
22: 1:    '2',
22: 1:    '3',
22: 1:    '4',
22: 1:    '5',
22: 1:    '6',
22: 1:    '7',
22: 1:    '8',
22: 1:    '9',
22: 1:    '10',
22: 1:    '11',
22: 1:    '12',
22: 1:    '13',
22: 1:    '14',
22: 1:    '15',
22: 1:    '16'
22: 1:  ]
22: 1:}
22: 1:Scores: 20
22: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16']')
22: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
23: 1:BoardData {
23: 1:  'description': [
23: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
23: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
23: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
23: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
23: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
23: 1:    'Please write optimized code without any duplication.',
23: 1:    'For divider 11 - the word must be 'Duzz'.',
23: 1:    'For divider 13 - the word must be 'Cazz'.',
23: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
23: 1:  ],
23: 1:  'expectedAnswer': '17',
23: 1:  'history': [
23: 1:    {
23: 1:      'answer': '1',
23: 1:      'question': '1',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': '2',
23: 1:      'question': '2',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'Fizz',
23: 1:      'question': '3',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': '4',
23: 1:      'question': '4',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'Buzz',
23: 1:      'question': '5',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'Fizz',
23: 1:      'question': '6',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'Muzz',
23: 1:      'question': '7',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': '8',
23: 1:      'question': '8',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'Fizz',
23: 1:      'question': '9',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'Buzz',
23: 1:      'question': '10',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'Duzz',
23: 1:      'question': '11',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'Fizz',
23: 1:      'question': '12',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'Cazz',
23: 1:      'question': '13',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'Muzz',
23: 1:      'question': '14',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': 'FizzBuzz',
23: 1:      'question': '15',
23: 1:      'valid': true
23: 1:    },
23: 1:    {
23: 1:      'answer': '16',
23: 1:      'question': '16',
23: 1:      'valid': true
23: 1:    }
23: 1:  ],
23: 1:  'info': [
23: 1:    '✅f(1) = 1',
23: 1:    '✅f(2) = 2',
23: 1:    '✅f(3) = Fizz',
23: 1:    '✅f(4) = 4',
23: 1:    '✅f(5) = Buzz',
23: 1:    '✅f(6) = Fizz',
23: 1:    '✅f(7) = Muzz',
23: 1:    '✅f(8) = 8',
23: 1:    '✅f(9) = Fizz',
23: 1:    '✅f(10) = Buzz',
23: 1:    '✅f(11) = Duzz',
23: 1:    '✅f(12) = Fizz',
23: 1:    '✅f(13) = Cazz',
23: 1:    '✅f(14) = Muzz',
23: 1:    '✅f(15) = FizzBuzz',
23: 1:    '✅f(16) = 16',
23: 1:    '❌f(17) = ??? != 17'
23: 1:  ],
23: 1:  'level': 1,
23: 1:  'nextQuestion': '17',
23: 1:  'questions': [
23: 1:    '1',
23: 1:    '2',
23: 1:    '3',
23: 1:    '4',
23: 1:    '5',
23: 1:    '6',
23: 1:    '7',
23: 1:    '8',
23: 1:    '9',
23: 1:    '10',
23: 1:    '11',
23: 1:    '12',
23: 1:    '13',
23: 1:    '14',
23: 1:    '15',
23: 1:    '16',
23: 1:    '17'
23: 1:  ]
23: 1:}
23: 1:Scores: 21
23: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17']')
23: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
24: 1:BoardData {
24: 1:  'description': [
24: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
24: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
24: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
24: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
24: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
24: 1:    'Please write optimized code without any duplication.',
24: 1:    'For divider 11 - the word must be 'Duzz'.',
24: 1:    'For divider 13 - the word must be 'Cazz'.',
24: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
24: 1:  ],
24: 1:  'expectedAnswer': 'FizzMuzz',
24: 1:  'history': [
24: 1:    {
24: 1:      'answer': '1',
24: 1:      'question': '1',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': '2',
24: 1:      'question': '2',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'Fizz',
24: 1:      'question': '3',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': '4',
24: 1:      'question': '4',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'Buzz',
24: 1:      'question': '5',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'Fizz',
24: 1:      'question': '6',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'Muzz',
24: 1:      'question': '7',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': '8',
24: 1:      'question': '8',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'Fizz',
24: 1:      'question': '9',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'Buzz',
24: 1:      'question': '10',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'Duzz',
24: 1:      'question': '11',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'Fizz',
24: 1:      'question': '12',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'Cazz',
24: 1:      'question': '13',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'Muzz',
24: 1:      'question': '14',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': 'FizzBuzz',
24: 1:      'question': '15',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': '16',
24: 1:      'question': '16',
24: 1:      'valid': true
24: 1:    },
24: 1:    {
24: 1:      'answer': '17',
24: 1:      'question': '17',
24: 1:      'valid': true
24: 1:    }
24: 1:  ],
24: 1:  'info': [
24: 1:    '✅f(1) = 1',
24: 1:    '✅f(2) = 2',
24: 1:    '✅f(3) = Fizz',
24: 1:    '✅f(4) = 4',
24: 1:    '✅f(5) = Buzz',
24: 1:    '✅f(6) = Fizz',
24: 1:    '✅f(7) = Muzz',
24: 1:    '✅f(8) = 8',
24: 1:    '✅f(9) = Fizz',
24: 1:    '✅f(10) = Buzz',
24: 1:    '✅f(11) = Duzz',
24: 1:    '✅f(12) = Fizz',
24: 1:    '✅f(13) = Cazz',
24: 1:    '✅f(14) = Muzz',
24: 1:    '✅f(15) = FizzBuzz',
24: 1:    '✅f(16) = 16',
24: 1:    '✅f(17) = 17',
24: 1:    '❌f(21) = ??? != FizzMuzz'
24: 1:  ],
24: 1:  'level': 1,
24: 1:  'nextQuestion': '21',
24: 1:  'questions': [
24: 1:    '1',
24: 1:    '2',
24: 1:    '3',
24: 1:    '4',
24: 1:    '5',
24: 1:    '6',
24: 1:    '7',
24: 1:    '8',
24: 1:    '9',
24: 1:    '10',
24: 1:    '11',
24: 1:    '12',
24: 1:    '13',
24: 1:    '14',
24: 1:    '15',
24: 1:    '16',
24: 1:    '17',
24: 1:    '21'
24: 1:  ]
24: 1:}
24: 1:Scores: 22
24: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz']')
24: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
25: 1:BoardData {
25: 1:  'description': [
25: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
25: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
25: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
25: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
25: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
25: 1:    'Please write optimized code without any duplication.',
25: 1:    'For divider 11 - the word must be 'Duzz'.',
25: 1:    'For divider 13 - the word must be 'Cazz'.',
25: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
25: 1:  ],
25: 1:  'expectedAnswer': 'FizzDuzz',
25: 1:  'history': [
25: 1:    {
25: 1:      'answer': '1',
25: 1:      'question': '1',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': '2',
25: 1:      'question': '2',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'Fizz',
25: 1:      'question': '3',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': '4',
25: 1:      'question': '4',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'Buzz',
25: 1:      'question': '5',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'Fizz',
25: 1:      'question': '6',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'Muzz',
25: 1:      'question': '7',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': '8',
25: 1:      'question': '8',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'Fizz',
25: 1:      'question': '9',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'Buzz',
25: 1:      'question': '10',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'Duzz',
25: 1:      'question': '11',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'Fizz',
25: 1:      'question': '12',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'Cazz',
25: 1:      'question': '13',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'Muzz',
25: 1:      'question': '14',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'FizzBuzz',
25: 1:      'question': '15',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': '16',
25: 1:      'question': '16',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': '17',
25: 1:      'question': '17',
25: 1:      'valid': true
25: 1:    },
25: 1:    {
25: 1:      'answer': 'FizzMuzz',
25: 1:      'question': '21',
25: 1:      'valid': true
25: 1:    }
25: 1:  ],
25: 1:  'info': [
25: 1:    '✅f(1) = 1',
25: 1:    '✅f(2) = 2',
25: 1:    '✅f(3) = Fizz',
25: 1:    '✅f(4) = 4',
25: 1:    '✅f(5) = Buzz',
25: 1:    '✅f(6) = Fizz',
25: 1:    '✅f(7) = Muzz',
25: 1:    '✅f(8) = 8',
25: 1:    '✅f(9) = Fizz',
25: 1:    '✅f(10) = Buzz',
25: 1:    '✅f(11) = Duzz',
25: 1:    '✅f(12) = Fizz',
25: 1:    '✅f(13) = Cazz',
25: 1:    '✅f(14) = Muzz',
25: 1:    '✅f(15) = FizzBuzz',
25: 1:    '✅f(16) = 16',
25: 1:    '✅f(17) = 17',
25: 1:    '✅f(21) = FizzMuzz',
25: 1:    '❌f(33) = ??? != FizzDuzz'
25: 1:  ],
25: 1:  'level': 1,
25: 1:  'nextQuestion': '33',
25: 1:  'questions': [
25: 1:    '1',
25: 1:    '2',
25: 1:    '3',
25: 1:    '4',
25: 1:    '5',
25: 1:    '6',
25: 1:    '7',
25: 1:    '8',
25: 1:    '9',
25: 1:    '10',
25: 1:    '11',
25: 1:    '12',
25: 1:    '13',
25: 1:    '14',
25: 1:    '15',
25: 1:    '16',
25: 1:    '17',
25: 1:    '21',
25: 1:    '33'
25: 1:  ]
25: 1:}
25: 1:Scores: 23
25: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz']')
25: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
26: 1:BoardData {
26: 1:  'description': [
26: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
26: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
26: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
26: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
26: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
26: 1:    'Please write optimized code without any duplication.',
26: 1:    'For divider 11 - the word must be 'Duzz'.',
26: 1:    'For divider 13 - the word must be 'Cazz'.',
26: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
26: 1:  ],
26: 1:  'expectedAnswer': 'BuzzMuzz',
26: 1:  'history': [
26: 1:    {
26: 1:      'answer': '1',
26: 1:      'question': '1',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': '2',
26: 1:      'question': '2',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'Fizz',
26: 1:      'question': '3',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': '4',
26: 1:      'question': '4',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'Buzz',
26: 1:      'question': '5',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'Fizz',
26: 1:      'question': '6',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'Muzz',
26: 1:      'question': '7',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': '8',
26: 1:      'question': '8',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'Fizz',
26: 1:      'question': '9',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'Buzz',
26: 1:      'question': '10',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'Duzz',
26: 1:      'question': '11',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'Fizz',
26: 1:      'question': '12',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'Cazz',
26: 1:      'question': '13',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'Muzz',
26: 1:      'question': '14',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'FizzBuzz',
26: 1:      'question': '15',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': '16',
26: 1:      'question': '16',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': '17',
26: 1:      'question': '17',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'FizzMuzz',
26: 1:      'question': '21',
26: 1:      'valid': true
26: 1:    },
26: 1:    {
26: 1:      'answer': 'FizzDuzz',
26: 1:      'question': '33',
26: 1:      'valid': true
26: 1:    }
26: 1:  ],
26: 1:  'info': [
26: 1:    '✅f(1) = 1',
26: 1:    '✅f(2) = 2',
26: 1:    '✅f(3) = Fizz',
26: 1:    '✅f(4) = 4',
26: 1:    '✅f(5) = Buzz',
26: 1:    '✅f(6) = Fizz',
26: 1:    '✅f(7) = Muzz',
26: 1:    '✅f(8) = 8',
26: 1:    '✅f(9) = Fizz',
26: 1:    '✅f(10) = Buzz',
26: 1:    '✅f(11) = Duzz',
26: 1:    '✅f(12) = Fizz',
26: 1:    '✅f(13) = Cazz',
26: 1:    '✅f(14) = Muzz',
26: 1:    '✅f(15) = FizzBuzz',
26: 1:    '✅f(16) = 16',
26: 1:    '✅f(17) = 17',
26: 1:    '✅f(21) = FizzMuzz',
26: 1:    '✅f(33) = FizzDuzz',
26: 1:    '❌f(35) = ??? != BuzzMuzz'
26: 1:  ],
26: 1:  'level': 1,
26: 1:  'nextQuestion': '35',
26: 1:  'questions': [
26: 1:    '1',
26: 1:    '2',
26: 1:    '3',
26: 1:    '4',
26: 1:    '5',
26: 1:    '6',
26: 1:    '7',
26: 1:    '8',
26: 1:    '9',
26: 1:    '10',
26: 1:    '11',
26: 1:    '12',
26: 1:    '13',
26: 1:    '14',
26: 1:    '15',
26: 1:    '16',
26: 1:    '17',
26: 1:    '21',
26: 1:    '33',
26: 1:    '35'
26: 1:  ]
26: 1:}
26: 1:Scores: 24
26: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz']')
26: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
27: 1:BoardData {
27: 1:  'description': [
27: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
27: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
27: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
27: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
27: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
27: 1:    'Please write optimized code without any duplication.',
27: 1:    'For divider 11 - the word must be 'Duzz'.',
27: 1:    'For divider 13 - the word must be 'Cazz'.',
27: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
27: 1:  ],
27: 1:  'expectedAnswer': 'FizzCazz',
27: 1:  'history': [
27: 1:    {
27: 1:      'answer': '1',
27: 1:      'question': '1',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': '2',
27: 1:      'question': '2',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'Fizz',
27: 1:      'question': '3',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': '4',
27: 1:      'question': '4',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'Buzz',
27: 1:      'question': '5',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'Fizz',
27: 1:      'question': '6',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'Muzz',
27: 1:      'question': '7',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': '8',
27: 1:      'question': '8',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'Fizz',
27: 1:      'question': '9',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'Buzz',
27: 1:      'question': '10',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'Duzz',
27: 1:      'question': '11',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'Fizz',
27: 1:      'question': '12',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'Cazz',
27: 1:      'question': '13',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'Muzz',
27: 1:      'question': '14',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'FizzBuzz',
27: 1:      'question': '15',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': '16',
27: 1:      'question': '16',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': '17',
27: 1:      'question': '17',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'FizzMuzz',
27: 1:      'question': '21',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'FizzDuzz',
27: 1:      'question': '33',
27: 1:      'valid': true
27: 1:    },
27: 1:    {
27: 1:      'answer': 'BuzzMuzz',
27: 1:      'question': '35',
27: 1:      'valid': true
27: 1:    }
27: 1:  ],
27: 1:  'info': [
27: 1:    '✅f(1) = 1',
27: 1:    '✅f(2) = 2',
27: 1:    '✅f(3) = Fizz',
27: 1:    '✅f(4) = 4',
27: 1:    '✅f(5) = Buzz',
27: 1:    '✅f(6) = Fizz',
27: 1:    '✅f(7) = Muzz',
27: 1:    '✅f(8) = 8',
27: 1:    '✅f(9) = Fizz',
27: 1:    '✅f(10) = Buzz',
27: 1:    '✅f(11) = Duzz',
27: 1:    '✅f(12) = Fizz',
27: 1:    '✅f(13) = Cazz',
27: 1:    '✅f(14) = Muzz',
27: 1:    '✅f(15) = FizzBuzz',
27: 1:    '✅f(16) = 16',
27: 1:    '✅f(17) = 17',
27: 1:    '✅f(21) = FizzMuzz',
27: 1:    '✅f(33) = FizzDuzz',
27: 1:    '✅f(35) = BuzzMuzz',
27: 1:    '❌f(39) = ??? != FizzCazz'
27: 1:  ],
27: 1:  'level': 1,
27: 1:  'nextQuestion': '39',
27: 1:  'questions': [
27: 1:    '1',
27: 1:    '2',
27: 1:    '3',
27: 1:    '4',
27: 1:    '5',
27: 1:    '6',
27: 1:    '7',
27: 1:    '8',
27: 1:    '9',
27: 1:    '10',
27: 1:    '11',
27: 1:    '12',
27: 1:    '13',
27: 1:    '14',
27: 1:    '15',
27: 1:    '16',
27: 1:    '17',
27: 1:    '21',
27: 1:    '33',
27: 1:    '35',
27: 1:    '39'
27: 1:  ]
27: 1:}
27: 1:Scores: 25
27: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz']')
27: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
28: 1:BoardData {
28: 1:  'description': [
28: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
28: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
28: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
28: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
28: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
28: 1:    'Please write optimized code without any duplication.',
28: 1:    'For divider 11 - the word must be 'Duzz'.',
28: 1:    'For divider 13 - the word must be 'Cazz'.',
28: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
28: 1:  ],
28: 1:  'expectedAnswer': 'Muzz',
28: 1:  'history': [
28: 1:    {
28: 1:      'answer': '1',
28: 1:      'question': '1',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': '2',
28: 1:      'question': '2',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Fizz',
28: 1:      'question': '3',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': '4',
28: 1:      'question': '4',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Buzz',
28: 1:      'question': '5',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Fizz',
28: 1:      'question': '6',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Muzz',
28: 1:      'question': '7',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': '8',
28: 1:      'question': '8',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Fizz',
28: 1:      'question': '9',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Buzz',
28: 1:      'question': '10',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Duzz',
28: 1:      'question': '11',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Fizz',
28: 1:      'question': '12',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Cazz',
28: 1:      'question': '13',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'Muzz',
28: 1:      'question': '14',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'FizzBuzz',
28: 1:      'question': '15',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': '16',
28: 1:      'question': '16',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': '17',
28: 1:      'question': '17',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'FizzMuzz',
28: 1:      'question': '21',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'FizzDuzz',
28: 1:      'question': '33',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'BuzzMuzz',
28: 1:      'question': '35',
28: 1:      'valid': true
28: 1:    },
28: 1:    {
28: 1:      'answer': 'FizzCazz',
28: 1:      'question': '39',
28: 1:      'valid': true
28: 1:    }
28: 1:  ],
28: 1:  'info': [
28: 1:    '✅f(1) = 1',
28: 1:    '✅f(2) = 2',
28: 1:    '✅f(3) = Fizz',
28: 1:    '✅f(4) = 4',
28: 1:    '✅f(5) = Buzz',
28: 1:    '✅f(6) = Fizz',
28: 1:    '✅f(7) = Muzz',
28: 1:    '✅f(8) = 8',
28: 1:    '✅f(9) = Fizz',
28: 1:    '✅f(10) = Buzz',
28: 1:    '✅f(11) = Duzz',
28: 1:    '✅f(12) = Fizz',
28: 1:    '✅f(13) = Cazz',
28: 1:    '✅f(14) = Muzz',
28: 1:    '✅f(15) = FizzBuzz',
28: 1:    '✅f(16) = 16',
28: 1:    '✅f(17) = 17',
28: 1:    '✅f(21) = FizzMuzz',
28: 1:    '✅f(33) = FizzDuzz',
28: 1:    '✅f(35) = BuzzMuzz',
28: 1:    '✅f(39) = FizzCazz',
28: 1:    '❌f(49) = ??? != Muzz'
28: 1:  ],
28: 1:  'level': 1,
28: 1:  'nextQuestion': '49',
28: 1:  'questions': [
28: 1:    '1',
28: 1:    '2',
28: 1:    '3',
28: 1:    '4',
28: 1:    '5',
28: 1:    '6',
28: 1:    '7',
28: 1:    '8',
28: 1:    '9',
28: 1:    '10',
28: 1:    '11',
28: 1:    '12',
28: 1:    '13',
28: 1:    '14',
28: 1:    '15',
28: 1:    '16',
28: 1:    '17',
28: 1:    '21',
28: 1:    '33',
28: 1:    '35',
28: 1:    '39',
28: 1:    '49'
28: 1:  ]
28: 1:}
28: 1:Scores: 26
28: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz']')
28: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
29: 1:BoardData {
29: 1:  'description': [
29: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
29: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
29: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
29: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
29: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
29: 1:    'Please write optimized code without any duplication.',
29: 1:    'For divider 11 - the word must be 'Duzz'.',
29: 1:    'For divider 13 - the word must be 'Cazz'.',
29: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
29: 1:  ],
29: 1:  'expectedAnswer': 'BuzzDuzz',
29: 1:  'history': [
29: 1:    {
29: 1:      'answer': '1',
29: 1:      'question': '1',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': '2',
29: 1:      'question': '2',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Fizz',
29: 1:      'question': '3',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': '4',
29: 1:      'question': '4',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Buzz',
29: 1:      'question': '5',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Fizz',
29: 1:      'question': '6',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Muzz',
29: 1:      'question': '7',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': '8',
29: 1:      'question': '8',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Fizz',
29: 1:      'question': '9',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Buzz',
29: 1:      'question': '10',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Duzz',
29: 1:      'question': '11',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Fizz',
29: 1:      'question': '12',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Cazz',
29: 1:      'question': '13',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Muzz',
29: 1:      'question': '14',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'FizzBuzz',
29: 1:      'question': '15',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': '16',
29: 1:      'question': '16',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': '17',
29: 1:      'question': '17',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'FizzMuzz',
29: 1:      'question': '21',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'FizzDuzz',
29: 1:      'question': '33',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'BuzzMuzz',
29: 1:      'question': '35',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'FizzCazz',
29: 1:      'question': '39',
29: 1:      'valid': true
29: 1:    },
29: 1:    {
29: 1:      'answer': 'Muzz',
29: 1:      'question': '49',
29: 1:      'valid': true
29: 1:    }
29: 1:  ],
29: 1:  'info': [
29: 1:    '✅f(1) = 1',
29: 1:    '✅f(2) = 2',
29: 1:    '✅f(3) = Fizz',
29: 1:    '✅f(4) = 4',
29: 1:    '✅f(5) = Buzz',
29: 1:    '✅f(6) = Fizz',
29: 1:    '✅f(7) = Muzz',
29: 1:    '✅f(8) = 8',
29: 1:    '✅f(9) = Fizz',
29: 1:    '✅f(10) = Buzz',
29: 1:    '✅f(11) = Duzz',
29: 1:    '✅f(12) = Fizz',
29: 1:    '✅f(13) = Cazz',
29: 1:    '✅f(14) = Muzz',
29: 1:    '✅f(15) = FizzBuzz',
29: 1:    '✅f(16) = 16',
29: 1:    '✅f(17) = 17',
29: 1:    '✅f(21) = FizzMuzz',
29: 1:    '✅f(33) = FizzDuzz',
29: 1:    '✅f(35) = BuzzMuzz',
29: 1:    '✅f(39) = FizzCazz',
29: 1:    '✅f(49) = Muzz',
29: 1:    '❌f(55) = ??? != BuzzDuzz'
29: 1:  ],
29: 1:  'level': 1,
29: 1:  'nextQuestion': '55',
29: 1:  'questions': [
29: 1:    '1',
29: 1:    '2',
29: 1:    '3',
29: 1:    '4',
29: 1:    '5',
29: 1:    '6',
29: 1:    '7',
29: 1:    '8',
29: 1:    '9',
29: 1:    '10',
29: 1:    '11',
29: 1:    '12',
29: 1:    '13',
29: 1:    '14',
29: 1:    '15',
29: 1:    '16',
29: 1:    '17',
29: 1:    '21',
29: 1:    '33',
29: 1:    '35',
29: 1:    '39',
29: 1:    '49',
29: 1:    '55'
29: 1:  ]
29: 1:}
29: 1:Scores: 27
29: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz']')
29: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
30: 1:BoardData {
30: 1:  'description': [
30: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
30: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
30: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
30: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
30: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
30: 1:    'Please write optimized code without any duplication.',
30: 1:    'For divider 11 - the word must be 'Duzz'.',
30: 1:    'For divider 13 - the word must be 'Cazz'.',
30: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
30: 1:  ],
30: 1:  'expectedAnswer': 'BuzzCazz',
30: 1:  'history': [
30: 1:    {
30: 1:      'answer': '1',
30: 1:      'question': '1',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': '2',
30: 1:      'question': '2',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Fizz',
30: 1:      'question': '3',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': '4',
30: 1:      'question': '4',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Buzz',
30: 1:      'question': '5',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Fizz',
30: 1:      'question': '6',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Muzz',
30: 1:      'question': '7',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': '8',
30: 1:      'question': '8',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Fizz',
30: 1:      'question': '9',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Buzz',
30: 1:      'question': '10',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Duzz',
30: 1:      'question': '11',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Fizz',
30: 1:      'question': '12',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Cazz',
30: 1:      'question': '13',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Muzz',
30: 1:      'question': '14',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'FizzBuzz',
30: 1:      'question': '15',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': '16',
30: 1:      'question': '16',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': '17',
30: 1:      'question': '17',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'FizzMuzz',
30: 1:      'question': '21',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'FizzDuzz',
30: 1:      'question': '33',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'BuzzMuzz',
30: 1:      'question': '35',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'FizzCazz',
30: 1:      'question': '39',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'Muzz',
30: 1:      'question': '49',
30: 1:      'valid': true
30: 1:    },
30: 1:    {
30: 1:      'answer': 'BuzzDuzz',
30: 1:      'question': '55',
30: 1:      'valid': true
30: 1:    }
30: 1:  ],
30: 1:  'info': [
30: 1:    '✅f(1) = 1',
30: 1:    '✅f(2) = 2',
30: 1:    '✅f(3) = Fizz',
30: 1:    '✅f(4) = 4',
30: 1:    '✅f(5) = Buzz',
30: 1:    '✅f(6) = Fizz',
30: 1:    '✅f(7) = Muzz',
30: 1:    '✅f(8) = 8',
30: 1:    '✅f(9) = Fizz',
30: 1:    '✅f(10) = Buzz',
30: 1:    '✅f(11) = Duzz',
30: 1:    '✅f(12) = Fizz',
30: 1:    '✅f(13) = Cazz',
30: 1:    '✅f(14) = Muzz',
30: 1:    '✅f(15) = FizzBuzz',
30: 1:    '✅f(16) = 16',
30: 1:    '✅f(17) = 17',
30: 1:    '✅f(21) = FizzMuzz',
30: 1:    '✅f(33) = FizzDuzz',
30: 1:    '✅f(35) = BuzzMuzz',
30: 1:    '✅f(39) = FizzCazz',
30: 1:    '✅f(49) = Muzz',
30: 1:    '✅f(55) = BuzzDuzz',
30: 1:    '❌f(65) = ??? != BuzzCazz'
30: 1:  ],
30: 1:  'level': 1,
30: 1:  'nextQuestion': '65',
30: 1:  'questions': [
30: 1:    '1',
30: 1:    '2',
30: 1:    '3',
30: 1:    '4',
30: 1:    '5',
30: 1:    '6',
30: 1:    '7',
30: 1:    '8',
30: 1:    '9',
30: 1:    '10',
30: 1:    '11',
30: 1:    '12',
30: 1:    '13',
30: 1:    '14',
30: 1:    '15',
30: 1:    '16',
30: 1:    '17',
30: 1:    '21',
30: 1:    '33',
30: 1:    '35',
30: 1:    '39',
30: 1:    '49',
30: 1:    '55',
30: 1:    '65'
30: 1:  ]
30: 1:}
30: 1:Scores: 28
30: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz']')
30: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
31: 1:BoardData {
31: 1:  'description': [
31: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
31: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
31: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
31: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
31: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
31: 1:    'Please write optimized code without any duplication.',
31: 1:    'For divider 11 - the word must be 'Duzz'.',
31: 1:    'For divider 13 - the word must be 'Cazz'.',
31: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
31: 1:  ],
31: 1:  'expectedAnswer': 'MuzzDuzz',
31: 1:  'history': [
31: 1:    {
31: 1:      'answer': '1',
31: 1:      'question': '1',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': '2',
31: 1:      'question': '2',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Fizz',
31: 1:      'question': '3',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': '4',
31: 1:      'question': '4',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Buzz',
31: 1:      'question': '5',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Fizz',
31: 1:      'question': '6',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Muzz',
31: 1:      'question': '7',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': '8',
31: 1:      'question': '8',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Fizz',
31: 1:      'question': '9',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Buzz',
31: 1:      'question': '10',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Duzz',
31: 1:      'question': '11',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Fizz',
31: 1:      'question': '12',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Cazz',
31: 1:      'question': '13',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Muzz',
31: 1:      'question': '14',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'FizzBuzz',
31: 1:      'question': '15',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': '16',
31: 1:      'question': '16',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': '17',
31: 1:      'question': '17',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'FizzMuzz',
31: 1:      'question': '21',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'FizzDuzz',
31: 1:      'question': '33',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'BuzzMuzz',
31: 1:      'question': '35',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'FizzCazz',
31: 1:      'question': '39',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'Muzz',
31: 1:      'question': '49',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'BuzzDuzz',
31: 1:      'question': '55',
31: 1:      'valid': true
31: 1:    },
31: 1:    {
31: 1:      'answer': 'BuzzCazz',
31: 1:      'question': '65',
31: 1:      'valid': true
31: 1:    }
31: 1:  ],
31: 1:  'info': [
31: 1:    '✅f(1) = 1',
31: 1:    '✅f(2) = 2',
31: 1:    '✅f(3) = Fizz',
31: 1:    '✅f(4) = 4',
31: 1:    '✅f(5) = Buzz',
31: 1:    '✅f(6) = Fizz',
31: 1:    '✅f(7) = Muzz',
31: 1:    '✅f(8) = 8',
31: 1:    '✅f(9) = Fizz',
31: 1:    '✅f(10) = Buzz',
31: 1:    '✅f(11) = Duzz',
31: 1:    '✅f(12) = Fizz',
31: 1:    '✅f(13) = Cazz',
31: 1:    '✅f(14) = Muzz',
31: 1:    '✅f(15) = FizzBuzz',
31: 1:    '✅f(16) = 16',
31: 1:    '✅f(17) = 17',
31: 1:    '✅f(21) = FizzMuzz',
31: 1:    '✅f(33) = FizzDuzz',
31: 1:    '✅f(35) = BuzzMuzz',
31: 1:    '✅f(39) = FizzCazz',
31: 1:    '✅f(49) = Muzz',
31: 1:    '✅f(55) = BuzzDuzz',
31: 1:    '✅f(65) = BuzzCazz',
31: 1:    '❌f(77) = ??? != MuzzDuzz'
31: 1:  ],
31: 1:  'level': 1,
31: 1:  'nextQuestion': '77',
31: 1:  'questions': [
31: 1:    '1',
31: 1:    '2',
31: 1:    '3',
31: 1:    '4',
31: 1:    '5',
31: 1:    '6',
31: 1:    '7',
31: 1:    '8',
31: 1:    '9',
31: 1:    '10',
31: 1:    '11',
31: 1:    '12',
31: 1:    '13',
31: 1:    '14',
31: 1:    '15',
31: 1:    '16',
31: 1:    '17',
31: 1:    '21',
31: 1:    '33',
31: 1:    '35',
31: 1:    '39',
31: 1:    '49',
31: 1:    '55',
31: 1:    '65',
31: 1:    '77'
31: 1:  ]
31: 1:}
31: 1:Scores: 29
31: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz']')
31: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
32: 1:BoardData {
32: 1:  'description': [
32: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
32: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
32: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
32: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
32: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
32: 1:    'Please write optimized code without any duplication.',
32: 1:    'For divider 11 - the word must be 'Duzz'.',
32: 1:    'For divider 13 - the word must be 'Cazz'.',
32: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
32: 1:  ],
32: 1:  'expectedAnswer': 'MuzzCazz',
32: 1:  'history': [
32: 1:    {
32: 1:      'answer': '1',
32: 1:      'question': '1',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': '2',
32: 1:      'question': '2',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Fizz',
32: 1:      'question': '3',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': '4',
32: 1:      'question': '4',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Buzz',
32: 1:      'question': '5',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Fizz',
32: 1:      'question': '6',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Muzz',
32: 1:      'question': '7',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': '8',
32: 1:      'question': '8',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Fizz',
32: 1:      'question': '9',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Buzz',
32: 1:      'question': '10',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Duzz',
32: 1:      'question': '11',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Fizz',
32: 1:      'question': '12',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Cazz',
32: 1:      'question': '13',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Muzz',
32: 1:      'question': '14',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'FizzBuzz',
32: 1:      'question': '15',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': '16',
32: 1:      'question': '16',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': '17',
32: 1:      'question': '17',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'FizzMuzz',
32: 1:      'question': '21',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'FizzDuzz',
32: 1:      'question': '33',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'BuzzMuzz',
32: 1:      'question': '35',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'FizzCazz',
32: 1:      'question': '39',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'Muzz',
32: 1:      'question': '49',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'BuzzDuzz',
32: 1:      'question': '55',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'BuzzCazz',
32: 1:      'question': '65',
32: 1:      'valid': true
32: 1:    },
32: 1:    {
32: 1:      'answer': 'MuzzDuzz',
32: 1:      'question': '77',
32: 1:      'valid': true
32: 1:    }
32: 1:  ],
32: 1:  'info': [
32: 1:    '✅f(1) = 1',
32: 1:    '✅f(2) = 2',
32: 1:    '✅f(3) = Fizz',
32: 1:    '✅f(4) = 4',
32: 1:    '✅f(5) = Buzz',
32: 1:    '✅f(6) = Fizz',
32: 1:    '✅f(7) = Muzz',
32: 1:    '✅f(8) = 8',
32: 1:    '✅f(9) = Fizz',
32: 1:    '✅f(10) = Buzz',
32: 1:    '✅f(11) = Duzz',
32: 1:    '✅f(12) = Fizz',
32: 1:    '✅f(13) = Cazz',
32: 1:    '✅f(14) = Muzz',
32: 1:    '✅f(15) = FizzBuzz',
32: 1:    '✅f(16) = 16',
32: 1:    '✅f(17) = 17',
32: 1:    '✅f(21) = FizzMuzz',
32: 1:    '✅f(33) = FizzDuzz',
32: 1:    '✅f(35) = BuzzMuzz',
32: 1:    '✅f(39) = FizzCazz',
32: 1:    '✅f(49) = Muzz',
32: 1:    '✅f(55) = BuzzDuzz',
32: 1:    '✅f(65) = BuzzCazz',
32: 1:    '✅f(77) = MuzzDuzz',
32: 1:    '❌f(91) = ??? != MuzzCazz'
32: 1:  ],
32: 1:  'level': 1,
32: 1:  'nextQuestion': '91',
32: 1:  'questions': [
32: 1:    '1',
32: 1:    '2',
32: 1:    '3',
32: 1:    '4',
32: 1:    '5',
32: 1:    '6',
32: 1:    '7',
32: 1:    '8',
32: 1:    '9',
32: 1:    '10',
32: 1:    '11',
32: 1:    '12',
32: 1:    '13',
32: 1:    '14',
32: 1:    '15',
32: 1:    '16',
32: 1:    '17',
32: 1:    '21',
32: 1:    '33',
32: 1:    '35',
32: 1:    '39',
32: 1:    '49',
32: 1:    '55',
32: 1:    '65',
32: 1:    '77',
32: 1:    '91'
32: 1:  ]
32: 1:}
32: 1:Scores: 30
32: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz']')
32: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
33: 1:BoardData {
33: 1:  'description': [
33: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
33: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
33: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
33: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
33: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
33: 1:    'Please write optimized code without any duplication.',
33: 1:    'For divider 11 - the word must be 'Duzz'.',
33: 1:    'For divider 13 - the word must be 'Cazz'.',
33: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
33: 1:  ],
33: 1:  'expectedAnswer': 'FizzBuzzMuzz',
33: 1:  'history': [
33: 1:    {
33: 1:      'answer': '1',
33: 1:      'question': '1',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': '2',
33: 1:      'question': '2',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'Fizz',
33: 1:      'question': '3',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': '4',
33: 1:      'question': '4',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'Buzz',
33: 1:      'question': '5',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'Fizz',
33: 1:      'question': '6',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'Muzz',
33: 1:      'question': '7',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': '8',
33: 1:      'question': '8',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'Fizz',
33: 1:      'question': '9',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'Buzz',
33: 1:      'question': '10',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'Duzz',
33: 1:      'question': '11',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'Fizz',
33: 1:      'question': '12',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'Cazz',
33: 1:      'question': '13',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'Muzz',
33: 1:      'question': '14',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'FizzBuzz',
33: 1:      'question': '15',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': '16',
33: 1:      'question': '16',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': '17',
33: 1:      'question': '17',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'FizzMuzz',
33: 1:      'question': '21',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'FizzDuzz',
33: 1:      'question': '33',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'BuzzMuzz',
33: 1:      'question': '35',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'FizzCazz',
33: 1:      'question': '39',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'Muzz',
33: 1:      'question': '49',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'BuzzDuzz',
33: 1:      'question': '55',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'BuzzCazz',
33: 1:      'question': '65',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'MuzzDuzz',
33: 1:      'question': '77',
33: 1:      'valid': true
33: 1:    },
33: 1:    {
33: 1:      'answer': 'MuzzCazz',
33: 1:      'question': '91',
33: 1:      'valid': true
33: 1:    }
33: 1:  ],
33: 1:  'info': [
33: 1:    '✅f(1) = 1',
33: 1:    '✅f(2) = 2',
33: 1:    '✅f(3) = Fizz',
33: 1:    '✅f(4) = 4',
33: 1:    '✅f(5) = Buzz',
33: 1:    '✅f(6) = Fizz',
33: 1:    '✅f(7) = Muzz',
33: 1:    '✅f(8) = 8',
33: 1:    '✅f(9) = Fizz',
33: 1:    '✅f(10) = Buzz',
33: 1:    '✅f(11) = Duzz',
33: 1:    '✅f(12) = Fizz',
33: 1:    '✅f(13) = Cazz',
33: 1:    '✅f(14) = Muzz',
33: 1:    '✅f(15) = FizzBuzz',
33: 1:    '✅f(16) = 16',
33: 1:    '✅f(17) = 17',
33: 1:    '✅f(21) = FizzMuzz',
33: 1:    '✅f(33) = FizzDuzz',
33: 1:    '✅f(35) = BuzzMuzz',
33: 1:    '✅f(39) = FizzCazz',
33: 1:    '✅f(49) = Muzz',
33: 1:    '✅f(55) = BuzzDuzz',
33: 1:    '✅f(65) = BuzzCazz',
33: 1:    '✅f(77) = MuzzDuzz',
33: 1:    '✅f(91) = MuzzCazz',
33: 1:    '❌f(105) = ??? != FizzBuzzMuzz'
33: 1:  ],
33: 1:  'level': 1,
33: 1:  'nextQuestion': '105',
33: 1:  'questions': [
33: 1:    '1',
33: 1:    '2',
33: 1:    '3',
33: 1:    '4',
33: 1:    '5',
33: 1:    '6',
33: 1:    '7',
33: 1:    '8',
33: 1:    '9',
33: 1:    '10',
33: 1:    '11',
33: 1:    '12',
33: 1:    '13',
33: 1:    '14',
33: 1:    '15',
33: 1:    '16',
33: 1:    '17',
33: 1:    '21',
33: 1:    '33',
33: 1:    '35',
33: 1:    '39',
33: 1:    '49',
33: 1:    '55',
33: 1:    '65',
33: 1:    '77',
33: 1:    '91',
33: 1:    '105'
33: 1:  ]
33: 1:}
33: 1:Scores: 31
33: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz']')
33: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
34: 1:BoardData {
34: 1:  'description': [
34: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
34: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
34: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
34: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
34: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
34: 1:    'Please write optimized code without any duplication.',
34: 1:    'For divider 11 - the word must be 'Duzz'.',
34: 1:    'For divider 13 - the word must be 'Cazz'.',
34: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
34: 1:  ],
34: 1:  'expectedAnswer': 'FizzBuzzDuzz',
34: 1:  'history': [
34: 1:    {
34: 1:      'answer': '1',
34: 1:      'question': '1',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': '2',
34: 1:      'question': '2',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'Fizz',
34: 1:      'question': '3',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': '4',
34: 1:      'question': '4',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'Buzz',
34: 1:      'question': '5',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'Fizz',
34: 1:      'question': '6',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'Muzz',
34: 1:      'question': '7',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': '8',
34: 1:      'question': '8',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'Fizz',
34: 1:      'question': '9',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'Buzz',
34: 1:      'question': '10',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'Duzz',
34: 1:      'question': '11',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'Fizz',
34: 1:      'question': '12',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'Cazz',
34: 1:      'question': '13',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'Muzz',
34: 1:      'question': '14',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'FizzBuzz',
34: 1:      'question': '15',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': '16',
34: 1:      'question': '16',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': '17',
34: 1:      'question': '17',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'FizzMuzz',
34: 1:      'question': '21',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'FizzDuzz',
34: 1:      'question': '33',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'BuzzMuzz',
34: 1:      'question': '35',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'FizzCazz',
34: 1:      'question': '39',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'Muzz',
34: 1:      'question': '49',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'BuzzDuzz',
34: 1:      'question': '55',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'BuzzCazz',
34: 1:      'question': '65',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'MuzzDuzz',
34: 1:      'question': '77',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'MuzzCazz',
34: 1:      'question': '91',
34: 1:      'valid': true
34: 1:    },
34: 1:    {
34: 1:      'answer': 'FizzBuzzMuzz',
34: 1:      'question': '105',
34: 1:      'valid': true
34: 1:    }
34: 1:  ],
34: 1:  'info': [
34: 1:    '✅f(1) = 1',
34: 1:    '✅f(2) = 2',
34: 1:    '✅f(3) = Fizz',
34: 1:    '✅f(4) = 4',
34: 1:    '✅f(5) = Buzz',
34: 1:    '✅f(6) = Fizz',
34: 1:    '✅f(7) = Muzz',
34: 1:    '✅f(8) = 8',
34: 1:    '✅f(9) = Fizz',
34: 1:    '✅f(10) = Buzz',
34: 1:    '✅f(11) = Duzz',
34: 1:    '✅f(12) = Fizz',
34: 1:    '✅f(13) = Cazz',
34: 1:    '✅f(14) = Muzz',
34: 1:    '✅f(15) = FizzBuzz',
34: 1:    '✅f(16) = 16',
34: 1:    '✅f(17) = 17',
34: 1:    '✅f(21) = FizzMuzz',
34: 1:    '✅f(33) = FizzDuzz',
34: 1:    '✅f(35) = BuzzMuzz',
34: 1:    '✅f(39) = FizzCazz',
34: 1:    '✅f(49) = Muzz',
34: 1:    '✅f(55) = BuzzDuzz',
34: 1:    '✅f(65) = BuzzCazz',
34: 1:    '✅f(77) = MuzzDuzz',
34: 1:    '✅f(91) = MuzzCazz',
34: 1:    '✅f(105) = FizzBuzzMuzz',
34: 1:    '❌f(165) = ??? != FizzBuzzDuzz'
34: 1:  ],
34: 1:  'level': 1,
34: 1:  'nextQuestion': '165',
34: 1:  'questions': [
34: 1:    '1',
34: 1:    '2',
34: 1:    '3',
34: 1:    '4',
34: 1:    '5',
34: 1:    '6',
34: 1:    '7',
34: 1:    '8',
34: 1:    '9',
34: 1:    '10',
34: 1:    '11',
34: 1:    '12',
34: 1:    '13',
34: 1:    '14',
34: 1:    '15',
34: 1:    '16',
34: 1:    '17',
34: 1:    '21',
34: 1:    '33',
34: 1:    '35',
34: 1:    '39',
34: 1:    '49',
34: 1:    '55',
34: 1:    '65',
34: 1:    '77',
34: 1:    '91',
34: 1:    '105',
34: 1:    '165'
34: 1:  ]
34: 1:}
34: 1:Scores: 32
34: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz', 'FizzBuzzDuzz']')
34: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
35: 1:BoardData {
35: 1:  'description': [
35: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
35: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
35: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
35: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
35: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
35: 1:    'Please write optimized code without any duplication.',
35: 1:    'For divider 11 - the word must be 'Duzz'.',
35: 1:    'For divider 13 - the word must be 'Cazz'.',
35: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
35: 1:  ],
35: 1:  'expectedAnswer': 'FizzBuzzCazz',
35: 1:  'history': [
35: 1:    {
35: 1:      'answer': '1',
35: 1:      'question': '1',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': '2',
35: 1:      'question': '2',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'Fizz',
35: 1:      'question': '3',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': '4',
35: 1:      'question': '4',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'Buzz',
35: 1:      'question': '5',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'Fizz',
35: 1:      'question': '6',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'Muzz',
35: 1:      'question': '7',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': '8',
35: 1:      'question': '8',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'Fizz',
35: 1:      'question': '9',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'Buzz',
35: 1:      'question': '10',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'Duzz',
35: 1:      'question': '11',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'Fizz',
35: 1:      'question': '12',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'Cazz',
35: 1:      'question': '13',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'Muzz',
35: 1:      'question': '14',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'FizzBuzz',
35: 1:      'question': '15',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': '16',
35: 1:      'question': '16',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': '17',
35: 1:      'question': '17',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'FizzMuzz',
35: 1:      'question': '21',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'FizzDuzz',
35: 1:      'question': '33',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'BuzzMuzz',
35: 1:      'question': '35',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'FizzCazz',
35: 1:      'question': '39',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'Muzz',
35: 1:      'question': '49',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'BuzzDuzz',
35: 1:      'question': '55',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'BuzzCazz',
35: 1:      'question': '65',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'MuzzDuzz',
35: 1:      'question': '77',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'MuzzCazz',
35: 1:      'question': '91',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'FizzBuzzMuzz',
35: 1:      'question': '105',
35: 1:      'valid': true
35: 1:    },
35: 1:    {
35: 1:      'answer': 'FizzBuzzDuzz',
35: 1:      'question': '165',
35: 1:      'valid': true
35: 1:    }
35: 1:  ],
35: 1:  'info': [
35: 1:    '✅f(1) = 1',
35: 1:    '✅f(2) = 2',
35: 1:    '✅f(3) = Fizz',
35: 1:    '✅f(4) = 4',
35: 1:    '✅f(5) = Buzz',
35: 1:    '✅f(6) = Fizz',
35: 1:    '✅f(7) = Muzz',
35: 1:    '✅f(8) = 8',
35: 1:    '✅f(9) = Fizz',
35: 1:    '✅f(10) = Buzz',
35: 1:    '✅f(11) = Duzz',
35: 1:    '✅f(12) = Fizz',
35: 1:    '✅f(13) = Cazz',
35: 1:    '✅f(14) = Muzz',
35: 1:    '✅f(15) = FizzBuzz',
35: 1:    '✅f(16) = 16',
35: 1:    '✅f(17) = 17',
35: 1:    '✅f(21) = FizzMuzz',
35: 1:    '✅f(33) = FizzDuzz',
35: 1:    '✅f(35) = BuzzMuzz',
35: 1:    '✅f(39) = FizzCazz',
35: 1:    '✅f(49) = Muzz',
35: 1:    '✅f(55) = BuzzDuzz',
35: 1:    '✅f(65) = BuzzCazz',
35: 1:    '✅f(77) = MuzzDuzz',
35: 1:    '✅f(91) = MuzzCazz',
35: 1:    '✅f(105) = FizzBuzzMuzz',
35: 1:    '✅f(165) = FizzBuzzDuzz',
35: 1:    '❌f(195) = ??? != FizzBuzzCazz'
35: 1:  ],
35: 1:  'level': 1,
35: 1:  'nextQuestion': '195',
35: 1:  'questions': [
35: 1:    '1',
35: 1:    '2',
35: 1:    '3',
35: 1:    '4',
35: 1:    '5',
35: 1:    '6',
35: 1:    '7',
35: 1:    '8',
35: 1:    '9',
35: 1:    '10',
35: 1:    '11',
35: 1:    '12',
35: 1:    '13',
35: 1:    '14',
35: 1:    '15',
35: 1:    '16',
35: 1:    '17',
35: 1:    '21',
35: 1:    '33',
35: 1:    '35',
35: 1:    '39',
35: 1:    '49',
35: 1:    '55',
35: 1:    '65',
35: 1:    '77',
35: 1:    '91',
35: 1:    '105',
35: 1:    '165',
35: 1:    '195'
35: 1:  ]
35: 1:}
35: 1:Scores: 33
35: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz', 'FizzBuzzDuzz', 'FizzBuzzCazz']')
35: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
36: 1:BoardData {
36: 1:  'description': [
36: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
36: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
36: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
36: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
36: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
36: 1:    'Please write optimized code without any duplication.',
36: 1:    'For divider 11 - the word must be 'Duzz'.',
36: 1:    'For divider 13 - the word must be 'Cazz'.',
36: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
36: 1:  ],
36: 1:  'expectedAnswer': 'FizzMuzzDuzz',
36: 1:  'history': [
36: 1:    {
36: 1:      'answer': '1',
36: 1:      'question': '1',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': '2',
36: 1:      'question': '2',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'Fizz',
36: 1:      'question': '3',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': '4',
36: 1:      'question': '4',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'Buzz',
36: 1:      'question': '5',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'Fizz',
36: 1:      'question': '6',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'Muzz',
36: 1:      'question': '7',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': '8',
36: 1:      'question': '8',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'Fizz',
36: 1:      'question': '9',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'Buzz',
36: 1:      'question': '10',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'Duzz',
36: 1:      'question': '11',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'Fizz',
36: 1:      'question': '12',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'Cazz',
36: 1:      'question': '13',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'Muzz',
36: 1:      'question': '14',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'FizzBuzz',
36: 1:      'question': '15',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': '16',
36: 1:      'question': '16',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': '17',
36: 1:      'question': '17',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'FizzMuzz',
36: 1:      'question': '21',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'FizzDuzz',
36: 1:      'question': '33',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'BuzzMuzz',
36: 1:      'question': '35',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'FizzCazz',
36: 1:      'question': '39',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'Muzz',
36: 1:      'question': '49',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'BuzzDuzz',
36: 1:      'question': '55',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'BuzzCazz',
36: 1:      'question': '65',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'MuzzDuzz',
36: 1:      'question': '77',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'MuzzCazz',
36: 1:      'question': '91',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'FizzBuzzMuzz',
36: 1:      'question': '105',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'FizzBuzzDuzz',
36: 1:      'question': '165',
36: 1:      'valid': true
36: 1:    },
36: 1:    {
36: 1:      'answer': 'FizzBuzzCazz',
36: 1:      'question': '195',
36: 1:      'valid': true
36: 1:    }
36: 1:  ],
36: 1:  'info': [
36: 1:    '✅f(1) = 1',
36: 1:    '✅f(2) = 2',
36: 1:    '✅f(3) = Fizz',
36: 1:    '✅f(4) = 4',
36: 1:    '✅f(5) = Buzz',
36: 1:    '✅f(6) = Fizz',
36: 1:    '✅f(7) = Muzz',
36: 1:    '✅f(8) = 8',
36: 1:    '✅f(9) = Fizz',
36: 1:    '✅f(10) = Buzz',
36: 1:    '✅f(11) = Duzz',
36: 1:    '✅f(12) = Fizz',
36: 1:    '✅f(13) = Cazz',
36: 1:    '✅f(14) = Muzz',
36: 1:    '✅f(15) = FizzBuzz',
36: 1:    '✅f(16) = 16',
36: 1:    '✅f(17) = 17',
36: 1:    '✅f(21) = FizzMuzz',
36: 1:    '✅f(33) = FizzDuzz',
36: 1:    '✅f(35) = BuzzMuzz',
36: 1:    '✅f(39) = FizzCazz',
36: 1:    '✅f(49) = Muzz',
36: 1:    '✅f(55) = BuzzDuzz',
36: 1:    '✅f(65) = BuzzCazz',
36: 1:    '✅f(77) = MuzzDuzz',
36: 1:    '✅f(91) = MuzzCazz',
36: 1:    '✅f(105) = FizzBuzzMuzz',
36: 1:    '✅f(165) = FizzBuzzDuzz',
36: 1:    '✅f(195) = FizzBuzzCazz',
36: 1:    '❌f(231) = ??? != FizzMuzzDuzz'
36: 1:  ],
36: 1:  'level': 1,
36: 1:  'nextQuestion': '231',
36: 1:  'questions': [
36: 1:    '1',
36: 1:    '2',
36: 1:    '3',
36: 1:    '4',
36: 1:    '5',
36: 1:    '6',
36: 1:    '7',
36: 1:    '8',
36: 1:    '9',
36: 1:    '10',
36: 1:    '11',
36: 1:    '12',
36: 1:    '13',
36: 1:    '14',
36: 1:    '15',
36: 1:    '16',
36: 1:    '17',
36: 1:    '21',
36: 1:    '33',
36: 1:    '35',
36: 1:    '39',
36: 1:    '49',
36: 1:    '55',
36: 1:    '65',
36: 1:    '77',
36: 1:    '91',
36: 1:    '105',
36: 1:    '165',
36: 1:    '195',
36: 1:    '231'
36: 1:  ]
36: 1:}
36: 1:Scores: 34
36: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz', 'FizzBuzzDuzz', 'FizzBuzzCazz', 'FizzMuzzDuzz']')
36: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
37: 1:BoardData {
37: 1:  'description': [
37: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
37: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
37: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
37: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
37: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
37: 1:    'Please write optimized code without any duplication.',
37: 1:    'For divider 11 - the word must be 'Duzz'.',
37: 1:    'For divider 13 - the word must be 'Cazz'.',
37: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
37: 1:  ],
37: 1:  'expectedAnswer': 'FizzMuzzCazz',
37: 1:  'history': [
37: 1:    {
37: 1:      'answer': '1',
37: 1:      'question': '1',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': '2',
37: 1:      'question': '2',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'Fizz',
37: 1:      'question': '3',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': '4',
37: 1:      'question': '4',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'Buzz',
37: 1:      'question': '5',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'Fizz',
37: 1:      'question': '6',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'Muzz',
37: 1:      'question': '7',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': '8',
37: 1:      'question': '8',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'Fizz',
37: 1:      'question': '9',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'Buzz',
37: 1:      'question': '10',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'Duzz',
37: 1:      'question': '11',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'Fizz',
37: 1:      'question': '12',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'Cazz',
37: 1:      'question': '13',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'Muzz',
37: 1:      'question': '14',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'FizzBuzz',
37: 1:      'question': '15',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': '16',
37: 1:      'question': '16',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': '17',
37: 1:      'question': '17',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'FizzMuzz',
37: 1:      'question': '21',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'FizzDuzz',
37: 1:      'question': '33',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'BuzzMuzz',
37: 1:      'question': '35',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'FizzCazz',
37: 1:      'question': '39',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'Muzz',
37: 1:      'question': '49',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'BuzzDuzz',
37: 1:      'question': '55',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'BuzzCazz',
37: 1:      'question': '65',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'MuzzDuzz',
37: 1:      'question': '77',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'MuzzCazz',
37: 1:      'question': '91',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'FizzBuzzMuzz',
37: 1:      'question': '105',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'FizzBuzzDuzz',
37: 1:      'question': '165',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'FizzBuzzCazz',
37: 1:      'question': '195',
37: 1:      'valid': true
37: 1:    },
37: 1:    {
37: 1:      'answer': 'FizzMuzzDuzz',
37: 1:      'question': '231',
37: 1:      'valid': true
37: 1:    }
37: 1:  ],
37: 1:  'info': [
37: 1:    '✅f(1) = 1',
37: 1:    '✅f(2) = 2',
37: 1:    '✅f(3) = Fizz',
37: 1:    '✅f(4) = 4',
37: 1:    '✅f(5) = Buzz',
37: 1:    '✅f(6) = Fizz',
37: 1:    '✅f(7) = Muzz',
37: 1:    '✅f(8) = 8',
37: 1:    '✅f(9) = Fizz',
37: 1:    '✅f(10) = Buzz',
37: 1:    '✅f(11) = Duzz',
37: 1:    '✅f(12) = Fizz',
37: 1:    '✅f(13) = Cazz',
37: 1:    '✅f(14) = Muzz',
37: 1:    '✅f(15) = FizzBuzz',
37: 1:    '✅f(16) = 16',
37: 1:    '✅f(17) = 17',
37: 1:    '✅f(21) = FizzMuzz',
37: 1:    '✅f(33) = FizzDuzz',
37: 1:    '✅f(35) = BuzzMuzz',
37: 1:    '✅f(39) = FizzCazz',
37: 1:    '✅f(49) = Muzz',
37: 1:    '✅f(55) = BuzzDuzz',
37: 1:    '✅f(65) = BuzzCazz',
37: 1:    '✅f(77) = MuzzDuzz',
37: 1:    '✅f(91) = MuzzCazz',
37: 1:    '✅f(105) = FizzBuzzMuzz',
37: 1:    '✅f(165) = FizzBuzzDuzz',
37: 1:    '✅f(195) = FizzBuzzCazz',
37: 1:    '✅f(231) = FizzMuzzDuzz',
37: 1:    '❌f(273) = ??? != FizzMuzzCazz'
37: 1:  ],
37: 1:  'level': 1,
37: 1:  'nextQuestion': '273',
37: 1:  'questions': [
37: 1:    '1',
37: 1:    '2',
37: 1:    '3',
37: 1:    '4',
37: 1:    '5',
37: 1:    '6',
37: 1:    '7',
37: 1:    '8',
37: 1:    '9',
37: 1:    '10',
37: 1:    '11',
37: 1:    '12',
37: 1:    '13',
37: 1:    '14',
37: 1:    '15',
37: 1:    '16',
37: 1:    '17',
37: 1:    '21',
37: 1:    '33',
37: 1:    '35',
37: 1:    '39',
37: 1:    '49',
37: 1:    '55',
37: 1:    '65',
37: 1:    '77',
37: 1:    '91',
37: 1:    '105',
37: 1:    '165',
37: 1:    '195',
37: 1:    '231',
37: 1:    '273'
37: 1:  ]
37: 1:}
37: 1:Scores: 35
37: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz', 'FizzBuzzDuzz', 'FizzBuzzCazz', 'FizzMuzzDuzz', 'FizzMuzzCazz']')
37: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
38: 1:BoardData {
38: 1:  'description': [
38: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
38: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
38: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
38: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
38: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
38: 1:    'Please write optimized code without any duplication.',
38: 1:    'For divider 11 - the word must be 'Duzz'.',
38: 1:    'For divider 13 - the word must be 'Cazz'.',
38: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
38: 1:  ],
38: 1:  'expectedAnswer': 'BuzzMuzzDuzz',
38: 1:  'history': [
38: 1:    {
38: 1:      'answer': '1',
38: 1:      'question': '1',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': '2',
38: 1:      'question': '2',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'Fizz',
38: 1:      'question': '3',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': '4',
38: 1:      'question': '4',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'Buzz',
38: 1:      'question': '5',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'Fizz',
38: 1:      'question': '6',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'Muzz',
38: 1:      'question': '7',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': '8',
38: 1:      'question': '8',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'Fizz',
38: 1:      'question': '9',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'Buzz',
38: 1:      'question': '10',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'Duzz',
38: 1:      'question': '11',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'Fizz',
38: 1:      'question': '12',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'Cazz',
38: 1:      'question': '13',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'Muzz',
38: 1:      'question': '14',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'FizzBuzz',
38: 1:      'question': '15',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': '16',
38: 1:      'question': '16',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': '17',
38: 1:      'question': '17',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'FizzMuzz',
38: 1:      'question': '21',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'FizzDuzz',
38: 1:      'question': '33',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'BuzzMuzz',
38: 1:      'question': '35',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'FizzCazz',
38: 1:      'question': '39',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'Muzz',
38: 1:      'question': '49',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'BuzzDuzz',
38: 1:      'question': '55',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'BuzzCazz',
38: 1:      'question': '65',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'MuzzDuzz',
38: 1:      'question': '77',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'MuzzCazz',
38: 1:      'question': '91',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'FizzBuzzMuzz',
38: 1:      'question': '105',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'FizzBuzzDuzz',
38: 1:      'question': '165',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'FizzBuzzCazz',
38: 1:      'question': '195',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'FizzMuzzDuzz',
38: 1:      'question': '231',
38: 1:      'valid': true
38: 1:    },
38: 1:    {
38: 1:      'answer': 'FizzMuzzCazz',
38: 1:      'question': '273',
38: 1:      'valid': true
38: 1:    }
38: 1:  ],
38: 1:  'info': [
38: 1:    '✅f(1) = 1',
38: 1:    '✅f(2) = 2',
38: 1:    '✅f(3) = Fizz',
38: 1:    '✅f(4) = 4',
38: 1:    '✅f(5) = Buzz',
38: 1:    '✅f(6) = Fizz',
38: 1:    '✅f(7) = Muzz',
38: 1:    '✅f(8) = 8',
38: 1:    '✅f(9) = Fizz',
38: 1:    '✅f(10) = Buzz',
38: 1:    '✅f(11) = Duzz',
38: 1:    '✅f(12) = Fizz',
38: 1:    '✅f(13) = Cazz',
38: 1:    '✅f(14) = Muzz',
38: 1:    '✅f(15) = FizzBuzz',
38: 1:    '✅f(16) = 16',
38: 1:    '✅f(17) = 17',
38: 1:    '✅f(21) = FizzMuzz',
38: 1:    '✅f(33) = FizzDuzz',
38: 1:    '✅f(35) = BuzzMuzz',
38: 1:    '✅f(39) = FizzCazz',
38: 1:    '✅f(49) = Muzz',
38: 1:    '✅f(55) = BuzzDuzz',
38: 1:    '✅f(65) = BuzzCazz',
38: 1:    '✅f(77) = MuzzDuzz',
38: 1:    '✅f(91) = MuzzCazz',
38: 1:    '✅f(105) = FizzBuzzMuzz',
38: 1:    '✅f(165) = FizzBuzzDuzz',
38: 1:    '✅f(195) = FizzBuzzCazz',
38: 1:    '✅f(231) = FizzMuzzDuzz',
38: 1:    '✅f(273) = FizzMuzzCazz',
38: 1:    '❌f(385) = ??? != BuzzMuzzDuzz'
38: 1:  ],
38: 1:  'level': 1,
38: 1:  'nextQuestion': '385',
38: 1:  'questions': [
38: 1:    '1',
38: 1:    '2',
38: 1:    '3',
38: 1:    '4',
38: 1:    '5',
38: 1:    '6',
38: 1:    '7',
38: 1:    '8',
38: 1:    '9',
38: 1:    '10',
38: 1:    '11',
38: 1:    '12',
38: 1:    '13',
38: 1:    '14',
38: 1:    '15',
38: 1:    '16',
38: 1:    '17',
38: 1:    '21',
38: 1:    '33',
38: 1:    '35',
38: 1:    '39',
38: 1:    '49',
38: 1:    '55',
38: 1:    '65',
38: 1:    '77',
38: 1:    '91',
38: 1:    '105',
38: 1:    '165',
38: 1:    '195',
38: 1:    '231',
38: 1:    '273',
38: 1:    '385'
38: 1:  ]
38: 1:}
38: 1:Scores: 36
38: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz', 'FizzBuzzDuzz', 'FizzBuzzCazz', 'FizzMuzzDuzz', 'FizzMuzzCazz', 'BuzzMuzzDuzz']')
38: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
39: 1:BoardData {
39: 1:  'description': [
39: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
39: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
39: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
39: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
39: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
39: 1:    'Please write optimized code without any duplication.',
39: 1:    'For divider 11 - the word must be 'Duzz'.',
39: 1:    'For divider 13 - the word must be 'Cazz'.',
39: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
39: 1:  ],
39: 1:  'expectedAnswer': 'BuzzMuzzCazz',
39: 1:  'history': [
39: 1:    {
39: 1:      'answer': '1',
39: 1:      'question': '1',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': '2',
39: 1:      'question': '2',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'Fizz',
39: 1:      'question': '3',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': '4',
39: 1:      'question': '4',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'Buzz',
39: 1:      'question': '5',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'Fizz',
39: 1:      'question': '6',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'Muzz',
39: 1:      'question': '7',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': '8',
39: 1:      'question': '8',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'Fizz',
39: 1:      'question': '9',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'Buzz',
39: 1:      'question': '10',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'Duzz',
39: 1:      'question': '11',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'Fizz',
39: 1:      'question': '12',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'Cazz',
39: 1:      'question': '13',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'Muzz',
39: 1:      'question': '14',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'FizzBuzz',
39: 1:      'question': '15',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': '16',
39: 1:      'question': '16',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': '17',
39: 1:      'question': '17',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'FizzMuzz',
39: 1:      'question': '21',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'FizzDuzz',
39: 1:      'question': '33',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'BuzzMuzz',
39: 1:      'question': '35',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'FizzCazz',
39: 1:      'question': '39',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'Muzz',
39: 1:      'question': '49',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'BuzzDuzz',
39: 1:      'question': '55',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'BuzzCazz',
39: 1:      'question': '65',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'MuzzDuzz',
39: 1:      'question': '77',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'MuzzCazz',
39: 1:      'question': '91',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'FizzBuzzMuzz',
39: 1:      'question': '105',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'FizzBuzzDuzz',
39: 1:      'question': '165',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'FizzBuzzCazz',
39: 1:      'question': '195',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'FizzMuzzDuzz',
39: 1:      'question': '231',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'FizzMuzzCazz',
39: 1:      'question': '273',
39: 1:      'valid': true
39: 1:    },
39: 1:    {
39: 1:      'answer': 'BuzzMuzzDuzz',
39: 1:      'question': '385',
39: 1:      'valid': true
39: 1:    }
39: 1:  ],
39: 1:  'info': [
39: 1:    '✅f(1) = 1',
39: 1:    '✅f(2) = 2',
39: 1:    '✅f(3) = Fizz',
39: 1:    '✅f(4) = 4',
39: 1:    '✅f(5) = Buzz',
39: 1:    '✅f(6) = Fizz',
39: 1:    '✅f(7) = Muzz',
39: 1:    '✅f(8) = 8',
39: 1:    '✅f(9) = Fizz',
39: 1:    '✅f(10) = Buzz',
39: 1:    '✅f(11) = Duzz',
39: 1:    '✅f(12) = Fizz',
39: 1:    '✅f(13) = Cazz',
39: 1:    '✅f(14) = Muzz',
39: 1:    '✅f(15) = FizzBuzz',
39: 1:    '✅f(16) = 16',
39: 1:    '✅f(17) = 17',
39: 1:    '✅f(21) = FizzMuzz',
39: 1:    '✅f(33) = FizzDuzz',
39: 1:    '✅f(35) = BuzzMuzz',
39: 1:    '✅f(39) = FizzCazz',
39: 1:    '✅f(49) = Muzz',
39: 1:    '✅f(55) = BuzzDuzz',
39: 1:    '✅f(65) = BuzzCazz',
39: 1:    '✅f(77) = MuzzDuzz',
39: 1:    '✅f(91) = MuzzCazz',
39: 1:    '✅f(105) = FizzBuzzMuzz',
39: 1:    '✅f(165) = FizzBuzzDuzz',
39: 1:    '✅f(195) = FizzBuzzCazz',
39: 1:    '✅f(231) = FizzMuzzDuzz',
39: 1:    '✅f(273) = FizzMuzzCazz',
39: 1:    '✅f(385) = BuzzMuzzDuzz',
39: 1:    '❌f(455) = ??? != BuzzMuzzCazz'
39: 1:  ],
39: 1:  'level': 1,
39: 1:  'nextQuestion': '455',
39: 1:  'questions': [
39: 1:    '1',
39: 1:    '2',
39: 1:    '3',
39: 1:    '4',
39: 1:    '5',
39: 1:    '6',
39: 1:    '7',
39: 1:    '8',
39: 1:    '9',
39: 1:    '10',
39: 1:    '11',
39: 1:    '12',
39: 1:    '13',
39: 1:    '14',
39: 1:    '15',
39: 1:    '16',
39: 1:    '17',
39: 1:    '21',
39: 1:    '33',
39: 1:    '35',
39: 1:    '39',
39: 1:    '49',
39: 1:    '55',
39: 1:    '65',
39: 1:    '77',
39: 1:    '91',
39: 1:    '105',
39: 1:    '165',
39: 1:    '195',
39: 1:    '231',
39: 1:    '273',
39: 1:    '385',
39: 1:    '455'
39: 1:  ]
39: 1:}
39: 1:Scores: 37
39: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz', 'FizzBuzzDuzz', 'FizzBuzzCazz', 'FizzMuzzDuzz', 'FizzMuzzCazz', 'BuzzMuzzDuzz', 'BuzzMuzzCazz']')
39: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
40: 1:BoardData {
40: 1:  'description': [
40: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
40: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
40: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
40: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
40: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
40: 1:    'Please write optimized code without any duplication.',
40: 1:    'For divider 11 - the word must be 'Duzz'.',
40: 1:    'For divider 13 - the word must be 'Cazz'.',
40: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
40: 1:  ],
40: 1:  'expectedAnswer': 'BuzzDuzzCazz',
40: 1:  'history': [
40: 1:    {
40: 1:      'answer': '1',
40: 1:      'question': '1',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': '2',
40: 1:      'question': '2',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'Fizz',
40: 1:      'question': '3',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': '4',
40: 1:      'question': '4',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'Buzz',
40: 1:      'question': '5',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'Fizz',
40: 1:      'question': '6',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'Muzz',
40: 1:      'question': '7',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': '8',
40: 1:      'question': '8',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'Fizz',
40: 1:      'question': '9',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'Buzz',
40: 1:      'question': '10',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'Duzz',
40: 1:      'question': '11',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'Fizz',
40: 1:      'question': '12',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'Cazz',
40: 1:      'question': '13',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'Muzz',
40: 1:      'question': '14',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'FizzBuzz',
40: 1:      'question': '15',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': '16',
40: 1:      'question': '16',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': '17',
40: 1:      'question': '17',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'FizzMuzz',
40: 1:      'question': '21',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'FizzDuzz',
40: 1:      'question': '33',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'BuzzMuzz',
40: 1:      'question': '35',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'FizzCazz',
40: 1:      'question': '39',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'Muzz',
40: 1:      'question': '49',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'BuzzDuzz',
40: 1:      'question': '55',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'BuzzCazz',
40: 1:      'question': '65',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'MuzzDuzz',
40: 1:      'question': '77',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'MuzzCazz',
40: 1:      'question': '91',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'FizzBuzzMuzz',
40: 1:      'question': '105',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'FizzBuzzDuzz',
40: 1:      'question': '165',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'FizzBuzzCazz',
40: 1:      'question': '195',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'FizzMuzzDuzz',
40: 1:      'question': '231',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'FizzMuzzCazz',
40: 1:      'question': '273',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'BuzzMuzzDuzz',
40: 1:      'question': '385',
40: 1:      'valid': true
40: 1:    },
40: 1:    {
40: 1:      'answer': 'BuzzMuzzCazz',
40: 1:      'question': '455',
40: 1:      'valid': true
40: 1:    }
40: 1:  ],
40: 1:  'info': [
40: 1:    '✅f(1) = 1',
40: 1:    '✅f(2) = 2',
40: 1:    '✅f(3) = Fizz',
40: 1:    '✅f(4) = 4',
40: 1:    '✅f(5) = Buzz',
40: 1:    '✅f(6) = Fizz',
40: 1:    '✅f(7) = Muzz',
40: 1:    '✅f(8) = 8',
40: 1:    '✅f(9) = Fizz',
40: 1:    '✅f(10) = Buzz',
40: 1:    '✅f(11) = Duzz',
40: 1:    '✅f(12) = Fizz',
40: 1:    '✅f(13) = Cazz',
40: 1:    '✅f(14) = Muzz',
40: 1:    '✅f(15) = FizzBuzz',
40: 1:    '✅f(16) = 16',
40: 1:    '✅f(17) = 17',
40: 1:    '✅f(21) = FizzMuzz',
40: 1:    '✅f(33) = FizzDuzz',
40: 1:    '✅f(35) = BuzzMuzz',
40: 1:    '✅f(39) = FizzCazz',
40: 1:    '✅f(49) = Muzz',
40: 1:    '✅f(55) = BuzzDuzz',
40: 1:    '✅f(65) = BuzzCazz',
40: 1:    '✅f(77) = MuzzDuzz',
40: 1:    '✅f(91) = MuzzCazz',
40: 1:    '✅f(105) = FizzBuzzMuzz',
40: 1:    '✅f(165) = FizzBuzzDuzz',
40: 1:    '✅f(195) = FizzBuzzCazz',
40: 1:    '✅f(231) = FizzMuzzDuzz',
40: 1:    '✅f(273) = FizzMuzzCazz',
40: 1:    '✅f(385) = BuzzMuzzDuzz',
40: 1:    '✅f(455) = BuzzMuzzCazz',
40: 1:    '❌f(715) = ??? != BuzzDuzzCazz'
40: 1:  ],
40: 1:  'level': 1,
40: 1:  'nextQuestion': '715',
40: 1:  'questions': [
40: 1:    '1',
40: 1:    '2',
40: 1:    '3',
40: 1:    '4',
40: 1:    '5',
40: 1:    '6',
40: 1:    '7',
40: 1:    '8',
40: 1:    '9',
40: 1:    '10',
40: 1:    '11',
40: 1:    '12',
40: 1:    '13',
40: 1:    '14',
40: 1:    '15',
40: 1:    '16',
40: 1:    '17',
40: 1:    '21',
40: 1:    '33',
40: 1:    '35',
40: 1:    '39',
40: 1:    '49',
40: 1:    '55',
40: 1:    '65',
40: 1:    '77',
40: 1:    '91',
40: 1:    '105',
40: 1:    '165',
40: 1:    '195',
40: 1:    '231',
40: 1:    '273',
40: 1:    '385',
40: 1:    '455',
40: 1:    '715'
40: 1:  ]
40: 1:}
40: 1:Scores: 38
40: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz', 'FizzBuzzDuzz', 'FizzBuzzCazz', 'FizzMuzzDuzz', 'FizzMuzzCazz', 'BuzzMuzzDuzz', 'BuzzMuzzCazz', 'BuzzDuzzCazz']')
40: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
41: 1:BoardData {
41: 1:  'description': [
41: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
41: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
41: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
41: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
41: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
41: 1:    'Please write optimized code without any duplication.',
41: 1:    'For divider 11 - the word must be 'Duzz'.',
41: 1:    'For divider 13 - the word must be 'Cazz'.',
41: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
41: 1:  ],
41: 1:  'expectedAnswer': 'MuzzDuzzCazz',
41: 1:  'history': [
41: 1:    {
41: 1:      'answer': '1',
41: 1:      'question': '1',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': '2',
41: 1:      'question': '2',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'Fizz',
41: 1:      'question': '3',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': '4',
41: 1:      'question': '4',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'Buzz',
41: 1:      'question': '5',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'Fizz',
41: 1:      'question': '6',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'Muzz',
41: 1:      'question': '7',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': '8',
41: 1:      'question': '8',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'Fizz',
41: 1:      'question': '9',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'Buzz',
41: 1:      'question': '10',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'Duzz',
41: 1:      'question': '11',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'Fizz',
41: 1:      'question': '12',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'Cazz',
41: 1:      'question': '13',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'Muzz',
41: 1:      'question': '14',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'FizzBuzz',
41: 1:      'question': '15',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': '16',
41: 1:      'question': '16',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': '17',
41: 1:      'question': '17',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'FizzMuzz',
41: 1:      'question': '21',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'FizzDuzz',
41: 1:      'question': '33',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'BuzzMuzz',
41: 1:      'question': '35',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'FizzCazz',
41: 1:      'question': '39',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'Muzz',
41: 1:      'question': '49',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'BuzzDuzz',
41: 1:      'question': '55',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'BuzzCazz',
41: 1:      'question': '65',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'MuzzDuzz',
41: 1:      'question': '77',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'MuzzCazz',
41: 1:      'question': '91',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'FizzBuzzMuzz',
41: 1:      'question': '105',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'FizzBuzzDuzz',
41: 1:      'question': '165',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'FizzBuzzCazz',
41: 1:      'question': '195',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'FizzMuzzDuzz',
41: 1:      'question': '231',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'FizzMuzzCazz',
41: 1:      'question': '273',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'BuzzMuzzDuzz',
41: 1:      'question': '385',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'BuzzMuzzCazz',
41: 1:      'question': '455',
41: 1:      'valid': true
41: 1:    },
41: 1:    {
41: 1:      'answer': 'BuzzDuzzCazz',
41: 1:      'question': '715',
41: 1:      'valid': true
41: 1:    }
41: 1:  ],
41: 1:  'info': [
41: 1:    '✅f(1) = 1',
41: 1:    '✅f(2) = 2',
41: 1:    '✅f(3) = Fizz',
41: 1:    '✅f(4) = 4',
41: 1:    '✅f(5) = Buzz',
41: 1:    '✅f(6) = Fizz',
41: 1:    '✅f(7) = Muzz',
41: 1:    '✅f(8) = 8',
41: 1:    '✅f(9) = Fizz',
41: 1:    '✅f(10) = Buzz',
41: 1:    '✅f(11) = Duzz',
41: 1:    '✅f(12) = Fizz',
41: 1:    '✅f(13) = Cazz',
41: 1:    '✅f(14) = Muzz',
41: 1:    '✅f(15) = FizzBuzz',
41: 1:    '✅f(16) = 16',
41: 1:    '✅f(17) = 17',
41: 1:    '✅f(21) = FizzMuzz',
41: 1:    '✅f(33) = FizzDuzz',
41: 1:    '✅f(35) = BuzzMuzz',
41: 1:    '✅f(39) = FizzCazz',
41: 1:    '✅f(49) = Muzz',
41: 1:    '✅f(55) = BuzzDuzz',
41: 1:    '✅f(65) = BuzzCazz',
41: 1:    '✅f(77) = MuzzDuzz',
41: 1:    '✅f(91) = MuzzCazz',
41: 1:    '✅f(105) = FizzBuzzMuzz',
41: 1:    '✅f(165) = FizzBuzzDuzz',
41: 1:    '✅f(195) = FizzBuzzCazz',
41: 1:    '✅f(231) = FizzMuzzDuzz',
41: 1:    '✅f(273) = FizzMuzzCazz',
41: 1:    '✅f(385) = BuzzMuzzDuzz',
41: 1:    '✅f(455) = BuzzMuzzCazz',
41: 1:    '✅f(715) = BuzzDuzzCazz',
41: 1:    '❌f(1001) = ??? != MuzzDuzzCazz'
41: 1:  ],
41: 1:  'level': 1,
41: 1:  'nextQuestion': '1001',
41: 1:  'questions': [
41: 1:    '1',
41: 1:    '2',
41: 1:    '3',
41: 1:    '4',
41: 1:    '5',
41: 1:    '6',
41: 1:    '7',
41: 1:    '8',
41: 1:    '9',
41: 1:    '10',
41: 1:    '11',
41: 1:    '12',
41: 1:    '13',
41: 1:    '14',
41: 1:    '15',
41: 1:    '16',
41: 1:    '17',
41: 1:    '21',
41: 1:    '33',
41: 1:    '35',
41: 1:    '39',
41: 1:    '49',
41: 1:    '55',
41: 1:    '65',
41: 1:    '77',
41: 1:    '91',
41: 1:    '105',
41: 1:    '165',
41: 1:    '195',
41: 1:    '231',
41: 1:    '273',
41: 1:    '385',
41: 1:    '455',
41: 1:    '715',
41: 1:    '1001'
41: 1:  ]
41: 1:}
41: 1:Scores: 39
41: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz', 'FizzBuzzDuzz', 'FizzBuzzCazz', 'FizzMuzzDuzz', 'FizzMuzzCazz', 'BuzzMuzzDuzz', 'BuzzMuzzCazz', 'BuzzDuzzCazz', 'MuzzDuzzCazz']')
41: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
42: 1:BoardData {
42: 1:  'description': [
42: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
42: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
42: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
42: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
42: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
42: 1:    'Please write optimized code without any duplication.',
42: 1:    'For divider 11 - the word must be 'Duzz'.',
42: 1:    'For divider 13 - the word must be 'Cazz'.',
42: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
42: 1:  ],
42: 1:  'expectedAnswer': 'FizzBuzzMuzzDuzz',
42: 1:  'history': [
42: 1:    {
42: 1:      'answer': '1',
42: 1:      'question': '1',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': '2',
42: 1:      'question': '2',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'Fizz',
42: 1:      'question': '3',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': '4',
42: 1:      'question': '4',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'Buzz',
42: 1:      'question': '5',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'Fizz',
42: 1:      'question': '6',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'Muzz',
42: 1:      'question': '7',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': '8',
42: 1:      'question': '8',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'Fizz',
42: 1:      'question': '9',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'Buzz',
42: 1:      'question': '10',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'Duzz',
42: 1:      'question': '11',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'Fizz',
42: 1:      'question': '12',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'Cazz',
42: 1:      'question': '13',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'Muzz',
42: 1:      'question': '14',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'FizzBuzz',
42: 1:      'question': '15',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': '16',
42: 1:      'question': '16',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': '17',
42: 1:      'question': '17',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'FizzMuzz',
42: 1:      'question': '21',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'FizzDuzz',
42: 1:      'question': '33',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'BuzzMuzz',
42: 1:      'question': '35',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'FizzCazz',
42: 1:      'question': '39',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'Muzz',
42: 1:      'question': '49',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'BuzzDuzz',
42: 1:      'question': '55',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'BuzzCazz',
42: 1:      'question': '65',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'MuzzDuzz',
42: 1:      'question': '77',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'MuzzCazz',
42: 1:      'question': '91',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'FizzBuzzMuzz',
42: 1:      'question': '105',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'FizzBuzzDuzz',
42: 1:      'question': '165',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'FizzBuzzCazz',
42: 1:      'question': '195',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'FizzMuzzDuzz',
42: 1:      'question': '231',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'FizzMuzzCazz',
42: 1:      'question': '273',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'BuzzMuzzDuzz',
42: 1:      'question': '385',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'BuzzMuzzCazz',
42: 1:      'question': '455',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'BuzzDuzzCazz',
42: 1:      'question': '715',
42: 1:      'valid': true
42: 1:    },
42: 1:    {
42: 1:      'answer': 'MuzzDuzzCazz',
42: 1:      'question': '1001',
42: 1:      'valid': true
42: 1:    }
42: 1:  ],
42: 1:  'info': [
42: 1:    '✅f(1) = 1',
42: 1:    '✅f(2) = 2',
42: 1:    '✅f(3) = Fizz',
42: 1:    '✅f(4) = 4',
42: 1:    '✅f(5) = Buzz',
42: 1:    '✅f(6) = Fizz',
42: 1:    '✅f(7) = Muzz',
42: 1:    '✅f(8) = 8',
42: 1:    '✅f(9) = Fizz',
42: 1:    '✅f(10) = Buzz',
42: 1:    '✅f(11) = Duzz',
42: 1:    '✅f(12) = Fizz',
42: 1:    '✅f(13) = Cazz',
42: 1:    '✅f(14) = Muzz',
42: 1:    '✅f(15) = FizzBuzz',
42: 1:    '✅f(16) = 16',
42: 1:    '✅f(17) = 17',
42: 1:    '✅f(21) = FizzMuzz',
42: 1:    '✅f(33) = FizzDuzz',
42: 1:    '✅f(35) = BuzzMuzz',
42: 1:    '✅f(39) = FizzCazz',
42: 1:    '✅f(49) = Muzz',
42: 1:    '✅f(55) = BuzzDuzz',
42: 1:    '✅f(65) = BuzzCazz',
42: 1:    '✅f(77) = MuzzDuzz',
42: 1:    '✅f(91) = MuzzCazz',
42: 1:    '✅f(105) = FizzBuzzMuzz',
42: 1:    '✅f(165) = FizzBuzzDuzz',
42: 1:    '✅f(195) = FizzBuzzCazz',
42: 1:    '✅f(231) = FizzMuzzDuzz',
42: 1:    '✅f(273) = FizzMuzzCazz',
42: 1:    '✅f(385) = BuzzMuzzDuzz',
42: 1:    '✅f(455) = BuzzMuzzCazz',
42: 1:    '✅f(715) = BuzzDuzzCazz',
42: 1:    '✅f(1001) = MuzzDuzzCazz',
42: 1:    '❌f(1155) = ??? != FizzBuzzMuzzDuzz'
42: 1:  ],
42: 1:  'level': 1,
42: 1:  'nextQuestion': '1155',
42: 1:  'questions': [
42: 1:    '1',
42: 1:    '2',
42: 1:    '3',
42: 1:    '4',
42: 1:    '5',
42: 1:    '6',
42: 1:    '7',
42: 1:    '8',
42: 1:    '9',
42: 1:    '10',
42: 1:    '11',
42: 1:    '12',
42: 1:    '13',
42: 1:    '14',
42: 1:    '15',
42: 1:    '16',
42: 1:    '17',
42: 1:    '21',
42: 1:    '33',
42: 1:    '35',
42: 1:    '39',
42: 1:    '49',
42: 1:    '55',
42: 1:    '65',
42: 1:    '77',
42: 1:    '91',
42: 1:    '105',
42: 1:    '165',
42: 1:    '195',
42: 1:    '231',
42: 1:    '273',
42: 1:    '385',
42: 1:    '455',
42: 1:    '715',
42: 1:    '1001',
42: 1:    '1155'
42: 1:  ]
42: 1:}
42: 1:Scores: 40
42: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz', 'FizzBuzzDuzz', 'FizzBuzzCazz', 'FizzMuzzDuzz', 'FizzMuzzCazz', 'BuzzMuzzDuzz', 'BuzzMuzzCazz', 'BuzzDuzzCazz', 'MuzzDuzzCazz', 'FizzBuzzMuzzDuzz']')
42: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
43: 1:BoardData {
43: 1:  'description': [
43: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
43: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
43: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
43: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
43: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
43: 1:    'Please write optimized code without any duplication.',
43: 1:    'For divider 11 - the word must be 'Duzz'.',
43: 1:    'For divider 13 - the word must be 'Cazz'.',
43: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
43: 1:  ],
43: 1:  'expectedAnswer': 'FizzBuzzMuzzCazz',
43: 1:  'history': [
43: 1:    {
43: 1:      'answer': '1',
43: 1:      'question': '1',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': '2',
43: 1:      'question': '2',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'Fizz',
43: 1:      'question': '3',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': '4',
43: 1:      'question': '4',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'Buzz',
43: 1:      'question': '5',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'Fizz',
43: 1:      'question': '6',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'Muzz',
43: 1:      'question': '7',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': '8',
43: 1:      'question': '8',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'Fizz',
43: 1:      'question': '9',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'Buzz',
43: 1:      'question': '10',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'Duzz',
43: 1:      'question': '11',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'Fizz',
43: 1:      'question': '12',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'Cazz',
43: 1:      'question': '13',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'Muzz',
43: 1:      'question': '14',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'FizzBuzz',
43: 1:      'question': '15',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': '16',
43: 1:      'question': '16',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': '17',
43: 1:      'question': '17',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'FizzMuzz',
43: 1:      'question': '21',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'FizzDuzz',
43: 1:      'question': '33',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'BuzzMuzz',
43: 1:      'question': '35',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'FizzCazz',
43: 1:      'question': '39',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'Muzz',
43: 1:      'question': '49',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'BuzzDuzz',
43: 1:      'question': '55',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'BuzzCazz',
43: 1:      'question': '65',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'MuzzDuzz',
43: 1:      'question': '77',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'MuzzCazz',
43: 1:      'question': '91',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'FizzBuzzMuzz',
43: 1:      'question': '105',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'FizzBuzzDuzz',
43: 1:      'question': '165',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'FizzBuzzCazz',
43: 1:      'question': '195',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'FizzMuzzDuzz',
43: 1:      'question': '231',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'FizzMuzzCazz',
43: 1:      'question': '273',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'BuzzMuzzDuzz',
43: 1:      'question': '385',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'BuzzMuzzCazz',
43: 1:      'question': '455',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'BuzzDuzzCazz',
43: 1:      'question': '715',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'MuzzDuzzCazz',
43: 1:      'question': '1001',
43: 1:      'valid': true
43: 1:    },
43: 1:    {
43: 1:      'answer': 'FizzBuzzMuzzDuzz',
43: 1:      'question': '1155',
43: 1:      'valid': true
43: 1:    }
43: 1:  ],
43: 1:  'info': [
43: 1:    '✅f(1) = 1',
43: 1:    '✅f(2) = 2',
43: 1:    '✅f(3) = Fizz',
43: 1:    '✅f(4) = 4',
43: 1:    '✅f(5) = Buzz',
43: 1:    '✅f(6) = Fizz',
43: 1:    '✅f(7) = Muzz',
43: 1:    '✅f(8) = 8',
43: 1:    '✅f(9) = Fizz',
43: 1:    '✅f(10) = Buzz',
43: 1:    '✅f(11) = Duzz',
43: 1:    '✅f(12) = Fizz',
43: 1:    '✅f(13) = Cazz',
43: 1:    '✅f(14) = Muzz',
43: 1:    '✅f(15) = FizzBuzz',
43: 1:    '✅f(16) = 16',
43: 1:    '✅f(17) = 17',
43: 1:    '✅f(21) = FizzMuzz',
43: 1:    '✅f(33) = FizzDuzz',
43: 1:    '✅f(35) = BuzzMuzz',
43: 1:    '✅f(39) = FizzCazz',
43: 1:    '✅f(49) = Muzz',
43: 1:    '✅f(55) = BuzzDuzz',
43: 1:    '✅f(65) = BuzzCazz',
43: 1:    '✅f(77) = MuzzDuzz',
43: 1:    '✅f(91) = MuzzCazz',
43: 1:    '✅f(105) = FizzBuzzMuzz',
43: 1:    '✅f(165) = FizzBuzzDuzz',
43: 1:    '✅f(195) = FizzBuzzCazz',
43: 1:    '✅f(231) = FizzMuzzDuzz',
43: 1:    '✅f(273) = FizzMuzzCazz',
43: 1:    '✅f(385) = BuzzMuzzDuzz',
43: 1:    '✅f(455) = BuzzMuzzCazz',
43: 1:    '✅f(715) = BuzzDuzzCazz',
43: 1:    '✅f(1001) = MuzzDuzzCazz',
43: 1:    '✅f(1155) = FizzBuzzMuzzDuzz',
43: 1:    '❌f(1365) = ??? != FizzBuzzMuzzCazz'
43: 1:  ],
43: 1:  'level': 1,
43: 1:  'nextQuestion': '1365',
43: 1:  'questions': [
43: 1:    '1',
43: 1:    '2',
43: 1:    '3',
43: 1:    '4',
43: 1:    '5',
43: 1:    '6',
43: 1:    '7',
43: 1:    '8',
43: 1:    '9',
43: 1:    '10',
43: 1:    '11',
43: 1:    '12',
43: 1:    '13',
43: 1:    '14',
43: 1:    '15',
43: 1:    '16',
43: 1:    '17',
43: 1:    '21',
43: 1:    '33',
43: 1:    '35',
43: 1:    '39',
43: 1:    '49',
43: 1:    '55',
43: 1:    '65',
43: 1:    '77',
43: 1:    '91',
43: 1:    '105',
43: 1:    '165',
43: 1:    '195',
43: 1:    '231',
43: 1:    '273',
43: 1:    '385',
43: 1:    '455',
43: 1:    '715',
43: 1:    '1001',
43: 1:    '1155',
43: 1:    '1365'
43: 1:  ]
43: 1:}
43: 1:Scores: 41
43: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz', 'FizzBuzzDuzz', 'FizzBuzzCazz', 'FizzMuzzDuzz', 'FizzMuzzCazz', 'BuzzMuzzDuzz', 'BuzzMuzzCazz', 'BuzzDuzzCazz', 'MuzzDuzzCazz', 'FizzBuzzMuzzDuzz', 'FizzBuzzMuzzCazz']')
43: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
44: 1:BoardData {
44: 1:  'description': [
44: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
44: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
44: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
44: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
44: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
44: 1:    'Please write optimized code without any duplication.',
44: 1:    'For divider 11 - the word must be 'Duzz'.',
44: 1:    'For divider 13 - the word must be 'Cazz'.',
44: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
44: 1:  ],
44: 1:  'expectedAnswer': 'FizzBuzzDuzzCazz',
44: 1:  'history': [
44: 1:    {
44: 1:      'answer': '1',
44: 1:      'question': '1',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': '2',
44: 1:      'question': '2',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'Fizz',
44: 1:      'question': '3',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': '4',
44: 1:      'question': '4',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'Buzz',
44: 1:      'question': '5',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'Fizz',
44: 1:      'question': '6',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'Muzz',
44: 1:      'question': '7',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': '8',
44: 1:      'question': '8',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'Fizz',
44: 1:      'question': '9',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'Buzz',
44: 1:      'question': '10',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'Duzz',
44: 1:      'question': '11',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'Fizz',
44: 1:      'question': '12',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'Cazz',
44: 1:      'question': '13',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'Muzz',
44: 1:      'question': '14',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'FizzBuzz',
44: 1:      'question': '15',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': '16',
44: 1:      'question': '16',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': '17',
44: 1:      'question': '17',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'FizzMuzz',
44: 1:      'question': '21',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'FizzDuzz',
44: 1:      'question': '33',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'BuzzMuzz',
44: 1:      'question': '35',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'FizzCazz',
44: 1:      'question': '39',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'Muzz',
44: 1:      'question': '49',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'BuzzDuzz',
44: 1:      'question': '55',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'BuzzCazz',
44: 1:      'question': '65',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'MuzzDuzz',
44: 1:      'question': '77',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'MuzzCazz',
44: 1:      'question': '91',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'FizzBuzzMuzz',
44: 1:      'question': '105',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'FizzBuzzDuzz',
44: 1:      'question': '165',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'FizzBuzzCazz',
44: 1:      'question': '195',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'FizzMuzzDuzz',
44: 1:      'question': '231',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'FizzMuzzCazz',
44: 1:      'question': '273',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'BuzzMuzzDuzz',
44: 1:      'question': '385',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'BuzzMuzzCazz',
44: 1:      'question': '455',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'BuzzDuzzCazz',
44: 1:      'question': '715',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'MuzzDuzzCazz',
44: 1:      'question': '1001',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'FizzBuzzMuzzDuzz',
44: 1:      'question': '1155',
44: 1:      'valid': true
44: 1:    },
44: 1:    {
44: 1:      'answer': 'FizzBuzzMuzzCazz',
44: 1:      'question': '1365',
44: 1:      'valid': true
44: 1:    }
44: 1:  ],
44: 1:  'info': [
44: 1:    '✅f(1) = 1',
44: 1:    '✅f(2) = 2',
44: 1:    '✅f(3) = Fizz',
44: 1:    '✅f(4) = 4',
44: 1:    '✅f(5) = Buzz',
44: 1:    '✅f(6) = Fizz',
44: 1:    '✅f(7) = Muzz',
44: 1:    '✅f(8) = 8',
44: 1:    '✅f(9) = Fizz',
44: 1:    '✅f(10) = Buzz',
44: 1:    '✅f(11) = Duzz',
44: 1:    '✅f(12) = Fizz',
44: 1:    '✅f(13) = Cazz',
44: 1:    '✅f(14) = Muzz',
44: 1:    '✅f(15) = FizzBuzz',
44: 1:    '✅f(16) = 16',
44: 1:    '✅f(17) = 17',
44: 1:    '✅f(21) = FizzMuzz',
44: 1:    '✅f(33) = FizzDuzz',
44: 1:    '✅f(35) = BuzzMuzz',
44: 1:    '✅f(39) = FizzCazz',
44: 1:    '✅f(49) = Muzz',
44: 1:    '✅f(55) = BuzzDuzz',
44: 1:    '✅f(65) = BuzzCazz',
44: 1:    '✅f(77) = MuzzDuzz',
44: 1:    '✅f(91) = MuzzCazz',
44: 1:    '✅f(105) = FizzBuzzMuzz',
44: 1:    '✅f(165) = FizzBuzzDuzz',
44: 1:    '✅f(195) = FizzBuzzCazz',
44: 1:    '✅f(231) = FizzMuzzDuzz',
44: 1:    '✅f(273) = FizzMuzzCazz',
44: 1:    '✅f(385) = BuzzMuzzDuzz',
44: 1:    '✅f(455) = BuzzMuzzCazz',
44: 1:    '✅f(715) = BuzzDuzzCazz',
44: 1:    '✅f(1001) = MuzzDuzzCazz',
44: 1:    '✅f(1155) = FizzBuzzMuzzDuzz',
44: 1:    '✅f(1365) = FizzBuzzMuzzCazz',
44: 1:    '❌f(2145) = ??? != FizzBuzzDuzzCazz'
44: 1:  ],
44: 1:  'level': 1,
44: 1:  'nextQuestion': '2145',
44: 1:  'questions': [
44: 1:    '1',
44: 1:    '2',
44: 1:    '3',
44: 1:    '4',
44: 1:    '5',
44: 1:    '6',
44: 1:    '7',
44: 1:    '8',
44: 1:    '9',
44: 1:    '10',
44: 1:    '11',
44: 1:    '12',
44: 1:    '13',
44: 1:    '14',
44: 1:    '15',
44: 1:    '16',
44: 1:    '17',
44: 1:    '21',
44: 1:    '33',
44: 1:    '35',
44: 1:    '39',
44: 1:    '49',
44: 1:    '55',
44: 1:    '65',
44: 1:    '77',
44: 1:    '91',
44: 1:    '105',
44: 1:    '165',
44: 1:    '195',
44: 1:    '231',
44: 1:    '273',
44: 1:    '385',
44: 1:    '455',
44: 1:    '715',
44: 1:    '1001',
44: 1:    '1155',
44: 1:    '1365',
44: 1:    '2145'
44: 1:  ]
44: 1:}
44: 1:Scores: 42
44: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz', 'FizzBuzzDuzz', 'FizzBuzzCazz', 'FizzMuzzDuzz', 'FizzMuzzCazz', 'BuzzMuzzDuzz', 'BuzzMuzzCazz', 'BuzzDuzzCazz', 'MuzzDuzzCazz', 'FizzBuzzMuzzDuzz', 'FizzBuzzMuzzCazz', 'FizzBuzzDuzzCazz']')
44: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
45: 1:BoardData {
45: 1:  'description': [
45: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
45: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
45: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
45: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
45: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
45: 1:    'Please write optimized code without any duplication.',
45: 1:    'For divider 11 - the word must be 'Duzz'.',
45: 1:    'For divider 13 - the word must be 'Cazz'.',
45: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
45: 1:  ],
45: 1:  'expectedAnswer': 'FizzMuzzDuzzCazz',
45: 1:  'history': [
45: 1:    {
45: 1:      'answer': '1',
45: 1:      'question': '1',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': '2',
45: 1:      'question': '2',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'Fizz',
45: 1:      'question': '3',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': '4',
45: 1:      'question': '4',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'Buzz',
45: 1:      'question': '5',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'Fizz',
45: 1:      'question': '6',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'Muzz',
45: 1:      'question': '7',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': '8',
45: 1:      'question': '8',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'Fizz',
45: 1:      'question': '9',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'Buzz',
45: 1:      'question': '10',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'Duzz',
45: 1:      'question': '11',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'Fizz',
45: 1:      'question': '12',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'Cazz',
45: 1:      'question': '13',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'Muzz',
45: 1:      'question': '14',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'FizzBuzz',
45: 1:      'question': '15',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': '16',
45: 1:      'question': '16',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': '17',
45: 1:      'question': '17',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'FizzMuzz',
45: 1:      'question': '21',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'FizzDuzz',
45: 1:      'question': '33',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'BuzzMuzz',
45: 1:      'question': '35',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'FizzCazz',
45: 1:      'question': '39',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'Muzz',
45: 1:      'question': '49',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'BuzzDuzz',
45: 1:      'question': '55',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'BuzzCazz',
45: 1:      'question': '65',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'MuzzDuzz',
45: 1:      'question': '77',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'MuzzCazz',
45: 1:      'question': '91',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'FizzBuzzMuzz',
45: 1:      'question': '105',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'FizzBuzzDuzz',
45: 1:      'question': '165',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'FizzBuzzCazz',
45: 1:      'question': '195',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'FizzMuzzDuzz',
45: 1:      'question': '231',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'FizzMuzzCazz',
45: 1:      'question': '273',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'BuzzMuzzDuzz',
45: 1:      'question': '385',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'BuzzMuzzCazz',
45: 1:      'question': '455',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'BuzzDuzzCazz',
45: 1:      'question': '715',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'MuzzDuzzCazz',
45: 1:      'question': '1001',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'FizzBuzzMuzzDuzz',
45: 1:      'question': '1155',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'FizzBuzzMuzzCazz',
45: 1:      'question': '1365',
45: 1:      'valid': true
45: 1:    },
45: 1:    {
45: 1:      'answer': 'FizzBuzzDuzzCazz',
45: 1:      'question': '2145',
45: 1:      'valid': true
45: 1:    }
45: 1:  ],
45: 1:  'info': [
45: 1:    '✅f(1) = 1',
45: 1:    '✅f(2) = 2',
45: 1:    '✅f(3) = Fizz',
45: 1:    '✅f(4) = 4',
45: 1:    '✅f(5) = Buzz',
45: 1:    '✅f(6) = Fizz',
45: 1:    '✅f(7) = Muzz',
45: 1:    '✅f(8) = 8',
45: 1:    '✅f(9) = Fizz',
45: 1:    '✅f(10) = Buzz',
45: 1:    '✅f(11) = Duzz',
45: 1:    '✅f(12) = Fizz',
45: 1:    '✅f(13) = Cazz',
45: 1:    '✅f(14) = Muzz',
45: 1:    '✅f(15) = FizzBuzz',
45: 1:    '✅f(16) = 16',
45: 1:    '✅f(17) = 17',
45: 1:    '✅f(21) = FizzMuzz',
45: 1:    '✅f(33) = FizzDuzz',
45: 1:    '✅f(35) = BuzzMuzz',
45: 1:    '✅f(39) = FizzCazz',
45: 1:    '✅f(49) = Muzz',
45: 1:    '✅f(55) = BuzzDuzz',
45: 1:    '✅f(65) = BuzzCazz',
45: 1:    '✅f(77) = MuzzDuzz',
45: 1:    '✅f(91) = MuzzCazz',
45: 1:    '✅f(105) = FizzBuzzMuzz',
45: 1:    '✅f(165) = FizzBuzzDuzz',
45: 1:    '✅f(195) = FizzBuzzCazz',
45: 1:    '✅f(231) = FizzMuzzDuzz',
45: 1:    '✅f(273) = FizzMuzzCazz',
45: 1:    '✅f(385) = BuzzMuzzDuzz',
45: 1:    '✅f(455) = BuzzMuzzCazz',
45: 1:    '✅f(715) = BuzzDuzzCazz',
45: 1:    '✅f(1001) = MuzzDuzzCazz',
45: 1:    '✅f(1155) = FizzBuzzMuzzDuzz',
45: 1:    '✅f(1365) = FizzBuzzMuzzCazz',
45: 1:    '✅f(2145) = FizzBuzzDuzzCazz',
45: 1:    '❌f(3003) = ??? != FizzMuzzDuzzCazz'
45: 1:  ],
45: 1:  'level': 1,
45: 1:  'nextQuestion': '3003',
45: 1:  'questions': [
45: 1:    '1',
45: 1:    '2',
45: 1:    '3',
45: 1:    '4',
45: 1:    '5',
45: 1:    '6',
45: 1:    '7',
45: 1:    '8',
45: 1:    '9',
45: 1:    '10',
45: 1:    '11',
45: 1:    '12',
45: 1:    '13',
45: 1:    '14',
45: 1:    '15',
45: 1:    '16',
45: 1:    '17',
45: 1:    '21',
45: 1:    '33',
45: 1:    '35',
45: 1:    '39',
45: 1:    '49',
45: 1:    '55',
45: 1:    '65',
45: 1:    '77',
45: 1:    '91',
45: 1:    '105',
45: 1:    '165',
45: 1:    '195',
45: 1:    '231',
45: 1:    '273',
45: 1:    '385',
45: 1:    '455',
45: 1:    '715',
45: 1:    '1001',
45: 1:    '1155',
45: 1:    '1365',
45: 1:    '2145',
45: 1:    '3003'
45: 1:  ]
45: 1:}
45: 1:Scores: 43
45: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz', 'FizzBuzzDuzz', 'FizzBuzzCazz', 'FizzMuzzDuzz', 'FizzMuzzCazz', 'BuzzMuzzDuzz', 'BuzzMuzzCazz', 'BuzzDuzzCazz', 'MuzzDuzzCazz', 'FizzBuzzMuzzDuzz', 'FizzBuzzMuzzCazz', 'FizzBuzzDuzzCazz', 'FizzMuzzDuzzCazz']')
45: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
46: 1:BoardData {
46: 1:  'description': [
46: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
46: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
46: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
46: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
46: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
46: 1:    'Please write optimized code without any duplication.',
46: 1:    'For divider 11 - the word must be 'Duzz'.',
46: 1:    'For divider 13 - the word must be 'Cazz'.',
46: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
46: 1:  ],
46: 1:  'expectedAnswer': 'BuzzMuzzDuzzCazz',
46: 1:  'history': [
46: 1:    {
46: 1:      'answer': '1',
46: 1:      'question': '1',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': '2',
46: 1:      'question': '2',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'Fizz',
46: 1:      'question': '3',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': '4',
46: 1:      'question': '4',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'Buzz',
46: 1:      'question': '5',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'Fizz',
46: 1:      'question': '6',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'Muzz',
46: 1:      'question': '7',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': '8',
46: 1:      'question': '8',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'Fizz',
46: 1:      'question': '9',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'Buzz',
46: 1:      'question': '10',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'Duzz',
46: 1:      'question': '11',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'Fizz',
46: 1:      'question': '12',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'Cazz',
46: 1:      'question': '13',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'Muzz',
46: 1:      'question': '14',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'FizzBuzz',
46: 1:      'question': '15',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': '16',
46: 1:      'question': '16',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': '17',
46: 1:      'question': '17',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'FizzMuzz',
46: 1:      'question': '21',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'FizzDuzz',
46: 1:      'question': '33',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'BuzzMuzz',
46: 1:      'question': '35',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'FizzCazz',
46: 1:      'question': '39',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'Muzz',
46: 1:      'question': '49',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'BuzzDuzz',
46: 1:      'question': '55',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'BuzzCazz',
46: 1:      'question': '65',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'MuzzDuzz',
46: 1:      'question': '77',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'MuzzCazz',
46: 1:      'question': '91',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'FizzBuzzMuzz',
46: 1:      'question': '105',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'FizzBuzzDuzz',
46: 1:      'question': '165',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'FizzBuzzCazz',
46: 1:      'question': '195',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'FizzMuzzDuzz',
46: 1:      'question': '231',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'FizzMuzzCazz',
46: 1:      'question': '273',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'BuzzMuzzDuzz',
46: 1:      'question': '385',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'BuzzMuzzCazz',
46: 1:      'question': '455',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'BuzzDuzzCazz',
46: 1:      'question': '715',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'MuzzDuzzCazz',
46: 1:      'question': '1001',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'FizzBuzzMuzzDuzz',
46: 1:      'question': '1155',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'FizzBuzzMuzzCazz',
46: 1:      'question': '1365',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'FizzBuzzDuzzCazz',
46: 1:      'question': '2145',
46: 1:      'valid': true
46: 1:    },
46: 1:    {
46: 1:      'answer': 'FizzMuzzDuzzCazz',
46: 1:      'question': '3003',
46: 1:      'valid': true
46: 1:    }
46: 1:  ],
46: 1:  'info': [
46: 1:    '✅f(1) = 1',
46: 1:    '✅f(2) = 2',
46: 1:    '✅f(3) = Fizz',
46: 1:    '✅f(4) = 4',
46: 1:    '✅f(5) = Buzz',
46: 1:    '✅f(6) = Fizz',
46: 1:    '✅f(7) = Muzz',
46: 1:    '✅f(8) = 8',
46: 1:    '✅f(9) = Fizz',
46: 1:    '✅f(10) = Buzz',
46: 1:    '✅f(11) = Duzz',
46: 1:    '✅f(12) = Fizz',
46: 1:    '✅f(13) = Cazz',
46: 1:    '✅f(14) = Muzz',
46: 1:    '✅f(15) = FizzBuzz',
46: 1:    '✅f(16) = 16',
46: 1:    '✅f(17) = 17',
46: 1:    '✅f(21) = FizzMuzz',
46: 1:    '✅f(33) = FizzDuzz',
46: 1:    '✅f(35) = BuzzMuzz',
46: 1:    '✅f(39) = FizzCazz',
46: 1:    '✅f(49) = Muzz',
46: 1:    '✅f(55) = BuzzDuzz',
46: 1:    '✅f(65) = BuzzCazz',
46: 1:    '✅f(77) = MuzzDuzz',
46: 1:    '✅f(91) = MuzzCazz',
46: 1:    '✅f(105) = FizzBuzzMuzz',
46: 1:    '✅f(165) = FizzBuzzDuzz',
46: 1:    '✅f(195) = FizzBuzzCazz',
46: 1:    '✅f(231) = FizzMuzzDuzz',
46: 1:    '✅f(273) = FizzMuzzCazz',
46: 1:    '✅f(385) = BuzzMuzzDuzz',
46: 1:    '✅f(455) = BuzzMuzzCazz',
46: 1:    '✅f(715) = BuzzDuzzCazz',
46: 1:    '✅f(1001) = MuzzDuzzCazz',
46: 1:    '✅f(1155) = FizzBuzzMuzzDuzz',
46: 1:    '✅f(1365) = FizzBuzzMuzzCazz',
46: 1:    '✅f(2145) = FizzBuzzDuzzCazz',
46: 1:    '✅f(3003) = FizzMuzzDuzzCazz',
46: 1:    '❌f(5005) = ??? != BuzzMuzzDuzzCazz'
46: 1:  ],
46: 1:  'level': 1,
46: 1:  'nextQuestion': '5005',
46: 1:  'questions': [
46: 1:    '1',
46: 1:    '2',
46: 1:    '3',
46: 1:    '4',
46: 1:    '5',
46: 1:    '6',
46: 1:    '7',
46: 1:    '8',
46: 1:    '9',
46: 1:    '10',
46: 1:    '11',
46: 1:    '12',
46: 1:    '13',
46: 1:    '14',
46: 1:    '15',
46: 1:    '16',
46: 1:    '17',
46: 1:    '21',
46: 1:    '33',
46: 1:    '35',
46: 1:    '39',
46: 1:    '49',
46: 1:    '55',
46: 1:    '65',
46: 1:    '77',
46: 1:    '91',
46: 1:    '105',
46: 1:    '165',
46: 1:    '195',
46: 1:    '231',
46: 1:    '273',
46: 1:    '385',
46: 1:    '455',
46: 1:    '715',
46: 1:    '1001',
46: 1:    '1155',
46: 1:    '1365',
46: 1:    '2145',
46: 1:    '3003',
46: 1:    '5005'
46: 1:  ]
46: 1:}
46: 1:Scores: 44
46: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz', 'FizzBuzzDuzz', 'FizzBuzzCazz', 'FizzMuzzDuzz', 'FizzMuzzCazz', 'BuzzMuzzDuzz', 'BuzzMuzzCazz', 'BuzzDuzzCazz', 'MuzzDuzzCazz', 'FizzBuzzMuzzDuzz', 'FizzBuzzMuzzCazz', 'FizzBuzzDuzzCazz', 'FizzMuzzDuzzCazz', 'BuzzMuzzDuzzCazz']')
46: 1:Fire Event: PassTest{complexity=5, testCount=41}
------------------------------------------
47: 1:BoardData {
47: 1:  'description': [
47: 1:    'Write a javascript method that takes one int argument and returns a string containing the number itself.',
47: 1:    'For those numbers that are divisible by 3, the method should return 'Fizz'',
47: 1:    'For those numbers divisible by 5 it should return 'Buzz'.',
47: 1:    'For those numbers divisible by both 3 and 5 - 'FizzBuzz'.',
47: 1:    'Proceed in the same way if there is a number with a divisor of 7. The word 'Muzz' is used for it. .',
47: 1:    'Please write optimized code without any duplication.',
47: 1:    'For divider 11 - the word must be 'Duzz'.',
47: 1:    'For divider 13 - the word must be 'Cazz'.',
47: 1:    'Please use a map with constants and dividers to avoid multiple ifs.'
47: 1:  ],
47: 1:  'expectedAnswer': 'FizzBuzzMuzzDuzzCazz',
47: 1:  'history': [
47: 1:    {
47: 1:      'answer': '1',
47: 1:      'question': '1',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': '2',
47: 1:      'question': '2',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'Fizz',
47: 1:      'question': '3',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': '4',
47: 1:      'question': '4',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'Buzz',
47: 1:      'question': '5',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'Fizz',
47: 1:      'question': '6',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'Muzz',
47: 1:      'question': '7',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': '8',
47: 1:      'question': '8',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'Fizz',
47: 1:      'question': '9',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'Buzz',
47: 1:      'question': '10',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'Duzz',
47: 1:      'question': '11',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'Fizz',
47: 1:      'question': '12',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'Cazz',
47: 1:      'question': '13',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'Muzz',
47: 1:      'question': '14',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'FizzBuzz',
47: 1:      'question': '15',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': '16',
47: 1:      'question': '16',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': '17',
47: 1:      'question': '17',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'FizzMuzz',
47: 1:      'question': '21',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'FizzDuzz',
47: 1:      'question': '33',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'BuzzMuzz',
47: 1:      'question': '35',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'FizzCazz',
47: 1:      'question': '39',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'Muzz',
47: 1:      'question': '49',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'BuzzDuzz',
47: 1:      'question': '55',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'BuzzCazz',
47: 1:      'question': '65',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'MuzzDuzz',
47: 1:      'question': '77',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'MuzzCazz',
47: 1:      'question': '91',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'FizzBuzzMuzz',
47: 1:      'question': '105',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'FizzBuzzDuzz',
47: 1:      'question': '165',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'FizzBuzzCazz',
47: 1:      'question': '195',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'FizzMuzzDuzz',
47: 1:      'question': '231',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'FizzMuzzCazz',
47: 1:      'question': '273',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'BuzzMuzzDuzz',
47: 1:      'question': '385',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'BuzzMuzzCazz',
47: 1:      'question': '455',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'BuzzDuzzCazz',
47: 1:      'question': '715',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'MuzzDuzzCazz',
47: 1:      'question': '1001',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'FizzBuzzMuzzDuzz',
47: 1:      'question': '1155',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'FizzBuzzMuzzCazz',
47: 1:      'question': '1365',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'FizzBuzzDuzzCazz',
47: 1:      'question': '2145',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'FizzMuzzDuzzCazz',
47: 1:      'question': '3003',
47: 1:      'valid': true
47: 1:    },
47: 1:    {
47: 1:      'answer': 'BuzzMuzzDuzzCazz',
47: 1:      'question': '5005',
47: 1:      'valid': true
47: 1:    }
47: 1:  ],
47: 1:  'info': [
47: 1:    '✅f(1) = 1',
47: 1:    '✅f(2) = 2',
47: 1:    '✅f(3) = Fizz',
47: 1:    '✅f(4) = 4',
47: 1:    '✅f(5) = Buzz',
47: 1:    '✅f(6) = Fizz',
47: 1:    '✅f(7) = Muzz',
47: 1:    '✅f(8) = 8',
47: 1:    '✅f(9) = Fizz',
47: 1:    '✅f(10) = Buzz',
47: 1:    '✅f(11) = Duzz',
47: 1:    '✅f(12) = Fizz',
47: 1:    '✅f(13) = Cazz',
47: 1:    '✅f(14) = Muzz',
47: 1:    '✅f(15) = FizzBuzz',
47: 1:    '✅f(16) = 16',
47: 1:    '✅f(17) = 17',
47: 1:    '✅f(21) = FizzMuzz',
47: 1:    '✅f(33) = FizzDuzz',
47: 1:    '✅f(35) = BuzzMuzz',
47: 1:    '✅f(39) = FizzCazz',
47: 1:    '✅f(49) = Muzz',
47: 1:    '✅f(55) = BuzzDuzz',
47: 1:    '✅f(65) = BuzzCazz',
47: 1:    '✅f(77) = MuzzDuzz',
47: 1:    '✅f(91) = MuzzCazz',
47: 1:    '✅f(105) = FizzBuzzMuzz',
47: 1:    '✅f(165) = FizzBuzzDuzz',
47: 1:    '✅f(195) = FizzBuzzCazz',
47: 1:    '✅f(231) = FizzMuzzDuzz',
47: 1:    '✅f(273) = FizzMuzzCazz',
47: 1:    '✅f(385) = BuzzMuzzDuzz',
47: 1:    '✅f(455) = BuzzMuzzCazz',
47: 1:    '✅f(715) = BuzzDuzzCazz',
47: 1:    '✅f(1001) = MuzzDuzzCazz',
47: 1:    '✅f(1155) = FizzBuzzMuzzDuzz',
47: 1:    '✅f(1365) = FizzBuzzMuzzCazz',
47: 1:    '✅f(2145) = FizzBuzzDuzzCazz',
47: 1:    '✅f(3003) = FizzMuzzDuzzCazz',
47: 1:    '✅f(5005) = BuzzMuzzDuzzCazz',
47: 1:    '❌f(15015) = ??? != FizzBuzzMuzzDuzzCazz'
47: 1:  ],
47: 1:  'level': 1,
47: 1:  'nextQuestion': '15015',
47: 1:  'questions': [
47: 1:    '1',
47: 1:    '2',
47: 1:    '3',
47: 1:    '4',
47: 1:    '5',
47: 1:    '6',
47: 1:    '7',
47: 1:    '8',
47: 1:    '9',
47: 1:    '10',
47: 1:    '11',
47: 1:    '12',
47: 1:    '13',
47: 1:    '14',
47: 1:    '15',
47: 1:    '16',
47: 1:    '17',
47: 1:    '21',
47: 1:    '33',
47: 1:    '35',
47: 1:    '39',
47: 1:    '49',
47: 1:    '55',
47: 1:    '65',
47: 1:    '77',
47: 1:    '91',
47: 1:    '105',
47: 1:    '165',
47: 1:    '195',
47: 1:    '231',
47: 1:    '273',
47: 1:    '385',
47: 1:    '455',
47: 1:    '715',
47: 1:    '1001',
47: 1:    '1155',
47: 1:    '1365',
47: 1:    '2145',
47: 1:    '3003',
47: 1:    '5005',
47: 1:    '15015'
47: 1:  ]
47: 1:}
47: 1:Scores: 45
47: 1:Answer: message('['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Muzz', '8', 'Fizz', 'Buzz', 'Duzz', 'Fizz', 'Cazz', 'Muzz', 'FizzBuzz', '16', '17', 'FizzMuzz', 'FizzDuzz', 'BuzzMuzz', 'FizzCazz', 'Muzz', 'BuzzDuzz', 'BuzzCazz', 'MuzzDuzz', 'MuzzCazz', 'FizzBuzzMuzz', 'FizzBuzzDuzz', 'FizzBuzzCazz', 'FizzMuzzDuzz', 'FizzMuzzCazz', 'BuzzMuzzDuzz', 'BuzzMuzzCazz', 'BuzzDuzzCazz', 'MuzzDuzzCazz', 'FizzBuzzMuzzDuzz', 'FizzBuzzMuzzCazz', 'FizzBuzzDuzzCazz', 'FizzMuzzDuzzCazz', 'BuzzMuzzDuzzCazz', 'FizzBuzzMuzzDuzzCazz']')
47: 1:Fire Event: PassTest{complexity=5, testCount=41}
47: 1:Fire Event: NextAlgorithm{complexity=5, time=0}
------------------------------------------
48: 1:BoardData {
48: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
48: 1:  'history': [
48: 1:    {
48: 1:      'answer': '1',
48: 1:      'question': '1',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': '2',
48: 1:      'question': '2',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'Fizz',
48: 1:      'question': '3',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': '4',
48: 1:      'question': '4',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'Buzz',
48: 1:      'question': '5',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'Fizz',
48: 1:      'question': '6',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'Muzz',
48: 1:      'question': '7',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': '8',
48: 1:      'question': '8',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'Fizz',
48: 1:      'question': '9',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'Buzz',
48: 1:      'question': '10',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'Duzz',
48: 1:      'question': '11',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'Fizz',
48: 1:      'question': '12',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'Cazz',
48: 1:      'question': '13',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'Muzz',
48: 1:      'question': '14',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'FizzBuzz',
48: 1:      'question': '15',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': '16',
48: 1:      'question': '16',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': '17',
48: 1:      'question': '17',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'FizzMuzz',
48: 1:      'question': '21',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'FizzDuzz',
48: 1:      'question': '33',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'BuzzMuzz',
48: 1:      'question': '35',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'FizzCazz',
48: 1:      'question': '39',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'Muzz',
48: 1:      'question': '49',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'BuzzDuzz',
48: 1:      'question': '55',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'BuzzCazz',
48: 1:      'question': '65',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'MuzzDuzz',
48: 1:      'question': '77',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'MuzzCazz',
48: 1:      'question': '91',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'FizzBuzzMuzz',
48: 1:      'question': '105',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'FizzBuzzDuzz',
48: 1:      'question': '165',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'FizzBuzzCazz',
48: 1:      'question': '195',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'FizzMuzzDuzz',
48: 1:      'question': '231',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'FizzMuzzCazz',
48: 1:      'question': '273',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'BuzzMuzzDuzz',
48: 1:      'question': '385',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'BuzzMuzzCazz',
48: 1:      'question': '455',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'BuzzDuzzCazz',
48: 1:      'question': '715',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'MuzzDuzzCazz',
48: 1:      'question': '1001',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'FizzBuzzMuzzDuzz',
48: 1:      'question': '1155',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'FizzBuzzMuzzCazz',
48: 1:      'question': '1365',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'FizzBuzzDuzzCazz',
48: 1:      'question': '2145',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'FizzMuzzDuzzCazz',
48: 1:      'question': '3003',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'BuzzMuzzDuzzCazz',
48: 1:      'question': '5005',
48: 1:      'valid': true
48: 1:    },
48: 1:    {
48: 1:      'answer': 'FizzBuzzMuzzDuzzCazz',
48: 1:      'question': '15015',
48: 1:      'valid': true
48: 1:    }
48: 1:  ],
48: 1:  'info': [
48: 1:    '✅f(1) = 1',
48: 1:    '✅f(2) = 2',
48: 1:    '✅f(3) = Fizz',
48: 1:    '✅f(4) = 4',
48: 1:    '✅f(5) = Buzz',
48: 1:    '✅f(6) = Fizz',
48: 1:    '✅f(7) = Muzz',
48: 1:    '✅f(8) = 8',
48: 1:    '✅f(9) = Fizz',
48: 1:    '✅f(10) = Buzz',
48: 1:    '✅f(11) = Duzz',
48: 1:    '✅f(12) = Fizz',
48: 1:    '✅f(13) = Cazz',
48: 1:    '✅f(14) = Muzz',
48: 1:    '✅f(15) = FizzBuzz',
48: 1:    '✅f(16) = 16',
48: 1:    '✅f(17) = 17',
48: 1:    '✅f(21) = FizzMuzz',
48: 1:    '✅f(33) = FizzDuzz',
48: 1:    '✅f(35) = BuzzMuzz',
48: 1:    '✅f(39) = FizzCazz',
48: 1:    '✅f(49) = Muzz',
48: 1:    '✅f(55) = BuzzDuzz',
48: 1:    '✅f(65) = BuzzCazz',
48: 1:    '✅f(77) = MuzzDuzz',
48: 1:    '✅f(91) = MuzzCazz',
48: 1:    '✅f(105) = FizzBuzzMuzz',
48: 1:    '✅f(165) = FizzBuzzDuzz',
48: 1:    '✅f(195) = FizzBuzzCazz',
48: 1:    '✅f(231) = FizzMuzzDuzz',
48: 1:    '✅f(273) = FizzMuzzCazz',
48: 1:    '✅f(385) = BuzzMuzzDuzz',
48: 1:    '✅f(455) = BuzzMuzzCazz',
48: 1:    '✅f(715) = BuzzDuzzCazz',
48: 1:    '✅f(1001) = MuzzDuzzCazz',
48: 1:    '✅f(1155) = FizzBuzzMuzzDuzz',
48: 1:    '✅f(1365) = FizzBuzzMuzzCazz',
48: 1:    '✅f(2145) = FizzBuzzDuzzCazz',
48: 1:    '✅f(3003) = FizzMuzzDuzzCazz',
48: 1:    '✅f(5005) = BuzzMuzzDuzzCazz',
48: 1:    '✅f(15015) = FizzBuzzMuzzDuzzCazz'
48: 1:  ],
48: 1:  'level': 1,
48: 1:  'questions': []
48: 1:}
48: 1:Scores: 720
48: 1:Answer: message('StartNextLevel')
48: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
49: 1:BoardData {
49: 1:  'description': [
49: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
49: 1:    'Write a javascript method.',
49: 1:    'You are given a string of space separated numbers.',
49: 1:    'All numbers are valid Int32, no need to validate them.',
49: 1:    'Give your answer as a string matching 'odd' or 'even'.',
49: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
49: 1:    'Don't use comments for clarification.',
49: 1:    'Make the code as readable and concise as possible.'
49: 1:  ],
49: 1:  'expectedAnswer': 'even',
49: 1:  'history': [],
49: 1:  'info': ['❌f(0) = ??? != even'],
49: 1:  'level': 2,
49: 1:  'nextQuestion': '0',
49: 1:  'questions': ['0']
49: 1:}
49: 1:Scores: 720
49: 1:Answer: message('['even']')
49: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
50: 1:BoardData {
50: 1:  'description': [
50: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
50: 1:    'Write a javascript method.',
50: 1:    'You are given a string of space separated numbers.',
50: 1:    'All numbers are valid Int32, no need to validate them.',
50: 1:    'Give your answer as a string matching 'odd' or 'even'.',
50: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
50: 1:    'Don't use comments for clarification.',
50: 1:    'Make the code as readable and concise as possible.'
50: 1:  ],
50: 1:  'expectedAnswer': 'odd',
50: 1:  'history': [{
50: 1:    'answer': 'even',
50: 1:    'question': '0',
50: 1:    'valid': true
50: 1:  }],
50: 1:  'info': [
50: 1:    '✅f(0) = even',
50: 1:    '❌f(0 1 4) = ??? != odd'
50: 1:  ],
50: 1:  'level': 2,
50: 1:  'nextQuestion': '0 1 4',
50: 1:  'questions': [
50: 1:    '0',
50: 1:    '0 1 4'
50: 1:  ]
50: 1:}
50: 1:Scores: 722
50: 1:Answer: message('['even', 'odd']')
50: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
51: 1:BoardData {
51: 1:  'description': [
51: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
51: 1:    'Write a javascript method.',
51: 1:    'You are given a string of space separated numbers.',
51: 1:    'All numbers are valid Int32, no need to validate them.',
51: 1:    'Give your answer as a string matching 'odd' or 'even'.',
51: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
51: 1:    'Don't use comments for clarification.',
51: 1:    'Make the code as readable and concise as possible.'
51: 1:  ],
51: 1:  'expectedAnswer': 'even',
51: 1:  'history': [
51: 1:    {
51: 1:      'answer': 'even',
51: 1:      'question': '0',
51: 1:      'valid': true
51: 1:    },
51: 1:    {
51: 1:      'answer': 'odd',
51: 1:      'question': '0 1 4',
51: 1:      'valid': true
51: 1:    }
51: 1:  ],
51: 1:  'info': [
51: 1:    '✅f(0) = even',
51: 1:    '✅f(0 1 4) = odd',
51: 1:    '❌f(0 -1 5) = ??? != even'
51: 1:  ],
51: 1:  'level': 2,
51: 1:  'nextQuestion': '0 -1 5',
51: 1:  'questions': [
51: 1:    '0',
51: 1:    '0 1 4',
51: 1:    '0 -1 5'
51: 1:  ]
51: 1:}
51: 1:Scores: 724
51: 1:Answer: message('['even', 'odd', 'even']')
51: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
52: 1:BoardData {
52: 1:  'description': [
52: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
52: 1:    'Write a javascript method.',
52: 1:    'You are given a string of space separated numbers.',
52: 1:    'All numbers are valid Int32, no need to validate them.',
52: 1:    'Give your answer as a string matching 'odd' or 'even'.',
52: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
52: 1:    'Don't use comments for clarification.',
52: 1:    'Make the code as readable and concise as possible.'
52: 1:  ],
52: 1:  'expectedAnswer': 'odd',
52: 1:  'history': [
52: 1:    {
52: 1:      'answer': 'even',
52: 1:      'question': '0',
52: 1:      'valid': true
52: 1:    },
52: 1:    {
52: 1:      'answer': 'odd',
52: 1:      'question': '0 1 4',
52: 1:      'valid': true
52: 1:    },
52: 1:    {
52: 1:      'answer': 'even',
52: 1:      'question': '0 -1 5',
52: 1:      'valid': true
52: 1:    }
52: 1:  ],
52: 1:  'info': [
52: 1:    '✅f(0) = even',
52: 1:    '✅f(0 1 4) = odd',
52: 1:    '✅f(0 -1 5) = even',
52: 1:    '❌f(1 2 3 4 5) = ??? != odd'
52: 1:  ],
52: 1:  'level': 2,
52: 1:  'nextQuestion': '1 2 3 4 5',
52: 1:  'questions': [
52: 1:    '0',
52: 1:    '0 1 4',
52: 1:    '0 -1 5',
52: 1:    '1 2 3 4 5'
52: 1:  ]
52: 1:}
52: 1:Scores: 726
52: 1:Answer: message('['even', 'odd', 'even', 'odd']')
52: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
53: 1:BoardData {
53: 1:  'description': [
53: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
53: 1:    'Write a javascript method.',
53: 1:    'You are given a string of space separated numbers.',
53: 1:    'All numbers are valid Int32, no need to validate them.',
53: 1:    'Give your answer as a string matching 'odd' or 'even'.',
53: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
53: 1:    'Don't use comments for clarification.',
53: 1:    'Make the code as readable and concise as possible.'
53: 1:  ],
53: 1:  'expectedAnswer': 'odd',
53: 1:  'history': [
53: 1:    {
53: 1:      'answer': 'even',
53: 1:      'question': '0',
53: 1:      'valid': true
53: 1:    },
53: 1:    {
53: 1:      'answer': 'odd',
53: 1:      'question': '0 1 4',
53: 1:      'valid': true
53: 1:    },
53: 1:    {
53: 1:      'answer': 'even',
53: 1:      'question': '0 -1 5',
53: 1:      'valid': true
53: 1:    },
53: 1:    {
53: 1:      'answer': 'odd',
53: 1:      'question': '1 2 3 4 5',
53: 1:      'valid': true
53: 1:    }
53: 1:  ],
53: 1:  'info': [
53: 1:    '✅f(0) = even',
53: 1:    '✅f(0 1 4) = odd',
53: 1:    '✅f(0 -1 5) = even',
53: 1:    '✅f(1 2 3 4 5) = odd',
53: 1:    '❌f(1 2 -3 4 5) = ??? != odd'
53: 1:  ],
53: 1:  'level': 2,
53: 1:  'nextQuestion': '1 2 -3 4 5',
53: 1:  'questions': [
53: 1:    '0',
53: 1:    '0 1 4',
53: 1:    '0 -1 5',
53: 1:    '1 2 3 4 5',
53: 1:    '1 2 -3 4 5'
53: 1:  ]
53: 1:}
53: 1:Scores: 728
53: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd']')
53: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
54: 1:BoardData {
54: 1:  'description': [
54: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
54: 1:    'Write a javascript method.',
54: 1:    'You are given a string of space separated numbers.',
54: 1:    'All numbers are valid Int32, no need to validate them.',
54: 1:    'Give your answer as a string matching 'odd' or 'even'.',
54: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
54: 1:    'Don't use comments for clarification.',
54: 1:    'Make the code as readable and concise as possible.'
54: 1:  ],
54: 1:  'expectedAnswer': 'even',
54: 1:  'history': [
54: 1:    {
54: 1:      'answer': 'even',
54: 1:      'question': '0',
54: 1:      'valid': true
54: 1:    },
54: 1:    {
54: 1:      'answer': 'odd',
54: 1:      'question': '0 1 4',
54: 1:      'valid': true
54: 1:    },
54: 1:    {
54: 1:      'answer': 'even',
54: 1:      'question': '0 -1 5',
54: 1:      'valid': true
54: 1:    },
54: 1:    {
54: 1:      'answer': 'odd',
54: 1:      'question': '1 2 3 4 5',
54: 1:      'valid': true
54: 1:    },
54: 1:    {
54: 1:      'answer': 'odd',
54: 1:      'question': '1 2 -3 4 5',
54: 1:      'valid': true
54: 1:    }
54: 1:  ],
54: 1:  'info': [
54: 1:    '✅f(0) = even',
54: 1:    '✅f(0 1 4) = odd',
54: 1:    '✅f(0 -1 5) = even',
54: 1:    '✅f(1 2 3 4 5) = odd',
54: 1:    '✅f(1 2 -3 4 5) = odd',
54: 1:    '❌f(1 9 3 4 -5) = ??? != even'
54: 1:  ],
54: 1:  'level': 2,
54: 1:  'nextQuestion': '1 9 3 4 -5',
54: 1:  'questions': [
54: 1:    '0',
54: 1:    '0 1 4',
54: 1:    '0 -1 5',
54: 1:    '1 2 3 4 5',
54: 1:    '1 2 -3 4 5',
54: 1:    '1 9 3 4 -5'
54: 1:  ]
54: 1:}
54: 1:Scores: 730
54: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even']')
54: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
55: 1:BoardData {
55: 1:  'description': [
55: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
55: 1:    'Write a javascript method.',
55: 1:    'You are given a string of space separated numbers.',
55: 1:    'All numbers are valid Int32, no need to validate them.',
55: 1:    'Give your answer as a string matching 'odd' or 'even'.',
55: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
55: 1:    'Don't use comments for clarification.',
55: 1:    'Make the code as readable and concise as possible.'
55: 1:  ],
55: 1:  'expectedAnswer': 'odd',
55: 1:  'history': [
55: 1:    {
55: 1:      'answer': 'even',
55: 1:      'question': '0',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': 'odd',
55: 1:      'question': '0 1 4',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': 'even',
55: 1:      'question': '0 -1 5',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': 'odd',
55: 1:      'question': '1 2 3 4 5',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': 'odd',
55: 1:      'question': '1 2 -3 4 5',
55: 1:      'valid': true
55: 1:    },
55: 1:    {
55: 1:      'answer': 'even',
55: 1:      'question': '1 9 3 4 -5',
55: 1:      'valid': true
55: 1:    }
55: 1:  ],
55: 1:  'info': [
55: 1:    '✅f(0) = even',
55: 1:    '✅f(0 1 4) = odd',
55: 1:    '✅f(0 -1 5) = even',
55: 1:    '✅f(1 2 3 4 5) = odd',
55: 1:    '✅f(1 2 -3 4 5) = odd',
55: 1:    '✅f(1 9 3 4 -5) = even',
55: 1:    '❌f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = ??? != odd'
55: 1:  ],
55: 1:  'level': 2,
55: 1:  'nextQuestion': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
55: 1:  'questions': [
55: 1:    '0',
55: 1:    '0 1 4',
55: 1:    '0 -1 5',
55: 1:    '1 2 3 4 5',
55: 1:    '1 2 -3 4 5',
55: 1:    '1 9 3 4 -5',
55: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4'
55: 1:  ]
55: 1:}
55: 1:Scores: 732
55: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd']')
55: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
56: 1:BoardData {
56: 1:  'description': [
56: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
56: 1:    'Write a javascript method.',
56: 1:    'You are given a string of space separated numbers.',
56: 1:    'All numbers are valid Int32, no need to validate them.',
56: 1:    'Give your answer as a string matching 'odd' or 'even'.',
56: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
56: 1:    'Don't use comments for clarification.',
56: 1:    'Make the code as readable and concise as possible.'
56: 1:  ],
56: 1:  'expectedAnswer': 'even',
56: 1:  'history': [
56: 1:    {
56: 1:      'answer': 'even',
56: 1:      'question': '0',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': 'odd',
56: 1:      'question': '0 1 4',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': 'even',
56: 1:      'question': '0 -1 5',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': 'odd',
56: 1:      'question': '1 2 3 4 5',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': 'odd',
56: 1:      'question': '1 2 -3 4 5',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': 'even',
56: 1:      'question': '1 9 3 4 -5',
56: 1:      'valid': true
56: 1:    },
56: 1:    {
56: 1:      'answer': 'odd',
56: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
56: 1:      'valid': true
56: 1:    }
56: 1:  ],
56: 1:  'info': [
56: 1:    '✅f(0) = even',
56: 1:    '✅f(0 1 4) = odd',
56: 1:    '✅f(0 -1 5) = even',
56: 1:    '✅f(1 2 3 4 5) = odd',
56: 1:    '✅f(1 2 -3 4 5) = odd',
56: 1:    '✅f(1 9 3 4 -5) = even',
56: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
56: 1:    '❌f(1 2 3) = ??? != even'
56: 1:  ],
56: 1:  'level': 2,
56: 1:  'nextQuestion': '1 2 3',
56: 1:  'questions': [
56: 1:    '0',
56: 1:    '0 1 4',
56: 1:    '0 -1 5',
56: 1:    '1 2 3 4 5',
56: 1:    '1 2 -3 4 5',
56: 1:    '1 9 3 4 -5',
56: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
56: 1:    '1 2 3'
56: 1:  ]
56: 1:}
56: 1:Scores: 734
56: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even']')
56: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
57: 1:BoardData {
57: 1:  'description': [
57: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
57: 1:    'Write a javascript method.',
57: 1:    'You are given a string of space separated numbers.',
57: 1:    'All numbers are valid Int32, no need to validate them.',
57: 1:    'Give your answer as a string matching 'odd' or 'even'.',
57: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
57: 1:    'Don't use comments for clarification.',
57: 1:    'Make the code as readable and concise as possible.'
57: 1:  ],
57: 1:  'expectedAnswer': 'odd',
57: 1:  'history': [
57: 1:    {
57: 1:      'answer': 'even',
57: 1:      'question': '0',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': 'odd',
57: 1:      'question': '0 1 4',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': 'even',
57: 1:      'question': '0 -1 5',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': 'odd',
57: 1:      'question': '1 2 3 4 5',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': 'odd',
57: 1:      'question': '1 2 -3 4 5',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': 'even',
57: 1:      'question': '1 9 3 4 -5',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': 'odd',
57: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
57: 1:      'valid': true
57: 1:    },
57: 1:    {
57: 1:      'answer': 'even',
57: 1:      'question': '1 2 3',
57: 1:      'valid': true
57: 1:    }
57: 1:  ],
57: 1:  'info': [
57: 1:    '✅f(0) = even',
57: 1:    '✅f(0 1 4) = odd',
57: 1:    '✅f(0 -1 5) = even',
57: 1:    '✅f(1 2 3 4 5) = odd',
57: 1:    '✅f(1 2 -3 4 5) = odd',
57: 1:    '✅f(1 9 3 4 -5) = even',
57: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
57: 1:    '✅f(1 2 3) = even',
57: 1:    '❌f(1) = ??? != odd'
57: 1:  ],
57: 1:  'level': 2,
57: 1:  'nextQuestion': '1',
57: 1:  'questions': [
57: 1:    '0',
57: 1:    '0 1 4',
57: 1:    '0 -1 5',
57: 1:    '1 2 3 4 5',
57: 1:    '1 2 -3 4 5',
57: 1:    '1 9 3 4 -5',
57: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
57: 1:    '1 2 3',
57: 1:    '1'
57: 1:  ]
57: 1:}
57: 1:Scores: 736
57: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd']')
57: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
58: 1:BoardData {
58: 1:  'description': [
58: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
58: 1:    'Write a javascript method.',
58: 1:    'You are given a string of space separated numbers.',
58: 1:    'All numbers are valid Int32, no need to validate them.',
58: 1:    'Give your answer as a string matching 'odd' or 'even'.',
58: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
58: 1:    'Don't use comments for clarification.',
58: 1:    'Make the code as readable and concise as possible.'
58: 1:  ],
58: 1:  'expectedAnswer': 'odd',
58: 1:  'history': [
58: 1:    {
58: 1:      'answer': 'even',
58: 1:      'question': '0',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': 'odd',
58: 1:      'question': '0 1 4',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': 'even',
58: 1:      'question': '0 -1 5',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': 'odd',
58: 1:      'question': '1 2 3 4 5',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': 'odd',
58: 1:      'question': '1 2 -3 4 5',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': 'even',
58: 1:      'question': '1 9 3 4 -5',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': 'odd',
58: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': 'even',
58: 1:      'question': '1 2 3',
58: 1:      'valid': true
58: 1:    },
58: 1:    {
58: 1:      'answer': 'odd',
58: 1:      'question': '1',
58: 1:      'valid': true
58: 1:    }
58: 1:  ],
58: 1:  'info': [
58: 1:    '✅f(0) = even',
58: 1:    '✅f(0 1 4) = odd',
58: 1:    '✅f(0 -1 5) = even',
58: 1:    '✅f(1 2 3 4 5) = odd',
58: 1:    '✅f(1 2 -3 4 5) = odd',
58: 1:    '✅f(1 9 3 4 -5) = even',
58: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
58: 1:    '✅f(1 2 3) = even',
58: 1:    '✅f(1) = odd',
58: 1:    '❌f(-1) = ??? != odd'
58: 1:  ],
58: 1:  'level': 2,
58: 1:  'nextQuestion': '-1',
58: 1:  'questions': [
58: 1:    '0',
58: 1:    '0 1 4',
58: 1:    '0 -1 5',
58: 1:    '1 2 3 4 5',
58: 1:    '1 2 -3 4 5',
58: 1:    '1 9 3 4 -5',
58: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
58: 1:    '1 2 3',
58: 1:    '1',
58: 1:    '-1'
58: 1:  ]
58: 1:}
58: 1:Scores: 738
58: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd']')
58: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
59: 1:BoardData {
59: 1:  'description': [
59: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
59: 1:    'Write a javascript method.',
59: 1:    'You are given a string of space separated numbers.',
59: 1:    'All numbers are valid Int32, no need to validate them.',
59: 1:    'Give your answer as a string matching 'odd' or 'even'.',
59: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
59: 1:    'Don't use comments for clarification.',
59: 1:    'Make the code as readable and concise as possible.'
59: 1:  ],
59: 1:  'expectedAnswer': 'even',
59: 1:  'history': [
59: 1:    {
59: 1:      'answer': 'even',
59: 1:      'question': '0',
59: 1:      'valid': true
59: 1:    },
59: 1:    {
59: 1:      'answer': 'odd',
59: 1:      'question': '0 1 4',
59: 1:      'valid': true
59: 1:    },
59: 1:    {
59: 1:      'answer': 'even',
59: 1:      'question': '0 -1 5',
59: 1:      'valid': true
59: 1:    },
59: 1:    {
59: 1:      'answer': 'odd',
59: 1:      'question': '1 2 3 4 5',
59: 1:      'valid': true
59: 1:    },
59: 1:    {
59: 1:      'answer': 'odd',
59: 1:      'question': '1 2 -3 4 5',
59: 1:      'valid': true
59: 1:    },
59: 1:    {
59: 1:      'answer': 'even',
59: 1:      'question': '1 9 3 4 -5',
59: 1:      'valid': true
59: 1:    },
59: 1:    {
59: 1:      'answer': 'odd',
59: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
59: 1:      'valid': true
59: 1:    },
59: 1:    {
59: 1:      'answer': 'even',
59: 1:      'question': '1 2 3',
59: 1:      'valid': true
59: 1:    },
59: 1:    {
59: 1:      'answer': 'odd',
59: 1:      'question': '1',
59: 1:      'valid': true
59: 1:    },
59: 1:    {
59: 1:      'answer': 'odd',
59: 1:      'question': '-1',
59: 1:      'valid': true
59: 1:    }
59: 1:  ],
59: 1:  'info': [
59: 1:    '✅f(0) = even',
59: 1:    '✅f(0 1 4) = odd',
59: 1:    '✅f(0 -1 5) = even',
59: 1:    '✅f(1 2 3 4 5) = odd',
59: 1:    '✅f(1 2 -3 4 5) = odd',
59: 1:    '✅f(1 9 3 4 -5) = even',
59: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
59: 1:    '✅f(1 2 3) = even',
59: 1:    '✅f(1) = odd',
59: 1:    '✅f(-1) = odd',
59: 1:    '❌f(-1 -1 0) = ??? != even'
59: 1:  ],
59: 1:  'level': 2,
59: 1:  'nextQuestion': '-1 -1 0',
59: 1:  'questions': [
59: 1:    '0',
59: 1:    '0 1 4',
59: 1:    '0 -1 5',
59: 1:    '1 2 3 4 5',
59: 1:    '1 2 -3 4 5',
59: 1:    '1 9 3 4 -5',
59: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
59: 1:    '1 2 3',
59: 1:    '1',
59: 1:    '-1',
59: 1:    '-1 -1 0'
59: 1:  ]
59: 1:}
59: 1:Scores: 740
59: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even']')
59: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
60: 1:BoardData {
60: 1:  'description': [
60: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
60: 1:    'Write a javascript method.',
60: 1:    'You are given a string of space separated numbers.',
60: 1:    'All numbers are valid Int32, no need to validate them.',
60: 1:    'Give your answer as a string matching 'odd' or 'even'.',
60: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
60: 1:    'Don't use comments for clarification.',
60: 1:    'Make the code as readable and concise as possible.'
60: 1:  ],
60: 1:  'expectedAnswer': 'even',
60: 1:  'history': [
60: 1:    {
60: 1:      'answer': 'even',
60: 1:      'question': '0',
60: 1:      'valid': true
60: 1:    },
60: 1:    {
60: 1:      'answer': 'odd',
60: 1:      'question': '0 1 4',
60: 1:      'valid': true
60: 1:    },
60: 1:    {
60: 1:      'answer': 'even',
60: 1:      'question': '0 -1 5',
60: 1:      'valid': true
60: 1:    },
60: 1:    {
60: 1:      'answer': 'odd',
60: 1:      'question': '1 2 3 4 5',
60: 1:      'valid': true
60: 1:    },
60: 1:    {
60: 1:      'answer': 'odd',
60: 1:      'question': '1 2 -3 4 5',
60: 1:      'valid': true
60: 1:    },
60: 1:    {
60: 1:      'answer': 'even',
60: 1:      'question': '1 9 3 4 -5',
60: 1:      'valid': true
60: 1:    },
60: 1:    {
60: 1:      'answer': 'odd',
60: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
60: 1:      'valid': true
60: 1:    },
60: 1:    {
60: 1:      'answer': 'even',
60: 1:      'question': '1 2 3',
60: 1:      'valid': true
60: 1:    },
60: 1:    {
60: 1:      'answer': 'odd',
60: 1:      'question': '1',
60: 1:      'valid': true
60: 1:    },
60: 1:    {
60: 1:      'answer': 'odd',
60: 1:      'question': '-1',
60: 1:      'valid': true
60: 1:    },
60: 1:    {
60: 1:      'answer': 'even',
60: 1:      'question': '-1 -1 0',
60: 1:      'valid': true
60: 1:    }
60: 1:  ],
60: 1:  'info': [
60: 1:    '✅f(0) = even',
60: 1:    '✅f(0 1 4) = odd',
60: 1:    '✅f(0 -1 5) = even',
60: 1:    '✅f(1 2 3 4 5) = odd',
60: 1:    '✅f(1 2 -3 4 5) = odd',
60: 1:    '✅f(1 9 3 4 -5) = even',
60: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
60: 1:    '✅f(1 2 3) = even',
60: 1:    '✅f(1) = odd',
60: 1:    '✅f(-1) = odd',
60: 1:    '✅f(-1 -1 0) = even',
60: 1:    '❌f(1 1 0) = ??? != even'
60: 1:  ],
60: 1:  'level': 2,
60: 1:  'nextQuestion': '1 1 0',
60: 1:  'questions': [
60: 1:    '0',
60: 1:    '0 1 4',
60: 1:    '0 -1 5',
60: 1:    '1 2 3 4 5',
60: 1:    '1 2 -3 4 5',
60: 1:    '1 9 3 4 -5',
60: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
60: 1:    '1 2 3',
60: 1:    '1',
60: 1:    '-1',
60: 1:    '-1 -1 0',
60: 1:    '1 1 0'
60: 1:  ]
60: 1:}
60: 1:Scores: 742
60: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even']')
60: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
61: 1:BoardData {
61: 1:  'description': [
61: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
61: 1:    'Write a javascript method.',
61: 1:    'You are given a string of space separated numbers.',
61: 1:    'All numbers are valid Int32, no need to validate them.',
61: 1:    'Give your answer as a string matching 'odd' or 'even'.',
61: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
61: 1:    'Don't use comments for clarification.',
61: 1:    'Make the code as readable and concise as possible.'
61: 1:  ],
61: 1:  'expectedAnswer': 'even',
61: 1:  'history': [
61: 1:    {
61: 1:      'answer': 'even',
61: 1:      'question': '0',
61: 1:      'valid': true
61: 1:    },
61: 1:    {
61: 1:      'answer': 'odd',
61: 1:      'question': '0 1 4',
61: 1:      'valid': true
61: 1:    },
61: 1:    {
61: 1:      'answer': 'even',
61: 1:      'question': '0 -1 5',
61: 1:      'valid': true
61: 1:    },
61: 1:    {
61: 1:      'answer': 'odd',
61: 1:      'question': '1 2 3 4 5',
61: 1:      'valid': true
61: 1:    },
61: 1:    {
61: 1:      'answer': 'odd',
61: 1:      'question': '1 2 -3 4 5',
61: 1:      'valid': true
61: 1:    },
61: 1:    {
61: 1:      'answer': 'even',
61: 1:      'question': '1 9 3 4 -5',
61: 1:      'valid': true
61: 1:    },
61: 1:    {
61: 1:      'answer': 'odd',
61: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
61: 1:      'valid': true
61: 1:    },
61: 1:    {
61: 1:      'answer': 'even',
61: 1:      'question': '1 2 3',
61: 1:      'valid': true
61: 1:    },
61: 1:    {
61: 1:      'answer': 'odd',
61: 1:      'question': '1',
61: 1:      'valid': true
61: 1:    },
61: 1:    {
61: 1:      'answer': 'odd',
61: 1:      'question': '-1',
61: 1:      'valid': true
61: 1:    },
61: 1:    {
61: 1:      'answer': 'even',
61: 1:      'question': '-1 -1 0',
61: 1:      'valid': true
61: 1:    },
61: 1:    {
61: 1:      'answer': 'even',
61: 1:      'question': '1 1 0',
61: 1:      'valid': true
61: 1:    }
61: 1:  ],
61: 1:  'info': [
61: 1:    '✅f(0) = even',
61: 1:    '✅f(0 1 4) = odd',
61: 1:    '✅f(0 -1 5) = even',
61: 1:    '✅f(1 2 3 4 5) = odd',
61: 1:    '✅f(1 2 -3 4 5) = odd',
61: 1:    '✅f(1 9 3 4 -5) = even',
61: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
61: 1:    '✅f(1 2 3) = even',
61: 1:    '✅f(1) = odd',
61: 1:    '✅f(-1) = odd',
61: 1:    '✅f(-1 -1 0) = even',
61: 1:    '✅f(1 1 0) = even',
61: 1:    '❌f(-1 -1) = ??? != even'
61: 1:  ],
61: 1:  'level': 2,
61: 1:  'nextQuestion': '-1 -1',
61: 1:  'questions': [
61: 1:    '0',
61: 1:    '0 1 4',
61: 1:    '0 -1 5',
61: 1:    '1 2 3 4 5',
61: 1:    '1 2 -3 4 5',
61: 1:    '1 9 3 4 -5',
61: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
61: 1:    '1 2 3',
61: 1:    '1',
61: 1:    '-1',
61: 1:    '-1 -1 0',
61: 1:    '1 1 0',
61: 1:    '-1 -1'
61: 1:  ]
61: 1:}
61: 1:Scores: 744
61: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even', 'even']')
61: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
62: 1:BoardData {
62: 1:  'description': [
62: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
62: 1:    'Write a javascript method.',
62: 1:    'You are given a string of space separated numbers.',
62: 1:    'All numbers are valid Int32, no need to validate them.',
62: 1:    'Give your answer as a string matching 'odd' or 'even'.',
62: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
62: 1:    'Don't use comments for clarification.',
62: 1:    'Make the code as readable and concise as possible.'
62: 1:  ],
62: 1:  'expectedAnswer': 'even',
62: 1:  'history': [
62: 1:    {
62: 1:      'answer': 'even',
62: 1:      'question': '0',
62: 1:      'valid': true
62: 1:    },
62: 1:    {
62: 1:      'answer': 'odd',
62: 1:      'question': '0 1 4',
62: 1:      'valid': true
62: 1:    },
62: 1:    {
62: 1:      'answer': 'even',
62: 1:      'question': '0 -1 5',
62: 1:      'valid': true
62: 1:    },
62: 1:    {
62: 1:      'answer': 'odd',
62: 1:      'question': '1 2 3 4 5',
62: 1:      'valid': true
62: 1:    },
62: 1:    {
62: 1:      'answer': 'odd',
62: 1:      'question': '1 2 -3 4 5',
62: 1:      'valid': true
62: 1:    },
62: 1:    {
62: 1:      'answer': 'even',
62: 1:      'question': '1 9 3 4 -5',
62: 1:      'valid': true
62: 1:    },
62: 1:    {
62: 1:      'answer': 'odd',
62: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
62: 1:      'valid': true
62: 1:    },
62: 1:    {
62: 1:      'answer': 'even',
62: 1:      'question': '1 2 3',
62: 1:      'valid': true
62: 1:    },
62: 1:    {
62: 1:      'answer': 'odd',
62: 1:      'question': '1',
62: 1:      'valid': true
62: 1:    },
62: 1:    {
62: 1:      'answer': 'odd',
62: 1:      'question': '-1',
62: 1:      'valid': true
62: 1:    },
62: 1:    {
62: 1:      'answer': 'even',
62: 1:      'question': '-1 -1 0',
62: 1:      'valid': true
62: 1:    },
62: 1:    {
62: 1:      'answer': 'even',
62: 1:      'question': '1 1 0',
62: 1:      'valid': true
62: 1:    },
62: 1:    {
62: 1:      'answer': 'even',
62: 1:      'question': '-1 -1',
62: 1:      'valid': true
62: 1:    }
62: 1:  ],
62: 1:  'info': [
62: 1:    '✅f(0) = even',
62: 1:    '✅f(0 1 4) = odd',
62: 1:    '✅f(0 -1 5) = even',
62: 1:    '✅f(1 2 3 4 5) = odd',
62: 1:    '✅f(1 2 -3 4 5) = odd',
62: 1:    '✅f(1 9 3 4 -5) = even',
62: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
62: 1:    '✅f(1 2 3) = even',
62: 1:    '✅f(1) = odd',
62: 1:    '✅f(-1) = odd',
62: 1:    '✅f(-1 -1 0) = even',
62: 1:    '✅f(1 1 0) = even',
62: 1:    '✅f(-1 -1) = even',
62: 1:    '❌f(1 -1 0) = ??? != even'
62: 1:  ],
62: 1:  'level': 2,
62: 1:  'nextQuestion': '1 -1 0',
62: 1:  'questions': [
62: 1:    '0',
62: 1:    '0 1 4',
62: 1:    '0 -1 5',
62: 1:    '1 2 3 4 5',
62: 1:    '1 2 -3 4 5',
62: 1:    '1 9 3 4 -5',
62: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
62: 1:    '1 2 3',
62: 1:    '1',
62: 1:    '-1',
62: 1:    '-1 -1 0',
62: 1:    '1 1 0',
62: 1:    '-1 -1',
62: 1:    '1 -1 0'
62: 1:  ]
62: 1:}
62: 1:Scores: 746
62: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even', 'even', 'even']')
62: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
63: 1:BoardData {
63: 1:  'description': [
63: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
63: 1:    'Write a javascript method.',
63: 1:    'You are given a string of space separated numbers.',
63: 1:    'All numbers are valid Int32, no need to validate them.',
63: 1:    'Give your answer as a string matching 'odd' or 'even'.',
63: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
63: 1:    'Don't use comments for clarification.',
63: 1:    'Make the code as readable and concise as possible.'
63: 1:  ],
63: 1:  'expectedAnswer': 'odd',
63: 1:  'history': [
63: 1:    {
63: 1:      'answer': 'even',
63: 1:      'question': '0',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': 'odd',
63: 1:      'question': '0 1 4',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': 'even',
63: 1:      'question': '0 -1 5',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': 'odd',
63: 1:      'question': '1 2 3 4 5',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': 'odd',
63: 1:      'question': '1 2 -3 4 5',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': 'even',
63: 1:      'question': '1 9 3 4 -5',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': 'odd',
63: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': 'even',
63: 1:      'question': '1 2 3',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': 'odd',
63: 1:      'question': '1',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': 'odd',
63: 1:      'question': '-1',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': 'even',
63: 1:      'question': '-1 -1 0',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': 'even',
63: 1:      'question': '1 1 0',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': 'even',
63: 1:      'question': '-1 -1',
63: 1:      'valid': true
63: 1:    },
63: 1:    {
63: 1:      'answer': 'even',
63: 1:      'question': '1 -1 0',
63: 1:      'valid': true
63: 1:    }
63: 1:  ],
63: 1:  'info': [
63: 1:    '✅f(0) = even',
63: 1:    '✅f(0 1 4) = odd',
63: 1:    '✅f(0 -1 5) = even',
63: 1:    '✅f(1 2 3 4 5) = odd',
63: 1:    '✅f(1 2 -3 4 5) = odd',
63: 1:    '✅f(1 9 3 4 -5) = even',
63: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
63: 1:    '✅f(1 2 3) = even',
63: 1:    '✅f(1) = odd',
63: 1:    '✅f(-1) = odd',
63: 1:    '✅f(-1 -1 0) = even',
63: 1:    '✅f(1 1 0) = even',
63: 1:    '✅f(-1 -1) = even',
63: 1:    '✅f(1 -1 0) = even',
63: 1:    '❌f(10 2 -1 -20) = ??? != odd'
63: 1:  ],
63: 1:  'level': 2,
63: 1:  'nextQuestion': '10 2 -1 -20',
63: 1:  'questions': [
63: 1:    '0',
63: 1:    '0 1 4',
63: 1:    '0 -1 5',
63: 1:    '1 2 3 4 5',
63: 1:    '1 2 -3 4 5',
63: 1:    '1 9 3 4 -5',
63: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
63: 1:    '1 2 3',
63: 1:    '1',
63: 1:    '-1',
63: 1:    '-1 -1 0',
63: 1:    '1 1 0',
63: 1:    '-1 -1',
63: 1:    '1 -1 0',
63: 1:    '10 2 -1 -20'
63: 1:  ]
63: 1:}
63: 1:Scores: 748
63: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even', 'even', 'even', 'odd']')
63: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
64: 1:BoardData {
64: 1:  'description': [
64: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
64: 1:    'Write a javascript method.',
64: 1:    'You are given a string of space separated numbers.',
64: 1:    'All numbers are valid Int32, no need to validate them.',
64: 1:    'Give your answer as a string matching 'odd' or 'even'.',
64: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
64: 1:    'Don't use comments for clarification.',
64: 1:    'Make the code as readable and concise as possible.'
64: 1:  ],
64: 1:  'expectedAnswer': 'odd',
64: 1:  'history': [
64: 1:    {
64: 1:      'answer': 'even',
64: 1:      'question': '0',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': 'odd',
64: 1:      'question': '0 1 4',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': 'even',
64: 1:      'question': '0 -1 5',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': 'odd',
64: 1:      'question': '1 2 3 4 5',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': 'odd',
64: 1:      'question': '1 2 -3 4 5',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': 'even',
64: 1:      'question': '1 9 3 4 -5',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': 'odd',
64: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': 'even',
64: 1:      'question': '1 2 3',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': 'odd',
64: 1:      'question': '1',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': 'odd',
64: 1:      'question': '-1',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': 'even',
64: 1:      'question': '-1 -1 0',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': 'even',
64: 1:      'question': '1 1 0',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': 'even',
64: 1:      'question': '-1 -1',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': 'even',
64: 1:      'question': '1 -1 0',
64: 1:      'valid': true
64: 1:    },
64: 1:    {
64: 1:      'answer': 'odd',
64: 1:      'question': '10 2 -1 -20',
64: 1:      'valid': true
64: 1:    }
64: 1:  ],
64: 1:  'info': [
64: 1:    '✅f(0) = even',
64: 1:    '✅f(0 1 4) = odd',
64: 1:    '✅f(0 -1 5) = even',
64: 1:    '✅f(1 2 3 4 5) = odd',
64: 1:    '✅f(1 2 -3 4 5) = odd',
64: 1:    '✅f(1 9 3 4 -5) = even',
64: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
64: 1:    '✅f(1 2 3) = even',
64: 1:    '✅f(1) = odd',
64: 1:    '✅f(-1) = odd',
64: 1:    '✅f(-1 -1 0) = even',
64: 1:    '✅f(1 1 0) = even',
64: 1:    '✅f(-1 -1) = even',
64: 1:    '✅f(1 -1 0) = even',
64: 1:    '✅f(10 2 -1 -20) = odd',
64: 1:    '❌f(452 561 -686 679 476 -515 805 -739 571 791) = ??? != odd'
64: 1:  ],
64: 1:  'level': 2,
64: 1:  'nextQuestion': '452 561 -686 679 476 -515 805 -739 571 791',
64: 1:  'questions': [
64: 1:    '0',
64: 1:    '0 1 4',
64: 1:    '0 -1 5',
64: 1:    '1 2 3 4 5',
64: 1:    '1 2 -3 4 5',
64: 1:    '1 9 3 4 -5',
64: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
64: 1:    '1 2 3',
64: 1:    '1',
64: 1:    '-1',
64: 1:    '-1 -1 0',
64: 1:    '1 1 0',
64: 1:    '-1 -1',
64: 1:    '1 -1 0',
64: 1:    '10 2 -1 -20',
64: 1:    '452 561 -686 679 476 -515 805 -739 571 791'
64: 1:  ]
64: 1:}
64: 1:Scores: 750
64: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even', 'even', 'even', 'odd', 'odd']')
64: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
65: 1:BoardData {
65: 1:  'description': [
65: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
65: 1:    'Write a javascript method.',
65: 1:    'You are given a string of space separated numbers.',
65: 1:    'All numbers are valid Int32, no need to validate them.',
65: 1:    'Give your answer as a string matching 'odd' or 'even'.',
65: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
65: 1:    'Don't use comments for clarification.',
65: 1:    'Make the code as readable and concise as possible.'
65: 1:  ],
65: 1:  'expectedAnswer': 'even',
65: 1:  'history': [
65: 1:    {
65: 1:      'answer': 'even',
65: 1:      'question': '0',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'odd',
65: 1:      'question': '0 1 4',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'even',
65: 1:      'question': '0 -1 5',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'odd',
65: 1:      'question': '1 2 3 4 5',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'odd',
65: 1:      'question': '1 2 -3 4 5',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'even',
65: 1:      'question': '1 9 3 4 -5',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'odd',
65: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'even',
65: 1:      'question': '1 2 3',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'odd',
65: 1:      'question': '1',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'odd',
65: 1:      'question': '-1',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'even',
65: 1:      'question': '-1 -1 0',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'even',
65: 1:      'question': '1 1 0',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'even',
65: 1:      'question': '-1 -1',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'even',
65: 1:      'question': '1 -1 0',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'odd',
65: 1:      'question': '10 2 -1 -20',
65: 1:      'valid': true
65: 1:    },
65: 1:    {
65: 1:      'answer': 'odd',
65: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
65: 1:      'valid': true
65: 1:    }
65: 1:  ],
65: 1:  'info': [
65: 1:    '✅f(0) = even',
65: 1:    '✅f(0 1 4) = odd',
65: 1:    '✅f(0 -1 5) = even',
65: 1:    '✅f(1 2 3 4 5) = odd',
65: 1:    '✅f(1 2 -3 4 5) = odd',
65: 1:    '✅f(1 9 3 4 -5) = even',
65: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
65: 1:    '✅f(1 2 3) = even',
65: 1:    '✅f(1) = odd',
65: 1:    '✅f(-1) = odd',
65: 1:    '✅f(-1 -1 0) = even',
65: 1:    '✅f(1 1 0) = even',
65: 1:    '✅f(-1 -1) = even',
65: 1:    '✅f(1 -1 0) = even',
65: 1:    '✅f(10 2 -1 -20) = odd',
65: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = odd',
65: 1:    '❌f(-983 -111 -332 -973 47 728) = ??? != even'
65: 1:  ],
65: 1:  'level': 2,
65: 1:  'nextQuestion': '-983 -111 -332 -973 47 728',
65: 1:  'questions': [
65: 1:    '0',
65: 1:    '0 1 4',
65: 1:    '0 -1 5',
65: 1:    '1 2 3 4 5',
65: 1:    '1 2 -3 4 5',
65: 1:    '1 9 3 4 -5',
65: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
65: 1:    '1 2 3',
65: 1:    '1',
65: 1:    '-1',
65: 1:    '-1 -1 0',
65: 1:    '1 1 0',
65: 1:    '-1 -1',
65: 1:    '1 -1 0',
65: 1:    '10 2 -1 -20',
65: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
65: 1:    '-983 -111 -332 -973 47 728'
65: 1:  ]
65: 1:}
65: 1:Scores: 752
65: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even', 'even', 'even', 'odd', 'odd', 'even']')
65: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
66: 1:BoardData {
66: 1:  'description': [
66: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
66: 1:    'Write a javascript method.',
66: 1:    'You are given a string of space separated numbers.',
66: 1:    'All numbers are valid Int32, no need to validate them.',
66: 1:    'Give your answer as a string matching 'odd' or 'even'.',
66: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
66: 1:    'Don't use comments for clarification.',
66: 1:    'Make the code as readable and concise as possible.'
66: 1:  ],
66: 1:  'expectedAnswer': 'even',
66: 1:  'history': [
66: 1:    {
66: 1:      'answer': 'even',
66: 1:      'question': '0',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'odd',
66: 1:      'question': '0 1 4',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'even',
66: 1:      'question': '0 -1 5',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'odd',
66: 1:      'question': '1 2 3 4 5',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'odd',
66: 1:      'question': '1 2 -3 4 5',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'even',
66: 1:      'question': '1 9 3 4 -5',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'odd',
66: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'even',
66: 1:      'question': '1 2 3',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'odd',
66: 1:      'question': '1',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'odd',
66: 1:      'question': '-1',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'even',
66: 1:      'question': '-1 -1 0',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'even',
66: 1:      'question': '1 1 0',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'even',
66: 1:      'question': '-1 -1',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'even',
66: 1:      'question': '1 -1 0',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'odd',
66: 1:      'question': '10 2 -1 -20',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'odd',
66: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
66: 1:      'valid': true
66: 1:    },
66: 1:    {
66: 1:      'answer': 'even',
66: 1:      'question': '-983 -111 -332 -973 47 728',
66: 1:      'valid': true
66: 1:    }
66: 1:  ],
66: 1:  'info': [
66: 1:    '✅f(0) = even',
66: 1:    '✅f(0 1 4) = odd',
66: 1:    '✅f(0 -1 5) = even',
66: 1:    '✅f(1 2 3 4 5) = odd',
66: 1:    '✅f(1 2 -3 4 5) = odd',
66: 1:    '✅f(1 9 3 4 -5) = even',
66: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
66: 1:    '✅f(1 2 3) = even',
66: 1:    '✅f(1) = odd',
66: 1:    '✅f(-1) = odd',
66: 1:    '✅f(-1 -1 0) = even',
66: 1:    '✅f(1 1 0) = even',
66: 1:    '✅f(-1 -1) = even',
66: 1:    '✅f(1 -1 0) = even',
66: 1:    '✅f(10 2 -1 -20) = odd',
66: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = odd',
66: 1:    '✅f(-983 -111 -332 -973 47 728) = even',
66: 1:    '❌f(268 -359 -513 -9 -86 -142 -779) = ??? != even'
66: 1:  ],
66: 1:  'level': 2,
66: 1:  'nextQuestion': '268 -359 -513 -9 -86 -142 -779',
66: 1:  'questions': [
66: 1:    '0',
66: 1:    '0 1 4',
66: 1:    '0 -1 5',
66: 1:    '1 2 3 4 5',
66: 1:    '1 2 -3 4 5',
66: 1:    '1 9 3 4 -5',
66: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
66: 1:    '1 2 3',
66: 1:    '1',
66: 1:    '-1',
66: 1:    '-1 -1 0',
66: 1:    '1 1 0',
66: 1:    '-1 -1',
66: 1:    '1 -1 0',
66: 1:    '10 2 -1 -20',
66: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
66: 1:    '-983 -111 -332 -973 47 728',
66: 1:    '268 -359 -513 -9 -86 -142 -779'
66: 1:  ]
66: 1:}
66: 1:Scores: 754
66: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even', 'even', 'even', 'odd', 'odd', 'even', 'even']')
66: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
67: 1:BoardData {
67: 1:  'description': [
67: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
67: 1:    'Write a javascript method.',
67: 1:    'You are given a string of space separated numbers.',
67: 1:    'All numbers are valid Int32, no need to validate them.',
67: 1:    'Give your answer as a string matching 'odd' or 'even'.',
67: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
67: 1:    'Don't use comments for clarification.',
67: 1:    'Make the code as readable and concise as possible.'
67: 1:  ],
67: 1:  'expectedAnswer': 'odd',
67: 1:  'history': [
67: 1:    {
67: 1:      'answer': 'even',
67: 1:      'question': '0',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'odd',
67: 1:      'question': '0 1 4',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'even',
67: 1:      'question': '0 -1 5',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'odd',
67: 1:      'question': '1 2 3 4 5',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'odd',
67: 1:      'question': '1 2 -3 4 5',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'even',
67: 1:      'question': '1 9 3 4 -5',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'odd',
67: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'even',
67: 1:      'question': '1 2 3',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'odd',
67: 1:      'question': '1',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'odd',
67: 1:      'question': '-1',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'even',
67: 1:      'question': '-1 -1 0',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'even',
67: 1:      'question': '1 1 0',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'even',
67: 1:      'question': '-1 -1',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'even',
67: 1:      'question': '1 -1 0',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'odd',
67: 1:      'question': '10 2 -1 -20',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'odd',
67: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'even',
67: 1:      'question': '-983 -111 -332 -973 47 728',
67: 1:      'valid': true
67: 1:    },
67: 1:    {
67: 1:      'answer': 'even',
67: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
67: 1:      'valid': true
67: 1:    }
67: 1:  ],
67: 1:  'info': [
67: 1:    '✅f(0) = even',
67: 1:    '✅f(0 1 4) = odd',
67: 1:    '✅f(0 -1 5) = even',
67: 1:    '✅f(1 2 3 4 5) = odd',
67: 1:    '✅f(1 2 -3 4 5) = odd',
67: 1:    '✅f(1 9 3 4 -5) = even',
67: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
67: 1:    '✅f(1 2 3) = even',
67: 1:    '✅f(1) = odd',
67: 1:    '✅f(-1) = odd',
67: 1:    '✅f(-1 -1 0) = even',
67: 1:    '✅f(1 1 0) = even',
67: 1:    '✅f(-1 -1) = even',
67: 1:    '✅f(1 -1 0) = even',
67: 1:    '✅f(10 2 -1 -20) = odd',
67: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = odd',
67: 1:    '✅f(-983 -111 -332 -973 47 728) = even',
67: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = even',
67: 1:    '❌f(556 32 866 -730 -367 -937 367 888 43 -510 773) = ??? != odd'
67: 1:  ],
67: 1:  'level': 2,
67: 1:  'nextQuestion': '556 32 866 -730 -367 -937 367 888 43 -510 773',
67: 1:  'questions': [
67: 1:    '0',
67: 1:    '0 1 4',
67: 1:    '0 -1 5',
67: 1:    '1 2 3 4 5',
67: 1:    '1 2 -3 4 5',
67: 1:    '1 9 3 4 -5',
67: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
67: 1:    '1 2 3',
67: 1:    '1',
67: 1:    '-1',
67: 1:    '-1 -1 0',
67: 1:    '1 1 0',
67: 1:    '-1 -1',
67: 1:    '1 -1 0',
67: 1:    '10 2 -1 -20',
67: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
67: 1:    '-983 -111 -332 -973 47 728',
67: 1:    '268 -359 -513 -9 -86 -142 -779',
67: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773'
67: 1:  ]
67: 1:}
67: 1:Scores: 756
67: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even', 'even', 'even', 'odd', 'odd', 'even', 'even', 'odd']')
67: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
68: 1:BoardData {
68: 1:  'description': [
68: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
68: 1:    'Write a javascript method.',
68: 1:    'You are given a string of space separated numbers.',
68: 1:    'All numbers are valid Int32, no need to validate them.',
68: 1:    'Give your answer as a string matching 'odd' or 'even'.',
68: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
68: 1:    'Don't use comments for clarification.',
68: 1:    'Make the code as readable and concise as possible.'
68: 1:  ],
68: 1:  'expectedAnswer': 'even',
68: 1:  'history': [
68: 1:    {
68: 1:      'answer': 'even',
68: 1:      'question': '0',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'odd',
68: 1:      'question': '0 1 4',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'even',
68: 1:      'question': '0 -1 5',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'odd',
68: 1:      'question': '1 2 3 4 5',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'odd',
68: 1:      'question': '1 2 -3 4 5',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'even',
68: 1:      'question': '1 9 3 4 -5',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'odd',
68: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'even',
68: 1:      'question': '1 2 3',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'odd',
68: 1:      'question': '1',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'odd',
68: 1:      'question': '-1',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'even',
68: 1:      'question': '-1 -1 0',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'even',
68: 1:      'question': '1 1 0',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'even',
68: 1:      'question': '-1 -1',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'even',
68: 1:      'question': '1 -1 0',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'odd',
68: 1:      'question': '10 2 -1 -20',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'odd',
68: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'even',
68: 1:      'question': '-983 -111 -332 -973 47 728',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'even',
68: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
68: 1:      'valid': true
68: 1:    },
68: 1:    {
68: 1:      'answer': 'odd',
68: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
68: 1:      'valid': true
68: 1:    }
68: 1:  ],
68: 1:  'info': [
68: 1:    '✅f(0) = even',
68: 1:    '✅f(0 1 4) = odd',
68: 1:    '✅f(0 -1 5) = even',
68: 1:    '✅f(1 2 3 4 5) = odd',
68: 1:    '✅f(1 2 -3 4 5) = odd',
68: 1:    '✅f(1 9 3 4 -5) = even',
68: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
68: 1:    '✅f(1 2 3) = even',
68: 1:    '✅f(1) = odd',
68: 1:    '✅f(-1) = odd',
68: 1:    '✅f(-1 -1 0) = even',
68: 1:    '✅f(1 1 0) = even',
68: 1:    '✅f(-1 -1) = even',
68: 1:    '✅f(1 -1 0) = even',
68: 1:    '✅f(10 2 -1 -20) = odd',
68: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = odd',
68: 1:    '✅f(-983 -111 -332 -973 47 728) = even',
68: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = even',
68: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = odd',
68: 1:    '❌f(646 261 609 -82 949 526 -449 -594 894) = ??? != even'
68: 1:  ],
68: 1:  'level': 2,
68: 1:  'nextQuestion': '646 261 609 -82 949 526 -449 -594 894',
68: 1:  'questions': [
68: 1:    '0',
68: 1:    '0 1 4',
68: 1:    '0 -1 5',
68: 1:    '1 2 3 4 5',
68: 1:    '1 2 -3 4 5',
68: 1:    '1 9 3 4 -5',
68: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
68: 1:    '1 2 3',
68: 1:    '1',
68: 1:    '-1',
68: 1:    '-1 -1 0',
68: 1:    '1 1 0',
68: 1:    '-1 -1',
68: 1:    '1 -1 0',
68: 1:    '10 2 -1 -20',
68: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
68: 1:    '-983 -111 -332 -973 47 728',
68: 1:    '268 -359 -513 -9 -86 -142 -779',
68: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773',
68: 1:    '646 261 609 -82 949 526 -449 -594 894'
68: 1:  ]
68: 1:}
68: 1:Scores: 758
68: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even', 'even', 'even', 'odd', 'odd', 'even', 'even', 'odd', 'even']')
68: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
69: 1:BoardData {
69: 1:  'description': [
69: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
69: 1:    'Write a javascript method.',
69: 1:    'You are given a string of space separated numbers.',
69: 1:    'All numbers are valid Int32, no need to validate them.',
69: 1:    'Give your answer as a string matching 'odd' or 'even'.',
69: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
69: 1:    'Don't use comments for clarification.',
69: 1:    'Make the code as readable and concise as possible.'
69: 1:  ],
69: 1:  'expectedAnswer': 'even',
69: 1:  'history': [
69: 1:    {
69: 1:      'answer': 'even',
69: 1:      'question': '0',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'odd',
69: 1:      'question': '0 1 4',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'even',
69: 1:      'question': '0 -1 5',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'odd',
69: 1:      'question': '1 2 3 4 5',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'odd',
69: 1:      'question': '1 2 -3 4 5',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'even',
69: 1:      'question': '1 9 3 4 -5',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'odd',
69: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'even',
69: 1:      'question': '1 2 3',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'odd',
69: 1:      'question': '1',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'odd',
69: 1:      'question': '-1',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'even',
69: 1:      'question': '-1 -1 0',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'even',
69: 1:      'question': '1 1 0',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'even',
69: 1:      'question': '-1 -1',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'even',
69: 1:      'question': '1 -1 0',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'odd',
69: 1:      'question': '10 2 -1 -20',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'odd',
69: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'even',
69: 1:      'question': '-983 -111 -332 -973 47 728',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'even',
69: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'odd',
69: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
69: 1:      'valid': true
69: 1:    },
69: 1:    {
69: 1:      'answer': 'even',
69: 1:      'question': '646 261 609 -82 949 526 -449 -594 894',
69: 1:      'valid': true
69: 1:    }
69: 1:  ],
69: 1:  'info': [
69: 1:    '✅f(0) = even',
69: 1:    '✅f(0 1 4) = odd',
69: 1:    '✅f(0 -1 5) = even',
69: 1:    '✅f(1 2 3 4 5) = odd',
69: 1:    '✅f(1 2 -3 4 5) = odd',
69: 1:    '✅f(1 9 3 4 -5) = even',
69: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
69: 1:    '✅f(1 2 3) = even',
69: 1:    '✅f(1) = odd',
69: 1:    '✅f(-1) = odd',
69: 1:    '✅f(-1 -1 0) = even',
69: 1:    '✅f(1 1 0) = even',
69: 1:    '✅f(-1 -1) = even',
69: 1:    '✅f(1 -1 0) = even',
69: 1:    '✅f(10 2 -1 -20) = odd',
69: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = odd',
69: 1:    '✅f(-983 -111 -332 -973 47 728) = even',
69: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = even',
69: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = odd',
69: 1:    '✅f(646 261 609 -82 949 526 -449 -594 894) = even',
69: 1:    '❌f(-950 909 424 834 -579 -275 -901 444) = ??? != even'
69: 1:  ],
69: 1:  'level': 2,
69: 1:  'nextQuestion': '-950 909 424 834 -579 -275 -901 444',
69: 1:  'questions': [
69: 1:    '0',
69: 1:    '0 1 4',
69: 1:    '0 -1 5',
69: 1:    '1 2 3 4 5',
69: 1:    '1 2 -3 4 5',
69: 1:    '1 9 3 4 -5',
69: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
69: 1:    '1 2 3',
69: 1:    '1',
69: 1:    '-1',
69: 1:    '-1 -1 0',
69: 1:    '1 1 0',
69: 1:    '-1 -1',
69: 1:    '1 -1 0',
69: 1:    '10 2 -1 -20',
69: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
69: 1:    '-983 -111 -332 -973 47 728',
69: 1:    '268 -359 -513 -9 -86 -142 -779',
69: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773',
69: 1:    '646 261 609 -82 949 526 -449 -594 894',
69: 1:    '-950 909 424 834 -579 -275 -901 444'
69: 1:  ]
69: 1:}
69: 1:Scores: 760
69: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even', 'even', 'even', 'odd', 'odd', 'even', 'even', 'odd', 'even', 'even']')
69: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
70: 1:BoardData {
70: 1:  'description': [
70: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
70: 1:    'Write a javascript method.',
70: 1:    'You are given a string of space separated numbers.',
70: 1:    'All numbers are valid Int32, no need to validate them.',
70: 1:    'Give your answer as a string matching 'odd' or 'even'.',
70: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
70: 1:    'Don't use comments for clarification.',
70: 1:    'Make the code as readable and concise as possible.'
70: 1:  ],
70: 1:  'expectedAnswer': 'even',
70: 1:  'history': [
70: 1:    {
70: 1:      'answer': 'even',
70: 1:      'question': '0',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'odd',
70: 1:      'question': '0 1 4',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'even',
70: 1:      'question': '0 -1 5',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'odd',
70: 1:      'question': '1 2 3 4 5',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'odd',
70: 1:      'question': '1 2 -3 4 5',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'even',
70: 1:      'question': '1 9 3 4 -5',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'odd',
70: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'even',
70: 1:      'question': '1 2 3',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'odd',
70: 1:      'question': '1',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'odd',
70: 1:      'question': '-1',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'even',
70: 1:      'question': '-1 -1 0',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'even',
70: 1:      'question': '1 1 0',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'even',
70: 1:      'question': '-1 -1',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'even',
70: 1:      'question': '1 -1 0',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'odd',
70: 1:      'question': '10 2 -1 -20',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'odd',
70: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'even',
70: 1:      'question': '-983 -111 -332 -973 47 728',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'even',
70: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'odd',
70: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'even',
70: 1:      'question': '646 261 609 -82 949 526 -449 -594 894',
70: 1:      'valid': true
70: 1:    },
70: 1:    {
70: 1:      'answer': 'even',
70: 1:      'question': '-950 909 424 834 -579 -275 -901 444',
70: 1:      'valid': true
70: 1:    }
70: 1:  ],
70: 1:  'info': [
70: 1:    '✅f(0) = even',
70: 1:    '✅f(0 1 4) = odd',
70: 1:    '✅f(0 -1 5) = even',
70: 1:    '✅f(1 2 3 4 5) = odd',
70: 1:    '✅f(1 2 -3 4 5) = odd',
70: 1:    '✅f(1 9 3 4 -5) = even',
70: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
70: 1:    '✅f(1 2 3) = even',
70: 1:    '✅f(1) = odd',
70: 1:    '✅f(-1) = odd',
70: 1:    '✅f(-1 -1 0) = even',
70: 1:    '✅f(1 1 0) = even',
70: 1:    '✅f(-1 -1) = even',
70: 1:    '✅f(1 -1 0) = even',
70: 1:    '✅f(10 2 -1 -20) = odd',
70: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = odd',
70: 1:    '✅f(-983 -111 -332 -973 47 728) = even',
70: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = even',
70: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = odd',
70: 1:    '✅f(646 261 609 -82 949 526 -449 -594 894) = even',
70: 1:    '✅f(-950 909 424 834 -579 -275 -901 444) = even',
70: 1:    '❌f(-857 43 444 158 510 -879 -350 705) = ??? != even'
70: 1:  ],
70: 1:  'level': 2,
70: 1:  'nextQuestion': '-857 43 444 158 510 -879 -350 705',
70: 1:  'questions': [
70: 1:    '0',
70: 1:    '0 1 4',
70: 1:    '0 -1 5',
70: 1:    '1 2 3 4 5',
70: 1:    '1 2 -3 4 5',
70: 1:    '1 9 3 4 -5',
70: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
70: 1:    '1 2 3',
70: 1:    '1',
70: 1:    '-1',
70: 1:    '-1 -1 0',
70: 1:    '1 1 0',
70: 1:    '-1 -1',
70: 1:    '1 -1 0',
70: 1:    '10 2 -1 -20',
70: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
70: 1:    '-983 -111 -332 -973 47 728',
70: 1:    '268 -359 -513 -9 -86 -142 -779',
70: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773',
70: 1:    '646 261 609 -82 949 526 -449 -594 894',
70: 1:    '-950 909 424 834 -579 -275 -901 444',
70: 1:    '-857 43 444 158 510 -879 -350 705'
70: 1:  ]
70: 1:}
70: 1:Scores: 762
70: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even', 'even', 'even', 'odd', 'odd', 'even', 'even', 'odd', 'even', 'even', 'even']')
70: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
71: 1:BoardData {
71: 1:  'description': [
71: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
71: 1:    'Write a javascript method.',
71: 1:    'You are given a string of space separated numbers.',
71: 1:    'All numbers are valid Int32, no need to validate them.',
71: 1:    'Give your answer as a string matching 'odd' or 'even'.',
71: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
71: 1:    'Don't use comments for clarification.',
71: 1:    'Make the code as readable and concise as possible.'
71: 1:  ],
71: 1:  'expectedAnswer': 'even',
71: 1:  'history': [
71: 1:    {
71: 1:      'answer': 'even',
71: 1:      'question': '0',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'odd',
71: 1:      'question': '0 1 4',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'even',
71: 1:      'question': '0 -1 5',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'odd',
71: 1:      'question': '1 2 3 4 5',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'odd',
71: 1:      'question': '1 2 -3 4 5',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'even',
71: 1:      'question': '1 9 3 4 -5',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'odd',
71: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'even',
71: 1:      'question': '1 2 3',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'odd',
71: 1:      'question': '1',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'odd',
71: 1:      'question': '-1',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'even',
71: 1:      'question': '-1 -1 0',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'even',
71: 1:      'question': '1 1 0',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'even',
71: 1:      'question': '-1 -1',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'even',
71: 1:      'question': '1 -1 0',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'odd',
71: 1:      'question': '10 2 -1 -20',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'odd',
71: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'even',
71: 1:      'question': '-983 -111 -332 -973 47 728',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'even',
71: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'odd',
71: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'even',
71: 1:      'question': '646 261 609 -82 949 526 -449 -594 894',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'even',
71: 1:      'question': '-950 909 424 834 -579 -275 -901 444',
71: 1:      'valid': true
71: 1:    },
71: 1:    {
71: 1:      'answer': 'even',
71: 1:      'question': '-857 43 444 158 510 -879 -350 705',
71: 1:      'valid': true
71: 1:    }
71: 1:  ],
71: 1:  'info': [
71: 1:    '✅f(0) = even',
71: 1:    '✅f(0 1 4) = odd',
71: 1:    '✅f(0 -1 5) = even',
71: 1:    '✅f(1 2 3 4 5) = odd',
71: 1:    '✅f(1 2 -3 4 5) = odd',
71: 1:    '✅f(1 9 3 4 -5) = even',
71: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
71: 1:    '✅f(1 2 3) = even',
71: 1:    '✅f(1) = odd',
71: 1:    '✅f(-1) = odd',
71: 1:    '✅f(-1 -1 0) = even',
71: 1:    '✅f(1 1 0) = even',
71: 1:    '✅f(-1 -1) = even',
71: 1:    '✅f(1 -1 0) = even',
71: 1:    '✅f(10 2 -1 -20) = odd',
71: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = odd',
71: 1:    '✅f(-983 -111 -332 -973 47 728) = even',
71: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = even',
71: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = odd',
71: 1:    '✅f(646 261 609 -82 949 526 -449 -594 894) = even',
71: 1:    '✅f(-950 909 424 834 -579 -275 -901 444) = even',
71: 1:    '✅f(-857 43 444 158 510 -879 -350 705) = even',
71: 1:    '❌f(-961 908 -769 980 407 -651 550 671 -996 215) = ??? != even'
71: 1:  ],
71: 1:  'level': 2,
71: 1:  'nextQuestion': '-961 908 -769 980 407 -651 550 671 -996 215',
71: 1:  'questions': [
71: 1:    '0',
71: 1:    '0 1 4',
71: 1:    '0 -1 5',
71: 1:    '1 2 3 4 5',
71: 1:    '1 2 -3 4 5',
71: 1:    '1 9 3 4 -5',
71: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
71: 1:    '1 2 3',
71: 1:    '1',
71: 1:    '-1',
71: 1:    '-1 -1 0',
71: 1:    '1 1 0',
71: 1:    '-1 -1',
71: 1:    '1 -1 0',
71: 1:    '10 2 -1 -20',
71: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
71: 1:    '-983 -111 -332 -973 47 728',
71: 1:    '268 -359 -513 -9 -86 -142 -779',
71: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773',
71: 1:    '646 261 609 -82 949 526 -449 -594 894',
71: 1:    '-950 909 424 834 -579 -275 -901 444',
71: 1:    '-857 43 444 158 510 -879 -350 705',
71: 1:    '-961 908 -769 980 407 -651 550 671 -996 215'
71: 1:  ]
71: 1:}
71: 1:Scores: 764
71: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even', 'even', 'even', 'odd', 'odd', 'even', 'even', 'odd', 'even', 'even', 'even', 'even']')
71: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
72: 1:BoardData {
72: 1:  'description': [
72: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
72: 1:    'Write a javascript method.',
72: 1:    'You are given a string of space separated numbers.',
72: 1:    'All numbers are valid Int32, no need to validate them.',
72: 1:    'Give your answer as a string matching 'odd' or 'even'.',
72: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
72: 1:    'Don't use comments for clarification.',
72: 1:    'Make the code as readable and concise as possible.'
72: 1:  ],
72: 1:  'expectedAnswer': 'odd',
72: 1:  'history': [
72: 1:    {
72: 1:      'answer': 'even',
72: 1:      'question': '0',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'odd',
72: 1:      'question': '0 1 4',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'even',
72: 1:      'question': '0 -1 5',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'odd',
72: 1:      'question': '1 2 3 4 5',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'odd',
72: 1:      'question': '1 2 -3 4 5',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'even',
72: 1:      'question': '1 9 3 4 -5',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'odd',
72: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'even',
72: 1:      'question': '1 2 3',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'odd',
72: 1:      'question': '1',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'odd',
72: 1:      'question': '-1',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'even',
72: 1:      'question': '-1 -1 0',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'even',
72: 1:      'question': '1 1 0',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'even',
72: 1:      'question': '-1 -1',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'even',
72: 1:      'question': '1 -1 0',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'odd',
72: 1:      'question': '10 2 -1 -20',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'odd',
72: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'even',
72: 1:      'question': '-983 -111 -332 -973 47 728',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'even',
72: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'odd',
72: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'even',
72: 1:      'question': '646 261 609 -82 949 526 -449 -594 894',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'even',
72: 1:      'question': '-950 909 424 834 -579 -275 -901 444',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'even',
72: 1:      'question': '-857 43 444 158 510 -879 -350 705',
72: 1:      'valid': true
72: 1:    },
72: 1:    {
72: 1:      'answer': 'even',
72: 1:      'question': '-961 908 -769 980 407 -651 550 671 -996 215',
72: 1:      'valid': true
72: 1:    }
72: 1:  ],
72: 1:  'info': [
72: 1:    '✅f(0) = even',
72: 1:    '✅f(0 1 4) = odd',
72: 1:    '✅f(0 -1 5) = even',
72: 1:    '✅f(1 2 3 4 5) = odd',
72: 1:    '✅f(1 2 -3 4 5) = odd',
72: 1:    '✅f(1 9 3 4 -5) = even',
72: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
72: 1:    '✅f(1 2 3) = even',
72: 1:    '✅f(1) = odd',
72: 1:    '✅f(-1) = odd',
72: 1:    '✅f(-1 -1 0) = even',
72: 1:    '✅f(1 1 0) = even',
72: 1:    '✅f(-1 -1) = even',
72: 1:    '✅f(1 -1 0) = even',
72: 1:    '✅f(10 2 -1 -20) = odd',
72: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = odd',
72: 1:    '✅f(-983 -111 -332 -973 47 728) = even',
72: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = even',
72: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = odd',
72: 1:    '✅f(646 261 609 -82 949 526 -449 -594 894) = even',
72: 1:    '✅f(-950 909 424 834 -579 -275 -901 444) = even',
72: 1:    '✅f(-857 43 444 158 510 -879 -350 705) = even',
72: 1:    '✅f(-961 908 -769 980 407 -651 550 671 -996 215) = even',
72: 1:    '❌f(483 -83 -229 -373 -812 335 -802) = ??? != odd'
72: 1:  ],
72: 1:  'level': 2,
72: 1:  'nextQuestion': '483 -83 -229 -373 -812 335 -802',
72: 1:  'questions': [
72: 1:    '0',
72: 1:    '0 1 4',
72: 1:    '0 -1 5',
72: 1:    '1 2 3 4 5',
72: 1:    '1 2 -3 4 5',
72: 1:    '1 9 3 4 -5',
72: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
72: 1:    '1 2 3',
72: 1:    '1',
72: 1:    '-1',
72: 1:    '-1 -1 0',
72: 1:    '1 1 0',
72: 1:    '-1 -1',
72: 1:    '1 -1 0',
72: 1:    '10 2 -1 -20',
72: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
72: 1:    '-983 -111 -332 -973 47 728',
72: 1:    '268 -359 -513 -9 -86 -142 -779',
72: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773',
72: 1:    '646 261 609 -82 949 526 -449 -594 894',
72: 1:    '-950 909 424 834 -579 -275 -901 444',
72: 1:    '-857 43 444 158 510 -879 -350 705',
72: 1:    '-961 908 -769 980 407 -651 550 671 -996 215',
72: 1:    '483 -83 -229 -373 -812 335 -802'
72: 1:  ]
72: 1:}
72: 1:Scores: 766
72: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even', 'even', 'even', 'odd', 'odd', 'even', 'even', 'odd', 'even', 'even', 'even', 'even', 'odd']')
72: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
73: 1:BoardData {
73: 1:  'description': [
73: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
73: 1:    'Write a javascript method.',
73: 1:    'You are given a string of space separated numbers.',
73: 1:    'All numbers are valid Int32, no need to validate them.',
73: 1:    'Give your answer as a string matching 'odd' or 'even'.',
73: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
73: 1:    'Don't use comments for clarification.',
73: 1:    'Make the code as readable and concise as possible.'
73: 1:  ],
73: 1:  'expectedAnswer': 'even',
73: 1:  'history': [
73: 1:    {
73: 1:      'answer': 'even',
73: 1:      'question': '0',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'odd',
73: 1:      'question': '0 1 4',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'even',
73: 1:      'question': '0 -1 5',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'odd',
73: 1:      'question': '1 2 3 4 5',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'odd',
73: 1:      'question': '1 2 -3 4 5',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'even',
73: 1:      'question': '1 9 3 4 -5',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'odd',
73: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'even',
73: 1:      'question': '1 2 3',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'odd',
73: 1:      'question': '1',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'odd',
73: 1:      'question': '-1',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'even',
73: 1:      'question': '-1 -1 0',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'even',
73: 1:      'question': '1 1 0',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'even',
73: 1:      'question': '-1 -1',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'even',
73: 1:      'question': '1 -1 0',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'odd',
73: 1:      'question': '10 2 -1 -20',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'odd',
73: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'even',
73: 1:      'question': '-983 -111 -332 -973 47 728',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'even',
73: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'odd',
73: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'even',
73: 1:      'question': '646 261 609 -82 949 526 -449 -594 894',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'even',
73: 1:      'question': '-950 909 424 834 -579 -275 -901 444',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'even',
73: 1:      'question': '-857 43 444 158 510 -879 -350 705',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'even',
73: 1:      'question': '-961 908 -769 980 407 -651 550 671 -996 215',
73: 1:      'valid': true
73: 1:    },
73: 1:    {
73: 1:      'answer': 'odd',
73: 1:      'question': '483 -83 -229 -373 -812 335 -802',
73: 1:      'valid': true
73: 1:    }
73: 1:  ],
73: 1:  'info': [
73: 1:    '✅f(0) = even',
73: 1:    '✅f(0 1 4) = odd',
73: 1:    '✅f(0 -1 5) = even',
73: 1:    '✅f(1 2 3 4 5) = odd',
73: 1:    '✅f(1 2 -3 4 5) = odd',
73: 1:    '✅f(1 9 3 4 -5) = even',
73: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
73: 1:    '✅f(1 2 3) = even',
73: 1:    '✅f(1) = odd',
73: 1:    '✅f(-1) = odd',
73: 1:    '✅f(-1 -1 0) = even',
73: 1:    '✅f(1 1 0) = even',
73: 1:    '✅f(-1 -1) = even',
73: 1:    '✅f(1 -1 0) = even',
73: 1:    '✅f(10 2 -1 -20) = odd',
73: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = odd',
73: 1:    '✅f(-983 -111 -332 -973 47 728) = even',
73: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = even',
73: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = odd',
73: 1:    '✅f(646 261 609 -82 949 526 -449 -594 894) = even',
73: 1:    '✅f(-950 909 424 834 -579 -275 -901 444) = even',
73: 1:    '✅f(-857 43 444 158 510 -879 -350 705) = even',
73: 1:    '✅f(-961 908 -769 980 407 -651 550 671 -996 215) = even',
73: 1:    '✅f(483 -83 -229 -373 -812 335 -802) = odd',
73: 1:    '❌f(-968 -692 -566 -31 333 831 81 -476 828 -232) = ??? != even'
73: 1:  ],
73: 1:  'level': 2,
73: 1:  'nextQuestion': '-968 -692 -566 -31 333 831 81 -476 828 -232',
73: 1:  'questions': [
73: 1:    '0',
73: 1:    '0 1 4',
73: 1:    '0 -1 5',
73: 1:    '1 2 3 4 5',
73: 1:    '1 2 -3 4 5',
73: 1:    '1 9 3 4 -5',
73: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
73: 1:    '1 2 3',
73: 1:    '1',
73: 1:    '-1',
73: 1:    '-1 -1 0',
73: 1:    '1 1 0',
73: 1:    '-1 -1',
73: 1:    '1 -1 0',
73: 1:    '10 2 -1 -20',
73: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
73: 1:    '-983 -111 -332 -973 47 728',
73: 1:    '268 -359 -513 -9 -86 -142 -779',
73: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773',
73: 1:    '646 261 609 -82 949 526 -449 -594 894',
73: 1:    '-950 909 424 834 -579 -275 -901 444',
73: 1:    '-857 43 444 158 510 -879 -350 705',
73: 1:    '-961 908 -769 980 407 -651 550 671 -996 215',
73: 1:    '483 -83 -229 -373 -812 335 -802',
73: 1:    '-968 -692 -566 -31 333 831 81 -476 828 -232'
73: 1:  ]
73: 1:}
73: 1:Scores: 768
73: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even', 'even', 'even', 'odd', 'odd', 'even', 'even', 'odd', 'even', 'even', 'even', 'even', 'odd', 'even']')
73: 1:Fire Event: PassTest{complexity=6, testCount=26}
------------------------------------------
74: 1:BoardData {
74: 1:  'description': [
74: 1:    'Given a list of integers, determine whether the sum of its elements is Odd or Even.',
74: 1:    'Write a javascript method.',
74: 1:    'You are given a string of space separated numbers.',
74: 1:    'All numbers are valid Int32, no need to validate them.',
74: 1:    'Give your answer as a string matching 'odd' or 'even'.',
74: 1:    'Example:\n0=>even\n0 1 4=>odd\n0 -1 -5=>even',
74: 1:    'Don't use comments for clarification.',
74: 1:    'Make the code as readable and concise as possible.'
74: 1:  ],
74: 1:  'expectedAnswer': 'even',
74: 1:  'history': [
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '0',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'odd',
74: 1:      'question': '0 1 4',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '0 -1 5',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'odd',
74: 1:      'question': '1 2 3 4 5',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'odd',
74: 1:      'question': '1 2 -3 4 5',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '1 9 3 4 -5',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'odd',
74: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '1 2 3',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'odd',
74: 1:      'question': '1',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'odd',
74: 1:      'question': '-1',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '-1 -1 0',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '1 1 0',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '-1 -1',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '1 -1 0',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'odd',
74: 1:      'question': '10 2 -1 -20',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'odd',
74: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '-983 -111 -332 -973 47 728',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'odd',
74: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '646 261 609 -82 949 526 -449 -594 894',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '-950 909 424 834 -579 -275 -901 444',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '-857 43 444 158 510 -879 -350 705',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '-961 908 -769 980 407 -651 550 671 -996 215',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'odd',
74: 1:      'question': '483 -83 -229 -373 -812 335 -802',
74: 1:      'valid': true
74: 1:    },
74: 1:    {
74: 1:      'answer': 'even',
74: 1:      'question': '-968 -692 -566 -31 333 831 81 -476 828 -232',
74: 1:      'valid': true
74: 1:    }
74: 1:  ],
74: 1:  'info': [
74: 1:    '✅f(0) = even',
74: 1:    '✅f(0 1 4) = odd',
74: 1:    '✅f(0 -1 5) = even',
74: 1:    '✅f(1 2 3 4 5) = odd',
74: 1:    '✅f(1 2 -3 4 5) = odd',
74: 1:    '✅f(1 9 3 4 -5) = even',
74: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
74: 1:    '✅f(1 2 3) = even',
74: 1:    '✅f(1) = odd',
74: 1:    '✅f(-1) = odd',
74: 1:    '✅f(-1 -1 0) = even',
74: 1:    '✅f(1 1 0) = even',
74: 1:    '✅f(-1 -1) = even',
74: 1:    '✅f(1 -1 0) = even',
74: 1:    '✅f(10 2 -1 -20) = odd',
74: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = odd',
74: 1:    '✅f(-983 -111 -332 -973 47 728) = even',
74: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = even',
74: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = odd',
74: 1:    '✅f(646 261 609 -82 949 526 -449 -594 894) = even',
74: 1:    '✅f(-950 909 424 834 -579 -275 -901 444) = even',
74: 1:    '✅f(-857 43 444 158 510 -879 -350 705) = even',
74: 1:    '✅f(-961 908 -769 980 407 -651 550 671 -996 215) = even',
74: 1:    '✅f(483 -83 -229 -373 -812 335 -802) = odd',
74: 1:    '✅f(-968 -692 -566 -31 333 831 81 -476 828 -232) = even',
74: 1:    '❌f(4 5 29 54 4 0 -214 542 -64 1 -3 6 -6) = ??? != even'
74: 1:  ],
74: 1:  'level': 2,
74: 1:  'nextQuestion': '4 5 29 54 4 0 -214 542 -64 1 -3 6 -6',
74: 1:  'questions': [
74: 1:    '0',
74: 1:    '0 1 4',
74: 1:    '0 -1 5',
74: 1:    '1 2 3 4 5',
74: 1:    '1 2 -3 4 5',
74: 1:    '1 9 3 4 -5',
74: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
74: 1:    '1 2 3',
74: 1:    '1',
74: 1:    '-1',
74: 1:    '-1 -1 0',
74: 1:    '1 1 0',
74: 1:    '-1 -1',
74: 1:    '1 -1 0',
74: 1:    '10 2 -1 -20',
74: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
74: 1:    '-983 -111 -332 -973 47 728',
74: 1:    '268 -359 -513 -9 -86 -142 -779',
74: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773',
74: 1:    '646 261 609 -82 949 526 -449 -594 894',
74: 1:    '-950 909 424 834 -579 -275 -901 444',
74: 1:    '-857 43 444 158 510 -879 -350 705',
74: 1:    '-961 908 -769 980 407 -651 550 671 -996 215',
74: 1:    '483 -83 -229 -373 -812 335 -802',
74: 1:    '-968 -692 -566 -31 333 831 81 -476 828 -232',
74: 1:    '4 5 29 54 4 0 -214 542 -64 1 -3 6 -6'
74: 1:  ]
74: 1:}
74: 1:Scores: 770
74: 1:Answer: message('['even', 'odd', 'even', 'odd', 'odd', 'even', 'odd', 'even', 'odd', 'odd', 'even', 'even', 'even', 'even', 'odd', 'odd', 'even', 'even', 'odd', 'even', 'even', 'even', 'even', 'odd', 'even', 'even']')
74: 1:Fire Event: PassTest{complexity=6, testCount=26}
74: 1:Fire Event: NextAlgorithm{complexity=6, time=0}
------------------------------------------
75: 1:BoardData {
75: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
75: 1:  'history': [
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '0',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'odd',
75: 1:      'question': '0 1 4',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '0 -1 5',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'odd',
75: 1:      'question': '1 2 3 4 5',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'odd',
75: 1:      'question': '1 2 -3 4 5',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '1 9 3 4 -5',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'odd',
75: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '1 2 3',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'odd',
75: 1:      'question': '1',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'odd',
75: 1:      'question': '-1',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '-1 -1 0',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '1 1 0',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '-1 -1',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '1 -1 0',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'odd',
75: 1:      'question': '10 2 -1 -20',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'odd',
75: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '-983 -111 -332 -973 47 728',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'odd',
75: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '646 261 609 -82 949 526 -449 -594 894',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '-950 909 424 834 -579 -275 -901 444',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '-857 43 444 158 510 -879 -350 705',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '-961 908 -769 980 407 -651 550 671 -996 215',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'odd',
75: 1:      'question': '483 -83 -229 -373 -812 335 -802',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '-968 -692 -566 -31 333 831 81 -476 828 -232',
75: 1:      'valid': true
75: 1:    },
75: 1:    {
75: 1:      'answer': 'even',
75: 1:      'question': '4 5 29 54 4 0 -214 542 -64 1 -3 6 -6',
75: 1:      'valid': true
75: 1:    }
75: 1:  ],
75: 1:  'info': [
75: 1:    '✅f(0) = even',
75: 1:    '✅f(0 1 4) = odd',
75: 1:    '✅f(0 -1 5) = even',
75: 1:    '✅f(1 2 3 4 5) = odd',
75: 1:    '✅f(1 2 -3 4 5) = odd',
75: 1:    '✅f(1 9 3 4 -5) = even',
75: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = odd',
75: 1:    '✅f(1 2 3) = even',
75: 1:    '✅f(1) = odd',
75: 1:    '✅f(-1) = odd',
75: 1:    '✅f(-1 -1 0) = even',
75: 1:    '✅f(1 1 0) = even',
75: 1:    '✅f(-1 -1) = even',
75: 1:    '✅f(1 -1 0) = even',
75: 1:    '✅f(10 2 -1 -20) = odd',
75: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = odd',
75: 1:    '✅f(-983 -111 -332 -973 47 728) = even',
75: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = even',
75: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = odd',
75: 1:    '✅f(646 261 609 -82 949 526 -449 -594 894) = even',
75: 1:    '✅f(-950 909 424 834 -579 -275 -901 444) = even',
75: 1:    '✅f(-857 43 444 158 510 -879 -350 705) = even',
75: 1:    '✅f(-961 908 -769 980 407 -651 550 671 -996 215) = even',
75: 1:    '✅f(483 -83 -229 -373 -812 335 -802) = odd',
75: 1:    '✅f(-968 -692 -566 -31 333 831 81 -476 828 -232) = even',
75: 1:    '✅f(4 5 29 54 4 0 -214 542 -64 1 -3 6 -6) = even'
75: 1:  ],
75: 1:  'level': 2,
75: 1:  'questions': []
75: 1:}
75: 1:Scores: 1581
75: 1:Answer: message('StartNextLevel')
75: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
76: 1:BoardData {
76: 1:  'description': [
76: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
76: 1:    'Write a javascript method.',
76: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
76: 1:    'Use regular expressions to solve this problem.'
76: 1:  ],
76: 1:  'expectedAnswer': 'SSttrriinngg',
76: 1:  'history': [],
76: 1:  'info': ['❌f(String) = ??? != SSttrriinngg'],
76: 1:  'level': 3,
76: 1:  'nextQuestion': 'String',
76: 1:  'questions': ['String']
76: 1:}
76: 1:Scores: 1581
76: 1:Answer: message('['SSttrriinngg']')
76: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
77: 1:BoardData {
77: 1:  'description': [
77: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
77: 1:    'Write a javascript method.',
77: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
77: 1:    'Use regular expressions to solve this problem.'
77: 1:  ],
77: 1:  'expectedAnswer': 'HHeelllloo  WWoorrlldd',
77: 1:  'history': [{
77: 1:    'answer': 'SSttrriinngg',
77: 1:    'question': 'String',
77: 1:    'valid': true
77: 1:  }],
77: 1:  'info': [
77: 1:    '✅f(String) = SSttrriinngg',
77: 1:    '❌f(Hello World) = ??? != HHeelllloo  WWoorrlldd'
77: 1:  ],
77: 1:  'level': 3,
77: 1:  'nextQuestion': 'Hello World',
77: 1:  'questions': [
77: 1:    'String',
77: 1:    'Hello World'
77: 1:  ]
77: 1:}
77: 1:Scores: 1582
77: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd']')
77: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
78: 1:BoardData {
78: 1:  'description': [
78: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
78: 1:    'Write a javascript method.',
78: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
78: 1:    'Use regular expressions to solve this problem.'
78: 1:  ],
78: 1:  'expectedAnswer': '11223344!!__  ',
78: 1:  'history': [
78: 1:    {
78: 1:      'answer': 'SSttrriinngg',
78: 1:      'question': 'String',
78: 1:      'valid': true
78: 1:    },
78: 1:    {
78: 1:      'answer': 'HHeelllloo  WWoorrlldd',
78: 1:      'question': 'Hello World',
78: 1:      'valid': true
78: 1:    }
78: 1:  ],
78: 1:  'info': [
78: 1:    '✅f(String) = SSttrriinngg',
78: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
78: 1:    '❌f(1234!_ ) = ??? != 11223344!!__  '
78: 1:  ],
78: 1:  'level': 3,
78: 1:  'nextQuestion': '1234!_ ',
78: 1:  'questions': [
78: 1:    'String',
78: 1:    'Hello World',
78: 1:    '1234!_ '
78: 1:  ]
78: 1:}
78: 1:Scores: 1583
78: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ']')
78: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
79: 1:BoardData {
79: 1:  'description': [
79: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
79: 1:    'Write a javascript method.',
79: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
79: 1:    'Use regular expressions to solve this problem.'
79: 1:  ],
79: 1:  'expectedAnswer': '________  __  __  ____  ______  __  ________  ',
79: 1:  'history': [
79: 1:    {
79: 1:      'answer': 'SSttrriinngg',
79: 1:      'question': 'String',
79: 1:      'valid': true
79: 1:    },
79: 1:    {
79: 1:      'answer': 'HHeelllloo  WWoorrlldd',
79: 1:      'question': 'Hello World',
79: 1:      'valid': true
79: 1:    },
79: 1:    {
79: 1:      'answer': '11223344!!__  ',
79: 1:      'question': '1234!_ ',
79: 1:      'valid': true
79: 1:    }
79: 1:  ],
79: 1:  'info': [
79: 1:    '✅f(String) = SSttrriinngg',
79: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
79: 1:    '✅f(1234!_ ) = 11223344!!__  ',
79: 1:    '❌f(____ _ _ __ ___ _ ____ ) = ??? != ________  __  __  ____  ______  __  ________  '
79: 1:  ],
79: 1:  'level': 3,
79: 1:  'nextQuestion': '____ _ _ __ ___ _ ____ ',
79: 1:  'questions': [
79: 1:    'String',
79: 1:    'Hello World',
79: 1:    '1234!_ ',
79: 1:    '____ _ _ __ ___ _ ____ '
79: 1:  ]
79: 1:}
79: 1:Scores: 1584
79: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ']')
79: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
80: 1:BoardData {
80: 1:  'description': [
80: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
80: 1:    'Write a javascript method.',
80: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
80: 1:    'Use regular expressions to solve this problem.'
80: 1:  ],
80: 1:  'expectedAnswer': '((--__--))',
80: 1:  'history': [
80: 1:    {
80: 1:      'answer': 'SSttrriinngg',
80: 1:      'question': 'String',
80: 1:      'valid': true
80: 1:    },
80: 1:    {
80: 1:      'answer': 'HHeelllloo  WWoorrlldd',
80: 1:      'question': 'Hello World',
80: 1:      'valid': true
80: 1:    },
80: 1:    {
80: 1:      'answer': '11223344!!__  ',
80: 1:      'question': '1234!_ ',
80: 1:      'valid': true
80: 1:    },
80: 1:    {
80: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
80: 1:      'question': '____ _ _ __ ___ _ ____ ',
80: 1:      'valid': true
80: 1:    }
80: 1:  ],
80: 1:  'info': [
80: 1:    '✅f(String) = SSttrriinngg',
80: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
80: 1:    '✅f(1234!_ ) = 11223344!!__  ',
80: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
80: 1:    '❌f((-_-)) = ??? != ((--__--))'
80: 1:  ],
80: 1:  'level': 3,
80: 1:  'nextQuestion': '(-_-)',
80: 1:  'questions': [
80: 1:    'String',
80: 1:    'Hello World',
80: 1:    '1234!_ ',
80: 1:    '____ _ _ __ ___ _ ____ ',
80: 1:    '(-_-)'
80: 1:  ]
80: 1:}
80: 1:Scores: 1585
80: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))']')
80: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
81: 1:BoardData {
81: 1:  'description': [
81: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
81: 1:    'Write a javascript method.',
81: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
81: 1:    'Use regular expressions to solve this problem.'
81: 1:  ],
81: 1:  'expectedAnswer': '112233445566',
81: 1:  'history': [
81: 1:    {
81: 1:      'answer': 'SSttrriinngg',
81: 1:      'question': 'String',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': 'HHeelllloo  WWoorrlldd',
81: 1:      'question': 'Hello World',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': '11223344!!__  ',
81: 1:      'question': '1234!_ ',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
81: 1:      'question': '____ _ _ __ ___ _ ____ ',
81: 1:      'valid': true
81: 1:    },
81: 1:    {
81: 1:      'answer': '((--__--))',
81: 1:      'question': '(-_-)',
81: 1:      'valid': true
81: 1:    }
81: 1:  ],
81: 1:  'info': [
81: 1:    '✅f(String) = SSttrriinngg',
81: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
81: 1:    '✅f(1234!_ ) = 11223344!!__  ',
81: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
81: 1:    '✅f((-_-)) = ((--__--))',
81: 1:    '❌f(123456) = ??? != 112233445566'
81: 1:  ],
81: 1:  'level': 3,
81: 1:  'nextQuestion': '123456',
81: 1:  'questions': [
81: 1:    'String',
81: 1:    'Hello World',
81: 1:    '1234!_ ',
81: 1:    '____ _ _ __ ___ _ ____ ',
81: 1:    '(-_-)',
81: 1:    '123456'
81: 1:  ]
81: 1:}
81: 1:Scores: 1586
81: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566']')
81: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
82: 1:BoardData {
82: 1:  'description': [
82: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
82: 1:    'Write a javascript method.',
82: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
82: 1:    'Use regular expressions to solve this problem.'
82: 1:  ],
82: 1:  'expectedAnswer': 'SSccrruubb  LLoorrddss',
82: 1:  'history': [
82: 1:    {
82: 1:      'answer': 'SSttrriinngg',
82: 1:      'question': 'String',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': 'HHeelllloo  WWoorrlldd',
82: 1:      'question': 'Hello World',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '11223344!!__  ',
82: 1:      'question': '1234!_ ',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
82: 1:      'question': '____ _ _ __ ___ _ ____ ',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '((--__--))',
82: 1:      'question': '(-_-)',
82: 1:      'valid': true
82: 1:    },
82: 1:    {
82: 1:      'answer': '112233445566',
82: 1:      'question': '123456',
82: 1:      'valid': true
82: 1:    }
82: 1:  ],
82: 1:  'info': [
82: 1:    '✅f(String) = SSttrriinngg',
82: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
82: 1:    '✅f(1234!_ ) = 11223344!!__  ',
82: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
82: 1:    '✅f((-_-)) = ((--__--))',
82: 1:    '✅f(123456) = 112233445566',
82: 1:    '❌f(Scrub Lords) = ??? != SSccrruubb  LLoorrddss'
82: 1:  ],
82: 1:  'level': 3,
82: 1:  'nextQuestion': 'Scrub Lords',
82: 1:  'questions': [
82: 1:    'String',
82: 1:    'Hello World',
82: 1:    '1234!_ ',
82: 1:    '____ _ _ __ ___ _ ____ ',
82: 1:    '(-_-)',
82: 1:    '123456',
82: 1:    'Scrub Lords'
82: 1:  ]
82: 1:}
82: 1:Scores: 1587
82: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss']')
82: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
83: 1:BoardData {
83: 1:  'description': [
83: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
83: 1:    'Write a javascript method.',
83: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
83: 1:    'Use regular expressions to solve this problem.'
83: 1:  ],
83: 1:  'expectedAnswer': 'bbrruuhh',
83: 1:  'history': [
83: 1:    {
83: 1:      'answer': 'SSttrriinngg',
83: 1:      'question': 'String',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': 'HHeelllloo  WWoorrlldd',
83: 1:      'question': 'Hello World',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '11223344!!__  ',
83: 1:      'question': '1234!_ ',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
83: 1:      'question': '____ _ _ __ ___ _ ____ ',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '((--__--))',
83: 1:      'question': '(-_-)',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': '112233445566',
83: 1:      'question': '123456',
83: 1:      'valid': true
83: 1:    },
83: 1:    {
83: 1:      'answer': 'SSccrruubb  LLoorrddss',
83: 1:      'question': 'Scrub Lords',
83: 1:      'valid': true
83: 1:    }
83: 1:  ],
83: 1:  'info': [
83: 1:    '✅f(String) = SSttrriinngg',
83: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
83: 1:    '✅f(1234!_ ) = 11223344!!__  ',
83: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
83: 1:    '✅f((-_-)) = ((--__--))',
83: 1:    '✅f(123456) = 112233445566',
83: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
83: 1:    '❌f(bruh) = ??? != bbrruuhh'
83: 1:  ],
83: 1:  'level': 3,
83: 1:  'nextQuestion': 'bruh',
83: 1:  'questions': [
83: 1:    'String',
83: 1:    'Hello World',
83: 1:    '1234!_ ',
83: 1:    '____ _ _ __ ___ _ ____ ',
83: 1:    '(-_-)',
83: 1:    '123456',
83: 1:    'Scrub Lords',
83: 1:    'bruh'
83: 1:  ]
83: 1:}
83: 1:Scores: 1588
83: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh']')
83: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
84: 1:BoardData {
84: 1:  'description': [
84: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
84: 1:    'Write a javascript method.',
84: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
84: 1:    'Use regular expressions to solve this problem.'
84: 1:  ],
84: 1:  'expectedAnswer': 'iilllluummiinnaattii',
84: 1:  'history': [
84: 1:    {
84: 1:      'answer': 'SSttrriinngg',
84: 1:      'question': 'String',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': 'HHeelllloo  WWoorrlldd',
84: 1:      'question': 'Hello World',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '11223344!!__  ',
84: 1:      'question': '1234!_ ',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
84: 1:      'question': '____ _ _ __ ___ _ ____ ',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '((--__--))',
84: 1:      'question': '(-_-)',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': '112233445566',
84: 1:      'question': '123456',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': 'SSccrruubb  LLoorrddss',
84: 1:      'question': 'Scrub Lords',
84: 1:      'valid': true
84: 1:    },
84: 1:    {
84: 1:      'answer': 'bbrruuhh',
84: 1:      'question': 'bruh',
84: 1:      'valid': true
84: 1:    }
84: 1:  ],
84: 1:  'info': [
84: 1:    '✅f(String) = SSttrriinngg',
84: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
84: 1:    '✅f(1234!_ ) = 11223344!!__  ',
84: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
84: 1:    '✅f((-_-)) = ((--__--))',
84: 1:    '✅f(123456) = 112233445566',
84: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
84: 1:    '✅f(bruh) = bbrruuhh',
84: 1:    '❌f(illuminati) = ??? != iilllluummiinnaattii'
84: 1:  ],
84: 1:  'level': 3,
84: 1:  'nextQuestion': 'illuminati',
84: 1:  'questions': [
84: 1:    'String',
84: 1:    'Hello World',
84: 1:    '1234!_ ',
84: 1:    '____ _ _ __ ___ _ ____ ',
84: 1:    '(-_-)',
84: 1:    '123456',
84: 1:    'Scrub Lords',
84: 1:    'bruh',
84: 1:    'illuminati'
84: 1:  ]
84: 1:}
84: 1:Scores: 1589
84: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii']')
84: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
85: 1:BoardData {
85: 1:  'description': [
85: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
85: 1:    'Write a javascript method.',
85: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
85: 1:    'Use regular expressions to solve this problem.'
85: 1:  ],
85: 1:  'expectedAnswer': 'AAddiiddaass',
85: 1:  'history': [
85: 1:    {
85: 1:      'answer': 'SSttrriinngg',
85: 1:      'question': 'String',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': 'HHeelllloo  WWoorrlldd',
85: 1:      'question': 'Hello World',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '11223344!!__  ',
85: 1:      'question': '1234!_ ',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
85: 1:      'question': '____ _ _ __ ___ _ ____ ',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '((--__--))',
85: 1:      'question': '(-_-)',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': '112233445566',
85: 1:      'question': '123456',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': 'SSccrruubb  LLoorrddss',
85: 1:      'question': 'Scrub Lords',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': 'bbrruuhh',
85: 1:      'question': 'bruh',
85: 1:      'valid': true
85: 1:    },
85: 1:    {
85: 1:      'answer': 'iilllluummiinnaattii',
85: 1:      'question': 'illuminati',
85: 1:      'valid': true
85: 1:    }
85: 1:  ],
85: 1:  'info': [
85: 1:    '✅f(String) = SSttrriinngg',
85: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
85: 1:    '✅f(1234!_ ) = 11223344!!__  ',
85: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
85: 1:    '✅f((-_-)) = ((--__--))',
85: 1:    '✅f(123456) = 112233445566',
85: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
85: 1:    '✅f(bruh) = bbrruuhh',
85: 1:    '✅f(illuminati) = iilllluummiinnaattii',
85: 1:    '❌f(Adidas) = ??? != AAddiiddaass'
85: 1:  ],
85: 1:  'level': 3,
85: 1:  'nextQuestion': 'Adidas',
85: 1:  'questions': [
85: 1:    'String',
85: 1:    'Hello World',
85: 1:    '1234!_ ',
85: 1:    '____ _ _ __ ___ _ ____ ',
85: 1:    '(-_-)',
85: 1:    '123456',
85: 1:    'Scrub Lords',
85: 1:    'bruh',
85: 1:    'illuminati',
85: 1:    'Adidas'
85: 1:  ]
85: 1:}
85: 1:Scores: 1590
85: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass']')
85: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
86: 1:BoardData {
86: 1:  'description': [
86: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
86: 1:    'Write a javascript method.',
86: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
86: 1:    'Use regular expressions to solve this problem.'
86: 1:  ],
86: 1:  'expectedAnswer': '!!##%%GG##DDGGYY^^RRCC',
86: 1:  'history': [
86: 1:    {
86: 1:      'answer': 'SSttrriinngg',
86: 1:      'question': 'String',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': 'HHeelllloo  WWoorrlldd',
86: 1:      'question': 'Hello World',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '11223344!!__  ',
86: 1:      'question': '1234!_ ',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
86: 1:      'question': '____ _ _ __ ___ _ ____ ',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '((--__--))',
86: 1:      'question': '(-_-)',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': '112233445566',
86: 1:      'question': '123456',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': 'SSccrruubb  LLoorrddss',
86: 1:      'question': 'Scrub Lords',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': 'bbrruuhh',
86: 1:      'question': 'bruh',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': 'iilllluummiinnaattii',
86: 1:      'question': 'illuminati',
86: 1:      'valid': true
86: 1:    },
86: 1:    {
86: 1:      'answer': 'AAddiiddaass',
86: 1:      'question': 'Adidas',
86: 1:      'valid': true
86: 1:    }
86: 1:  ],
86: 1:  'info': [
86: 1:    '✅f(String) = SSttrriinngg',
86: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
86: 1:    '✅f(1234!_ ) = 11223344!!__  ',
86: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
86: 1:    '✅f((-_-)) = ((--__--))',
86: 1:    '✅f(123456) = 112233445566',
86: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
86: 1:    '✅f(bruh) = bbrruuhh',
86: 1:    '✅f(illuminati) = iilllluummiinnaattii',
86: 1:    '✅f(Adidas) = AAddiiddaass',
86: 1:    '❌f(!#%G#DGY^RC) = ??? != !!##%%GG##DDGGYY^^RRCC'
86: 1:  ],
86: 1:  'level': 3,
86: 1:  'nextQuestion': '!#%G#DGY^RC',
86: 1:  'questions': [
86: 1:    'String',
86: 1:    'Hello World',
86: 1:    '1234!_ ',
86: 1:    '____ _ _ __ ___ _ ____ ',
86: 1:    '(-_-)',
86: 1:    '123456',
86: 1:    'Scrub Lords',
86: 1:    'bruh',
86: 1:    'illuminati',
86: 1:    'Adidas',
86: 1:    '!#%G#DGY^RC'
86: 1:  ]
86: 1:}
86: 1:Scores: 1591
86: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC']')
86: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
87: 1:BoardData {
87: 1:  'description': [
87: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
87: 1:    'Write a javascript method.',
87: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
87: 1:    'Use regular expressions to solve this problem.'
87: 1:  ],
87: 1:  'expectedAnswer': 'DDoonnaalldd  DDuucckk',
87: 1:  'history': [
87: 1:    {
87: 1:      'answer': 'SSttrriinngg',
87: 1:      'question': 'String',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': 'HHeelllloo  WWoorrlldd',
87: 1:      'question': 'Hello World',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '11223344!!__  ',
87: 1:      'question': '1234!_ ',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
87: 1:      'question': '____ _ _ __ ___ _ ____ ',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '((--__--))',
87: 1:      'question': '(-_-)',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '112233445566',
87: 1:      'question': '123456',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': 'SSccrruubb  LLoorrddss',
87: 1:      'question': 'Scrub Lords',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': 'bbrruuhh',
87: 1:      'question': 'bruh',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': 'iilllluummiinnaattii',
87: 1:      'question': 'illuminati',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': 'AAddiiddaass',
87: 1:      'question': 'Adidas',
87: 1:      'valid': true
87: 1:    },
87: 1:    {
87: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
87: 1:      'question': '!#%G#DGY^RC',
87: 1:      'valid': true
87: 1:    }
87: 1:  ],
87: 1:  'info': [
87: 1:    '✅f(String) = SSttrriinngg',
87: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
87: 1:    '✅f(1234!_ ) = 11223344!!__  ',
87: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
87: 1:    '✅f((-_-)) = ((--__--))',
87: 1:    '✅f(123456) = 112233445566',
87: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
87: 1:    '✅f(bruh) = bbrruuhh',
87: 1:    '✅f(illuminati) = iilllluummiinnaattii',
87: 1:    '✅f(Adidas) = AAddiiddaass',
87: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
87: 1:    '❌f(Donald Duck) = ??? != DDoonnaalldd  DDuucckk'
87: 1:  ],
87: 1:  'level': 3,
87: 1:  'nextQuestion': 'Donald Duck',
87: 1:  'questions': [
87: 1:    'String',
87: 1:    'Hello World',
87: 1:    '1234!_ ',
87: 1:    '____ _ _ __ ___ _ ____ ',
87: 1:    '(-_-)',
87: 1:    '123456',
87: 1:    'Scrub Lords',
87: 1:    'bruh',
87: 1:    'illuminati',
87: 1:    'Adidas',
87: 1:    '!#%G#DGY^RC',
87: 1:    'Donald Duck'
87: 1:  ]
87: 1:}
87: 1:Scores: 1592
87: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk']')
87: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
88: 1:BoardData {
88: 1:  'description': [
88: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
88: 1:    'Write a javascript method.',
88: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
88: 1:    'Use regular expressions to solve this problem.'
88: 1:  ],
88: 1:  'expectedAnswer': 'KKaannyyee  22002200',
88: 1:  'history': [
88: 1:    {
88: 1:      'answer': 'SSttrriinngg',
88: 1:      'question': 'String',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': 'HHeelllloo  WWoorrlldd',
88: 1:      'question': 'Hello World',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '11223344!!__  ',
88: 1:      'question': '1234!_ ',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
88: 1:      'question': '____ _ _ __ ___ _ ____ ',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '((--__--))',
88: 1:      'question': '(-_-)',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '112233445566',
88: 1:      'question': '123456',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': 'SSccrruubb  LLoorrddss',
88: 1:      'question': 'Scrub Lords',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': 'bbrruuhh',
88: 1:      'question': 'bruh',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': 'iilllluummiinnaattii',
88: 1:      'question': 'illuminati',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': 'AAddiiddaass',
88: 1:      'question': 'Adidas',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
88: 1:      'question': '!#%G#DGY^RC',
88: 1:      'valid': true
88: 1:    },
88: 1:    {
88: 1:      'answer': 'DDoonnaalldd  DDuucckk',
88: 1:      'question': 'Donald Duck',
88: 1:      'valid': true
88: 1:    }
88: 1:  ],
88: 1:  'info': [
88: 1:    '✅f(String) = SSttrriinngg',
88: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
88: 1:    '✅f(1234!_ ) = 11223344!!__  ',
88: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
88: 1:    '✅f((-_-)) = ((--__--))',
88: 1:    '✅f(123456) = 112233445566',
88: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
88: 1:    '✅f(bruh) = bbrruuhh',
88: 1:    '✅f(illuminati) = iilllluummiinnaattii',
88: 1:    '✅f(Adidas) = AAddiiddaass',
88: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
88: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
88: 1:    '❌f(Kanye 2020) = ??? != KKaannyyee  22002200'
88: 1:  ],
88: 1:  'level': 3,
88: 1:  'nextQuestion': 'Kanye 2020',
88: 1:  'questions': [
88: 1:    'String',
88: 1:    'Hello World',
88: 1:    '1234!_ ',
88: 1:    '____ _ _ __ ___ _ ____ ',
88: 1:    '(-_-)',
88: 1:    '123456',
88: 1:    'Scrub Lords',
88: 1:    'bruh',
88: 1:    'illuminati',
88: 1:    'Adidas',
88: 1:    '!#%G#DGY^RC',
88: 1:    'Donald Duck',
88: 1:    'Kanye 2020'
88: 1:  ]
88: 1:}
88: 1:Scores: 1593
88: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200']')
88: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
89: 1:BoardData {
89: 1:  'description': [
89: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
89: 1:    'Write a javascript method.',
89: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
89: 1:    'Use regular expressions to solve this problem.'
89: 1:  ],
89: 1:  'expectedAnswer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
89: 1:  'history': [
89: 1:    {
89: 1:      'answer': 'SSttrriinngg',
89: 1:      'question': 'String',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': 'HHeelllloo  WWoorrlldd',
89: 1:      'question': 'Hello World',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '11223344!!__  ',
89: 1:      'question': '1234!_ ',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
89: 1:      'question': '____ _ _ __ ___ _ ____ ',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '((--__--))',
89: 1:      'question': '(-_-)',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '112233445566',
89: 1:      'question': '123456',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': 'SSccrruubb  LLoorrddss',
89: 1:      'question': 'Scrub Lords',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': 'bbrruuhh',
89: 1:      'question': 'bruh',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': 'iilllluummiinnaattii',
89: 1:      'question': 'illuminati',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': 'AAddiiddaass',
89: 1:      'question': 'Adidas',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
89: 1:      'question': '!#%G#DGY^RC',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': 'DDoonnaalldd  DDuucckk',
89: 1:      'question': 'Donald Duck',
89: 1:      'valid': true
89: 1:    },
89: 1:    {
89: 1:      'answer': 'KKaannyyee  22002200',
89: 1:      'question': 'Kanye 2020',
89: 1:      'valid': true
89: 1:    }
89: 1:  ],
89: 1:  'info': [
89: 1:    '✅f(String) = SSttrriinngg',
89: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
89: 1:    '✅f(1234!_ ) = 11223344!!__  ',
89: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
89: 1:    '✅f((-_-)) = ((--__--))',
89: 1:    '✅f(123456) = 112233445566',
89: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
89: 1:    '✅f(bruh) = bbrruuhh',
89: 1:    '✅f(illuminati) = iilllluummiinnaattii',
89: 1:    '✅f(Adidas) = AAddiiddaass',
89: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
89: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
89: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
89: 1:    '❌f(Bernie Sanders is Bae) = ??? != BBeerrnniiee  SSaannddeerrss  iiss  BBaaee'
89: 1:  ],
89: 1:  'level': 3,
89: 1:  'nextQuestion': 'Bernie Sanders is Bae',
89: 1:  'questions': [
89: 1:    'String',
89: 1:    'Hello World',
89: 1:    '1234!_ ',
89: 1:    '____ _ _ __ ___ _ ____ ',
89: 1:    '(-_-)',
89: 1:    '123456',
89: 1:    'Scrub Lords',
89: 1:    'bruh',
89: 1:    'illuminati',
89: 1:    'Adidas',
89: 1:    '!#%G#DGY^RC',
89: 1:    'Donald Duck',
89: 1:    'Kanye 2020',
89: 1:    'Bernie Sanders is Bae'
89: 1:  ]
89: 1:}
89: 1:Scores: 1594
89: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee']')
89: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
90: 1:BoardData {
90: 1:  'description': [
90: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
90: 1:    'Write a javascript method.',
90: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
90: 1:    'Use regular expressions to solve this problem.'
90: 1:  ],
90: 1:  'expectedAnswer': 'PPeeaannuutt  BBuutttteerr',
90: 1:  'history': [
90: 1:    {
90: 1:      'answer': 'SSttrriinngg',
90: 1:      'question': 'String',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': 'HHeelllloo  WWoorrlldd',
90: 1:      'question': 'Hello World',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '11223344!!__  ',
90: 1:      'question': '1234!_ ',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
90: 1:      'question': '____ _ _ __ ___ _ ____ ',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '((--__--))',
90: 1:      'question': '(-_-)',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '112233445566',
90: 1:      'question': '123456',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': 'SSccrruubb  LLoorrddss',
90: 1:      'question': 'Scrub Lords',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': 'bbrruuhh',
90: 1:      'question': 'bruh',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': 'iilllluummiinnaattii',
90: 1:      'question': 'illuminati',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': 'AAddiiddaass',
90: 1:      'question': 'Adidas',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
90: 1:      'question': '!#%G#DGY^RC',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': 'DDoonnaalldd  DDuucckk',
90: 1:      'question': 'Donald Duck',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': 'KKaannyyee  22002200',
90: 1:      'question': 'Kanye 2020',
90: 1:      'valid': true
90: 1:    },
90: 1:    {
90: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
90: 1:      'question': 'Bernie Sanders is Bae',
90: 1:      'valid': true
90: 1:    }
90: 1:  ],
90: 1:  'info': [
90: 1:    '✅f(String) = SSttrriinngg',
90: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
90: 1:    '✅f(1234!_ ) = 11223344!!__  ',
90: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
90: 1:    '✅f((-_-)) = ((--__--))',
90: 1:    '✅f(123456) = 112233445566',
90: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
90: 1:    '✅f(bruh) = bbrruuhh',
90: 1:    '✅f(illuminati) = iilllluummiinnaattii',
90: 1:    '✅f(Adidas) = AAddiiddaass',
90: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
90: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
90: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
90: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
90: 1:    '❌f(Peanut Butter) = ??? != PPeeaannuutt  BBuutttteerr'
90: 1:  ],
90: 1:  'level': 3,
90: 1:  'nextQuestion': 'Peanut Butter',
90: 1:  'questions': [
90: 1:    'String',
90: 1:    'Hello World',
90: 1:    '1234!_ ',
90: 1:    '____ _ _ __ ___ _ ____ ',
90: 1:    '(-_-)',
90: 1:    '123456',
90: 1:    'Scrub Lords',
90: 1:    'bruh',
90: 1:    'illuminati',
90: 1:    'Adidas',
90: 1:    '!#%G#DGY^RC',
90: 1:    'Donald Duck',
90: 1:    'Kanye 2020',
90: 1:    'Bernie Sanders is Bae',
90: 1:    'Peanut Butter'
90: 1:  ]
90: 1:}
90: 1:Scores: 1595
90: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr']')
90: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
91: 1:BoardData {
91: 1:  'description': [
91: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
91: 1:    'Write a javascript method.',
91: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
91: 1:    'Use regular expressions to solve this problem.'
91: 1:  ],
91: 1:  'expectedAnswer': '11333377',
91: 1:  'history': [
91: 1:    {
91: 1:      'answer': 'SSttrriinngg',
91: 1:      'question': 'String',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': 'HHeelllloo  WWoorrlldd',
91: 1:      'question': 'Hello World',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '11223344!!__  ',
91: 1:      'question': '1234!_ ',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
91: 1:      'question': '____ _ _ __ ___ _ ____ ',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '((--__--))',
91: 1:      'question': '(-_-)',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '112233445566',
91: 1:      'question': '123456',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': 'SSccrruubb  LLoorrddss',
91: 1:      'question': 'Scrub Lords',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': 'bbrruuhh',
91: 1:      'question': 'bruh',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': 'iilllluummiinnaattii',
91: 1:      'question': 'illuminati',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': 'AAddiiddaass',
91: 1:      'question': 'Adidas',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
91: 1:      'question': '!#%G#DGY^RC',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': 'DDoonnaalldd  DDuucckk',
91: 1:      'question': 'Donald Duck',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': 'KKaannyyee  22002200',
91: 1:      'question': 'Kanye 2020',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
91: 1:      'question': 'Bernie Sanders is Bae',
91: 1:      'valid': true
91: 1:    },
91: 1:    {
91: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
91: 1:      'question': 'Peanut Butter',
91: 1:      'valid': true
91: 1:    }
91: 1:  ],
91: 1:  'info': [
91: 1:    '✅f(String) = SSttrriinngg',
91: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
91: 1:    '✅f(1234!_ ) = 11223344!!__  ',
91: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
91: 1:    '✅f((-_-)) = ((--__--))',
91: 1:    '✅f(123456) = 112233445566',
91: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
91: 1:    '✅f(bruh) = bbrruuhh',
91: 1:    '✅f(illuminati) = iilllluummiinnaattii',
91: 1:    '✅f(Adidas) = AAddiiddaass',
91: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
91: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
91: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
91: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
91: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
91: 1:    '❌f(1337) = ??? != 11333377'
91: 1:  ],
91: 1:  'level': 3,
91: 1:  'nextQuestion': '1337',
91: 1:  'questions': [
91: 1:    'String',
91: 1:    'Hello World',
91: 1:    '1234!_ ',
91: 1:    '____ _ _ __ ___ _ ____ ',
91: 1:    '(-_-)',
91: 1:    '123456',
91: 1:    'Scrub Lords',
91: 1:    'bruh',
91: 1:    'illuminati',
91: 1:    'Adidas',
91: 1:    '!#%G#DGY^RC',
91: 1:    'Donald Duck',
91: 1:    'Kanye 2020',
91: 1:    'Bernie Sanders is Bae',
91: 1:    'Peanut Butter',
91: 1:    '1337'
91: 1:  ]
91: 1:}
91: 1:Scores: 1596
91: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377']')
91: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
92: 1:BoardData {
92: 1:  'description': [
92: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
92: 1:    'Write a javascript method.',
92: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
92: 1:    'Use regular expressions to solve this problem.'
92: 1:  ],
92: 1:  'expectedAnswer': 'hh**oo@@DD77aann&&  aa',
92: 1:  'history': [
92: 1:    {
92: 1:      'answer': 'SSttrriinngg',
92: 1:      'question': 'String',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': 'HHeelllloo  WWoorrlldd',
92: 1:      'question': 'Hello World',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '11223344!!__  ',
92: 1:      'question': '1234!_ ',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
92: 1:      'question': '____ _ _ __ ___ _ ____ ',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '((--__--))',
92: 1:      'question': '(-_-)',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '112233445566',
92: 1:      'question': '123456',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': 'SSccrruubb  LLoorrddss',
92: 1:      'question': 'Scrub Lords',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': 'bbrruuhh',
92: 1:      'question': 'bruh',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': 'iilllluummiinnaattii',
92: 1:      'question': 'illuminati',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': 'AAddiiddaass',
92: 1:      'question': 'Adidas',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
92: 1:      'question': '!#%G#DGY^RC',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': 'DDoonnaalldd  DDuucckk',
92: 1:      'question': 'Donald Duck',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': 'KKaannyyee  22002200',
92: 1:      'question': 'Kanye 2020',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
92: 1:      'question': 'Bernie Sanders is Bae',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
92: 1:      'question': 'Peanut Butter',
92: 1:      'valid': true
92: 1:    },
92: 1:    {
92: 1:      'answer': '11333377',
92: 1:      'question': '1337',
92: 1:      'valid': true
92: 1:    }
92: 1:  ],
92: 1:  'info': [
92: 1:    '✅f(String) = SSttrriinngg',
92: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
92: 1:    '✅f(1234!_ ) = 11223344!!__  ',
92: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
92: 1:    '✅f((-_-)) = ((--__--))',
92: 1:    '✅f(123456) = 112233445566',
92: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
92: 1:    '✅f(bruh) = bbrruuhh',
92: 1:    '✅f(illuminati) = iilllluummiinnaattii',
92: 1:    '✅f(Adidas) = AAddiiddaass',
92: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
92: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
92: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
92: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
92: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
92: 1:    '✅f(1337) = 11333377',
92: 1:    '❌f(h*o@D7an& a) = ??? != hh**oo@@DD77aann&&  aa'
92: 1:  ],
92: 1:  'level': 3,
92: 1:  'nextQuestion': 'h*o@D7an& a',
92: 1:  'questions': [
92: 1:    'String',
92: 1:    'Hello World',
92: 1:    '1234!_ ',
92: 1:    '____ _ _ __ ___ _ ____ ',
92: 1:    '(-_-)',
92: 1:    '123456',
92: 1:    'Scrub Lords',
92: 1:    'bruh',
92: 1:    'illuminati',
92: 1:    'Adidas',
92: 1:    '!#%G#DGY^RC',
92: 1:    'Donald Duck',
92: 1:    'Kanye 2020',
92: 1:    'Bernie Sanders is Bae',
92: 1:    'Peanut Butter',
92: 1:    '1337',
92: 1:    'h*o@D7an& a'
92: 1:  ]
92: 1:}
92: 1:Scores: 1597
92: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa']')
92: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
93: 1:BoardData {
93: 1:  'description': [
93: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
93: 1:    'Write a javascript method.',
93: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
93: 1:    'Use regular expressions to solve this problem.'
93: 1:  ],
93: 1:  'expectedAnswer': 'YY!!SS4477YY  @@',
93: 1:  'history': [
93: 1:    {
93: 1:      'answer': 'SSttrriinngg',
93: 1:      'question': 'String',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': 'HHeelllloo  WWoorrlldd',
93: 1:      'question': 'Hello World',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '11223344!!__  ',
93: 1:      'question': '1234!_ ',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
93: 1:      'question': '____ _ _ __ ___ _ ____ ',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '((--__--))',
93: 1:      'question': '(-_-)',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '112233445566',
93: 1:      'question': '123456',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': 'SSccrruubb  LLoorrddss',
93: 1:      'question': 'Scrub Lords',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': 'bbrruuhh',
93: 1:      'question': 'bruh',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': 'iilllluummiinnaattii',
93: 1:      'question': 'illuminati',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': 'AAddiiddaass',
93: 1:      'question': 'Adidas',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
93: 1:      'question': '!#%G#DGY^RC',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': 'DDoonnaalldd  DDuucckk',
93: 1:      'question': 'Donald Duck',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': 'KKaannyyee  22002200',
93: 1:      'question': 'Kanye 2020',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
93: 1:      'question': 'Bernie Sanders is Bae',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
93: 1:      'question': 'Peanut Butter',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': '11333377',
93: 1:      'question': '1337',
93: 1:      'valid': true
93: 1:    },
93: 1:    {
93: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
93: 1:      'question': 'h*o@D7an& a',
93: 1:      'valid': true
93: 1:    }
93: 1:  ],
93: 1:  'info': [
93: 1:    '✅f(String) = SSttrriinngg',
93: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
93: 1:    '✅f(1234!_ ) = 11223344!!__  ',
93: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
93: 1:    '✅f((-_-)) = ((--__--))',
93: 1:    '✅f(123456) = 112233445566',
93: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
93: 1:    '✅f(bruh) = bbrruuhh',
93: 1:    '✅f(illuminati) = iilllluummiinnaattii',
93: 1:    '✅f(Adidas) = AAddiiddaass',
93: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
93: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
93: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
93: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
93: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
93: 1:    '✅f(1337) = 11333377',
93: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
93: 1:    '❌f(Y!S47Y @) = ??? != YY!!SS4477YY  @@'
93: 1:  ],
93: 1:  'level': 3,
93: 1:  'nextQuestion': 'Y!S47Y @',
93: 1:  'questions': [
93: 1:    'String',
93: 1:    'Hello World',
93: 1:    '1234!_ ',
93: 1:    '____ _ _ __ ___ _ ____ ',
93: 1:    '(-_-)',
93: 1:    '123456',
93: 1:    'Scrub Lords',
93: 1:    'bruh',
93: 1:    'illuminati',
93: 1:    'Adidas',
93: 1:    '!#%G#DGY^RC',
93: 1:    'Donald Duck',
93: 1:    'Kanye 2020',
93: 1:    'Bernie Sanders is Bae',
93: 1:    'Peanut Butter',
93: 1:    '1337',
93: 1:    'h*o@D7an& a',
93: 1:    'Y!S47Y @'
93: 1:  ]
93: 1:}
93: 1:Scores: 1598
93: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@']')
93: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
94: 1:BoardData {
94: 1:  'description': [
94: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
94: 1:    'Write a javascript method.',
94: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
94: 1:    'Use regular expressions to solve this problem.'
94: 1:  ],
94: 1:  'expectedAnswer': '..--&&ddFFII88',
94: 1:  'history': [
94: 1:    {
94: 1:      'answer': 'SSttrriinngg',
94: 1:      'question': 'String',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': 'HHeelllloo  WWoorrlldd',
94: 1:      'question': 'Hello World',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '11223344!!__  ',
94: 1:      'question': '1234!_ ',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
94: 1:      'question': '____ _ _ __ ___ _ ____ ',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '((--__--))',
94: 1:      'question': '(-_-)',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '112233445566',
94: 1:      'question': '123456',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': 'SSccrruubb  LLoorrddss',
94: 1:      'question': 'Scrub Lords',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': 'bbrruuhh',
94: 1:      'question': 'bruh',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': 'iilllluummiinnaattii',
94: 1:      'question': 'illuminati',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': 'AAddiiddaass',
94: 1:      'question': 'Adidas',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
94: 1:      'question': '!#%G#DGY^RC',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': 'DDoonnaalldd  DDuucckk',
94: 1:      'question': 'Donald Duck',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': 'KKaannyyee  22002200',
94: 1:      'question': 'Kanye 2020',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
94: 1:      'question': 'Bernie Sanders is Bae',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
94: 1:      'question': 'Peanut Butter',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': '11333377',
94: 1:      'question': '1337',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
94: 1:      'question': 'h*o@D7an& a',
94: 1:      'valid': true
94: 1:    },
94: 1:    {
94: 1:      'answer': 'YY!!SS4477YY  @@',
94: 1:      'question': 'Y!S47Y @',
94: 1:      'valid': true
94: 1:    }
94: 1:  ],
94: 1:  'info': [
94: 1:    '✅f(String) = SSttrriinngg',
94: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
94: 1:    '✅f(1234!_ ) = 11223344!!__  ',
94: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
94: 1:    '✅f((-_-)) = ((--__--))',
94: 1:    '✅f(123456) = 112233445566',
94: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
94: 1:    '✅f(bruh) = bbrruuhh',
94: 1:    '✅f(illuminati) = iilllluummiinnaattii',
94: 1:    '✅f(Adidas) = AAddiiddaass',
94: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
94: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
94: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
94: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
94: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
94: 1:    '✅f(1337) = 11333377',
94: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
94: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
94: 1:    '❌f(.-&dFI8) = ??? != ..--&&ddFFII88'
94: 1:  ],
94: 1:  'level': 3,
94: 1:  'nextQuestion': '.-&dFI8',
94: 1:  'questions': [
94: 1:    'String',
94: 1:    'Hello World',
94: 1:    '1234!_ ',
94: 1:    '____ _ _ __ ___ _ ____ ',
94: 1:    '(-_-)',
94: 1:    '123456',
94: 1:    'Scrub Lords',
94: 1:    'bruh',
94: 1:    'illuminati',
94: 1:    'Adidas',
94: 1:    '!#%G#DGY^RC',
94: 1:    'Donald Duck',
94: 1:    'Kanye 2020',
94: 1:    'Bernie Sanders is Bae',
94: 1:    'Peanut Butter',
94: 1:    '1337',
94: 1:    'h*o@D7an& a',
94: 1:    'Y!S47Y @',
94: 1:    '.-&dFI8'
94: 1:  ]
94: 1:}
94: 1:Scores: 1599
94: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88']')
94: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
95: 1:BoardData {
95: 1:  'description': [
95: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
95: 1:    'Write a javascript method.',
95: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
95: 1:    'Use regular expressions to solve this problem.'
95: 1:  ],
95: 1:  'expectedAnswer': '!!ZZqq++',
95: 1:  'history': [
95: 1:    {
95: 1:      'answer': 'SSttrriinngg',
95: 1:      'question': 'String',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': 'HHeelllloo  WWoorrlldd',
95: 1:      'question': 'Hello World',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '11223344!!__  ',
95: 1:      'question': '1234!_ ',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
95: 1:      'question': '____ _ _ __ ___ _ ____ ',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '((--__--))',
95: 1:      'question': '(-_-)',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '112233445566',
95: 1:      'question': '123456',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': 'SSccrruubb  LLoorrddss',
95: 1:      'question': 'Scrub Lords',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': 'bbrruuhh',
95: 1:      'question': 'bruh',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': 'iilllluummiinnaattii',
95: 1:      'question': 'illuminati',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': 'AAddiiddaass',
95: 1:      'question': 'Adidas',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
95: 1:      'question': '!#%G#DGY^RC',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': 'DDoonnaalldd  DDuucckk',
95: 1:      'question': 'Donald Duck',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': 'KKaannyyee  22002200',
95: 1:      'question': 'Kanye 2020',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
95: 1:      'question': 'Bernie Sanders is Bae',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
95: 1:      'question': 'Peanut Butter',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '11333377',
95: 1:      'question': '1337',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
95: 1:      'question': 'h*o@D7an& a',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': 'YY!!SS4477YY  @@',
95: 1:      'question': 'Y!S47Y @',
95: 1:      'valid': true
95: 1:    },
95: 1:    {
95: 1:      'answer': '..--&&ddFFII88',
95: 1:      'question': '.-&dFI8',
95: 1:      'valid': true
95: 1:    }
95: 1:  ],
95: 1:  'info': [
95: 1:    '✅f(String) = SSttrriinngg',
95: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
95: 1:    '✅f(1234!_ ) = 11223344!!__  ',
95: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
95: 1:    '✅f((-_-)) = ((--__--))',
95: 1:    '✅f(123456) = 112233445566',
95: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
95: 1:    '✅f(bruh) = bbrruuhh',
95: 1:    '✅f(illuminati) = iilllluummiinnaattii',
95: 1:    '✅f(Adidas) = AAddiiddaass',
95: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
95: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
95: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
95: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
95: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
95: 1:    '✅f(1337) = 11333377',
95: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
95: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
95: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
95: 1:    '❌f(!Zq+) = ??? != !!ZZqq++'
95: 1:  ],
95: 1:  'level': 3,
95: 1:  'nextQuestion': '!Zq+',
95: 1:  'questions': [
95: 1:    'String',
95: 1:    'Hello World',
95: 1:    '1234!_ ',
95: 1:    '____ _ _ __ ___ _ ____ ',
95: 1:    '(-_-)',
95: 1:    '123456',
95: 1:    'Scrub Lords',
95: 1:    'bruh',
95: 1:    'illuminati',
95: 1:    'Adidas',
95: 1:    '!#%G#DGY^RC',
95: 1:    'Donald Duck',
95: 1:    'Kanye 2020',
95: 1:    'Bernie Sanders is Bae',
95: 1:    'Peanut Butter',
95: 1:    '1337',
95: 1:    'h*o@D7an& a',
95: 1:    'Y!S47Y @',
95: 1:    '.-&dFI8',
95: 1:    '!Zq+'
95: 1:  ]
95: 1:}
95: 1:Scores: 1600
95: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++']')
95: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
96: 1:BoardData {
96: 1:  'description': [
96: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
96: 1:    'Write a javascript method.',
96: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
96: 1:    'Use regular expressions to solve this problem.'
96: 1:  ],
96: 1:  'expectedAnswer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
96: 1:  'history': [
96: 1:    {
96: 1:      'answer': 'SSttrriinngg',
96: 1:      'question': 'String',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': 'HHeelllloo  WWoorrlldd',
96: 1:      'question': 'Hello World',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '11223344!!__  ',
96: 1:      'question': '1234!_ ',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
96: 1:      'question': '____ _ _ __ ___ _ ____ ',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '((--__--))',
96: 1:      'question': '(-_-)',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '112233445566',
96: 1:      'question': '123456',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': 'SSccrruubb  LLoorrddss',
96: 1:      'question': 'Scrub Lords',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': 'bbrruuhh',
96: 1:      'question': 'bruh',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': 'iilllluummiinnaattii',
96: 1:      'question': 'illuminati',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': 'AAddiiddaass',
96: 1:      'question': 'Adidas',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
96: 1:      'question': '!#%G#DGY^RC',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': 'DDoonnaalldd  DDuucckk',
96: 1:      'question': 'Donald Duck',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': 'KKaannyyee  22002200',
96: 1:      'question': 'Kanye 2020',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
96: 1:      'question': 'Bernie Sanders is Bae',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
96: 1:      'question': 'Peanut Butter',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '11333377',
96: 1:      'question': '1337',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
96: 1:      'question': 'h*o@D7an& a',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': 'YY!!SS4477YY  @@',
96: 1:      'question': 'Y!S47Y @',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '..--&&ddFFII88',
96: 1:      'question': '.-&dFI8',
96: 1:      'valid': true
96: 1:    },
96: 1:    {
96: 1:      'answer': '!!ZZqq++',
96: 1:      'question': '!Zq+',
96: 1:      'valid': true
96: 1:    }
96: 1:  ],
96: 1:  'info': [
96: 1:    '✅f(String) = SSttrriinngg',
96: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
96: 1:    '✅f(1234!_ ) = 11223344!!__  ',
96: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
96: 1:    '✅f((-_-)) = ((--__--))',
96: 1:    '✅f(123456) = 112233445566',
96: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
96: 1:    '✅f(bruh) = bbrruuhh',
96: 1:    '✅f(illuminati) = iilllluummiinnaattii',
96: 1:    '✅f(Adidas) = AAddiiddaass',
96: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
96: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
96: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
96: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
96: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
96: 1:    '✅f(1337) = 11333377',
96: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
96: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
96: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
96: 1:    '✅f(!Zq+) = !!ZZqq++',
96: 1:    '❌f(g%;U*!a/[pZ4V3/&) = ??? != gg%%;;UU**!!aa//[[ppZZ44VV33//&&'
96: 1:  ],
96: 1:  'level': 3,
96: 1:  'nextQuestion': 'g%;U*!a/[pZ4V3/&',
96: 1:  'questions': [
96: 1:    'String',
96: 1:    'Hello World',
96: 1:    '1234!_ ',
96: 1:    '____ _ _ __ ___ _ ____ ',
96: 1:    '(-_-)',
96: 1:    '123456',
96: 1:    'Scrub Lords',
96: 1:    'bruh',
96: 1:    'illuminati',
96: 1:    'Adidas',
96: 1:    '!#%G#DGY^RC',
96: 1:    'Donald Duck',
96: 1:    'Kanye 2020',
96: 1:    'Bernie Sanders is Bae',
96: 1:    'Peanut Butter',
96: 1:    '1337',
96: 1:    'h*o@D7an& a',
96: 1:    'Y!S47Y @',
96: 1:    '.-&dFI8',
96: 1:    '!Zq+',
96: 1:    'g%;U*!a/[pZ4V3/&'
96: 1:  ]
96: 1:}
96: 1:Scores: 1601
96: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&']')
96: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
97: 1:BoardData {
97: 1:  'description': [
97: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
97: 1:    'Write a javascript method.',
97: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
97: 1:    'Use regular expressions to solve this problem.'
97: 1:  ],
97: 1:  'expectedAnswer': '77ff55nnFF==::bb88eeoo&&++77',
97: 1:  'history': [
97: 1:    {
97: 1:      'answer': 'SSttrriinngg',
97: 1:      'question': 'String',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': 'HHeelllloo  WWoorrlldd',
97: 1:      'question': 'Hello World',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '11223344!!__  ',
97: 1:      'question': '1234!_ ',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
97: 1:      'question': '____ _ _ __ ___ _ ____ ',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '((--__--))',
97: 1:      'question': '(-_-)',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '112233445566',
97: 1:      'question': '123456',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': 'SSccrruubb  LLoorrddss',
97: 1:      'question': 'Scrub Lords',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': 'bbrruuhh',
97: 1:      'question': 'bruh',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': 'iilllluummiinnaattii',
97: 1:      'question': 'illuminati',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': 'AAddiiddaass',
97: 1:      'question': 'Adidas',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
97: 1:      'question': '!#%G#DGY^RC',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': 'DDoonnaalldd  DDuucckk',
97: 1:      'question': 'Donald Duck',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': 'KKaannyyee  22002200',
97: 1:      'question': 'Kanye 2020',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
97: 1:      'question': 'Bernie Sanders is Bae',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
97: 1:      'question': 'Peanut Butter',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '11333377',
97: 1:      'question': '1337',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
97: 1:      'question': 'h*o@D7an& a',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': 'YY!!SS4477YY  @@',
97: 1:      'question': 'Y!S47Y @',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '..--&&ddFFII88',
97: 1:      'question': '.-&dFI8',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': '!!ZZqq++',
97: 1:      'question': '!Zq+',
97: 1:      'valid': true
97: 1:    },
97: 1:    {
97: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
97: 1:      'question': 'g%;U*!a/[pZ4V3/&',
97: 1:      'valid': true
97: 1:    }
97: 1:  ],
97: 1:  'info': [
97: 1:    '✅f(String) = SSttrriinngg',
97: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
97: 1:    '✅f(1234!_ ) = 11223344!!__  ',
97: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
97: 1:    '✅f((-_-)) = ((--__--))',
97: 1:    '✅f(123456) = 112233445566',
97: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
97: 1:    '✅f(bruh) = bbrruuhh',
97: 1:    '✅f(illuminati) = iilllluummiinnaattii',
97: 1:    '✅f(Adidas) = AAddiiddaass',
97: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
97: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
97: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
97: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
97: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
97: 1:    '✅f(1337) = 11333377',
97: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
97: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
97: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
97: 1:    '✅f(!Zq+) = !!ZZqq++',
97: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
97: 1:    '❌f(7f5nF=:b8eo&+7) = ??? != 77ff55nnFF==::bb88eeoo&&++77'
97: 1:  ],
97: 1:  'level': 3,
97: 1:  'nextQuestion': '7f5nF=:b8eo&+7',
97: 1:  'questions': [
97: 1:    'String',
97: 1:    'Hello World',
97: 1:    '1234!_ ',
97: 1:    '____ _ _ __ ___ _ ____ ',
97: 1:    '(-_-)',
97: 1:    '123456',
97: 1:    'Scrub Lords',
97: 1:    'bruh',
97: 1:    'illuminati',
97: 1:    'Adidas',
97: 1:    '!#%G#DGY^RC',
97: 1:    'Donald Duck',
97: 1:    'Kanye 2020',
97: 1:    'Bernie Sanders is Bae',
97: 1:    'Peanut Butter',
97: 1:    '1337',
97: 1:    'h*o@D7an& a',
97: 1:    'Y!S47Y @',
97: 1:    '.-&dFI8',
97: 1:    '!Zq+',
97: 1:    'g%;U*!a/[pZ4V3/&',
97: 1:    '7f5nF=:b8eo&+7'
97: 1:  ]
97: 1:}
97: 1:Scores: 1602
97: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77']')
97: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
98: 1:BoardData {
98: 1:  'description': [
98: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
98: 1:    'Write a javascript method.',
98: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
98: 1:    'Use regular expressions to solve this problem.'
98: 1:  ],
98: 1:  'expectedAnswer': '**22SSNNmm##LLoo&&YY',
98: 1:  'history': [
98: 1:    {
98: 1:      'answer': 'SSttrriinngg',
98: 1:      'question': 'String',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': 'HHeelllloo  WWoorrlldd',
98: 1:      'question': 'Hello World',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '11223344!!__  ',
98: 1:      'question': '1234!_ ',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
98: 1:      'question': '____ _ _ __ ___ _ ____ ',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '((--__--))',
98: 1:      'question': '(-_-)',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '112233445566',
98: 1:      'question': '123456',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': 'SSccrruubb  LLoorrddss',
98: 1:      'question': 'Scrub Lords',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': 'bbrruuhh',
98: 1:      'question': 'bruh',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': 'iilllluummiinnaattii',
98: 1:      'question': 'illuminati',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': 'AAddiiddaass',
98: 1:      'question': 'Adidas',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
98: 1:      'question': '!#%G#DGY^RC',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': 'DDoonnaalldd  DDuucckk',
98: 1:      'question': 'Donald Duck',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': 'KKaannyyee  22002200',
98: 1:      'question': 'Kanye 2020',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
98: 1:      'question': 'Bernie Sanders is Bae',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
98: 1:      'question': 'Peanut Butter',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '11333377',
98: 1:      'question': '1337',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
98: 1:      'question': 'h*o@D7an& a',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': 'YY!!SS4477YY  @@',
98: 1:      'question': 'Y!S47Y @',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '..--&&ddFFII88',
98: 1:      'question': '.-&dFI8',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '!!ZZqq++',
98: 1:      'question': '!Zq+',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
98: 1:      'question': 'g%;U*!a/[pZ4V3/&',
98: 1:      'valid': true
98: 1:    },
98: 1:    {
98: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
98: 1:      'question': '7f5nF=:b8eo&+7',
98: 1:      'valid': true
98: 1:    }
98: 1:  ],
98: 1:  'info': [
98: 1:    '✅f(String) = SSttrriinngg',
98: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
98: 1:    '✅f(1234!_ ) = 11223344!!__  ',
98: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
98: 1:    '✅f((-_-)) = ((--__--))',
98: 1:    '✅f(123456) = 112233445566',
98: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
98: 1:    '✅f(bruh) = bbrruuhh',
98: 1:    '✅f(illuminati) = iilllluummiinnaattii',
98: 1:    '✅f(Adidas) = AAddiiddaass',
98: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
98: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
98: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
98: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
98: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
98: 1:    '✅f(1337) = 11333377',
98: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
98: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
98: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
98: 1:    '✅f(!Zq+) = !!ZZqq++',
98: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
98: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
98: 1:    '❌f(*2SNm#Lo&Y) = ??? != **22SSNNmm##LLoo&&YY'
98: 1:  ],
98: 1:  'level': 3,
98: 1:  'nextQuestion': '*2SNm#Lo&Y',
98: 1:  'questions': [
98: 1:    'String',
98: 1:    'Hello World',
98: 1:    '1234!_ ',
98: 1:    '____ _ _ __ ___ _ ____ ',
98: 1:    '(-_-)',
98: 1:    '123456',
98: 1:    'Scrub Lords',
98: 1:    'bruh',
98: 1:    'illuminati',
98: 1:    'Adidas',
98: 1:    '!#%G#DGY^RC',
98: 1:    'Donald Duck',
98: 1:    'Kanye 2020',
98: 1:    'Bernie Sanders is Bae',
98: 1:    'Peanut Butter',
98: 1:    '1337',
98: 1:    'h*o@D7an& a',
98: 1:    'Y!S47Y @',
98: 1:    '.-&dFI8',
98: 1:    '!Zq+',
98: 1:    'g%;U*!a/[pZ4V3/&',
98: 1:    '7f5nF=:b8eo&+7',
98: 1:    '*2SNm#Lo&Y'
98: 1:  ]
98: 1:}
98: 1:Scores: 1603
98: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY']')
98: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
99: 1:BoardData {
99: 1:  'description': [
99: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
99: 1:    'Write a javascript method.',
99: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
99: 1:    'Use regular expressions to solve this problem.'
99: 1:  ],
99: 1:  'expectedAnswer': '33ZZVVmm',
99: 1:  'history': [
99: 1:    {
99: 1:      'answer': 'SSttrriinngg',
99: 1:      'question': 'String',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': 'HHeelllloo  WWoorrlldd',
99: 1:      'question': 'Hello World',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '11223344!!__  ',
99: 1:      'question': '1234!_ ',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
99: 1:      'question': '____ _ _ __ ___ _ ____ ',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '((--__--))',
99: 1:      'question': '(-_-)',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '112233445566',
99: 1:      'question': '123456',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': 'SSccrruubb  LLoorrddss',
99: 1:      'question': 'Scrub Lords',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': 'bbrruuhh',
99: 1:      'question': 'bruh',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': 'iilllluummiinnaattii',
99: 1:      'question': 'illuminati',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': 'AAddiiddaass',
99: 1:      'question': 'Adidas',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
99: 1:      'question': '!#%G#DGY^RC',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': 'DDoonnaalldd  DDuucckk',
99: 1:      'question': 'Donald Duck',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': 'KKaannyyee  22002200',
99: 1:      'question': 'Kanye 2020',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
99: 1:      'question': 'Bernie Sanders is Bae',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
99: 1:      'question': 'Peanut Butter',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '11333377',
99: 1:      'question': '1337',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
99: 1:      'question': 'h*o@D7an& a',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': 'YY!!SS4477YY  @@',
99: 1:      'question': 'Y!S47Y @',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '..--&&ddFFII88',
99: 1:      'question': '.-&dFI8',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '!!ZZqq++',
99: 1:      'question': '!Zq+',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
99: 1:      'question': 'g%;U*!a/[pZ4V3/&',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
99: 1:      'question': '7f5nF=:b8eo&+7',
99: 1:      'valid': true
99: 1:    },
99: 1:    {
99: 1:      'answer': '**22SSNNmm##LLoo&&YY',
99: 1:      'question': '*2SNm#Lo&Y',
99: 1:      'valid': true
99: 1:    }
99: 1:  ],
99: 1:  'info': [
99: 1:    '✅f(String) = SSttrriinngg',
99: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
99: 1:    '✅f(1234!_ ) = 11223344!!__  ',
99: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
99: 1:    '✅f((-_-)) = ((--__--))',
99: 1:    '✅f(123456) = 112233445566',
99: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
99: 1:    '✅f(bruh) = bbrruuhh',
99: 1:    '✅f(illuminati) = iilllluummiinnaattii',
99: 1:    '✅f(Adidas) = AAddiiddaass',
99: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
99: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
99: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
99: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
99: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
99: 1:    '✅f(1337) = 11333377',
99: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
99: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
99: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
99: 1:    '✅f(!Zq+) = !!ZZqq++',
99: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
99: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
99: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
99: 1:    '❌f(3ZVm) = ??? != 33ZZVVmm'
99: 1:  ],
99: 1:  'level': 3,
99: 1:  'nextQuestion': '3ZVm',
99: 1:  'questions': [
99: 1:    'String',
99: 1:    'Hello World',
99: 1:    '1234!_ ',
99: 1:    '____ _ _ __ ___ _ ____ ',
99: 1:    '(-_-)',
99: 1:    '123456',
99: 1:    'Scrub Lords',
99: 1:    'bruh',
99: 1:    'illuminati',
99: 1:    'Adidas',
99: 1:    '!#%G#DGY^RC',
99: 1:    'Donald Duck',
99: 1:    'Kanye 2020',
99: 1:    'Bernie Sanders is Bae',
99: 1:    'Peanut Butter',
99: 1:    '1337',
99: 1:    'h*o@D7an& a',
99: 1:    'Y!S47Y @',
99: 1:    '.-&dFI8',
99: 1:    '!Zq+',
99: 1:    'g%;U*!a/[pZ4V3/&',
99: 1:    '7f5nF=:b8eo&+7',
99: 1:    '*2SNm#Lo&Y',
99: 1:    '3ZVm'
99: 1:  ]
99: 1:}
99: 1:Scores: 1604
99: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm']')
99: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
100: 1:BoardData {
100: 1:  'description': [
100: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
100: 1:    'Write a javascript method.',
100: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
100: 1:    'Use regular expressions to solve this problem.'
100: 1:  ],
100: 1:  'expectedAnswer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
100: 1:  'history': [
100: 1:    {
100: 1:      'answer': 'SSttrriinngg',
100: 1:      'question': 'String',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': 'HHeelllloo  WWoorrlldd',
100: 1:      'question': 'Hello World',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '11223344!!__  ',
100: 1:      'question': '1234!_ ',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
100: 1:      'question': '____ _ _ __ ___ _ ____ ',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '((--__--))',
100: 1:      'question': '(-_-)',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '112233445566',
100: 1:      'question': '123456',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': 'SSccrruubb  LLoorrddss',
100: 1:      'question': 'Scrub Lords',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': 'bbrruuhh',
100: 1:      'question': 'bruh',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': 'iilllluummiinnaattii',
100: 1:      'question': 'illuminati',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': 'AAddiiddaass',
100: 1:      'question': 'Adidas',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
100: 1:      'question': '!#%G#DGY^RC',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': 'DDoonnaalldd  DDuucckk',
100: 1:      'question': 'Donald Duck',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': 'KKaannyyee  22002200',
100: 1:      'question': 'Kanye 2020',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
100: 1:      'question': 'Bernie Sanders is Bae',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
100: 1:      'question': 'Peanut Butter',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '11333377',
100: 1:      'question': '1337',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
100: 1:      'question': 'h*o@D7an& a',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': 'YY!!SS4477YY  @@',
100: 1:      'question': 'Y!S47Y @',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '..--&&ddFFII88',
100: 1:      'question': '.-&dFI8',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '!!ZZqq++',
100: 1:      'question': '!Zq+',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
100: 1:      'question': 'g%;U*!a/[pZ4V3/&',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
100: 1:      'question': '7f5nF=:b8eo&+7',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '**22SSNNmm##LLoo&&YY',
100: 1:      'question': '*2SNm#Lo&Y',
100: 1:      'valid': true
100: 1:    },
100: 1:    {
100: 1:      'answer': '33ZZVVmm',
100: 1:      'question': '3ZVm',
100: 1:      'valid': true
100: 1:    }
100: 1:  ],
100: 1:  'info': [
100: 1:    '✅f(String) = SSttrriinngg',
100: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
100: 1:    '✅f(1234!_ ) = 11223344!!__  ',
100: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
100: 1:    '✅f((-_-)) = ((--__--))',
100: 1:    '✅f(123456) = 112233445566',
100: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
100: 1:    '✅f(bruh) = bbrruuhh',
100: 1:    '✅f(illuminati) = iilllluummiinnaattii',
100: 1:    '✅f(Adidas) = AAddiiddaass',
100: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
100: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
100: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
100: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
100: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
100: 1:    '✅f(1337) = 11333377',
100: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
100: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
100: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
100: 1:    '✅f(!Zq+) = !!ZZqq++',
100: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
100: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
100: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
100: 1:    '✅f(3ZVm) = 33ZZVVmm',
100: 1:    '❌f(]C06*Ec$62o!7][/9) = ??? != ]]CC0066**EEcc$$6622oo!!77]][[//99'
100: 1:  ],
100: 1:  'level': 3,
100: 1:  'nextQuestion': ']C06*Ec$62o!7][/9',
100: 1:  'questions': [
100: 1:    'String',
100: 1:    'Hello World',
100: 1:    '1234!_ ',
100: 1:    '____ _ _ __ ___ _ ____ ',
100: 1:    '(-_-)',
100: 1:    '123456',
100: 1:    'Scrub Lords',
100: 1:    'bruh',
100: 1:    'illuminati',
100: 1:    'Adidas',
100: 1:    '!#%G#DGY^RC',
100: 1:    'Donald Duck',
100: 1:    'Kanye 2020',
100: 1:    'Bernie Sanders is Bae',
100: 1:    'Peanut Butter',
100: 1:    '1337',
100: 1:    'h*o@D7an& a',
100: 1:    'Y!S47Y @',
100: 1:    '.-&dFI8',
100: 1:    '!Zq+',
100: 1:    'g%;U*!a/[pZ4V3/&',
100: 1:    '7f5nF=:b8eo&+7',
100: 1:    '*2SNm#Lo&Y',
100: 1:    '3ZVm',
100: 1:    ']C06*Ec$62o!7][/9'
100: 1:  ]
100: 1:}
100: 1:Scores: 1605
100: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99']')
100: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
101: 1:BoardData {
101: 1:  'description': [
101: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
101: 1:    'Write a javascript method.',
101: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
101: 1:    'Use regular expressions to solve this problem.'
101: 1:  ],
101: 1:  'expectedAnswer': '^^qq%%]]VVooKKhhhh99jj55--',
101: 1:  'history': [
101: 1:    {
101: 1:      'answer': 'SSttrriinngg',
101: 1:      'question': 'String',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': 'HHeelllloo  WWoorrlldd',
101: 1:      'question': 'Hello World',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': '11223344!!__  ',
101: 1:      'question': '1234!_ ',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
101: 1:      'question': '____ _ _ __ ___ _ ____ ',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': '((--__--))',
101: 1:      'question': '(-_-)',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': '112233445566',
101: 1:      'question': '123456',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': 'SSccrruubb  LLoorrddss',
101: 1:      'question': 'Scrub Lords',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': 'bbrruuhh',
101: 1:      'question': 'bruh',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': 'iilllluummiinnaattii',
101: 1:      'question': 'illuminati',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': 'AAddiiddaass',
101: 1:      'question': 'Adidas',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
101: 1:      'question': '!#%G#DGY^RC',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': 'DDoonnaalldd  DDuucckk',
101: 1:      'question': 'Donald Duck',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': 'KKaannyyee  22002200',
101: 1:      'question': 'Kanye 2020',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
101: 1:      'question': 'Bernie Sanders is Bae',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
101: 1:      'question': 'Peanut Butter',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': '11333377',
101: 1:      'question': '1337',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
101: 1:      'question': 'h*o@D7an& a',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': 'YY!!SS4477YY  @@',
101: 1:      'question': 'Y!S47Y @',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': '..--&&ddFFII88',
101: 1:      'question': '.-&dFI8',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': '!!ZZqq++',
101: 1:      'question': '!Zq+',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
101: 1:      'question': 'g%;U*!a/[pZ4V3/&',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
101: 1:      'question': '7f5nF=:b8eo&+7',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': '**22SSNNmm##LLoo&&YY',
101: 1:      'question': '*2SNm#Lo&Y',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': '33ZZVVmm',
101: 1:      'question': '3ZVm',
101: 1:      'valid': true
101: 1:    },
101: 1:    {
101: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
101: 1:      'question': ']C06*Ec$62o!7][/9',
101: 1:      'valid': true
101: 1:    }
101: 1:  ],
101: 1:  'info': [
101: 1:    '✅f(String) = SSttrriinngg',
101: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
101: 1:    '✅f(1234!_ ) = 11223344!!__  ',
101: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
101: 1:    '✅f((-_-)) = ((--__--))',
101: 1:    '✅f(123456) = 112233445566',
101: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
101: 1:    '✅f(bruh) = bbrruuhh',
101: 1:    '✅f(illuminati) = iilllluummiinnaattii',
101: 1:    '✅f(Adidas) = AAddiiddaass',
101: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
101: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
101: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
101: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
101: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
101: 1:    '✅f(1337) = 11333377',
101: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
101: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
101: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
101: 1:    '✅f(!Zq+) = !!ZZqq++',
101: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
101: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
101: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
101: 1:    '✅f(3ZVm) = 33ZZVVmm',
101: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
101: 1:    '❌f(^q%]VoKhh9j5-) = ??? != ^^qq%%]]VVooKKhhhh99jj55--'
101: 1:  ],
101: 1:  'level': 3,
101: 1:  'nextQuestion': '^q%]VoKhh9j5-',
101: 1:  'questions': [
101: 1:    'String',
101: 1:    'Hello World',
101: 1:    '1234!_ ',
101: 1:    '____ _ _ __ ___ _ ____ ',
101: 1:    '(-_-)',
101: 1:    '123456',
101: 1:    'Scrub Lords',
101: 1:    'bruh',
101: 1:    'illuminati',
101: 1:    'Adidas',
101: 1:    '!#%G#DGY^RC',
101: 1:    'Donald Duck',
101: 1:    'Kanye 2020',
101: 1:    'Bernie Sanders is Bae',
101: 1:    'Peanut Butter',
101: 1:    '1337',
101: 1:    'h*o@D7an& a',
101: 1:    'Y!S47Y @',
101: 1:    '.-&dFI8',
101: 1:    '!Zq+',
101: 1:    'g%;U*!a/[pZ4V3/&',
101: 1:    '7f5nF=:b8eo&+7',
101: 1:    '*2SNm#Lo&Y',
101: 1:    '3ZVm',
101: 1:    ']C06*Ec$62o!7][/9',
101: 1:    '^q%]VoKhh9j5-'
101: 1:  ]
101: 1:}
101: 1:Scores: 1606
101: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--']')
101: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
102: 1:BoardData {
102: 1:  'description': [
102: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
102: 1:    'Write a javascript method.',
102: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
102: 1:    'Use regular expressions to solve this problem.'
102: 1:  ],
102: 1:  'expectedAnswer': '$$22EEZZGGQQ',
102: 1:  'history': [
102: 1:    {
102: 1:      'answer': 'SSttrriinngg',
102: 1:      'question': 'String',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': 'HHeelllloo  WWoorrlldd',
102: 1:      'question': 'Hello World',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': '11223344!!__  ',
102: 1:      'question': '1234!_ ',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
102: 1:      'question': '____ _ _ __ ___ _ ____ ',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': '((--__--))',
102: 1:      'question': '(-_-)',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': '112233445566',
102: 1:      'question': '123456',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': 'SSccrruubb  LLoorrddss',
102: 1:      'question': 'Scrub Lords',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': 'bbrruuhh',
102: 1:      'question': 'bruh',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': 'iilllluummiinnaattii',
102: 1:      'question': 'illuminati',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': 'AAddiiddaass',
102: 1:      'question': 'Adidas',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
102: 1:      'question': '!#%G#DGY^RC',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': 'DDoonnaalldd  DDuucckk',
102: 1:      'question': 'Donald Duck',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': 'KKaannyyee  22002200',
102: 1:      'question': 'Kanye 2020',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
102: 1:      'question': 'Bernie Sanders is Bae',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
102: 1:      'question': 'Peanut Butter',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': '11333377',
102: 1:      'question': '1337',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
102: 1:      'question': 'h*o@D7an& a',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': 'YY!!SS4477YY  @@',
102: 1:      'question': 'Y!S47Y @',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': '..--&&ddFFII88',
102: 1:      'question': '.-&dFI8',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': '!!ZZqq++',
102: 1:      'question': '!Zq+',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
102: 1:      'question': 'g%;U*!a/[pZ4V3/&',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
102: 1:      'question': '7f5nF=:b8eo&+7',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': '**22SSNNmm##LLoo&&YY',
102: 1:      'question': '*2SNm#Lo&Y',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': '33ZZVVmm',
102: 1:      'question': '3ZVm',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
102: 1:      'question': ']C06*Ec$62o!7][/9',
102: 1:      'valid': true
102: 1:    },
102: 1:    {
102: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
102: 1:      'question': '^q%]VoKhh9j5-',
102: 1:      'valid': true
102: 1:    }
102: 1:  ],
102: 1:  'info': [
102: 1:    '✅f(String) = SSttrriinngg',
102: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
102: 1:    '✅f(1234!_ ) = 11223344!!__  ',
102: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
102: 1:    '✅f((-_-)) = ((--__--))',
102: 1:    '✅f(123456) = 112233445566',
102: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
102: 1:    '✅f(bruh) = bbrruuhh',
102: 1:    '✅f(illuminati) = iilllluummiinnaattii',
102: 1:    '✅f(Adidas) = AAddiiddaass',
102: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
102: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
102: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
102: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
102: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
102: 1:    '✅f(1337) = 11333377',
102: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
102: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
102: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
102: 1:    '✅f(!Zq+) = !!ZZqq++',
102: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
102: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
102: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
102: 1:    '✅f(3ZVm) = 33ZZVVmm',
102: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
102: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
102: 1:    '❌f($2EZGQ) = ??? != $$22EEZZGGQQ'
102: 1:  ],
102: 1:  'level': 3,
102: 1:  'nextQuestion': '$2EZGQ',
102: 1:  'questions': [
102: 1:    'String',
102: 1:    'Hello World',
102: 1:    '1234!_ ',
102: 1:    '____ _ _ __ ___ _ ____ ',
102: 1:    '(-_-)',
102: 1:    '123456',
102: 1:    'Scrub Lords',
102: 1:    'bruh',
102: 1:    'illuminati',
102: 1:    'Adidas',
102: 1:    '!#%G#DGY^RC',
102: 1:    'Donald Duck',
102: 1:    'Kanye 2020',
102: 1:    'Bernie Sanders is Bae',
102: 1:    'Peanut Butter',
102: 1:    '1337',
102: 1:    'h*o@D7an& a',
102: 1:    'Y!S47Y @',
102: 1:    '.-&dFI8',
102: 1:    '!Zq+',
102: 1:    'g%;U*!a/[pZ4V3/&',
102: 1:    '7f5nF=:b8eo&+7',
102: 1:    '*2SNm#Lo&Y',
102: 1:    '3ZVm',
102: 1:    ']C06*Ec$62o!7][/9',
102: 1:    '^q%]VoKhh9j5-',
102: 1:    '$2EZGQ'
102: 1:  ]
102: 1:}
102: 1:Scores: 1607
102: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ']')
102: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
103: 1:BoardData {
103: 1:  'description': [
103: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
103: 1:    'Write a javascript method.',
103: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
103: 1:    'Use regular expressions to solve this problem.'
103: 1:  ],
103: 1:  'expectedAnswer': '``UU99@@hh',
103: 1:  'history': [
103: 1:    {
103: 1:      'answer': 'SSttrriinngg',
103: 1:      'question': 'String',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': 'HHeelllloo  WWoorrlldd',
103: 1:      'question': 'Hello World',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': '11223344!!__  ',
103: 1:      'question': '1234!_ ',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
103: 1:      'question': '____ _ _ __ ___ _ ____ ',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': '((--__--))',
103: 1:      'question': '(-_-)',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': '112233445566',
103: 1:      'question': '123456',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': 'SSccrruubb  LLoorrddss',
103: 1:      'question': 'Scrub Lords',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': 'bbrruuhh',
103: 1:      'question': 'bruh',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': 'iilllluummiinnaattii',
103: 1:      'question': 'illuminati',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': 'AAddiiddaass',
103: 1:      'question': 'Adidas',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
103: 1:      'question': '!#%G#DGY^RC',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': 'DDoonnaalldd  DDuucckk',
103: 1:      'question': 'Donald Duck',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': 'KKaannyyee  22002200',
103: 1:      'question': 'Kanye 2020',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
103: 1:      'question': 'Bernie Sanders is Bae',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
103: 1:      'question': 'Peanut Butter',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': '11333377',
103: 1:      'question': '1337',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
103: 1:      'question': 'h*o@D7an& a',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': 'YY!!SS4477YY  @@',
103: 1:      'question': 'Y!S47Y @',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': '..--&&ddFFII88',
103: 1:      'question': '.-&dFI8',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': '!!ZZqq++',
103: 1:      'question': '!Zq+',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
103: 1:      'question': 'g%;U*!a/[pZ4V3/&',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
103: 1:      'question': '7f5nF=:b8eo&+7',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': '**22SSNNmm##LLoo&&YY',
103: 1:      'question': '*2SNm#Lo&Y',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': '33ZZVVmm',
103: 1:      'question': '3ZVm',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
103: 1:      'question': ']C06*Ec$62o!7][/9',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
103: 1:      'question': '^q%]VoKhh9j5-',
103: 1:      'valid': true
103: 1:    },
103: 1:    {
103: 1:      'answer': '$$22EEZZGGQQ',
103: 1:      'question': '$2EZGQ',
103: 1:      'valid': true
103: 1:    }
103: 1:  ],
103: 1:  'info': [
103: 1:    '✅f(String) = SSttrriinngg',
103: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
103: 1:    '✅f(1234!_ ) = 11223344!!__  ',
103: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
103: 1:    '✅f((-_-)) = ((--__--))',
103: 1:    '✅f(123456) = 112233445566',
103: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
103: 1:    '✅f(bruh) = bbrruuhh',
103: 1:    '✅f(illuminati) = iilllluummiinnaattii',
103: 1:    '✅f(Adidas) = AAddiiddaass',
103: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
103: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
103: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
103: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
103: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
103: 1:    '✅f(1337) = 11333377',
103: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
103: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
103: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
103: 1:    '✅f(!Zq+) = !!ZZqq++',
103: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
103: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
103: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
103: 1:    '✅f(3ZVm) = 33ZZVVmm',
103: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
103: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
103: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
103: 1:    '❌f(`U9@h) = ??? != ``UU99@@hh'
103: 1:  ],
103: 1:  'level': 3,
103: 1:  'nextQuestion': '`U9@h',
103: 1:  'questions': [
103: 1:    'String',
103: 1:    'Hello World',
103: 1:    '1234!_ ',
103: 1:    '____ _ _ __ ___ _ ____ ',
103: 1:    '(-_-)',
103: 1:    '123456',
103: 1:    'Scrub Lords',
103: 1:    'bruh',
103: 1:    'illuminati',
103: 1:    'Adidas',
103: 1:    '!#%G#DGY^RC',
103: 1:    'Donald Duck',
103: 1:    'Kanye 2020',
103: 1:    'Bernie Sanders is Bae',
103: 1:    'Peanut Butter',
103: 1:    '1337',
103: 1:    'h*o@D7an& a',
103: 1:    'Y!S47Y @',
103: 1:    '.-&dFI8',
103: 1:    '!Zq+',
103: 1:    'g%;U*!a/[pZ4V3/&',
103: 1:    '7f5nF=:b8eo&+7',
103: 1:    '*2SNm#Lo&Y',
103: 1:    '3ZVm',
103: 1:    ']C06*Ec$62o!7][/9',
103: 1:    '^q%]VoKhh9j5-',
103: 1:    '$2EZGQ',
103: 1:    '`U9@h'
103: 1:  ]
103: 1:}
103: 1:Scores: 1608
103: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh']')
103: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
104: 1:BoardData {
104: 1:  'description': [
104: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
104: 1:    'Write a javascript method.',
104: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
104: 1:    'Use regular expressions to solve this problem.'
104: 1:  ],
104: 1:  'expectedAnswer': 'kk^^FF  [[',
104: 1:  'history': [
104: 1:    {
104: 1:      'answer': 'SSttrriinngg',
104: 1:      'question': 'String',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': 'HHeelllloo  WWoorrlldd',
104: 1:      'question': 'Hello World',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': '11223344!!__  ',
104: 1:      'question': '1234!_ ',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
104: 1:      'question': '____ _ _ __ ___ _ ____ ',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': '((--__--))',
104: 1:      'question': '(-_-)',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': '112233445566',
104: 1:      'question': '123456',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': 'SSccrruubb  LLoorrddss',
104: 1:      'question': 'Scrub Lords',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': 'bbrruuhh',
104: 1:      'question': 'bruh',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': 'iilllluummiinnaattii',
104: 1:      'question': 'illuminati',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': 'AAddiiddaass',
104: 1:      'question': 'Adidas',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
104: 1:      'question': '!#%G#DGY^RC',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': 'DDoonnaalldd  DDuucckk',
104: 1:      'question': 'Donald Duck',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': 'KKaannyyee  22002200',
104: 1:      'question': 'Kanye 2020',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
104: 1:      'question': 'Bernie Sanders is Bae',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
104: 1:      'question': 'Peanut Butter',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': '11333377',
104: 1:      'question': '1337',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
104: 1:      'question': 'h*o@D7an& a',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': 'YY!!SS4477YY  @@',
104: 1:      'question': 'Y!S47Y @',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': '..--&&ddFFII88',
104: 1:      'question': '.-&dFI8',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': '!!ZZqq++',
104: 1:      'question': '!Zq+',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
104: 1:      'question': 'g%;U*!a/[pZ4V3/&',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
104: 1:      'question': '7f5nF=:b8eo&+7',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': '**22SSNNmm##LLoo&&YY',
104: 1:      'question': '*2SNm#Lo&Y',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': '33ZZVVmm',
104: 1:      'question': '3ZVm',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
104: 1:      'question': ']C06*Ec$62o!7][/9',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
104: 1:      'question': '^q%]VoKhh9j5-',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': '$$22EEZZGGQQ',
104: 1:      'question': '$2EZGQ',
104: 1:      'valid': true
104: 1:    },
104: 1:    {
104: 1:      'answer': '``UU99@@hh',
104: 1:      'question': '`U9@h',
104: 1:      'valid': true
104: 1:    }
104: 1:  ],
104: 1:  'info': [
104: 1:    '✅f(String) = SSttrriinngg',
104: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
104: 1:    '✅f(1234!_ ) = 11223344!!__  ',
104: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
104: 1:    '✅f((-_-)) = ((--__--))',
104: 1:    '✅f(123456) = 112233445566',
104: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
104: 1:    '✅f(bruh) = bbrruuhh',
104: 1:    '✅f(illuminati) = iilllluummiinnaattii',
104: 1:    '✅f(Adidas) = AAddiiddaass',
104: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
104: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
104: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
104: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
104: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
104: 1:    '✅f(1337) = 11333377',
104: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
104: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
104: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
104: 1:    '✅f(!Zq+) = !!ZZqq++',
104: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
104: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
104: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
104: 1:    '✅f(3ZVm) = 33ZZVVmm',
104: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
104: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
104: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
104: 1:    '✅f(`U9@h) = ``UU99@@hh',
104: 1:    '❌f(k^F [) = ??? != kk^^FF  [['
104: 1:  ],
104: 1:  'level': 3,
104: 1:  'nextQuestion': 'k^F [',
104: 1:  'questions': [
104: 1:    'String',
104: 1:    'Hello World',
104: 1:    '1234!_ ',
104: 1:    '____ _ _ __ ___ _ ____ ',
104: 1:    '(-_-)',
104: 1:    '123456',
104: 1:    'Scrub Lords',
104: 1:    'bruh',
104: 1:    'illuminati',
104: 1:    'Adidas',
104: 1:    '!#%G#DGY^RC',
104: 1:    'Donald Duck',
104: 1:    'Kanye 2020',
104: 1:    'Bernie Sanders is Bae',
104: 1:    'Peanut Butter',
104: 1:    '1337',
104: 1:    'h*o@D7an& a',
104: 1:    'Y!S47Y @',
104: 1:    '.-&dFI8',
104: 1:    '!Zq+',
104: 1:    'g%;U*!a/[pZ4V3/&',
104: 1:    '7f5nF=:b8eo&+7',
104: 1:    '*2SNm#Lo&Y',
104: 1:    '3ZVm',
104: 1:    ']C06*Ec$62o!7][/9',
104: 1:    '^q%]VoKhh9j5-',
104: 1:    '$2EZGQ',
104: 1:    '`U9@h',
104: 1:    'k^F ['
104: 1:  ]
104: 1:}
104: 1:Scores: 1609
104: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[']')
104: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
105: 1:BoardData {
105: 1:  'description': [
105: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
105: 1:    'Write a javascript method.',
105: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
105: 1:    'Use regular expressions to solve this problem.'
105: 1:  ],
105: 1:  'expectedAnswer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
105: 1:  'history': [
105: 1:    {
105: 1:      'answer': 'SSttrriinngg',
105: 1:      'question': 'String',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'HHeelllloo  WWoorrlldd',
105: 1:      'question': 'Hello World',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': '11223344!!__  ',
105: 1:      'question': '1234!_ ',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
105: 1:      'question': '____ _ _ __ ___ _ ____ ',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': '((--__--))',
105: 1:      'question': '(-_-)',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': '112233445566',
105: 1:      'question': '123456',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'SSccrruubb  LLoorrddss',
105: 1:      'question': 'Scrub Lords',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'bbrruuhh',
105: 1:      'question': 'bruh',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'iilllluummiinnaattii',
105: 1:      'question': 'illuminati',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'AAddiiddaass',
105: 1:      'question': 'Adidas',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
105: 1:      'question': '!#%G#DGY^RC',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'DDoonnaalldd  DDuucckk',
105: 1:      'question': 'Donald Duck',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'KKaannyyee  22002200',
105: 1:      'question': 'Kanye 2020',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
105: 1:      'question': 'Bernie Sanders is Bae',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
105: 1:      'question': 'Peanut Butter',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': '11333377',
105: 1:      'question': '1337',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
105: 1:      'question': 'h*o@D7an& a',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'YY!!SS4477YY  @@',
105: 1:      'question': 'Y!S47Y @',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': '..--&&ddFFII88',
105: 1:      'question': '.-&dFI8',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': '!!ZZqq++',
105: 1:      'question': '!Zq+',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
105: 1:      'question': 'g%;U*!a/[pZ4V3/&',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
105: 1:      'question': '7f5nF=:b8eo&+7',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': '**22SSNNmm##LLoo&&YY',
105: 1:      'question': '*2SNm#Lo&Y',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': '33ZZVVmm',
105: 1:      'question': '3ZVm',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
105: 1:      'question': ']C06*Ec$62o!7][/9',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
105: 1:      'question': '^q%]VoKhh9j5-',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': '$$22EEZZGGQQ',
105: 1:      'question': '$2EZGQ',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': '``UU99@@hh',
105: 1:      'question': '`U9@h',
105: 1:      'valid': true
105: 1:    },
105: 1:    {
105: 1:      'answer': 'kk^^FF  [[',
105: 1:      'question': 'k^F [',
105: 1:      'valid': true
105: 1:    }
105: 1:  ],
105: 1:  'info': [
105: 1:    '✅f(String) = SSttrriinngg',
105: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
105: 1:    '✅f(1234!_ ) = 11223344!!__  ',
105: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
105: 1:    '✅f((-_-)) = ((--__--))',
105: 1:    '✅f(123456) = 112233445566',
105: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
105: 1:    '✅f(bruh) = bbrruuhh',
105: 1:    '✅f(illuminati) = iilllluummiinnaattii',
105: 1:    '✅f(Adidas) = AAddiiddaass',
105: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
105: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
105: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
105: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
105: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
105: 1:    '✅f(1337) = 11333377',
105: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
105: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
105: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
105: 1:    '✅f(!Zq+) = !!ZZqq++',
105: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
105: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
105: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
105: 1:    '✅f(3ZVm) = 33ZZVVmm',
105: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
105: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
105: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
105: 1:    '✅f(`U9@h) = ``UU99@@hh',
105: 1:    '✅f(k^F [) = kk^^FF  [[',
105: 1:    '❌f(@Y(-SAZa<S2OS**i) = ??? != @@YY((--SSAAZZaa<<SS22OOSS****ii'
105: 1:  ],
105: 1:  'level': 3,
105: 1:  'nextQuestion': '@Y(-SAZa<S2OS**i',
105: 1:  'questions': [
105: 1:    'String',
105: 1:    'Hello World',
105: 1:    '1234!_ ',
105: 1:    '____ _ _ __ ___ _ ____ ',
105: 1:    '(-_-)',
105: 1:    '123456',
105: 1:    'Scrub Lords',
105: 1:    'bruh',
105: 1:    'illuminati',
105: 1:    'Adidas',
105: 1:    '!#%G#DGY^RC',
105: 1:    'Donald Duck',
105: 1:    'Kanye 2020',
105: 1:    'Bernie Sanders is Bae',
105: 1:    'Peanut Butter',
105: 1:    '1337',
105: 1:    'h*o@D7an& a',
105: 1:    'Y!S47Y @',
105: 1:    '.-&dFI8',
105: 1:    '!Zq+',
105: 1:    'g%;U*!a/[pZ4V3/&',
105: 1:    '7f5nF=:b8eo&+7',
105: 1:    '*2SNm#Lo&Y',
105: 1:    '3ZVm',
105: 1:    ']C06*Ec$62o!7][/9',
105: 1:    '^q%]VoKhh9j5-',
105: 1:    '$2EZGQ',
105: 1:    '`U9@h',
105: 1:    'k^F [',
105: 1:    '@Y(-SAZa<S2OS**i'
105: 1:  ]
105: 1:}
105: 1:Scores: 1610
105: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii']')
105: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
106: 1:BoardData {
106: 1:  'description': [
106: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
106: 1:    'Write a javascript method.',
106: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
106: 1:    'Use regular expressions to solve this problem.'
106: 1:  ],
106: 1:  'expectedAnswer': 'hh**??RRWW__ii++<<',
106: 1:  'history': [
106: 1:    {
106: 1:      'answer': 'SSttrriinngg',
106: 1:      'question': 'String',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'HHeelllloo  WWoorrlldd',
106: 1:      'question': 'Hello World',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '11223344!!__  ',
106: 1:      'question': '1234!_ ',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
106: 1:      'question': '____ _ _ __ ___ _ ____ ',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '((--__--))',
106: 1:      'question': '(-_-)',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '112233445566',
106: 1:      'question': '123456',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'SSccrruubb  LLoorrddss',
106: 1:      'question': 'Scrub Lords',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'bbrruuhh',
106: 1:      'question': 'bruh',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'iilllluummiinnaattii',
106: 1:      'question': 'illuminati',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'AAddiiddaass',
106: 1:      'question': 'Adidas',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
106: 1:      'question': '!#%G#DGY^RC',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'DDoonnaalldd  DDuucckk',
106: 1:      'question': 'Donald Duck',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'KKaannyyee  22002200',
106: 1:      'question': 'Kanye 2020',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
106: 1:      'question': 'Bernie Sanders is Bae',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
106: 1:      'question': 'Peanut Butter',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '11333377',
106: 1:      'question': '1337',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
106: 1:      'question': 'h*o@D7an& a',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'YY!!SS4477YY  @@',
106: 1:      'question': 'Y!S47Y @',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '..--&&ddFFII88',
106: 1:      'question': '.-&dFI8',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '!!ZZqq++',
106: 1:      'question': '!Zq+',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
106: 1:      'question': 'g%;U*!a/[pZ4V3/&',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
106: 1:      'question': '7f5nF=:b8eo&+7',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '**22SSNNmm##LLoo&&YY',
106: 1:      'question': '*2SNm#Lo&Y',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '33ZZVVmm',
106: 1:      'question': '3ZVm',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
106: 1:      'question': ']C06*Ec$62o!7][/9',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
106: 1:      'question': '^q%]VoKhh9j5-',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '$$22EEZZGGQQ',
106: 1:      'question': '$2EZGQ',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '``UU99@@hh',
106: 1:      'question': '`U9@h',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': 'kk^^FF  [[',
106: 1:      'question': 'k^F [',
106: 1:      'valid': true
106: 1:    },
106: 1:    {
106: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
106: 1:      'question': '@Y(-SAZa<S2OS**i',
106: 1:      'valid': true
106: 1:    }
106: 1:  ],
106: 1:  'info': [
106: 1:    '✅f(String) = SSttrriinngg',
106: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
106: 1:    '✅f(1234!_ ) = 11223344!!__  ',
106: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
106: 1:    '✅f((-_-)) = ((--__--))',
106: 1:    '✅f(123456) = 112233445566',
106: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
106: 1:    '✅f(bruh) = bbrruuhh',
106: 1:    '✅f(illuminati) = iilllluummiinnaattii',
106: 1:    '✅f(Adidas) = AAddiiddaass',
106: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
106: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
106: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
106: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
106: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
106: 1:    '✅f(1337) = 11333377',
106: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
106: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
106: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
106: 1:    '✅f(!Zq+) = !!ZZqq++',
106: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
106: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
106: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
106: 1:    '✅f(3ZVm) = 33ZZVVmm',
106: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
106: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
106: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
106: 1:    '✅f(`U9@h) = ``UU99@@hh',
106: 1:    '✅f(k^F [) = kk^^FF  [[',
106: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
106: 1:    '❌f(h*?RW_i+<) = ??? != hh**??RRWW__ii++<<'
106: 1:  ],
106: 1:  'level': 3,
106: 1:  'nextQuestion': 'h*?RW_i+<',
106: 1:  'questions': [
106: 1:    'String',
106: 1:    'Hello World',
106: 1:    '1234!_ ',
106: 1:    '____ _ _ __ ___ _ ____ ',
106: 1:    '(-_-)',
106: 1:    '123456',
106: 1:    'Scrub Lords',
106: 1:    'bruh',
106: 1:    'illuminati',
106: 1:    'Adidas',
106: 1:    '!#%G#DGY^RC',
106: 1:    'Donald Duck',
106: 1:    'Kanye 2020',
106: 1:    'Bernie Sanders is Bae',
106: 1:    'Peanut Butter',
106: 1:    '1337',
106: 1:    'h*o@D7an& a',
106: 1:    'Y!S47Y @',
106: 1:    '.-&dFI8',
106: 1:    '!Zq+',
106: 1:    'g%;U*!a/[pZ4V3/&',
106: 1:    '7f5nF=:b8eo&+7',
106: 1:    '*2SNm#Lo&Y',
106: 1:    '3ZVm',
106: 1:    ']C06*Ec$62o!7][/9',
106: 1:    '^q%]VoKhh9j5-',
106: 1:    '$2EZGQ',
106: 1:    '`U9@h',
106: 1:    'k^F [',
106: 1:    '@Y(-SAZa<S2OS**i',
106: 1:    'h*?RW_i+<'
106: 1:  ]
106: 1:}
106: 1:Scores: 1611
106: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii', 'hh**??RRWW__ii++<<']')
106: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
107: 1:BoardData {
107: 1:  'description': [
107: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
107: 1:    'Write a javascript method.',
107: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
107: 1:    'Use regular expressions to solve this problem.'
107: 1:  ],
107: 1:  'expectedAnswer': 'FFAACCBBTT++33YYCC99mm33++aa00QQ',
107: 1:  'history': [
107: 1:    {
107: 1:      'answer': 'SSttrriinngg',
107: 1:      'question': 'String',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'HHeelllloo  WWoorrlldd',
107: 1:      'question': 'Hello World',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '11223344!!__  ',
107: 1:      'question': '1234!_ ',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
107: 1:      'question': '____ _ _ __ ___ _ ____ ',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '((--__--))',
107: 1:      'question': '(-_-)',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '112233445566',
107: 1:      'question': '123456',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'SSccrruubb  LLoorrddss',
107: 1:      'question': 'Scrub Lords',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'bbrruuhh',
107: 1:      'question': 'bruh',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'iilllluummiinnaattii',
107: 1:      'question': 'illuminati',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'AAddiiddaass',
107: 1:      'question': 'Adidas',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
107: 1:      'question': '!#%G#DGY^RC',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'DDoonnaalldd  DDuucckk',
107: 1:      'question': 'Donald Duck',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'KKaannyyee  22002200',
107: 1:      'question': 'Kanye 2020',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
107: 1:      'question': 'Bernie Sanders is Bae',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
107: 1:      'question': 'Peanut Butter',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '11333377',
107: 1:      'question': '1337',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
107: 1:      'question': 'h*o@D7an& a',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'YY!!SS4477YY  @@',
107: 1:      'question': 'Y!S47Y @',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '..--&&ddFFII88',
107: 1:      'question': '.-&dFI8',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '!!ZZqq++',
107: 1:      'question': '!Zq+',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
107: 1:      'question': 'g%;U*!a/[pZ4V3/&',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
107: 1:      'question': '7f5nF=:b8eo&+7',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '**22SSNNmm##LLoo&&YY',
107: 1:      'question': '*2SNm#Lo&Y',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '33ZZVVmm',
107: 1:      'question': '3ZVm',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
107: 1:      'question': ']C06*Ec$62o!7][/9',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
107: 1:      'question': '^q%]VoKhh9j5-',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '$$22EEZZGGQQ',
107: 1:      'question': '$2EZGQ',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '``UU99@@hh',
107: 1:      'question': '`U9@h',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'kk^^FF  [[',
107: 1:      'question': 'k^F [',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
107: 1:      'question': '@Y(-SAZa<S2OS**i',
107: 1:      'valid': true
107: 1:    },
107: 1:    {
107: 1:      'answer': 'hh**??RRWW__ii++<<',
107: 1:      'question': 'h*?RW_i+<',
107: 1:      'valid': true
107: 1:    }
107: 1:  ],
107: 1:  'info': [
107: 1:    '✅f(String) = SSttrriinngg',
107: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
107: 1:    '✅f(1234!_ ) = 11223344!!__  ',
107: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
107: 1:    '✅f((-_-)) = ((--__--))',
107: 1:    '✅f(123456) = 112233445566',
107: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
107: 1:    '✅f(bruh) = bbrruuhh',
107: 1:    '✅f(illuminati) = iilllluummiinnaattii',
107: 1:    '✅f(Adidas) = AAddiiddaass',
107: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
107: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
107: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
107: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
107: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
107: 1:    '✅f(1337) = 11333377',
107: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
107: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
107: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
107: 1:    '✅f(!Zq+) = !!ZZqq++',
107: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
107: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
107: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
107: 1:    '✅f(3ZVm) = 33ZZVVmm',
107: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
107: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
107: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
107: 1:    '✅f(`U9@h) = ``UU99@@hh',
107: 1:    '✅f(k^F [) = kk^^FF  [[',
107: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
107: 1:    '✅f(h*?RW_i+<) = hh**??RRWW__ii++<<',
107: 1:    '❌f(FACBT+3YC9m3+a0Q) = ??? != FFAACCBBTT++33YYCC99mm33++aa00QQ'
107: 1:  ],
107: 1:  'level': 3,
107: 1:  'nextQuestion': 'FACBT+3YC9m3+a0Q',
107: 1:  'questions': [
107: 1:    'String',
107: 1:    'Hello World',
107: 1:    '1234!_ ',
107: 1:    '____ _ _ __ ___ _ ____ ',
107: 1:    '(-_-)',
107: 1:    '123456',
107: 1:    'Scrub Lords',
107: 1:    'bruh',
107: 1:    'illuminati',
107: 1:    'Adidas',
107: 1:    '!#%G#DGY^RC',
107: 1:    'Donald Duck',
107: 1:    'Kanye 2020',
107: 1:    'Bernie Sanders is Bae',
107: 1:    'Peanut Butter',
107: 1:    '1337',
107: 1:    'h*o@D7an& a',
107: 1:    'Y!S47Y @',
107: 1:    '.-&dFI8',
107: 1:    '!Zq+',
107: 1:    'g%;U*!a/[pZ4V3/&',
107: 1:    '7f5nF=:b8eo&+7',
107: 1:    '*2SNm#Lo&Y',
107: 1:    '3ZVm',
107: 1:    ']C06*Ec$62o!7][/9',
107: 1:    '^q%]VoKhh9j5-',
107: 1:    '$2EZGQ',
107: 1:    '`U9@h',
107: 1:    'k^F [',
107: 1:    '@Y(-SAZa<S2OS**i',
107: 1:    'h*?RW_i+<',
107: 1:    'FACBT+3YC9m3+a0Q'
107: 1:  ]
107: 1:}
107: 1:Scores: 1612
107: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii', 'hh**??RRWW__ii++<<', 'FFAACCBBTT++33YYCC99mm33++aa00QQ']')
107: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
108: 1:BoardData {
108: 1:  'description': [
108: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
108: 1:    'Write a javascript method.',
108: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
108: 1:    'Use regular expressions to solve this problem.'
108: 1:  ],
108: 1:  'expectedAnswer': 'KKSS))::jjYY??++SS99',
108: 1:  'history': [
108: 1:    {
108: 1:      'answer': 'SSttrriinngg',
108: 1:      'question': 'String',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'HHeelllloo  WWoorrlldd',
108: 1:      'question': 'Hello World',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '11223344!!__  ',
108: 1:      'question': '1234!_ ',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
108: 1:      'question': '____ _ _ __ ___ _ ____ ',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '((--__--))',
108: 1:      'question': '(-_-)',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '112233445566',
108: 1:      'question': '123456',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'SSccrruubb  LLoorrddss',
108: 1:      'question': 'Scrub Lords',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'bbrruuhh',
108: 1:      'question': 'bruh',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'iilllluummiinnaattii',
108: 1:      'question': 'illuminati',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'AAddiiddaass',
108: 1:      'question': 'Adidas',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
108: 1:      'question': '!#%G#DGY^RC',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'DDoonnaalldd  DDuucckk',
108: 1:      'question': 'Donald Duck',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'KKaannyyee  22002200',
108: 1:      'question': 'Kanye 2020',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
108: 1:      'question': 'Bernie Sanders is Bae',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
108: 1:      'question': 'Peanut Butter',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '11333377',
108: 1:      'question': '1337',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
108: 1:      'question': 'h*o@D7an& a',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'YY!!SS4477YY  @@',
108: 1:      'question': 'Y!S47Y @',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '..--&&ddFFII88',
108: 1:      'question': '.-&dFI8',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '!!ZZqq++',
108: 1:      'question': '!Zq+',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
108: 1:      'question': 'g%;U*!a/[pZ4V3/&',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
108: 1:      'question': '7f5nF=:b8eo&+7',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '**22SSNNmm##LLoo&&YY',
108: 1:      'question': '*2SNm#Lo&Y',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '33ZZVVmm',
108: 1:      'question': '3ZVm',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
108: 1:      'question': ']C06*Ec$62o!7][/9',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
108: 1:      'question': '^q%]VoKhh9j5-',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '$$22EEZZGGQQ',
108: 1:      'question': '$2EZGQ',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '``UU99@@hh',
108: 1:      'question': '`U9@h',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'kk^^FF  [[',
108: 1:      'question': 'k^F [',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
108: 1:      'question': '@Y(-SAZa<S2OS**i',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'hh**??RRWW__ii++<<',
108: 1:      'question': 'h*?RW_i+<',
108: 1:      'valid': true
108: 1:    },
108: 1:    {
108: 1:      'answer': 'FFAACCBBTT++33YYCC99mm33++aa00QQ',
108: 1:      'question': 'FACBT+3YC9m3+a0Q',
108: 1:      'valid': true
108: 1:    }
108: 1:  ],
108: 1:  'info': [
108: 1:    '✅f(String) = SSttrriinngg',
108: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
108: 1:    '✅f(1234!_ ) = 11223344!!__  ',
108: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
108: 1:    '✅f((-_-)) = ((--__--))',
108: 1:    '✅f(123456) = 112233445566',
108: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
108: 1:    '✅f(bruh) = bbrruuhh',
108: 1:    '✅f(illuminati) = iilllluummiinnaattii',
108: 1:    '✅f(Adidas) = AAddiiddaass',
108: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
108: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
108: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
108: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
108: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
108: 1:    '✅f(1337) = 11333377',
108: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
108: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
108: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
108: 1:    '✅f(!Zq+) = !!ZZqq++',
108: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
108: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
108: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
108: 1:    '✅f(3ZVm) = 33ZZVVmm',
108: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
108: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
108: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
108: 1:    '✅f(`U9@h) = ``UU99@@hh',
108: 1:    '✅f(k^F [) = kk^^FF  [[',
108: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
108: 1:    '✅f(h*?RW_i+<) = hh**??RRWW__ii++<<',
108: 1:    '✅f(FACBT+3YC9m3+a0Q) = FFAACCBBTT++33YYCC99mm33++aa00QQ',
108: 1:    '❌f(KS):jY?+S9) = ??? != KKSS))::jjYY??++SS99'
108: 1:  ],
108: 1:  'level': 3,
108: 1:  'nextQuestion': 'KS):jY?+S9',
108: 1:  'questions': [
108: 1:    'String',
108: 1:    'Hello World',
108: 1:    '1234!_ ',
108: 1:    '____ _ _ __ ___ _ ____ ',
108: 1:    '(-_-)',
108: 1:    '123456',
108: 1:    'Scrub Lords',
108: 1:    'bruh',
108: 1:    'illuminati',
108: 1:    'Adidas',
108: 1:    '!#%G#DGY^RC',
108: 1:    'Donald Duck',
108: 1:    'Kanye 2020',
108: 1:    'Bernie Sanders is Bae',
108: 1:    'Peanut Butter',
108: 1:    '1337',
108: 1:    'h*o@D7an& a',
108: 1:    'Y!S47Y @',
108: 1:    '.-&dFI8',
108: 1:    '!Zq+',
108: 1:    'g%;U*!a/[pZ4V3/&',
108: 1:    '7f5nF=:b8eo&+7',
108: 1:    '*2SNm#Lo&Y',
108: 1:    '3ZVm',
108: 1:    ']C06*Ec$62o!7][/9',
108: 1:    '^q%]VoKhh9j5-',
108: 1:    '$2EZGQ',
108: 1:    '`U9@h',
108: 1:    'k^F [',
108: 1:    '@Y(-SAZa<S2OS**i',
108: 1:    'h*?RW_i+<',
108: 1:    'FACBT+3YC9m3+a0Q',
108: 1:    'KS):jY?+S9'
108: 1:  ]
108: 1:}
108: 1:Scores: 1613
108: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii', 'hh**??RRWW__ii++<<', 'FFAACCBBTT++33YYCC99mm33++aa00QQ', 'KKSS))::jjYY??++SS99']')
108: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
109: 1:BoardData {
109: 1:  'description': [
109: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
109: 1:    'Write a javascript method.',
109: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
109: 1:    'Use regular expressions to solve this problem.'
109: 1:  ],
109: 1:  'expectedAnswer': 'JJBBWWhh',
109: 1:  'history': [
109: 1:    {
109: 1:      'answer': 'SSttrriinngg',
109: 1:      'question': 'String',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'HHeelllloo  WWoorrlldd',
109: 1:      'question': 'Hello World',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '11223344!!__  ',
109: 1:      'question': '1234!_ ',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
109: 1:      'question': '____ _ _ __ ___ _ ____ ',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '((--__--))',
109: 1:      'question': '(-_-)',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '112233445566',
109: 1:      'question': '123456',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'SSccrruubb  LLoorrddss',
109: 1:      'question': 'Scrub Lords',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'bbrruuhh',
109: 1:      'question': 'bruh',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'iilllluummiinnaattii',
109: 1:      'question': 'illuminati',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'AAddiiddaass',
109: 1:      'question': 'Adidas',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
109: 1:      'question': '!#%G#DGY^RC',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'DDoonnaalldd  DDuucckk',
109: 1:      'question': 'Donald Duck',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'KKaannyyee  22002200',
109: 1:      'question': 'Kanye 2020',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
109: 1:      'question': 'Bernie Sanders is Bae',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
109: 1:      'question': 'Peanut Butter',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '11333377',
109: 1:      'question': '1337',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
109: 1:      'question': 'h*o@D7an& a',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'YY!!SS4477YY  @@',
109: 1:      'question': 'Y!S47Y @',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '..--&&ddFFII88',
109: 1:      'question': '.-&dFI8',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '!!ZZqq++',
109: 1:      'question': '!Zq+',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
109: 1:      'question': 'g%;U*!a/[pZ4V3/&',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
109: 1:      'question': '7f5nF=:b8eo&+7',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '**22SSNNmm##LLoo&&YY',
109: 1:      'question': '*2SNm#Lo&Y',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '33ZZVVmm',
109: 1:      'question': '3ZVm',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
109: 1:      'question': ']C06*Ec$62o!7][/9',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
109: 1:      'question': '^q%]VoKhh9j5-',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '$$22EEZZGGQQ',
109: 1:      'question': '$2EZGQ',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '``UU99@@hh',
109: 1:      'question': '`U9@h',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'kk^^FF  [[',
109: 1:      'question': 'k^F [',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
109: 1:      'question': '@Y(-SAZa<S2OS**i',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'hh**??RRWW__ii++<<',
109: 1:      'question': 'h*?RW_i+<',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'FFAACCBBTT++33YYCC99mm33++aa00QQ',
109: 1:      'question': 'FACBT+3YC9m3+a0Q',
109: 1:      'valid': true
109: 1:    },
109: 1:    {
109: 1:      'answer': 'KKSS))::jjYY??++SS99',
109: 1:      'question': 'KS):jY?+S9',
109: 1:      'valid': true
109: 1:    }
109: 1:  ],
109: 1:  'info': [
109: 1:    '✅f(String) = SSttrriinngg',
109: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
109: 1:    '✅f(1234!_ ) = 11223344!!__  ',
109: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
109: 1:    '✅f((-_-)) = ((--__--))',
109: 1:    '✅f(123456) = 112233445566',
109: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
109: 1:    '✅f(bruh) = bbrruuhh',
109: 1:    '✅f(illuminati) = iilllluummiinnaattii',
109: 1:    '✅f(Adidas) = AAddiiddaass',
109: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
109: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
109: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
109: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
109: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
109: 1:    '✅f(1337) = 11333377',
109: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
109: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
109: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
109: 1:    '✅f(!Zq+) = !!ZZqq++',
109: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
109: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
109: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
109: 1:    '✅f(3ZVm) = 33ZZVVmm',
109: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
109: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
109: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
109: 1:    '✅f(`U9@h) = ``UU99@@hh',
109: 1:    '✅f(k^F [) = kk^^FF  [[',
109: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
109: 1:    '✅f(h*?RW_i+<) = hh**??RRWW__ii++<<',
109: 1:    '✅f(FACBT+3YC9m3+a0Q) = FFAACCBBTT++33YYCC99mm33++aa00QQ',
109: 1:    '✅f(KS):jY?+S9) = KKSS))::jjYY??++SS99',
109: 1:    '❌f(JBWh) = ??? != JJBBWWhh'
109: 1:  ],
109: 1:  'level': 3,
109: 1:  'nextQuestion': 'JBWh',
109: 1:  'questions': [
109: 1:    'String',
109: 1:    'Hello World',
109: 1:    '1234!_ ',
109: 1:    '____ _ _ __ ___ _ ____ ',
109: 1:    '(-_-)',
109: 1:    '123456',
109: 1:    'Scrub Lords',
109: 1:    'bruh',
109: 1:    'illuminati',
109: 1:    'Adidas',
109: 1:    '!#%G#DGY^RC',
109: 1:    'Donald Duck',
109: 1:    'Kanye 2020',
109: 1:    'Bernie Sanders is Bae',
109: 1:    'Peanut Butter',
109: 1:    '1337',
109: 1:    'h*o@D7an& a',
109: 1:    'Y!S47Y @',
109: 1:    '.-&dFI8',
109: 1:    '!Zq+',
109: 1:    'g%;U*!a/[pZ4V3/&',
109: 1:    '7f5nF=:b8eo&+7',
109: 1:    '*2SNm#Lo&Y',
109: 1:    '3ZVm',
109: 1:    ']C06*Ec$62o!7][/9',
109: 1:    '^q%]VoKhh9j5-',
109: 1:    '$2EZGQ',
109: 1:    '`U9@h',
109: 1:    'k^F [',
109: 1:    '@Y(-SAZa<S2OS**i',
109: 1:    'h*?RW_i+<',
109: 1:    'FACBT+3YC9m3+a0Q',
109: 1:    'KS):jY?+S9',
109: 1:    'JBWh'
109: 1:  ]
109: 1:}
109: 1:Scores: 1614
109: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii', 'hh**??RRWW__ii++<<', 'FFAACCBBTT++33YYCC99mm33++aa00QQ', 'KKSS))::jjYY??++SS99', 'JJBBWWhh']')
109: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
110: 1:BoardData {
110: 1:  'description': [
110: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
110: 1:    'Write a javascript method.',
110: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
110: 1:    'Use regular expressions to solve this problem.'
110: 1:  ],
110: 1:  'expectedAnswer': 'OONNmm33ll))))HH@@GGff((',
110: 1:  'history': [
110: 1:    {
110: 1:      'answer': 'SSttrriinngg',
110: 1:      'question': 'String',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'HHeelllloo  WWoorrlldd',
110: 1:      'question': 'Hello World',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '11223344!!__  ',
110: 1:      'question': '1234!_ ',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
110: 1:      'question': '____ _ _ __ ___ _ ____ ',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '((--__--))',
110: 1:      'question': '(-_-)',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '112233445566',
110: 1:      'question': '123456',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'SSccrruubb  LLoorrddss',
110: 1:      'question': 'Scrub Lords',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'bbrruuhh',
110: 1:      'question': 'bruh',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'iilllluummiinnaattii',
110: 1:      'question': 'illuminati',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'AAddiiddaass',
110: 1:      'question': 'Adidas',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
110: 1:      'question': '!#%G#DGY^RC',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'DDoonnaalldd  DDuucckk',
110: 1:      'question': 'Donald Duck',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'KKaannyyee  22002200',
110: 1:      'question': 'Kanye 2020',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
110: 1:      'question': 'Bernie Sanders is Bae',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
110: 1:      'question': 'Peanut Butter',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '11333377',
110: 1:      'question': '1337',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
110: 1:      'question': 'h*o@D7an& a',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'YY!!SS4477YY  @@',
110: 1:      'question': 'Y!S47Y @',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '..--&&ddFFII88',
110: 1:      'question': '.-&dFI8',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '!!ZZqq++',
110: 1:      'question': '!Zq+',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
110: 1:      'question': 'g%;U*!a/[pZ4V3/&',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
110: 1:      'question': '7f5nF=:b8eo&+7',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '**22SSNNmm##LLoo&&YY',
110: 1:      'question': '*2SNm#Lo&Y',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '33ZZVVmm',
110: 1:      'question': '3ZVm',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
110: 1:      'question': ']C06*Ec$62o!7][/9',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
110: 1:      'question': '^q%]VoKhh9j5-',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '$$22EEZZGGQQ',
110: 1:      'question': '$2EZGQ',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '``UU99@@hh',
110: 1:      'question': '`U9@h',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'kk^^FF  [[',
110: 1:      'question': 'k^F [',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
110: 1:      'question': '@Y(-SAZa<S2OS**i',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'hh**??RRWW__ii++<<',
110: 1:      'question': 'h*?RW_i+<',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'FFAACCBBTT++33YYCC99mm33++aa00QQ',
110: 1:      'question': 'FACBT+3YC9m3+a0Q',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'KKSS))::jjYY??++SS99',
110: 1:      'question': 'KS):jY?+S9',
110: 1:      'valid': true
110: 1:    },
110: 1:    {
110: 1:      'answer': 'JJBBWWhh',
110: 1:      'question': 'JBWh',
110: 1:      'valid': true
110: 1:    }
110: 1:  ],
110: 1:  'info': [
110: 1:    '✅f(String) = SSttrriinngg',
110: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
110: 1:    '✅f(1234!_ ) = 11223344!!__  ',
110: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
110: 1:    '✅f((-_-)) = ((--__--))',
110: 1:    '✅f(123456) = 112233445566',
110: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
110: 1:    '✅f(bruh) = bbrruuhh',
110: 1:    '✅f(illuminati) = iilllluummiinnaattii',
110: 1:    '✅f(Adidas) = AAddiiddaass',
110: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
110: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
110: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
110: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
110: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
110: 1:    '✅f(1337) = 11333377',
110: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
110: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
110: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
110: 1:    '✅f(!Zq+) = !!ZZqq++',
110: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
110: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
110: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
110: 1:    '✅f(3ZVm) = 33ZZVVmm',
110: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
110: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
110: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
110: 1:    '✅f(`U9@h) = ``UU99@@hh',
110: 1:    '✅f(k^F [) = kk^^FF  [[',
110: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
110: 1:    '✅f(h*?RW_i+<) = hh**??RRWW__ii++<<',
110: 1:    '✅f(FACBT+3YC9m3+a0Q) = FFAACCBBTT++33YYCC99mm33++aa00QQ',
110: 1:    '✅f(KS):jY?+S9) = KKSS))::jjYY??++SS99',
110: 1:    '✅f(JBWh) = JJBBWWhh',
110: 1:    '❌f(ONm3l))H@Gf() = ??? != OONNmm33ll))))HH@@GGff(('
110: 1:  ],
110: 1:  'level': 3,
110: 1:  'nextQuestion': 'ONm3l))H@Gf(',
110: 1:  'questions': [
110: 1:    'String',
110: 1:    'Hello World',
110: 1:    '1234!_ ',
110: 1:    '____ _ _ __ ___ _ ____ ',
110: 1:    '(-_-)',
110: 1:    '123456',
110: 1:    'Scrub Lords',
110: 1:    'bruh',
110: 1:    'illuminati',
110: 1:    'Adidas',
110: 1:    '!#%G#DGY^RC',
110: 1:    'Donald Duck',
110: 1:    'Kanye 2020',
110: 1:    'Bernie Sanders is Bae',
110: 1:    'Peanut Butter',
110: 1:    '1337',
110: 1:    'h*o@D7an& a',
110: 1:    'Y!S47Y @',
110: 1:    '.-&dFI8',
110: 1:    '!Zq+',
110: 1:    'g%;U*!a/[pZ4V3/&',
110: 1:    '7f5nF=:b8eo&+7',
110: 1:    '*2SNm#Lo&Y',
110: 1:    '3ZVm',
110: 1:    ']C06*Ec$62o!7][/9',
110: 1:    '^q%]VoKhh9j5-',
110: 1:    '$2EZGQ',
110: 1:    '`U9@h',
110: 1:    'k^F [',
110: 1:    '@Y(-SAZa<S2OS**i',
110: 1:    'h*?RW_i+<',
110: 1:    'FACBT+3YC9m3+a0Q',
110: 1:    'KS):jY?+S9',
110: 1:    'JBWh',
110: 1:    'ONm3l))H@Gf('
110: 1:  ]
110: 1:}
110: 1:Scores: 1615
110: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii', 'hh**??RRWW__ii++<<', 'FFAACCBBTT++33YYCC99mm33++aa00QQ', 'KKSS))::jjYY??++SS99', 'JJBBWWhh', 'OONNmm33ll))))HH@@GGff((']')
110: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
111: 1:BoardData {
111: 1:  'description': [
111: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
111: 1:    'Write a javascript method.',
111: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
111: 1:    'Use regular expressions to solve this problem.'
111: 1:  ],
111: 1:  'expectedAnswer': 'ffkk66KKgg  77&&',
111: 1:  'history': [
111: 1:    {
111: 1:      'answer': 'SSttrriinngg',
111: 1:      'question': 'String',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'HHeelllloo  WWoorrlldd',
111: 1:      'question': 'Hello World',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '11223344!!__  ',
111: 1:      'question': '1234!_ ',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
111: 1:      'question': '____ _ _ __ ___ _ ____ ',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '((--__--))',
111: 1:      'question': '(-_-)',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '112233445566',
111: 1:      'question': '123456',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'SSccrruubb  LLoorrddss',
111: 1:      'question': 'Scrub Lords',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'bbrruuhh',
111: 1:      'question': 'bruh',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'iilllluummiinnaattii',
111: 1:      'question': 'illuminati',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'AAddiiddaass',
111: 1:      'question': 'Adidas',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
111: 1:      'question': '!#%G#DGY^RC',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'DDoonnaalldd  DDuucckk',
111: 1:      'question': 'Donald Duck',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'KKaannyyee  22002200',
111: 1:      'question': 'Kanye 2020',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
111: 1:      'question': 'Bernie Sanders is Bae',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
111: 1:      'question': 'Peanut Butter',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '11333377',
111: 1:      'question': '1337',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
111: 1:      'question': 'h*o@D7an& a',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'YY!!SS4477YY  @@',
111: 1:      'question': 'Y!S47Y @',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '..--&&ddFFII88',
111: 1:      'question': '.-&dFI8',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '!!ZZqq++',
111: 1:      'question': '!Zq+',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
111: 1:      'question': 'g%;U*!a/[pZ4V3/&',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
111: 1:      'question': '7f5nF=:b8eo&+7',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '**22SSNNmm##LLoo&&YY',
111: 1:      'question': '*2SNm#Lo&Y',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '33ZZVVmm',
111: 1:      'question': '3ZVm',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
111: 1:      'question': ']C06*Ec$62o!7][/9',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
111: 1:      'question': '^q%]VoKhh9j5-',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '$$22EEZZGGQQ',
111: 1:      'question': '$2EZGQ',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '``UU99@@hh',
111: 1:      'question': '`U9@h',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'kk^^FF  [[',
111: 1:      'question': 'k^F [',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
111: 1:      'question': '@Y(-SAZa<S2OS**i',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'hh**??RRWW__ii++<<',
111: 1:      'question': 'h*?RW_i+<',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'FFAACCBBTT++33YYCC99mm33++aa00QQ',
111: 1:      'question': 'FACBT+3YC9m3+a0Q',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'KKSS))::jjYY??++SS99',
111: 1:      'question': 'KS):jY?+S9',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'JJBBWWhh',
111: 1:      'question': 'JBWh',
111: 1:      'valid': true
111: 1:    },
111: 1:    {
111: 1:      'answer': 'OONNmm33ll))))HH@@GGff((',
111: 1:      'question': 'ONm3l))H@Gf(',
111: 1:      'valid': true
111: 1:    }
111: 1:  ],
111: 1:  'info': [
111: 1:    '✅f(String) = SSttrriinngg',
111: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
111: 1:    '✅f(1234!_ ) = 11223344!!__  ',
111: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
111: 1:    '✅f((-_-)) = ((--__--))',
111: 1:    '✅f(123456) = 112233445566',
111: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
111: 1:    '✅f(bruh) = bbrruuhh',
111: 1:    '✅f(illuminati) = iilllluummiinnaattii',
111: 1:    '✅f(Adidas) = AAddiiddaass',
111: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
111: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
111: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
111: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
111: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
111: 1:    '✅f(1337) = 11333377',
111: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
111: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
111: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
111: 1:    '✅f(!Zq+) = !!ZZqq++',
111: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
111: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
111: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
111: 1:    '✅f(3ZVm) = 33ZZVVmm',
111: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
111: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
111: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
111: 1:    '✅f(`U9@h) = ``UU99@@hh',
111: 1:    '✅f(k^F [) = kk^^FF  [[',
111: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
111: 1:    '✅f(h*?RW_i+<) = hh**??RRWW__ii++<<',
111: 1:    '✅f(FACBT+3YC9m3+a0Q) = FFAACCBBTT++33YYCC99mm33++aa00QQ',
111: 1:    '✅f(KS):jY?+S9) = KKSS))::jjYY??++SS99',
111: 1:    '✅f(JBWh) = JJBBWWhh',
111: 1:    '✅f(ONm3l))H@Gf() = OONNmm33ll))))HH@@GGff((',
111: 1:    '❌f(fk6Kg 7&) = ??? != ffkk66KKgg  77&&'
111: 1:  ],
111: 1:  'level': 3,
111: 1:  'nextQuestion': 'fk6Kg 7&',
111: 1:  'questions': [
111: 1:    'String',
111: 1:    'Hello World',
111: 1:    '1234!_ ',
111: 1:    '____ _ _ __ ___ _ ____ ',
111: 1:    '(-_-)',
111: 1:    '123456',
111: 1:    'Scrub Lords',
111: 1:    'bruh',
111: 1:    'illuminati',
111: 1:    'Adidas',
111: 1:    '!#%G#DGY^RC',
111: 1:    'Donald Duck',
111: 1:    'Kanye 2020',
111: 1:    'Bernie Sanders is Bae',
111: 1:    'Peanut Butter',
111: 1:    '1337',
111: 1:    'h*o@D7an& a',
111: 1:    'Y!S47Y @',
111: 1:    '.-&dFI8',
111: 1:    '!Zq+',
111: 1:    'g%;U*!a/[pZ4V3/&',
111: 1:    '7f5nF=:b8eo&+7',
111: 1:    '*2SNm#Lo&Y',
111: 1:    '3ZVm',
111: 1:    ']C06*Ec$62o!7][/9',
111: 1:    '^q%]VoKhh9j5-',
111: 1:    '$2EZGQ',
111: 1:    '`U9@h',
111: 1:    'k^F [',
111: 1:    '@Y(-SAZa<S2OS**i',
111: 1:    'h*?RW_i+<',
111: 1:    'FACBT+3YC9m3+a0Q',
111: 1:    'KS):jY?+S9',
111: 1:    'JBWh',
111: 1:    'ONm3l))H@Gf(',
111: 1:    'fk6Kg 7&'
111: 1:  ]
111: 1:}
111: 1:Scores: 1616
111: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii', 'hh**??RRWW__ii++<<', 'FFAACCBBTT++33YYCC99mm33++aa00QQ', 'KKSS))::jjYY??++SS99', 'JJBBWWhh', 'OONNmm33ll))))HH@@GGff((', 'ffkk66KKgg  77&&']')
111: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
112: 1:BoardData {
112: 1:  'description': [
112: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
112: 1:    'Write a javascript method.',
112: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
112: 1:    'Use regular expressions to solve this problem.'
112: 1:  ],
112: 1:  'expectedAnswer': '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
112: 1:  'history': [
112: 1:    {
112: 1:      'answer': 'SSttrriinngg',
112: 1:      'question': 'String',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'HHeelllloo  WWoorrlldd',
112: 1:      'question': 'Hello World',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '11223344!!__  ',
112: 1:      'question': '1234!_ ',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
112: 1:      'question': '____ _ _ __ ___ _ ____ ',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '((--__--))',
112: 1:      'question': '(-_-)',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '112233445566',
112: 1:      'question': '123456',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'SSccrruubb  LLoorrddss',
112: 1:      'question': 'Scrub Lords',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'bbrruuhh',
112: 1:      'question': 'bruh',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'iilllluummiinnaattii',
112: 1:      'question': 'illuminati',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'AAddiiddaass',
112: 1:      'question': 'Adidas',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
112: 1:      'question': '!#%G#DGY^RC',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'DDoonnaalldd  DDuucckk',
112: 1:      'question': 'Donald Duck',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'KKaannyyee  22002200',
112: 1:      'question': 'Kanye 2020',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
112: 1:      'question': 'Bernie Sanders is Bae',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
112: 1:      'question': 'Peanut Butter',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '11333377',
112: 1:      'question': '1337',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
112: 1:      'question': 'h*o@D7an& a',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'YY!!SS4477YY  @@',
112: 1:      'question': 'Y!S47Y @',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '..--&&ddFFII88',
112: 1:      'question': '.-&dFI8',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '!!ZZqq++',
112: 1:      'question': '!Zq+',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
112: 1:      'question': 'g%;U*!a/[pZ4V3/&',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
112: 1:      'question': '7f5nF=:b8eo&+7',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '**22SSNNmm##LLoo&&YY',
112: 1:      'question': '*2SNm#Lo&Y',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '33ZZVVmm',
112: 1:      'question': '3ZVm',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
112: 1:      'question': ']C06*Ec$62o!7][/9',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
112: 1:      'question': '^q%]VoKhh9j5-',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '$$22EEZZGGQQ',
112: 1:      'question': '$2EZGQ',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '``UU99@@hh',
112: 1:      'question': '`U9@h',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'kk^^FF  [[',
112: 1:      'question': 'k^F [',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
112: 1:      'question': '@Y(-SAZa<S2OS**i',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'hh**??RRWW__ii++<<',
112: 1:      'question': 'h*?RW_i+<',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'FFAACCBBTT++33YYCC99mm33++aa00QQ',
112: 1:      'question': 'FACBT+3YC9m3+a0Q',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'KKSS))::jjYY??++SS99',
112: 1:      'question': 'KS):jY?+S9',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'JJBBWWhh',
112: 1:      'question': 'JBWh',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'OONNmm33ll))))HH@@GGff((',
112: 1:      'question': 'ONm3l))H@Gf(',
112: 1:      'valid': true
112: 1:    },
112: 1:    {
112: 1:      'answer': 'ffkk66KKgg  77&&',
112: 1:      'question': 'fk6Kg 7&',
112: 1:      'valid': true
112: 1:    }
112: 1:  ],
112: 1:  'info': [
112: 1:    '✅f(String) = SSttrriinngg',
112: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
112: 1:    '✅f(1234!_ ) = 11223344!!__  ',
112: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
112: 1:    '✅f((-_-)) = ((--__--))',
112: 1:    '✅f(123456) = 112233445566',
112: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
112: 1:    '✅f(bruh) = bbrruuhh',
112: 1:    '✅f(illuminati) = iilllluummiinnaattii',
112: 1:    '✅f(Adidas) = AAddiiddaass',
112: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
112: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
112: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
112: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
112: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
112: 1:    '✅f(1337) = 11333377',
112: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
112: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
112: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
112: 1:    '✅f(!Zq+) = !!ZZqq++',
112: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
112: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
112: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
112: 1:    '✅f(3ZVm) = 33ZZVVmm',
112: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
112: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
112: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
112: 1:    '✅f(`U9@h) = ``UU99@@hh',
112: 1:    '✅f(k^F [) = kk^^FF  [[',
112: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
112: 1:    '✅f(h*?RW_i+<) = hh**??RRWW__ii++<<',
112: 1:    '✅f(FACBT+3YC9m3+a0Q) = FFAACCBBTT++33YYCC99mm33++aa00QQ',
112: 1:    '✅f(KS):jY?+S9) = KKSS))::jjYY??++SS99',
112: 1:    '✅f(JBWh) = JJBBWWhh',
112: 1:    '✅f(ONm3l))H@Gf() = OONNmm33ll))))HH@@GGff((',
112: 1:    '✅f(fk6Kg 7&) = ffkk66KKgg  77&&',
112: 1:    '❌f(*A&2SJUb#(Vc(OjC`W1) = ??? != **AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11'
112: 1:  ],
112: 1:  'level': 3,
112: 1:  'nextQuestion': '*A&2SJUb#(Vc(OjC`W1',
112: 1:  'questions': [
112: 1:    'String',
112: 1:    'Hello World',
112: 1:    '1234!_ ',
112: 1:    '____ _ _ __ ___ _ ____ ',
112: 1:    '(-_-)',
112: 1:    '123456',
112: 1:    'Scrub Lords',
112: 1:    'bruh',
112: 1:    'illuminati',
112: 1:    'Adidas',
112: 1:    '!#%G#DGY^RC',
112: 1:    'Donald Duck',
112: 1:    'Kanye 2020',
112: 1:    'Bernie Sanders is Bae',
112: 1:    'Peanut Butter',
112: 1:    '1337',
112: 1:    'h*o@D7an& a',
112: 1:    'Y!S47Y @',
112: 1:    '.-&dFI8',
112: 1:    '!Zq+',
112: 1:    'g%;U*!a/[pZ4V3/&',
112: 1:    '7f5nF=:b8eo&+7',
112: 1:    '*2SNm#Lo&Y',
112: 1:    '3ZVm',
112: 1:    ']C06*Ec$62o!7][/9',
112: 1:    '^q%]VoKhh9j5-',
112: 1:    '$2EZGQ',
112: 1:    '`U9@h',
112: 1:    'k^F [',
112: 1:    '@Y(-SAZa<S2OS**i',
112: 1:    'h*?RW_i+<',
112: 1:    'FACBT+3YC9m3+a0Q',
112: 1:    'KS):jY?+S9',
112: 1:    'JBWh',
112: 1:    'ONm3l))H@Gf(',
112: 1:    'fk6Kg 7&',
112: 1:    '*A&2SJUb#(Vc(OjC`W1'
112: 1:  ]
112: 1:}
112: 1:Scores: 1617
112: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii', 'hh**??RRWW__ii++<<', 'FFAACCBBTT++33YYCC99mm33++aa00QQ', 'KKSS))::jjYY??++SS99', 'JJBBWWhh', 'OONNmm33ll))))HH@@GGff((', 'ffkk66KKgg  77&&', '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11']')
112: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
113: 1:BoardData {
113: 1:  'description': [
113: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
113: 1:    'Write a javascript method.',
113: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
113: 1:    'Use regular expressions to solve this problem.'
113: 1:  ],
113: 1:  'expectedAnswer': '``SS99OONNuu000011EE8833++!!',
113: 1:  'history': [
113: 1:    {
113: 1:      'answer': 'SSttrriinngg',
113: 1:      'question': 'String',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'HHeelllloo  WWoorrlldd',
113: 1:      'question': 'Hello World',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '11223344!!__  ',
113: 1:      'question': '1234!_ ',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
113: 1:      'question': '____ _ _ __ ___ _ ____ ',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '((--__--))',
113: 1:      'question': '(-_-)',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '112233445566',
113: 1:      'question': '123456',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'SSccrruubb  LLoorrddss',
113: 1:      'question': 'Scrub Lords',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'bbrruuhh',
113: 1:      'question': 'bruh',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'iilllluummiinnaattii',
113: 1:      'question': 'illuminati',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'AAddiiddaass',
113: 1:      'question': 'Adidas',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
113: 1:      'question': '!#%G#DGY^RC',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'DDoonnaalldd  DDuucckk',
113: 1:      'question': 'Donald Duck',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'KKaannyyee  22002200',
113: 1:      'question': 'Kanye 2020',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
113: 1:      'question': 'Bernie Sanders is Bae',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
113: 1:      'question': 'Peanut Butter',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '11333377',
113: 1:      'question': '1337',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
113: 1:      'question': 'h*o@D7an& a',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'YY!!SS4477YY  @@',
113: 1:      'question': 'Y!S47Y @',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '..--&&ddFFII88',
113: 1:      'question': '.-&dFI8',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '!!ZZqq++',
113: 1:      'question': '!Zq+',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
113: 1:      'question': 'g%;U*!a/[pZ4V3/&',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
113: 1:      'question': '7f5nF=:b8eo&+7',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '**22SSNNmm##LLoo&&YY',
113: 1:      'question': '*2SNm#Lo&Y',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '33ZZVVmm',
113: 1:      'question': '3ZVm',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
113: 1:      'question': ']C06*Ec$62o!7][/9',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
113: 1:      'question': '^q%]VoKhh9j5-',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '$$22EEZZGGQQ',
113: 1:      'question': '$2EZGQ',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '``UU99@@hh',
113: 1:      'question': '`U9@h',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'kk^^FF  [[',
113: 1:      'question': 'k^F [',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
113: 1:      'question': '@Y(-SAZa<S2OS**i',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'hh**??RRWW__ii++<<',
113: 1:      'question': 'h*?RW_i+<',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'FFAACCBBTT++33YYCC99mm33++aa00QQ',
113: 1:      'question': 'FACBT+3YC9m3+a0Q',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'KKSS))::jjYY??++SS99',
113: 1:      'question': 'KS):jY?+S9',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'JJBBWWhh',
113: 1:      'question': 'JBWh',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'OONNmm33ll))))HH@@GGff((',
113: 1:      'question': 'ONm3l))H@Gf(',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': 'ffkk66KKgg  77&&',
113: 1:      'question': 'fk6Kg 7&',
113: 1:      'valid': true
113: 1:    },
113: 1:    {
113: 1:      'answer': '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
113: 1:      'question': '*A&2SJUb#(Vc(OjC`W1',
113: 1:      'valid': true
113: 1:    }
113: 1:  ],
113: 1:  'info': [
113: 1:    '✅f(String) = SSttrriinngg',
113: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
113: 1:    '✅f(1234!_ ) = 11223344!!__  ',
113: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
113: 1:    '✅f((-_-)) = ((--__--))',
113: 1:    '✅f(123456) = 112233445566',
113: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
113: 1:    '✅f(bruh) = bbrruuhh',
113: 1:    '✅f(illuminati) = iilllluummiinnaattii',
113: 1:    '✅f(Adidas) = AAddiiddaass',
113: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
113: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
113: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
113: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
113: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
113: 1:    '✅f(1337) = 11333377',
113: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
113: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
113: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
113: 1:    '✅f(!Zq+) = !!ZZqq++',
113: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
113: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
113: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
113: 1:    '✅f(3ZVm) = 33ZZVVmm',
113: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
113: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
113: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
113: 1:    '✅f(`U9@h) = ``UU99@@hh',
113: 1:    '✅f(k^F [) = kk^^FF  [[',
113: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
113: 1:    '✅f(h*?RW_i+<) = hh**??RRWW__ii++<<',
113: 1:    '✅f(FACBT+3YC9m3+a0Q) = FFAACCBBTT++33YYCC99mm33++aa00QQ',
113: 1:    '✅f(KS):jY?+S9) = KKSS))::jjYY??++SS99',
113: 1:    '✅f(JBWh) = JJBBWWhh',
113: 1:    '✅f(ONm3l))H@Gf() = OONNmm33ll))))HH@@GGff((',
113: 1:    '✅f(fk6Kg 7&) = ffkk66KKgg  77&&',
113: 1:    '✅f(*A&2SJUb#(Vc(OjC`W1) = **AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
113: 1:    '❌f(`S9ONu001E83+!) = ??? != ``SS99OONNuu000011EE8833++!!'
113: 1:  ],
113: 1:  'level': 3,
113: 1:  'nextQuestion': '`S9ONu001E83+!',
113: 1:  'questions': [
113: 1:    'String',
113: 1:    'Hello World',
113: 1:    '1234!_ ',
113: 1:    '____ _ _ __ ___ _ ____ ',
113: 1:    '(-_-)',
113: 1:    '123456',
113: 1:    'Scrub Lords',
113: 1:    'bruh',
113: 1:    'illuminati',
113: 1:    'Adidas',
113: 1:    '!#%G#DGY^RC',
113: 1:    'Donald Duck',
113: 1:    'Kanye 2020',
113: 1:    'Bernie Sanders is Bae',
113: 1:    'Peanut Butter',
113: 1:    '1337',
113: 1:    'h*o@D7an& a',
113: 1:    'Y!S47Y @',
113: 1:    '.-&dFI8',
113: 1:    '!Zq+',
113: 1:    'g%;U*!a/[pZ4V3/&',
113: 1:    '7f5nF=:b8eo&+7',
113: 1:    '*2SNm#Lo&Y',
113: 1:    '3ZVm',
113: 1:    ']C06*Ec$62o!7][/9',
113: 1:    '^q%]VoKhh9j5-',
113: 1:    '$2EZGQ',
113: 1:    '`U9@h',
113: 1:    'k^F [',
113: 1:    '@Y(-SAZa<S2OS**i',
113: 1:    'h*?RW_i+<',
113: 1:    'FACBT+3YC9m3+a0Q',
113: 1:    'KS):jY?+S9',
113: 1:    'JBWh',
113: 1:    'ONm3l))H@Gf(',
113: 1:    'fk6Kg 7&',
113: 1:    '*A&2SJUb#(Vc(OjC`W1',
113: 1:    '`S9ONu001E83+!'
113: 1:  ]
113: 1:}
113: 1:Scores: 1618
113: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii', 'hh**??RRWW__ii++<<', 'FFAACCBBTT++33YYCC99mm33++aa00QQ', 'KKSS))::jjYY??++SS99', 'JJBBWWhh', 'OONNmm33ll))))HH@@GGff((', 'ffkk66KKgg  77&&', '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11', '``SS99OONNuu000011EE8833++!!']')
113: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
114: 1:BoardData {
114: 1:  'description': [
114: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
114: 1:    'Write a javascript method.',
114: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
114: 1:    'Use regular expressions to solve this problem.'
114: 1:  ],
114: 1:  'expectedAnswer': '((YYQQ^^//22]]77cc$$88LL**,,]]::++',
114: 1:  'history': [
114: 1:    {
114: 1:      'answer': 'SSttrriinngg',
114: 1:      'question': 'String',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'HHeelllloo  WWoorrlldd',
114: 1:      'question': 'Hello World',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '11223344!!__  ',
114: 1:      'question': '1234!_ ',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
114: 1:      'question': '____ _ _ __ ___ _ ____ ',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '((--__--))',
114: 1:      'question': '(-_-)',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '112233445566',
114: 1:      'question': '123456',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'SSccrruubb  LLoorrddss',
114: 1:      'question': 'Scrub Lords',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'bbrruuhh',
114: 1:      'question': 'bruh',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'iilllluummiinnaattii',
114: 1:      'question': 'illuminati',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'AAddiiddaass',
114: 1:      'question': 'Adidas',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
114: 1:      'question': '!#%G#DGY^RC',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'DDoonnaalldd  DDuucckk',
114: 1:      'question': 'Donald Duck',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'KKaannyyee  22002200',
114: 1:      'question': 'Kanye 2020',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
114: 1:      'question': 'Bernie Sanders is Bae',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
114: 1:      'question': 'Peanut Butter',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '11333377',
114: 1:      'question': '1337',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
114: 1:      'question': 'h*o@D7an& a',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'YY!!SS4477YY  @@',
114: 1:      'question': 'Y!S47Y @',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '..--&&ddFFII88',
114: 1:      'question': '.-&dFI8',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '!!ZZqq++',
114: 1:      'question': '!Zq+',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
114: 1:      'question': 'g%;U*!a/[pZ4V3/&',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
114: 1:      'question': '7f5nF=:b8eo&+7',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '**22SSNNmm##LLoo&&YY',
114: 1:      'question': '*2SNm#Lo&Y',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '33ZZVVmm',
114: 1:      'question': '3ZVm',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
114: 1:      'question': ']C06*Ec$62o!7][/9',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
114: 1:      'question': '^q%]VoKhh9j5-',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '$$22EEZZGGQQ',
114: 1:      'question': '$2EZGQ',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '``UU99@@hh',
114: 1:      'question': '`U9@h',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'kk^^FF  [[',
114: 1:      'question': 'k^F [',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
114: 1:      'question': '@Y(-SAZa<S2OS**i',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'hh**??RRWW__ii++<<',
114: 1:      'question': 'h*?RW_i+<',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'FFAACCBBTT++33YYCC99mm33++aa00QQ',
114: 1:      'question': 'FACBT+3YC9m3+a0Q',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'KKSS))::jjYY??++SS99',
114: 1:      'question': 'KS):jY?+S9',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'JJBBWWhh',
114: 1:      'question': 'JBWh',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'OONNmm33ll))))HH@@GGff((',
114: 1:      'question': 'ONm3l))H@Gf(',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': 'ffkk66KKgg  77&&',
114: 1:      'question': 'fk6Kg 7&',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
114: 1:      'question': '*A&2SJUb#(Vc(OjC`W1',
114: 1:      'valid': true
114: 1:    },
114: 1:    {
114: 1:      'answer': '``SS99OONNuu000011EE8833++!!',
114: 1:      'question': '`S9ONu001E83+!',
114: 1:      'valid': true
114: 1:    }
114: 1:  ],
114: 1:  'info': [
114: 1:    '✅f(String) = SSttrriinngg',
114: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
114: 1:    '✅f(1234!_ ) = 11223344!!__  ',
114: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
114: 1:    '✅f((-_-)) = ((--__--))',
114: 1:    '✅f(123456) = 112233445566',
114: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
114: 1:    '✅f(bruh) = bbrruuhh',
114: 1:    '✅f(illuminati) = iilllluummiinnaattii',
114: 1:    '✅f(Adidas) = AAddiiddaass',
114: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
114: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
114: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
114: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
114: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
114: 1:    '✅f(1337) = 11333377',
114: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
114: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
114: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
114: 1:    '✅f(!Zq+) = !!ZZqq++',
114: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
114: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
114: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
114: 1:    '✅f(3ZVm) = 33ZZVVmm',
114: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
114: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
114: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
114: 1:    '✅f(`U9@h) = ``UU99@@hh',
114: 1:    '✅f(k^F [) = kk^^FF  [[',
114: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
114: 1:    '✅f(h*?RW_i+<) = hh**??RRWW__ii++<<',
114: 1:    '✅f(FACBT+3YC9m3+a0Q) = FFAACCBBTT++33YYCC99mm33++aa00QQ',
114: 1:    '✅f(KS):jY?+S9) = KKSS))::jjYY??++SS99',
114: 1:    '✅f(JBWh) = JJBBWWhh',
114: 1:    '✅f(ONm3l))H@Gf() = OONNmm33ll))))HH@@GGff((',
114: 1:    '✅f(fk6Kg 7&) = ffkk66KKgg  77&&',
114: 1:    '✅f(*A&2SJUb#(Vc(OjC`W1) = **AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
114: 1:    '✅f(`S9ONu001E83+!) = ``SS99OONNuu000011EE8833++!!',
114: 1:    '❌f((YQ^/2]7c$8L*,]:+) = ??? != ((YYQQ^^//22]]77cc$$88LL**,,]]::++'
114: 1:  ],
114: 1:  'level': 3,
114: 1:  'nextQuestion': '(YQ^/2]7c$8L*,]:+',
114: 1:  'questions': [
114: 1:    'String',
114: 1:    'Hello World',
114: 1:    '1234!_ ',
114: 1:    '____ _ _ __ ___ _ ____ ',
114: 1:    '(-_-)',
114: 1:    '123456',
114: 1:    'Scrub Lords',
114: 1:    'bruh',
114: 1:    'illuminati',
114: 1:    'Adidas',
114: 1:    '!#%G#DGY^RC',
114: 1:    'Donald Duck',
114: 1:    'Kanye 2020',
114: 1:    'Bernie Sanders is Bae',
114: 1:    'Peanut Butter',
114: 1:    '1337',
114: 1:    'h*o@D7an& a',
114: 1:    'Y!S47Y @',
114: 1:    '.-&dFI8',
114: 1:    '!Zq+',
114: 1:    'g%;U*!a/[pZ4V3/&',
114: 1:    '7f5nF=:b8eo&+7',
114: 1:    '*2SNm#Lo&Y',
114: 1:    '3ZVm',
114: 1:    ']C06*Ec$62o!7][/9',
114: 1:    '^q%]VoKhh9j5-',
114: 1:    '$2EZGQ',
114: 1:    '`U9@h',
114: 1:    'k^F [',
114: 1:    '@Y(-SAZa<S2OS**i',
114: 1:    'h*?RW_i+<',
114: 1:    'FACBT+3YC9m3+a0Q',
114: 1:    'KS):jY?+S9',
114: 1:    'JBWh',
114: 1:    'ONm3l))H@Gf(',
114: 1:    'fk6Kg 7&',
114: 1:    '*A&2SJUb#(Vc(OjC`W1',
114: 1:    '`S9ONu001E83+!',
114: 1:    '(YQ^/2]7c$8L*,]:+'
114: 1:  ]
114: 1:}
114: 1:Scores: 1619
114: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii', 'hh**??RRWW__ii++<<', 'FFAACCBBTT++33YYCC99mm33++aa00QQ', 'KKSS))::jjYY??++SS99', 'JJBBWWhh', 'OONNmm33ll))))HH@@GGff((', 'ffkk66KKgg  77&&', '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11', '``SS99OONNuu000011EE8833++!!', '((YYQQ^^//22]]77cc$$88LL**,,]]::++']')
114: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
115: 1:BoardData {
115: 1:  'description': [
115: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
115: 1:    'Write a javascript method.',
115: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
115: 1:    'Use regular expressions to solve this problem.'
115: 1:  ],
115: 1:  'expectedAnswer': '77PPllaa  GG33**CC[[==%%``dd==ll$$',
115: 1:  'history': [
115: 1:    {
115: 1:      'answer': 'SSttrriinngg',
115: 1:      'question': 'String',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'HHeelllloo  WWoorrlldd',
115: 1:      'question': 'Hello World',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '11223344!!__  ',
115: 1:      'question': '1234!_ ',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
115: 1:      'question': '____ _ _ __ ___ _ ____ ',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '((--__--))',
115: 1:      'question': '(-_-)',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '112233445566',
115: 1:      'question': '123456',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'SSccrruubb  LLoorrddss',
115: 1:      'question': 'Scrub Lords',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'bbrruuhh',
115: 1:      'question': 'bruh',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'iilllluummiinnaattii',
115: 1:      'question': 'illuminati',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'AAddiiddaass',
115: 1:      'question': 'Adidas',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
115: 1:      'question': '!#%G#DGY^RC',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'DDoonnaalldd  DDuucckk',
115: 1:      'question': 'Donald Duck',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'KKaannyyee  22002200',
115: 1:      'question': 'Kanye 2020',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
115: 1:      'question': 'Bernie Sanders is Bae',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
115: 1:      'question': 'Peanut Butter',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '11333377',
115: 1:      'question': '1337',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
115: 1:      'question': 'h*o@D7an& a',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'YY!!SS4477YY  @@',
115: 1:      'question': 'Y!S47Y @',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '..--&&ddFFII88',
115: 1:      'question': '.-&dFI8',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '!!ZZqq++',
115: 1:      'question': '!Zq+',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
115: 1:      'question': 'g%;U*!a/[pZ4V3/&',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
115: 1:      'question': '7f5nF=:b8eo&+7',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '**22SSNNmm##LLoo&&YY',
115: 1:      'question': '*2SNm#Lo&Y',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '33ZZVVmm',
115: 1:      'question': '3ZVm',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
115: 1:      'question': ']C06*Ec$62o!7][/9',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
115: 1:      'question': '^q%]VoKhh9j5-',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '$$22EEZZGGQQ',
115: 1:      'question': '$2EZGQ',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '``UU99@@hh',
115: 1:      'question': '`U9@h',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'kk^^FF  [[',
115: 1:      'question': 'k^F [',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
115: 1:      'question': '@Y(-SAZa<S2OS**i',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'hh**??RRWW__ii++<<',
115: 1:      'question': 'h*?RW_i+<',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'FFAACCBBTT++33YYCC99mm33++aa00QQ',
115: 1:      'question': 'FACBT+3YC9m3+a0Q',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'KKSS))::jjYY??++SS99',
115: 1:      'question': 'KS):jY?+S9',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'JJBBWWhh',
115: 1:      'question': 'JBWh',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'OONNmm33ll))))HH@@GGff((',
115: 1:      'question': 'ONm3l))H@Gf(',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': 'ffkk66KKgg  77&&',
115: 1:      'question': 'fk6Kg 7&',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
115: 1:      'question': '*A&2SJUb#(Vc(OjC`W1',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '``SS99OONNuu000011EE8833++!!',
115: 1:      'question': '`S9ONu001E83+!',
115: 1:      'valid': true
115: 1:    },
115: 1:    {
115: 1:      'answer': '((YYQQ^^//22]]77cc$$88LL**,,]]::++',
115: 1:      'question': '(YQ^/2]7c$8L*,]:+',
115: 1:      'valid': true
115: 1:    }
115: 1:  ],
115: 1:  'info': [
115: 1:    '✅f(String) = SSttrriinngg',
115: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
115: 1:    '✅f(1234!_ ) = 11223344!!__  ',
115: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
115: 1:    '✅f((-_-)) = ((--__--))',
115: 1:    '✅f(123456) = 112233445566',
115: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
115: 1:    '✅f(bruh) = bbrruuhh',
115: 1:    '✅f(illuminati) = iilllluummiinnaattii',
115: 1:    '✅f(Adidas) = AAddiiddaass',
115: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
115: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
115: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
115: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
115: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
115: 1:    '✅f(1337) = 11333377',
115: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
115: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
115: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
115: 1:    '✅f(!Zq+) = !!ZZqq++',
115: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
115: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
115: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
115: 1:    '✅f(3ZVm) = 33ZZVVmm',
115: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
115: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
115: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
115: 1:    '✅f(`U9@h) = ``UU99@@hh',
115: 1:    '✅f(k^F [) = kk^^FF  [[',
115: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
115: 1:    '✅f(h*?RW_i+<) = hh**??RRWW__ii++<<',
115: 1:    '✅f(FACBT+3YC9m3+a0Q) = FFAACCBBTT++33YYCC99mm33++aa00QQ',
115: 1:    '✅f(KS):jY?+S9) = KKSS))::jjYY??++SS99',
115: 1:    '✅f(JBWh) = JJBBWWhh',
115: 1:    '✅f(ONm3l))H@Gf() = OONNmm33ll))))HH@@GGff((',
115: 1:    '✅f(fk6Kg 7&) = ffkk66KKgg  77&&',
115: 1:    '✅f(*A&2SJUb#(Vc(OjC`W1) = **AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
115: 1:    '✅f(`S9ONu001E83+!) = ``SS99OONNuu000011EE8833++!!',
115: 1:    '✅f((YQ^/2]7c$8L*,]:+) = ((YYQQ^^//22]]77cc$$88LL**,,]]::++',
115: 1:    '❌f(7Pla G3*C[=%`d=l$) = ??? != 77PPllaa  GG33**CC[[==%%``dd==ll$$'
115: 1:  ],
115: 1:  'level': 3,
115: 1:  'nextQuestion': '7Pla G3*C[=%`d=l$',
115: 1:  'questions': [
115: 1:    'String',
115: 1:    'Hello World',
115: 1:    '1234!_ ',
115: 1:    '____ _ _ __ ___ _ ____ ',
115: 1:    '(-_-)',
115: 1:    '123456',
115: 1:    'Scrub Lords',
115: 1:    'bruh',
115: 1:    'illuminati',
115: 1:    'Adidas',
115: 1:    '!#%G#DGY^RC',
115: 1:    'Donald Duck',
115: 1:    'Kanye 2020',
115: 1:    'Bernie Sanders is Bae',
115: 1:    'Peanut Butter',
115: 1:    '1337',
115: 1:    'h*o@D7an& a',
115: 1:    'Y!S47Y @',
115: 1:    '.-&dFI8',
115: 1:    '!Zq+',
115: 1:    'g%;U*!a/[pZ4V3/&',
115: 1:    '7f5nF=:b8eo&+7',
115: 1:    '*2SNm#Lo&Y',
115: 1:    '3ZVm',
115: 1:    ']C06*Ec$62o!7][/9',
115: 1:    '^q%]VoKhh9j5-',
115: 1:    '$2EZGQ',
115: 1:    '`U9@h',
115: 1:    'k^F [',
115: 1:    '@Y(-SAZa<S2OS**i',
115: 1:    'h*?RW_i+<',
115: 1:    'FACBT+3YC9m3+a0Q',
115: 1:    'KS):jY?+S9',
115: 1:    'JBWh',
115: 1:    'ONm3l))H@Gf(',
115: 1:    'fk6Kg 7&',
115: 1:    '*A&2SJUb#(Vc(OjC`W1',
115: 1:    '`S9ONu001E83+!',
115: 1:    '(YQ^/2]7c$8L*,]:+',
115: 1:    '7Pla G3*C[=%`d=l$'
115: 1:  ]
115: 1:}
115: 1:Scores: 1620
115: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii', 'hh**??RRWW__ii++<<', 'FFAACCBBTT++33YYCC99mm33++aa00QQ', 'KKSS))::jjYY??++SS99', 'JJBBWWhh', 'OONNmm33ll))))HH@@GGff((', 'ffkk66KKgg  77&&', '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11', '``SS99OONNuu000011EE8833++!!', '((YYQQ^^//22]]77cc$$88LL**,,]]::++', '77PPllaa  GG33**CC[[==%%``dd==ll$$']')
115: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
116: 1:BoardData {
116: 1:  'description': [
116: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
116: 1:    'Write a javascript method.',
116: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
116: 1:    'Use regular expressions to solve this problem.'
116: 1:  ],
116: 1:  'expectedAnswer': '1122mmqq,,<<[[::FFddFF&&^^22PP',
116: 1:  'history': [
116: 1:    {
116: 1:      'answer': 'SSttrriinngg',
116: 1:      'question': 'String',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'HHeelllloo  WWoorrlldd',
116: 1:      'question': 'Hello World',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '11223344!!__  ',
116: 1:      'question': '1234!_ ',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
116: 1:      'question': '____ _ _ __ ___ _ ____ ',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '((--__--))',
116: 1:      'question': '(-_-)',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '112233445566',
116: 1:      'question': '123456',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'SSccrruubb  LLoorrddss',
116: 1:      'question': 'Scrub Lords',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'bbrruuhh',
116: 1:      'question': 'bruh',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'iilllluummiinnaattii',
116: 1:      'question': 'illuminati',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'AAddiiddaass',
116: 1:      'question': 'Adidas',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
116: 1:      'question': '!#%G#DGY^RC',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'DDoonnaalldd  DDuucckk',
116: 1:      'question': 'Donald Duck',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'KKaannyyee  22002200',
116: 1:      'question': 'Kanye 2020',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
116: 1:      'question': 'Bernie Sanders is Bae',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
116: 1:      'question': 'Peanut Butter',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '11333377',
116: 1:      'question': '1337',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
116: 1:      'question': 'h*o@D7an& a',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'YY!!SS4477YY  @@',
116: 1:      'question': 'Y!S47Y @',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '..--&&ddFFII88',
116: 1:      'question': '.-&dFI8',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '!!ZZqq++',
116: 1:      'question': '!Zq+',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
116: 1:      'question': 'g%;U*!a/[pZ4V3/&',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
116: 1:      'question': '7f5nF=:b8eo&+7',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '**22SSNNmm##LLoo&&YY',
116: 1:      'question': '*2SNm#Lo&Y',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '33ZZVVmm',
116: 1:      'question': '3ZVm',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
116: 1:      'question': ']C06*Ec$62o!7][/9',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
116: 1:      'question': '^q%]VoKhh9j5-',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '$$22EEZZGGQQ',
116: 1:      'question': '$2EZGQ',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '``UU99@@hh',
116: 1:      'question': '`U9@h',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'kk^^FF  [[',
116: 1:      'question': 'k^F [',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
116: 1:      'question': '@Y(-SAZa<S2OS**i',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'hh**??RRWW__ii++<<',
116: 1:      'question': 'h*?RW_i+<',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'FFAACCBBTT++33YYCC99mm33++aa00QQ',
116: 1:      'question': 'FACBT+3YC9m3+a0Q',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'KKSS))::jjYY??++SS99',
116: 1:      'question': 'KS):jY?+S9',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'JJBBWWhh',
116: 1:      'question': 'JBWh',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'OONNmm33ll))))HH@@GGff((',
116: 1:      'question': 'ONm3l))H@Gf(',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': 'ffkk66KKgg  77&&',
116: 1:      'question': 'fk6Kg 7&',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
116: 1:      'question': '*A&2SJUb#(Vc(OjC`W1',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '``SS99OONNuu000011EE8833++!!',
116: 1:      'question': '`S9ONu001E83+!',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '((YYQQ^^//22]]77cc$$88LL**,,]]::++',
116: 1:      'question': '(YQ^/2]7c$8L*,]:+',
116: 1:      'valid': true
116: 1:    },
116: 1:    {
116: 1:      'answer': '77PPllaa  GG33**CC[[==%%``dd==ll$$',
116: 1:      'question': '7Pla G3*C[=%`d=l$',
116: 1:      'valid': true
116: 1:    }
116: 1:  ],
116: 1:  'info': [
116: 1:    '✅f(String) = SSttrriinngg',
116: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
116: 1:    '✅f(1234!_ ) = 11223344!!__  ',
116: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
116: 1:    '✅f((-_-)) = ((--__--))',
116: 1:    '✅f(123456) = 112233445566',
116: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
116: 1:    '✅f(bruh) = bbrruuhh',
116: 1:    '✅f(illuminati) = iilllluummiinnaattii',
116: 1:    '✅f(Adidas) = AAddiiddaass',
116: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
116: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
116: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
116: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
116: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
116: 1:    '✅f(1337) = 11333377',
116: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
116: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
116: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
116: 1:    '✅f(!Zq+) = !!ZZqq++',
116: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
116: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
116: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
116: 1:    '✅f(3ZVm) = 33ZZVVmm',
116: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
116: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
116: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
116: 1:    '✅f(`U9@h) = ``UU99@@hh',
116: 1:    '✅f(k^F [) = kk^^FF  [[',
116: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
116: 1:    '✅f(h*?RW_i+<) = hh**??RRWW__ii++<<',
116: 1:    '✅f(FACBT+3YC9m3+a0Q) = FFAACCBBTT++33YYCC99mm33++aa00QQ',
116: 1:    '✅f(KS):jY?+S9) = KKSS))::jjYY??++SS99',
116: 1:    '✅f(JBWh) = JJBBWWhh',
116: 1:    '✅f(ONm3l))H@Gf() = OONNmm33ll))))HH@@GGff((',
116: 1:    '✅f(fk6Kg 7&) = ffkk66KKgg  77&&',
116: 1:    '✅f(*A&2SJUb#(Vc(OjC`W1) = **AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
116: 1:    '✅f(`S9ONu001E83+!) = ``SS99OONNuu000011EE8833++!!',
116: 1:    '✅f((YQ^/2]7c$8L*,]:+) = ((YYQQ^^//22]]77cc$$88LL**,,]]::++',
116: 1:    '✅f(7Pla G3*C[=%`d=l$) = 77PPllaa  GG33**CC[[==%%``dd==ll$$',
116: 1:    '❌f(12mq,<[:FdF&^2P) = ??? != 1122mmqq,,<<[[::FFddFF&&^^22PP'
116: 1:  ],
116: 1:  'level': 3,
116: 1:  'nextQuestion': '12mq,<[:FdF&^2P',
116: 1:  'questions': [
116: 1:    'String',
116: 1:    'Hello World',
116: 1:    '1234!_ ',
116: 1:    '____ _ _ __ ___ _ ____ ',
116: 1:    '(-_-)',
116: 1:    '123456',
116: 1:    'Scrub Lords',
116: 1:    'bruh',
116: 1:    'illuminati',
116: 1:    'Adidas',
116: 1:    '!#%G#DGY^RC',
116: 1:    'Donald Duck',
116: 1:    'Kanye 2020',
116: 1:    'Bernie Sanders is Bae',
116: 1:    'Peanut Butter',
116: 1:    '1337',
116: 1:    'h*o@D7an& a',
116: 1:    'Y!S47Y @',
116: 1:    '.-&dFI8',
116: 1:    '!Zq+',
116: 1:    'g%;U*!a/[pZ4V3/&',
116: 1:    '7f5nF=:b8eo&+7',
116: 1:    '*2SNm#Lo&Y',
116: 1:    '3ZVm',
116: 1:    ']C06*Ec$62o!7][/9',
116: 1:    '^q%]VoKhh9j5-',
116: 1:    '$2EZGQ',
116: 1:    '`U9@h',
116: 1:    'k^F [',
116: 1:    '@Y(-SAZa<S2OS**i',
116: 1:    'h*?RW_i+<',
116: 1:    'FACBT+3YC9m3+a0Q',
116: 1:    'KS):jY?+S9',
116: 1:    'JBWh',
116: 1:    'ONm3l))H@Gf(',
116: 1:    'fk6Kg 7&',
116: 1:    '*A&2SJUb#(Vc(OjC`W1',
116: 1:    '`S9ONu001E83+!',
116: 1:    '(YQ^/2]7c$8L*,]:+',
116: 1:    '7Pla G3*C[=%`d=l$',
116: 1:    '12mq,<[:FdF&^2P'
116: 1:  ]
116: 1:}
116: 1:Scores: 1621
116: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii', 'hh**??RRWW__ii++<<', 'FFAACCBBTT++33YYCC99mm33++aa00QQ', 'KKSS))::jjYY??++SS99', 'JJBBWWhh', 'OONNmm33ll))))HH@@GGff((', 'ffkk66KKgg  77&&', '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11', '``SS99OONNuu000011EE8833++!!', '((YYQQ^^//22]]77cc$$88LL**,,]]::++', '77PPllaa  GG33**CC[[==%%``dd==ll$$', '1122mmqq,,<<[[::FFddFF&&^^22PP']')
116: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
117: 1:BoardData {
117: 1:  'description': [
117: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
117: 1:    'Write a javascript method.',
117: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
117: 1:    'Use regular expressions to solve this problem.'
117: 1:  ],
117: 1:  'expectedAnswer': 'll##NNRRTT77nnnn++pp&&',
117: 1:  'history': [
117: 1:    {
117: 1:      'answer': 'SSttrriinngg',
117: 1:      'question': 'String',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'HHeelllloo  WWoorrlldd',
117: 1:      'question': 'Hello World',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '11223344!!__  ',
117: 1:      'question': '1234!_ ',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
117: 1:      'question': '____ _ _ __ ___ _ ____ ',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '((--__--))',
117: 1:      'question': '(-_-)',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '112233445566',
117: 1:      'question': '123456',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'SSccrruubb  LLoorrddss',
117: 1:      'question': 'Scrub Lords',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'bbrruuhh',
117: 1:      'question': 'bruh',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'iilllluummiinnaattii',
117: 1:      'question': 'illuminati',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'AAddiiddaass',
117: 1:      'question': 'Adidas',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
117: 1:      'question': '!#%G#DGY^RC',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'DDoonnaalldd  DDuucckk',
117: 1:      'question': 'Donald Duck',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'KKaannyyee  22002200',
117: 1:      'question': 'Kanye 2020',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
117: 1:      'question': 'Bernie Sanders is Bae',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
117: 1:      'question': 'Peanut Butter',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '11333377',
117: 1:      'question': '1337',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
117: 1:      'question': 'h*o@D7an& a',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'YY!!SS4477YY  @@',
117: 1:      'question': 'Y!S47Y @',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '..--&&ddFFII88',
117: 1:      'question': '.-&dFI8',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '!!ZZqq++',
117: 1:      'question': '!Zq+',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
117: 1:      'question': 'g%;U*!a/[pZ4V3/&',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
117: 1:      'question': '7f5nF=:b8eo&+7',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '**22SSNNmm##LLoo&&YY',
117: 1:      'question': '*2SNm#Lo&Y',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '33ZZVVmm',
117: 1:      'question': '3ZVm',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
117: 1:      'question': ']C06*Ec$62o!7][/9',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
117: 1:      'question': '^q%]VoKhh9j5-',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '$$22EEZZGGQQ',
117: 1:      'question': '$2EZGQ',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '``UU99@@hh',
117: 1:      'question': '`U9@h',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'kk^^FF  [[',
117: 1:      'question': 'k^F [',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
117: 1:      'question': '@Y(-SAZa<S2OS**i',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'hh**??RRWW__ii++<<',
117: 1:      'question': 'h*?RW_i+<',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'FFAACCBBTT++33YYCC99mm33++aa00QQ',
117: 1:      'question': 'FACBT+3YC9m3+a0Q',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'KKSS))::jjYY??++SS99',
117: 1:      'question': 'KS):jY?+S9',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'JJBBWWhh',
117: 1:      'question': 'JBWh',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'OONNmm33ll))))HH@@GGff((',
117: 1:      'question': 'ONm3l))H@Gf(',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': 'ffkk66KKgg  77&&',
117: 1:      'question': 'fk6Kg 7&',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
117: 1:      'question': '*A&2SJUb#(Vc(OjC`W1',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '``SS99OONNuu000011EE8833++!!',
117: 1:      'question': '`S9ONu001E83+!',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '((YYQQ^^//22]]77cc$$88LL**,,]]::++',
117: 1:      'question': '(YQ^/2]7c$8L*,]:+',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '77PPllaa  GG33**CC[[==%%``dd==ll$$',
117: 1:      'question': '7Pla G3*C[=%`d=l$',
117: 1:      'valid': true
117: 1:    },
117: 1:    {
117: 1:      'answer': '1122mmqq,,<<[[::FFddFF&&^^22PP',
117: 1:      'question': '12mq,<[:FdF&^2P',
117: 1:      'valid': true
117: 1:    }
117: 1:  ],
117: 1:  'info': [
117: 1:    '✅f(String) = SSttrriinngg',
117: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
117: 1:    '✅f(1234!_ ) = 11223344!!__  ',
117: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
117: 1:    '✅f((-_-)) = ((--__--))',
117: 1:    '✅f(123456) = 112233445566',
117: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
117: 1:    '✅f(bruh) = bbrruuhh',
117: 1:    '✅f(illuminati) = iilllluummiinnaattii',
117: 1:    '✅f(Adidas) = AAddiiddaass',
117: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
117: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
117: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
117: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
117: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
117: 1:    '✅f(1337) = 11333377',
117: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
117: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
117: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
117: 1:    '✅f(!Zq+) = !!ZZqq++',
117: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
117: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
117: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
117: 1:    '✅f(3ZVm) = 33ZZVVmm',
117: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
117: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
117: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
117: 1:    '✅f(`U9@h) = ``UU99@@hh',
117: 1:    '✅f(k^F [) = kk^^FF  [[',
117: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
117: 1:    '✅f(h*?RW_i+<) = hh**??RRWW__ii++<<',
117: 1:    '✅f(FACBT+3YC9m3+a0Q) = FFAACCBBTT++33YYCC99mm33++aa00QQ',
117: 1:    '✅f(KS):jY?+S9) = KKSS))::jjYY??++SS99',
117: 1:    '✅f(JBWh) = JJBBWWhh',
117: 1:    '✅f(ONm3l))H@Gf() = OONNmm33ll))))HH@@GGff((',
117: 1:    '✅f(fk6Kg 7&) = ffkk66KKgg  77&&',
117: 1:    '✅f(*A&2SJUb#(Vc(OjC`W1) = **AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
117: 1:    '✅f(`S9ONu001E83+!) = ``SS99OONNuu000011EE8833++!!',
117: 1:    '✅f((YQ^/2]7c$8L*,]:+) = ((YYQQ^^//22]]77cc$$88LL**,,]]::++',
117: 1:    '✅f(7Pla G3*C[=%`d=l$) = 77PPllaa  GG33**CC[[==%%``dd==ll$$',
117: 1:    '✅f(12mq,<[:FdF&^2P) = 1122mmqq,,<<[[::FFddFF&&^^22PP',
117: 1:    '❌f(l#NRT7nn+p&) = ??? != ll##NNRRTT77nnnn++pp&&'
117: 1:  ],
117: 1:  'level': 3,
117: 1:  'nextQuestion': 'l#NRT7nn+p&',
117: 1:  'questions': [
117: 1:    'String',
117: 1:    'Hello World',
117: 1:    '1234!_ ',
117: 1:    '____ _ _ __ ___ _ ____ ',
117: 1:    '(-_-)',
117: 1:    '123456',
117: 1:    'Scrub Lords',
117: 1:    'bruh',
117: 1:    'illuminati',
117: 1:    'Adidas',
117: 1:    '!#%G#DGY^RC',
117: 1:    'Donald Duck',
117: 1:    'Kanye 2020',
117: 1:    'Bernie Sanders is Bae',
117: 1:    'Peanut Butter',
117: 1:    '1337',
117: 1:    'h*o@D7an& a',
117: 1:    'Y!S47Y @',
117: 1:    '.-&dFI8',
117: 1:    '!Zq+',
117: 1:    'g%;U*!a/[pZ4V3/&',
117: 1:    '7f5nF=:b8eo&+7',
117: 1:    '*2SNm#Lo&Y',
117: 1:    '3ZVm',
117: 1:    ']C06*Ec$62o!7][/9',
117: 1:    '^q%]VoKhh9j5-',
117: 1:    '$2EZGQ',
117: 1:    '`U9@h',
117: 1:    'k^F [',
117: 1:    '@Y(-SAZa<S2OS**i',
117: 1:    'h*?RW_i+<',
117: 1:    'FACBT+3YC9m3+a0Q',
117: 1:    'KS):jY?+S9',
117: 1:    'JBWh',
117: 1:    'ONm3l))H@Gf(',
117: 1:    'fk6Kg 7&',
117: 1:    '*A&2SJUb#(Vc(OjC`W1',
117: 1:    '`S9ONu001E83+!',
117: 1:    '(YQ^/2]7c$8L*,]:+',
117: 1:    '7Pla G3*C[=%`d=l$',
117: 1:    '12mq,<[:FdF&^2P',
117: 1:    'l#NRT7nn+p&'
117: 1:  ]
117: 1:}
117: 1:Scores: 1622
117: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii', 'hh**??RRWW__ii++<<', 'FFAACCBBTT++33YYCC99mm33++aa00QQ', 'KKSS))::jjYY??++SS99', 'JJBBWWhh', 'OONNmm33ll))))HH@@GGff((', 'ffkk66KKgg  77&&', '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11', '``SS99OONNuu000011EE8833++!!', '((YYQQ^^//22]]77cc$$88LL**,,]]::++', '77PPllaa  GG33**CC[[==%%``dd==ll$$', '1122mmqq,,<<[[::FFddFF&&^^22PP', 'll##NNRRTT77nnnn++pp&&']')
117: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
118: 1:BoardData {
118: 1:  'description': [
118: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
118: 1:    'Write a javascript method.',
118: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
118: 1:    'Use regular expressions to solve this problem.'
118: 1:  ],
118: 1:  'expectedAnswer': '99..dd((QQ;;DD((LL..**',
118: 1:  'history': [
118: 1:    {
118: 1:      'answer': 'SSttrriinngg',
118: 1:      'question': 'String',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'HHeelllloo  WWoorrlldd',
118: 1:      'question': 'Hello World',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '11223344!!__  ',
118: 1:      'question': '1234!_ ',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
118: 1:      'question': '____ _ _ __ ___ _ ____ ',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '((--__--))',
118: 1:      'question': '(-_-)',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '112233445566',
118: 1:      'question': '123456',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'SSccrruubb  LLoorrddss',
118: 1:      'question': 'Scrub Lords',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'bbrruuhh',
118: 1:      'question': 'bruh',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'iilllluummiinnaattii',
118: 1:      'question': 'illuminati',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'AAddiiddaass',
118: 1:      'question': 'Adidas',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
118: 1:      'question': '!#%G#DGY^RC',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'DDoonnaalldd  DDuucckk',
118: 1:      'question': 'Donald Duck',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'KKaannyyee  22002200',
118: 1:      'question': 'Kanye 2020',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
118: 1:      'question': 'Bernie Sanders is Bae',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
118: 1:      'question': 'Peanut Butter',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '11333377',
118: 1:      'question': '1337',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
118: 1:      'question': 'h*o@D7an& a',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'YY!!SS4477YY  @@',
118: 1:      'question': 'Y!S47Y @',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '..--&&ddFFII88',
118: 1:      'question': '.-&dFI8',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '!!ZZqq++',
118: 1:      'question': '!Zq+',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
118: 1:      'question': 'g%;U*!a/[pZ4V3/&',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
118: 1:      'question': '7f5nF=:b8eo&+7',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '**22SSNNmm##LLoo&&YY',
118: 1:      'question': '*2SNm#Lo&Y',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '33ZZVVmm',
118: 1:      'question': '3ZVm',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
118: 1:      'question': ']C06*Ec$62o!7][/9',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
118: 1:      'question': '^q%]VoKhh9j5-',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '$$22EEZZGGQQ',
118: 1:      'question': '$2EZGQ',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '``UU99@@hh',
118: 1:      'question': '`U9@h',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'kk^^FF  [[',
118: 1:      'question': 'k^F [',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
118: 1:      'question': '@Y(-SAZa<S2OS**i',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'hh**??RRWW__ii++<<',
118: 1:      'question': 'h*?RW_i+<',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'FFAACCBBTT++33YYCC99mm33++aa00QQ',
118: 1:      'question': 'FACBT+3YC9m3+a0Q',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'KKSS))::jjYY??++SS99',
118: 1:      'question': 'KS):jY?+S9',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'JJBBWWhh',
118: 1:      'question': 'JBWh',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'OONNmm33ll))))HH@@GGff((',
118: 1:      'question': 'ONm3l))H@Gf(',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'ffkk66KKgg  77&&',
118: 1:      'question': 'fk6Kg 7&',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
118: 1:      'question': '*A&2SJUb#(Vc(OjC`W1',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '``SS99OONNuu000011EE8833++!!',
118: 1:      'question': '`S9ONu001E83+!',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '((YYQQ^^//22]]77cc$$88LL**,,]]::++',
118: 1:      'question': '(YQ^/2]7c$8L*,]:+',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '77PPllaa  GG33**CC[[==%%``dd==ll$$',
118: 1:      'question': '7Pla G3*C[=%`d=l$',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': '1122mmqq,,<<[[::FFddFF&&^^22PP',
118: 1:      'question': '12mq,<[:FdF&^2P',
118: 1:      'valid': true
118: 1:    },
118: 1:    {
118: 1:      'answer': 'll##NNRRTT77nnnn++pp&&',
118: 1:      'question': 'l#NRT7nn+p&',
118: 1:      'valid': true
118: 1:    }
118: 1:  ],
118: 1:  'info': [
118: 1:    '✅f(String) = SSttrriinngg',
118: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
118: 1:    '✅f(1234!_ ) = 11223344!!__  ',
118: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
118: 1:    '✅f((-_-)) = ((--__--))',
118: 1:    '✅f(123456) = 112233445566',
118: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
118: 1:    '✅f(bruh) = bbrruuhh',
118: 1:    '✅f(illuminati) = iilllluummiinnaattii',
118: 1:    '✅f(Adidas) = AAddiiddaass',
118: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
118: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
118: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
118: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
118: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
118: 1:    '✅f(1337) = 11333377',
118: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
118: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
118: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
118: 1:    '✅f(!Zq+) = !!ZZqq++',
118: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
118: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
118: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
118: 1:    '✅f(3ZVm) = 33ZZVVmm',
118: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
118: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
118: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
118: 1:    '✅f(`U9@h) = ``UU99@@hh',
118: 1:    '✅f(k^F [) = kk^^FF  [[',
118: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
118: 1:    '✅f(h*?RW_i+<) = hh**??RRWW__ii++<<',
118: 1:    '✅f(FACBT+3YC9m3+a0Q) = FFAACCBBTT++33YYCC99mm33++aa00QQ',
118: 1:    '✅f(KS):jY?+S9) = KKSS))::jjYY??++SS99',
118: 1:    '✅f(JBWh) = JJBBWWhh',
118: 1:    '✅f(ONm3l))H@Gf() = OONNmm33ll))))HH@@GGff((',
118: 1:    '✅f(fk6Kg 7&) = ffkk66KKgg  77&&',
118: 1:    '✅f(*A&2SJUb#(Vc(OjC`W1) = **AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
118: 1:    '✅f(`S9ONu001E83+!) = ``SS99OONNuu000011EE8833++!!',
118: 1:    '✅f((YQ^/2]7c$8L*,]:+) = ((YYQQ^^//22]]77cc$$88LL**,,]]::++',
118: 1:    '✅f(7Pla G3*C[=%`d=l$) = 77PPllaa  GG33**CC[[==%%``dd==ll$$',
118: 1:    '✅f(12mq,<[:FdF&^2P) = 1122mmqq,,<<[[::FFddFF&&^^22PP',
118: 1:    '✅f(l#NRT7nn+p&) = ll##NNRRTT77nnnn++pp&&',
118: 1:    '❌f(9.d(Q;D(L.*) = ??? != 99..dd((QQ;;DD((LL..**'
118: 1:  ],
118: 1:  'level': 3,
118: 1:  'nextQuestion': '9.d(Q;D(L.*',
118: 1:  'questions': [
118: 1:    'String',
118: 1:    'Hello World',
118: 1:    '1234!_ ',
118: 1:    '____ _ _ __ ___ _ ____ ',
118: 1:    '(-_-)',
118: 1:    '123456',
118: 1:    'Scrub Lords',
118: 1:    'bruh',
118: 1:    'illuminati',
118: 1:    'Adidas',
118: 1:    '!#%G#DGY^RC',
118: 1:    'Donald Duck',
118: 1:    'Kanye 2020',
118: 1:    'Bernie Sanders is Bae',
118: 1:    'Peanut Butter',
118: 1:    '1337',
118: 1:    'h*o@D7an& a',
118: 1:    'Y!S47Y @',
118: 1:    '.-&dFI8',
118: 1:    '!Zq+',
118: 1:    'g%;U*!a/[pZ4V3/&',
118: 1:    '7f5nF=:b8eo&+7',
118: 1:    '*2SNm#Lo&Y',
118: 1:    '3ZVm',
118: 1:    ']C06*Ec$62o!7][/9',
118: 1:    '^q%]VoKhh9j5-',
118: 1:    '$2EZGQ',
118: 1:    '`U9@h',
118: 1:    'k^F [',
118: 1:    '@Y(-SAZa<S2OS**i',
118: 1:    'h*?RW_i+<',
118: 1:    'FACBT+3YC9m3+a0Q',
118: 1:    'KS):jY?+S9',
118: 1:    'JBWh',
118: 1:    'ONm3l))H@Gf(',
118: 1:    'fk6Kg 7&',
118: 1:    '*A&2SJUb#(Vc(OjC`W1',
118: 1:    '`S9ONu001E83+!',
118: 1:    '(YQ^/2]7c$8L*,]:+',
118: 1:    '7Pla G3*C[=%`d=l$',
118: 1:    '12mq,<[:FdF&^2P',
118: 1:    'l#NRT7nn+p&',
118: 1:    '9.d(Q;D(L.*'
118: 1:  ]
118: 1:}
118: 1:Scores: 1623
118: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii', 'hh**??RRWW__ii++<<', 'FFAACCBBTT++33YYCC99mm33++aa00QQ', 'KKSS))::jjYY??++SS99', 'JJBBWWhh', 'OONNmm33ll))))HH@@GGff((', 'ffkk66KKgg  77&&', '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11', '``SS99OONNuu000011EE8833++!!', '((YYQQ^^//22]]77cc$$88LL**,,]]::++', '77PPllaa  GG33**CC[[==%%``dd==ll$$', '1122mmqq,,<<[[::FFddFF&&^^22PP', 'll##NNRRTT77nnnn++pp&&', '99..dd((QQ;;DD((LL..**']')
118: 1:Fire Event: PassTest{complexity=7, testCount=44}
------------------------------------------
119: 1:BoardData {
119: 1:  'description': [
119: 1:    'Given a string, you have to return a string in which each character (case-sensitive) is repeated once.',
119: 1:    'Write a javascript method.',
119: 1:    'Example:\nString=>SSttrriinngg\nHello World=>HHeelllloo  WWoorrlldd\n1234!_ =>11223344!!__  ',
119: 1:    'Use regular expressions to solve this problem.'
119: 1:  ],
119: 1:  'expectedAnswer': 'nnqq00CCMMEEgg``))??nnJJ$$MM$$GGGG;;,,;;>>',
119: 1:  'history': [
119: 1:    {
119: 1:      'answer': 'SSttrriinngg',
119: 1:      'question': 'String',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'HHeelllloo  WWoorrlldd',
119: 1:      'question': 'Hello World',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '11223344!!__  ',
119: 1:      'question': '1234!_ ',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
119: 1:      'question': '____ _ _ __ ___ _ ____ ',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '((--__--))',
119: 1:      'question': '(-_-)',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '112233445566',
119: 1:      'question': '123456',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'SSccrruubb  LLoorrddss',
119: 1:      'question': 'Scrub Lords',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'bbrruuhh',
119: 1:      'question': 'bruh',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'iilllluummiinnaattii',
119: 1:      'question': 'illuminati',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'AAddiiddaass',
119: 1:      'question': 'Adidas',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
119: 1:      'question': '!#%G#DGY^RC',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'DDoonnaalldd  DDuucckk',
119: 1:      'question': 'Donald Duck',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'KKaannyyee  22002200',
119: 1:      'question': 'Kanye 2020',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
119: 1:      'question': 'Bernie Sanders is Bae',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
119: 1:      'question': 'Peanut Butter',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '11333377',
119: 1:      'question': '1337',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
119: 1:      'question': 'h*o@D7an& a',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'YY!!SS4477YY  @@',
119: 1:      'question': 'Y!S47Y @',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '..--&&ddFFII88',
119: 1:      'question': '.-&dFI8',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '!!ZZqq++',
119: 1:      'question': '!Zq+',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
119: 1:      'question': 'g%;U*!a/[pZ4V3/&',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
119: 1:      'question': '7f5nF=:b8eo&+7',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '**22SSNNmm##LLoo&&YY',
119: 1:      'question': '*2SNm#Lo&Y',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '33ZZVVmm',
119: 1:      'question': '3ZVm',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
119: 1:      'question': ']C06*Ec$62o!7][/9',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
119: 1:      'question': '^q%]VoKhh9j5-',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '$$22EEZZGGQQ',
119: 1:      'question': '$2EZGQ',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '``UU99@@hh',
119: 1:      'question': '`U9@h',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'kk^^FF  [[',
119: 1:      'question': 'k^F [',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
119: 1:      'question': '@Y(-SAZa<S2OS**i',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'hh**??RRWW__ii++<<',
119: 1:      'question': 'h*?RW_i+<',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'FFAACCBBTT++33YYCC99mm33++aa00QQ',
119: 1:      'question': 'FACBT+3YC9m3+a0Q',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'KKSS))::jjYY??++SS99',
119: 1:      'question': 'KS):jY?+S9',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'JJBBWWhh',
119: 1:      'question': 'JBWh',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'OONNmm33ll))))HH@@GGff((',
119: 1:      'question': 'ONm3l))H@Gf(',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'ffkk66KKgg  77&&',
119: 1:      'question': 'fk6Kg 7&',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
119: 1:      'question': '*A&2SJUb#(Vc(OjC`W1',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '``SS99OONNuu000011EE8833++!!',
119: 1:      'question': '`S9ONu001E83+!',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '((YYQQ^^//22]]77cc$$88LL**,,]]::++',
119: 1:      'question': '(YQ^/2]7c$8L*,]:+',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '77PPllaa  GG33**CC[[==%%``dd==ll$$',
119: 1:      'question': '7Pla G3*C[=%`d=l$',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '1122mmqq,,<<[[::FFddFF&&^^22PP',
119: 1:      'question': '12mq,<[:FdF&^2P',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': 'll##NNRRTT77nnnn++pp&&',
119: 1:      'question': 'l#NRT7nn+p&',
119: 1:      'valid': true
119: 1:    },
119: 1:    {
119: 1:      'answer': '99..dd((QQ;;DD((LL..**',
119: 1:      'question': '9.d(Q;D(L.*',
119: 1:      'valid': true
119: 1:    }
119: 1:  ],
119: 1:  'info': [
119: 1:    '✅f(String) = SSttrriinngg',
119: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
119: 1:    '✅f(1234!_ ) = 11223344!!__  ',
119: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
119: 1:    '✅f((-_-)) = ((--__--))',
119: 1:    '✅f(123456) = 112233445566',
119: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
119: 1:    '✅f(bruh) = bbrruuhh',
119: 1:    '✅f(illuminati) = iilllluummiinnaattii',
119: 1:    '✅f(Adidas) = AAddiiddaass',
119: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
119: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
119: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
119: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
119: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
119: 1:    '✅f(1337) = 11333377',
119: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
119: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
119: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
119: 1:    '✅f(!Zq+) = !!ZZqq++',
119: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
119: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
119: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
119: 1:    '✅f(3ZVm) = 33ZZVVmm',
119: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
119: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
119: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
119: 1:    '✅f(`U9@h) = ``UU99@@hh',
119: 1:    '✅f(k^F [) = kk^^FF  [[',
119: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
119: 1:    '✅f(h*?RW_i+<) = hh**??RRWW__ii++<<',
119: 1:    '✅f(FACBT+3YC9m3+a0Q) = FFAACCBBTT++33YYCC99mm33++aa00QQ',
119: 1:    '✅f(KS):jY?+S9) = KKSS))::jjYY??++SS99',
119: 1:    '✅f(JBWh) = JJBBWWhh',
119: 1:    '✅f(ONm3l))H@Gf() = OONNmm33ll))))HH@@GGff((',
119: 1:    '✅f(fk6Kg 7&) = ffkk66KKgg  77&&',
119: 1:    '✅f(*A&2SJUb#(Vc(OjC`W1) = **AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
119: 1:    '✅f(`S9ONu001E83+!) = ``SS99OONNuu000011EE8833++!!',
119: 1:    '✅f((YQ^/2]7c$8L*,]:+) = ((YYQQ^^//22]]77cc$$88LL**,,]]::++',
119: 1:    '✅f(7Pla G3*C[=%`d=l$) = 77PPllaa  GG33**CC[[==%%``dd==ll$$',
119: 1:    '✅f(12mq,<[:FdF&^2P) = 1122mmqq,,<<[[::FFddFF&&^^22PP',
119: 1:    '✅f(l#NRT7nn+p&) = ll##NNRRTT77nnnn++pp&&',
119: 1:    '✅f(9.d(Q;D(L.*) = 99..dd((QQ;;DD((LL..**',
119: 1:    '❌f(nq0CMEg`)?nJ$M$GG;,;>) = ??? != nnqq00CCMMEEgg``))??nnJJ$$MM$$GGGG;;,,;;>>'
119: 1:  ],
119: 1:  'level': 3,
119: 1:  'nextQuestion': 'nq0CMEg`)?nJ$M$GG;,;>',
119: 1:  'questions': [
119: 1:    'String',
119: 1:    'Hello World',
119: 1:    '1234!_ ',
119: 1:    '____ _ _ __ ___ _ ____ ',
119: 1:    '(-_-)',
119: 1:    '123456',
119: 1:    'Scrub Lords',
119: 1:    'bruh',
119: 1:    'illuminati',
119: 1:    'Adidas',
119: 1:    '!#%G#DGY^RC',
119: 1:    'Donald Duck',
119: 1:    'Kanye 2020',
119: 1:    'Bernie Sanders is Bae',
119: 1:    'Peanut Butter',
119: 1:    '1337',
119: 1:    'h*o@D7an& a',
119: 1:    'Y!S47Y @',
119: 1:    '.-&dFI8',
119: 1:    '!Zq+',
119: 1:    'g%;U*!a/[pZ4V3/&',
119: 1:    '7f5nF=:b8eo&+7',
119: 1:    '*2SNm#Lo&Y',
119: 1:    '3ZVm',
119: 1:    ']C06*Ec$62o!7][/9',
119: 1:    '^q%]VoKhh9j5-',
119: 1:    '$2EZGQ',
119: 1:    '`U9@h',
119: 1:    'k^F [',
119: 1:    '@Y(-SAZa<S2OS**i',
119: 1:    'h*?RW_i+<',
119: 1:    'FACBT+3YC9m3+a0Q',
119: 1:    'KS):jY?+S9',
119: 1:    'JBWh',
119: 1:    'ONm3l))H@Gf(',
119: 1:    'fk6Kg 7&',
119: 1:    '*A&2SJUb#(Vc(OjC`W1',
119: 1:    '`S9ONu001E83+!',
119: 1:    '(YQ^/2]7c$8L*,]:+',
119: 1:    '7Pla G3*C[=%`d=l$',
119: 1:    '12mq,<[:FdF&^2P',
119: 1:    'l#NRT7nn+p&',
119: 1:    '9.d(Q;D(L.*',
119: 1:    'nq0CMEg`)?nJ$M$GG;,;>'
119: 1:  ]
119: 1:}
119: 1:Scores: 1624
119: 1:Answer: message('['SSttrriinngg', 'HHeelllloo  WWoorrlldd', '11223344!!__  ', '________  __  __  ____  ______  __  ________  ', '((--__--))', '112233445566', 'SSccrruubb  LLoorrddss', 'bbrruuhh', 'iilllluummiinnaattii', 'AAddiiddaass', '!!##%%GG##DDGGYY^^RRCC', 'DDoonnaalldd  DDuucckk', 'KKaannyyee  22002200', 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee', 'PPeeaannuutt  BBuutttteerr', '11333377', 'hh**oo@@DD77aann&&  aa', 'YY!!SS4477YY  @@', '..--&&ddFFII88', '!!ZZqq++', 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&', '77ff55nnFF==::bb88eeoo&&++77', '**22SSNNmm##LLoo&&YY', '33ZZVVmm', ']]CC0066**EEcc$$6622oo!!77]][[//99', '^^qq%%]]VVooKKhhhh99jj55--', '$$22EEZZGGQQ', '``UU99@@hh', 'kk^^FF  [[', '@@YY((--SSAAZZaa<<SS22OOSS****ii', 'hh**??RRWW__ii++<<', 'FFAACCBBTT++33YYCC99mm33++aa00QQ', 'KKSS))::jjYY??++SS99', 'JJBBWWhh', 'OONNmm33ll))))HH@@GGff((', 'ffkk66KKgg  77&&', '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11', '``SS99OONNuu000011EE8833++!!', '((YYQQ^^//22]]77cc$$88LL**,,]]::++', '77PPllaa  GG33**CC[[==%%``dd==ll$$', '1122mmqq,,<<[[::FFddFF&&^^22PP', 'll##NNRRTT77nnnn++pp&&', '99..dd((QQ;;DD((LL..**', 'nnqq00CCMMEEgg``))??nnJJ$$MM$$GGGG;;,,;;>>']')
119: 1:Fire Event: PassTest{complexity=7, testCount=44}
119: 1:Fire Event: NextAlgorithm{complexity=7, time=0}
------------------------------------------
120: 1:BoardData {
120: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
120: 1:  'history': [
120: 1:    {
120: 1:      'answer': 'SSttrriinngg',
120: 1:      'question': 'String',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'HHeelllloo  WWoorrlldd',
120: 1:      'question': 'Hello World',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '11223344!!__  ',
120: 1:      'question': '1234!_ ',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '________  __  __  ____  ______  __  ________  ',
120: 1:      'question': '____ _ _ __ ___ _ ____ ',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '((--__--))',
120: 1:      'question': '(-_-)',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '112233445566',
120: 1:      'question': '123456',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'SSccrruubb  LLoorrddss',
120: 1:      'question': 'Scrub Lords',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'bbrruuhh',
120: 1:      'question': 'bruh',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'iilllluummiinnaattii',
120: 1:      'question': 'illuminati',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'AAddiiddaass',
120: 1:      'question': 'Adidas',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '!!##%%GG##DDGGYY^^RRCC',
120: 1:      'question': '!#%G#DGY^RC',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'DDoonnaalldd  DDuucckk',
120: 1:      'question': 'Donald Duck',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'KKaannyyee  22002200',
120: 1:      'question': 'Kanye 2020',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
120: 1:      'question': 'Bernie Sanders is Bae',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'PPeeaannuutt  BBuutttteerr',
120: 1:      'question': 'Peanut Butter',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '11333377',
120: 1:      'question': '1337',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'hh**oo@@DD77aann&&  aa',
120: 1:      'question': 'h*o@D7an& a',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'YY!!SS4477YY  @@',
120: 1:      'question': 'Y!S47Y @',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '..--&&ddFFII88',
120: 1:      'question': '.-&dFI8',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '!!ZZqq++',
120: 1:      'question': '!Zq+',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
120: 1:      'question': 'g%;U*!a/[pZ4V3/&',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '77ff55nnFF==::bb88eeoo&&++77',
120: 1:      'question': '7f5nF=:b8eo&+7',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '**22SSNNmm##LLoo&&YY',
120: 1:      'question': '*2SNm#Lo&Y',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '33ZZVVmm',
120: 1:      'question': '3ZVm',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': ']]CC0066**EEcc$$6622oo!!77]][[//99',
120: 1:      'question': ']C06*Ec$62o!7][/9',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '^^qq%%]]VVooKKhhhh99jj55--',
120: 1:      'question': '^q%]VoKhh9j5-',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '$$22EEZZGGQQ',
120: 1:      'question': '$2EZGQ',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '``UU99@@hh',
120: 1:      'question': '`U9@h',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'kk^^FF  [[',
120: 1:      'question': 'k^F [',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '@@YY((--SSAAZZaa<<SS22OOSS****ii',
120: 1:      'question': '@Y(-SAZa<S2OS**i',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'hh**??RRWW__ii++<<',
120: 1:      'question': 'h*?RW_i+<',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'FFAACCBBTT++33YYCC99mm33++aa00QQ',
120: 1:      'question': 'FACBT+3YC9m3+a0Q',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'KKSS))::jjYY??++SS99',
120: 1:      'question': 'KS):jY?+S9',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'JJBBWWhh',
120: 1:      'question': 'JBWh',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'OONNmm33ll))))HH@@GGff((',
120: 1:      'question': 'ONm3l))H@Gf(',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'ffkk66KKgg  77&&',
120: 1:      'question': 'fk6Kg 7&',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '**AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
120: 1:      'question': '*A&2SJUb#(Vc(OjC`W1',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '``SS99OONNuu000011EE8833++!!',
120: 1:      'question': '`S9ONu001E83+!',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '((YYQQ^^//22]]77cc$$88LL**,,]]::++',
120: 1:      'question': '(YQ^/2]7c$8L*,]:+',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '77PPllaa  GG33**CC[[==%%``dd==ll$$',
120: 1:      'question': '7Pla G3*C[=%`d=l$',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '1122mmqq,,<<[[::FFddFF&&^^22PP',
120: 1:      'question': '12mq,<[:FdF&^2P',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'll##NNRRTT77nnnn++pp&&',
120: 1:      'question': 'l#NRT7nn+p&',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': '99..dd((QQ;;DD((LL..**',
120: 1:      'question': '9.d(Q;D(L.*',
120: 1:      'valid': true
120: 1:    },
120: 1:    {
120: 1:      'answer': 'nnqq00CCMMEEgg``))??nnJJ$$MM$$GGGG;;,,;;>>',
120: 1:      'question': 'nq0CMEg`)?nJ$M$GG;,;>',
120: 1:      'valid': true
120: 1:    }
120: 1:  ],
120: 1:  'info': [
120: 1:    '✅f(String) = SSttrriinngg',
120: 1:    '✅f(Hello World) = HHeelllloo  WWoorrlldd',
120: 1:    '✅f(1234!_ ) = 11223344!!__  ',
120: 1:    '✅f(____ _ _ __ ___ _ ____ ) = ________  __  __  ____  ______  __  ________  ',
120: 1:    '✅f((-_-)) = ((--__--))',
120: 1:    '✅f(123456) = 112233445566',
120: 1:    '✅f(Scrub Lords) = SSccrruubb  LLoorrddss',
120: 1:    '✅f(bruh) = bbrruuhh',
120: 1:    '✅f(illuminati) = iilllluummiinnaattii',
120: 1:    '✅f(Adidas) = AAddiiddaass',
120: 1:    '✅f(!#%G#DGY^RC) = !!##%%GG##DDGGYY^^RRCC',
120: 1:    '✅f(Donald Duck) = DDoonnaalldd  DDuucckk',
120: 1:    '✅f(Kanye 2020) = KKaannyyee  22002200',
120: 1:    '✅f(Bernie Sanders is Bae) = BBeerrnniiee  SSaannddeerrss  iiss  BBaaee',
120: 1:    '✅f(Peanut Butter) = PPeeaannuutt  BBuutttteerr',
120: 1:    '✅f(1337) = 11333377',
120: 1:    '✅f(h*o@D7an& a) = hh**oo@@DD77aann&&  aa',
120: 1:    '✅f(Y!S47Y @) = YY!!SS4477YY  @@',
120: 1:    '✅f(.-&dFI8) = ..--&&ddFFII88',
120: 1:    '✅f(!Zq+) = !!ZZqq++',
120: 1:    '✅f(g%;U*!a/[pZ4V3/&) = gg%%;;UU**!!aa//[[ppZZ44VV33//&&',
120: 1:    '✅f(7f5nF=:b8eo&+7) = 77ff55nnFF==::bb88eeoo&&++77',
120: 1:    '✅f(*2SNm#Lo&Y) = **22SSNNmm##LLoo&&YY',
120: 1:    '✅f(3ZVm) = 33ZZVVmm',
120: 1:    '✅f(]C06*Ec$62o!7][/9) = ]]CC0066**EEcc$$6622oo!!77]][[//99',
120: 1:    '✅f(^q%]VoKhh9j5-) = ^^qq%%]]VVooKKhhhh99jj55--',
120: 1:    '✅f($2EZGQ) = $$22EEZZGGQQ',
120: 1:    '✅f(`U9@h) = ``UU99@@hh',
120: 1:    '✅f(k^F [) = kk^^FF  [[',
120: 1:    '✅f(@Y(-SAZa<S2OS**i) = @@YY((--SSAAZZaa<<SS22OOSS****ii',
120: 1:    '✅f(h*?RW_i+<) = hh**??RRWW__ii++<<',
120: 1:    '✅f(FACBT+3YC9m3+a0Q) = FFAACCBBTT++33YYCC99mm33++aa00QQ',
120: 1:    '✅f(KS):jY?+S9) = KKSS))::jjYY??++SS99',
120: 1:    '✅f(JBWh) = JJBBWWhh',
120: 1:    '✅f(ONm3l))H@Gf() = OONNmm33ll))))HH@@GGff((',
120: 1:    '✅f(fk6Kg 7&) = ffkk66KKgg  77&&',
120: 1:    '✅f(*A&2SJUb#(Vc(OjC`W1) = **AA&&22SSJJUUbb##((VVcc((OOjjCC``WW11',
120: 1:    '✅f(`S9ONu001E83+!) = ``SS99OONNuu000011EE8833++!!',
120: 1:    '✅f((YQ^/2]7c$8L*,]:+) = ((YYQQ^^//22]]77cc$$88LL**,,]]::++',
120: 1:    '✅f(7Pla G3*C[=%`d=l$) = 77PPllaa  GG33**CC[[==%%``dd==ll$$',
120: 1:    '✅f(12mq,<[:FdF&^2P) = 1122mmqq,,<<[[::FFddFF&&^^22PP',
120: 1:    '✅f(l#NRT7nn+p&) = ll##NNRRTT77nnnn++pp&&',
120: 1:    '✅f(9.d(Q;D(L.*) = 99..dd((QQ;;DD((LL..**',
120: 1:    '✅f(nq0CMEg`)?nJ$M$GG;,;>) = nnqq00CCMMEEgg``))??nnJJ$$MM$$GGGG;;,,;;>>'
120: 1:  ],
120: 1:  'level': 3,
120: 1:  'questions': []
120: 1:}
120: 1:Scores: 2569
120: 1:Answer: message('StartNextLevel')
120: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
121: 1:BoardData {
121: 1:  'description': ['Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?'],
121: 1:  'expectedAnswer': '1',
121: 1:  'history': [],
121: 1:  'info': ['❌f(0) = ??? != 1'],
121: 1:  'level': 4,
121: 1:  'nextQuestion': '0',
121: 1:  'questions': ['0']
121: 1:}
121: 1:Scores: 2569
121: 1:Answer: message('['1']')
121: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
122: 1:BoardData {
122: 1:  'description': ['Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?'],
122: 1:  'expectedAnswer': '0',
122: 1:  'history': [{
122: 1:    'answer': '1',
122: 1:    'question': '0',
122: 1:    'valid': true
122: 1:  }],
122: 1:  'info': [
122: 1:    '✅f(0) = 1',
122: 1:    '❌f(1) = ??? != 0'
122: 1:  ],
122: 1:  'level': 4,
122: 1:  'nextQuestion': '1',
122: 1:  'questions': [
122: 1:    '0',
122: 1:    '1'
122: 1:  ]
122: 1:}
122: 1:Scores: 2572
122: 1:Answer: message('['1', '0']')
122: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
123: 1:BoardData {
123: 1:  'description': ['Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?'],
123: 1:  'expectedAnswer': '3',
123: 1:  'history': [
123: 1:    {
123: 1:      'answer': '1',
123: 1:      'question': '0',
123: 1:      'valid': true
123: 1:    },
123: 1:    {
123: 1:      'answer': '0',
123: 1:      'question': '1',
123: 1:      'valid': true
123: 1:    }
123: 1:  ],
123: 1:  'info': [
123: 1:    '✅f(0) = 1',
123: 1:    '✅f(1) = 0',
123: 1:    '❌f(2) = ??? != 3'
123: 1:  ],
123: 1:  'level': 4,
123: 1:  'nextQuestion': '2',
123: 1:  'questions': [
123: 1:    '0',
123: 1:    '1',
123: 1:    '2'
123: 1:  ]
123: 1:}
123: 1:Scores: 2575
123: 1:Answer: message('['1', '0', '3']')
123: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
124: 1:BoardData {
124: 1:  'description': ['Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?'],
124: 1:  'expectedAnswer': '2',
124: 1:  'history': [
124: 1:    {
124: 1:      'answer': '1',
124: 1:      'question': '0',
124: 1:      'valid': true
124: 1:    },
124: 1:    {
124: 1:      'answer': '0',
124: 1:      'question': '1',
124: 1:      'valid': true
124: 1:    },
124: 1:    {
124: 1:      'answer': '3',
124: 1:      'question': '2',
124: 1:      'valid': true
124: 1:    }
124: 1:  ],
124: 1:  'info': [
124: 1:    '✅f(0) = 1',
124: 1:    '✅f(1) = 0',
124: 1:    '✅f(2) = 3',
124: 1:    '❌f(3) = ??? != 2'
124: 1:  ],
124: 1:  'level': 4,
124: 1:  'nextQuestion': '3',
124: 1:  'questions': [
124: 1:    '0',
124: 1:    '1',
124: 1:    '2',
124: 1:    '3'
124: 1:  ]
124: 1:}
124: 1:Scores: 2578
124: 1:Answer: message('['1', '0', '3', '2']')
124: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
125: 1:BoardData {
125: 1:  'description': ['Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?'],
125: 1:  'expectedAnswer': '4',
125: 1:  'history': [
125: 1:    {
125: 1:      'answer': '1',
125: 1:      'question': '0',
125: 1:      'valid': true
125: 1:    },
125: 1:    {
125: 1:      'answer': '0',
125: 1:      'question': '1',
125: 1:      'valid': true
125: 1:    },
125: 1:    {
125: 1:      'answer': '3',
125: 1:      'question': '2',
125: 1:      'valid': true
125: 1:    },
125: 1:    {
125: 1:      'answer': '2',
125: 1:      'question': '3',
125: 1:      'valid': true
125: 1:    }
125: 1:  ],
125: 1:  'info': [
125: 1:    '✅f(0) = 1',
125: 1:    '✅f(1) = 0',
125: 1:    '✅f(2) = 3',
125: 1:    '✅f(3) = 2',
125: 1:    '❌f(5) = ??? != 4'
125: 1:  ],
125: 1:  'level': 4,
125: 1:  'nextQuestion': '5',
125: 1:  'questions': [
125: 1:    '0',
125: 1:    '1',
125: 1:    '2',
125: 1:    '3',
125: 1:    '5'
125: 1:  ]
125: 1:}
125: 1:Scores: 2581
125: 1:Answer: message('['1', '0', '3', '2', '4']')
125: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
126: 1:BoardData {
126: 1:  'description': ['Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?'],
126: 1:  'expectedAnswer': '6',
126: 1:  'history': [
126: 1:    {
126: 1:      'answer': '1',
126: 1:      'question': '0',
126: 1:      'valid': true
126: 1:    },
126: 1:    {
126: 1:      'answer': '0',
126: 1:      'question': '1',
126: 1:      'valid': true
126: 1:    },
126: 1:    {
126: 1:      'answer': '3',
126: 1:      'question': '2',
126: 1:      'valid': true
126: 1:    },
126: 1:    {
126: 1:      'answer': '2',
126: 1:      'question': '3',
126: 1:      'valid': true
126: 1:    },
126: 1:    {
126: 1:      'answer': '4',
126: 1:      'question': '5',
126: 1:      'valid': true
126: 1:    }
126: 1:  ],
126: 1:  'info': [
126: 1:    '✅f(0) = 1',
126: 1:    '✅f(1) = 0',
126: 1:    '✅f(2) = 3',
126: 1:    '✅f(3) = 2',
126: 1:    '✅f(5) = 4',
126: 1:    '❌f(7) = ??? != 6'
126: 1:  ],
126: 1:  'level': 4,
126: 1:  'nextQuestion': '7',
126: 1:  'questions': [
126: 1:    '0',
126: 1:    '1',
126: 1:    '2',
126: 1:    '3',
126: 1:    '5',
126: 1:    '7'
126: 1:  ]
126: 1:}
126: 1:Scores: 2584
126: 1:Answer: message('['1', '0', '3', '2', '4', '6']')
126: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
127: 1:BoardData {
127: 1:  'description': ['Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?'],
127: 1:  'expectedAnswer': '8',
127: 1:  'history': [
127: 1:    {
127: 1:      'answer': '1',
127: 1:      'question': '0',
127: 1:      'valid': true
127: 1:    },
127: 1:    {
127: 1:      'answer': '0',
127: 1:      'question': '1',
127: 1:      'valid': true
127: 1:    },
127: 1:    {
127: 1:      'answer': '3',
127: 1:      'question': '2',
127: 1:      'valid': true
127: 1:    },
127: 1:    {
127: 1:      'answer': '2',
127: 1:      'question': '3',
127: 1:      'valid': true
127: 1:    },
127: 1:    {
127: 1:      'answer': '4',
127: 1:      'question': '5',
127: 1:      'valid': true
127: 1:    },
127: 1:    {
127: 1:      'answer': '6',
127: 1:      'question': '7',
127: 1:      'valid': true
127: 1:    }
127: 1:  ],
127: 1:  'info': [
127: 1:    '✅f(0) = 1',
127: 1:    '✅f(1) = 0',
127: 1:    '✅f(2) = 3',
127: 1:    '✅f(3) = 2',
127: 1:    '✅f(5) = 4',
127: 1:    '✅f(7) = 6',
127: 1:    '❌f(9) = ??? != 8'
127: 1:  ],
127: 1:  'level': 4,
127: 1:  'nextQuestion': '9',
127: 1:  'questions': [
127: 1:    '0',
127: 1:    '1',
127: 1:    '2',
127: 1:    '3',
127: 1:    '5',
127: 1:    '7',
127: 1:    '9'
127: 1:  ]
127: 1:}
127: 1:Scores: 2587
127: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8']')
127: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
128: 1:BoardData {
128: 1:  'description': ['Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?'],
128: 1:  'expectedAnswer': '10',
128: 1:  'history': [
128: 1:    {
128: 1:      'answer': '1',
128: 1:      'question': '0',
128: 1:      'valid': true
128: 1:    },
128: 1:    {
128: 1:      'answer': '0',
128: 1:      'question': '1',
128: 1:      'valid': true
128: 1:    },
128: 1:    {
128: 1:      'answer': '3',
128: 1:      'question': '2',
128: 1:      'valid': true
128: 1:    },
128: 1:    {
128: 1:      'answer': '2',
128: 1:      'question': '3',
128: 1:      'valid': true
128: 1:    },
128: 1:    {
128: 1:      'answer': '4',
128: 1:      'question': '5',
128: 1:      'valid': true
128: 1:    },
128: 1:    {
128: 1:      'answer': '6',
128: 1:      'question': '7',
128: 1:      'valid': true
128: 1:    },
128: 1:    {
128: 1:      'answer': '8',
128: 1:      'question': '9',
128: 1:      'valid': true
128: 1:    }
128: 1:  ],
128: 1:  'info': [
128: 1:    '✅f(0) = 1',
128: 1:    '✅f(1) = 0',
128: 1:    '✅f(2) = 3',
128: 1:    '✅f(3) = 2',
128: 1:    '✅f(5) = 4',
128: 1:    '✅f(7) = 6',
128: 1:    '✅f(9) = 8',
128: 1:    '❌f(11) = ??? != 10'
128: 1:  ],
128: 1:  'level': 4,
128: 1:  'nextQuestion': '11',
128: 1:  'questions': [
128: 1:    '0',
128: 1:    '1',
128: 1:    '2',
128: 1:    '3',
128: 1:    '5',
128: 1:    '7',
128: 1:    '9',
128: 1:    '11'
128: 1:  ]
128: 1:}
128: 1:Scores: 2590
128: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10']')
128: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
129: 1:BoardData {
129: 1:  'description': ['Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?'],
129: 1:  'expectedAnswer': '15',
129: 1:  'history': [
129: 1:    {
129: 1:      'answer': '1',
129: 1:      'question': '0',
129: 1:      'valid': true
129: 1:    },
129: 1:    {
129: 1:      'answer': '0',
129: 1:      'question': '1',
129: 1:      'valid': true
129: 1:    },
129: 1:    {
129: 1:      'answer': '3',
129: 1:      'question': '2',
129: 1:      'valid': true
129: 1:    },
129: 1:    {
129: 1:      'answer': '2',
129: 1:      'question': '3',
129: 1:      'valid': true
129: 1:    },
129: 1:    {
129: 1:      'answer': '4',
129: 1:      'question': '5',
129: 1:      'valid': true
129: 1:    },
129: 1:    {
129: 1:      'answer': '6',
129: 1:      'question': '7',
129: 1:      'valid': true
129: 1:    },
129: 1:    {
129: 1:      'answer': '8',
129: 1:      'question': '9',
129: 1:      'valid': true
129: 1:    },
129: 1:    {
129: 1:      'answer': '10',
129: 1:      'question': '11',
129: 1:      'valid': true
129: 1:    }
129: 1:  ],
129: 1:  'info': [
129: 1:    '✅f(0) = 1',
129: 1:    '✅f(1) = 0',
129: 1:    '✅f(2) = 3',
129: 1:    '✅f(3) = 2',
129: 1:    '✅f(5) = 4',
129: 1:    '✅f(7) = 6',
129: 1:    '✅f(9) = 8',
129: 1:    '✅f(11) = 10',
129: 1:    '❌f(14) = ??? != 15'
129: 1:  ],
129: 1:  'level': 4,
129: 1:  'nextQuestion': '14',
129: 1:  'questions': [
129: 1:    '0',
129: 1:    '1',
129: 1:    '2',
129: 1:    '3',
129: 1:    '5',
129: 1:    '7',
129: 1:    '9',
129: 1:    '11',
129: 1:    '14'
129: 1:  ]
129: 1:}
129: 1:Scores: 2593
129: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15']')
129: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
130: 1:BoardData {
130: 1:  'description': ['Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?'],
130: 1:  'expectedAnswer': '16',
130: 1:  'history': [
130: 1:    {
130: 1:      'answer': '1',
130: 1:      'question': '0',
130: 1:      'valid': true
130: 1:    },
130: 1:    {
130: 1:      'answer': '0',
130: 1:      'question': '1',
130: 1:      'valid': true
130: 1:    },
130: 1:    {
130: 1:      'answer': '3',
130: 1:      'question': '2',
130: 1:      'valid': true
130: 1:    },
130: 1:    {
130: 1:      'answer': '2',
130: 1:      'question': '3',
130: 1:      'valid': true
130: 1:    },
130: 1:    {
130: 1:      'answer': '4',
130: 1:      'question': '5',
130: 1:      'valid': true
130: 1:    },
130: 1:    {
130: 1:      'answer': '6',
130: 1:      'question': '7',
130: 1:      'valid': true
130: 1:    },
130: 1:    {
130: 1:      'answer': '8',
130: 1:      'question': '9',
130: 1:      'valid': true
130: 1:    },
130: 1:    {
130: 1:      'answer': '10',
130: 1:      'question': '11',
130: 1:      'valid': true
130: 1:    },
130: 1:    {
130: 1:      'answer': '15',
130: 1:      'question': '14',
130: 1:      'valid': true
130: 1:    }
130: 1:  ],
130: 1:  'info': [
130: 1:    '✅f(0) = 1',
130: 1:    '✅f(1) = 0',
130: 1:    '✅f(2) = 3',
130: 1:    '✅f(3) = 2',
130: 1:    '✅f(5) = 4',
130: 1:    '✅f(7) = 6',
130: 1:    '✅f(9) = 8',
130: 1:    '✅f(11) = 10',
130: 1:    '✅f(14) = 15',
130: 1:    '❌f(17) = ??? != 16'
130: 1:  ],
130: 1:  'level': 4,
130: 1:  'nextQuestion': '17',
130: 1:  'questions': [
130: 1:    '0',
130: 1:    '1',
130: 1:    '2',
130: 1:    '3',
130: 1:    '5',
130: 1:    '7',
130: 1:    '9',
130: 1:    '11',
130: 1:    '14',
130: 1:    '17'
130: 1:  ]
130: 1:}
130: 1:Scores: 2596
130: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16']')
130: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
131: 1:BoardData {
131: 1:  'description': ['Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?'],
131: 1:  'expectedAnswer': '21',
131: 1:  'history': [
131: 1:    {
131: 1:      'answer': '1',
131: 1:      'question': '0',
131: 1:      'valid': true
131: 1:    },
131: 1:    {
131: 1:      'answer': '0',
131: 1:      'question': '1',
131: 1:      'valid': true
131: 1:    },
131: 1:    {
131: 1:      'answer': '3',
131: 1:      'question': '2',
131: 1:      'valid': true
131: 1:    },
131: 1:    {
131: 1:      'answer': '2',
131: 1:      'question': '3',
131: 1:      'valid': true
131: 1:    },
131: 1:    {
131: 1:      'answer': '4',
131: 1:      'question': '5',
131: 1:      'valid': true
131: 1:    },
131: 1:    {
131: 1:      'answer': '6',
131: 1:      'question': '7',
131: 1:      'valid': true
131: 1:    },
131: 1:    {
131: 1:      'answer': '8',
131: 1:      'question': '9',
131: 1:      'valid': true
131: 1:    },
131: 1:    {
131: 1:      'answer': '10',
131: 1:      'question': '11',
131: 1:      'valid': true
131: 1:    },
131: 1:    {
131: 1:      'answer': '15',
131: 1:      'question': '14',
131: 1:      'valid': true
131: 1:    },
131: 1:    {
131: 1:      'answer': '16',
131: 1:      'question': '17',
131: 1:      'valid': true
131: 1:    }
131: 1:  ],
131: 1:  'info': [
131: 1:    '✅f(0) = 1',
131: 1:    '✅f(1) = 0',
131: 1:    '✅f(2) = 3',
131: 1:    '✅f(3) = 2',
131: 1:    '✅f(5) = 4',
131: 1:    '✅f(7) = 6',
131: 1:    '✅f(9) = 8',
131: 1:    '✅f(11) = 10',
131: 1:    '✅f(14) = 15',
131: 1:    '✅f(17) = 16',
131: 1:    '❌f(20) = ??? != 21'
131: 1:  ],
131: 1:  'level': 4,
131: 1:  'nextQuestion': '20',
131: 1:  'questions': [
131: 1:    '0',
131: 1:    '1',
131: 1:    '2',
131: 1:    '3',
131: 1:    '5',
131: 1:    '7',
131: 1:    '9',
131: 1:    '11',
131: 1:    '14',
131: 1:    '17',
131: 1:    '20'
131: 1:  ]
131: 1:}
131: 1:Scores: 2599
131: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21']')
131: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
132: 1:BoardData {
132: 1:  'description': ['Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?'],
132: 1:  'expectedAnswer': '22',
132: 1:  'history': [
132: 1:    {
132: 1:      'answer': '1',
132: 1:      'question': '0',
132: 1:      'valid': true
132: 1:    },
132: 1:    {
132: 1:      'answer': '0',
132: 1:      'question': '1',
132: 1:      'valid': true
132: 1:    },
132: 1:    {
132: 1:      'answer': '3',
132: 1:      'question': '2',
132: 1:      'valid': true
132: 1:    },
132: 1:    {
132: 1:      'answer': '2',
132: 1:      'question': '3',
132: 1:      'valid': true
132: 1:    },
132: 1:    {
132: 1:      'answer': '4',
132: 1:      'question': '5',
132: 1:      'valid': true
132: 1:    },
132: 1:    {
132: 1:      'answer': '6',
132: 1:      'question': '7',
132: 1:      'valid': true
132: 1:    },
132: 1:    {
132: 1:      'answer': '8',
132: 1:      'question': '9',
132: 1:      'valid': true
132: 1:    },
132: 1:    {
132: 1:      'answer': '10',
132: 1:      'question': '11',
132: 1:      'valid': true
132: 1:    },
132: 1:    {
132: 1:      'answer': '15',
132: 1:      'question': '14',
132: 1:      'valid': true
132: 1:    },
132: 1:    {
132: 1:      'answer': '16',
132: 1:      'question': '17',
132: 1:      'valid': true
132: 1:    },
132: 1:    {
132: 1:      'answer': '21',
132: 1:      'question': '20',
132: 1:      'valid': true
132: 1:    }
132: 1:  ],
132: 1:  'info': [
132: 1:    '✅f(0) = 1',
132: 1:    '✅f(1) = 0',
132: 1:    '✅f(2) = 3',
132: 1:    '✅f(3) = 2',
132: 1:    '✅f(5) = 4',
132: 1:    '✅f(7) = 6',
132: 1:    '✅f(9) = 8',
132: 1:    '✅f(11) = 10',
132: 1:    '✅f(14) = 15',
132: 1:    '✅f(17) = 16',
132: 1:    '✅f(20) = 21',
132: 1:    '❌f(23) = ??? != 22'
132: 1:  ],
132: 1:  'level': 4,
132: 1:  'nextQuestion': '23',
132: 1:  'questions': [
132: 1:    '0',
132: 1:    '1',
132: 1:    '2',
132: 1:    '3',
132: 1:    '5',
132: 1:    '7',
132: 1:    '9',
132: 1:    '11',
132: 1:    '14',
132: 1:    '17',
132: 1:    '20',
132: 1:    '23'
132: 1:  ]
132: 1:}
132: 1:Scores: 2602
132: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22']')
132: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
133: 1:BoardData {
133: 1:  'description': ['Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?'],
133: 1:  'expectedAnswer': '27',
133: 1:  'history': [
133: 1:    {
133: 1:      'answer': '1',
133: 1:      'question': '0',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '0',
133: 1:      'question': '1',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '3',
133: 1:      'question': '2',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '2',
133: 1:      'question': '3',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '4',
133: 1:      'question': '5',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '6',
133: 1:      'question': '7',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '8',
133: 1:      'question': '9',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '10',
133: 1:      'question': '11',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '15',
133: 1:      'question': '14',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '16',
133: 1:      'question': '17',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '21',
133: 1:      'question': '20',
133: 1:      'valid': true
133: 1:    },
133: 1:    {
133: 1:      'answer': '22',
133: 1:      'question': '23',
133: 1:      'valid': true
133: 1:    }
133: 1:  ],
133: 1:  'info': [
133: 1:    '✅f(0) = 1',
133: 1:    '✅f(1) = 0',
133: 1:    '✅f(2) = 3',
133: 1:    '✅f(3) = 2',
133: 1:    '✅f(5) = 4',
133: 1:    '✅f(7) = 6',
133: 1:    '✅f(9) = 8',
133: 1:    '✅f(11) = 10',
133: 1:    '✅f(14) = 15',
133: 1:    '✅f(17) = 16',
133: 1:    '✅f(20) = 21',
133: 1:    '✅f(23) = 22',
133: 1:    '❌f(26) = ??? != 27'
133: 1:  ],
133: 1:  'level': 4,
133: 1:  'nextQuestion': '26',
133: 1:  'questions': [
133: 1:    '0',
133: 1:    '1',
133: 1:    '2',
133: 1:    '3',
133: 1:    '5',
133: 1:    '7',
133: 1:    '9',
133: 1:    '11',
133: 1:    '14',
133: 1:    '17',
133: 1:    '20',
133: 1:    '23',
133: 1:    '26'
133: 1:  ]
133: 1:}
133: 1:Scores: 2605
133: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27']')
133: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
134: 1:BoardData {
134: 1:  'description': ['Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?'],
134: 1:  'expectedAnswer': '28',
134: 1:  'history': [
134: 1:    {
134: 1:      'answer': '1',
134: 1:      'question': '0',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '0',
134: 1:      'question': '1',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '3',
134: 1:      'question': '2',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '2',
134: 1:      'question': '3',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '4',
134: 1:      'question': '5',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '6',
134: 1:      'question': '7',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '8',
134: 1:      'question': '9',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '10',
134: 1:      'question': '11',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '15',
134: 1:      'question': '14',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '16',
134: 1:      'question': '17',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '21',
134: 1:      'question': '20',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '22',
134: 1:      'question': '23',
134: 1:      'valid': true
134: 1:    },
134: 1:    {
134: 1:      'answer': '27',
134: 1:      'question': '26',
134: 1:      'valid': true
134: 1:    }
134: 1:  ],
134: 1:  'info': [
134: 1:    '✅f(0) = 1',
134: 1:    '✅f(1) = 0',
134: 1:    '✅f(2) = 3',
134: 1:    '✅f(3) = 2',
134: 1:    '✅f(5) = 4',
134: 1:    '✅f(7) = 6',
134: 1:    '✅f(9) = 8',
134: 1:    '✅f(11) = 10',
134: 1:    '✅f(14) = 15',
134: 1:    '✅f(17) = 16',
134: 1:    '✅f(20) = 21',
134: 1:    '✅f(23) = 22',
134: 1:    '✅f(26) = 27',
134: 1:    '❌f(29) = ??? != 28'
134: 1:  ],
134: 1:  'level': 4,
134: 1:  'nextQuestion': '29',
134: 1:  'questions': [
134: 1:    '0',
134: 1:    '1',
134: 1:    '2',
134: 1:    '3',
134: 1:    '5',
134: 1:    '7',
134: 1:    '9',
134: 1:    '11',
134: 1:    '14',
134: 1:    '17',
134: 1:    '20',
134: 1:    '23',
134: 1:    '26',
134: 1:    '29'
134: 1:  ]
134: 1:}
134: 1:Scores: 2608
134: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28']')
134: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
135: 1:BoardData {
135: 1:  'description': ['Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?'],
135: 1:  'expectedAnswer': '32',
135: 1:  'history': [
135: 1:    {
135: 1:      'answer': '1',
135: 1:      'question': '0',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '0',
135: 1:      'question': '1',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '3',
135: 1:      'question': '2',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '2',
135: 1:      'question': '3',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '4',
135: 1:      'question': '5',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '6',
135: 1:      'question': '7',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '8',
135: 1:      'question': '9',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '10',
135: 1:      'question': '11',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '15',
135: 1:      'question': '14',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '16',
135: 1:      'question': '17',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '21',
135: 1:      'question': '20',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '22',
135: 1:      'question': '23',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '27',
135: 1:      'question': '26',
135: 1:      'valid': true
135: 1:    },
135: 1:    {
135: 1:      'answer': '28',
135: 1:      'question': '29',
135: 1:      'valid': true
135: 1:    }
135: 1:  ],
135: 1:  'info': [
135: 1:    '✅f(0) = 1',
135: 1:    '✅f(1) = 0',
135: 1:    '✅f(2) = 3',
135: 1:    '✅f(3) = 2',
135: 1:    '✅f(5) = 4',
135: 1:    '✅f(7) = 6',
135: 1:    '✅f(9) = 8',
135: 1:    '✅f(11) = 10',
135: 1:    '✅f(14) = 15',
135: 1:    '✅f(17) = 16',
135: 1:    '✅f(20) = 21',
135: 1:    '✅f(23) = 22',
135: 1:    '✅f(26) = 27',
135: 1:    '✅f(29) = 28',
135: 1:    '❌f(33) = ??? != 32'
135: 1:  ],
135: 1:  'level': 4,
135: 1:  'nextQuestion': '33',
135: 1:  'questions': [
135: 1:    '0',
135: 1:    '1',
135: 1:    '2',
135: 1:    '3',
135: 1:    '5',
135: 1:    '7',
135: 1:    '9',
135: 1:    '11',
135: 1:    '14',
135: 1:    '17',
135: 1:    '20',
135: 1:    '23',
135: 1:    '26',
135: 1:    '29',
135: 1:    '33'
135: 1:  ]
135: 1:}
135: 1:Scores: 2611
135: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32']')
135: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
136: 1:BoardData {
136: 1:  'description': ['Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?'],
136: 1:  'expectedAnswer': '36',
136: 1:  'history': [
136: 1:    {
136: 1:      'answer': '1',
136: 1:      'question': '0',
136: 1:      'valid': true
136: 1:    },
136: 1:    {
136: 1:      'answer': '0',
136: 1:      'question': '1',
136: 1:      'valid': true
136: 1:    },
136: 1:    {
136: 1:      'answer': '3',
136: 1:      'question': '2',
136: 1:      'valid': true
136: 1:    },
136: 1:    {
136: 1:      'answer': '2',
136: 1:      'question': '3',
136: 1:      'valid': true
136: 1:    },
136: 1:    {
136: 1:      'answer': '4',
136: 1:      'question': '5',
136: 1:      'valid': true
136: 1:    },
136: 1:    {
136: 1:      'answer': '6',
136: 1:      'question': '7',
136: 1:      'valid': true
136: 1:    },
136: 1:    {
136: 1:      'answer': '8',
136: 1:      'question': '9',
136: 1:      'valid': true
136: 1:    },
136: 1:    {
136: 1:      'answer': '10',
136: 1:      'question': '11',
136: 1:      'valid': true
136: 1:    },
136: 1:    {
136: 1:      'answer': '15',
136: 1:      'question': '14',
136: 1:      'valid': true
136: 1:    },
136: 1:    {
136: 1:      'answer': '16',
136: 1:      'question': '17',
136: 1:      'valid': true
136: 1:    },
136: 1:    {
136: 1:      'answer': '21',
136: 1:      'question': '20',
136: 1:      'valid': true
136: 1:    },
136: 1:    {
136: 1:      'answer': '22',
136: 1:      'question': '23',
136: 1:      'valid': true
136: 1:    },
136: 1:    {
136: 1:      'answer': '27',
136: 1:      'question': '26',
136: 1:      'valid': true
136: 1:    },
136: 1:    {
136: 1:      'answer': '28',
136: 1:      'question': '29',
136: 1:      'valid': true
136: 1:    },
136: 1:    {
136: 1:      'answer': '32',
136: 1:      'question': '33',
136: 1:      'valid': true
136: 1:    }
136: 1:  ],
136: 1:  'info': [
136: 1:    '✅f(0) = 1',
136: 1:    '✅f(1) = 0',
136: 1:    '✅f(2) = 3',
136: 1:    '✅f(3) = 2',
136: 1:    '✅f(5) = 4',
136: 1:    '✅f(7) = 6',
136: 1:    '✅f(9) = 8',
136: 1:    '✅f(11) = 10',
136: 1:    '✅f(14) = 15',
136: 1:    '✅f(17) = 16',
136: 1:    '✅f(20) = 21',
136: 1:    '✅f(23) = 22',
136: 1:    '✅f(26) = 27',
136: 1:    '✅f(29) = 28',
136: 1:    '✅f(33) = 32',
136: 1:    '❌f(37) = ??? != 36'
136: 1:  ],
136: 1:  'level': 4,
136: 1:  'nextQuestion': '37',
136: 1:  'questions': [
136: 1:    '0',
136: 1:    '1',
136: 1:    '2',
136: 1:    '3',
136: 1:    '5',
136: 1:    '7',
136: 1:    '9',
136: 1:    '11',
136: 1:    '14',
136: 1:    '17',
136: 1:    '20',
136: 1:    '23',
136: 1:    '26',
136: 1:    '29',
136: 1:    '33',
136: 1:    '37'
136: 1:  ]
136: 1:}
136: 1:Scores: 2614
136: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36']')
136: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
137: 1:BoardData {
137: 1:  'description': ['Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?'],
137: 1:  'expectedAnswer': '40',
137: 1:  'history': [
137: 1:    {
137: 1:      'answer': '1',
137: 1:      'question': '0',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '0',
137: 1:      'question': '1',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '3',
137: 1:      'question': '2',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '2',
137: 1:      'question': '3',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '4',
137: 1:      'question': '5',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '6',
137: 1:      'question': '7',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '8',
137: 1:      'question': '9',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '10',
137: 1:      'question': '11',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '15',
137: 1:      'question': '14',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '16',
137: 1:      'question': '17',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '21',
137: 1:      'question': '20',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '22',
137: 1:      'question': '23',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '27',
137: 1:      'question': '26',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '28',
137: 1:      'question': '29',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '32',
137: 1:      'question': '33',
137: 1:      'valid': true
137: 1:    },
137: 1:    {
137: 1:      'answer': '36',
137: 1:      'question': '37',
137: 1:      'valid': true
137: 1:    }
137: 1:  ],
137: 1:  'info': [
137: 1:    '✅f(0) = 1',
137: 1:    '✅f(1) = 0',
137: 1:    '✅f(2) = 3',
137: 1:    '✅f(3) = 2',
137: 1:    '✅f(5) = 4',
137: 1:    '✅f(7) = 6',
137: 1:    '✅f(9) = 8',
137: 1:    '✅f(11) = 10',
137: 1:    '✅f(14) = 15',
137: 1:    '✅f(17) = 16',
137: 1:    '✅f(20) = 21',
137: 1:    '✅f(23) = 22',
137: 1:    '✅f(26) = 27',
137: 1:    '✅f(29) = 28',
137: 1:    '✅f(33) = 32',
137: 1:    '✅f(37) = 36',
137: 1:    '❌f(41) = ??? != 40'
137: 1:  ],
137: 1:  'level': 4,
137: 1:  'nextQuestion': '41',
137: 1:  'questions': [
137: 1:    '0',
137: 1:    '1',
137: 1:    '2',
137: 1:    '3',
137: 1:    '5',
137: 1:    '7',
137: 1:    '9',
137: 1:    '11',
137: 1:    '14',
137: 1:    '17',
137: 1:    '20',
137: 1:    '23',
137: 1:    '26',
137: 1:    '29',
137: 1:    '33',
137: 1:    '37',
137: 1:    '41'
137: 1:  ]
137: 1:}
137: 1:Scores: 2617
137: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40']')
137: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
138: 1:BoardData {
138: 1:  'description': ['Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?'],
138: 1:  'expectedAnswer': '44',
138: 1:  'history': [
138: 1:    {
138: 1:      'answer': '1',
138: 1:      'question': '0',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '0',
138: 1:      'question': '1',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '3',
138: 1:      'question': '2',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '2',
138: 1:      'question': '3',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '4',
138: 1:      'question': '5',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '6',
138: 1:      'question': '7',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '8',
138: 1:      'question': '9',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '10',
138: 1:      'question': '11',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '15',
138: 1:      'question': '14',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '16',
138: 1:      'question': '17',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '21',
138: 1:      'question': '20',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '22',
138: 1:      'question': '23',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '27',
138: 1:      'question': '26',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '28',
138: 1:      'question': '29',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '32',
138: 1:      'question': '33',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '36',
138: 1:      'question': '37',
138: 1:      'valid': true
138: 1:    },
138: 1:    {
138: 1:      'answer': '40',
138: 1:      'question': '41',
138: 1:      'valid': true
138: 1:    }
138: 1:  ],
138: 1:  'info': [
138: 1:    '✅f(0) = 1',
138: 1:    '✅f(1) = 0',
138: 1:    '✅f(2) = 3',
138: 1:    '✅f(3) = 2',
138: 1:    '✅f(5) = 4',
138: 1:    '✅f(7) = 6',
138: 1:    '✅f(9) = 8',
138: 1:    '✅f(11) = 10',
138: 1:    '✅f(14) = 15',
138: 1:    '✅f(17) = 16',
138: 1:    '✅f(20) = 21',
138: 1:    '✅f(23) = 22',
138: 1:    '✅f(26) = 27',
138: 1:    '✅f(29) = 28',
138: 1:    '✅f(33) = 32',
138: 1:    '✅f(37) = 36',
138: 1:    '✅f(41) = 40',
138: 1:    '❌f(45) = ??? != 44'
138: 1:  ],
138: 1:  'level': 4,
138: 1:  'nextQuestion': '45',
138: 1:  'questions': [
138: 1:    '0',
138: 1:    '1',
138: 1:    '2',
138: 1:    '3',
138: 1:    '5',
138: 1:    '7',
138: 1:    '9',
138: 1:    '11',
138: 1:    '14',
138: 1:    '17',
138: 1:    '20',
138: 1:    '23',
138: 1:    '26',
138: 1:    '29',
138: 1:    '33',
138: 1:    '37',
138: 1:    '41',
138: 1:    '45'
138: 1:  ]
138: 1:}
138: 1:Scores: 2620
138: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44']')
138: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
139: 1:BoardData {
139: 1:  'description': ['Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?'],
139: 1:  'expectedAnswer': '51',
139: 1:  'history': [
139: 1:    {
139: 1:      'answer': '1',
139: 1:      'question': '0',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '0',
139: 1:      'question': '1',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '3',
139: 1:      'question': '2',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '2',
139: 1:      'question': '3',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '4',
139: 1:      'question': '5',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '6',
139: 1:      'question': '7',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '8',
139: 1:      'question': '9',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '10',
139: 1:      'question': '11',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '15',
139: 1:      'question': '14',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '16',
139: 1:      'question': '17',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '21',
139: 1:      'question': '20',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '22',
139: 1:      'question': '23',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '27',
139: 1:      'question': '26',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '28',
139: 1:      'question': '29',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '32',
139: 1:      'question': '33',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '36',
139: 1:      'question': '37',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '40',
139: 1:      'question': '41',
139: 1:      'valid': true
139: 1:    },
139: 1:    {
139: 1:      'answer': '44',
139: 1:      'question': '45',
139: 1:      'valid': true
139: 1:    }
139: 1:  ],
139: 1:  'info': [
139: 1:    '✅f(0) = 1',
139: 1:    '✅f(1) = 0',
139: 1:    '✅f(2) = 3',
139: 1:    '✅f(3) = 2',
139: 1:    '✅f(5) = 4',
139: 1:    '✅f(7) = 6',
139: 1:    '✅f(9) = 8',
139: 1:    '✅f(11) = 10',
139: 1:    '✅f(14) = 15',
139: 1:    '✅f(17) = 16',
139: 1:    '✅f(20) = 21',
139: 1:    '✅f(23) = 22',
139: 1:    '✅f(26) = 27',
139: 1:    '✅f(29) = 28',
139: 1:    '✅f(33) = 32',
139: 1:    '✅f(37) = 36',
139: 1:    '✅f(41) = 40',
139: 1:    '✅f(45) = 44',
139: 1:    '❌f(50) = ??? != 51'
139: 1:  ],
139: 1:  'level': 4,
139: 1:  'nextQuestion': '50',
139: 1:  'questions': [
139: 1:    '0',
139: 1:    '1',
139: 1:    '2',
139: 1:    '3',
139: 1:    '5',
139: 1:    '7',
139: 1:    '9',
139: 1:    '11',
139: 1:    '14',
139: 1:    '17',
139: 1:    '20',
139: 1:    '23',
139: 1:    '26',
139: 1:    '29',
139: 1:    '33',
139: 1:    '37',
139: 1:    '41',
139: 1:    '45',
139: 1:    '50'
139: 1:  ]
139: 1:}
139: 1:Scores: 2623
139: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51']')
139: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
140: 1:BoardData {
140: 1:  'description': ['Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?'],
140: 1:  'expectedAnswer': '54',
140: 1:  'history': [
140: 1:    {
140: 1:      'answer': '1',
140: 1:      'question': '0',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '0',
140: 1:      'question': '1',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '3',
140: 1:      'question': '2',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '2',
140: 1:      'question': '3',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '4',
140: 1:      'question': '5',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '6',
140: 1:      'question': '7',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '8',
140: 1:      'question': '9',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '10',
140: 1:      'question': '11',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '15',
140: 1:      'question': '14',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '16',
140: 1:      'question': '17',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '21',
140: 1:      'question': '20',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '22',
140: 1:      'question': '23',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '27',
140: 1:      'question': '26',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '28',
140: 1:      'question': '29',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '32',
140: 1:      'question': '33',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '36',
140: 1:      'question': '37',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '40',
140: 1:      'question': '41',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '44',
140: 1:      'question': '45',
140: 1:      'valid': true
140: 1:    },
140: 1:    {
140: 1:      'answer': '51',
140: 1:      'question': '50',
140: 1:      'valid': true
140: 1:    }
140: 1:  ],
140: 1:  'info': [
140: 1:    '✅f(0) = 1',
140: 1:    '✅f(1) = 0',
140: 1:    '✅f(2) = 3',
140: 1:    '✅f(3) = 2',
140: 1:    '✅f(5) = 4',
140: 1:    '✅f(7) = 6',
140: 1:    '✅f(9) = 8',
140: 1:    '✅f(11) = 10',
140: 1:    '✅f(14) = 15',
140: 1:    '✅f(17) = 16',
140: 1:    '✅f(20) = 21',
140: 1:    '✅f(23) = 22',
140: 1:    '✅f(26) = 27',
140: 1:    '✅f(29) = 28',
140: 1:    '✅f(33) = 32',
140: 1:    '✅f(37) = 36',
140: 1:    '✅f(41) = 40',
140: 1:    '✅f(45) = 44',
140: 1:    '✅f(50) = 51',
140: 1:    '❌f(55) = ??? != 54'
140: 1:  ],
140: 1:  'level': 4,
140: 1:  'nextQuestion': '55',
140: 1:  'questions': [
140: 1:    '0',
140: 1:    '1',
140: 1:    '2',
140: 1:    '3',
140: 1:    '5',
140: 1:    '7',
140: 1:    '9',
140: 1:    '11',
140: 1:    '14',
140: 1:    '17',
140: 1:    '20',
140: 1:    '23',
140: 1:    '26',
140: 1:    '29',
140: 1:    '33',
140: 1:    '37',
140: 1:    '41',
140: 1:    '45',
140: 1:    '50',
140: 1:    '55'
140: 1:  ]
140: 1:}
140: 1:Scores: 2626
140: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54']')
140: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
141: 1:BoardData {
141: 1:  'description': ['Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?'],
141: 1:  'expectedAnswer': '61',
141: 1:  'history': [
141: 1:    {
141: 1:      'answer': '1',
141: 1:      'question': '0',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '0',
141: 1:      'question': '1',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '3',
141: 1:      'question': '2',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '2',
141: 1:      'question': '3',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '4',
141: 1:      'question': '5',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '6',
141: 1:      'question': '7',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '8',
141: 1:      'question': '9',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '10',
141: 1:      'question': '11',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '15',
141: 1:      'question': '14',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '16',
141: 1:      'question': '17',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '21',
141: 1:      'question': '20',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '22',
141: 1:      'question': '23',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '27',
141: 1:      'question': '26',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '28',
141: 1:      'question': '29',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '32',
141: 1:      'question': '33',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '36',
141: 1:      'question': '37',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '40',
141: 1:      'question': '41',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '44',
141: 1:      'question': '45',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '51',
141: 1:      'question': '50',
141: 1:      'valid': true
141: 1:    },
141: 1:    {
141: 1:      'answer': '54',
141: 1:      'question': '55',
141: 1:      'valid': true
141: 1:    }
141: 1:  ],
141: 1:  'info': [
141: 1:    '✅f(0) = 1',
141: 1:    '✅f(1) = 0',
141: 1:    '✅f(2) = 3',
141: 1:    '✅f(3) = 2',
141: 1:    '✅f(5) = 4',
141: 1:    '✅f(7) = 6',
141: 1:    '✅f(9) = 8',
141: 1:    '✅f(11) = 10',
141: 1:    '✅f(14) = 15',
141: 1:    '✅f(17) = 16',
141: 1:    '✅f(20) = 21',
141: 1:    '✅f(23) = 22',
141: 1:    '✅f(26) = 27',
141: 1:    '✅f(29) = 28',
141: 1:    '✅f(33) = 32',
141: 1:    '✅f(37) = 36',
141: 1:    '✅f(41) = 40',
141: 1:    '✅f(45) = 44',
141: 1:    '✅f(50) = 51',
141: 1:    '✅f(55) = 54',
141: 1:    '❌f(60) = ??? != 61'
141: 1:  ],
141: 1:  'level': 4,
141: 1:  'nextQuestion': '60',
141: 1:  'questions': [
141: 1:    '0',
141: 1:    '1',
141: 1:    '2',
141: 1:    '3',
141: 1:    '5',
141: 1:    '7',
141: 1:    '9',
141: 1:    '11',
141: 1:    '14',
141: 1:    '17',
141: 1:    '20',
141: 1:    '23',
141: 1:    '26',
141: 1:    '29',
141: 1:    '33',
141: 1:    '37',
141: 1:    '41',
141: 1:    '45',
141: 1:    '50',
141: 1:    '55',
141: 1:    '60'
141: 1:  ]
141: 1:}
141: 1:Scores: 2629
141: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61']')
141: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
142: 1:BoardData {
142: 1:  'description': ['Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?'],
142: 1:  'expectedAnswer': '64',
142: 1:  'history': [
142: 1:    {
142: 1:      'answer': '1',
142: 1:      'question': '0',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '0',
142: 1:      'question': '1',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '3',
142: 1:      'question': '2',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '2',
142: 1:      'question': '3',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '4',
142: 1:      'question': '5',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '6',
142: 1:      'question': '7',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '8',
142: 1:      'question': '9',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '10',
142: 1:      'question': '11',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '15',
142: 1:      'question': '14',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '16',
142: 1:      'question': '17',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '21',
142: 1:      'question': '20',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '22',
142: 1:      'question': '23',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '27',
142: 1:      'question': '26',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '28',
142: 1:      'question': '29',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '32',
142: 1:      'question': '33',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '36',
142: 1:      'question': '37',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '40',
142: 1:      'question': '41',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '44',
142: 1:      'question': '45',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '51',
142: 1:      'question': '50',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '54',
142: 1:      'question': '55',
142: 1:      'valid': true
142: 1:    },
142: 1:    {
142: 1:      'answer': '61',
142: 1:      'question': '60',
142: 1:      'valid': true
142: 1:    }
142: 1:  ],
142: 1:  'info': [
142: 1:    '✅f(0) = 1',
142: 1:    '✅f(1) = 0',
142: 1:    '✅f(2) = 3',
142: 1:    '✅f(3) = 2',
142: 1:    '✅f(5) = 4',
142: 1:    '✅f(7) = 6',
142: 1:    '✅f(9) = 8',
142: 1:    '✅f(11) = 10',
142: 1:    '✅f(14) = 15',
142: 1:    '✅f(17) = 16',
142: 1:    '✅f(20) = 21',
142: 1:    '✅f(23) = 22',
142: 1:    '✅f(26) = 27',
142: 1:    '✅f(29) = 28',
142: 1:    '✅f(33) = 32',
142: 1:    '✅f(37) = 36',
142: 1:    '✅f(41) = 40',
142: 1:    '✅f(45) = 44',
142: 1:    '✅f(50) = 51',
142: 1:    '✅f(55) = 54',
142: 1:    '✅f(60) = 61',
142: 1:    '❌f(65) = ??? != 64'
142: 1:  ],
142: 1:  'level': 4,
142: 1:  'nextQuestion': '65',
142: 1:  'questions': [
142: 1:    '0',
142: 1:    '1',
142: 1:    '2',
142: 1:    '3',
142: 1:    '5',
142: 1:    '7',
142: 1:    '9',
142: 1:    '11',
142: 1:    '14',
142: 1:    '17',
142: 1:    '20',
142: 1:    '23',
142: 1:    '26',
142: 1:    '29',
142: 1:    '33',
142: 1:    '37',
142: 1:    '41',
142: 1:    '45',
142: 1:    '50',
142: 1:    '55',
142: 1:    '60',
142: 1:    '65'
142: 1:  ]
142: 1:}
142: 1:Scores: 2632
142: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64']')
142: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
143: 1:BoardData {
143: 1:  'description': ['Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?'],
143: 1:  'expectedAnswer': '71',
143: 1:  'history': [
143: 1:    {
143: 1:      'answer': '1',
143: 1:      'question': '0',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '0',
143: 1:      'question': '1',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '3',
143: 1:      'question': '2',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '2',
143: 1:      'question': '3',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '4',
143: 1:      'question': '5',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '6',
143: 1:      'question': '7',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '8',
143: 1:      'question': '9',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '10',
143: 1:      'question': '11',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '15',
143: 1:      'question': '14',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '16',
143: 1:      'question': '17',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '21',
143: 1:      'question': '20',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '22',
143: 1:      'question': '23',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '27',
143: 1:      'question': '26',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '28',
143: 1:      'question': '29',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '32',
143: 1:      'question': '33',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '36',
143: 1:      'question': '37',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '40',
143: 1:      'question': '41',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '44',
143: 1:      'question': '45',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '51',
143: 1:      'question': '50',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '54',
143: 1:      'question': '55',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '61',
143: 1:      'question': '60',
143: 1:      'valid': true
143: 1:    },
143: 1:    {
143: 1:      'answer': '64',
143: 1:      'question': '65',
143: 1:      'valid': true
143: 1:    }
143: 1:  ],
143: 1:  'info': [
143: 1:    '✅f(0) = 1',
143: 1:    '✅f(1) = 0',
143: 1:    '✅f(2) = 3',
143: 1:    '✅f(3) = 2',
143: 1:    '✅f(5) = 4',
143: 1:    '✅f(7) = 6',
143: 1:    '✅f(9) = 8',
143: 1:    '✅f(11) = 10',
143: 1:    '✅f(14) = 15',
143: 1:    '✅f(17) = 16',
143: 1:    '✅f(20) = 21',
143: 1:    '✅f(23) = 22',
143: 1:    '✅f(26) = 27',
143: 1:    '✅f(29) = 28',
143: 1:    '✅f(33) = 32',
143: 1:    '✅f(37) = 36',
143: 1:    '✅f(41) = 40',
143: 1:    '✅f(45) = 44',
143: 1:    '✅f(50) = 51',
143: 1:    '✅f(55) = 54',
143: 1:    '✅f(60) = 61',
143: 1:    '✅f(65) = 64',
143: 1:    '❌f(70) = ??? != 71'
143: 1:  ],
143: 1:  'level': 4,
143: 1:  'nextQuestion': '70',
143: 1:  'questions': [
143: 1:    '0',
143: 1:    '1',
143: 1:    '2',
143: 1:    '3',
143: 1:    '5',
143: 1:    '7',
143: 1:    '9',
143: 1:    '11',
143: 1:    '14',
143: 1:    '17',
143: 1:    '20',
143: 1:    '23',
143: 1:    '26',
143: 1:    '29',
143: 1:    '33',
143: 1:    '37',
143: 1:    '41',
143: 1:    '45',
143: 1:    '50',
143: 1:    '55',
143: 1:    '60',
143: 1:    '65',
143: 1:    '70'
143: 1:  ]
143: 1:}
143: 1:Scores: 2635
143: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64', '71']')
143: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
144: 1:BoardData {
144: 1:  'description': ['Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?'],
144: 1:  'expectedAnswer': '74',
144: 1:  'history': [
144: 1:    {
144: 1:      'answer': '1',
144: 1:      'question': '0',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '0',
144: 1:      'question': '1',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '3',
144: 1:      'question': '2',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '2',
144: 1:      'question': '3',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '4',
144: 1:      'question': '5',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '6',
144: 1:      'question': '7',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '8',
144: 1:      'question': '9',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '10',
144: 1:      'question': '11',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '15',
144: 1:      'question': '14',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '16',
144: 1:      'question': '17',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '21',
144: 1:      'question': '20',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '22',
144: 1:      'question': '23',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '27',
144: 1:      'question': '26',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '28',
144: 1:      'question': '29',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '32',
144: 1:      'question': '33',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '36',
144: 1:      'question': '37',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '40',
144: 1:      'question': '41',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '44',
144: 1:      'question': '45',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '51',
144: 1:      'question': '50',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '54',
144: 1:      'question': '55',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '61',
144: 1:      'question': '60',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '64',
144: 1:      'question': '65',
144: 1:      'valid': true
144: 1:    },
144: 1:    {
144: 1:      'answer': '71',
144: 1:      'question': '70',
144: 1:      'valid': true
144: 1:    }
144: 1:  ],
144: 1:  'info': [
144: 1:    '✅f(0) = 1',
144: 1:    '✅f(1) = 0',
144: 1:    '✅f(2) = 3',
144: 1:    '✅f(3) = 2',
144: 1:    '✅f(5) = 4',
144: 1:    '✅f(7) = 6',
144: 1:    '✅f(9) = 8',
144: 1:    '✅f(11) = 10',
144: 1:    '✅f(14) = 15',
144: 1:    '✅f(17) = 16',
144: 1:    '✅f(20) = 21',
144: 1:    '✅f(23) = 22',
144: 1:    '✅f(26) = 27',
144: 1:    '✅f(29) = 28',
144: 1:    '✅f(33) = 32',
144: 1:    '✅f(37) = 36',
144: 1:    '✅f(41) = 40',
144: 1:    '✅f(45) = 44',
144: 1:    '✅f(50) = 51',
144: 1:    '✅f(55) = 54',
144: 1:    '✅f(60) = 61',
144: 1:    '✅f(65) = 64',
144: 1:    '✅f(70) = 71',
144: 1:    '❌f(75) = ??? != 74'
144: 1:  ],
144: 1:  'level': 4,
144: 1:  'nextQuestion': '75',
144: 1:  'questions': [
144: 1:    '0',
144: 1:    '1',
144: 1:    '2',
144: 1:    '3',
144: 1:    '5',
144: 1:    '7',
144: 1:    '9',
144: 1:    '11',
144: 1:    '14',
144: 1:    '17',
144: 1:    '20',
144: 1:    '23',
144: 1:    '26',
144: 1:    '29',
144: 1:    '33',
144: 1:    '37',
144: 1:    '41',
144: 1:    '45',
144: 1:    '50',
144: 1:    '55',
144: 1:    '60',
144: 1:    '65',
144: 1:    '70',
144: 1:    '75'
144: 1:  ]
144: 1:}
144: 1:Scores: 2638
144: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64', '71', '74']')
144: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
145: 1:BoardData {
145: 1:  'description': ['Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?'],
145: 1:  'expectedAnswer': '80',
145: 1:  'history': [
145: 1:    {
145: 1:      'answer': '1',
145: 1:      'question': '0',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '0',
145: 1:      'question': '1',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '3',
145: 1:      'question': '2',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '2',
145: 1:      'question': '3',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '4',
145: 1:      'question': '5',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '6',
145: 1:      'question': '7',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '8',
145: 1:      'question': '9',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '10',
145: 1:      'question': '11',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '15',
145: 1:      'question': '14',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '16',
145: 1:      'question': '17',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '21',
145: 1:      'question': '20',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '22',
145: 1:      'question': '23',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '27',
145: 1:      'question': '26',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '28',
145: 1:      'question': '29',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '32',
145: 1:      'question': '33',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '36',
145: 1:      'question': '37',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '40',
145: 1:      'question': '41',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '44',
145: 1:      'question': '45',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '51',
145: 1:      'question': '50',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '54',
145: 1:      'question': '55',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '61',
145: 1:      'question': '60',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '64',
145: 1:      'question': '65',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '71',
145: 1:      'question': '70',
145: 1:      'valid': true
145: 1:    },
145: 1:    {
145: 1:      'answer': '74',
145: 1:      'question': '75',
145: 1:      'valid': true
145: 1:    }
145: 1:  ],
145: 1:  'info': [
145: 1:    '✅f(0) = 1',
145: 1:    '✅f(1) = 0',
145: 1:    '✅f(2) = 3',
145: 1:    '✅f(3) = 2',
145: 1:    '✅f(5) = 4',
145: 1:    '✅f(7) = 6',
145: 1:    '✅f(9) = 8',
145: 1:    '✅f(11) = 10',
145: 1:    '✅f(14) = 15',
145: 1:    '✅f(17) = 16',
145: 1:    '✅f(20) = 21',
145: 1:    '✅f(23) = 22',
145: 1:    '✅f(26) = 27',
145: 1:    '✅f(29) = 28',
145: 1:    '✅f(33) = 32',
145: 1:    '✅f(37) = 36',
145: 1:    '✅f(41) = 40',
145: 1:    '✅f(45) = 44',
145: 1:    '✅f(50) = 51',
145: 1:    '✅f(55) = 54',
145: 1:    '✅f(60) = 61',
145: 1:    '✅f(65) = 64',
145: 1:    '✅f(70) = 71',
145: 1:    '✅f(75) = 74',
145: 1:    '❌f(81) = ??? != 80'
145: 1:  ],
145: 1:  'level': 4,
145: 1:  'nextQuestion': '81',
145: 1:  'questions': [
145: 1:    '0',
145: 1:    '1',
145: 1:    '2',
145: 1:    '3',
145: 1:    '5',
145: 1:    '7',
145: 1:    '9',
145: 1:    '11',
145: 1:    '14',
145: 1:    '17',
145: 1:    '20',
145: 1:    '23',
145: 1:    '26',
145: 1:    '29',
145: 1:    '33',
145: 1:    '37',
145: 1:    '41',
145: 1:    '45',
145: 1:    '50',
145: 1:    '55',
145: 1:    '60',
145: 1:    '65',
145: 1:    '70',
145: 1:    '75',
145: 1:    '81'
145: 1:  ]
145: 1:}
145: 1:Scores: 2641
145: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64', '71', '74', '80']')
145: 1:Fire Event: PassTest{complexity=8, testCount=26}
------------------------------------------
146: 1:BoardData {
146: 1:  'description': ['Given the sequence: 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14...\nThe sequence starts with element number 0: f(0)=1.\nYour task is to write a function that returns the element at index n: f(n)=?'],
146: 1:  'expectedAnswer': '86',
146: 1:  'history': [
146: 1:    {
146: 1:      'answer': '1',
146: 1:      'question': '0',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '0',
146: 1:      'question': '1',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '3',
146: 1:      'question': '2',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '2',
146: 1:      'question': '3',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '4',
146: 1:      'question': '5',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '6',
146: 1:      'question': '7',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '8',
146: 1:      'question': '9',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '10',
146: 1:      'question': '11',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '15',
146: 1:      'question': '14',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '16',
146: 1:      'question': '17',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '21',
146: 1:      'question': '20',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '22',
146: 1:      'question': '23',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '27',
146: 1:      'question': '26',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '28',
146: 1:      'question': '29',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '32',
146: 1:      'question': '33',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '36',
146: 1:      'question': '37',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '40',
146: 1:      'question': '41',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '44',
146: 1:      'question': '45',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '51',
146: 1:      'question': '50',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '54',
146: 1:      'question': '55',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '61',
146: 1:      'question': '60',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '64',
146: 1:      'question': '65',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '71',
146: 1:      'question': '70',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '74',
146: 1:      'question': '75',
146: 1:      'valid': true
146: 1:    },
146: 1:    {
146: 1:      'answer': '80',
146: 1:      'question': '81',
146: 1:      'valid': true
146: 1:    }
146: 1:  ],
146: 1:  'info': [
146: 1:    '✅f(0) = 1',
146: 1:    '✅f(1) = 0',
146: 1:    '✅f(2) = 3',
146: 1:    '✅f(3) = 2',
146: 1:    '✅f(5) = 4',
146: 1:    '✅f(7) = 6',
146: 1:    '✅f(9) = 8',
146: 1:    '✅f(11) = 10',
146: 1:    '✅f(14) = 15',
146: 1:    '✅f(17) = 16',
146: 1:    '✅f(20) = 21',
146: 1:    '✅f(23) = 22',
146: 1:    '✅f(26) = 27',
146: 1:    '✅f(29) = 28',
146: 1:    '✅f(33) = 32',
146: 1:    '✅f(37) = 36',
146: 1:    '✅f(41) = 40',
146: 1:    '✅f(45) = 44',
146: 1:    '✅f(50) = 51',
146: 1:    '✅f(55) = 54',
146: 1:    '✅f(60) = 61',
146: 1:    '✅f(65) = 64',
146: 1:    '✅f(70) = 71',
146: 1:    '✅f(75) = 74',
146: 1:    '✅f(81) = 80',
146: 1:    '❌f(87) = ??? != 86'
146: 1:  ],
146: 1:  'level': 4,
146: 1:  'nextQuestion': '87',
146: 1:  'questions': [
146: 1:    '0',
146: 1:    '1',
146: 1:    '2',
146: 1:    '3',
146: 1:    '5',
146: 1:    '7',
146: 1:    '9',
146: 1:    '11',
146: 1:    '14',
146: 1:    '17',
146: 1:    '20',
146: 1:    '23',
146: 1:    '26',
146: 1:    '29',
146: 1:    '33',
146: 1:    '37',
146: 1:    '41',
146: 1:    '45',
146: 1:    '50',
146: 1:    '55',
146: 1:    '60',
146: 1:    '65',
146: 1:    '70',
146: 1:    '75',
146: 1:    '81',
146: 1:    '87'
146: 1:  ]
146: 1:}
146: 1:Scores: 2644
146: 1:Answer: message('['1', '0', '3', '2', '4', '6', '8', '10', '15', '16', '21', '22', '27', '28', '32', '36', '40', '44', '51', '54', '61', '64', '71', '74', '80', '86']')
146: 1:Fire Event: PassTest{complexity=8, testCount=26}
146: 1:Fire Event: NextAlgorithm{complexity=8, time=0}
------------------------------------------
147: 1:BoardData {
147: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
147: 1:  'history': [
147: 1:    {
147: 1:      'answer': '1',
147: 1:      'question': '0',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '0',
147: 1:      'question': '1',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '3',
147: 1:      'question': '2',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '2',
147: 1:      'question': '3',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '4',
147: 1:      'question': '5',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '6',
147: 1:      'question': '7',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '8',
147: 1:      'question': '9',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '10',
147: 1:      'question': '11',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '15',
147: 1:      'question': '14',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '16',
147: 1:      'question': '17',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '21',
147: 1:      'question': '20',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '22',
147: 1:      'question': '23',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '27',
147: 1:      'question': '26',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '28',
147: 1:      'question': '29',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '32',
147: 1:      'question': '33',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '36',
147: 1:      'question': '37',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '40',
147: 1:      'question': '41',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '44',
147: 1:      'question': '45',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '51',
147: 1:      'question': '50',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '54',
147: 1:      'question': '55',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '61',
147: 1:      'question': '60',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '64',
147: 1:      'question': '65',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '71',
147: 1:      'question': '70',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '74',
147: 1:      'question': '75',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '80',
147: 1:      'question': '81',
147: 1:      'valid': true
147: 1:    },
147: 1:    {
147: 1:      'answer': '86',
147: 1:      'question': '87',
147: 1:      'valid': true
147: 1:    }
147: 1:  ],
147: 1:  'info': [
147: 1:    '✅f(0) = 1',
147: 1:    '✅f(1) = 0',
147: 1:    '✅f(2) = 3',
147: 1:    '✅f(3) = 2',
147: 1:    '✅f(5) = 4',
147: 1:    '✅f(7) = 6',
147: 1:    '✅f(9) = 8',
147: 1:    '✅f(11) = 10',
147: 1:    '✅f(14) = 15',
147: 1:    '✅f(17) = 16',
147: 1:    '✅f(20) = 21',
147: 1:    '✅f(23) = 22',
147: 1:    '✅f(26) = 27',
147: 1:    '✅f(29) = 28',
147: 1:    '✅f(33) = 32',
147: 1:    '✅f(37) = 36',
147: 1:    '✅f(41) = 40',
147: 1:    '✅f(45) = 44',
147: 1:    '✅f(50) = 51',
147: 1:    '✅f(55) = 54',
147: 1:    '✅f(60) = 61',
147: 1:    '✅f(65) = 64',
147: 1:    '✅f(70) = 71',
147: 1:    '✅f(75) = 74',
147: 1:    '✅f(81) = 80',
147: 1:    '✅f(87) = 86'
147: 1:  ],
147: 1:  'level': 4,
147: 1:  'questions': []
147: 1:}
147: 1:Scores: 3726
147: 1:Answer: message('StartNextLevel')
147: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
148: 1:BoardData {
148: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
148: 1:  'expectedAnswer': 'T.H',
148: 1:  'history': [],
148: 1:  'info': ['❌f(Tom Harris) = ??? != T.H'],
148: 1:  'level': 5,
148: 1:  'nextQuestion': 'Tom Harris',
148: 1:  'questions': ['Tom Harris']
148: 1:}
148: 1:Scores: 3726
148: 1:Answer: message('['T.H']')
148: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
149: 1:BoardData {
149: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
149: 1:  'expectedAnswer': 'G.L',
149: 1:  'history': [{
149: 1:    'answer': 'T.H',
149: 1:    'question': 'Tom Harris',
149: 1:    'valid': true
149: 1:  }],
149: 1:  'info': [
149: 1:    '✅f(Tom Harris) = T.H',
149: 1:    '❌f(garlick looney) = ??? != G.L'
149: 1:  ],
149: 1:  'level': 5,
149: 1:  'nextQuestion': 'garlick looney',
149: 1:  'questions': [
149: 1:    'Tom Harris',
149: 1:    'garlick looney'
149: 1:  ]
149: 1:}
149: 1:Scores: 3728
149: 1:Answer: message('['T.H', 'G.L']')
149: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
150: 1:BoardData {
150: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
150: 1:  'expectedAnswer': 'E.P',
150: 1:  'history': [
150: 1:    {
150: 1:      'answer': 'T.H',
150: 1:      'question': 'Tom Harris',
150: 1:      'valid': true
150: 1:    },
150: 1:    {
150: 1:      'answer': 'G.L',
150: 1:      'question': 'garlick looney',
150: 1:      'valid': true
150: 1:    }
150: 1:  ],
150: 1:  'info': [
150: 1:    '✅f(Tom Harris) = T.H',
150: 1:    '✅f(garlick looney) = G.L',
150: 1:    '❌f(Ethan parker) = ??? != E.P'
150: 1:  ],
150: 1:  'level': 5,
150: 1:  'nextQuestion': 'Ethan parker',
150: 1:  'questions': [
150: 1:    'Tom Harris',
150: 1:    'garlick looney',
150: 1:    'Ethan parker'
150: 1:  ]
150: 1:}
150: 1:Scores: 3730
150: 1:Answer: message('['T.H', 'G.L', 'E.P']')
150: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
151: 1:BoardData {
151: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
151: 1:  'expectedAnswer': 'O.C',
151: 1:  'history': [
151: 1:    {
151: 1:      'answer': 'T.H',
151: 1:      'question': 'Tom Harris',
151: 1:      'valid': true
151: 1:    },
151: 1:    {
151: 1:      'answer': 'G.L',
151: 1:      'question': 'garlick looney',
151: 1:      'valid': true
151: 1:    },
151: 1:    {
151: 1:      'answer': 'E.P',
151: 1:      'question': 'Ethan parker',
151: 1:      'valid': true
151: 1:    }
151: 1:  ],
151: 1:  'info': [
151: 1:    '✅f(Tom Harris) = T.H',
151: 1:    '✅f(garlick looney) = G.L',
151: 1:    '✅f(Ethan parker) = E.P',
151: 1:    '❌f(olivia Campbell) = ??? != O.C'
151: 1:  ],
151: 1:  'level': 5,
151: 1:  'nextQuestion': 'olivia Campbell',
151: 1:  'questions': [
151: 1:    'Tom Harris',
151: 1:    'garlick looney',
151: 1:    'Ethan parker',
151: 1:    'olivia Campbell'
151: 1:  ]
151: 1:}
151: 1:Scores: 3732
151: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C']')
151: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
152: 1:BoardData {
152: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
152: 1:  'expectedAnswer': 'L.J',
152: 1:  'history': [
152: 1:    {
152: 1:      'answer': 'T.H',
152: 1:      'question': 'Tom Harris',
152: 1:      'valid': true
152: 1:    },
152: 1:    {
152: 1:      'answer': 'G.L',
152: 1:      'question': 'garlick looney',
152: 1:      'valid': true
152: 1:    },
152: 1:    {
152: 1:      'answer': 'E.P',
152: 1:      'question': 'Ethan parker',
152: 1:      'valid': true
152: 1:    },
152: 1:    {
152: 1:      'answer': 'O.C',
152: 1:      'question': 'olivia Campbell',
152: 1:      'valid': true
152: 1:    }
152: 1:  ],
152: 1:  'info': [
152: 1:    '✅f(Tom Harris) = T.H',
152: 1:    '✅f(garlick looney) = G.L',
152: 1:    '✅f(Ethan parker) = E.P',
152: 1:    '✅f(olivia Campbell) = O.C',
152: 1:    '❌f(Liam Jenkins) = ??? != L.J'
152: 1:  ],
152: 1:  'level': 5,
152: 1:  'nextQuestion': 'Liam Jenkins',
152: 1:  'questions': [
152: 1:    'Tom Harris',
152: 1:    'garlick looney',
152: 1:    'Ethan parker',
152: 1:    'olivia Campbell',
152: 1:    'Liam Jenkins'
152: 1:  ]
152: 1:}
152: 1:Scores: 3734
152: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J']')
152: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
153: 1:BoardData {
153: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
153: 1:  'expectedAnswer': 'E.B',
153: 1:  'history': [
153: 1:    {
153: 1:      'answer': 'T.H',
153: 1:      'question': 'Tom Harris',
153: 1:      'valid': true
153: 1:    },
153: 1:    {
153: 1:      'answer': 'G.L',
153: 1:      'question': 'garlick looney',
153: 1:      'valid': true
153: 1:    },
153: 1:    {
153: 1:      'answer': 'E.P',
153: 1:      'question': 'Ethan parker',
153: 1:      'valid': true
153: 1:    },
153: 1:    {
153: 1:      'answer': 'O.C',
153: 1:      'question': 'olivia Campbell',
153: 1:      'valid': true
153: 1:    },
153: 1:    {
153: 1:      'answer': 'L.J',
153: 1:      'question': 'Liam Jenkins',
153: 1:      'valid': true
153: 1:    }
153: 1:  ],
153: 1:  'info': [
153: 1:    '✅f(Tom Harris) = T.H',
153: 1:    '✅f(garlick looney) = G.L',
153: 1:    '✅f(Ethan parker) = E.P',
153: 1:    '✅f(olivia Campbell) = O.C',
153: 1:    '✅f(Liam Jenkins) = L.J',
153: 1:    '❌f(Emma Bryant) = ??? != E.B'
153: 1:  ],
153: 1:  'level': 5,
153: 1:  'nextQuestion': 'Emma Bryant',
153: 1:  'questions': [
153: 1:    'Tom Harris',
153: 1:    'garlick looney',
153: 1:    'Ethan parker',
153: 1:    'olivia Campbell',
153: 1:    'Liam Jenkins',
153: 1:    'Emma Bryant'
153: 1:  ]
153: 1:}
153: 1:Scores: 3736
153: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B']')
153: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
154: 1:BoardData {
154: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
154: 1:  'expectedAnswer': 'N.R',
154: 1:  'history': [
154: 1:    {
154: 1:      'answer': 'T.H',
154: 1:      'question': 'Tom Harris',
154: 1:      'valid': true
154: 1:    },
154: 1:    {
154: 1:      'answer': 'G.L',
154: 1:      'question': 'garlick looney',
154: 1:      'valid': true
154: 1:    },
154: 1:    {
154: 1:      'answer': 'E.P',
154: 1:      'question': 'Ethan parker',
154: 1:      'valid': true
154: 1:    },
154: 1:    {
154: 1:      'answer': 'O.C',
154: 1:      'question': 'olivia Campbell',
154: 1:      'valid': true
154: 1:    },
154: 1:    {
154: 1:      'answer': 'L.J',
154: 1:      'question': 'Liam Jenkins',
154: 1:      'valid': true
154: 1:    },
154: 1:    {
154: 1:      'answer': 'E.B',
154: 1:      'question': 'Emma Bryant',
154: 1:      'valid': true
154: 1:    }
154: 1:  ],
154: 1:  'info': [
154: 1:    '✅f(Tom Harris) = T.H',
154: 1:    '✅f(garlick looney) = G.L',
154: 1:    '✅f(Ethan parker) = E.P',
154: 1:    '✅f(olivia Campbell) = O.C',
154: 1:    '✅f(Liam Jenkins) = L.J',
154: 1:    '✅f(Emma Bryant) = E.B',
154: 1:    '❌f(Noah Reed) = ??? != N.R'
154: 1:  ],
154: 1:  'level': 5,
154: 1:  'nextQuestion': 'Noah Reed',
154: 1:  'questions': [
154: 1:    'Tom Harris',
154: 1:    'garlick looney',
154: 1:    'Ethan parker',
154: 1:    'olivia Campbell',
154: 1:    'Liam Jenkins',
154: 1:    'Emma Bryant',
154: 1:    'Noah Reed'
154: 1:  ]
154: 1:}
154: 1:Scores: 3738
154: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R']')
154: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
155: 1:BoardData {
155: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
155: 1:  'expectedAnswer': 'A.C',
155: 1:  'history': [
155: 1:    {
155: 1:      'answer': 'T.H',
155: 1:      'question': 'Tom Harris',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': 'G.L',
155: 1:      'question': 'garlick looney',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': 'E.P',
155: 1:      'question': 'Ethan parker',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': 'O.C',
155: 1:      'question': 'olivia Campbell',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': 'L.J',
155: 1:      'question': 'Liam Jenkins',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': 'E.B',
155: 1:      'question': 'Emma Bryant',
155: 1:      'valid': true
155: 1:    },
155: 1:    {
155: 1:      'answer': 'N.R',
155: 1:      'question': 'Noah Reed',
155: 1:      'valid': true
155: 1:    }
155: 1:  ],
155: 1:  'info': [
155: 1:    '✅f(Tom Harris) = T.H',
155: 1:    '✅f(garlick looney) = G.L',
155: 1:    '✅f(Ethan parker) = E.P',
155: 1:    '✅f(olivia Campbell) = O.C',
155: 1:    '✅f(Liam Jenkins) = L.J',
155: 1:    '✅f(Emma Bryant) = E.B',
155: 1:    '✅f(Noah Reed) = N.R',
155: 1:    '❌f(Ava Coleman) = ??? != A.C'
155: 1:  ],
155: 1:  'level': 5,
155: 1:  'nextQuestion': 'Ava Coleman',
155: 1:  'questions': [
155: 1:    'Tom Harris',
155: 1:    'garlick looney',
155: 1:    'Ethan parker',
155: 1:    'olivia Campbell',
155: 1:    'Liam Jenkins',
155: 1:    'Emma Bryant',
155: 1:    'Noah Reed',
155: 1:    'Ava Coleman'
155: 1:  ]
155: 1:}
155: 1:Scores: 3740
155: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C']')
155: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
156: 1:BoardData {
156: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
156: 1:  'expectedAnswer': 'W.B',
156: 1:  'history': [
156: 1:    {
156: 1:      'answer': 'T.H',
156: 1:      'question': 'Tom Harris',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': 'G.L',
156: 1:      'question': 'garlick looney',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': 'E.P',
156: 1:      'question': 'Ethan parker',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': 'O.C',
156: 1:      'question': 'olivia Campbell',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': 'L.J',
156: 1:      'question': 'Liam Jenkins',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': 'E.B',
156: 1:      'question': 'Emma Bryant',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': 'N.R',
156: 1:      'question': 'Noah Reed',
156: 1:      'valid': true
156: 1:    },
156: 1:    {
156: 1:      'answer': 'A.C',
156: 1:      'question': 'Ava Coleman',
156: 1:      'valid': true
156: 1:    }
156: 1:  ],
156: 1:  'info': [
156: 1:    '✅f(Tom Harris) = T.H',
156: 1:    '✅f(garlick looney) = G.L',
156: 1:    '✅f(Ethan parker) = E.P',
156: 1:    '✅f(olivia Campbell) = O.C',
156: 1:    '✅f(Liam Jenkins) = L.J',
156: 1:    '✅f(Emma Bryant) = E.B',
156: 1:    '✅f(Noah Reed) = N.R',
156: 1:    '✅f(Ava Coleman) = A.C',
156: 1:    '❌f(William Barnes) = ??? != W.B'
156: 1:  ],
156: 1:  'level': 5,
156: 1:  'nextQuestion': 'William Barnes',
156: 1:  'questions': [
156: 1:    'Tom Harris',
156: 1:    'garlick looney',
156: 1:    'Ethan parker',
156: 1:    'olivia Campbell',
156: 1:    'Liam Jenkins',
156: 1:    'Emma Bryant',
156: 1:    'Noah Reed',
156: 1:    'Ava Coleman',
156: 1:    'William Barnes'
156: 1:  ]
156: 1:}
156: 1:Scores: 3742
156: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B']')
156: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
157: 1:BoardData {
157: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
157: 1:  'expectedAnswer': 'S.M',
157: 1:  'history': [
157: 1:    {
157: 1:      'answer': 'T.H',
157: 1:      'question': 'Tom Harris',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': 'G.L',
157: 1:      'question': 'garlick looney',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': 'E.P',
157: 1:      'question': 'Ethan parker',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': 'O.C',
157: 1:      'question': 'olivia Campbell',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': 'L.J',
157: 1:      'question': 'Liam Jenkins',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': 'E.B',
157: 1:      'question': 'Emma Bryant',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': 'N.R',
157: 1:      'question': 'Noah Reed',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': 'A.C',
157: 1:      'question': 'Ava Coleman',
157: 1:      'valid': true
157: 1:    },
157: 1:    {
157: 1:      'answer': 'W.B',
157: 1:      'question': 'William Barnes',
157: 1:      'valid': true
157: 1:    }
157: 1:  ],
157: 1:  'info': [
157: 1:    '✅f(Tom Harris) = T.H',
157: 1:    '✅f(garlick looney) = G.L',
157: 1:    '✅f(Ethan parker) = E.P',
157: 1:    '✅f(olivia Campbell) = O.C',
157: 1:    '✅f(Liam Jenkins) = L.J',
157: 1:    '✅f(Emma Bryant) = E.B',
157: 1:    '✅f(Noah Reed) = N.R',
157: 1:    '✅f(Ava Coleman) = A.C',
157: 1:    '✅f(William Barnes) = W.B',
157: 1:    '❌f(Sophia Mitchell) = ??? != S.M'
157: 1:  ],
157: 1:  'level': 5,
157: 1:  'nextQuestion': 'Sophia Mitchell',
157: 1:  'questions': [
157: 1:    'Tom Harris',
157: 1:    'garlick looney',
157: 1:    'Ethan parker',
157: 1:    'olivia Campbell',
157: 1:    'Liam Jenkins',
157: 1:    'Emma Bryant',
157: 1:    'Noah Reed',
157: 1:    'Ava Coleman',
157: 1:    'William Barnes',
157: 1:    'Sophia Mitchell'
157: 1:  ]
157: 1:}
157: 1:Scores: 3744
157: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M']')
157: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
158: 1:BoardData {
158: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
158: 1:  'expectedAnswer': 'J.H',
158: 1:  'history': [
158: 1:    {
158: 1:      'answer': 'T.H',
158: 1:      'question': 'Tom Harris',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': 'G.L',
158: 1:      'question': 'garlick looney',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': 'E.P',
158: 1:      'question': 'Ethan parker',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': 'O.C',
158: 1:      'question': 'olivia Campbell',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': 'L.J',
158: 1:      'question': 'Liam Jenkins',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': 'E.B',
158: 1:      'question': 'Emma Bryant',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': 'N.R',
158: 1:      'question': 'Noah Reed',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': 'A.C',
158: 1:      'question': 'Ava Coleman',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': 'W.B',
158: 1:      'question': 'William Barnes',
158: 1:      'valid': true
158: 1:    },
158: 1:    {
158: 1:      'answer': 'S.M',
158: 1:      'question': 'Sophia Mitchell',
158: 1:      'valid': true
158: 1:    }
158: 1:  ],
158: 1:  'info': [
158: 1:    '✅f(Tom Harris) = T.H',
158: 1:    '✅f(garlick looney) = G.L',
158: 1:    '✅f(Ethan parker) = E.P',
158: 1:    '✅f(olivia Campbell) = O.C',
158: 1:    '✅f(Liam Jenkins) = L.J',
158: 1:    '✅f(Emma Bryant) = E.B',
158: 1:    '✅f(Noah Reed) = N.R',
158: 1:    '✅f(Ava Coleman) = A.C',
158: 1:    '✅f(William Barnes) = W.B',
158: 1:    '✅f(Sophia Mitchell) = S.M',
158: 1:    '❌f(James Hughes) = ??? != J.H'
158: 1:  ],
158: 1:  'level': 5,
158: 1:  'nextQuestion': 'James Hughes',
158: 1:  'questions': [
158: 1:    'Tom Harris',
158: 1:    'garlick looney',
158: 1:    'Ethan parker',
158: 1:    'olivia Campbell',
158: 1:    'Liam Jenkins',
158: 1:    'Emma Bryant',
158: 1:    'Noah Reed',
158: 1:    'Ava Coleman',
158: 1:    'William Barnes',
158: 1:    'Sophia Mitchell',
158: 1:    'James Hughes'
158: 1:  ]
158: 1:}
158: 1:Scores: 3746
158: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H']')
158: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
159: 1:BoardData {
159: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
159: 1:  'expectedAnswer': 'I.F',
159: 1:  'history': [
159: 1:    {
159: 1:      'answer': 'T.H',
159: 1:      'question': 'Tom Harris',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': 'G.L',
159: 1:      'question': 'garlick looney',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': 'E.P',
159: 1:      'question': 'Ethan parker',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': 'O.C',
159: 1:      'question': 'olivia Campbell',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': 'L.J',
159: 1:      'question': 'Liam Jenkins',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': 'E.B',
159: 1:      'question': 'Emma Bryant',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': 'N.R',
159: 1:      'question': 'Noah Reed',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': 'A.C',
159: 1:      'question': 'Ava Coleman',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': 'W.B',
159: 1:      'question': 'William Barnes',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': 'S.M',
159: 1:      'question': 'Sophia Mitchell',
159: 1:      'valid': true
159: 1:    },
159: 1:    {
159: 1:      'answer': 'J.H',
159: 1:      'question': 'James Hughes',
159: 1:      'valid': true
159: 1:    }
159: 1:  ],
159: 1:  'info': [
159: 1:    '✅f(Tom Harris) = T.H',
159: 1:    '✅f(garlick looney) = G.L',
159: 1:    '✅f(Ethan parker) = E.P',
159: 1:    '✅f(olivia Campbell) = O.C',
159: 1:    '✅f(Liam Jenkins) = L.J',
159: 1:    '✅f(Emma Bryant) = E.B',
159: 1:    '✅f(Noah Reed) = N.R',
159: 1:    '✅f(Ava Coleman) = A.C',
159: 1:    '✅f(William Barnes) = W.B',
159: 1:    '✅f(Sophia Mitchell) = S.M',
159: 1:    '✅f(James Hughes) = J.H',
159: 1:    '❌f(Isabella Foster) = ??? != I.F'
159: 1:  ],
159: 1:  'level': 5,
159: 1:  'nextQuestion': 'Isabella Foster',
159: 1:  'questions': [
159: 1:    'Tom Harris',
159: 1:    'garlick looney',
159: 1:    'Ethan parker',
159: 1:    'olivia Campbell',
159: 1:    'Liam Jenkins',
159: 1:    'Emma Bryant',
159: 1:    'Noah Reed',
159: 1:    'Ava Coleman',
159: 1:    'William Barnes',
159: 1:    'Sophia Mitchell',
159: 1:    'James Hughes',
159: 1:    'Isabella Foster'
159: 1:  ]
159: 1:}
159: 1:Scores: 3748
159: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F']')
159: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
160: 1:BoardData {
160: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
160: 1:  'expectedAnswer': 'B.E',
160: 1:  'history': [
160: 1:    {
160: 1:      'answer': 'T.H',
160: 1:      'question': 'Tom Harris',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': 'G.L',
160: 1:      'question': 'garlick looney',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': 'E.P',
160: 1:      'question': 'Ethan parker',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': 'O.C',
160: 1:      'question': 'olivia Campbell',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': 'L.J',
160: 1:      'question': 'Liam Jenkins',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': 'E.B',
160: 1:      'question': 'Emma Bryant',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': 'N.R',
160: 1:      'question': 'Noah Reed',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': 'A.C',
160: 1:      'question': 'Ava Coleman',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': 'W.B',
160: 1:      'question': 'William Barnes',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': 'S.M',
160: 1:      'question': 'Sophia Mitchell',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': 'J.H',
160: 1:      'question': 'James Hughes',
160: 1:      'valid': true
160: 1:    },
160: 1:    {
160: 1:      'answer': 'I.F',
160: 1:      'question': 'Isabella Foster',
160: 1:      'valid': true
160: 1:    }
160: 1:  ],
160: 1:  'info': [
160: 1:    '✅f(Tom Harris) = T.H',
160: 1:    '✅f(garlick looney) = G.L',
160: 1:    '✅f(Ethan parker) = E.P',
160: 1:    '✅f(olivia Campbell) = O.C',
160: 1:    '✅f(Liam Jenkins) = L.J',
160: 1:    '✅f(Emma Bryant) = E.B',
160: 1:    '✅f(Noah Reed) = N.R',
160: 1:    '✅f(Ava Coleman) = A.C',
160: 1:    '✅f(William Barnes) = W.B',
160: 1:    '✅f(Sophia Mitchell) = S.M',
160: 1:    '✅f(James Hughes) = J.H',
160: 1:    '✅f(Isabella Foster) = I.F',
160: 1:    '❌f(Benjamin Evans) = ??? != B.E'
160: 1:  ],
160: 1:  'level': 5,
160: 1:  'nextQuestion': 'Benjamin Evans',
160: 1:  'questions': [
160: 1:    'Tom Harris',
160: 1:    'garlick looney',
160: 1:    'Ethan parker',
160: 1:    'olivia Campbell',
160: 1:    'Liam Jenkins',
160: 1:    'Emma Bryant',
160: 1:    'Noah Reed',
160: 1:    'Ava Coleman',
160: 1:    'William Barnes',
160: 1:    'Sophia Mitchell',
160: 1:    'James Hughes',
160: 1:    'Isabella Foster',
160: 1:    'Benjamin Evans'
160: 1:  ]
160: 1:}
160: 1:Scores: 3750
160: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E']')
160: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
161: 1:BoardData {
161: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
161: 1:  'expectedAnswer': 'M.M',
161: 1:  'history': [
161: 1:    {
161: 1:      'answer': 'T.H',
161: 1:      'question': 'Tom Harris',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': 'G.L',
161: 1:      'question': 'garlick looney',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': 'E.P',
161: 1:      'question': 'Ethan parker',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': 'O.C',
161: 1:      'question': 'olivia Campbell',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': 'L.J',
161: 1:      'question': 'Liam Jenkins',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': 'E.B',
161: 1:      'question': 'Emma Bryant',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': 'N.R',
161: 1:      'question': 'Noah Reed',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': 'A.C',
161: 1:      'question': 'Ava Coleman',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': 'W.B',
161: 1:      'question': 'William Barnes',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': 'S.M',
161: 1:      'question': 'Sophia Mitchell',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': 'J.H',
161: 1:      'question': 'James Hughes',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': 'I.F',
161: 1:      'question': 'Isabella Foster',
161: 1:      'valid': true
161: 1:    },
161: 1:    {
161: 1:      'answer': 'B.E',
161: 1:      'question': 'Benjamin Evans',
161: 1:      'valid': true
161: 1:    }
161: 1:  ],
161: 1:  'info': [
161: 1:    '✅f(Tom Harris) = T.H',
161: 1:    '✅f(garlick looney) = G.L',
161: 1:    '✅f(Ethan parker) = E.P',
161: 1:    '✅f(olivia Campbell) = O.C',
161: 1:    '✅f(Liam Jenkins) = L.J',
161: 1:    '✅f(Emma Bryant) = E.B',
161: 1:    '✅f(Noah Reed) = N.R',
161: 1:    '✅f(Ava Coleman) = A.C',
161: 1:    '✅f(William Barnes) = W.B',
161: 1:    '✅f(Sophia Mitchell) = S.M',
161: 1:    '✅f(James Hughes) = J.H',
161: 1:    '✅f(Isabella Foster) = I.F',
161: 1:    '✅f(Benjamin Evans) = B.E',
161: 1:    '❌f(Mia Murphy) = ??? != M.M'
161: 1:  ],
161: 1:  'level': 5,
161: 1:  'nextQuestion': 'Mia Murphy',
161: 1:  'questions': [
161: 1:    'Tom Harris',
161: 1:    'garlick looney',
161: 1:    'Ethan parker',
161: 1:    'olivia Campbell',
161: 1:    'Liam Jenkins',
161: 1:    'Emma Bryant',
161: 1:    'Noah Reed',
161: 1:    'Ava Coleman',
161: 1:    'William Barnes',
161: 1:    'Sophia Mitchell',
161: 1:    'James Hughes',
161: 1:    'Isabella Foster',
161: 1:    'Benjamin Evans',
161: 1:    'Mia Murphy'
161: 1:  ]
161: 1:}
161: 1:Scores: 3752
161: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M']')
161: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
162: 1:BoardData {
162: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
162: 1:  'expectedAnswer': 'M.R',
162: 1:  'history': [
162: 1:    {
162: 1:      'answer': 'T.H',
162: 1:      'question': 'Tom Harris',
162: 1:      'valid': true
162: 1:    },
162: 1:    {
162: 1:      'answer': 'G.L',
162: 1:      'question': 'garlick looney',
162: 1:      'valid': true
162: 1:    },
162: 1:    {
162: 1:      'answer': 'E.P',
162: 1:      'question': 'Ethan parker',
162: 1:      'valid': true
162: 1:    },
162: 1:    {
162: 1:      'answer': 'O.C',
162: 1:      'question': 'olivia Campbell',
162: 1:      'valid': true
162: 1:    },
162: 1:    {
162: 1:      'answer': 'L.J',
162: 1:      'question': 'Liam Jenkins',
162: 1:      'valid': true
162: 1:    },
162: 1:    {
162: 1:      'answer': 'E.B',
162: 1:      'question': 'Emma Bryant',
162: 1:      'valid': true
162: 1:    },
162: 1:    {
162: 1:      'answer': 'N.R',
162: 1:      'question': 'Noah Reed',
162: 1:      'valid': true
162: 1:    },
162: 1:    {
162: 1:      'answer': 'A.C',
162: 1:      'question': 'Ava Coleman',
162: 1:      'valid': true
162: 1:    },
162: 1:    {
162: 1:      'answer': 'W.B',
162: 1:      'question': 'William Barnes',
162: 1:      'valid': true
162: 1:    },
162: 1:    {
162: 1:      'answer': 'S.M',
162: 1:      'question': 'Sophia Mitchell',
162: 1:      'valid': true
162: 1:    },
162: 1:    {
162: 1:      'answer': 'J.H',
162: 1:      'question': 'James Hughes',
162: 1:      'valid': true
162: 1:    },
162: 1:    {
162: 1:      'answer': 'I.F',
162: 1:      'question': 'Isabella Foster',
162: 1:      'valid': true
162: 1:    },
162: 1:    {
162: 1:      'answer': 'B.E',
162: 1:      'question': 'Benjamin Evans',
162: 1:      'valid': true
162: 1:    },
162: 1:    {
162: 1:      'answer': 'M.M',
162: 1:      'question': 'Mia Murphy',
162: 1:      'valid': true
162: 1:    }
162: 1:  ],
162: 1:  'info': [
162: 1:    '✅f(Tom Harris) = T.H',
162: 1:    '✅f(garlick looney) = G.L',
162: 1:    '✅f(Ethan parker) = E.P',
162: 1:    '✅f(olivia Campbell) = O.C',
162: 1:    '✅f(Liam Jenkins) = L.J',
162: 1:    '✅f(Emma Bryant) = E.B',
162: 1:    '✅f(Noah Reed) = N.R',
162: 1:    '✅f(Ava Coleman) = A.C',
162: 1:    '✅f(William Barnes) = W.B',
162: 1:    '✅f(Sophia Mitchell) = S.M',
162: 1:    '✅f(James Hughes) = J.H',
162: 1:    '✅f(Isabella Foster) = I.F',
162: 1:    '✅f(Benjamin Evans) = B.E',
162: 1:    '✅f(Mia Murphy) = M.M',
162: 1:    '❌f(Mason Richardson) = ??? != M.R'
162: 1:  ],
162: 1:  'level': 5,
162: 1:  'nextQuestion': 'Mason Richardson',
162: 1:  'questions': [
162: 1:    'Tom Harris',
162: 1:    'garlick looney',
162: 1:    'Ethan parker',
162: 1:    'olivia Campbell',
162: 1:    'Liam Jenkins',
162: 1:    'Emma Bryant',
162: 1:    'Noah Reed',
162: 1:    'Ava Coleman',
162: 1:    'William Barnes',
162: 1:    'Sophia Mitchell',
162: 1:    'James Hughes',
162: 1:    'Isabella Foster',
162: 1:    'Benjamin Evans',
162: 1:    'Mia Murphy',
162: 1:    'Mason Richardson'
162: 1:  ]
162: 1:}
162: 1:Scores: 3754
162: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R']')
162: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
163: 1:BoardData {
163: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
163: 1:  'expectedAnswer': 'C.P',
163: 1:  'history': [
163: 1:    {
163: 1:      'answer': 'T.H',
163: 1:      'question': 'Tom Harris',
163: 1:      'valid': true
163: 1:    },
163: 1:    {
163: 1:      'answer': 'G.L',
163: 1:      'question': 'garlick looney',
163: 1:      'valid': true
163: 1:    },
163: 1:    {
163: 1:      'answer': 'E.P',
163: 1:      'question': 'Ethan parker',
163: 1:      'valid': true
163: 1:    },
163: 1:    {
163: 1:      'answer': 'O.C',
163: 1:      'question': 'olivia Campbell',
163: 1:      'valid': true
163: 1:    },
163: 1:    {
163: 1:      'answer': 'L.J',
163: 1:      'question': 'Liam Jenkins',
163: 1:      'valid': true
163: 1:    },
163: 1:    {
163: 1:      'answer': 'E.B',
163: 1:      'question': 'Emma Bryant',
163: 1:      'valid': true
163: 1:    },
163: 1:    {
163: 1:      'answer': 'N.R',
163: 1:      'question': 'Noah Reed',
163: 1:      'valid': true
163: 1:    },
163: 1:    {
163: 1:      'answer': 'A.C',
163: 1:      'question': 'Ava Coleman',
163: 1:      'valid': true
163: 1:    },
163: 1:    {
163: 1:      'answer': 'W.B',
163: 1:      'question': 'William Barnes',
163: 1:      'valid': true
163: 1:    },
163: 1:    {
163: 1:      'answer': 'S.M',
163: 1:      'question': 'Sophia Mitchell',
163: 1:      'valid': true
163: 1:    },
163: 1:    {
163: 1:      'answer': 'J.H',
163: 1:      'question': 'James Hughes',
163: 1:      'valid': true
163: 1:    },
163: 1:    {
163: 1:      'answer': 'I.F',
163: 1:      'question': 'Isabella Foster',
163: 1:      'valid': true
163: 1:    },
163: 1:    {
163: 1:      'answer': 'B.E',
163: 1:      'question': 'Benjamin Evans',
163: 1:      'valid': true
163: 1:    },
163: 1:    {
163: 1:      'answer': 'M.M',
163: 1:      'question': 'Mia Murphy',
163: 1:      'valid': true
163: 1:    },
163: 1:    {
163: 1:      'answer': 'M.R',
163: 1:      'question': 'Mason Richardson',
163: 1:      'valid': true
163: 1:    }
163: 1:  ],
163: 1:  'info': [
163: 1:    '✅f(Tom Harris) = T.H',
163: 1:    '✅f(garlick looney) = G.L',
163: 1:    '✅f(Ethan parker) = E.P',
163: 1:    '✅f(olivia Campbell) = O.C',
163: 1:    '✅f(Liam Jenkins) = L.J',
163: 1:    '✅f(Emma Bryant) = E.B',
163: 1:    '✅f(Noah Reed) = N.R',
163: 1:    '✅f(Ava Coleman) = A.C',
163: 1:    '✅f(William Barnes) = W.B',
163: 1:    '✅f(Sophia Mitchell) = S.M',
163: 1:    '✅f(James Hughes) = J.H',
163: 1:    '✅f(Isabella Foster) = I.F',
163: 1:    '✅f(Benjamin Evans) = B.E',
163: 1:    '✅f(Mia Murphy) = M.M',
163: 1:    '✅f(Mason Richardson) = M.R',
163: 1:    '❌f(Charlotte Peterson) = ??? != C.P'
163: 1:  ],
163: 1:  'level': 5,
163: 1:  'nextQuestion': 'Charlotte Peterson',
163: 1:  'questions': [
163: 1:    'Tom Harris',
163: 1:    'garlick looney',
163: 1:    'Ethan parker',
163: 1:    'olivia Campbell',
163: 1:    'Liam Jenkins',
163: 1:    'Emma Bryant',
163: 1:    'Noah Reed',
163: 1:    'Ava Coleman',
163: 1:    'William Barnes',
163: 1:    'Sophia Mitchell',
163: 1:    'James Hughes',
163: 1:    'Isabella Foster',
163: 1:    'Benjamin Evans',
163: 1:    'Mia Murphy',
163: 1:    'Mason Richardson',
163: 1:    'Charlotte Peterson'
163: 1:  ]
163: 1:}
163: 1:Scores: 3756
163: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P']')
163: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
164: 1:BoardData {
164: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
164: 1:  'expectedAnswer': 'E.C',
164: 1:  'history': [
164: 1:    {
164: 1:      'answer': 'T.H',
164: 1:      'question': 'Tom Harris',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': 'G.L',
164: 1:      'question': 'garlick looney',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': 'E.P',
164: 1:      'question': 'Ethan parker',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': 'O.C',
164: 1:      'question': 'olivia Campbell',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': 'L.J',
164: 1:      'question': 'Liam Jenkins',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': 'E.B',
164: 1:      'question': 'Emma Bryant',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': 'N.R',
164: 1:      'question': 'Noah Reed',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': 'A.C',
164: 1:      'question': 'Ava Coleman',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': 'W.B',
164: 1:      'question': 'William Barnes',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': 'S.M',
164: 1:      'question': 'Sophia Mitchell',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': 'J.H',
164: 1:      'question': 'James Hughes',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': 'I.F',
164: 1:      'question': 'Isabella Foster',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': 'B.E',
164: 1:      'question': 'Benjamin Evans',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': 'M.M',
164: 1:      'question': 'Mia Murphy',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': 'M.R',
164: 1:      'question': 'Mason Richardson',
164: 1:      'valid': true
164: 1:    },
164: 1:    {
164: 1:      'answer': 'C.P',
164: 1:      'question': 'Charlotte Peterson',
164: 1:      'valid': true
164: 1:    }
164: 1:  ],
164: 1:  'info': [
164: 1:    '✅f(Tom Harris) = T.H',
164: 1:    '✅f(garlick looney) = G.L',
164: 1:    '✅f(Ethan parker) = E.P',
164: 1:    '✅f(olivia Campbell) = O.C',
164: 1:    '✅f(Liam Jenkins) = L.J',
164: 1:    '✅f(Emma Bryant) = E.B',
164: 1:    '✅f(Noah Reed) = N.R',
164: 1:    '✅f(Ava Coleman) = A.C',
164: 1:    '✅f(William Barnes) = W.B',
164: 1:    '✅f(Sophia Mitchell) = S.M',
164: 1:    '✅f(James Hughes) = J.H',
164: 1:    '✅f(Isabella Foster) = I.F',
164: 1:    '✅f(Benjamin Evans) = B.E',
164: 1:    '✅f(Mia Murphy) = M.M',
164: 1:    '✅f(Mason Richardson) = M.R',
164: 1:    '✅f(Charlotte Peterson) = C.P',
164: 1:    '❌f(Elijah Cooper) = ??? != E.C'
164: 1:  ],
164: 1:  'level': 5,
164: 1:  'nextQuestion': 'Elijah Cooper',
164: 1:  'questions': [
164: 1:    'Tom Harris',
164: 1:    'garlick looney',
164: 1:    'Ethan parker',
164: 1:    'olivia Campbell',
164: 1:    'Liam Jenkins',
164: 1:    'Emma Bryant',
164: 1:    'Noah Reed',
164: 1:    'Ava Coleman',
164: 1:    'William Barnes',
164: 1:    'Sophia Mitchell',
164: 1:    'James Hughes',
164: 1:    'Isabella Foster',
164: 1:    'Benjamin Evans',
164: 1:    'Mia Murphy',
164: 1:    'Mason Richardson',
164: 1:    'Charlotte Peterson',
164: 1:    'Elijah Cooper'
164: 1:  ]
164: 1:}
164: 1:Scores: 3758
164: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C']')
164: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
165: 1:BoardData {
165: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
165: 1:  'expectedAnswer': 'A.C',
165: 1:  'history': [
165: 1:    {
165: 1:      'answer': 'T.H',
165: 1:      'question': 'Tom Harris',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': 'G.L',
165: 1:      'question': 'garlick looney',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': 'E.P',
165: 1:      'question': 'Ethan parker',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': 'O.C',
165: 1:      'question': 'olivia Campbell',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': 'L.J',
165: 1:      'question': 'Liam Jenkins',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': 'E.B',
165: 1:      'question': 'Emma Bryant',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': 'N.R',
165: 1:      'question': 'Noah Reed',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': 'A.C',
165: 1:      'question': 'Ava Coleman',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': 'W.B',
165: 1:      'question': 'William Barnes',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': 'S.M',
165: 1:      'question': 'Sophia Mitchell',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': 'J.H',
165: 1:      'question': 'James Hughes',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': 'I.F',
165: 1:      'question': 'Isabella Foster',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': 'B.E',
165: 1:      'question': 'Benjamin Evans',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': 'M.M',
165: 1:      'question': 'Mia Murphy',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': 'M.R',
165: 1:      'question': 'Mason Richardson',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': 'C.P',
165: 1:      'question': 'Charlotte Peterson',
165: 1:      'valid': true
165: 1:    },
165: 1:    {
165: 1:      'answer': 'E.C',
165: 1:      'question': 'Elijah Cooper',
165: 1:      'valid': true
165: 1:    }
165: 1:  ],
165: 1:  'info': [
165: 1:    '✅f(Tom Harris) = T.H',
165: 1:    '✅f(garlick looney) = G.L',
165: 1:    '✅f(Ethan parker) = E.P',
165: 1:    '✅f(olivia Campbell) = O.C',
165: 1:    '✅f(Liam Jenkins) = L.J',
165: 1:    '✅f(Emma Bryant) = E.B',
165: 1:    '✅f(Noah Reed) = N.R',
165: 1:    '✅f(Ava Coleman) = A.C',
165: 1:    '✅f(William Barnes) = W.B',
165: 1:    '✅f(Sophia Mitchell) = S.M',
165: 1:    '✅f(James Hughes) = J.H',
165: 1:    '✅f(Isabella Foster) = I.F',
165: 1:    '✅f(Benjamin Evans) = B.E',
165: 1:    '✅f(Mia Murphy) = M.M',
165: 1:    '✅f(Mason Richardson) = M.R',
165: 1:    '✅f(Charlotte Peterson) = C.P',
165: 1:    '✅f(Elijah Cooper) = E.C',
165: 1:    '❌f(Amelia Cox) = ??? != A.C'
165: 1:  ],
165: 1:  'level': 5,
165: 1:  'nextQuestion': 'Amelia Cox',
165: 1:  'questions': [
165: 1:    'Tom Harris',
165: 1:    'garlick looney',
165: 1:    'Ethan parker',
165: 1:    'olivia Campbell',
165: 1:    'Liam Jenkins',
165: 1:    'Emma Bryant',
165: 1:    'Noah Reed',
165: 1:    'Ava Coleman',
165: 1:    'William Barnes',
165: 1:    'Sophia Mitchell',
165: 1:    'James Hughes',
165: 1:    'Isabella Foster',
165: 1:    'Benjamin Evans',
165: 1:    'Mia Murphy',
165: 1:    'Mason Richardson',
165: 1:    'Charlotte Peterson',
165: 1:    'Elijah Cooper',
165: 1:    'Amelia Cox'
165: 1:  ]
165: 1:}
165: 1:Scores: 3760
165: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C']')
165: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
166: 1:BoardData {
166: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
166: 1:  'expectedAnswer': 'A.G',
166: 1:  'history': [
166: 1:    {
166: 1:      'answer': 'T.H',
166: 1:      'question': 'Tom Harris',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': 'G.L',
166: 1:      'question': 'garlick looney',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': 'E.P',
166: 1:      'question': 'Ethan parker',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': 'O.C',
166: 1:      'question': 'olivia Campbell',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': 'L.J',
166: 1:      'question': 'Liam Jenkins',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': 'E.B',
166: 1:      'question': 'Emma Bryant',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': 'N.R',
166: 1:      'question': 'Noah Reed',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': 'A.C',
166: 1:      'question': 'Ava Coleman',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': 'W.B',
166: 1:      'question': 'William Barnes',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': 'S.M',
166: 1:      'question': 'Sophia Mitchell',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': 'J.H',
166: 1:      'question': 'James Hughes',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': 'I.F',
166: 1:      'question': 'Isabella Foster',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': 'B.E',
166: 1:      'question': 'Benjamin Evans',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': 'M.M',
166: 1:      'question': 'Mia Murphy',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': 'M.R',
166: 1:      'question': 'Mason Richardson',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': 'C.P',
166: 1:      'question': 'Charlotte Peterson',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': 'E.C',
166: 1:      'question': 'Elijah Cooper',
166: 1:      'valid': true
166: 1:    },
166: 1:    {
166: 1:      'answer': 'A.C',
166: 1:      'question': 'Amelia Cox',
166: 1:      'valid': true
166: 1:    }
166: 1:  ],
166: 1:  'info': [
166: 1:    '✅f(Tom Harris) = T.H',
166: 1:    '✅f(garlick looney) = G.L',
166: 1:    '✅f(Ethan parker) = E.P',
166: 1:    '✅f(olivia Campbell) = O.C',
166: 1:    '✅f(Liam Jenkins) = L.J',
166: 1:    '✅f(Emma Bryant) = E.B',
166: 1:    '✅f(Noah Reed) = N.R',
166: 1:    '✅f(Ava Coleman) = A.C',
166: 1:    '✅f(William Barnes) = W.B',
166: 1:    '✅f(Sophia Mitchell) = S.M',
166: 1:    '✅f(James Hughes) = J.H',
166: 1:    '✅f(Isabella Foster) = I.F',
166: 1:    '✅f(Benjamin Evans) = B.E',
166: 1:    '✅f(Mia Murphy) = M.M',
166: 1:    '✅f(Mason Richardson) = M.R',
166: 1:    '✅f(Charlotte Peterson) = C.P',
166: 1:    '✅f(Elijah Cooper) = E.C',
166: 1:    '✅f(Amelia Cox) = A.C',
166: 1:    '❌f(Alexander Griffin) = ??? != A.G'
166: 1:  ],
166: 1:  'level': 5,
166: 1:  'nextQuestion': 'Alexander Griffin',
166: 1:  'questions': [
166: 1:    'Tom Harris',
166: 1:    'garlick looney',
166: 1:    'Ethan parker',
166: 1:    'olivia Campbell',
166: 1:    'Liam Jenkins',
166: 1:    'Emma Bryant',
166: 1:    'Noah Reed',
166: 1:    'Ava Coleman',
166: 1:    'William Barnes',
166: 1:    'Sophia Mitchell',
166: 1:    'James Hughes',
166: 1:    'Isabella Foster',
166: 1:    'Benjamin Evans',
166: 1:    'Mia Murphy',
166: 1:    'Mason Richardson',
166: 1:    'Charlotte Peterson',
166: 1:    'Elijah Cooper',
166: 1:    'Amelia Cox',
166: 1:    'Alexander Griffin'
166: 1:  ]
166: 1:}
166: 1:Scores: 3762
166: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C', 'A.G']')
166: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
167: 1:BoardData {
167: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
167: 1:  'expectedAnswer': 'H.B',
167: 1:  'history': [
167: 1:    {
167: 1:      'answer': 'T.H',
167: 1:      'question': 'Tom Harris',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': 'G.L',
167: 1:      'question': 'garlick looney',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': 'E.P',
167: 1:      'question': 'Ethan parker',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': 'O.C',
167: 1:      'question': 'olivia Campbell',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': 'L.J',
167: 1:      'question': 'Liam Jenkins',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': 'E.B',
167: 1:      'question': 'Emma Bryant',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': 'N.R',
167: 1:      'question': 'Noah Reed',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': 'A.C',
167: 1:      'question': 'Ava Coleman',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': 'W.B',
167: 1:      'question': 'William Barnes',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': 'S.M',
167: 1:      'question': 'Sophia Mitchell',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': 'J.H',
167: 1:      'question': 'James Hughes',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': 'I.F',
167: 1:      'question': 'Isabella Foster',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': 'B.E',
167: 1:      'question': 'Benjamin Evans',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': 'M.M',
167: 1:      'question': 'Mia Murphy',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': 'M.R',
167: 1:      'question': 'Mason Richardson',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': 'C.P',
167: 1:      'question': 'Charlotte Peterson',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': 'E.C',
167: 1:      'question': 'Elijah Cooper',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': 'A.C',
167: 1:      'question': 'Amelia Cox',
167: 1:      'valid': true
167: 1:    },
167: 1:    {
167: 1:      'answer': 'A.G',
167: 1:      'question': 'Alexander Griffin',
167: 1:      'valid': true
167: 1:    }
167: 1:  ],
167: 1:  'info': [
167: 1:    '✅f(Tom Harris) = T.H',
167: 1:    '✅f(garlick looney) = G.L',
167: 1:    '✅f(Ethan parker) = E.P',
167: 1:    '✅f(olivia Campbell) = O.C',
167: 1:    '✅f(Liam Jenkins) = L.J',
167: 1:    '✅f(Emma Bryant) = E.B',
167: 1:    '✅f(Noah Reed) = N.R',
167: 1:    '✅f(Ava Coleman) = A.C',
167: 1:    '✅f(William Barnes) = W.B',
167: 1:    '✅f(Sophia Mitchell) = S.M',
167: 1:    '✅f(James Hughes) = J.H',
167: 1:    '✅f(Isabella Foster) = I.F',
167: 1:    '✅f(Benjamin Evans) = B.E',
167: 1:    '✅f(Mia Murphy) = M.M',
167: 1:    '✅f(Mason Richardson) = M.R',
167: 1:    '✅f(Charlotte Peterson) = C.P',
167: 1:    '✅f(Elijah Cooper) = E.C',
167: 1:    '✅f(Amelia Cox) = A.C',
167: 1:    '✅f(Alexander Griffin) = A.G',
167: 1:    '❌f(Harper Brooks) = ??? != H.B'
167: 1:  ],
167: 1:  'level': 5,
167: 1:  'nextQuestion': 'Harper Brooks',
167: 1:  'questions': [
167: 1:    'Tom Harris',
167: 1:    'garlick looney',
167: 1:    'Ethan parker',
167: 1:    'olivia Campbell',
167: 1:    'Liam Jenkins',
167: 1:    'Emma Bryant',
167: 1:    'Noah Reed',
167: 1:    'Ava Coleman',
167: 1:    'William Barnes',
167: 1:    'Sophia Mitchell',
167: 1:    'James Hughes',
167: 1:    'Isabella Foster',
167: 1:    'Benjamin Evans',
167: 1:    'Mia Murphy',
167: 1:    'Mason Richardson',
167: 1:    'Charlotte Peterson',
167: 1:    'Elijah Cooper',
167: 1:    'Amelia Cox',
167: 1:    'Alexander Griffin',
167: 1:    'Harper Brooks'
167: 1:  ]
167: 1:}
167: 1:Scores: 3764
167: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C', 'A.G', 'H.B']')
167: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
168: 1:BoardData {
168: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
168: 1:  'expectedAnswer': 'D.T',
168: 1:  'history': [
168: 1:    {
168: 1:      'answer': 'T.H',
168: 1:      'question': 'Tom Harris',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': 'G.L',
168: 1:      'question': 'garlick looney',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': 'E.P',
168: 1:      'question': 'Ethan parker',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': 'O.C',
168: 1:      'question': 'olivia Campbell',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': 'L.J',
168: 1:      'question': 'Liam Jenkins',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': 'E.B',
168: 1:      'question': 'Emma Bryant',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': 'N.R',
168: 1:      'question': 'Noah Reed',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': 'A.C',
168: 1:      'question': 'Ava Coleman',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': 'W.B',
168: 1:      'question': 'William Barnes',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': 'S.M',
168: 1:      'question': 'Sophia Mitchell',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': 'J.H',
168: 1:      'question': 'James Hughes',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': 'I.F',
168: 1:      'question': 'Isabella Foster',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': 'B.E',
168: 1:      'question': 'Benjamin Evans',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': 'M.M',
168: 1:      'question': 'Mia Murphy',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': 'M.R',
168: 1:      'question': 'Mason Richardson',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': 'C.P',
168: 1:      'question': 'Charlotte Peterson',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': 'E.C',
168: 1:      'question': 'Elijah Cooper',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': 'A.C',
168: 1:      'question': 'Amelia Cox',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': 'A.G',
168: 1:      'question': 'Alexander Griffin',
168: 1:      'valid': true
168: 1:    },
168: 1:    {
168: 1:      'answer': 'H.B',
168: 1:      'question': 'Harper Brooks',
168: 1:      'valid': true
168: 1:    }
168: 1:  ],
168: 1:  'info': [
168: 1:    '✅f(Tom Harris) = T.H',
168: 1:    '✅f(garlick looney) = G.L',
168: 1:    '✅f(Ethan parker) = E.P',
168: 1:    '✅f(olivia Campbell) = O.C',
168: 1:    '✅f(Liam Jenkins) = L.J',
168: 1:    '✅f(Emma Bryant) = E.B',
168: 1:    '✅f(Noah Reed) = N.R',
168: 1:    '✅f(Ava Coleman) = A.C',
168: 1:    '✅f(William Barnes) = W.B',
168: 1:    '✅f(Sophia Mitchell) = S.M',
168: 1:    '✅f(James Hughes) = J.H',
168: 1:    '✅f(Isabella Foster) = I.F',
168: 1:    '✅f(Benjamin Evans) = B.E',
168: 1:    '✅f(Mia Murphy) = M.M',
168: 1:    '✅f(Mason Richardson) = M.R',
168: 1:    '✅f(Charlotte Peterson) = C.P',
168: 1:    '✅f(Elijah Cooper) = E.C',
168: 1:    '✅f(Amelia Cox) = A.C',
168: 1:    '✅f(Alexander Griffin) = A.G',
168: 1:    '✅f(Harper Brooks) = H.B',
168: 1:    '❌f(Daniel Turner) = ??? != D.T'
168: 1:  ],
168: 1:  'level': 5,
168: 1:  'nextQuestion': 'Daniel Turner',
168: 1:  'questions': [
168: 1:    'Tom Harris',
168: 1:    'garlick looney',
168: 1:    'Ethan parker',
168: 1:    'olivia Campbell',
168: 1:    'Liam Jenkins',
168: 1:    'Emma Bryant',
168: 1:    'Noah Reed',
168: 1:    'Ava Coleman',
168: 1:    'William Barnes',
168: 1:    'Sophia Mitchell',
168: 1:    'James Hughes',
168: 1:    'Isabella Foster',
168: 1:    'Benjamin Evans',
168: 1:    'Mia Murphy',
168: 1:    'Mason Richardson',
168: 1:    'Charlotte Peterson',
168: 1:    'Elijah Cooper',
168: 1:    'Amelia Cox',
168: 1:    'Alexander Griffin',
168: 1:    'Harper Brooks',
168: 1:    'Daniel Turner'
168: 1:  ]
168: 1:}
168: 1:Scores: 3766
168: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C', 'A.G', 'H.B', 'D.T']')
168: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
169: 1:BoardData {
169: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
169: 1:  'expectedAnswer': 'A.K',
169: 1:  'history': [
169: 1:    {
169: 1:      'answer': 'T.H',
169: 1:      'question': 'Tom Harris',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': 'G.L',
169: 1:      'question': 'garlick looney',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': 'E.P',
169: 1:      'question': 'Ethan parker',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': 'O.C',
169: 1:      'question': 'olivia Campbell',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': 'L.J',
169: 1:      'question': 'Liam Jenkins',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': 'E.B',
169: 1:      'question': 'Emma Bryant',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': 'N.R',
169: 1:      'question': 'Noah Reed',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': 'A.C',
169: 1:      'question': 'Ava Coleman',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': 'W.B',
169: 1:      'question': 'William Barnes',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': 'S.M',
169: 1:      'question': 'Sophia Mitchell',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': 'J.H',
169: 1:      'question': 'James Hughes',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': 'I.F',
169: 1:      'question': 'Isabella Foster',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': 'B.E',
169: 1:      'question': 'Benjamin Evans',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': 'M.M',
169: 1:      'question': 'Mia Murphy',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': 'M.R',
169: 1:      'question': 'Mason Richardson',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': 'C.P',
169: 1:      'question': 'Charlotte Peterson',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': 'E.C',
169: 1:      'question': 'Elijah Cooper',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': 'A.C',
169: 1:      'question': 'Amelia Cox',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': 'A.G',
169: 1:      'question': 'Alexander Griffin',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': 'H.B',
169: 1:      'question': 'Harper Brooks',
169: 1:      'valid': true
169: 1:    },
169: 1:    {
169: 1:      'answer': 'D.T',
169: 1:      'question': 'Daniel Turner',
169: 1:      'valid': true
169: 1:    }
169: 1:  ],
169: 1:  'info': [
169: 1:    '✅f(Tom Harris) = T.H',
169: 1:    '✅f(garlick looney) = G.L',
169: 1:    '✅f(Ethan parker) = E.P',
169: 1:    '✅f(olivia Campbell) = O.C',
169: 1:    '✅f(Liam Jenkins) = L.J',
169: 1:    '✅f(Emma Bryant) = E.B',
169: 1:    '✅f(Noah Reed) = N.R',
169: 1:    '✅f(Ava Coleman) = A.C',
169: 1:    '✅f(William Barnes) = W.B',
169: 1:    '✅f(Sophia Mitchell) = S.M',
169: 1:    '✅f(James Hughes) = J.H',
169: 1:    '✅f(Isabella Foster) = I.F',
169: 1:    '✅f(Benjamin Evans) = B.E',
169: 1:    '✅f(Mia Murphy) = M.M',
169: 1:    '✅f(Mason Richardson) = M.R',
169: 1:    '✅f(Charlotte Peterson) = C.P',
169: 1:    '✅f(Elijah Cooper) = E.C',
169: 1:    '✅f(Amelia Cox) = A.C',
169: 1:    '✅f(Alexander Griffin) = A.G',
169: 1:    '✅f(Harper Brooks) = H.B',
169: 1:    '✅f(Daniel Turner) = D.T',
169: 1:    '❌f(Abigail Kelly) = ??? != A.K'
169: 1:  ],
169: 1:  'level': 5,
169: 1:  'nextQuestion': 'Abigail Kelly',
169: 1:  'questions': [
169: 1:    'Tom Harris',
169: 1:    'garlick looney',
169: 1:    'Ethan parker',
169: 1:    'olivia Campbell',
169: 1:    'Liam Jenkins',
169: 1:    'Emma Bryant',
169: 1:    'Noah Reed',
169: 1:    'Ava Coleman',
169: 1:    'William Barnes',
169: 1:    'Sophia Mitchell',
169: 1:    'James Hughes',
169: 1:    'Isabella Foster',
169: 1:    'Benjamin Evans',
169: 1:    'Mia Murphy',
169: 1:    'Mason Richardson',
169: 1:    'Charlotte Peterson',
169: 1:    'Elijah Cooper',
169: 1:    'Amelia Cox',
169: 1:    'Alexander Griffin',
169: 1:    'Harper Brooks',
169: 1:    'Daniel Turner',
169: 1:    'Abigail Kelly'
169: 1:  ]
169: 1:}
169: 1:Scores: 3768
169: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C', 'A.G', 'H.B', 'D.T', 'A.K']')
169: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
170: 1:BoardData {
170: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
170: 1:  'expectedAnswer': 'H.P',
170: 1:  'history': [
170: 1:    {
170: 1:      'answer': 'T.H',
170: 1:      'question': 'Tom Harris',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': 'G.L',
170: 1:      'question': 'garlick looney',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': 'E.P',
170: 1:      'question': 'Ethan parker',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': 'O.C',
170: 1:      'question': 'olivia Campbell',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': 'L.J',
170: 1:      'question': 'Liam Jenkins',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': 'E.B',
170: 1:      'question': 'Emma Bryant',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': 'N.R',
170: 1:      'question': 'Noah Reed',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': 'A.C',
170: 1:      'question': 'Ava Coleman',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': 'W.B',
170: 1:      'question': 'William Barnes',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': 'S.M',
170: 1:      'question': 'Sophia Mitchell',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': 'J.H',
170: 1:      'question': 'James Hughes',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': 'I.F',
170: 1:      'question': 'Isabella Foster',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': 'B.E',
170: 1:      'question': 'Benjamin Evans',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': 'M.M',
170: 1:      'question': 'Mia Murphy',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': 'M.R',
170: 1:      'question': 'Mason Richardson',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': 'C.P',
170: 1:      'question': 'Charlotte Peterson',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': 'E.C',
170: 1:      'question': 'Elijah Cooper',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': 'A.C',
170: 1:      'question': 'Amelia Cox',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': 'A.G',
170: 1:      'question': 'Alexander Griffin',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': 'H.B',
170: 1:      'question': 'Harper Brooks',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': 'D.T',
170: 1:      'question': 'Daniel Turner',
170: 1:      'valid': true
170: 1:    },
170: 1:    {
170: 1:      'answer': 'A.K',
170: 1:      'question': 'Abigail Kelly',
170: 1:      'valid': true
170: 1:    }
170: 1:  ],
170: 1:  'info': [
170: 1:    '✅f(Tom Harris) = T.H',
170: 1:    '✅f(garlick looney) = G.L',
170: 1:    '✅f(Ethan parker) = E.P',
170: 1:    '✅f(olivia Campbell) = O.C',
170: 1:    '✅f(Liam Jenkins) = L.J',
170: 1:    '✅f(Emma Bryant) = E.B',
170: 1:    '✅f(Noah Reed) = N.R',
170: 1:    '✅f(Ava Coleman) = A.C',
170: 1:    '✅f(William Barnes) = W.B',
170: 1:    '✅f(Sophia Mitchell) = S.M',
170: 1:    '✅f(James Hughes) = J.H',
170: 1:    '✅f(Isabella Foster) = I.F',
170: 1:    '✅f(Benjamin Evans) = B.E',
170: 1:    '✅f(Mia Murphy) = M.M',
170: 1:    '✅f(Mason Richardson) = M.R',
170: 1:    '✅f(Charlotte Peterson) = C.P',
170: 1:    '✅f(Elijah Cooper) = E.C',
170: 1:    '✅f(Amelia Cox) = A.C',
170: 1:    '✅f(Alexander Griffin) = A.G',
170: 1:    '✅f(Harper Brooks) = H.B',
170: 1:    '✅f(Daniel Turner) = D.T',
170: 1:    '✅f(Abigail Kelly) = A.K',
170: 1:    '❌f(Henry Price) = ??? != H.P'
170: 1:  ],
170: 1:  'level': 5,
170: 1:  'nextQuestion': 'Henry Price',
170: 1:  'questions': [
170: 1:    'Tom Harris',
170: 1:    'garlick looney',
170: 1:    'Ethan parker',
170: 1:    'olivia Campbell',
170: 1:    'Liam Jenkins',
170: 1:    'Emma Bryant',
170: 1:    'Noah Reed',
170: 1:    'Ava Coleman',
170: 1:    'William Barnes',
170: 1:    'Sophia Mitchell',
170: 1:    'James Hughes',
170: 1:    'Isabella Foster',
170: 1:    'Benjamin Evans',
170: 1:    'Mia Murphy',
170: 1:    'Mason Richardson',
170: 1:    'Charlotte Peterson',
170: 1:    'Elijah Cooper',
170: 1:    'Amelia Cox',
170: 1:    'Alexander Griffin',
170: 1:    'Harper Brooks',
170: 1:    'Daniel Turner',
170: 1:    'Abigail Kelly',
170: 1:    'Henry Price'
170: 1:  ]
170: 1:}
170: 1:Scores: 3770
170: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C', 'A.G', 'H.B', 'D.T', 'A.K', 'H.P']')
170: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
171: 1:BoardData {
171: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
171: 1:  'expectedAnswer': 'E.R',
171: 1:  'history': [
171: 1:    {
171: 1:      'answer': 'T.H',
171: 1:      'question': 'Tom Harris',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': 'G.L',
171: 1:      'question': 'garlick looney',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': 'E.P',
171: 1:      'question': 'Ethan parker',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': 'O.C',
171: 1:      'question': 'olivia Campbell',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': 'L.J',
171: 1:      'question': 'Liam Jenkins',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': 'E.B',
171: 1:      'question': 'Emma Bryant',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': 'N.R',
171: 1:      'question': 'Noah Reed',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': 'A.C',
171: 1:      'question': 'Ava Coleman',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': 'W.B',
171: 1:      'question': 'William Barnes',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': 'S.M',
171: 1:      'question': 'Sophia Mitchell',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': 'J.H',
171: 1:      'question': 'James Hughes',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': 'I.F',
171: 1:      'question': 'Isabella Foster',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': 'B.E',
171: 1:      'question': 'Benjamin Evans',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': 'M.M',
171: 1:      'question': 'Mia Murphy',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': 'M.R',
171: 1:      'question': 'Mason Richardson',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': 'C.P',
171: 1:      'question': 'Charlotte Peterson',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': 'E.C',
171: 1:      'question': 'Elijah Cooper',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': 'A.C',
171: 1:      'question': 'Amelia Cox',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': 'A.G',
171: 1:      'question': 'Alexander Griffin',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': 'H.B',
171: 1:      'question': 'Harper Brooks',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': 'D.T',
171: 1:      'question': 'Daniel Turner',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': 'A.K',
171: 1:      'question': 'Abigail Kelly',
171: 1:      'valid': true
171: 1:    },
171: 1:    {
171: 1:      'answer': 'H.P',
171: 1:      'question': 'Henry Price',
171: 1:      'valid': true
171: 1:    }
171: 1:  ],
171: 1:  'info': [
171: 1:    '✅f(Tom Harris) = T.H',
171: 1:    '✅f(garlick looney) = G.L',
171: 1:    '✅f(Ethan parker) = E.P',
171: 1:    '✅f(olivia Campbell) = O.C',
171: 1:    '✅f(Liam Jenkins) = L.J',
171: 1:    '✅f(Emma Bryant) = E.B',
171: 1:    '✅f(Noah Reed) = N.R',
171: 1:    '✅f(Ava Coleman) = A.C',
171: 1:    '✅f(William Barnes) = W.B',
171: 1:    '✅f(Sophia Mitchell) = S.M',
171: 1:    '✅f(James Hughes) = J.H',
171: 1:    '✅f(Isabella Foster) = I.F',
171: 1:    '✅f(Benjamin Evans) = B.E',
171: 1:    '✅f(Mia Murphy) = M.M',
171: 1:    '✅f(Mason Richardson) = M.R',
171: 1:    '✅f(Charlotte Peterson) = C.P',
171: 1:    '✅f(Elijah Cooper) = E.C',
171: 1:    '✅f(Amelia Cox) = A.C',
171: 1:    '✅f(Alexander Griffin) = A.G',
171: 1:    '✅f(Harper Brooks) = H.B',
171: 1:    '✅f(Daniel Turner) = D.T',
171: 1:    '✅f(Abigail Kelly) = A.K',
171: 1:    '✅f(Henry Price) = H.P',
171: 1:    '❌f(Emily Ross) = ??? != E.R'
171: 1:  ],
171: 1:  'level': 5,
171: 1:  'nextQuestion': 'Emily Ross',
171: 1:  'questions': [
171: 1:    'Tom Harris',
171: 1:    'garlick looney',
171: 1:    'Ethan parker',
171: 1:    'olivia Campbell',
171: 1:    'Liam Jenkins',
171: 1:    'Emma Bryant',
171: 1:    'Noah Reed',
171: 1:    'Ava Coleman',
171: 1:    'William Barnes',
171: 1:    'Sophia Mitchell',
171: 1:    'James Hughes',
171: 1:    'Isabella Foster',
171: 1:    'Benjamin Evans',
171: 1:    'Mia Murphy',
171: 1:    'Mason Richardson',
171: 1:    'Charlotte Peterson',
171: 1:    'Elijah Cooper',
171: 1:    'Amelia Cox',
171: 1:    'Alexander Griffin',
171: 1:    'Harper Brooks',
171: 1:    'Daniel Turner',
171: 1:    'Abigail Kelly',
171: 1:    'Henry Price',
171: 1:    'Emily Ross'
171: 1:  ]
171: 1:}
171: 1:Scores: 3772
171: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C', 'A.G', 'H.B', 'D.T', 'A.K', 'H.P', 'E.R']')
171: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
172: 1:BoardData {
172: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
172: 1:  'expectedAnswer': 'S.W',
172: 1:  'history': [
172: 1:    {
172: 1:      'answer': 'T.H',
172: 1:      'question': 'Tom Harris',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': 'G.L',
172: 1:      'question': 'garlick looney',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': 'E.P',
172: 1:      'question': 'Ethan parker',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': 'O.C',
172: 1:      'question': 'olivia Campbell',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': 'L.J',
172: 1:      'question': 'Liam Jenkins',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': 'E.B',
172: 1:      'question': 'Emma Bryant',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': 'N.R',
172: 1:      'question': 'Noah Reed',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': 'A.C',
172: 1:      'question': 'Ava Coleman',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': 'W.B',
172: 1:      'question': 'William Barnes',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': 'S.M',
172: 1:      'question': 'Sophia Mitchell',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': 'J.H',
172: 1:      'question': 'James Hughes',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': 'I.F',
172: 1:      'question': 'Isabella Foster',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': 'B.E',
172: 1:      'question': 'Benjamin Evans',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': 'M.M',
172: 1:      'question': 'Mia Murphy',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': 'M.R',
172: 1:      'question': 'Mason Richardson',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': 'C.P',
172: 1:      'question': 'Charlotte Peterson',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': 'E.C',
172: 1:      'question': 'Elijah Cooper',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': 'A.C',
172: 1:      'question': 'Amelia Cox',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': 'A.G',
172: 1:      'question': 'Alexander Griffin',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': 'H.B',
172: 1:      'question': 'Harper Brooks',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': 'D.T',
172: 1:      'question': 'Daniel Turner',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': 'A.K',
172: 1:      'question': 'Abigail Kelly',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': 'H.P',
172: 1:      'question': 'Henry Price',
172: 1:      'valid': true
172: 1:    },
172: 1:    {
172: 1:      'answer': 'E.R',
172: 1:      'question': 'Emily Ross',
172: 1:      'valid': true
172: 1:    }
172: 1:  ],
172: 1:  'info': [
172: 1:    '✅f(Tom Harris) = T.H',
172: 1:    '✅f(garlick looney) = G.L',
172: 1:    '✅f(Ethan parker) = E.P',
172: 1:    '✅f(olivia Campbell) = O.C',
172: 1:    '✅f(Liam Jenkins) = L.J',
172: 1:    '✅f(Emma Bryant) = E.B',
172: 1:    '✅f(Noah Reed) = N.R',
172: 1:    '✅f(Ava Coleman) = A.C',
172: 1:    '✅f(William Barnes) = W.B',
172: 1:    '✅f(Sophia Mitchell) = S.M',
172: 1:    '✅f(James Hughes) = J.H',
172: 1:    '✅f(Isabella Foster) = I.F',
172: 1:    '✅f(Benjamin Evans) = B.E',
172: 1:    '✅f(Mia Murphy) = M.M',
172: 1:    '✅f(Mason Richardson) = M.R',
172: 1:    '✅f(Charlotte Peterson) = C.P',
172: 1:    '✅f(Elijah Cooper) = E.C',
172: 1:    '✅f(Amelia Cox) = A.C',
172: 1:    '✅f(Alexander Griffin) = A.G',
172: 1:    '✅f(Harper Brooks) = H.B',
172: 1:    '✅f(Daniel Turner) = D.T',
172: 1:    '✅f(Abigail Kelly) = A.K',
172: 1:    '✅f(Henry Price) = H.P',
172: 1:    '✅f(Emily Ross) = E.R',
172: 1:    '❌f(Samuel Ward) = ??? != S.W'
172: 1:  ],
172: 1:  'level': 5,
172: 1:  'nextQuestion': 'Samuel Ward',
172: 1:  'questions': [
172: 1:    'Tom Harris',
172: 1:    'garlick looney',
172: 1:    'Ethan parker',
172: 1:    'olivia Campbell',
172: 1:    'Liam Jenkins',
172: 1:    'Emma Bryant',
172: 1:    'Noah Reed',
172: 1:    'Ava Coleman',
172: 1:    'William Barnes',
172: 1:    'Sophia Mitchell',
172: 1:    'James Hughes',
172: 1:    'Isabella Foster',
172: 1:    'Benjamin Evans',
172: 1:    'Mia Murphy',
172: 1:    'Mason Richardson',
172: 1:    'Charlotte Peterson',
172: 1:    'Elijah Cooper',
172: 1:    'Amelia Cox',
172: 1:    'Alexander Griffin',
172: 1:    'Harper Brooks',
172: 1:    'Daniel Turner',
172: 1:    'Abigail Kelly',
172: 1:    'Henry Price',
172: 1:    'Emily Ross',
172: 1:    'Samuel Ward'
172: 1:  ]
172: 1:}
172: 1:Scores: 3774
172: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C', 'A.G', 'H.B', 'D.T', 'A.K', 'H.P', 'E.R', 'S.W']')
172: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
173: 1:BoardData {
173: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
173: 1:  'expectedAnswer': 'E.M',
173: 1:  'history': [
173: 1:    {
173: 1:      'answer': 'T.H',
173: 1:      'question': 'Tom Harris',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': 'G.L',
173: 1:      'question': 'garlick looney',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': 'E.P',
173: 1:      'question': 'Ethan parker',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': 'O.C',
173: 1:      'question': 'olivia Campbell',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': 'L.J',
173: 1:      'question': 'Liam Jenkins',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': 'E.B',
173: 1:      'question': 'Emma Bryant',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': 'N.R',
173: 1:      'question': 'Noah Reed',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': 'A.C',
173: 1:      'question': 'Ava Coleman',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': 'W.B',
173: 1:      'question': 'William Barnes',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': 'S.M',
173: 1:      'question': 'Sophia Mitchell',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': 'J.H',
173: 1:      'question': 'James Hughes',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': 'I.F',
173: 1:      'question': 'Isabella Foster',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': 'B.E',
173: 1:      'question': 'Benjamin Evans',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': 'M.M',
173: 1:      'question': 'Mia Murphy',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': 'M.R',
173: 1:      'question': 'Mason Richardson',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': 'C.P',
173: 1:      'question': 'Charlotte Peterson',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': 'E.C',
173: 1:      'question': 'Elijah Cooper',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': 'A.C',
173: 1:      'question': 'Amelia Cox',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': 'A.G',
173: 1:      'question': 'Alexander Griffin',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': 'H.B',
173: 1:      'question': 'Harper Brooks',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': 'D.T',
173: 1:      'question': 'Daniel Turner',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': 'A.K',
173: 1:      'question': 'Abigail Kelly',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': 'H.P',
173: 1:      'question': 'Henry Price',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': 'E.R',
173: 1:      'question': 'Emily Ross',
173: 1:      'valid': true
173: 1:    },
173: 1:    {
173: 1:      'answer': 'S.W',
173: 1:      'question': 'Samuel Ward',
173: 1:      'valid': true
173: 1:    }
173: 1:  ],
173: 1:  'info': [
173: 1:    '✅f(Tom Harris) = T.H',
173: 1:    '✅f(garlick looney) = G.L',
173: 1:    '✅f(Ethan parker) = E.P',
173: 1:    '✅f(olivia Campbell) = O.C',
173: 1:    '✅f(Liam Jenkins) = L.J',
173: 1:    '✅f(Emma Bryant) = E.B',
173: 1:    '✅f(Noah Reed) = N.R',
173: 1:    '✅f(Ava Coleman) = A.C',
173: 1:    '✅f(William Barnes) = W.B',
173: 1:    '✅f(Sophia Mitchell) = S.M',
173: 1:    '✅f(James Hughes) = J.H',
173: 1:    '✅f(Isabella Foster) = I.F',
173: 1:    '✅f(Benjamin Evans) = B.E',
173: 1:    '✅f(Mia Murphy) = M.M',
173: 1:    '✅f(Mason Richardson) = M.R',
173: 1:    '✅f(Charlotte Peterson) = C.P',
173: 1:    '✅f(Elijah Cooper) = E.C',
173: 1:    '✅f(Amelia Cox) = A.C',
173: 1:    '✅f(Alexander Griffin) = A.G',
173: 1:    '✅f(Harper Brooks) = H.B',
173: 1:    '✅f(Daniel Turner) = D.T',
173: 1:    '✅f(Abigail Kelly) = A.K',
173: 1:    '✅f(Henry Price) = H.P',
173: 1:    '✅f(Emily Ross) = E.R',
173: 1:    '✅f(Samuel Ward) = S.W',
173: 1:    '❌f(Elizabeth Morgan) = ??? != E.M'
173: 1:  ],
173: 1:  'level': 5,
173: 1:  'nextQuestion': 'Elizabeth Morgan',
173: 1:  'questions': [
173: 1:    'Tom Harris',
173: 1:    'garlick looney',
173: 1:    'Ethan parker',
173: 1:    'olivia Campbell',
173: 1:    'Liam Jenkins',
173: 1:    'Emma Bryant',
173: 1:    'Noah Reed',
173: 1:    'Ava Coleman',
173: 1:    'William Barnes',
173: 1:    'Sophia Mitchell',
173: 1:    'James Hughes',
173: 1:    'Isabella Foster',
173: 1:    'Benjamin Evans',
173: 1:    'Mia Murphy',
173: 1:    'Mason Richardson',
173: 1:    'Charlotte Peterson',
173: 1:    'Elijah Cooper',
173: 1:    'Amelia Cox',
173: 1:    'Alexander Griffin',
173: 1:    'Harper Brooks',
173: 1:    'Daniel Turner',
173: 1:    'Abigail Kelly',
173: 1:    'Henry Price',
173: 1:    'Emily Ross',
173: 1:    'Samuel Ward',
173: 1:    'Elizabeth Morgan'
173: 1:  ]
173: 1:}
173: 1:Scores: 3776
173: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C', 'A.G', 'H.B', 'D.T', 'A.K', 'H.P', 'E.R', 'S.W', 'E.M']')
173: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
174: 1:BoardData {
174: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
174: 1:  'expectedAnswer': 'J.W',
174: 1:  'history': [
174: 1:    {
174: 1:      'answer': 'T.H',
174: 1:      'question': 'Tom Harris',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': 'G.L',
174: 1:      'question': 'garlick looney',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': 'E.P',
174: 1:      'question': 'Ethan parker',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': 'O.C',
174: 1:      'question': 'olivia Campbell',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': 'L.J',
174: 1:      'question': 'Liam Jenkins',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': 'E.B',
174: 1:      'question': 'Emma Bryant',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': 'N.R',
174: 1:      'question': 'Noah Reed',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': 'A.C',
174: 1:      'question': 'Ava Coleman',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': 'W.B',
174: 1:      'question': 'William Barnes',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': 'S.M',
174: 1:      'question': 'Sophia Mitchell',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': 'J.H',
174: 1:      'question': 'James Hughes',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': 'I.F',
174: 1:      'question': 'Isabella Foster',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': 'B.E',
174: 1:      'question': 'Benjamin Evans',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': 'M.M',
174: 1:      'question': 'Mia Murphy',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': 'M.R',
174: 1:      'question': 'Mason Richardson',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': 'C.P',
174: 1:      'question': 'Charlotte Peterson',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': 'E.C',
174: 1:      'question': 'Elijah Cooper',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': 'A.C',
174: 1:      'question': 'Amelia Cox',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': 'A.G',
174: 1:      'question': 'Alexander Griffin',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': 'H.B',
174: 1:      'question': 'Harper Brooks',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': 'D.T',
174: 1:      'question': 'Daniel Turner',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': 'A.K',
174: 1:      'question': 'Abigail Kelly',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': 'H.P',
174: 1:      'question': 'Henry Price',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': 'E.R',
174: 1:      'question': 'Emily Ross',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': 'S.W',
174: 1:      'question': 'Samuel Ward',
174: 1:      'valid': true
174: 1:    },
174: 1:    {
174: 1:      'answer': 'E.M',
174: 1:      'question': 'Elizabeth Morgan',
174: 1:      'valid': true
174: 1:    }
174: 1:  ],
174: 1:  'info': [
174: 1:    '✅f(Tom Harris) = T.H',
174: 1:    '✅f(garlick looney) = G.L',
174: 1:    '✅f(Ethan parker) = E.P',
174: 1:    '✅f(olivia Campbell) = O.C',
174: 1:    '✅f(Liam Jenkins) = L.J',
174: 1:    '✅f(Emma Bryant) = E.B',
174: 1:    '✅f(Noah Reed) = N.R',
174: 1:    '✅f(Ava Coleman) = A.C',
174: 1:    '✅f(William Barnes) = W.B',
174: 1:    '✅f(Sophia Mitchell) = S.M',
174: 1:    '✅f(James Hughes) = J.H',
174: 1:    '✅f(Isabella Foster) = I.F',
174: 1:    '✅f(Benjamin Evans) = B.E',
174: 1:    '✅f(Mia Murphy) = M.M',
174: 1:    '✅f(Mason Richardson) = M.R',
174: 1:    '✅f(Charlotte Peterson) = C.P',
174: 1:    '✅f(Elijah Cooper) = E.C',
174: 1:    '✅f(Amelia Cox) = A.C',
174: 1:    '✅f(Alexander Griffin) = A.G',
174: 1:    '✅f(Harper Brooks) = H.B',
174: 1:    '✅f(Daniel Turner) = D.T',
174: 1:    '✅f(Abigail Kelly) = A.K',
174: 1:    '✅f(Henry Price) = H.P',
174: 1:    '✅f(Emily Ross) = E.R',
174: 1:    '✅f(Samuel Ward) = S.W',
174: 1:    '✅f(Elizabeth Morgan) = E.M',
174: 1:    '❌f(Joseph Watson) = ??? != J.W'
174: 1:  ],
174: 1:  'level': 5,
174: 1:  'nextQuestion': 'Joseph Watson',
174: 1:  'questions': [
174: 1:    'Tom Harris',
174: 1:    'garlick looney',
174: 1:    'Ethan parker',
174: 1:    'olivia Campbell',
174: 1:    'Liam Jenkins',
174: 1:    'Emma Bryant',
174: 1:    'Noah Reed',
174: 1:    'Ava Coleman',
174: 1:    'William Barnes',
174: 1:    'Sophia Mitchell',
174: 1:    'James Hughes',
174: 1:    'Isabella Foster',
174: 1:    'Benjamin Evans',
174: 1:    'Mia Murphy',
174: 1:    'Mason Richardson',
174: 1:    'Charlotte Peterson',
174: 1:    'Elijah Cooper',
174: 1:    'Amelia Cox',
174: 1:    'Alexander Griffin',
174: 1:    'Harper Brooks',
174: 1:    'Daniel Turner',
174: 1:    'Abigail Kelly',
174: 1:    'Henry Price',
174: 1:    'Emily Ross',
174: 1:    'Samuel Ward',
174: 1:    'Elizabeth Morgan',
174: 1:    'Joseph Watson'
174: 1:  ]
174: 1:}
174: 1:Scores: 3778
174: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C', 'A.G', 'H.B', 'D.T', 'A.K', 'H.P', 'E.R', 'S.W', 'E.M', 'J.W']')
174: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
175: 1:BoardData {
175: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
175: 1:  'expectedAnswer': 'E.B',
175: 1:  'history': [
175: 1:    {
175: 1:      'answer': 'T.H',
175: 1:      'question': 'Tom Harris',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': 'G.L',
175: 1:      'question': 'garlick looney',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': 'E.P',
175: 1:      'question': 'Ethan parker',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': 'O.C',
175: 1:      'question': 'olivia Campbell',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': 'L.J',
175: 1:      'question': 'Liam Jenkins',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': 'E.B',
175: 1:      'question': 'Emma Bryant',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': 'N.R',
175: 1:      'question': 'Noah Reed',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': 'A.C',
175: 1:      'question': 'Ava Coleman',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': 'W.B',
175: 1:      'question': 'William Barnes',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': 'S.M',
175: 1:      'question': 'Sophia Mitchell',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': 'J.H',
175: 1:      'question': 'James Hughes',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': 'I.F',
175: 1:      'question': 'Isabella Foster',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': 'B.E',
175: 1:      'question': 'Benjamin Evans',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': 'M.M',
175: 1:      'question': 'Mia Murphy',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': 'M.R',
175: 1:      'question': 'Mason Richardson',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': 'C.P',
175: 1:      'question': 'Charlotte Peterson',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': 'E.C',
175: 1:      'question': 'Elijah Cooper',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': 'A.C',
175: 1:      'question': 'Amelia Cox',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': 'A.G',
175: 1:      'question': 'Alexander Griffin',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': 'H.B',
175: 1:      'question': 'Harper Brooks',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': 'D.T',
175: 1:      'question': 'Daniel Turner',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': 'A.K',
175: 1:      'question': 'Abigail Kelly',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': 'H.P',
175: 1:      'question': 'Henry Price',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': 'E.R',
175: 1:      'question': 'Emily Ross',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': 'S.W',
175: 1:      'question': 'Samuel Ward',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': 'E.M',
175: 1:      'question': 'Elizabeth Morgan',
175: 1:      'valid': true
175: 1:    },
175: 1:    {
175: 1:      'answer': 'J.W',
175: 1:      'question': 'Joseph Watson',
175: 1:      'valid': true
175: 1:    }
175: 1:  ],
175: 1:  'info': [
175: 1:    '✅f(Tom Harris) = T.H',
175: 1:    '✅f(garlick looney) = G.L',
175: 1:    '✅f(Ethan parker) = E.P',
175: 1:    '✅f(olivia Campbell) = O.C',
175: 1:    '✅f(Liam Jenkins) = L.J',
175: 1:    '✅f(Emma Bryant) = E.B',
175: 1:    '✅f(Noah Reed) = N.R',
175: 1:    '✅f(Ava Coleman) = A.C',
175: 1:    '✅f(William Barnes) = W.B',
175: 1:    '✅f(Sophia Mitchell) = S.M',
175: 1:    '✅f(James Hughes) = J.H',
175: 1:    '✅f(Isabella Foster) = I.F',
175: 1:    '✅f(Benjamin Evans) = B.E',
175: 1:    '✅f(Mia Murphy) = M.M',
175: 1:    '✅f(Mason Richardson) = M.R',
175: 1:    '✅f(Charlotte Peterson) = C.P',
175: 1:    '✅f(Elijah Cooper) = E.C',
175: 1:    '✅f(Amelia Cox) = A.C',
175: 1:    '✅f(Alexander Griffin) = A.G',
175: 1:    '✅f(Harper Brooks) = H.B',
175: 1:    '✅f(Daniel Turner) = D.T',
175: 1:    '✅f(Abigail Kelly) = A.K',
175: 1:    '✅f(Henry Price) = H.P',
175: 1:    '✅f(Emily Ross) = E.R',
175: 1:    '✅f(Samuel Ward) = S.W',
175: 1:    '✅f(Elizabeth Morgan) = E.M',
175: 1:    '✅f(Joseph Watson) = J.W',
175: 1:    '❌f(Ella Bennett) = ??? != E.B'
175: 1:  ],
175: 1:  'level': 5,
175: 1:  'nextQuestion': 'Ella Bennett',
175: 1:  'questions': [
175: 1:    'Tom Harris',
175: 1:    'garlick looney',
175: 1:    'Ethan parker',
175: 1:    'olivia Campbell',
175: 1:    'Liam Jenkins',
175: 1:    'Emma Bryant',
175: 1:    'Noah Reed',
175: 1:    'Ava Coleman',
175: 1:    'William Barnes',
175: 1:    'Sophia Mitchell',
175: 1:    'James Hughes',
175: 1:    'Isabella Foster',
175: 1:    'Benjamin Evans',
175: 1:    'Mia Murphy',
175: 1:    'Mason Richardson',
175: 1:    'Charlotte Peterson',
175: 1:    'Elijah Cooper',
175: 1:    'Amelia Cox',
175: 1:    'Alexander Griffin',
175: 1:    'Harper Brooks',
175: 1:    'Daniel Turner',
175: 1:    'Abigail Kelly',
175: 1:    'Henry Price',
175: 1:    'Emily Ross',
175: 1:    'Samuel Ward',
175: 1:    'Elizabeth Morgan',
175: 1:    'Joseph Watson',
175: 1:    'Ella Bennett'
175: 1:  ]
175: 1:}
175: 1:Scores: 3780
175: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C', 'A.G', 'H.B', 'D.T', 'A.K', 'H.P', 'E.R', 'S.W', 'E.M', 'J.W', 'E.B']')
175: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
176: 1:BoardData {
176: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
176: 1:  'expectedAnswer': 'D.B',
176: 1:  'history': [
176: 1:    {
176: 1:      'answer': 'T.H',
176: 1:      'question': 'Tom Harris',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': 'G.L',
176: 1:      'question': 'garlick looney',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': 'E.P',
176: 1:      'question': 'Ethan parker',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': 'O.C',
176: 1:      'question': 'olivia Campbell',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': 'L.J',
176: 1:      'question': 'Liam Jenkins',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': 'E.B',
176: 1:      'question': 'Emma Bryant',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': 'N.R',
176: 1:      'question': 'Noah Reed',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': 'A.C',
176: 1:      'question': 'Ava Coleman',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': 'W.B',
176: 1:      'question': 'William Barnes',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': 'S.M',
176: 1:      'question': 'Sophia Mitchell',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': 'J.H',
176: 1:      'question': 'James Hughes',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': 'I.F',
176: 1:      'question': 'Isabella Foster',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': 'B.E',
176: 1:      'question': 'Benjamin Evans',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': 'M.M',
176: 1:      'question': 'Mia Murphy',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': 'M.R',
176: 1:      'question': 'Mason Richardson',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': 'C.P',
176: 1:      'question': 'Charlotte Peterson',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': 'E.C',
176: 1:      'question': 'Elijah Cooper',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': 'A.C',
176: 1:      'question': 'Amelia Cox',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': 'A.G',
176: 1:      'question': 'Alexander Griffin',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': 'H.B',
176: 1:      'question': 'Harper Brooks',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': 'D.T',
176: 1:      'question': 'Daniel Turner',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': 'A.K',
176: 1:      'question': 'Abigail Kelly',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': 'H.P',
176: 1:      'question': 'Henry Price',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': 'E.R',
176: 1:      'question': 'Emily Ross',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': 'S.W',
176: 1:      'question': 'Samuel Ward',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': 'E.M',
176: 1:      'question': 'Elizabeth Morgan',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': 'J.W',
176: 1:      'question': 'Joseph Watson',
176: 1:      'valid': true
176: 1:    },
176: 1:    {
176: 1:      'answer': 'E.B',
176: 1:      'question': 'Ella Bennett',
176: 1:      'valid': true
176: 1:    }
176: 1:  ],
176: 1:  'info': [
176: 1:    '✅f(Tom Harris) = T.H',
176: 1:    '✅f(garlick looney) = G.L',
176: 1:    '✅f(Ethan parker) = E.P',
176: 1:    '✅f(olivia Campbell) = O.C',
176: 1:    '✅f(Liam Jenkins) = L.J',
176: 1:    '✅f(Emma Bryant) = E.B',
176: 1:    '✅f(Noah Reed) = N.R',
176: 1:    '✅f(Ava Coleman) = A.C',
176: 1:    '✅f(William Barnes) = W.B',
176: 1:    '✅f(Sophia Mitchell) = S.M',
176: 1:    '✅f(James Hughes) = J.H',
176: 1:    '✅f(Isabella Foster) = I.F',
176: 1:    '✅f(Benjamin Evans) = B.E',
176: 1:    '✅f(Mia Murphy) = M.M',
176: 1:    '✅f(Mason Richardson) = M.R',
176: 1:    '✅f(Charlotte Peterson) = C.P',
176: 1:    '✅f(Elijah Cooper) = E.C',
176: 1:    '✅f(Amelia Cox) = A.C',
176: 1:    '✅f(Alexander Griffin) = A.G',
176: 1:    '✅f(Harper Brooks) = H.B',
176: 1:    '✅f(Daniel Turner) = D.T',
176: 1:    '✅f(Abigail Kelly) = A.K',
176: 1:    '✅f(Henry Price) = H.P',
176: 1:    '✅f(Emily Ross) = E.R',
176: 1:    '✅f(Samuel Ward) = S.W',
176: 1:    '✅f(Elizabeth Morgan) = E.M',
176: 1:    '✅f(Joseph Watson) = J.W',
176: 1:    '✅f(Ella Bennett) = E.B',
176: 1:    '❌f(David Bailey) = ??? != D.B'
176: 1:  ],
176: 1:  'level': 5,
176: 1:  'nextQuestion': 'David Bailey',
176: 1:  'questions': [
176: 1:    'Tom Harris',
176: 1:    'garlick looney',
176: 1:    'Ethan parker',
176: 1:    'olivia Campbell',
176: 1:    'Liam Jenkins',
176: 1:    'Emma Bryant',
176: 1:    'Noah Reed',
176: 1:    'Ava Coleman',
176: 1:    'William Barnes',
176: 1:    'Sophia Mitchell',
176: 1:    'James Hughes',
176: 1:    'Isabella Foster',
176: 1:    'Benjamin Evans',
176: 1:    'Mia Murphy',
176: 1:    'Mason Richardson',
176: 1:    'Charlotte Peterson',
176: 1:    'Elijah Cooper',
176: 1:    'Amelia Cox',
176: 1:    'Alexander Griffin',
176: 1:    'Harper Brooks',
176: 1:    'Daniel Turner',
176: 1:    'Abigail Kelly',
176: 1:    'Henry Price',
176: 1:    'Emily Ross',
176: 1:    'Samuel Ward',
176: 1:    'Elizabeth Morgan',
176: 1:    'Joseph Watson',
176: 1:    'Ella Bennett',
176: 1:    'David Bailey'
176: 1:  ]
176: 1:}
176: 1:Scores: 3782
176: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C', 'A.G', 'H.B', 'D.T', 'A.K', 'H.P', 'E.R', 'S.W', 'E.M', 'J.W', 'E.B', 'D.B']')
176: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
177: 1:BoardData {
177: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
177: 1:  'expectedAnswer': 'A.H',
177: 1:  'history': [
177: 1:    {
177: 1:      'answer': 'T.H',
177: 1:      'question': 'Tom Harris',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'G.L',
177: 1:      'question': 'garlick looney',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'E.P',
177: 1:      'question': 'Ethan parker',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'O.C',
177: 1:      'question': 'olivia Campbell',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'L.J',
177: 1:      'question': 'Liam Jenkins',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'E.B',
177: 1:      'question': 'Emma Bryant',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'N.R',
177: 1:      'question': 'Noah Reed',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'A.C',
177: 1:      'question': 'Ava Coleman',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'W.B',
177: 1:      'question': 'William Barnes',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'S.M',
177: 1:      'question': 'Sophia Mitchell',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'J.H',
177: 1:      'question': 'James Hughes',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'I.F',
177: 1:      'question': 'Isabella Foster',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'B.E',
177: 1:      'question': 'Benjamin Evans',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'M.M',
177: 1:      'question': 'Mia Murphy',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'M.R',
177: 1:      'question': 'Mason Richardson',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'C.P',
177: 1:      'question': 'Charlotte Peterson',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'E.C',
177: 1:      'question': 'Elijah Cooper',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'A.C',
177: 1:      'question': 'Amelia Cox',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'A.G',
177: 1:      'question': 'Alexander Griffin',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'H.B',
177: 1:      'question': 'Harper Brooks',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'D.T',
177: 1:      'question': 'Daniel Turner',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'A.K',
177: 1:      'question': 'Abigail Kelly',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'H.P',
177: 1:      'question': 'Henry Price',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'E.R',
177: 1:      'question': 'Emily Ross',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'S.W',
177: 1:      'question': 'Samuel Ward',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'E.M',
177: 1:      'question': 'Elizabeth Morgan',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'J.W',
177: 1:      'question': 'Joseph Watson',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'E.B',
177: 1:      'question': 'Ella Bennett',
177: 1:      'valid': true
177: 1:    },
177: 1:    {
177: 1:      'answer': 'D.B',
177: 1:      'question': 'David Bailey',
177: 1:      'valid': true
177: 1:    }
177: 1:  ],
177: 1:  'info': [
177: 1:    '✅f(Tom Harris) = T.H',
177: 1:    '✅f(garlick looney) = G.L',
177: 1:    '✅f(Ethan parker) = E.P',
177: 1:    '✅f(olivia Campbell) = O.C',
177: 1:    '✅f(Liam Jenkins) = L.J',
177: 1:    '✅f(Emma Bryant) = E.B',
177: 1:    '✅f(Noah Reed) = N.R',
177: 1:    '✅f(Ava Coleman) = A.C',
177: 1:    '✅f(William Barnes) = W.B',
177: 1:    '✅f(Sophia Mitchell) = S.M',
177: 1:    '✅f(James Hughes) = J.H',
177: 1:    '✅f(Isabella Foster) = I.F',
177: 1:    '✅f(Benjamin Evans) = B.E',
177: 1:    '✅f(Mia Murphy) = M.M',
177: 1:    '✅f(Mason Richardson) = M.R',
177: 1:    '✅f(Charlotte Peterson) = C.P',
177: 1:    '✅f(Elijah Cooper) = E.C',
177: 1:    '✅f(Amelia Cox) = A.C',
177: 1:    '✅f(Alexander Griffin) = A.G',
177: 1:    '✅f(Harper Brooks) = H.B',
177: 1:    '✅f(Daniel Turner) = D.T',
177: 1:    '✅f(Abigail Kelly) = A.K',
177: 1:    '✅f(Henry Price) = H.P',
177: 1:    '✅f(Emily Ross) = E.R',
177: 1:    '✅f(Samuel Ward) = S.W',
177: 1:    '✅f(Elizabeth Morgan) = E.M',
177: 1:    '✅f(Joseph Watson) = J.W',
177: 1:    '✅f(Ella Bennett) = E.B',
177: 1:    '✅f(David Bailey) = D.B',
177: 1:    '❌f(Avery Howard) = ??? != A.H'
177: 1:  ],
177: 1:  'level': 5,
177: 1:  'nextQuestion': 'Avery Howard',
177: 1:  'questions': [
177: 1:    'Tom Harris',
177: 1:    'garlick looney',
177: 1:    'Ethan parker',
177: 1:    'olivia Campbell',
177: 1:    'Liam Jenkins',
177: 1:    'Emma Bryant',
177: 1:    'Noah Reed',
177: 1:    'Ava Coleman',
177: 1:    'William Barnes',
177: 1:    'Sophia Mitchell',
177: 1:    'James Hughes',
177: 1:    'Isabella Foster',
177: 1:    'Benjamin Evans',
177: 1:    'Mia Murphy',
177: 1:    'Mason Richardson',
177: 1:    'Charlotte Peterson',
177: 1:    'Elijah Cooper',
177: 1:    'Amelia Cox',
177: 1:    'Alexander Griffin',
177: 1:    'Harper Brooks',
177: 1:    'Daniel Turner',
177: 1:    'Abigail Kelly',
177: 1:    'Henry Price',
177: 1:    'Emily Ross',
177: 1:    'Samuel Ward',
177: 1:    'Elizabeth Morgan',
177: 1:    'Joseph Watson',
177: 1:    'Ella Bennett',
177: 1:    'David Bailey',
177: 1:    'Avery Howard'
177: 1:  ]
177: 1:}
177: 1:Scores: 3784
177: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C', 'A.G', 'H.B', 'D.T', 'A.K', 'H.P', 'E.R', 'S.W', 'E.M', 'J.W', 'E.B', 'D.B', 'A.H']')
177: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
178: 1:BoardData {
178: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
178: 1:  'expectedAnswer': 'M.N',
178: 1:  'history': [
178: 1:    {
178: 1:      'answer': 'T.H',
178: 1:      'question': 'Tom Harris',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'G.L',
178: 1:      'question': 'garlick looney',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'E.P',
178: 1:      'question': 'Ethan parker',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'O.C',
178: 1:      'question': 'olivia Campbell',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'L.J',
178: 1:      'question': 'Liam Jenkins',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'E.B',
178: 1:      'question': 'Emma Bryant',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'N.R',
178: 1:      'question': 'Noah Reed',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'A.C',
178: 1:      'question': 'Ava Coleman',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'W.B',
178: 1:      'question': 'William Barnes',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'S.M',
178: 1:      'question': 'Sophia Mitchell',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'J.H',
178: 1:      'question': 'James Hughes',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'I.F',
178: 1:      'question': 'Isabella Foster',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'B.E',
178: 1:      'question': 'Benjamin Evans',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'M.M',
178: 1:      'question': 'Mia Murphy',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'M.R',
178: 1:      'question': 'Mason Richardson',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'C.P',
178: 1:      'question': 'Charlotte Peterson',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'E.C',
178: 1:      'question': 'Elijah Cooper',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'A.C',
178: 1:      'question': 'Amelia Cox',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'A.G',
178: 1:      'question': 'Alexander Griffin',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'H.B',
178: 1:      'question': 'Harper Brooks',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'D.T',
178: 1:      'question': 'Daniel Turner',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'A.K',
178: 1:      'question': 'Abigail Kelly',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'H.P',
178: 1:      'question': 'Henry Price',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'E.R',
178: 1:      'question': 'Emily Ross',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'S.W',
178: 1:      'question': 'Samuel Ward',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'E.M',
178: 1:      'question': 'Elizabeth Morgan',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'J.W',
178: 1:      'question': 'Joseph Watson',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'E.B',
178: 1:      'question': 'Ella Bennett',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'D.B',
178: 1:      'question': 'David Bailey',
178: 1:      'valid': true
178: 1:    },
178: 1:    {
178: 1:      'answer': 'A.H',
178: 1:      'question': 'Avery Howard',
178: 1:      'valid': true
178: 1:    }
178: 1:  ],
178: 1:  'info': [
178: 1:    '✅f(Tom Harris) = T.H',
178: 1:    '✅f(garlick looney) = G.L',
178: 1:    '✅f(Ethan parker) = E.P',
178: 1:    '✅f(olivia Campbell) = O.C',
178: 1:    '✅f(Liam Jenkins) = L.J',
178: 1:    '✅f(Emma Bryant) = E.B',
178: 1:    '✅f(Noah Reed) = N.R',
178: 1:    '✅f(Ava Coleman) = A.C',
178: 1:    '✅f(William Barnes) = W.B',
178: 1:    '✅f(Sophia Mitchell) = S.M',
178: 1:    '✅f(James Hughes) = J.H',
178: 1:    '✅f(Isabella Foster) = I.F',
178: 1:    '✅f(Benjamin Evans) = B.E',
178: 1:    '✅f(Mia Murphy) = M.M',
178: 1:    '✅f(Mason Richardson) = M.R',
178: 1:    '✅f(Charlotte Peterson) = C.P',
178: 1:    '✅f(Elijah Cooper) = E.C',
178: 1:    '✅f(Amelia Cox) = A.C',
178: 1:    '✅f(Alexander Griffin) = A.G',
178: 1:    '✅f(Harper Brooks) = H.B',
178: 1:    '✅f(Daniel Turner) = D.T',
178: 1:    '✅f(Abigail Kelly) = A.K',
178: 1:    '✅f(Henry Price) = H.P',
178: 1:    '✅f(Emily Ross) = E.R',
178: 1:    '✅f(Samuel Ward) = S.W',
178: 1:    '✅f(Elizabeth Morgan) = E.M',
178: 1:    '✅f(Joseph Watson) = J.W',
178: 1:    '✅f(Ella Bennett) = E.B',
178: 1:    '✅f(David Bailey) = D.B',
178: 1:    '✅f(Avery Howard) = A.H',
178: 1:    '❌f(Michael Nelson) = ??? != M.N'
178: 1:  ],
178: 1:  'level': 5,
178: 1:  'nextQuestion': 'Michael Nelson',
178: 1:  'questions': [
178: 1:    'Tom Harris',
178: 1:    'garlick looney',
178: 1:    'Ethan parker',
178: 1:    'olivia Campbell',
178: 1:    'Liam Jenkins',
178: 1:    'Emma Bryant',
178: 1:    'Noah Reed',
178: 1:    'Ava Coleman',
178: 1:    'William Barnes',
178: 1:    'Sophia Mitchell',
178: 1:    'James Hughes',
178: 1:    'Isabella Foster',
178: 1:    'Benjamin Evans',
178: 1:    'Mia Murphy',
178: 1:    'Mason Richardson',
178: 1:    'Charlotte Peterson',
178: 1:    'Elijah Cooper',
178: 1:    'Amelia Cox',
178: 1:    'Alexander Griffin',
178: 1:    'Harper Brooks',
178: 1:    'Daniel Turner',
178: 1:    'Abigail Kelly',
178: 1:    'Henry Price',
178: 1:    'Emily Ross',
178: 1:    'Samuel Ward',
178: 1:    'Elizabeth Morgan',
178: 1:    'Joseph Watson',
178: 1:    'Ella Bennett',
178: 1:    'David Bailey',
178: 1:    'Avery Howard',
178: 1:    'Michael Nelson'
178: 1:  ]
178: 1:}
178: 1:Scores: 3786
178: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C', 'A.G', 'H.B', 'D.T', 'A.K', 'H.P', 'E.R', 'S.W', 'E.M', 'J.W', 'E.B', 'D.B', 'A.H', 'M.N']')
178: 1:Fire Event: PassTest{complexity=9, testCount=32}
------------------------------------------
179: 1:BoardData {
179: 1:  'description': ['Write a function to convert a name into initials. \nThis kata strictly takes two words with one space in between them.\nThe output should be two capital letters with a dot separating them.\nExample:\nTom Harris=>T.H\ngarlick looney=>G.L'],
179: 1:  'expectedAnswer': 'L.A',
179: 1:  'history': [
179: 1:    {
179: 1:      'answer': 'T.H',
179: 1:      'question': 'Tom Harris',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'G.L',
179: 1:      'question': 'garlick looney',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'E.P',
179: 1:      'question': 'Ethan parker',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'O.C',
179: 1:      'question': 'olivia Campbell',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'L.J',
179: 1:      'question': 'Liam Jenkins',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'E.B',
179: 1:      'question': 'Emma Bryant',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'N.R',
179: 1:      'question': 'Noah Reed',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'A.C',
179: 1:      'question': 'Ava Coleman',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'W.B',
179: 1:      'question': 'William Barnes',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'S.M',
179: 1:      'question': 'Sophia Mitchell',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'J.H',
179: 1:      'question': 'James Hughes',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'I.F',
179: 1:      'question': 'Isabella Foster',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'B.E',
179: 1:      'question': 'Benjamin Evans',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'M.M',
179: 1:      'question': 'Mia Murphy',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'M.R',
179: 1:      'question': 'Mason Richardson',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'C.P',
179: 1:      'question': 'Charlotte Peterson',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'E.C',
179: 1:      'question': 'Elijah Cooper',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'A.C',
179: 1:      'question': 'Amelia Cox',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'A.G',
179: 1:      'question': 'Alexander Griffin',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'H.B',
179: 1:      'question': 'Harper Brooks',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'D.T',
179: 1:      'question': 'Daniel Turner',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'A.K',
179: 1:      'question': 'Abigail Kelly',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'H.P',
179: 1:      'question': 'Henry Price',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'E.R',
179: 1:      'question': 'Emily Ross',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'S.W',
179: 1:      'question': 'Samuel Ward',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'E.M',
179: 1:      'question': 'Elizabeth Morgan',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'J.W',
179: 1:      'question': 'Joseph Watson',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'E.B',
179: 1:      'question': 'Ella Bennett',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'D.B',
179: 1:      'question': 'David Bailey',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'A.H',
179: 1:      'question': 'Avery Howard',
179: 1:      'valid': true
179: 1:    },
179: 1:    {
179: 1:      'answer': 'M.N',
179: 1:      'question': 'Michael Nelson',
179: 1:      'valid': true
179: 1:    }
179: 1:  ],
179: 1:  'info': [
179: 1:    '✅f(Tom Harris) = T.H',
179: 1:    '✅f(garlick looney) = G.L',
179: 1:    '✅f(Ethan parker) = E.P',
179: 1:    '✅f(olivia Campbell) = O.C',
179: 1:    '✅f(Liam Jenkins) = L.J',
179: 1:    '✅f(Emma Bryant) = E.B',
179: 1:    '✅f(Noah Reed) = N.R',
179: 1:    '✅f(Ava Coleman) = A.C',
179: 1:    '✅f(William Barnes) = W.B',
179: 1:    '✅f(Sophia Mitchell) = S.M',
179: 1:    '✅f(James Hughes) = J.H',
179: 1:    '✅f(Isabella Foster) = I.F',
179: 1:    '✅f(Benjamin Evans) = B.E',
179: 1:    '✅f(Mia Murphy) = M.M',
179: 1:    '✅f(Mason Richardson) = M.R',
179: 1:    '✅f(Charlotte Peterson) = C.P',
179: 1:    '✅f(Elijah Cooper) = E.C',
179: 1:    '✅f(Amelia Cox) = A.C',
179: 1:    '✅f(Alexander Griffin) = A.G',
179: 1:    '✅f(Harper Brooks) = H.B',
179: 1:    '✅f(Daniel Turner) = D.T',
179: 1:    '✅f(Abigail Kelly) = A.K',
179: 1:    '✅f(Henry Price) = H.P',
179: 1:    '✅f(Emily Ross) = E.R',
179: 1:    '✅f(Samuel Ward) = S.W',
179: 1:    '✅f(Elizabeth Morgan) = E.M',
179: 1:    '✅f(Joseph Watson) = J.W',
179: 1:    '✅f(Ella Bennett) = E.B',
179: 1:    '✅f(David Bailey) = D.B',
179: 1:    '✅f(Avery Howard) = A.H',
179: 1:    '✅f(Michael Nelson) = M.N',
179: 1:    '❌f(Lily Anderson) = ??? != L.A'
179: 1:  ],
179: 1:  'level': 5,
179: 1:  'nextQuestion': 'Lily Anderson',
179: 1:  'questions': [
179: 1:    'Tom Harris',
179: 1:    'garlick looney',
179: 1:    'Ethan parker',
179: 1:    'olivia Campbell',
179: 1:    'Liam Jenkins',
179: 1:    'Emma Bryant',
179: 1:    'Noah Reed',
179: 1:    'Ava Coleman',
179: 1:    'William Barnes',
179: 1:    'Sophia Mitchell',
179: 1:    'James Hughes',
179: 1:    'Isabella Foster',
179: 1:    'Benjamin Evans',
179: 1:    'Mia Murphy',
179: 1:    'Mason Richardson',
179: 1:    'Charlotte Peterson',
179: 1:    'Elijah Cooper',
179: 1:    'Amelia Cox',
179: 1:    'Alexander Griffin',
179: 1:    'Harper Brooks',
179: 1:    'Daniel Turner',
179: 1:    'Abigail Kelly',
179: 1:    'Henry Price',
179: 1:    'Emily Ross',
179: 1:    'Samuel Ward',
179: 1:    'Elizabeth Morgan',
179: 1:    'Joseph Watson',
179: 1:    'Ella Bennett',
179: 1:    'David Bailey',
179: 1:    'Avery Howard',
179: 1:    'Michael Nelson',
179: 1:    'Lily Anderson'
179: 1:  ]
179: 1:}
179: 1:Scores: 3788
179: 1:Answer: message('['T.H', 'G.L', 'E.P', 'O.C', 'L.J', 'E.B', 'N.R', 'A.C', 'W.B', 'S.M', 'J.H', 'I.F', 'B.E', 'M.M', 'M.R', 'C.P', 'E.C', 'A.C', 'A.G', 'H.B', 'D.T', 'A.K', 'H.P', 'E.R', 'S.W', 'E.M', 'J.W', 'E.B', 'D.B', 'A.H', 'M.N', 'L.A']')
179: 1:Fire Event: PassTest{complexity=9, testCount=32}
179: 1:Fire Event: NextAlgorithm{complexity=9, time=0}
------------------------------------------
180: 1:BoardData {
180: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
180: 1:  'history': [
180: 1:    {
180: 1:      'answer': 'T.H',
180: 1:      'question': 'Tom Harris',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'G.L',
180: 1:      'question': 'garlick looney',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'E.P',
180: 1:      'question': 'Ethan parker',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'O.C',
180: 1:      'question': 'olivia Campbell',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'L.J',
180: 1:      'question': 'Liam Jenkins',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'E.B',
180: 1:      'question': 'Emma Bryant',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'N.R',
180: 1:      'question': 'Noah Reed',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'A.C',
180: 1:      'question': 'Ava Coleman',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'W.B',
180: 1:      'question': 'William Barnes',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'S.M',
180: 1:      'question': 'Sophia Mitchell',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'J.H',
180: 1:      'question': 'James Hughes',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'I.F',
180: 1:      'question': 'Isabella Foster',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'B.E',
180: 1:      'question': 'Benjamin Evans',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'M.M',
180: 1:      'question': 'Mia Murphy',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'M.R',
180: 1:      'question': 'Mason Richardson',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'C.P',
180: 1:      'question': 'Charlotte Peterson',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'E.C',
180: 1:      'question': 'Elijah Cooper',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'A.C',
180: 1:      'question': 'Amelia Cox',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'A.G',
180: 1:      'question': 'Alexander Griffin',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'H.B',
180: 1:      'question': 'Harper Brooks',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'D.T',
180: 1:      'question': 'Daniel Turner',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'A.K',
180: 1:      'question': 'Abigail Kelly',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'H.P',
180: 1:      'question': 'Henry Price',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'E.R',
180: 1:      'question': 'Emily Ross',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'S.W',
180: 1:      'question': 'Samuel Ward',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'E.M',
180: 1:      'question': 'Elizabeth Morgan',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'J.W',
180: 1:      'question': 'Joseph Watson',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'E.B',
180: 1:      'question': 'Ella Bennett',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'D.B',
180: 1:      'question': 'David Bailey',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'A.H',
180: 1:      'question': 'Avery Howard',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'M.N',
180: 1:      'question': 'Michael Nelson',
180: 1:      'valid': true
180: 1:    },
180: 1:    {
180: 1:      'answer': 'L.A',
180: 1:      'question': 'Lily Anderson',
180: 1:      'valid': true
180: 1:    }
180: 1:  ],
180: 1:  'info': [
180: 1:    '✅f(Tom Harris) = T.H',
180: 1:    '✅f(garlick looney) = G.L',
180: 1:    '✅f(Ethan parker) = E.P',
180: 1:    '✅f(olivia Campbell) = O.C',
180: 1:    '✅f(Liam Jenkins) = L.J',
180: 1:    '✅f(Emma Bryant) = E.B',
180: 1:    '✅f(Noah Reed) = N.R',
180: 1:    '✅f(Ava Coleman) = A.C',
180: 1:    '✅f(William Barnes) = W.B',
180: 1:    '✅f(Sophia Mitchell) = S.M',
180: 1:    '✅f(James Hughes) = J.H',
180: 1:    '✅f(Isabella Foster) = I.F',
180: 1:    '✅f(Benjamin Evans) = B.E',
180: 1:    '✅f(Mia Murphy) = M.M',
180: 1:    '✅f(Mason Richardson) = M.R',
180: 1:    '✅f(Charlotte Peterson) = C.P',
180: 1:    '✅f(Elijah Cooper) = E.C',
180: 1:    '✅f(Amelia Cox) = A.C',
180: 1:    '✅f(Alexander Griffin) = A.G',
180: 1:    '✅f(Harper Brooks) = H.B',
180: 1:    '✅f(Daniel Turner) = D.T',
180: 1:    '✅f(Abigail Kelly) = A.K',
180: 1:    '✅f(Henry Price) = H.P',
180: 1:    '✅f(Emily Ross) = E.R',
180: 1:    '✅f(Samuel Ward) = S.W',
180: 1:    '✅f(Elizabeth Morgan) = E.M',
180: 1:    '✅f(Joseph Watson) = J.W',
180: 1:    '✅f(Ella Bennett) = E.B',
180: 1:    '✅f(David Bailey) = D.B',
180: 1:    '✅f(Avery Howard) = A.H',
180: 1:    '✅f(Michael Nelson) = M.N',
180: 1:    '✅f(Lily Anderson) = L.A'
180: 1:  ],
180: 1:  'level': 5,
180: 1:  'questions': []
180: 1:}
180: 1:Scores: 5004
180: 1:Answer: message('StartNextLevel')
180: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
181: 1:BoardData {
181: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
181: 1:  'expectedAnswer': '149',
181: 1:  'history': [],
181: 1:  'info': ['❌f(123) = ??? != 149'],
181: 1:  'level': 6,
181: 1:  'nextQuestion': '123',
181: 1:  'questions': ['123']
181: 1:}
181: 1:Scores: 5004
181: 1:Answer: message('['149']')
181: 1:Fire Event: PassTest{complexity=10, testCount=28}
------------------------------------------
182: 1:BoardData {
182: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
182: 1:  'expectedAnswer': '163625',
182: 1:  'history': [{
182: 1:    'answer': '149',
182: 1:    'question': '123',
182: 1:    'valid': true
182: 1:  }],
182: 1:  'info': [
182: 1:    '✅f(123) = 149',
182: 1:    '❌f(465) = ??? != 163625'
182: 1:  ],
182: 1:  'level': 6,
182: 1:  'nextQuestion': '465',
182: 1:  'questions': [
182: 1:    '123',
182: 1:    '465'
182: 1:  ]
182: 1:}
182: 1:Scores: 5007
182: 1:Answer: message('['149', '163625']')
182: 1:Fire Event: PassTest{complexity=10, testCount=28}
------------------------------------------
183: 1:BoardData {
183: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
183: 1:  'expectedAnswer': '0',
183: 1:  'history': [
183: 1:    {
183: 1:      'answer': '149',
183: 1:      'question': '123',
183: 1:      'valid': true
183: 1:    },
183: 1:    {
183: 1:      'answer': '163625',
183: 1:      'question': '465',
183: 1:      'valid': true
183: 1:    }
183: 1:  ],
183: 1:  'info': [
183: 1:    '✅f(123) = 149',
183: 1:    '✅f(465) = 163625',
183: 1:    '❌f(0) = ??? != 0'
183: 1:  ],
183: 1:  'level': 6,
183: 1:  'nextQuestion': '0',
183: 1:  'questions': [
183: 1:    '123',
183: 1:    '465',
183: 1:    '0'
183: 1:  ]
183: 1:}
183: 1:Scores: 5010
183: 1:Answer: message('['149', '163625', '0']')
183: 1:Fire Event: PassTest{complexity=10, testCount=28}
------------------------------------------
184: 1:BoardData {
184: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
184: 1:  'expectedAnswer': '256419',
184: 1:  'history': [
184: 1:    {
184: 1:      'answer': '149',
184: 1:      'question': '123',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': '163625',
184: 1:      'question': '465',
184: 1:      'valid': true
184: 1:    },
184: 1:    {
184: 1:      'answer': '0',
184: 1:      'question': '0',
184: 1:      'valid': true
184: 1:    }
184: 1:  ],
184: 1:  'info': [
184: 1:    '✅f(123) = 149',
184: 1:    '✅f(465) = 163625',
184: 1:    '✅f(0) = 0',
184: 1:    '❌f(5813) = ??? != 256419'
184: 1:  ],
184: 1:  'level': 6,
184: 1:  'nextQuestion': '5813',
184: 1:  'questions': [
184: 1:    '123',
184: 1:    '465',
184: 1:    '0',
184: 1:    '5813'
184: 1:  ]
184: 1:}
184: 1:Scores: 5013
184: 1:Answer: message('['149', '163625', '0', '256419']')
184: 1:Fire Event: PassTest{complexity=10, testCount=28}
------------------------------------------
185: 1:BoardData {
185: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
185: 1:  'expectedAnswer': '4943616',
185: 1:  'history': [
185: 1:    {
185: 1:      'answer': '149',
185: 1:      'question': '123',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': '163625',
185: 1:      'question': '465',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': '0',
185: 1:      'question': '0',
185: 1:      'valid': true
185: 1:    },
185: 1:    {
185: 1:      'answer': '256419',
185: 1:      'question': '5813',
185: 1:      'valid': true
185: 1:    }
185: 1:  ],
185: 1:  'info': [
185: 1:    '✅f(123) = 149',
185: 1:    '✅f(465) = 163625',
185: 1:    '✅f(0) = 0',
185: 1:    '✅f(5813) = 256419',
185: 1:    '❌f(7264) = ??? != 4943616'
185: 1:  ],
185: 1:  'level': 6,
185: 1:  'nextQuestion': '7264',
185: 1:  'questions': [
185: 1:    '123',
185: 1:    '465',
185: 1:    '0',
185: 1:    '5813',
185: 1:    '7264'
185: 1:  ]
185: 1:}
185: 1:Scores: 5016
185: 1:Answer: message('['149', '163625', '0', '256419', '4943616']')
185: 1:Fire Event: PassTest{complexity=10, testCount=28}
------------------------------------------
186: 1:BoardData {
186: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
186: 1:  'expectedAnswer': '193681',
186: 1:  'history': [
186: 1:    {
186: 1:      'answer': '149',
186: 1:      'question': '123',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': '163625',
186: 1:      'question': '465',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': '0',
186: 1:      'question': '0',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': '256419',
186: 1:      'question': '5813',
186: 1:      'valid': true
186: 1:    },
186: 1:    {
186: 1:      'answer': '4943616',
186: 1:      'question': '7264',
186: 1:      'valid': true
186: 1:    }
186: 1:  ],
186: 1:  'info': [
186: 1:    '✅f(123) = 149',
186: 1:    '✅f(465) = 163625',
186: 1:    '✅f(0) = 0',
186: 1:    '✅f(5813) = 256419',
186: 1:    '✅f(7264) = 4943616',
186: 1:    '❌f(1369) = ??? != 193681'
186: 1:  ],
186: 1:  'level': 6,
186: 1:  'nextQuestion': '1369',
186: 1:  'questions': [
186: 1:    '123',
186: 1:    '465',
186: 1:    '0',
186: 1:    '5813',
186: 1:    '7264',
186: 1:    '1369'
186: 1:  ]
186: 1:}
186: 1:Scores: 5019
186: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681']')
186: 1:Fire Event: PassTest{complexity=10, testCount=28}
------------------------------------------
187: 1:BoardData {
187: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
187: 1:  'expectedAnswer': '4981254',
187: 1:  'history': [
187: 1:    {
187: 1:      'answer': '149',
187: 1:      'question': '123',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '163625',
187: 1:      'question': '465',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '0',
187: 1:      'question': '0',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '256419',
187: 1:      'question': '5813',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '4943616',
187: 1:      'question': '7264',
187: 1:      'valid': true
187: 1:    },
187: 1:    {
187: 1:      'answer': '193681',
187: 1:      'question': '1369',
187: 1:      'valid': true
187: 1:    }
187: 1:  ],
187: 1:  'info': [
187: 1:    '✅f(123) = 149',
187: 1:    '✅f(465) = 163625',
187: 1:    '✅f(0) = 0',
187: 1:    '✅f(5813) = 256419',
187: 1:    '✅f(7264) = 4943616',
187: 1:    '✅f(1369) = 193681',
187: 1:    '❌f(7952) = ??? != 4981254'
187: 1:  ],
187: 1:  'level': 6,
187: 1:  'nextQuestion': '7952',
187: 1:  'questions': [
187: 1:    '123',
187: 1:    '465',
187: 1:    '0',
187: 1:    '5813',
187: 1:    '7264',
187: 1:    '1369',
187: 1:    '7952'
187: 1:  ]
187: 1:}
187: 1:Scores: 5022
187: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254']')
187: 1:Fire Event: PassTest{complexity=10, testCount=28}
------------------------------------------
188: 1:BoardData {
188: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
188: 1:  'expectedAnswer': '8116425',
188: 1:  'history': [
188: 1:    {
188: 1:      'answer': '149',
188: 1:      'question': '123',
188: 1:      'valid': true
188: 1:    },
188: 1:    {
188: 1:      'answer': '163625',
188: 1:      'question': '465',
188: 1:      'valid': true
188: 1:    },
188: 1:    {
188: 1:      'answer': '0',
188: 1:      'question': '0',
188: 1:      'valid': true
188: 1:    },
188: 1:    {
188: 1:      'answer': '256419',
188: 1:      'question': '5813',
188: 1:      'valid': true
188: 1:    },
188: 1:    {
188: 1:      'answer': '4943616',
188: 1:      'question': '7264',
188: 1:      'valid': true
188: 1:    },
188: 1:    {
188: 1:      'answer': '193681',
188: 1:      'question': '1369',
188: 1:      'valid': true
188: 1:    },
188: 1:    {
188: 1:      'answer': '4981254',
188: 1:      'question': '7952',
188: 1:      'valid': true
188: 1:    }
188: 1:  ],
188: 1:  'info': [
188: 1:    '✅f(123) = 149',
188: 1:    '✅f(465) = 163625',
188: 1:    '✅f(0) = 0',
188: 1:    '✅f(5813) = 256419',
188: 1:    '✅f(7264) = 4943616',
188: 1:    '✅f(1369) = 193681',
188: 1:    '✅f(7952) = 4981254',
188: 1:    '❌f(9425) = ??? != 8116425'
188: 1:  ],
188: 1:  'level': 6,
188: 1:  'nextQuestion': '9425',
188: 1:  'questions': [
188: 1:    '123',
188: 1:    '465',
188: 1:    '0',
188: 1:    '5813',
188: 1:    '7264',
188: 1:    '1369',
188: 1:    '7952',
188: 1:    '9425'
188: 1:  ]
188: 1:}
188: 1:Scores: 5025
188: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425']')
188: 1:Fire Event: PassTest{complexity=10, testCount=28}
------------------------------------------
189: 1:BoardData {
189: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
189: 1:  'expectedAnswer': '16492581',
189: 1:  'history': [
189: 1:    {
189: 1:      'answer': '149',
189: 1:      'question': '123',
189: 1:      'valid': true
189: 1:    },
189: 1:    {
189: 1:      'answer': '163625',
189: 1:      'question': '465',
189: 1:      'valid': true
189: 1:    },
189: 1:    {
189: 1:      'answer': '0',
189: 1:      'question': '0',
189: 1:      'valid': true
189: 1:    },
189: 1:    {
189: 1:      'answer': '256419',
189: 1:      'question': '5813',
189: 1:      'valid': true
189: 1:    },
189: 1:    {
189: 1:      'answer': '4943616',
189: 1:      'question': '7264',
189: 1:      'valid': true
189: 1:    },
189: 1:    {
189: 1:      'answer': '193681',
189: 1:      'question': '1369',
189: 1:      'valid': true
189: 1:    },
189: 1:    {
189: 1:      'answer': '4981254',
189: 1:      'question': '7952',
189: 1:      'valid': true
189: 1:    },
189: 1:    {
189: 1:      'answer': '8116425',
189: 1:      'question': '9425',
189: 1:      'valid': true
189: 1:    }
189: 1:  ],
189: 1:  'info': [
189: 1:    '✅f(123) = 149',
189: 1:    '✅f(465) = 163625',
189: 1:    '✅f(0) = 0',
189: 1:    '✅f(5813) = 256419',
189: 1:    '✅f(7264) = 4943616',
189: 1:    '✅f(1369) = 193681',
189: 1:    '✅f(7952) = 4981254',
189: 1:    '✅f(9425) = 8116425',
189: 1:    '❌f(4759) = ??? != 16492581'
189: 1:  ],
189: 1:  'level': 6,
189: 1:  'nextQuestion': '4759',
189: 1:  'questions': [
189: 1:    '123',
189: 1:    '465',
189: 1:    '0',
189: 1:    '5813',
189: 1:    '7264',
189: 1:    '1369',
189: 1:    '7952',
189: 1:    '9425',
189: 1:    '4759'
189: 1:  ]
189: 1:}
189: 1:Scores: 5028
189: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581']')
189: 1:Fire Event: PassTest{complexity=10, testCount=28}
------------------------------------------
190: 1:BoardData {
190: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
190: 1:  'expectedAnswer': '16494949',
190: 1:  'history': [
190: 1:    {
190: 1:      'answer': '149',
190: 1:      'question': '123',
190: 1:      'valid': true
190: 1:    },
190: 1:    {
190: 1:      'answer': '163625',
190: 1:      'question': '465',
190: 1:      'valid': true
190: 1:    },
190: 1:    {
190: 1:      'answer': '0',
190: 1:      'question': '0',
190: 1:      'valid': true
190: 1:    },
190: 1:    {
190: 1:      'answer': '256419',
190: 1:      'question': '5813',
190: 1:      'valid': true
190: 1:    },
190: 1:    {
190: 1:      'answer': '4943616',
190: 1:      'question': '7264',
190: 1:      'valid': true
190: 1:    },
190: 1:    {
190: 1:      'answer': '193681',
190: 1:      'question': '1369',
190: 1:      'valid': true
190: 1:    },
190: 1:    {
190: 1:      'answer': '4981254',
190: 1:      'question': '7952',
190: 1:      'valid': true
190: 1:    },
190: 1:    {
190: 1:      'answer': '8116425',
190: 1:      'question': '9425',
190: 1:      'valid': true
190: 1:    },
190: 1:    {
190: 1:      'answer': '16492581',
190: 1:      'question': '4759',
190: 1:      'valid': true
190: 1:    }
190: 1:  ],
190: 1:  'info': [
190: 1:    '✅f(123) = 149',
190: 1:    '✅f(465) = 163625',
190: 1:    '✅f(0) = 0',
190: 1:    '✅f(5813) = 256419',
190: 1:    '✅f(7264) = 4943616',
190: 1:    '✅f(1369) = 193681',
190: 1:    '✅f(7952) = 4981254',
190: 1:    '✅f(9425) = 8116425',
190: 1:    '✅f(4759) = 16492581',
190: 1:    '❌f(4777) = ??? != 16494949'
190: 1:  ],
190: 1:  'level': 6,
190: 1:  'nextQuestion': '4777',
190: 1:  'questions': [
190: 1:    '123',
190: 1:    '465',
190: 1:    '0',
190: 1:    '5813',
190: 1:    '7264',
190: 1:    '1369',
190: 1:    '7952',
190: 1:    '9425',
190: 1:    '4759',
190: 1:    '4777'
190: 1:  ]
190: 1:}
190: 1:Scores: 5031
190: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949']')
190: 1:Fire Event: PassTest{complexity=10, testCount=28}
------------------------------------------
191: 1:BoardData {
191: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
191: 1:  'expectedAnswer': '40160',
191: 1:  'history': [
191: 1:    {
191: 1:      'answer': '149',
191: 1:      'question': '123',
191: 1:      'valid': true
191: 1:    },
191: 1:    {
191: 1:      'answer': '163625',
191: 1:      'question': '465',
191: 1:      'valid': true
191: 1:    },
191: 1:    {
191: 1:      'answer': '0',
191: 1:      'question': '0',
191: 1:      'valid': true
191: 1:    },
191: 1:    {
191: 1:      'answer': '256419',
191: 1:      'question': '5813',
191: 1:      'valid': true
191: 1:    },
191: 1:    {
191: 1:      'answer': '4943616',
191: 1:      'question': '7264',
191: 1:      'valid': true
191: 1:    },
191: 1:    {
191: 1:      'answer': '193681',
191: 1:      'question': '1369',
191: 1:      'valid': true
191: 1:    },
191: 1:    {
191: 1:      'answer': '4981254',
191: 1:      'question': '7952',
191: 1:      'valid': true
191: 1:    },
191: 1:    {
191: 1:      'answer': '8116425',
191: 1:      'question': '9425',
191: 1:      'valid': true
191: 1:    },
191: 1:    {
191: 1:      'answer': '16492581',
191: 1:      'question': '4759',
191: 1:      'valid': true
191: 1:    },
191: 1:    {
191: 1:      'answer': '16494949',
191: 1:      'question': '4777',
191: 1:      'valid': true
191: 1:    }
191: 1:  ],
191: 1:  'info': [
191: 1:    '✅f(123) = 149',
191: 1:    '✅f(465) = 163625',
191: 1:    '✅f(0) = 0',
191: 1:    '✅f(5813) = 256419',
191: 1:    '✅f(7264) = 4943616',
191: 1:    '✅f(1369) = 193681',
191: 1:    '✅f(7952) = 4981254',
191: 1:    '✅f(9425) = 8116425',
191: 1:    '✅f(4759) = 16492581',
191: 1:    '✅f(4777) = 16494949',
191: 1:    '❌f(2040) = ??? != 40160'
191: 1:  ],
191: 1:  'level': 6,
191: 1:  'nextQuestion': '2040',
191: 1:  'questions': [
191: 1:    '123',
191: 1:    '465',
191: 1:    '0',
191: 1:    '5813',
191: 1:    '7264',
191: 1:    '1369',
191: 1:    '7952',
191: 1:    '9425',
191: 1:    '4759',
191: 1:    '4777',
191: 1:    '2040'
191: 1:  ]
191: 1:}
191: 1:Scores: 5034
191: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160']')
191: 1:Fire Event: PassTest{complexity=10, testCount=28}
------------------------------------------
192: 1:BoardData {
192: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
192: 1:  'expectedAnswer': '3614936',
192: 1:  'history': [
192: 1:    {
192: 1:      'answer': '149',
192: 1:      'question': '123',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': '163625',
192: 1:      'question': '465',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': '0',
192: 1:      'question': '0',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': '256419',
192: 1:      'question': '5813',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': '4943616',
192: 1:      'question': '7264',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': '193681',
192: 1:      'question': '1369',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': '4981254',
192: 1:      'question': '7952',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': '8116425',
192: 1:      'question': '9425',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': '16492581',
192: 1:      'question': '4759',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': '16494949',
192: 1:      'question': '4777',
192: 1:      'valid': true
192: 1:    },
192: 1:    {
192: 1:      'answer': '40160',
192: 1:      'question': '2040',
192: 1:      'valid': true
192: 1:    }
192: 1:  ],
192: 1:  'info': [
192: 1:    '✅f(123) = 149',
192: 1:    '✅f(465) = 163625',
192: 1:    '✅f(0) = 0',
192: 1:    '✅f(5813) = 256419',
192: 1:    '✅f(7264) = 4943616',
192: 1:    '✅f(1369) = 193681',
192: 1:    '✅f(7952) = 4981254',
192: 1:    '✅f(9425) = 8116425',
192: 1:    '✅f(4759) = 16492581',
192: 1:    '✅f(4777) = 16494949',
192: 1:    '✅f(2040) = 40160',
192: 1:    '❌f(6176) = ??? != 3614936'
192: 1:  ],
192: 1:  'level': 6,
192: 1:  'nextQuestion': '6176',
192: 1:  'questions': [
192: 1:    '123',
192: 1:    '465',
192: 1:    '0',
192: 1:    '5813',
192: 1:    '7264',
192: 1:    '1369',
192: 1:    '7952',
192: 1:    '9425',
192: 1:    '4759',
192: 1:    '4777',
192: 1:    '2040',
192: 1:    '6176'
192: 1:  ]
192: 1:}
192: 1:Scores: 5037
192: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936']')
192: 1:Fire Event: PassTest{complexity=10, testCount=28}
------------------------------------------
193: 1:BoardData {
193: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
193: 1:  'expectedAnswer': '19064',
193: 1:  'history': [
193: 1:    {
193: 1:      'answer': '149',
193: 1:      'question': '123',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': '163625',
193: 1:      'question': '465',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': '0',
193: 1:      'question': '0',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': '256419',
193: 1:      'question': '5813',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': '4943616',
193: 1:      'question': '7264',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': '193681',
193: 1:      'question': '1369',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': '4981254',
193: 1:      'question': '7952',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': '8116425',
193: 1:      'question': '9425',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': '16492581',
193: 1:      'question': '4759',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': '16494949',
193: 1:      'question': '4777',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': '40160',
193: 1:      'question': '2040',
193: 1:      'valid': true
193: 1:    },
193: 1:    {
193: 1:      'answer': '3614936',
193: 1:      'question': '6176',
193: 1:      'valid': true
193: 1:    }
193: 1:  ],
193: 1:  'info': [
193: 1:    '✅f(123) = 149',
193: 1:    '✅f(465) = 163625',
193: 1:    '✅f(0) = 0',
193: 1:    '✅f(5813) = 256419',
193: 1:    '✅f(7264) = 4943616',
193: 1:    '✅f(1369) = 193681',
193: 1:    '✅f(7952) = 4981254',
193: 1:    '✅f(9425) = 8116425',
193: 1:    '✅f(4759) = 16492581',
193: 1:    '✅f(4777) = 16494949',
193: 1:    '✅f(2040) = 40160',
193: 1:    '✅f(6176) = 3614936',
193: 1:    '❌f(1308) = ??? != 19064'
193: 1:  ],
193: 1:  'level': 6,
193: 1:  'nextQuestion': '1308',
193: 1:  'questions': [
193: 1:    '123',
193: 1:    '465',
193: 1:    '0',
193: 1:    '5813',
193: 1:    '7264',
193: 1:    '1369',
193: 1:    '7952',
193: 1:    '9425',
193: 1:    '4759',
193: 1:    '4777',
193: 1:    '2040',
193: 1:    '6176',
193: 1:    '1308'
193: 1:  ]
193: 1:}
193: 1:Scores: 5040
193: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064']')
193: 1:Fire Event: PassTest{complexity=10, testCount=28}
------------------------------------------
194: 1:BoardData {
194: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
194: 1:  'expectedAnswer': '4496416',
194: 1:  'history': [
194: 1:    {
194: 1:      'answer': '149',
194: 1:      'question': '123',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': '163625',
194: 1:      'question': '465',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': '0',
194: 1:      'question': '0',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': '256419',
194: 1:      'question': '5813',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': '4943616',
194: 1:      'question': '7264',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': '193681',
194: 1:      'question': '1369',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': '4981254',
194: 1:      'question': '7952',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': '8116425',
194: 1:      'question': '9425',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': '16492581',
194: 1:      'question': '4759',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': '16494949',
194: 1:      'question': '4777',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': '40160',
194: 1:      'question': '2040',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': '3614936',
194: 1:      'question': '6176',
194: 1:      'valid': true
194: 1:    },
194: 1:    {
194: 1:      'answer': '19064',
194: 1:      'question': '1308',
194: 1:      'valid': true
194: 1:    }
194: 1:  ],
194: 1:  'info': [
194: 1:    '✅f(123) = 149',
194: 1:    '✅f(465) = 163625',
194: 1:    '✅f(0) = 0',
194: 1:    '✅f(5813) = 256419',
194: 1:    '✅f(7264) = 4943616',
194: 1:    '✅f(1369) = 193681',
194: 1:    '✅f(7952) = 4981254',
194: 1:    '✅f(9425) = 8116425',
194: 1:    '✅f(4759) = 16492581',
194: 1:    '✅f(4777) = 16494949',
194: 1:    '✅f(2040) = 40160',
194: 1:    '✅f(6176) = 3614936',
194: 1:    '✅f(1308) = 19064',
194: 1:    '❌f(2784) = ??? != 4496416'
194: 1:  ],
194: 1:  'level': 6,
194: 1:  'nextQuestion': '2784',
194: 1:  'questions': [
194: 1:    '123',
194: 1:    '465',
194: 1:    '0',
194: 1:    '5813',
194: 1:    '7264',
194: 1:    '1369',
194: 1:    '7952',
194: 1:    '9425',
194: 1:    '4759',
194: 1:    '4777',
194: 1:    '2040',
194: 1:    '6176',
194: 1:    '1308',
194: 1:    '2784'
194: 1:  ]
194: 1:}
194: 1:Scores: 5043
194: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416']')
194: 1:Fire Event: PassTest{complexity=10, testCount=28}
------------------------------------------
195: 1:BoardData {
195: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
195: 1:  'expectedAnswer': '1643664',
195: 1:  'history': [
195: 1:    {
195: 1:      'answer': '149',
195: 1:      'question': '123',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': '163625',
195: 1:      'question': '465',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': '0',
195: 1:      'question': '0',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': '256419',
195: 1:      'question': '5813',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': '4943616',
195: 1:      'question': '7264',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': '193681',
195: 1:      'question': '1369',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': '4981254',
195: 1:      'question': '7952',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': '8116425',
195: 1:      'question': '9425',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': '16492581',
195: 1:      'question': '4759',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': '16494949',
195: 1:      'question': '4777',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': '40160',
195: 1:      'question': '2040',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': '3614936',
195: 1:      'question': '6176',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': '19064',
195: 1:      'question': '1308',
195: 1:      'valid': true
195: 1:    },
195: 1:    {
195: 1:      'answer': '4496416',
195: 1:      'question': '2784',
195: 1:      'valid': true
195: 1:    }
195: 1:  ],
195: 1:  'info': [
195: 1:    '✅f(123) = 149',
195: 1:    '✅f(465) = 163625',
195: 1:    '✅f(0) = 0',
195: 1:    '✅f(5813) = 256419',
195: 1:    '✅f(7264) = 4943616',
195: 1:    '✅f(1369) = 193681',
195: 1:    '✅f(7952) = 4981254',
195: 1:    '✅f(9425) = 8116425',
195: 1:    '✅f(4759) = 16492581',
195: 1:    '✅f(4777) = 16494949',
195: 1:    '✅f(2040) = 40160',
195: 1:    '✅f(6176) = 3614936',
195: 1:    '✅f(1308) = 19064',
195: 1:    '✅f(2784) = 4496416',
195: 1:    '❌f(1868) = ??? != 1643664'
195: 1:  ],
195: 1:  'level': 6,
195: 1:  'nextQuestion': '1868',
195: 1:  'questions': [
195: 1:    '123',
195: 1:    '465',
195: 1:    '0',
195: 1:    '5813',
195: 1:    '7264',
195: 1:    '1369',
195: 1:    '7952',
195: 1:    '9425',
195: 1:    '4759',
195: 1:    '4777',
195: 1:    '2040',
195: 1:    '6176',
195: 1:    '1308',
195: 1:    '2784',
195: 1:    '1868'
195: 1:  ]
195: 1:}
195: 1:Scores: 5046
195: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416', '1643664']')
195: 1:Fire Event: PassTest{complexity=10, testCount=28}
------------------------------------------
196: 1:BoardData {
196: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
196: 1:  'expectedAnswer': '1646481',
196: 1:  'history': [
196: 1:    {
196: 1:      'answer': '149',
196: 1:      'question': '123',
196: 1:      'valid': true
196: 1:    },
196: 1:    {
196: 1:      'answer': '163625',
196: 1:      'question': '465',
196: 1:      'valid': true
196: 1:    },
196: 1:    {
196: 1:      'answer': '0',
196: 1:      'question': '0',
196: 1:      'valid': true
196: 1:    },
196: 1:    {
196: 1:      'answer': '256419',
196: 1:      'question': '5813',
196: 1:      'valid': true
196: 1:    },
196: 1:    {
196: 1:      'answer': '4943616',
196: 1:      'question': '7264',
196: 1:      'valid': true
196: 1:    },
196: 1:    {
196: 1:      'answer': '193681',
196: 1:      'question': '1369',
196: 1:      'valid': true
196: 1:    },
196: 1:    {
196: 1:      'answer': '4981254',
196: 1:      'question': '7952',
196: 1:      'valid': true
196: 1:    },
196: 1:    {
196: 1:      'answer': '8116425',
196: 1:      'question': '9425',
196: 1:      'valid': true
196: 1:    },
196: 1:    {
196: 1:      'answer': '16492581',
196: 1:      'question': '4759',
196: 1:      'valid': true
196: 1:    },
196: 1:    {
196: 1:      'answer': '16494949',
196: 1:      'question': '4777',
196: 1:      'valid': true
196: 1:    },
196: 1:    {
196: 1:      'answer': '40160',
196: 1:      'question': '2040',
196: 1:      'valid': true
196: 1:    },
196: 1:    {
196: 1:      'answer': '3614936',
196: 1:      'question': '6176',
196: 1:      'valid': true
196: 1:    },
196: 1:    {
196: 1:      'answer': '19064',
196: 1:      'question': '1308',
196: 1:      'valid': true
196: 1:    },
196: 1:    {
196: 1:      'answer': '4496416',
196: 1:      'question': '2784',
196: 1:      'valid': true
196: 1:    },
196: 1:    {
196: 1:      'answer': '1643664',
196: 1:      'question': '1868',
196: 1:      'valid': true
196: 1:    }
196: 1:  ],
196: 1:  'info': [
196: 1:    '✅f(123) = 149',
196: 1:    '✅f(465) = 163625',
196: 1:    '✅f(0) = 0',
196: 1:    '✅f(5813) = 256419',
196: 1:    '✅f(7264) = 4943616',
196: 1:    '✅f(1369) = 193681',
196: 1:    '✅f(7952) = 4981254',
196: 1:    '✅f(9425) = 8116425',
196: 1:    '✅f(4759) = 16492581',
196: 1:    '✅f(4777) = 16494949',
196: 1:    '✅f(2040) = 40160',
196: 1:    '✅f(6176) = 3614936',
196: 1:    '✅f(1308) = 19064',
196: 1:    '✅f(2784) = 4496416',
196: 1:    '✅f(1868) = 1643664',
196: 1:    '❌f(4289) = ??? != 1646481'
196: 1:  ],
196: 1:  'level': 6,
196: 1:  'nextQuestion': '4289',
196: 1:  'questions': [
196: 1:    '123',
196: 1:    '465',
196: 1:    '0',
196: 1:    '5813',
196: 1:    '7264',
196: 1:    '1369',
196: 1:    '7952',
196: 1:    '9425',
196: 1:    '4759',
196: 1:    '4777',
196: 1:    '2040',
196: 1:    '6176',
196: 1:    '1308',
196: 1:    '2784',
196: 1:    '1868',
196: 1:    '4289'
196: 1:  ]
196: 1:}
196: 1:Scores: 5049
196: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416', '1643664', '1646481']')
196: 1:Fire Event: PassTest{complexity=10, testCount=28}
------------------------------------------
197: 1:BoardData {
197: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
197: 1:  'expectedAnswer': '644909',
197: 1:  'history': [
197: 1:    {
197: 1:      'answer': '149',
197: 1:      'question': '123',
197: 1:      'valid': true
197: 1:    },
197: 1:    {
197: 1:      'answer': '163625',
197: 1:      'question': '465',
197: 1:      'valid': true
197: 1:    },
197: 1:    {
197: 1:      'answer': '0',
197: 1:      'question': '0',
197: 1:      'valid': true
197: 1:    },
197: 1:    {
197: 1:      'answer': '256419',
197: 1:      'question': '5813',
197: 1:      'valid': true
197: 1:    },
197: 1:    {
197: 1:      'answer': '4943616',
197: 1:      'question': '7264',
197: 1:      'valid': true
197: 1:    },
197: 1:    {
197: 1:      'answer': '193681',
197: 1:      'question': '1369',
197: 1:      'valid': true
197: 1:    },
197: 1:    {
197: 1:      'answer': '4981254',
197: 1:      'question': '7952',
197: 1:      'valid': true
197: 1:    },
197: 1:    {
197: 1:      'answer': '8116425',
197: 1:      'question': '9425',
197: 1:      'valid': true
197: 1:    },
197: 1:    {
197: 1:      'answer': '16492581',
197: 1:      'question': '4759',
197: 1:      'valid': true
197: 1:    },
197: 1:    {
197: 1:      'answer': '16494949',
197: 1:      'question': '4777',
197: 1:      'valid': true
197: 1:    },
197: 1:    {
197: 1:      'answer': '40160',
197: 1:      'question': '2040',
197: 1:      'valid': true
197: 1:    },
197: 1:    {
197: 1:      'answer': '3614936',
197: 1:      'question': '6176',
197: 1:      'valid': true
197: 1:    },
197: 1:    {
197: 1:      'answer': '19064',
197: 1:      'question': '1308',
197: 1:      'valid': true
197: 1:    },
197: 1:    {
197: 1:      'answer': '4496416',
197: 1:      'question': '2784',
197: 1:      'valid': true
197: 1:    },
197: 1:    {
197: 1:      'answer': '1643664',
197: 1:      'question': '1868',
197: 1:      'valid': true
197: 1:    },
197: 1:    {
197: 1:      'answer': '1646481',
197: 1:      'question': '4289',
197: 1:      'valid': true
197: 1:    }
197: 1:  ],
197: 1:  'info': [
197: 1:    '✅f(123) = 149',
197: 1:    '✅f(465) = 163625',
197: 1:    '✅f(0) = 0',
197: 1:    '✅f(5813) = 256419',
197: 1:    '✅f(7264) = 4943616',
197: 1:    '✅f(1369) = 193681',
197: 1:    '✅f(7952) = 4981254',
197: 1:    '✅f(9425) = 8116425',
197: 1:    '✅f(4759) = 16492581',
197: 1:    '✅f(4777) = 16494949',
197: 1:    '✅f(2040) = 40160',
197: 1:    '✅f(6176) = 3614936',
197: 1:    '✅f(1308) = 19064',
197: 1:    '✅f(2784) = 4496416',
197: 1:    '✅f(1868) = 1643664',
197: 1:    '✅f(4289) = 1646481',
197: 1:    '❌f(8703) = ??? != 644909'
197: 1:  ],
197: 1:  'level': 6,
197: 1:  'nextQuestion': '8703',
197: 1:  'questions': [
197: 1:    '123',
197: 1:    '465',
197: 1:    '0',
197: 1:    '5813',
197: 1:    '7264',
197: 1:    '1369',
197: 1:    '7952',
197: 1:    '9425',
197: 1:    '4759',
197: 1:    '4777',
197: 1:    '2040',
197: 1:    '6176',
197: 1:    '1308',
197: 1:    '2784',
197: 1:    '1868',
197: 1:    '4289',
197: 1:    '8703'
197: 1:  ]
197: 1:}
197: 1:Scores: 5052
197: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416', '1643664', '1646481', '644909']')
197: 1:Fire Event: PassTest{complexity=10, testCount=28}
------------------------------------------
198: 1:BoardData {
198: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
198: 1:  'expectedAnswer': '136810',
198: 1:  'history': [
198: 1:    {
198: 1:      'answer': '149',
198: 1:      'question': '123',
198: 1:      'valid': true
198: 1:    },
198: 1:    {
198: 1:      'answer': '163625',
198: 1:      'question': '465',
198: 1:      'valid': true
198: 1:    },
198: 1:    {
198: 1:      'answer': '0',
198: 1:      'question': '0',
198: 1:      'valid': true
198: 1:    },
198: 1:    {
198: 1:      'answer': '256419',
198: 1:      'question': '5813',
198: 1:      'valid': true
198: 1:    },
198: 1:    {
198: 1:      'answer': '4943616',
198: 1:      'question': '7264',
198: 1:      'valid': true
198: 1:    },
198: 1:    {
198: 1:      'answer': '193681',
198: 1:      'question': '1369',
198: 1:      'valid': true
198: 1:    },
198: 1:    {
198: 1:      'answer': '4981254',
198: 1:      'question': '7952',
198: 1:      'valid': true
198: 1:    },
198: 1:    {
198: 1:      'answer': '8116425',
198: 1:      'question': '9425',
198: 1:      'valid': true
198: 1:    },
198: 1:    {
198: 1:      'answer': '16492581',
198: 1:      'question': '4759',
198: 1:      'valid': true
198: 1:    },
198: 1:    {
198: 1:      'answer': '16494949',
198: 1:      'question': '4777',
198: 1:      'valid': true
198: 1:    },
198: 1:    {
198: 1:      'answer': '40160',
198: 1:      'question': '2040',
198: 1:      'valid': true
198: 1:    },
198: 1:    {
198: 1:      'answer': '3614936',
198: 1:      'question': '6176',
198: 1:      'valid': true
198: 1:    },
198: 1:    {
198: 1:      'answer': '19064',
198: 1:      'question': '1308',
198: 1:      'valid': true
198: 1:    },
198: 1:    {
198: 1:      'answer': '4496416',
198: 1:      'question': '2784',
198: 1:      'valid': true
198: 1:    },
198: 1:    {
198: 1:      'answer': '1643664',
198: 1:      'question': '1868',
198: 1:      'valid': true
198: 1:    },
198: 1:    {
198: 1:      'answer': '1646481',
198: 1:      'question': '4289',
198: 1:      'valid': true
198: 1:    },
198: 1:    {
198: 1:      'answer': '644909',
198: 1:      'question': '8703',
198: 1:      'valid': true
198: 1:    }
198: 1:  ],
198: 1:  'info': [
198: 1:    '✅f(123) = 149',
198: 1:    '✅f(465) = 163625',
198: 1:    '✅f(0) = 0',
198: 1:    '✅f(5813) = 256419',
198: 1:    '✅f(7264) = 4943616',
198: 1:    '✅f(1369) = 193681',
198: 1:    '✅f(7952) = 4981254',
198: 1:    '✅f(9425) = 8116425',
198: 1:    '✅f(4759) = 16492581',
198: 1:    '✅f(4777) = 16494949',
198: 1:    '✅f(2040) = 40160',
198: 1:    '✅f(6176) = 3614936',
198: 1:    '✅f(1308) = 19064',
198: 1:    '✅f(2784) = 4496416',
198: 1:    '✅f(1868) = 1643664',
198: 1:    '✅f(4289) = 1646481',
198: 1:    '✅f(8703) = 644909',
198: 1:    '❌f(1690) = ??? != 136810'
198: 1:  ],
198: 1:  'level': 6,
198: 1:  'nextQuestion': '1690',
198: 1:  'questions': [
198: 1:    '123',
198: 1:    '465',
198: 1:    '0',
198: 1:    '5813',
198: 1:    '7264',
198: 1:    '1369',
198: 1:    '7952',
198: 1:    '9425',
198: 1:    '4759',
198: 1:    '4777',
198: 1:    '2040',
198: 1:    '6176',
198: 1:    '1308',
198: 1:    '2784',
198: 1:    '1868',
198: 1:    '4289',
198: 1:    '8703',
198: 1:    '1690'
198: 1:  ]
198: 1:}
198: 1:Scores: 5055
198: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416', '1643664', '1646481', '644909', '136810']')
198: 1:Fire Event: PassTest{complexity=10, testCount=28}
------------------------------------------
199: 1:BoardData {
199: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
199: 1:  'expectedAnswer': '44944',
199: 1:  'history': [
199: 1:    {
199: 1:      'answer': '149',
199: 1:      'question': '123',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '163625',
199: 1:      'question': '465',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '0',
199: 1:      'question': '0',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '256419',
199: 1:      'question': '5813',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '4943616',
199: 1:      'question': '7264',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '193681',
199: 1:      'question': '1369',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '4981254',
199: 1:      'question': '7952',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '8116425',
199: 1:      'question': '9425',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '16492581',
199: 1:      'question': '4759',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '16494949',
199: 1:      'question': '4777',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '40160',
199: 1:      'question': '2040',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '3614936',
199: 1:      'question': '6176',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '19064',
199: 1:      'question': '1308',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '4496416',
199: 1:      'question': '2784',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '1643664',
199: 1:      'question': '1868',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '1646481',
199: 1:      'question': '4289',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '644909',
199: 1:      'question': '8703',
199: 1:      'valid': true
199: 1:    },
199: 1:    {
199: 1:      'answer': '136810',
199: 1:      'question': '1690',
199: 1:      'valid': true
199: 1:    }
199: 1:  ],
199: 1:  'info': [
199: 1:    '✅f(123) = 149',
199: 1:    '✅f(465) = 163625',
199: 1:    '✅f(0) = 0',
199: 1:    '✅f(5813) = 256419',
199: 1:    '✅f(7264) = 4943616',
199: 1:    '✅f(1369) = 193681',
199: 1:    '✅f(7952) = 4981254',
199: 1:    '✅f(9425) = 8116425',
199: 1:    '✅f(4759) = 16492581',
199: 1:    '✅f(4777) = 16494949',
199: 1:    '✅f(2040) = 40160',
199: 1:    '✅f(6176) = 3614936',
199: 1:    '✅f(1308) = 19064',
199: 1:    '✅f(2784) = 4496416',
199: 1:    '✅f(1868) = 1643664',
199: 1:    '✅f(4289) = 1646481',
199: 1:    '✅f(8703) = 644909',
199: 1:    '✅f(1690) = 136810',
199: 1:    '❌f(2722) = ??? != 44944'
199: 1:  ],
199: 1:  'level': 6,
199: 1:  'nextQuestion': '2722',
199: 1:  'questions': [
199: 1:    '123',
199: 1:    '465',
199: 1:    '0',
199: 1:    '5813',
199: 1:    '7264',
199: 1:    '1369',
199: 1:    '7952',
199: 1:    '9425',
199: 1:    '4759',
199: 1:    '4777',
199: 1:    '2040',
199: 1:    '6176',
199: 1:    '1308',
199: 1:    '2784',
199: 1:    '1868',
199: 1:    '4289',
199: 1:    '8703',
199: 1:    '1690',
199: 1:    '2722'
199: 1:  ]
199: 1:}
199: 1:Scores: 5058
199: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416', '1643664', '1646481', '644909', '136810', '44944']')
199: 1:Fire Event: PassTest{complexity=10, testCount=28}
------------------------------------------
200: 1:BoardData {
200: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
200: 1:  'expectedAnswer': '4994',
200: 1:  'history': [
200: 1:    {
200: 1:      'answer': '149',
200: 1:      'question': '123',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '163625',
200: 1:      'question': '465',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '0',
200: 1:      'question': '0',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '256419',
200: 1:      'question': '5813',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '4943616',
200: 1:      'question': '7264',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '193681',
200: 1:      'question': '1369',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '4981254',
200: 1:      'question': '7952',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '8116425',
200: 1:      'question': '9425',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '16492581',
200: 1:      'question': '4759',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '16494949',
200: 1:      'question': '4777',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '40160',
200: 1:      'question': '2040',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '3614936',
200: 1:      'question': '6176',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '19064',
200: 1:      'question': '1308',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '4496416',
200: 1:      'question': '2784',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '1643664',
200: 1:      'question': '1868',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '1646481',
200: 1:      'question': '4289',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '644909',
200: 1:      'question': '8703',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '136810',
200: 1:      'question': '1690',
200: 1:      'valid': true
200: 1:    },
200: 1:    {
200: 1:      'answer': '44944',
200: 1:      'question': '2722',
200: 1:      'valid': true
200: 1:    }
200: 1:  ],
200: 1:  'info': [
200: 1:    '✅f(123) = 149',
200: 1:    '✅f(465) = 163625',
200: 1:    '✅f(0) = 0',
200: 1:    '✅f(5813) = 256419',
200: 1:    '✅f(7264) = 4943616',
200: 1:    '✅f(1369) = 193681',
200: 1:    '✅f(7952) = 4981254',
200: 1:    '✅f(9425) = 8116425',
200: 1:    '✅f(4759) = 16492581',
200: 1:    '✅f(4777) = 16494949',
200: 1:    '✅f(2040) = 40160',
200: 1:    '✅f(6176) = 3614936',
200: 1:    '✅f(1308) = 19064',
200: 1:    '✅f(2784) = 4496416',
200: 1:    '✅f(1868) = 1643664',
200: 1:    '✅f(4289) = 1646481',
200: 1:    '✅f(8703) = 644909',
200: 1:    '✅f(1690) = 136810',
200: 1:    '✅f(2722) = 44944',
200: 1:    '❌f(2332) = ??? != 4994'
200: 1:  ],
200: 1:  'level': 6,
200: 1:  'nextQuestion': '2332',
200: 1:  'questions': [
200: 1:    '123',
200: 1:    '465',
200: 1:    '0',
200: 1:    '5813',
200: 1:    '7264',
200: 1:    '1369',
200: 1:    '7952',
200: 1:    '9425',
200: 1:    '4759',
200: 1:    '4777',
200: 1:    '2040',
200: 1:    '6176',
200: 1:    '1308',
200: 1:    '2784',
200: 1:    '1868',
200: 1:    '4289',
200: 1:    '8703',
200: 1:    '1690',
200: 1:    '2722',
200: 1:    '2332'
200: 1:  ]
200: 1:}
200: 1:Scores: 5061
200: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416', '1643664', '1646481', '644909', '136810', '44944', '4994']')
200: 1:Fire Event: PassTest{complexity=10, testCount=28}
------------------------------------------
201: 1:BoardData {
201: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
201: 1:  'expectedAnswer': '251254',
201: 1:  'history': [
201: 1:    {
201: 1:      'answer': '149',
201: 1:      'question': '123',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '163625',
201: 1:      'question': '465',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '0',
201: 1:      'question': '0',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '256419',
201: 1:      'question': '5813',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '4943616',
201: 1:      'question': '7264',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '193681',
201: 1:      'question': '1369',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '4981254',
201: 1:      'question': '7952',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '8116425',
201: 1:      'question': '9425',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '16492581',
201: 1:      'question': '4759',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '16494949',
201: 1:      'question': '4777',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '40160',
201: 1:      'question': '2040',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '3614936',
201: 1:      'question': '6176',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '19064',
201: 1:      'question': '1308',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '4496416',
201: 1:      'question': '2784',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '1643664',
201: 1:      'question': '1868',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '1646481',
201: 1:      'question': '4289',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '644909',
201: 1:      'question': '8703',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '136810',
201: 1:      'question': '1690',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '44944',
201: 1:      'question': '2722',
201: 1:      'valid': true
201: 1:    },
201: 1:    {
201: 1:      'answer': '4994',
201: 1:      'question': '2332',
201: 1:      'valid': true
201: 1:    }
201: 1:  ],
201: 1:  'info': [
201: 1:    '✅f(123) = 149',
201: 1:    '✅f(465) = 163625',
201: 1:    '✅f(0) = 0',
201: 1:    '✅f(5813) = 256419',
201: 1:    '✅f(7264) = 4943616',
201: 1:    '✅f(1369) = 193681',
201: 1:    '✅f(7952) = 4981254',
201: 1:    '✅f(9425) = 8116425',
201: 1:    '✅f(4759) = 16492581',
201: 1:    '✅f(4777) = 16494949',
201: 1:    '✅f(2040) = 40160',
201: 1:    '✅f(6176) = 3614936',
201: 1:    '✅f(1308) = 19064',
201: 1:    '✅f(2784) = 4496416',
201: 1:    '✅f(1868) = 1643664',
201: 1:    '✅f(4289) = 1646481',
201: 1:    '✅f(8703) = 644909',
201: 1:    '✅f(1690) = 136810',
201: 1:    '✅f(2722) = 44944',
201: 1:    '✅f(2332) = 4994',
201: 1:    '❌f(5152) = ??? != 251254'
201: 1:  ],
201: 1:  'level': 6,
201: 1:  'nextQuestion': '5152',
201: 1:  'questions': [
201: 1:    '123',
201: 1:    '465',
201: 1:    '0',
201: 1:    '5813',
201: 1:    '7264',
201: 1:    '1369',
201: 1:    '7952',
201: 1:    '9425',
201: 1:    '4759',
201: 1:    '4777',
201: 1:    '2040',
201: 1:    '6176',
201: 1:    '1308',
201: 1:    '2784',
201: 1:    '1868',
201: 1:    '4289',
201: 1:    '8703',
201: 1:    '1690',
201: 1:    '2722',
201: 1:    '2332',
201: 1:    '5152'
201: 1:  ]
201: 1:}
201: 1:Scores: 5064
201: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416', '1643664', '1646481', '644909', '136810', '44944', '4994', '251254']')
201: 1:Fire Event: PassTest{complexity=10, testCount=28}
------------------------------------------
202: 1:BoardData {
202: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
202: 1:  'expectedAnswer': '198181',
202: 1:  'history': [
202: 1:    {
202: 1:      'answer': '149',
202: 1:      'question': '123',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '163625',
202: 1:      'question': '465',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '0',
202: 1:      'question': '0',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '256419',
202: 1:      'question': '5813',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '4943616',
202: 1:      'question': '7264',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '193681',
202: 1:      'question': '1369',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '4981254',
202: 1:      'question': '7952',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '8116425',
202: 1:      'question': '9425',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '16492581',
202: 1:      'question': '4759',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '16494949',
202: 1:      'question': '4777',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '40160',
202: 1:      'question': '2040',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '3614936',
202: 1:      'question': '6176',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '19064',
202: 1:      'question': '1308',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '4496416',
202: 1:      'question': '2784',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '1643664',
202: 1:      'question': '1868',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '1646481',
202: 1:      'question': '4289',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '644909',
202: 1:      'question': '8703',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '136810',
202: 1:      'question': '1690',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '44944',
202: 1:      'question': '2722',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '4994',
202: 1:      'question': '2332',
202: 1:      'valid': true
202: 1:    },
202: 1:    {
202: 1:      'answer': '251254',
202: 1:      'question': '5152',
202: 1:      'valid': true
202: 1:    }
202: 1:  ],
202: 1:  'info': [
202: 1:    '✅f(123) = 149',
202: 1:    '✅f(465) = 163625',
202: 1:    '✅f(0) = 0',
202: 1:    '✅f(5813) = 256419',
202: 1:    '✅f(7264) = 4943616',
202: 1:    '✅f(1369) = 193681',
202: 1:    '✅f(7952) = 4981254',
202: 1:    '✅f(9425) = 8116425',
202: 1:    '✅f(4759) = 16492581',
202: 1:    '✅f(4777) = 16494949',
202: 1:    '✅f(2040) = 40160',
202: 1:    '✅f(6176) = 3614936',
202: 1:    '✅f(1308) = 19064',
202: 1:    '✅f(2784) = 4496416',
202: 1:    '✅f(1868) = 1643664',
202: 1:    '✅f(4289) = 1646481',
202: 1:    '✅f(8703) = 644909',
202: 1:    '✅f(1690) = 136810',
202: 1:    '✅f(2722) = 44944',
202: 1:    '✅f(2332) = 4994',
202: 1:    '✅f(5152) = 251254',
202: 1:    '❌f(1399) = ??? != 198181'
202: 1:  ],
202: 1:  'level': 6,
202: 1:  'nextQuestion': '1399',
202: 1:  'questions': [
202: 1:    '123',
202: 1:    '465',
202: 1:    '0',
202: 1:    '5813',
202: 1:    '7264',
202: 1:    '1369',
202: 1:    '7952',
202: 1:    '9425',
202: 1:    '4759',
202: 1:    '4777',
202: 1:    '2040',
202: 1:    '6176',
202: 1:    '1308',
202: 1:    '2784',
202: 1:    '1868',
202: 1:    '4289',
202: 1:    '8703',
202: 1:    '1690',
202: 1:    '2722',
202: 1:    '2332',
202: 1:    '5152',
202: 1:    '1399'
202: 1:  ]
202: 1:}
202: 1:Scores: 5067
202: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416', '1643664', '1646481', '644909', '136810', '44944', '4994', '251254', '198181']')
202: 1:Fire Event: PassTest{complexity=10, testCount=28}
------------------------------------------
203: 1:BoardData {
203: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
203: 1:  'expectedAnswer': '498116',
203: 1:  'history': [
203: 1:    {
203: 1:      'answer': '149',
203: 1:      'question': '123',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '163625',
203: 1:      'question': '465',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '0',
203: 1:      'question': '0',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '256419',
203: 1:      'question': '5813',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '4943616',
203: 1:      'question': '7264',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '193681',
203: 1:      'question': '1369',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '4981254',
203: 1:      'question': '7952',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '8116425',
203: 1:      'question': '9425',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '16492581',
203: 1:      'question': '4759',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '16494949',
203: 1:      'question': '4777',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '40160',
203: 1:      'question': '2040',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '3614936',
203: 1:      'question': '6176',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '19064',
203: 1:      'question': '1308',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '4496416',
203: 1:      'question': '2784',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '1643664',
203: 1:      'question': '1868',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '1646481',
203: 1:      'question': '4289',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '644909',
203: 1:      'question': '8703',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '136810',
203: 1:      'question': '1690',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '44944',
203: 1:      'question': '2722',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '4994',
203: 1:      'question': '2332',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '251254',
203: 1:      'question': '5152',
203: 1:      'valid': true
203: 1:    },
203: 1:    {
203: 1:      'answer': '198181',
203: 1:      'question': '1399',
203: 1:      'valid': true
203: 1:    }
203: 1:  ],
203: 1:  'info': [
203: 1:    '✅f(123) = 149',
203: 1:    '✅f(465) = 163625',
203: 1:    '✅f(0) = 0',
203: 1:    '✅f(5813) = 256419',
203: 1:    '✅f(7264) = 4943616',
203: 1:    '✅f(1369) = 193681',
203: 1:    '✅f(7952) = 4981254',
203: 1:    '✅f(9425) = 8116425',
203: 1:    '✅f(4759) = 16492581',
203: 1:    '✅f(4777) = 16494949',
203: 1:    '✅f(2040) = 40160',
203: 1:    '✅f(6176) = 3614936',
203: 1:    '✅f(1308) = 19064',
203: 1:    '✅f(2784) = 4496416',
203: 1:    '✅f(1868) = 1643664',
203: 1:    '✅f(4289) = 1646481',
203: 1:    '✅f(8703) = 644909',
203: 1:    '✅f(1690) = 136810',
203: 1:    '✅f(2722) = 44944',
203: 1:    '✅f(2332) = 4994',
203: 1:    '✅f(5152) = 251254',
203: 1:    '✅f(1399) = 198181',
203: 1:    '❌f(794) = ??? != 498116'
203: 1:  ],
203: 1:  'level': 6,
203: 1:  'nextQuestion': '794',
203: 1:  'questions': [
203: 1:    '123',
203: 1:    '465',
203: 1:    '0',
203: 1:    '5813',
203: 1:    '7264',
203: 1:    '1369',
203: 1:    '7952',
203: 1:    '9425',
203: 1:    '4759',
203: 1:    '4777',
203: 1:    '2040',
203: 1:    '6176',
203: 1:    '1308',
203: 1:    '2784',
203: 1:    '1868',
203: 1:    '4289',
203: 1:    '8703',
203: 1:    '1690',
203: 1:    '2722',
203: 1:    '2332',
203: 1:    '5152',
203: 1:    '1399',
203: 1:    '794'
203: 1:  ]
203: 1:}
203: 1:Scores: 5070
203: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416', '1643664', '1646481', '644909', '136810', '44944', '4994', '251254', '198181', '498116']')
203: 1:Fire Event: PassTest{complexity=10, testCount=28}
------------------------------------------
204: 1:BoardData {
204: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
204: 1:  'expectedAnswer': '8181036',
204: 1:  'history': [
204: 1:    {
204: 1:      'answer': '149',
204: 1:      'question': '123',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '163625',
204: 1:      'question': '465',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '0',
204: 1:      'question': '0',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '256419',
204: 1:      'question': '5813',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '4943616',
204: 1:      'question': '7264',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '193681',
204: 1:      'question': '1369',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '4981254',
204: 1:      'question': '7952',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '8116425',
204: 1:      'question': '9425',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '16492581',
204: 1:      'question': '4759',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '16494949',
204: 1:      'question': '4777',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '40160',
204: 1:      'question': '2040',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '3614936',
204: 1:      'question': '6176',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '19064',
204: 1:      'question': '1308',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '4496416',
204: 1:      'question': '2784',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '1643664',
204: 1:      'question': '1868',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '1646481',
204: 1:      'question': '4289',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '644909',
204: 1:      'question': '8703',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '136810',
204: 1:      'question': '1690',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '44944',
204: 1:      'question': '2722',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '4994',
204: 1:      'question': '2332',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '251254',
204: 1:      'question': '5152',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '198181',
204: 1:      'question': '1399',
204: 1:      'valid': true
204: 1:    },
204: 1:    {
204: 1:      'answer': '498116',
204: 1:      'question': '794',
204: 1:      'valid': true
204: 1:    }
204: 1:  ],
204: 1:  'info': [
204: 1:    '✅f(123) = 149',
204: 1:    '✅f(465) = 163625',
204: 1:    '✅f(0) = 0',
204: 1:    '✅f(5813) = 256419',
204: 1:    '✅f(7264) = 4943616',
204: 1:    '✅f(1369) = 193681',
204: 1:    '✅f(7952) = 4981254',
204: 1:    '✅f(9425) = 8116425',
204: 1:    '✅f(4759) = 16492581',
204: 1:    '✅f(4777) = 16494949',
204: 1:    '✅f(2040) = 40160',
204: 1:    '✅f(6176) = 3614936',
204: 1:    '✅f(1308) = 19064',
204: 1:    '✅f(2784) = 4496416',
204: 1:    '✅f(1868) = 1643664',
204: 1:    '✅f(4289) = 1646481',
204: 1:    '✅f(8703) = 644909',
204: 1:    '✅f(1690) = 136810',
204: 1:    '✅f(2722) = 44944',
204: 1:    '✅f(2332) = 4994',
204: 1:    '✅f(5152) = 251254',
204: 1:    '✅f(1399) = 198181',
204: 1:    '✅f(794) = 498116',
204: 1:    '❌f(9906) = ??? != 8181036'
204: 1:  ],
204: 1:  'level': 6,
204: 1:  'nextQuestion': '9906',
204: 1:  'questions': [
204: 1:    '123',
204: 1:    '465',
204: 1:    '0',
204: 1:    '5813',
204: 1:    '7264',
204: 1:    '1369',
204: 1:    '7952',
204: 1:    '9425',
204: 1:    '4759',
204: 1:    '4777',
204: 1:    '2040',
204: 1:    '6176',
204: 1:    '1308',
204: 1:    '2784',
204: 1:    '1868',
204: 1:    '4289',
204: 1:    '8703',
204: 1:    '1690',
204: 1:    '2722',
204: 1:    '2332',
204: 1:    '5152',
204: 1:    '1399',
204: 1:    '794',
204: 1:    '9906'
204: 1:  ]
204: 1:}
204: 1:Scores: 5073
204: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416', '1643664', '1646481', '644909', '136810', '44944', '4994', '251254', '198181', '498116', '8181036']')
204: 1:Fire Event: PassTest{complexity=10, testCount=28}
------------------------------------------
205: 1:BoardData {
205: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
205: 1:  'expectedAnswer': '412549',
205: 1:  'history': [
205: 1:    {
205: 1:      'answer': '149',
205: 1:      'question': '123',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '163625',
205: 1:      'question': '465',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '0',
205: 1:      'question': '0',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '256419',
205: 1:      'question': '5813',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '4943616',
205: 1:      'question': '7264',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '193681',
205: 1:      'question': '1369',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '4981254',
205: 1:      'question': '7952',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '8116425',
205: 1:      'question': '9425',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '16492581',
205: 1:      'question': '4759',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '16494949',
205: 1:      'question': '4777',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '40160',
205: 1:      'question': '2040',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '3614936',
205: 1:      'question': '6176',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '19064',
205: 1:      'question': '1308',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '4496416',
205: 1:      'question': '2784',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '1643664',
205: 1:      'question': '1868',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '1646481',
205: 1:      'question': '4289',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '644909',
205: 1:      'question': '8703',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '136810',
205: 1:      'question': '1690',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '44944',
205: 1:      'question': '2722',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '4994',
205: 1:      'question': '2332',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '251254',
205: 1:      'question': '5152',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '198181',
205: 1:      'question': '1399',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '498116',
205: 1:      'question': '794',
205: 1:      'valid': true
205: 1:    },
205: 1:    {
205: 1:      'answer': '8181036',
205: 1:      'question': '9906',
205: 1:      'valid': true
205: 1:    }
205: 1:  ],
205: 1:  'info': [
205: 1:    '✅f(123) = 149',
205: 1:    '✅f(465) = 163625',
205: 1:    '✅f(0) = 0',
205: 1:    '✅f(5813) = 256419',
205: 1:    '✅f(7264) = 4943616',
205: 1:    '✅f(1369) = 193681',
205: 1:    '✅f(7952) = 4981254',
205: 1:    '✅f(9425) = 8116425',
205: 1:    '✅f(4759) = 16492581',
205: 1:    '✅f(4777) = 16494949',
205: 1:    '✅f(2040) = 40160',
205: 1:    '✅f(6176) = 3614936',
205: 1:    '✅f(1308) = 19064',
205: 1:    '✅f(2784) = 4496416',
205: 1:    '✅f(1868) = 1643664',
205: 1:    '✅f(4289) = 1646481',
205: 1:    '✅f(8703) = 644909',
205: 1:    '✅f(1690) = 136810',
205: 1:    '✅f(2722) = 44944',
205: 1:    '✅f(2332) = 4994',
205: 1:    '✅f(5152) = 251254',
205: 1:    '✅f(1399) = 198181',
205: 1:    '✅f(794) = 498116',
205: 1:    '✅f(9906) = 8181036',
205: 1:    '❌f(2157) = ??? != 412549'
205: 1:  ],
205: 1:  'level': 6,
205: 1:  'nextQuestion': '2157',
205: 1:  'questions': [
205: 1:    '123',
205: 1:    '465',
205: 1:    '0',
205: 1:    '5813',
205: 1:    '7264',
205: 1:    '1369',
205: 1:    '7952',
205: 1:    '9425',
205: 1:    '4759',
205: 1:    '4777',
205: 1:    '2040',
205: 1:    '6176',
205: 1:    '1308',
205: 1:    '2784',
205: 1:    '1868',
205: 1:    '4289',
205: 1:    '8703',
205: 1:    '1690',
205: 1:    '2722',
205: 1:    '2332',
205: 1:    '5152',
205: 1:    '1399',
205: 1:    '794',
205: 1:    '9906',
205: 1:    '2157'
205: 1:  ]
205: 1:}
205: 1:Scores: 5076
205: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416', '1643664', '1646481', '644909', '136810', '44944', '4994', '251254', '198181', '498116', '8181036', '412549']')
205: 1:Fire Event: PassTest{complexity=10, testCount=28}
------------------------------------------
206: 1:BoardData {
206: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
206: 1:  'expectedAnswer': '256436',
206: 1:  'history': [
206: 1:    {
206: 1:      'answer': '149',
206: 1:      'question': '123',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '163625',
206: 1:      'question': '465',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '0',
206: 1:      'question': '0',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '256419',
206: 1:      'question': '5813',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '4943616',
206: 1:      'question': '7264',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '193681',
206: 1:      'question': '1369',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '4981254',
206: 1:      'question': '7952',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '8116425',
206: 1:      'question': '9425',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '16492581',
206: 1:      'question': '4759',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '16494949',
206: 1:      'question': '4777',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '40160',
206: 1:      'question': '2040',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '3614936',
206: 1:      'question': '6176',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '19064',
206: 1:      'question': '1308',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '4496416',
206: 1:      'question': '2784',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '1643664',
206: 1:      'question': '1868',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '1646481',
206: 1:      'question': '4289',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '644909',
206: 1:      'question': '8703',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '136810',
206: 1:      'question': '1690',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '44944',
206: 1:      'question': '2722',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '4994',
206: 1:      'question': '2332',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '251254',
206: 1:      'question': '5152',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '198181',
206: 1:      'question': '1399',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '498116',
206: 1:      'question': '794',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '8181036',
206: 1:      'question': '9906',
206: 1:      'valid': true
206: 1:    },
206: 1:    {
206: 1:      'answer': '412549',
206: 1:      'question': '2157',
206: 1:      'valid': true
206: 1:    }
206: 1:  ],
206: 1:  'info': [
206: 1:    '✅f(123) = 149',
206: 1:    '✅f(465) = 163625',
206: 1:    '✅f(0) = 0',
206: 1:    '✅f(5813) = 256419',
206: 1:    '✅f(7264) = 4943616',
206: 1:    '✅f(1369) = 193681',
206: 1:    '✅f(7952) = 4981254',
206: 1:    '✅f(9425) = 8116425',
206: 1:    '✅f(4759) = 16492581',
206: 1:    '✅f(4777) = 16494949',
206: 1:    '✅f(2040) = 40160',
206: 1:    '✅f(6176) = 3614936',
206: 1:    '✅f(1308) = 19064',
206: 1:    '✅f(2784) = 4496416',
206: 1:    '✅f(1868) = 1643664',
206: 1:    '✅f(4289) = 1646481',
206: 1:    '✅f(8703) = 644909',
206: 1:    '✅f(1690) = 136810',
206: 1:    '✅f(2722) = 44944',
206: 1:    '✅f(2332) = 4994',
206: 1:    '✅f(5152) = 251254',
206: 1:    '✅f(1399) = 198181',
206: 1:    '✅f(794) = 498116',
206: 1:    '✅f(9906) = 8181036',
206: 1:    '✅f(2157) = 412549',
206: 1:    '❌f(586) = ??? != 256436'
206: 1:  ],
206: 1:  'level': 6,
206: 1:  'nextQuestion': '586',
206: 1:  'questions': [
206: 1:    '123',
206: 1:    '465',
206: 1:    '0',
206: 1:    '5813',
206: 1:    '7264',
206: 1:    '1369',
206: 1:    '7952',
206: 1:    '9425',
206: 1:    '4759',
206: 1:    '4777',
206: 1:    '2040',
206: 1:    '6176',
206: 1:    '1308',
206: 1:    '2784',
206: 1:    '1868',
206: 1:    '4289',
206: 1:    '8703',
206: 1:    '1690',
206: 1:    '2722',
206: 1:    '2332',
206: 1:    '5152',
206: 1:    '1399',
206: 1:    '794',
206: 1:    '9906',
206: 1:    '2157',
206: 1:    '586'
206: 1:  ]
206: 1:}
206: 1:Scores: 5079
206: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416', '1643664', '1646481', '644909', '136810', '44944', '4994', '251254', '198181', '498116', '8181036', '412549', '256436']')
206: 1:Fire Event: PassTest{complexity=10, testCount=28}
------------------------------------------
207: 1:BoardData {
207: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
207: 1:  'expectedAnswer': '4940',
207: 1:  'history': [
207: 1:    {
207: 1:      'answer': '149',
207: 1:      'question': '123',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '163625',
207: 1:      'question': '465',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '0',
207: 1:      'question': '0',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '256419',
207: 1:      'question': '5813',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '4943616',
207: 1:      'question': '7264',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '193681',
207: 1:      'question': '1369',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '4981254',
207: 1:      'question': '7952',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '8116425',
207: 1:      'question': '9425',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '16492581',
207: 1:      'question': '4759',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '16494949',
207: 1:      'question': '4777',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '40160',
207: 1:      'question': '2040',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '3614936',
207: 1:      'question': '6176',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '19064',
207: 1:      'question': '1308',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '4496416',
207: 1:      'question': '2784',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '1643664',
207: 1:      'question': '1868',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '1646481',
207: 1:      'question': '4289',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '644909',
207: 1:      'question': '8703',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '136810',
207: 1:      'question': '1690',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '44944',
207: 1:      'question': '2722',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '4994',
207: 1:      'question': '2332',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '251254',
207: 1:      'question': '5152',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '198181',
207: 1:      'question': '1399',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '498116',
207: 1:      'question': '794',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '8181036',
207: 1:      'question': '9906',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '412549',
207: 1:      'question': '2157',
207: 1:      'valid': true
207: 1:    },
207: 1:    {
207: 1:      'answer': '256436',
207: 1:      'question': '586',
207: 1:      'valid': true
207: 1:    }
207: 1:  ],
207: 1:  'info': [
207: 1:    '✅f(123) = 149',
207: 1:    '✅f(465) = 163625',
207: 1:    '✅f(0) = 0',
207: 1:    '✅f(5813) = 256419',
207: 1:    '✅f(7264) = 4943616',
207: 1:    '✅f(1369) = 193681',
207: 1:    '✅f(7952) = 4981254',
207: 1:    '✅f(9425) = 8116425',
207: 1:    '✅f(4759) = 16492581',
207: 1:    '✅f(4777) = 16494949',
207: 1:    '✅f(2040) = 40160',
207: 1:    '✅f(6176) = 3614936',
207: 1:    '✅f(1308) = 19064',
207: 1:    '✅f(2784) = 4496416',
207: 1:    '✅f(1868) = 1643664',
207: 1:    '✅f(4289) = 1646481',
207: 1:    '✅f(8703) = 644909',
207: 1:    '✅f(1690) = 136810',
207: 1:    '✅f(2722) = 44944',
207: 1:    '✅f(2332) = 4994',
207: 1:    '✅f(5152) = 251254',
207: 1:    '✅f(1399) = 198181',
207: 1:    '✅f(794) = 498116',
207: 1:    '✅f(9906) = 8181036',
207: 1:    '✅f(2157) = 412549',
207: 1:    '✅f(586) = 256436',
207: 1:    '❌f(720) = ??? != 4940'
207: 1:  ],
207: 1:  'level': 6,
207: 1:  'nextQuestion': '720',
207: 1:  'questions': [
207: 1:    '123',
207: 1:    '465',
207: 1:    '0',
207: 1:    '5813',
207: 1:    '7264',
207: 1:    '1369',
207: 1:    '7952',
207: 1:    '9425',
207: 1:    '4759',
207: 1:    '4777',
207: 1:    '2040',
207: 1:    '6176',
207: 1:    '1308',
207: 1:    '2784',
207: 1:    '1868',
207: 1:    '4289',
207: 1:    '8703',
207: 1:    '1690',
207: 1:    '2722',
207: 1:    '2332',
207: 1:    '5152',
207: 1:    '1399',
207: 1:    '794',
207: 1:    '9906',
207: 1:    '2157',
207: 1:    '586',
207: 1:    '720'
207: 1:  ]
207: 1:}
207: 1:Scores: 5082
207: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416', '1643664', '1646481', '644909', '136810', '44944', '4994', '251254', '198181', '498116', '8181036', '412549', '256436', '4940']')
207: 1:Fire Event: PassTest{complexity=10, testCount=28}
------------------------------------------
208: 1:BoardData {
208: 1:  'description': ['Hello there\nYou are asked to square every digit of a number and concatenate them.\nFor example, if we run 123 through the function, 149 will come out\n because 1^2 is 1 and 2^2 is 4, 3^3=9. (1-4-9)\nExample #2: An input of 465 will/should return 163625\nbecause 4^2 is 16, 6^2 is 36, and 5^2 is 25. (16-36-25)\n'],
208: 1:  'expectedAnswer': '6436436',
208: 1:  'history': [
208: 1:    {
208: 1:      'answer': '149',
208: 1:      'question': '123',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '163625',
208: 1:      'question': '465',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '0',
208: 1:      'question': '0',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '256419',
208: 1:      'question': '5813',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '4943616',
208: 1:      'question': '7264',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '193681',
208: 1:      'question': '1369',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '4981254',
208: 1:      'question': '7952',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '8116425',
208: 1:      'question': '9425',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '16492581',
208: 1:      'question': '4759',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '16494949',
208: 1:      'question': '4777',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '40160',
208: 1:      'question': '2040',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '3614936',
208: 1:      'question': '6176',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '19064',
208: 1:      'question': '1308',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '4496416',
208: 1:      'question': '2784',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '1643664',
208: 1:      'question': '1868',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '1646481',
208: 1:      'question': '4289',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '644909',
208: 1:      'question': '8703',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '136810',
208: 1:      'question': '1690',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '44944',
208: 1:      'question': '2722',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '4994',
208: 1:      'question': '2332',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '251254',
208: 1:      'question': '5152',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '198181',
208: 1:      'question': '1399',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '498116',
208: 1:      'question': '794',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '8181036',
208: 1:      'question': '9906',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '412549',
208: 1:      'question': '2157',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '256436',
208: 1:      'question': '586',
208: 1:      'valid': true
208: 1:    },
208: 1:    {
208: 1:      'answer': '4940',
208: 1:      'question': '720',
208: 1:      'valid': true
208: 1:    }
208: 1:  ],
208: 1:  'info': [
208: 1:    '✅f(123) = 149',
208: 1:    '✅f(465) = 163625',
208: 1:    '✅f(0) = 0',
208: 1:    '✅f(5813) = 256419',
208: 1:    '✅f(7264) = 4943616',
208: 1:    '✅f(1369) = 193681',
208: 1:    '✅f(7952) = 4981254',
208: 1:    '✅f(9425) = 8116425',
208: 1:    '✅f(4759) = 16492581',
208: 1:    '✅f(4777) = 16494949',
208: 1:    '✅f(2040) = 40160',
208: 1:    '✅f(6176) = 3614936',
208: 1:    '✅f(1308) = 19064',
208: 1:    '✅f(2784) = 4496416',
208: 1:    '✅f(1868) = 1643664',
208: 1:    '✅f(4289) = 1646481',
208: 1:    '✅f(8703) = 644909',
208: 1:    '✅f(1690) = 136810',
208: 1:    '✅f(2722) = 44944',
208: 1:    '✅f(2332) = 4994',
208: 1:    '✅f(5152) = 251254',
208: 1:    '✅f(1399) = 198181',
208: 1:    '✅f(794) = 498116',
208: 1:    '✅f(9906) = 8181036',
208: 1:    '✅f(2157) = 412549',
208: 1:    '✅f(586) = 256436',
208: 1:    '✅f(720) = 4940',
208: 1:    '❌f(8626) = ??? != 6436436'
208: 1:  ],
208: 1:  'level': 6,
208: 1:  'nextQuestion': '8626',
208: 1:  'questions': [
208: 1:    '123',
208: 1:    '465',
208: 1:    '0',
208: 1:    '5813',
208: 1:    '7264',
208: 1:    '1369',
208: 1:    '7952',
208: 1:    '9425',
208: 1:    '4759',
208: 1:    '4777',
208: 1:    '2040',
208: 1:    '6176',
208: 1:    '1308',
208: 1:    '2784',
208: 1:    '1868',
208: 1:    '4289',
208: 1:    '8703',
208: 1:    '1690',
208: 1:    '2722',
208: 1:    '2332',
208: 1:    '5152',
208: 1:    '1399',
208: 1:    '794',
208: 1:    '9906',
208: 1:    '2157',
208: 1:    '586',
208: 1:    '720',
208: 1:    '8626'
208: 1:  ]
208: 1:}
208: 1:Scores: 5085
208: 1:Answer: message('['149', '163625', '0', '256419', '4943616', '193681', '4981254', '8116425', '16492581', '16494949', '40160', '3614936', '19064', '4496416', '1643664', '1646481', '644909', '136810', '44944', '4994', '251254', '198181', '498116', '8181036', '412549', '256436', '4940', '6436436']')
208: 1:Fire Event: PassTest{complexity=10, testCount=28}
208: 1:Fire Event: NextAlgorithm{complexity=10, time=0}
------------------------------------------
209: 1:BoardData {
209: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
209: 1:  'history': [
209: 1:    {
209: 1:      'answer': '149',
209: 1:      'question': '123',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '163625',
209: 1:      'question': '465',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '0',
209: 1:      'question': '0',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '256419',
209: 1:      'question': '5813',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '4943616',
209: 1:      'question': '7264',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '193681',
209: 1:      'question': '1369',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '4981254',
209: 1:      'question': '7952',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '8116425',
209: 1:      'question': '9425',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '16492581',
209: 1:      'question': '4759',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '16494949',
209: 1:      'question': '4777',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '40160',
209: 1:      'question': '2040',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '3614936',
209: 1:      'question': '6176',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '19064',
209: 1:      'question': '1308',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '4496416',
209: 1:      'question': '2784',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '1643664',
209: 1:      'question': '1868',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '1646481',
209: 1:      'question': '4289',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '644909',
209: 1:      'question': '8703',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '136810',
209: 1:      'question': '1690',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '44944',
209: 1:      'question': '2722',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '4994',
209: 1:      'question': '2332',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '251254',
209: 1:      'question': '5152',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '198181',
209: 1:      'question': '1399',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '498116',
209: 1:      'question': '794',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '8181036',
209: 1:      'question': '9906',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '412549',
209: 1:      'question': '2157',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '256436',
209: 1:      'question': '586',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '4940',
209: 1:      'question': '720',
209: 1:      'valid': true
209: 1:    },
209: 1:    {
209: 1:      'answer': '6436436',
209: 1:      'question': '8626',
209: 1:      'valid': true
209: 1:    }
209: 1:  ],
209: 1:  'info': [
209: 1:    '✅f(123) = 149',
209: 1:    '✅f(465) = 163625',
209: 1:    '✅f(0) = 0',
209: 1:    '✅f(5813) = 256419',
209: 1:    '✅f(7264) = 4943616',
209: 1:    '✅f(1369) = 193681',
209: 1:    '✅f(7952) = 4981254',
209: 1:    '✅f(9425) = 8116425',
209: 1:    '✅f(4759) = 16492581',
209: 1:    '✅f(4777) = 16494949',
209: 1:    '✅f(2040) = 40160',
209: 1:    '✅f(6176) = 3614936',
209: 1:    '✅f(1308) = 19064',
209: 1:    '✅f(2784) = 4496416',
209: 1:    '✅f(1868) = 1643664',
209: 1:    '✅f(4289) = 1646481',
209: 1:    '✅f(8703) = 644909',
209: 1:    '✅f(1690) = 136810',
209: 1:    '✅f(2722) = 44944',
209: 1:    '✅f(2332) = 4994',
209: 1:    '✅f(5152) = 251254',
209: 1:    '✅f(1399) = 198181',
209: 1:    '✅f(794) = 498116',
209: 1:    '✅f(9906) = 8181036',
209: 1:    '✅f(2157) = 412549',
209: 1:    '✅f(586) = 256436',
209: 1:    '✅f(720) = 4940',
209: 1:    '✅f(8626) = 6436436'
209: 1:  ],
209: 1:  'level': 6,
209: 1:  'questions': []
209: 1:}
209: 1:Scores: 6437
209: 1:Answer: message('StartNextLevel')
209: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
210: 1:BoardData {
210: 1:  'description': ['The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.'],
210: 1:  'expectedAnswer': '0',
210: 1:  'history': [],
210: 1:  'info': ['❌f(1) = ??? != 0'],
210: 1:  'level': 7,
210: 1:  'nextQuestion': '1',
210: 1:  'questions': ['1']
210: 1:}
210: 1:Scores: 6437
210: 1:Answer: message('['0']')
210: 1:Fire Event: PassTest{complexity=11, testCount=25}
------------------------------------------
211: 1:BoardData {
211: 1:  'description': ['The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.'],
211: 1:  'expectedAnswer': '4',
211: 1:  'history': [{
211: 1:    'answer': '0',
211: 1:    'question': '1',
211: 1:    'valid': true
211: 1:  }],
211: 1:  'info': [
211: 1:    '✅f(1) = 0',
211: 1:    '❌f(2) = ??? != 4'
211: 1:  ],
211: 1:  'level': 7,
211: 1:  'nextQuestion': '2',
211: 1:  'questions': [
211: 1:    '1',
211: 1:    '2'
211: 1:  ]
211: 1:}
211: 1:Scores: 6441
211: 1:Answer: message('['0', '4']')
211: 1:Fire Event: PassTest{complexity=11, testCount=25}
------------------------------------------
212: 1:BoardData {
212: 1:  'description': ['The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.'],
212: 1:  'expectedAnswer': '22',
212: 1:  'history': [
212: 1:    {
212: 1:      'answer': '0',
212: 1:      'question': '1',
212: 1:      'valid': true
212: 1:    },
212: 1:    {
212: 1:      'answer': '4',
212: 1:      'question': '2',
212: 1:      'valid': true
212: 1:    }
212: 1:  ],
212: 1:  'info': [
212: 1:    '✅f(1) = 0',
212: 1:    '✅f(2) = 4',
212: 1:    '❌f(3) = ??? != 22'
212: 1:  ],
212: 1:  'level': 7,
212: 1:  'nextQuestion': '3',
212: 1:  'questions': [
212: 1:    '1',
212: 1:    '2',
212: 1:    '3'
212: 1:  ]
212: 1:}
212: 1:Scores: 6445
212: 1:Answer: message('['0', '4', '22']')
212: 1:Fire Event: PassTest{complexity=11, testCount=25}
------------------------------------------
213: 1:BoardData {
213: 1:  'description': ['The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.'],
213: 1:  'expectedAnswer': '70',
213: 1:  'history': [
213: 1:    {
213: 1:      'answer': '0',
213: 1:      'question': '1',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '4',
213: 1:      'question': '2',
213: 1:      'valid': true
213: 1:    },
213: 1:    {
213: 1:      'answer': '22',
213: 1:      'question': '3',
213: 1:      'valid': true
213: 1:    }
213: 1:  ],
213: 1:  'info': [
213: 1:    '✅f(1) = 0',
213: 1:    '✅f(2) = 4',
213: 1:    '✅f(3) = 22',
213: 1:    '❌f(4) = ??? != 70'
213: 1:  ],
213: 1:  'level': 7,
213: 1:  'nextQuestion': '4',
213: 1:  'questions': [
213: 1:    '1',
213: 1:    '2',
213: 1:    '3',
213: 1:    '4'
213: 1:  ]
213: 1:}
213: 1:Scores: 6449
213: 1:Answer: message('['0', '4', '22', '70']')
213: 1:Fire Event: PassTest{complexity=11, testCount=25}
------------------------------------------
214: 1:BoardData {
214: 1:  'description': ['The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.'],
214: 1:  'expectedAnswer': '170',
214: 1:  'history': [
214: 1:    {
214: 1:      'answer': '0',
214: 1:      'question': '1',
214: 1:      'valid': true
214: 1:    },
214: 1:    {
214: 1:      'answer': '4',
214: 1:      'question': '2',
214: 1:      'valid': true
214: 1:    },
214: 1:    {
214: 1:      'answer': '22',
214: 1:      'question': '3',
214: 1:      'valid': true
214: 1:    },
214: 1:    {
214: 1:      'answer': '70',
214: 1:      'question': '4',
214: 1:      'valid': true
214: 1:    }
214: 1:  ],
214: 1:  'info': [
214: 1:    '✅f(1) = 0',
214: 1:    '✅f(2) = 4',
214: 1:    '✅f(3) = 22',
214: 1:    '✅f(4) = 70',
214: 1:    '❌f(5) = ??? != 170'
214: 1:  ],
214: 1:  'level': 7,
214: 1:  'nextQuestion': '5',
214: 1:  'questions': [
214: 1:    '1',
214: 1:    '2',
214: 1:    '3',
214: 1:    '4',
214: 1:    '5'
214: 1:  ]
214: 1:}
214: 1:Scores: 6453
214: 1:Answer: message('['0', '4', '22', '70', '170']')
214: 1:Fire Event: PassTest{complexity=11, testCount=25}
------------------------------------------
215: 1:BoardData {
215: 1:  'description': ['The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.'],
215: 1:  'expectedAnswer': '350',
215: 1:  'history': [
215: 1:    {
215: 1:      'answer': '0',
215: 1:      'question': '1',
215: 1:      'valid': true
215: 1:    },
215: 1:    {
215: 1:      'answer': '4',
215: 1:      'question': '2',
215: 1:      'valid': true
215: 1:    },
215: 1:    {
215: 1:      'answer': '22',
215: 1:      'question': '3',
215: 1:      'valid': true
215: 1:    },
215: 1:    {
215: 1:      'answer': '70',
215: 1:      'question': '4',
215: 1:      'valid': true
215: 1:    },
215: 1:    {
215: 1:      'answer': '170',
215: 1:      'question': '5',
215: 1:      'valid': true
215: 1:    }
215: 1:  ],
215: 1:  'info': [
215: 1:    '✅f(1) = 0',
215: 1:    '✅f(2) = 4',
215: 1:    '✅f(3) = 22',
215: 1:    '✅f(4) = 70',
215: 1:    '✅f(5) = 170',
215: 1:    '❌f(6) = ??? != 350'
215: 1:  ],
215: 1:  'level': 7,
215: 1:  'nextQuestion': '6',
215: 1:  'questions': [
215: 1:    '1',
215: 1:    '2',
215: 1:    '3',
215: 1:    '4',
215: 1:    '5',
215: 1:    '6'
215: 1:  ]
215: 1:}
215: 1:Scores: 6457
215: 1:Answer: message('['0', '4', '22', '70', '170', '350']')
215: 1:Fire Event: PassTest{complexity=11, testCount=25}
------------------------------------------
216: 1:BoardData {
216: 1:  'description': ['The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.'],
216: 1:  'expectedAnswer': '644',
216: 1:  'history': [
216: 1:    {
216: 1:      'answer': '0',
216: 1:      'question': '1',
216: 1:      'valid': true
216: 1:    },
216: 1:    {
216: 1:      'answer': '4',
216: 1:      'question': '2',
216: 1:      'valid': true
216: 1:    },
216: 1:    {
216: 1:      'answer': '22',
216: 1:      'question': '3',
216: 1:      'valid': true
216: 1:    },
216: 1:    {
216: 1:      'answer': '70',
216: 1:      'question': '4',
216: 1:      'valid': true
216: 1:    },
216: 1:    {
216: 1:      'answer': '170',
216: 1:      'question': '5',
216: 1:      'valid': true
216: 1:    },
216: 1:    {
216: 1:      'answer': '350',
216: 1:      'question': '6',
216: 1:      'valid': true
216: 1:    }
216: 1:  ],
216: 1:  'info': [
216: 1:    '✅f(1) = 0',
216: 1:    '✅f(2) = 4',
216: 1:    '✅f(3) = 22',
216: 1:    '✅f(4) = 70',
216: 1:    '✅f(5) = 170',
216: 1:    '✅f(6) = 350',
216: 1:    '❌f(7) = ??? != 644'
216: 1:  ],
216: 1:  'level': 7,
216: 1:  'nextQuestion': '7',
216: 1:  'questions': [
216: 1:    '1',
216: 1:    '2',
216: 1:    '3',
216: 1:    '4',
216: 1:    '5',
216: 1:    '6',
216: 1:    '7'
216: 1:  ]
216: 1:}
216: 1:Scores: 6461
216: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644']')
216: 1:Fire Event: PassTest{complexity=11, testCount=25}
------------------------------------------
217: 1:BoardData {
217: 1:  'description': ['The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.'],
217: 1:  'expectedAnswer': '1092',
217: 1:  'history': [
217: 1:    {
217: 1:      'answer': '0',
217: 1:      'question': '1',
217: 1:      'valid': true
217: 1:    },
217: 1:    {
217: 1:      'answer': '4',
217: 1:      'question': '2',
217: 1:      'valid': true
217: 1:    },
217: 1:    {
217: 1:      'answer': '22',
217: 1:      'question': '3',
217: 1:      'valid': true
217: 1:    },
217: 1:    {
217: 1:      'answer': '70',
217: 1:      'question': '4',
217: 1:      'valid': true
217: 1:    },
217: 1:    {
217: 1:      'answer': '170',
217: 1:      'question': '5',
217: 1:      'valid': true
217: 1:    },
217: 1:    {
217: 1:      'answer': '350',
217: 1:      'question': '6',
217: 1:      'valid': true
217: 1:    },
217: 1:    {
217: 1:      'answer': '644',
217: 1:      'question': '7',
217: 1:      'valid': true
217: 1:    }
217: 1:  ],
217: 1:  'info': [
217: 1:    '✅f(1) = 0',
217: 1:    '✅f(2) = 4',
217: 1:    '✅f(3) = 22',
217: 1:    '✅f(4) = 70',
217: 1:    '✅f(5) = 170',
217: 1:    '✅f(6) = 350',
217: 1:    '✅f(7) = 644',
217: 1:    '❌f(8) = ??? != 1092'
217: 1:  ],
217: 1:  'level': 7,
217: 1:  'nextQuestion': '8',
217: 1:  'questions': [
217: 1:    '1',
217: 1:    '2',
217: 1:    '3',
217: 1:    '4',
217: 1:    '5',
217: 1:    '6',
217: 1:    '7',
217: 1:    '8'
217: 1:  ]
217: 1:}
217: 1:Scores: 6465
217: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092']')
217: 1:Fire Event: PassTest{complexity=11, testCount=25}
------------------------------------------
218: 1:BoardData {
218: 1:  'description': ['The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.'],
218: 1:  'expectedAnswer': '1740',
218: 1:  'history': [
218: 1:    {
218: 1:      'answer': '0',
218: 1:      'question': '1',
218: 1:      'valid': true
218: 1:    },
218: 1:    {
218: 1:      'answer': '4',
218: 1:      'question': '2',
218: 1:      'valid': true
218: 1:    },
218: 1:    {
218: 1:      'answer': '22',
218: 1:      'question': '3',
218: 1:      'valid': true
218: 1:    },
218: 1:    {
218: 1:      'answer': '70',
218: 1:      'question': '4',
218: 1:      'valid': true
218: 1:    },
218: 1:    {
218: 1:      'answer': '170',
218: 1:      'question': '5',
218: 1:      'valid': true
218: 1:    },
218: 1:    {
218: 1:      'answer': '350',
218: 1:      'question': '6',
218: 1:      'valid': true
218: 1:    },
218: 1:    {
218: 1:      'answer': '644',
218: 1:      'question': '7',
218: 1:      'valid': true
218: 1:    },
218: 1:    {
218: 1:      'answer': '1092',
218: 1:      'question': '8',
218: 1:      'valid': true
218: 1:    }
218: 1:  ],
218: 1:  'info': [
218: 1:    '✅f(1) = 0',
218: 1:    '✅f(2) = 4',
218: 1:    '✅f(3) = 22',
218: 1:    '✅f(4) = 70',
218: 1:    '✅f(5) = 170',
218: 1:    '✅f(6) = 350',
218: 1:    '✅f(7) = 644',
218: 1:    '✅f(8) = 1092',
218: 1:    '❌f(9) = ??? != 1740'
218: 1:  ],
218: 1:  'level': 7,
218: 1:  'nextQuestion': '9',
218: 1:  'questions': [
218: 1:    '1',
218: 1:    '2',
218: 1:    '3',
218: 1:    '4',
218: 1:    '5',
218: 1:    '6',
218: 1:    '7',
218: 1:    '8',
218: 1:    '9'
218: 1:  ]
218: 1:}
218: 1:Scores: 6469
218: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740']')
218: 1:Fire Event: PassTest{complexity=11, testCount=25}
------------------------------------------
219: 1:BoardData {
219: 1:  'description': ['The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.'],
219: 1:  'expectedAnswer': '2640',
219: 1:  'history': [
219: 1:    {
219: 1:      'answer': '0',
219: 1:      'question': '1',
219: 1:      'valid': true
219: 1:    },
219: 1:    {
219: 1:      'answer': '4',
219: 1:      'question': '2',
219: 1:      'valid': true
219: 1:    },
219: 1:    {
219: 1:      'answer': '22',
219: 1:      'question': '3',
219: 1:      'valid': true
219: 1:    },
219: 1:    {
219: 1:      'answer': '70',
219: 1:      'question': '4',
219: 1:      'valid': true
219: 1:    },
219: 1:    {
219: 1:      'answer': '170',
219: 1:      'question': '5',
219: 1:      'valid': true
219: 1:    },
219: 1:    {
219: 1:      'answer': '350',
219: 1:      'question': '6',
219: 1:      'valid': true
219: 1:    },
219: 1:    {
219: 1:      'answer': '644',
219: 1:      'question': '7',
219: 1:      'valid': true
219: 1:    },
219: 1:    {
219: 1:      'answer': '1092',
219: 1:      'question': '8',
219: 1:      'valid': true
219: 1:    },
219: 1:    {
219: 1:      'answer': '1740',
219: 1:      'question': '9',
219: 1:      'valid': true
219: 1:    }
219: 1:  ],
219: 1:  'info': [
219: 1:    '✅f(1) = 0',
219: 1:    '✅f(2) = 4',
219: 1:    '✅f(3) = 22',
219: 1:    '✅f(4) = 70',
219: 1:    '✅f(5) = 170',
219: 1:    '✅f(6) = 350',
219: 1:    '✅f(7) = 644',
219: 1:    '✅f(8) = 1092',
219: 1:    '✅f(9) = 1740',
219: 1:    '❌f(10) = ??? != 2640'
219: 1:  ],
219: 1:  'level': 7,
219: 1:  'nextQuestion': '10',
219: 1:  'questions': [
219: 1:    '1',
219: 1:    '2',
219: 1:    '3',
219: 1:    '4',
219: 1:    '5',
219: 1:    '6',
219: 1:    '7',
219: 1:    '8',
219: 1:    '9',
219: 1:    '10'
219: 1:  ]
219: 1:}
219: 1:Scores: 6473
219: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640']')
219: 1:Fire Event: PassTest{complexity=11, testCount=25}
------------------------------------------
220: 1:BoardData {
220: 1:  'description': ['The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.'],
220: 1:  'expectedAnswer': '3850',
220: 1:  'history': [
220: 1:    {
220: 1:      'answer': '0',
220: 1:      'question': '1',
220: 1:      'valid': true
220: 1:    },
220: 1:    {
220: 1:      'answer': '4',
220: 1:      'question': '2',
220: 1:      'valid': true
220: 1:    },
220: 1:    {
220: 1:      'answer': '22',
220: 1:      'question': '3',
220: 1:      'valid': true
220: 1:    },
220: 1:    {
220: 1:      'answer': '70',
220: 1:      'question': '4',
220: 1:      'valid': true
220: 1:    },
220: 1:    {
220: 1:      'answer': '170',
220: 1:      'question': '5',
220: 1:      'valid': true
220: 1:    },
220: 1:    {
220: 1:      'answer': '350',
220: 1:      'question': '6',
220: 1:      'valid': true
220: 1:    },
220: 1:    {
220: 1:      'answer': '644',
220: 1:      'question': '7',
220: 1:      'valid': true
220: 1:    },
220: 1:    {
220: 1:      'answer': '1092',
220: 1:      'question': '8',
220: 1:      'valid': true
220: 1:    },
220: 1:    {
220: 1:      'answer': '1740',
220: 1:      'question': '9',
220: 1:      'valid': true
220: 1:    },
220: 1:    {
220: 1:      'answer': '2640',
220: 1:      'question': '10',
220: 1:      'valid': true
220: 1:    }
220: 1:  ],
220: 1:  'info': [
220: 1:    '✅f(1) = 0',
220: 1:    '✅f(2) = 4',
220: 1:    '✅f(3) = 22',
220: 1:    '✅f(4) = 70',
220: 1:    '✅f(5) = 170',
220: 1:    '✅f(6) = 350',
220: 1:    '✅f(7) = 644',
220: 1:    '✅f(8) = 1092',
220: 1:    '✅f(9) = 1740',
220: 1:    '✅f(10) = 2640',
220: 1:    '❌f(11) = ??? != 3850'
220: 1:  ],
220: 1:  'level': 7,
220: 1:  'nextQuestion': '11',
220: 1:  'questions': [
220: 1:    '1',
220: 1:    '2',
220: 1:    '3',
220: 1:    '4',
220: 1:    '5',
220: 1:    '6',
220: 1:    '7',
220: 1:    '8',
220: 1:    '9',
220: 1:    '10',
220: 1:    '11'
220: 1:  ]
220: 1:}
220: 1:Scores: 6477
220: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850']')
220: 1:Fire Event: PassTest{complexity=11, testCount=25}
------------------------------------------
221: 1:BoardData {
221: 1:  'description': ['The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.'],
221: 1:  'expectedAnswer': '5434',
221: 1:  'history': [
221: 1:    {
221: 1:      'answer': '0',
221: 1:      'question': '1',
221: 1:      'valid': true
221: 1:    },
221: 1:    {
221: 1:      'answer': '4',
221: 1:      'question': '2',
221: 1:      'valid': true
221: 1:    },
221: 1:    {
221: 1:      'answer': '22',
221: 1:      'question': '3',
221: 1:      'valid': true
221: 1:    },
221: 1:    {
221: 1:      'answer': '70',
221: 1:      'question': '4',
221: 1:      'valid': true
221: 1:    },
221: 1:    {
221: 1:      'answer': '170',
221: 1:      'question': '5',
221: 1:      'valid': true
221: 1:    },
221: 1:    {
221: 1:      'answer': '350',
221: 1:      'question': '6',
221: 1:      'valid': true
221: 1:    },
221: 1:    {
221: 1:      'answer': '644',
221: 1:      'question': '7',
221: 1:      'valid': true
221: 1:    },
221: 1:    {
221: 1:      'answer': '1092',
221: 1:      'question': '8',
221: 1:      'valid': true
221: 1:    },
221: 1:    {
221: 1:      'answer': '1740',
221: 1:      'question': '9',
221: 1:      'valid': true
221: 1:    },
221: 1:    {
221: 1:      'answer': '2640',
221: 1:      'question': '10',
221: 1:      'valid': true
221: 1:    },
221: 1:    {
221: 1:      'answer': '3850',
221: 1:      'question': '11',
221: 1:      'valid': true
221: 1:    }
221: 1:  ],
221: 1:  'info': [
221: 1:    '✅f(1) = 0',
221: 1:    '✅f(2) = 4',
221: 1:    '✅f(3) = 22',
221: 1:    '✅f(4) = 70',
221: 1:    '✅f(5) = 170',
221: 1:    '✅f(6) = 350',
221: 1:    '✅f(7) = 644',
221: 1:    '✅f(8) = 1092',
221: 1:    '✅f(9) = 1740',
221: 1:    '✅f(10) = 2640',
221: 1:    '✅f(11) = 3850',
221: 1:    '❌f(12) = ??? != 5434'
221: 1:  ],
221: 1:  'level': 7,
221: 1:  'nextQuestion': '12',
221: 1:  'questions': [
221: 1:    '1',
221: 1:    '2',
221: 1:    '3',
221: 1:    '4',
221: 1:    '5',
221: 1:    '6',
221: 1:    '7',
221: 1:    '8',
221: 1:    '9',
221: 1:    '10',
221: 1:    '11',
221: 1:    '12'
221: 1:  ]
221: 1:}
221: 1:Scores: 6481
221: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434']')
221: 1:Fire Event: PassTest{complexity=11, testCount=25}
------------------------------------------
222: 1:BoardData {
222: 1:  'description': ['The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.'],
222: 1:  'expectedAnswer': '7462',
222: 1:  'history': [
222: 1:    {
222: 1:      'answer': '0',
222: 1:      'question': '1',
222: 1:      'valid': true
222: 1:    },
222: 1:    {
222: 1:      'answer': '4',
222: 1:      'question': '2',
222: 1:      'valid': true
222: 1:    },
222: 1:    {
222: 1:      'answer': '22',
222: 1:      'question': '3',
222: 1:      'valid': true
222: 1:    },
222: 1:    {
222: 1:      'answer': '70',
222: 1:      'question': '4',
222: 1:      'valid': true
222: 1:    },
222: 1:    {
222: 1:      'answer': '170',
222: 1:      'question': '5',
222: 1:      'valid': true
222: 1:    },
222: 1:    {
222: 1:      'answer': '350',
222: 1:      'question': '6',
222: 1:      'valid': true
222: 1:    },
222: 1:    {
222: 1:      'answer': '644',
222: 1:      'question': '7',
222: 1:      'valid': true
222: 1:    },
222: 1:    {
222: 1:      'answer': '1092',
222: 1:      'question': '8',
222: 1:      'valid': true
222: 1:    },
222: 1:    {
222: 1:      'answer': '1740',
222: 1:      'question': '9',
222: 1:      'valid': true
222: 1:    },
222: 1:    {
222: 1:      'answer': '2640',
222: 1:      'question': '10',
222: 1:      'valid': true
222: 1:    },
222: 1:    {
222: 1:      'answer': '3850',
222: 1:      'question': '11',
222: 1:      'valid': true
222: 1:    },
222: 1:    {
222: 1:      'answer': '5434',
222: 1:      'question': '12',
222: 1:      'valid': true
222: 1:    }
222: 1:  ],
222: 1:  'info': [
222: 1:    '✅f(1) = 0',
222: 1:    '✅f(2) = 4',
222: 1:    '✅f(3) = 22',
222: 1:    '✅f(4) = 70',
222: 1:    '✅f(5) = 170',
222: 1:    '✅f(6) = 350',
222: 1:    '✅f(7) = 644',
222: 1:    '✅f(8) = 1092',
222: 1:    '✅f(9) = 1740',
222: 1:    '✅f(10) = 2640',
222: 1:    '✅f(11) = 3850',
222: 1:    '✅f(12) = 5434',
222: 1:    '❌f(13) = ??? != 7462'
222: 1:  ],
222: 1:  'level': 7,
222: 1:  'nextQuestion': '13',
222: 1:  'questions': [
222: 1:    '1',
222: 1:    '2',
222: 1:    '3',
222: 1:    '4',
222: 1:    '5',
222: 1:    '6',
222: 1:    '7',
222: 1:    '8',
222: 1:    '9',
222: 1:    '10',
222: 1:    '11',
222: 1:    '12',
222: 1:    '13'
222: 1:  ]
222: 1:}
222: 1:Scores: 6485
222: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462']')
222: 1:Fire Event: PassTest{complexity=11, testCount=25}
------------------------------------------
223: 1:BoardData {
223: 1:  'description': ['The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.'],
223: 1:  'expectedAnswer': '10010',
223: 1:  'history': [
223: 1:    {
223: 1:      'answer': '0',
223: 1:      'question': '1',
223: 1:      'valid': true
223: 1:    },
223: 1:    {
223: 1:      'answer': '4',
223: 1:      'question': '2',
223: 1:      'valid': true
223: 1:    },
223: 1:    {
223: 1:      'answer': '22',
223: 1:      'question': '3',
223: 1:      'valid': true
223: 1:    },
223: 1:    {
223: 1:      'answer': '70',
223: 1:      'question': '4',
223: 1:      'valid': true
223: 1:    },
223: 1:    {
223: 1:      'answer': '170',
223: 1:      'question': '5',
223: 1:      'valid': true
223: 1:    },
223: 1:    {
223: 1:      'answer': '350',
223: 1:      'question': '6',
223: 1:      'valid': true
223: 1:    },
223: 1:    {
223: 1:      'answer': '644',
223: 1:      'question': '7',
223: 1:      'valid': true
223: 1:    },
223: 1:    {
223: 1:      'answer': '1092',
223: 1:      'question': '8',
223: 1:      'valid': true
223: 1:    },
223: 1:    {
223: 1:      'answer': '1740',
223: 1:      'question': '9',
223: 1:      'valid': true
223: 1:    },
223: 1:    {
223: 1:      'answer': '2640',
223: 1:      'question': '10',
223: 1:      'valid': true
223: 1:    },
223: 1:    {
223: 1:      'answer': '3850',
223: 1:      'question': '11',
223: 1:      'valid': true
223: 1:    },
223: 1:    {
223: 1:      'answer': '5434',
223: 1:      'question': '12',
223: 1:      'valid': true
223: 1:    },
223: 1:    {
223: 1:      'answer': '7462',
223: 1:      'question': '13',
223: 1:      'valid': true
223: 1:    }
223: 1:  ],
223: 1:  'info': [
223: 1:    '✅f(1) = 0',
223: 1:    '✅f(2) = 4',
223: 1:    '✅f(3) = 22',
223: 1:    '✅f(4) = 70',
223: 1:    '✅f(5) = 170',
223: 1:    '✅f(6) = 350',
223: 1:    '✅f(7) = 644',
223: 1:    '✅f(8) = 1092',
223: 1:    '✅f(9) = 1740',
223: 1:    '✅f(10) = 2640',
223: 1:    '✅f(11) = 3850',
223: 1:    '✅f(12) = 5434',
223: 1:    '✅f(13) = 7462',
223: 1:    '❌f(14) = ??? != 10010'
223: 1:  ],
223: 1:  'level': 7,
223: 1:  'nextQuestion': '14',
223: 1:  'questions': [
223: 1:    '1',
223: 1:    '2',
223: 1:    '3',
223: 1:    '4',
223: 1:    '5',
223: 1:    '6',
223: 1:    '7',
223: 1:    '8',
223: 1:    '9',
223: 1:    '10',
223: 1:    '11',
223: 1:    '12',
223: 1:    '13',
223: 1:    '14'
223: 1:  ]
223: 1:}
223: 1:Scores: 6489
223: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010']')
223: 1:Fire Event: PassTest{complexity=11, testCount=25}
------------------------------------------
224: 1:BoardData {
224: 1:  'description': ['The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.'],
224: 1:  'expectedAnswer': '13160',
224: 1:  'history': [
224: 1:    {
224: 1:      'answer': '0',
224: 1:      'question': '1',
224: 1:      'valid': true
224: 1:    },
224: 1:    {
224: 1:      'answer': '4',
224: 1:      'question': '2',
224: 1:      'valid': true
224: 1:    },
224: 1:    {
224: 1:      'answer': '22',
224: 1:      'question': '3',
224: 1:      'valid': true
224: 1:    },
224: 1:    {
224: 1:      'answer': '70',
224: 1:      'question': '4',
224: 1:      'valid': true
224: 1:    },
224: 1:    {
224: 1:      'answer': '170',
224: 1:      'question': '5',
224: 1:      'valid': true
224: 1:    },
224: 1:    {
224: 1:      'answer': '350',
224: 1:      'question': '6',
224: 1:      'valid': true
224: 1:    },
224: 1:    {
224: 1:      'answer': '644',
224: 1:      'question': '7',
224: 1:      'valid': true
224: 1:    },
224: 1:    {
224: 1:      'answer': '1092',
224: 1:      'question': '8',
224: 1:      'valid': true
224: 1:    },
224: 1:    {
224: 1:      'answer': '1740',
224: 1:      'question': '9',
224: 1:      'valid': true
224: 1:    },
224: 1:    {
224: 1:      'answer': '2640',
224: 1:      'question': '10',
224: 1:      'valid': true
224: 1:    },
224: 1:    {
224: 1:      'answer': '3850',
224: 1:      'question': '11',
224: 1:      'valid': true
224: 1:    },
224: 1:    {
224: 1:      'answer': '5434',
224: 1:      'question': '12',
224: 1:      'valid': true
224: 1:    },
224: 1:    {
224: 1:      'answer': '7462',
224: 1:      'question': '13',
224: 1:      'valid': true
224: 1:    },
224: 1:    {
224: 1:      'answer': '10010',
224: 1:      'question': '14',
224: 1:      'valid': true
224: 1:    }
224: 1:  ],
224: 1:  'info': [
224: 1:    '✅f(1) = 0',
224: 1:    '✅f(2) = 4',
224: 1:    '✅f(3) = 22',
224: 1:    '✅f(4) = 70',
224: 1:    '✅f(5) = 170',
224: 1:    '✅f(6) = 350',
224: 1:    '✅f(7) = 644',
224: 1:    '✅f(8) = 1092',
224: 1:    '✅f(9) = 1740',
224: 1:    '✅f(10) = 2640',
224: 1:    '✅f(11) = 3850',
224: 1:    '✅f(12) = 5434',
224: 1:    '✅f(13) = 7462',
224: 1:    '✅f(14) = 10010',
224: 1:    '❌f(15) = ??? != 13160'
224: 1:  ],
224: 1:  'level': 7,
224: 1:  'nextQuestion': '15',
224: 1:  'questions': [
224: 1:    '1',
224: 1:    '2',
224: 1:    '3',
224: 1:    '4',
224: 1:    '5',
224: 1:    '6',
224: 1:    '7',
224: 1:    '8',
224: 1:    '9',
224: 1:    '10',
224: 1:    '11',
224: 1:    '12',
224: 1:    '13',
224: 1:    '14',
224: 1:    '15'
224: 1:  ]
224: 1:}
224: 1:Scores: 6493
224: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160']')
224: 1:Fire Event: PassTest{complexity=11, testCount=25}
------------------------------------------
225: 1:BoardData {
225: 1:  'description': ['The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.'],
225: 1:  'expectedAnswer': '17000',
225: 1:  'history': [
225: 1:    {
225: 1:      'answer': '0',
225: 1:      'question': '1',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '4',
225: 1:      'question': '2',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '22',
225: 1:      'question': '3',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '70',
225: 1:      'question': '4',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '170',
225: 1:      'question': '5',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '350',
225: 1:      'question': '6',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '644',
225: 1:      'question': '7',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '1092',
225: 1:      'question': '8',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '1740',
225: 1:      'question': '9',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '2640',
225: 1:      'question': '10',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '3850',
225: 1:      'question': '11',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '5434',
225: 1:      'question': '12',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '7462',
225: 1:      'question': '13',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '10010',
225: 1:      'question': '14',
225: 1:      'valid': true
225: 1:    },
225: 1:    {
225: 1:      'answer': '13160',
225: 1:      'question': '15',
225: 1:      'valid': true
225: 1:    }
225: 1:  ],
225: 1:  'info': [
225: 1:    '✅f(1) = 0',
225: 1:    '✅f(2) = 4',
225: 1:    '✅f(3) = 22',
225: 1:    '✅f(4) = 70',
225: 1:    '✅f(5) = 170',
225: 1:    '✅f(6) = 350',
225: 1:    '✅f(7) = 644',
225: 1:    '✅f(8) = 1092',
225: 1:    '✅f(9) = 1740',
225: 1:    '✅f(10) = 2640',
225: 1:    '✅f(11) = 3850',
225: 1:    '✅f(12) = 5434',
225: 1:    '✅f(13) = 7462',
225: 1:    '✅f(14) = 10010',
225: 1:    '✅f(15) = 13160',
225: 1:    '❌f(16) = ??? != 17000'
225: 1:  ],
225: 1:  'level': 7,
225: 1:  'nextQuestion': '16',
225: 1:  'questions': [
225: 1:    '1',
225: 1:    '2',
225: 1:    '3',
225: 1:    '4',
225: 1:    '5',
225: 1:    '6',
225: 1:    '7',
225: 1:    '8',
225: 1:    '9',
225: 1:    '10',
225: 1:    '11',
225: 1:    '12',
225: 1:    '13',
225: 1:    '14',
225: 1:    '15',
225: 1:    '16'
225: 1:  ]
225: 1:}
225: 1:Scores: 6497
225: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000']')
225: 1:Fire Event: PassTest{complexity=11, testCount=25}
------------------------------------------
226: 1:BoardData {
226: 1:  'description': ['The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.'],
226: 1:  'expectedAnswer': '21624',
226: 1:  'history': [
226: 1:    {
226: 1:      'answer': '0',
226: 1:      'question': '1',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '4',
226: 1:      'question': '2',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '22',
226: 1:      'question': '3',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '70',
226: 1:      'question': '4',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '170',
226: 1:      'question': '5',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '350',
226: 1:      'question': '6',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '644',
226: 1:      'question': '7',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '1092',
226: 1:      'question': '8',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '1740',
226: 1:      'question': '9',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '2640',
226: 1:      'question': '10',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '3850',
226: 1:      'question': '11',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '5434',
226: 1:      'question': '12',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '7462',
226: 1:      'question': '13',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '10010',
226: 1:      'question': '14',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '13160',
226: 1:      'question': '15',
226: 1:      'valid': true
226: 1:    },
226: 1:    {
226: 1:      'answer': '17000',
226: 1:      'question': '16',
226: 1:      'valid': true
226: 1:    }
226: 1:  ],
226: 1:  'info': [
226: 1:    '✅f(1) = 0',
226: 1:    '✅f(2) = 4',
226: 1:    '✅f(3) = 22',
226: 1:    '✅f(4) = 70',
226: 1:    '✅f(5) = 170',
226: 1:    '✅f(6) = 350',
226: 1:    '✅f(7) = 644',
226: 1:    '✅f(8) = 1092',
226: 1:    '✅f(9) = 1740',
226: 1:    '✅f(10) = 2640',
226: 1:    '✅f(11) = 3850',
226: 1:    '✅f(12) = 5434',
226: 1:    '✅f(13) = 7462',
226: 1:    '✅f(14) = 10010',
226: 1:    '✅f(15) = 13160',
226: 1:    '✅f(16) = 17000',
226: 1:    '❌f(17) = ??? != 21624'
226: 1:  ],
226: 1:  'level': 7,
226: 1:  'nextQuestion': '17',
226: 1:  'questions': [
226: 1:    '1',
226: 1:    '2',
226: 1:    '3',
226: 1:    '4',
226: 1:    '5',
226: 1:    '6',
226: 1:    '7',
226: 1:    '8',
226: 1:    '9',
226: 1:    '10',
226: 1:    '11',
226: 1:    '12',
226: 1:    '13',
226: 1:    '14',
226: 1:    '15',
226: 1:    '16',
226: 1:    '17'
226: 1:  ]
226: 1:}
226: 1:Scores: 6501
226: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000', '21624']')
226: 1:Fire Event: PassTest{complexity=11, testCount=25}
------------------------------------------
227: 1:BoardData {
227: 1:  'description': ['The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.'],
227: 1:  'expectedAnswer': '27132',
227: 1:  'history': [
227: 1:    {
227: 1:      'answer': '0',
227: 1:      'question': '1',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '4',
227: 1:      'question': '2',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '22',
227: 1:      'question': '3',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '70',
227: 1:      'question': '4',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '170',
227: 1:      'question': '5',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '350',
227: 1:      'question': '6',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '644',
227: 1:      'question': '7',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '1092',
227: 1:      'question': '8',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '1740',
227: 1:      'question': '9',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '2640',
227: 1:      'question': '10',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '3850',
227: 1:      'question': '11',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '5434',
227: 1:      'question': '12',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '7462',
227: 1:      'question': '13',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '10010',
227: 1:      'question': '14',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '13160',
227: 1:      'question': '15',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '17000',
227: 1:      'question': '16',
227: 1:      'valid': true
227: 1:    },
227: 1:    {
227: 1:      'answer': '21624',
227: 1:      'question': '17',
227: 1:      'valid': true
227: 1:    }
227: 1:  ],
227: 1:  'info': [
227: 1:    '✅f(1) = 0',
227: 1:    '✅f(2) = 4',
227: 1:    '✅f(3) = 22',
227: 1:    '✅f(4) = 70',
227: 1:    '✅f(5) = 170',
227: 1:    '✅f(6) = 350',
227: 1:    '✅f(7) = 644',
227: 1:    '✅f(8) = 1092',
227: 1:    '✅f(9) = 1740',
227: 1:    '✅f(10) = 2640',
227: 1:    '✅f(11) = 3850',
227: 1:    '✅f(12) = 5434',
227: 1:    '✅f(13) = 7462',
227: 1:    '✅f(14) = 10010',
227: 1:    '✅f(15) = 13160',
227: 1:    '✅f(16) = 17000',
227: 1:    '✅f(17) = 21624',
227: 1:    '❌f(18) = ??? != 27132'
227: 1:  ],
227: 1:  'level': 7,
227: 1:  'nextQuestion': '18',
227: 1:  'questions': [
227: 1:    '1',
227: 1:    '2',
227: 1:    '3',
227: 1:    '4',
227: 1:    '5',
227: 1:    '6',
227: 1:    '7',
227: 1:    '8',
227: 1:    '9',
227: 1:    '10',
227: 1:    '11',
227: 1:    '12',
227: 1:    '13',
227: 1:    '14',
227: 1:    '15',
227: 1:    '16',
227: 1:    '17',
227: 1:    '18'
227: 1:  ]
227: 1:}
227: 1:Scores: 6505
227: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000', '21624', '27132']')
227: 1:Fire Event: PassTest{complexity=11, testCount=25}
------------------------------------------
228: 1:BoardData {
228: 1:  'description': ['The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.'],
228: 1:  'expectedAnswer': '33630',
228: 1:  'history': [
228: 1:    {
228: 1:      'answer': '0',
228: 1:      'question': '1',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '4',
228: 1:      'question': '2',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '22',
228: 1:      'question': '3',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '70',
228: 1:      'question': '4',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '170',
228: 1:      'question': '5',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '350',
228: 1:      'question': '6',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '644',
228: 1:      'question': '7',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '1092',
228: 1:      'question': '8',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '1740',
228: 1:      'question': '9',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '2640',
228: 1:      'question': '10',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '3850',
228: 1:      'question': '11',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '5434',
228: 1:      'question': '12',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '7462',
228: 1:      'question': '13',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '10010',
228: 1:      'question': '14',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '13160',
228: 1:      'question': '15',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '17000',
228: 1:      'question': '16',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '21624',
228: 1:      'question': '17',
228: 1:      'valid': true
228: 1:    },
228: 1:    {
228: 1:      'answer': '27132',
228: 1:      'question': '18',
228: 1:      'valid': true
228: 1:    }
228: 1:  ],
228: 1:  'info': [
228: 1:    '✅f(1) = 0',
228: 1:    '✅f(2) = 4',
228: 1:    '✅f(3) = 22',
228: 1:    '✅f(4) = 70',
228: 1:    '✅f(5) = 170',
228: 1:    '✅f(6) = 350',
228: 1:    '✅f(7) = 644',
228: 1:    '✅f(8) = 1092',
228: 1:    '✅f(9) = 1740',
228: 1:    '✅f(10) = 2640',
228: 1:    '✅f(11) = 3850',
228: 1:    '✅f(12) = 5434',
228: 1:    '✅f(13) = 7462',
228: 1:    '✅f(14) = 10010',
228: 1:    '✅f(15) = 13160',
228: 1:    '✅f(16) = 17000',
228: 1:    '✅f(17) = 21624',
228: 1:    '✅f(18) = 27132',
228: 1:    '❌f(19) = ??? != 33630'
228: 1:  ],
228: 1:  'level': 7,
228: 1:  'nextQuestion': '19',
228: 1:  'questions': [
228: 1:    '1',
228: 1:    '2',
228: 1:    '3',
228: 1:    '4',
228: 1:    '5',
228: 1:    '6',
228: 1:    '7',
228: 1:    '8',
228: 1:    '9',
228: 1:    '10',
228: 1:    '11',
228: 1:    '12',
228: 1:    '13',
228: 1:    '14',
228: 1:    '15',
228: 1:    '16',
228: 1:    '17',
228: 1:    '18',
228: 1:    '19'
228: 1:  ]
228: 1:}
228: 1:Scores: 6509
228: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000', '21624', '27132', '33630']')
228: 1:Fire Event: PassTest{complexity=11, testCount=25}
------------------------------------------
229: 1:BoardData {
229: 1:  'description': ['The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.'],
229: 1:  'expectedAnswer': '41230',
229: 1:  'history': [
229: 1:    {
229: 1:      'answer': '0',
229: 1:      'question': '1',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '4',
229: 1:      'question': '2',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '22',
229: 1:      'question': '3',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '70',
229: 1:      'question': '4',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '170',
229: 1:      'question': '5',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '350',
229: 1:      'question': '6',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '644',
229: 1:      'question': '7',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '1092',
229: 1:      'question': '8',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '1740',
229: 1:      'question': '9',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '2640',
229: 1:      'question': '10',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '3850',
229: 1:      'question': '11',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '5434',
229: 1:      'question': '12',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '7462',
229: 1:      'question': '13',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '10010',
229: 1:      'question': '14',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '13160',
229: 1:      'question': '15',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '17000',
229: 1:      'question': '16',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '21624',
229: 1:      'question': '17',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '27132',
229: 1:      'question': '18',
229: 1:      'valid': true
229: 1:    },
229: 1:    {
229: 1:      'answer': '33630',
229: 1:      'question': '19',
229: 1:      'valid': true
229: 1:    }
229: 1:  ],
229: 1:  'info': [
229: 1:    '✅f(1) = 0',
229: 1:    '✅f(2) = 4',
229: 1:    '✅f(3) = 22',
229: 1:    '✅f(4) = 70',
229: 1:    '✅f(5) = 170',
229: 1:    '✅f(6) = 350',
229: 1:    '✅f(7) = 644',
229: 1:    '✅f(8) = 1092',
229: 1:    '✅f(9) = 1740',
229: 1:    '✅f(10) = 2640',
229: 1:    '✅f(11) = 3850',
229: 1:    '✅f(12) = 5434',
229: 1:    '✅f(13) = 7462',
229: 1:    '✅f(14) = 10010',
229: 1:    '✅f(15) = 13160',
229: 1:    '✅f(16) = 17000',
229: 1:    '✅f(17) = 21624',
229: 1:    '✅f(18) = 27132',
229: 1:    '✅f(19) = 33630',
229: 1:    '❌f(20) = ??? != 41230'
229: 1:  ],
229: 1:  'level': 7,
229: 1:  'nextQuestion': '20',
229: 1:  'questions': [
229: 1:    '1',
229: 1:    '2',
229: 1:    '3',
229: 1:    '4',
229: 1:    '5',
229: 1:    '6',
229: 1:    '7',
229: 1:    '8',
229: 1:    '9',
229: 1:    '10',
229: 1:    '11',
229: 1:    '12',
229: 1:    '13',
229: 1:    '14',
229: 1:    '15',
229: 1:    '16',
229: 1:    '17',
229: 1:    '18',
229: 1:    '19',
229: 1:    '20'
229: 1:  ]
229: 1:}
229: 1:Scores: 6513
229: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000', '21624', '27132', '33630', '41230']')
229: 1:Fire Event: PassTest{complexity=11, testCount=25}
------------------------------------------
230: 1:BoardData {
230: 1:  'description': ['The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.'],
230: 1:  'expectedAnswer': '50050',
230: 1:  'history': [
230: 1:    {
230: 1:      'answer': '0',
230: 1:      'question': '1',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '4',
230: 1:      'question': '2',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '22',
230: 1:      'question': '3',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '70',
230: 1:      'question': '4',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '170',
230: 1:      'question': '5',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '350',
230: 1:      'question': '6',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '644',
230: 1:      'question': '7',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '1092',
230: 1:      'question': '8',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '1740',
230: 1:      'question': '9',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '2640',
230: 1:      'question': '10',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '3850',
230: 1:      'question': '11',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '5434',
230: 1:      'question': '12',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '7462',
230: 1:      'question': '13',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '10010',
230: 1:      'question': '14',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '13160',
230: 1:      'question': '15',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '17000',
230: 1:      'question': '16',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '21624',
230: 1:      'question': '17',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '27132',
230: 1:      'question': '18',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '33630',
230: 1:      'question': '19',
230: 1:      'valid': true
230: 1:    },
230: 1:    {
230: 1:      'answer': '41230',
230: 1:      'question': '20',
230: 1:      'valid': true
230: 1:    }
230: 1:  ],
230: 1:  'info': [
230: 1:    '✅f(1) = 0',
230: 1:    '✅f(2) = 4',
230: 1:    '✅f(3) = 22',
230: 1:    '✅f(4) = 70',
230: 1:    '✅f(5) = 170',
230: 1:    '✅f(6) = 350',
230: 1:    '✅f(7) = 644',
230: 1:    '✅f(8) = 1092',
230: 1:    '✅f(9) = 1740',
230: 1:    '✅f(10) = 2640',
230: 1:    '✅f(11) = 3850',
230: 1:    '✅f(12) = 5434',
230: 1:    '✅f(13) = 7462',
230: 1:    '✅f(14) = 10010',
230: 1:    '✅f(15) = 13160',
230: 1:    '✅f(16) = 17000',
230: 1:    '✅f(17) = 21624',
230: 1:    '✅f(18) = 27132',
230: 1:    '✅f(19) = 33630',
230: 1:    '✅f(20) = 41230',
230: 1:    '❌f(21) = ??? != 50050'
230: 1:  ],
230: 1:  'level': 7,
230: 1:  'nextQuestion': '21',
230: 1:  'questions': [
230: 1:    '1',
230: 1:    '2',
230: 1:    '3',
230: 1:    '4',
230: 1:    '5',
230: 1:    '6',
230: 1:    '7',
230: 1:    '8',
230: 1:    '9',
230: 1:    '10',
230: 1:    '11',
230: 1:    '12',
230: 1:    '13',
230: 1:    '14',
230: 1:    '15',
230: 1:    '16',
230: 1:    '17',
230: 1:    '18',
230: 1:    '19',
230: 1:    '20',
230: 1:    '21'
230: 1:  ]
230: 1:}
230: 1:Scores: 6517
230: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000', '21624', '27132', '33630', '41230', '50050']')
230: 1:Fire Event: PassTest{complexity=11, testCount=25}
------------------------------------------
231: 1:BoardData {
231: 1:  'description': ['The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.'],
231: 1:  'expectedAnswer': '60214',
231: 1:  'history': [
231: 1:    {
231: 1:      'answer': '0',
231: 1:      'question': '1',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '4',
231: 1:      'question': '2',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '22',
231: 1:      'question': '3',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '70',
231: 1:      'question': '4',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '170',
231: 1:      'question': '5',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '350',
231: 1:      'question': '6',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '644',
231: 1:      'question': '7',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '1092',
231: 1:      'question': '8',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '1740',
231: 1:      'question': '9',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '2640',
231: 1:      'question': '10',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '3850',
231: 1:      'question': '11',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '5434',
231: 1:      'question': '12',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '7462',
231: 1:      'question': '13',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '10010',
231: 1:      'question': '14',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '13160',
231: 1:      'question': '15',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '17000',
231: 1:      'question': '16',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '21624',
231: 1:      'question': '17',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '27132',
231: 1:      'question': '18',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '33630',
231: 1:      'question': '19',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '41230',
231: 1:      'question': '20',
231: 1:      'valid': true
231: 1:    },
231: 1:    {
231: 1:      'answer': '50050',
231: 1:      'question': '21',
231: 1:      'valid': true
231: 1:    }
231: 1:  ],
231: 1:  'info': [
231: 1:    '✅f(1) = 0',
231: 1:    '✅f(2) = 4',
231: 1:    '✅f(3) = 22',
231: 1:    '✅f(4) = 70',
231: 1:    '✅f(5) = 170',
231: 1:    '✅f(6) = 350',
231: 1:    '✅f(7) = 644',
231: 1:    '✅f(8) = 1092',
231: 1:    '✅f(9) = 1740',
231: 1:    '✅f(10) = 2640',
231: 1:    '✅f(11) = 3850',
231: 1:    '✅f(12) = 5434',
231: 1:    '✅f(13) = 7462',
231: 1:    '✅f(14) = 10010',
231: 1:    '✅f(15) = 13160',
231: 1:    '✅f(16) = 17000',
231: 1:    '✅f(17) = 21624',
231: 1:    '✅f(18) = 27132',
231: 1:    '✅f(19) = 33630',
231: 1:    '✅f(20) = 41230',
231: 1:    '✅f(21) = 50050',
231: 1:    '❌f(22) = ??? != 60214'
231: 1:  ],
231: 1:  'level': 7,
231: 1:  'nextQuestion': '22',
231: 1:  'questions': [
231: 1:    '1',
231: 1:    '2',
231: 1:    '3',
231: 1:    '4',
231: 1:    '5',
231: 1:    '6',
231: 1:    '7',
231: 1:    '8',
231: 1:    '9',
231: 1:    '10',
231: 1:    '11',
231: 1:    '12',
231: 1:    '13',
231: 1:    '14',
231: 1:    '15',
231: 1:    '16',
231: 1:    '17',
231: 1:    '18',
231: 1:    '19',
231: 1:    '20',
231: 1:    '21',
231: 1:    '22'
231: 1:  ]
231: 1:}
231: 1:Scores: 6521
231: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000', '21624', '27132', '33630', '41230', '50050', '60214']')
231: 1:Fire Event: PassTest{complexity=11, testCount=25}
------------------------------------------
232: 1:BoardData {
232: 1:  'description': ['The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.'],
232: 1:  'expectedAnswer': '71852',
232: 1:  'history': [
232: 1:    {
232: 1:      'answer': '0',
232: 1:      'question': '1',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '4',
232: 1:      'question': '2',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '22',
232: 1:      'question': '3',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '70',
232: 1:      'question': '4',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '170',
232: 1:      'question': '5',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '350',
232: 1:      'question': '6',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '644',
232: 1:      'question': '7',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '1092',
232: 1:      'question': '8',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '1740',
232: 1:      'question': '9',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '2640',
232: 1:      'question': '10',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '3850',
232: 1:      'question': '11',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '5434',
232: 1:      'question': '12',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '7462',
232: 1:      'question': '13',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '10010',
232: 1:      'question': '14',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '13160',
232: 1:      'question': '15',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '17000',
232: 1:      'question': '16',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '21624',
232: 1:      'question': '17',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '27132',
232: 1:      'question': '18',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '33630',
232: 1:      'question': '19',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '41230',
232: 1:      'question': '20',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '50050',
232: 1:      'question': '21',
232: 1:      'valid': true
232: 1:    },
232: 1:    {
232: 1:      'answer': '60214',
232: 1:      'question': '22',
232: 1:      'valid': true
232: 1:    }
232: 1:  ],
232: 1:  'info': [
232: 1:    '✅f(1) = 0',
232: 1:    '✅f(2) = 4',
232: 1:    '✅f(3) = 22',
232: 1:    '✅f(4) = 70',
232: 1:    '✅f(5) = 170',
232: 1:    '✅f(6) = 350',
232: 1:    '✅f(7) = 644',
232: 1:    '✅f(8) = 1092',
232: 1:    '✅f(9) = 1740',
232: 1:    '✅f(10) = 2640',
232: 1:    '✅f(11) = 3850',
232: 1:    '✅f(12) = 5434',
232: 1:    '✅f(13) = 7462',
232: 1:    '✅f(14) = 10010',
232: 1:    '✅f(15) = 13160',
232: 1:    '✅f(16) = 17000',
232: 1:    '✅f(17) = 21624',
232: 1:    '✅f(18) = 27132',
232: 1:    '✅f(19) = 33630',
232: 1:    '✅f(20) = 41230',
232: 1:    '✅f(21) = 50050',
232: 1:    '✅f(22) = 60214',
232: 1:    '❌f(23) = ??? != 71852'
232: 1:  ],
232: 1:  'level': 7,
232: 1:  'nextQuestion': '23',
232: 1:  'questions': [
232: 1:    '1',
232: 1:    '2',
232: 1:    '3',
232: 1:    '4',
232: 1:    '5',
232: 1:    '6',
232: 1:    '7',
232: 1:    '8',
232: 1:    '9',
232: 1:    '10',
232: 1:    '11',
232: 1:    '12',
232: 1:    '13',
232: 1:    '14',
232: 1:    '15',
232: 1:    '16',
232: 1:    '17',
232: 1:    '18',
232: 1:    '19',
232: 1:    '20',
232: 1:    '21',
232: 1:    '22',
232: 1:    '23'
232: 1:  ]
232: 1:}
232: 1:Scores: 6525
232: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000', '21624', '27132', '33630', '41230', '50050', '60214', '71852']')
232: 1:Fire Event: PassTest{complexity=11, testCount=25}
------------------------------------------
233: 1:BoardData {
233: 1:  'description': ['The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.'],
233: 1:  'expectedAnswer': '85100',
233: 1:  'history': [
233: 1:    {
233: 1:      'answer': '0',
233: 1:      'question': '1',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '4',
233: 1:      'question': '2',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '22',
233: 1:      'question': '3',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '70',
233: 1:      'question': '4',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '170',
233: 1:      'question': '5',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '350',
233: 1:      'question': '6',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '644',
233: 1:      'question': '7',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '1092',
233: 1:      'question': '8',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '1740',
233: 1:      'question': '9',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '2640',
233: 1:      'question': '10',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '3850',
233: 1:      'question': '11',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '5434',
233: 1:      'question': '12',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '7462',
233: 1:      'question': '13',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '10010',
233: 1:      'question': '14',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '13160',
233: 1:      'question': '15',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '17000',
233: 1:      'question': '16',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '21624',
233: 1:      'question': '17',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '27132',
233: 1:      'question': '18',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '33630',
233: 1:      'question': '19',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '41230',
233: 1:      'question': '20',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '50050',
233: 1:      'question': '21',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '60214',
233: 1:      'question': '22',
233: 1:      'valid': true
233: 1:    },
233: 1:    {
233: 1:      'answer': '71852',
233: 1:      'question': '23',
233: 1:      'valid': true
233: 1:    }
233: 1:  ],
233: 1:  'info': [
233: 1:    '✅f(1) = 0',
233: 1:    '✅f(2) = 4',
233: 1:    '✅f(3) = 22',
233: 1:    '✅f(4) = 70',
233: 1:    '✅f(5) = 170',
233: 1:    '✅f(6) = 350',
233: 1:    '✅f(7) = 644',
233: 1:    '✅f(8) = 1092',
233: 1:    '✅f(9) = 1740',
233: 1:    '✅f(10) = 2640',
233: 1:    '✅f(11) = 3850',
233: 1:    '✅f(12) = 5434',
233: 1:    '✅f(13) = 7462',
233: 1:    '✅f(14) = 10010',
233: 1:    '✅f(15) = 13160',
233: 1:    '✅f(16) = 17000',
233: 1:    '✅f(17) = 21624',
233: 1:    '✅f(18) = 27132',
233: 1:    '✅f(19) = 33630',
233: 1:    '✅f(20) = 41230',
233: 1:    '✅f(21) = 50050',
233: 1:    '✅f(22) = 60214',
233: 1:    '✅f(23) = 71852',
233: 1:    '❌f(24) = ??? != 85100'
233: 1:  ],
233: 1:  'level': 7,
233: 1:  'nextQuestion': '24',
233: 1:  'questions': [
233: 1:    '1',
233: 1:    '2',
233: 1:    '3',
233: 1:    '4',
233: 1:    '5',
233: 1:    '6',
233: 1:    '7',
233: 1:    '8',
233: 1:    '9',
233: 1:    '10',
233: 1:    '11',
233: 1:    '12',
233: 1:    '13',
233: 1:    '14',
233: 1:    '15',
233: 1:    '16',
233: 1:    '17',
233: 1:    '18',
233: 1:    '19',
233: 1:    '20',
233: 1:    '21',
233: 1:    '22',
233: 1:    '23',
233: 1:    '24'
233: 1:  ]
233: 1:}
233: 1:Scores: 6529
233: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000', '21624', '27132', '33630', '41230', '50050', '60214', '71852', '85100']')
233: 1:Fire Event: PassTest{complexity=11, testCount=25}
------------------------------------------
234: 1:BoardData {
234: 1:  'description': ['The sum of the squares of the first ten positive integers \n1^2 + 2^2 + ... + 10^2 = 385. \nAnd the square of the sum is \n(1 + 2 + ... + 10)^2 = 55^2 = 3025. \nTherefore, the difference between the sum of the squares and the square of the sum of the first ten natural numbers is equal to 3025 - 385 = 2640. \nCreate a method that calculates the difference between the sum squares and the square of the sum for the natural number i.'],
234: 1:  'expectedAnswer': '100100',
234: 1:  'history': [
234: 1:    {
234: 1:      'answer': '0',
234: 1:      'question': '1',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '4',
234: 1:      'question': '2',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '22',
234: 1:      'question': '3',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '70',
234: 1:      'question': '4',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '170',
234: 1:      'question': '5',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '350',
234: 1:      'question': '6',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '644',
234: 1:      'question': '7',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '1092',
234: 1:      'question': '8',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '1740',
234: 1:      'question': '9',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '2640',
234: 1:      'question': '10',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '3850',
234: 1:      'question': '11',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '5434',
234: 1:      'question': '12',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '7462',
234: 1:      'question': '13',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '10010',
234: 1:      'question': '14',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '13160',
234: 1:      'question': '15',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '17000',
234: 1:      'question': '16',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '21624',
234: 1:      'question': '17',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '27132',
234: 1:      'question': '18',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '33630',
234: 1:      'question': '19',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '41230',
234: 1:      'question': '20',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '50050',
234: 1:      'question': '21',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '60214',
234: 1:      'question': '22',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '71852',
234: 1:      'question': '23',
234: 1:      'valid': true
234: 1:    },
234: 1:    {
234: 1:      'answer': '85100',
234: 1:      'question': '24',
234: 1:      'valid': true
234: 1:    }
234: 1:  ],
234: 1:  'info': [
234: 1:    '✅f(1) = 0',
234: 1:    '✅f(2) = 4',
234: 1:    '✅f(3) = 22',
234: 1:    '✅f(4) = 70',
234: 1:    '✅f(5) = 170',
234: 1:    '✅f(6) = 350',
234: 1:    '✅f(7) = 644',
234: 1:    '✅f(8) = 1092',
234: 1:    '✅f(9) = 1740',
234: 1:    '✅f(10) = 2640',
234: 1:    '✅f(11) = 3850',
234: 1:    '✅f(12) = 5434',
234: 1:    '✅f(13) = 7462',
234: 1:    '✅f(14) = 10010',
234: 1:    '✅f(15) = 13160',
234: 1:    '✅f(16) = 17000',
234: 1:    '✅f(17) = 21624',
234: 1:    '✅f(18) = 27132',
234: 1:    '✅f(19) = 33630',
234: 1:    '✅f(20) = 41230',
234: 1:    '✅f(21) = 50050',
234: 1:    '✅f(22) = 60214',
234: 1:    '✅f(23) = 71852',
234: 1:    '✅f(24) = 85100',
234: 1:    '❌f(25) = ??? != 100100'
234: 1:  ],
234: 1:  'level': 7,
234: 1:  'nextQuestion': '25',
234: 1:  'questions': [
234: 1:    '1',
234: 1:    '2',
234: 1:    '3',
234: 1:    '4',
234: 1:    '5',
234: 1:    '6',
234: 1:    '7',
234: 1:    '8',
234: 1:    '9',
234: 1:    '10',
234: 1:    '11',
234: 1:    '12',
234: 1:    '13',
234: 1:    '14',
234: 1:    '15',
234: 1:    '16',
234: 1:    '17',
234: 1:    '18',
234: 1:    '19',
234: 1:    '20',
234: 1:    '21',
234: 1:    '22',
234: 1:    '23',
234: 1:    '24',
234: 1:    '25'
234: 1:  ]
234: 1:}
234: 1:Scores: 6533
234: 1:Answer: message('['0', '4', '22', '70', '170', '350', '644', '1092', '1740', '2640', '3850', '5434', '7462', '10010', '13160', '17000', '21624', '27132', '33630', '41230', '50050', '60214', '71852', '85100', '100100']')
234: 1:Fire Event: PassTest{complexity=11, testCount=25}
234: 1:Fire Event: NextAlgorithm{complexity=11, time=0}
------------------------------------------
235: 1:BoardData {
235: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
235: 1:  'history': [
235: 1:    {
235: 1:      'answer': '0',
235: 1:      'question': '1',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '4',
235: 1:      'question': '2',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '22',
235: 1:      'question': '3',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '70',
235: 1:      'question': '4',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '170',
235: 1:      'question': '5',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '350',
235: 1:      'question': '6',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '644',
235: 1:      'question': '7',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '1092',
235: 1:      'question': '8',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '1740',
235: 1:      'question': '9',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '2640',
235: 1:      'question': '10',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '3850',
235: 1:      'question': '11',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '5434',
235: 1:      'question': '12',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '7462',
235: 1:      'question': '13',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '10010',
235: 1:      'question': '14',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '13160',
235: 1:      'question': '15',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '17000',
235: 1:      'question': '16',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '21624',
235: 1:      'question': '17',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '27132',
235: 1:      'question': '18',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '33630',
235: 1:      'question': '19',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '41230',
235: 1:      'question': '20',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '50050',
235: 1:      'question': '21',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '60214',
235: 1:      'question': '22',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '71852',
235: 1:      'question': '23',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '85100',
235: 1:      'question': '24',
235: 1:      'valid': true
235: 1:    },
235: 1:    {
235: 1:      'answer': '100100',
235: 1:      'question': '25',
235: 1:      'valid': true
235: 1:    }
235: 1:  ],
235: 1:  'info': [
235: 1:    '✅f(1) = 0',
235: 1:    '✅f(2) = 4',
235: 1:    '✅f(3) = 22',
235: 1:    '✅f(4) = 70',
235: 1:    '✅f(5) = 170',
235: 1:    '✅f(6) = 350',
235: 1:    '✅f(7) = 644',
235: 1:    '✅f(8) = 1092',
235: 1:    '✅f(9) = 1740',
235: 1:    '✅f(10) = 2640',
235: 1:    '✅f(11) = 3850',
235: 1:    '✅f(12) = 5434',
235: 1:    '✅f(13) = 7462',
235: 1:    '✅f(14) = 10010',
235: 1:    '✅f(15) = 13160',
235: 1:    '✅f(16) = 17000',
235: 1:    '✅f(17) = 21624',
235: 1:    '✅f(18) = 27132',
235: 1:    '✅f(19) = 33630',
235: 1:    '✅f(20) = 41230',
235: 1:    '✅f(21) = 50050',
235: 1:    '✅f(22) = 60214',
235: 1:    '✅f(23) = 71852',
235: 1:    '✅f(24) = 85100',
235: 1:    '✅f(25) = 100100'
235: 1:  ],
235: 1:  'level': 7,
235: 1:  'questions': []
235: 1:}
235: 1:Scores: 8021
235: 1:Answer: message('StartNextLevel')
235: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
236: 1:BoardData {
236: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
236: 1:  'expectedAnswer': '5 1',
236: 1:  'history': [],
236: 1:  'info': ['❌f(1 2 3 4 5) = ??? != 5 1'],
236: 1:  'level': 8,
236: 1:  'nextQuestion': '1 2 3 4 5',
236: 1:  'questions': ['1 2 3 4 5']
236: 1:}
236: 1:Scores: 8021
236: 1:Answer: message('['5 1']')
236: 1:Fire Event: PassTest{complexity=12, testCount=23}
------------------------------------------
237: 1:BoardData {
237: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
237: 1:  'expectedAnswer': '5 -3',
237: 1:  'history': [{
237: 1:    'answer': '5 1',
237: 1:    'question': '1 2 3 4 5',
237: 1:    'valid': true
237: 1:  }],
237: 1:  'info': [
237: 1:    '✅f(1 2 3 4 5) = 5 1',
237: 1:    '❌f(1 2 -3 4 5) = ??? != 5 -3'
237: 1:  ],
237: 1:  'level': 8,
237: 1:  'nextQuestion': '1 2 -3 4 5',
237: 1:  'questions': [
237: 1:    '1 2 3 4 5',
237: 1:    '1 2 -3 4 5'
237: 1:  ]
237: 1:}
237: 1:Scores: 8026
237: 1:Answer: message('['5 1', '5 -3']')
237: 1:Fire Event: PassTest{complexity=12, testCount=23}
------------------------------------------
238: 1:BoardData {
238: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
238: 1:  'expectedAnswer': '9 -5',
238: 1:  'history': [
238: 1:    {
238: 1:      'answer': '5 1',
238: 1:      'question': '1 2 3 4 5',
238: 1:      'valid': true
238: 1:    },
238: 1:    {
238: 1:      'answer': '5 -3',
238: 1:      'question': '1 2 -3 4 5',
238: 1:      'valid': true
238: 1:    }
238: 1:  ],
238: 1:  'info': [
238: 1:    '✅f(1 2 3 4 5) = 5 1',
238: 1:    '✅f(1 2 -3 4 5) = 5 -3',
238: 1:    '❌f(1 9 3 4 -5) = ??? != 9 -5'
238: 1:  ],
238: 1:  'level': 8,
238: 1:  'nextQuestion': '1 9 3 4 -5',
238: 1:  'questions': [
238: 1:    '1 2 3 4 5',
238: 1:    '1 2 -3 4 5',
238: 1:    '1 9 3 4 -5'
238: 1:  ]
238: 1:}
238: 1:Scores: 8031
238: 1:Answer: message('['5 1', '5 -3', '9 -5']')
238: 1:Fire Event: PassTest{complexity=12, testCount=23}
------------------------------------------
239: 1:BoardData {
239: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
239: 1:  'expectedAnswer': '42 -9',
239: 1:  'history': [
239: 1:    {
239: 1:      'answer': '5 1',
239: 1:      'question': '1 2 3 4 5',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '5 -3',
239: 1:      'question': '1 2 -3 4 5',
239: 1:      'valid': true
239: 1:    },
239: 1:    {
239: 1:      'answer': '9 -5',
239: 1:      'question': '1 9 3 4 -5',
239: 1:      'valid': true
239: 1:    }
239: 1:  ],
239: 1:  'info': [
239: 1:    '✅f(1 2 3 4 5) = 5 1',
239: 1:    '✅f(1 2 -3 4 5) = 5 -3',
239: 1:    '✅f(1 9 3 4 -5) = 9 -5',
239: 1:    '❌f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = ??? != 42 -9'
239: 1:  ],
239: 1:  'level': 8,
239: 1:  'nextQuestion': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
239: 1:  'questions': [
239: 1:    '1 2 3 4 5',
239: 1:    '1 2 -3 4 5',
239: 1:    '1 9 3 4 -5',
239: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4'
239: 1:  ]
239: 1:}
239: 1:Scores: 8036
239: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9']')
239: 1:Fire Event: PassTest{complexity=12, testCount=23}
------------------------------------------
240: 1:BoardData {
240: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
240: 1:  'expectedAnswer': '3 1',
240: 1:  'history': [
240: 1:    {
240: 1:      'answer': '5 1',
240: 1:      'question': '1 2 3 4 5',
240: 1:      'valid': true
240: 1:    },
240: 1:    {
240: 1:      'answer': '5 -3',
240: 1:      'question': '1 2 -3 4 5',
240: 1:      'valid': true
240: 1:    },
240: 1:    {
240: 1:      'answer': '9 -5',
240: 1:      'question': '1 9 3 4 -5',
240: 1:      'valid': true
240: 1:    },
240: 1:    {
240: 1:      'answer': '42 -9',
240: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
240: 1:      'valid': true
240: 1:    }
240: 1:  ],
240: 1:  'info': [
240: 1:    '✅f(1 2 3 4 5) = 5 1',
240: 1:    '✅f(1 2 -3 4 5) = 5 -3',
240: 1:    '✅f(1 9 3 4 -5) = 9 -5',
240: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
240: 1:    '❌f(1 2 3) = ??? != 3 1'
240: 1:  ],
240: 1:  'level': 8,
240: 1:  'nextQuestion': '1 2 3',
240: 1:  'questions': [
240: 1:    '1 2 3 4 5',
240: 1:    '1 2 -3 4 5',
240: 1:    '1 9 3 4 -5',
240: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
240: 1:    '1 2 3'
240: 1:  ]
240: 1:}
240: 1:Scores: 8041
240: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1']')
240: 1:Fire Event: PassTest{complexity=12, testCount=23}
------------------------------------------
241: 1:BoardData {
241: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
241: 1:  'expectedAnswer': '1 1',
241: 1:  'history': [
241: 1:    {
241: 1:      'answer': '5 1',
241: 1:      'question': '1 2 3 4 5',
241: 1:      'valid': true
241: 1:    },
241: 1:    {
241: 1:      'answer': '5 -3',
241: 1:      'question': '1 2 -3 4 5',
241: 1:      'valid': true
241: 1:    },
241: 1:    {
241: 1:      'answer': '9 -5',
241: 1:      'question': '1 9 3 4 -5',
241: 1:      'valid': true
241: 1:    },
241: 1:    {
241: 1:      'answer': '42 -9',
241: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
241: 1:      'valid': true
241: 1:    },
241: 1:    {
241: 1:      'answer': '3 1',
241: 1:      'question': '1 2 3',
241: 1:      'valid': true
241: 1:    }
241: 1:  ],
241: 1:  'info': [
241: 1:    '✅f(1 2 3 4 5) = 5 1',
241: 1:    '✅f(1 2 -3 4 5) = 5 -3',
241: 1:    '✅f(1 9 3 4 -5) = 9 -5',
241: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
241: 1:    '✅f(1 2 3) = 3 1',
241: 1:    '❌f(1) = ??? != 1 1'
241: 1:  ],
241: 1:  'level': 8,
241: 1:  'nextQuestion': '1',
241: 1:  'questions': [
241: 1:    '1 2 3 4 5',
241: 1:    '1 2 -3 4 5',
241: 1:    '1 9 3 4 -5',
241: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
241: 1:    '1 2 3',
241: 1:    '1'
241: 1:  ]
241: 1:}
241: 1:Scores: 8046
241: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1']')
241: 1:Fire Event: PassTest{complexity=12, testCount=23}
------------------------------------------
242: 1:BoardData {
242: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
242: 1:  'expectedAnswer': '-1 -1',
242: 1:  'history': [
242: 1:    {
242: 1:      'answer': '5 1',
242: 1:      'question': '1 2 3 4 5',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': '5 -3',
242: 1:      'question': '1 2 -3 4 5',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': '9 -5',
242: 1:      'question': '1 9 3 4 -5',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': '42 -9',
242: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': '3 1',
242: 1:      'question': '1 2 3',
242: 1:      'valid': true
242: 1:    },
242: 1:    {
242: 1:      'answer': '1 1',
242: 1:      'question': '1',
242: 1:      'valid': true
242: 1:    }
242: 1:  ],
242: 1:  'info': [
242: 1:    '✅f(1 2 3 4 5) = 5 1',
242: 1:    '✅f(1 2 -3 4 5) = 5 -3',
242: 1:    '✅f(1 9 3 4 -5) = 9 -5',
242: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
242: 1:    '✅f(1 2 3) = 3 1',
242: 1:    '✅f(1) = 1 1',
242: 1:    '❌f(-1) = ??? != -1 -1'
242: 1:  ],
242: 1:  'level': 8,
242: 1:  'nextQuestion': '-1',
242: 1:  'questions': [
242: 1:    '1 2 3 4 5',
242: 1:    '1 2 -3 4 5',
242: 1:    '1 9 3 4 -5',
242: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
242: 1:    '1 2 3',
242: 1:    '1',
242: 1:    '-1'
242: 1:  ]
242: 1:}
242: 1:Scores: 8051
242: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1']')
242: 1:Fire Event: PassTest{complexity=12, testCount=23}
------------------------------------------
243: 1:BoardData {
243: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
243: 1:  'expectedAnswer': '0 -1',
243: 1:  'history': [
243: 1:    {
243: 1:      'answer': '5 1',
243: 1:      'question': '1 2 3 4 5',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '5 -3',
243: 1:      'question': '1 2 -3 4 5',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '9 -5',
243: 1:      'question': '1 9 3 4 -5',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '42 -9',
243: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '3 1',
243: 1:      'question': '1 2 3',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '1 1',
243: 1:      'question': '1',
243: 1:      'valid': true
243: 1:    },
243: 1:    {
243: 1:      'answer': '-1 -1',
243: 1:      'question': '-1',
243: 1:      'valid': true
243: 1:    }
243: 1:  ],
243: 1:  'info': [
243: 1:    '✅f(1 2 3 4 5) = 5 1',
243: 1:    '✅f(1 2 -3 4 5) = 5 -3',
243: 1:    '✅f(1 9 3 4 -5) = 9 -5',
243: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
243: 1:    '✅f(1 2 3) = 3 1',
243: 1:    '✅f(1) = 1 1',
243: 1:    '✅f(-1) = -1 -1',
243: 1:    '❌f(-1 -1 0) = ??? != 0 -1'
243: 1:  ],
243: 1:  'level': 8,
243: 1:  'nextQuestion': '-1 -1 0',
243: 1:  'questions': [
243: 1:    '1 2 3 4 5',
243: 1:    '1 2 -3 4 5',
243: 1:    '1 9 3 4 -5',
243: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
243: 1:    '1 2 3',
243: 1:    '1',
243: 1:    '-1',
243: 1:    '-1 -1 0'
243: 1:  ]
243: 1:}
243: 1:Scores: 8056
243: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1']')
243: 1:Fire Event: PassTest{complexity=12, testCount=23}
------------------------------------------
244: 1:BoardData {
244: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
244: 1:  'expectedAnswer': '1 0',
244: 1:  'history': [
244: 1:    {
244: 1:      'answer': '5 1',
244: 1:      'question': '1 2 3 4 5',
244: 1:      'valid': true
244: 1:    },
244: 1:    {
244: 1:      'answer': '5 -3',
244: 1:      'question': '1 2 -3 4 5',
244: 1:      'valid': true
244: 1:    },
244: 1:    {
244: 1:      'answer': '9 -5',
244: 1:      'question': '1 9 3 4 -5',
244: 1:      'valid': true
244: 1:    },
244: 1:    {
244: 1:      'answer': '42 -9',
244: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
244: 1:      'valid': true
244: 1:    },
244: 1:    {
244: 1:      'answer': '3 1',
244: 1:      'question': '1 2 3',
244: 1:      'valid': true
244: 1:    },
244: 1:    {
244: 1:      'answer': '1 1',
244: 1:      'question': '1',
244: 1:      'valid': true
244: 1:    },
244: 1:    {
244: 1:      'answer': '-1 -1',
244: 1:      'question': '-1',
244: 1:      'valid': true
244: 1:    },
244: 1:    {
244: 1:      'answer': '0 -1',
244: 1:      'question': '-1 -1 0',
244: 1:      'valid': true
244: 1:    }
244: 1:  ],
244: 1:  'info': [
244: 1:    '✅f(1 2 3 4 5) = 5 1',
244: 1:    '✅f(1 2 -3 4 5) = 5 -3',
244: 1:    '✅f(1 9 3 4 -5) = 9 -5',
244: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
244: 1:    '✅f(1 2 3) = 3 1',
244: 1:    '✅f(1) = 1 1',
244: 1:    '✅f(-1) = -1 -1',
244: 1:    '✅f(-1 -1 0) = 0 -1',
244: 1:    '❌f(1 1 0) = ??? != 1 0'
244: 1:  ],
244: 1:  'level': 8,
244: 1:  'nextQuestion': '1 1 0',
244: 1:  'questions': [
244: 1:    '1 2 3 4 5',
244: 1:    '1 2 -3 4 5',
244: 1:    '1 9 3 4 -5',
244: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
244: 1:    '1 2 3',
244: 1:    '1',
244: 1:    '-1',
244: 1:    '-1 -1 0',
244: 1:    '1 1 0'
244: 1:  ]
244: 1:}
244: 1:Scores: 8061
244: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0']')
244: 1:Fire Event: PassTest{complexity=12, testCount=23}
------------------------------------------
245: 1:BoardData {
245: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
245: 1:  'expectedAnswer': '-1 -1',
245: 1:  'history': [
245: 1:    {
245: 1:      'answer': '5 1',
245: 1:      'question': '1 2 3 4 5',
245: 1:      'valid': true
245: 1:    },
245: 1:    {
245: 1:      'answer': '5 -3',
245: 1:      'question': '1 2 -3 4 5',
245: 1:      'valid': true
245: 1:    },
245: 1:    {
245: 1:      'answer': '9 -5',
245: 1:      'question': '1 9 3 4 -5',
245: 1:      'valid': true
245: 1:    },
245: 1:    {
245: 1:      'answer': '42 -9',
245: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
245: 1:      'valid': true
245: 1:    },
245: 1:    {
245: 1:      'answer': '3 1',
245: 1:      'question': '1 2 3',
245: 1:      'valid': true
245: 1:    },
245: 1:    {
245: 1:      'answer': '1 1',
245: 1:      'question': '1',
245: 1:      'valid': true
245: 1:    },
245: 1:    {
245: 1:      'answer': '-1 -1',
245: 1:      'question': '-1',
245: 1:      'valid': true
245: 1:    },
245: 1:    {
245: 1:      'answer': '0 -1',
245: 1:      'question': '-1 -1 0',
245: 1:      'valid': true
245: 1:    },
245: 1:    {
245: 1:      'answer': '1 0',
245: 1:      'question': '1 1 0',
245: 1:      'valid': true
245: 1:    }
245: 1:  ],
245: 1:  'info': [
245: 1:    '✅f(1 2 3 4 5) = 5 1',
245: 1:    '✅f(1 2 -3 4 5) = 5 -3',
245: 1:    '✅f(1 9 3 4 -5) = 9 -5',
245: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
245: 1:    '✅f(1 2 3) = 3 1',
245: 1:    '✅f(1) = 1 1',
245: 1:    '✅f(-1) = -1 -1',
245: 1:    '✅f(-1 -1 0) = 0 -1',
245: 1:    '✅f(1 1 0) = 1 0',
245: 1:    '❌f(-1 -1) = ??? != -1 -1'
245: 1:  ],
245: 1:  'level': 8,
245: 1:  'nextQuestion': '-1 -1',
245: 1:  'questions': [
245: 1:    '1 2 3 4 5',
245: 1:    '1 2 -3 4 5',
245: 1:    '1 9 3 4 -5',
245: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
245: 1:    '1 2 3',
245: 1:    '1',
245: 1:    '-1',
245: 1:    '-1 -1 0',
245: 1:    '1 1 0',
245: 1:    '-1 -1'
245: 1:  ]
245: 1:}
245: 1:Scores: 8066
245: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0', '-1 -1']')
245: 1:Fire Event: PassTest{complexity=12, testCount=23}
------------------------------------------
246: 1:BoardData {
246: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
246: 1:  'expectedAnswer': '1 -1',
246: 1:  'history': [
246: 1:    {
246: 1:      'answer': '5 1',
246: 1:      'question': '1 2 3 4 5',
246: 1:      'valid': true
246: 1:    },
246: 1:    {
246: 1:      'answer': '5 -3',
246: 1:      'question': '1 2 -3 4 5',
246: 1:      'valid': true
246: 1:    },
246: 1:    {
246: 1:      'answer': '9 -5',
246: 1:      'question': '1 9 3 4 -5',
246: 1:      'valid': true
246: 1:    },
246: 1:    {
246: 1:      'answer': '42 -9',
246: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
246: 1:      'valid': true
246: 1:    },
246: 1:    {
246: 1:      'answer': '3 1',
246: 1:      'question': '1 2 3',
246: 1:      'valid': true
246: 1:    },
246: 1:    {
246: 1:      'answer': '1 1',
246: 1:      'question': '1',
246: 1:      'valid': true
246: 1:    },
246: 1:    {
246: 1:      'answer': '-1 -1',
246: 1:      'question': '-1',
246: 1:      'valid': true
246: 1:    },
246: 1:    {
246: 1:      'answer': '0 -1',
246: 1:      'question': '-1 -1 0',
246: 1:      'valid': true
246: 1:    },
246: 1:    {
246: 1:      'answer': '1 0',
246: 1:      'question': '1 1 0',
246: 1:      'valid': true
246: 1:    },
246: 1:    {
246: 1:      'answer': '-1 -1',
246: 1:      'question': '-1 -1',
246: 1:      'valid': true
246: 1:    }
246: 1:  ],
246: 1:  'info': [
246: 1:    '✅f(1 2 3 4 5) = 5 1',
246: 1:    '✅f(1 2 -3 4 5) = 5 -3',
246: 1:    '✅f(1 9 3 4 -5) = 9 -5',
246: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
246: 1:    '✅f(1 2 3) = 3 1',
246: 1:    '✅f(1) = 1 1',
246: 1:    '✅f(-1) = -1 -1',
246: 1:    '✅f(-1 -1 0) = 0 -1',
246: 1:    '✅f(1 1 0) = 1 0',
246: 1:    '✅f(-1 -1) = -1 -1',
246: 1:    '❌f(1 -1 0) = ??? != 1 -1'
246: 1:  ],
246: 1:  'level': 8,
246: 1:  'nextQuestion': '1 -1 0',
246: 1:  'questions': [
246: 1:    '1 2 3 4 5',
246: 1:    '1 2 -3 4 5',
246: 1:    '1 9 3 4 -5',
246: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
246: 1:    '1 2 3',
246: 1:    '1',
246: 1:    '-1',
246: 1:    '-1 -1 0',
246: 1:    '1 1 0',
246: 1:    '-1 -1',
246: 1:    '1 -1 0'
246: 1:  ]
246: 1:}
246: 1:Scores: 8071
246: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0', '-1 -1', '1 -1']')
246: 1:Fire Event: PassTest{complexity=12, testCount=23}
------------------------------------------
247: 1:BoardData {
247: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
247: 1:  'expectedAnswer': '10 -20',
247: 1:  'history': [
247: 1:    {
247: 1:      'answer': '5 1',
247: 1:      'question': '1 2 3 4 5',
247: 1:      'valid': true
247: 1:    },
247: 1:    {
247: 1:      'answer': '5 -3',
247: 1:      'question': '1 2 -3 4 5',
247: 1:      'valid': true
247: 1:    },
247: 1:    {
247: 1:      'answer': '9 -5',
247: 1:      'question': '1 9 3 4 -5',
247: 1:      'valid': true
247: 1:    },
247: 1:    {
247: 1:      'answer': '42 -9',
247: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
247: 1:      'valid': true
247: 1:    },
247: 1:    {
247: 1:      'answer': '3 1',
247: 1:      'question': '1 2 3',
247: 1:      'valid': true
247: 1:    },
247: 1:    {
247: 1:      'answer': '1 1',
247: 1:      'question': '1',
247: 1:      'valid': true
247: 1:    },
247: 1:    {
247: 1:      'answer': '-1 -1',
247: 1:      'question': '-1',
247: 1:      'valid': true
247: 1:    },
247: 1:    {
247: 1:      'answer': '0 -1',
247: 1:      'question': '-1 -1 0',
247: 1:      'valid': true
247: 1:    },
247: 1:    {
247: 1:      'answer': '1 0',
247: 1:      'question': '1 1 0',
247: 1:      'valid': true
247: 1:    },
247: 1:    {
247: 1:      'answer': '-1 -1',
247: 1:      'question': '-1 -1',
247: 1:      'valid': true
247: 1:    },
247: 1:    {
247: 1:      'answer': '1 -1',
247: 1:      'question': '1 -1 0',
247: 1:      'valid': true
247: 1:    }
247: 1:  ],
247: 1:  'info': [
247: 1:    '✅f(1 2 3 4 5) = 5 1',
247: 1:    '✅f(1 2 -3 4 5) = 5 -3',
247: 1:    '✅f(1 9 3 4 -5) = 9 -5',
247: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
247: 1:    '✅f(1 2 3) = 3 1',
247: 1:    '✅f(1) = 1 1',
247: 1:    '✅f(-1) = -1 -1',
247: 1:    '✅f(-1 -1 0) = 0 -1',
247: 1:    '✅f(1 1 0) = 1 0',
247: 1:    '✅f(-1 -1) = -1 -1',
247: 1:    '✅f(1 -1 0) = 1 -1',
247: 1:    '❌f(10 2 -1 -20) = ??? != 10 -20'
247: 1:  ],
247: 1:  'level': 8,
247: 1:  'nextQuestion': '10 2 -1 -20',
247: 1:  'questions': [
247: 1:    '1 2 3 4 5',
247: 1:    '1 2 -3 4 5',
247: 1:    '1 9 3 4 -5',
247: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
247: 1:    '1 2 3',
247: 1:    '1',
247: 1:    '-1',
247: 1:    '-1 -1 0',
247: 1:    '1 1 0',
247: 1:    '-1 -1',
247: 1:    '1 -1 0',
247: 1:    '10 2 -1 -20'
247: 1:  ]
247: 1:}
247: 1:Scores: 8076
247: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0', '-1 -1', '1 -1', '10 -20']')
247: 1:Fire Event: PassTest{complexity=12, testCount=23}
------------------------------------------
248: 1:BoardData {
248: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
248: 1:  'expectedAnswer': '805 -739',
248: 1:  'history': [
248: 1:    {
248: 1:      'answer': '5 1',
248: 1:      'question': '1 2 3 4 5',
248: 1:      'valid': true
248: 1:    },
248: 1:    {
248: 1:      'answer': '5 -3',
248: 1:      'question': '1 2 -3 4 5',
248: 1:      'valid': true
248: 1:    },
248: 1:    {
248: 1:      'answer': '9 -5',
248: 1:      'question': '1 9 3 4 -5',
248: 1:      'valid': true
248: 1:    },
248: 1:    {
248: 1:      'answer': '42 -9',
248: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
248: 1:      'valid': true
248: 1:    },
248: 1:    {
248: 1:      'answer': '3 1',
248: 1:      'question': '1 2 3',
248: 1:      'valid': true
248: 1:    },
248: 1:    {
248: 1:      'answer': '1 1',
248: 1:      'question': '1',
248: 1:      'valid': true
248: 1:    },
248: 1:    {
248: 1:      'answer': '-1 -1',
248: 1:      'question': '-1',
248: 1:      'valid': true
248: 1:    },
248: 1:    {
248: 1:      'answer': '0 -1',
248: 1:      'question': '-1 -1 0',
248: 1:      'valid': true
248: 1:    },
248: 1:    {
248: 1:      'answer': '1 0',
248: 1:      'question': '1 1 0',
248: 1:      'valid': true
248: 1:    },
248: 1:    {
248: 1:      'answer': '-1 -1',
248: 1:      'question': '-1 -1',
248: 1:      'valid': true
248: 1:    },
248: 1:    {
248: 1:      'answer': '1 -1',
248: 1:      'question': '1 -1 0',
248: 1:      'valid': true
248: 1:    },
248: 1:    {
248: 1:      'answer': '10 -20',
248: 1:      'question': '10 2 -1 -20',
248: 1:      'valid': true
248: 1:    }
248: 1:  ],
248: 1:  'info': [
248: 1:    '✅f(1 2 3 4 5) = 5 1',
248: 1:    '✅f(1 2 -3 4 5) = 5 -3',
248: 1:    '✅f(1 9 3 4 -5) = 9 -5',
248: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
248: 1:    '✅f(1 2 3) = 3 1',
248: 1:    '✅f(1) = 1 1',
248: 1:    '✅f(-1) = -1 -1',
248: 1:    '✅f(-1 -1 0) = 0 -1',
248: 1:    '✅f(1 1 0) = 1 0',
248: 1:    '✅f(-1 -1) = -1 -1',
248: 1:    '✅f(1 -1 0) = 1 -1',
248: 1:    '✅f(10 2 -1 -20) = 10 -20',
248: 1:    '❌f(452 561 -686 679 476 -515 805 -739 571 791) = ??? != 805 -739'
248: 1:  ],
248: 1:  'level': 8,
248: 1:  'nextQuestion': '452 561 -686 679 476 -515 805 -739 571 791',
248: 1:  'questions': [
248: 1:    '1 2 3 4 5',
248: 1:    '1 2 -3 4 5',
248: 1:    '1 9 3 4 -5',
248: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
248: 1:    '1 2 3',
248: 1:    '1',
248: 1:    '-1',
248: 1:    '-1 -1 0',
248: 1:    '1 1 0',
248: 1:    '-1 -1',
248: 1:    '1 -1 0',
248: 1:    '10 2 -1 -20',
248: 1:    '452 561 -686 679 476 -515 805 -739 571 791'
248: 1:  ]
248: 1:}
248: 1:Scores: 8081
248: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0', '-1 -1', '1 -1', '10 -20', '805 -739']')
248: 1:Fire Event: PassTest{complexity=12, testCount=23}
------------------------------------------
249: 1:BoardData {
249: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
249: 1:  'expectedAnswer': '728 -983',
249: 1:  'history': [
249: 1:    {
249: 1:      'answer': '5 1',
249: 1:      'question': '1 2 3 4 5',
249: 1:      'valid': true
249: 1:    },
249: 1:    {
249: 1:      'answer': '5 -3',
249: 1:      'question': '1 2 -3 4 5',
249: 1:      'valid': true
249: 1:    },
249: 1:    {
249: 1:      'answer': '9 -5',
249: 1:      'question': '1 9 3 4 -5',
249: 1:      'valid': true
249: 1:    },
249: 1:    {
249: 1:      'answer': '42 -9',
249: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
249: 1:      'valid': true
249: 1:    },
249: 1:    {
249: 1:      'answer': '3 1',
249: 1:      'question': '1 2 3',
249: 1:      'valid': true
249: 1:    },
249: 1:    {
249: 1:      'answer': '1 1',
249: 1:      'question': '1',
249: 1:      'valid': true
249: 1:    },
249: 1:    {
249: 1:      'answer': '-1 -1',
249: 1:      'question': '-1',
249: 1:      'valid': true
249: 1:    },
249: 1:    {
249: 1:      'answer': '0 -1',
249: 1:      'question': '-1 -1 0',
249: 1:      'valid': true
249: 1:    },
249: 1:    {
249: 1:      'answer': '1 0',
249: 1:      'question': '1 1 0',
249: 1:      'valid': true
249: 1:    },
249: 1:    {
249: 1:      'answer': '-1 -1',
249: 1:      'question': '-1 -1',
249: 1:      'valid': true
249: 1:    },
249: 1:    {
249: 1:      'answer': '1 -1',
249: 1:      'question': '1 -1 0',
249: 1:      'valid': true
249: 1:    },
249: 1:    {
249: 1:      'answer': '10 -20',
249: 1:      'question': '10 2 -1 -20',
249: 1:      'valid': true
249: 1:    },
249: 1:    {
249: 1:      'answer': '805 -739',
249: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
249: 1:      'valid': true
249: 1:    }
249: 1:  ],
249: 1:  'info': [
249: 1:    '✅f(1 2 3 4 5) = 5 1',
249: 1:    '✅f(1 2 -3 4 5) = 5 -3',
249: 1:    '✅f(1 9 3 4 -5) = 9 -5',
249: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
249: 1:    '✅f(1 2 3) = 3 1',
249: 1:    '✅f(1) = 1 1',
249: 1:    '✅f(-1) = -1 -1',
249: 1:    '✅f(-1 -1 0) = 0 -1',
249: 1:    '✅f(1 1 0) = 1 0',
249: 1:    '✅f(-1 -1) = -1 -1',
249: 1:    '✅f(1 -1 0) = 1 -1',
249: 1:    '✅f(10 2 -1 -20) = 10 -20',
249: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = 805 -739',
249: 1:    '❌f(-983 -111 -332 -973 47 728) = ??? != 728 -983'
249: 1:  ],
249: 1:  'level': 8,
249: 1:  'nextQuestion': '-983 -111 -332 -973 47 728',
249: 1:  'questions': [
249: 1:    '1 2 3 4 5',
249: 1:    '1 2 -3 4 5',
249: 1:    '1 9 3 4 -5',
249: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
249: 1:    '1 2 3',
249: 1:    '1',
249: 1:    '-1',
249: 1:    '-1 -1 0',
249: 1:    '1 1 0',
249: 1:    '-1 -1',
249: 1:    '1 -1 0',
249: 1:    '10 2 -1 -20',
249: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
249: 1:    '-983 -111 -332 -973 47 728'
249: 1:  ]
249: 1:}
249: 1:Scores: 8086
249: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0', '-1 -1', '1 -1', '10 -20', '805 -739', '728 -983']')
249: 1:Fire Event: PassTest{complexity=12, testCount=23}
------------------------------------------
250: 1:BoardData {
250: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
250: 1:  'expectedAnswer': '268 -779',
250: 1:  'history': [
250: 1:    {
250: 1:      'answer': '5 1',
250: 1:      'question': '1 2 3 4 5',
250: 1:      'valid': true
250: 1:    },
250: 1:    {
250: 1:      'answer': '5 -3',
250: 1:      'question': '1 2 -3 4 5',
250: 1:      'valid': true
250: 1:    },
250: 1:    {
250: 1:      'answer': '9 -5',
250: 1:      'question': '1 9 3 4 -5',
250: 1:      'valid': true
250: 1:    },
250: 1:    {
250: 1:      'answer': '42 -9',
250: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
250: 1:      'valid': true
250: 1:    },
250: 1:    {
250: 1:      'answer': '3 1',
250: 1:      'question': '1 2 3',
250: 1:      'valid': true
250: 1:    },
250: 1:    {
250: 1:      'answer': '1 1',
250: 1:      'question': '1',
250: 1:      'valid': true
250: 1:    },
250: 1:    {
250: 1:      'answer': '-1 -1',
250: 1:      'question': '-1',
250: 1:      'valid': true
250: 1:    },
250: 1:    {
250: 1:      'answer': '0 -1',
250: 1:      'question': '-1 -1 0',
250: 1:      'valid': true
250: 1:    },
250: 1:    {
250: 1:      'answer': '1 0',
250: 1:      'question': '1 1 0',
250: 1:      'valid': true
250: 1:    },
250: 1:    {
250: 1:      'answer': '-1 -1',
250: 1:      'question': '-1 -1',
250: 1:      'valid': true
250: 1:    },
250: 1:    {
250: 1:      'answer': '1 -1',
250: 1:      'question': '1 -1 0',
250: 1:      'valid': true
250: 1:    },
250: 1:    {
250: 1:      'answer': '10 -20',
250: 1:      'question': '10 2 -1 -20',
250: 1:      'valid': true
250: 1:    },
250: 1:    {
250: 1:      'answer': '805 -739',
250: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
250: 1:      'valid': true
250: 1:    },
250: 1:    {
250: 1:      'answer': '728 -983',
250: 1:      'question': '-983 -111 -332 -973 47 728',
250: 1:      'valid': true
250: 1:    }
250: 1:  ],
250: 1:  'info': [
250: 1:    '✅f(1 2 3 4 5) = 5 1',
250: 1:    '✅f(1 2 -3 4 5) = 5 -3',
250: 1:    '✅f(1 9 3 4 -5) = 9 -5',
250: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
250: 1:    '✅f(1 2 3) = 3 1',
250: 1:    '✅f(1) = 1 1',
250: 1:    '✅f(-1) = -1 -1',
250: 1:    '✅f(-1 -1 0) = 0 -1',
250: 1:    '✅f(1 1 0) = 1 0',
250: 1:    '✅f(-1 -1) = -1 -1',
250: 1:    '✅f(1 -1 0) = 1 -1',
250: 1:    '✅f(10 2 -1 -20) = 10 -20',
250: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = 805 -739',
250: 1:    '✅f(-983 -111 -332 -973 47 728) = 728 -983',
250: 1:    '❌f(268 -359 -513 -9 -86 -142 -779) = ??? != 268 -779'
250: 1:  ],
250: 1:  'level': 8,
250: 1:  'nextQuestion': '268 -359 -513 -9 -86 -142 -779',
250: 1:  'questions': [
250: 1:    '1 2 3 4 5',
250: 1:    '1 2 -3 4 5',
250: 1:    '1 9 3 4 -5',
250: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
250: 1:    '1 2 3',
250: 1:    '1',
250: 1:    '-1',
250: 1:    '-1 -1 0',
250: 1:    '1 1 0',
250: 1:    '-1 -1',
250: 1:    '1 -1 0',
250: 1:    '10 2 -1 -20',
250: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
250: 1:    '-983 -111 -332 -973 47 728',
250: 1:    '268 -359 -513 -9 -86 -142 -779'
250: 1:  ]
250: 1:}
250: 1:Scores: 8091
250: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0', '-1 -1', '1 -1', '10 -20', '805 -739', '728 -983', '268 -779']')
250: 1:Fire Event: PassTest{complexity=12, testCount=23}
------------------------------------------
251: 1:BoardData {
251: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
251: 1:  'expectedAnswer': '888 -937',
251: 1:  'history': [
251: 1:    {
251: 1:      'answer': '5 1',
251: 1:      'question': '1 2 3 4 5',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': '5 -3',
251: 1:      'question': '1 2 -3 4 5',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': '9 -5',
251: 1:      'question': '1 9 3 4 -5',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': '42 -9',
251: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': '3 1',
251: 1:      'question': '1 2 3',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': '1 1',
251: 1:      'question': '1',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': '-1 -1',
251: 1:      'question': '-1',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': '0 -1',
251: 1:      'question': '-1 -1 0',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': '1 0',
251: 1:      'question': '1 1 0',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': '-1 -1',
251: 1:      'question': '-1 -1',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': '1 -1',
251: 1:      'question': '1 -1 0',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': '10 -20',
251: 1:      'question': '10 2 -1 -20',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': '805 -739',
251: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': '728 -983',
251: 1:      'question': '-983 -111 -332 -973 47 728',
251: 1:      'valid': true
251: 1:    },
251: 1:    {
251: 1:      'answer': '268 -779',
251: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
251: 1:      'valid': true
251: 1:    }
251: 1:  ],
251: 1:  'info': [
251: 1:    '✅f(1 2 3 4 5) = 5 1',
251: 1:    '✅f(1 2 -3 4 5) = 5 -3',
251: 1:    '✅f(1 9 3 4 -5) = 9 -5',
251: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
251: 1:    '✅f(1 2 3) = 3 1',
251: 1:    '✅f(1) = 1 1',
251: 1:    '✅f(-1) = -1 -1',
251: 1:    '✅f(-1 -1 0) = 0 -1',
251: 1:    '✅f(1 1 0) = 1 0',
251: 1:    '✅f(-1 -1) = -1 -1',
251: 1:    '✅f(1 -1 0) = 1 -1',
251: 1:    '✅f(10 2 -1 -20) = 10 -20',
251: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = 805 -739',
251: 1:    '✅f(-983 -111 -332 -973 47 728) = 728 -983',
251: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = 268 -779',
251: 1:    '❌f(556 32 866 -730 -367 -937 367 888 43 -510 773) = ??? != 888 -937'
251: 1:  ],
251: 1:  'level': 8,
251: 1:  'nextQuestion': '556 32 866 -730 -367 -937 367 888 43 -510 773',
251: 1:  'questions': [
251: 1:    '1 2 3 4 5',
251: 1:    '1 2 -3 4 5',
251: 1:    '1 9 3 4 -5',
251: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
251: 1:    '1 2 3',
251: 1:    '1',
251: 1:    '-1',
251: 1:    '-1 -1 0',
251: 1:    '1 1 0',
251: 1:    '-1 -1',
251: 1:    '1 -1 0',
251: 1:    '10 2 -1 -20',
251: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
251: 1:    '-983 -111 -332 -973 47 728',
251: 1:    '268 -359 -513 -9 -86 -142 -779',
251: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773'
251: 1:  ]
251: 1:}
251: 1:Scores: 8096
251: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0', '-1 -1', '1 -1', '10 -20', '805 -739', '728 -983', '268 -779', '888 -937']')
251: 1:Fire Event: PassTest{complexity=12, testCount=23}
------------------------------------------
252: 1:BoardData {
252: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
252: 1:  'expectedAnswer': '949 -594',
252: 1:  'history': [
252: 1:    {
252: 1:      'answer': '5 1',
252: 1:      'question': '1 2 3 4 5',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': '5 -3',
252: 1:      'question': '1 2 -3 4 5',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': '9 -5',
252: 1:      'question': '1 9 3 4 -5',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': '42 -9',
252: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': '3 1',
252: 1:      'question': '1 2 3',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': '1 1',
252: 1:      'question': '1',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': '-1 -1',
252: 1:      'question': '-1',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': '0 -1',
252: 1:      'question': '-1 -1 0',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': '1 0',
252: 1:      'question': '1 1 0',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': '-1 -1',
252: 1:      'question': '-1 -1',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': '1 -1',
252: 1:      'question': '1 -1 0',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': '10 -20',
252: 1:      'question': '10 2 -1 -20',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': '805 -739',
252: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': '728 -983',
252: 1:      'question': '-983 -111 -332 -973 47 728',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': '268 -779',
252: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
252: 1:      'valid': true
252: 1:    },
252: 1:    {
252: 1:      'answer': '888 -937',
252: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
252: 1:      'valid': true
252: 1:    }
252: 1:  ],
252: 1:  'info': [
252: 1:    '✅f(1 2 3 4 5) = 5 1',
252: 1:    '✅f(1 2 -3 4 5) = 5 -3',
252: 1:    '✅f(1 9 3 4 -5) = 9 -5',
252: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
252: 1:    '✅f(1 2 3) = 3 1',
252: 1:    '✅f(1) = 1 1',
252: 1:    '✅f(-1) = -1 -1',
252: 1:    '✅f(-1 -1 0) = 0 -1',
252: 1:    '✅f(1 1 0) = 1 0',
252: 1:    '✅f(-1 -1) = -1 -1',
252: 1:    '✅f(1 -1 0) = 1 -1',
252: 1:    '✅f(10 2 -1 -20) = 10 -20',
252: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = 805 -739',
252: 1:    '✅f(-983 -111 -332 -973 47 728) = 728 -983',
252: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = 268 -779',
252: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = 888 -937',
252: 1:    '❌f(646 261 609 -82 949 526 -449 -594 894) = ??? != 949 -594'
252: 1:  ],
252: 1:  'level': 8,
252: 1:  'nextQuestion': '646 261 609 -82 949 526 -449 -594 894',
252: 1:  'questions': [
252: 1:    '1 2 3 4 5',
252: 1:    '1 2 -3 4 5',
252: 1:    '1 9 3 4 -5',
252: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
252: 1:    '1 2 3',
252: 1:    '1',
252: 1:    '-1',
252: 1:    '-1 -1 0',
252: 1:    '1 1 0',
252: 1:    '-1 -1',
252: 1:    '1 -1 0',
252: 1:    '10 2 -1 -20',
252: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
252: 1:    '-983 -111 -332 -973 47 728',
252: 1:    '268 -359 -513 -9 -86 -142 -779',
252: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773',
252: 1:    '646 261 609 -82 949 526 -449 -594 894'
252: 1:  ]
252: 1:}
252: 1:Scores: 8101
252: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0', '-1 -1', '1 -1', '10 -20', '805 -739', '728 -983', '268 -779', '888 -937', '949 -594']')
252: 1:Fire Event: PassTest{complexity=12, testCount=23}
------------------------------------------
253: 1:BoardData {
253: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
253: 1:  'expectedAnswer': '909 -950',
253: 1:  'history': [
253: 1:    {
253: 1:      'answer': '5 1',
253: 1:      'question': '1 2 3 4 5',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': '5 -3',
253: 1:      'question': '1 2 -3 4 5',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': '9 -5',
253: 1:      'question': '1 9 3 4 -5',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': '42 -9',
253: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': '3 1',
253: 1:      'question': '1 2 3',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': '1 1',
253: 1:      'question': '1',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': '-1 -1',
253: 1:      'question': '-1',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': '0 -1',
253: 1:      'question': '-1 -1 0',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': '1 0',
253: 1:      'question': '1 1 0',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': '-1 -1',
253: 1:      'question': '-1 -1',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': '1 -1',
253: 1:      'question': '1 -1 0',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': '10 -20',
253: 1:      'question': '10 2 -1 -20',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': '805 -739',
253: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': '728 -983',
253: 1:      'question': '-983 -111 -332 -973 47 728',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': '268 -779',
253: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': '888 -937',
253: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
253: 1:      'valid': true
253: 1:    },
253: 1:    {
253: 1:      'answer': '949 -594',
253: 1:      'question': '646 261 609 -82 949 526 -449 -594 894',
253: 1:      'valid': true
253: 1:    }
253: 1:  ],
253: 1:  'info': [
253: 1:    '✅f(1 2 3 4 5) = 5 1',
253: 1:    '✅f(1 2 -3 4 5) = 5 -3',
253: 1:    '✅f(1 9 3 4 -5) = 9 -5',
253: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
253: 1:    '✅f(1 2 3) = 3 1',
253: 1:    '✅f(1) = 1 1',
253: 1:    '✅f(-1) = -1 -1',
253: 1:    '✅f(-1 -1 0) = 0 -1',
253: 1:    '✅f(1 1 0) = 1 0',
253: 1:    '✅f(-1 -1) = -1 -1',
253: 1:    '✅f(1 -1 0) = 1 -1',
253: 1:    '✅f(10 2 -1 -20) = 10 -20',
253: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = 805 -739',
253: 1:    '✅f(-983 -111 -332 -973 47 728) = 728 -983',
253: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = 268 -779',
253: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = 888 -937',
253: 1:    '✅f(646 261 609 -82 949 526 -449 -594 894) = 949 -594',
253: 1:    '❌f(-950 909 424 834 -579 -275 -901 444) = ??? != 909 -950'
253: 1:  ],
253: 1:  'level': 8,
253: 1:  'nextQuestion': '-950 909 424 834 -579 -275 -901 444',
253: 1:  'questions': [
253: 1:    '1 2 3 4 5',
253: 1:    '1 2 -3 4 5',
253: 1:    '1 9 3 4 -5',
253: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
253: 1:    '1 2 3',
253: 1:    '1',
253: 1:    '-1',
253: 1:    '-1 -1 0',
253: 1:    '1 1 0',
253: 1:    '-1 -1',
253: 1:    '1 -1 0',
253: 1:    '10 2 -1 -20',
253: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
253: 1:    '-983 -111 -332 -973 47 728',
253: 1:    '268 -359 -513 -9 -86 -142 -779',
253: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773',
253: 1:    '646 261 609 -82 949 526 -449 -594 894',
253: 1:    '-950 909 424 834 -579 -275 -901 444'
253: 1:  ]
253: 1:}
253: 1:Scores: 8106
253: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0', '-1 -1', '1 -1', '10 -20', '805 -739', '728 -983', '268 -779', '888 -937', '949 -594', '909 -950']')
253: 1:Fire Event: PassTest{complexity=12, testCount=23}
------------------------------------------
254: 1:BoardData {
254: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
254: 1:  'expectedAnswer': '705 -879',
254: 1:  'history': [
254: 1:    {
254: 1:      'answer': '5 1',
254: 1:      'question': '1 2 3 4 5',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': '5 -3',
254: 1:      'question': '1 2 -3 4 5',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': '9 -5',
254: 1:      'question': '1 9 3 4 -5',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': '42 -9',
254: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': '3 1',
254: 1:      'question': '1 2 3',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': '1 1',
254: 1:      'question': '1',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': '-1 -1',
254: 1:      'question': '-1',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': '0 -1',
254: 1:      'question': '-1 -1 0',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': '1 0',
254: 1:      'question': '1 1 0',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': '-1 -1',
254: 1:      'question': '-1 -1',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': '1 -1',
254: 1:      'question': '1 -1 0',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': '10 -20',
254: 1:      'question': '10 2 -1 -20',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': '805 -739',
254: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': '728 -983',
254: 1:      'question': '-983 -111 -332 -973 47 728',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': '268 -779',
254: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': '888 -937',
254: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': '949 -594',
254: 1:      'question': '646 261 609 -82 949 526 -449 -594 894',
254: 1:      'valid': true
254: 1:    },
254: 1:    {
254: 1:      'answer': '909 -950',
254: 1:      'question': '-950 909 424 834 -579 -275 -901 444',
254: 1:      'valid': true
254: 1:    }
254: 1:  ],
254: 1:  'info': [
254: 1:    '✅f(1 2 3 4 5) = 5 1',
254: 1:    '✅f(1 2 -3 4 5) = 5 -3',
254: 1:    '✅f(1 9 3 4 -5) = 9 -5',
254: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
254: 1:    '✅f(1 2 3) = 3 1',
254: 1:    '✅f(1) = 1 1',
254: 1:    '✅f(-1) = -1 -1',
254: 1:    '✅f(-1 -1 0) = 0 -1',
254: 1:    '✅f(1 1 0) = 1 0',
254: 1:    '✅f(-1 -1) = -1 -1',
254: 1:    '✅f(1 -1 0) = 1 -1',
254: 1:    '✅f(10 2 -1 -20) = 10 -20',
254: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = 805 -739',
254: 1:    '✅f(-983 -111 -332 -973 47 728) = 728 -983',
254: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = 268 -779',
254: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = 888 -937',
254: 1:    '✅f(646 261 609 -82 949 526 -449 -594 894) = 949 -594',
254: 1:    '✅f(-950 909 424 834 -579 -275 -901 444) = 909 -950',
254: 1:    '❌f(-857 43 444 158 510 -879 -350 705) = ??? != 705 -879'
254: 1:  ],
254: 1:  'level': 8,
254: 1:  'nextQuestion': '-857 43 444 158 510 -879 -350 705',
254: 1:  'questions': [
254: 1:    '1 2 3 4 5',
254: 1:    '1 2 -3 4 5',
254: 1:    '1 9 3 4 -5',
254: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
254: 1:    '1 2 3',
254: 1:    '1',
254: 1:    '-1',
254: 1:    '-1 -1 0',
254: 1:    '1 1 0',
254: 1:    '-1 -1',
254: 1:    '1 -1 0',
254: 1:    '10 2 -1 -20',
254: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
254: 1:    '-983 -111 -332 -973 47 728',
254: 1:    '268 -359 -513 -9 -86 -142 -779',
254: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773',
254: 1:    '646 261 609 -82 949 526 -449 -594 894',
254: 1:    '-950 909 424 834 -579 -275 -901 444',
254: 1:    '-857 43 444 158 510 -879 -350 705'
254: 1:  ]
254: 1:}
254: 1:Scores: 8111
254: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0', '-1 -1', '1 -1', '10 -20', '805 -739', '728 -983', '268 -779', '888 -937', '949 -594', '909 -950', '705 -879']')
254: 1:Fire Event: PassTest{complexity=12, testCount=23}
------------------------------------------
255: 1:BoardData {
255: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
255: 1:  'expectedAnswer': '980 -996',
255: 1:  'history': [
255: 1:    {
255: 1:      'answer': '5 1',
255: 1:      'question': '1 2 3 4 5',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': '5 -3',
255: 1:      'question': '1 2 -3 4 5',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': '9 -5',
255: 1:      'question': '1 9 3 4 -5',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': '42 -9',
255: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': '3 1',
255: 1:      'question': '1 2 3',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': '1 1',
255: 1:      'question': '1',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': '-1 -1',
255: 1:      'question': '-1',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': '0 -1',
255: 1:      'question': '-1 -1 0',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': '1 0',
255: 1:      'question': '1 1 0',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': '-1 -1',
255: 1:      'question': '-1 -1',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': '1 -1',
255: 1:      'question': '1 -1 0',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': '10 -20',
255: 1:      'question': '10 2 -1 -20',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': '805 -739',
255: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': '728 -983',
255: 1:      'question': '-983 -111 -332 -973 47 728',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': '268 -779',
255: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': '888 -937',
255: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': '949 -594',
255: 1:      'question': '646 261 609 -82 949 526 -449 -594 894',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': '909 -950',
255: 1:      'question': '-950 909 424 834 -579 -275 -901 444',
255: 1:      'valid': true
255: 1:    },
255: 1:    {
255: 1:      'answer': '705 -879',
255: 1:      'question': '-857 43 444 158 510 -879 -350 705',
255: 1:      'valid': true
255: 1:    }
255: 1:  ],
255: 1:  'info': [
255: 1:    '✅f(1 2 3 4 5) = 5 1',
255: 1:    '✅f(1 2 -3 4 5) = 5 -3',
255: 1:    '✅f(1 9 3 4 -5) = 9 -5',
255: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
255: 1:    '✅f(1 2 3) = 3 1',
255: 1:    '✅f(1) = 1 1',
255: 1:    '✅f(-1) = -1 -1',
255: 1:    '✅f(-1 -1 0) = 0 -1',
255: 1:    '✅f(1 1 0) = 1 0',
255: 1:    '✅f(-1 -1) = -1 -1',
255: 1:    '✅f(1 -1 0) = 1 -1',
255: 1:    '✅f(10 2 -1 -20) = 10 -20',
255: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = 805 -739',
255: 1:    '✅f(-983 -111 -332 -973 47 728) = 728 -983',
255: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = 268 -779',
255: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = 888 -937',
255: 1:    '✅f(646 261 609 -82 949 526 -449 -594 894) = 949 -594',
255: 1:    '✅f(-950 909 424 834 -579 -275 -901 444) = 909 -950',
255: 1:    '✅f(-857 43 444 158 510 -879 -350 705) = 705 -879',
255: 1:    '❌f(-961 908 -769 980 407 -651 550 671 -996 215) = ??? != 980 -996'
255: 1:  ],
255: 1:  'level': 8,
255: 1:  'nextQuestion': '-961 908 -769 980 407 -651 550 671 -996 215',
255: 1:  'questions': [
255: 1:    '1 2 3 4 5',
255: 1:    '1 2 -3 4 5',
255: 1:    '1 9 3 4 -5',
255: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
255: 1:    '1 2 3',
255: 1:    '1',
255: 1:    '-1',
255: 1:    '-1 -1 0',
255: 1:    '1 1 0',
255: 1:    '-1 -1',
255: 1:    '1 -1 0',
255: 1:    '10 2 -1 -20',
255: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
255: 1:    '-983 -111 -332 -973 47 728',
255: 1:    '268 -359 -513 -9 -86 -142 -779',
255: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773',
255: 1:    '646 261 609 -82 949 526 -449 -594 894',
255: 1:    '-950 909 424 834 -579 -275 -901 444',
255: 1:    '-857 43 444 158 510 -879 -350 705',
255: 1:    '-961 908 -769 980 407 -651 550 671 -996 215'
255: 1:  ]
255: 1:}
255: 1:Scores: 8116
255: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0', '-1 -1', '1 -1', '10 -20', '805 -739', '728 -983', '268 -779', '888 -937', '949 -594', '909 -950', '705 -879', '980 -996']')
255: 1:Fire Event: PassTest{complexity=12, testCount=23}
------------------------------------------
256: 1:BoardData {
256: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
256: 1:  'expectedAnswer': '483 -812',
256: 1:  'history': [
256: 1:    {
256: 1:      'answer': '5 1',
256: 1:      'question': '1 2 3 4 5',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '5 -3',
256: 1:      'question': '1 2 -3 4 5',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '9 -5',
256: 1:      'question': '1 9 3 4 -5',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '42 -9',
256: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '3 1',
256: 1:      'question': '1 2 3',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '1 1',
256: 1:      'question': '1',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '-1 -1',
256: 1:      'question': '-1',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '0 -1',
256: 1:      'question': '-1 -1 0',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '1 0',
256: 1:      'question': '1 1 0',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '-1 -1',
256: 1:      'question': '-1 -1',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '1 -1',
256: 1:      'question': '1 -1 0',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '10 -20',
256: 1:      'question': '10 2 -1 -20',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '805 -739',
256: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '728 -983',
256: 1:      'question': '-983 -111 -332 -973 47 728',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '268 -779',
256: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '888 -937',
256: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '949 -594',
256: 1:      'question': '646 261 609 -82 949 526 -449 -594 894',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '909 -950',
256: 1:      'question': '-950 909 424 834 -579 -275 -901 444',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '705 -879',
256: 1:      'question': '-857 43 444 158 510 -879 -350 705',
256: 1:      'valid': true
256: 1:    },
256: 1:    {
256: 1:      'answer': '980 -996',
256: 1:      'question': '-961 908 -769 980 407 -651 550 671 -996 215',
256: 1:      'valid': true
256: 1:    }
256: 1:  ],
256: 1:  'info': [
256: 1:    '✅f(1 2 3 4 5) = 5 1',
256: 1:    '✅f(1 2 -3 4 5) = 5 -3',
256: 1:    '✅f(1 9 3 4 -5) = 9 -5',
256: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
256: 1:    '✅f(1 2 3) = 3 1',
256: 1:    '✅f(1) = 1 1',
256: 1:    '✅f(-1) = -1 -1',
256: 1:    '✅f(-1 -1 0) = 0 -1',
256: 1:    '✅f(1 1 0) = 1 0',
256: 1:    '✅f(-1 -1) = -1 -1',
256: 1:    '✅f(1 -1 0) = 1 -1',
256: 1:    '✅f(10 2 -1 -20) = 10 -20',
256: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = 805 -739',
256: 1:    '✅f(-983 -111 -332 -973 47 728) = 728 -983',
256: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = 268 -779',
256: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = 888 -937',
256: 1:    '✅f(646 261 609 -82 949 526 -449 -594 894) = 949 -594',
256: 1:    '✅f(-950 909 424 834 -579 -275 -901 444) = 909 -950',
256: 1:    '✅f(-857 43 444 158 510 -879 -350 705) = 705 -879',
256: 1:    '✅f(-961 908 -769 980 407 -651 550 671 -996 215) = 980 -996',
256: 1:    '❌f(483 -83 -229 -373 -812 335 -802) = ??? != 483 -812'
256: 1:  ],
256: 1:  'level': 8,
256: 1:  'nextQuestion': '483 -83 -229 -373 -812 335 -802',
256: 1:  'questions': [
256: 1:    '1 2 3 4 5',
256: 1:    '1 2 -3 4 5',
256: 1:    '1 9 3 4 -5',
256: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
256: 1:    '1 2 3',
256: 1:    '1',
256: 1:    '-1',
256: 1:    '-1 -1 0',
256: 1:    '1 1 0',
256: 1:    '-1 -1',
256: 1:    '1 -1 0',
256: 1:    '10 2 -1 -20',
256: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
256: 1:    '-983 -111 -332 -973 47 728',
256: 1:    '268 -359 -513 -9 -86 -142 -779',
256: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773',
256: 1:    '646 261 609 -82 949 526 -449 -594 894',
256: 1:    '-950 909 424 834 -579 -275 -901 444',
256: 1:    '-857 43 444 158 510 -879 -350 705',
256: 1:    '-961 908 -769 980 407 -651 550 671 -996 215',
256: 1:    '483 -83 -229 -373 -812 335 -802'
256: 1:  ]
256: 1:}
256: 1:Scores: 8121
256: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0', '-1 -1', '1 -1', '10 -20', '805 -739', '728 -983', '268 -779', '888 -937', '949 -594', '909 -950', '705 -879', '980 -996', '483 -812']')
256: 1:Fire Event: PassTest{complexity=12, testCount=23}
------------------------------------------
257: 1:BoardData {
257: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
257: 1:  'expectedAnswer': '831 -968',
257: 1:  'history': [
257: 1:    {
257: 1:      'answer': '5 1',
257: 1:      'question': '1 2 3 4 5',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '5 -3',
257: 1:      'question': '1 2 -3 4 5',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '9 -5',
257: 1:      'question': '1 9 3 4 -5',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '42 -9',
257: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '3 1',
257: 1:      'question': '1 2 3',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '1 1',
257: 1:      'question': '1',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '-1 -1',
257: 1:      'question': '-1',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '0 -1',
257: 1:      'question': '-1 -1 0',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '1 0',
257: 1:      'question': '1 1 0',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '-1 -1',
257: 1:      'question': '-1 -1',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '1 -1',
257: 1:      'question': '1 -1 0',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '10 -20',
257: 1:      'question': '10 2 -1 -20',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '805 -739',
257: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '728 -983',
257: 1:      'question': '-983 -111 -332 -973 47 728',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '268 -779',
257: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '888 -937',
257: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '949 -594',
257: 1:      'question': '646 261 609 -82 949 526 -449 -594 894',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '909 -950',
257: 1:      'question': '-950 909 424 834 -579 -275 -901 444',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '705 -879',
257: 1:      'question': '-857 43 444 158 510 -879 -350 705',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '980 -996',
257: 1:      'question': '-961 908 -769 980 407 -651 550 671 -996 215',
257: 1:      'valid': true
257: 1:    },
257: 1:    {
257: 1:      'answer': '483 -812',
257: 1:      'question': '483 -83 -229 -373 -812 335 -802',
257: 1:      'valid': true
257: 1:    }
257: 1:  ],
257: 1:  'info': [
257: 1:    '✅f(1 2 3 4 5) = 5 1',
257: 1:    '✅f(1 2 -3 4 5) = 5 -3',
257: 1:    '✅f(1 9 3 4 -5) = 9 -5',
257: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
257: 1:    '✅f(1 2 3) = 3 1',
257: 1:    '✅f(1) = 1 1',
257: 1:    '✅f(-1) = -1 -1',
257: 1:    '✅f(-1 -1 0) = 0 -1',
257: 1:    '✅f(1 1 0) = 1 0',
257: 1:    '✅f(-1 -1) = -1 -1',
257: 1:    '✅f(1 -1 0) = 1 -1',
257: 1:    '✅f(10 2 -1 -20) = 10 -20',
257: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = 805 -739',
257: 1:    '✅f(-983 -111 -332 -973 47 728) = 728 -983',
257: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = 268 -779',
257: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = 888 -937',
257: 1:    '✅f(646 261 609 -82 949 526 -449 -594 894) = 949 -594',
257: 1:    '✅f(-950 909 424 834 -579 -275 -901 444) = 909 -950',
257: 1:    '✅f(-857 43 444 158 510 -879 -350 705) = 705 -879',
257: 1:    '✅f(-961 908 -769 980 407 -651 550 671 -996 215) = 980 -996',
257: 1:    '✅f(483 -83 -229 -373 -812 335 -802) = 483 -812',
257: 1:    '❌f(-968 -692 -566 -31 333 831 81 -476 828 -232) = ??? != 831 -968'
257: 1:  ],
257: 1:  'level': 8,
257: 1:  'nextQuestion': '-968 -692 -566 -31 333 831 81 -476 828 -232',
257: 1:  'questions': [
257: 1:    '1 2 3 4 5',
257: 1:    '1 2 -3 4 5',
257: 1:    '1 9 3 4 -5',
257: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
257: 1:    '1 2 3',
257: 1:    '1',
257: 1:    '-1',
257: 1:    '-1 -1 0',
257: 1:    '1 1 0',
257: 1:    '-1 -1',
257: 1:    '1 -1 0',
257: 1:    '10 2 -1 -20',
257: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
257: 1:    '-983 -111 -332 -973 47 728',
257: 1:    '268 -359 -513 -9 -86 -142 -779',
257: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773',
257: 1:    '646 261 609 -82 949 526 -449 -594 894',
257: 1:    '-950 909 424 834 -579 -275 -901 444',
257: 1:    '-857 43 444 158 510 -879 -350 705',
257: 1:    '-961 908 -769 980 407 -651 550 671 -996 215',
257: 1:    '483 -83 -229 -373 -812 335 -802',
257: 1:    '-968 -692 -566 -31 333 831 81 -476 828 -232'
257: 1:  ]
257: 1:}
257: 1:Scores: 8126
257: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0', '-1 -1', '1 -1', '10 -20', '805 -739', '728 -983', '268 -779', '888 -937', '949 -594', '909 -950', '705 -879', '980 -996', '483 -812', '831 -968']')
257: 1:Fire Event: PassTest{complexity=12, testCount=23}
------------------------------------------
258: 1:BoardData {
258: 1:  'description': ['In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.Example: 1 2 3 4 5=>5 1\n1 2 -3 4 5=>5 -3\n1 9 3 4 -5=>9 -5'],
258: 1:  'expectedAnswer': '542 -214',
258: 1:  'history': [
258: 1:    {
258: 1:      'answer': '5 1',
258: 1:      'question': '1 2 3 4 5',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '5 -3',
258: 1:      'question': '1 2 -3 4 5',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '9 -5',
258: 1:      'question': '1 9 3 4 -5',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '42 -9',
258: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '3 1',
258: 1:      'question': '1 2 3',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '1 1',
258: 1:      'question': '1',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '-1 -1',
258: 1:      'question': '-1',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '0 -1',
258: 1:      'question': '-1 -1 0',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '1 0',
258: 1:      'question': '1 1 0',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '-1 -1',
258: 1:      'question': '-1 -1',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '1 -1',
258: 1:      'question': '1 -1 0',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '10 -20',
258: 1:      'question': '10 2 -1 -20',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '805 -739',
258: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '728 -983',
258: 1:      'question': '-983 -111 -332 -973 47 728',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '268 -779',
258: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '888 -937',
258: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '949 -594',
258: 1:      'question': '646 261 609 -82 949 526 -449 -594 894',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '909 -950',
258: 1:      'question': '-950 909 424 834 -579 -275 -901 444',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '705 -879',
258: 1:      'question': '-857 43 444 158 510 -879 -350 705',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '980 -996',
258: 1:      'question': '-961 908 -769 980 407 -651 550 671 -996 215',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '483 -812',
258: 1:      'question': '483 -83 -229 -373 -812 335 -802',
258: 1:      'valid': true
258: 1:    },
258: 1:    {
258: 1:      'answer': '831 -968',
258: 1:      'question': '-968 -692 -566 -31 333 831 81 -476 828 -232',
258: 1:      'valid': true
258: 1:    }
258: 1:  ],
258: 1:  'info': [
258: 1:    '✅f(1 2 3 4 5) = 5 1',
258: 1:    '✅f(1 2 -3 4 5) = 5 -3',
258: 1:    '✅f(1 9 3 4 -5) = 9 -5',
258: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
258: 1:    '✅f(1 2 3) = 3 1',
258: 1:    '✅f(1) = 1 1',
258: 1:    '✅f(-1) = -1 -1',
258: 1:    '✅f(-1 -1 0) = 0 -1',
258: 1:    '✅f(1 1 0) = 1 0',
258: 1:    '✅f(-1 -1) = -1 -1',
258: 1:    '✅f(1 -1 0) = 1 -1',
258: 1:    '✅f(10 2 -1 -20) = 10 -20',
258: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = 805 -739',
258: 1:    '✅f(-983 -111 -332 -973 47 728) = 728 -983',
258: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = 268 -779',
258: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = 888 -937',
258: 1:    '✅f(646 261 609 -82 949 526 -449 -594 894) = 949 -594',
258: 1:    '✅f(-950 909 424 834 -579 -275 -901 444) = 909 -950',
258: 1:    '✅f(-857 43 444 158 510 -879 -350 705) = 705 -879',
258: 1:    '✅f(-961 908 -769 980 407 -651 550 671 -996 215) = 980 -996',
258: 1:    '✅f(483 -83 -229 -373 -812 335 -802) = 483 -812',
258: 1:    '✅f(-968 -692 -566 -31 333 831 81 -476 828 -232) = 831 -968',
258: 1:    '❌f(4 5 29 54 4 0 -214 542 -64 1 -3 6 -6) = ??? != 542 -214'
258: 1:  ],
258: 1:  'level': 8,
258: 1:  'nextQuestion': '4 5 29 54 4 0 -214 542 -64 1 -3 6 -6',
258: 1:  'questions': [
258: 1:    '1 2 3 4 5',
258: 1:    '1 2 -3 4 5',
258: 1:    '1 9 3 4 -5',
258: 1:    '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
258: 1:    '1 2 3',
258: 1:    '1',
258: 1:    '-1',
258: 1:    '-1 -1 0',
258: 1:    '1 1 0',
258: 1:    '-1 -1',
258: 1:    '1 -1 0',
258: 1:    '10 2 -1 -20',
258: 1:    '452 561 -686 679 476 -515 805 -739 571 791',
258: 1:    '-983 -111 -332 -973 47 728',
258: 1:    '268 -359 -513 -9 -86 -142 -779',
258: 1:    '556 32 866 -730 -367 -937 367 888 43 -510 773',
258: 1:    '646 261 609 -82 949 526 -449 -594 894',
258: 1:    '-950 909 424 834 -579 -275 -901 444',
258: 1:    '-857 43 444 158 510 -879 -350 705',
258: 1:    '-961 908 -769 980 407 -651 550 671 -996 215',
258: 1:    '483 -83 -229 -373 -812 335 -802',
258: 1:    '-968 -692 -566 -31 333 831 81 -476 828 -232',
258: 1:    '4 5 29 54 4 0 -214 542 -64 1 -3 6 -6'
258: 1:  ]
258: 1:}
258: 1:Scores: 8131
258: 1:Answer: message('['5 1', '5 -3', '9 -5', '42 -9', '3 1', '1 1', '-1 -1', '0 -1', '1 0', '-1 -1', '1 -1', '10 -20', '805 -739', '728 -983', '268 -779', '888 -937', '949 -594', '909 -950', '705 -879', '980 -996', '483 -812', '831 -968', '542 -214']')
258: 1:Fire Event: PassTest{complexity=12, testCount=23}
258: 1:Fire Event: NextAlgorithm{complexity=12, time=0}
------------------------------------------
259: 1:BoardData {
259: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
259: 1:  'history': [
259: 1:    {
259: 1:      'answer': '5 1',
259: 1:      'question': '1 2 3 4 5',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '5 -3',
259: 1:      'question': '1 2 -3 4 5',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '9 -5',
259: 1:      'question': '1 9 3 4 -5',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '42 -9',
259: 1:      'question': '8 3 -5 42 -1 0 0 -9 4 7 4 -4',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '3 1',
259: 1:      'question': '1 2 3',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '1 1',
259: 1:      'question': '1',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '-1 -1',
259: 1:      'question': '-1',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '0 -1',
259: 1:      'question': '-1 -1 0',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '1 0',
259: 1:      'question': '1 1 0',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '-1 -1',
259: 1:      'question': '-1 -1',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '1 -1',
259: 1:      'question': '1 -1 0',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '10 -20',
259: 1:      'question': '10 2 -1 -20',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '805 -739',
259: 1:      'question': '452 561 -686 679 476 -515 805 -739 571 791',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '728 -983',
259: 1:      'question': '-983 -111 -332 -973 47 728',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '268 -779',
259: 1:      'question': '268 -359 -513 -9 -86 -142 -779',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '888 -937',
259: 1:      'question': '556 32 866 -730 -367 -937 367 888 43 -510 773',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '949 -594',
259: 1:      'question': '646 261 609 -82 949 526 -449 -594 894',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '909 -950',
259: 1:      'question': '-950 909 424 834 -579 -275 -901 444',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '705 -879',
259: 1:      'question': '-857 43 444 158 510 -879 -350 705',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '980 -996',
259: 1:      'question': '-961 908 -769 980 407 -651 550 671 -996 215',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '483 -812',
259: 1:      'question': '483 -83 -229 -373 -812 335 -802',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '831 -968',
259: 1:      'question': '-968 -692 -566 -31 333 831 81 -476 828 -232',
259: 1:      'valid': true
259: 1:    },
259: 1:    {
259: 1:      'answer': '542 -214',
259: 1:      'question': '4 5 29 54 4 0 -214 542 -64 1 -3 6 -6',
259: 1:      'valid': true
259: 1:    }
259: 1:  ],
259: 1:  'info': [
259: 1:    '✅f(1 2 3 4 5) = 5 1',
259: 1:    '✅f(1 2 -3 4 5) = 5 -3',
259: 1:    '✅f(1 9 3 4 -5) = 9 -5',
259: 1:    '✅f(8 3 -5 42 -1 0 0 -9 4 7 4 -4) = 42 -9',
259: 1:    '✅f(1 2 3) = 3 1',
259: 1:    '✅f(1) = 1 1',
259: 1:    '✅f(-1) = -1 -1',
259: 1:    '✅f(-1 -1 0) = 0 -1',
259: 1:    '✅f(1 1 0) = 1 0',
259: 1:    '✅f(-1 -1) = -1 -1',
259: 1:    '✅f(1 -1 0) = 1 -1',
259: 1:    '✅f(10 2 -1 -20) = 10 -20',
259: 1:    '✅f(452 561 -686 679 476 -515 805 -739 571 791) = 805 -739',
259: 1:    '✅f(-983 -111 -332 -973 47 728) = 728 -983',
259: 1:    '✅f(268 -359 -513 -9 -86 -142 -779) = 268 -779',
259: 1:    '✅f(556 32 866 -730 -367 -937 367 888 43 -510 773) = 888 -937',
259: 1:    '✅f(646 261 609 -82 949 526 -449 -594 894) = 949 -594',
259: 1:    '✅f(-950 909 424 834 -579 -275 -901 444) = 909 -950',
259: 1:    '✅f(-857 43 444 158 510 -879 -350 705) = 705 -879',
259: 1:    '✅f(-961 908 -769 980 407 -651 550 671 -996 215) = 980 -996',
259: 1:    '✅f(483 -83 -229 -373 -812 335 -802) = 483 -812',
259: 1:    '✅f(-968 -692 -566 -31 333 831 81 -476 828 -232) = 831 -968',
259: 1:    '✅f(4 5 29 54 4 0 -214 542 -64 1 -3 6 -6) = 542 -214'
259: 1:  ],
259: 1:  'level': 8,
259: 1:  'questions': []
259: 1:}
259: 1:Scores: 9755
259: 1:Answer: message('StartNextLevel')
259: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
260: 1:BoardData {
260: 1:  'description': ['Oh my, it seems that trolls have taken over your comment section!\nHowever, fear not, for there is a simple solution to deal with these troublesome creatures.\nYou may remove all vowels from their comments, rendering them powerless.\nI implore you to create a function that can execute this task, for instance,\ntransforming \'This website is for losers LOL!\' into \'Ths wbst s fr lsrs LL!\'. \nPlease take note that for this exercise, the letter 'y' is not considered a vowel.'],
260: 1:  'expectedAnswer': 'Hll Wrld!!',
260: 1:  'history': [],
260: 1:  'info': ['❌f(Hello World!!) = ??? != Hll Wrld!!'],
260: 1:  'level': 9,
260: 1:  'nextQuestion': 'Hello World!!',
260: 1:  'questions': ['Hello World!!']
260: 1:}
260: 1:Scores: 9755
260: 1:Answer: message('['Hll Wrld!!']')
260: 1:Fire Event: PassTest{complexity=13, testCount=13}
------------------------------------------
261: 1:BoardData {
261: 1:  'description': ['Oh my, it seems that trolls have taken over your comment section!\nHowever, fear not, for there is a simple solution to deal with these troublesome creatures.\nYou may remove all vowels from their comments, rendering them powerless.\nI implore you to create a function that can execute this task, for instance,\ntransforming \'This website is for losers LOL!\' into \'Ths wbst s fr lsrs LL!\'. \nPlease take note that for this exercise, the letter 'y' is not considered a vowel.'],
261: 1:  'expectedAnswer': 'Th qck brwn fx jmps vr th lzy dg.',
261: 1:  'history': [{
261: 1:    'answer': 'Hll Wrld!!',
261: 1:    'question': 'Hello World!!',
261: 1:    'valid': true
261: 1:  }],
261: 1:  'info': [
261: 1:    '✅f(Hello World!!) = Hll Wrld!!',
261: 1:    '❌f(The quick brown fox jumps over the lazy dog.) = ??? != Th qck brwn fx jmps vr th lzy dg.'
261: 1:  ],
261: 1:  'level': 9,
261: 1:  'nextQuestion': 'The quick brown fox jumps over the lazy dog.',
261: 1:  'questions': [
261: 1:    'Hello World!!',
261: 1:    'The quick brown fox jumps over the lazy dog.'
261: 1:  ]
261: 1:}
261: 1:Scores: 9765
261: 1:Answer: message('['Hll Wrld!!', 'Th qck brwn fx jmps vr th lzy dg.']')
261: 1:Fire Event: PassTest{complexity=13, testCount=13}
------------------------------------------
262: 1:BoardData {
262: 1:  'description': ['Oh my, it seems that trolls have taken over your comment section!\nHowever, fear not, for there is a simple solution to deal with these troublesome creatures.\nYou may remove all vowels from their comments, rendering them powerless.\nI implore you to create a function that can execute this task, for instance,\ntransforming \'This website is for losers LOL!\' into \'Ths wbst s fr lsrs LL!\'. \nPlease take note that for this exercise, the letter 'y' is not considered a vowel.'],
262: 1:  'expectedAnswer': 'T b r nt t b, tht s th qstn.',
262: 1:  'history': [
262: 1:    {
262: 1:      'answer': 'Hll Wrld!!',
262: 1:      'question': 'Hello World!!',
262: 1:      'valid': true
262: 1:    },
262: 1:    {
262: 1:      'answer': 'Th qck brwn fx jmps vr th lzy dg.',
262: 1:      'question': 'The quick brown fox jumps over the lazy dog.',
262: 1:      'valid': true
262: 1:    }
262: 1:  ],
262: 1:  'info': [
262: 1:    '✅f(Hello World!!) = Hll Wrld!!',
262: 1:    '✅f(The quick brown fox jumps over the lazy dog.) = Th qck brwn fx jmps vr th lzy dg.',
262: 1:    '❌f(To be or not to be, that is the question.) = ??? != T b r nt t b, tht s th qstn.'
262: 1:  ],
262: 1:  'level': 9,
262: 1:  'nextQuestion': 'To be or not to be, that is the question.',
262: 1:  'questions': [
262: 1:    'Hello World!!',
262: 1:    'The quick brown fox jumps over the lazy dog.',
262: 1:    'To be or not to be, that is the question.'
262: 1:  ]
262: 1:}
262: 1:Scores: 9775
262: 1:Answer: message('['Hll Wrld!!', 'Th qck brwn fx jmps vr th lzy dg.', 'T b r nt t b, tht s th qstn.']')
262: 1:Fire Event: PassTest{complexity=13, testCount=13}
------------------------------------------
263: 1:BoardData {
263: 1:  'description': ['Oh my, it seems that trolls have taken over your comment section!\nHowever, fear not, for there is a simple solution to deal with these troublesome creatures.\nYou may remove all vowels from their comments, rendering them powerless.\nI implore you to create a function that can execute this task, for instance,\ntransforming \'This website is for losers LOL!\' into \'Ths wbst s fr lsrs LL!\'. \nPlease take note that for this exercise, the letter 'y' is not considered a vowel.'],
263: 1:  'expectedAnswer': 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
263: 1:  'history': [
263: 1:    {
263: 1:      'answer': 'Hll Wrld!!',
263: 1:      'question': 'Hello World!!',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': 'Th qck brwn fx jmps vr th lzy dg.',
263: 1:      'question': 'The quick brown fox jumps over the lazy dog.',
263: 1:      'valid': true
263: 1:    },
263: 1:    {
263: 1:      'answer': 'T b r nt t b, tht s th qstn.',
263: 1:      'question': 'To be or not to be, that is the question.',
263: 1:      'valid': true
263: 1:    }
263: 1:  ],
263: 1:  'info': [
263: 1:    '✅f(Hello World!!) = Hll Wrld!!',
263: 1:    '✅f(The quick brown fox jumps over the lazy dog.) = Th qck brwn fx jmps vr th lzy dg.',
263: 1:    '✅f(To be or not to be, that is the question.) = T b r nt t b, tht s th qstn.',
263: 1:    '❌f(The world is a book, and those who do not travel read only a page.) = ??? != Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.'
263: 1:  ],
263: 1:  'level': 9,
263: 1:  'nextQuestion': 'The world is a book, and those who do not travel read only a page.',
263: 1:  'questions': [
263: 1:    'Hello World!!',
263: 1:    'The quick brown fox jumps over the lazy dog.',
263: 1:    'To be or not to be, that is the question.',
263: 1:    'The world is a book, and those who do not travel read only a page.'
263: 1:  ]
263: 1:}
263: 1:Scores: 9785
263: 1:Answer: message('['Hll Wrld!!', 'Th qck brwn fx jmps vr th lzy dg.', 'T b r nt t b, tht s th qstn.', 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.']')
263: 1:Fire Event: PassTest{complexity=13, testCount=13}
------------------------------------------
264: 1:BoardData {
264: 1:  'description': ['Oh my, it seems that trolls have taken over your comment section!\nHowever, fear not, for there is a simple solution to deal with these troublesome creatures.\nYou may remove all vowels from their comments, rendering them powerless.\nI implore you to create a function that can execute this task, for instance,\ntransforming \'This website is for losers LOL!\' into \'Ths wbst s fr lsrs LL!\'. \nPlease take note that for this exercise, the letter 'y' is not considered a vowel.'],
264: 1:  'expectedAnswer': 'Th fv bxng wzrds jmp qckly.',
264: 1:  'history': [
264: 1:    {
264: 1:      'answer': 'Hll Wrld!!',
264: 1:      'question': 'Hello World!!',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': 'Th qck brwn fx jmps vr th lzy dg.',
264: 1:      'question': 'The quick brown fox jumps over the lazy dog.',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': 'T b r nt t b, tht s th qstn.',
264: 1:      'question': 'To be or not to be, that is the question.',
264: 1:      'valid': true
264: 1:    },
264: 1:    {
264: 1:      'answer': 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
264: 1:      'question': 'The world is a book, and those who do not travel read only a page.',
264: 1:      'valid': true
264: 1:    }
264: 1:  ],
264: 1:  'info': [
264: 1:    '✅f(Hello World!!) = Hll Wrld!!',
264: 1:    '✅f(The quick brown fox jumps over the lazy dog.) = Th qck brwn fx jmps vr th lzy dg.',
264: 1:    '✅f(To be or not to be, that is the question.) = T b r nt t b, tht s th qstn.',
264: 1:    '✅f(The world is a book, and those who do not travel read only a page.) = Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
264: 1:    '❌f(The five boxing wizards jump quickly.) = ??? != Th fv bxng wzrds jmp qckly.'
264: 1:  ],
264: 1:  'level': 9,
264: 1:  'nextQuestion': 'The five boxing wizards jump quickly.',
264: 1:  'questions': [
264: 1:    'Hello World!!',
264: 1:    'The quick brown fox jumps over the lazy dog.',
264: 1:    'To be or not to be, that is the question.',
264: 1:    'The world is a book, and those who do not travel read only a page.',
264: 1:    'The five boxing wizards jump quickly.'
264: 1:  ]
264: 1:}
264: 1:Scores: 9795
264: 1:Answer: message('['Hll Wrld!!', 'Th qck brwn fx jmps vr th lzy dg.', 'T b r nt t b, tht s th qstn.', 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.', 'Th fv bxng wzrds jmp qckly.']')
264: 1:Fire Event: PassTest{complexity=13, testCount=13}
------------------------------------------
265: 1:BoardData {
265: 1:  'description': ['Oh my, it seems that trolls have taken over your comment section!\nHowever, fear not, for there is a simple solution to deal with these troublesome creatures.\nYou may remove all vowels from their comments, rendering them powerless.\nI implore you to create a function that can execute this task, for instance,\ntransforming \'This website is for losers LOL!\' into \'Ths wbst s fr lsrs LL!\'. \nPlease take note that for this exercise, the letter 'y' is not considered a vowel.'],
265: 1:  'expectedAnswer': 'Why dd th tmt trn rd? Bcs t sw th sld drssng!',
265: 1:  'history': [
265: 1:    {
265: 1:      'answer': 'Hll Wrld!!',
265: 1:      'question': 'Hello World!!',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': 'Th qck brwn fx jmps vr th lzy dg.',
265: 1:      'question': 'The quick brown fox jumps over the lazy dog.',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': 'T b r nt t b, tht s th qstn.',
265: 1:      'question': 'To be or not to be, that is the question.',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
265: 1:      'question': 'The world is a book, and those who do not travel read only a page.',
265: 1:      'valid': true
265: 1:    },
265: 1:    {
265: 1:      'answer': 'Th fv bxng wzrds jmp qckly.',
265: 1:      'question': 'The five boxing wizards jump quickly.',
265: 1:      'valid': true
265: 1:    }
265: 1:  ],
265: 1:  'info': [
265: 1:    '✅f(Hello World!!) = Hll Wrld!!',
265: 1:    '✅f(The quick brown fox jumps over the lazy dog.) = Th qck brwn fx jmps vr th lzy dg.',
265: 1:    '✅f(To be or not to be, that is the question.) = T b r nt t b, tht s th qstn.',
265: 1:    '✅f(The world is a book, and those who do not travel read only a page.) = Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
265: 1:    '✅f(The five boxing wizards jump quickly.) = Th fv bxng wzrds jmp qckly.',
265: 1:    '❌f(Why did the tomato turn red? Because it saw the salad dressing!) = ??? != Why dd th tmt trn rd? Bcs t sw th sld drssng!'
265: 1:  ],
265: 1:  'level': 9,
265: 1:  'nextQuestion': 'Why did the tomato turn red? Because it saw the salad dressing!',
265: 1:  'questions': [
265: 1:    'Hello World!!',
265: 1:    'The quick brown fox jumps over the lazy dog.',
265: 1:    'To be or not to be, that is the question.',
265: 1:    'The world is a book, and those who do not travel read only a page.',
265: 1:    'The five boxing wizards jump quickly.',
265: 1:    'Why did the tomato turn red? Because it saw the salad dressing!'
265: 1:  ]
265: 1:}
265: 1:Scores: 9805
265: 1:Answer: message('['Hll Wrld!!', 'Th qck brwn fx jmps vr th lzy dg.', 'T b r nt t b, tht s th qstn.', 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.', 'Th fv bxng wzrds jmp qckly.', 'Why dd th tmt trn rd? Bcs t sw th sld drssng!']')
265: 1:Fire Event: PassTest{complexity=13, testCount=13}
------------------------------------------
266: 1:BoardData {
266: 1:  'description': ['Oh my, it seems that trolls have taken over your comment section!\nHowever, fear not, for there is a simple solution to deal with these troublesome creatures.\nYou may remove all vowels from their comments, rendering them powerless.\nI implore you to create a function that can execute this task, for instance,\ntransforming \'This website is for losers LOL!\' into \'Ths wbst s fr lsrs LL!\'. \nPlease take note that for this exercise, the letter 'y' is not considered a vowel.'],
266: 1:  'expectedAnswer': 'Sh slls sshlls by th sshr.',
266: 1:  'history': [
266: 1:    {
266: 1:      'answer': 'Hll Wrld!!',
266: 1:      'question': 'Hello World!!',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'Th qck brwn fx jmps vr th lzy dg.',
266: 1:      'question': 'The quick brown fox jumps over the lazy dog.',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'T b r nt t b, tht s th qstn.',
266: 1:      'question': 'To be or not to be, that is the question.',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
266: 1:      'question': 'The world is a book, and those who do not travel read only a page.',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'Th fv bxng wzrds jmp qckly.',
266: 1:      'question': 'The five boxing wizards jump quickly.',
266: 1:      'valid': true
266: 1:    },
266: 1:    {
266: 1:      'answer': 'Why dd th tmt trn rd? Bcs t sw th sld drssng!',
266: 1:      'question': 'Why did the tomato turn red? Because it saw the salad dressing!',
266: 1:      'valid': true
266: 1:    }
266: 1:  ],
266: 1:  'info': [
266: 1:    '✅f(Hello World!!) = Hll Wrld!!',
266: 1:    '✅f(The quick brown fox jumps over the lazy dog.) = Th qck brwn fx jmps vr th lzy dg.',
266: 1:    '✅f(To be or not to be, that is the question.) = T b r nt t b, tht s th qstn.',
266: 1:    '✅f(The world is a book, and those who do not travel read only a page.) = Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
266: 1:    '✅f(The five boxing wizards jump quickly.) = Th fv bxng wzrds jmp qckly.',
266: 1:    '✅f(Why did the tomato turn red? Because it saw the salad dressing!) = Why dd th tmt trn rd? Bcs t sw th sld drssng!',
266: 1:    '❌f(She sells seashells by the seashore.) = ??? != Sh slls sshlls by th sshr.'
266: 1:  ],
266: 1:  'level': 9,
266: 1:  'nextQuestion': 'She sells seashells by the seashore.',
266: 1:  'questions': [
266: 1:    'Hello World!!',
266: 1:    'The quick brown fox jumps over the lazy dog.',
266: 1:    'To be or not to be, that is the question.',
266: 1:    'The world is a book, and those who do not travel read only a page.',
266: 1:    'The five boxing wizards jump quickly.',
266: 1:    'Why did the tomato turn red? Because it saw the salad dressing!',
266: 1:    'She sells seashells by the seashore.'
266: 1:  ]
266: 1:}
266: 1:Scores: 9815
266: 1:Answer: message('['Hll Wrld!!', 'Th qck brwn fx jmps vr th lzy dg.', 'T b r nt t b, tht s th qstn.', 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.', 'Th fv bxng wzrds jmp qckly.', 'Why dd th tmt trn rd? Bcs t sw th sld drssng!', 'Sh slls sshlls by th sshr.']')
266: 1:Fire Event: PassTest{complexity=13, testCount=13}
------------------------------------------
267: 1:BoardData {
267: 1:  'description': ['Oh my, it seems that trolls have taken over your comment section!\nHowever, fear not, for there is a simple solution to deal with these troublesome creatures.\nYou may remove all vowels from their comments, rendering them powerless.\nI implore you to create a function that can execute this task, for instance,\ntransforming \'This website is for losers LOL!\' into \'Ths wbst s fr lsrs LL!\'. \nPlease take note that for this exercise, the letter 'y' is not considered a vowel.'],
267: 1:  'expectedAnswer': 'Hw mch wd wld  wdchck chck f  wdchck cld chck wd?',
267: 1:  'history': [
267: 1:    {
267: 1:      'answer': 'Hll Wrld!!',
267: 1:      'question': 'Hello World!!',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'Th qck brwn fx jmps vr th lzy dg.',
267: 1:      'question': 'The quick brown fox jumps over the lazy dog.',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'T b r nt t b, tht s th qstn.',
267: 1:      'question': 'To be or not to be, that is the question.',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
267: 1:      'question': 'The world is a book, and those who do not travel read only a page.',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'Th fv bxng wzrds jmp qckly.',
267: 1:      'question': 'The five boxing wizards jump quickly.',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'Why dd th tmt trn rd? Bcs t sw th sld drssng!',
267: 1:      'question': 'Why did the tomato turn red? Because it saw the salad dressing!',
267: 1:      'valid': true
267: 1:    },
267: 1:    {
267: 1:      'answer': 'Sh slls sshlls by th sshr.',
267: 1:      'question': 'She sells seashells by the seashore.',
267: 1:      'valid': true
267: 1:    }
267: 1:  ],
267: 1:  'info': [
267: 1:    '✅f(Hello World!!) = Hll Wrld!!',
267: 1:    '✅f(The quick brown fox jumps over the lazy dog.) = Th qck brwn fx jmps vr th lzy dg.',
267: 1:    '✅f(To be or not to be, that is the question.) = T b r nt t b, tht s th qstn.',
267: 1:    '✅f(The world is a book, and those who do not travel read only a page.) = Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
267: 1:    '✅f(The five boxing wizards jump quickly.) = Th fv bxng wzrds jmp qckly.',
267: 1:    '✅f(Why did the tomato turn red? Because it saw the salad dressing!) = Why dd th tmt trn rd? Bcs t sw th sld drssng!',
267: 1:    '✅f(She sells seashells by the seashore.) = Sh slls sshlls by th sshr.',
267: 1:    '❌f(How much wood would a woodchuck chuck if a woodchuck could chuck wood?) = ??? != Hw mch wd wld  wdchck chck f  wdchck cld chck wd?'
267: 1:  ],
267: 1:  'level': 9,
267: 1:  'nextQuestion': 'How much wood would a woodchuck chuck if a woodchuck could chuck wood?',
267: 1:  'questions': [
267: 1:    'Hello World!!',
267: 1:    'The quick brown fox jumps over the lazy dog.',
267: 1:    'To be or not to be, that is the question.',
267: 1:    'The world is a book, and those who do not travel read only a page.',
267: 1:    'The five boxing wizards jump quickly.',
267: 1:    'Why did the tomato turn red? Because it saw the salad dressing!',
267: 1:    'She sells seashells by the seashore.',
267: 1:    'How much wood would a woodchuck chuck if a woodchuck could chuck wood?'
267: 1:  ]
267: 1:}
267: 1:Scores: 9825
267: 1:Answer: message('['Hll Wrld!!', 'Th qck brwn fx jmps vr th lzy dg.', 'T b r nt t b, tht s th qstn.', 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.', 'Th fv bxng wzrds jmp qckly.', 'Why dd th tmt trn rd? Bcs t sw th sld drssng!', 'Sh slls sshlls by th sshr.', 'Hw mch wd wld  wdchck chck f  wdchck cld chck wd?']')
267: 1:Fire Event: PassTest{complexity=13, testCount=13}
------------------------------------------
268: 1:BoardData {
268: 1:  'description': ['Oh my, it seems that trolls have taken over your comment section!\nHowever, fear not, for there is a simple solution to deal with these troublesome creatures.\nYou may remove all vowels from their comments, rendering them powerless.\nI implore you to create a function that can execute this task, for instance,\ntransforming \'This website is for losers LOL!\' into \'Ths wbst s fr lsrs LL!\'. \nPlease take note that for this exercise, the letter 'y' is not considered a vowel.'],
268: 1:  'expectedAnswer': 'll wrk nd n ply mks Jck  dll by.',
268: 1:  'history': [
268: 1:    {
268: 1:      'answer': 'Hll Wrld!!',
268: 1:      'question': 'Hello World!!',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'Th qck brwn fx jmps vr th lzy dg.',
268: 1:      'question': 'The quick brown fox jumps over the lazy dog.',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'T b r nt t b, tht s th qstn.',
268: 1:      'question': 'To be or not to be, that is the question.',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
268: 1:      'question': 'The world is a book, and those who do not travel read only a page.',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'Th fv bxng wzrds jmp qckly.',
268: 1:      'question': 'The five boxing wizards jump quickly.',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'Why dd th tmt trn rd? Bcs t sw th sld drssng!',
268: 1:      'question': 'Why did the tomato turn red? Because it saw the salad dressing!',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'Sh slls sshlls by th sshr.',
268: 1:      'question': 'She sells seashells by the seashore.',
268: 1:      'valid': true
268: 1:    },
268: 1:    {
268: 1:      'answer': 'Hw mch wd wld  wdchck chck f  wdchck cld chck wd?',
268: 1:      'question': 'How much wood would a woodchuck chuck if a woodchuck could chuck wood?',
268: 1:      'valid': true
268: 1:    }
268: 1:  ],
268: 1:  'info': [
268: 1:    '✅f(Hello World!!) = Hll Wrld!!',
268: 1:    '✅f(The quick brown fox jumps over the lazy dog.) = Th qck brwn fx jmps vr th lzy dg.',
268: 1:    '✅f(To be or not to be, that is the question.) = T b r nt t b, tht s th qstn.',
268: 1:    '✅f(The world is a book, and those who do not travel read only a page.) = Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
268: 1:    '✅f(The five boxing wizards jump quickly.) = Th fv bxng wzrds jmp qckly.',
268: 1:    '✅f(Why did the tomato turn red? Because it saw the salad dressing!) = Why dd th tmt trn rd? Bcs t sw th sld drssng!',
268: 1:    '✅f(She sells seashells by the seashore.) = Sh slls sshlls by th sshr.',
268: 1:    '✅f(How much wood would a woodchuck chuck if a woodchuck could chuck wood?) = Hw mch wd wld  wdchck chck f  wdchck cld chck wd?',
268: 1:    '❌f(All work and no play makes Jack a dull boy.) = ??? != ll wrk nd n ply mks Jck  dll by.'
268: 1:  ],
268: 1:  'level': 9,
268: 1:  'nextQuestion': 'All work and no play makes Jack a dull boy.',
268: 1:  'questions': [
268: 1:    'Hello World!!',
268: 1:    'The quick brown fox jumps over the lazy dog.',
268: 1:    'To be or not to be, that is the question.',
268: 1:    'The world is a book, and those who do not travel read only a page.',
268: 1:    'The five boxing wizards jump quickly.',
268: 1:    'Why did the tomato turn red? Because it saw the salad dressing!',
268: 1:    'She sells seashells by the seashore.',
268: 1:    'How much wood would a woodchuck chuck if a woodchuck could chuck wood?',
268: 1:    'All work and no play makes Jack a dull boy.'
268: 1:  ]
268: 1:}
268: 1:Scores: 9835
268: 1:Answer: message('['Hll Wrld!!', 'Th qck brwn fx jmps vr th lzy dg.', 'T b r nt t b, tht s th qstn.', 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.', 'Th fv bxng wzrds jmp qckly.', 'Why dd th tmt trn rd? Bcs t sw th sld drssng!', 'Sh slls sshlls by th sshr.', 'Hw mch wd wld  wdchck chck f  wdchck cld chck wd?', 'll wrk nd n ply mks Jck  dll by.']')
268: 1:Fire Event: PassTest{complexity=13, testCount=13}
------------------------------------------
269: 1:BoardData {
269: 1:  'description': ['Oh my, it seems that trolls have taken over your comment section!\nHowever, fear not, for there is a simple solution to deal with these troublesome creatures.\nYou may remove all vowels from their comments, rendering them powerless.\nI implore you to create a function that can execute this task, for instance,\ntransforming \'This website is for losers LOL!\' into \'Ths wbst s fr lsrs LL!\'. \nPlease take note that for this exercise, the letter 'y' is not considered a vowel.'],
269: 1:  'expectedAnswer': 'Th ct n th ht hd  bt nd  ht.',
269: 1:  'history': [
269: 1:    {
269: 1:      'answer': 'Hll Wrld!!',
269: 1:      'question': 'Hello World!!',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'Th qck brwn fx jmps vr th lzy dg.',
269: 1:      'question': 'The quick brown fox jumps over the lazy dog.',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'T b r nt t b, tht s th qstn.',
269: 1:      'question': 'To be or not to be, that is the question.',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
269: 1:      'question': 'The world is a book, and those who do not travel read only a page.',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'Th fv bxng wzrds jmp qckly.',
269: 1:      'question': 'The five boxing wizards jump quickly.',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'Why dd th tmt trn rd? Bcs t sw th sld drssng!',
269: 1:      'question': 'Why did the tomato turn red? Because it saw the salad dressing!',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'Sh slls sshlls by th sshr.',
269: 1:      'question': 'She sells seashells by the seashore.',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'Hw mch wd wld  wdchck chck f  wdchck cld chck wd?',
269: 1:      'question': 'How much wood would a woodchuck chuck if a woodchuck could chuck wood?',
269: 1:      'valid': true
269: 1:    },
269: 1:    {
269: 1:      'answer': 'll wrk nd n ply mks Jck  dll by.',
269: 1:      'question': 'All work and no play makes Jack a dull boy.',
269: 1:      'valid': true
269: 1:    }
269: 1:  ],
269: 1:  'info': [
269: 1:    '✅f(Hello World!!) = Hll Wrld!!',
269: 1:    '✅f(The quick brown fox jumps over the lazy dog.) = Th qck brwn fx jmps vr th lzy dg.',
269: 1:    '✅f(To be or not to be, that is the question.) = T b r nt t b, tht s th qstn.',
269: 1:    '✅f(The world is a book, and those who do not travel read only a page.) = Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
269: 1:    '✅f(The five boxing wizards jump quickly.) = Th fv bxng wzrds jmp qckly.',
269: 1:    '✅f(Why did the tomato turn red? Because it saw the salad dressing!) = Why dd th tmt trn rd? Bcs t sw th sld drssng!',
269: 1:    '✅f(She sells seashells by the seashore.) = Sh slls sshlls by th sshr.',
269: 1:    '✅f(How much wood would a woodchuck chuck if a woodchuck could chuck wood?) = Hw mch wd wld  wdchck chck f  wdchck cld chck wd?',
269: 1:    '✅f(All work and no play makes Jack a dull boy.) = ll wrk nd n ply mks Jck  dll by.',
269: 1:    '❌f(The cat in the hat had a bat and a hat.) = ??? != Th ct n th ht hd  bt nd  ht.'
269: 1:  ],
269: 1:  'level': 9,
269: 1:  'nextQuestion': 'The cat in the hat had a bat and a hat.',
269: 1:  'questions': [
269: 1:    'Hello World!!',
269: 1:    'The quick brown fox jumps over the lazy dog.',
269: 1:    'To be or not to be, that is the question.',
269: 1:    'The world is a book, and those who do not travel read only a page.',
269: 1:    'The five boxing wizards jump quickly.',
269: 1:    'Why did the tomato turn red? Because it saw the salad dressing!',
269: 1:    'She sells seashells by the seashore.',
269: 1:    'How much wood would a woodchuck chuck if a woodchuck could chuck wood?',
269: 1:    'All work and no play makes Jack a dull boy.',
269: 1:    'The cat in the hat had a bat and a hat.'
269: 1:  ]
269: 1:}
269: 1:Scores: 9845
269: 1:Answer: message('['Hll Wrld!!', 'Th qck brwn fx jmps vr th lzy dg.', 'T b r nt t b, tht s th qstn.', 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.', 'Th fv bxng wzrds jmp qckly.', 'Why dd th tmt trn rd? Bcs t sw th sld drssng!', 'Sh slls sshlls by th sshr.', 'Hw mch wd wld  wdchck chck f  wdchck cld chck wd?', 'll wrk nd n ply mks Jck  dll by.', 'Th ct n th ht hd  bt nd  ht.']')
269: 1:Fire Event: PassTest{complexity=13, testCount=13}
------------------------------------------
270: 1:BoardData {
270: 1:  'description': ['Oh my, it seems that trolls have taken over your comment section!\nHowever, fear not, for there is a simple solution to deal with these troublesome creatures.\nYou may remove all vowels from their comments, rendering them powerless.\nI implore you to create a function that can execute this task, for instance,\ntransforming \'This website is for losers LOL!\' into \'Ths wbst s fr lsrs LL!\'. \nPlease take note that for this exercise, the letter 'y' is not considered a vowel.'],
270: 1:  'expectedAnswer': ' bfr  xcpt ftr C.',
270: 1:  'history': [
270: 1:    {
270: 1:      'answer': 'Hll Wrld!!',
270: 1:      'question': 'Hello World!!',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'Th qck brwn fx jmps vr th lzy dg.',
270: 1:      'question': 'The quick brown fox jumps over the lazy dog.',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'T b r nt t b, tht s th qstn.',
270: 1:      'question': 'To be or not to be, that is the question.',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
270: 1:      'question': 'The world is a book, and those who do not travel read only a page.',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'Th fv bxng wzrds jmp qckly.',
270: 1:      'question': 'The five boxing wizards jump quickly.',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'Why dd th tmt trn rd? Bcs t sw th sld drssng!',
270: 1:      'question': 'Why did the tomato turn red? Because it saw the salad dressing!',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'Sh slls sshlls by th sshr.',
270: 1:      'question': 'She sells seashells by the seashore.',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'Hw mch wd wld  wdchck chck f  wdchck cld chck wd?',
270: 1:      'question': 'How much wood would a woodchuck chuck if a woodchuck could chuck wood?',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'll wrk nd n ply mks Jck  dll by.',
270: 1:      'question': 'All work and no play makes Jack a dull boy.',
270: 1:      'valid': true
270: 1:    },
270: 1:    {
270: 1:      'answer': 'Th ct n th ht hd  bt nd  ht.',
270: 1:      'question': 'The cat in the hat had a bat and a hat.',
270: 1:      'valid': true
270: 1:    }
270: 1:  ],
270: 1:  'info': [
270: 1:    '✅f(Hello World!!) = Hll Wrld!!',
270: 1:    '✅f(The quick brown fox jumps over the lazy dog.) = Th qck brwn fx jmps vr th lzy dg.',
270: 1:    '✅f(To be or not to be, that is the question.) = T b r nt t b, tht s th qstn.',
270: 1:    '✅f(The world is a book, and those who do not travel read only a page.) = Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
270: 1:    '✅f(The five boxing wizards jump quickly.) = Th fv bxng wzrds jmp qckly.',
270: 1:    '✅f(Why did the tomato turn red? Because it saw the salad dressing!) = Why dd th tmt trn rd? Bcs t sw th sld drssng!',
270: 1:    '✅f(She sells seashells by the seashore.) = Sh slls sshlls by th sshr.',
270: 1:    '✅f(How much wood would a woodchuck chuck if a woodchuck could chuck wood?) = Hw mch wd wld  wdchck chck f  wdchck cld chck wd?',
270: 1:    '✅f(All work and no play makes Jack a dull boy.) = ll wrk nd n ply mks Jck  dll by.',
270: 1:    '✅f(The cat in the hat had a bat and a hat.) = Th ct n th ht hd  bt nd  ht.',
270: 1:    '❌f(I before E except after C.) = ??? !=  bfr  xcpt ftr C.'
270: 1:  ],
270: 1:  'level': 9,
270: 1:  'nextQuestion': 'I before E except after C.',
270: 1:  'questions': [
270: 1:    'Hello World!!',
270: 1:    'The quick brown fox jumps over the lazy dog.',
270: 1:    'To be or not to be, that is the question.',
270: 1:    'The world is a book, and those who do not travel read only a page.',
270: 1:    'The five boxing wizards jump quickly.',
270: 1:    'Why did the tomato turn red? Because it saw the salad dressing!',
270: 1:    'She sells seashells by the seashore.',
270: 1:    'How much wood would a woodchuck chuck if a woodchuck could chuck wood?',
270: 1:    'All work and no play makes Jack a dull boy.',
270: 1:    'The cat in the hat had a bat and a hat.',
270: 1:    'I before E except after C.'
270: 1:  ]
270: 1:}
270: 1:Scores: 9855
270: 1:Answer: message('['Hll Wrld!!', 'Th qck brwn fx jmps vr th lzy dg.', 'T b r nt t b, tht s th qstn.', 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.', 'Th fv bxng wzrds jmp qckly.', 'Why dd th tmt trn rd? Bcs t sw th sld drssng!', 'Sh slls sshlls by th sshr.', 'Hw mch wd wld  wdchck chck f  wdchck cld chck wd?', 'll wrk nd n ply mks Jck  dll by.', 'Th ct n th ht hd  bt nd  ht.', ' bfr  xcpt ftr C.']')
270: 1:Fire Event: PassTest{complexity=13, testCount=13}
------------------------------------------
271: 1:BoardData {
271: 1:  'description': ['Oh my, it seems that trolls have taken over your comment section!\nHowever, fear not, for there is a simple solution to deal with these troublesome creatures.\nYou may remove all vowels from their comments, rendering them powerless.\nI implore you to create a function that can execute this task, for instance,\ntransforming \'This website is for losers LOL!\' into \'Ths wbst s fr lsrs LL!\'. \nPlease take note that for this exercise, the letter 'y' is not considered a vowel.'],
271: 1:  'expectedAnswer': 'Th rn n Spn stys mnly n th pln.',
271: 1:  'history': [
271: 1:    {
271: 1:      'answer': 'Hll Wrld!!',
271: 1:      'question': 'Hello World!!',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'Th qck brwn fx jmps vr th lzy dg.',
271: 1:      'question': 'The quick brown fox jumps over the lazy dog.',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'T b r nt t b, tht s th qstn.',
271: 1:      'question': 'To be or not to be, that is the question.',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
271: 1:      'question': 'The world is a book, and those who do not travel read only a page.',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'Th fv bxng wzrds jmp qckly.',
271: 1:      'question': 'The five boxing wizards jump quickly.',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'Why dd th tmt trn rd? Bcs t sw th sld drssng!',
271: 1:      'question': 'Why did the tomato turn red? Because it saw the salad dressing!',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'Sh slls sshlls by th sshr.',
271: 1:      'question': 'She sells seashells by the seashore.',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'Hw mch wd wld  wdchck chck f  wdchck cld chck wd?',
271: 1:      'question': 'How much wood would a woodchuck chuck if a woodchuck could chuck wood?',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'll wrk nd n ply mks Jck  dll by.',
271: 1:      'question': 'All work and no play makes Jack a dull boy.',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': 'Th ct n th ht hd  bt nd  ht.',
271: 1:      'question': 'The cat in the hat had a bat and a hat.',
271: 1:      'valid': true
271: 1:    },
271: 1:    {
271: 1:      'answer': ' bfr  xcpt ftr C.',
271: 1:      'question': 'I before E except after C.',
271: 1:      'valid': true
271: 1:    }
271: 1:  ],
271: 1:  'info': [
271: 1:    '✅f(Hello World!!) = Hll Wrld!!',
271: 1:    '✅f(The quick brown fox jumps over the lazy dog.) = Th qck brwn fx jmps vr th lzy dg.',
271: 1:    '✅f(To be or not to be, that is the question.) = T b r nt t b, tht s th qstn.',
271: 1:    '✅f(The world is a book, and those who do not travel read only a page.) = Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
271: 1:    '✅f(The five boxing wizards jump quickly.) = Th fv bxng wzrds jmp qckly.',
271: 1:    '✅f(Why did the tomato turn red? Because it saw the salad dressing!) = Why dd th tmt trn rd? Bcs t sw th sld drssng!',
271: 1:    '✅f(She sells seashells by the seashore.) = Sh slls sshlls by th sshr.',
271: 1:    '✅f(How much wood would a woodchuck chuck if a woodchuck could chuck wood?) = Hw mch wd wld  wdchck chck f  wdchck cld chck wd?',
271: 1:    '✅f(All work and no play makes Jack a dull boy.) = ll wrk nd n ply mks Jck  dll by.',
271: 1:    '✅f(The cat in the hat had a bat and a hat.) = Th ct n th ht hd  bt nd  ht.',
271: 1:    '✅f(I before E except after C.) =  bfr  xcpt ftr C.',
271: 1:    '❌f(The rain in Spain stays mainly in the plain.) = ??? != Th rn n Spn stys mnly n th pln.'
271: 1:  ],
271: 1:  'level': 9,
271: 1:  'nextQuestion': 'The rain in Spain stays mainly in the plain.',
271: 1:  'questions': [
271: 1:    'Hello World!!',
271: 1:    'The quick brown fox jumps over the lazy dog.',
271: 1:    'To be or not to be, that is the question.',
271: 1:    'The world is a book, and those who do not travel read only a page.',
271: 1:    'The five boxing wizards jump quickly.',
271: 1:    'Why did the tomato turn red? Because it saw the salad dressing!',
271: 1:    'She sells seashells by the seashore.',
271: 1:    'How much wood would a woodchuck chuck if a woodchuck could chuck wood?',
271: 1:    'All work and no play makes Jack a dull boy.',
271: 1:    'The cat in the hat had a bat and a hat.',
271: 1:    'I before E except after C.',
271: 1:    'The rain in Spain stays mainly in the plain.'
271: 1:  ]
271: 1:}
271: 1:Scores: 9865
271: 1:Answer: message('['Hll Wrld!!', 'Th qck brwn fx jmps vr th lzy dg.', 'T b r nt t b, tht s th qstn.', 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.', 'Th fv bxng wzrds jmp qckly.', 'Why dd th tmt trn rd? Bcs t sw th sld drssng!', 'Sh slls sshlls by th sshr.', 'Hw mch wd wld  wdchck chck f  wdchck cld chck wd?', 'll wrk nd n ply mks Jck  dll by.', 'Th ct n th ht hd  bt nd  ht.', ' bfr  xcpt ftr C.', 'Th rn n Spn stys mnly n th pln.']')
271: 1:Fire Event: PassTest{complexity=13, testCount=13}
------------------------------------------
272: 1:BoardData {
272: 1:  'description': ['Oh my, it seems that trolls have taken over your comment section!\nHowever, fear not, for there is a simple solution to deal with these troublesome creatures.\nYou may remove all vowels from their comments, rendering them powerless.\nI implore you to create a function that can execute this task, for instance,\ntransforming \'This website is for losers LOL!\' into \'Ths wbst s fr lsrs LL!\'. \nPlease take note that for this exercise, the letter 'y' is not considered a vowel.'],
272: 1:  'expectedAnswer': 'Sprclfrglstcxpldcs.',
272: 1:  'history': [
272: 1:    {
272: 1:      'answer': 'Hll Wrld!!',
272: 1:      'question': 'Hello World!!',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'Th qck brwn fx jmps vr th lzy dg.',
272: 1:      'question': 'The quick brown fox jumps over the lazy dog.',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'T b r nt t b, tht s th qstn.',
272: 1:      'question': 'To be or not to be, that is the question.',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
272: 1:      'question': 'The world is a book, and those who do not travel read only a page.',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'Th fv bxng wzrds jmp qckly.',
272: 1:      'question': 'The five boxing wizards jump quickly.',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'Why dd th tmt trn rd? Bcs t sw th sld drssng!',
272: 1:      'question': 'Why did the tomato turn red? Because it saw the salad dressing!',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'Sh slls sshlls by th sshr.',
272: 1:      'question': 'She sells seashells by the seashore.',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'Hw mch wd wld  wdchck chck f  wdchck cld chck wd?',
272: 1:      'question': 'How much wood would a woodchuck chuck if a woodchuck could chuck wood?',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'll wrk nd n ply mks Jck  dll by.',
272: 1:      'question': 'All work and no play makes Jack a dull boy.',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'Th ct n th ht hd  bt nd  ht.',
272: 1:      'question': 'The cat in the hat had a bat and a hat.',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': ' bfr  xcpt ftr C.',
272: 1:      'question': 'I before E except after C.',
272: 1:      'valid': true
272: 1:    },
272: 1:    {
272: 1:      'answer': 'Th rn n Spn stys mnly n th pln.',
272: 1:      'question': 'The rain in Spain stays mainly in the plain.',
272: 1:      'valid': true
272: 1:    }
272: 1:  ],
272: 1:  'info': [
272: 1:    '✅f(Hello World!!) = Hll Wrld!!',
272: 1:    '✅f(The quick brown fox jumps over the lazy dog.) = Th qck brwn fx jmps vr th lzy dg.',
272: 1:    '✅f(To be or not to be, that is the question.) = T b r nt t b, tht s th qstn.',
272: 1:    '✅f(The world is a book, and those who do not travel read only a page.) = Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
272: 1:    '✅f(The five boxing wizards jump quickly.) = Th fv bxng wzrds jmp qckly.',
272: 1:    '✅f(Why did the tomato turn red? Because it saw the salad dressing!) = Why dd th tmt trn rd? Bcs t sw th sld drssng!',
272: 1:    '✅f(She sells seashells by the seashore.) = Sh slls sshlls by th sshr.',
272: 1:    '✅f(How much wood would a woodchuck chuck if a woodchuck could chuck wood?) = Hw mch wd wld  wdchck chck f  wdchck cld chck wd?',
272: 1:    '✅f(All work and no play makes Jack a dull boy.) = ll wrk nd n ply mks Jck  dll by.',
272: 1:    '✅f(The cat in the hat had a bat and a hat.) = Th ct n th ht hd  bt nd  ht.',
272: 1:    '✅f(I before E except after C.) =  bfr  xcpt ftr C.',
272: 1:    '✅f(The rain in Spain stays mainly in the plain.) = Th rn n Spn stys mnly n th pln.',
272: 1:    '❌f(Supercalifragilisticexpialidocious.) = ??? != Sprclfrglstcxpldcs.'
272: 1:  ],
272: 1:  'level': 9,
272: 1:  'nextQuestion': 'Supercalifragilisticexpialidocious.',
272: 1:  'questions': [
272: 1:    'Hello World!!',
272: 1:    'The quick brown fox jumps over the lazy dog.',
272: 1:    'To be or not to be, that is the question.',
272: 1:    'The world is a book, and those who do not travel read only a page.',
272: 1:    'The five boxing wizards jump quickly.',
272: 1:    'Why did the tomato turn red? Because it saw the salad dressing!',
272: 1:    'She sells seashells by the seashore.',
272: 1:    'How much wood would a woodchuck chuck if a woodchuck could chuck wood?',
272: 1:    'All work and no play makes Jack a dull boy.',
272: 1:    'The cat in the hat had a bat and a hat.',
272: 1:    'I before E except after C.',
272: 1:    'The rain in Spain stays mainly in the plain.',
272: 1:    'Supercalifragilisticexpialidocious.'
272: 1:  ]
272: 1:}
272: 1:Scores: 9875
272: 1:Answer: message('['Hll Wrld!!', 'Th qck brwn fx jmps vr th lzy dg.', 'T b r nt t b, tht s th qstn.', 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.', 'Th fv bxng wzrds jmp qckly.', 'Why dd th tmt trn rd? Bcs t sw th sld drssng!', 'Sh slls sshlls by th sshr.', 'Hw mch wd wld  wdchck chck f  wdchck cld chck wd?', 'll wrk nd n ply mks Jck  dll by.', 'Th ct n th ht hd  bt nd  ht.', ' bfr  xcpt ftr C.', 'Th rn n Spn stys mnly n th pln.', 'Sprclfrglstcxpldcs.']')
272: 1:Fire Event: PassTest{complexity=13, testCount=13}
272: 1:Fire Event: NextAlgorithm{complexity=13, time=0}
------------------------------------------
273: 1:BoardData {
273: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
273: 1:  'history': [
273: 1:    {
273: 1:      'answer': 'Hll Wrld!!',
273: 1:      'question': 'Hello World!!',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'Th qck brwn fx jmps vr th lzy dg.',
273: 1:      'question': 'The quick brown fox jumps over the lazy dog.',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'T b r nt t b, tht s th qstn.',
273: 1:      'question': 'To be or not to be, that is the question.',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
273: 1:      'question': 'The world is a book, and those who do not travel read only a page.',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'Th fv bxng wzrds jmp qckly.',
273: 1:      'question': 'The five boxing wizards jump quickly.',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'Why dd th tmt trn rd? Bcs t sw th sld drssng!',
273: 1:      'question': 'Why did the tomato turn red? Because it saw the salad dressing!',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'Sh slls sshlls by th sshr.',
273: 1:      'question': 'She sells seashells by the seashore.',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'Hw mch wd wld  wdchck chck f  wdchck cld chck wd?',
273: 1:      'question': 'How much wood would a woodchuck chuck if a woodchuck could chuck wood?',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'll wrk nd n ply mks Jck  dll by.',
273: 1:      'question': 'All work and no play makes Jack a dull boy.',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'Th ct n th ht hd  bt nd  ht.',
273: 1:      'question': 'The cat in the hat had a bat and a hat.',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': ' bfr  xcpt ftr C.',
273: 1:      'question': 'I before E except after C.',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'Th rn n Spn stys mnly n th pln.',
273: 1:      'question': 'The rain in Spain stays mainly in the plain.',
273: 1:      'valid': true
273: 1:    },
273: 1:    {
273: 1:      'answer': 'Sprclfrglstcxpldcs.',
273: 1:      'question': 'Supercalifragilisticexpialidocious.',
273: 1:      'valid': true
273: 1:    }
273: 1:  ],
273: 1:  'info': [
273: 1:    '✅f(Hello World!!) = Hll Wrld!!',
273: 1:    '✅f(The quick brown fox jumps over the lazy dog.) = Th qck brwn fx jmps vr th lzy dg.',
273: 1:    '✅f(To be or not to be, that is the question.) = T b r nt t b, tht s th qstn.',
273: 1:    '✅f(The world is a book, and those who do not travel read only a page.) = Th wrld s  bk, nd ths wh d nt trvl rd nly  pg.',
273: 1:    '✅f(The five boxing wizards jump quickly.) = Th fv bxng wzrds jmp qckly.',
273: 1:    '✅f(Why did the tomato turn red? Because it saw the salad dressing!) = Why dd th tmt trn rd? Bcs t sw th sld drssng!',
273: 1:    '✅f(She sells seashells by the seashore.) = Sh slls sshlls by th sshr.',
273: 1:    '✅f(How much wood would a woodchuck chuck if a woodchuck could chuck wood?) = Hw mch wd wld  wdchck chck f  wdchck cld chck wd?',
273: 1:    '✅f(All work and no play makes Jack a dull boy.) = ll wrk nd n ply mks Jck  dll by.',
273: 1:    '✅f(The cat in the hat had a bat and a hat.) = Th ct n th ht hd  bt nd  ht.',
273: 1:    '✅f(I before E except after C.) =  bfr  xcpt ftr C.',
273: 1:    '✅f(The rain in Spain stays mainly in the plain.) = Th rn n Spn stys mnly n th pln.',
273: 1:    '✅f(Supercalifragilisticexpialidocious.) = Sprclfrglstcxpldcs.'
273: 1:  ],
273: 1:  'level': 9,
273: 1:  'questions': []
273: 1:}
273: 1:Scores: 11639
273: 1:Answer: message('StartNextLevel')
273: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
274: 1:BoardData {
274: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
274: 1:  'expectedAnswer': 'true',
274: 1:  'history': [],
274: 1:  'info': ['❌f(ooxx) = ??? != true'],
274: 1:  'level': 10,
274: 1:  'nextQuestion': 'ooxx',
274: 1:  'questions': ['ooxx']
274: 1:}
274: 1:Scores: 11639
274: 1:Answer: message('['true']')
274: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
275: 1:BoardData {
275: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
275: 1:  'expectedAnswer': 'false',
275: 1:  'history': [{
275: 1:    'answer': 'true',
275: 1:    'question': 'ooxx',
275: 1:    'valid': true
275: 1:  }],
275: 1:  'info': [
275: 1:    '✅f(ooxx) = true',
275: 1:    '❌f(xooxx) = ??? != false'
275: 1:  ],
275: 1:  'level': 10,
275: 1:  'nextQuestion': 'xooxx',
275: 1:  'questions': [
275: 1:    'ooxx',
275: 1:    'xooxx'
275: 1:  ]
275: 1:}
275: 1:Scores: 11642
275: 1:Answer: message('['true', 'false']')
275: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
276: 1:BoardData {
276: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
276: 1:  'expectedAnswer': 'true',
276: 1:  'history': [
276: 1:    {
276: 1:      'answer': 'true',
276: 1:      'question': 'ooxx',
276: 1:      'valid': true
276: 1:    },
276: 1:    {
276: 1:      'answer': 'false',
276: 1:      'question': 'xooxx',
276: 1:      'valid': true
276: 1:    }
276: 1:  ],
276: 1:  'info': [
276: 1:    '✅f(ooxx) = true',
276: 1:    '✅f(xooxx) = false',
276: 1:    '❌f(ooxXm) = ??? != true'
276: 1:  ],
276: 1:  'level': 10,
276: 1:  'nextQuestion': 'ooxXm',
276: 1:  'questions': [
276: 1:    'ooxx',
276: 1:    'xooxx',
276: 1:    'ooxXm'
276: 1:  ]
276: 1:}
276: 1:Scores: 11645
276: 1:Answer: message('['true', 'false', 'true']')
276: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
277: 1:BoardData {
277: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
277: 1:  'expectedAnswer': 'true',
277: 1:  'history': [
277: 1:    {
277: 1:      'answer': 'true',
277: 1:      'question': 'ooxx',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'false',
277: 1:      'question': 'xooxx',
277: 1:      'valid': true
277: 1:    },
277: 1:    {
277: 1:      'answer': 'true',
277: 1:      'question': 'ooxXm',
277: 1:      'valid': true
277: 1:    }
277: 1:  ],
277: 1:  'info': [
277: 1:    '✅f(ooxx) = true',
277: 1:    '✅f(xooxx) = false',
277: 1:    '✅f(ooxXm) = true',
277: 1:    '❌f(zpzpzpp) = ??? != true'
277: 1:  ],
277: 1:  'level': 10,
277: 1:  'nextQuestion': 'zpzpzpp',
277: 1:  'questions': [
277: 1:    'ooxx',
277: 1:    'xooxx',
277: 1:    'ooxXm',
277: 1:    'zpzpzpp'
277: 1:  ]
277: 1:}
277: 1:Scores: 11648
277: 1:Answer: message('['true', 'false', 'true', 'true']')
277: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
278: 1:BoardData {
278: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
278: 1:  'expectedAnswer': 'false',
278: 1:  'history': [
278: 1:    {
278: 1:      'answer': 'true',
278: 1:      'question': 'ooxx',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'false',
278: 1:      'question': 'xooxx',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'true',
278: 1:      'question': 'ooxXm',
278: 1:      'valid': true
278: 1:    },
278: 1:    {
278: 1:      'answer': 'true',
278: 1:      'question': 'zpzpzpp',
278: 1:      'valid': true
278: 1:    }
278: 1:  ],
278: 1:  'info': [
278: 1:    '✅f(ooxx) = true',
278: 1:    '✅f(xooxx) = false',
278: 1:    '✅f(ooxXm) = true',
278: 1:    '✅f(zpzpzpp) = true',
278: 1:    '❌f(zzoo) = ??? != false'
278: 1:  ],
278: 1:  'level': 10,
278: 1:  'nextQuestion': 'zzoo',
278: 1:  'questions': [
278: 1:    'ooxx',
278: 1:    'xooxx',
278: 1:    'ooxXm',
278: 1:    'zpzpzpp',
278: 1:    'zzoo'
278: 1:  ]
278: 1:}
278: 1:Scores: 11651
278: 1:Answer: message('['true', 'false', 'true', 'true', 'false']')
278: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
279: 1:BoardData {
279: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
279: 1:  'expectedAnswer': 'true',
279: 1:  'history': [
279: 1:    {
279: 1:      'answer': 'true',
279: 1:      'question': 'ooxx',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'false',
279: 1:      'question': 'xooxx',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'true',
279: 1:      'question': 'ooxXm',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'true',
279: 1:      'question': 'zpzpzpp',
279: 1:      'valid': true
279: 1:    },
279: 1:    {
279: 1:      'answer': 'false',
279: 1:      'question': 'zzoo',
279: 1:      'valid': true
279: 1:    }
279: 1:  ],
279: 1:  'info': [
279: 1:    '✅f(ooxx) = true',
279: 1:    '✅f(xooxx) = false',
279: 1:    '✅f(ooxXm) = true',
279: 1:    '✅f(zpzpzpp) = true',
279: 1:    '✅f(zzoo) = false',
279: 1:    '❌f(xxxooo) = ??? != true'
279: 1:  ],
279: 1:  'level': 10,
279: 1:  'nextQuestion': 'xxxooo',
279: 1:  'questions': [
279: 1:    'ooxx',
279: 1:    'xooxx',
279: 1:    'ooxXm',
279: 1:    'zpzpzpp',
279: 1:    'zzoo',
279: 1:    'xxxooo'
279: 1:  ]
279: 1:}
279: 1:Scores: 11654
279: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true']')
279: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
280: 1:BoardData {
280: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
280: 1:  'expectedAnswer': 'true',
280: 1:  'history': [
280: 1:    {
280: 1:      'answer': 'true',
280: 1:      'question': 'ooxx',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'false',
280: 1:      'question': 'xooxx',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'true',
280: 1:      'question': 'ooxXm',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'true',
280: 1:      'question': 'zpzpzpp',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'false',
280: 1:      'question': 'zzoo',
280: 1:      'valid': true
280: 1:    },
280: 1:    {
280: 1:      'answer': 'true',
280: 1:      'question': 'xxxooo',
280: 1:      'valid': true
280: 1:    }
280: 1:  ],
280: 1:  'info': [
280: 1:    '✅f(ooxx) = true',
280: 1:    '✅f(xooxx) = false',
280: 1:    '✅f(ooxXm) = true',
280: 1:    '✅f(zpzpzpp) = true',
280: 1:    '✅f(zzoo) = false',
280: 1:    '✅f(xxxooo) = true',
280: 1:    '❌f(xxxXooOo) = ??? != true'
280: 1:  ],
280: 1:  'level': 10,
280: 1:  'nextQuestion': 'xxxXooOo',
280: 1:  'questions': [
280: 1:    'ooxx',
280: 1:    'xooxx',
280: 1:    'ooxXm',
280: 1:    'zpzpzpp',
280: 1:    'zzoo',
280: 1:    'xxxooo',
280: 1:    'xxxXooOo'
280: 1:  ]
280: 1:}
280: 1:Scores: 11657
280: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true']')
280: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
281: 1:BoardData {
281: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
281: 1:  'expectedAnswer': 'false',
281: 1:  'history': [
281: 1:    {
281: 1:      'answer': 'true',
281: 1:      'question': 'ooxx',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'false',
281: 1:      'question': 'xooxx',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'true',
281: 1:      'question': 'ooxXm',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'true',
281: 1:      'question': 'zpzpzpp',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'false',
281: 1:      'question': 'zzoo',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'true',
281: 1:      'question': 'xxxooo',
281: 1:      'valid': true
281: 1:    },
281: 1:    {
281: 1:      'answer': 'true',
281: 1:      'question': 'xxxXooOo',
281: 1:      'valid': true
281: 1:    }
281: 1:  ],
281: 1:  'info': [
281: 1:    '✅f(ooxx) = true',
281: 1:    '✅f(xooxx) = false',
281: 1:    '✅f(ooxXm) = true',
281: 1:    '✅f(zpzpzpp) = true',
281: 1:    '✅f(zzoo) = false',
281: 1:    '✅f(xxxooo) = true',
281: 1:    '✅f(xxxXooOo) = true',
281: 1:    '❌f(xxx23424esdsfvxXXOOooo) = ??? != false'
281: 1:  ],
281: 1:  'level': 10,
281: 1:  'nextQuestion': 'xxx23424esdsfvxXXOOooo',
281: 1:  'questions': [
281: 1:    'ooxx',
281: 1:    'xooxx',
281: 1:    'ooxXm',
281: 1:    'zpzpzpp',
281: 1:    'zzoo',
281: 1:    'xxxooo',
281: 1:    'xxxXooOo',
281: 1:    'xxx23424esdsfvxXXOOooo'
281: 1:  ]
281: 1:}
281: 1:Scores: 11660
281: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false']')
281: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
282: 1:BoardData {
282: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
282: 1:  'expectedAnswer': 'false',
282: 1:  'history': [
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': 'ooxx',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'false',
282: 1:      'question': 'xooxx',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': 'ooxXm',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': 'zpzpzpp',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'false',
282: 1:      'question': 'zzoo',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': 'xxxooo',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'true',
282: 1:      'question': 'xxxXooOo',
282: 1:      'valid': true
282: 1:    },
282: 1:    {
282: 1:      'answer': 'false',
282: 1:      'question': 'xxx23424esdsfvxXXOOooo',
282: 1:      'valid': true
282: 1:    }
282: 1:  ],
282: 1:  'info': [
282: 1:    '✅f(ooxx) = true',
282: 1:    '✅f(xooxx) = false',
282: 1:    '✅f(ooxXm) = true',
282: 1:    '✅f(zpzpzpp) = true',
282: 1:    '✅f(zzoo) = false',
282: 1:    '✅f(xxxooo) = true',
282: 1:    '✅f(xxxXooOo) = true',
282: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
282: 1:    '❌f(xXxxoewrcoOoo) = ??? != false'
282: 1:  ],
282: 1:  'level': 10,
282: 1:  'nextQuestion': 'xXxxoewrcoOoo',
282: 1:  'questions': [
282: 1:    'ooxx',
282: 1:    'xooxx',
282: 1:    'ooxXm',
282: 1:    'zpzpzpp',
282: 1:    'zzoo',
282: 1:    'xxxooo',
282: 1:    'xxxXooOo',
282: 1:    'xxx23424esdsfvxXXOOooo',
282: 1:    'xXxxoewrcoOoo'
282: 1:  ]
282: 1:}
282: 1:Scores: 11663
282: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false']')
282: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
283: 1:BoardData {
283: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
283: 1:  'expectedAnswer': 'false',
283: 1:  'history': [
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': 'ooxx',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'false',
283: 1:      'question': 'xooxx',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': 'ooxXm',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': 'zpzpzpp',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'false',
283: 1:      'question': 'zzoo',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': 'xxxooo',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'true',
283: 1:      'question': 'xxxXooOo',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'false',
283: 1:      'question': 'xxx23424esdsfvxXXOOooo',
283: 1:      'valid': true
283: 1:    },
283: 1:    {
283: 1:      'answer': 'false',
283: 1:      'question': 'xXxxoewrcoOoo',
283: 1:      'valid': true
283: 1:    }
283: 1:  ],
283: 1:  'info': [
283: 1:    '✅f(ooxx) = true',
283: 1:    '✅f(xooxx) = false',
283: 1:    '✅f(ooxXm) = true',
283: 1:    '✅f(zpzpzpp) = true',
283: 1:    '✅f(zzoo) = false',
283: 1:    '✅f(xxxooo) = true',
283: 1:    '✅f(xxxXooOo) = true',
283: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
283: 1:    '✅f(xXxxoewrcoOoo) = false',
283: 1:    '❌f(XxxxooO) = ??? != false'
283: 1:  ],
283: 1:  'level': 10,
283: 1:  'nextQuestion': 'XxxxooO',
283: 1:  'questions': [
283: 1:    'ooxx',
283: 1:    'xooxx',
283: 1:    'ooxXm',
283: 1:    'zpzpzpp',
283: 1:    'zzoo',
283: 1:    'xxxooo',
283: 1:    'xxxXooOo',
283: 1:    'xxx23424esdsfvxXXOOooo',
283: 1:    'xXxxoewrcoOoo',
283: 1:    'XxxxooO'
283: 1:  ]
283: 1:}
283: 1:Scores: 11666
283: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false']')
283: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
284: 1:BoardData {
284: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
284: 1:  'expectedAnswer': 'true',
284: 1:  'history': [
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': 'ooxx',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'false',
284: 1:      'question': 'xooxx',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': 'ooxXm',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': 'zpzpzpp',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'false',
284: 1:      'question': 'zzoo',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': 'xxxooo',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'true',
284: 1:      'question': 'xxxXooOo',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'false',
284: 1:      'question': 'xxx23424esdsfvxXXOOooo',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'false',
284: 1:      'question': 'xXxxoewrcoOoo',
284: 1:      'valid': true
284: 1:    },
284: 1:    {
284: 1:      'answer': 'false',
284: 1:      'question': 'XxxxooO',
284: 1:      'valid': true
284: 1:    }
284: 1:  ],
284: 1:  'info': [
284: 1:    '✅f(ooxx) = true',
284: 1:    '✅f(xooxx) = false',
284: 1:    '✅f(ooxXm) = true',
284: 1:    '✅f(zpzpzpp) = true',
284: 1:    '✅f(zzoo) = false',
284: 1:    '✅f(xxxooo) = true',
284: 1:    '✅f(xxxXooOo) = true',
284: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
284: 1:    '✅f(xXxxoewrcoOoo) = false',
284: 1:    '✅f(XxxxooO) = false',
284: 1:    '❌f(zssddd) = ??? != true'
284: 1:  ],
284: 1:  'level': 10,
284: 1:  'nextQuestion': 'zssddd',
284: 1:  'questions': [
284: 1:    'ooxx',
284: 1:    'xooxx',
284: 1:    'ooxXm',
284: 1:    'zpzpzpp',
284: 1:    'zzoo',
284: 1:    'xxxooo',
284: 1:    'xxxXooOo',
284: 1:    'xxx23424esdsfvxXXOOooo',
284: 1:    'xXxxoewrcoOoo',
284: 1:    'XxxxooO',
284: 1:    'zssddd'
284: 1:  ]
284: 1:}
284: 1:Scores: 11669
284: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true']')
284: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
285: 1:BoardData {
285: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
285: 1:  'expectedAnswer': 'false',
285: 1:  'history': [
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': 'ooxx',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'false',
285: 1:      'question': 'xooxx',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': 'ooxXm',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': 'zpzpzpp',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'false',
285: 1:      'question': 'zzoo',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': 'xxxooo',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': 'xxxXooOo',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'false',
285: 1:      'question': 'xxx23424esdsfvxXXOOooo',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'false',
285: 1:      'question': 'xXxxoewrcoOoo',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'false',
285: 1:      'question': 'XxxxooO',
285: 1:      'valid': true
285: 1:    },
285: 1:    {
285: 1:      'answer': 'true',
285: 1:      'question': 'zssddd',
285: 1:      'valid': true
285: 1:    }
285: 1:  ],
285: 1:  'info': [
285: 1:    '✅f(ooxx) = true',
285: 1:    '✅f(xooxx) = false',
285: 1:    '✅f(ooxXm) = true',
285: 1:    '✅f(zpzpzpp) = true',
285: 1:    '✅f(zzoo) = false',
285: 1:    '✅f(xxxooo) = true',
285: 1:    '✅f(xxxXooOo) = true',
285: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
285: 1:    '✅f(xXxxoewrcoOoo) = false',
285: 1:    '✅f(XxxxooO) = false',
285: 1:    '✅f(zssddd) = true',
285: 1:    '❌f(Xxxxertr34) = ??? != false'
285: 1:  ],
285: 1:  'level': 10,
285: 1:  'nextQuestion': 'Xxxxertr34',
285: 1:  'questions': [
285: 1:    'ooxx',
285: 1:    'xooxx',
285: 1:    'ooxXm',
285: 1:    'zpzpzpp',
285: 1:    'zzoo',
285: 1:    'xxxooo',
285: 1:    'xxxXooOo',
285: 1:    'xxx23424esdsfvxXXOOooo',
285: 1:    'xXxxoewrcoOoo',
285: 1:    'XxxxooO',
285: 1:    'zssddd',
285: 1:    'Xxxxertr34'
285: 1:  ]
285: 1:}
285: 1:Scores: 11672
285: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false']')
285: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
286: 1:BoardData {
286: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
286: 1:  'expectedAnswer': 'true',
286: 1:  'history': [
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': 'ooxx',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'false',
286: 1:      'question': 'xooxx',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': 'ooxXm',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': 'zpzpzpp',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'false',
286: 1:      'question': 'zzoo',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': 'xxxooo',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': 'xxxXooOo',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'false',
286: 1:      'question': 'xxx23424esdsfvxXXOOooo',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'false',
286: 1:      'question': 'xXxxoewrcoOoo',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'false',
286: 1:      'question': 'XxxxooO',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'true',
286: 1:      'question': 'zssddd',
286: 1:      'valid': true
286: 1:    },
286: 1:    {
286: 1:      'answer': 'false',
286: 1:      'question': 'Xxxxertr34',
286: 1:      'valid': true
286: 1:    }
286: 1:  ],
286: 1:  'info': [
286: 1:    '✅f(ooxx) = true',
286: 1:    '✅f(xooxx) = false',
286: 1:    '✅f(ooxXm) = true',
286: 1:    '✅f(zpzpzpp) = true',
286: 1:    '✅f(zzoo) = false',
286: 1:    '✅f(xxxooo) = true',
286: 1:    '✅f(xxxXooOo) = true',
286: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
286: 1:    '✅f(xXxxoewrcoOoo) = false',
286: 1:    '✅f(XxxxooO) = false',
286: 1:    '✅f(zssddd) = true',
286: 1:    '✅f(Xxxxertr34) = false',
286: 1:    '❌f(xXoXOFo) = ??? != true'
286: 1:  ],
286: 1:  'level': 10,
286: 1:  'nextQuestion': 'xXoXOFo',
286: 1:  'questions': [
286: 1:    'ooxx',
286: 1:    'xooxx',
286: 1:    'ooxXm',
286: 1:    'zpzpzpp',
286: 1:    'zzoo',
286: 1:    'xxxooo',
286: 1:    'xxxXooOo',
286: 1:    'xxx23424esdsfvxXXOOooo',
286: 1:    'xXxxoewrcoOoo',
286: 1:    'XxxxooO',
286: 1:    'zssddd',
286: 1:    'Xxxxertr34',
286: 1:    'xXoXOFo'
286: 1:  ]
286: 1:}
286: 1:Scores: 11675
286: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true']')
286: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
287: 1:BoardData {
287: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
287: 1:  'expectedAnswer': 'false',
287: 1:  'history': [
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': 'ooxx',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'false',
287: 1:      'question': 'xooxx',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': 'ooxXm',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': 'zpzpzpp',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'false',
287: 1:      'question': 'zzoo',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': 'xxxooo',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': 'xxxXooOo',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'false',
287: 1:      'question': 'xxx23424esdsfvxXXOOooo',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'false',
287: 1:      'question': 'xXxxoewrcoOoo',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'false',
287: 1:      'question': 'XxxxooO',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': 'zssddd',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'false',
287: 1:      'question': 'Xxxxertr34',
287: 1:      'valid': true
287: 1:    },
287: 1:    {
287: 1:      'answer': 'true',
287: 1:      'question': 'xXoXOFo',
287: 1:      'valid': true
287: 1:    }
287: 1:  ],
287: 1:  'info': [
287: 1:    '✅f(ooxx) = true',
287: 1:    '✅f(xooxx) = false',
287: 1:    '✅f(ooxXm) = true',
287: 1:    '✅f(zpzpzpp) = true',
287: 1:    '✅f(zzoo) = false',
287: 1:    '✅f(xxxooo) = true',
287: 1:    '✅f(xxxXooOo) = true',
287: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
287: 1:    '✅f(xXxxoewrcoOoo) = false',
287: 1:    '✅f(XxxxooO) = false',
287: 1:    '✅f(zssddd) = true',
287: 1:    '✅f(Xxxxertr34) = false',
287: 1:    '✅f(xXoXOFo) = true',
287: 1:    '❌f(ooXXoOO) = ??? != false'
287: 1:  ],
287: 1:  'level': 10,
287: 1:  'nextQuestion': 'ooXXoOO',
287: 1:  'questions': [
287: 1:    'ooxx',
287: 1:    'xooxx',
287: 1:    'ooxXm',
287: 1:    'zpzpzpp',
287: 1:    'zzoo',
287: 1:    'xxxooo',
287: 1:    'xxxXooOo',
287: 1:    'xxx23424esdsfvxXXOOooo',
287: 1:    'xXxxoewrcoOoo',
287: 1:    'XxxxooO',
287: 1:    'zssddd',
287: 1:    'Xxxxertr34',
287: 1:    'xXoXOFo',
287: 1:    'ooXXoOO'
287: 1:  ]
287: 1:}
287: 1:Scores: 11678
287: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false']')
287: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
288: 1:BoardData {
288: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
288: 1:  'expectedAnswer': 'false',
288: 1:  'history': [
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': 'ooxx',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'false',
288: 1:      'question': 'xooxx',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': 'ooxXm',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': 'zpzpzpp',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'false',
288: 1:      'question': 'zzoo',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': 'xxxooo',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': 'xxxXooOo',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'false',
288: 1:      'question': 'xxx23424esdsfvxXXOOooo',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'false',
288: 1:      'question': 'xXxxoewrcoOoo',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'false',
288: 1:      'question': 'XxxxooO',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': 'zssddd',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'false',
288: 1:      'question': 'Xxxxertr34',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'true',
288: 1:      'question': 'xXoXOFo',
288: 1:      'valid': true
288: 1:    },
288: 1:    {
288: 1:      'answer': 'false',
288: 1:      'question': 'ooXXoOO',
288: 1:      'valid': true
288: 1:    }
288: 1:  ],
288: 1:  'info': [
288: 1:    '✅f(ooxx) = true',
288: 1:    '✅f(xooxx) = false',
288: 1:    '✅f(ooxXm) = true',
288: 1:    '✅f(zpzpzpp) = true',
288: 1:    '✅f(zzoo) = false',
288: 1:    '✅f(xxxooo) = true',
288: 1:    '✅f(xxxXooOo) = true',
288: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
288: 1:    '✅f(xXxxoewrcoOoo) = false',
288: 1:    '✅f(XxxxooO) = false',
288: 1:    '✅f(zssddd) = true',
288: 1:    '✅f(Xxxxertr34) = false',
288: 1:    '✅f(xXoXOFo) = true',
288: 1:    '✅f(ooXXoOO) = false',
288: 1:    '❌f(RXT0oo) = ??? != false'
288: 1:  ],
288: 1:  'level': 10,
288: 1:  'nextQuestion': 'RXT0oo',
288: 1:  'questions': [
288: 1:    'ooxx',
288: 1:    'xooxx',
288: 1:    'ooxXm',
288: 1:    'zpzpzpp',
288: 1:    'zzoo',
288: 1:    'xxxooo',
288: 1:    'xxxXooOo',
288: 1:    'xxx23424esdsfvxXXOOooo',
288: 1:    'xXxxoewrcoOoo',
288: 1:    'XxxxooO',
288: 1:    'zssddd',
288: 1:    'Xxxxertr34',
288: 1:    'xXoXOFo',
288: 1:    'ooXXoOO',
288: 1:    'RXT0oo'
288: 1:  ]
288: 1:}
288: 1:Scores: 11681
288: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false']')
288: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
289: 1:BoardData {
289: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
289: 1:  'expectedAnswer': 'false',
289: 1:  'history': [
289: 1:    {
289: 1:      'answer': 'true',
289: 1:      'question': 'ooxx',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'false',
289: 1:      'question': 'xooxx',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'true',
289: 1:      'question': 'ooxXm',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'true',
289: 1:      'question': 'zpzpzpp',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'false',
289: 1:      'question': 'zzoo',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'true',
289: 1:      'question': 'xxxooo',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'true',
289: 1:      'question': 'xxxXooOo',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'false',
289: 1:      'question': 'xxx23424esdsfvxXXOOooo',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'false',
289: 1:      'question': 'xXxxoewrcoOoo',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'false',
289: 1:      'question': 'XxxxooO',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'true',
289: 1:      'question': 'zssddd',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'false',
289: 1:      'question': 'Xxxxertr34',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'true',
289: 1:      'question': 'xXoXOFo',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'false',
289: 1:      'question': 'ooXXoOO',
289: 1:      'valid': true
289: 1:    },
289: 1:    {
289: 1:      'answer': 'false',
289: 1:      'question': 'RXT0oo',
289: 1:      'valid': true
289: 1:    }
289: 1:  ],
289: 1:  'info': [
289: 1:    '✅f(ooxx) = true',
289: 1:    '✅f(xooxx) = false',
289: 1:    '✅f(ooxXm) = true',
289: 1:    '✅f(zpzpzpp) = true',
289: 1:    '✅f(zzoo) = false',
289: 1:    '✅f(xxxooo) = true',
289: 1:    '✅f(xxxXooOo) = true',
289: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
289: 1:    '✅f(xXxxoewrcoOoo) = false',
289: 1:    '✅f(XxxxooO) = false',
289: 1:    '✅f(zssddd) = true',
289: 1:    '✅f(Xxxxertr34) = false',
289: 1:    '✅f(xXoXOFo) = true',
289: 1:    '✅f(ooXXoOO) = false',
289: 1:    '✅f(RXT0oo) = false',
289: 1:    '❌f(XXOAB0oxXx) = ??? != false'
289: 1:  ],
289: 1:  'level': 10,
289: 1:  'nextQuestion': 'XXOAB0oxXx',
289: 1:  'questions': [
289: 1:    'ooxx',
289: 1:    'xooxx',
289: 1:    'ooxXm',
289: 1:    'zpzpzpp',
289: 1:    'zzoo',
289: 1:    'xxxooo',
289: 1:    'xxxXooOo',
289: 1:    'xxx23424esdsfvxXXOOooo',
289: 1:    'xXxxoewrcoOoo',
289: 1:    'XxxxooO',
289: 1:    'zssddd',
289: 1:    'Xxxxertr34',
289: 1:    'xXoXOFo',
289: 1:    'ooXXoOO',
289: 1:    'RXT0oo',
289: 1:    'XXOAB0oxXx'
289: 1:  ]
289: 1:}
289: 1:Scores: 11684
289: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false']')
289: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
290: 1:BoardData {
290: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
290: 1:  'expectedAnswer': 'false',
290: 1:  'history': [
290: 1:    {
290: 1:      'answer': 'true',
290: 1:      'question': 'ooxx',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'false',
290: 1:      'question': 'xooxx',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'true',
290: 1:      'question': 'ooxXm',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'true',
290: 1:      'question': 'zpzpzpp',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'false',
290: 1:      'question': 'zzoo',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'true',
290: 1:      'question': 'xxxooo',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'true',
290: 1:      'question': 'xxxXooOo',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'false',
290: 1:      'question': 'xxx23424esdsfvxXXOOooo',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'false',
290: 1:      'question': 'xXxxoewrcoOoo',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'false',
290: 1:      'question': 'XxxxooO',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'true',
290: 1:      'question': 'zssddd',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'false',
290: 1:      'question': 'Xxxxertr34',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'true',
290: 1:      'question': 'xXoXOFo',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'false',
290: 1:      'question': 'ooXXoOO',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'false',
290: 1:      'question': 'RXT0oo',
290: 1:      'valid': true
290: 1:    },
290: 1:    {
290: 1:      'answer': 'false',
290: 1:      'question': 'XXOAB0oxXx',
290: 1:      'valid': true
290: 1:    }
290: 1:  ],
290: 1:  'info': [
290: 1:    '✅f(ooxx) = true',
290: 1:    '✅f(xooxx) = false',
290: 1:    '✅f(ooxXm) = true',
290: 1:    '✅f(zpzpzpp) = true',
290: 1:    '✅f(zzoo) = false',
290: 1:    '✅f(xxxooo) = true',
290: 1:    '✅f(xxxXooOo) = true',
290: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
290: 1:    '✅f(xXxxoewrcoOoo) = false',
290: 1:    '✅f(XxxxooO) = false',
290: 1:    '✅f(zssddd) = true',
290: 1:    '✅f(Xxxxertr34) = false',
290: 1:    '✅f(xXoXOFo) = true',
290: 1:    '✅f(ooXXoOO) = false',
290: 1:    '✅f(RXT0oo) = false',
290: 1:    '✅f(XXOAB0oxXx) = false',
290: 1:    '❌f(JxXAO) = ??? != false'
290: 1:  ],
290: 1:  'level': 10,
290: 1:  'nextQuestion': 'JxXAO',
290: 1:  'questions': [
290: 1:    'ooxx',
290: 1:    'xooxx',
290: 1:    'ooxXm',
290: 1:    'zpzpzpp',
290: 1:    'zzoo',
290: 1:    'xxxooo',
290: 1:    'xxxXooOo',
290: 1:    'xxx23424esdsfvxXXOOooo',
290: 1:    'xXxxoewrcoOoo',
290: 1:    'XxxxooO',
290: 1:    'zssddd',
290: 1:    'Xxxxertr34',
290: 1:    'xXoXOFo',
290: 1:    'ooXXoOO',
290: 1:    'RXT0oo',
290: 1:    'XXOAB0oxXx',
290: 1:    'JxXAO'
290: 1:  ]
290: 1:}
290: 1:Scores: 11687
290: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false']')
290: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
291: 1:BoardData {
291: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
291: 1:  'expectedAnswer': 'false',
291: 1:  'history': [
291: 1:    {
291: 1:      'answer': 'true',
291: 1:      'question': 'ooxx',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'false',
291: 1:      'question': 'xooxx',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'true',
291: 1:      'question': 'ooxXm',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'true',
291: 1:      'question': 'zpzpzpp',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'false',
291: 1:      'question': 'zzoo',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'true',
291: 1:      'question': 'xxxooo',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'true',
291: 1:      'question': 'xxxXooOo',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'false',
291: 1:      'question': 'xxx23424esdsfvxXXOOooo',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'false',
291: 1:      'question': 'xXxxoewrcoOoo',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'false',
291: 1:      'question': 'XxxxooO',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'true',
291: 1:      'question': 'zssddd',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'false',
291: 1:      'question': 'Xxxxertr34',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'true',
291: 1:      'question': 'xXoXOFo',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'false',
291: 1:      'question': 'ooXXoOO',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'false',
291: 1:      'question': 'RXT0oo',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'false',
291: 1:      'question': 'XXOAB0oxXx',
291: 1:      'valid': true
291: 1:    },
291: 1:    {
291: 1:      'answer': 'false',
291: 1:      'question': 'JxXAO',
291: 1:      'valid': true
291: 1:    }
291: 1:  ],
291: 1:  'info': [
291: 1:    '✅f(ooxx) = true',
291: 1:    '✅f(xooxx) = false',
291: 1:    '✅f(ooxXm) = true',
291: 1:    '✅f(zpzpzpp) = true',
291: 1:    '✅f(zzoo) = false',
291: 1:    '✅f(xxxooo) = true',
291: 1:    '✅f(xxxXooOo) = true',
291: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
291: 1:    '✅f(xXxxoewrcoOoo) = false',
291: 1:    '✅f(XxxxooO) = false',
291: 1:    '✅f(zssddd) = true',
291: 1:    '✅f(Xxxxertr34) = false',
291: 1:    '✅f(xXoXOFo) = true',
291: 1:    '✅f(ooXXoOO) = false',
291: 1:    '✅f(RXT0oo) = false',
291: 1:    '✅f(XXOAB0oxXx) = false',
291: 1:    '✅f(JxXAO) = false',
291: 1:    '❌f(PXXWXoO) = ??? != false'
291: 1:  ],
291: 1:  'level': 10,
291: 1:  'nextQuestion': 'PXXWXoO',
291: 1:  'questions': [
291: 1:    'ooxx',
291: 1:    'xooxx',
291: 1:    'ooxXm',
291: 1:    'zpzpzpp',
291: 1:    'zzoo',
291: 1:    'xxxooo',
291: 1:    'xxxXooOo',
291: 1:    'xxx23424esdsfvxXXOOooo',
291: 1:    'xXxxoewrcoOoo',
291: 1:    'XxxxooO',
291: 1:    'zssddd',
291: 1:    'Xxxxertr34',
291: 1:    'xXoXOFo',
291: 1:    'ooXXoOO',
291: 1:    'RXT0oo',
291: 1:    'XXOAB0oxXx',
291: 1:    'JxXAO',
291: 1:    'PXXWXoO'
291: 1:  ]
291: 1:}
291: 1:Scores: 11690
291: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false']')
291: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
292: 1:BoardData {
292: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
292: 1:  'expectedAnswer': 'false',
292: 1:  'history': [
292: 1:    {
292: 1:      'answer': 'true',
292: 1:      'question': 'ooxx',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'false',
292: 1:      'question': 'xooxx',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'true',
292: 1:      'question': 'ooxXm',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'true',
292: 1:      'question': 'zpzpzpp',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'false',
292: 1:      'question': 'zzoo',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'true',
292: 1:      'question': 'xxxooo',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'true',
292: 1:      'question': 'xxxXooOo',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'false',
292: 1:      'question': 'xxx23424esdsfvxXXOOooo',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'false',
292: 1:      'question': 'xXxxoewrcoOoo',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'false',
292: 1:      'question': 'XxxxooO',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'true',
292: 1:      'question': 'zssddd',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'false',
292: 1:      'question': 'Xxxxertr34',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'true',
292: 1:      'question': 'xXoXOFo',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'false',
292: 1:      'question': 'ooXXoOO',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'false',
292: 1:      'question': 'RXT0oo',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'false',
292: 1:      'question': 'XXOAB0oxXx',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'false',
292: 1:      'question': 'JxXAO',
292: 1:      'valid': true
292: 1:    },
292: 1:    {
292: 1:      'answer': 'false',
292: 1:      'question': 'PXXWXoO',
292: 1:      'valid': true
292: 1:    }
292: 1:  ],
292: 1:  'info': [
292: 1:    '✅f(ooxx) = true',
292: 1:    '✅f(xooxx) = false',
292: 1:    '✅f(ooxXm) = true',
292: 1:    '✅f(zpzpzpp) = true',
292: 1:    '✅f(zzoo) = false',
292: 1:    '✅f(xxxooo) = true',
292: 1:    '✅f(xxxXooOo) = true',
292: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
292: 1:    '✅f(xXxxoewrcoOoo) = false',
292: 1:    '✅f(XxxxooO) = false',
292: 1:    '✅f(zssddd) = true',
292: 1:    '✅f(Xxxxertr34) = false',
292: 1:    '✅f(xXoXOFo) = true',
292: 1:    '✅f(ooXXoOO) = false',
292: 1:    '✅f(RXT0oo) = false',
292: 1:    '✅f(XXOAB0oxXx) = false',
292: 1:    '✅f(JxXAO) = false',
292: 1:    '✅f(PXXWXoO) = false',
292: 1:    '❌f(XO7XxX) = ??? != false'
292: 1:  ],
292: 1:  'level': 10,
292: 1:  'nextQuestion': 'XO7XxX',
292: 1:  'questions': [
292: 1:    'ooxx',
292: 1:    'xooxx',
292: 1:    'ooxXm',
292: 1:    'zpzpzpp',
292: 1:    'zzoo',
292: 1:    'xxxooo',
292: 1:    'xxxXooOo',
292: 1:    'xxx23424esdsfvxXXOOooo',
292: 1:    'xXxxoewrcoOoo',
292: 1:    'XxxxooO',
292: 1:    'zssddd',
292: 1:    'Xxxxertr34',
292: 1:    'xXoXOFo',
292: 1:    'ooXXoOO',
292: 1:    'RXT0oo',
292: 1:    'XXOAB0oxXx',
292: 1:    'JxXAO',
292: 1:    'PXXWXoO',
292: 1:    'XO7XxX'
292: 1:  ]
292: 1:}
292: 1:Scores: 11693
292: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false']')
292: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
293: 1:BoardData {
293: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
293: 1:  'expectedAnswer': 'false',
293: 1:  'history': [
293: 1:    {
293: 1:      'answer': 'true',
293: 1:      'question': 'ooxx',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'false',
293: 1:      'question': 'xooxx',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'true',
293: 1:      'question': 'ooxXm',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'true',
293: 1:      'question': 'zpzpzpp',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'false',
293: 1:      'question': 'zzoo',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'true',
293: 1:      'question': 'xxxooo',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'true',
293: 1:      'question': 'xxxXooOo',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'false',
293: 1:      'question': 'xxx23424esdsfvxXXOOooo',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'false',
293: 1:      'question': 'xXxxoewrcoOoo',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'false',
293: 1:      'question': 'XxxxooO',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'true',
293: 1:      'question': 'zssddd',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'false',
293: 1:      'question': 'Xxxxertr34',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'true',
293: 1:      'question': 'xXoXOFo',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'false',
293: 1:      'question': 'ooXXoOO',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'false',
293: 1:      'question': 'RXT0oo',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'false',
293: 1:      'question': 'XXOAB0oxXx',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'false',
293: 1:      'question': 'JxXAO',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'false',
293: 1:      'question': 'PXXWXoO',
293: 1:      'valid': true
293: 1:    },
293: 1:    {
293: 1:      'answer': 'false',
293: 1:      'question': 'XO7XxX',
293: 1:      'valid': true
293: 1:    }
293: 1:  ],
293: 1:  'info': [
293: 1:    '✅f(ooxx) = true',
293: 1:    '✅f(xooxx) = false',
293: 1:    '✅f(ooxXm) = true',
293: 1:    '✅f(zpzpzpp) = true',
293: 1:    '✅f(zzoo) = false',
293: 1:    '✅f(xxxooo) = true',
293: 1:    '✅f(xxxXooOo) = true',
293: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
293: 1:    '✅f(xXxxoewrcoOoo) = false',
293: 1:    '✅f(XxxxooO) = false',
293: 1:    '✅f(zssddd) = true',
293: 1:    '✅f(Xxxxertr34) = false',
293: 1:    '✅f(xXoXOFo) = true',
293: 1:    '✅f(ooXXoOO) = false',
293: 1:    '✅f(RXT0oo) = false',
293: 1:    '✅f(XXOAB0oxXx) = false',
293: 1:    '✅f(JxXAO) = false',
293: 1:    '✅f(PXXWXoO) = false',
293: 1:    '✅f(XO7XxX) = false',
293: 1:    '❌f(FGoXBOFO) = ??? != false'
293: 1:  ],
293: 1:  'level': 10,
293: 1:  'nextQuestion': 'FGoXBOFO',
293: 1:  'questions': [
293: 1:    'ooxx',
293: 1:    'xooxx',
293: 1:    'ooxXm',
293: 1:    'zpzpzpp',
293: 1:    'zzoo',
293: 1:    'xxxooo',
293: 1:    'xxxXooOo',
293: 1:    'xxx23424esdsfvxXXOOooo',
293: 1:    'xXxxoewrcoOoo',
293: 1:    'XxxxooO',
293: 1:    'zssddd',
293: 1:    'Xxxxertr34',
293: 1:    'xXoXOFo',
293: 1:    'ooXXoOO',
293: 1:    'RXT0oo',
293: 1:    'XXOAB0oxXx',
293: 1:    'JxXAO',
293: 1:    'PXXWXoO',
293: 1:    'XO7XxX',
293: 1:    'FGoXBOFO'
293: 1:  ]
293: 1:}
293: 1:Scores: 11696
293: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false']')
293: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
294: 1:BoardData {
294: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
294: 1:  'expectedAnswer': 'false',
294: 1:  'history': [
294: 1:    {
294: 1:      'answer': 'true',
294: 1:      'question': 'ooxx',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'false',
294: 1:      'question': 'xooxx',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'true',
294: 1:      'question': 'ooxXm',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'true',
294: 1:      'question': 'zpzpzpp',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'false',
294: 1:      'question': 'zzoo',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'true',
294: 1:      'question': 'xxxooo',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'true',
294: 1:      'question': 'xxxXooOo',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'false',
294: 1:      'question': 'xxx23424esdsfvxXXOOooo',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'false',
294: 1:      'question': 'xXxxoewrcoOoo',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'false',
294: 1:      'question': 'XxxxooO',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'true',
294: 1:      'question': 'zssddd',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'false',
294: 1:      'question': 'Xxxxertr34',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'true',
294: 1:      'question': 'xXoXOFo',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'false',
294: 1:      'question': 'ooXXoOO',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'false',
294: 1:      'question': 'RXT0oo',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'false',
294: 1:      'question': 'XXOAB0oxXx',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'false',
294: 1:      'question': 'JxXAO',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'false',
294: 1:      'question': 'PXXWXoO',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'false',
294: 1:      'question': 'XO7XxX',
294: 1:      'valid': true
294: 1:    },
294: 1:    {
294: 1:      'answer': 'false',
294: 1:      'question': 'FGoXBOFO',
294: 1:      'valid': true
294: 1:    }
294: 1:  ],
294: 1:  'info': [
294: 1:    '✅f(ooxx) = true',
294: 1:    '✅f(xooxx) = false',
294: 1:    '✅f(ooxXm) = true',
294: 1:    '✅f(zpzpzpp) = true',
294: 1:    '✅f(zzoo) = false',
294: 1:    '✅f(xxxooo) = true',
294: 1:    '✅f(xxxXooOo) = true',
294: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
294: 1:    '✅f(xXxxoewrcoOoo) = false',
294: 1:    '✅f(XxxxooO) = false',
294: 1:    '✅f(zssddd) = true',
294: 1:    '✅f(Xxxxertr34) = false',
294: 1:    '✅f(xXoXOFo) = true',
294: 1:    '✅f(ooXXoOO) = false',
294: 1:    '✅f(RXT0oo) = false',
294: 1:    '✅f(XXOAB0oxXx) = false',
294: 1:    '✅f(JxXAO) = false',
294: 1:    '✅f(PXXWXoO) = false',
294: 1:    '✅f(XO7XxX) = false',
294: 1:    '✅f(FGoXBOFO) = false',
294: 1:    '❌f(oO) = ??? != false'
294: 1:  ],
294: 1:  'level': 10,
294: 1:  'nextQuestion': 'oO',
294: 1:  'questions': [
294: 1:    'ooxx',
294: 1:    'xooxx',
294: 1:    'ooxXm',
294: 1:    'zpzpzpp',
294: 1:    'zzoo',
294: 1:    'xxxooo',
294: 1:    'xxxXooOo',
294: 1:    'xxx23424esdsfvxXXOOooo',
294: 1:    'xXxxoewrcoOoo',
294: 1:    'XxxxooO',
294: 1:    'zssddd',
294: 1:    'Xxxxertr34',
294: 1:    'xXoXOFo',
294: 1:    'ooXXoOO',
294: 1:    'RXT0oo',
294: 1:    'XXOAB0oxXx',
294: 1:    'JxXAO',
294: 1:    'PXXWXoO',
294: 1:    'XO7XxX',
294: 1:    'FGoXBOFO',
294: 1:    'oO'
294: 1:  ]
294: 1:}
294: 1:Scores: 11699
294: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false']')
294: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
295: 1:BoardData {
295: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
295: 1:  'expectedAnswer': 'false',
295: 1:  'history': [
295: 1:    {
295: 1:      'answer': 'true',
295: 1:      'question': 'ooxx',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'false',
295: 1:      'question': 'xooxx',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'true',
295: 1:      'question': 'ooxXm',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'true',
295: 1:      'question': 'zpzpzpp',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'false',
295: 1:      'question': 'zzoo',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'true',
295: 1:      'question': 'xxxooo',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'true',
295: 1:      'question': 'xxxXooOo',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'false',
295: 1:      'question': 'xxx23424esdsfvxXXOOooo',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'false',
295: 1:      'question': 'xXxxoewrcoOoo',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'false',
295: 1:      'question': 'XxxxooO',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'true',
295: 1:      'question': 'zssddd',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'false',
295: 1:      'question': 'Xxxxertr34',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'true',
295: 1:      'question': 'xXoXOFo',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'false',
295: 1:      'question': 'ooXXoOO',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'false',
295: 1:      'question': 'RXT0oo',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'false',
295: 1:      'question': 'XXOAB0oxXx',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'false',
295: 1:      'question': 'JxXAO',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'false',
295: 1:      'question': 'PXXWXoO',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'false',
295: 1:      'question': 'XO7XxX',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'false',
295: 1:      'question': 'FGoXBOFO',
295: 1:      'valid': true
295: 1:    },
295: 1:    {
295: 1:      'answer': 'false',
295: 1:      'question': 'oO',
295: 1:      'valid': true
295: 1:    }
295: 1:  ],
295: 1:  'info': [
295: 1:    '✅f(ooxx) = true',
295: 1:    '✅f(xooxx) = false',
295: 1:    '✅f(ooxXm) = true',
295: 1:    '✅f(zpzpzpp) = true',
295: 1:    '✅f(zzoo) = false',
295: 1:    '✅f(xxxooo) = true',
295: 1:    '✅f(xxxXooOo) = true',
295: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
295: 1:    '✅f(xXxxoewrcoOoo) = false',
295: 1:    '✅f(XxxxooO) = false',
295: 1:    '✅f(zssddd) = true',
295: 1:    '✅f(Xxxxertr34) = false',
295: 1:    '✅f(xXoXOFo) = true',
295: 1:    '✅f(ooXXoOO) = false',
295: 1:    '✅f(RXT0oo) = false',
295: 1:    '✅f(XXOAB0oxXx) = false',
295: 1:    '✅f(JxXAO) = false',
295: 1:    '✅f(PXXWXoO) = false',
295: 1:    '✅f(XO7XxX) = false',
295: 1:    '✅f(FGoXBOFO) = false',
295: 1:    '✅f(oO) = false',
295: 1:    '❌f(XCOXXXO) = ??? != false'
295: 1:  ],
295: 1:  'level': 10,
295: 1:  'nextQuestion': 'XCOXXXO',
295: 1:  'questions': [
295: 1:    'ooxx',
295: 1:    'xooxx',
295: 1:    'ooxXm',
295: 1:    'zpzpzpp',
295: 1:    'zzoo',
295: 1:    'xxxooo',
295: 1:    'xxxXooOo',
295: 1:    'xxx23424esdsfvxXXOOooo',
295: 1:    'xXxxoewrcoOoo',
295: 1:    'XxxxooO',
295: 1:    'zssddd',
295: 1:    'Xxxxertr34',
295: 1:    'xXoXOFo',
295: 1:    'ooXXoOO',
295: 1:    'RXT0oo',
295: 1:    'XXOAB0oxXx',
295: 1:    'JxXAO',
295: 1:    'PXXWXoO',
295: 1:    'XO7XxX',
295: 1:    'FGoXBOFO',
295: 1:    'oO',
295: 1:    'XCOXXXO'
295: 1:  ]
295: 1:}
295: 1:Scores: 11702
295: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false']')
295: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
296: 1:BoardData {
296: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
296: 1:  'expectedAnswer': 'false',
296: 1:  'history': [
296: 1:    {
296: 1:      'answer': 'true',
296: 1:      'question': 'ooxx',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'false',
296: 1:      'question': 'xooxx',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'true',
296: 1:      'question': 'ooxXm',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'true',
296: 1:      'question': 'zpzpzpp',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'false',
296: 1:      'question': 'zzoo',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'true',
296: 1:      'question': 'xxxooo',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'true',
296: 1:      'question': 'xxxXooOo',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'false',
296: 1:      'question': 'xxx23424esdsfvxXXOOooo',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'false',
296: 1:      'question': 'xXxxoewrcoOoo',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'false',
296: 1:      'question': 'XxxxooO',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'true',
296: 1:      'question': 'zssddd',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'false',
296: 1:      'question': 'Xxxxertr34',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'true',
296: 1:      'question': 'xXoXOFo',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'false',
296: 1:      'question': 'ooXXoOO',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'false',
296: 1:      'question': 'RXT0oo',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'false',
296: 1:      'question': 'XXOAB0oxXx',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'false',
296: 1:      'question': 'JxXAO',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'false',
296: 1:      'question': 'PXXWXoO',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'false',
296: 1:      'question': 'XO7XxX',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'false',
296: 1:      'question': 'FGoXBOFO',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'false',
296: 1:      'question': 'oO',
296: 1:      'valid': true
296: 1:    },
296: 1:    {
296: 1:      'answer': 'false',
296: 1:      'question': 'XCOXXXO',
296: 1:      'valid': true
296: 1:    }
296: 1:  ],
296: 1:  'info': [
296: 1:    '✅f(ooxx) = true',
296: 1:    '✅f(xooxx) = false',
296: 1:    '✅f(ooxXm) = true',
296: 1:    '✅f(zpzpzpp) = true',
296: 1:    '✅f(zzoo) = false',
296: 1:    '✅f(xxxooo) = true',
296: 1:    '✅f(xxxXooOo) = true',
296: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
296: 1:    '✅f(xXxxoewrcoOoo) = false',
296: 1:    '✅f(XxxxooO) = false',
296: 1:    '✅f(zssddd) = true',
296: 1:    '✅f(Xxxxertr34) = false',
296: 1:    '✅f(xXoXOFo) = true',
296: 1:    '✅f(ooXXoOO) = false',
296: 1:    '✅f(RXT0oo) = false',
296: 1:    '✅f(XXOAB0oxXx) = false',
296: 1:    '✅f(JxXAO) = false',
296: 1:    '✅f(PXXWXoO) = false',
296: 1:    '✅f(XO7XxX) = false',
296: 1:    '✅f(FGoXBOFO) = false',
296: 1:    '✅f(oO) = false',
296: 1:    '✅f(XCOXXXO) = false',
296: 1:    '❌f(WXXxXOXXT) = ??? != false'
296: 1:  ],
296: 1:  'level': 10,
296: 1:  'nextQuestion': 'WXXxXOXXT',
296: 1:  'questions': [
296: 1:    'ooxx',
296: 1:    'xooxx',
296: 1:    'ooxXm',
296: 1:    'zpzpzpp',
296: 1:    'zzoo',
296: 1:    'xxxooo',
296: 1:    'xxxXooOo',
296: 1:    'xxx23424esdsfvxXXOOooo',
296: 1:    'xXxxoewrcoOoo',
296: 1:    'XxxxooO',
296: 1:    'zssddd',
296: 1:    'Xxxxertr34',
296: 1:    'xXoXOFo',
296: 1:    'ooXXoOO',
296: 1:    'RXT0oo',
296: 1:    'XXOAB0oxXx',
296: 1:    'JxXAO',
296: 1:    'PXXWXoO',
296: 1:    'XO7XxX',
296: 1:    'FGoXBOFO',
296: 1:    'oO',
296: 1:    'XCOXXXO',
296: 1:    'WXXxXOXXT'
296: 1:  ]
296: 1:}
296: 1:Scores: 11705
296: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false']')
296: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
297: 1:BoardData {
297: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
297: 1:  'expectedAnswer': 'false',
297: 1:  'history': [
297: 1:    {
297: 1:      'answer': 'true',
297: 1:      'question': 'ooxx',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'false',
297: 1:      'question': 'xooxx',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'true',
297: 1:      'question': 'ooxXm',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'true',
297: 1:      'question': 'zpzpzpp',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'false',
297: 1:      'question': 'zzoo',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'true',
297: 1:      'question': 'xxxooo',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'true',
297: 1:      'question': 'xxxXooOo',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'false',
297: 1:      'question': 'xxx23424esdsfvxXXOOooo',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'false',
297: 1:      'question': 'xXxxoewrcoOoo',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'false',
297: 1:      'question': 'XxxxooO',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'true',
297: 1:      'question': 'zssddd',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'false',
297: 1:      'question': 'Xxxxertr34',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'true',
297: 1:      'question': 'xXoXOFo',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'false',
297: 1:      'question': 'ooXXoOO',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'false',
297: 1:      'question': 'RXT0oo',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'false',
297: 1:      'question': 'XXOAB0oxXx',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'false',
297: 1:      'question': 'JxXAO',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'false',
297: 1:      'question': 'PXXWXoO',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'false',
297: 1:      'question': 'XO7XxX',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'false',
297: 1:      'question': 'FGoXBOFO',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'false',
297: 1:      'question': 'oO',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'false',
297: 1:      'question': 'XCOXXXO',
297: 1:      'valid': true
297: 1:    },
297: 1:    {
297: 1:      'answer': 'false',
297: 1:      'question': 'WXXxXOXXT',
297: 1:      'valid': true
297: 1:    }
297: 1:  ],
297: 1:  'info': [
297: 1:    '✅f(ooxx) = true',
297: 1:    '✅f(xooxx) = false',
297: 1:    '✅f(ooxXm) = true',
297: 1:    '✅f(zpzpzpp) = true',
297: 1:    '✅f(zzoo) = false',
297: 1:    '✅f(xxxooo) = true',
297: 1:    '✅f(xxxXooOo) = true',
297: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
297: 1:    '✅f(xXxxoewrcoOoo) = false',
297: 1:    '✅f(XxxxooO) = false',
297: 1:    '✅f(zssddd) = true',
297: 1:    '✅f(Xxxxertr34) = false',
297: 1:    '✅f(xXoXOFo) = true',
297: 1:    '✅f(ooXXoOO) = false',
297: 1:    '✅f(RXT0oo) = false',
297: 1:    '✅f(XXOAB0oxXx) = false',
297: 1:    '✅f(JxXAO) = false',
297: 1:    '✅f(PXXWXoO) = false',
297: 1:    '✅f(XO7XxX) = false',
297: 1:    '✅f(FGoXBOFO) = false',
297: 1:    '✅f(oO) = false',
297: 1:    '✅f(XCOXXXO) = false',
297: 1:    '✅f(WXXxXOXXT) = false',
297: 1:    '❌f(RXXoX) = ??? != false'
297: 1:  ],
297: 1:  'level': 10,
297: 1:  'nextQuestion': 'RXXoX',
297: 1:  'questions': [
297: 1:    'ooxx',
297: 1:    'xooxx',
297: 1:    'ooxXm',
297: 1:    'zpzpzpp',
297: 1:    'zzoo',
297: 1:    'xxxooo',
297: 1:    'xxxXooOo',
297: 1:    'xxx23424esdsfvxXXOOooo',
297: 1:    'xXxxoewrcoOoo',
297: 1:    'XxxxooO',
297: 1:    'zssddd',
297: 1:    'Xxxxertr34',
297: 1:    'xXoXOFo',
297: 1:    'ooXXoOO',
297: 1:    'RXT0oo',
297: 1:    'XXOAB0oxXx',
297: 1:    'JxXAO',
297: 1:    'PXXWXoO',
297: 1:    'XO7XxX',
297: 1:    'FGoXBOFO',
297: 1:    'oO',
297: 1:    'XCOXXXO',
297: 1:    'WXXxXOXXT',
297: 1:    'RXXoX'
297: 1:  ]
297: 1:}
297: 1:Scores: 11708
297: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false']')
297: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
298: 1:BoardData {
298: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
298: 1:  'expectedAnswer': 'true',
298: 1:  'history': [
298: 1:    {
298: 1:      'answer': 'true',
298: 1:      'question': 'ooxx',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'false',
298: 1:      'question': 'xooxx',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'true',
298: 1:      'question': 'ooxXm',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'true',
298: 1:      'question': 'zpzpzpp',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'false',
298: 1:      'question': 'zzoo',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'true',
298: 1:      'question': 'xxxooo',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'true',
298: 1:      'question': 'xxxXooOo',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'false',
298: 1:      'question': 'xxx23424esdsfvxXXOOooo',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'false',
298: 1:      'question': 'xXxxoewrcoOoo',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'false',
298: 1:      'question': 'XxxxooO',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'true',
298: 1:      'question': 'zssddd',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'false',
298: 1:      'question': 'Xxxxertr34',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'true',
298: 1:      'question': 'xXoXOFo',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'false',
298: 1:      'question': 'ooXXoOO',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'false',
298: 1:      'question': 'RXT0oo',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'false',
298: 1:      'question': 'XXOAB0oxXx',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'false',
298: 1:      'question': 'JxXAO',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'false',
298: 1:      'question': 'PXXWXoO',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'false',
298: 1:      'question': 'XO7XxX',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'false',
298: 1:      'question': 'FGoXBOFO',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'false',
298: 1:      'question': 'oO',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'false',
298: 1:      'question': 'XCOXXXO',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'false',
298: 1:      'question': 'WXXxXOXXT',
298: 1:      'valid': true
298: 1:    },
298: 1:    {
298: 1:      'answer': 'false',
298: 1:      'question': 'RXXoX',
298: 1:      'valid': true
298: 1:    }
298: 1:  ],
298: 1:  'info': [
298: 1:    '✅f(ooxx) = true',
298: 1:    '✅f(xooxx) = false',
298: 1:    '✅f(ooxXm) = true',
298: 1:    '✅f(zpzpzpp) = true',
298: 1:    '✅f(zzoo) = false',
298: 1:    '✅f(xxxooo) = true',
298: 1:    '✅f(xxxXooOo) = true',
298: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
298: 1:    '✅f(xXxxoewrcoOoo) = false',
298: 1:    '✅f(XxxxooO) = false',
298: 1:    '✅f(zssddd) = true',
298: 1:    '✅f(Xxxxertr34) = false',
298: 1:    '✅f(xXoXOFo) = true',
298: 1:    '✅f(ooXXoOO) = false',
298: 1:    '✅f(RXT0oo) = false',
298: 1:    '✅f(XXOAB0oxXx) = false',
298: 1:    '✅f(JxXAO) = false',
298: 1:    '✅f(PXXWXoO) = false',
298: 1:    '✅f(XO7XxX) = false',
298: 1:    '✅f(FGoXBOFO) = false',
298: 1:    '✅f(oO) = false',
298: 1:    '✅f(XCOXXXO) = false',
298: 1:    '✅f(WXXxXOXXT) = false',
298: 1:    '✅f(RXXoX) = false',
298: 1:    '❌f(oXOoxXW) = ??? != true'
298: 1:  ],
298: 1:  'level': 10,
298: 1:  'nextQuestion': 'oXOoxXW',
298: 1:  'questions': [
298: 1:    'ooxx',
298: 1:    'xooxx',
298: 1:    'ooxXm',
298: 1:    'zpzpzpp',
298: 1:    'zzoo',
298: 1:    'xxxooo',
298: 1:    'xxxXooOo',
298: 1:    'xxx23424esdsfvxXXOOooo',
298: 1:    'xXxxoewrcoOoo',
298: 1:    'XxxxooO',
298: 1:    'zssddd',
298: 1:    'Xxxxertr34',
298: 1:    'xXoXOFo',
298: 1:    'ooXXoOO',
298: 1:    'RXT0oo',
298: 1:    'XXOAB0oxXx',
298: 1:    'JxXAO',
298: 1:    'PXXWXoO',
298: 1:    'XO7XxX',
298: 1:    'FGoXBOFO',
298: 1:    'oO',
298: 1:    'XCOXXXO',
298: 1:    'WXXxXOXXT',
298: 1:    'RXXoX',
298: 1:    'oXOoxXW'
298: 1:  ]
298: 1:}
298: 1:Scores: 11711
298: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true']')
298: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
299: 1:BoardData {
299: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
299: 1:  'expectedAnswer': 'false',
299: 1:  'history': [
299: 1:    {
299: 1:      'answer': 'true',
299: 1:      'question': 'ooxx',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'false',
299: 1:      'question': 'xooxx',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'true',
299: 1:      'question': 'ooxXm',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'true',
299: 1:      'question': 'zpzpzpp',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'false',
299: 1:      'question': 'zzoo',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'true',
299: 1:      'question': 'xxxooo',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'true',
299: 1:      'question': 'xxxXooOo',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'false',
299: 1:      'question': 'xxx23424esdsfvxXXOOooo',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'false',
299: 1:      'question': 'xXxxoewrcoOoo',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'false',
299: 1:      'question': 'XxxxooO',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'true',
299: 1:      'question': 'zssddd',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'false',
299: 1:      'question': 'Xxxxertr34',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'true',
299: 1:      'question': 'xXoXOFo',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'false',
299: 1:      'question': 'ooXXoOO',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'false',
299: 1:      'question': 'RXT0oo',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'false',
299: 1:      'question': 'XXOAB0oxXx',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'false',
299: 1:      'question': 'JxXAO',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'false',
299: 1:      'question': 'PXXWXoO',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'false',
299: 1:      'question': 'XO7XxX',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'false',
299: 1:      'question': 'FGoXBOFO',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'false',
299: 1:      'question': 'oO',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'false',
299: 1:      'question': 'XCOXXXO',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'false',
299: 1:      'question': 'WXXxXOXXT',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'false',
299: 1:      'question': 'RXXoX',
299: 1:      'valid': true
299: 1:    },
299: 1:    {
299: 1:      'answer': 'true',
299: 1:      'question': 'oXOoxXW',
299: 1:      'valid': true
299: 1:    }
299: 1:  ],
299: 1:  'info': [
299: 1:    '✅f(ooxx) = true',
299: 1:    '✅f(xooxx) = false',
299: 1:    '✅f(ooxXm) = true',
299: 1:    '✅f(zpzpzpp) = true',
299: 1:    '✅f(zzoo) = false',
299: 1:    '✅f(xxxooo) = true',
299: 1:    '✅f(xxxXooOo) = true',
299: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
299: 1:    '✅f(xXxxoewrcoOoo) = false',
299: 1:    '✅f(XxxxooO) = false',
299: 1:    '✅f(zssddd) = true',
299: 1:    '✅f(Xxxxertr34) = false',
299: 1:    '✅f(xXoXOFo) = true',
299: 1:    '✅f(ooXXoOO) = false',
299: 1:    '✅f(RXT0oo) = false',
299: 1:    '✅f(XXOAB0oxXx) = false',
299: 1:    '✅f(JxXAO) = false',
299: 1:    '✅f(PXXWXoO) = false',
299: 1:    '✅f(XO7XxX) = false',
299: 1:    '✅f(FGoXBOFO) = false',
299: 1:    '✅f(oO) = false',
299: 1:    '✅f(XCOXXXO) = false',
299: 1:    '✅f(WXXxXOXXT) = false',
299: 1:    '✅f(RXXoX) = false',
299: 1:    '✅f(oXOoxXW) = true',
299: 1:    '❌f(x) = ??? != false'
299: 1:  ],
299: 1:  'level': 10,
299: 1:  'nextQuestion': 'x',
299: 1:  'questions': [
299: 1:    'ooxx',
299: 1:    'xooxx',
299: 1:    'ooxXm',
299: 1:    'zpzpzpp',
299: 1:    'zzoo',
299: 1:    'xxxooo',
299: 1:    'xxxXooOo',
299: 1:    'xxx23424esdsfvxXXOOooo',
299: 1:    'xXxxoewrcoOoo',
299: 1:    'XxxxooO',
299: 1:    'zssddd',
299: 1:    'Xxxxertr34',
299: 1:    'xXoXOFo',
299: 1:    'ooXXoOO',
299: 1:    'RXT0oo',
299: 1:    'XXOAB0oxXx',
299: 1:    'JxXAO',
299: 1:    'PXXWXoO',
299: 1:    'XO7XxX',
299: 1:    'FGoXBOFO',
299: 1:    'oO',
299: 1:    'XCOXXXO',
299: 1:    'WXXxXOXXT',
299: 1:    'RXXoX',
299: 1:    'oXOoxXW',
299: 1:    'x'
299: 1:  ]
299: 1:}
299: 1:Scores: 11714
299: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false']')
299: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
300: 1:BoardData {
300: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
300: 1:  'expectedAnswer': 'false',
300: 1:  'history': [
300: 1:    {
300: 1:      'answer': 'true',
300: 1:      'question': 'ooxx',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'false',
300: 1:      'question': 'xooxx',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'true',
300: 1:      'question': 'ooxXm',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'true',
300: 1:      'question': 'zpzpzpp',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'false',
300: 1:      'question': 'zzoo',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'true',
300: 1:      'question': 'xxxooo',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'true',
300: 1:      'question': 'xxxXooOo',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'false',
300: 1:      'question': 'xxx23424esdsfvxXXOOooo',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'false',
300: 1:      'question': 'xXxxoewrcoOoo',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'false',
300: 1:      'question': 'XxxxooO',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'true',
300: 1:      'question': 'zssddd',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'false',
300: 1:      'question': 'Xxxxertr34',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'true',
300: 1:      'question': 'xXoXOFo',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'false',
300: 1:      'question': 'ooXXoOO',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'false',
300: 1:      'question': 'RXT0oo',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'false',
300: 1:      'question': 'XXOAB0oxXx',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'false',
300: 1:      'question': 'JxXAO',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'false',
300: 1:      'question': 'PXXWXoO',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'false',
300: 1:      'question': 'XO7XxX',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'false',
300: 1:      'question': 'FGoXBOFO',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'false',
300: 1:      'question': 'oO',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'false',
300: 1:      'question': 'XCOXXXO',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'false',
300: 1:      'question': 'WXXxXOXXT',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'false',
300: 1:      'question': 'RXXoX',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'true',
300: 1:      'question': 'oXOoxXW',
300: 1:      'valid': true
300: 1:    },
300: 1:    {
300: 1:      'answer': 'false',
300: 1:      'question': 'x',
300: 1:      'valid': true
300: 1:    }
300: 1:  ],
300: 1:  'info': [
300: 1:    '✅f(ooxx) = true',
300: 1:    '✅f(xooxx) = false',
300: 1:    '✅f(ooxXm) = true',
300: 1:    '✅f(zpzpzpp) = true',
300: 1:    '✅f(zzoo) = false',
300: 1:    '✅f(xxxooo) = true',
300: 1:    '✅f(xxxXooOo) = true',
300: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
300: 1:    '✅f(xXxxoewrcoOoo) = false',
300: 1:    '✅f(XxxxooO) = false',
300: 1:    '✅f(zssddd) = true',
300: 1:    '✅f(Xxxxertr34) = false',
300: 1:    '✅f(xXoXOFo) = true',
300: 1:    '✅f(ooXXoOO) = false',
300: 1:    '✅f(RXT0oo) = false',
300: 1:    '✅f(XXOAB0oxXx) = false',
300: 1:    '✅f(JxXAO) = false',
300: 1:    '✅f(PXXWXoO) = false',
300: 1:    '✅f(XO7XxX) = false',
300: 1:    '✅f(FGoXBOFO) = false',
300: 1:    '✅f(oO) = false',
300: 1:    '✅f(XCOXXXO) = false',
300: 1:    '✅f(WXXxXOXXT) = false',
300: 1:    '✅f(RXXoX) = false',
300: 1:    '✅f(oXOoxXW) = true',
300: 1:    '✅f(x) = false',
300: 1:    '❌f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = ??? != false'
300: 1:  ],
300: 1:  'level': 10,
300: 1:  'nextQuestion': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
300: 1:  'questions': [
300: 1:    'ooxx',
300: 1:    'xooxx',
300: 1:    'ooxXm',
300: 1:    'zpzpzpp',
300: 1:    'zzoo',
300: 1:    'xxxooo',
300: 1:    'xxxXooOo',
300: 1:    'xxx23424esdsfvxXXOOooo',
300: 1:    'xXxxoewrcoOoo',
300: 1:    'XxxxooO',
300: 1:    'zssddd',
300: 1:    'Xxxxertr34',
300: 1:    'xXoXOFo',
300: 1:    'ooXXoOO',
300: 1:    'RXT0oo',
300: 1:    'XXOAB0oxXx',
300: 1:    'JxXAO',
300: 1:    'PXXWXoO',
300: 1:    'XO7XxX',
300: 1:    'FGoXBOFO',
300: 1:    'oO',
300: 1:    'XCOXXXO',
300: 1:    'WXXxXOXXT',
300: 1:    'RXXoX',
300: 1:    'oXOoxXW',
300: 1:    'x',
300: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72'
300: 1:  ]
300: 1:}
300: 1:Scores: 11717
300: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false']')
300: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
301: 1:BoardData {
301: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
301: 1:  'expectedAnswer': 'true',
301: 1:  'history': [
301: 1:    {
301: 1:      'answer': 'true',
301: 1:      'question': 'ooxx',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'false',
301: 1:      'question': 'xooxx',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'true',
301: 1:      'question': 'ooxXm',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'true',
301: 1:      'question': 'zpzpzpp',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'false',
301: 1:      'question': 'zzoo',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'true',
301: 1:      'question': 'xxxooo',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'true',
301: 1:      'question': 'xxxXooOo',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'false',
301: 1:      'question': 'xxx23424esdsfvxXXOOooo',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'false',
301: 1:      'question': 'xXxxoewrcoOoo',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'false',
301: 1:      'question': 'XxxxooO',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'true',
301: 1:      'question': 'zssddd',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'false',
301: 1:      'question': 'Xxxxertr34',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'true',
301: 1:      'question': 'xXoXOFo',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'false',
301: 1:      'question': 'ooXXoOO',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'false',
301: 1:      'question': 'RXT0oo',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'false',
301: 1:      'question': 'XXOAB0oxXx',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'false',
301: 1:      'question': 'JxXAO',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'false',
301: 1:      'question': 'PXXWXoO',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'false',
301: 1:      'question': 'XO7XxX',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'false',
301: 1:      'question': 'FGoXBOFO',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'false',
301: 1:      'question': 'oO',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'false',
301: 1:      'question': 'XCOXXXO',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'false',
301: 1:      'question': 'WXXxXOXXT',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'false',
301: 1:      'question': 'RXXoX',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'true',
301: 1:      'question': 'oXOoxXW',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'false',
301: 1:      'question': 'x',
301: 1:      'valid': true
301: 1:    },
301: 1:    {
301: 1:      'answer': 'false',
301: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
301: 1:      'valid': true
301: 1:    }
301: 1:  ],
301: 1:  'info': [
301: 1:    '✅f(ooxx) = true',
301: 1:    '✅f(xooxx) = false',
301: 1:    '✅f(ooxXm) = true',
301: 1:    '✅f(zpzpzpp) = true',
301: 1:    '✅f(zzoo) = false',
301: 1:    '✅f(xxxooo) = true',
301: 1:    '✅f(xxxXooOo) = true',
301: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
301: 1:    '✅f(xXxxoewrcoOoo) = false',
301: 1:    '✅f(XxxxooO) = false',
301: 1:    '✅f(zssddd) = true',
301: 1:    '✅f(Xxxxertr34) = false',
301: 1:    '✅f(xXoXOFo) = true',
301: 1:    '✅f(ooXXoOO) = false',
301: 1:    '✅f(RXT0oo) = false',
301: 1:    '✅f(XXOAB0oxXx) = false',
301: 1:    '✅f(JxXAO) = false',
301: 1:    '✅f(PXXWXoO) = false',
301: 1:    '✅f(XO7XxX) = false',
301: 1:    '✅f(FGoXBOFO) = false',
301: 1:    '✅f(oO) = false',
301: 1:    '✅f(XCOXXXO) = false',
301: 1:    '✅f(WXXxXOXXT) = false',
301: 1:    '✅f(RXXoX) = false',
301: 1:    '✅f(oXOoxXW) = true',
301: 1:    '✅f(x) = false',
301: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
301: 1:    '❌f(5CAr7zsRke6Lb0Bi) = ??? != true'
301: 1:  ],
301: 1:  'level': 10,
301: 1:  'nextQuestion': '5CAr7zsRke6Lb0Bi',
301: 1:  'questions': [
301: 1:    'ooxx',
301: 1:    'xooxx',
301: 1:    'ooxXm',
301: 1:    'zpzpzpp',
301: 1:    'zzoo',
301: 1:    'xxxooo',
301: 1:    'xxxXooOo',
301: 1:    'xxx23424esdsfvxXXOOooo',
301: 1:    'xXxxoewrcoOoo',
301: 1:    'XxxxooO',
301: 1:    'zssddd',
301: 1:    'Xxxxertr34',
301: 1:    'xXoXOFo',
301: 1:    'ooXXoOO',
301: 1:    'RXT0oo',
301: 1:    'XXOAB0oxXx',
301: 1:    'JxXAO',
301: 1:    'PXXWXoO',
301: 1:    'XO7XxX',
301: 1:    'FGoXBOFO',
301: 1:    'oO',
301: 1:    'XCOXXXO',
301: 1:    'WXXxXOXXT',
301: 1:    'RXXoX',
301: 1:    'oXOoxXW',
301: 1:    'x',
301: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
301: 1:    '5CAr7zsRke6Lb0Bi'
301: 1:  ]
301: 1:}
301: 1:Scores: 11720
301: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true']')
301: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
302: 1:BoardData {
302: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
302: 1:  'expectedAnswer': 'false',
302: 1:  'history': [
302: 1:    {
302: 1:      'answer': 'true',
302: 1:      'question': 'ooxx',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'false',
302: 1:      'question': 'xooxx',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'true',
302: 1:      'question': 'ooxXm',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'true',
302: 1:      'question': 'zpzpzpp',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'false',
302: 1:      'question': 'zzoo',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'true',
302: 1:      'question': 'xxxooo',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'true',
302: 1:      'question': 'xxxXooOo',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'false',
302: 1:      'question': 'xxx23424esdsfvxXXOOooo',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'false',
302: 1:      'question': 'xXxxoewrcoOoo',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'false',
302: 1:      'question': 'XxxxooO',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'true',
302: 1:      'question': 'zssddd',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'false',
302: 1:      'question': 'Xxxxertr34',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'true',
302: 1:      'question': 'xXoXOFo',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'false',
302: 1:      'question': 'ooXXoOO',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'false',
302: 1:      'question': 'RXT0oo',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'false',
302: 1:      'question': 'XXOAB0oxXx',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'false',
302: 1:      'question': 'JxXAO',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'false',
302: 1:      'question': 'PXXWXoO',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'false',
302: 1:      'question': 'XO7XxX',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'false',
302: 1:      'question': 'FGoXBOFO',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'false',
302: 1:      'question': 'oO',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'false',
302: 1:      'question': 'XCOXXXO',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'false',
302: 1:      'question': 'WXXxXOXXT',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'false',
302: 1:      'question': 'RXXoX',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'true',
302: 1:      'question': 'oXOoxXW',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'false',
302: 1:      'question': 'x',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'false',
302: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
302: 1:      'valid': true
302: 1:    },
302: 1:    {
302: 1:      'answer': 'true',
302: 1:      'question': '5CAr7zsRke6Lb0Bi',
302: 1:      'valid': true
302: 1:    }
302: 1:  ],
302: 1:  'info': [
302: 1:    '✅f(ooxx) = true',
302: 1:    '✅f(xooxx) = false',
302: 1:    '✅f(ooxXm) = true',
302: 1:    '✅f(zpzpzpp) = true',
302: 1:    '✅f(zzoo) = false',
302: 1:    '✅f(xxxooo) = true',
302: 1:    '✅f(xxxXooOo) = true',
302: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
302: 1:    '✅f(xXxxoewrcoOoo) = false',
302: 1:    '✅f(XxxxooO) = false',
302: 1:    '✅f(zssddd) = true',
302: 1:    '✅f(Xxxxertr34) = false',
302: 1:    '✅f(xXoXOFo) = true',
302: 1:    '✅f(ooXXoOO) = false',
302: 1:    '✅f(RXT0oo) = false',
302: 1:    '✅f(XXOAB0oxXx) = false',
302: 1:    '✅f(JxXAO) = false',
302: 1:    '✅f(PXXWXoO) = false',
302: 1:    '✅f(XO7XxX) = false',
302: 1:    '✅f(FGoXBOFO) = false',
302: 1:    '✅f(oO) = false',
302: 1:    '✅f(XCOXXXO) = false',
302: 1:    '✅f(WXXxXOXXT) = false',
302: 1:    '✅f(RXXoX) = false',
302: 1:    '✅f(oXOoxXW) = true',
302: 1:    '✅f(x) = false',
302: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
302: 1:    '✅f(5CAr7zsRke6Lb0Bi) = true',
302: 1:    '❌f(XsYSeqWBD1) = ??? != false'
302: 1:  ],
302: 1:  'level': 10,
302: 1:  'nextQuestion': 'XsYSeqWBD1',
302: 1:  'questions': [
302: 1:    'ooxx',
302: 1:    'xooxx',
302: 1:    'ooxXm',
302: 1:    'zpzpzpp',
302: 1:    'zzoo',
302: 1:    'xxxooo',
302: 1:    'xxxXooOo',
302: 1:    'xxx23424esdsfvxXXOOooo',
302: 1:    'xXxxoewrcoOoo',
302: 1:    'XxxxooO',
302: 1:    'zssddd',
302: 1:    'Xxxxertr34',
302: 1:    'xXoXOFo',
302: 1:    'ooXXoOO',
302: 1:    'RXT0oo',
302: 1:    'XXOAB0oxXx',
302: 1:    'JxXAO',
302: 1:    'PXXWXoO',
302: 1:    'XO7XxX',
302: 1:    'FGoXBOFO',
302: 1:    'oO',
302: 1:    'XCOXXXO',
302: 1:    'WXXxXOXXT',
302: 1:    'RXXoX',
302: 1:    'oXOoxXW',
302: 1:    'x',
302: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
302: 1:    '5CAr7zsRke6Lb0Bi',
302: 1:    'XsYSeqWBD1'
302: 1:  ]
302: 1:}
302: 1:Scores: 11723
302: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'false']')
302: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
303: 1:BoardData {
303: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
303: 1:  'expectedAnswer': 'false',
303: 1:  'history': [
303: 1:    {
303: 1:      'answer': 'true',
303: 1:      'question': 'ooxx',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': 'false',
303: 1:      'question': 'xooxx',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': 'true',
303: 1:      'question': 'ooxXm',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': 'true',
303: 1:      'question': 'zpzpzpp',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': 'false',
303: 1:      'question': 'zzoo',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': 'true',
303: 1:      'question': 'xxxooo',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': 'true',
303: 1:      'question': 'xxxXooOo',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': 'false',
303: 1:      'question': 'xxx23424esdsfvxXXOOooo',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': 'false',
303: 1:      'question': 'xXxxoewrcoOoo',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': 'false',
303: 1:      'question': 'XxxxooO',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': 'true',
303: 1:      'question': 'zssddd',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': 'false',
303: 1:      'question': 'Xxxxertr34',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': 'true',
303: 1:      'question': 'xXoXOFo',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': 'false',
303: 1:      'question': 'ooXXoOO',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': 'false',
303: 1:      'question': 'RXT0oo',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': 'false',
303: 1:      'question': 'XXOAB0oxXx',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': 'false',
303: 1:      'question': 'JxXAO',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': 'false',
303: 1:      'question': 'PXXWXoO',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': 'false',
303: 1:      'question': 'XO7XxX',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': 'false',
303: 1:      'question': 'FGoXBOFO',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': 'false',
303: 1:      'question': 'oO',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': 'false',
303: 1:      'question': 'XCOXXXO',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': 'false',
303: 1:      'question': 'WXXxXOXXT',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': 'false',
303: 1:      'question': 'RXXoX',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': 'true',
303: 1:      'question': 'oXOoxXW',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': 'false',
303: 1:      'question': 'x',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': 'false',
303: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': 'true',
303: 1:      'question': '5CAr7zsRke6Lb0Bi',
303: 1:      'valid': true
303: 1:    },
303: 1:    {
303: 1:      'answer': 'false',
303: 1:      'question': 'XsYSeqWBD1',
303: 1:      'valid': true
303: 1:    }
303: 1:  ],
303: 1:  'info': [
303: 1:    '✅f(ooxx) = true',
303: 1:    '✅f(xooxx) = false',
303: 1:    '✅f(ooxXm) = true',
303: 1:    '✅f(zpzpzpp) = true',
303: 1:    '✅f(zzoo) = false',
303: 1:    '✅f(xxxooo) = true',
303: 1:    '✅f(xxxXooOo) = true',
303: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
303: 1:    '✅f(xXxxoewrcoOoo) = false',
303: 1:    '✅f(XxxxooO) = false',
303: 1:    '✅f(zssddd) = true',
303: 1:    '✅f(Xxxxertr34) = false',
303: 1:    '✅f(xXoXOFo) = true',
303: 1:    '✅f(ooXXoOO) = false',
303: 1:    '✅f(RXT0oo) = false',
303: 1:    '✅f(XXOAB0oxXx) = false',
303: 1:    '✅f(JxXAO) = false',
303: 1:    '✅f(PXXWXoO) = false',
303: 1:    '✅f(XO7XxX) = false',
303: 1:    '✅f(FGoXBOFO) = false',
303: 1:    '✅f(oO) = false',
303: 1:    '✅f(XCOXXXO) = false',
303: 1:    '✅f(WXXxXOXXT) = false',
303: 1:    '✅f(RXXoX) = false',
303: 1:    '✅f(oXOoxXW) = true',
303: 1:    '✅f(x) = false',
303: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
303: 1:    '✅f(5CAr7zsRke6Lb0Bi) = true',
303: 1:    '✅f(XsYSeqWBD1) = false',
303: 1:    '❌f(Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX) = ??? != false'
303: 1:  ],
303: 1:  'level': 10,
303: 1:  'nextQuestion': 'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
303: 1:  'questions': [
303: 1:    'ooxx',
303: 1:    'xooxx',
303: 1:    'ooxXm',
303: 1:    'zpzpzpp',
303: 1:    'zzoo',
303: 1:    'xxxooo',
303: 1:    'xxxXooOo',
303: 1:    'xxx23424esdsfvxXXOOooo',
303: 1:    'xXxxoewrcoOoo',
303: 1:    'XxxxooO',
303: 1:    'zssddd',
303: 1:    'Xxxxertr34',
303: 1:    'xXoXOFo',
303: 1:    'ooXXoOO',
303: 1:    'RXT0oo',
303: 1:    'XXOAB0oxXx',
303: 1:    'JxXAO',
303: 1:    'PXXWXoO',
303: 1:    'XO7XxX',
303: 1:    'FGoXBOFO',
303: 1:    'oO',
303: 1:    'XCOXXXO',
303: 1:    'WXXxXOXXT',
303: 1:    'RXXoX',
303: 1:    'oXOoxXW',
303: 1:    'x',
303: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
303: 1:    '5CAr7zsRke6Lb0Bi',
303: 1:    'XsYSeqWBD1',
303: 1:    'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX'
303: 1:  ]
303: 1:}
303: 1:Scores: 11726
303: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'false', 'false']')
303: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
304: 1:BoardData {
304: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
304: 1:  'expectedAnswer': 'false',
304: 1:  'history': [
304: 1:    {
304: 1:      'answer': 'true',
304: 1:      'question': 'ooxx',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'false',
304: 1:      'question': 'xooxx',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'true',
304: 1:      'question': 'ooxXm',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'true',
304: 1:      'question': 'zpzpzpp',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'false',
304: 1:      'question': 'zzoo',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'true',
304: 1:      'question': 'xxxooo',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'true',
304: 1:      'question': 'xxxXooOo',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'false',
304: 1:      'question': 'xxx23424esdsfvxXXOOooo',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'false',
304: 1:      'question': 'xXxxoewrcoOoo',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'false',
304: 1:      'question': 'XxxxooO',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'true',
304: 1:      'question': 'zssddd',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'false',
304: 1:      'question': 'Xxxxertr34',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'true',
304: 1:      'question': 'xXoXOFo',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'false',
304: 1:      'question': 'ooXXoOO',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'false',
304: 1:      'question': 'RXT0oo',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'false',
304: 1:      'question': 'XXOAB0oxXx',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'false',
304: 1:      'question': 'JxXAO',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'false',
304: 1:      'question': 'PXXWXoO',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'false',
304: 1:      'question': 'XO7XxX',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'false',
304: 1:      'question': 'FGoXBOFO',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'false',
304: 1:      'question': 'oO',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'false',
304: 1:      'question': 'XCOXXXO',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'false',
304: 1:      'question': 'WXXxXOXXT',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'false',
304: 1:      'question': 'RXXoX',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'true',
304: 1:      'question': 'oXOoxXW',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'false',
304: 1:      'question': 'x',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'false',
304: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'true',
304: 1:      'question': '5CAr7zsRke6Lb0Bi',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'false',
304: 1:      'question': 'XsYSeqWBD1',
304: 1:      'valid': true
304: 1:    },
304: 1:    {
304: 1:      'answer': 'false',
304: 1:      'question': 'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
304: 1:      'valid': true
304: 1:    }
304: 1:  ],
304: 1:  'info': [
304: 1:    '✅f(ooxx) = true',
304: 1:    '✅f(xooxx) = false',
304: 1:    '✅f(ooxXm) = true',
304: 1:    '✅f(zpzpzpp) = true',
304: 1:    '✅f(zzoo) = false',
304: 1:    '✅f(xxxooo) = true',
304: 1:    '✅f(xxxXooOo) = true',
304: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
304: 1:    '✅f(xXxxoewrcoOoo) = false',
304: 1:    '✅f(XxxxooO) = false',
304: 1:    '✅f(zssddd) = true',
304: 1:    '✅f(Xxxxertr34) = false',
304: 1:    '✅f(xXoXOFo) = true',
304: 1:    '✅f(ooXXoOO) = false',
304: 1:    '✅f(RXT0oo) = false',
304: 1:    '✅f(XXOAB0oxXx) = false',
304: 1:    '✅f(JxXAO) = false',
304: 1:    '✅f(PXXWXoO) = false',
304: 1:    '✅f(XO7XxX) = false',
304: 1:    '✅f(FGoXBOFO) = false',
304: 1:    '✅f(oO) = false',
304: 1:    '✅f(XCOXXXO) = false',
304: 1:    '✅f(WXXxXOXXT) = false',
304: 1:    '✅f(RXXoX) = false',
304: 1:    '✅f(oXOoxXW) = true',
304: 1:    '✅f(x) = false',
304: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
304: 1:    '✅f(5CAr7zsRke6Lb0Bi) = true',
304: 1:    '✅f(XsYSeqWBD1) = false',
304: 1:    '✅f(Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX) = false',
304: 1:    '❌f(tqM31hdjxhaPYLdght9ZZfWt0Tvy) = ??? != false'
304: 1:  ],
304: 1:  'level': 10,
304: 1:  'nextQuestion': 'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
304: 1:  'questions': [
304: 1:    'ooxx',
304: 1:    'xooxx',
304: 1:    'ooxXm',
304: 1:    'zpzpzpp',
304: 1:    'zzoo',
304: 1:    'xxxooo',
304: 1:    'xxxXooOo',
304: 1:    'xxx23424esdsfvxXXOOooo',
304: 1:    'xXxxoewrcoOoo',
304: 1:    'XxxxooO',
304: 1:    'zssddd',
304: 1:    'Xxxxertr34',
304: 1:    'xXoXOFo',
304: 1:    'ooXXoOO',
304: 1:    'RXT0oo',
304: 1:    'XXOAB0oxXx',
304: 1:    'JxXAO',
304: 1:    'PXXWXoO',
304: 1:    'XO7XxX',
304: 1:    'FGoXBOFO',
304: 1:    'oO',
304: 1:    'XCOXXXO',
304: 1:    'WXXxXOXXT',
304: 1:    'RXXoX',
304: 1:    'oXOoxXW',
304: 1:    'x',
304: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
304: 1:    '5CAr7zsRke6Lb0Bi',
304: 1:    'XsYSeqWBD1',
304: 1:    'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
304: 1:    'tqM31hdjxhaPYLdght9ZZfWt0Tvy'
304: 1:  ]
304: 1:}
304: 1:Scores: 11729
304: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'false', 'false', 'false']')
304: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
305: 1:BoardData {
305: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
305: 1:  'expectedAnswer': 'false',
305: 1:  'history': [
305: 1:    {
305: 1:      'answer': 'true',
305: 1:      'question': 'ooxx',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'false',
305: 1:      'question': 'xooxx',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'true',
305: 1:      'question': 'ooxXm',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'true',
305: 1:      'question': 'zpzpzpp',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'false',
305: 1:      'question': 'zzoo',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'true',
305: 1:      'question': 'xxxooo',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'true',
305: 1:      'question': 'xxxXooOo',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'false',
305: 1:      'question': 'xxx23424esdsfvxXXOOooo',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'false',
305: 1:      'question': 'xXxxoewrcoOoo',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'false',
305: 1:      'question': 'XxxxooO',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'true',
305: 1:      'question': 'zssddd',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'false',
305: 1:      'question': 'Xxxxertr34',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'true',
305: 1:      'question': 'xXoXOFo',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'false',
305: 1:      'question': 'ooXXoOO',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'false',
305: 1:      'question': 'RXT0oo',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'false',
305: 1:      'question': 'XXOAB0oxXx',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'false',
305: 1:      'question': 'JxXAO',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'false',
305: 1:      'question': 'PXXWXoO',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'false',
305: 1:      'question': 'XO7XxX',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'false',
305: 1:      'question': 'FGoXBOFO',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'false',
305: 1:      'question': 'oO',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'false',
305: 1:      'question': 'XCOXXXO',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'false',
305: 1:      'question': 'WXXxXOXXT',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'false',
305: 1:      'question': 'RXXoX',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'true',
305: 1:      'question': 'oXOoxXW',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'false',
305: 1:      'question': 'x',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'false',
305: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'true',
305: 1:      'question': '5CAr7zsRke6Lb0Bi',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'false',
305: 1:      'question': 'XsYSeqWBD1',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'false',
305: 1:      'question': 'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
305: 1:      'valid': true
305: 1:    },
305: 1:    {
305: 1:      'answer': 'false',
305: 1:      'question': 'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
305: 1:      'valid': true
305: 1:    }
305: 1:  ],
305: 1:  'info': [
305: 1:    '✅f(ooxx) = true',
305: 1:    '✅f(xooxx) = false',
305: 1:    '✅f(ooxXm) = true',
305: 1:    '✅f(zpzpzpp) = true',
305: 1:    '✅f(zzoo) = false',
305: 1:    '✅f(xxxooo) = true',
305: 1:    '✅f(xxxXooOo) = true',
305: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
305: 1:    '✅f(xXxxoewrcoOoo) = false',
305: 1:    '✅f(XxxxooO) = false',
305: 1:    '✅f(zssddd) = true',
305: 1:    '✅f(Xxxxertr34) = false',
305: 1:    '✅f(xXoXOFo) = true',
305: 1:    '✅f(ooXXoOO) = false',
305: 1:    '✅f(RXT0oo) = false',
305: 1:    '✅f(XXOAB0oxXx) = false',
305: 1:    '✅f(JxXAO) = false',
305: 1:    '✅f(PXXWXoO) = false',
305: 1:    '✅f(XO7XxX) = false',
305: 1:    '✅f(FGoXBOFO) = false',
305: 1:    '✅f(oO) = false',
305: 1:    '✅f(XCOXXXO) = false',
305: 1:    '✅f(WXXxXOXXT) = false',
305: 1:    '✅f(RXXoX) = false',
305: 1:    '✅f(oXOoxXW) = true',
305: 1:    '✅f(x) = false',
305: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
305: 1:    '✅f(5CAr7zsRke6Lb0Bi) = true',
305: 1:    '✅f(XsYSeqWBD1) = false',
305: 1:    '✅f(Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX) = false',
305: 1:    '✅f(tqM31hdjxhaPYLdght9ZZfWt0Tvy) = false',
305: 1:    '❌f(EMfqgqHIJAvjjdKhqS8uoa) = ??? != false'
305: 1:  ],
305: 1:  'level': 10,
305: 1:  'nextQuestion': 'EMfqgqHIJAvjjdKhqS8uoa',
305: 1:  'questions': [
305: 1:    'ooxx',
305: 1:    'xooxx',
305: 1:    'ooxXm',
305: 1:    'zpzpzpp',
305: 1:    'zzoo',
305: 1:    'xxxooo',
305: 1:    'xxxXooOo',
305: 1:    'xxx23424esdsfvxXXOOooo',
305: 1:    'xXxxoewrcoOoo',
305: 1:    'XxxxooO',
305: 1:    'zssddd',
305: 1:    'Xxxxertr34',
305: 1:    'xXoXOFo',
305: 1:    'ooXXoOO',
305: 1:    'RXT0oo',
305: 1:    'XXOAB0oxXx',
305: 1:    'JxXAO',
305: 1:    'PXXWXoO',
305: 1:    'XO7XxX',
305: 1:    'FGoXBOFO',
305: 1:    'oO',
305: 1:    'XCOXXXO',
305: 1:    'WXXxXOXXT',
305: 1:    'RXXoX',
305: 1:    'oXOoxXW',
305: 1:    'x',
305: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
305: 1:    '5CAr7zsRke6Lb0Bi',
305: 1:    'XsYSeqWBD1',
305: 1:    'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
305: 1:    'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
305: 1:    'EMfqgqHIJAvjjdKhqS8uoa'
305: 1:  ]
305: 1:}
305: 1:Scores: 11732
305: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'false']')
305: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
306: 1:BoardData {
306: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
306: 1:  'expectedAnswer': 'false',
306: 1:  'history': [
306: 1:    {
306: 1:      'answer': 'true',
306: 1:      'question': 'ooxx',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'false',
306: 1:      'question': 'xooxx',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'true',
306: 1:      'question': 'ooxXm',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'true',
306: 1:      'question': 'zpzpzpp',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'false',
306: 1:      'question': 'zzoo',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'true',
306: 1:      'question': 'xxxooo',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'true',
306: 1:      'question': 'xxxXooOo',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'false',
306: 1:      'question': 'xxx23424esdsfvxXXOOooo',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'false',
306: 1:      'question': 'xXxxoewrcoOoo',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'false',
306: 1:      'question': 'XxxxooO',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'true',
306: 1:      'question': 'zssddd',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'false',
306: 1:      'question': 'Xxxxertr34',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'true',
306: 1:      'question': 'xXoXOFo',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'false',
306: 1:      'question': 'ooXXoOO',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'false',
306: 1:      'question': 'RXT0oo',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'false',
306: 1:      'question': 'XXOAB0oxXx',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'false',
306: 1:      'question': 'JxXAO',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'false',
306: 1:      'question': 'PXXWXoO',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'false',
306: 1:      'question': 'XO7XxX',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'false',
306: 1:      'question': 'FGoXBOFO',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'false',
306: 1:      'question': 'oO',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'false',
306: 1:      'question': 'XCOXXXO',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'false',
306: 1:      'question': 'WXXxXOXXT',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'false',
306: 1:      'question': 'RXXoX',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'true',
306: 1:      'question': 'oXOoxXW',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'false',
306: 1:      'question': 'x',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'false',
306: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'true',
306: 1:      'question': '5CAr7zsRke6Lb0Bi',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'false',
306: 1:      'question': 'XsYSeqWBD1',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'false',
306: 1:      'question': 'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'false',
306: 1:      'question': 'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
306: 1:      'valid': true
306: 1:    },
306: 1:    {
306: 1:      'answer': 'false',
306: 1:      'question': 'EMfqgqHIJAvjjdKhqS8uoa',
306: 1:      'valid': true
306: 1:    }
306: 1:  ],
306: 1:  'info': [
306: 1:    '✅f(ooxx) = true',
306: 1:    '✅f(xooxx) = false',
306: 1:    '✅f(ooxXm) = true',
306: 1:    '✅f(zpzpzpp) = true',
306: 1:    '✅f(zzoo) = false',
306: 1:    '✅f(xxxooo) = true',
306: 1:    '✅f(xxxXooOo) = true',
306: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
306: 1:    '✅f(xXxxoewrcoOoo) = false',
306: 1:    '✅f(XxxxooO) = false',
306: 1:    '✅f(zssddd) = true',
306: 1:    '✅f(Xxxxertr34) = false',
306: 1:    '✅f(xXoXOFo) = true',
306: 1:    '✅f(ooXXoOO) = false',
306: 1:    '✅f(RXT0oo) = false',
306: 1:    '✅f(XXOAB0oxXx) = false',
306: 1:    '✅f(JxXAO) = false',
306: 1:    '✅f(PXXWXoO) = false',
306: 1:    '✅f(XO7XxX) = false',
306: 1:    '✅f(FGoXBOFO) = false',
306: 1:    '✅f(oO) = false',
306: 1:    '✅f(XCOXXXO) = false',
306: 1:    '✅f(WXXxXOXXT) = false',
306: 1:    '✅f(RXXoX) = false',
306: 1:    '✅f(oXOoxXW) = true',
306: 1:    '✅f(x) = false',
306: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
306: 1:    '✅f(5CAr7zsRke6Lb0Bi) = true',
306: 1:    '✅f(XsYSeqWBD1) = false',
306: 1:    '✅f(Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX) = false',
306: 1:    '✅f(tqM31hdjxhaPYLdght9ZZfWt0Tvy) = false',
306: 1:    '✅f(EMfqgqHIJAvjjdKhqS8uoa) = false',
306: 1:    '❌f(xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB) = ??? != false'
306: 1:  ],
306: 1:  'level': 10,
306: 1:  'nextQuestion': 'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
306: 1:  'questions': [
306: 1:    'ooxx',
306: 1:    'xooxx',
306: 1:    'ooxXm',
306: 1:    'zpzpzpp',
306: 1:    'zzoo',
306: 1:    'xxxooo',
306: 1:    'xxxXooOo',
306: 1:    'xxx23424esdsfvxXXOOooo',
306: 1:    'xXxxoewrcoOoo',
306: 1:    'XxxxooO',
306: 1:    'zssddd',
306: 1:    'Xxxxertr34',
306: 1:    'xXoXOFo',
306: 1:    'ooXXoOO',
306: 1:    'RXT0oo',
306: 1:    'XXOAB0oxXx',
306: 1:    'JxXAO',
306: 1:    'PXXWXoO',
306: 1:    'XO7XxX',
306: 1:    'FGoXBOFO',
306: 1:    'oO',
306: 1:    'XCOXXXO',
306: 1:    'WXXxXOXXT',
306: 1:    'RXXoX',
306: 1:    'oXOoxXW',
306: 1:    'x',
306: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
306: 1:    '5CAr7zsRke6Lb0Bi',
306: 1:    'XsYSeqWBD1',
306: 1:    'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
306: 1:    'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
306: 1:    'EMfqgqHIJAvjjdKhqS8uoa',
306: 1:    'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB'
306: 1:  ]
306: 1:}
306: 1:Scores: 11735
306: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'false']')
306: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
307: 1:BoardData {
307: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
307: 1:  'expectedAnswer': 'false',
307: 1:  'history': [
307: 1:    {
307: 1:      'answer': 'true',
307: 1:      'question': 'ooxx',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'false',
307: 1:      'question': 'xooxx',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'true',
307: 1:      'question': 'ooxXm',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'true',
307: 1:      'question': 'zpzpzpp',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'false',
307: 1:      'question': 'zzoo',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'true',
307: 1:      'question': 'xxxooo',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'true',
307: 1:      'question': 'xxxXooOo',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'false',
307: 1:      'question': 'xxx23424esdsfvxXXOOooo',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'false',
307: 1:      'question': 'xXxxoewrcoOoo',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'false',
307: 1:      'question': 'XxxxooO',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'true',
307: 1:      'question': 'zssddd',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'false',
307: 1:      'question': 'Xxxxertr34',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'true',
307: 1:      'question': 'xXoXOFo',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'false',
307: 1:      'question': 'ooXXoOO',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'false',
307: 1:      'question': 'RXT0oo',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'false',
307: 1:      'question': 'XXOAB0oxXx',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'false',
307: 1:      'question': 'JxXAO',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'false',
307: 1:      'question': 'PXXWXoO',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'false',
307: 1:      'question': 'XO7XxX',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'false',
307: 1:      'question': 'FGoXBOFO',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'false',
307: 1:      'question': 'oO',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'false',
307: 1:      'question': 'XCOXXXO',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'false',
307: 1:      'question': 'WXXxXOXXT',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'false',
307: 1:      'question': 'RXXoX',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'true',
307: 1:      'question': 'oXOoxXW',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'false',
307: 1:      'question': 'x',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'false',
307: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'true',
307: 1:      'question': '5CAr7zsRke6Lb0Bi',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'false',
307: 1:      'question': 'XsYSeqWBD1',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'false',
307: 1:      'question': 'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'false',
307: 1:      'question': 'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'false',
307: 1:      'question': 'EMfqgqHIJAvjjdKhqS8uoa',
307: 1:      'valid': true
307: 1:    },
307: 1:    {
307: 1:      'answer': 'false',
307: 1:      'question': 'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
307: 1:      'valid': true
307: 1:    }
307: 1:  ],
307: 1:  'info': [
307: 1:    '✅f(ooxx) = true',
307: 1:    '✅f(xooxx) = false',
307: 1:    '✅f(ooxXm) = true',
307: 1:    '✅f(zpzpzpp) = true',
307: 1:    '✅f(zzoo) = false',
307: 1:    '✅f(xxxooo) = true',
307: 1:    '✅f(xxxXooOo) = true',
307: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
307: 1:    '✅f(xXxxoewrcoOoo) = false',
307: 1:    '✅f(XxxxooO) = false',
307: 1:    '✅f(zssddd) = true',
307: 1:    '✅f(Xxxxertr34) = false',
307: 1:    '✅f(xXoXOFo) = true',
307: 1:    '✅f(ooXXoOO) = false',
307: 1:    '✅f(RXT0oo) = false',
307: 1:    '✅f(XXOAB0oxXx) = false',
307: 1:    '✅f(JxXAO) = false',
307: 1:    '✅f(PXXWXoO) = false',
307: 1:    '✅f(XO7XxX) = false',
307: 1:    '✅f(FGoXBOFO) = false',
307: 1:    '✅f(oO) = false',
307: 1:    '✅f(XCOXXXO) = false',
307: 1:    '✅f(WXXxXOXXT) = false',
307: 1:    '✅f(RXXoX) = false',
307: 1:    '✅f(oXOoxXW) = true',
307: 1:    '✅f(x) = false',
307: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
307: 1:    '✅f(5CAr7zsRke6Lb0Bi) = true',
307: 1:    '✅f(XsYSeqWBD1) = false',
307: 1:    '✅f(Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX) = false',
307: 1:    '✅f(tqM31hdjxhaPYLdght9ZZfWt0Tvy) = false',
307: 1:    '✅f(EMfqgqHIJAvjjdKhqS8uoa) = false',
307: 1:    '✅f(xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB) = false',
307: 1:    '❌f(rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF) = ??? != false'
307: 1:  ],
307: 1:  'level': 10,
307: 1:  'nextQuestion': 'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
307: 1:  'questions': [
307: 1:    'ooxx',
307: 1:    'xooxx',
307: 1:    'ooxXm',
307: 1:    'zpzpzpp',
307: 1:    'zzoo',
307: 1:    'xxxooo',
307: 1:    'xxxXooOo',
307: 1:    'xxx23424esdsfvxXXOOooo',
307: 1:    'xXxxoewrcoOoo',
307: 1:    'XxxxooO',
307: 1:    'zssddd',
307: 1:    'Xxxxertr34',
307: 1:    'xXoXOFo',
307: 1:    'ooXXoOO',
307: 1:    'RXT0oo',
307: 1:    'XXOAB0oxXx',
307: 1:    'JxXAO',
307: 1:    'PXXWXoO',
307: 1:    'XO7XxX',
307: 1:    'FGoXBOFO',
307: 1:    'oO',
307: 1:    'XCOXXXO',
307: 1:    'WXXxXOXXT',
307: 1:    'RXXoX',
307: 1:    'oXOoxXW',
307: 1:    'x',
307: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
307: 1:    '5CAr7zsRke6Lb0Bi',
307: 1:    'XsYSeqWBD1',
307: 1:    'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
307: 1:    'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
307: 1:    'EMfqgqHIJAvjjdKhqS8uoa',
307: 1:    'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
307: 1:    'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF'
307: 1:  ]
307: 1:}
307: 1:Scores: 11738
307: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false']')
307: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
308: 1:BoardData {
308: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
308: 1:  'expectedAnswer': 'false',
308: 1:  'history': [
308: 1:    {
308: 1:      'answer': 'true',
308: 1:      'question': 'ooxx',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'false',
308: 1:      'question': 'xooxx',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'true',
308: 1:      'question': 'ooxXm',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'true',
308: 1:      'question': 'zpzpzpp',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'false',
308: 1:      'question': 'zzoo',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'true',
308: 1:      'question': 'xxxooo',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'true',
308: 1:      'question': 'xxxXooOo',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'false',
308: 1:      'question': 'xxx23424esdsfvxXXOOooo',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'false',
308: 1:      'question': 'xXxxoewrcoOoo',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'false',
308: 1:      'question': 'XxxxooO',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'true',
308: 1:      'question': 'zssddd',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'false',
308: 1:      'question': 'Xxxxertr34',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'true',
308: 1:      'question': 'xXoXOFo',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'false',
308: 1:      'question': 'ooXXoOO',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'false',
308: 1:      'question': 'RXT0oo',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'false',
308: 1:      'question': 'XXOAB0oxXx',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'false',
308: 1:      'question': 'JxXAO',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'false',
308: 1:      'question': 'PXXWXoO',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'false',
308: 1:      'question': 'XO7XxX',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'false',
308: 1:      'question': 'FGoXBOFO',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'false',
308: 1:      'question': 'oO',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'false',
308: 1:      'question': 'XCOXXXO',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'false',
308: 1:      'question': 'WXXxXOXXT',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'false',
308: 1:      'question': 'RXXoX',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'true',
308: 1:      'question': 'oXOoxXW',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'false',
308: 1:      'question': 'x',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'false',
308: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'true',
308: 1:      'question': '5CAr7zsRke6Lb0Bi',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'false',
308: 1:      'question': 'XsYSeqWBD1',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'false',
308: 1:      'question': 'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'false',
308: 1:      'question': 'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'false',
308: 1:      'question': 'EMfqgqHIJAvjjdKhqS8uoa',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'false',
308: 1:      'question': 'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
308: 1:      'valid': true
308: 1:    },
308: 1:    {
308: 1:      'answer': 'false',
308: 1:      'question': 'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
308: 1:      'valid': true
308: 1:    }
308: 1:  ],
308: 1:  'info': [
308: 1:    '✅f(ooxx) = true',
308: 1:    '✅f(xooxx) = false',
308: 1:    '✅f(ooxXm) = true',
308: 1:    '✅f(zpzpzpp) = true',
308: 1:    '✅f(zzoo) = false',
308: 1:    '✅f(xxxooo) = true',
308: 1:    '✅f(xxxXooOo) = true',
308: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
308: 1:    '✅f(xXxxoewrcoOoo) = false',
308: 1:    '✅f(XxxxooO) = false',
308: 1:    '✅f(zssddd) = true',
308: 1:    '✅f(Xxxxertr34) = false',
308: 1:    '✅f(xXoXOFo) = true',
308: 1:    '✅f(ooXXoOO) = false',
308: 1:    '✅f(RXT0oo) = false',
308: 1:    '✅f(XXOAB0oxXx) = false',
308: 1:    '✅f(JxXAO) = false',
308: 1:    '✅f(PXXWXoO) = false',
308: 1:    '✅f(XO7XxX) = false',
308: 1:    '✅f(FGoXBOFO) = false',
308: 1:    '✅f(oO) = false',
308: 1:    '✅f(XCOXXXO) = false',
308: 1:    '✅f(WXXxXOXXT) = false',
308: 1:    '✅f(RXXoX) = false',
308: 1:    '✅f(oXOoxXW) = true',
308: 1:    '✅f(x) = false',
308: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
308: 1:    '✅f(5CAr7zsRke6Lb0Bi) = true',
308: 1:    '✅f(XsYSeqWBD1) = false',
308: 1:    '✅f(Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX) = false',
308: 1:    '✅f(tqM31hdjxhaPYLdght9ZZfWt0Tvy) = false',
308: 1:    '✅f(EMfqgqHIJAvjjdKhqS8uoa) = false',
308: 1:    '✅f(xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB) = false',
308: 1:    '✅f(rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF) = false',
308: 1:    '❌f(i0XLMlDgITKfdEy) = ??? != false'
308: 1:  ],
308: 1:  'level': 10,
308: 1:  'nextQuestion': 'i0XLMlDgITKfdEy',
308: 1:  'questions': [
308: 1:    'ooxx',
308: 1:    'xooxx',
308: 1:    'ooxXm',
308: 1:    'zpzpzpp',
308: 1:    'zzoo',
308: 1:    'xxxooo',
308: 1:    'xxxXooOo',
308: 1:    'xxx23424esdsfvxXXOOooo',
308: 1:    'xXxxoewrcoOoo',
308: 1:    'XxxxooO',
308: 1:    'zssddd',
308: 1:    'Xxxxertr34',
308: 1:    'xXoXOFo',
308: 1:    'ooXXoOO',
308: 1:    'RXT0oo',
308: 1:    'XXOAB0oxXx',
308: 1:    'JxXAO',
308: 1:    'PXXWXoO',
308: 1:    'XO7XxX',
308: 1:    'FGoXBOFO',
308: 1:    'oO',
308: 1:    'XCOXXXO',
308: 1:    'WXXxXOXXT',
308: 1:    'RXXoX',
308: 1:    'oXOoxXW',
308: 1:    'x',
308: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
308: 1:    '5CAr7zsRke6Lb0Bi',
308: 1:    'XsYSeqWBD1',
308: 1:    'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
308: 1:    'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
308: 1:    'EMfqgqHIJAvjjdKhqS8uoa',
308: 1:    'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
308: 1:    'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
308: 1:    'i0XLMlDgITKfdEy'
308: 1:  ]
308: 1:}
308: 1:Scores: 11741
308: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false']')
308: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
309: 1:BoardData {
309: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
309: 1:  'expectedAnswer': 'true',
309: 1:  'history': [
309: 1:    {
309: 1:      'answer': 'true',
309: 1:      'question': 'ooxx',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'false',
309: 1:      'question': 'xooxx',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'true',
309: 1:      'question': 'ooxXm',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'true',
309: 1:      'question': 'zpzpzpp',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'false',
309: 1:      'question': 'zzoo',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'true',
309: 1:      'question': 'xxxooo',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'true',
309: 1:      'question': 'xxxXooOo',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'false',
309: 1:      'question': 'xxx23424esdsfvxXXOOooo',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'false',
309: 1:      'question': 'xXxxoewrcoOoo',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'false',
309: 1:      'question': 'XxxxooO',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'true',
309: 1:      'question': 'zssddd',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'false',
309: 1:      'question': 'Xxxxertr34',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'true',
309: 1:      'question': 'xXoXOFo',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'false',
309: 1:      'question': 'ooXXoOO',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'false',
309: 1:      'question': 'RXT0oo',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'false',
309: 1:      'question': 'XXOAB0oxXx',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'false',
309: 1:      'question': 'JxXAO',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'false',
309: 1:      'question': 'PXXWXoO',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'false',
309: 1:      'question': 'XO7XxX',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'false',
309: 1:      'question': 'FGoXBOFO',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'false',
309: 1:      'question': 'oO',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'false',
309: 1:      'question': 'XCOXXXO',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'false',
309: 1:      'question': 'WXXxXOXXT',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'false',
309: 1:      'question': 'RXXoX',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'true',
309: 1:      'question': 'oXOoxXW',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'false',
309: 1:      'question': 'x',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'false',
309: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'true',
309: 1:      'question': '5CAr7zsRke6Lb0Bi',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'false',
309: 1:      'question': 'XsYSeqWBD1',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'false',
309: 1:      'question': 'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'false',
309: 1:      'question': 'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'false',
309: 1:      'question': 'EMfqgqHIJAvjjdKhqS8uoa',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'false',
309: 1:      'question': 'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'false',
309: 1:      'question': 'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
309: 1:      'valid': true
309: 1:    },
309: 1:    {
309: 1:      'answer': 'false',
309: 1:      'question': 'i0XLMlDgITKfdEy',
309: 1:      'valid': true
309: 1:    }
309: 1:  ],
309: 1:  'info': [
309: 1:    '✅f(ooxx) = true',
309: 1:    '✅f(xooxx) = false',
309: 1:    '✅f(ooxXm) = true',
309: 1:    '✅f(zpzpzpp) = true',
309: 1:    '✅f(zzoo) = false',
309: 1:    '✅f(xxxooo) = true',
309: 1:    '✅f(xxxXooOo) = true',
309: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
309: 1:    '✅f(xXxxoewrcoOoo) = false',
309: 1:    '✅f(XxxxooO) = false',
309: 1:    '✅f(zssddd) = true',
309: 1:    '✅f(Xxxxertr34) = false',
309: 1:    '✅f(xXoXOFo) = true',
309: 1:    '✅f(ooXXoOO) = false',
309: 1:    '✅f(RXT0oo) = false',
309: 1:    '✅f(XXOAB0oxXx) = false',
309: 1:    '✅f(JxXAO) = false',
309: 1:    '✅f(PXXWXoO) = false',
309: 1:    '✅f(XO7XxX) = false',
309: 1:    '✅f(FGoXBOFO) = false',
309: 1:    '✅f(oO) = false',
309: 1:    '✅f(XCOXXXO) = false',
309: 1:    '✅f(WXXxXOXXT) = false',
309: 1:    '✅f(RXXoX) = false',
309: 1:    '✅f(oXOoxXW) = true',
309: 1:    '✅f(x) = false',
309: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
309: 1:    '✅f(5CAr7zsRke6Lb0Bi) = true',
309: 1:    '✅f(XsYSeqWBD1) = false',
309: 1:    '✅f(Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX) = false',
309: 1:    '✅f(tqM31hdjxhaPYLdght9ZZfWt0Tvy) = false',
309: 1:    '✅f(EMfqgqHIJAvjjdKhqS8uoa) = false',
309: 1:    '✅f(xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB) = false',
309: 1:    '✅f(rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF) = false',
309: 1:    '✅f(i0XLMlDgITKfdEy) = false',
309: 1:    '❌f(pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw) = ??? != true'
309: 1:  ],
309: 1:  'level': 10,
309: 1:  'nextQuestion': 'pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw',
309: 1:  'questions': [
309: 1:    'ooxx',
309: 1:    'xooxx',
309: 1:    'ooxXm',
309: 1:    'zpzpzpp',
309: 1:    'zzoo',
309: 1:    'xxxooo',
309: 1:    'xxxXooOo',
309: 1:    'xxx23424esdsfvxXXOOooo',
309: 1:    'xXxxoewrcoOoo',
309: 1:    'XxxxooO',
309: 1:    'zssddd',
309: 1:    'Xxxxertr34',
309: 1:    'xXoXOFo',
309: 1:    'ooXXoOO',
309: 1:    'RXT0oo',
309: 1:    'XXOAB0oxXx',
309: 1:    'JxXAO',
309: 1:    'PXXWXoO',
309: 1:    'XO7XxX',
309: 1:    'FGoXBOFO',
309: 1:    'oO',
309: 1:    'XCOXXXO',
309: 1:    'WXXxXOXXT',
309: 1:    'RXXoX',
309: 1:    'oXOoxXW',
309: 1:    'x',
309: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
309: 1:    '5CAr7zsRke6Lb0Bi',
309: 1:    'XsYSeqWBD1',
309: 1:    'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
309: 1:    'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
309: 1:    'EMfqgqHIJAvjjdKhqS8uoa',
309: 1:    'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
309: 1:    'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
309: 1:    'i0XLMlDgITKfdEy',
309: 1:    'pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw'
309: 1:  ]
309: 1:}
309: 1:Scores: 11744
309: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true']')
309: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
310: 1:BoardData {
310: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
310: 1:  'expectedAnswer': 'true',
310: 1:  'history': [
310: 1:    {
310: 1:      'answer': 'true',
310: 1:      'question': 'ooxx',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'false',
310: 1:      'question': 'xooxx',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'true',
310: 1:      'question': 'ooxXm',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'true',
310: 1:      'question': 'zpzpzpp',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'false',
310: 1:      'question': 'zzoo',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'true',
310: 1:      'question': 'xxxooo',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'true',
310: 1:      'question': 'xxxXooOo',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'false',
310: 1:      'question': 'xxx23424esdsfvxXXOOooo',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'false',
310: 1:      'question': 'xXxxoewrcoOoo',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'false',
310: 1:      'question': 'XxxxooO',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'true',
310: 1:      'question': 'zssddd',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'false',
310: 1:      'question': 'Xxxxertr34',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'true',
310: 1:      'question': 'xXoXOFo',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'false',
310: 1:      'question': 'ooXXoOO',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'false',
310: 1:      'question': 'RXT0oo',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'false',
310: 1:      'question': 'XXOAB0oxXx',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'false',
310: 1:      'question': 'JxXAO',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'false',
310: 1:      'question': 'PXXWXoO',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'false',
310: 1:      'question': 'XO7XxX',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'false',
310: 1:      'question': 'FGoXBOFO',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'false',
310: 1:      'question': 'oO',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'false',
310: 1:      'question': 'XCOXXXO',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'false',
310: 1:      'question': 'WXXxXOXXT',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'false',
310: 1:      'question': 'RXXoX',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'true',
310: 1:      'question': 'oXOoxXW',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'false',
310: 1:      'question': 'x',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'false',
310: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'true',
310: 1:      'question': '5CAr7zsRke6Lb0Bi',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'false',
310: 1:      'question': 'XsYSeqWBD1',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'false',
310: 1:      'question': 'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'false',
310: 1:      'question': 'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'false',
310: 1:      'question': 'EMfqgqHIJAvjjdKhqS8uoa',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'false',
310: 1:      'question': 'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'false',
310: 1:      'question': 'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'false',
310: 1:      'question': 'i0XLMlDgITKfdEy',
310: 1:      'valid': true
310: 1:    },
310: 1:    {
310: 1:      'answer': 'true',
310: 1:      'question': 'pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw',
310: 1:      'valid': true
310: 1:    }
310: 1:  ],
310: 1:  'info': [
310: 1:    '✅f(ooxx) = true',
310: 1:    '✅f(xooxx) = false',
310: 1:    '✅f(ooxXm) = true',
310: 1:    '✅f(zpzpzpp) = true',
310: 1:    '✅f(zzoo) = false',
310: 1:    '✅f(xxxooo) = true',
310: 1:    '✅f(xxxXooOo) = true',
310: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
310: 1:    '✅f(xXxxoewrcoOoo) = false',
310: 1:    '✅f(XxxxooO) = false',
310: 1:    '✅f(zssddd) = true',
310: 1:    '✅f(Xxxxertr34) = false',
310: 1:    '✅f(xXoXOFo) = true',
310: 1:    '✅f(ooXXoOO) = false',
310: 1:    '✅f(RXT0oo) = false',
310: 1:    '✅f(XXOAB0oxXx) = false',
310: 1:    '✅f(JxXAO) = false',
310: 1:    '✅f(PXXWXoO) = false',
310: 1:    '✅f(XO7XxX) = false',
310: 1:    '✅f(FGoXBOFO) = false',
310: 1:    '✅f(oO) = false',
310: 1:    '✅f(XCOXXXO) = false',
310: 1:    '✅f(WXXxXOXXT) = false',
310: 1:    '✅f(RXXoX) = false',
310: 1:    '✅f(oXOoxXW) = true',
310: 1:    '✅f(x) = false',
310: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
310: 1:    '✅f(5CAr7zsRke6Lb0Bi) = true',
310: 1:    '✅f(XsYSeqWBD1) = false',
310: 1:    '✅f(Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX) = false',
310: 1:    '✅f(tqM31hdjxhaPYLdght9ZZfWt0Tvy) = false',
310: 1:    '✅f(EMfqgqHIJAvjjdKhqS8uoa) = false',
310: 1:    '✅f(xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB) = false',
310: 1:    '✅f(rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF) = false',
310: 1:    '✅f(i0XLMlDgITKfdEy) = false',
310: 1:    '✅f(pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw) = true',
310: 1:    '❌f(cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm) = ??? != true'
310: 1:  ],
310: 1:  'level': 10,
310: 1:  'nextQuestion': 'cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm',
310: 1:  'questions': [
310: 1:    'ooxx',
310: 1:    'xooxx',
310: 1:    'ooxXm',
310: 1:    'zpzpzpp',
310: 1:    'zzoo',
310: 1:    'xxxooo',
310: 1:    'xxxXooOo',
310: 1:    'xxx23424esdsfvxXXOOooo',
310: 1:    'xXxxoewrcoOoo',
310: 1:    'XxxxooO',
310: 1:    'zssddd',
310: 1:    'Xxxxertr34',
310: 1:    'xXoXOFo',
310: 1:    'ooXXoOO',
310: 1:    'RXT0oo',
310: 1:    'XXOAB0oxXx',
310: 1:    'JxXAO',
310: 1:    'PXXWXoO',
310: 1:    'XO7XxX',
310: 1:    'FGoXBOFO',
310: 1:    'oO',
310: 1:    'XCOXXXO',
310: 1:    'WXXxXOXXT',
310: 1:    'RXXoX',
310: 1:    'oXOoxXW',
310: 1:    'x',
310: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
310: 1:    '5CAr7zsRke6Lb0Bi',
310: 1:    'XsYSeqWBD1',
310: 1:    'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
310: 1:    'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
310: 1:    'EMfqgqHIJAvjjdKhqS8uoa',
310: 1:    'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
310: 1:    'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
310: 1:    'i0XLMlDgITKfdEy',
310: 1:    'pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw',
310: 1:    'cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm'
310: 1:  ]
310: 1:}
310: 1:Scores: 11747
310: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'true']')
310: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
311: 1:BoardData {
311: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
311: 1:  'expectedAnswer': 'false',
311: 1:  'history': [
311: 1:    {
311: 1:      'answer': 'true',
311: 1:      'question': 'ooxx',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'false',
311: 1:      'question': 'xooxx',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'true',
311: 1:      'question': 'ooxXm',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'true',
311: 1:      'question': 'zpzpzpp',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'false',
311: 1:      'question': 'zzoo',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'true',
311: 1:      'question': 'xxxooo',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'true',
311: 1:      'question': 'xxxXooOo',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'false',
311: 1:      'question': 'xxx23424esdsfvxXXOOooo',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'false',
311: 1:      'question': 'xXxxoewrcoOoo',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'false',
311: 1:      'question': 'XxxxooO',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'true',
311: 1:      'question': 'zssddd',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'false',
311: 1:      'question': 'Xxxxertr34',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'true',
311: 1:      'question': 'xXoXOFo',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'false',
311: 1:      'question': 'ooXXoOO',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'false',
311: 1:      'question': 'RXT0oo',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'false',
311: 1:      'question': 'XXOAB0oxXx',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'false',
311: 1:      'question': 'JxXAO',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'false',
311: 1:      'question': 'PXXWXoO',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'false',
311: 1:      'question': 'XO7XxX',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'false',
311: 1:      'question': 'FGoXBOFO',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'false',
311: 1:      'question': 'oO',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'false',
311: 1:      'question': 'XCOXXXO',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'false',
311: 1:      'question': 'WXXxXOXXT',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'false',
311: 1:      'question': 'RXXoX',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'true',
311: 1:      'question': 'oXOoxXW',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'false',
311: 1:      'question': 'x',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'false',
311: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'true',
311: 1:      'question': '5CAr7zsRke6Lb0Bi',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'false',
311: 1:      'question': 'XsYSeqWBD1',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'false',
311: 1:      'question': 'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'false',
311: 1:      'question': 'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'false',
311: 1:      'question': 'EMfqgqHIJAvjjdKhqS8uoa',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'false',
311: 1:      'question': 'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'false',
311: 1:      'question': 'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'false',
311: 1:      'question': 'i0XLMlDgITKfdEy',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'true',
311: 1:      'question': 'pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw',
311: 1:      'valid': true
311: 1:    },
311: 1:    {
311: 1:      'answer': 'true',
311: 1:      'question': 'cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm',
311: 1:      'valid': true
311: 1:    }
311: 1:  ],
311: 1:  'info': [
311: 1:    '✅f(ooxx) = true',
311: 1:    '✅f(xooxx) = false',
311: 1:    '✅f(ooxXm) = true',
311: 1:    '✅f(zpzpzpp) = true',
311: 1:    '✅f(zzoo) = false',
311: 1:    '✅f(xxxooo) = true',
311: 1:    '✅f(xxxXooOo) = true',
311: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
311: 1:    '✅f(xXxxoewrcoOoo) = false',
311: 1:    '✅f(XxxxooO) = false',
311: 1:    '✅f(zssddd) = true',
311: 1:    '✅f(Xxxxertr34) = false',
311: 1:    '✅f(xXoXOFo) = true',
311: 1:    '✅f(ooXXoOO) = false',
311: 1:    '✅f(RXT0oo) = false',
311: 1:    '✅f(XXOAB0oxXx) = false',
311: 1:    '✅f(JxXAO) = false',
311: 1:    '✅f(PXXWXoO) = false',
311: 1:    '✅f(XO7XxX) = false',
311: 1:    '✅f(FGoXBOFO) = false',
311: 1:    '✅f(oO) = false',
311: 1:    '✅f(XCOXXXO) = false',
311: 1:    '✅f(WXXxXOXXT) = false',
311: 1:    '✅f(RXXoX) = false',
311: 1:    '✅f(oXOoxXW) = true',
311: 1:    '✅f(x) = false',
311: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
311: 1:    '✅f(5CAr7zsRke6Lb0Bi) = true',
311: 1:    '✅f(XsYSeqWBD1) = false',
311: 1:    '✅f(Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX) = false',
311: 1:    '✅f(tqM31hdjxhaPYLdght9ZZfWt0Tvy) = false',
311: 1:    '✅f(EMfqgqHIJAvjjdKhqS8uoa) = false',
311: 1:    '✅f(xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB) = false',
311: 1:    '✅f(rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF) = false',
311: 1:    '✅f(i0XLMlDgITKfdEy) = false',
311: 1:    '✅f(pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw) = true',
311: 1:    '✅f(cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm) = true',
311: 1:    '❌f(VZkOMeV8mcoie1vUroksxHKLfIxmj7mwZ) = ??? != false'
311: 1:  ],
311: 1:  'level': 10,
311: 1:  'nextQuestion': 'VZkOMeV8mcoie1vUroksxHKLfIxmj7mwZ',
311: 1:  'questions': [
311: 1:    'ooxx',
311: 1:    'xooxx',
311: 1:    'ooxXm',
311: 1:    'zpzpzpp',
311: 1:    'zzoo',
311: 1:    'xxxooo',
311: 1:    'xxxXooOo',
311: 1:    'xxx23424esdsfvxXXOOooo',
311: 1:    'xXxxoewrcoOoo',
311: 1:    'XxxxooO',
311: 1:    'zssddd',
311: 1:    'Xxxxertr34',
311: 1:    'xXoXOFo',
311: 1:    'ooXXoOO',
311: 1:    'RXT0oo',
311: 1:    'XXOAB0oxXx',
311: 1:    'JxXAO',
311: 1:    'PXXWXoO',
311: 1:    'XO7XxX',
311: 1:    'FGoXBOFO',
311: 1:    'oO',
311: 1:    'XCOXXXO',
311: 1:    'WXXxXOXXT',
311: 1:    'RXXoX',
311: 1:    'oXOoxXW',
311: 1:    'x',
311: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
311: 1:    '5CAr7zsRke6Lb0Bi',
311: 1:    'XsYSeqWBD1',
311: 1:    'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
311: 1:    'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
311: 1:    'EMfqgqHIJAvjjdKhqS8uoa',
311: 1:    'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
311: 1:    'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
311: 1:    'i0XLMlDgITKfdEy',
311: 1:    'pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw',
311: 1:    'cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm',
311: 1:    'VZkOMeV8mcoie1vUroksxHKLfIxmj7mwZ'
311: 1:  ]
311: 1:}
311: 1:Scores: 11750
311: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'true', 'false']')
311: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
312: 1:BoardData {
312: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
312: 1:  'expectedAnswer': 'false',
312: 1:  'history': [
312: 1:    {
312: 1:      'answer': 'true',
312: 1:      'question': 'ooxx',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'false',
312: 1:      'question': 'xooxx',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'true',
312: 1:      'question': 'ooxXm',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'true',
312: 1:      'question': 'zpzpzpp',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'false',
312: 1:      'question': 'zzoo',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'true',
312: 1:      'question': 'xxxooo',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'true',
312: 1:      'question': 'xxxXooOo',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'false',
312: 1:      'question': 'xxx23424esdsfvxXXOOooo',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'false',
312: 1:      'question': 'xXxxoewrcoOoo',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'false',
312: 1:      'question': 'XxxxooO',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'true',
312: 1:      'question': 'zssddd',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'false',
312: 1:      'question': 'Xxxxertr34',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'true',
312: 1:      'question': 'xXoXOFo',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'false',
312: 1:      'question': 'ooXXoOO',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'false',
312: 1:      'question': 'RXT0oo',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'false',
312: 1:      'question': 'XXOAB0oxXx',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'false',
312: 1:      'question': 'JxXAO',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'false',
312: 1:      'question': 'PXXWXoO',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'false',
312: 1:      'question': 'XO7XxX',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'false',
312: 1:      'question': 'FGoXBOFO',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'false',
312: 1:      'question': 'oO',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'false',
312: 1:      'question': 'XCOXXXO',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'false',
312: 1:      'question': 'WXXxXOXXT',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'false',
312: 1:      'question': 'RXXoX',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'true',
312: 1:      'question': 'oXOoxXW',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'false',
312: 1:      'question': 'x',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'false',
312: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'true',
312: 1:      'question': '5CAr7zsRke6Lb0Bi',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'false',
312: 1:      'question': 'XsYSeqWBD1',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'false',
312: 1:      'question': 'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'false',
312: 1:      'question': 'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'false',
312: 1:      'question': 'EMfqgqHIJAvjjdKhqS8uoa',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'false',
312: 1:      'question': 'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'false',
312: 1:      'question': 'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'false',
312: 1:      'question': 'i0XLMlDgITKfdEy',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'true',
312: 1:      'question': 'pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'true',
312: 1:      'question': 'cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm',
312: 1:      'valid': true
312: 1:    },
312: 1:    {
312: 1:      'answer': 'false',
312: 1:      'question': 'VZkOMeV8mcoie1vUroksxHKLfIxmj7mwZ',
312: 1:      'valid': true
312: 1:    }
312: 1:  ],
312: 1:  'info': [
312: 1:    '✅f(ooxx) = true',
312: 1:    '✅f(xooxx) = false',
312: 1:    '✅f(ooxXm) = true',
312: 1:    '✅f(zpzpzpp) = true',
312: 1:    '✅f(zzoo) = false',
312: 1:    '✅f(xxxooo) = true',
312: 1:    '✅f(xxxXooOo) = true',
312: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
312: 1:    '✅f(xXxxoewrcoOoo) = false',
312: 1:    '✅f(XxxxooO) = false',
312: 1:    '✅f(zssddd) = true',
312: 1:    '✅f(Xxxxertr34) = false',
312: 1:    '✅f(xXoXOFo) = true',
312: 1:    '✅f(ooXXoOO) = false',
312: 1:    '✅f(RXT0oo) = false',
312: 1:    '✅f(XXOAB0oxXx) = false',
312: 1:    '✅f(JxXAO) = false',
312: 1:    '✅f(PXXWXoO) = false',
312: 1:    '✅f(XO7XxX) = false',
312: 1:    '✅f(FGoXBOFO) = false',
312: 1:    '✅f(oO) = false',
312: 1:    '✅f(XCOXXXO) = false',
312: 1:    '✅f(WXXxXOXXT) = false',
312: 1:    '✅f(RXXoX) = false',
312: 1:    '✅f(oXOoxXW) = true',
312: 1:    '✅f(x) = false',
312: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
312: 1:    '✅f(5CAr7zsRke6Lb0Bi) = true',
312: 1:    '✅f(XsYSeqWBD1) = false',
312: 1:    '✅f(Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX) = false',
312: 1:    '✅f(tqM31hdjxhaPYLdght9ZZfWt0Tvy) = false',
312: 1:    '✅f(EMfqgqHIJAvjjdKhqS8uoa) = false',
312: 1:    '✅f(xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB) = false',
312: 1:    '✅f(rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF) = false',
312: 1:    '✅f(i0XLMlDgITKfdEy) = false',
312: 1:    '✅f(pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw) = true',
312: 1:    '✅f(cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm) = true',
312: 1:    '✅f(VZkOMeV8mcoie1vUroksxHKLfIxmj7mwZ) = false',
312: 1:    '❌f(TuxJpaU4eCvW7NOHWFPAhzvgLaZiSB5X555) = ??? != false'
312: 1:  ],
312: 1:  'level': 10,
312: 1:  'nextQuestion': 'TuxJpaU4eCvW7NOHWFPAhzvgLaZiSB5X555',
312: 1:  'questions': [
312: 1:    'ooxx',
312: 1:    'xooxx',
312: 1:    'ooxXm',
312: 1:    'zpzpzpp',
312: 1:    'zzoo',
312: 1:    'xxxooo',
312: 1:    'xxxXooOo',
312: 1:    'xxx23424esdsfvxXXOOooo',
312: 1:    'xXxxoewrcoOoo',
312: 1:    'XxxxooO',
312: 1:    'zssddd',
312: 1:    'Xxxxertr34',
312: 1:    'xXoXOFo',
312: 1:    'ooXXoOO',
312: 1:    'RXT0oo',
312: 1:    'XXOAB0oxXx',
312: 1:    'JxXAO',
312: 1:    'PXXWXoO',
312: 1:    'XO7XxX',
312: 1:    'FGoXBOFO',
312: 1:    'oO',
312: 1:    'XCOXXXO',
312: 1:    'WXXxXOXXT',
312: 1:    'RXXoX',
312: 1:    'oXOoxXW',
312: 1:    'x',
312: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
312: 1:    '5CAr7zsRke6Lb0Bi',
312: 1:    'XsYSeqWBD1',
312: 1:    'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
312: 1:    'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
312: 1:    'EMfqgqHIJAvjjdKhqS8uoa',
312: 1:    'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
312: 1:    'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
312: 1:    'i0XLMlDgITKfdEy',
312: 1:    'pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw',
312: 1:    'cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm',
312: 1:    'VZkOMeV8mcoie1vUroksxHKLfIxmj7mwZ',
312: 1:    'TuxJpaU4eCvW7NOHWFPAhzvgLaZiSB5X555'
312: 1:  ]
312: 1:}
312: 1:Scores: 11753
312: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'true', 'false', 'false']')
312: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
313: 1:BoardData {
313: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
313: 1:  'expectedAnswer': 'false',
313: 1:  'history': [
313: 1:    {
313: 1:      'answer': 'true',
313: 1:      'question': 'ooxx',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'false',
313: 1:      'question': 'xooxx',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'true',
313: 1:      'question': 'ooxXm',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'true',
313: 1:      'question': 'zpzpzpp',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'false',
313: 1:      'question': 'zzoo',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'true',
313: 1:      'question': 'xxxooo',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'true',
313: 1:      'question': 'xxxXooOo',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'false',
313: 1:      'question': 'xxx23424esdsfvxXXOOooo',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'false',
313: 1:      'question': 'xXxxoewrcoOoo',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'false',
313: 1:      'question': 'XxxxooO',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'true',
313: 1:      'question': 'zssddd',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'false',
313: 1:      'question': 'Xxxxertr34',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'true',
313: 1:      'question': 'xXoXOFo',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'false',
313: 1:      'question': 'ooXXoOO',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'false',
313: 1:      'question': 'RXT0oo',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'false',
313: 1:      'question': 'XXOAB0oxXx',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'false',
313: 1:      'question': 'JxXAO',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'false',
313: 1:      'question': 'PXXWXoO',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'false',
313: 1:      'question': 'XO7XxX',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'false',
313: 1:      'question': 'FGoXBOFO',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'false',
313: 1:      'question': 'oO',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'false',
313: 1:      'question': 'XCOXXXO',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'false',
313: 1:      'question': 'WXXxXOXXT',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'false',
313: 1:      'question': 'RXXoX',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'true',
313: 1:      'question': 'oXOoxXW',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'false',
313: 1:      'question': 'x',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'false',
313: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'true',
313: 1:      'question': '5CAr7zsRke6Lb0Bi',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'false',
313: 1:      'question': 'XsYSeqWBD1',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'false',
313: 1:      'question': 'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'false',
313: 1:      'question': 'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'false',
313: 1:      'question': 'EMfqgqHIJAvjjdKhqS8uoa',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'false',
313: 1:      'question': 'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'false',
313: 1:      'question': 'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'false',
313: 1:      'question': 'i0XLMlDgITKfdEy',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'true',
313: 1:      'question': 'pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'true',
313: 1:      'question': 'cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'false',
313: 1:      'question': 'VZkOMeV8mcoie1vUroksxHKLfIxmj7mwZ',
313: 1:      'valid': true
313: 1:    },
313: 1:    {
313: 1:      'answer': 'false',
313: 1:      'question': 'TuxJpaU4eCvW7NOHWFPAhzvgLaZiSB5X555',
313: 1:      'valid': true
313: 1:    }
313: 1:  ],
313: 1:  'info': [
313: 1:    '✅f(ooxx) = true',
313: 1:    '✅f(xooxx) = false',
313: 1:    '✅f(ooxXm) = true',
313: 1:    '✅f(zpzpzpp) = true',
313: 1:    '✅f(zzoo) = false',
313: 1:    '✅f(xxxooo) = true',
313: 1:    '✅f(xxxXooOo) = true',
313: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
313: 1:    '✅f(xXxxoewrcoOoo) = false',
313: 1:    '✅f(XxxxooO) = false',
313: 1:    '✅f(zssddd) = true',
313: 1:    '✅f(Xxxxertr34) = false',
313: 1:    '✅f(xXoXOFo) = true',
313: 1:    '✅f(ooXXoOO) = false',
313: 1:    '✅f(RXT0oo) = false',
313: 1:    '✅f(XXOAB0oxXx) = false',
313: 1:    '✅f(JxXAO) = false',
313: 1:    '✅f(PXXWXoO) = false',
313: 1:    '✅f(XO7XxX) = false',
313: 1:    '✅f(FGoXBOFO) = false',
313: 1:    '✅f(oO) = false',
313: 1:    '✅f(XCOXXXO) = false',
313: 1:    '✅f(WXXxXOXXT) = false',
313: 1:    '✅f(RXXoX) = false',
313: 1:    '✅f(oXOoxXW) = true',
313: 1:    '✅f(x) = false',
313: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
313: 1:    '✅f(5CAr7zsRke6Lb0Bi) = true',
313: 1:    '✅f(XsYSeqWBD1) = false',
313: 1:    '✅f(Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX) = false',
313: 1:    '✅f(tqM31hdjxhaPYLdght9ZZfWt0Tvy) = false',
313: 1:    '✅f(EMfqgqHIJAvjjdKhqS8uoa) = false',
313: 1:    '✅f(xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB) = false',
313: 1:    '✅f(rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF) = false',
313: 1:    '✅f(i0XLMlDgITKfdEy) = false',
313: 1:    '✅f(pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw) = true',
313: 1:    '✅f(cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm) = true',
313: 1:    '✅f(VZkOMeV8mcoie1vUroksxHKLfIxmj7mwZ) = false',
313: 1:    '✅f(TuxJpaU4eCvW7NOHWFPAhzvgLaZiSB5X555) = false',
313: 1:    '❌f(LRHO7zulFWjahyQReCgZSUH6ybvokO2tdBltzwWBVBC29) = ??? != false'
313: 1:  ],
313: 1:  'level': 10,
313: 1:  'nextQuestion': 'LRHO7zulFWjahyQReCgZSUH6ybvokO2tdBltzwWBVBC29',
313: 1:  'questions': [
313: 1:    'ooxx',
313: 1:    'xooxx',
313: 1:    'ooxXm',
313: 1:    'zpzpzpp',
313: 1:    'zzoo',
313: 1:    'xxxooo',
313: 1:    'xxxXooOo',
313: 1:    'xxx23424esdsfvxXXOOooo',
313: 1:    'xXxxoewrcoOoo',
313: 1:    'XxxxooO',
313: 1:    'zssddd',
313: 1:    'Xxxxertr34',
313: 1:    'xXoXOFo',
313: 1:    'ooXXoOO',
313: 1:    'RXT0oo',
313: 1:    'XXOAB0oxXx',
313: 1:    'JxXAO',
313: 1:    'PXXWXoO',
313: 1:    'XO7XxX',
313: 1:    'FGoXBOFO',
313: 1:    'oO',
313: 1:    'XCOXXXO',
313: 1:    'WXXxXOXXT',
313: 1:    'RXXoX',
313: 1:    'oXOoxXW',
313: 1:    'x',
313: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
313: 1:    '5CAr7zsRke6Lb0Bi',
313: 1:    'XsYSeqWBD1',
313: 1:    'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
313: 1:    'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
313: 1:    'EMfqgqHIJAvjjdKhqS8uoa',
313: 1:    'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
313: 1:    'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
313: 1:    'i0XLMlDgITKfdEy',
313: 1:    'pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw',
313: 1:    'cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm',
313: 1:    'VZkOMeV8mcoie1vUroksxHKLfIxmj7mwZ',
313: 1:    'TuxJpaU4eCvW7NOHWFPAhzvgLaZiSB5X555',
313: 1:    'LRHO7zulFWjahyQReCgZSUH6ybvokO2tdBltzwWBVBC29'
313: 1:  ]
313: 1:}
313: 1:Scores: 11756
313: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'true', 'false', 'false', 'false']')
313: 1:Fire Event: PassTest{complexity=14, testCount=41}
------------------------------------------
314: 1:BoardData {
314: 1:  'description': ['Check to see if a string has the same amount of 'x's and 'o's.\nThe method must return a boolean and be case insensitive. The string can contain any char.\nExamples input/output:\nooxx=>true\nxooxx=>false\nooxXm=>true\nzpzpzpp=>true // when no 'x' and 'o' is present should return true\nzzoo=>false'],
314: 1:  'expectedAnswer': 'false',
314: 1:  'history': [
314: 1:    {
314: 1:      'answer': 'true',
314: 1:      'question': 'ooxx',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'xooxx',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'true',
314: 1:      'question': 'ooxXm',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'true',
314: 1:      'question': 'zpzpzpp',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'zzoo',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'true',
314: 1:      'question': 'xxxooo',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'true',
314: 1:      'question': 'xxxXooOo',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'xxx23424esdsfvxXXOOooo',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'xXxxoewrcoOoo',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'XxxxooO',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'true',
314: 1:      'question': 'zssddd',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'Xxxxertr34',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'true',
314: 1:      'question': 'xXoXOFo',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'ooXXoOO',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'RXT0oo',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'XXOAB0oxXx',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'JxXAO',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'PXXWXoO',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'XO7XxX',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'FGoXBOFO',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'oO',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'XCOXXXO',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'WXXxXOXXT',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'RXXoX',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'true',
314: 1:      'question': 'oXOoxXW',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'x',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'true',
314: 1:      'question': '5CAr7zsRke6Lb0Bi',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'XsYSeqWBD1',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'EMfqgqHIJAvjjdKhqS8uoa',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'i0XLMlDgITKfdEy',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'true',
314: 1:      'question': 'pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'true',
314: 1:      'question': 'cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'VZkOMeV8mcoie1vUroksxHKLfIxmj7mwZ',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'TuxJpaU4eCvW7NOHWFPAhzvgLaZiSB5X555',
314: 1:      'valid': true
314: 1:    },
314: 1:    {
314: 1:      'answer': 'false',
314: 1:      'question': 'LRHO7zulFWjahyQReCgZSUH6ybvokO2tdBltzwWBVBC29',
314: 1:      'valid': true
314: 1:    }
314: 1:  ],
314: 1:  'info': [
314: 1:    '✅f(ooxx) = true',
314: 1:    '✅f(xooxx) = false',
314: 1:    '✅f(ooxXm) = true',
314: 1:    '✅f(zpzpzpp) = true',
314: 1:    '✅f(zzoo) = false',
314: 1:    '✅f(xxxooo) = true',
314: 1:    '✅f(xxxXooOo) = true',
314: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
314: 1:    '✅f(xXxxoewrcoOoo) = false',
314: 1:    '✅f(XxxxooO) = false',
314: 1:    '✅f(zssddd) = true',
314: 1:    '✅f(Xxxxertr34) = false',
314: 1:    '✅f(xXoXOFo) = true',
314: 1:    '✅f(ooXXoOO) = false',
314: 1:    '✅f(RXT0oo) = false',
314: 1:    '✅f(XXOAB0oxXx) = false',
314: 1:    '✅f(JxXAO) = false',
314: 1:    '✅f(PXXWXoO) = false',
314: 1:    '✅f(XO7XxX) = false',
314: 1:    '✅f(FGoXBOFO) = false',
314: 1:    '✅f(oO) = false',
314: 1:    '✅f(XCOXXXO) = false',
314: 1:    '✅f(WXXxXOXXT) = false',
314: 1:    '✅f(RXXoX) = false',
314: 1:    '✅f(oXOoxXW) = true',
314: 1:    '✅f(x) = false',
314: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
314: 1:    '✅f(5CAr7zsRke6Lb0Bi) = true',
314: 1:    '✅f(XsYSeqWBD1) = false',
314: 1:    '✅f(Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX) = false',
314: 1:    '✅f(tqM31hdjxhaPYLdght9ZZfWt0Tvy) = false',
314: 1:    '✅f(EMfqgqHIJAvjjdKhqS8uoa) = false',
314: 1:    '✅f(xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB) = false',
314: 1:    '✅f(rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF) = false',
314: 1:    '✅f(i0XLMlDgITKfdEy) = false',
314: 1:    '✅f(pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw) = true',
314: 1:    '✅f(cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm) = true',
314: 1:    '✅f(VZkOMeV8mcoie1vUroksxHKLfIxmj7mwZ) = false',
314: 1:    '✅f(TuxJpaU4eCvW7NOHWFPAhzvgLaZiSB5X555) = false',
314: 1:    '✅f(LRHO7zulFWjahyQReCgZSUH6ybvokO2tdBltzwWBVBC29) = false',
314: 1:    '❌f(a0sgCHriukJ5lv2TlEQeZWS0GsNkzcKTMBz7Leo1VQ9o) = ??? != false'
314: 1:  ],
314: 1:  'level': 10,
314: 1:  'nextQuestion': 'a0sgCHriukJ5lv2TlEQeZWS0GsNkzcKTMBz7Leo1VQ9o',
314: 1:  'questions': [
314: 1:    'ooxx',
314: 1:    'xooxx',
314: 1:    'ooxXm',
314: 1:    'zpzpzpp',
314: 1:    'zzoo',
314: 1:    'xxxooo',
314: 1:    'xxxXooOo',
314: 1:    'xxx23424esdsfvxXXOOooo',
314: 1:    'xXxxoewrcoOoo',
314: 1:    'XxxxooO',
314: 1:    'zssddd',
314: 1:    'Xxxxertr34',
314: 1:    'xXoXOFo',
314: 1:    'ooXXoOO',
314: 1:    'RXT0oo',
314: 1:    'XXOAB0oxXx',
314: 1:    'JxXAO',
314: 1:    'PXXWXoO',
314: 1:    'XO7XxX',
314: 1:    'FGoXBOFO',
314: 1:    'oO',
314: 1:    'XCOXXXO',
314: 1:    'WXXxXOXXT',
314: 1:    'RXXoX',
314: 1:    'oXOoxXW',
314: 1:    'x',
314: 1:    'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
314: 1:    '5CAr7zsRke6Lb0Bi',
314: 1:    'XsYSeqWBD1',
314: 1:    'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
314: 1:    'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
314: 1:    'EMfqgqHIJAvjjdKhqS8uoa',
314: 1:    'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
314: 1:    'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
314: 1:    'i0XLMlDgITKfdEy',
314: 1:    'pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw',
314: 1:    'cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm',
314: 1:    'VZkOMeV8mcoie1vUroksxHKLfIxmj7mwZ',
314: 1:    'TuxJpaU4eCvW7NOHWFPAhzvgLaZiSB5X555',
314: 1:    'LRHO7zulFWjahyQReCgZSUH6ybvokO2tdBltzwWBVBC29',
314: 1:    'a0sgCHriukJ5lv2TlEQeZWS0GsNkzcKTMBz7Leo1VQ9o'
314: 1:  ]
314: 1:}
314: 1:Scores: 11759
314: 1:Answer: message('['true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'false']')
314: 1:Fire Event: PassTest{complexity=14, testCount=41}
314: 1:Fire Event: NextAlgorithm{complexity=14, time=0}
------------------------------------------
315: 1:BoardData {
315: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
315: 1:  'history': [
315: 1:    {
315: 1:      'answer': 'true',
315: 1:      'question': 'ooxx',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'xooxx',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'true',
315: 1:      'question': 'ooxXm',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'true',
315: 1:      'question': 'zpzpzpp',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'zzoo',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'true',
315: 1:      'question': 'xxxooo',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'true',
315: 1:      'question': 'xxxXooOo',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'xxx23424esdsfvxXXOOooo',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'xXxxoewrcoOoo',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'XxxxooO',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'true',
315: 1:      'question': 'zssddd',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'Xxxxertr34',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'true',
315: 1:      'question': 'xXoXOFo',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'ooXXoOO',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'RXT0oo',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'XXOAB0oxXx',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'JxXAO',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'PXXWXoO',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'XO7XxX',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'FGoXBOFO',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'oO',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'XCOXXXO',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'WXXxXOXXT',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'RXXoX',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'true',
315: 1:      'question': 'oXOoxXW',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'x',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'true',
315: 1:      'question': '5CAr7zsRke6Lb0Bi',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'XsYSeqWBD1',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'tqM31hdjxhaPYLdght9ZZfWt0Tvy',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'EMfqgqHIJAvjjdKhqS8uoa',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'i0XLMlDgITKfdEy',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'true',
315: 1:      'question': 'pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'true',
315: 1:      'question': 'cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'VZkOMeV8mcoie1vUroksxHKLfIxmj7mwZ',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'TuxJpaU4eCvW7NOHWFPAhzvgLaZiSB5X555',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'LRHO7zulFWjahyQReCgZSUH6ybvokO2tdBltzwWBVBC29',
315: 1:      'valid': true
315: 1:    },
315: 1:    {
315: 1:      'answer': 'false',
315: 1:      'question': 'a0sgCHriukJ5lv2TlEQeZWS0GsNkzcKTMBz7Leo1VQ9o',
315: 1:      'valid': true
315: 1:    }
315: 1:  ],
315: 1:  'info': [
315: 1:    '✅f(ooxx) = true',
315: 1:    '✅f(xooxx) = false',
315: 1:    '✅f(ooxXm) = true',
315: 1:    '✅f(zpzpzpp) = true',
315: 1:    '✅f(zzoo) = false',
315: 1:    '✅f(xxxooo) = true',
315: 1:    '✅f(xxxXooOo) = true',
315: 1:    '✅f(xxx23424esdsfvxXXOOooo) = false',
315: 1:    '✅f(xXxxoewrcoOoo) = false',
315: 1:    '✅f(XxxxooO) = false',
315: 1:    '✅f(zssddd) = true',
315: 1:    '✅f(Xxxxertr34) = false',
315: 1:    '✅f(xXoXOFo) = true',
315: 1:    '✅f(ooXXoOO) = false',
315: 1:    '✅f(RXT0oo) = false',
315: 1:    '✅f(XXOAB0oxXx) = false',
315: 1:    '✅f(JxXAO) = false',
315: 1:    '✅f(PXXWXoO) = false',
315: 1:    '✅f(XO7XxX) = false',
315: 1:    '✅f(FGoXBOFO) = false',
315: 1:    '✅f(oO) = false',
315: 1:    '✅f(XCOXXXO) = false',
315: 1:    '✅f(WXXxXOXXT) = false',
315: 1:    '✅f(RXXoX) = false',
315: 1:    '✅f(oXOoxXW) = true',
315: 1:    '✅f(x) = false',
315: 1:    '✅f(Z7pfb0k598EWG2mK5FaJFQSVJWeROCs9X1qSJO6Kdb72) = false',
315: 1:    '✅f(5CAr7zsRke6Lb0Bi) = true',
315: 1:    '✅f(XsYSeqWBD1) = false',
315: 1:    '✅f(Dd6MxC0RceIFemDrmxbL7JegLx81pqszX5EQG04eA9yYhZnX) = false',
315: 1:    '✅f(tqM31hdjxhaPYLdght9ZZfWt0Tvy) = false',
315: 1:    '✅f(EMfqgqHIJAvjjdKhqS8uoa) = false',
315: 1:    '✅f(xQRJIiTxtmSEQX60PJvcVXA4X2YviIrMpCSb3BwAHB) = false',
315: 1:    '✅f(rYAducZzKNaZkfp3QNkTA7kaHdxu9KfFApJF) = false',
315: 1:    '✅f(i0XLMlDgITKfdEy) = false',
315: 1:    '✅f(pHMVG2TrpYC1VtmUgIV6V6Briic2q2bfvrKIvZmw) = true',
315: 1:    '✅f(cv6AvJpr1oTuEOJ5ox0jOb0dRQ4ClXk7asSX8QEPXn95nIm) = true',
315: 1:    '✅f(VZkOMeV8mcoie1vUroksxHKLfIxmj7mwZ) = false',
315: 1:    '✅f(TuxJpaU4eCvW7NOHWFPAhzvgLaZiSB5X555) = false',
315: 1:    '✅f(LRHO7zulFWjahyQReCgZSUH6ybvokO2tdBltzwWBVBC29) = false',
315: 1:    '✅f(a0sgCHriukJ5lv2TlEQeZWS0GsNkzcKTMBz7Leo1VQ9o) = false'
315: 1:  ],
315: 1:  'level': 10,
315: 1:  'questions': []
315: 1:}
315: 1:Scores: 13651
315: 1:Answer: message('StartNextLevel')
315: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
316: 1:BoardData {
316: 1:  'description': ['The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...'],
316: 1:  'expectedAnswer': 'cab',
316: 1:  'history': [],
316: 1:  'info': ['❌f(abc) = ??? != cab'],
316: 1:  'level': 11,
316: 1:  'nextQuestion': 'abc',
316: 1:  'questions': ['abc']
316: 1:}
316: 1:Scores: 13651
316: 1:Answer: message('['cab']')
316: 1:Fire Event: PassTest{complexity=15, testCount=21}
------------------------------------------
317: 1:BoardData {
317: 1:  'description': ['The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...'],
317: 1:  'expectedAnswer': 'dca',
317: 1:  'history': [{
317: 1:    'answer': 'cab',
317: 1:    'question': 'abc',
317: 1:    'valid': true
317: 1:  }],
317: 1:  'info': [
317: 1:    '✅f(abc) = cab',
317: 1:    '❌f(cad) = ??? != dca'
317: 1:  ],
317: 1:  'level': 11,
317: 1:  'nextQuestion': 'cad',
317: 1:  'questions': [
317: 1:    'abc',
317: 1:    'cad'
317: 1:  ]
317: 1:}
317: 1:Scores: 13658
317: 1:Answer: message('['cab', 'dca']')
317: 1:Fire Event: PassTest{complexity=15, testCount=21}
------------------------------------------
318: 1:BoardData {
318: 1:  'description': ['The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...'],
318: 1:  'expectedAnswer': 'das',
318: 1:  'history': [
318: 1:    {
318: 1:      'answer': 'cab',
318: 1:      'question': 'abc',
318: 1:      'valid': true
318: 1:    },
318: 1:    {
318: 1:      'answer': 'dca',
318: 1:      'question': 'cad',
318: 1:      'valid': true
318: 1:    }
318: 1:  ],
318: 1:  'info': [
318: 1:    '✅f(abc) = cab',
318: 1:    '✅f(cad) = dca',
318: 1:    '❌f(asd) = ??? != das'
318: 1:  ],
318: 1:  'level': 11,
318: 1:  'nextQuestion': 'asd',
318: 1:  'questions': [
318: 1:    'abc',
318: 1:    'cad',
318: 1:    'asd'
318: 1:  ]
318: 1:}
318: 1:Scores: 13665
318: 1:Answer: message('['cab', 'dca', 'das']')
318: 1:Fire Event: PassTest{complexity=15, testCount=21}
------------------------------------------
319: 1:BoardData {
319: 1:  'description': ['The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...'],
319: 1:  'expectedAnswer': 'zxy',
319: 1:  'history': [
319: 1:    {
319: 1:      'answer': 'cab',
319: 1:      'question': 'abc',
319: 1:      'valid': true
319: 1:    },
319: 1:    {
319: 1:      'answer': 'dca',
319: 1:      'question': 'cad',
319: 1:      'valid': true
319: 1:    },
319: 1:    {
319: 1:      'answer': 'das',
319: 1:      'question': 'asd',
319: 1:      'valid': true
319: 1:    }
319: 1:  ],
319: 1:  'info': [
319: 1:    '✅f(abc) = cab',
319: 1:    '✅f(cad) = dca',
319: 1:    '✅f(asd) = das',
319: 1:    '❌f(xyz) = ??? != zxy'
319: 1:  ],
319: 1:  'level': 11,
319: 1:  'nextQuestion': 'xyz',
319: 1:  'questions': [
319: 1:    'abc',
319: 1:    'cad',
319: 1:    'asd',
319: 1:    'xyz'
319: 1:  ]
319: 1:}
319: 1:Scores: 13672
319: 1:Answer: message('['cab', 'dca', 'das', 'zxy']')
319: 1:Fire Event: PassTest{complexity=15, testCount=21}
------------------------------------------
320: 1:BoardData {
320: 1:  'description': ['The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...'],
320: 1:  'expectedAnswer': 'aaa',
320: 1:  'history': [
320: 1:    {
320: 1:      'answer': 'cab',
320: 1:      'question': 'abc',
320: 1:      'valid': true
320: 1:    },
320: 1:    {
320: 1:      'answer': 'dca',
320: 1:      'question': 'cad',
320: 1:      'valid': true
320: 1:    },
320: 1:    {
320: 1:      'answer': 'das',
320: 1:      'question': 'asd',
320: 1:      'valid': true
320: 1:    },
320: 1:    {
320: 1:      'answer': 'zxy',
320: 1:      'question': 'xyz',
320: 1:      'valid': true
320: 1:    }
320: 1:  ],
320: 1:  'info': [
320: 1:    '✅f(abc) = cab',
320: 1:    '✅f(cad) = dca',
320: 1:    '✅f(asd) = das',
320: 1:    '✅f(xyz) = zxy',
320: 1:    '❌f(aaa) = ??? != aaa'
320: 1:  ],
320: 1:  'level': 11,
320: 1:  'nextQuestion': 'aaa',
320: 1:  'questions': [
320: 1:    'abc',
320: 1:    'cad',
320: 1:    'asd',
320: 1:    'xyz',
320: 1:    'aaa'
320: 1:  ]
320: 1:}
320: 1:Scores: 13679
320: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa']')
320: 1:Fire Event: PassTest{complexity=15, testCount=21}
------------------------------------------
321: 1:BoardData {
321: 1:  'description': ['The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...'],
321: 1:  'expectedAnswer': '312',
321: 1:  'history': [
321: 1:    {
321: 1:      'answer': 'cab',
321: 1:      'question': 'abc',
321: 1:      'valid': true
321: 1:    },
321: 1:    {
321: 1:      'answer': 'dca',
321: 1:      'question': 'cad',
321: 1:      'valid': true
321: 1:    },
321: 1:    {
321: 1:      'answer': 'das',
321: 1:      'question': 'asd',
321: 1:      'valid': true
321: 1:    },
321: 1:    {
321: 1:      'answer': 'zxy',
321: 1:      'question': 'xyz',
321: 1:      'valid': true
321: 1:    },
321: 1:    {
321: 1:      'answer': 'aaa',
321: 1:      'question': 'aaa',
321: 1:      'valid': true
321: 1:    }
321: 1:  ],
321: 1:  'info': [
321: 1:    '✅f(abc) = cab',
321: 1:    '✅f(cad) = dca',
321: 1:    '✅f(asd) = das',
321: 1:    '✅f(xyz) = zxy',
321: 1:    '✅f(aaa) = aaa',
321: 1:    '❌f(123) = ??? != 312'
321: 1:  ],
321: 1:  'level': 11,
321: 1:  'nextQuestion': '123',
321: 1:  'questions': [
321: 1:    'abc',
321: 1:    'cad',
321: 1:    'asd',
321: 1:    'xyz',
321: 1:    'aaa',
321: 1:    '123'
321: 1:  ]
321: 1:}
321: 1:Scores: 13686
321: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312']')
321: 1:Fire Event: PassTest{complexity=15, testCount=21}
------------------------------------------
322: 1:BoardData {
322: 1:  'description': ['The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...'],
322: 1:  'expectedAnswer': 'fdE',
322: 1:  'history': [
322: 1:    {
322: 1:      'answer': 'cab',
322: 1:      'question': 'abc',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': 'dca',
322: 1:      'question': 'cad',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': 'das',
322: 1:      'question': 'asd',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': 'zxy',
322: 1:      'question': 'xyz',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': 'aaa',
322: 1:      'question': 'aaa',
322: 1:      'valid': true
322: 1:    },
322: 1:    {
322: 1:      'answer': '312',
322: 1:      'question': '123',
322: 1:      'valid': true
322: 1:    }
322: 1:  ],
322: 1:  'info': [
322: 1:    '✅f(abc) = cab',
322: 1:    '✅f(cad) = dca',
322: 1:    '✅f(asd) = das',
322: 1:    '✅f(xyz) = zxy',
322: 1:    '✅f(aaa) = aaa',
322: 1:    '✅f(123) = 312',
322: 1:    '❌f(dEf) = ??? != fdE'
322: 1:  ],
322: 1:  'level': 11,
322: 1:  'nextQuestion': 'dEf',
322: 1:  'questions': [
322: 1:    'abc',
322: 1:    'cad',
322: 1:    'asd',
322: 1:    'xyz',
322: 1:    'aaa',
322: 1:    '123',
322: 1:    'dEf'
322: 1:  ]
322: 1:}
322: 1:Scores: 13693
322: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE']')
322: 1:Fire Event: PassTest{complexity=15, testCount=21}
------------------------------------------
323: 1:BoardData {
323: 1:  'description': ['The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...'],
323: 1:  'expectedAnswer': 'czx',
323: 1:  'history': [
323: 1:    {
323: 1:      'answer': 'cab',
323: 1:      'question': 'abc',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': 'dca',
323: 1:      'question': 'cad',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': 'das',
323: 1:      'question': 'asd',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': 'zxy',
323: 1:      'question': 'xyz',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': 'aaa',
323: 1:      'question': 'aaa',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': '312',
323: 1:      'question': '123',
323: 1:      'valid': true
323: 1:    },
323: 1:    {
323: 1:      'answer': 'fdE',
323: 1:      'question': 'dEf',
323: 1:      'valid': true
323: 1:    }
323: 1:  ],
323: 1:  'info': [
323: 1:    '✅f(abc) = cab',
323: 1:    '✅f(cad) = dca',
323: 1:    '✅f(asd) = das',
323: 1:    '✅f(xyz) = zxy',
323: 1:    '✅f(aaa) = aaa',
323: 1:    '✅f(123) = 312',
323: 1:    '✅f(dEf) = fdE',
323: 1:    '❌f(zxc) = ??? != czx'
323: 1:  ],
323: 1:  'level': 11,
323: 1:  'nextQuestion': 'zxc',
323: 1:  'questions': [
323: 1:    'abc',
323: 1:    'cad',
323: 1:    'asd',
323: 1:    'xyz',
323: 1:    'aaa',
323: 1:    '123',
323: 1:    'dEf',
323: 1:    'zxc'
323: 1:  ]
323: 1:}
323: 1:Scores: 13700
323: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx']')
323: 1:Fire Event: PassTest{complexity=15, testCount=21}
------------------------------------------
324: 1:BoardData {
324: 1:  'description': ['The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...'],
324: 1:  'expectedAnswer': 'eqw',
324: 1:  'history': [
324: 1:    {
324: 1:      'answer': 'cab',
324: 1:      'question': 'abc',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': 'dca',
324: 1:      'question': 'cad',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': 'das',
324: 1:      'question': 'asd',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': 'zxy',
324: 1:      'question': 'xyz',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': 'aaa',
324: 1:      'question': 'aaa',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': '312',
324: 1:      'question': '123',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': 'fdE',
324: 1:      'question': 'dEf',
324: 1:      'valid': true
324: 1:    },
324: 1:    {
324: 1:      'answer': 'czx',
324: 1:      'question': 'zxc',
324: 1:      'valid': true
324: 1:    }
324: 1:  ],
324: 1:  'info': [
324: 1:    '✅f(abc) = cab',
324: 1:    '✅f(cad) = dca',
324: 1:    '✅f(asd) = das',
324: 1:    '✅f(xyz) = zxy',
324: 1:    '✅f(aaa) = aaa',
324: 1:    '✅f(123) = 312',
324: 1:    '✅f(dEf) = fdE',
324: 1:    '✅f(zxc) = czx',
324: 1:    '❌f(qwe) = ??? != eqw'
324: 1:  ],
324: 1:  'level': 11,
324: 1:  'nextQuestion': 'qwe',
324: 1:  'questions': [
324: 1:    'abc',
324: 1:    'cad',
324: 1:    'asd',
324: 1:    'xyz',
324: 1:    'aaa',
324: 1:    '123',
324: 1:    'dEf',
324: 1:    'zxc',
324: 1:    'qwe'
324: 1:  ]
324: 1:}
324: 1:Scores: 13707
324: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw']')
324: 1:Fire Event: PassTest{complexity=15, testCount=21}
------------------------------------------
325: 1:BoardData {
325: 1:  'description': ['The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...'],
325: 1:  'expectedAnswer': 'yrt',
325: 1:  'history': [
325: 1:    {
325: 1:      'answer': 'cab',
325: 1:      'question': 'abc',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': 'dca',
325: 1:      'question': 'cad',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': 'das',
325: 1:      'question': 'asd',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': 'zxy',
325: 1:      'question': 'xyz',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': 'aaa',
325: 1:      'question': 'aaa',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': '312',
325: 1:      'question': '123',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': 'fdE',
325: 1:      'question': 'dEf',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': 'czx',
325: 1:      'question': 'zxc',
325: 1:      'valid': true
325: 1:    },
325: 1:    {
325: 1:      'answer': 'eqw',
325: 1:      'question': 'qwe',
325: 1:      'valid': true
325: 1:    }
325: 1:  ],
325: 1:  'info': [
325: 1:    '✅f(abc) = cab',
325: 1:    '✅f(cad) = dca',
325: 1:    '✅f(asd) = das',
325: 1:    '✅f(xyz) = zxy',
325: 1:    '✅f(aaa) = aaa',
325: 1:    '✅f(123) = 312',
325: 1:    '✅f(dEf) = fdE',
325: 1:    '✅f(zxc) = czx',
325: 1:    '✅f(qwe) = eqw',
325: 1:    '❌f(rty) = ??? != yrt'
325: 1:  ],
325: 1:  'level': 11,
325: 1:  'nextQuestion': 'rty',
325: 1:  'questions': [
325: 1:    'abc',
325: 1:    'cad',
325: 1:    'asd',
325: 1:    'xyz',
325: 1:    'aaa',
325: 1:    '123',
325: 1:    'dEf',
325: 1:    'zxc',
325: 1:    'qwe',
325: 1:    'rty'
325: 1:  ]
325: 1:}
325: 1:Scores: 13714
325: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt']')
325: 1:Fire Event: PassTest{complexity=15, testCount=21}
------------------------------------------
326: 1:BoardData {
326: 1:  'description': ['The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...'],
326: 1:  'expectedAnswer': 'bmn',
326: 1:  'history': [
326: 1:    {
326: 1:      'answer': 'cab',
326: 1:      'question': 'abc',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': 'dca',
326: 1:      'question': 'cad',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': 'das',
326: 1:      'question': 'asd',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': 'zxy',
326: 1:      'question': 'xyz',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': 'aaa',
326: 1:      'question': 'aaa',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': '312',
326: 1:      'question': '123',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': 'fdE',
326: 1:      'question': 'dEf',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': 'czx',
326: 1:      'question': 'zxc',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': 'eqw',
326: 1:      'question': 'qwe',
326: 1:      'valid': true
326: 1:    },
326: 1:    {
326: 1:      'answer': 'yrt',
326: 1:      'question': 'rty',
326: 1:      'valid': true
326: 1:    }
326: 1:  ],
326: 1:  'info': [
326: 1:    '✅f(abc) = cab',
326: 1:    '✅f(cad) = dca',
326: 1:    '✅f(asd) = das',
326: 1:    '✅f(xyz) = zxy',
326: 1:    '✅f(aaa) = aaa',
326: 1:    '✅f(123) = 312',
326: 1:    '✅f(dEf) = fdE',
326: 1:    '✅f(zxc) = czx',
326: 1:    '✅f(qwe) = eqw',
326: 1:    '✅f(rty) = yrt',
326: 1:    '❌f(mnb) = ??? != bmn'
326: 1:  ],
326: 1:  'level': 11,
326: 1:  'nextQuestion': 'mnb',
326: 1:  'questions': [
326: 1:    'abc',
326: 1:    'cad',
326: 1:    'asd',
326: 1:    'xyz',
326: 1:    'aaa',
326: 1:    '123',
326: 1:    'dEf',
326: 1:    'zxc',
326: 1:    'qwe',
326: 1:    'rty',
326: 1:    'mnb'
326: 1:  ]
326: 1:}
326: 1:Scores: 13721
326: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn']')
326: 1:Fire Event: PassTest{complexity=15, testCount=21}
------------------------------------------
327: 1:BoardData {
327: 1:  'description': ['The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...'],
327: 1:  'expectedAnswer': 'nvb',
327: 1:  'history': [
327: 1:    {
327: 1:      'answer': 'cab',
327: 1:      'question': 'abc',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': 'dca',
327: 1:      'question': 'cad',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': 'das',
327: 1:      'question': 'asd',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': 'zxy',
327: 1:      'question': 'xyz',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': 'aaa',
327: 1:      'question': 'aaa',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': '312',
327: 1:      'question': '123',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': 'fdE',
327: 1:      'question': 'dEf',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': 'czx',
327: 1:      'question': 'zxc',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': 'eqw',
327: 1:      'question': 'qwe',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': 'yrt',
327: 1:      'question': 'rty',
327: 1:      'valid': true
327: 1:    },
327: 1:    {
327: 1:      'answer': 'bmn',
327: 1:      'question': 'mnb',
327: 1:      'valid': true
327: 1:    }
327: 1:  ],
327: 1:  'info': [
327: 1:    '✅f(abc) = cab',
327: 1:    '✅f(cad) = dca',
327: 1:    '✅f(asd) = das',
327: 1:    '✅f(xyz) = zxy',
327: 1:    '✅f(aaa) = aaa',
327: 1:    '✅f(123) = 312',
327: 1:    '✅f(dEf) = fdE',
327: 1:    '✅f(zxc) = czx',
327: 1:    '✅f(qwe) = eqw',
327: 1:    '✅f(rty) = yrt',
327: 1:    '✅f(mnb) = bmn',
327: 1:    '❌f(vbn) = ??? != nvb'
327: 1:  ],
327: 1:  'level': 11,
327: 1:  'nextQuestion': 'vbn',
327: 1:  'questions': [
327: 1:    'abc',
327: 1:    'cad',
327: 1:    'asd',
327: 1:    'xyz',
327: 1:    'aaa',
327: 1:    '123',
327: 1:    'dEf',
327: 1:    'zxc',
327: 1:    'qwe',
327: 1:    'rty',
327: 1:    'mnb',
327: 1:    'vbn'
327: 1:  ]
327: 1:}
327: 1:Scores: 13728
327: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb']')
327: 1:Fire Event: PassTest{complexity=15, testCount=21}
------------------------------------------
328: 1:BoardData {
328: 1:  'description': ['The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...'],
328: 1:  'expectedAnswer': 'hfg',
328: 1:  'history': [
328: 1:    {
328: 1:      'answer': 'cab',
328: 1:      'question': 'abc',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': 'dca',
328: 1:      'question': 'cad',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': 'das',
328: 1:      'question': 'asd',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': 'zxy',
328: 1:      'question': 'xyz',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': 'aaa',
328: 1:      'question': 'aaa',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': '312',
328: 1:      'question': '123',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': 'fdE',
328: 1:      'question': 'dEf',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': 'czx',
328: 1:      'question': 'zxc',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': 'eqw',
328: 1:      'question': 'qwe',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': 'yrt',
328: 1:      'question': 'rty',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': 'bmn',
328: 1:      'question': 'mnb',
328: 1:      'valid': true
328: 1:    },
328: 1:    {
328: 1:      'answer': 'nvb',
328: 1:      'question': 'vbn',
328: 1:      'valid': true
328: 1:    }
328: 1:  ],
328: 1:  'info': [
328: 1:    '✅f(abc) = cab',
328: 1:    '✅f(cad) = dca',
328: 1:    '✅f(asd) = das',
328: 1:    '✅f(xyz) = zxy',
328: 1:    '✅f(aaa) = aaa',
328: 1:    '✅f(123) = 312',
328: 1:    '✅f(dEf) = fdE',
328: 1:    '✅f(zxc) = czx',
328: 1:    '✅f(qwe) = eqw',
328: 1:    '✅f(rty) = yrt',
328: 1:    '✅f(mnb) = bmn',
328: 1:    '✅f(vbn) = nvb',
328: 1:    '❌f(fgh) = ??? != hfg'
328: 1:  ],
328: 1:  'level': 11,
328: 1:  'nextQuestion': 'fgh',
328: 1:  'questions': [
328: 1:    'abc',
328: 1:    'cad',
328: 1:    'asd',
328: 1:    'xyz',
328: 1:    'aaa',
328: 1:    '123',
328: 1:    'dEf',
328: 1:    'zxc',
328: 1:    'qwe',
328: 1:    'rty',
328: 1:    'mnb',
328: 1:    'vbn',
328: 1:    'fgh'
328: 1:  ]
328: 1:}
328: 1:Scores: 13735
328: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb', 'hfg']')
328: 1:Fire Event: PassTest{complexity=15, testCount=21}
------------------------------------------
329: 1:BoardData {
329: 1:  'description': ['The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...'],
329: 1:  'expectedAnswer': 'kij',
329: 1:  'history': [
329: 1:    {
329: 1:      'answer': 'cab',
329: 1:      'question': 'abc',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': 'dca',
329: 1:      'question': 'cad',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': 'das',
329: 1:      'question': 'asd',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': 'zxy',
329: 1:      'question': 'xyz',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': 'aaa',
329: 1:      'question': 'aaa',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': '312',
329: 1:      'question': '123',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': 'fdE',
329: 1:      'question': 'dEf',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': 'czx',
329: 1:      'question': 'zxc',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': 'eqw',
329: 1:      'question': 'qwe',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': 'yrt',
329: 1:      'question': 'rty',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': 'bmn',
329: 1:      'question': 'mnb',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': 'nvb',
329: 1:      'question': 'vbn',
329: 1:      'valid': true
329: 1:    },
329: 1:    {
329: 1:      'answer': 'hfg',
329: 1:      'question': 'fgh',
329: 1:      'valid': true
329: 1:    }
329: 1:  ],
329: 1:  'info': [
329: 1:    '✅f(abc) = cab',
329: 1:    '✅f(cad) = dca',
329: 1:    '✅f(asd) = das',
329: 1:    '✅f(xyz) = zxy',
329: 1:    '✅f(aaa) = aaa',
329: 1:    '✅f(123) = 312',
329: 1:    '✅f(dEf) = fdE',
329: 1:    '✅f(zxc) = czx',
329: 1:    '✅f(qwe) = eqw',
329: 1:    '✅f(rty) = yrt',
329: 1:    '✅f(mnb) = bmn',
329: 1:    '✅f(vbn) = nvb',
329: 1:    '✅f(fgh) = hfg',
329: 1:    '❌f(ijk) = ??? != kij'
329: 1:  ],
329: 1:  'level': 11,
329: 1:  'nextQuestion': 'ijk',
329: 1:  'questions': [
329: 1:    'abc',
329: 1:    'cad',
329: 1:    'asd',
329: 1:    'xyz',
329: 1:    'aaa',
329: 1:    '123',
329: 1:    'dEf',
329: 1:    'zxc',
329: 1:    'qwe',
329: 1:    'rty',
329: 1:    'mnb',
329: 1:    'vbn',
329: 1:    'fgh',
329: 1:    'ijk'
329: 1:  ]
329: 1:}
329: 1:Scores: 13742
329: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb', 'hfg', 'kij']')
329: 1:Fire Event: PassTest{complexity=15, testCount=21}
------------------------------------------
330: 1:BoardData {
330: 1:  'description': ['The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...'],
330: 1:  'expectedAnswer': 'nlm',
330: 1:  'history': [
330: 1:    {
330: 1:      'answer': 'cab',
330: 1:      'question': 'abc',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': 'dca',
330: 1:      'question': 'cad',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': 'das',
330: 1:      'question': 'asd',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': 'zxy',
330: 1:      'question': 'xyz',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': 'aaa',
330: 1:      'question': 'aaa',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': '312',
330: 1:      'question': '123',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': 'fdE',
330: 1:      'question': 'dEf',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': 'czx',
330: 1:      'question': 'zxc',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': 'eqw',
330: 1:      'question': 'qwe',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': 'yrt',
330: 1:      'question': 'rty',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': 'bmn',
330: 1:      'question': 'mnb',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': 'nvb',
330: 1:      'question': 'vbn',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': 'hfg',
330: 1:      'question': 'fgh',
330: 1:      'valid': true
330: 1:    },
330: 1:    {
330: 1:      'answer': 'kij',
330: 1:      'question': 'ijk',
330: 1:      'valid': true
330: 1:    }
330: 1:  ],
330: 1:  'info': [
330: 1:    '✅f(abc) = cab',
330: 1:    '✅f(cad) = dca',
330: 1:    '✅f(asd) = das',
330: 1:    '✅f(xyz) = zxy',
330: 1:    '✅f(aaa) = aaa',
330: 1:    '✅f(123) = 312',
330: 1:    '✅f(dEf) = fdE',
330: 1:    '✅f(zxc) = czx',
330: 1:    '✅f(qwe) = eqw',
330: 1:    '✅f(rty) = yrt',
330: 1:    '✅f(mnb) = bmn',
330: 1:    '✅f(vbn) = nvb',
330: 1:    '✅f(fgh) = hfg',
330: 1:    '✅f(ijk) = kij',
330: 1:    '❌f(lmn) = ??? != nlm'
330: 1:  ],
330: 1:  'level': 11,
330: 1:  'nextQuestion': 'lmn',
330: 1:  'questions': [
330: 1:    'abc',
330: 1:    'cad',
330: 1:    'asd',
330: 1:    'xyz',
330: 1:    'aaa',
330: 1:    '123',
330: 1:    'dEf',
330: 1:    'zxc',
330: 1:    'qwe',
330: 1:    'rty',
330: 1:    'mnb',
330: 1:    'vbn',
330: 1:    'fgh',
330: 1:    'ijk',
330: 1:    'lmn'
330: 1:  ]
330: 1:}
330: 1:Scores: 13749
330: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb', 'hfg', 'kij', 'nlm']')
330: 1:Fire Event: PassTest{complexity=15, testCount=21}
------------------------------------------
331: 1:BoardData {
331: 1:  'description': ['The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...'],
331: 1:  'expectedAnswer': 'rpq',
331: 1:  'history': [
331: 1:    {
331: 1:      'answer': 'cab',
331: 1:      'question': 'abc',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': 'dca',
331: 1:      'question': 'cad',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': 'das',
331: 1:      'question': 'asd',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': 'zxy',
331: 1:      'question': 'xyz',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': 'aaa',
331: 1:      'question': 'aaa',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': '312',
331: 1:      'question': '123',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': 'fdE',
331: 1:      'question': 'dEf',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': 'czx',
331: 1:      'question': 'zxc',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': 'eqw',
331: 1:      'question': 'qwe',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': 'yrt',
331: 1:      'question': 'rty',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': 'bmn',
331: 1:      'question': 'mnb',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': 'nvb',
331: 1:      'question': 'vbn',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': 'hfg',
331: 1:      'question': 'fgh',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': 'kij',
331: 1:      'question': 'ijk',
331: 1:      'valid': true
331: 1:    },
331: 1:    {
331: 1:      'answer': 'nlm',
331: 1:      'question': 'lmn',
331: 1:      'valid': true
331: 1:    }
331: 1:  ],
331: 1:  'info': [
331: 1:    '✅f(abc) = cab',
331: 1:    '✅f(cad) = dca',
331: 1:    '✅f(asd) = das',
331: 1:    '✅f(xyz) = zxy',
331: 1:    '✅f(aaa) = aaa',
331: 1:    '✅f(123) = 312',
331: 1:    '✅f(dEf) = fdE',
331: 1:    '✅f(zxc) = czx',
331: 1:    '✅f(qwe) = eqw',
331: 1:    '✅f(rty) = yrt',
331: 1:    '✅f(mnb) = bmn',
331: 1:    '✅f(vbn) = nvb',
331: 1:    '✅f(fgh) = hfg',
331: 1:    '✅f(ijk) = kij',
331: 1:    '✅f(lmn) = nlm',
331: 1:    '❌f(pqr) = ??? != rpq'
331: 1:  ],
331: 1:  'level': 11,
331: 1:  'nextQuestion': 'pqr',
331: 1:  'questions': [
331: 1:    'abc',
331: 1:    'cad',
331: 1:    'asd',
331: 1:    'xyz',
331: 1:    'aaa',
331: 1:    '123',
331: 1:    'dEf',
331: 1:    'zxc',
331: 1:    'qwe',
331: 1:    'rty',
331: 1:    'mnb',
331: 1:    'vbn',
331: 1:    'fgh',
331: 1:    'ijk',
331: 1:    'lmn',
331: 1:    'pqr'
331: 1:  ]
331: 1:}
331: 1:Scores: 13756
331: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb', 'hfg', 'kij', 'nlm', 'rpq']')
331: 1:Fire Event: PassTest{complexity=15, testCount=21}
------------------------------------------
332: 1:BoardData {
332: 1:  'description': ['The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...'],
332: 1:  'expectedAnswer': 'ust',
332: 1:  'history': [
332: 1:    {
332: 1:      'answer': 'cab',
332: 1:      'question': 'abc',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': 'dca',
332: 1:      'question': 'cad',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': 'das',
332: 1:      'question': 'asd',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': 'zxy',
332: 1:      'question': 'xyz',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': 'aaa',
332: 1:      'question': 'aaa',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': '312',
332: 1:      'question': '123',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': 'fdE',
332: 1:      'question': 'dEf',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': 'czx',
332: 1:      'question': 'zxc',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': 'eqw',
332: 1:      'question': 'qwe',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': 'yrt',
332: 1:      'question': 'rty',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': 'bmn',
332: 1:      'question': 'mnb',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': 'nvb',
332: 1:      'question': 'vbn',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': 'hfg',
332: 1:      'question': 'fgh',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': 'kij',
332: 1:      'question': 'ijk',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': 'nlm',
332: 1:      'question': 'lmn',
332: 1:      'valid': true
332: 1:    },
332: 1:    {
332: 1:      'answer': 'rpq',
332: 1:      'question': 'pqr',
332: 1:      'valid': true
332: 1:    }
332: 1:  ],
332: 1:  'info': [
332: 1:    '✅f(abc) = cab',
332: 1:    '✅f(cad) = dca',
332: 1:    '✅f(asd) = das',
332: 1:    '✅f(xyz) = zxy',
332: 1:    '✅f(aaa) = aaa',
332: 1:    '✅f(123) = 312',
332: 1:    '✅f(dEf) = fdE',
332: 1:    '✅f(zxc) = czx',
332: 1:    '✅f(qwe) = eqw',
332: 1:    '✅f(rty) = yrt',
332: 1:    '✅f(mnb) = bmn',
332: 1:    '✅f(vbn) = nvb',
332: 1:    '✅f(fgh) = hfg',
332: 1:    '✅f(ijk) = kij',
332: 1:    '✅f(lmn) = nlm',
332: 1:    '✅f(pqr) = rpq',
332: 1:    '❌f(stu) = ??? != ust'
332: 1:  ],
332: 1:  'level': 11,
332: 1:  'nextQuestion': 'stu',
332: 1:  'questions': [
332: 1:    'abc',
332: 1:    'cad',
332: 1:    'asd',
332: 1:    'xyz',
332: 1:    'aaa',
332: 1:    '123',
332: 1:    'dEf',
332: 1:    'zxc',
332: 1:    'qwe',
332: 1:    'rty',
332: 1:    'mnb',
332: 1:    'vbn',
332: 1:    'fgh',
332: 1:    'ijk',
332: 1:    'lmn',
332: 1:    'pqr',
332: 1:    'stu'
332: 1:  ]
332: 1:}
332: 1:Scores: 13763
332: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb', 'hfg', 'kij', 'nlm', 'rpq', 'ust']')
332: 1:Fire Event: PassTest{complexity=15, testCount=21}
------------------------------------------
333: 1:BoardData {
333: 1:  'description': ['The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...'],
333: 1:  'expectedAnswer': 'ywx',
333: 1:  'history': [
333: 1:    {
333: 1:      'answer': 'cab',
333: 1:      'question': 'abc',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': 'dca',
333: 1:      'question': 'cad',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': 'das',
333: 1:      'question': 'asd',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': 'zxy',
333: 1:      'question': 'xyz',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': 'aaa',
333: 1:      'question': 'aaa',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': '312',
333: 1:      'question': '123',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': 'fdE',
333: 1:      'question': 'dEf',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': 'czx',
333: 1:      'question': 'zxc',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': 'eqw',
333: 1:      'question': 'qwe',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': 'yrt',
333: 1:      'question': 'rty',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': 'bmn',
333: 1:      'question': 'mnb',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': 'nvb',
333: 1:      'question': 'vbn',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': 'hfg',
333: 1:      'question': 'fgh',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': 'kij',
333: 1:      'question': 'ijk',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': 'nlm',
333: 1:      'question': 'lmn',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': 'rpq',
333: 1:      'question': 'pqr',
333: 1:      'valid': true
333: 1:    },
333: 1:    {
333: 1:      'answer': 'ust',
333: 1:      'question': 'stu',
333: 1:      'valid': true
333: 1:    }
333: 1:  ],
333: 1:  'info': [
333: 1:    '✅f(abc) = cab',
333: 1:    '✅f(cad) = dca',
333: 1:    '✅f(asd) = das',
333: 1:    '✅f(xyz) = zxy',
333: 1:    '✅f(aaa) = aaa',
333: 1:    '✅f(123) = 312',
333: 1:    '✅f(dEf) = fdE',
333: 1:    '✅f(zxc) = czx',
333: 1:    '✅f(qwe) = eqw',
333: 1:    '✅f(rty) = yrt',
333: 1:    '✅f(mnb) = bmn',
333: 1:    '✅f(vbn) = nvb',
333: 1:    '✅f(fgh) = hfg',
333: 1:    '✅f(ijk) = kij',
333: 1:    '✅f(lmn) = nlm',
333: 1:    '✅f(pqr) = rpq',
333: 1:    '✅f(stu) = ust',
333: 1:    '❌f(wxy) = ??? != ywx'
333: 1:  ],
333: 1:  'level': 11,
333: 1:  'nextQuestion': 'wxy',
333: 1:  'questions': [
333: 1:    'abc',
333: 1:    'cad',
333: 1:    'asd',
333: 1:    'xyz',
333: 1:    'aaa',
333: 1:    '123',
333: 1:    'dEf',
333: 1:    'zxc',
333: 1:    'qwe',
333: 1:    'rty',
333: 1:    'mnb',
333: 1:    'vbn',
333: 1:    'fgh',
333: 1:    'ijk',
333: 1:    'lmn',
333: 1:    'pqr',
333: 1:    'stu',
333: 1:    'wxy'
333: 1:  ]
333: 1:}
333: 1:Scores: 13770
333: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb', 'hfg', 'kij', 'nlm', 'rpq', 'ust', 'ywx']')
333: 1:Fire Event: PassTest{complexity=15, testCount=21}
------------------------------------------
334: 1:BoardData {
334: 1:  'description': ['The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...'],
334: 1:  'expectedAnswer': '222',
334: 1:  'history': [
334: 1:    {
334: 1:      'answer': 'cab',
334: 1:      'question': 'abc',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': 'dca',
334: 1:      'question': 'cad',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': 'das',
334: 1:      'question': 'asd',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': 'zxy',
334: 1:      'question': 'xyz',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': 'aaa',
334: 1:      'question': 'aaa',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': '312',
334: 1:      'question': '123',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': 'fdE',
334: 1:      'question': 'dEf',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': 'czx',
334: 1:      'question': 'zxc',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': 'eqw',
334: 1:      'question': 'qwe',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': 'yrt',
334: 1:      'question': 'rty',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': 'bmn',
334: 1:      'question': 'mnb',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': 'nvb',
334: 1:      'question': 'vbn',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': 'hfg',
334: 1:      'question': 'fgh',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': 'kij',
334: 1:      'question': 'ijk',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': 'nlm',
334: 1:      'question': 'lmn',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': 'rpq',
334: 1:      'question': 'pqr',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': 'ust',
334: 1:      'question': 'stu',
334: 1:      'valid': true
334: 1:    },
334: 1:    {
334: 1:      'answer': 'ywx',
334: 1:      'question': 'wxy',
334: 1:      'valid': true
334: 1:    }
334: 1:  ],
334: 1:  'info': [
334: 1:    '✅f(abc) = cab',
334: 1:    '✅f(cad) = dca',
334: 1:    '✅f(asd) = das',
334: 1:    '✅f(xyz) = zxy',
334: 1:    '✅f(aaa) = aaa',
334: 1:    '✅f(123) = 312',
334: 1:    '✅f(dEf) = fdE',
334: 1:    '✅f(zxc) = czx',
334: 1:    '✅f(qwe) = eqw',
334: 1:    '✅f(rty) = yrt',
334: 1:    '✅f(mnb) = bmn',
334: 1:    '✅f(vbn) = nvb',
334: 1:    '✅f(fgh) = hfg',
334: 1:    '✅f(ijk) = kij',
334: 1:    '✅f(lmn) = nlm',
334: 1:    '✅f(pqr) = rpq',
334: 1:    '✅f(stu) = ust',
334: 1:    '✅f(wxy) = ywx',
334: 1:    '❌f(222) = ??? != 222'
334: 1:  ],
334: 1:  'level': 11,
334: 1:  'nextQuestion': '222',
334: 1:  'questions': [
334: 1:    'abc',
334: 1:    'cad',
334: 1:    'asd',
334: 1:    'xyz',
334: 1:    'aaa',
334: 1:    '123',
334: 1:    'dEf',
334: 1:    'zxc',
334: 1:    'qwe',
334: 1:    'rty',
334: 1:    'mnb',
334: 1:    'vbn',
334: 1:    'fgh',
334: 1:    'ijk',
334: 1:    'lmn',
334: 1:    'pqr',
334: 1:    'stu',
334: 1:    'wxy',
334: 1:    '222'
334: 1:  ]
334: 1:}
334: 1:Scores: 13777
334: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb', 'hfg', 'kij', 'nlm', 'rpq', 'ust', 'ywx', '222']')
334: 1:Fire Event: PassTest{complexity=15, testCount=21}
------------------------------------------
335: 1:BoardData {
335: 1:  'description': ['The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...'],
335: 1:  'expectedAnswer': '978',
335: 1:  'history': [
335: 1:    {
335: 1:      'answer': 'cab',
335: 1:      'question': 'abc',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': 'dca',
335: 1:      'question': 'cad',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': 'das',
335: 1:      'question': 'asd',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': 'zxy',
335: 1:      'question': 'xyz',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': 'aaa',
335: 1:      'question': 'aaa',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': '312',
335: 1:      'question': '123',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': 'fdE',
335: 1:      'question': 'dEf',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': 'czx',
335: 1:      'question': 'zxc',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': 'eqw',
335: 1:      'question': 'qwe',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': 'yrt',
335: 1:      'question': 'rty',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': 'bmn',
335: 1:      'question': 'mnb',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': 'nvb',
335: 1:      'question': 'vbn',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': 'hfg',
335: 1:      'question': 'fgh',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': 'kij',
335: 1:      'question': 'ijk',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': 'nlm',
335: 1:      'question': 'lmn',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': 'rpq',
335: 1:      'question': 'pqr',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': 'ust',
335: 1:      'question': 'stu',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': 'ywx',
335: 1:      'question': 'wxy',
335: 1:      'valid': true
335: 1:    },
335: 1:    {
335: 1:      'answer': '222',
335: 1:      'question': '222',
335: 1:      'valid': true
335: 1:    }
335: 1:  ],
335: 1:  'info': [
335: 1:    '✅f(abc) = cab',
335: 1:    '✅f(cad) = dca',
335: 1:    '✅f(asd) = das',
335: 1:    '✅f(xyz) = zxy',
335: 1:    '✅f(aaa) = aaa',
335: 1:    '✅f(123) = 312',
335: 1:    '✅f(dEf) = fdE',
335: 1:    '✅f(zxc) = czx',
335: 1:    '✅f(qwe) = eqw',
335: 1:    '✅f(rty) = yrt',
335: 1:    '✅f(mnb) = bmn',
335: 1:    '✅f(vbn) = nvb',
335: 1:    '✅f(fgh) = hfg',
335: 1:    '✅f(ijk) = kij',
335: 1:    '✅f(lmn) = nlm',
335: 1:    '✅f(pqr) = rpq',
335: 1:    '✅f(stu) = ust',
335: 1:    '✅f(wxy) = ywx',
335: 1:    '✅f(222) = 222',
335: 1:    '❌f(789) = ??? != 978'
335: 1:  ],
335: 1:  'level': 11,
335: 1:  'nextQuestion': '789',
335: 1:  'questions': [
335: 1:    'abc',
335: 1:    'cad',
335: 1:    'asd',
335: 1:    'xyz',
335: 1:    'aaa',
335: 1:    '123',
335: 1:    'dEf',
335: 1:    'zxc',
335: 1:    'qwe',
335: 1:    'rty',
335: 1:    'mnb',
335: 1:    'vbn',
335: 1:    'fgh',
335: 1:    'ijk',
335: 1:    'lmn',
335: 1:    'pqr',
335: 1:    'stu',
335: 1:    'wxy',
335: 1:    '222',
335: 1:    '789'
335: 1:  ]
335: 1:}
335: 1:Scores: 13784
335: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb', 'hfg', 'kij', 'nlm', 'rpq', 'ust', 'ywx', '222', '978']')
335: 1:Fire Event: PassTest{complexity=15, testCount=21}
------------------------------------------
336: 1:BoardData {
336: 1:  'description': ['The order matters...\n Everything is quite simple. \nIn a string of three characters, the last character becomes the first one,\n and the first two characters shift one position to the right. \nFor example: abc=>cab...'],
336: 1:  'expectedAnswer': '009',
336: 1:  'history': [
336: 1:    {
336: 1:      'answer': 'cab',
336: 1:      'question': 'abc',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': 'dca',
336: 1:      'question': 'cad',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': 'das',
336: 1:      'question': 'asd',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': 'zxy',
336: 1:      'question': 'xyz',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': 'aaa',
336: 1:      'question': 'aaa',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': '312',
336: 1:      'question': '123',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': 'fdE',
336: 1:      'question': 'dEf',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': 'czx',
336: 1:      'question': 'zxc',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': 'eqw',
336: 1:      'question': 'qwe',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': 'yrt',
336: 1:      'question': 'rty',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': 'bmn',
336: 1:      'question': 'mnb',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': 'nvb',
336: 1:      'question': 'vbn',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': 'hfg',
336: 1:      'question': 'fgh',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': 'kij',
336: 1:      'question': 'ijk',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': 'nlm',
336: 1:      'question': 'lmn',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': 'rpq',
336: 1:      'question': 'pqr',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': 'ust',
336: 1:      'question': 'stu',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': 'ywx',
336: 1:      'question': 'wxy',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': '222',
336: 1:      'question': '222',
336: 1:      'valid': true
336: 1:    },
336: 1:    {
336: 1:      'answer': '978',
336: 1:      'question': '789',
336: 1:      'valid': true
336: 1:    }
336: 1:  ],
336: 1:  'info': [
336: 1:    '✅f(abc) = cab',
336: 1:    '✅f(cad) = dca',
336: 1:    '✅f(asd) = das',
336: 1:    '✅f(xyz) = zxy',
336: 1:    '✅f(aaa) = aaa',
336: 1:    '✅f(123) = 312',
336: 1:    '✅f(dEf) = fdE',
336: 1:    '✅f(zxc) = czx',
336: 1:    '✅f(qwe) = eqw',
336: 1:    '✅f(rty) = yrt',
336: 1:    '✅f(mnb) = bmn',
336: 1:    '✅f(vbn) = nvb',
336: 1:    '✅f(fgh) = hfg',
336: 1:    '✅f(ijk) = kij',
336: 1:    '✅f(lmn) = nlm',
336: 1:    '✅f(pqr) = rpq',
336: 1:    '✅f(stu) = ust',
336: 1:    '✅f(wxy) = ywx',
336: 1:    '✅f(222) = 222',
336: 1:    '✅f(789) = 978',
336: 1:    '❌f(090) = ??? != 009'
336: 1:  ],
336: 1:  'level': 11,
336: 1:  'nextQuestion': '090',
336: 1:  'questions': [
336: 1:    'abc',
336: 1:    'cad',
336: 1:    'asd',
336: 1:    'xyz',
336: 1:    'aaa',
336: 1:    '123',
336: 1:    'dEf',
336: 1:    'zxc',
336: 1:    'qwe',
336: 1:    'rty',
336: 1:    'mnb',
336: 1:    'vbn',
336: 1:    'fgh',
336: 1:    'ijk',
336: 1:    'lmn',
336: 1:    'pqr',
336: 1:    'stu',
336: 1:    'wxy',
336: 1:    '222',
336: 1:    '789',
336: 1:    '090'
336: 1:  ]
336: 1:}
336: 1:Scores: 13791
336: 1:Answer: message('['cab', 'dca', 'das', 'zxy', 'aaa', '312', 'fdE', 'czx', 'eqw', 'yrt', 'bmn', 'nvb', 'hfg', 'kij', 'nlm', 'rpq', 'ust', 'ywx', '222', '978', '009']')
336: 1:Fire Event: PassTest{complexity=15, testCount=21}
336: 1:Fire Event: NextAlgorithm{complexity=15, time=0}
------------------------------------------
337: 1:BoardData {
337: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
337: 1:  'history': [
337: 1:    {
337: 1:      'answer': 'cab',
337: 1:      'question': 'abc',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': 'dca',
337: 1:      'question': 'cad',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': 'das',
337: 1:      'question': 'asd',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': 'zxy',
337: 1:      'question': 'xyz',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': 'aaa',
337: 1:      'question': 'aaa',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '312',
337: 1:      'question': '123',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': 'fdE',
337: 1:      'question': 'dEf',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': 'czx',
337: 1:      'question': 'zxc',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': 'eqw',
337: 1:      'question': 'qwe',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': 'yrt',
337: 1:      'question': 'rty',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': 'bmn',
337: 1:      'question': 'mnb',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': 'nvb',
337: 1:      'question': 'vbn',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': 'hfg',
337: 1:      'question': 'fgh',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': 'kij',
337: 1:      'question': 'ijk',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': 'nlm',
337: 1:      'question': 'lmn',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': 'rpq',
337: 1:      'question': 'pqr',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': 'ust',
337: 1:      'question': 'stu',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': 'ywx',
337: 1:      'question': 'wxy',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '222',
337: 1:      'question': '222',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '978',
337: 1:      'question': '789',
337: 1:      'valid': true
337: 1:    },
337: 1:    {
337: 1:      'answer': '009',
337: 1:      'question': '090',
337: 1:      'valid': true
337: 1:    }
337: 1:  ],
337: 1:  'info': [
337: 1:    '✅f(abc) = cab',
337: 1:    '✅f(cad) = dca',
337: 1:    '✅f(asd) = das',
337: 1:    '✅f(xyz) = zxy',
337: 1:    '✅f(aaa) = aaa',
337: 1:    '✅f(123) = 312',
337: 1:    '✅f(dEf) = fdE',
337: 1:    '✅f(zxc) = czx',
337: 1:    '✅f(qwe) = eqw',
337: 1:    '✅f(rty) = yrt',
337: 1:    '✅f(mnb) = bmn',
337: 1:    '✅f(vbn) = nvb',
337: 1:    '✅f(fgh) = hfg',
337: 1:    '✅f(ijk) = kij',
337: 1:    '✅f(lmn) = nlm',
337: 1:    '✅f(pqr) = rpq',
337: 1:    '✅f(stu) = ust',
337: 1:    '✅f(wxy) = ywx',
337: 1:    '✅f(222) = 222',
337: 1:    '✅f(789) = 978',
337: 1:    '✅f(090) = 009'
337: 1:  ],
337: 1:  'level': 11,
337: 1:  'questions': []
337: 1:}
337: 1:Scores: 15822
337: 1:Answer: message('StartNextLevel')
337: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
338: 1:BoardData {
338: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
338: 1:  'expectedAnswer': 'true',
338: 1:  'history': [],
338: 1:  'info': ['❌f(Dermatoglyphics) = ??? != true'],
338: 1:  'level': 12,
338: 1:  'nextQuestion': 'Dermatoglyphics',
338: 1:  'questions': ['Dermatoglyphics']
338: 1:}
338: 1:Scores: 15822
338: 1:Answer: message('['true']')
338: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
339: 1:BoardData {
339: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
339: 1:  'expectedAnswer': 'false',
339: 1:  'history': [{
339: 1:    'answer': 'true',
339: 1:    'question': 'Dermatoglyphics',
339: 1:    'valid': true
339: 1:  }],
339: 1:  'info': [
339: 1:    '✅f(Dermatoglyphics) = true',
339: 1:    '❌f(cappa) = ??? != false'
339: 1:  ],
339: 1:  'level': 12,
339: 1:  'nextQuestion': 'cappa',
339: 1:  'questions': [
339: 1:    'Dermatoglyphics',
339: 1:    'cappa'
339: 1:  ]
339: 1:}
339: 1:Scores: 15826
339: 1:Answer: message('['true', 'false']')
339: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
340: 1:BoardData {
340: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
340: 1:  'expectedAnswer': 'false',
340: 1:  'history': [
340: 1:    {
340: 1:      'answer': 'true',
340: 1:      'question': 'Dermatoglyphics',
340: 1:      'valid': true
340: 1:    },
340: 1:    {
340: 1:      'answer': 'false',
340: 1:      'question': 'cappa',
340: 1:      'valid': true
340: 1:    }
340: 1:  ],
340: 1:  'info': [
340: 1:    '✅f(Dermatoglyphics) = true',
340: 1:    '✅f(cappa) = false',
340: 1:    '❌f(moOn) = ??? != false'
340: 1:  ],
340: 1:  'level': 12,
340: 1:  'nextQuestion': 'moOn',
340: 1:  'questions': [
340: 1:    'Dermatoglyphics',
340: 1:    'cappa',
340: 1:    'moOn'
340: 1:  ]
340: 1:}
340: 1:Scores: 15830
340: 1:Answer: message('['true', 'false', 'false']')
340: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
341: 1:BoardData {
341: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
341: 1:  'expectedAnswer': 'true',
341: 1:  'history': [
341: 1:    {
341: 1:      'answer': 'true',
341: 1:      'question': 'Dermatoglyphics',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': 'false',
341: 1:      'question': 'cappa',
341: 1:      'valid': true
341: 1:    },
341: 1:    {
341: 1:      'answer': 'false',
341: 1:      'question': 'moOn',
341: 1:      'valid': true
341: 1:    }
341: 1:  ],
341: 1:  'info': [
341: 1:    '✅f(Dermatoglyphics) = true',
341: 1:    '✅f(cappa) = false',
341: 1:    '✅f(moOn) = false',
341: 1:    '❌f() = ??? != true'
341: 1:  ],
341: 1:  'level': 12,
341: 1:  'nextQuestion': '',
341: 1:  'questions': [
341: 1:    'Dermatoglyphics',
341: 1:    'cappa',
341: 1:    'moOn',
341: 1:    ''
341: 1:  ]
341: 1:}
341: 1:Scores: 15834
341: 1:Answer: message('['true', 'false', 'false', 'true']')
341: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
342: 1:BoardData {
342: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
342: 1:  'expectedAnswer': 'true',
342: 1:  'history': [
342: 1:    {
342: 1:      'answer': 'true',
342: 1:      'question': 'Dermatoglyphics',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': 'false',
342: 1:      'question': 'cappa',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': 'false',
342: 1:      'question': 'moOn',
342: 1:      'valid': true
342: 1:    },
342: 1:    {
342: 1:      'answer': 'true',
342: 1:      'question': '',
342: 1:      'valid': true
342: 1:    }
342: 1:  ],
342: 1:  'info': [
342: 1:    '✅f(Dermatoglyphics) = true',
342: 1:    '✅f(cappa) = false',
342: 1:    '✅f(moOn) = false',
342: 1:    '✅f() = true',
342: 1:    '❌f(Ambidextrously) = ??? != true'
342: 1:  ],
342: 1:  'level': 12,
342: 1:  'nextQuestion': 'Ambidextrously',
342: 1:  'questions': [
342: 1:    'Dermatoglyphics',
342: 1:    'cappa',
342: 1:    'moOn',
342: 1:    '',
342: 1:    'Ambidextrously'
342: 1:  ]
342: 1:}
342: 1:Scores: 15838
342: 1:Answer: message('['true', 'false', 'false', 'true', 'true']')
342: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
343: 1:BoardData {
343: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
343: 1:  'expectedAnswer': 'false',
343: 1:  'history': [
343: 1:    {
343: 1:      'answer': 'true',
343: 1:      'question': 'Dermatoglyphics',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': 'false',
343: 1:      'question': 'cappa',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': 'false',
343: 1:      'question': 'moOn',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': 'true',
343: 1:      'question': '',
343: 1:      'valid': true
343: 1:    },
343: 1:    {
343: 1:      'answer': 'true',
343: 1:      'question': 'Ambidextrously',
343: 1:      'valid': true
343: 1:    }
343: 1:  ],
343: 1:  'info': [
343: 1:    '✅f(Dermatoglyphics) = true',
343: 1:    '✅f(cappa) = false',
343: 1:    '✅f(moOn) = false',
343: 1:    '✅f() = true',
343: 1:    '✅f(Ambidextrously) = true',
343: 1:    '❌f(Aqueducts) = ??? != false'
343: 1:  ],
343: 1:  'level': 12,
343: 1:  'nextQuestion': 'Aqueducts',
343: 1:  'questions': [
343: 1:    'Dermatoglyphics',
343: 1:    'cappa',
343: 1:    'moOn',
343: 1:    '',
343: 1:    'Ambidextrously',
343: 1:    'Aqueducts'
343: 1:  ]
343: 1:}
343: 1:Scores: 15842
343: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false']')
343: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
344: 1:BoardData {
344: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
344: 1:  'expectedAnswer': 'false',
344: 1:  'history': [
344: 1:    {
344: 1:      'answer': 'true',
344: 1:      'question': 'Dermatoglyphics',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': 'false',
344: 1:      'question': 'cappa',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': 'false',
344: 1:      'question': 'moOn',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': 'true',
344: 1:      'question': '',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': 'true',
344: 1:      'question': 'Ambidextrously',
344: 1:      'valid': true
344: 1:    },
344: 1:    {
344: 1:      'answer': 'false',
344: 1:      'question': 'Aqueducts',
344: 1:      'valid': true
344: 1:    }
344: 1:  ],
344: 1:  'info': [
344: 1:    '✅f(Dermatoglyphics) = true',
344: 1:    '✅f(cappa) = false',
344: 1:    '✅f(moOn) = false',
344: 1:    '✅f() = true',
344: 1:    '✅f(Ambidextrously) = true',
344: 1:    '✅f(Aqueducts) = false',
344: 1:    '❌f(Bilabial) = ??? != false'
344: 1:  ],
344: 1:  'level': 12,
344: 1:  'nextQuestion': 'Bilabial',
344: 1:  'questions': [
344: 1:    'Dermatoglyphics',
344: 1:    'cappa',
344: 1:    'moOn',
344: 1:    '',
344: 1:    'Ambidextrously',
344: 1:    'Aqueducts',
344: 1:    'Bilabial'
344: 1:  ]
344: 1:}
344: 1:Scores: 15846
344: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false']')
344: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
345: 1:BoardData {
345: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
345: 1:  'expectedAnswer': 'false',
345: 1:  'history': [
345: 1:    {
345: 1:      'answer': 'true',
345: 1:      'question': 'Dermatoglyphics',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': 'false',
345: 1:      'question': 'cappa',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': 'false',
345: 1:      'question': 'moOn',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': 'true',
345: 1:      'question': '',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': 'true',
345: 1:      'question': 'Ambidextrously',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': 'false',
345: 1:      'question': 'Aqueducts',
345: 1:      'valid': true
345: 1:    },
345: 1:    {
345: 1:      'answer': 'false',
345: 1:      'question': 'Bilabial',
345: 1:      'valid': true
345: 1:    }
345: 1:  ],
345: 1:  'info': [
345: 1:    '✅f(Dermatoglyphics) = true',
345: 1:    '✅f(cappa) = false',
345: 1:    '✅f(moOn) = false',
345: 1:    '✅f() = true',
345: 1:    '✅f(Ambidextrously) = true',
345: 1:    '✅f(Aqueducts) = false',
345: 1:    '✅f(Bilabial) = false',
345: 1:    '❌f(Caramelized) = ??? != false'
345: 1:  ],
345: 1:  'level': 12,
345: 1:  'nextQuestion': 'Caramelized',
345: 1:  'questions': [
345: 1:    'Dermatoglyphics',
345: 1:    'cappa',
345: 1:    'moOn',
345: 1:    '',
345: 1:    'Ambidextrously',
345: 1:    'Aqueducts',
345: 1:    'Bilabial',
345: 1:    'Caramelized'
345: 1:  ]
345: 1:}
345: 1:Scores: 15850
345: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false']')
345: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
346: 1:BoardData {
346: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
346: 1:  'expectedAnswer': 'true',
346: 1:  'history': [
346: 1:    {
346: 1:      'answer': 'true',
346: 1:      'question': 'Dermatoglyphics',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': 'false',
346: 1:      'question': 'cappa',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': 'false',
346: 1:      'question': 'moOn',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': 'true',
346: 1:      'question': '',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': 'true',
346: 1:      'question': 'Ambidextrously',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': 'false',
346: 1:      'question': 'Aqueducts',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': 'false',
346: 1:      'question': 'Bilabial',
346: 1:      'valid': true
346: 1:    },
346: 1:    {
346: 1:      'answer': 'false',
346: 1:      'question': 'Caramelized',
346: 1:      'valid': true
346: 1:    }
346: 1:  ],
346: 1:  'info': [
346: 1:    '✅f(Dermatoglyphics) = true',
346: 1:    '✅f(cappa) = false',
346: 1:    '✅f(moOn) = false',
346: 1:    '✅f() = true',
346: 1:    '✅f(Ambidextrously) = true',
346: 1:    '✅f(Aqueducts) = false',
346: 1:    '✅f(Bilabial) = false',
346: 1:    '✅f(Caramelized) = false',
346: 1:    '❌f(Conjugated) = ??? != true'
346: 1:  ],
346: 1:  'level': 12,
346: 1:  'nextQuestion': 'Conjugated',
346: 1:  'questions': [
346: 1:    'Dermatoglyphics',
346: 1:    'cappa',
346: 1:    'moOn',
346: 1:    '',
346: 1:    'Ambidextrously',
346: 1:    'Aqueducts',
346: 1:    'Bilabial',
346: 1:    'Caramelized',
346: 1:    'Conjugated'
346: 1:  ]
346: 1:}
346: 1:Scores: 15854
346: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true']')
346: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
347: 1:BoardData {
347: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
347: 1:  'expectedAnswer': 'false',
347: 1:  'history': [
347: 1:    {
347: 1:      'answer': 'true',
347: 1:      'question': 'Dermatoglyphics',
347: 1:      'valid': true
347: 1:    },
347: 1:    {
347: 1:      'answer': 'false',
347: 1:      'question': 'cappa',
347: 1:      'valid': true
347: 1:    },
347: 1:    {
347: 1:      'answer': 'false',
347: 1:      'question': 'moOn',
347: 1:      'valid': true
347: 1:    },
347: 1:    {
347: 1:      'answer': 'true',
347: 1:      'question': '',
347: 1:      'valid': true
347: 1:    },
347: 1:    {
347: 1:      'answer': 'true',
347: 1:      'question': 'Ambidextrously',
347: 1:      'valid': true
347: 1:    },
347: 1:    {
347: 1:      'answer': 'false',
347: 1:      'question': 'Aqueducts',
347: 1:      'valid': true
347: 1:    },
347: 1:    {
347: 1:      'answer': 'false',
347: 1:      'question': 'Bilabial',
347: 1:      'valid': true
347: 1:    },
347: 1:    {
347: 1:      'answer': 'false',
347: 1:      'question': 'Caramelized',
347: 1:      'valid': true
347: 1:    },
347: 1:    {
347: 1:      'answer': 'true',
347: 1:      'question': 'Conjugated',
347: 1:      'valid': true
347: 1:    }
347: 1:  ],
347: 1:  'info': [
347: 1:    '✅f(Dermatoglyphics) = true',
347: 1:    '✅f(cappa) = false',
347: 1:    '✅f(moOn) = false',
347: 1:    '✅f() = true',
347: 1:    '✅f(Ambidextrously) = true',
347: 1:    '✅f(Aqueducts) = false',
347: 1:    '✅f(Bilabial) = false',
347: 1:    '✅f(Caramelized) = false',
347: 1:    '✅f(Conjugated) = true',
347: 1:    '❌f(Denouement) = ??? != false'
347: 1:  ],
347: 1:  'level': 12,
347: 1:  'nextQuestion': 'Denouement',
347: 1:  'questions': [
347: 1:    'Dermatoglyphics',
347: 1:    'cappa',
347: 1:    'moOn',
347: 1:    '',
347: 1:    'Ambidextrously',
347: 1:    'Aqueducts',
347: 1:    'Bilabial',
347: 1:    'Caramelized',
347: 1:    'Conjugated',
347: 1:    'Denouement'
347: 1:  ]
347: 1:}
347: 1:Scores: 15858
347: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false']')
347: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
348: 1:BoardData {
348: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
348: 1:  'expectedAnswer': 'false',
348: 1:  'history': [
348: 1:    {
348: 1:      'answer': 'true',
348: 1:      'question': 'Dermatoglyphics',
348: 1:      'valid': true
348: 1:    },
348: 1:    {
348: 1:      'answer': 'false',
348: 1:      'question': 'cappa',
348: 1:      'valid': true
348: 1:    },
348: 1:    {
348: 1:      'answer': 'false',
348: 1:      'question': 'moOn',
348: 1:      'valid': true
348: 1:    },
348: 1:    {
348: 1:      'answer': 'true',
348: 1:      'question': '',
348: 1:      'valid': true
348: 1:    },
348: 1:    {
348: 1:      'answer': 'true',
348: 1:      'question': 'Ambidextrously',
348: 1:      'valid': true
348: 1:    },
348: 1:    {
348: 1:      'answer': 'false',
348: 1:      'question': 'Aqueducts',
348: 1:      'valid': true
348: 1:    },
348: 1:    {
348: 1:      'answer': 'false',
348: 1:      'question': 'Bilabial',
348: 1:      'valid': true
348: 1:    },
348: 1:    {
348: 1:      'answer': 'false',
348: 1:      'question': 'Caramelized',
348: 1:      'valid': true
348: 1:    },
348: 1:    {
348: 1:      'answer': 'true',
348: 1:      'question': 'Conjugated',
348: 1:      'valid': true
348: 1:    },
348: 1:    {
348: 1:      'answer': 'false',
348: 1:      'question': 'Denouement',
348: 1:      'valid': true
348: 1:    }
348: 1:  ],
348: 1:  'info': [
348: 1:    '✅f(Dermatoglyphics) = true',
348: 1:    '✅f(cappa) = false',
348: 1:    '✅f(moOn) = false',
348: 1:    '✅f() = true',
348: 1:    '✅f(Ambidextrously) = true',
348: 1:    '✅f(Aqueducts) = false',
348: 1:    '✅f(Bilabial) = false',
348: 1:    '✅f(Caramelized) = false',
348: 1:    '✅f(Conjugated) = true',
348: 1:    '✅f(Denouement) = false',
348: 1:    '❌f(Disinfectant) = ??? != false'
348: 1:  ],
348: 1:  'level': 12,
348: 1:  'nextQuestion': 'Disinfectant',
348: 1:  'questions': [
348: 1:    'Dermatoglyphics',
348: 1:    'cappa',
348: 1:    'moOn',
348: 1:    '',
348: 1:    'Ambidextrously',
348: 1:    'Aqueducts',
348: 1:    'Bilabial',
348: 1:    'Caramelized',
348: 1:    'Conjugated',
348: 1:    'Denouement',
348: 1:    'Disinfectant'
348: 1:  ]
348: 1:}
348: 1:Scores: 15862
348: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false']')
348: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
349: 1:BoardData {
349: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
349: 1:  'expectedAnswer': 'false',
349: 1:  'history': [
349: 1:    {
349: 1:      'answer': 'true',
349: 1:      'question': 'Dermatoglyphics',
349: 1:      'valid': true
349: 1:    },
349: 1:    {
349: 1:      'answer': 'false',
349: 1:      'question': 'cappa',
349: 1:      'valid': true
349: 1:    },
349: 1:    {
349: 1:      'answer': 'false',
349: 1:      'question': 'moOn',
349: 1:      'valid': true
349: 1:    },
349: 1:    {
349: 1:      'answer': 'true',
349: 1:      'question': '',
349: 1:      'valid': true
349: 1:    },
349: 1:    {
349: 1:      'answer': 'true',
349: 1:      'question': 'Ambidextrously',
349: 1:      'valid': true
349: 1:    },
349: 1:    {
349: 1:      'answer': 'false',
349: 1:      'question': 'Aqueducts',
349: 1:      'valid': true
349: 1:    },
349: 1:    {
349: 1:      'answer': 'false',
349: 1:      'question': 'Bilabial',
349: 1:      'valid': true
349: 1:    },
349: 1:    {
349: 1:      'answer': 'false',
349: 1:      'question': 'Caramelized',
349: 1:      'valid': true
349: 1:    },
349: 1:    {
349: 1:      'answer': 'true',
349: 1:      'question': 'Conjugated',
349: 1:      'valid': true
349: 1:    },
349: 1:    {
349: 1:      'answer': 'false',
349: 1:      'question': 'Denouement',
349: 1:      'valid': true
349: 1:    },
349: 1:    {
349: 1:      'answer': 'false',
349: 1:      'question': 'Disinfectant',
349: 1:      'valid': true
349: 1:    }
349: 1:  ],
349: 1:  'info': [
349: 1:    '✅f(Dermatoglyphics) = true',
349: 1:    '✅f(cappa) = false',
349: 1:    '✅f(moOn) = false',
349: 1:    '✅f() = true',
349: 1:    '✅f(Ambidextrously) = true',
349: 1:    '✅f(Aqueducts) = false',
349: 1:    '✅f(Bilabial) = false',
349: 1:    '✅f(Caramelized) = false',
349: 1:    '✅f(Conjugated) = true',
349: 1:    '✅f(Denouement) = false',
349: 1:    '✅f(Disinfectant) = false',
349: 1:    '❌f(Embezzler) = ??? != false'
349: 1:  ],
349: 1:  'level': 12,
349: 1:  'nextQuestion': 'Embezzler',
349: 1:  'questions': [
349: 1:    'Dermatoglyphics',
349: 1:    'cappa',
349: 1:    'moOn',
349: 1:    '',
349: 1:    'Ambidextrously',
349: 1:    'Aqueducts',
349: 1:    'Bilabial',
349: 1:    'Caramelized',
349: 1:    'Conjugated',
349: 1:    'Denouement',
349: 1:    'Disinfectant',
349: 1:    'Embezzler'
349: 1:  ]
349: 1:}
349: 1:Scores: 15866
349: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false']')
349: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
350: 1:BoardData {
350: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
350: 1:  'expectedAnswer': 'false',
350: 1:  'history': [
350: 1:    {
350: 1:      'answer': 'true',
350: 1:      'question': 'Dermatoglyphics',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': 'false',
350: 1:      'question': 'cappa',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': 'false',
350: 1:      'question': 'moOn',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': 'true',
350: 1:      'question': '',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': 'true',
350: 1:      'question': 'Ambidextrously',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': 'false',
350: 1:      'question': 'Aqueducts',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': 'false',
350: 1:      'question': 'Bilabial',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': 'false',
350: 1:      'question': 'Caramelized',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': 'true',
350: 1:      'question': 'Conjugated',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': 'false',
350: 1:      'question': 'Denouement',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': 'false',
350: 1:      'question': 'Disinfectant',
350: 1:      'valid': true
350: 1:    },
350: 1:    {
350: 1:      'answer': 'false',
350: 1:      'question': 'Embezzler',
350: 1:      'valid': true
350: 1:    }
350: 1:  ],
350: 1:  'info': [
350: 1:    '✅f(Dermatoglyphics) = true',
350: 1:    '✅f(cappa) = false',
350: 1:    '✅f(moOn) = false',
350: 1:    '✅f() = true',
350: 1:    '✅f(Ambidextrously) = true',
350: 1:    '✅f(Aqueducts) = false',
350: 1:    '✅f(Bilabial) = false',
350: 1:    '✅f(Caramelized) = false',
350: 1:    '✅f(Conjugated) = true',
350: 1:    '✅f(Denouement) = false',
350: 1:    '✅f(Disinfectant) = false',
350: 1:    '✅f(Embezzler) = false',
350: 1:    '❌f(Enzymology) = ??? != false'
350: 1:  ],
350: 1:  'level': 12,
350: 1:  'nextQuestion': 'Enzymology',
350: 1:  'questions': [
350: 1:    'Dermatoglyphics',
350: 1:    'cappa',
350: 1:    'moOn',
350: 1:    '',
350: 1:    'Ambidextrously',
350: 1:    'Aqueducts',
350: 1:    'Bilabial',
350: 1:    'Caramelized',
350: 1:    'Conjugated',
350: 1:    'Denouement',
350: 1:    'Disinfectant',
350: 1:    'Embezzler',
350: 1:    'Enzymology'
350: 1:  ]
350: 1:}
350: 1:Scores: 15870
350: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false']')
350: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
351: 1:BoardData {
351: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
351: 1:  'expectedAnswer': 'true',
351: 1:  'history': [
351: 1:    {
351: 1:      'answer': 'true',
351: 1:      'question': 'Dermatoglyphics',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': 'false',
351: 1:      'question': 'cappa',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': 'false',
351: 1:      'question': 'moOn',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': 'true',
351: 1:      'question': '',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': 'true',
351: 1:      'question': 'Ambidextrously',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': 'false',
351: 1:      'question': 'Aqueducts',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': 'false',
351: 1:      'question': 'Bilabial',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': 'false',
351: 1:      'question': 'Caramelized',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': 'true',
351: 1:      'question': 'Conjugated',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': 'false',
351: 1:      'question': 'Denouement',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': 'false',
351: 1:      'question': 'Disinfectant',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': 'false',
351: 1:      'question': 'Embezzler',
351: 1:      'valid': true
351: 1:    },
351: 1:    {
351: 1:      'answer': 'false',
351: 1:      'question': 'Enzymology',
351: 1:      'valid': true
351: 1:    }
351: 1:  ],
351: 1:  'info': [
351: 1:    '✅f(Dermatoglyphics) = true',
351: 1:    '✅f(cappa) = false',
351: 1:    '✅f(moOn) = false',
351: 1:    '✅f() = true',
351: 1:    '✅f(Ambidextrously) = true',
351: 1:    '✅f(Aqueducts) = false',
351: 1:    '✅f(Bilabial) = false',
351: 1:    '✅f(Caramelized) = false',
351: 1:    '✅f(Conjugated) = true',
351: 1:    '✅f(Denouement) = false',
351: 1:    '✅f(Disinfectant) = false',
351: 1:    '✅f(Embezzler) = false',
351: 1:    '✅f(Enzymology) = false',
351: 1:    '❌f(Fluoride) = ??? != true'
351: 1:  ],
351: 1:  'level': 12,
351: 1:  'nextQuestion': 'Fluoride',
351: 1:  'questions': [
351: 1:    'Dermatoglyphics',
351: 1:    'cappa',
351: 1:    'moOn',
351: 1:    '',
351: 1:    'Ambidextrously',
351: 1:    'Aqueducts',
351: 1:    'Bilabial',
351: 1:    'Caramelized',
351: 1:    'Conjugated',
351: 1:    'Denouement',
351: 1:    'Disinfectant',
351: 1:    'Embezzler',
351: 1:    'Enzymology',
351: 1:    'Fluoride'
351: 1:  ]
351: 1:}
351: 1:Scores: 15874
351: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true']')
351: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
352: 1:BoardData {
352: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
352: 1:  'expectedAnswer': 'false',
352: 1:  'history': [
352: 1:    {
352: 1:      'answer': 'true',
352: 1:      'question': 'Dermatoglyphics',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': 'false',
352: 1:      'question': 'cappa',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': 'false',
352: 1:      'question': 'moOn',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': 'true',
352: 1:      'question': '',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': 'true',
352: 1:      'question': 'Ambidextrously',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': 'false',
352: 1:      'question': 'Aqueducts',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': 'false',
352: 1:      'question': 'Bilabial',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': 'false',
352: 1:      'question': 'Caramelized',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': 'true',
352: 1:      'question': 'Conjugated',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': 'false',
352: 1:      'question': 'Denouement',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': 'false',
352: 1:      'question': 'Disinfectant',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': 'false',
352: 1:      'question': 'Embezzler',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': 'false',
352: 1:      'question': 'Enzymology',
352: 1:      'valid': true
352: 1:    },
352: 1:    {
352: 1:      'answer': 'true',
352: 1:      'question': 'Fluoride',
352: 1:      'valid': true
352: 1:    }
352: 1:  ],
352: 1:  'info': [
352: 1:    '✅f(Dermatoglyphics) = true',
352: 1:    '✅f(cappa) = false',
352: 1:    '✅f(moOn) = false',
352: 1:    '✅f() = true',
352: 1:    '✅f(Ambidextrously) = true',
352: 1:    '✅f(Aqueducts) = false',
352: 1:    '✅f(Bilabial) = false',
352: 1:    '✅f(Caramelized) = false',
352: 1:    '✅f(Conjugated) = true',
352: 1:    '✅f(Denouement) = false',
352: 1:    '✅f(Disinfectant) = false',
352: 1:    '✅f(Embezzler) = false',
352: 1:    '✅f(Enzymology) = false',
352: 1:    '✅f(Fluoride) = true',
352: 1:    '❌f(Glycogen) = ??? != false'
352: 1:  ],
352: 1:  'level': 12,
352: 1:  'nextQuestion': 'Glycogen',
352: 1:  'questions': [
352: 1:    'Dermatoglyphics',
352: 1:    'cappa',
352: 1:    'moOn',
352: 1:    '',
352: 1:    'Ambidextrously',
352: 1:    'Aqueducts',
352: 1:    'Bilabial',
352: 1:    'Caramelized',
352: 1:    'Conjugated',
352: 1:    'Denouement',
352: 1:    'Disinfectant',
352: 1:    'Embezzler',
352: 1:    'Enzymology',
352: 1:    'Fluoride',
352: 1:    'Glycogen'
352: 1:  ]
352: 1:}
352: 1:Scores: 15878
352: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false']')
352: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
353: 1:BoardData {
353: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
353: 1:  'expectedAnswer': 'false',
353: 1:  'history': [
353: 1:    {
353: 1:      'answer': 'true',
353: 1:      'question': 'Dermatoglyphics',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': 'false',
353: 1:      'question': 'cappa',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': 'false',
353: 1:      'question': 'moOn',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': 'true',
353: 1:      'question': '',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': 'true',
353: 1:      'question': 'Ambidextrously',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': 'false',
353: 1:      'question': 'Aqueducts',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': 'false',
353: 1:      'question': 'Bilabial',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': 'false',
353: 1:      'question': 'Caramelized',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': 'true',
353: 1:      'question': 'Conjugated',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': 'false',
353: 1:      'question': 'Denouement',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': 'false',
353: 1:      'question': 'Disinfectant',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': 'false',
353: 1:      'question': 'Embezzler',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': 'false',
353: 1:      'question': 'Enzymology',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': 'true',
353: 1:      'question': 'Fluoride',
353: 1:      'valid': true
353: 1:    },
353: 1:    {
353: 1:      'answer': 'false',
353: 1:      'question': 'Glycogen',
353: 1:      'valid': true
353: 1:    }
353: 1:  ],
353: 1:  'info': [
353: 1:    '✅f(Dermatoglyphics) = true',
353: 1:    '✅f(cappa) = false',
353: 1:    '✅f(moOn) = false',
353: 1:    '✅f() = true',
353: 1:    '✅f(Ambidextrously) = true',
353: 1:    '✅f(Aqueducts) = false',
353: 1:    '✅f(Bilabial) = false',
353: 1:    '✅f(Caramelized) = false',
353: 1:    '✅f(Conjugated) = true',
353: 1:    '✅f(Denouement) = false',
353: 1:    '✅f(Disinfectant) = false',
353: 1:    '✅f(Embezzler) = false',
353: 1:    '✅f(Enzymology) = false',
353: 1:    '✅f(Fluoride) = true',
353: 1:    '✅f(Glycogen) = false',
353: 1:    '❌f(Humidity) = ??? != false'
353: 1:  ],
353: 1:  'level': 12,
353: 1:  'nextQuestion': 'Humidity',
353: 1:  'questions': [
353: 1:    'Dermatoglyphics',
353: 1:    'cappa',
353: 1:    'moOn',
353: 1:    '',
353: 1:    'Ambidextrously',
353: 1:    'Aqueducts',
353: 1:    'Bilabial',
353: 1:    'Caramelized',
353: 1:    'Conjugated',
353: 1:    'Denouement',
353: 1:    'Disinfectant',
353: 1:    'Embezzler',
353: 1:    'Enzymology',
353: 1:    'Fluoride',
353: 1:    'Glycogen',
353: 1:    'Humidity'
353: 1:  ]
353: 1:}
353: 1:Scores: 15882
353: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false']')
353: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
354: 1:BoardData {
354: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
354: 1:  'expectedAnswer': 'true',
354: 1:  'history': [
354: 1:    {
354: 1:      'answer': 'true',
354: 1:      'question': 'Dermatoglyphics',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': 'false',
354: 1:      'question': 'cappa',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': 'false',
354: 1:      'question': 'moOn',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': 'true',
354: 1:      'question': '',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': 'true',
354: 1:      'question': 'Ambidextrously',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': 'false',
354: 1:      'question': 'Aqueducts',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': 'false',
354: 1:      'question': 'Bilabial',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': 'false',
354: 1:      'question': 'Caramelized',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': 'true',
354: 1:      'question': 'Conjugated',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': 'false',
354: 1:      'question': 'Denouement',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': 'false',
354: 1:      'question': 'Disinfectant',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': 'false',
354: 1:      'question': 'Embezzler',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': 'false',
354: 1:      'question': 'Enzymology',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': 'true',
354: 1:      'question': 'Fluoride',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': 'false',
354: 1:      'question': 'Glycogen',
354: 1:      'valid': true
354: 1:    },
354: 1:    {
354: 1:      'answer': 'false',
354: 1:      'question': 'Humidity',
354: 1:      'valid': true
354: 1:    }
354: 1:  ],
354: 1:  'info': [
354: 1:    '✅f(Dermatoglyphics) = true',
354: 1:    '✅f(cappa) = false',
354: 1:    '✅f(moOn) = false',
354: 1:    '✅f() = true',
354: 1:    '✅f(Ambidextrously) = true',
354: 1:    '✅f(Aqueducts) = false',
354: 1:    '✅f(Bilabial) = false',
354: 1:    '✅f(Caramelized) = false',
354: 1:    '✅f(Conjugated) = true',
354: 1:    '✅f(Denouement) = false',
354: 1:    '✅f(Disinfectant) = false',
354: 1:    '✅f(Embezzler) = false',
354: 1:    '✅f(Enzymology) = false',
354: 1:    '✅f(Fluoride) = true',
354: 1:    '✅f(Glycogen) = false',
354: 1:    '✅f(Humidity) = false',
354: 1:    '❌f(Juxtapose) = ??? != true'
354: 1:  ],
354: 1:  'level': 12,
354: 1:  'nextQuestion': 'Juxtapose',
354: 1:  'questions': [
354: 1:    'Dermatoglyphics',
354: 1:    'cappa',
354: 1:    'moOn',
354: 1:    '',
354: 1:    'Ambidextrously',
354: 1:    'Aqueducts',
354: 1:    'Bilabial',
354: 1:    'Caramelized',
354: 1:    'Conjugated',
354: 1:    'Denouement',
354: 1:    'Disinfectant',
354: 1:    'Embezzler',
354: 1:    'Enzymology',
354: 1:    'Fluoride',
354: 1:    'Glycogen',
354: 1:    'Humidity',
354: 1:    'Juxtapose'
354: 1:  ]
354: 1:}
354: 1:Scores: 15886
354: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true']')
354: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
355: 1:BoardData {
355: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
355: 1:  'expectedAnswer': 'true',
355: 1:  'history': [
355: 1:    {
355: 1:      'answer': 'true',
355: 1:      'question': 'Dermatoglyphics',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': 'false',
355: 1:      'question': 'cappa',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': 'false',
355: 1:      'question': 'moOn',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': 'true',
355: 1:      'question': '',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': 'true',
355: 1:      'question': 'Ambidextrously',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': 'false',
355: 1:      'question': 'Aqueducts',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': 'false',
355: 1:      'question': 'Bilabial',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': 'false',
355: 1:      'question': 'Caramelized',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': 'true',
355: 1:      'question': 'Conjugated',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': 'false',
355: 1:      'question': 'Denouement',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': 'false',
355: 1:      'question': 'Disinfectant',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': 'false',
355: 1:      'question': 'Embezzler',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': 'false',
355: 1:      'question': 'Enzymology',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': 'true',
355: 1:      'question': 'Fluoride',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': 'false',
355: 1:      'question': 'Glycogen',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': 'false',
355: 1:      'question': 'Humidity',
355: 1:      'valid': true
355: 1:    },
355: 1:    {
355: 1:      'answer': 'true',
355: 1:      'question': 'Juxtapose',
355: 1:      'valid': true
355: 1:    }
355: 1:  ],
355: 1:  'info': [
355: 1:    '✅f(Dermatoglyphics) = true',
355: 1:    '✅f(cappa) = false',
355: 1:    '✅f(moOn) = false',
355: 1:    '✅f() = true',
355: 1:    '✅f(Ambidextrously) = true',
355: 1:    '✅f(Aqueducts) = false',
355: 1:    '✅f(Bilabial) = false',
355: 1:    '✅f(Caramelized) = false',
355: 1:    '✅f(Conjugated) = true',
355: 1:    '✅f(Denouement) = false',
355: 1:    '✅f(Disinfectant) = false',
355: 1:    '✅f(Embezzler) = false',
355: 1:    '✅f(Enzymology) = false',
355: 1:    '✅f(Fluoride) = true',
355: 1:    '✅f(Glycogen) = false',
355: 1:    '✅f(Humidity) = false',
355: 1:    '✅f(Juxtapose) = true',
355: 1:    '❌f(Kilobytes) = ??? != true'
355: 1:  ],
355: 1:  'level': 12,
355: 1:  'nextQuestion': 'Kilobytes',
355: 1:  'questions': [
355: 1:    'Dermatoglyphics',
355: 1:    'cappa',
355: 1:    'moOn',
355: 1:    '',
355: 1:    'Ambidextrously',
355: 1:    'Aqueducts',
355: 1:    'Bilabial',
355: 1:    'Caramelized',
355: 1:    'Conjugated',
355: 1:    'Denouement',
355: 1:    'Disinfectant',
355: 1:    'Embezzler',
355: 1:    'Enzymology',
355: 1:    'Fluoride',
355: 1:    'Glycogen',
355: 1:    'Humidity',
355: 1:    'Juxtapose',
355: 1:    'Kilobytes'
355: 1:  ]
355: 1:}
355: 1:Scores: 15890
355: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true']')
355: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
356: 1:BoardData {
356: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
356: 1:  'expectedAnswer': 'false',
356: 1:  'history': [
356: 1:    {
356: 1:      'answer': 'true',
356: 1:      'question': 'Dermatoglyphics',
356: 1:      'valid': true
356: 1:    },
356: 1:    {
356: 1:      'answer': 'false',
356: 1:      'question': 'cappa',
356: 1:      'valid': true
356: 1:    },
356: 1:    {
356: 1:      'answer': 'false',
356: 1:      'question': 'moOn',
356: 1:      'valid': true
356: 1:    },
356: 1:    {
356: 1:      'answer': 'true',
356: 1:      'question': '',
356: 1:      'valid': true
356: 1:    },
356: 1:    {
356: 1:      'answer': 'true',
356: 1:      'question': 'Ambidextrously',
356: 1:      'valid': true
356: 1:    },
356: 1:    {
356: 1:      'answer': 'false',
356: 1:      'question': 'Aqueducts',
356: 1:      'valid': true
356: 1:    },
356: 1:    {
356: 1:      'answer': 'false',
356: 1:      'question': 'Bilabial',
356: 1:      'valid': true
356: 1:    },
356: 1:    {
356: 1:      'answer': 'false',
356: 1:      'question': 'Caramelized',
356: 1:      'valid': true
356: 1:    },
356: 1:    {
356: 1:      'answer': 'true',
356: 1:      'question': 'Conjugated',
356: 1:      'valid': true
356: 1:    },
356: 1:    {
356: 1:      'answer': 'false',
356: 1:      'question': 'Denouement',
356: 1:      'valid': true
356: 1:    },
356: 1:    {
356: 1:      'answer': 'false',
356: 1:      'question': 'Disinfectant',
356: 1:      'valid': true
356: 1:    },
356: 1:    {
356: 1:      'answer': 'false',
356: 1:      'question': 'Embezzler',
356: 1:      'valid': true
356: 1:    },
356: 1:    {
356: 1:      'answer': 'false',
356: 1:      'question': 'Enzymology',
356: 1:      'valid': true
356: 1:    },
356: 1:    {
356: 1:      'answer': 'true',
356: 1:      'question': 'Fluoride',
356: 1:      'valid': true
356: 1:    },
356: 1:    {
356: 1:      'answer': 'false',
356: 1:      'question': 'Glycogen',
356: 1:      'valid': true
356: 1:    },
356: 1:    {
356: 1:      'answer': 'false',
356: 1:      'question': 'Humidity',
356: 1:      'valid': true
356: 1:    },
356: 1:    {
356: 1:      'answer': 'true',
356: 1:      'question': 'Juxtapose',
356: 1:      'valid': true
356: 1:    },
356: 1:    {
356: 1:      'answer': 'true',
356: 1:      'question': 'Kilobytes',
356: 1:      'valid': true
356: 1:    }
356: 1:  ],
356: 1:  'info': [
356: 1:    '✅f(Dermatoglyphics) = true',
356: 1:    '✅f(cappa) = false',
356: 1:    '✅f(moOn) = false',
356: 1:    '✅f() = true',
356: 1:    '✅f(Ambidextrously) = true',
356: 1:    '✅f(Aqueducts) = false',
356: 1:    '✅f(Bilabial) = false',
356: 1:    '✅f(Caramelized) = false',
356: 1:    '✅f(Conjugated) = true',
356: 1:    '✅f(Denouement) = false',
356: 1:    '✅f(Disinfectant) = false',
356: 1:    '✅f(Embezzler) = false',
356: 1:    '✅f(Enzymology) = false',
356: 1:    '✅f(Fluoride) = true',
356: 1:    '✅f(Glycogen) = false',
356: 1:    '✅f(Humidity) = false',
356: 1:    '✅f(Juxtapose) = true',
356: 1:    '✅f(Kilobytes) = true',
356: 1:    '❌f(Locomotive) = ??? != false'
356: 1:  ],
356: 1:  'level': 12,
356: 1:  'nextQuestion': 'Locomotive',
356: 1:  'questions': [
356: 1:    'Dermatoglyphics',
356: 1:    'cappa',
356: 1:    'moOn',
356: 1:    '',
356: 1:    'Ambidextrously',
356: 1:    'Aqueducts',
356: 1:    'Bilabial',
356: 1:    'Caramelized',
356: 1:    'Conjugated',
356: 1:    'Denouement',
356: 1:    'Disinfectant',
356: 1:    'Embezzler',
356: 1:    'Enzymology',
356: 1:    'Fluoride',
356: 1:    'Glycogen',
356: 1:    'Humidity',
356: 1:    'Juxtapose',
356: 1:    'Kilobytes',
356: 1:    'Locomotive'
356: 1:  ]
356: 1:}
356: 1:Scores: 15894
356: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false']')
356: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
357: 1:BoardData {
357: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
357: 1:  'expectedAnswer': 'false',
357: 1:  'history': [
357: 1:    {
357: 1:      'answer': 'true',
357: 1:      'question': 'Dermatoglyphics',
357: 1:      'valid': true
357: 1:    },
357: 1:    {
357: 1:      'answer': 'false',
357: 1:      'question': 'cappa',
357: 1:      'valid': true
357: 1:    },
357: 1:    {
357: 1:      'answer': 'false',
357: 1:      'question': 'moOn',
357: 1:      'valid': true
357: 1:    },
357: 1:    {
357: 1:      'answer': 'true',
357: 1:      'question': '',
357: 1:      'valid': true
357: 1:    },
357: 1:    {
357: 1:      'answer': 'true',
357: 1:      'question': 'Ambidextrously',
357: 1:      'valid': true
357: 1:    },
357: 1:    {
357: 1:      'answer': 'false',
357: 1:      'question': 'Aqueducts',
357: 1:      'valid': true
357: 1:    },
357: 1:    {
357: 1:      'answer': 'false',
357: 1:      'question': 'Bilabial',
357: 1:      'valid': true
357: 1:    },
357: 1:    {
357: 1:      'answer': 'false',
357: 1:      'question': 'Caramelized',
357: 1:      'valid': true
357: 1:    },
357: 1:    {
357: 1:      'answer': 'true',
357: 1:      'question': 'Conjugated',
357: 1:      'valid': true
357: 1:    },
357: 1:    {
357: 1:      'answer': 'false',
357: 1:      'question': 'Denouement',
357: 1:      'valid': true
357: 1:    },
357: 1:    {
357: 1:      'answer': 'false',
357: 1:      'question': 'Disinfectant',
357: 1:      'valid': true
357: 1:    },
357: 1:    {
357: 1:      'answer': 'false',
357: 1:      'question': 'Embezzler',
357: 1:      'valid': true
357: 1:    },
357: 1:    {
357: 1:      'answer': 'false',
357: 1:      'question': 'Enzymology',
357: 1:      'valid': true
357: 1:    },
357: 1:    {
357: 1:      'answer': 'true',
357: 1:      'question': 'Fluoride',
357: 1:      'valid': true
357: 1:    },
357: 1:    {
357: 1:      'answer': 'false',
357: 1:      'question': 'Glycogen',
357: 1:      'valid': true
357: 1:    },
357: 1:    {
357: 1:      'answer': 'false',
357: 1:      'question': 'Humidity',
357: 1:      'valid': true
357: 1:    },
357: 1:    {
357: 1:      'answer': 'true',
357: 1:      'question': 'Juxtapose',
357: 1:      'valid': true
357: 1:    },
357: 1:    {
357: 1:      'answer': 'true',
357: 1:      'question': 'Kilobytes',
357: 1:      'valid': true
357: 1:    },
357: 1:    {
357: 1:      'answer': 'false',
357: 1:      'question': 'Locomotive',
357: 1:      'valid': true
357: 1:    }
357: 1:  ],
357: 1:  'info': [
357: 1:    '✅f(Dermatoglyphics) = true',
357: 1:    '✅f(cappa) = false',
357: 1:    '✅f(moOn) = false',
357: 1:    '✅f() = true',
357: 1:    '✅f(Ambidextrously) = true',
357: 1:    '✅f(Aqueducts) = false',
357: 1:    '✅f(Bilabial) = false',
357: 1:    '✅f(Caramelized) = false',
357: 1:    '✅f(Conjugated) = true',
357: 1:    '✅f(Denouement) = false',
357: 1:    '✅f(Disinfectant) = false',
357: 1:    '✅f(Embezzler) = false',
357: 1:    '✅f(Enzymology) = false',
357: 1:    '✅f(Fluoride) = true',
357: 1:    '✅f(Glycogen) = false',
357: 1:    '✅f(Humidity) = false',
357: 1:    '✅f(Juxtapose) = true',
357: 1:    '✅f(Kilobytes) = true',
357: 1:    '✅f(Locomotive) = false',
357: 1:    '❌f(Monolithic) = ??? != false'
357: 1:  ],
357: 1:  'level': 12,
357: 1:  'nextQuestion': 'Monolithic',
357: 1:  'questions': [
357: 1:    'Dermatoglyphics',
357: 1:    'cappa',
357: 1:    'moOn',
357: 1:    '',
357: 1:    'Ambidextrously',
357: 1:    'Aqueducts',
357: 1:    'Bilabial',
357: 1:    'Caramelized',
357: 1:    'Conjugated',
357: 1:    'Denouement',
357: 1:    'Disinfectant',
357: 1:    'Embezzler',
357: 1:    'Enzymology',
357: 1:    'Fluoride',
357: 1:    'Glycogen',
357: 1:    'Humidity',
357: 1:    'Juxtapose',
357: 1:    'Kilobytes',
357: 1:    'Locomotive',
357: 1:    'Monolithic'
357: 1:  ]
357: 1:}
357: 1:Scores: 15898
357: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false']')
357: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
358: 1:BoardData {
358: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
358: 1:  'expectedAnswer': 'false',
358: 1:  'history': [
358: 1:    {
358: 1:      'answer': 'true',
358: 1:      'question': 'Dermatoglyphics',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': 'false',
358: 1:      'question': 'cappa',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': 'false',
358: 1:      'question': 'moOn',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': 'true',
358: 1:      'question': '',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': 'true',
358: 1:      'question': 'Ambidextrously',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': 'false',
358: 1:      'question': 'Aqueducts',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': 'false',
358: 1:      'question': 'Bilabial',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': 'false',
358: 1:      'question': 'Caramelized',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': 'true',
358: 1:      'question': 'Conjugated',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': 'false',
358: 1:      'question': 'Denouement',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': 'false',
358: 1:      'question': 'Disinfectant',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': 'false',
358: 1:      'question': 'Embezzler',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': 'false',
358: 1:      'question': 'Enzymology',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': 'true',
358: 1:      'question': 'Fluoride',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': 'false',
358: 1:      'question': 'Glycogen',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': 'false',
358: 1:      'question': 'Humidity',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': 'true',
358: 1:      'question': 'Juxtapose',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': 'true',
358: 1:      'question': 'Kilobytes',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': 'false',
358: 1:      'question': 'Locomotive',
358: 1:      'valid': true
358: 1:    },
358: 1:    {
358: 1:      'answer': 'false',
358: 1:      'question': 'Monolithic',
358: 1:      'valid': true
358: 1:    }
358: 1:  ],
358: 1:  'info': [
358: 1:    '✅f(Dermatoglyphics) = true',
358: 1:    '✅f(cappa) = false',
358: 1:    '✅f(moOn) = false',
358: 1:    '✅f() = true',
358: 1:    '✅f(Ambidextrously) = true',
358: 1:    '✅f(Aqueducts) = false',
358: 1:    '✅f(Bilabial) = false',
358: 1:    '✅f(Caramelized) = false',
358: 1:    '✅f(Conjugated) = true',
358: 1:    '✅f(Denouement) = false',
358: 1:    '✅f(Disinfectant) = false',
358: 1:    '✅f(Embezzler) = false',
358: 1:    '✅f(Enzymology) = false',
358: 1:    '✅f(Fluoride) = true',
358: 1:    '✅f(Glycogen) = false',
358: 1:    '✅f(Humidity) = false',
358: 1:    '✅f(Juxtapose) = true',
358: 1:    '✅f(Kilobytes) = true',
358: 1:    '✅f(Locomotive) = false',
358: 1:    '✅f(Monolithic) = false',
358: 1:    '❌f(Nauseously) = ??? != false'
358: 1:  ],
358: 1:  'level': 12,
358: 1:  'nextQuestion': 'Nauseously',
358: 1:  'questions': [
358: 1:    'Dermatoglyphics',
358: 1:    'cappa',
358: 1:    'moOn',
358: 1:    '',
358: 1:    'Ambidextrously',
358: 1:    'Aqueducts',
358: 1:    'Bilabial',
358: 1:    'Caramelized',
358: 1:    'Conjugated',
358: 1:    'Denouement',
358: 1:    'Disinfectant',
358: 1:    'Embezzler',
358: 1:    'Enzymology',
358: 1:    'Fluoride',
358: 1:    'Glycogen',
358: 1:    'Humidity',
358: 1:    'Juxtapose',
358: 1:    'Kilobytes',
358: 1:    'Locomotive',
358: 1:    'Monolithic',
358: 1:    'Nauseously'
358: 1:  ]
358: 1:}
358: 1:Scores: 15902
358: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'false']')
358: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
359: 1:BoardData {
359: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
359: 1:  'expectedAnswer': 'false',
359: 1:  'history': [
359: 1:    {
359: 1:      'answer': 'true',
359: 1:      'question': 'Dermatoglyphics',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': 'false',
359: 1:      'question': 'cappa',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': 'false',
359: 1:      'question': 'moOn',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': 'true',
359: 1:      'question': '',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': 'true',
359: 1:      'question': 'Ambidextrously',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': 'false',
359: 1:      'question': 'Aqueducts',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': 'false',
359: 1:      'question': 'Bilabial',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': 'false',
359: 1:      'question': 'Caramelized',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': 'true',
359: 1:      'question': 'Conjugated',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': 'false',
359: 1:      'question': 'Denouement',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': 'false',
359: 1:      'question': 'Disinfectant',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': 'false',
359: 1:      'question': 'Embezzler',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': 'false',
359: 1:      'question': 'Enzymology',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': 'true',
359: 1:      'question': 'Fluoride',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': 'false',
359: 1:      'question': 'Glycogen',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': 'false',
359: 1:      'question': 'Humidity',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': 'true',
359: 1:      'question': 'Juxtapose',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': 'true',
359: 1:      'question': 'Kilobytes',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': 'false',
359: 1:      'question': 'Locomotive',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': 'false',
359: 1:      'question': 'Monolithic',
359: 1:      'valid': true
359: 1:    },
359: 1:    {
359: 1:      'answer': 'false',
359: 1:      'question': 'Nauseously',
359: 1:      'valid': true
359: 1:    }
359: 1:  ],
359: 1:  'info': [
359: 1:    '✅f(Dermatoglyphics) = true',
359: 1:    '✅f(cappa) = false',
359: 1:    '✅f(moOn) = false',
359: 1:    '✅f() = true',
359: 1:    '✅f(Ambidextrously) = true',
359: 1:    '✅f(Aqueducts) = false',
359: 1:    '✅f(Bilabial) = false',
359: 1:    '✅f(Caramelized) = false',
359: 1:    '✅f(Conjugated) = true',
359: 1:    '✅f(Denouement) = false',
359: 1:    '✅f(Disinfectant) = false',
359: 1:    '✅f(Embezzler) = false',
359: 1:    '✅f(Enzymology) = false',
359: 1:    '✅f(Fluoride) = true',
359: 1:    '✅f(Glycogen) = false',
359: 1:    '✅f(Humidity) = false',
359: 1:    '✅f(Juxtapose) = true',
359: 1:    '✅f(Kilobytes) = true',
359: 1:    '✅f(Locomotive) = false',
359: 1:    '✅f(Monolithic) = false',
359: 1:    '✅f(Nauseously) = false',
359: 1:    '❌f(Oblongata) = ??? != false'
359: 1:  ],
359: 1:  'level': 12,
359: 1:  'nextQuestion': 'Oblongata',
359: 1:  'questions': [
359: 1:    'Dermatoglyphics',
359: 1:    'cappa',
359: 1:    'moOn',
359: 1:    '',
359: 1:    'Ambidextrously',
359: 1:    'Aqueducts',
359: 1:    'Bilabial',
359: 1:    'Caramelized',
359: 1:    'Conjugated',
359: 1:    'Denouement',
359: 1:    'Disinfectant',
359: 1:    'Embezzler',
359: 1:    'Enzymology',
359: 1:    'Fluoride',
359: 1:    'Glycogen',
359: 1:    'Humidity',
359: 1:    'Juxtapose',
359: 1:    'Kilobytes',
359: 1:    'Locomotive',
359: 1:    'Monolithic',
359: 1:    'Nauseously',
359: 1:    'Oblongata'
359: 1:  ]
359: 1:}
359: 1:Scores: 15906
359: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'false']')
359: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
360: 1:BoardData {
360: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
360: 1:  'expectedAnswer': 'false',
360: 1:  'history': [
360: 1:    {
360: 1:      'answer': 'true',
360: 1:      'question': 'Dermatoglyphics',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': 'false',
360: 1:      'question': 'cappa',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': 'false',
360: 1:      'question': 'moOn',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': 'true',
360: 1:      'question': '',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': 'true',
360: 1:      'question': 'Ambidextrously',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': 'false',
360: 1:      'question': 'Aqueducts',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': 'false',
360: 1:      'question': 'Bilabial',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': 'false',
360: 1:      'question': 'Caramelized',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': 'true',
360: 1:      'question': 'Conjugated',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': 'false',
360: 1:      'question': 'Denouement',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': 'false',
360: 1:      'question': 'Disinfectant',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': 'false',
360: 1:      'question': 'Embezzler',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': 'false',
360: 1:      'question': 'Enzymology',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': 'true',
360: 1:      'question': 'Fluoride',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': 'false',
360: 1:      'question': 'Glycogen',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': 'false',
360: 1:      'question': 'Humidity',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': 'true',
360: 1:      'question': 'Juxtapose',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': 'true',
360: 1:      'question': 'Kilobytes',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': 'false',
360: 1:      'question': 'Locomotive',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': 'false',
360: 1:      'question': 'Monolithic',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': 'false',
360: 1:      'question': 'Nauseously',
360: 1:      'valid': true
360: 1:    },
360: 1:    {
360: 1:      'answer': 'false',
360: 1:      'question': 'Oblongata',
360: 1:      'valid': true
360: 1:    }
360: 1:  ],
360: 1:  'info': [
360: 1:    '✅f(Dermatoglyphics) = true',
360: 1:    '✅f(cappa) = false',
360: 1:    '✅f(moOn) = false',
360: 1:    '✅f() = true',
360: 1:    '✅f(Ambidextrously) = true',
360: 1:    '✅f(Aqueducts) = false',
360: 1:    '✅f(Bilabial) = false',
360: 1:    '✅f(Caramelized) = false',
360: 1:    '✅f(Conjugated) = true',
360: 1:    '✅f(Denouement) = false',
360: 1:    '✅f(Disinfectant) = false',
360: 1:    '✅f(Embezzler) = false',
360: 1:    '✅f(Enzymology) = false',
360: 1:    '✅f(Fluoride) = true',
360: 1:    '✅f(Glycogen) = false',
360: 1:    '✅f(Humidity) = false',
360: 1:    '✅f(Juxtapose) = true',
360: 1:    '✅f(Kilobytes) = true',
360: 1:    '✅f(Locomotive) = false',
360: 1:    '✅f(Monolithic) = false',
360: 1:    '✅f(Nauseously) = false',
360: 1:    '✅f(Oblongata) = false',
360: 1:    '❌f(Permeable) = ??? != false'
360: 1:  ],
360: 1:  'level': 12,
360: 1:  'nextQuestion': 'Permeable',
360: 1:  'questions': [
360: 1:    'Dermatoglyphics',
360: 1:    'cappa',
360: 1:    'moOn',
360: 1:    '',
360: 1:    'Ambidextrously',
360: 1:    'Aqueducts',
360: 1:    'Bilabial',
360: 1:    'Caramelized',
360: 1:    'Conjugated',
360: 1:    'Denouement',
360: 1:    'Disinfectant',
360: 1:    'Embezzler',
360: 1:    'Enzymology',
360: 1:    'Fluoride',
360: 1:    'Glycogen',
360: 1:    'Humidity',
360: 1:    'Juxtapose',
360: 1:    'Kilobytes',
360: 1:    'Locomotive',
360: 1:    'Monolithic',
360: 1:    'Nauseously',
360: 1:    'Oblongata',
360: 1:    'Permeable'
360: 1:  ]
360: 1:}
360: 1:Scores: 15910
360: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'false', 'false']')
360: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
361: 1:BoardData {
361: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
361: 1:  'expectedAnswer': 'false',
361: 1:  'history': [
361: 1:    {
361: 1:      'answer': 'true',
361: 1:      'question': 'Dermatoglyphics',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': 'false',
361: 1:      'question': 'cappa',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': 'false',
361: 1:      'question': 'moOn',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': 'true',
361: 1:      'question': '',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': 'true',
361: 1:      'question': 'Ambidextrously',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': 'false',
361: 1:      'question': 'Aqueducts',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': 'false',
361: 1:      'question': 'Bilabial',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': 'false',
361: 1:      'question': 'Caramelized',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': 'true',
361: 1:      'question': 'Conjugated',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': 'false',
361: 1:      'question': 'Denouement',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': 'false',
361: 1:      'question': 'Disinfectant',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': 'false',
361: 1:      'question': 'Embezzler',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': 'false',
361: 1:      'question': 'Enzymology',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': 'true',
361: 1:      'question': 'Fluoride',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': 'false',
361: 1:      'question': 'Glycogen',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': 'false',
361: 1:      'question': 'Humidity',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': 'true',
361: 1:      'question': 'Juxtapose',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': 'true',
361: 1:      'question': 'Kilobytes',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': 'false',
361: 1:      'question': 'Locomotive',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': 'false',
361: 1:      'question': 'Monolithic',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': 'false',
361: 1:      'question': 'Nauseously',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': 'false',
361: 1:      'question': 'Oblongata',
361: 1:      'valid': true
361: 1:    },
361: 1:    {
361: 1:      'answer': 'false',
361: 1:      'question': 'Permeable',
361: 1:      'valid': true
361: 1:    }
361: 1:  ],
361: 1:  'info': [
361: 1:    '✅f(Dermatoglyphics) = true',
361: 1:    '✅f(cappa) = false',
361: 1:    '✅f(moOn) = false',
361: 1:    '✅f() = true',
361: 1:    '✅f(Ambidextrously) = true',
361: 1:    '✅f(Aqueducts) = false',
361: 1:    '✅f(Bilabial) = false',
361: 1:    '✅f(Caramelized) = false',
361: 1:    '✅f(Conjugated) = true',
361: 1:    '✅f(Denouement) = false',
361: 1:    '✅f(Disinfectant) = false',
361: 1:    '✅f(Embezzler) = false',
361: 1:    '✅f(Enzymology) = false',
361: 1:    '✅f(Fluoride) = true',
361: 1:    '✅f(Glycogen) = false',
361: 1:    '✅f(Humidity) = false',
361: 1:    '✅f(Juxtapose) = true',
361: 1:    '✅f(Kilobytes) = true',
361: 1:    '✅f(Locomotive) = false',
361: 1:    '✅f(Monolithic) = false',
361: 1:    '✅f(Nauseously) = false',
361: 1:    '✅f(Oblongata) = false',
361: 1:    '✅f(Permeable) = false',
361: 1:    '❌f(Quizzical) = ??? != false'
361: 1:  ],
361: 1:  'level': 12,
361: 1:  'nextQuestion': 'Quizzical',
361: 1:  'questions': [
361: 1:    'Dermatoglyphics',
361: 1:    'cappa',
361: 1:    'moOn',
361: 1:    '',
361: 1:    'Ambidextrously',
361: 1:    'Aqueducts',
361: 1:    'Bilabial',
361: 1:    'Caramelized',
361: 1:    'Conjugated',
361: 1:    'Denouement',
361: 1:    'Disinfectant',
361: 1:    'Embezzler',
361: 1:    'Enzymology',
361: 1:    'Fluoride',
361: 1:    'Glycogen',
361: 1:    'Humidity',
361: 1:    'Juxtapose',
361: 1:    'Kilobytes',
361: 1:    'Locomotive',
361: 1:    'Monolithic',
361: 1:    'Nauseously',
361: 1:    'Oblongata',
361: 1:    'Permeable',
361: 1:    'Quizzical'
361: 1:  ]
361: 1:}
361: 1:Scores: 15914
361: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'false', 'false', 'false']')
361: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
362: 1:BoardData {
362: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
362: 1:  'expectedAnswer': 'false',
362: 1:  'history': [
362: 1:    {
362: 1:      'answer': 'true',
362: 1:      'question': 'Dermatoglyphics',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': 'false',
362: 1:      'question': 'cappa',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': 'false',
362: 1:      'question': 'moOn',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': 'true',
362: 1:      'question': '',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': 'true',
362: 1:      'question': 'Ambidextrously',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': 'false',
362: 1:      'question': 'Aqueducts',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': 'false',
362: 1:      'question': 'Bilabial',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': 'false',
362: 1:      'question': 'Caramelized',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': 'true',
362: 1:      'question': 'Conjugated',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': 'false',
362: 1:      'question': 'Denouement',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': 'false',
362: 1:      'question': 'Disinfectant',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': 'false',
362: 1:      'question': 'Embezzler',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': 'false',
362: 1:      'question': 'Enzymology',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': 'true',
362: 1:      'question': 'Fluoride',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': 'false',
362: 1:      'question': 'Glycogen',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': 'false',
362: 1:      'question': 'Humidity',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': 'true',
362: 1:      'question': 'Juxtapose',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': 'true',
362: 1:      'question': 'Kilobytes',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': 'false',
362: 1:      'question': 'Locomotive',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': 'false',
362: 1:      'question': 'Monolithic',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': 'false',
362: 1:      'question': 'Nauseously',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': 'false',
362: 1:      'question': 'Oblongata',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': 'false',
362: 1:      'question': 'Permeable',
362: 1:      'valid': true
362: 1:    },
362: 1:    {
362: 1:      'answer': 'false',
362: 1:      'question': 'Quizzical',
362: 1:      'valid': true
362: 1:    }
362: 1:  ],
362: 1:  'info': [
362: 1:    '✅f(Dermatoglyphics) = true',
362: 1:    '✅f(cappa) = false',
362: 1:    '✅f(moOn) = false',
362: 1:    '✅f() = true',
362: 1:    '✅f(Ambidextrously) = true',
362: 1:    '✅f(Aqueducts) = false',
362: 1:    '✅f(Bilabial) = false',
362: 1:    '✅f(Caramelized) = false',
362: 1:    '✅f(Conjugated) = true',
362: 1:    '✅f(Denouement) = false',
362: 1:    '✅f(Disinfectant) = false',
362: 1:    '✅f(Embezzler) = false',
362: 1:    '✅f(Enzymology) = false',
362: 1:    '✅f(Fluoride) = true',
362: 1:    '✅f(Glycogen) = false',
362: 1:    '✅f(Humidity) = false',
362: 1:    '✅f(Juxtapose) = true',
362: 1:    '✅f(Kilobytes) = true',
362: 1:    '✅f(Locomotive) = false',
362: 1:    '✅f(Monolithic) = false',
362: 1:    '✅f(Nauseously) = false',
362: 1:    '✅f(Oblongata) = false',
362: 1:    '✅f(Permeable) = false',
362: 1:    '✅f(Quizzical) = false',
362: 1:    '❌f(Rhinoceros) = ??? != false'
362: 1:  ],
362: 1:  'level': 12,
362: 1:  'nextQuestion': 'Rhinoceros',
362: 1:  'questions': [
362: 1:    'Dermatoglyphics',
362: 1:    'cappa',
362: 1:    'moOn',
362: 1:    '',
362: 1:    'Ambidextrously',
362: 1:    'Aqueducts',
362: 1:    'Bilabial',
362: 1:    'Caramelized',
362: 1:    'Conjugated',
362: 1:    'Denouement',
362: 1:    'Disinfectant',
362: 1:    'Embezzler',
362: 1:    'Enzymology',
362: 1:    'Fluoride',
362: 1:    'Glycogen',
362: 1:    'Humidity',
362: 1:    'Juxtapose',
362: 1:    'Kilobytes',
362: 1:    'Locomotive',
362: 1:    'Monolithic',
362: 1:    'Nauseously',
362: 1:    'Oblongata',
362: 1:    'Permeable',
362: 1:    'Quizzical',
362: 1:    'Rhinoceros'
362: 1:  ]
362: 1:}
362: 1:Scores: 15918
362: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false']')
362: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
363: 1:BoardData {
363: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
363: 1:  'expectedAnswer': 'false',
363: 1:  'history': [
363: 1:    {
363: 1:      'answer': 'true',
363: 1:      'question': 'Dermatoglyphics',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'false',
363: 1:      'question': 'cappa',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'false',
363: 1:      'question': 'moOn',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'true',
363: 1:      'question': '',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'true',
363: 1:      'question': 'Ambidextrously',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'false',
363: 1:      'question': 'Aqueducts',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'false',
363: 1:      'question': 'Bilabial',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'false',
363: 1:      'question': 'Caramelized',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'true',
363: 1:      'question': 'Conjugated',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'false',
363: 1:      'question': 'Denouement',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'false',
363: 1:      'question': 'Disinfectant',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'false',
363: 1:      'question': 'Embezzler',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'false',
363: 1:      'question': 'Enzymology',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'true',
363: 1:      'question': 'Fluoride',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'false',
363: 1:      'question': 'Glycogen',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'false',
363: 1:      'question': 'Humidity',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'true',
363: 1:      'question': 'Juxtapose',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'true',
363: 1:      'question': 'Kilobytes',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'false',
363: 1:      'question': 'Locomotive',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'false',
363: 1:      'question': 'Monolithic',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'false',
363: 1:      'question': 'Nauseously',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'false',
363: 1:      'question': 'Oblongata',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'false',
363: 1:      'question': 'Permeable',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'false',
363: 1:      'question': 'Quizzical',
363: 1:      'valid': true
363: 1:    },
363: 1:    {
363: 1:      'answer': 'false',
363: 1:      'question': 'Rhinoceros',
363: 1:      'valid': true
363: 1:    }
363: 1:  ],
363: 1:  'info': [
363: 1:    '✅f(Dermatoglyphics) = true',
363: 1:    '✅f(cappa) = false',
363: 1:    '✅f(moOn) = false',
363: 1:    '✅f() = true',
363: 1:    '✅f(Ambidextrously) = true',
363: 1:    '✅f(Aqueducts) = false',
363: 1:    '✅f(Bilabial) = false',
363: 1:    '✅f(Caramelized) = false',
363: 1:    '✅f(Conjugated) = true',
363: 1:    '✅f(Denouement) = false',
363: 1:    '✅f(Disinfectant) = false',
363: 1:    '✅f(Embezzler) = false',
363: 1:    '✅f(Enzymology) = false',
363: 1:    '✅f(Fluoride) = true',
363: 1:    '✅f(Glycogen) = false',
363: 1:    '✅f(Humidity) = false',
363: 1:    '✅f(Juxtapose) = true',
363: 1:    '✅f(Kilobytes) = true',
363: 1:    '✅f(Locomotive) = false',
363: 1:    '✅f(Monolithic) = false',
363: 1:    '✅f(Nauseously) = false',
363: 1:    '✅f(Oblongata) = false',
363: 1:    '✅f(Permeable) = false',
363: 1:    '✅f(Quizzical) = false',
363: 1:    '✅f(Rhinoceros) = false',
363: 1:    '❌f(Sequences) = ??? != false'
363: 1:  ],
363: 1:  'level': 12,
363: 1:  'nextQuestion': 'Sequences',
363: 1:  'questions': [
363: 1:    'Dermatoglyphics',
363: 1:    'cappa',
363: 1:    'moOn',
363: 1:    '',
363: 1:    'Ambidextrously',
363: 1:    'Aqueducts',
363: 1:    'Bilabial',
363: 1:    'Caramelized',
363: 1:    'Conjugated',
363: 1:    'Denouement',
363: 1:    'Disinfectant',
363: 1:    'Embezzler',
363: 1:    'Enzymology',
363: 1:    'Fluoride',
363: 1:    'Glycogen',
363: 1:    'Humidity',
363: 1:    'Juxtapose',
363: 1:    'Kilobytes',
363: 1:    'Locomotive',
363: 1:    'Monolithic',
363: 1:    'Nauseously',
363: 1:    'Oblongata',
363: 1:    'Permeable',
363: 1:    'Quizzical',
363: 1:    'Rhinoceros',
363: 1:    'Sequences'
363: 1:  ]
363: 1:}
363: 1:Scores: 15922
363: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false']')
363: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
364: 1:BoardData {
364: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
364: 1:  'expectedAnswer': 'false',
364: 1:  'history': [
364: 1:    {
364: 1:      'answer': 'true',
364: 1:      'question': 'Dermatoglyphics',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'false',
364: 1:      'question': 'cappa',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'false',
364: 1:      'question': 'moOn',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'true',
364: 1:      'question': '',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'true',
364: 1:      'question': 'Ambidextrously',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'false',
364: 1:      'question': 'Aqueducts',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'false',
364: 1:      'question': 'Bilabial',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'false',
364: 1:      'question': 'Caramelized',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'true',
364: 1:      'question': 'Conjugated',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'false',
364: 1:      'question': 'Denouement',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'false',
364: 1:      'question': 'Disinfectant',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'false',
364: 1:      'question': 'Embezzler',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'false',
364: 1:      'question': 'Enzymology',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'true',
364: 1:      'question': 'Fluoride',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'false',
364: 1:      'question': 'Glycogen',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'false',
364: 1:      'question': 'Humidity',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'true',
364: 1:      'question': 'Juxtapose',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'true',
364: 1:      'question': 'Kilobytes',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'false',
364: 1:      'question': 'Locomotive',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'false',
364: 1:      'question': 'Monolithic',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'false',
364: 1:      'question': 'Nauseously',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'false',
364: 1:      'question': 'Oblongata',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'false',
364: 1:      'question': 'Permeable',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'false',
364: 1:      'question': 'Quizzical',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'false',
364: 1:      'question': 'Rhinoceros',
364: 1:      'valid': true
364: 1:    },
364: 1:    {
364: 1:      'answer': 'false',
364: 1:      'question': 'Sequences',
364: 1:      'valid': true
364: 1:    }
364: 1:  ],
364: 1:  'info': [
364: 1:    '✅f(Dermatoglyphics) = true',
364: 1:    '✅f(cappa) = false',
364: 1:    '✅f(moOn) = false',
364: 1:    '✅f() = true',
364: 1:    '✅f(Ambidextrously) = true',
364: 1:    '✅f(Aqueducts) = false',
364: 1:    '✅f(Bilabial) = false',
364: 1:    '✅f(Caramelized) = false',
364: 1:    '✅f(Conjugated) = true',
364: 1:    '✅f(Denouement) = false',
364: 1:    '✅f(Disinfectant) = false',
364: 1:    '✅f(Embezzler) = false',
364: 1:    '✅f(Enzymology) = false',
364: 1:    '✅f(Fluoride) = true',
364: 1:    '✅f(Glycogen) = false',
364: 1:    '✅f(Humidity) = false',
364: 1:    '✅f(Juxtapose) = true',
364: 1:    '✅f(Kilobytes) = true',
364: 1:    '✅f(Locomotive) = false',
364: 1:    '✅f(Monolithic) = false',
364: 1:    '✅f(Nauseously) = false',
364: 1:    '✅f(Oblongata) = false',
364: 1:    '✅f(Permeable) = false',
364: 1:    '✅f(Quizzical) = false',
364: 1:    '✅f(Rhinoceros) = false',
364: 1:    '✅f(Sequences) = false',
364: 1:    '❌f(Symmetrical) = ??? != false'
364: 1:  ],
364: 1:  'level': 12,
364: 1:  'nextQuestion': 'Symmetrical',
364: 1:  'questions': [
364: 1:    'Dermatoglyphics',
364: 1:    'cappa',
364: 1:    'moOn',
364: 1:    '',
364: 1:    'Ambidextrously',
364: 1:    'Aqueducts',
364: 1:    'Bilabial',
364: 1:    'Caramelized',
364: 1:    'Conjugated',
364: 1:    'Denouement',
364: 1:    'Disinfectant',
364: 1:    'Embezzler',
364: 1:    'Enzymology',
364: 1:    'Fluoride',
364: 1:    'Glycogen',
364: 1:    'Humidity',
364: 1:    'Juxtapose',
364: 1:    'Kilobytes',
364: 1:    'Locomotive',
364: 1:    'Monolithic',
364: 1:    'Nauseously',
364: 1:    'Oblongata',
364: 1:    'Permeable',
364: 1:    'Quizzical',
364: 1:    'Rhinoceros',
364: 1:    'Sequences',
364: 1:    'Symmetrical'
364: 1:  ]
364: 1:}
364: 1:Scores: 15926
364: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false']')
364: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
365: 1:BoardData {
365: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
365: 1:  'expectedAnswer': 'false',
365: 1:  'history': [
365: 1:    {
365: 1:      'answer': 'true',
365: 1:      'question': 'Dermatoglyphics',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'false',
365: 1:      'question': 'cappa',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'false',
365: 1:      'question': 'moOn',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'true',
365: 1:      'question': '',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'true',
365: 1:      'question': 'Ambidextrously',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'false',
365: 1:      'question': 'Aqueducts',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'false',
365: 1:      'question': 'Bilabial',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'false',
365: 1:      'question': 'Caramelized',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'true',
365: 1:      'question': 'Conjugated',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'false',
365: 1:      'question': 'Denouement',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'false',
365: 1:      'question': 'Disinfectant',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'false',
365: 1:      'question': 'Embezzler',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'false',
365: 1:      'question': 'Enzymology',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'true',
365: 1:      'question': 'Fluoride',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'false',
365: 1:      'question': 'Glycogen',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'false',
365: 1:      'question': 'Humidity',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'true',
365: 1:      'question': 'Juxtapose',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'true',
365: 1:      'question': 'Kilobytes',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'false',
365: 1:      'question': 'Locomotive',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'false',
365: 1:      'question': 'Monolithic',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'false',
365: 1:      'question': 'Nauseously',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'false',
365: 1:      'question': 'Oblongata',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'false',
365: 1:      'question': 'Permeable',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'false',
365: 1:      'question': 'Quizzical',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'false',
365: 1:      'question': 'Rhinoceros',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'false',
365: 1:      'question': 'Sequences',
365: 1:      'valid': true
365: 1:    },
365: 1:    {
365: 1:      'answer': 'false',
365: 1:      'question': 'Symmetrical',
365: 1:      'valid': true
365: 1:    }
365: 1:  ],
365: 1:  'info': [
365: 1:    '✅f(Dermatoglyphics) = true',
365: 1:    '✅f(cappa) = false',
365: 1:    '✅f(moOn) = false',
365: 1:    '✅f() = true',
365: 1:    '✅f(Ambidextrously) = true',
365: 1:    '✅f(Aqueducts) = false',
365: 1:    '✅f(Bilabial) = false',
365: 1:    '✅f(Caramelized) = false',
365: 1:    '✅f(Conjugated) = true',
365: 1:    '✅f(Denouement) = false',
365: 1:    '✅f(Disinfectant) = false',
365: 1:    '✅f(Embezzler) = false',
365: 1:    '✅f(Enzymology) = false',
365: 1:    '✅f(Fluoride) = true',
365: 1:    '✅f(Glycogen) = false',
365: 1:    '✅f(Humidity) = false',
365: 1:    '✅f(Juxtapose) = true',
365: 1:    '✅f(Kilobytes) = true',
365: 1:    '✅f(Locomotive) = false',
365: 1:    '✅f(Monolithic) = false',
365: 1:    '✅f(Nauseously) = false',
365: 1:    '✅f(Oblongata) = false',
365: 1:    '✅f(Permeable) = false',
365: 1:    '✅f(Quizzical) = false',
365: 1:    '✅f(Rhinoceros) = false',
365: 1:    '✅f(Sequences) = false',
365: 1:    '✅f(Symmetrical) = false',
365: 1:    '❌f(Tesseract) = ??? != false'
365: 1:  ],
365: 1:  'level': 12,
365: 1:  'nextQuestion': 'Tesseract',
365: 1:  'questions': [
365: 1:    'Dermatoglyphics',
365: 1:    'cappa',
365: 1:    'moOn',
365: 1:    '',
365: 1:    'Ambidextrously',
365: 1:    'Aqueducts',
365: 1:    'Bilabial',
365: 1:    'Caramelized',
365: 1:    'Conjugated',
365: 1:    'Denouement',
365: 1:    'Disinfectant',
365: 1:    'Embezzler',
365: 1:    'Enzymology',
365: 1:    'Fluoride',
365: 1:    'Glycogen',
365: 1:    'Humidity',
365: 1:    'Juxtapose',
365: 1:    'Kilobytes',
365: 1:    'Locomotive',
365: 1:    'Monolithic',
365: 1:    'Nauseously',
365: 1:    'Oblongata',
365: 1:    'Permeable',
365: 1:    'Quizzical',
365: 1:    'Rhinoceros',
365: 1:    'Sequences',
365: 1:    'Symmetrical',
365: 1:    'Tesseract'
365: 1:  ]
365: 1:}
365: 1:Scores: 15930
365: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false']')
365: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
366: 1:BoardData {
366: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
366: 1:  'expectedAnswer': 'false',
366: 1:  'history': [
366: 1:    {
366: 1:      'answer': 'true',
366: 1:      'question': 'Dermatoglyphics',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'false',
366: 1:      'question': 'cappa',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'false',
366: 1:      'question': 'moOn',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'true',
366: 1:      'question': '',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'true',
366: 1:      'question': 'Ambidextrously',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'false',
366: 1:      'question': 'Aqueducts',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'false',
366: 1:      'question': 'Bilabial',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'false',
366: 1:      'question': 'Caramelized',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'true',
366: 1:      'question': 'Conjugated',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'false',
366: 1:      'question': 'Denouement',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'false',
366: 1:      'question': 'Disinfectant',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'false',
366: 1:      'question': 'Embezzler',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'false',
366: 1:      'question': 'Enzymology',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'true',
366: 1:      'question': 'Fluoride',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'false',
366: 1:      'question': 'Glycogen',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'false',
366: 1:      'question': 'Humidity',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'true',
366: 1:      'question': 'Juxtapose',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'true',
366: 1:      'question': 'Kilobytes',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'false',
366: 1:      'question': 'Locomotive',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'false',
366: 1:      'question': 'Monolithic',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'false',
366: 1:      'question': 'Nauseously',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'false',
366: 1:      'question': 'Oblongata',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'false',
366: 1:      'question': 'Permeable',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'false',
366: 1:      'question': 'Quizzical',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'false',
366: 1:      'question': 'Rhinoceros',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'false',
366: 1:      'question': 'Sequences',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'false',
366: 1:      'question': 'Symmetrical',
366: 1:      'valid': true
366: 1:    },
366: 1:    {
366: 1:      'answer': 'false',
366: 1:      'question': 'Tesseract',
366: 1:      'valid': true
366: 1:    }
366: 1:  ],
366: 1:  'info': [
366: 1:    '✅f(Dermatoglyphics) = true',
366: 1:    '✅f(cappa) = false',
366: 1:    '✅f(moOn) = false',
366: 1:    '✅f() = true',
366: 1:    '✅f(Ambidextrously) = true',
366: 1:    '✅f(Aqueducts) = false',
366: 1:    '✅f(Bilabial) = false',
366: 1:    '✅f(Caramelized) = false',
366: 1:    '✅f(Conjugated) = true',
366: 1:    '✅f(Denouement) = false',
366: 1:    '✅f(Disinfectant) = false',
366: 1:    '✅f(Embezzler) = false',
366: 1:    '✅f(Enzymology) = false',
366: 1:    '✅f(Fluoride) = true',
366: 1:    '✅f(Glycogen) = false',
366: 1:    '✅f(Humidity) = false',
366: 1:    '✅f(Juxtapose) = true',
366: 1:    '✅f(Kilobytes) = true',
366: 1:    '✅f(Locomotive) = false',
366: 1:    '✅f(Monolithic) = false',
366: 1:    '✅f(Nauseously) = false',
366: 1:    '✅f(Oblongata) = false',
366: 1:    '✅f(Permeable) = false',
366: 1:    '✅f(Quizzical) = false',
366: 1:    '✅f(Rhinoceros) = false',
366: 1:    '✅f(Sequences) = false',
366: 1:    '✅f(Symmetrical) = false',
366: 1:    '✅f(Tesseract) = false',
366: 1:    '❌f(Unconquered) = ??? != false'
366: 1:  ],
366: 1:  'level': 12,
366: 1:  'nextQuestion': 'Unconquered',
366: 1:  'questions': [
366: 1:    'Dermatoglyphics',
366: 1:    'cappa',
366: 1:    'moOn',
366: 1:    '',
366: 1:    'Ambidextrously',
366: 1:    'Aqueducts',
366: 1:    'Bilabial',
366: 1:    'Caramelized',
366: 1:    'Conjugated',
366: 1:    'Denouement',
366: 1:    'Disinfectant',
366: 1:    'Embezzler',
366: 1:    'Enzymology',
366: 1:    'Fluoride',
366: 1:    'Glycogen',
366: 1:    'Humidity',
366: 1:    'Juxtapose',
366: 1:    'Kilobytes',
366: 1:    'Locomotive',
366: 1:    'Monolithic',
366: 1:    'Nauseously',
366: 1:    'Oblongata',
366: 1:    'Permeable',
366: 1:    'Quizzical',
366: 1:    'Rhinoceros',
366: 1:    'Sequences',
366: 1:    'Symmetrical',
366: 1:    'Tesseract',
366: 1:    'Unconquered'
366: 1:  ]
366: 1:}
366: 1:Scores: 15934
366: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false']')
366: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
367: 1:BoardData {
367: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
367: 1:  'expectedAnswer': 'false',
367: 1:  'history': [
367: 1:    {
367: 1:      'answer': 'true',
367: 1:      'question': 'Dermatoglyphics',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'false',
367: 1:      'question': 'cappa',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'false',
367: 1:      'question': 'moOn',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'true',
367: 1:      'question': '',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'true',
367: 1:      'question': 'Ambidextrously',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'false',
367: 1:      'question': 'Aqueducts',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'false',
367: 1:      'question': 'Bilabial',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'false',
367: 1:      'question': 'Caramelized',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'true',
367: 1:      'question': 'Conjugated',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'false',
367: 1:      'question': 'Denouement',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'false',
367: 1:      'question': 'Disinfectant',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'false',
367: 1:      'question': 'Embezzler',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'false',
367: 1:      'question': 'Enzymology',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'true',
367: 1:      'question': 'Fluoride',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'false',
367: 1:      'question': 'Glycogen',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'false',
367: 1:      'question': 'Humidity',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'true',
367: 1:      'question': 'Juxtapose',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'true',
367: 1:      'question': 'Kilobytes',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'false',
367: 1:      'question': 'Locomotive',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'false',
367: 1:      'question': 'Monolithic',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'false',
367: 1:      'question': 'Nauseously',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'false',
367: 1:      'question': 'Oblongata',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'false',
367: 1:      'question': 'Permeable',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'false',
367: 1:      'question': 'Quizzical',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'false',
367: 1:      'question': 'Rhinoceros',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'false',
367: 1:      'question': 'Sequences',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'false',
367: 1:      'question': 'Symmetrical',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'false',
367: 1:      'question': 'Tesseract',
367: 1:      'valid': true
367: 1:    },
367: 1:    {
367: 1:      'answer': 'false',
367: 1:      'question': 'Unconquered',
367: 1:      'valid': true
367: 1:    }
367: 1:  ],
367: 1:  'info': [
367: 1:    '✅f(Dermatoglyphics) = true',
367: 1:    '✅f(cappa) = false',
367: 1:    '✅f(moOn) = false',
367: 1:    '✅f() = true',
367: 1:    '✅f(Ambidextrously) = true',
367: 1:    '✅f(Aqueducts) = false',
367: 1:    '✅f(Bilabial) = false',
367: 1:    '✅f(Caramelized) = false',
367: 1:    '✅f(Conjugated) = true',
367: 1:    '✅f(Denouement) = false',
367: 1:    '✅f(Disinfectant) = false',
367: 1:    '✅f(Embezzler) = false',
367: 1:    '✅f(Enzymology) = false',
367: 1:    '✅f(Fluoride) = true',
367: 1:    '✅f(Glycogen) = false',
367: 1:    '✅f(Humidity) = false',
367: 1:    '✅f(Juxtapose) = true',
367: 1:    '✅f(Kilobytes) = true',
367: 1:    '✅f(Locomotive) = false',
367: 1:    '✅f(Monolithic) = false',
367: 1:    '✅f(Nauseously) = false',
367: 1:    '✅f(Oblongata) = false',
367: 1:    '✅f(Permeable) = false',
367: 1:    '✅f(Quizzical) = false',
367: 1:    '✅f(Rhinoceros) = false',
367: 1:    '✅f(Sequences) = false',
367: 1:    '✅f(Symmetrical) = false',
367: 1:    '✅f(Tesseract) = false',
367: 1:    '✅f(Unconquered) = false',
367: 1:    '❌f(Ventriloquism) = ??? != false'
367: 1:  ],
367: 1:  'level': 12,
367: 1:  'nextQuestion': 'Ventriloquism',
367: 1:  'questions': [
367: 1:    'Dermatoglyphics',
367: 1:    'cappa',
367: 1:    'moOn',
367: 1:    '',
367: 1:    'Ambidextrously',
367: 1:    'Aqueducts',
367: 1:    'Bilabial',
367: 1:    'Caramelized',
367: 1:    'Conjugated',
367: 1:    'Denouement',
367: 1:    'Disinfectant',
367: 1:    'Embezzler',
367: 1:    'Enzymology',
367: 1:    'Fluoride',
367: 1:    'Glycogen',
367: 1:    'Humidity',
367: 1:    'Juxtapose',
367: 1:    'Kilobytes',
367: 1:    'Locomotive',
367: 1:    'Monolithic',
367: 1:    'Nauseously',
367: 1:    'Oblongata',
367: 1:    'Permeable',
367: 1:    'Quizzical',
367: 1:    'Rhinoceros',
367: 1:    'Sequences',
367: 1:    'Symmetrical',
367: 1:    'Tesseract',
367: 1:    'Unconquered',
367: 1:    'Ventriloquism'
367: 1:  ]
367: 1:}
367: 1:Scores: 15938
367: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false']')
367: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
368: 1:BoardData {
368: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
368: 1:  'expectedAnswer': 'false',
368: 1:  'history': [
368: 1:    {
368: 1:      'answer': 'true',
368: 1:      'question': 'Dermatoglyphics',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'false',
368: 1:      'question': 'cappa',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'false',
368: 1:      'question': 'moOn',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'true',
368: 1:      'question': '',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'true',
368: 1:      'question': 'Ambidextrously',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'false',
368: 1:      'question': 'Aqueducts',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'false',
368: 1:      'question': 'Bilabial',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'false',
368: 1:      'question': 'Caramelized',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'true',
368: 1:      'question': 'Conjugated',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'false',
368: 1:      'question': 'Denouement',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'false',
368: 1:      'question': 'Disinfectant',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'false',
368: 1:      'question': 'Embezzler',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'false',
368: 1:      'question': 'Enzymology',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'true',
368: 1:      'question': 'Fluoride',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'false',
368: 1:      'question': 'Glycogen',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'false',
368: 1:      'question': 'Humidity',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'true',
368: 1:      'question': 'Juxtapose',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'true',
368: 1:      'question': 'Kilobytes',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'false',
368: 1:      'question': 'Locomotive',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'false',
368: 1:      'question': 'Monolithic',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'false',
368: 1:      'question': 'Nauseously',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'false',
368: 1:      'question': 'Oblongata',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'false',
368: 1:      'question': 'Permeable',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'false',
368: 1:      'question': 'Quizzical',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'false',
368: 1:      'question': 'Rhinoceros',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'false',
368: 1:      'question': 'Sequences',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'false',
368: 1:      'question': 'Symmetrical',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'false',
368: 1:      'question': 'Tesseract',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'false',
368: 1:      'question': 'Unconquered',
368: 1:      'valid': true
368: 1:    },
368: 1:    {
368: 1:      'answer': 'false',
368: 1:      'question': 'Ventriloquism',
368: 1:      'valid': true
368: 1:    }
368: 1:  ],
368: 1:  'info': [
368: 1:    '✅f(Dermatoglyphics) = true',
368: 1:    '✅f(cappa) = false',
368: 1:    '✅f(moOn) = false',
368: 1:    '✅f() = true',
368: 1:    '✅f(Ambidextrously) = true',
368: 1:    '✅f(Aqueducts) = false',
368: 1:    '✅f(Bilabial) = false',
368: 1:    '✅f(Caramelized) = false',
368: 1:    '✅f(Conjugated) = true',
368: 1:    '✅f(Denouement) = false',
368: 1:    '✅f(Disinfectant) = false',
368: 1:    '✅f(Embezzler) = false',
368: 1:    '✅f(Enzymology) = false',
368: 1:    '✅f(Fluoride) = true',
368: 1:    '✅f(Glycogen) = false',
368: 1:    '✅f(Humidity) = false',
368: 1:    '✅f(Juxtapose) = true',
368: 1:    '✅f(Kilobytes) = true',
368: 1:    '✅f(Locomotive) = false',
368: 1:    '✅f(Monolithic) = false',
368: 1:    '✅f(Nauseously) = false',
368: 1:    '✅f(Oblongata) = false',
368: 1:    '✅f(Permeable) = false',
368: 1:    '✅f(Quizzical) = false',
368: 1:    '✅f(Rhinoceros) = false',
368: 1:    '✅f(Sequences) = false',
368: 1:    '✅f(Symmetrical) = false',
368: 1:    '✅f(Tesseract) = false',
368: 1:    '✅f(Unconquered) = false',
368: 1:    '✅f(Ventriloquism) = false',
368: 1:    '❌f(Xenophobia) = ??? != false'
368: 1:  ],
368: 1:  'level': 12,
368: 1:  'nextQuestion': 'Xenophobia',
368: 1:  'questions': [
368: 1:    'Dermatoglyphics',
368: 1:    'cappa',
368: 1:    'moOn',
368: 1:    '',
368: 1:    'Ambidextrously',
368: 1:    'Aqueducts',
368: 1:    'Bilabial',
368: 1:    'Caramelized',
368: 1:    'Conjugated',
368: 1:    'Denouement',
368: 1:    'Disinfectant',
368: 1:    'Embezzler',
368: 1:    'Enzymology',
368: 1:    'Fluoride',
368: 1:    'Glycogen',
368: 1:    'Humidity',
368: 1:    'Juxtapose',
368: 1:    'Kilobytes',
368: 1:    'Locomotive',
368: 1:    'Monolithic',
368: 1:    'Nauseously',
368: 1:    'Oblongata',
368: 1:    'Permeable',
368: 1:    'Quizzical',
368: 1:    'Rhinoceros',
368: 1:    'Sequences',
368: 1:    'Symmetrical',
368: 1:    'Tesseract',
368: 1:    'Unconquered',
368: 1:    'Ventriloquism',
368: 1:    'Xenophobia'
368: 1:  ]
368: 1:}
368: 1:Scores: 15942
368: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false']')
368: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
369: 1:BoardData {
369: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
369: 1:  'expectedAnswer': 'false',
369: 1:  'history': [
369: 1:    {
369: 1:      'answer': 'true',
369: 1:      'question': 'Dermatoglyphics',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'false',
369: 1:      'question': 'cappa',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'false',
369: 1:      'question': 'moOn',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'true',
369: 1:      'question': '',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'true',
369: 1:      'question': 'Ambidextrously',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'false',
369: 1:      'question': 'Aqueducts',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'false',
369: 1:      'question': 'Bilabial',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'false',
369: 1:      'question': 'Caramelized',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'true',
369: 1:      'question': 'Conjugated',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'false',
369: 1:      'question': 'Denouement',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'false',
369: 1:      'question': 'Disinfectant',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'false',
369: 1:      'question': 'Embezzler',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'false',
369: 1:      'question': 'Enzymology',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'true',
369: 1:      'question': 'Fluoride',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'false',
369: 1:      'question': 'Glycogen',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'false',
369: 1:      'question': 'Humidity',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'true',
369: 1:      'question': 'Juxtapose',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'true',
369: 1:      'question': 'Kilobytes',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'false',
369: 1:      'question': 'Locomotive',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'false',
369: 1:      'question': 'Monolithic',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'false',
369: 1:      'question': 'Nauseously',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'false',
369: 1:      'question': 'Oblongata',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'false',
369: 1:      'question': 'Permeable',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'false',
369: 1:      'question': 'Quizzical',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'false',
369: 1:      'question': 'Rhinoceros',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'false',
369: 1:      'question': 'Sequences',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'false',
369: 1:      'question': 'Symmetrical',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'false',
369: 1:      'question': 'Tesseract',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'false',
369: 1:      'question': 'Unconquered',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'false',
369: 1:      'question': 'Ventriloquism',
369: 1:      'valid': true
369: 1:    },
369: 1:    {
369: 1:      'answer': 'false',
369: 1:      'question': 'Xenophobia',
369: 1:      'valid': true
369: 1:    }
369: 1:  ],
369: 1:  'info': [
369: 1:    '✅f(Dermatoglyphics) = true',
369: 1:    '✅f(cappa) = false',
369: 1:    '✅f(moOn) = false',
369: 1:    '✅f() = true',
369: 1:    '✅f(Ambidextrously) = true',
369: 1:    '✅f(Aqueducts) = false',
369: 1:    '✅f(Bilabial) = false',
369: 1:    '✅f(Caramelized) = false',
369: 1:    '✅f(Conjugated) = true',
369: 1:    '✅f(Denouement) = false',
369: 1:    '✅f(Disinfectant) = false',
369: 1:    '✅f(Embezzler) = false',
369: 1:    '✅f(Enzymology) = false',
369: 1:    '✅f(Fluoride) = true',
369: 1:    '✅f(Glycogen) = false',
369: 1:    '✅f(Humidity) = false',
369: 1:    '✅f(Juxtapose) = true',
369: 1:    '✅f(Kilobytes) = true',
369: 1:    '✅f(Locomotive) = false',
369: 1:    '✅f(Monolithic) = false',
369: 1:    '✅f(Nauseously) = false',
369: 1:    '✅f(Oblongata) = false',
369: 1:    '✅f(Permeable) = false',
369: 1:    '✅f(Quizzical) = false',
369: 1:    '✅f(Rhinoceros) = false',
369: 1:    '✅f(Sequences) = false',
369: 1:    '✅f(Symmetrical) = false',
369: 1:    '✅f(Tesseract) = false',
369: 1:    '✅f(Unconquered) = false',
369: 1:    '✅f(Ventriloquism) = false',
369: 1:    '✅f(Xenophobia) = false',
369: 1:    '❌f(Yellowish) = ??? != false'
369: 1:  ],
369: 1:  'level': 12,
369: 1:  'nextQuestion': 'Yellowish',
369: 1:  'questions': [
369: 1:    'Dermatoglyphics',
369: 1:    'cappa',
369: 1:    'moOn',
369: 1:    '',
369: 1:    'Ambidextrously',
369: 1:    'Aqueducts',
369: 1:    'Bilabial',
369: 1:    'Caramelized',
369: 1:    'Conjugated',
369: 1:    'Denouement',
369: 1:    'Disinfectant',
369: 1:    'Embezzler',
369: 1:    'Enzymology',
369: 1:    'Fluoride',
369: 1:    'Glycogen',
369: 1:    'Humidity',
369: 1:    'Juxtapose',
369: 1:    'Kilobytes',
369: 1:    'Locomotive',
369: 1:    'Monolithic',
369: 1:    'Nauseously',
369: 1:    'Oblongata',
369: 1:    'Permeable',
369: 1:    'Quizzical',
369: 1:    'Rhinoceros',
369: 1:    'Sequences',
369: 1:    'Symmetrical',
369: 1:    'Tesseract',
369: 1:    'Unconquered',
369: 1:    'Ventriloquism',
369: 1:    'Xenophobia',
369: 1:    'Yellowish'
369: 1:  ]
369: 1:}
369: 1:Scores: 15946
369: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false']')
369: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
370: 1:BoardData {
370: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
370: 1:  'expectedAnswer': 'true',
370: 1:  'history': [
370: 1:    {
370: 1:      'answer': 'true',
370: 1:      'question': 'Dermatoglyphics',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'false',
370: 1:      'question': 'cappa',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'false',
370: 1:      'question': 'moOn',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'true',
370: 1:      'question': '',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'true',
370: 1:      'question': 'Ambidextrously',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'false',
370: 1:      'question': 'Aqueducts',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'false',
370: 1:      'question': 'Bilabial',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'false',
370: 1:      'question': 'Caramelized',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'true',
370: 1:      'question': 'Conjugated',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'false',
370: 1:      'question': 'Denouement',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'false',
370: 1:      'question': 'Disinfectant',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'false',
370: 1:      'question': 'Embezzler',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'false',
370: 1:      'question': 'Enzymology',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'true',
370: 1:      'question': 'Fluoride',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'false',
370: 1:      'question': 'Glycogen',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'false',
370: 1:      'question': 'Humidity',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'true',
370: 1:      'question': 'Juxtapose',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'true',
370: 1:      'question': 'Kilobytes',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'false',
370: 1:      'question': 'Locomotive',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'false',
370: 1:      'question': 'Monolithic',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'false',
370: 1:      'question': 'Nauseously',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'false',
370: 1:      'question': 'Oblongata',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'false',
370: 1:      'question': 'Permeable',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'false',
370: 1:      'question': 'Quizzical',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'false',
370: 1:      'question': 'Rhinoceros',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'false',
370: 1:      'question': 'Sequences',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'false',
370: 1:      'question': 'Symmetrical',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'false',
370: 1:      'question': 'Tesseract',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'false',
370: 1:      'question': 'Unconquered',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'false',
370: 1:      'question': 'Ventriloquism',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'false',
370: 1:      'question': 'Xenophobia',
370: 1:      'valid': true
370: 1:    },
370: 1:    {
370: 1:      'answer': 'false',
370: 1:      'question': 'Yellowish',
370: 1:      'valid': true
370: 1:    }
370: 1:  ],
370: 1:  'info': [
370: 1:    '✅f(Dermatoglyphics) = true',
370: 1:    '✅f(cappa) = false',
370: 1:    '✅f(moOn) = false',
370: 1:    '✅f() = true',
370: 1:    '✅f(Ambidextrously) = true',
370: 1:    '✅f(Aqueducts) = false',
370: 1:    '✅f(Bilabial) = false',
370: 1:    '✅f(Caramelized) = false',
370: 1:    '✅f(Conjugated) = true',
370: 1:    '✅f(Denouement) = false',
370: 1:    '✅f(Disinfectant) = false',
370: 1:    '✅f(Embezzler) = false',
370: 1:    '✅f(Enzymology) = false',
370: 1:    '✅f(Fluoride) = true',
370: 1:    '✅f(Glycogen) = false',
370: 1:    '✅f(Humidity) = false',
370: 1:    '✅f(Juxtapose) = true',
370: 1:    '✅f(Kilobytes) = true',
370: 1:    '✅f(Locomotive) = false',
370: 1:    '✅f(Monolithic) = false',
370: 1:    '✅f(Nauseously) = false',
370: 1:    '✅f(Oblongata) = false',
370: 1:    '✅f(Permeable) = false',
370: 1:    '✅f(Quizzical) = false',
370: 1:    '✅f(Rhinoceros) = false',
370: 1:    '✅f(Sequences) = false',
370: 1:    '✅f(Symmetrical) = false',
370: 1:    '✅f(Tesseract) = false',
370: 1:    '✅f(Unconquered) = false',
370: 1:    '✅f(Ventriloquism) = false',
370: 1:    '✅f(Xenophobia) = false',
370: 1:    '✅f(Yellowish) = false',
370: 1:    '❌f(Zamboni) = ??? != true'
370: 1:  ],
370: 1:  'level': 12,
370: 1:  'nextQuestion': 'Zamboni',
370: 1:  'questions': [
370: 1:    'Dermatoglyphics',
370: 1:    'cappa',
370: 1:    'moOn',
370: 1:    '',
370: 1:    'Ambidextrously',
370: 1:    'Aqueducts',
370: 1:    'Bilabial',
370: 1:    'Caramelized',
370: 1:    'Conjugated',
370: 1:    'Denouement',
370: 1:    'Disinfectant',
370: 1:    'Embezzler',
370: 1:    'Enzymology',
370: 1:    'Fluoride',
370: 1:    'Glycogen',
370: 1:    'Humidity',
370: 1:    'Juxtapose',
370: 1:    'Kilobytes',
370: 1:    'Locomotive',
370: 1:    'Monolithic',
370: 1:    'Nauseously',
370: 1:    'Oblongata',
370: 1:    'Permeable',
370: 1:    'Quizzical',
370: 1:    'Rhinoceros',
370: 1:    'Sequences',
370: 1:    'Symmetrical',
370: 1:    'Tesseract',
370: 1:    'Unconquered',
370: 1:    'Ventriloquism',
370: 1:    'Xenophobia',
370: 1:    'Yellowish',
370: 1:    'Zamboni'
370: 1:  ]
370: 1:}
370: 1:Scores: 15950
370: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true']')
370: 1:Fire Event: PassTest{complexity=16, testCount=34}
------------------------------------------
371: 1:BoardData {
371: 1:  'description': ['An isogram is a word that has no repeating letters, consecutive or non-consecutive.\nImplement a function that determines whether a string that contains only letters is an isogram.\nAssume the empty string is an isogram. Ignore letter case.\nConjugated=>true\ncappa=>false\nmoOn=>false'],
371: 1:  'expectedAnswer': 'true',
371: 1:  'history': [
371: 1:    {
371: 1:      'answer': 'true',
371: 1:      'question': 'Dermatoglyphics',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'false',
371: 1:      'question': 'cappa',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'false',
371: 1:      'question': 'moOn',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'true',
371: 1:      'question': '',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'true',
371: 1:      'question': 'Ambidextrously',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'false',
371: 1:      'question': 'Aqueducts',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'false',
371: 1:      'question': 'Bilabial',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'false',
371: 1:      'question': 'Caramelized',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'true',
371: 1:      'question': 'Conjugated',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'false',
371: 1:      'question': 'Denouement',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'false',
371: 1:      'question': 'Disinfectant',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'false',
371: 1:      'question': 'Embezzler',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'false',
371: 1:      'question': 'Enzymology',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'true',
371: 1:      'question': 'Fluoride',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'false',
371: 1:      'question': 'Glycogen',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'false',
371: 1:      'question': 'Humidity',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'true',
371: 1:      'question': 'Juxtapose',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'true',
371: 1:      'question': 'Kilobytes',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'false',
371: 1:      'question': 'Locomotive',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'false',
371: 1:      'question': 'Monolithic',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'false',
371: 1:      'question': 'Nauseously',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'false',
371: 1:      'question': 'Oblongata',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'false',
371: 1:      'question': 'Permeable',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'false',
371: 1:      'question': 'Quizzical',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'false',
371: 1:      'question': 'Rhinoceros',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'false',
371: 1:      'question': 'Sequences',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'false',
371: 1:      'question': 'Symmetrical',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'false',
371: 1:      'question': 'Tesseract',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'false',
371: 1:      'question': 'Unconquered',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'false',
371: 1:      'question': 'Ventriloquism',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'false',
371: 1:      'question': 'Xenophobia',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'false',
371: 1:      'question': 'Yellowish',
371: 1:      'valid': true
371: 1:    },
371: 1:    {
371: 1:      'answer': 'true',
371: 1:      'question': 'Zamboni',
371: 1:      'valid': true
371: 1:    }
371: 1:  ],
371: 1:  'info': [
371: 1:    '✅f(Dermatoglyphics) = true',
371: 1:    '✅f(cappa) = false',
371: 1:    '✅f(moOn) = false',
371: 1:    '✅f() = true',
371: 1:    '✅f(Ambidextrously) = true',
371: 1:    '✅f(Aqueducts) = false',
371: 1:    '✅f(Bilabial) = false',
371: 1:    '✅f(Caramelized) = false',
371: 1:    '✅f(Conjugated) = true',
371: 1:    '✅f(Denouement) = false',
371: 1:    '✅f(Disinfectant) = false',
371: 1:    '✅f(Embezzler) = false',
371: 1:    '✅f(Enzymology) = false',
371: 1:    '✅f(Fluoride) = true',
371: 1:    '✅f(Glycogen) = false',
371: 1:    '✅f(Humidity) = false',
371: 1:    '✅f(Juxtapose) = true',
371: 1:    '✅f(Kilobytes) = true',
371: 1:    '✅f(Locomotive) = false',
371: 1:    '✅f(Monolithic) = false',
371: 1:    '✅f(Nauseously) = false',
371: 1:    '✅f(Oblongata) = false',
371: 1:    '✅f(Permeable) = false',
371: 1:    '✅f(Quizzical) = false',
371: 1:    '✅f(Rhinoceros) = false',
371: 1:    '✅f(Sequences) = false',
371: 1:    '✅f(Symmetrical) = false',
371: 1:    '✅f(Tesseract) = false',
371: 1:    '✅f(Unconquered) = false',
371: 1:    '✅f(Ventriloquism) = false',
371: 1:    '✅f(Xenophobia) = false',
371: 1:    '✅f(Yellowish) = false',
371: 1:    '✅f(Zamboni) = true',
371: 1:    '❌f(Zygotes) = ??? != true'
371: 1:  ],
371: 1:  'level': 12,
371: 1:  'nextQuestion': 'Zygotes',
371: 1:  'questions': [
371: 1:    'Dermatoglyphics',
371: 1:    'cappa',
371: 1:    'moOn',
371: 1:    '',
371: 1:    'Ambidextrously',
371: 1:    'Aqueducts',
371: 1:    'Bilabial',
371: 1:    'Caramelized',
371: 1:    'Conjugated',
371: 1:    'Denouement',
371: 1:    'Disinfectant',
371: 1:    'Embezzler',
371: 1:    'Enzymology',
371: 1:    'Fluoride',
371: 1:    'Glycogen',
371: 1:    'Humidity',
371: 1:    'Juxtapose',
371: 1:    'Kilobytes',
371: 1:    'Locomotive',
371: 1:    'Monolithic',
371: 1:    'Nauseously',
371: 1:    'Oblongata',
371: 1:    'Permeable',
371: 1:    'Quizzical',
371: 1:    'Rhinoceros',
371: 1:    'Sequences',
371: 1:    'Symmetrical',
371: 1:    'Tesseract',
371: 1:    'Unconquered',
371: 1:    'Ventriloquism',
371: 1:    'Xenophobia',
371: 1:    'Yellowish',
371: 1:    'Zamboni',
371: 1:    'Zygotes'
371: 1:  ]
371: 1:}
371: 1:Scores: 15954
371: 1:Answer: message('['true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'false', 'true', 'true']')
371: 1:Fire Event: PassTest{complexity=16, testCount=34}
371: 1:Fire Event: NextAlgorithm{complexity=16, time=0}
------------------------------------------
372: 1:BoardData {
372: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
372: 1:  'history': [
372: 1:    {
372: 1:      'answer': 'true',
372: 1:      'question': 'Dermatoglyphics',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'false',
372: 1:      'question': 'cappa',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'false',
372: 1:      'question': 'moOn',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'true',
372: 1:      'question': '',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'true',
372: 1:      'question': 'Ambidextrously',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'false',
372: 1:      'question': 'Aqueducts',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'false',
372: 1:      'question': 'Bilabial',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'false',
372: 1:      'question': 'Caramelized',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'true',
372: 1:      'question': 'Conjugated',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'false',
372: 1:      'question': 'Denouement',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'false',
372: 1:      'question': 'Disinfectant',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'false',
372: 1:      'question': 'Embezzler',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'false',
372: 1:      'question': 'Enzymology',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'true',
372: 1:      'question': 'Fluoride',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'false',
372: 1:      'question': 'Glycogen',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'false',
372: 1:      'question': 'Humidity',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'true',
372: 1:      'question': 'Juxtapose',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'true',
372: 1:      'question': 'Kilobytes',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'false',
372: 1:      'question': 'Locomotive',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'false',
372: 1:      'question': 'Monolithic',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'false',
372: 1:      'question': 'Nauseously',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'false',
372: 1:      'question': 'Oblongata',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'false',
372: 1:      'question': 'Permeable',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'false',
372: 1:      'question': 'Quizzical',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'false',
372: 1:      'question': 'Rhinoceros',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'false',
372: 1:      'question': 'Sequences',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'false',
372: 1:      'question': 'Symmetrical',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'false',
372: 1:      'question': 'Tesseract',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'false',
372: 1:      'question': 'Unconquered',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'false',
372: 1:      'question': 'Ventriloquism',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'false',
372: 1:      'question': 'Xenophobia',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'false',
372: 1:      'question': 'Yellowish',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'true',
372: 1:      'question': 'Zamboni',
372: 1:      'valid': true
372: 1:    },
372: 1:    {
372: 1:      'answer': 'true',
372: 1:      'question': 'Zygotes',
372: 1:      'valid': true
372: 1:    }
372: 1:  ],
372: 1:  'info': [
372: 1:    '✅f(Dermatoglyphics) = true',
372: 1:    '✅f(cappa) = false',
372: 1:    '✅f(moOn) = false',
372: 1:    '✅f() = true',
372: 1:    '✅f(Ambidextrously) = true',
372: 1:    '✅f(Aqueducts) = false',
372: 1:    '✅f(Bilabial) = false',
372: 1:    '✅f(Caramelized) = false',
372: 1:    '✅f(Conjugated) = true',
372: 1:    '✅f(Denouement) = false',
372: 1:    '✅f(Disinfectant) = false',
372: 1:    '✅f(Embezzler) = false',
372: 1:    '✅f(Enzymology) = false',
372: 1:    '✅f(Fluoride) = true',
372: 1:    '✅f(Glycogen) = false',
372: 1:    '✅f(Humidity) = false',
372: 1:    '✅f(Juxtapose) = true',
372: 1:    '✅f(Kilobytes) = true',
372: 1:    '✅f(Locomotive) = false',
372: 1:    '✅f(Monolithic) = false',
372: 1:    '✅f(Nauseously) = false',
372: 1:    '✅f(Oblongata) = false',
372: 1:    '✅f(Permeable) = false',
372: 1:    '✅f(Quizzical) = false',
372: 1:    '✅f(Rhinoceros) = false',
372: 1:    '✅f(Sequences) = false',
372: 1:    '✅f(Symmetrical) = false',
372: 1:    '✅f(Tesseract) = false',
372: 1:    '✅f(Unconquered) = false',
372: 1:    '✅f(Ventriloquism) = false',
372: 1:    '✅f(Xenophobia) = false',
372: 1:    '✅f(Yellowish) = false',
372: 1:    '✅f(Zamboni) = true',
372: 1:    '✅f(Zygotes) = true'
372: 1:  ],
372: 1:  'level': 12,
372: 1:  'questions': []
372: 1:}
372: 1:Scores: 18117
372: 1:Answer: message('StartNextLevel')
372: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
373: 1:BoardData {
373: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
373: 1:  'expectedAnswer': '40',
373: 1:  'history': [],
373: 1:  'info': ['❌f(1) = ??? != 40'],
373: 1:  'level': 13,
373: 1:  'nextQuestion': '1',
373: 1:  'questions': ['1']
373: 1:}
373: 1:Scores: 18117
373: 1:Answer: message('['40']')
373: 1:Fire Event: PassTest{complexity=17, testCount=19}
------------------------------------------
374: 1:BoardData {
374: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
374: 1:  'expectedAnswer': '80',
374: 1:  'history': [{
374: 1:    'answer': '40',
374: 1:    'question': '1',
374: 1:    'valid': true
374: 1:  }],
374: 1:  'info': [
374: 1:    '✅f(1) = 40',
374: 1:    '❌f(2) = ??? != 80'
374: 1:  ],
374: 1:  'level': 13,
374: 1:  'nextQuestion': '2',
374: 1:  'questions': [
374: 1:    '1',
374: 1:    '2'
374: 1:  ]
374: 1:}
374: 1:Scores: 18125
374: 1:Answer: message('['40', '80']')
374: 1:Fire Event: PassTest{complexity=17, testCount=19}
------------------------------------------
375: 1:BoardData {
375: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
375: 1:  'expectedAnswer': '100',
375: 1:  'history': [
375: 1:    {
375: 1:      'answer': '40',
375: 1:      'question': '1',
375: 1:      'valid': true
375: 1:    },
375: 1:    {
375: 1:      'answer': '80',
375: 1:      'question': '2',
375: 1:      'valid': true
375: 1:    }
375: 1:  ],
375: 1:  'info': [
375: 1:    '✅f(1) = 40',
375: 1:    '✅f(2) = 80',
375: 1:    '❌f(3) = ??? != 100'
375: 1:  ],
375: 1:  'level': 13,
375: 1:  'nextQuestion': '3',
375: 1:  'questions': [
375: 1:    '1',
375: 1:    '2',
375: 1:    '3'
375: 1:  ]
375: 1:}
375: 1:Scores: 18133
375: 1:Answer: message('['40', '80', '100']')
375: 1:Fire Event: PassTest{complexity=17, testCount=19}
------------------------------------------
376: 1:BoardData {
376: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
376: 1:  'expectedAnswer': '140',
376: 1:  'history': [
376: 1:    {
376: 1:      'answer': '40',
376: 1:      'question': '1',
376: 1:      'valid': true
376: 1:    },
376: 1:    {
376: 1:      'answer': '80',
376: 1:      'question': '2',
376: 1:      'valid': true
376: 1:    },
376: 1:    {
376: 1:      'answer': '100',
376: 1:      'question': '3',
376: 1:      'valid': true
376: 1:    }
376: 1:  ],
376: 1:  'info': [
376: 1:    '✅f(1) = 40',
376: 1:    '✅f(2) = 80',
376: 1:    '✅f(3) = 100',
376: 1:    '❌f(4) = ??? != 140'
376: 1:  ],
376: 1:  'level': 13,
376: 1:  'nextQuestion': '4',
376: 1:  'questions': [
376: 1:    '1',
376: 1:    '2',
376: 1:    '3',
376: 1:    '4'
376: 1:  ]
376: 1:}
376: 1:Scores: 18141
376: 1:Answer: message('['40', '80', '100', '140']')
376: 1:Fire Event: PassTest{complexity=17, testCount=19}
------------------------------------------
377: 1:BoardData {
377: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
377: 1:  'expectedAnswer': '180',
377: 1:  'history': [
377: 1:    {
377: 1:      'answer': '40',
377: 1:      'question': '1',
377: 1:      'valid': true
377: 1:    },
377: 1:    {
377: 1:      'answer': '80',
377: 1:      'question': '2',
377: 1:      'valid': true
377: 1:    },
377: 1:    {
377: 1:      'answer': '100',
377: 1:      'question': '3',
377: 1:      'valid': true
377: 1:    },
377: 1:    {
377: 1:      'answer': '140',
377: 1:      'question': '4',
377: 1:      'valid': true
377: 1:    }
377: 1:  ],
377: 1:  'info': [
377: 1:    '✅f(1) = 40',
377: 1:    '✅f(2) = 80',
377: 1:    '✅f(3) = 100',
377: 1:    '✅f(4) = 140',
377: 1:    '❌f(5) = ??? != 180'
377: 1:  ],
377: 1:  'level': 13,
377: 1:  'nextQuestion': '5',
377: 1:  'questions': [
377: 1:    '1',
377: 1:    '2',
377: 1:    '3',
377: 1:    '4',
377: 1:    '5'
377: 1:  ]
377: 1:}
377: 1:Scores: 18149
377: 1:Answer: message('['40', '80', '100', '140', '180']')
377: 1:Fire Event: PassTest{complexity=17, testCount=19}
------------------------------------------
378: 1:BoardData {
378: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
378: 1:  'expectedAnswer': '220',
378: 1:  'history': [
378: 1:    {
378: 1:      'answer': '40',
378: 1:      'question': '1',
378: 1:      'valid': true
378: 1:    },
378: 1:    {
378: 1:      'answer': '80',
378: 1:      'question': '2',
378: 1:      'valid': true
378: 1:    },
378: 1:    {
378: 1:      'answer': '100',
378: 1:      'question': '3',
378: 1:      'valid': true
378: 1:    },
378: 1:    {
378: 1:      'answer': '140',
378: 1:      'question': '4',
378: 1:      'valid': true
378: 1:    },
378: 1:    {
378: 1:      'answer': '180',
378: 1:      'question': '5',
378: 1:      'valid': true
378: 1:    }
378: 1:  ],
378: 1:  'info': [
378: 1:    '✅f(1) = 40',
378: 1:    '✅f(2) = 80',
378: 1:    '✅f(3) = 100',
378: 1:    '✅f(4) = 140',
378: 1:    '✅f(5) = 180',
378: 1:    '❌f(6) = ??? != 220'
378: 1:  ],
378: 1:  'level': 13,
378: 1:  'nextQuestion': '6',
378: 1:  'questions': [
378: 1:    '1',
378: 1:    '2',
378: 1:    '3',
378: 1:    '4',
378: 1:    '5',
378: 1:    '6'
378: 1:  ]
378: 1:}
378: 1:Scores: 18157
378: 1:Answer: message('['40', '80', '100', '140', '180', '220']')
378: 1:Fire Event: PassTest{complexity=17, testCount=19}
------------------------------------------
379: 1:BoardData {
379: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
379: 1:  'expectedAnswer': '230',
379: 1:  'history': [
379: 1:    {
379: 1:      'answer': '40',
379: 1:      'question': '1',
379: 1:      'valid': true
379: 1:    },
379: 1:    {
379: 1:      'answer': '80',
379: 1:      'question': '2',
379: 1:      'valid': true
379: 1:    },
379: 1:    {
379: 1:      'answer': '100',
379: 1:      'question': '3',
379: 1:      'valid': true
379: 1:    },
379: 1:    {
379: 1:      'answer': '140',
379: 1:      'question': '4',
379: 1:      'valid': true
379: 1:    },
379: 1:    {
379: 1:      'answer': '180',
379: 1:      'question': '5',
379: 1:      'valid': true
379: 1:    },
379: 1:    {
379: 1:      'answer': '220',
379: 1:      'question': '6',
379: 1:      'valid': true
379: 1:    }
379: 1:  ],
379: 1:  'info': [
379: 1:    '✅f(1) = 40',
379: 1:    '✅f(2) = 80',
379: 1:    '✅f(3) = 100',
379: 1:    '✅f(4) = 140',
379: 1:    '✅f(5) = 180',
379: 1:    '✅f(6) = 220',
379: 1:    '❌f(7) = ??? != 230'
379: 1:  ],
379: 1:  'level': 13,
379: 1:  'nextQuestion': '7',
379: 1:  'questions': [
379: 1:    '1',
379: 1:    '2',
379: 1:    '3',
379: 1:    '4',
379: 1:    '5',
379: 1:    '6',
379: 1:    '7'
379: 1:  ]
379: 1:}
379: 1:Scores: 18165
379: 1:Answer: message('['40', '80', '100', '140', '180', '220', '230']')
379: 1:Fire Event: PassTest{complexity=17, testCount=19}
------------------------------------------
380: 1:BoardData {
380: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
380: 1:  'expectedAnswer': '270',
380: 1:  'history': [
380: 1:    {
380: 1:      'answer': '40',
380: 1:      'question': '1',
380: 1:      'valid': true
380: 1:    },
380: 1:    {
380: 1:      'answer': '80',
380: 1:      'question': '2',
380: 1:      'valid': true
380: 1:    },
380: 1:    {
380: 1:      'answer': '100',
380: 1:      'question': '3',
380: 1:      'valid': true
380: 1:    },
380: 1:    {
380: 1:      'answer': '140',
380: 1:      'question': '4',
380: 1:      'valid': true
380: 1:    },
380: 1:    {
380: 1:      'answer': '180',
380: 1:      'question': '5',
380: 1:      'valid': true
380: 1:    },
380: 1:    {
380: 1:      'answer': '220',
380: 1:      'question': '6',
380: 1:      'valid': true
380: 1:    },
380: 1:    {
380: 1:      'answer': '230',
380: 1:      'question': '7',
380: 1:      'valid': true
380: 1:    }
380: 1:  ],
380: 1:  'info': [
380: 1:    '✅f(1) = 40',
380: 1:    '✅f(2) = 80',
380: 1:    '✅f(3) = 100',
380: 1:    '✅f(4) = 140',
380: 1:    '✅f(5) = 180',
380: 1:    '✅f(6) = 220',
380: 1:    '✅f(7) = 230',
380: 1:    '❌f(8) = ??? != 270'
380: 1:  ],
380: 1:  'level': 13,
380: 1:  'nextQuestion': '8',
380: 1:  'questions': [
380: 1:    '1',
380: 1:    '2',
380: 1:    '3',
380: 1:    '4',
380: 1:    '5',
380: 1:    '6',
380: 1:    '7',
380: 1:    '8'
380: 1:  ]
380: 1:}
380: 1:Scores: 18173
380: 1:Answer: message('['40', '80', '100', '140', '180', '220', '230', '270']')
380: 1:Fire Event: PassTest{complexity=17, testCount=19}
------------------------------------------
381: 1:BoardData {
381: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
381: 1:  'expectedAnswer': '310',
381: 1:  'history': [
381: 1:    {
381: 1:      'answer': '40',
381: 1:      'question': '1',
381: 1:      'valid': true
381: 1:    },
381: 1:    {
381: 1:      'answer': '80',
381: 1:      'question': '2',
381: 1:      'valid': true
381: 1:    },
381: 1:    {
381: 1:      'answer': '100',
381: 1:      'question': '3',
381: 1:      'valid': true
381: 1:    },
381: 1:    {
381: 1:      'answer': '140',
381: 1:      'question': '4',
381: 1:      'valid': true
381: 1:    },
381: 1:    {
381: 1:      'answer': '180',
381: 1:      'question': '5',
381: 1:      'valid': true
381: 1:    },
381: 1:    {
381: 1:      'answer': '220',
381: 1:      'question': '6',
381: 1:      'valid': true
381: 1:    },
381: 1:    {
381: 1:      'answer': '230',
381: 1:      'question': '7',
381: 1:      'valid': true
381: 1:    },
381: 1:    {
381: 1:      'answer': '270',
381: 1:      'question': '8',
381: 1:      'valid': true
381: 1:    }
381: 1:  ],
381: 1:  'info': [
381: 1:    '✅f(1) = 40',
381: 1:    '✅f(2) = 80',
381: 1:    '✅f(3) = 100',
381: 1:    '✅f(4) = 140',
381: 1:    '✅f(5) = 180',
381: 1:    '✅f(6) = 220',
381: 1:    '✅f(7) = 230',
381: 1:    '✅f(8) = 270',
381: 1:    '❌f(9) = ??? != 310'
381: 1:  ],
381: 1:  'level': 13,
381: 1:  'nextQuestion': '9',
381: 1:  'questions': [
381: 1:    '1',
381: 1:    '2',
381: 1:    '3',
381: 1:    '4',
381: 1:    '5',
381: 1:    '6',
381: 1:    '7',
381: 1:    '8',
381: 1:    '9'
381: 1:  ]
381: 1:}
381: 1:Scores: 18181
381: 1:Answer: message('['40', '80', '100', '140', '180', '220', '230', '270', '310']')
381: 1:Fire Event: PassTest{complexity=17, testCount=19}
------------------------------------------
382: 1:BoardData {
382: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
382: 1:  'expectedAnswer': '350',
382: 1:  'history': [
382: 1:    {
382: 1:      'answer': '40',
382: 1:      'question': '1',
382: 1:      'valid': true
382: 1:    },
382: 1:    {
382: 1:      'answer': '80',
382: 1:      'question': '2',
382: 1:      'valid': true
382: 1:    },
382: 1:    {
382: 1:      'answer': '100',
382: 1:      'question': '3',
382: 1:      'valid': true
382: 1:    },
382: 1:    {
382: 1:      'answer': '140',
382: 1:      'question': '4',
382: 1:      'valid': true
382: 1:    },
382: 1:    {
382: 1:      'answer': '180',
382: 1:      'question': '5',
382: 1:      'valid': true
382: 1:    },
382: 1:    {
382: 1:      'answer': '220',
382: 1:      'question': '6',
382: 1:      'valid': true
382: 1:    },
382: 1:    {
382: 1:      'answer': '230',
382: 1:      'question': '7',
382: 1:      'valid': true
382: 1:    },
382: 1:    {
382: 1:      'answer': '270',
382: 1:      'question': '8',
382: 1:      'valid': true
382: 1:    },
382: 1:    {
382: 1:      'answer': '310',
382: 1:      'question': '9',
382: 1:      'valid': true
382: 1:    }
382: 1:  ],
382: 1:  'info': [
382: 1:    '✅f(1) = 40',
382: 1:    '✅f(2) = 80',
382: 1:    '✅f(3) = 100',
382: 1:    '✅f(4) = 140',
382: 1:    '✅f(5) = 180',
382: 1:    '✅f(6) = 220',
382: 1:    '✅f(7) = 230',
382: 1:    '✅f(8) = 270',
382: 1:    '✅f(9) = 310',
382: 1:    '❌f(10) = ??? != 350'
382: 1:  ],
382: 1:  'level': 13,
382: 1:  'nextQuestion': '10',
382: 1:  'questions': [
382: 1:    '1',
382: 1:    '2',
382: 1:    '3',
382: 1:    '4',
382: 1:    '5',
382: 1:    '6',
382: 1:    '7',
382: 1:    '8',
382: 1:    '9',
382: 1:    '10'
382: 1:  ]
382: 1:}
382: 1:Scores: 18189
382: 1:Answer: message('['40', '80', '100', '140', '180', '220', '230', '270', '310', '350']')
382: 1:Fire Event: PassTest{complexity=17, testCount=19}
------------------------------------------
383: 1:BoardData {
383: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
383: 1:  'expectedAnswer': '830',
383: 1:  'history': [
383: 1:    {
383: 1:      'answer': '40',
383: 1:      'question': '1',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': '80',
383: 1:      'question': '2',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': '100',
383: 1:      'question': '3',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': '140',
383: 1:      'question': '4',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': '180',
383: 1:      'question': '5',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': '220',
383: 1:      'question': '6',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': '230',
383: 1:      'question': '7',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': '270',
383: 1:      'question': '8',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': '310',
383: 1:      'question': '9',
383: 1:      'valid': true
383: 1:    },
383: 1:    {
383: 1:      'answer': '350',
383: 1:      'question': '10',
383: 1:      'valid': true
383: 1:    }
383: 1:  ],
383: 1:  'info': [
383: 1:    '✅f(1) = 40',
383: 1:    '✅f(2) = 80',
383: 1:    '✅f(3) = 100',
383: 1:    '✅f(4) = 140',
383: 1:    '✅f(5) = 180',
383: 1:    '✅f(6) = 220',
383: 1:    '✅f(7) = 230',
383: 1:    '✅f(8) = 270',
383: 1:    '✅f(9) = 310',
383: 1:    '✅f(10) = 350',
383: 1:    '❌f(22) = ??? != 830'
383: 1:  ],
383: 1:  'level': 13,
383: 1:  'nextQuestion': '22',
383: 1:  'questions': [
383: 1:    '1',
383: 1:    '2',
383: 1:    '3',
383: 1:    '4',
383: 1:    '5',
383: 1:    '6',
383: 1:    '7',
383: 1:    '8',
383: 1:    '9',
383: 1:    '10',
383: 1:    '22'
383: 1:  ]
383: 1:}
383: 1:Scores: 18197
383: 1:Answer: message('['40', '80', '100', '140', '180', '220', '230', '270', '310', '350', '830']')
383: 1:Fire Event: PassTest{complexity=17, testCount=19}
------------------------------------------
384: 1:BoardData {
384: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
384: 1:  'expectedAnswer': '1270',
384: 1:  'history': [
384: 1:    {
384: 1:      'answer': '40',
384: 1:      'question': '1',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': '80',
384: 1:      'question': '2',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': '100',
384: 1:      'question': '3',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': '140',
384: 1:      'question': '4',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': '180',
384: 1:      'question': '5',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': '220',
384: 1:      'question': '6',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': '230',
384: 1:      'question': '7',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': '270',
384: 1:      'question': '8',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': '310',
384: 1:      'question': '9',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': '350',
384: 1:      'question': '10',
384: 1:      'valid': true
384: 1:    },
384: 1:    {
384: 1:      'answer': '830',
384: 1:      'question': '22',
384: 1:      'valid': true
384: 1:    }
384: 1:  ],
384: 1:  'info': [
384: 1:    '✅f(1) = 40',
384: 1:    '✅f(2) = 80',
384: 1:    '✅f(3) = 100',
384: 1:    '✅f(4) = 140',
384: 1:    '✅f(5) = 180',
384: 1:    '✅f(6) = 220',
384: 1:    '✅f(7) = 230',
384: 1:    '✅f(8) = 270',
384: 1:    '✅f(9) = 310',
384: 1:    '✅f(10) = 350',
384: 1:    '✅f(22) = 830',
384: 1:    '❌f(33) = ??? != 1270'
384: 1:  ],
384: 1:  'level': 13,
384: 1:  'nextQuestion': '33',
384: 1:  'questions': [
384: 1:    '1',
384: 1:    '2',
384: 1:    '3',
384: 1:    '4',
384: 1:    '5',
384: 1:    '6',
384: 1:    '7',
384: 1:    '8',
384: 1:    '9',
384: 1:    '10',
384: 1:    '22',
384: 1:    '33'
384: 1:  ]
384: 1:}
384: 1:Scores: 18205
384: 1:Answer: message('['40', '80', '100', '140', '180', '220', '230', '270', '310', '350', '830', '1270']')
384: 1:Fire Event: PassTest{complexity=17, testCount=19}
------------------------------------------
385: 1:BoardData {
385: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
385: 1:  'expectedAnswer': '1710',
385: 1:  'history': [
385: 1:    {
385: 1:      'answer': '40',
385: 1:      'question': '1',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': '80',
385: 1:      'question': '2',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': '100',
385: 1:      'question': '3',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': '140',
385: 1:      'question': '4',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': '180',
385: 1:      'question': '5',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': '220',
385: 1:      'question': '6',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': '230',
385: 1:      'question': '7',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': '270',
385: 1:      'question': '8',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': '310',
385: 1:      'question': '9',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': '350',
385: 1:      'question': '10',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': '830',
385: 1:      'question': '22',
385: 1:      'valid': true
385: 1:    },
385: 1:    {
385: 1:      'answer': '1270',
385: 1:      'question': '33',
385: 1:      'valid': true
385: 1:    }
385: 1:  ],
385: 1:  'info': [
385: 1:    '✅f(1) = 40',
385: 1:    '✅f(2) = 80',
385: 1:    '✅f(3) = 100',
385: 1:    '✅f(4) = 140',
385: 1:    '✅f(5) = 180',
385: 1:    '✅f(6) = 220',
385: 1:    '✅f(7) = 230',
385: 1:    '✅f(8) = 270',
385: 1:    '✅f(9) = 310',
385: 1:    '✅f(10) = 350',
385: 1:    '✅f(22) = 830',
385: 1:    '✅f(33) = 1270',
385: 1:    '❌f(44) = ??? != 1710'
385: 1:  ],
385: 1:  'level': 13,
385: 1:  'nextQuestion': '44',
385: 1:  'questions': [
385: 1:    '1',
385: 1:    '2',
385: 1:    '3',
385: 1:    '4',
385: 1:    '5',
385: 1:    '6',
385: 1:    '7',
385: 1:    '8',
385: 1:    '9',
385: 1:    '10',
385: 1:    '22',
385: 1:    '33',
385: 1:    '44'
385: 1:  ]
385: 1:}
385: 1:Scores: 18213
385: 1:Answer: message('['40', '80', '100', '140', '180', '220', '230', '270', '310', '350', '830', '1270', '1710']')
385: 1:Fire Event: PassTest{complexity=17, testCount=19}
------------------------------------------
386: 1:BoardData {
386: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
386: 1:  'expectedAnswer': '2150',
386: 1:  'history': [
386: 1:    {
386: 1:      'answer': '40',
386: 1:      'question': '1',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': '80',
386: 1:      'question': '2',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': '100',
386: 1:      'question': '3',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': '140',
386: 1:      'question': '4',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': '180',
386: 1:      'question': '5',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': '220',
386: 1:      'question': '6',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': '230',
386: 1:      'question': '7',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': '270',
386: 1:      'question': '8',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': '310',
386: 1:      'question': '9',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': '350',
386: 1:      'question': '10',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': '830',
386: 1:      'question': '22',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': '1270',
386: 1:      'question': '33',
386: 1:      'valid': true
386: 1:    },
386: 1:    {
386: 1:      'answer': '1710',
386: 1:      'question': '44',
386: 1:      'valid': true
386: 1:    }
386: 1:  ],
386: 1:  'info': [
386: 1:    '✅f(1) = 40',
386: 1:    '✅f(2) = 80',
386: 1:    '✅f(3) = 100',
386: 1:    '✅f(4) = 140',
386: 1:    '✅f(5) = 180',
386: 1:    '✅f(6) = 220',
386: 1:    '✅f(7) = 230',
386: 1:    '✅f(8) = 270',
386: 1:    '✅f(9) = 310',
386: 1:    '✅f(10) = 350',
386: 1:    '✅f(22) = 830',
386: 1:    '✅f(33) = 1270',
386: 1:    '✅f(44) = 1710',
386: 1:    '❌f(55) = ??? != 2150'
386: 1:  ],
386: 1:  'level': 13,
386: 1:  'nextQuestion': '55',
386: 1:  'questions': [
386: 1:    '1',
386: 1:    '2',
386: 1:    '3',
386: 1:    '4',
386: 1:    '5',
386: 1:    '6',
386: 1:    '7',
386: 1:    '8',
386: 1:    '9',
386: 1:    '10',
386: 1:    '22',
386: 1:    '33',
386: 1:    '44',
386: 1:    '55'
386: 1:  ]
386: 1:}
386: 1:Scores: 18221
386: 1:Answer: message('['40', '80', '100', '140', '180', '220', '230', '270', '310', '350', '830', '1270', '1710', '2150']')
386: 1:Fire Event: PassTest{complexity=17, testCount=19}
------------------------------------------
387: 1:BoardData {
387: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
387: 1:  'expectedAnswer': '2590',
387: 1:  'history': [
387: 1:    {
387: 1:      'answer': '40',
387: 1:      'question': '1',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': '80',
387: 1:      'question': '2',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': '100',
387: 1:      'question': '3',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': '140',
387: 1:      'question': '4',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': '180',
387: 1:      'question': '5',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': '220',
387: 1:      'question': '6',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': '230',
387: 1:      'question': '7',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': '270',
387: 1:      'question': '8',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': '310',
387: 1:      'question': '9',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': '350',
387: 1:      'question': '10',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': '830',
387: 1:      'question': '22',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': '1270',
387: 1:      'question': '33',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': '1710',
387: 1:      'question': '44',
387: 1:      'valid': true
387: 1:    },
387: 1:    {
387: 1:      'answer': '2150',
387: 1:      'question': '55',
387: 1:      'valid': true
387: 1:    }
387: 1:  ],
387: 1:  'info': [
387: 1:    '✅f(1) = 40',
387: 1:    '✅f(2) = 80',
387: 1:    '✅f(3) = 100',
387: 1:    '✅f(4) = 140',
387: 1:    '✅f(5) = 180',
387: 1:    '✅f(6) = 220',
387: 1:    '✅f(7) = 230',
387: 1:    '✅f(8) = 270',
387: 1:    '✅f(9) = 310',
387: 1:    '✅f(10) = 350',
387: 1:    '✅f(22) = 830',
387: 1:    '✅f(33) = 1270',
387: 1:    '✅f(44) = 1710',
387: 1:    '✅f(55) = 2150',
387: 1:    '❌f(66) = ??? != 2590'
387: 1:  ],
387: 1:  'level': 13,
387: 1:  'nextQuestion': '66',
387: 1:  'questions': [
387: 1:    '1',
387: 1:    '2',
387: 1:    '3',
387: 1:    '4',
387: 1:    '5',
387: 1:    '6',
387: 1:    '7',
387: 1:    '8',
387: 1:    '9',
387: 1:    '10',
387: 1:    '22',
387: 1:    '33',
387: 1:    '44',
387: 1:    '55',
387: 1:    '66'
387: 1:  ]
387: 1:}
387: 1:Scores: 18229
387: 1:Answer: message('['40', '80', '100', '140', '180', '220', '230', '270', '310', '350', '830', '1270', '1710', '2150', '2590']')
387: 1:Fire Event: PassTest{complexity=17, testCount=19}
------------------------------------------
388: 1:BoardData {
388: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
388: 1:  'expectedAnswer': '3030',
388: 1:  'history': [
388: 1:    {
388: 1:      'answer': '40',
388: 1:      'question': '1',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': '80',
388: 1:      'question': '2',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': '100',
388: 1:      'question': '3',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': '140',
388: 1:      'question': '4',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': '180',
388: 1:      'question': '5',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': '220',
388: 1:      'question': '6',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': '230',
388: 1:      'question': '7',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': '270',
388: 1:      'question': '8',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': '310',
388: 1:      'question': '9',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': '350',
388: 1:      'question': '10',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': '830',
388: 1:      'question': '22',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': '1270',
388: 1:      'question': '33',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': '1710',
388: 1:      'question': '44',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': '2150',
388: 1:      'question': '55',
388: 1:      'valid': true
388: 1:    },
388: 1:    {
388: 1:      'answer': '2590',
388: 1:      'question': '66',
388: 1:      'valid': true
388: 1:    }
388: 1:  ],
388: 1:  'info': [
388: 1:    '✅f(1) = 40',
388: 1:    '✅f(2) = 80',
388: 1:    '✅f(3) = 100',
388: 1:    '✅f(4) = 140',
388: 1:    '✅f(5) = 180',
388: 1:    '✅f(6) = 220',
388: 1:    '✅f(7) = 230',
388: 1:    '✅f(8) = 270',
388: 1:    '✅f(9) = 310',
388: 1:    '✅f(10) = 350',
388: 1:    '✅f(22) = 830',
388: 1:    '✅f(33) = 1270',
388: 1:    '✅f(44) = 1710',
388: 1:    '✅f(55) = 2150',
388: 1:    '✅f(66) = 2590',
388: 1:    '❌f(77) = ??? != 3030'
388: 1:  ],
388: 1:  'level': 13,
388: 1:  'nextQuestion': '77',
388: 1:  'questions': [
388: 1:    '1',
388: 1:    '2',
388: 1:    '3',
388: 1:    '4',
388: 1:    '5',
388: 1:    '6',
388: 1:    '7',
388: 1:    '8',
388: 1:    '9',
388: 1:    '10',
388: 1:    '22',
388: 1:    '33',
388: 1:    '44',
388: 1:    '55',
388: 1:    '66',
388: 1:    '77'
388: 1:  ]
388: 1:}
388: 1:Scores: 18237
388: 1:Answer: message('['40', '80', '100', '140', '180', '220', '230', '270', '310', '350', '830', '1270', '1710', '2150', '2590', '3030']')
388: 1:Fire Event: PassTest{complexity=17, testCount=19}
------------------------------------------
389: 1:BoardData {
389: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
389: 1:  'expectedAnswer': '3470',
389: 1:  'history': [
389: 1:    {
389: 1:      'answer': '40',
389: 1:      'question': '1',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '80',
389: 1:      'question': '2',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '100',
389: 1:      'question': '3',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '140',
389: 1:      'question': '4',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '180',
389: 1:      'question': '5',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '220',
389: 1:      'question': '6',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '230',
389: 1:      'question': '7',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '270',
389: 1:      'question': '8',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '310',
389: 1:      'question': '9',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '350',
389: 1:      'question': '10',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '830',
389: 1:      'question': '22',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '1270',
389: 1:      'question': '33',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '1710',
389: 1:      'question': '44',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '2150',
389: 1:      'question': '55',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '2590',
389: 1:      'question': '66',
389: 1:      'valid': true
389: 1:    },
389: 1:    {
389: 1:      'answer': '3030',
389: 1:      'question': '77',
389: 1:      'valid': true
389: 1:    }
389: 1:  ],
389: 1:  'info': [
389: 1:    '✅f(1) = 40',
389: 1:    '✅f(2) = 80',
389: 1:    '✅f(3) = 100',
389: 1:    '✅f(4) = 140',
389: 1:    '✅f(5) = 180',
389: 1:    '✅f(6) = 220',
389: 1:    '✅f(7) = 230',
389: 1:    '✅f(8) = 270',
389: 1:    '✅f(9) = 310',
389: 1:    '✅f(10) = 350',
389: 1:    '✅f(22) = 830',
389: 1:    '✅f(33) = 1270',
389: 1:    '✅f(44) = 1710',
389: 1:    '✅f(55) = 2150',
389: 1:    '✅f(66) = 2590',
389: 1:    '✅f(77) = 3030',
389: 1:    '❌f(88) = ??? != 3470'
389: 1:  ],
389: 1:  'level': 13,
389: 1:  'nextQuestion': '88',
389: 1:  'questions': [
389: 1:    '1',
389: 1:    '2',
389: 1:    '3',
389: 1:    '4',
389: 1:    '5',
389: 1:    '6',
389: 1:    '7',
389: 1:    '8',
389: 1:    '9',
389: 1:    '10',
389: 1:    '22',
389: 1:    '33',
389: 1:    '44',
389: 1:    '55',
389: 1:    '66',
389: 1:    '77',
389: 1:    '88'
389: 1:  ]
389: 1:}
389: 1:Scores: 18245
389: 1:Answer: message('['40', '80', '100', '140', '180', '220', '230', '270', '310', '350', '830', '1270', '1710', '2150', '2590', '3030', '3470']')
389: 1:Fire Event: PassTest{complexity=17, testCount=19}
------------------------------------------
390: 1:BoardData {
390: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
390: 1:  'expectedAnswer': '3910',
390: 1:  'history': [
390: 1:    {
390: 1:      'answer': '40',
390: 1:      'question': '1',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '80',
390: 1:      'question': '2',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '100',
390: 1:      'question': '3',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '140',
390: 1:      'question': '4',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '180',
390: 1:      'question': '5',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '220',
390: 1:      'question': '6',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '230',
390: 1:      'question': '7',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '270',
390: 1:      'question': '8',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '310',
390: 1:      'question': '9',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '350',
390: 1:      'question': '10',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '830',
390: 1:      'question': '22',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '1270',
390: 1:      'question': '33',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '1710',
390: 1:      'question': '44',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '2150',
390: 1:      'question': '55',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '2590',
390: 1:      'question': '66',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '3030',
390: 1:      'question': '77',
390: 1:      'valid': true
390: 1:    },
390: 1:    {
390: 1:      'answer': '3470',
390: 1:      'question': '88',
390: 1:      'valid': true
390: 1:    }
390: 1:  ],
390: 1:  'info': [
390: 1:    '✅f(1) = 40',
390: 1:    '✅f(2) = 80',
390: 1:    '✅f(3) = 100',
390: 1:    '✅f(4) = 140',
390: 1:    '✅f(5) = 180',
390: 1:    '✅f(6) = 220',
390: 1:    '✅f(7) = 230',
390: 1:    '✅f(8) = 270',
390: 1:    '✅f(9) = 310',
390: 1:    '✅f(10) = 350',
390: 1:    '✅f(22) = 830',
390: 1:    '✅f(33) = 1270',
390: 1:    '✅f(44) = 1710',
390: 1:    '✅f(55) = 2150',
390: 1:    '✅f(66) = 2590',
390: 1:    '✅f(77) = 3030',
390: 1:    '✅f(88) = 3470',
390: 1:    '❌f(99) = ??? != 3910'
390: 1:  ],
390: 1:  'level': 13,
390: 1:  'nextQuestion': '99',
390: 1:  'questions': [
390: 1:    '1',
390: 1:    '2',
390: 1:    '3',
390: 1:    '4',
390: 1:    '5',
390: 1:    '6',
390: 1:    '7',
390: 1:    '8',
390: 1:    '9',
390: 1:    '10',
390: 1:    '22',
390: 1:    '33',
390: 1:    '44',
390: 1:    '55',
390: 1:    '66',
390: 1:    '77',
390: 1:    '88',
390: 1:    '99'
390: 1:  ]
390: 1:}
390: 1:Scores: 18253
390: 1:Answer: message('['40', '80', '100', '140', '180', '220', '230', '270', '310', '350', '830', '1270', '1710', '2150', '2590', '3030', '3470', '3910']')
390: 1:Fire Event: PassTest{complexity=17, testCount=19}
------------------------------------------
391: 1:BoardData {
391: 1:  'description': ['Rent car cost calculator\n Every day you rent the car costs $40. If you rent the car for 7 or more days, you get $50 off your total. \nAlternatively, if you rent the car for 3 or more days, you get $20 off your total.\nWrite a code that gives out the total amount for different days(d).Example: 1=>40, 2=>80, 3=>100, 4=>140, 6=>220, 7=>230, 15=>550'],
391: 1:  'expectedAnswer': '3950',
391: 1:  'history': [
391: 1:    {
391: 1:      'answer': '40',
391: 1:      'question': '1',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '80',
391: 1:      'question': '2',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '100',
391: 1:      'question': '3',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '140',
391: 1:      'question': '4',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '180',
391: 1:      'question': '5',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '220',
391: 1:      'question': '6',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '230',
391: 1:      'question': '7',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '270',
391: 1:      'question': '8',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '310',
391: 1:      'question': '9',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '350',
391: 1:      'question': '10',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '830',
391: 1:      'question': '22',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '1270',
391: 1:      'question': '33',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '1710',
391: 1:      'question': '44',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '2150',
391: 1:      'question': '55',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '2590',
391: 1:      'question': '66',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '3030',
391: 1:      'question': '77',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '3470',
391: 1:      'question': '88',
391: 1:      'valid': true
391: 1:    },
391: 1:    {
391: 1:      'answer': '3910',
391: 1:      'question': '99',
391: 1:      'valid': true
391: 1:    }
391: 1:  ],
391: 1:  'info': [
391: 1:    '✅f(1) = 40',
391: 1:    '✅f(2) = 80',
391: 1:    '✅f(3) = 100',
391: 1:    '✅f(4) = 140',
391: 1:    '✅f(5) = 180',
391: 1:    '✅f(6) = 220',
391: 1:    '✅f(7) = 230',
391: 1:    '✅f(8) = 270',
391: 1:    '✅f(9) = 310',
391: 1:    '✅f(10) = 350',
391: 1:    '✅f(22) = 830',
391: 1:    '✅f(33) = 1270',
391: 1:    '✅f(44) = 1710',
391: 1:    '✅f(55) = 2150',
391: 1:    '✅f(66) = 2590',
391: 1:    '✅f(77) = 3030',
391: 1:    '✅f(88) = 3470',
391: 1:    '✅f(99) = 3910',
391: 1:    '❌f(100) = ??? != 3950'
391: 1:  ],
391: 1:  'level': 13,
391: 1:  'nextQuestion': '100',
391: 1:  'questions': [
391: 1:    '1',
391: 1:    '2',
391: 1:    '3',
391: 1:    '4',
391: 1:    '5',
391: 1:    '6',
391: 1:    '7',
391: 1:    '8',
391: 1:    '9',
391: 1:    '10',
391: 1:    '22',
391: 1:    '33',
391: 1:    '44',
391: 1:    '55',
391: 1:    '66',
391: 1:    '77',
391: 1:    '88',
391: 1:    '99',
391: 1:    '100'
391: 1:  ]
391: 1:}
391: 1:Scores: 18261
391: 1:Answer: message('['40', '80', '100', '140', '180', '220', '230', '270', '310', '350', '830', '1270', '1710', '2150', '2590', '3030', '3470', '3910', '3950']')
391: 1:Fire Event: PassTest{complexity=17, testCount=19}
391: 1:Fire Event: NextAlgorithm{complexity=17, time=0}
------------------------------------------
392: 1:BoardData {
392: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
392: 1:  'history': [
392: 1:    {
392: 1:      'answer': '40',
392: 1:      'question': '1',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '80',
392: 1:      'question': '2',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '100',
392: 1:      'question': '3',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '140',
392: 1:      'question': '4',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '180',
392: 1:      'question': '5',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '220',
392: 1:      'question': '6',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '230',
392: 1:      'question': '7',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '270',
392: 1:      'question': '8',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '310',
392: 1:      'question': '9',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '350',
392: 1:      'question': '10',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '830',
392: 1:      'question': '22',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '1270',
392: 1:      'question': '33',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '1710',
392: 1:      'question': '44',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '2150',
392: 1:      'question': '55',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '2590',
392: 1:      'question': '66',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '3030',
392: 1:      'question': '77',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '3470',
392: 1:      'question': '88',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '3910',
392: 1:      'question': '99',
392: 1:      'valid': true
392: 1:    },
392: 1:    {
392: 1:      'answer': '3950',
392: 1:      'question': '100',
392: 1:      'valid': true
392: 1:    }
392: 1:  ],
392: 1:  'info': [
392: 1:    '✅f(1) = 40',
392: 1:    '✅f(2) = 80',
392: 1:    '✅f(3) = 100',
392: 1:    '✅f(4) = 140',
392: 1:    '✅f(5) = 180',
392: 1:    '✅f(6) = 220',
392: 1:    '✅f(7) = 230',
392: 1:    '✅f(8) = 270',
392: 1:    '✅f(9) = 310',
392: 1:    '✅f(10) = 350',
392: 1:    '✅f(22) = 830',
392: 1:    '✅f(33) = 1270',
392: 1:    '✅f(44) = 1710',
392: 1:    '✅f(55) = 2150',
392: 1:    '✅f(66) = 2590',
392: 1:    '✅f(77) = 3030',
392: 1:    '✅f(88) = 3470',
392: 1:    '✅f(99) = 3910',
392: 1:    '✅f(100) = 3950'
392: 1:  ],
392: 1:  'level': 13,
392: 1:  'questions': []
392: 1:}
392: 1:Scores: 20563
392: 1:Answer: message('StartNextLevel')
392: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
393: 1:BoardData {
393: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
393: 1:  'expectedAnswer': 'a',
393: 1:  'history': [],
393: 1:  'info': ['❌f(a) = ??? != a'],
393: 1:  'level': 14,
393: 1:  'nextQuestion': 'a',
393: 1:  'questions': ['a']
393: 1:}
393: 1:Scores: 20563
393: 1:Answer: message('['a']')
393: 1:Fire Event: PassTest{complexity=20, testCount=24}
------------------------------------------
394: 1:BoardData {
394: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
394: 1:  'expectedAnswer': 'abc',
394: 1:  'history': [{
394: 1:    'answer': 'a',
394: 1:    'question': 'a',
394: 1:    'valid': true
394: 1:  }],
394: 1:  'info': [
394: 1:    '✅f(a) = a',
394: 1:    '❌f(abc) = ??? != abc'
394: 1:  ],
394: 1:  'level': 14,
394: 1:  'nextQuestion': 'abc',
394: 1:  'questions': [
394: 1:    'a',
394: 1:    'abc'
394: 1:  ]
394: 1:}
394: 1:Scores: 20571
394: 1:Answer: message('['a', 'abc']')
394: 1:Fire Event: PassTest{complexity=20, testCount=24}
------------------------------------------
395: 1:BoardData {
395: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
395: 1:  'expectedAnswer': 'abcba',
395: 1:  'history': [
395: 1:    {
395: 1:      'answer': 'a',
395: 1:      'question': 'a',
395: 1:      'valid': true
395: 1:    },
395: 1:    {
395: 1:      'answer': 'abc',
395: 1:      'question': 'abc',
395: 1:      'valid': true
395: 1:    }
395: 1:  ],
395: 1:  'info': [
395: 1:    '✅f(a) = a',
395: 1:    '✅f(abc) = abc',
395: 1:    '❌f(abcba) = ??? != abcba'
395: 1:  ],
395: 1:  'level': 14,
395: 1:  'nextQuestion': 'abcba',
395: 1:  'questions': [
395: 1:    'a',
395: 1:    'abc',
395: 1:    'abcba'
395: 1:  ]
395: 1:}
395: 1:Scores: 20579
395: 1:Answer: message('['a', 'abc', 'abcba']')
395: 1:Fire Event: PassTest{complexity=20, testCount=24}
------------------------------------------
396: 1:BoardData {
396: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
396: 1:  'expectedAnswer': '',
396: 1:  'history': [
396: 1:    {
396: 1:      'answer': 'a',
396: 1:      'question': 'a',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': 'abc',
396: 1:      'question': 'abc',
396: 1:      'valid': true
396: 1:    },
396: 1:    {
396: 1:      'answer': 'abcba',
396: 1:      'question': 'abcba',
396: 1:      'valid': true
396: 1:    }
396: 1:  ],
396: 1:  'info': [
396: 1:    '✅f(a) = a',
396: 1:    '✅f(abc) = abc',
396: 1:    '✅f(abcba) = abcba',
396: 1:    '❌f(aa) = ??? != '
396: 1:  ],
396: 1:  'level': 14,
396: 1:  'nextQuestion': 'aa',
396: 1:  'questions': [
396: 1:    'a',
396: 1:    'abc',
396: 1:    'abcba',
396: 1:    'aa'
396: 1:  ]
396: 1:}
396: 1:Scores: 20587
396: 1:Answer: message('['a', 'abc', 'abcba', '']')
396: 1:Fire Event: PassTest{complexity=20, testCount=24}
------------------------------------------
397: 1:BoardData {
397: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
397: 1:  'expectedAnswer': '',
397: 1:  'history': [
397: 1:    {
397: 1:      'answer': 'a',
397: 1:      'question': 'a',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': 'abc',
397: 1:      'question': 'abc',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': 'abcba',
397: 1:      'question': 'abcba',
397: 1:      'valid': true
397: 1:    },
397: 1:    {
397: 1:      'answer': '',
397: 1:      'question': 'aa',
397: 1:      'valid': true
397: 1:    }
397: 1:  ],
397: 1:  'info': [
397: 1:    '✅f(a) = a',
397: 1:    '✅f(abc) = abc',
397: 1:    '✅f(abcba) = abcba',
397: 1:    '✅f(aa) = ',
397: 1:    '❌f(aaaa) = ??? != '
397: 1:  ],
397: 1:  'level': 14,
397: 1:  'nextQuestion': 'aaaa',
397: 1:  'questions': [
397: 1:    'a',
397: 1:    'abc',
397: 1:    'abcba',
397: 1:    'aa',
397: 1:    'aaaa'
397: 1:  ]
397: 1:}
397: 1:Scores: 20595
397: 1:Answer: message('['a', 'abc', 'abcba', '', '']')
397: 1:Fire Event: PassTest{complexity=20, testCount=24}
------------------------------------------
398: 1:BoardData {
398: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
398: 1:  'expectedAnswer': 'b',
398: 1:  'history': [
398: 1:    {
398: 1:      'answer': 'a',
398: 1:      'question': 'a',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'abc',
398: 1:      'question': 'abc',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': 'abcba',
398: 1:      'question': 'abcba',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': '',
398: 1:      'question': 'aa',
398: 1:      'valid': true
398: 1:    },
398: 1:    {
398: 1:      'answer': '',
398: 1:      'question': 'aaaa',
398: 1:      'valid': true
398: 1:    }
398: 1:  ],
398: 1:  'info': [
398: 1:    '✅f(a) = a',
398: 1:    '✅f(abc) = abc',
398: 1:    '✅f(abcba) = abcba',
398: 1:    '✅f(aa) = ',
398: 1:    '✅f(aaaa) = ',
398: 1:    '❌f(aaabaa) = ??? != b'
398: 1:  ],
398: 1:  'level': 14,
398: 1:  'nextQuestion': 'aaabaa',
398: 1:  'questions': [
398: 1:    'a',
398: 1:    'abc',
398: 1:    'abcba',
398: 1:    'aa',
398: 1:    'aaaa',
398: 1:    'aaabaa'
398: 1:  ]
398: 1:}
398: 1:Scores: 20603
398: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b']')
398: 1:Fire Event: PassTest{complexity=20, testCount=24}
------------------------------------------
399: 1:BoardData {
399: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
399: 1:  'expectedAnswer': 'b',
399: 1:  'history': [
399: 1:    {
399: 1:      'answer': 'a',
399: 1:      'question': 'a',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'abc',
399: 1:      'question': 'abc',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'abcba',
399: 1:      'question': 'abcba',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': '',
399: 1:      'question': 'aa',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': '',
399: 1:      'question': 'aaaa',
399: 1:      'valid': true
399: 1:    },
399: 1:    {
399: 1:      'answer': 'b',
399: 1:      'question': 'aaabaa',
399: 1:      'valid': true
399: 1:    }
399: 1:  ],
399: 1:  'info': [
399: 1:    '✅f(a) = a',
399: 1:    '✅f(abc) = abc',
399: 1:    '✅f(abcba) = abcba',
399: 1:    '✅f(aa) = ',
399: 1:    '✅f(aaaa) = ',
399: 1:    '✅f(aaabaa) = b',
399: 1:    '❌f(aabaaa) = ??? != b'
399: 1:  ],
399: 1:  'level': 14,
399: 1:  'nextQuestion': 'aabaaa',
399: 1:  'questions': [
399: 1:    'a',
399: 1:    'abc',
399: 1:    'abcba',
399: 1:    'aa',
399: 1:    'aaaa',
399: 1:    'aaabaa',
399: 1:    'aabaaa'
399: 1:  ]
399: 1:}
399: 1:Scores: 20611
399: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b']')
399: 1:Fire Event: PassTest{complexity=20, testCount=24}
------------------------------------------
400: 1:BoardData {
400: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
400: 1:  'expectedAnswer': 'ab',
400: 1:  'history': [
400: 1:    {
400: 1:      'answer': 'a',
400: 1:      'question': 'a',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'abc',
400: 1:      'question': 'abc',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'abcba',
400: 1:      'question': 'abcba',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': '',
400: 1:      'question': 'aa',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': '',
400: 1:      'question': 'aaaa',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'b',
400: 1:      'question': 'aaabaa',
400: 1:      'valid': true
400: 1:    },
400: 1:    {
400: 1:      'answer': 'b',
400: 1:      'question': 'aabaaa',
400: 1:      'valid': true
400: 1:    }
400: 1:  ],
400: 1:  'info': [
400: 1:    '✅f(a) = a',
400: 1:    '✅f(abc) = abc',
400: 1:    '✅f(abcba) = abcba',
400: 1:    '✅f(aa) = ',
400: 1:    '✅f(aaaa) = ',
400: 1:    '✅f(aaabaa) = b',
400: 1:    '✅f(aabaaa) = b',
400: 1:    '❌f(abaa) = ??? != ab'
400: 1:  ],
400: 1:  'level': 14,
400: 1:  'nextQuestion': 'abaa',
400: 1:  'questions': [
400: 1:    'a',
400: 1:    'abc',
400: 1:    'abcba',
400: 1:    'aa',
400: 1:    'aaaa',
400: 1:    'aaabaa',
400: 1:    'aabaaa',
400: 1:    'abaa'
400: 1:  ]
400: 1:}
400: 1:Scores: 20619
400: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab']')
400: 1:Fire Event: PassTest{complexity=20, testCount=24}
------------------------------------------
401: 1:BoardData {
401: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
401: 1:  'expectedAnswer': '',
401: 1:  'history': [
401: 1:    {
401: 1:      'answer': 'a',
401: 1:      'question': 'a',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'abc',
401: 1:      'question': 'abc',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'abcba',
401: 1:      'question': 'abcba',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': '',
401: 1:      'question': 'aa',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': '',
401: 1:      'question': 'aaaa',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'b',
401: 1:      'question': 'aaabaa',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'b',
401: 1:      'question': 'aabaaa',
401: 1:      'valid': true
401: 1:    },
401: 1:    {
401: 1:      'answer': 'ab',
401: 1:      'question': 'abaa',
401: 1:      'valid': true
401: 1:    }
401: 1:  ],
401: 1:  'info': [
401: 1:    '✅f(a) = a',
401: 1:    '✅f(abc) = abc',
401: 1:    '✅f(abcba) = abcba',
401: 1:    '✅f(aa) = ',
401: 1:    '✅f(aaaa) = ',
401: 1:    '✅f(aaabaa) = b',
401: 1:    '✅f(aabaaa) = b',
401: 1:    '✅f(abaa) = ab',
401: 1:    '❌f(abba) = ??? != '
401: 1:  ],
401: 1:  'level': 14,
401: 1:  'nextQuestion': 'abba',
401: 1:  'questions': [
401: 1:    'a',
401: 1:    'abc',
401: 1:    'abcba',
401: 1:    'aa',
401: 1:    'aaaa',
401: 1:    'aaabaa',
401: 1:    'aabaaa',
401: 1:    'abaa',
401: 1:    'abba'
401: 1:  ]
401: 1:}
401: 1:Scores: 20627
401: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '']')
401: 1:Fire Event: PassTest{complexity=20, testCount=24}
------------------------------------------
402: 1:BoardData {
402: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
402: 1:  'expectedAnswer': '',
402: 1:  'history': [
402: 1:    {
402: 1:      'answer': 'a',
402: 1:      'question': 'a',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'abc',
402: 1:      'question': 'abc',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'abcba',
402: 1:      'question': 'abcba',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': '',
402: 1:      'question': 'aa',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': '',
402: 1:      'question': 'aaaa',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'b',
402: 1:      'question': 'aaabaa',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'b',
402: 1:      'question': 'aabaaa',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': 'ab',
402: 1:      'question': 'abaa',
402: 1:      'valid': true
402: 1:    },
402: 1:    {
402: 1:      'answer': '',
402: 1:      'question': 'abba',
402: 1:      'valid': true
402: 1:    }
402: 1:  ],
402: 1:  'info': [
402: 1:    '✅f(a) = a',
402: 1:    '✅f(abc) = abc',
402: 1:    '✅f(abcba) = abcba',
402: 1:    '✅f(aa) = ',
402: 1:    '✅f(aaaa) = ',
402: 1:    '✅f(aaabaa) = b',
402: 1:    '✅f(aabaaa) = b',
402: 1:    '✅f(abaa) = ab',
402: 1:    '✅f(abba) = ',
402: 1:    '❌f(abbaaa) = ??? != '
402: 1:  ],
402: 1:  'level': 14,
402: 1:  'nextQuestion': 'abbaaa',
402: 1:  'questions': [
402: 1:    'a',
402: 1:    'abc',
402: 1:    'abcba',
402: 1:    'aa',
402: 1:    'aaaa',
402: 1:    'aaabaa',
402: 1:    'aabaaa',
402: 1:    'abaa',
402: 1:    'abba',
402: 1:    'abbaaa'
402: 1:  ]
402: 1:}
402: 1:Scores: 20635
402: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '']')
402: 1:Fire Event: PassTest{complexity=20, testCount=24}
------------------------------------------
403: 1:BoardData {
403: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
403: 1:  'expectedAnswer': '',
403: 1:  'history': [
403: 1:    {
403: 1:      'answer': 'a',
403: 1:      'question': 'a',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'abc',
403: 1:      'question': 'abc',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'abcba',
403: 1:      'question': 'abcba',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': '',
403: 1:      'question': 'aa',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': '',
403: 1:      'question': 'aaaa',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'b',
403: 1:      'question': 'aaabaa',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'b',
403: 1:      'question': 'aabaaa',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': 'ab',
403: 1:      'question': 'abaa',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': '',
403: 1:      'question': 'abba',
403: 1:      'valid': true
403: 1:    },
403: 1:    {
403: 1:      'answer': '',
403: 1:      'question': 'abbaaa',
403: 1:      'valid': true
403: 1:    }
403: 1:  ],
403: 1:  'info': [
403: 1:    '✅f(a) = a',
403: 1:    '✅f(abc) = abc',
403: 1:    '✅f(abcba) = abcba',
403: 1:    '✅f(aa) = ',
403: 1:    '✅f(aaaa) = ',
403: 1:    '✅f(aaabaa) = b',
403: 1:    '✅f(aabaaa) = b',
403: 1:    '✅f(abaa) = ab',
403: 1:    '✅f(abba) = ',
403: 1:    '✅f(abbaaa) = ',
403: 1:    '❌f(abcdeedcba) = ??? != '
403: 1:  ],
403: 1:  'level': 14,
403: 1:  'nextQuestion': 'abcdeedcba',
403: 1:  'questions': [
403: 1:    'a',
403: 1:    'abc',
403: 1:    'abcba',
403: 1:    'aa',
403: 1:    'aaaa',
403: 1:    'aaabaa',
403: 1:    'aabaaa',
403: 1:    'abaa',
403: 1:    'abba',
403: 1:    'abbaaa',
403: 1:    'abcdeedcba'
403: 1:  ]
403: 1:}
403: 1:Scores: 20643
403: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '', '']')
403: 1:Fire Event: PassTest{complexity=20, testCount=24}
------------------------------------------
404: 1:BoardData {
404: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
404: 1:  'expectedAnswer': 'abcde',
404: 1:  'history': [
404: 1:    {
404: 1:      'answer': 'a',
404: 1:      'question': 'a',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'abc',
404: 1:      'question': 'abc',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'abcba',
404: 1:      'question': 'abcba',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': '',
404: 1:      'question': 'aa',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': '',
404: 1:      'question': 'aaaa',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'b',
404: 1:      'question': 'aaabaa',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'b',
404: 1:      'question': 'aabaaa',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': 'ab',
404: 1:      'question': 'abaa',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': '',
404: 1:      'question': 'abba',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': '',
404: 1:      'question': 'abbaaa',
404: 1:      'valid': true
404: 1:    },
404: 1:    {
404: 1:      'answer': '',
404: 1:      'question': 'abcdeedcba',
404: 1:      'valid': true
404: 1:    }
404: 1:  ],
404: 1:  'info': [
404: 1:    '✅f(a) = a',
404: 1:    '✅f(abc) = abc',
404: 1:    '✅f(abcba) = abcba',
404: 1:    '✅f(aa) = ',
404: 1:    '✅f(aaaa) = ',
404: 1:    '✅f(aaabaa) = b',
404: 1:    '✅f(aabaaa) = b',
404: 1:    '✅f(abaa) = ab',
404: 1:    '✅f(abba) = ',
404: 1:    '✅f(abbaaa) = ',
404: 1:    '✅f(abcdeedcba) = ',
404: 1:    '❌f(bcdeeedcbabcde) = ??? != abcde'
404: 1:  ],
404: 1:  'level': 14,
404: 1:  'nextQuestion': 'bcdeeedcbabcde',
404: 1:  'questions': [
404: 1:    'a',
404: 1:    'abc',
404: 1:    'abcba',
404: 1:    'aa',
404: 1:    'aaaa',
404: 1:    'aaabaa',
404: 1:    'aabaaa',
404: 1:    'abaa',
404: 1:    'abba',
404: 1:    'abbaaa',
404: 1:    'abcdeedcba',
404: 1:    'bcdeeedcbabcde'
404: 1:  ]
404: 1:}
404: 1:Scores: 20651
404: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '', '', 'abcde']')
404: 1:Fire Event: PassTest{complexity=20, testCount=24}
------------------------------------------
405: 1:BoardData {
405: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
405: 1:  'expectedAnswer': '',
405: 1:  'history': [
405: 1:    {
405: 1:      'answer': 'a',
405: 1:      'question': 'a',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'abc',
405: 1:      'question': 'abc',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'abcba',
405: 1:      'question': 'abcba',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': '',
405: 1:      'question': 'aa',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': '',
405: 1:      'question': 'aaaa',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'b',
405: 1:      'question': 'aaabaa',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'b',
405: 1:      'question': 'aabaaa',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'ab',
405: 1:      'question': 'abaa',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': '',
405: 1:      'question': 'abba',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': '',
405: 1:      'question': 'abbaaa',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': '',
405: 1:      'question': 'abcdeedcba',
405: 1:      'valid': true
405: 1:    },
405: 1:    {
405: 1:      'answer': 'abcde',
405: 1:      'question': 'bcdeeedcbabcde',
405: 1:      'valid': true
405: 1:    }
405: 1:  ],
405: 1:  'info': [
405: 1:    '✅f(a) = a',
405: 1:    '✅f(abc) = abc',
405: 1:    '✅f(abcba) = abcba',
405: 1:    '✅f(aa) = ',
405: 1:    '✅f(aaaa) = ',
405: 1:    '✅f(aaabaa) = b',
405: 1:    '✅f(aabaaa) = b',
405: 1:    '✅f(abaa) = ab',
405: 1:    '✅f(abba) = ',
405: 1:    '✅f(abbaaa) = ',
405: 1:    '✅f(abcdeedcba) = ',
405: 1:    '✅f(bcdeeedcbabcde) = abcde',
405: 1:    '❌f(fffkkhhffzzhhkkkzzrrrrryyy) = ??? != '
405: 1:  ],
405: 1:  'level': 14,
405: 1:  'nextQuestion': 'fffkkhhffzzhhkkkzzrrrrryyy',
405: 1:  'questions': [
405: 1:    'a',
405: 1:    'abc',
405: 1:    'abcba',
405: 1:    'aa',
405: 1:    'aaaa',
405: 1:    'aaabaa',
405: 1:    'aabaaa',
405: 1:    'abaa',
405: 1:    'abba',
405: 1:    'abbaaa',
405: 1:    'abcdeedcba',
405: 1:    'bcdeeedcbabcde',
405: 1:    'fffkkhhffzzhhkkkzzrrrrryyy'
405: 1:  ]
405: 1:}
405: 1:Scores: 20659
405: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '', '', 'abcde', '']')
405: 1:Fire Event: PassTest{complexity=20, testCount=24}
------------------------------------------
406: 1:BoardData {
406: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
406: 1:  'expectedAnswer': 'bgro',
406: 1:  'history': [
406: 1:    {
406: 1:      'answer': 'a',
406: 1:      'question': 'a',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'abc',
406: 1:      'question': 'abc',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'abcba',
406: 1:      'question': 'abcba',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': '',
406: 1:      'question': 'aa',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': '',
406: 1:      'question': 'aaaa',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'b',
406: 1:      'question': 'aaabaa',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'b',
406: 1:      'question': 'aabaaa',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'ab',
406: 1:      'question': 'abaa',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': '',
406: 1:      'question': 'abba',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': '',
406: 1:      'question': 'abbaaa',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': '',
406: 1:      'question': 'abcdeedcba',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': 'abcde',
406: 1:      'question': 'bcdeeedcbabcde',
406: 1:      'valid': true
406: 1:    },
406: 1:    {
406: 1:      'answer': '',
406: 1:      'question': 'fffkkhhffzzhhkkkzzrrrrryyy',
406: 1:      'valid': true
406: 1:    }
406: 1:  ],
406: 1:  'info': [
406: 1:    '✅f(a) = a',
406: 1:    '✅f(abc) = abc',
406: 1:    '✅f(abcba) = abcba',
406: 1:    '✅f(aa) = ',
406: 1:    '✅f(aaaa) = ',
406: 1:    '✅f(aaabaa) = b',
406: 1:    '✅f(aabaaa) = b',
406: 1:    '✅f(abaa) = ab',
406: 1:    '✅f(abba) = ',
406: 1:    '✅f(abbaaa) = ',
406: 1:    '✅f(abcdeedcba) = ',
406: 1:    '✅f(bcdeeedcbabcde) = abcde',
406: 1:    '✅f(fffkkhhffzzhhkkkzzrrrrryyy) = ',
406: 1:    '❌f(beellllgrhhoyy) = ??? != bgro'
406: 1:  ],
406: 1:  'level': 14,
406: 1:  'nextQuestion': 'beellllgrhhoyy',
406: 1:  'questions': [
406: 1:    'a',
406: 1:    'abc',
406: 1:    'abcba',
406: 1:    'aa',
406: 1:    'aaaa',
406: 1:    'aaabaa',
406: 1:    'aabaaa',
406: 1:    'abaa',
406: 1:    'abba',
406: 1:    'abbaaa',
406: 1:    'abcdeedcba',
406: 1:    'bcdeeedcbabcde',
406: 1:    'fffkkhhffzzhhkkkzzrrrrryyy',
406: 1:    'beellllgrhhoyy'
406: 1:  ]
406: 1:}
406: 1:Scores: 20667
406: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '', '', 'abcde', '', 'bgro']')
406: 1:Fire Event: PassTest{complexity=20, testCount=24}
------------------------------------------
407: 1:BoardData {
407: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
407: 1:  'expectedAnswer': 'abad',
407: 1:  'history': [
407: 1:    {
407: 1:      'answer': 'a',
407: 1:      'question': 'a',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'abc',
407: 1:      'question': 'abc',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'abcba',
407: 1:      'question': 'abcba',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': '',
407: 1:      'question': 'aa',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': '',
407: 1:      'question': 'aaaa',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'b',
407: 1:      'question': 'aaabaa',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'b',
407: 1:      'question': 'aabaaa',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'ab',
407: 1:      'question': 'abaa',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': '',
407: 1:      'question': 'abba',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': '',
407: 1:      'question': 'abbaaa',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': '',
407: 1:      'question': 'abcdeedcba',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'abcde',
407: 1:      'question': 'bcdeeedcbabcde',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': '',
407: 1:      'question': 'fffkkhhffzzhhkkkzzrrrrryyy',
407: 1:      'valid': true
407: 1:    },
407: 1:    {
407: 1:      'answer': 'bgro',
407: 1:      'question': 'beellllgrhhoyy',
407: 1:      'valid': true
407: 1:    }
407: 1:  ],
407: 1:  'info': [
407: 1:    '✅f(a) = a',
407: 1:    '✅f(abc) = abc',
407: 1:    '✅f(abcba) = abcba',
407: 1:    '✅f(aa) = ',
407: 1:    '✅f(aaaa) = ',
407: 1:    '✅f(aaabaa) = b',
407: 1:    '✅f(aabaaa) = b',
407: 1:    '✅f(abaa) = ab',
407: 1:    '✅f(abba) = ',
407: 1:    '✅f(abbaaa) = ',
407: 1:    '✅f(abcdeedcba) = ',
407: 1:    '✅f(bcdeeedcbabcde) = abcde',
407: 1:    '✅f(fffkkhhffzzhhkkkzzrrrrryyy) = ',
407: 1:    '✅f(beellllgrhhoyy) = bgro',
407: 1:    '❌f(abbcccbad) = ??? != abad'
407: 1:  ],
407: 1:  'level': 14,
407: 1:  'nextQuestion': 'abbcccbad',
407: 1:  'questions': [
407: 1:    'a',
407: 1:    'abc',
407: 1:    'abcba',
407: 1:    'aa',
407: 1:    'aaaa',
407: 1:    'aaabaa',
407: 1:    'aabaaa',
407: 1:    'abaa',
407: 1:    'abba',
407: 1:    'abbaaa',
407: 1:    'abcdeedcba',
407: 1:    'bcdeeedcbabcde',
407: 1:    'fffkkhhffzzhhkkkzzrrrrryyy',
407: 1:    'beellllgrhhoyy',
407: 1:    'abbcccbad'
407: 1:  ]
407: 1:}
407: 1:Scores: 20675
407: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '', '', 'abcde', '', 'bgro', 'abad']')
407: 1:Fire Event: PassTest{complexity=20, testCount=24}
------------------------------------------
408: 1:BoardData {
408: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
408: 1:  'expectedAnswer': 'd',
408: 1:  'history': [
408: 1:    {
408: 1:      'answer': 'a',
408: 1:      'question': 'a',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'abc',
408: 1:      'question': 'abc',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'abcba',
408: 1:      'question': 'abcba',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': '',
408: 1:      'question': 'aa',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': '',
408: 1:      'question': 'aaaa',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'b',
408: 1:      'question': 'aaabaa',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'b',
408: 1:      'question': 'aabaaa',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'ab',
408: 1:      'question': 'abaa',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': '',
408: 1:      'question': 'abba',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': '',
408: 1:      'question': 'abbaaa',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': '',
408: 1:      'question': 'abcdeedcba',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'abcde',
408: 1:      'question': 'bcdeeedcbabcde',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': '',
408: 1:      'question': 'fffkkhhffzzhhkkkzzrrrrryyy',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'bgro',
408: 1:      'question': 'beellllgrhhoyy',
408: 1:      'valid': true
408: 1:    },
408: 1:    {
408: 1:      'answer': 'abad',
408: 1:      'question': 'abbcccbad',
408: 1:      'valid': true
408: 1:    }
408: 1:  ],
408: 1:  'info': [
408: 1:    '✅f(a) = a',
408: 1:    '✅f(abc) = abc',
408: 1:    '✅f(abcba) = abcba',
408: 1:    '✅f(aa) = ',
408: 1:    '✅f(aaaa) = ',
408: 1:    '✅f(aaabaa) = b',
408: 1:    '✅f(aabaaa) = b',
408: 1:    '✅f(abaa) = ab',
408: 1:    '✅f(abba) = ',
408: 1:    '✅f(abbaaa) = ',
408: 1:    '✅f(abcdeedcba) = ',
408: 1:    '✅f(bcdeeedcbabcde) = abcde',
408: 1:    '✅f(fffkkhhffzzhhkkkzzrrrrryyy) = ',
408: 1:    '✅f(beellllgrhhoyy) = bgro',
408: 1:    '✅f(abbcccbad) = abad',
408: 1:    '❌f(abccbbad) = ??? != d'
408: 1:  ],
408: 1:  'level': 14,
408: 1:  'nextQuestion': 'abccbbad',
408: 1:  'questions': [
408: 1:    'a',
408: 1:    'abc',
408: 1:    'abcba',
408: 1:    'aa',
408: 1:    'aaaa',
408: 1:    'aaabaa',
408: 1:    'aabaaa',
408: 1:    'abaa',
408: 1:    'abba',
408: 1:    'abbaaa',
408: 1:    'abcdeedcba',
408: 1:    'bcdeeedcbabcde',
408: 1:    'fffkkhhffzzhhkkkzzrrrrryyy',
408: 1:    'beellllgrhhoyy',
408: 1:    'abbcccbad',
408: 1:    'abccbbad'
408: 1:  ]
408: 1:}
408: 1:Scores: 20683
408: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '', '', 'abcde', '', 'bgro', 'abad', 'd']')
408: 1:Fire Event: PassTest{complexity=20, testCount=24}
------------------------------------------
409: 1:BoardData {
409: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
409: 1:  'expectedAnswer': 'r',
409: 1:  'history': [
409: 1:    {
409: 1:      'answer': 'a',
409: 1:      'question': 'a',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'abc',
409: 1:      'question': 'abc',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'abcba',
409: 1:      'question': 'abcba',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': '',
409: 1:      'question': 'aa',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': '',
409: 1:      'question': 'aaaa',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'b',
409: 1:      'question': 'aaabaa',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'b',
409: 1:      'question': 'aabaaa',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'ab',
409: 1:      'question': 'abaa',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': '',
409: 1:      'question': 'abba',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': '',
409: 1:      'question': 'abbaaa',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': '',
409: 1:      'question': 'abcdeedcba',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'abcde',
409: 1:      'question': 'bcdeeedcbabcde',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': '',
409: 1:      'question': 'fffkkhhffzzhhkkkzzrrrrryyy',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'bgro',
409: 1:      'question': 'beellllgrhhoyy',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'abad',
409: 1:      'question': 'abbcccbad',
409: 1:      'valid': true
409: 1:    },
409: 1:    {
409: 1:      'answer': 'd',
409: 1:      'question': 'abccbbad',
409: 1:      'valid': true
409: 1:    }
409: 1:  ],
409: 1:  'info': [
409: 1:    '✅f(a) = a',
409: 1:    '✅f(abc) = abc',
409: 1:    '✅f(abcba) = abcba',
409: 1:    '✅f(aa) = ',
409: 1:    '✅f(aaaa) = ',
409: 1:    '✅f(aaabaa) = b',
409: 1:    '✅f(aabaaa) = b',
409: 1:    '✅f(abaa) = ab',
409: 1:    '✅f(abba) = ',
409: 1:    '✅f(abbaaa) = ',
409: 1:    '✅f(abcdeedcba) = ',
409: 1:    '✅f(bcdeeedcbabcde) = abcde',
409: 1:    '✅f(fffkkhhffzzhhkkkzzrrrrryyy) = ',
409: 1:    '✅f(beellllgrhhoyy) = bgro',
409: 1:    '✅f(abbcccbad) = abad',
409: 1:    '✅f(abccbbad) = d',
409: 1:    '❌f(abcdeffedcbar) = ??? != r'
409: 1:  ],
409: 1:  'level': 14,
409: 1:  'nextQuestion': 'abcdeffedcbar',
409: 1:  'questions': [
409: 1:    'a',
409: 1:    'abc',
409: 1:    'abcba',
409: 1:    'aa',
409: 1:    'aaaa',
409: 1:    'aaabaa',
409: 1:    'aabaaa',
409: 1:    'abaa',
409: 1:    'abba',
409: 1:    'abbaaa',
409: 1:    'abcdeedcba',
409: 1:    'bcdeeedcbabcde',
409: 1:    'fffkkhhffzzhhkkkzzrrrrryyy',
409: 1:    'beellllgrhhoyy',
409: 1:    'abbcccbad',
409: 1:    'abccbbad',
409: 1:    'abcdeffedcbar'
409: 1:  ]
409: 1:}
409: 1:Scores: 20691
409: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '', '', 'abcde', '', 'bgro', 'abad', 'd', 'r']')
409: 1:Fire Event: PassTest{complexity=20, testCount=24}
------------------------------------------
410: 1:BoardData {
410: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
410: 1:  'expectedAnswer': '',
410: 1:  'history': [
410: 1:    {
410: 1:      'answer': 'a',
410: 1:      'question': 'a',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'abc',
410: 1:      'question': 'abc',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'abcba',
410: 1:      'question': 'abcba',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': '',
410: 1:      'question': 'aa',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': '',
410: 1:      'question': 'aaaa',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'b',
410: 1:      'question': 'aaabaa',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'b',
410: 1:      'question': 'aabaaa',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'ab',
410: 1:      'question': 'abaa',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': '',
410: 1:      'question': 'abba',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': '',
410: 1:      'question': 'abbaaa',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': '',
410: 1:      'question': 'abcdeedcba',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'abcde',
410: 1:      'question': 'bcdeeedcbabcde',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': '',
410: 1:      'question': 'fffkkhhffzzhhkkkzzrrrrryyy',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'bgro',
410: 1:      'question': 'beellllgrhhoyy',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'abad',
410: 1:      'question': 'abbcccbad',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'd',
410: 1:      'question': 'abccbbad',
410: 1:      'valid': true
410: 1:    },
410: 1:    {
410: 1:      'answer': 'r',
410: 1:      'question': 'abcdeffedcbar',
410: 1:      'valid': true
410: 1:    }
410: 1:  ],
410: 1:  'info': [
410: 1:    '✅f(a) = a',
410: 1:    '✅f(abc) = abc',
410: 1:    '✅f(abcba) = abcba',
410: 1:    '✅f(aa) = ',
410: 1:    '✅f(aaaa) = ',
410: 1:    '✅f(aaabaa) = b',
410: 1:    '✅f(aabaaa) = b',
410: 1:    '✅f(abaa) = ab',
410: 1:    '✅f(abba) = ',
410: 1:    '✅f(abbaaa) = ',
410: 1:    '✅f(abcdeedcba) = ',
410: 1:    '✅f(bcdeeedcbabcde) = abcde',
410: 1:    '✅f(fffkkhhffzzhhkkkzzrrrrryyy) = ',
410: 1:    '✅f(beellllgrhhoyy) = bgro',
410: 1:    '✅f(abbcccbad) = abad',
410: 1:    '✅f(abccbbad) = d',
410: 1:    '✅f(abcdeffedcbar) = r',
410: 1:    '❌f(abcdeffedcba) = ??? != '
410: 1:  ],
410: 1:  'level': 14,
410: 1:  'nextQuestion': 'abcdeffedcba',
410: 1:  'questions': [
410: 1:    'a',
410: 1:    'abc',
410: 1:    'abcba',
410: 1:    'aa',
410: 1:    'aaaa',
410: 1:    'aaabaa',
410: 1:    'aabaaa',
410: 1:    'abaa',
410: 1:    'abba',
410: 1:    'abbaaa',
410: 1:    'abcdeedcba',
410: 1:    'bcdeeedcbabcde',
410: 1:    'fffkkhhffzzhhkkkzzrrrrryyy',
410: 1:    'beellllgrhhoyy',
410: 1:    'abbcccbad',
410: 1:    'abccbbad',
410: 1:    'abcdeffedcbar',
410: 1:    'abcdeffedcba'
410: 1:  ]
410: 1:}
410: 1:Scores: 20699
410: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '', '', 'abcde', '', 'bgro', 'abad', 'd', 'r', '']')
410: 1:Fire Event: PassTest{complexity=20, testCount=24}
------------------------------------------
411: 1:BoardData {
411: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
411: 1:  'expectedAnswer': '',
411: 1:  'history': [
411: 1:    {
411: 1:      'answer': 'a',
411: 1:      'question': 'a',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'abc',
411: 1:      'question': 'abc',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'abcba',
411: 1:      'question': 'abcba',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': '',
411: 1:      'question': 'aa',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': '',
411: 1:      'question': 'aaaa',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'b',
411: 1:      'question': 'aaabaa',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'b',
411: 1:      'question': 'aabaaa',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'ab',
411: 1:      'question': 'abaa',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': '',
411: 1:      'question': 'abba',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': '',
411: 1:      'question': 'abbaaa',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': '',
411: 1:      'question': 'abcdeedcba',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'abcde',
411: 1:      'question': 'bcdeeedcbabcde',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': '',
411: 1:      'question': 'fffkkhhffzzhhkkkzzrrrrryyy',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'bgro',
411: 1:      'question': 'beellllgrhhoyy',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'abad',
411: 1:      'question': 'abbcccbad',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'd',
411: 1:      'question': 'abccbbad',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': 'r',
411: 1:      'question': 'abcdeffedcbar',
411: 1:      'valid': true
411: 1:    },
411: 1:    {
411: 1:      'answer': '',
411: 1:      'question': 'abcdeffedcba',
411: 1:      'valid': true
411: 1:    }
411: 1:  ],
411: 1:  'info': [
411: 1:    '✅f(a) = a',
411: 1:    '✅f(abc) = abc',
411: 1:    '✅f(abcba) = abcba',
411: 1:    '✅f(aa) = ',
411: 1:    '✅f(aaaa) = ',
411: 1:    '✅f(aaabaa) = b',
411: 1:    '✅f(aabaaa) = b',
411: 1:    '✅f(abaa) = ab',
411: 1:    '✅f(abba) = ',
411: 1:    '✅f(abbaaa) = ',
411: 1:    '✅f(abcdeedcba) = ',
411: 1:    '✅f(bcdeeedcbabcde) = abcde',
411: 1:    '✅f(fffkkhhffzzhhkkkzzrrrrryyy) = ',
411: 1:    '✅f(beellllgrhhoyy) = bgro',
411: 1:    '✅f(abbcccbad) = abad',
411: 1:    '✅f(abccbbad) = d',
411: 1:    '✅f(abcdeffedcbar) = r',
411: 1:    '✅f(abcdeffedcba) = ',
411: 1:    '❌f(abcdefaaabbbvvvfedcba) = ??? != '
411: 1:  ],
411: 1:  'level': 14,
411: 1:  'nextQuestion': 'abcdefaaabbbvvvfedcba',
411: 1:  'questions': [
411: 1:    'a',
411: 1:    'abc',
411: 1:    'abcba',
411: 1:    'aa',
411: 1:    'aaaa',
411: 1:    'aaabaa',
411: 1:    'aabaaa',
411: 1:    'abaa',
411: 1:    'abba',
411: 1:    'abbaaa',
411: 1:    'abcdeedcba',
411: 1:    'bcdeeedcbabcde',
411: 1:    'fffkkhhffzzhhkkkzzrrrrryyy',
411: 1:    'beellllgrhhoyy',
411: 1:    'abbcccbad',
411: 1:    'abccbbad',
411: 1:    'abcdeffedcbar',
411: 1:    'abcdeffedcba',
411: 1:    'abcdefaaabbbvvvfedcba'
411: 1:  ]
411: 1:}
411: 1:Scores: 20707
411: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '', '', 'abcde', '', 'bgro', 'abad', 'd', 'r', '', '']')
411: 1:Fire Event: PassTest{complexity=20, testCount=24}
------------------------------------------
412: 1:BoardData {
412: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
412: 1:  'expectedAnswer': 'uxnri',
412: 1:  'history': [
412: 1:    {
412: 1:      'answer': 'a',
412: 1:      'question': 'a',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': 'abc',
412: 1:      'question': 'abc',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': 'abcba',
412: 1:      'question': 'abcba',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': '',
412: 1:      'question': 'aa',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': '',
412: 1:      'question': 'aaaa',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': 'b',
412: 1:      'question': 'aaabaa',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': 'b',
412: 1:      'question': 'aabaaa',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': 'ab',
412: 1:      'question': 'abaa',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': '',
412: 1:      'question': 'abba',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': '',
412: 1:      'question': 'abbaaa',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': '',
412: 1:      'question': 'abcdeedcba',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': 'abcde',
412: 1:      'question': 'bcdeeedcbabcde',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': '',
412: 1:      'question': 'fffkkhhffzzhhkkkzzrrrrryyy',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': 'bgro',
412: 1:      'question': 'beellllgrhhoyy',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': 'abad',
412: 1:      'question': 'abbcccbad',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': 'd',
412: 1:      'question': 'abccbbad',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': 'r',
412: 1:      'question': 'abcdeffedcbar',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': '',
412: 1:      'question': 'abcdeffedcba',
412: 1:      'valid': true
412: 1:    },
412: 1:    {
412: 1:      'answer': '',
412: 1:      'question': 'abcdefaaabbbvvvfedcba',
412: 1:      'valid': true
412: 1:    }
412: 1:  ],
412: 1:  'info': [
412: 1:    '✅f(a) = a',
412: 1:    '✅f(abc) = abc',
412: 1:    '✅f(abcba) = abcba',
412: 1:    '✅f(aa) = ',
412: 1:    '✅f(aaaa) = ',
412: 1:    '✅f(aaabaa) = b',
412: 1:    '✅f(aabaaa) = b',
412: 1:    '✅f(abaa) = ab',
412: 1:    '✅f(abba) = ',
412: 1:    '✅f(abbaaa) = ',
412: 1:    '✅f(abcdeedcba) = ',
412: 1:    '✅f(bcdeeedcbabcde) = abcde',
412: 1:    '✅f(fffkkhhffzzhhkkkzzrrrrryyy) = ',
412: 1:    '✅f(beellllgrhhoyy) = bgro',
412: 1:    '✅f(abbcccbad) = abad',
412: 1:    '✅f(abccbbad) = d',
412: 1:    '✅f(abcdeffedcbar) = r',
412: 1:    '✅f(abcdeffedcba) = ',
412: 1:    '✅f(abcdefaaabbbvvvfedcba) = ',
412: 1:    '❌f(ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd) = ??? != uxnri'
412: 1:  ],
412: 1:  'level': 14,
412: 1:  'nextQuestion': 'ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd',
412: 1:  'questions': [
412: 1:    'a',
412: 1:    'abc',
412: 1:    'abcba',
412: 1:    'aa',
412: 1:    'aaaa',
412: 1:    'aaabaa',
412: 1:    'aabaaa',
412: 1:    'abaa',
412: 1:    'abba',
412: 1:    'abbaaa',
412: 1:    'abcdeedcba',
412: 1:    'bcdeeedcbabcde',
412: 1:    'fffkkhhffzzhhkkkzzrrrrryyy',
412: 1:    'beellllgrhhoyy',
412: 1:    'abbcccbad',
412: 1:    'abccbbad',
412: 1:    'abcdeffedcbar',
412: 1:    'abcdeffedcba',
412: 1:    'abcdefaaabbbvvvfedcba',
412: 1:    'ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd'
412: 1:  ]
412: 1:}
412: 1:Scores: 20715
412: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '', '', 'abcde', '', 'bgro', 'abad', 'd', 'r', '', '', 'uxnri']')
412: 1:Fire Event: PassTest{complexity=20, testCount=24}
------------------------------------------
413: 1:BoardData {
413: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
413: 1:  'expectedAnswer': 'tkcmam',
413: 1:  'history': [
413: 1:    {
413: 1:      'answer': 'a',
413: 1:      'question': 'a',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': 'abc',
413: 1:      'question': 'abc',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': 'abcba',
413: 1:      'question': 'abcba',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': '',
413: 1:      'question': 'aa',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': '',
413: 1:      'question': 'aaaa',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': 'b',
413: 1:      'question': 'aaabaa',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': 'b',
413: 1:      'question': 'aabaaa',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': 'ab',
413: 1:      'question': 'abaa',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': '',
413: 1:      'question': 'abba',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': '',
413: 1:      'question': 'abbaaa',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': '',
413: 1:      'question': 'abcdeedcba',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': 'abcde',
413: 1:      'question': 'bcdeeedcbabcde',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': '',
413: 1:      'question': 'fffkkhhffzzhhkkkzzrrrrryyy',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': 'bgro',
413: 1:      'question': 'beellllgrhhoyy',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': 'abad',
413: 1:      'question': 'abbcccbad',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': 'd',
413: 1:      'question': 'abccbbad',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': 'r',
413: 1:      'question': 'abcdeffedcbar',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': '',
413: 1:      'question': 'abcdeffedcba',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': '',
413: 1:      'question': 'abcdefaaabbbvvvfedcba',
413: 1:      'valid': true
413: 1:    },
413: 1:    {
413: 1:      'answer': 'uxnri',
413: 1:      'question': 'ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd',
413: 1:      'valid': true
413: 1:    }
413: 1:  ],
413: 1:  'info': [
413: 1:    '✅f(a) = a',
413: 1:    '✅f(abc) = abc',
413: 1:    '✅f(abcba) = abcba',
413: 1:    '✅f(aa) = ',
413: 1:    '✅f(aaaa) = ',
413: 1:    '✅f(aaabaa) = b',
413: 1:    '✅f(aabaaa) = b',
413: 1:    '✅f(abaa) = ab',
413: 1:    '✅f(abba) = ',
413: 1:    '✅f(abbaaa) = ',
413: 1:    '✅f(abcdeedcba) = ',
413: 1:    '✅f(bcdeeedcbabcde) = abcde',
413: 1:    '✅f(fffkkhhffzzhhkkkzzrrrrryyy) = ',
413: 1:    '✅f(beellllgrhhoyy) = bgro',
413: 1:    '✅f(abbcccbad) = abad',
413: 1:    '✅f(abccbbad) = d',
413: 1:    '✅f(abcdeffedcbar) = r',
413: 1:    '✅f(abcdeffedcba) = ',
413: 1:    '✅f(abcdefaaabbbvvvfedcba) = ',
413: 1:    '✅f(ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd) = uxnri',
413: 1:    '❌f(tnnnnnnnddddccccccckcmkkvvvbbbqqqqddannnnmbbbbsssww) = ??? != tkcmam'
413: 1:  ],
413: 1:  'level': 14,
413: 1:  'nextQuestion': 'tnnnnnnnddddccccccckcmkkvvvbbbqqqqddannnnmbbbbsssww',
413: 1:  'questions': [
413: 1:    'a',
413: 1:    'abc',
413: 1:    'abcba',
413: 1:    'aa',
413: 1:    'aaaa',
413: 1:    'aaabaa',
413: 1:    'aabaaa',
413: 1:    'abaa',
413: 1:    'abba',
413: 1:    'abbaaa',
413: 1:    'abcdeedcba',
413: 1:    'bcdeeedcbabcde',
413: 1:    'fffkkhhffzzhhkkkzzrrrrryyy',
413: 1:    'beellllgrhhoyy',
413: 1:    'abbcccbad',
413: 1:    'abccbbad',
413: 1:    'abcdeffedcbar',
413: 1:    'abcdeffedcba',
413: 1:    'abcdefaaabbbvvvfedcba',
413: 1:    'ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd',
413: 1:    'tnnnnnnnddddccccccckcmkkvvvbbbqqqqddannnnmbbbbsssww'
413: 1:  ]
413: 1:}
413: 1:Scores: 20723
413: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '', '', 'abcde', '', 'bgro', 'abad', 'd', 'r', '', '', 'uxnri', 'tkcmam']')
413: 1:Fire Event: PassTest{complexity=20, testCount=24}
------------------------------------------
414: 1:BoardData {
414: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
414: 1:  'expectedAnswer': 'parjxfyugwo',
414: 1:  'history': [
414: 1:    {
414: 1:      'answer': 'a',
414: 1:      'question': 'a',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': 'abc',
414: 1:      'question': 'abc',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': 'abcba',
414: 1:      'question': 'abcba',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': '',
414: 1:      'question': 'aa',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': '',
414: 1:      'question': 'aaaa',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': 'b',
414: 1:      'question': 'aaabaa',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': 'b',
414: 1:      'question': 'aabaaa',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': 'ab',
414: 1:      'question': 'abaa',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': '',
414: 1:      'question': 'abba',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': '',
414: 1:      'question': 'abbaaa',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': '',
414: 1:      'question': 'abcdeedcba',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': 'abcde',
414: 1:      'question': 'bcdeeedcbabcde',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': '',
414: 1:      'question': 'fffkkhhffzzhhkkkzzrrrrryyy',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': 'bgro',
414: 1:      'question': 'beellllgrhhoyy',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': 'abad',
414: 1:      'question': 'abbcccbad',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': 'd',
414: 1:      'question': 'abccbbad',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': 'r',
414: 1:      'question': 'abcdeffedcbar',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': '',
414: 1:      'question': 'abcdeffedcba',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': '',
414: 1:      'question': 'abcdefaaabbbvvvfedcba',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': 'uxnri',
414: 1:      'question': 'ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd',
414: 1:      'valid': true
414: 1:    },
414: 1:    {
414: 1:      'answer': 'tkcmam',
414: 1:      'question': 'tnnnnnnnddddccccccckcmkkvvvbbbqqqqddannnnmbbbbsssww',
414: 1:      'valid': true
414: 1:    }
414: 1:  ],
414: 1:  'info': [
414: 1:    '✅f(a) = a',
414: 1:    '✅f(abc) = abc',
414: 1:    '✅f(abcba) = abcba',
414: 1:    '✅f(aa) = ',
414: 1:    '✅f(aaaa) = ',
414: 1:    '✅f(aaabaa) = b',
414: 1:    '✅f(aabaaa) = b',
414: 1:    '✅f(abaa) = ab',
414: 1:    '✅f(abba) = ',
414: 1:    '✅f(abbaaa) = ',
414: 1:    '✅f(abcdeedcba) = ',
414: 1:    '✅f(bcdeeedcbabcde) = abcde',
414: 1:    '✅f(fffkkhhffzzhhkkkzzrrrrryyy) = ',
414: 1:    '✅f(beellllgrhhoyy) = bgro',
414: 1:    '✅f(abbcccbad) = abad',
414: 1:    '✅f(abccbbad) = d',
414: 1:    '✅f(abcdeffedcbar) = r',
414: 1:    '✅f(abcdeffedcba) = ',
414: 1:    '✅f(abcdefaaabbbvvvfedcba) = ',
414: 1:    '✅f(ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd) = uxnri',
414: 1:    '✅f(tnnnnnnnddddccccccckcmkkvvvbbbqqqqddannnnmbbbbsssww) = tkcmam',
414: 1:    '❌f(paoooovvviiggggyyyynnnnhhhrjxbbbbbbfjjjjyaaaddqqbbbccueebbbbbbgwoii) = ??? != parjxfyugwo'
414: 1:  ],
414: 1:  'level': 14,
414: 1:  'nextQuestion': 'paoooovvviiggggyyyynnnnhhhrjxbbbbbbfjjjjyaaaddqqbbbccueebbbbbbgwoii',
414: 1:  'questions': [
414: 1:    'a',
414: 1:    'abc',
414: 1:    'abcba',
414: 1:    'aa',
414: 1:    'aaaa',
414: 1:    'aaabaa',
414: 1:    'aabaaa',
414: 1:    'abaa',
414: 1:    'abba',
414: 1:    'abbaaa',
414: 1:    'abcdeedcba',
414: 1:    'bcdeeedcbabcde',
414: 1:    'fffkkhhffzzhhkkkzzrrrrryyy',
414: 1:    'beellllgrhhoyy',
414: 1:    'abbcccbad',
414: 1:    'abccbbad',
414: 1:    'abcdeffedcbar',
414: 1:    'abcdeffedcba',
414: 1:    'abcdefaaabbbvvvfedcba',
414: 1:    'ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd',
414: 1:    'tnnnnnnnddddccccccckcmkkvvvbbbqqqqddannnnmbbbbsssww',
414: 1:    'paoooovvviiggggyyyynnnnhhhrjxbbbbbbfjjjjyaaaddqqbbbccueebbbbbbgwoii'
414: 1:  ]
414: 1:}
414: 1:Scores: 20731
414: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '', '', 'abcde', '', 'bgro', 'abad', 'd', 'r', '', '', 'uxnri', 'tkcmam', 'parjxfyugwo']')
414: 1:Fire Event: PassTest{complexity=20, testCount=24}
------------------------------------------
415: 1:BoardData {
415: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
415: 1:  'expectedAnswer': 'wrecnoady',
415: 1:  'history': [
415: 1:    {
415: 1:      'answer': 'a',
415: 1:      'question': 'a',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': 'abc',
415: 1:      'question': 'abc',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': 'abcba',
415: 1:      'question': 'abcba',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': '',
415: 1:      'question': 'aa',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': '',
415: 1:      'question': 'aaaa',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': 'b',
415: 1:      'question': 'aaabaa',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': 'b',
415: 1:      'question': 'aabaaa',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': 'ab',
415: 1:      'question': 'abaa',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': '',
415: 1:      'question': 'abba',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': '',
415: 1:      'question': 'abbaaa',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': '',
415: 1:      'question': 'abcdeedcba',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': 'abcde',
415: 1:      'question': 'bcdeeedcbabcde',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': '',
415: 1:      'question': 'fffkkhhffzzhhkkkzzrrrrryyy',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': 'bgro',
415: 1:      'question': 'beellllgrhhoyy',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': 'abad',
415: 1:      'question': 'abbcccbad',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': 'd',
415: 1:      'question': 'abccbbad',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': 'r',
415: 1:      'question': 'abcdeffedcbar',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': '',
415: 1:      'question': 'abcdeffedcba',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': '',
415: 1:      'question': 'abcdefaaabbbvvvfedcba',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': 'uxnri',
415: 1:      'question': 'ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': 'tkcmam',
415: 1:      'question': 'tnnnnnnnddddccccccckcmkkvvvbbbqqqqddannnnmbbbbsssww',
415: 1:      'valid': true
415: 1:    },
415: 1:    {
415: 1:      'answer': 'parjxfyugwo',
415: 1:      'question': 'paoooovvviiggggyyyynnnnhhhrjxbbbbbbfjjjjyaaaddqqbbbccueebbbbbbgwoii',
415: 1:      'valid': true
415: 1:    }
415: 1:  ],
415: 1:  'info': [
415: 1:    '✅f(a) = a',
415: 1:    '✅f(abc) = abc',
415: 1:    '✅f(abcba) = abcba',
415: 1:    '✅f(aa) = ',
415: 1:    '✅f(aaaa) = ',
415: 1:    '✅f(aaabaa) = b',
415: 1:    '✅f(aabaaa) = b',
415: 1:    '✅f(abaa) = ab',
415: 1:    '✅f(abba) = ',
415: 1:    '✅f(abbaaa) = ',
415: 1:    '✅f(abcdeedcba) = ',
415: 1:    '✅f(bcdeeedcbabcde) = abcde',
415: 1:    '✅f(fffkkhhffzzhhkkkzzrrrrryyy) = ',
415: 1:    '✅f(beellllgrhhoyy) = bgro',
415: 1:    '✅f(abbcccbad) = abad',
415: 1:    '✅f(abccbbad) = d',
415: 1:    '✅f(abcdeffedcbar) = r',
415: 1:    '✅f(abcdeffedcba) = ',
415: 1:    '✅f(abcdefaaabbbvvvfedcba) = ',
415: 1:    '✅f(ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd) = uxnri',
415: 1:    '✅f(tnnnnnnnddddccccccckcmkkvvvbbbqqqqddannnnmbbbbsssww) = tkcmam',
415: 1:    '✅f(paoooovvviiggggyyyynnnnhhhrjxbbbbbbfjjjjyaaaddqqbbbccueebbbbbbgwoii) = parjxfyugwo',
415: 1:    '❌f(ssssiiiijjjwrbbbvvvlllkkkkesssddcnoarrrbbooyyyydssszzzeeewwy) = ??? != wrecnoady'
415: 1:  ],
415: 1:  'level': 14,
415: 1:  'nextQuestion': 'ssssiiiijjjwrbbbvvvlllkkkkesssddcnoarrrbbooyyyydssszzzeeewwy',
415: 1:  'questions': [
415: 1:    'a',
415: 1:    'abc',
415: 1:    'abcba',
415: 1:    'aa',
415: 1:    'aaaa',
415: 1:    'aaabaa',
415: 1:    'aabaaa',
415: 1:    'abaa',
415: 1:    'abba',
415: 1:    'abbaaa',
415: 1:    'abcdeedcba',
415: 1:    'bcdeeedcbabcde',
415: 1:    'fffkkhhffzzhhkkkzzrrrrryyy',
415: 1:    'beellllgrhhoyy',
415: 1:    'abbcccbad',
415: 1:    'abccbbad',
415: 1:    'abcdeffedcbar',
415: 1:    'abcdeffedcba',
415: 1:    'abcdefaaabbbvvvfedcba',
415: 1:    'ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd',
415: 1:    'tnnnnnnnddddccccccckcmkkvvvbbbqqqqddannnnmbbbbsssww',
415: 1:    'paoooovvviiggggyyyynnnnhhhrjxbbbbbbfjjjjyaaaddqqbbbccueebbbbbbgwoii',
415: 1:    'ssssiiiijjjwrbbbvvvlllkkkkesssddcnoarrrbbooyyyydssszzzeeewwy'
415: 1:  ]
415: 1:}
415: 1:Scores: 20739
415: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '', '', 'abcde', '', 'bgro', 'abad', 'd', 'r', '', '', 'uxnri', 'tkcmam', 'parjxfyugwo', 'wrecnoady']')
415: 1:Fire Event: PassTest{complexity=20, testCount=24}
------------------------------------------
416: 1:BoardData {
416: 1:  'description': ['Remove all adjacent duplicate characters from a string, as soon as you encounter them walking left to right, and ensuring that at the end NO two adjacent characters remain.\nExample: abc=>abc\nabbc=>ac\nabbbc=>ac\nabbcccbad=>abad'],
416: 1:  'expectedAnswer': 'c',
416: 1:  'history': [
416: 1:    {
416: 1:      'answer': 'a',
416: 1:      'question': 'a',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': 'abc',
416: 1:      'question': 'abc',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': 'abcba',
416: 1:      'question': 'abcba',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': '',
416: 1:      'question': 'aa',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': '',
416: 1:      'question': 'aaaa',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': 'b',
416: 1:      'question': 'aaabaa',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': 'b',
416: 1:      'question': 'aabaaa',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': 'ab',
416: 1:      'question': 'abaa',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': '',
416: 1:      'question': 'abba',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': '',
416: 1:      'question': 'abbaaa',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': '',
416: 1:      'question': 'abcdeedcba',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': 'abcde',
416: 1:      'question': 'bcdeeedcbabcde',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': '',
416: 1:      'question': 'fffkkhhffzzhhkkkzzrrrrryyy',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': 'bgro',
416: 1:      'question': 'beellllgrhhoyy',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': 'abad',
416: 1:      'question': 'abbcccbad',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': 'd',
416: 1:      'question': 'abccbbad',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': 'r',
416: 1:      'question': 'abcdeffedcbar',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': '',
416: 1:      'question': 'abcdeffedcba',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': '',
416: 1:      'question': 'abcdefaaabbbvvvfedcba',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': 'uxnri',
416: 1:      'question': 'ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': 'tkcmam',
416: 1:      'question': 'tnnnnnnnddddccccccckcmkkvvvbbbqqqqddannnnmbbbbsssww',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': 'parjxfyugwo',
416: 1:      'question': 'paoooovvviiggggyyyynnnnhhhrjxbbbbbbfjjjjyaaaddqqbbbccueebbbbbbgwoii',
416: 1:      'valid': true
416: 1:    },
416: 1:    {
416: 1:      'answer': 'wrecnoady',
416: 1:      'question': 'ssssiiiijjjwrbbbvvvlllkkkkesssddcnoarrrbbooyyyydssszzzeeewwy',
416: 1:      'valid': true
416: 1:    }
416: 1:  ],
416: 1:  'info': [
416: 1:    '✅f(a) = a',
416: 1:    '✅f(abc) = abc',
416: 1:    '✅f(abcba) = abcba',
416: 1:    '✅f(aa) = ',
416: 1:    '✅f(aaaa) = ',
416: 1:    '✅f(aaabaa) = b',
416: 1:    '✅f(aabaaa) = b',
416: 1:    '✅f(abaa) = ab',
416: 1:    '✅f(abba) = ',
416: 1:    '✅f(abbaaa) = ',
416: 1:    '✅f(abcdeedcba) = ',
416: 1:    '✅f(bcdeeedcbabcde) = abcde',
416: 1:    '✅f(fffkkhhffzzhhkkkzzrrrrryyy) = ',
416: 1:    '✅f(beellllgrhhoyy) = bgro',
416: 1:    '✅f(abbcccbad) = abad',
416: 1:    '✅f(abccbbad) = d',
416: 1:    '✅f(abcdeffedcbar) = r',
416: 1:    '✅f(abcdeffedcba) = ',
416: 1:    '✅f(abcdefaaabbbvvvfedcba) = ',
416: 1:    '✅f(ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd) = uxnri',
416: 1:    '✅f(tnnnnnnnddddccccccckcmkkvvvbbbqqqqddannnnmbbbbsssww) = tkcmam',
416: 1:    '✅f(paoooovvviiggggyyyynnnnhhhrjxbbbbbbfjjjjyaaaddqqbbbccueebbbbbbgwoii) = parjxfyugwo',
416: 1:    '✅f(ssssiiiijjjwrbbbvvvlllkkkkesssddcnoarrrbbooyyyydssszzzeeewwy) = wrecnoady',
416: 1:    '❌f(aahhhhvvvviiiiaaabbbbmmmwwwwwzzkkkkyyhhzzzzkkkkcee) = ??? != c'
416: 1:  ],
416: 1:  'level': 14,
416: 1:  'nextQuestion': 'aahhhhvvvviiiiaaabbbbmmmwwwwwzzkkkkyyhhzzzzkkkkcee',
416: 1:  'questions': [
416: 1:    'a',
416: 1:    'abc',
416: 1:    'abcba',
416: 1:    'aa',
416: 1:    'aaaa',
416: 1:    'aaabaa',
416: 1:    'aabaaa',
416: 1:    'abaa',
416: 1:    'abba',
416: 1:    'abbaaa',
416: 1:    'abcdeedcba',
416: 1:    'bcdeeedcbabcde',
416: 1:    'fffkkhhffzzhhkkkzzrrrrryyy',
416: 1:    'beellllgrhhoyy',
416: 1:    'abbcccbad',
416: 1:    'abccbbad',
416: 1:    'abcdeffedcbar',
416: 1:    'abcdeffedcba',
416: 1:    'abcdefaaabbbvvvfedcba',
416: 1:    'ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd',
416: 1:    'tnnnnnnnddddccccccckcmkkvvvbbbqqqqddannnnmbbbbsssww',
416: 1:    'paoooovvviiggggyyyynnnnhhhrjxbbbbbbfjjjjyaaaddqqbbbccueebbbbbbgwoii',
416: 1:    'ssssiiiijjjwrbbbvvvlllkkkkesssddcnoarrrbbooyyyydssszzzeeewwy',
416: 1:    'aahhhhvvvviiiiaaabbbbmmmwwwwwzzkkkkyyhhzzzzkkkkcee'
416: 1:  ]
416: 1:}
416: 1:Scores: 20747
416: 1:Answer: message('['a', 'abc', 'abcba', '', '', 'b', 'b', 'ab', '', '', '', 'abcde', '', 'bgro', 'abad', 'd', 'r', '', '', 'uxnri', 'tkcmam', 'parjxfyugwo', 'wrecnoady', 'c']')
416: 1:Fire Event: PassTest{complexity=20, testCount=24}
416: 1:Fire Event: NextAlgorithm{complexity=20, time=0}
------------------------------------------
417: 1:BoardData {
417: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
417: 1:  'history': [
417: 1:    {
417: 1:      'answer': 'a',
417: 1:      'question': 'a',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': 'abc',
417: 1:      'question': 'abc',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': 'abcba',
417: 1:      'question': 'abcba',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': '',
417: 1:      'question': 'aa',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': '',
417: 1:      'question': 'aaaa',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': 'b',
417: 1:      'question': 'aaabaa',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': 'b',
417: 1:      'question': 'aabaaa',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': 'ab',
417: 1:      'question': 'abaa',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': '',
417: 1:      'question': 'abba',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': '',
417: 1:      'question': 'abbaaa',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': '',
417: 1:      'question': 'abcdeedcba',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': 'abcde',
417: 1:      'question': 'bcdeeedcbabcde',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': '',
417: 1:      'question': 'fffkkhhffzzhhkkkzzrrrrryyy',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': 'bgro',
417: 1:      'question': 'beellllgrhhoyy',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': 'abad',
417: 1:      'question': 'abbcccbad',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': 'd',
417: 1:      'question': 'abccbbad',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': 'r',
417: 1:      'question': 'abcdeffedcbar',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': '',
417: 1:      'question': 'abcdeffedcba',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': '',
417: 1:      'question': 'abcdefaaabbbvvvfedcba',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': 'uxnri',
417: 1:      'question': 'ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': 'tkcmam',
417: 1:      'question': 'tnnnnnnnddddccccccckcmkkvvvbbbqqqqddannnnmbbbbsssww',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': 'parjxfyugwo',
417: 1:      'question': 'paoooovvviiggggyyyynnnnhhhrjxbbbbbbfjjjjyaaaddqqbbbccueebbbbbbgwoii',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': 'wrecnoady',
417: 1:      'question': 'ssssiiiijjjwrbbbvvvlllkkkkesssddcnoarrrbbooyyyydssszzzeeewwy',
417: 1:      'valid': true
417: 1:    },
417: 1:    {
417: 1:      'answer': 'c',
417: 1:      'question': 'aahhhhvvvviiiiaaabbbbmmmwwwwwzzkkkkyyhhzzzzkkkkcee',
417: 1:      'valid': true
417: 1:    }
417: 1:  ],
417: 1:  'info': [
417: 1:    '✅f(a) = a',
417: 1:    '✅f(abc) = abc',
417: 1:    '✅f(abcba) = abcba',
417: 1:    '✅f(aa) = ',
417: 1:    '✅f(aaaa) = ',
417: 1:    '✅f(aaabaa) = b',
417: 1:    '✅f(aabaaa) = b',
417: 1:    '✅f(abaa) = ab',
417: 1:    '✅f(abba) = ',
417: 1:    '✅f(abbaaa) = ',
417: 1:    '✅f(abcdeedcba) = ',
417: 1:    '✅f(bcdeeedcbabcde) = abcde',
417: 1:    '✅f(fffkkhhffzzhhkkkzzrrrrryyy) = ',
417: 1:    '✅f(beellllgrhhoyy) = bgro',
417: 1:    '✅f(abbcccbad) = abad',
417: 1:    '✅f(abccbbad) = d',
417: 1:    '✅f(abcdeffedcbar) = r',
417: 1:    '✅f(abcdeffedcba) = ',
417: 1:    '✅f(abcdefaaabbbvvvfedcba) = ',
417: 1:    '✅f(ddllppppccffmmkkkkjjggggffvvvuaaoooxtttnyyrffbbbbiqqdddd) = uxnri',
417: 1:    '✅f(tnnnnnnnddddccccccckcmkkvvvbbbqqqqddannnnmbbbbsssww) = tkcmam',
417: 1:    '✅f(paoooovvviiggggyyyynnnnhhhrjxbbbbbbfjjjjyaaaddqqbbbccueebbbbbbgwoii) = parjxfyugwo',
417: 1:    '✅f(ssssiiiijjjwrbbbvvvlllkkkkesssddcnoarrrbbooyyyydssszzzeeewwy) = wrecnoady',
417: 1:    '✅f(aahhhhvvvviiiiaaabbbbmmmwwwwwzzkkkkyyhhzzzzkkkkcee) = c'
417: 1:  ],
417: 1:  'level': 14,
417: 1:  'questions': []
417: 1:}
417: 1:Scores: 23454
417: 1:Answer: message('StartNextLevel')
417: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
418: 1:BoardData {
418: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
418: 1:  'expectedAnswer': '4',
418: 1:  'history': [],
418: 1:  'info': ['❌f(0000) = ??? != 4'],
418: 1:  'level': 15,
418: 1:  'nextQuestion': '0000',
418: 1:  'questions': ['0000']
418: 1:}
418: 1:Scores: 23454
418: 1:Answer: message('['4']')
418: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
419: 1:BoardData {
419: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
419: 1:  'expectedAnswer': '1',
419: 1:  'history': [{
419: 1:    'answer': '4',
419: 1:    'question': '0000',
419: 1:    'valid': true
419: 1:  }],
419: 1:  'info': [
419: 1:    '✅f(0000) = 4',
419: 1:    '❌f(0123) = ??? != 1'
419: 1:  ],
419: 1:  'level': 15,
419: 1:  'nextQuestion': '0123',
419: 1:  'questions': [
419: 1:    '0000',
419: 1:    '0123'
419: 1:  ]
419: 1:}
419: 1:Scores: 23459
419: 1:Answer: message('['4', '1']')
419: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
420: 1:BoardData {
420: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
420: 1:  'expectedAnswer': '1',
420: 1:  'history': [
420: 1:    {
420: 1:      'answer': '4',
420: 1:      'question': '0000',
420: 1:      'valid': true
420: 1:    },
420: 1:    {
420: 1:      'answer': '1',
420: 1:      'question': '0123',
420: 1:      'valid': true
420: 1:    }
420: 1:  ],
420: 1:  'info': [
420: 1:    '✅f(0000) = 4',
420: 1:    '✅f(0123) = 1',
420: 1:    '❌f(4567) = ??? != 1'
420: 1:  ],
420: 1:  'level': 15,
420: 1:  'nextQuestion': '4567',
420: 1:  'questions': [
420: 1:    '0000',
420: 1:    '0123',
420: 1:    '4567'
420: 1:  ]
420: 1:}
420: 1:Scores: 23464
420: 1:Answer: message('['4', '1', '1']')
420: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
421: 1:BoardData {
421: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
421: 1:  'expectedAnswer': '4',
421: 1:  'history': [
421: 1:    {
421: 1:      'answer': '4',
421: 1:      'question': '0000',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': '1',
421: 1:      'question': '0123',
421: 1:      'valid': true
421: 1:    },
421: 1:    {
421: 1:      'answer': '1',
421: 1:      'question': '4567',
421: 1:      'valid': true
421: 1:    }
421: 1:  ],
421: 1:  'info': [
421: 1:    '✅f(0000) = 4',
421: 1:    '✅f(0123) = 1',
421: 1:    '✅f(4567) = 1',
421: 1:    '❌f(8901) = ??? != 4'
421: 1:  ],
421: 1:  'level': 15,
421: 1:  'nextQuestion': '8901',
421: 1:  'questions': [
421: 1:    '0000',
421: 1:    '0123',
421: 1:    '4567',
421: 1:    '8901'
421: 1:  ]
421: 1:}
421: 1:Scores: 23469
421: 1:Answer: message('['4', '1', '1', '4']')
421: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
422: 1:BoardData {
422: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
422: 1:  'expectedAnswer': '0',
422: 1:  'history': [
422: 1:    {
422: 1:      'answer': '4',
422: 1:      'question': '0000',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': '1',
422: 1:      'question': '0123',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': '1',
422: 1:      'question': '4567',
422: 1:      'valid': true
422: 1:    },
422: 1:    {
422: 1:      'answer': '4',
422: 1:      'question': '8901',
422: 1:      'valid': true
422: 1:    }
422: 1:  ],
422: 1:  'info': [
422: 1:    '✅f(0000) = 4',
422: 1:    '✅f(0123) = 1',
422: 1:    '✅f(4567) = 1',
422: 1:    '✅f(8901) = 4',
422: 1:    '❌f(1111) = ??? != 0'
422: 1:  ],
422: 1:  'level': 15,
422: 1:  'nextQuestion': '1111',
422: 1:  'questions': [
422: 1:    '0000',
422: 1:    '0123',
422: 1:    '4567',
422: 1:    '8901',
422: 1:    '1111'
422: 1:  ]
422: 1:}
422: 1:Scores: 23474
422: 1:Answer: message('['4', '1', '1', '4', '0']')
422: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
423: 1:BoardData {
423: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
423: 1:  'expectedAnswer': '2',
423: 1:  'history': [
423: 1:    {
423: 1:      'answer': '4',
423: 1:      'question': '0000',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': '1',
423: 1:      'question': '0123',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': '1',
423: 1:      'question': '4567',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': '4',
423: 1:      'question': '8901',
423: 1:      'valid': true
423: 1:    },
423: 1:    {
423: 1:      'answer': '0',
423: 1:      'question': '1111',
423: 1:      'valid': true
423: 1:    }
423: 1:  ],
423: 1:  'info': [
423: 1:    '✅f(0000) = 4',
423: 1:    '✅f(0123) = 1',
423: 1:    '✅f(4567) = 1',
423: 1:    '✅f(8901) = 4',
423: 1:    '✅f(1111) = 0',
423: 1:    '❌f(3366) = ??? != 2'
423: 1:  ],
423: 1:  'level': 15,
423: 1:  'nextQuestion': '3366',
423: 1:  'questions': [
423: 1:    '0000',
423: 1:    '0123',
423: 1:    '4567',
423: 1:    '8901',
423: 1:    '1111',
423: 1:    '3366'
423: 1:  ]
423: 1:}
423: 1:Scores: 23479
423: 1:Answer: message('['4', '1', '1', '4', '0', '2']')
423: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
424: 1:BoardData {
424: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
424: 1:  'expectedAnswer': '6',
424: 1:  'history': [
424: 1:    {
424: 1:      'answer': '4',
424: 1:      'question': '0000',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '1',
424: 1:      'question': '0123',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '1',
424: 1:      'question': '4567',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '4',
424: 1:      'question': '8901',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '0',
424: 1:      'question': '1111',
424: 1:      'valid': true
424: 1:    },
424: 1:    {
424: 1:      'answer': '2',
424: 1:      'question': '3366',
424: 1:      'valid': true
424: 1:    }
424: 1:  ],
424: 1:  'info': [
424: 1:    '✅f(0000) = 4',
424: 1:    '✅f(0123) = 1',
424: 1:    '✅f(4567) = 1',
424: 1:    '✅f(8901) = 4',
424: 1:    '✅f(1111) = 0',
424: 1:    '✅f(3366) = 2',
424: 1:    '❌f(8899) = ??? != 6'
424: 1:  ],
424: 1:  'level': 15,
424: 1:  'nextQuestion': '8899',
424: 1:  'questions': [
424: 1:    '0000',
424: 1:    '0123',
424: 1:    '4567',
424: 1:    '8901',
424: 1:    '1111',
424: 1:    '3366',
424: 1:    '8899'
424: 1:  ]
424: 1:}
424: 1:Scores: 23484
424: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6']')
424: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
425: 1:BoardData {
425: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
425: 1:  'expectedAnswer': '5',
425: 1:  'history': [
425: 1:    {
425: 1:      'answer': '4',
425: 1:      'question': '0000',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '1',
425: 1:      'question': '0123',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '1',
425: 1:      'question': '4567',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '4',
425: 1:      'question': '8901',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '0',
425: 1:      'question': '1111',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '2',
425: 1:      'question': '3366',
425: 1:      'valid': true
425: 1:    },
425: 1:    {
425: 1:      'answer': '6',
425: 1:      'question': '8899',
425: 1:      'valid': true
425: 1:    }
425: 1:  ],
425: 1:  'info': [
425: 1:    '✅f(0000) = 4',
425: 1:    '✅f(0123) = 1',
425: 1:    '✅f(4567) = 1',
425: 1:    '✅f(8901) = 4',
425: 1:    '✅f(1111) = 0',
425: 1:    '✅f(3366) = 2',
425: 1:    '✅f(8899) = 6',
425: 1:    '❌f(0896) = ??? != 5'
425: 1:  ],
425: 1:  'level': 15,
425: 1:  'nextQuestion': '0896',
425: 1:  'questions': [
425: 1:    '0000',
425: 1:    '0123',
425: 1:    '4567',
425: 1:    '8901',
425: 1:    '1111',
425: 1:    '3366',
425: 1:    '8899',
425: 1:    '0896'
425: 1:  ]
425: 1:}
425: 1:Scores: 23489
425: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5']')
425: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
426: 1:BoardData {
426: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
426: 1:  'expectedAnswer': '0',
426: 1:  'history': [
426: 1:    {
426: 1:      'answer': '4',
426: 1:      'question': '0000',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '1',
426: 1:      'question': '0123',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '1',
426: 1:      'question': '4567',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '4',
426: 1:      'question': '8901',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '0',
426: 1:      'question': '1111',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '2',
426: 1:      'question': '3366',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '6',
426: 1:      'question': '8899',
426: 1:      'valid': true
426: 1:    },
426: 1:    {
426: 1:      'answer': '5',
426: 1:      'question': '0896',
426: 1:      'valid': true
426: 1:    }
426: 1:  ],
426: 1:  'info': [
426: 1:    '✅f(0000) = 4',
426: 1:    '✅f(0123) = 1',
426: 1:    '✅f(4567) = 1',
426: 1:    '✅f(8901) = 4',
426: 1:    '✅f(1111) = 0',
426: 1:    '✅f(3366) = 2',
426: 1:    '✅f(8899) = 6',
426: 1:    '✅f(0896) = 5',
426: 1:    '❌f(3333) = ??? != 0'
426: 1:  ],
426: 1:  'level': 15,
426: 1:  'nextQuestion': '3333',
426: 1:  'questions': [
426: 1:    '0000',
426: 1:    '0123',
426: 1:    '4567',
426: 1:    '8901',
426: 1:    '1111',
426: 1:    '3366',
426: 1:    '8899',
426: 1:    '0896',
426: 1:    '3333'
426: 1:  ]
426: 1:}
426: 1:Scores: 23494
426: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0']')
426: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
427: 1:BoardData {
427: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
427: 1:  'expectedAnswer': '0',
427: 1:  'history': [
427: 1:    {
427: 1:      'answer': '4',
427: 1:      'question': '0000',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '1',
427: 1:      'question': '0123',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '1',
427: 1:      'question': '4567',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '4',
427: 1:      'question': '8901',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '0',
427: 1:      'question': '1111',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '2',
427: 1:      'question': '3366',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '6',
427: 1:      'question': '8899',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '5',
427: 1:      'question': '0896',
427: 1:      'valid': true
427: 1:    },
427: 1:    {
427: 1:      'answer': '0',
427: 1:      'question': '3333',
427: 1:      'valid': true
427: 1:    }
427: 1:  ],
427: 1:  'info': [
427: 1:    '✅f(0000) = 4',
427: 1:    '✅f(0123) = 1',
427: 1:    '✅f(4567) = 1',
427: 1:    '✅f(8901) = 4',
427: 1:    '✅f(1111) = 0',
427: 1:    '✅f(3366) = 2',
427: 1:    '✅f(8899) = 6',
427: 1:    '✅f(0896) = 5',
427: 1:    '✅f(3333) = 0',
427: 1:    '❌f(4444) = ??? != 0'
427: 1:  ],
427: 1:  'level': 15,
427: 1:  'nextQuestion': '4444',
427: 1:  'questions': [
427: 1:    '0000',
427: 1:    '0123',
427: 1:    '4567',
427: 1:    '8901',
427: 1:    '1111',
427: 1:    '3366',
427: 1:    '8899',
427: 1:    '0896',
427: 1:    '3333',
427: 1:    '4444'
427: 1:  ]
427: 1:}
427: 1:Scores: 23499
427: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0']')
427: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
428: 1:BoardData {
428: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
428: 1:  'expectedAnswer': '2',
428: 1:  'history': [
428: 1:    {
428: 1:      'answer': '4',
428: 1:      'question': '0000',
428: 1:      'valid': true
428: 1:    },
428: 1:    {
428: 1:      'answer': '1',
428: 1:      'question': '0123',
428: 1:      'valid': true
428: 1:    },
428: 1:    {
428: 1:      'answer': '1',
428: 1:      'question': '4567',
428: 1:      'valid': true
428: 1:    },
428: 1:    {
428: 1:      'answer': '4',
428: 1:      'question': '8901',
428: 1:      'valid': true
428: 1:    },
428: 1:    {
428: 1:      'answer': '0',
428: 1:      'question': '1111',
428: 1:      'valid': true
428: 1:    },
428: 1:    {
428: 1:      'answer': '2',
428: 1:      'question': '3366',
428: 1:      'valid': true
428: 1:    },
428: 1:    {
428: 1:      'answer': '6',
428: 1:      'question': '8899',
428: 1:      'valid': true
428: 1:    },
428: 1:    {
428: 1:      'answer': '5',
428: 1:      'question': '0896',
428: 1:      'valid': true
428: 1:    },
428: 1:    {
428: 1:      'answer': '0',
428: 1:      'question': '3333',
428: 1:      'valid': true
428: 1:    },
428: 1:    {
428: 1:      'answer': '0',
428: 1:      'question': '4444',
428: 1:      'valid': true
428: 1:    }
428: 1:  ],
428: 1:  'info': [
428: 1:    '✅f(0000) = 4',
428: 1:    '✅f(0123) = 1',
428: 1:    '✅f(4567) = 1',
428: 1:    '✅f(8901) = 4',
428: 1:    '✅f(1111) = 0',
428: 1:    '✅f(3366) = 2',
428: 1:    '✅f(8899) = 6',
428: 1:    '✅f(0896) = 5',
428: 1:    '✅f(3333) = 0',
428: 1:    '✅f(4444) = 0',
428: 1:    '❌f(6677) = ??? != 2'
428: 1:  ],
428: 1:  'level': 15,
428: 1:  'nextQuestion': '6677',
428: 1:  'questions': [
428: 1:    '0000',
428: 1:    '0123',
428: 1:    '4567',
428: 1:    '8901',
428: 1:    '1111',
428: 1:    '3366',
428: 1:    '8899',
428: 1:    '0896',
428: 1:    '3333',
428: 1:    '4444',
428: 1:    '6677'
428: 1:  ]
428: 1:}
428: 1:Scores: 23504
428: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2']')
428: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
429: 1:BoardData {
429: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
429: 1:  'expectedAnswer': '6',
429: 1:  'history': [
429: 1:    {
429: 1:      'answer': '4',
429: 1:      'question': '0000',
429: 1:      'valid': true
429: 1:    },
429: 1:    {
429: 1:      'answer': '1',
429: 1:      'question': '0123',
429: 1:      'valid': true
429: 1:    },
429: 1:    {
429: 1:      'answer': '1',
429: 1:      'question': '4567',
429: 1:      'valid': true
429: 1:    },
429: 1:    {
429: 1:      'answer': '4',
429: 1:      'question': '8901',
429: 1:      'valid': true
429: 1:    },
429: 1:    {
429: 1:      'answer': '0',
429: 1:      'question': '1111',
429: 1:      'valid': true
429: 1:    },
429: 1:    {
429: 1:      'answer': '2',
429: 1:      'question': '3366',
429: 1:      'valid': true
429: 1:    },
429: 1:    {
429: 1:      'answer': '6',
429: 1:      'question': '8899',
429: 1:      'valid': true
429: 1:    },
429: 1:    {
429: 1:      'answer': '5',
429: 1:      'question': '0896',
429: 1:      'valid': true
429: 1:    },
429: 1:    {
429: 1:      'answer': '0',
429: 1:      'question': '3333',
429: 1:      'valid': true
429: 1:    },
429: 1:    {
429: 1:      'answer': '0',
429: 1:      'question': '4444',
429: 1:      'valid': true
429: 1:    },
429: 1:    {
429: 1:      'answer': '2',
429: 1:      'question': '6677',
429: 1:      'valid': true
429: 1:    }
429: 1:  ],
429: 1:  'info': [
429: 1:    '✅f(0000) = 4',
429: 1:    '✅f(0123) = 1',
429: 1:    '✅f(4567) = 1',
429: 1:    '✅f(8901) = 4',
429: 1:    '✅f(1111) = 0',
429: 1:    '✅f(3366) = 2',
429: 1:    '✅f(8899) = 6',
429: 1:    '✅f(0896) = 5',
429: 1:    '✅f(3333) = 0',
429: 1:    '✅f(4444) = 0',
429: 1:    '✅f(6677) = 2',
429: 1:    '❌f(8809) = ??? != 6'
429: 1:  ],
429: 1:  'level': 15,
429: 1:  'nextQuestion': '8809',
429: 1:  'questions': [
429: 1:    '0000',
429: 1:    '0123',
429: 1:    '4567',
429: 1:    '8901',
429: 1:    '1111',
429: 1:    '3366',
429: 1:    '8899',
429: 1:    '0896',
429: 1:    '3333',
429: 1:    '4444',
429: 1:    '6677',
429: 1:    '8809'
429: 1:  ]
429: 1:}
429: 1:Scores: 23509
429: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6']')
429: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
430: 1:BoardData {
430: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
430: 1:  'expectedAnswer': '0',
430: 1:  'history': [
430: 1:    {
430: 1:      'answer': '4',
430: 1:      'question': '0000',
430: 1:      'valid': true
430: 1:    },
430: 1:    {
430: 1:      'answer': '1',
430: 1:      'question': '0123',
430: 1:      'valid': true
430: 1:    },
430: 1:    {
430: 1:      'answer': '1',
430: 1:      'question': '4567',
430: 1:      'valid': true
430: 1:    },
430: 1:    {
430: 1:      'answer': '4',
430: 1:      'question': '8901',
430: 1:      'valid': true
430: 1:    },
430: 1:    {
430: 1:      'answer': '0',
430: 1:      'question': '1111',
430: 1:      'valid': true
430: 1:    },
430: 1:    {
430: 1:      'answer': '2',
430: 1:      'question': '3366',
430: 1:      'valid': true
430: 1:    },
430: 1:    {
430: 1:      'answer': '6',
430: 1:      'question': '8899',
430: 1:      'valid': true
430: 1:    },
430: 1:    {
430: 1:      'answer': '5',
430: 1:      'question': '0896',
430: 1:      'valid': true
430: 1:    },
430: 1:    {
430: 1:      'answer': '0',
430: 1:      'question': '3333',
430: 1:      'valid': true
430: 1:    },
430: 1:    {
430: 1:      'answer': '0',
430: 1:      'question': '4444',
430: 1:      'valid': true
430: 1:    },
430: 1:    {
430: 1:      'answer': '2',
430: 1:      'question': '6677',
430: 1:      'valid': true
430: 1:    },
430: 1:    {
430: 1:      'answer': '6',
430: 1:      'question': '8809',
430: 1:      'valid': true
430: 1:    }
430: 1:  ],
430: 1:  'info': [
430: 1:    '✅f(0000) = 4',
430: 1:    '✅f(0123) = 1',
430: 1:    '✅f(4567) = 1',
430: 1:    '✅f(8901) = 4',
430: 1:    '✅f(1111) = 0',
430: 1:    '✅f(3366) = 2',
430: 1:    '✅f(8899) = 6',
430: 1:    '✅f(0896) = 5',
430: 1:    '✅f(3333) = 0',
430: 1:    '✅f(4444) = 0',
430: 1:    '✅f(6677) = 2',
430: 1:    '✅f(8809) = 6',
430: 1:    '❌f(7111) = ??? != 0'
430: 1:  ],
430: 1:  'level': 15,
430: 1:  'nextQuestion': '7111',
430: 1:  'questions': [
430: 1:    '0000',
430: 1:    '0123',
430: 1:    '4567',
430: 1:    '8901',
430: 1:    '1111',
430: 1:    '3366',
430: 1:    '8899',
430: 1:    '0896',
430: 1:    '3333',
430: 1:    '4444',
430: 1:    '6677',
430: 1:    '8809',
430: 1:    '7111'
430: 1:  ]
430: 1:}
430: 1:Scores: 23514
430: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0']')
430: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
431: 1:BoardData {
431: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
431: 1:  'expectedAnswer': '0',
431: 1:  'history': [
431: 1:    {
431: 1:      'answer': '4',
431: 1:      'question': '0000',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': '1',
431: 1:      'question': '0123',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': '1',
431: 1:      'question': '4567',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': '4',
431: 1:      'question': '8901',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': '0',
431: 1:      'question': '1111',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': '2',
431: 1:      'question': '3366',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': '6',
431: 1:      'question': '8899',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': '5',
431: 1:      'question': '0896',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': '0',
431: 1:      'question': '3333',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': '0',
431: 1:      'question': '4444',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': '2',
431: 1:      'question': '6677',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': '6',
431: 1:      'question': '8809',
431: 1:      'valid': true
431: 1:    },
431: 1:    {
431: 1:      'answer': '0',
431: 1:      'question': '7111',
431: 1:      'valid': true
431: 1:    }
431: 1:  ],
431: 1:  'info': [
431: 1:    '✅f(0000) = 4',
431: 1:    '✅f(0123) = 1',
431: 1:    '✅f(4567) = 1',
431: 1:    '✅f(8901) = 4',
431: 1:    '✅f(1111) = 0',
431: 1:    '✅f(3366) = 2',
431: 1:    '✅f(8899) = 6',
431: 1:    '✅f(0896) = 5',
431: 1:    '✅f(3333) = 0',
431: 1:    '✅f(4444) = 0',
431: 1:    '✅f(6677) = 2',
431: 1:    '✅f(8809) = 6',
431: 1:    '✅f(7111) = 0',
431: 1:    '❌f(2172) = ??? != 0'
431: 1:  ],
431: 1:  'level': 15,
431: 1:  'nextQuestion': '2172',
431: 1:  'questions': [
431: 1:    '0000',
431: 1:    '0123',
431: 1:    '4567',
431: 1:    '8901',
431: 1:    '1111',
431: 1:    '3366',
431: 1:    '8899',
431: 1:    '0896',
431: 1:    '3333',
431: 1:    '4444',
431: 1:    '6677',
431: 1:    '8809',
431: 1:    '7111',
431: 1:    '2172'
431: 1:  ]
431: 1:}
431: 1:Scores: 23519
431: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0']')
431: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
432: 1:BoardData {
432: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
432: 1:  'expectedAnswer': '4',
432: 1:  'history': [
432: 1:    {
432: 1:      'answer': '4',
432: 1:      'question': '0000',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': '1',
432: 1:      'question': '0123',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': '1',
432: 1:      'question': '4567',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': '4',
432: 1:      'question': '8901',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': '0',
432: 1:      'question': '1111',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': '2',
432: 1:      'question': '3366',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': '6',
432: 1:      'question': '8899',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': '5',
432: 1:      'question': '0896',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': '0',
432: 1:      'question': '3333',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': '0',
432: 1:      'question': '4444',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': '2',
432: 1:      'question': '6677',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': '6',
432: 1:      'question': '8809',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': '0',
432: 1:      'question': '7111',
432: 1:      'valid': true
432: 1:    },
432: 1:    {
432: 1:      'answer': '0',
432: 1:      'question': '2172',
432: 1:      'valid': true
432: 1:    }
432: 1:  ],
432: 1:  'info': [
432: 1:    '✅f(0000) = 4',
432: 1:    '✅f(0123) = 1',
432: 1:    '✅f(4567) = 1',
432: 1:    '✅f(8901) = 4',
432: 1:    '✅f(1111) = 0',
432: 1:    '✅f(3366) = 2',
432: 1:    '✅f(8899) = 6',
432: 1:    '✅f(0896) = 5',
432: 1:    '✅f(3333) = 0',
432: 1:    '✅f(4444) = 0',
432: 1:    '✅f(6677) = 2',
432: 1:    '✅f(8809) = 6',
432: 1:    '✅f(7111) = 0',
432: 1:    '✅f(2172) = 0',
432: 1:    '❌f(6666) = ??? != 4'
432: 1:  ],
432: 1:  'level': 15,
432: 1:  'nextQuestion': '6666',
432: 1:  'questions': [
432: 1:    '0000',
432: 1:    '0123',
432: 1:    '4567',
432: 1:    '8901',
432: 1:    '1111',
432: 1:    '3366',
432: 1:    '8899',
432: 1:    '0896',
432: 1:    '3333',
432: 1:    '4444',
432: 1:    '6677',
432: 1:    '8809',
432: 1:    '7111',
432: 1:    '2172',
432: 1:    '6666'
432: 1:  ]
432: 1:}
432: 1:Scores: 23524
432: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4']')
432: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
433: 1:BoardData {
433: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
433: 1:  'expectedAnswer': '0',
433: 1:  'history': [
433: 1:    {
433: 1:      'answer': '4',
433: 1:      'question': '0000',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': '1',
433: 1:      'question': '0123',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': '1',
433: 1:      'question': '4567',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': '4',
433: 1:      'question': '8901',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': '0',
433: 1:      'question': '1111',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': '2',
433: 1:      'question': '3366',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': '6',
433: 1:      'question': '8899',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': '5',
433: 1:      'question': '0896',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': '0',
433: 1:      'question': '3333',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': '0',
433: 1:      'question': '4444',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': '2',
433: 1:      'question': '6677',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': '6',
433: 1:      'question': '8809',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': '0',
433: 1:      'question': '7111',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': '0',
433: 1:      'question': '2172',
433: 1:      'valid': true
433: 1:    },
433: 1:    {
433: 1:      'answer': '4',
433: 1:      'question': '6666',
433: 1:      'valid': true
433: 1:    }
433: 1:  ],
433: 1:  'info': [
433: 1:    '✅f(0000) = 4',
433: 1:    '✅f(0123) = 1',
433: 1:    '✅f(4567) = 1',
433: 1:    '✅f(8901) = 4',
433: 1:    '✅f(1111) = 0',
433: 1:    '✅f(3366) = 2',
433: 1:    '✅f(8899) = 6',
433: 1:    '✅f(0896) = 5',
433: 1:    '✅f(3333) = 0',
433: 1:    '✅f(4444) = 0',
433: 1:    '✅f(6677) = 2',
433: 1:    '✅f(8809) = 6',
433: 1:    '✅f(7111) = 0',
433: 1:    '✅f(2172) = 0',
433: 1:    '✅f(6666) = 4',
433: 1:    '❌f(3213) = ??? != 0'
433: 1:  ],
433: 1:  'level': 15,
433: 1:  'nextQuestion': '3213',
433: 1:  'questions': [
433: 1:    '0000',
433: 1:    '0123',
433: 1:    '4567',
433: 1:    '8901',
433: 1:    '1111',
433: 1:    '3366',
433: 1:    '8899',
433: 1:    '0896',
433: 1:    '3333',
433: 1:    '4444',
433: 1:    '6677',
433: 1:    '8809',
433: 1:    '7111',
433: 1:    '2172',
433: 1:    '6666',
433: 1:    '3213'
433: 1:  ]
433: 1:}
433: 1:Scores: 23529
433: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0']')
433: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
434: 1:BoardData {
434: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
434: 1:  'expectedAnswer': '2',
434: 1:  'history': [
434: 1:    {
434: 1:      'answer': '4',
434: 1:      'question': '0000',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': '1',
434: 1:      'question': '0123',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': '1',
434: 1:      'question': '4567',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': '4',
434: 1:      'question': '8901',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': '0',
434: 1:      'question': '1111',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': '2',
434: 1:      'question': '3366',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': '6',
434: 1:      'question': '8899',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': '5',
434: 1:      'question': '0896',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': '0',
434: 1:      'question': '3333',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': '0',
434: 1:      'question': '4444',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': '2',
434: 1:      'question': '6677',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': '6',
434: 1:      'question': '8809',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': '0',
434: 1:      'question': '7111',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': '0',
434: 1:      'question': '2172',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': '4',
434: 1:      'question': '6666',
434: 1:      'valid': true
434: 1:    },
434: 1:    {
434: 1:      'answer': '0',
434: 1:      'question': '3213',
434: 1:      'valid': true
434: 1:    }
434: 1:  ],
434: 1:  'info': [
434: 1:    '✅f(0000) = 4',
434: 1:    '✅f(0123) = 1',
434: 1:    '✅f(4567) = 1',
434: 1:    '✅f(8901) = 4',
434: 1:    '✅f(1111) = 0',
434: 1:    '✅f(3366) = 2',
434: 1:    '✅f(8899) = 6',
434: 1:    '✅f(0896) = 5',
434: 1:    '✅f(3333) = 0',
434: 1:    '✅f(4444) = 0',
434: 1:    '✅f(6677) = 2',
434: 1:    '✅f(8809) = 6',
434: 1:    '✅f(7111) = 0',
434: 1:    '✅f(2172) = 0',
434: 1:    '✅f(6666) = 4',
434: 1:    '✅f(3213) = 0',
434: 1:    '❌f(7662) = ??? != 2'
434: 1:  ],
434: 1:  'level': 15,
434: 1:  'nextQuestion': '7662',
434: 1:  'questions': [
434: 1:    '0000',
434: 1:    '0123',
434: 1:    '4567',
434: 1:    '8901',
434: 1:    '1111',
434: 1:    '3366',
434: 1:    '8899',
434: 1:    '0896',
434: 1:    '3333',
434: 1:    '4444',
434: 1:    '6677',
434: 1:    '8809',
434: 1:    '7111',
434: 1:    '2172',
434: 1:    '6666',
434: 1:    '3213',
434: 1:    '7662'
434: 1:  ]
434: 1:}
434: 1:Scores: 23534
434: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2']')
434: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
435: 1:BoardData {
435: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
435: 1:  'expectedAnswer': '1',
435: 1:  'history': [
435: 1:    {
435: 1:      'answer': '4',
435: 1:      'question': '0000',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': '1',
435: 1:      'question': '0123',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': '1',
435: 1:      'question': '4567',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': '4',
435: 1:      'question': '8901',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': '0',
435: 1:      'question': '1111',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': '2',
435: 1:      'question': '3366',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': '6',
435: 1:      'question': '8899',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': '5',
435: 1:      'question': '0896',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': '0',
435: 1:      'question': '3333',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': '0',
435: 1:      'question': '4444',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': '2',
435: 1:      'question': '6677',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': '6',
435: 1:      'question': '8809',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': '0',
435: 1:      'question': '7111',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': '0',
435: 1:      'question': '2172',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': '4',
435: 1:      'question': '6666',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': '0',
435: 1:      'question': '3213',
435: 1:      'valid': true
435: 1:    },
435: 1:    {
435: 1:      'answer': '2',
435: 1:      'question': '7662',
435: 1:      'valid': true
435: 1:    }
435: 1:  ],
435: 1:  'info': [
435: 1:    '✅f(0000) = 4',
435: 1:    '✅f(0123) = 1',
435: 1:    '✅f(4567) = 1',
435: 1:    '✅f(8901) = 4',
435: 1:    '✅f(1111) = 0',
435: 1:    '✅f(3366) = 2',
435: 1:    '✅f(8899) = 6',
435: 1:    '✅f(0896) = 5',
435: 1:    '✅f(3333) = 0',
435: 1:    '✅f(4444) = 0',
435: 1:    '✅f(6677) = 2',
435: 1:    '✅f(8809) = 6',
435: 1:    '✅f(7111) = 0',
435: 1:    '✅f(2172) = 0',
435: 1:    '✅f(6666) = 4',
435: 1:    '✅f(3213) = 0',
435: 1:    '✅f(7662) = 2',
435: 1:    '❌f(9312) = ??? != 1'
435: 1:  ],
435: 1:  'level': 15,
435: 1:  'nextQuestion': '9312',
435: 1:  'questions': [
435: 1:    '0000',
435: 1:    '0123',
435: 1:    '4567',
435: 1:    '8901',
435: 1:    '1111',
435: 1:    '3366',
435: 1:    '8899',
435: 1:    '0896',
435: 1:    '3333',
435: 1:    '4444',
435: 1:    '6677',
435: 1:    '8809',
435: 1:    '7111',
435: 1:    '2172',
435: 1:    '6666',
435: 1:    '3213',
435: 1:    '7662',
435: 1:    '9312'
435: 1:  ]
435: 1:}
435: 1:Scores: 23539
435: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1']')
435: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
436: 1:BoardData {
436: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
436: 1:  'expectedAnswer': '0',
436: 1:  'history': [
436: 1:    {
436: 1:      'answer': '4',
436: 1:      'question': '0000',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': '1',
436: 1:      'question': '0123',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': '1',
436: 1:      'question': '4567',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': '4',
436: 1:      'question': '8901',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': '0',
436: 1:      'question': '1111',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': '2',
436: 1:      'question': '3366',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': '6',
436: 1:      'question': '8899',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': '5',
436: 1:      'question': '0896',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': '0',
436: 1:      'question': '3333',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': '0',
436: 1:      'question': '4444',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': '2',
436: 1:      'question': '6677',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': '6',
436: 1:      'question': '8809',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': '0',
436: 1:      'question': '7111',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': '0',
436: 1:      'question': '2172',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': '4',
436: 1:      'question': '6666',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': '0',
436: 1:      'question': '3213',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': '2',
436: 1:      'question': '7662',
436: 1:      'valid': true
436: 1:    },
436: 1:    {
436: 1:      'answer': '1',
436: 1:      'question': '9312',
436: 1:      'valid': true
436: 1:    }
436: 1:  ],
436: 1:  'info': [
436: 1:    '✅f(0000) = 4',
436: 1:    '✅f(0123) = 1',
436: 1:    '✅f(4567) = 1',
436: 1:    '✅f(8901) = 4',
436: 1:    '✅f(1111) = 0',
436: 1:    '✅f(3366) = 2',
436: 1:    '✅f(8899) = 6',
436: 1:    '✅f(0896) = 5',
436: 1:    '✅f(3333) = 0',
436: 1:    '✅f(4444) = 0',
436: 1:    '✅f(6677) = 2',
436: 1:    '✅f(8809) = 6',
436: 1:    '✅f(7111) = 0',
436: 1:    '✅f(2172) = 0',
436: 1:    '✅f(6666) = 4',
436: 1:    '✅f(3213) = 0',
436: 1:    '✅f(7662) = 2',
436: 1:    '✅f(9312) = 1',
436: 1:    '❌f(2222) = ??? != 0'
436: 1:  ],
436: 1:  'level': 15,
436: 1:  'nextQuestion': '2222',
436: 1:  'questions': [
436: 1:    '0000',
436: 1:    '0123',
436: 1:    '4567',
436: 1:    '8901',
436: 1:    '1111',
436: 1:    '3366',
436: 1:    '8899',
436: 1:    '0896',
436: 1:    '3333',
436: 1:    '4444',
436: 1:    '6677',
436: 1:    '8809',
436: 1:    '7111',
436: 1:    '2172',
436: 1:    '6666',
436: 1:    '3213',
436: 1:    '7662',
436: 1:    '9312',
436: 1:    '2222'
436: 1:  ]
436: 1:}
436: 1:Scores: 23544
436: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0']')
436: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
437: 1:BoardData {
437: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
437: 1:  'expectedAnswer': '0',
437: 1:  'history': [
437: 1:    {
437: 1:      'answer': '4',
437: 1:      'question': '0000',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': '1',
437: 1:      'question': '0123',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': '1',
437: 1:      'question': '4567',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': '4',
437: 1:      'question': '8901',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': '0',
437: 1:      'question': '1111',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': '2',
437: 1:      'question': '3366',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': '6',
437: 1:      'question': '8899',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': '5',
437: 1:      'question': '0896',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': '0',
437: 1:      'question': '3333',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': '0',
437: 1:      'question': '4444',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': '2',
437: 1:      'question': '6677',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': '6',
437: 1:      'question': '8809',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': '0',
437: 1:      'question': '7111',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': '0',
437: 1:      'question': '2172',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': '4',
437: 1:      'question': '6666',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': '0',
437: 1:      'question': '3213',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': '2',
437: 1:      'question': '7662',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': '1',
437: 1:      'question': '9312',
437: 1:      'valid': true
437: 1:    },
437: 1:    {
437: 1:      'answer': '0',
437: 1:      'question': '2222',
437: 1:      'valid': true
437: 1:    }
437: 1:  ],
437: 1:  'info': [
437: 1:    '✅f(0000) = 4',
437: 1:    '✅f(0123) = 1',
437: 1:    '✅f(4567) = 1',
437: 1:    '✅f(8901) = 4',
437: 1:    '✅f(1111) = 0',
437: 1:    '✅f(3366) = 2',
437: 1:    '✅f(8899) = 6',
437: 1:    '✅f(0896) = 5',
437: 1:    '✅f(3333) = 0',
437: 1:    '✅f(4444) = 0',
437: 1:    '✅f(6677) = 2',
437: 1:    '✅f(8809) = 6',
437: 1:    '✅f(7111) = 0',
437: 1:    '✅f(2172) = 0',
437: 1:    '✅f(6666) = 4',
437: 1:    '✅f(3213) = 0',
437: 1:    '✅f(7662) = 2',
437: 1:    '✅f(9312) = 1',
437: 1:    '✅f(2222) = 0',
437: 1:    '❌f(5555) = ??? != 0'
437: 1:  ],
437: 1:  'level': 15,
437: 1:  'nextQuestion': '5555',
437: 1:  'questions': [
437: 1:    '0000',
437: 1:    '0123',
437: 1:    '4567',
437: 1:    '8901',
437: 1:    '1111',
437: 1:    '3366',
437: 1:    '8899',
437: 1:    '0896',
437: 1:    '3333',
437: 1:    '4444',
437: 1:    '6677',
437: 1:    '8809',
437: 1:    '7111',
437: 1:    '2172',
437: 1:    '6666',
437: 1:    '3213',
437: 1:    '7662',
437: 1:    '9312',
437: 1:    '2222',
437: 1:    '5555'
437: 1:  ]
437: 1:}
437: 1:Scores: 23549
437: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0']')
437: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
438: 1:BoardData {
438: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
438: 1:  'expectedAnswer': '3',
438: 1:  'history': [
438: 1:    {
438: 1:      'answer': '4',
438: 1:      'question': '0000',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': '1',
438: 1:      'question': '0123',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': '1',
438: 1:      'question': '4567',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': '4',
438: 1:      'question': '8901',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': '0',
438: 1:      'question': '1111',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': '2',
438: 1:      'question': '3366',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': '6',
438: 1:      'question': '8899',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': '5',
438: 1:      'question': '0896',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': '0',
438: 1:      'question': '3333',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': '0',
438: 1:      'question': '4444',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': '2',
438: 1:      'question': '6677',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': '6',
438: 1:      'question': '8809',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': '0',
438: 1:      'question': '7111',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': '0',
438: 1:      'question': '2172',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': '4',
438: 1:      'question': '6666',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': '0',
438: 1:      'question': '3213',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': '2',
438: 1:      'question': '7662',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': '1',
438: 1:      'question': '9312',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': '0',
438: 1:      'question': '2222',
438: 1:      'valid': true
438: 1:    },
438: 1:    {
438: 1:      'answer': '0',
438: 1:      'question': '5555',
438: 1:      'valid': true
438: 1:    }
438: 1:  ],
438: 1:  'info': [
438: 1:    '✅f(0000) = 4',
438: 1:    '✅f(0123) = 1',
438: 1:    '✅f(4567) = 1',
438: 1:    '✅f(8901) = 4',
438: 1:    '✅f(1111) = 0',
438: 1:    '✅f(3366) = 2',
438: 1:    '✅f(8899) = 6',
438: 1:    '✅f(0896) = 5',
438: 1:    '✅f(3333) = 0',
438: 1:    '✅f(4444) = 0',
438: 1:    '✅f(6677) = 2',
438: 1:    '✅f(8809) = 6',
438: 1:    '✅f(7111) = 0',
438: 1:    '✅f(2172) = 0',
438: 1:    '✅f(6666) = 4',
438: 1:    '✅f(3213) = 0',
438: 1:    '✅f(7662) = 2',
438: 1:    '✅f(9312) = 1',
438: 1:    '✅f(2222) = 0',
438: 1:    '✅f(5555) = 0',
438: 1:    '❌f(8193) = ??? != 3'
438: 1:  ],
438: 1:  'level': 15,
438: 1:  'nextQuestion': '8193',
438: 1:  'questions': [
438: 1:    '0000',
438: 1:    '0123',
438: 1:    '4567',
438: 1:    '8901',
438: 1:    '1111',
438: 1:    '3366',
438: 1:    '8899',
438: 1:    '0896',
438: 1:    '3333',
438: 1:    '4444',
438: 1:    '6677',
438: 1:    '8809',
438: 1:    '7111',
438: 1:    '2172',
438: 1:    '6666',
438: 1:    '3213',
438: 1:    '7662',
438: 1:    '9312',
438: 1:    '2222',
438: 1:    '5555',
438: 1:    '8193'
438: 1:  ]
438: 1:}
438: 1:Scores: 23554
438: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3']')
438: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
439: 1:BoardData {
439: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
439: 1:  'expectedAnswer': '5',
439: 1:  'history': [
439: 1:    {
439: 1:      'answer': '4',
439: 1:      'question': '0000',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': '1',
439: 1:      'question': '0123',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': '1',
439: 1:      'question': '4567',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': '4',
439: 1:      'question': '8901',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': '0',
439: 1:      'question': '1111',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': '2',
439: 1:      'question': '3366',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': '6',
439: 1:      'question': '8899',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': '5',
439: 1:      'question': '0896',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': '0',
439: 1:      'question': '3333',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': '0',
439: 1:      'question': '4444',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': '2',
439: 1:      'question': '6677',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': '6',
439: 1:      'question': '8809',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': '0',
439: 1:      'question': '7111',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': '0',
439: 1:      'question': '2172',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': '4',
439: 1:      'question': '6666',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': '0',
439: 1:      'question': '3213',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': '2',
439: 1:      'question': '7662',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': '1',
439: 1:      'question': '9312',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': '0',
439: 1:      'question': '2222',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': '0',
439: 1:      'question': '5555',
439: 1:      'valid': true
439: 1:    },
439: 1:    {
439: 1:      'answer': '3',
439: 1:      'question': '8193',
439: 1:      'valid': true
439: 1:    }
439: 1:  ],
439: 1:  'info': [
439: 1:    '✅f(0000) = 4',
439: 1:    '✅f(0123) = 1',
439: 1:    '✅f(4567) = 1',
439: 1:    '✅f(8901) = 4',
439: 1:    '✅f(1111) = 0',
439: 1:    '✅f(3366) = 2',
439: 1:    '✅f(8899) = 6',
439: 1:    '✅f(0896) = 5',
439: 1:    '✅f(3333) = 0',
439: 1:    '✅f(4444) = 0',
439: 1:    '✅f(6677) = 2',
439: 1:    '✅f(8809) = 6',
439: 1:    '✅f(7111) = 0',
439: 1:    '✅f(2172) = 0',
439: 1:    '✅f(6666) = 4',
439: 1:    '✅f(3213) = 0',
439: 1:    '✅f(7662) = 2',
439: 1:    '✅f(9312) = 1',
439: 1:    '✅f(2222) = 0',
439: 1:    '✅f(5555) = 0',
439: 1:    '✅f(8193) = 3',
439: 1:    '❌f(8096) = ??? != 5'
439: 1:  ],
439: 1:  'level': 15,
439: 1:  'nextQuestion': '8096',
439: 1:  'questions': [
439: 1:    '0000',
439: 1:    '0123',
439: 1:    '4567',
439: 1:    '8901',
439: 1:    '1111',
439: 1:    '3366',
439: 1:    '8899',
439: 1:    '0896',
439: 1:    '3333',
439: 1:    '4444',
439: 1:    '6677',
439: 1:    '8809',
439: 1:    '7111',
439: 1:    '2172',
439: 1:    '6666',
439: 1:    '3213',
439: 1:    '7662',
439: 1:    '9312',
439: 1:    '2222',
439: 1:    '5555',
439: 1:    '8193',
439: 1:    '8096'
439: 1:  ]
439: 1:}
439: 1:Scores: 23559
439: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5']')
439: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
440: 1:BoardData {
440: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
440: 1:  'expectedAnswer': '0',
440: 1:  'history': [
440: 1:    {
440: 1:      'answer': '4',
440: 1:      'question': '0000',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': '1',
440: 1:      'question': '0123',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': '1',
440: 1:      'question': '4567',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': '4',
440: 1:      'question': '8901',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': '0',
440: 1:      'question': '1111',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': '2',
440: 1:      'question': '3366',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': '6',
440: 1:      'question': '8899',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': '5',
440: 1:      'question': '0896',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': '0',
440: 1:      'question': '3333',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': '0',
440: 1:      'question': '4444',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': '2',
440: 1:      'question': '6677',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': '6',
440: 1:      'question': '8809',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': '0',
440: 1:      'question': '7111',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': '0',
440: 1:      'question': '2172',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': '4',
440: 1:      'question': '6666',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': '0',
440: 1:      'question': '3213',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': '2',
440: 1:      'question': '7662',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': '1',
440: 1:      'question': '9312',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': '0',
440: 1:      'question': '2222',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': '0',
440: 1:      'question': '5555',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': '3',
440: 1:      'question': '8193',
440: 1:      'valid': true
440: 1:    },
440: 1:    {
440: 1:      'answer': '5',
440: 1:      'question': '8096',
440: 1:      'valid': true
440: 1:    }
440: 1:  ],
440: 1:  'info': [
440: 1:    '✅f(0000) = 4',
440: 1:    '✅f(0123) = 1',
440: 1:    '✅f(4567) = 1',
440: 1:    '✅f(8901) = 4',
440: 1:    '✅f(1111) = 0',
440: 1:    '✅f(3366) = 2',
440: 1:    '✅f(8899) = 6',
440: 1:    '✅f(0896) = 5',
440: 1:    '✅f(3333) = 0',
440: 1:    '✅f(4444) = 0',
440: 1:    '✅f(6677) = 2',
440: 1:    '✅f(8809) = 6',
440: 1:    '✅f(7111) = 0',
440: 1:    '✅f(2172) = 0',
440: 1:    '✅f(6666) = 4',
440: 1:    '✅f(3213) = 0',
440: 1:    '✅f(7662) = 2',
440: 1:    '✅f(9312) = 1',
440: 1:    '✅f(2222) = 0',
440: 1:    '✅f(5555) = 0',
440: 1:    '✅f(8193) = 3',
440: 1:    '✅f(8096) = 5',
440: 1:    '❌f(7777) = ??? != 0'
440: 1:  ],
440: 1:  'level': 15,
440: 1:  'nextQuestion': '7777',
440: 1:  'questions': [
440: 1:    '0000',
440: 1:    '0123',
440: 1:    '4567',
440: 1:    '8901',
440: 1:    '1111',
440: 1:    '3366',
440: 1:    '8899',
440: 1:    '0896',
440: 1:    '3333',
440: 1:    '4444',
440: 1:    '6677',
440: 1:    '8809',
440: 1:    '7111',
440: 1:    '2172',
440: 1:    '6666',
440: 1:    '3213',
440: 1:    '7662',
440: 1:    '9312',
440: 1:    '2222',
440: 1:    '5555',
440: 1:    '8193',
440: 1:    '8096',
440: 1:    '7777'
440: 1:  ]
440: 1:}
440: 1:Scores: 23564
440: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5', '0']')
440: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
441: 1:BoardData {
441: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
441: 1:  'expectedAnswer': '4',
441: 1:  'history': [
441: 1:    {
441: 1:      'answer': '4',
441: 1:      'question': '0000',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': '1',
441: 1:      'question': '0123',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': '1',
441: 1:      'question': '4567',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': '4',
441: 1:      'question': '8901',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': '0',
441: 1:      'question': '1111',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': '2',
441: 1:      'question': '3366',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': '6',
441: 1:      'question': '8899',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': '5',
441: 1:      'question': '0896',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': '0',
441: 1:      'question': '3333',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': '0',
441: 1:      'question': '4444',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': '2',
441: 1:      'question': '6677',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': '6',
441: 1:      'question': '8809',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': '0',
441: 1:      'question': '7111',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': '0',
441: 1:      'question': '2172',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': '4',
441: 1:      'question': '6666',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': '0',
441: 1:      'question': '3213',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': '2',
441: 1:      'question': '7662',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': '1',
441: 1:      'question': '9312',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': '0',
441: 1:      'question': '2222',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': '0',
441: 1:      'question': '5555',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': '3',
441: 1:      'question': '8193',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': '5',
441: 1:      'question': '8096',
441: 1:      'valid': true
441: 1:    },
441: 1:    {
441: 1:      'answer': '0',
441: 1:      'question': '7777',
441: 1:      'valid': true
441: 1:    }
441: 1:  ],
441: 1:  'info': [
441: 1:    '✅f(0000) = 4',
441: 1:    '✅f(0123) = 1',
441: 1:    '✅f(4567) = 1',
441: 1:    '✅f(8901) = 4',
441: 1:    '✅f(1111) = 0',
441: 1:    '✅f(3366) = 2',
441: 1:    '✅f(8899) = 6',
441: 1:    '✅f(0896) = 5',
441: 1:    '✅f(3333) = 0',
441: 1:    '✅f(4444) = 0',
441: 1:    '✅f(6677) = 2',
441: 1:    '✅f(8809) = 6',
441: 1:    '✅f(7111) = 0',
441: 1:    '✅f(2172) = 0',
441: 1:    '✅f(6666) = 4',
441: 1:    '✅f(3213) = 0',
441: 1:    '✅f(7662) = 2',
441: 1:    '✅f(9312) = 1',
441: 1:    '✅f(2222) = 0',
441: 1:    '✅f(5555) = 0',
441: 1:    '✅f(8193) = 3',
441: 1:    '✅f(8096) = 5',
441: 1:    '✅f(7777) = 0',
441: 1:    '❌f(9999) = ??? != 4'
441: 1:  ],
441: 1:  'level': 15,
441: 1:  'nextQuestion': '9999',
441: 1:  'questions': [
441: 1:    '0000',
441: 1:    '0123',
441: 1:    '4567',
441: 1:    '8901',
441: 1:    '1111',
441: 1:    '3366',
441: 1:    '8899',
441: 1:    '0896',
441: 1:    '3333',
441: 1:    '4444',
441: 1:    '6677',
441: 1:    '8809',
441: 1:    '7111',
441: 1:    '2172',
441: 1:    '6666',
441: 1:    '3213',
441: 1:    '7662',
441: 1:    '9312',
441: 1:    '2222',
441: 1:    '5555',
441: 1:    '8193',
441: 1:    '8096',
441: 1:    '7777',
441: 1:    '9999'
441: 1:  ]
441: 1:}
441: 1:Scores: 23569
441: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5', '0', '4']')
441: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
442: 1:BoardData {
442: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
442: 1:  'expectedAnswer': '1',
442: 1:  'history': [
442: 1:    {
442: 1:      'answer': '4',
442: 1:      'question': '0000',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': '1',
442: 1:      'question': '0123',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': '1',
442: 1:      'question': '4567',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': '4',
442: 1:      'question': '8901',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': '0',
442: 1:      'question': '1111',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': '2',
442: 1:      'question': '3366',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': '6',
442: 1:      'question': '8899',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': '5',
442: 1:      'question': '0896',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': '0',
442: 1:      'question': '3333',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': '0',
442: 1:      'question': '4444',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': '2',
442: 1:      'question': '6677',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': '6',
442: 1:      'question': '8809',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': '0',
442: 1:      'question': '7111',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': '0',
442: 1:      'question': '2172',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': '4',
442: 1:      'question': '6666',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': '0',
442: 1:      'question': '3213',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': '2',
442: 1:      'question': '7662',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': '1',
442: 1:      'question': '9312',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': '0',
442: 1:      'question': '2222',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': '0',
442: 1:      'question': '5555',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': '3',
442: 1:      'question': '8193',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': '5',
442: 1:      'question': '8096',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': '0',
442: 1:      'question': '7777',
442: 1:      'valid': true
442: 1:    },
442: 1:    {
442: 1:      'answer': '4',
442: 1:      'question': '9999',
442: 1:      'valid': true
442: 1:    }
442: 1:  ],
442: 1:  'info': [
442: 1:    '✅f(0000) = 4',
442: 1:    '✅f(0123) = 1',
442: 1:    '✅f(4567) = 1',
442: 1:    '✅f(8901) = 4',
442: 1:    '✅f(1111) = 0',
442: 1:    '✅f(3366) = 2',
442: 1:    '✅f(8899) = 6',
442: 1:    '✅f(0896) = 5',
442: 1:    '✅f(3333) = 0',
442: 1:    '✅f(4444) = 0',
442: 1:    '✅f(6677) = 2',
442: 1:    '✅f(8809) = 6',
442: 1:    '✅f(7111) = 0',
442: 1:    '✅f(2172) = 0',
442: 1:    '✅f(6666) = 4',
442: 1:    '✅f(3213) = 0',
442: 1:    '✅f(7662) = 2',
442: 1:    '✅f(9312) = 1',
442: 1:    '✅f(2222) = 0',
442: 1:    '✅f(5555) = 0',
442: 1:    '✅f(8193) = 3',
442: 1:    '✅f(8096) = 5',
442: 1:    '✅f(7777) = 0',
442: 1:    '✅f(9999) = 4',
442: 1:    '❌f(7756) = ??? != 1'
442: 1:  ],
442: 1:  'level': 15,
442: 1:  'nextQuestion': '7756',
442: 1:  'questions': [
442: 1:    '0000',
442: 1:    '0123',
442: 1:    '4567',
442: 1:    '8901',
442: 1:    '1111',
442: 1:    '3366',
442: 1:    '8899',
442: 1:    '0896',
442: 1:    '3333',
442: 1:    '4444',
442: 1:    '6677',
442: 1:    '8809',
442: 1:    '7111',
442: 1:    '2172',
442: 1:    '6666',
442: 1:    '3213',
442: 1:    '7662',
442: 1:    '9312',
442: 1:    '2222',
442: 1:    '5555',
442: 1:    '8193',
442: 1:    '8096',
442: 1:    '7777',
442: 1:    '9999',
442: 1:    '7756'
442: 1:  ]
442: 1:}
442: 1:Scores: 23574
442: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5', '0', '4', '1']')
442: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
443: 1:BoardData {
443: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
443: 1:  'expectedAnswer': '3',
443: 1:  'history': [
443: 1:    {
443: 1:      'answer': '4',
443: 1:      'question': '0000',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': '1',
443: 1:      'question': '0123',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': '1',
443: 1:      'question': '4567',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': '4',
443: 1:      'question': '8901',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': '0',
443: 1:      'question': '1111',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': '2',
443: 1:      'question': '3366',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': '6',
443: 1:      'question': '8899',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': '5',
443: 1:      'question': '0896',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': '0',
443: 1:      'question': '3333',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': '0',
443: 1:      'question': '4444',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': '2',
443: 1:      'question': '6677',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': '6',
443: 1:      'question': '8809',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': '0',
443: 1:      'question': '7111',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': '0',
443: 1:      'question': '2172',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': '4',
443: 1:      'question': '6666',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': '0',
443: 1:      'question': '3213',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': '2',
443: 1:      'question': '7662',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': '1',
443: 1:      'question': '9312',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': '0',
443: 1:      'question': '2222',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': '0',
443: 1:      'question': '5555',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': '3',
443: 1:      'question': '8193',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': '5',
443: 1:      'question': '8096',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': '0',
443: 1:      'question': '7777',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': '4',
443: 1:      'question': '9999',
443: 1:      'valid': true
443: 1:    },
443: 1:    {
443: 1:      'answer': '1',
443: 1:      'question': '7756',
443: 1:      'valid': true
443: 1:    }
443: 1:  ],
443: 1:  'info': [
443: 1:    '✅f(0000) = 4',
443: 1:    '✅f(0123) = 1',
443: 1:    '✅f(4567) = 1',
443: 1:    '✅f(8901) = 4',
443: 1:    '✅f(1111) = 0',
443: 1:    '✅f(3366) = 2',
443: 1:    '✅f(8899) = 6',
443: 1:    '✅f(0896) = 5',
443: 1:    '✅f(3333) = 0',
443: 1:    '✅f(4444) = 0',
443: 1:    '✅f(6677) = 2',
443: 1:    '✅f(8809) = 6',
443: 1:    '✅f(7111) = 0',
443: 1:    '✅f(2172) = 0',
443: 1:    '✅f(6666) = 4',
443: 1:    '✅f(3213) = 0',
443: 1:    '✅f(7662) = 2',
443: 1:    '✅f(9312) = 1',
443: 1:    '✅f(2222) = 0',
443: 1:    '✅f(5555) = 0',
443: 1:    '✅f(8193) = 3',
443: 1:    '✅f(8096) = 5',
443: 1:    '✅f(7777) = 0',
443: 1:    '✅f(9999) = 4',
443: 1:    '✅f(7756) = 1',
443: 1:    '❌f(6855) = ??? != 3'
443: 1:  ],
443: 1:  'level': 15,
443: 1:  'nextQuestion': '6855',
443: 1:  'questions': [
443: 1:    '0000',
443: 1:    '0123',
443: 1:    '4567',
443: 1:    '8901',
443: 1:    '1111',
443: 1:    '3366',
443: 1:    '8899',
443: 1:    '0896',
443: 1:    '3333',
443: 1:    '4444',
443: 1:    '6677',
443: 1:    '8809',
443: 1:    '7111',
443: 1:    '2172',
443: 1:    '6666',
443: 1:    '3213',
443: 1:    '7662',
443: 1:    '9312',
443: 1:    '2222',
443: 1:    '5555',
443: 1:    '8193',
443: 1:    '8096',
443: 1:    '7777',
443: 1:    '9999',
443: 1:    '7756',
443: 1:    '6855'
443: 1:  ]
443: 1:}
443: 1:Scores: 23579
443: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5', '0', '4', '1', '3']')
443: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
444: 1:BoardData {
444: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
444: 1:  'expectedAnswer': '5',
444: 1:  'history': [
444: 1:    {
444: 1:      'answer': '4',
444: 1:      'question': '0000',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': '1',
444: 1:      'question': '0123',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': '1',
444: 1:      'question': '4567',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': '4',
444: 1:      'question': '8901',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': '0',
444: 1:      'question': '1111',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': '2',
444: 1:      'question': '3366',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': '6',
444: 1:      'question': '8899',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': '5',
444: 1:      'question': '0896',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': '0',
444: 1:      'question': '3333',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': '0',
444: 1:      'question': '4444',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': '2',
444: 1:      'question': '6677',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': '6',
444: 1:      'question': '8809',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': '0',
444: 1:      'question': '7111',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': '0',
444: 1:      'question': '2172',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': '4',
444: 1:      'question': '6666',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': '0',
444: 1:      'question': '3213',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': '2',
444: 1:      'question': '7662',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': '1',
444: 1:      'question': '9312',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': '0',
444: 1:      'question': '2222',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': '0',
444: 1:      'question': '5555',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': '3',
444: 1:      'question': '8193',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': '5',
444: 1:      'question': '8096',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': '0',
444: 1:      'question': '7777',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': '4',
444: 1:      'question': '9999',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': '1',
444: 1:      'question': '7756',
444: 1:      'valid': true
444: 1:    },
444: 1:    {
444: 1:      'answer': '3',
444: 1:      'question': '6855',
444: 1:      'valid': true
444: 1:    }
444: 1:  ],
444: 1:  'info': [
444: 1:    '✅f(0000) = 4',
444: 1:    '✅f(0123) = 1',
444: 1:    '✅f(4567) = 1',
444: 1:    '✅f(8901) = 4',
444: 1:    '✅f(1111) = 0',
444: 1:    '✅f(3366) = 2',
444: 1:    '✅f(8899) = 6',
444: 1:    '✅f(0896) = 5',
444: 1:    '✅f(3333) = 0',
444: 1:    '✅f(4444) = 0',
444: 1:    '✅f(6677) = 2',
444: 1:    '✅f(8809) = 6',
444: 1:    '✅f(7111) = 0',
444: 1:    '✅f(2172) = 0',
444: 1:    '✅f(6666) = 4',
444: 1:    '✅f(3213) = 0',
444: 1:    '✅f(7662) = 2',
444: 1:    '✅f(9312) = 1',
444: 1:    '✅f(2222) = 0',
444: 1:    '✅f(5555) = 0',
444: 1:    '✅f(8193) = 3',
444: 1:    '✅f(8096) = 5',
444: 1:    '✅f(7777) = 0',
444: 1:    '✅f(9999) = 4',
444: 1:    '✅f(7756) = 1',
444: 1:    '✅f(6855) = 3',
444: 1:    '❌f(9881) = ??? != 5'
444: 1:  ],
444: 1:  'level': 15,
444: 1:  'nextQuestion': '9881',
444: 1:  'questions': [
444: 1:    '0000',
444: 1:    '0123',
444: 1:    '4567',
444: 1:    '8901',
444: 1:    '1111',
444: 1:    '3366',
444: 1:    '8899',
444: 1:    '0896',
444: 1:    '3333',
444: 1:    '4444',
444: 1:    '6677',
444: 1:    '8809',
444: 1:    '7111',
444: 1:    '2172',
444: 1:    '6666',
444: 1:    '3213',
444: 1:    '7662',
444: 1:    '9312',
444: 1:    '2222',
444: 1:    '5555',
444: 1:    '8193',
444: 1:    '8096',
444: 1:    '7777',
444: 1:    '9999',
444: 1:    '7756',
444: 1:    '6855',
444: 1:    '9881'
444: 1:  ]
444: 1:}
444: 1:Scores: 23584
444: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5', '0', '4', '1', '3', '5']')
444: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
445: 1:BoardData {
445: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
445: 1:  'expectedAnswer': '0',
445: 1:  'history': [
445: 1:    {
445: 1:      'answer': '4',
445: 1:      'question': '0000',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': '1',
445: 1:      'question': '0123',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': '1',
445: 1:      'question': '4567',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': '4',
445: 1:      'question': '8901',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': '0',
445: 1:      'question': '1111',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': '2',
445: 1:      'question': '3366',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': '6',
445: 1:      'question': '8899',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': '5',
445: 1:      'question': '0896',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': '0',
445: 1:      'question': '3333',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': '0',
445: 1:      'question': '4444',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': '2',
445: 1:      'question': '6677',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': '6',
445: 1:      'question': '8809',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': '0',
445: 1:      'question': '7111',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': '0',
445: 1:      'question': '2172',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': '4',
445: 1:      'question': '6666',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': '0',
445: 1:      'question': '3213',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': '2',
445: 1:      'question': '7662',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': '1',
445: 1:      'question': '9312',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': '0',
445: 1:      'question': '2222',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': '0',
445: 1:      'question': '5555',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': '3',
445: 1:      'question': '8193',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': '5',
445: 1:      'question': '8096',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': '0',
445: 1:      'question': '7777',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': '4',
445: 1:      'question': '9999',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': '1',
445: 1:      'question': '7756',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': '3',
445: 1:      'question': '6855',
445: 1:      'valid': true
445: 1:    },
445: 1:    {
445: 1:      'answer': '5',
445: 1:      'question': '9881',
445: 1:      'valid': true
445: 1:    }
445: 1:  ],
445: 1:  'info': [
445: 1:    '✅f(0000) = 4',
445: 1:    '✅f(0123) = 1',
445: 1:    '✅f(4567) = 1',
445: 1:    '✅f(8901) = 4',
445: 1:    '✅f(1111) = 0',
445: 1:    '✅f(3366) = 2',
445: 1:    '✅f(8899) = 6',
445: 1:    '✅f(0896) = 5',
445: 1:    '✅f(3333) = 0',
445: 1:    '✅f(4444) = 0',
445: 1:    '✅f(6677) = 2',
445: 1:    '✅f(8809) = 6',
445: 1:    '✅f(7111) = 0',
445: 1:    '✅f(2172) = 0',
445: 1:    '✅f(6666) = 4',
445: 1:    '✅f(3213) = 0',
445: 1:    '✅f(7662) = 2',
445: 1:    '✅f(9312) = 1',
445: 1:    '✅f(2222) = 0',
445: 1:    '✅f(5555) = 0',
445: 1:    '✅f(8193) = 3',
445: 1:    '✅f(8096) = 5',
445: 1:    '✅f(7777) = 0',
445: 1:    '✅f(9999) = 4',
445: 1:    '✅f(7756) = 1',
445: 1:    '✅f(6855) = 3',
445: 1:    '✅f(9881) = 5',
445: 1:    '❌f(5531) = ??? != 0'
445: 1:  ],
445: 1:  'level': 15,
445: 1:  'nextQuestion': '5531',
445: 1:  'questions': [
445: 1:    '0000',
445: 1:    '0123',
445: 1:    '4567',
445: 1:    '8901',
445: 1:    '1111',
445: 1:    '3366',
445: 1:    '8899',
445: 1:    '0896',
445: 1:    '3333',
445: 1:    '4444',
445: 1:    '6677',
445: 1:    '8809',
445: 1:    '7111',
445: 1:    '2172',
445: 1:    '6666',
445: 1:    '3213',
445: 1:    '7662',
445: 1:    '9312',
445: 1:    '2222',
445: 1:    '5555',
445: 1:    '8193',
445: 1:    '8096',
445: 1:    '7777',
445: 1:    '9999',
445: 1:    '7756',
445: 1:    '6855',
445: 1:    '9881',
445: 1:    '5531'
445: 1:  ]
445: 1:}
445: 1:Scores: 23589
445: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5', '0', '4', '1', '3', '5', '0']')
445: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
446: 1:BoardData {
446: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
446: 1:  'expectedAnswer': '5',
446: 1:  'history': [
446: 1:    {
446: 1:      'answer': '4',
446: 1:      'question': '0000',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': '1',
446: 1:      'question': '0123',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': '1',
446: 1:      'question': '4567',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': '4',
446: 1:      'question': '8901',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': '0',
446: 1:      'question': '1111',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': '2',
446: 1:      'question': '3366',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': '6',
446: 1:      'question': '8899',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': '5',
446: 1:      'question': '0896',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': '0',
446: 1:      'question': '3333',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': '0',
446: 1:      'question': '4444',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': '2',
446: 1:      'question': '6677',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': '6',
446: 1:      'question': '8809',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': '0',
446: 1:      'question': '7111',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': '0',
446: 1:      'question': '2172',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': '4',
446: 1:      'question': '6666',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': '0',
446: 1:      'question': '3213',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': '2',
446: 1:      'question': '7662',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': '1',
446: 1:      'question': '9312',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': '0',
446: 1:      'question': '2222',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': '0',
446: 1:      'question': '5555',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': '3',
446: 1:      'question': '8193',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': '5',
446: 1:      'question': '8096',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': '0',
446: 1:      'question': '7777',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': '4',
446: 1:      'question': '9999',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': '1',
446: 1:      'question': '7756',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': '3',
446: 1:      'question': '6855',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': '5',
446: 1:      'question': '9881',
446: 1:      'valid': true
446: 1:    },
446: 1:    {
446: 1:      'answer': '0',
446: 1:      'question': '5531',
446: 1:      'valid': true
446: 1:    }
446: 1:  ],
446: 1:  'info': [
446: 1:    '✅f(0000) = 4',
446: 1:    '✅f(0123) = 1',
446: 1:    '✅f(4567) = 1',
446: 1:    '✅f(8901) = 4',
446: 1:    '✅f(1111) = 0',
446: 1:    '✅f(3366) = 2',
446: 1:    '✅f(8899) = 6',
446: 1:    '✅f(0896) = 5',
446: 1:    '✅f(3333) = 0',
446: 1:    '✅f(4444) = 0',
446: 1:    '✅f(6677) = 2',
446: 1:    '✅f(8809) = 6',
446: 1:    '✅f(7111) = 0',
446: 1:    '✅f(2172) = 0',
446: 1:    '✅f(6666) = 4',
446: 1:    '✅f(3213) = 0',
446: 1:    '✅f(7662) = 2',
446: 1:    '✅f(9312) = 1',
446: 1:    '✅f(2222) = 0',
446: 1:    '✅f(5555) = 0',
446: 1:    '✅f(8193) = 3',
446: 1:    '✅f(8096) = 5',
446: 1:    '✅f(7777) = 0',
446: 1:    '✅f(9999) = 4',
446: 1:    '✅f(7756) = 1',
446: 1:    '✅f(6855) = 3',
446: 1:    '✅f(9881) = 5',
446: 1:    '✅f(5531) = 0',
446: 1:    '❌f(1234567890) = ??? != 5'
446: 1:  ],
446: 1:  'level': 15,
446: 1:  'nextQuestion': '1234567890',
446: 1:  'questions': [
446: 1:    '0000',
446: 1:    '0123',
446: 1:    '4567',
446: 1:    '8901',
446: 1:    '1111',
446: 1:    '3366',
446: 1:    '8899',
446: 1:    '0896',
446: 1:    '3333',
446: 1:    '4444',
446: 1:    '6677',
446: 1:    '8809',
446: 1:    '7111',
446: 1:    '2172',
446: 1:    '6666',
446: 1:    '3213',
446: 1:    '7662',
446: 1:    '9312',
446: 1:    '2222',
446: 1:    '5555',
446: 1:    '8193',
446: 1:    '8096',
446: 1:    '7777',
446: 1:    '9999',
446: 1:    '7756',
446: 1:    '6855',
446: 1:    '9881',
446: 1:    '5531',
446: 1:    '1234567890'
446: 1:  ]
446: 1:}
446: 1:Scores: 23594
446: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5', '0', '4', '1', '3', '5', '0', '5']')
446: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
447: 1:BoardData {
447: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
447: 1:  'expectedAnswer': '5',
447: 1:  'history': [
447: 1:    {
447: 1:      'answer': '4',
447: 1:      'question': '0000',
447: 1:      'valid': true
447: 1:    },
447: 1:    {
447: 1:      'answer': '1',
447: 1:      'question': '0123',
447: 1:      'valid': true
447: 1:    },
447: 1:    {
447: 1:      'answer': '1',
447: 1:      'question': '4567',
447: 1:      'valid': true
447: 1:    },
447: 1:    {
447: 1:      'answer': '4',
447: 1:      'question': '8901',
447: 1:      'valid': true
447: 1:    },
447: 1:    {
447: 1:      'answer': '0',
447: 1:      'question': '1111',
447: 1:      'valid': true
447: 1:    },
447: 1:    {
447: 1:      'answer': '2',
447: 1:      'question': '3366',
447: 1:      'valid': true
447: 1:    },
447: 1:    {
447: 1:      'answer': '6',
447: 1:      'question': '8899',
447: 1:      'valid': true
447: 1:    },
447: 1:    {
447: 1:      'answer': '5',
447: 1:      'question': '0896',
447: 1:      'valid': true
447: 1:    },
447: 1:    {
447: 1:      'answer': '0',
447: 1:      'question': '3333',
447: 1:      'valid': true
447: 1:    },
447: 1:    {
447: 1:      'answer': '0',
447: 1:      'question': '4444',
447: 1:      'valid': true
447: 1:    },
447: 1:    {
447: 1:      'answer': '2',
447: 1:      'question': '6677',
447: 1:      'valid': true
447: 1:    },
447: 1:    {
447: 1:      'answer': '6',
447: 1:      'question': '8809',
447: 1:      'valid': true
447: 1:    },
447: 1:    {
447: 1:      'answer': '0',
447: 1:      'question': '7111',
447: 1:      'valid': true
447: 1:    },
447: 1:    {
447: 1:      'answer': '0',
447: 1:      'question': '2172',
447: 1:      'valid': true
447: 1:    },
447: 1:    {
447: 1:      'answer': '4',
447: 1:      'question': '6666',
447: 1:      'valid': true
447: 1:    },
447: 1:    {
447: 1:      'answer': '0',
447: 1:      'question': '3213',
447: 1:      'valid': true
447: 1:    },
447: 1:    {
447: 1:      'answer': '2',
447: 1:      'question': '7662',
447: 1:      'valid': true
447: 1:    },
447: 1:    {
447: 1:      'answer': '1',
447: 1:      'question': '9312',
447: 1:      'valid': true
447: 1:    },
447: 1:    {
447: 1:      'answer': '0',
447: 1:      'question': '2222',
447: 1:      'valid': true
447: 1:    },
447: 1:    {
447: 1:      'answer': '0',
447: 1:      'question': '5555',
447: 1:      'valid': true
447: 1:    },
447: 1:    {
447: 1:      'answer': '3',
447: 1:      'question': '8193',
447: 1:      'valid': true
447: 1:    },
447: 1:    {
447: 1:      'answer': '5',
447: 1:      'question': '8096',
447: 1:      'valid': true
447: 1:    },
447: 1:    {
447: 1:      'answer': '0',
447: 1:      'question': '7777',
447: 1:      'valid': true
447: 1:    },
447: 1:    {
447: 1:      'answer': '4',
447: 1:      'question': '9999',
447: 1:      'valid': true
447: 1:    },
447: 1:    {
447: 1:      'answer': '1',
447: 1:      'question': '7756',
447: 1:      'valid': true
447: 1:    },
447: 1:    {
447: 1:      'answer': '3',
447: 1:      'question': '6855',
447: 1:      'valid': true
447: 1:    },
447: 1:    {
447: 1:      'answer': '5',
447: 1:      'question': '9881',
447: 1:      'valid': true
447: 1:    },
447: 1:    {
447: 1:      'answer': '0',
447: 1:      'question': '5531',
447: 1:      'valid': true
447: 1:    },
447: 1:    {
447: 1:      'answer': '5',
447: 1:      'question': '1234567890',
447: 1:      'valid': true
447: 1:    }
447: 1:  ],
447: 1:  'info': [
447: 1:    '✅f(0000) = 4',
447: 1:    '✅f(0123) = 1',
447: 1:    '✅f(4567) = 1',
447: 1:    '✅f(8901) = 4',
447: 1:    '✅f(1111) = 0',
447: 1:    '✅f(3366) = 2',
447: 1:    '✅f(8899) = 6',
447: 1:    '✅f(0896) = 5',
447: 1:    '✅f(3333) = 0',
447: 1:    '✅f(4444) = 0',
447: 1:    '✅f(6677) = 2',
447: 1:    '✅f(8809) = 6',
447: 1:    '✅f(7111) = 0',
447: 1:    '✅f(2172) = 0',
447: 1:    '✅f(6666) = 4',
447: 1:    '✅f(3213) = 0',
447: 1:    '✅f(7662) = 2',
447: 1:    '✅f(9312) = 1',
447: 1:    '✅f(2222) = 0',
447: 1:    '✅f(5555) = 0',
447: 1:    '✅f(8193) = 3',
447: 1:    '✅f(8096) = 5',
447: 1:    '✅f(7777) = 0',
447: 1:    '✅f(9999) = 4',
447: 1:    '✅f(7756) = 1',
447: 1:    '✅f(6855) = 3',
447: 1:    '✅f(9881) = 5',
447: 1:    '✅f(5531) = 0',
447: 1:    '✅f(1234567890) = 5',
447: 1:    '❌f(0987654321) = ??? != 5'
447: 1:  ],
447: 1:  'level': 15,
447: 1:  'nextQuestion': '0987654321',
447: 1:  'questions': [
447: 1:    '0000',
447: 1:    '0123',
447: 1:    '4567',
447: 1:    '8901',
447: 1:    '1111',
447: 1:    '3366',
447: 1:    '8899',
447: 1:    '0896',
447: 1:    '3333',
447: 1:    '4444',
447: 1:    '6677',
447: 1:    '8809',
447: 1:    '7111',
447: 1:    '2172',
447: 1:    '6666',
447: 1:    '3213',
447: 1:    '7662',
447: 1:    '9312',
447: 1:    '2222',
447: 1:    '5555',
447: 1:    '8193',
447: 1:    '8096',
447: 1:    '7777',
447: 1:    '9999',
447: 1:    '7756',
447: 1:    '6855',
447: 1:    '9881',
447: 1:    '5531',
447: 1:    '1234567890',
447: 1:    '0987654321'
447: 1:  ]
447: 1:}
447: 1:Scores: 23599
447: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5', '0', '4', '1', '3', '5', '0', '5', '5']')
447: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
448: 1:BoardData {
448: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
448: 1:  'expectedAnswer': '5',
448: 1:  'history': [
448: 1:    {
448: 1:      'answer': '4',
448: 1:      'question': '0000',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '1',
448: 1:      'question': '0123',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '1',
448: 1:      'question': '4567',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '4',
448: 1:      'question': '8901',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '0',
448: 1:      'question': '1111',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '2',
448: 1:      'question': '3366',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '6',
448: 1:      'question': '8899',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '5',
448: 1:      'question': '0896',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '0',
448: 1:      'question': '3333',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '0',
448: 1:      'question': '4444',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '2',
448: 1:      'question': '6677',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '6',
448: 1:      'question': '8809',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '0',
448: 1:      'question': '7111',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '0',
448: 1:      'question': '2172',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '4',
448: 1:      'question': '6666',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '0',
448: 1:      'question': '3213',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '2',
448: 1:      'question': '7662',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '1',
448: 1:      'question': '9312',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '0',
448: 1:      'question': '2222',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '0',
448: 1:      'question': '5555',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '3',
448: 1:      'question': '8193',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '5',
448: 1:      'question': '8096',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '0',
448: 1:      'question': '7777',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '4',
448: 1:      'question': '9999',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '1',
448: 1:      'question': '7756',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '3',
448: 1:      'question': '6855',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '5',
448: 1:      'question': '9881',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '0',
448: 1:      'question': '5531',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '5',
448: 1:      'question': '1234567890',
448: 1:      'valid': true
448: 1:    },
448: 1:    {
448: 1:      'answer': '5',
448: 1:      'question': '0987654321',
448: 1:      'valid': true
448: 1:    }
448: 1:  ],
448: 1:  'info': [
448: 1:    '✅f(0000) = 4',
448: 1:    '✅f(0123) = 1',
448: 1:    '✅f(4567) = 1',
448: 1:    '✅f(8901) = 4',
448: 1:    '✅f(1111) = 0',
448: 1:    '✅f(3366) = 2',
448: 1:    '✅f(8899) = 6',
448: 1:    '✅f(0896) = 5',
448: 1:    '✅f(3333) = 0',
448: 1:    '✅f(4444) = 0',
448: 1:    '✅f(6677) = 2',
448: 1:    '✅f(8809) = 6',
448: 1:    '✅f(7111) = 0',
448: 1:    '✅f(2172) = 0',
448: 1:    '✅f(6666) = 4',
448: 1:    '✅f(3213) = 0',
448: 1:    '✅f(7662) = 2',
448: 1:    '✅f(9312) = 1',
448: 1:    '✅f(2222) = 0',
448: 1:    '✅f(5555) = 0',
448: 1:    '✅f(8193) = 3',
448: 1:    '✅f(8096) = 5',
448: 1:    '✅f(7777) = 0',
448: 1:    '✅f(9999) = 4',
448: 1:    '✅f(7756) = 1',
448: 1:    '✅f(6855) = 3',
448: 1:    '✅f(9881) = 5',
448: 1:    '✅f(5531) = 0',
448: 1:    '✅f(1234567890) = 5',
448: 1:    '✅f(0987654321) = 5',
448: 1:    '❌f(1029384756) = ??? != 5'
448: 1:  ],
448: 1:  'level': 15,
448: 1:  'nextQuestion': '1029384756',
448: 1:  'questions': [
448: 1:    '0000',
448: 1:    '0123',
448: 1:    '4567',
448: 1:    '8901',
448: 1:    '1111',
448: 1:    '3366',
448: 1:    '8899',
448: 1:    '0896',
448: 1:    '3333',
448: 1:    '4444',
448: 1:    '6677',
448: 1:    '8809',
448: 1:    '7111',
448: 1:    '2172',
448: 1:    '6666',
448: 1:    '3213',
448: 1:    '7662',
448: 1:    '9312',
448: 1:    '2222',
448: 1:    '5555',
448: 1:    '8193',
448: 1:    '8096',
448: 1:    '7777',
448: 1:    '9999',
448: 1:    '7756',
448: 1:    '6855',
448: 1:    '9881',
448: 1:    '5531',
448: 1:    '1234567890',
448: 1:    '0987654321',
448: 1:    '1029384756'
448: 1:  ]
448: 1:}
448: 1:Scores: 23604
448: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5', '0', '4', '1', '3', '5', '0', '5', '5', '5']')
448: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
449: 1:BoardData {
449: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
449: 1:  'expectedAnswer': '5',
449: 1:  'history': [
449: 1:    {
449: 1:      'answer': '4',
449: 1:      'question': '0000',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '1',
449: 1:      'question': '0123',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '1',
449: 1:      'question': '4567',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '4',
449: 1:      'question': '8901',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '0',
449: 1:      'question': '1111',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '2',
449: 1:      'question': '3366',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '6',
449: 1:      'question': '8899',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '5',
449: 1:      'question': '0896',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '0',
449: 1:      'question': '3333',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '0',
449: 1:      'question': '4444',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '2',
449: 1:      'question': '6677',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '6',
449: 1:      'question': '8809',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '0',
449: 1:      'question': '7111',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '0',
449: 1:      'question': '2172',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '4',
449: 1:      'question': '6666',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '0',
449: 1:      'question': '3213',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '2',
449: 1:      'question': '7662',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '1',
449: 1:      'question': '9312',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '0',
449: 1:      'question': '2222',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '0',
449: 1:      'question': '5555',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '3',
449: 1:      'question': '8193',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '5',
449: 1:      'question': '8096',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '0',
449: 1:      'question': '7777',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '4',
449: 1:      'question': '9999',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '1',
449: 1:      'question': '7756',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '3',
449: 1:      'question': '6855',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '5',
449: 1:      'question': '9881',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '0',
449: 1:      'question': '5531',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '5',
449: 1:      'question': '1234567890',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '5',
449: 1:      'question': '0987654321',
449: 1:      'valid': true
449: 1:    },
449: 1:    {
449: 1:      'answer': '5',
449: 1:      'question': '1029384756',
449: 1:      'valid': true
449: 1:    }
449: 1:  ],
449: 1:  'info': [
449: 1:    '✅f(0000) = 4',
449: 1:    '✅f(0123) = 1',
449: 1:    '✅f(4567) = 1',
449: 1:    '✅f(8901) = 4',
449: 1:    '✅f(1111) = 0',
449: 1:    '✅f(3366) = 2',
449: 1:    '✅f(8899) = 6',
449: 1:    '✅f(0896) = 5',
449: 1:    '✅f(3333) = 0',
449: 1:    '✅f(4444) = 0',
449: 1:    '✅f(6677) = 2',
449: 1:    '✅f(8809) = 6',
449: 1:    '✅f(7111) = 0',
449: 1:    '✅f(2172) = 0',
449: 1:    '✅f(6666) = 4',
449: 1:    '✅f(3213) = 0',
449: 1:    '✅f(7662) = 2',
449: 1:    '✅f(9312) = 1',
449: 1:    '✅f(2222) = 0',
449: 1:    '✅f(5555) = 0',
449: 1:    '✅f(8193) = 3',
449: 1:    '✅f(8096) = 5',
449: 1:    '✅f(7777) = 0',
449: 1:    '✅f(9999) = 4',
449: 1:    '✅f(7756) = 1',
449: 1:    '✅f(6855) = 3',
449: 1:    '✅f(9881) = 5',
449: 1:    '✅f(5531) = 0',
449: 1:    '✅f(1234567890) = 5',
449: 1:    '✅f(0987654321) = 5',
449: 1:    '✅f(1029384756) = 5',
449: 1:    '❌f(6574839201) = ??? != 5'
449: 1:  ],
449: 1:  'level': 15,
449: 1:  'nextQuestion': '6574839201',
449: 1:  'questions': [
449: 1:    '0000',
449: 1:    '0123',
449: 1:    '4567',
449: 1:    '8901',
449: 1:    '1111',
449: 1:    '3366',
449: 1:    '8899',
449: 1:    '0896',
449: 1:    '3333',
449: 1:    '4444',
449: 1:    '6677',
449: 1:    '8809',
449: 1:    '7111',
449: 1:    '2172',
449: 1:    '6666',
449: 1:    '3213',
449: 1:    '7662',
449: 1:    '9312',
449: 1:    '2222',
449: 1:    '5555',
449: 1:    '8193',
449: 1:    '8096',
449: 1:    '7777',
449: 1:    '9999',
449: 1:    '7756',
449: 1:    '6855',
449: 1:    '9881',
449: 1:    '5531',
449: 1:    '1234567890',
449: 1:    '0987654321',
449: 1:    '1029384756',
449: 1:    '6574839201'
449: 1:  ]
449: 1:}
449: 1:Scores: 23609
449: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5', '0', '4', '1', '3', '5', '0', '5', '5', '5', '5']')
449: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
450: 1:BoardData {
450: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
450: 1:  'expectedAnswer': '9',
450: 1:  'history': [
450: 1:    {
450: 1:      'answer': '4',
450: 1:      'question': '0000',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '1',
450: 1:      'question': '0123',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '1',
450: 1:      'question': '4567',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '4',
450: 1:      'question': '8901',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '0',
450: 1:      'question': '1111',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '2',
450: 1:      'question': '3366',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '6',
450: 1:      'question': '8899',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '5',
450: 1:      'question': '0896',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '0',
450: 1:      'question': '3333',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '0',
450: 1:      'question': '4444',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '2',
450: 1:      'question': '6677',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '6',
450: 1:      'question': '8809',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '0',
450: 1:      'question': '7111',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '0',
450: 1:      'question': '2172',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '4',
450: 1:      'question': '6666',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '0',
450: 1:      'question': '3213',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '2',
450: 1:      'question': '7662',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '1',
450: 1:      'question': '9312',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '0',
450: 1:      'question': '2222',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '0',
450: 1:      'question': '5555',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '3',
450: 1:      'question': '8193',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '5',
450: 1:      'question': '8096',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '0',
450: 1:      'question': '7777',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '4',
450: 1:      'question': '9999',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '1',
450: 1:      'question': '7756',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '3',
450: 1:      'question': '6855',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '5',
450: 1:      'question': '9881',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '0',
450: 1:      'question': '5531',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '5',
450: 1:      'question': '1234567890',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '5',
450: 1:      'question': '0987654321',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '5',
450: 1:      'question': '1029384756',
450: 1:      'valid': true
450: 1:    },
450: 1:    {
450: 1:      'answer': '5',
450: 1:      'question': '6574839201',
450: 1:      'valid': true
450: 1:    }
450: 1:  ],
450: 1:  'info': [
450: 1:    '✅f(0000) = 4',
450: 1:    '✅f(0123) = 1',
450: 1:    '✅f(4567) = 1',
450: 1:    '✅f(8901) = 4',
450: 1:    '✅f(1111) = 0',
450: 1:    '✅f(3366) = 2',
450: 1:    '✅f(8899) = 6',
450: 1:    '✅f(0896) = 5',
450: 1:    '✅f(3333) = 0',
450: 1:    '✅f(4444) = 0',
450: 1:    '✅f(6677) = 2',
450: 1:    '✅f(8809) = 6',
450: 1:    '✅f(7111) = 0',
450: 1:    '✅f(2172) = 0',
450: 1:    '✅f(6666) = 4',
450: 1:    '✅f(3213) = 0',
450: 1:    '✅f(7662) = 2',
450: 1:    '✅f(9312) = 1',
450: 1:    '✅f(2222) = 0',
450: 1:    '✅f(5555) = 0',
450: 1:    '✅f(8193) = 3',
450: 1:    '✅f(8096) = 5',
450: 1:    '✅f(7777) = 0',
450: 1:    '✅f(9999) = 4',
450: 1:    '✅f(7756) = 1',
450: 1:    '✅f(6855) = 3',
450: 1:    '✅f(9881) = 5',
450: 1:    '✅f(5531) = 0',
450: 1:    '✅f(1234567890) = 5',
450: 1:    '✅f(0987654321) = 5',
450: 1:    '✅f(1029384756) = 5',
450: 1:    '✅f(6574839201) = 5',
450: 1:    '❌f(9298089492) = ??? != 9'
450: 1:  ],
450: 1:  'level': 15,
450: 1:  'nextQuestion': '9298089492',
450: 1:  'questions': [
450: 1:    '0000',
450: 1:    '0123',
450: 1:    '4567',
450: 1:    '8901',
450: 1:    '1111',
450: 1:    '3366',
450: 1:    '8899',
450: 1:    '0896',
450: 1:    '3333',
450: 1:    '4444',
450: 1:    '6677',
450: 1:    '8809',
450: 1:    '7111',
450: 1:    '2172',
450: 1:    '6666',
450: 1:    '3213',
450: 1:    '7662',
450: 1:    '9312',
450: 1:    '2222',
450: 1:    '5555',
450: 1:    '8193',
450: 1:    '8096',
450: 1:    '7777',
450: 1:    '9999',
450: 1:    '7756',
450: 1:    '6855',
450: 1:    '9881',
450: 1:    '5531',
450: 1:    '1234567890',
450: 1:    '0987654321',
450: 1:    '1029384756',
450: 1:    '6574839201',
450: 1:    '9298089492'
450: 1:  ]
450: 1:}
450: 1:Scores: 23614
450: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5', '0', '4', '1', '3', '5', '0', '5', '5', '5', '5', '9']')
450: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
451: 1:BoardData {
451: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
451: 1:  'expectedAnswer': '4',
451: 1:  'history': [
451: 1:    {
451: 1:      'answer': '4',
451: 1:      'question': '0000',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '1',
451: 1:      'question': '0123',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '1',
451: 1:      'question': '4567',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '4',
451: 1:      'question': '8901',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '0',
451: 1:      'question': '1111',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '2',
451: 1:      'question': '3366',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '6',
451: 1:      'question': '8899',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '5',
451: 1:      'question': '0896',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '0',
451: 1:      'question': '3333',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '0',
451: 1:      'question': '4444',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '2',
451: 1:      'question': '6677',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '6',
451: 1:      'question': '8809',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '0',
451: 1:      'question': '7111',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '0',
451: 1:      'question': '2172',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '4',
451: 1:      'question': '6666',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '0',
451: 1:      'question': '3213',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '2',
451: 1:      'question': '7662',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '1',
451: 1:      'question': '9312',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '0',
451: 1:      'question': '2222',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '0',
451: 1:      'question': '5555',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '3',
451: 1:      'question': '8193',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '5',
451: 1:      'question': '8096',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '0',
451: 1:      'question': '7777',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '4',
451: 1:      'question': '9999',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '1',
451: 1:      'question': '7756',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '3',
451: 1:      'question': '6855',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '5',
451: 1:      'question': '9881',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '0',
451: 1:      'question': '5531',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '5',
451: 1:      'question': '1234567890',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '5',
451: 1:      'question': '0987654321',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '5',
451: 1:      'question': '1029384756',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '5',
451: 1:      'question': '6574839201',
451: 1:      'valid': true
451: 1:    },
451: 1:    {
451: 1:      'answer': '9',
451: 1:      'question': '9298089492',
451: 1:      'valid': true
451: 1:    }
451: 1:  ],
451: 1:  'info': [
451: 1:    '✅f(0000) = 4',
451: 1:    '✅f(0123) = 1',
451: 1:    '✅f(4567) = 1',
451: 1:    '✅f(8901) = 4',
451: 1:    '✅f(1111) = 0',
451: 1:    '✅f(3366) = 2',
451: 1:    '✅f(8899) = 6',
451: 1:    '✅f(0896) = 5',
451: 1:    '✅f(3333) = 0',
451: 1:    '✅f(4444) = 0',
451: 1:    '✅f(6677) = 2',
451: 1:    '✅f(8809) = 6',
451: 1:    '✅f(7111) = 0',
451: 1:    '✅f(2172) = 0',
451: 1:    '✅f(6666) = 4',
451: 1:    '✅f(3213) = 0',
451: 1:    '✅f(7662) = 2',
451: 1:    '✅f(9312) = 1',
451: 1:    '✅f(2222) = 0',
451: 1:    '✅f(5555) = 0',
451: 1:    '✅f(8193) = 3',
451: 1:    '✅f(8096) = 5',
451: 1:    '✅f(7777) = 0',
451: 1:    '✅f(9999) = 4',
451: 1:    '✅f(7756) = 1',
451: 1:    '✅f(6855) = 3',
451: 1:    '✅f(9881) = 5',
451: 1:    '✅f(5531) = 0',
451: 1:    '✅f(1234567890) = 5',
451: 1:    '✅f(0987654321) = 5',
451: 1:    '✅f(1029384756) = 5',
451: 1:    '✅f(6574839201) = 5',
451: 1:    '✅f(9298089492) = 9',
451: 1:    '❌f(8734092357) = ??? != 4'
451: 1:  ],
451: 1:  'level': 15,
451: 1:  'nextQuestion': '8734092357',
451: 1:  'questions': [
451: 1:    '0000',
451: 1:    '0123',
451: 1:    '4567',
451: 1:    '8901',
451: 1:    '1111',
451: 1:    '3366',
451: 1:    '8899',
451: 1:    '0896',
451: 1:    '3333',
451: 1:    '4444',
451: 1:    '6677',
451: 1:    '8809',
451: 1:    '7111',
451: 1:    '2172',
451: 1:    '6666',
451: 1:    '3213',
451: 1:    '7662',
451: 1:    '9312',
451: 1:    '2222',
451: 1:    '5555',
451: 1:    '8193',
451: 1:    '8096',
451: 1:    '7777',
451: 1:    '9999',
451: 1:    '7756',
451: 1:    '6855',
451: 1:    '9881',
451: 1:    '5531',
451: 1:    '1234567890',
451: 1:    '0987654321',
451: 1:    '1029384756',
451: 1:    '6574839201',
451: 1:    '9298089492',
451: 1:    '8734092357'
451: 1:  ]
451: 1:}
451: 1:Scores: 23619
451: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5', '0', '4', '1', '3', '5', '0', '5', '5', '5', '5', '9', '4']')
451: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
452: 1:BoardData {
452: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
452: 1:  'expectedAnswer': '6',
452: 1:  'history': [
452: 1:    {
452: 1:      'answer': '4',
452: 1:      'question': '0000',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '1',
452: 1:      'question': '0123',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '1',
452: 1:      'question': '4567',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '4',
452: 1:      'question': '8901',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '0',
452: 1:      'question': '1111',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '2',
452: 1:      'question': '3366',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '6',
452: 1:      'question': '8899',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '5',
452: 1:      'question': '0896',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '0',
452: 1:      'question': '3333',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '0',
452: 1:      'question': '4444',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '2',
452: 1:      'question': '6677',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '6',
452: 1:      'question': '8809',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '0',
452: 1:      'question': '7111',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '0',
452: 1:      'question': '2172',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '4',
452: 1:      'question': '6666',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '0',
452: 1:      'question': '3213',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '2',
452: 1:      'question': '7662',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '1',
452: 1:      'question': '9312',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '0',
452: 1:      'question': '2222',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '0',
452: 1:      'question': '5555',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '3',
452: 1:      'question': '8193',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '5',
452: 1:      'question': '8096',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '0',
452: 1:      'question': '7777',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '4',
452: 1:      'question': '9999',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '1',
452: 1:      'question': '7756',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '3',
452: 1:      'question': '6855',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '5',
452: 1:      'question': '9881',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '0',
452: 1:      'question': '5531',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '5',
452: 1:      'question': '1234567890',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '5',
452: 1:      'question': '0987654321',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '5',
452: 1:      'question': '1029384756',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '5',
452: 1:      'question': '6574839201',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '9',
452: 1:      'question': '9298089492',
452: 1:      'valid': true
452: 1:    },
452: 1:    {
452: 1:      'answer': '4',
452: 1:      'question': '8734092357',
452: 1:      'valid': true
452: 1:    }
452: 1:  ],
452: 1:  'info': [
452: 1:    '✅f(0000) = 4',
452: 1:    '✅f(0123) = 1',
452: 1:    '✅f(4567) = 1',
452: 1:    '✅f(8901) = 4',
452: 1:    '✅f(1111) = 0',
452: 1:    '✅f(3366) = 2',
452: 1:    '✅f(8899) = 6',
452: 1:    '✅f(0896) = 5',
452: 1:    '✅f(3333) = 0',
452: 1:    '✅f(4444) = 0',
452: 1:    '✅f(6677) = 2',
452: 1:    '✅f(8809) = 6',
452: 1:    '✅f(7111) = 0',
452: 1:    '✅f(2172) = 0',
452: 1:    '✅f(6666) = 4',
452: 1:    '✅f(3213) = 0',
452: 1:    '✅f(7662) = 2',
452: 1:    '✅f(9312) = 1',
452: 1:    '✅f(2222) = 0',
452: 1:    '✅f(5555) = 0',
452: 1:    '✅f(8193) = 3',
452: 1:    '✅f(8096) = 5',
452: 1:    '✅f(7777) = 0',
452: 1:    '✅f(9999) = 4',
452: 1:    '✅f(7756) = 1',
452: 1:    '✅f(6855) = 3',
452: 1:    '✅f(9881) = 5',
452: 1:    '✅f(5531) = 0',
452: 1:    '✅f(1234567890) = 5',
452: 1:    '✅f(0987654321) = 5',
452: 1:    '✅f(1029384756) = 5',
452: 1:    '✅f(6574839201) = 5',
452: 1:    '✅f(9298089492) = 9',
452: 1:    '✅f(8734092357) = 4',
452: 1:    '❌f(2083464833) = ??? != 6'
452: 1:  ],
452: 1:  'level': 15,
452: 1:  'nextQuestion': '2083464833',
452: 1:  'questions': [
452: 1:    '0000',
452: 1:    '0123',
452: 1:    '4567',
452: 1:    '8901',
452: 1:    '1111',
452: 1:    '3366',
452: 1:    '8899',
452: 1:    '0896',
452: 1:    '3333',
452: 1:    '4444',
452: 1:    '6677',
452: 1:    '8809',
452: 1:    '7111',
452: 1:    '2172',
452: 1:    '6666',
452: 1:    '3213',
452: 1:    '7662',
452: 1:    '9312',
452: 1:    '2222',
452: 1:    '5555',
452: 1:    '8193',
452: 1:    '8096',
452: 1:    '7777',
452: 1:    '9999',
452: 1:    '7756',
452: 1:    '6855',
452: 1:    '9881',
452: 1:    '5531',
452: 1:    '1234567890',
452: 1:    '0987654321',
452: 1:    '1029384756',
452: 1:    '6574839201',
452: 1:    '9298089492',
452: 1:    '8734092357',
452: 1:    '2083464833'
452: 1:  ]
452: 1:}
452: 1:Scores: 23624
452: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5', '0', '4', '1', '3', '5', '0', '5', '5', '5', '5', '9', '4', '6']')
452: 1:Fire Event: PassTest{complexity=21, testCount=36}
------------------------------------------
453: 1:BoardData {
453: 1:  'description': ['Think like a child...\n Implement an algorithm that can solve the following tasks:For example: \n8809 = 6\n7111 = 0\n2172 = 0\n6666 = 4\n1111 = 0\n3213 = 0\n7662 = 2\n9312 = 1\n0000 = 4\n2222 = 0\n3333 = 0\n5555 = 0\n8193 = 3\n8096 = 5\n7777 = 0\n9999 = 4'],
453: 1:  'expectedAnswer': '10',
453: 1:  'history': [
453: 1:    {
453: 1:      'answer': '4',
453: 1:      'question': '0000',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '1',
453: 1:      'question': '0123',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '1',
453: 1:      'question': '4567',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '4',
453: 1:      'question': '8901',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '0',
453: 1:      'question': '1111',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '2',
453: 1:      'question': '3366',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '6',
453: 1:      'question': '8899',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '5',
453: 1:      'question': '0896',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '0',
453: 1:      'question': '3333',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '0',
453: 1:      'question': '4444',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '2',
453: 1:      'question': '6677',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '6',
453: 1:      'question': '8809',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '0',
453: 1:      'question': '7111',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '0',
453: 1:      'question': '2172',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '4',
453: 1:      'question': '6666',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '0',
453: 1:      'question': '3213',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '2',
453: 1:      'question': '7662',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '1',
453: 1:      'question': '9312',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '0',
453: 1:      'question': '2222',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '0',
453: 1:      'question': '5555',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '3',
453: 1:      'question': '8193',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '5',
453: 1:      'question': '8096',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '0',
453: 1:      'question': '7777',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '4',
453: 1:      'question': '9999',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '1',
453: 1:      'question': '7756',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '3',
453: 1:      'question': '6855',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '5',
453: 1:      'question': '9881',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '0',
453: 1:      'question': '5531',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '5',
453: 1:      'question': '1234567890',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '5',
453: 1:      'question': '0987654321',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '5',
453: 1:      'question': '1029384756',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '5',
453: 1:      'question': '6574839201',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '9',
453: 1:      'question': '9298089492',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '4',
453: 1:      'question': '8734092357',
453: 1:      'valid': true
453: 1:    },
453: 1:    {
453: 1:      'answer': '6',
453: 1:      'question': '2083464833',
453: 1:      'valid': true
453: 1:    }
453: 1:  ],
453: 1:  'info': [
453: 1:    '✅f(0000) = 4',
453: 1:    '✅f(0123) = 1',
453: 1:    '✅f(4567) = 1',
453: 1:    '✅f(8901) = 4',
453: 1:    '✅f(1111) = 0',
453: 1:    '✅f(3366) = 2',
453: 1:    '✅f(8899) = 6',
453: 1:    '✅f(0896) = 5',
453: 1:    '✅f(3333) = 0',
453: 1:    '✅f(4444) = 0',
453: 1:    '✅f(6677) = 2',
453: 1:    '✅f(8809) = 6',
453: 1:    '✅f(7111) = 0',
453: 1:    '✅f(2172) = 0',
453: 1:    '✅f(6666) = 4',
453: 1:    '✅f(3213) = 0',
453: 1:    '✅f(7662) = 2',
453: 1:    '✅f(9312) = 1',
453: 1:    '✅f(2222) = 0',
453: 1:    '✅f(5555) = 0',
453: 1:    '✅f(8193) = 3',
453: 1:    '✅f(8096) = 5',
453: 1:    '✅f(7777) = 0',
453: 1:    '✅f(9999) = 4',
453: 1:    '✅f(7756) = 1',
453: 1:    '✅f(6855) = 3',
453: 1:    '✅f(9881) = 5',
453: 1:    '✅f(5531) = 0',
453: 1:    '✅f(1234567890) = 5',
453: 1:    '✅f(0987654321) = 5',
453: 1:    '✅f(1029384756) = 5',
453: 1:    '✅f(6574839201) = 5',
453: 1:    '✅f(9298089492) = 9',
453: 1:    '✅f(8734092357) = 4',
453: 1:    '✅f(2083464833) = 6',
453: 1:    '❌f(0000000000) = ??? != 10'
453: 1:  ],
453: 1:  'level': 15,
453: 1:  'nextQuestion': '0000000000',
453: 1:  'questions': [
453: 1:    '0000',
453: 1:    '0123',
453: 1:    '4567',
453: 1:    '8901',
453: 1:    '1111',
453: 1:    '3366',
453: 1:    '8899',
453: 1:    '0896',
453: 1:    '3333',
453: 1:    '4444',
453: 1:    '6677',
453: 1:    '8809',
453: 1:    '7111',
453: 1:    '2172',
453: 1:    '6666',
453: 1:    '3213',
453: 1:    '7662',
453: 1:    '9312',
453: 1:    '2222',
453: 1:    '5555',
453: 1:    '8193',
453: 1:    '8096',
453: 1:    '7777',
453: 1:    '9999',
453: 1:    '7756',
453: 1:    '6855',
453: 1:    '9881',
453: 1:    '5531',
453: 1:    '1234567890',
453: 1:    '0987654321',
453: 1:    '1029384756',
453: 1:    '6574839201',
453: 1:    '9298089492',
453: 1:    '8734092357',
453: 1:    '2083464833',
453: 1:    '0000000000'
453: 1:  ]
453: 1:}
453: 1:Scores: 23629
453: 1:Answer: message('['4', '1', '1', '4', '0', '2', '6', '5', '0', '0', '2', '6', '0', '0', '4', '0', '2', '1', '0', '0', '3', '5', '0', '4', '1', '3', '5', '0', '5', '5', '5', '5', '9', '4', '6', '10']')
453: 1:Fire Event: PassTest{complexity=21, testCount=36}
453: 1:Fire Event: NextAlgorithm{complexity=21, time=0}
------------------------------------------
454: 1:BoardData {
454: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
454: 1:  'history': [
454: 1:    {
454: 1:      'answer': '4',
454: 1:      'question': '0000',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '1',
454: 1:      'question': '0123',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '1',
454: 1:      'question': '4567',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '4',
454: 1:      'question': '8901',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '0',
454: 1:      'question': '1111',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '2',
454: 1:      'question': '3366',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '6',
454: 1:      'question': '8899',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '5',
454: 1:      'question': '0896',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '0',
454: 1:      'question': '3333',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '0',
454: 1:      'question': '4444',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '2',
454: 1:      'question': '6677',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '6',
454: 1:      'question': '8809',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '0',
454: 1:      'question': '7111',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '0',
454: 1:      'question': '2172',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '4',
454: 1:      'question': '6666',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '0',
454: 1:      'question': '3213',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '2',
454: 1:      'question': '7662',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '1',
454: 1:      'question': '9312',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '0',
454: 1:      'question': '2222',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '0',
454: 1:      'question': '5555',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '3',
454: 1:      'question': '8193',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '5',
454: 1:      'question': '8096',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '0',
454: 1:      'question': '7777',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '4',
454: 1:      'question': '9999',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '1',
454: 1:      'question': '7756',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '3',
454: 1:      'question': '6855',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '5',
454: 1:      'question': '9881',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '0',
454: 1:      'question': '5531',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '5',
454: 1:      'question': '1234567890',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '5',
454: 1:      'question': '0987654321',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '5',
454: 1:      'question': '1029384756',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '5',
454: 1:      'question': '6574839201',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '9',
454: 1:      'question': '9298089492',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '4',
454: 1:      'question': '8734092357',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '6',
454: 1:      'question': '2083464833',
454: 1:      'valid': true
454: 1:    },
454: 1:    {
454: 1:      'answer': '10',
454: 1:      'question': '0000000000',
454: 1:      'valid': true
454: 1:    }
454: 1:  ],
454: 1:  'info': [
454: 1:    '✅f(0000) = 4',
454: 1:    '✅f(0123) = 1',
454: 1:    '✅f(4567) = 1',
454: 1:    '✅f(8901) = 4',
454: 1:    '✅f(1111) = 0',
454: 1:    '✅f(3366) = 2',
454: 1:    '✅f(8899) = 6',
454: 1:    '✅f(0896) = 5',
454: 1:    '✅f(3333) = 0',
454: 1:    '✅f(4444) = 0',
454: 1:    '✅f(6677) = 2',
454: 1:    '✅f(8809) = 6',
454: 1:    '✅f(7111) = 0',
454: 1:    '✅f(2172) = 0',
454: 1:    '✅f(6666) = 4',
454: 1:    '✅f(3213) = 0',
454: 1:    '✅f(7662) = 2',
454: 1:    '✅f(9312) = 1',
454: 1:    '✅f(2222) = 0',
454: 1:    '✅f(5555) = 0',
454: 1:    '✅f(8193) = 3',
454: 1:    '✅f(8096) = 5',
454: 1:    '✅f(7777) = 0',
454: 1:    '✅f(9999) = 4',
454: 1:    '✅f(7756) = 1',
454: 1:    '✅f(6855) = 3',
454: 1:    '✅f(9881) = 5',
454: 1:    '✅f(5531) = 0',
454: 1:    '✅f(1234567890) = 5',
454: 1:    '✅f(0987654321) = 5',
454: 1:    '✅f(1029384756) = 5',
454: 1:    '✅f(6574839201) = 5',
454: 1:    '✅f(9298089492) = 9',
454: 1:    '✅f(8734092357) = 4',
454: 1:    '✅f(2083464833) = 6',
454: 1:    '✅f(0000000000) = 10'
454: 1:  ],
454: 1:  'level': 15,
454: 1:  'questions': []
454: 1:}
454: 1:Scores: 26468
454: 1:Answer: message('StartNextLevel')
454: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
455: 1:BoardData {
455: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
455: 1:  'expectedAnswer': '23',
455: 1:  'history': [],
455: 1:  'info': ['❌f(10) = ??? != 23'],
455: 1:  'level': 16,
455: 1:  'nextQuestion': '10',
455: 1:  'questions': ['10']
455: 1:}
455: 1:Scores: 26468
455: 1:Answer: message('['23']')
455: 1:Fire Event: PassTest{complexity=22, testCount=17}
------------------------------------------
456: 1:BoardData {
456: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
456: 1:  'expectedAnswer': '78',
456: 1:  'history': [{
456: 1:    'answer': '23',
456: 1:    'question': '10',
456: 1:    'valid': true
456: 1:  }],
456: 1:  'info': [
456: 1:    '✅f(10) = 23',
456: 1:    '❌f(20) = ??? != 78'
456: 1:  ],
456: 1:  'level': 16,
456: 1:  'nextQuestion': '20',
456: 1:  'questions': [
456: 1:    '10',
456: 1:    '20'
456: 1:  ]
456: 1:}
456: 1:Scores: 26480
456: 1:Answer: message('['23', '78']')
456: 1:Fire Event: PassTest{complexity=22, testCount=17}
------------------------------------------
457: 1:BoardData {
457: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
457: 1:  'expectedAnswer': '195',
457: 1:  'history': [
457: 1:    {
457: 1:      'answer': '23',
457: 1:      'question': '10',
457: 1:      'valid': true
457: 1:    },
457: 1:    {
457: 1:      'answer': '78',
457: 1:      'question': '20',
457: 1:      'valid': true
457: 1:    }
457: 1:  ],
457: 1:  'info': [
457: 1:    '✅f(10) = 23',
457: 1:    '✅f(20) = 78',
457: 1:    '❌f(30) = ??? != 195'
457: 1:  ],
457: 1:  'level': 16,
457: 1:  'nextQuestion': '30',
457: 1:  'questions': [
457: 1:    '10',
457: 1:    '20',
457: 1:    '30'
457: 1:  ]
457: 1:}
457: 1:Scores: 26492
457: 1:Answer: message('['23', '78', '195']')
457: 1:Fire Event: PassTest{complexity=22, testCount=17}
------------------------------------------
458: 1:BoardData {
458: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
458: 1:  'expectedAnswer': '2318',
458: 1:  'history': [
458: 1:    {
458: 1:      'answer': '23',
458: 1:      'question': '10',
458: 1:      'valid': true
458: 1:    },
458: 1:    {
458: 1:      'answer': '78',
458: 1:      'question': '20',
458: 1:      'valid': true
458: 1:    },
458: 1:    {
458: 1:      'answer': '195',
458: 1:      'question': '30',
458: 1:      'valid': true
458: 1:    }
458: 1:  ],
458: 1:  'info': [
458: 1:    '✅f(10) = 23',
458: 1:    '✅f(20) = 78',
458: 1:    '✅f(30) = 195',
458: 1:    '❌f(100) = ??? != 2318'
458: 1:  ],
458: 1:  'level': 16,
458: 1:  'nextQuestion': '100',
458: 1:  'questions': [
458: 1:    '10',
458: 1:    '20',
458: 1:    '30',
458: 1:    '100'
458: 1:  ]
458: 1:}
458: 1:Scores: 26504
458: 1:Answer: message('['23', '78', '195', '2318']')
458: 1:Fire Event: PassTest{complexity=22, testCount=17}
------------------------------------------
459: 1:BoardData {
459: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
459: 1:  'expectedAnswer': '9168',
459: 1:  'history': [
459: 1:    {
459: 1:      'answer': '23',
459: 1:      'question': '10',
459: 1:      'valid': true
459: 1:    },
459: 1:    {
459: 1:      'answer': '78',
459: 1:      'question': '20',
459: 1:      'valid': true
459: 1:    },
459: 1:    {
459: 1:      'answer': '195',
459: 1:      'question': '30',
459: 1:      'valid': true
459: 1:    },
459: 1:    {
459: 1:      'answer': '2318',
459: 1:      'question': '100',
459: 1:      'valid': true
459: 1:    }
459: 1:  ],
459: 1:  'info': [
459: 1:    '✅f(10) = 23',
459: 1:    '✅f(20) = 78',
459: 1:    '✅f(30) = 195',
459: 1:    '✅f(100) = 2318',
459: 1:    '❌f(200) = ??? != 9168'
459: 1:  ],
459: 1:  'level': 16,
459: 1:  'nextQuestion': '200',
459: 1:  'questions': [
459: 1:    '10',
459: 1:    '20',
459: 1:    '30',
459: 1:    '100',
459: 1:    '200'
459: 1:  ]
459: 1:}
459: 1:Scores: 26516
459: 1:Answer: message('['23', '78', '195', '2318', '9168']')
459: 1:Fire Event: PassTest{complexity=22, testCount=17}
------------------------------------------
460: 1:BoardData {
460: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
460: 1:  'expectedAnswer': '20850',
460: 1:  'history': [
460: 1:    {
460: 1:      'answer': '23',
460: 1:      'question': '10',
460: 1:      'valid': true
460: 1:    },
460: 1:    {
460: 1:      'answer': '78',
460: 1:      'question': '20',
460: 1:      'valid': true
460: 1:    },
460: 1:    {
460: 1:      'answer': '195',
460: 1:      'question': '30',
460: 1:      'valid': true
460: 1:    },
460: 1:    {
460: 1:      'answer': '2318',
460: 1:      'question': '100',
460: 1:      'valid': true
460: 1:    },
460: 1:    {
460: 1:      'answer': '9168',
460: 1:      'question': '200',
460: 1:      'valid': true
460: 1:    }
460: 1:  ],
460: 1:  'info': [
460: 1:    '✅f(10) = 23',
460: 1:    '✅f(20) = 78',
460: 1:    '✅f(30) = 195',
460: 1:    '✅f(100) = 2318',
460: 1:    '✅f(200) = 9168',
460: 1:    '❌f(300) = ??? != 20850'
460: 1:  ],
460: 1:  'level': 16,
460: 1:  'nextQuestion': '300',
460: 1:  'questions': [
460: 1:    '10',
460: 1:    '20',
460: 1:    '30',
460: 1:    '100',
460: 1:    '200',
460: 1:    '300'
460: 1:  ]
460: 1:}
460: 1:Scores: 26528
460: 1:Answer: message('['23', '78', '195', '2318', '9168', '20850']')
460: 1:Fire Event: PassTest{complexity=22, testCount=17}
------------------------------------------
461: 1:BoardData {
461: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
461: 1:  'expectedAnswer': '57918',
461: 1:  'history': [
461: 1:    {
461: 1:      'answer': '23',
461: 1:      'question': '10',
461: 1:      'valid': true
461: 1:    },
461: 1:    {
461: 1:      'answer': '78',
461: 1:      'question': '20',
461: 1:      'valid': true
461: 1:    },
461: 1:    {
461: 1:      'answer': '195',
461: 1:      'question': '30',
461: 1:      'valid': true
461: 1:    },
461: 1:    {
461: 1:      'answer': '2318',
461: 1:      'question': '100',
461: 1:      'valid': true
461: 1:    },
461: 1:    {
461: 1:      'answer': '9168',
461: 1:      'question': '200',
461: 1:      'valid': true
461: 1:    },
461: 1:    {
461: 1:      'answer': '20850',
461: 1:      'question': '300',
461: 1:      'valid': true
461: 1:    }
461: 1:  ],
461: 1:  'info': [
461: 1:    '✅f(10) = 23',
461: 1:    '✅f(20) = 78',
461: 1:    '✅f(30) = 195',
461: 1:    '✅f(100) = 2318',
461: 1:    '✅f(200) = 9168',
461: 1:    '✅f(300) = 20850',
461: 1:    '❌f(500) = ??? != 57918'
461: 1:  ],
461: 1:  'level': 16,
461: 1:  'nextQuestion': '500',
461: 1:  'questions': [
461: 1:    '10',
461: 1:    '20',
461: 1:    '30',
461: 1:    '100',
461: 1:    '200',
461: 1:    '300',
461: 1:    '500'
461: 1:  ]
461: 1:}
461: 1:Scores: 26540
461: 1:Answer: message('['23', '78', '195', '2318', '9168', '20850', '57918']')
461: 1:Fire Event: PassTest{complexity=22, testCount=17}
------------------------------------------
462: 1:BoardData {
462: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
462: 1:  'expectedAnswer': '233168',
462: 1:  'history': [
462: 1:    {
462: 1:      'answer': '23',
462: 1:      'question': '10',
462: 1:      'valid': true
462: 1:    },
462: 1:    {
462: 1:      'answer': '78',
462: 1:      'question': '20',
462: 1:      'valid': true
462: 1:    },
462: 1:    {
462: 1:      'answer': '195',
462: 1:      'question': '30',
462: 1:      'valid': true
462: 1:    },
462: 1:    {
462: 1:      'answer': '2318',
462: 1:      'question': '100',
462: 1:      'valid': true
462: 1:    },
462: 1:    {
462: 1:      'answer': '9168',
462: 1:      'question': '200',
462: 1:      'valid': true
462: 1:    },
462: 1:    {
462: 1:      'answer': '20850',
462: 1:      'question': '300',
462: 1:      'valid': true
462: 1:    },
462: 1:    {
462: 1:      'answer': '57918',
462: 1:      'question': '500',
462: 1:      'valid': true
462: 1:    }
462: 1:  ],
462: 1:  'info': [
462: 1:    '✅f(10) = 23',
462: 1:    '✅f(20) = 78',
462: 1:    '✅f(30) = 195',
462: 1:    '✅f(100) = 2318',
462: 1:    '✅f(200) = 9168',
462: 1:    '✅f(300) = 20850',
462: 1:    '✅f(500) = 57918',
462: 1:    '❌f(1000) = ??? != 233168'
462: 1:  ],
462: 1:  'level': 16,
462: 1:  'nextQuestion': '1000',
462: 1:  'questions': [
462: 1:    '10',
462: 1:    '20',
462: 1:    '30',
462: 1:    '100',
462: 1:    '200',
462: 1:    '300',
462: 1:    '500',
462: 1:    '1000'
462: 1:  ]
462: 1:}
462: 1:Scores: 26552
462: 1:Answer: message('['23', '78', '195', '2318', '9168', '20850', '57918', '233168']')
462: 1:Fire Event: PassTest{complexity=22, testCount=17}
------------------------------------------
463: 1:BoardData {
463: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
463: 1:  'expectedAnswer': '931668',
463: 1:  'history': [
463: 1:    {
463: 1:      'answer': '23',
463: 1:      'question': '10',
463: 1:      'valid': true
463: 1:    },
463: 1:    {
463: 1:      'answer': '78',
463: 1:      'question': '20',
463: 1:      'valid': true
463: 1:    },
463: 1:    {
463: 1:      'answer': '195',
463: 1:      'question': '30',
463: 1:      'valid': true
463: 1:    },
463: 1:    {
463: 1:      'answer': '2318',
463: 1:      'question': '100',
463: 1:      'valid': true
463: 1:    },
463: 1:    {
463: 1:      'answer': '9168',
463: 1:      'question': '200',
463: 1:      'valid': true
463: 1:    },
463: 1:    {
463: 1:      'answer': '20850',
463: 1:      'question': '300',
463: 1:      'valid': true
463: 1:    },
463: 1:    {
463: 1:      'answer': '57918',
463: 1:      'question': '500',
463: 1:      'valid': true
463: 1:    },
463: 1:    {
463: 1:      'answer': '233168',
463: 1:      'question': '1000',
463: 1:      'valid': true
463: 1:    }
463: 1:  ],
463: 1:  'info': [
463: 1:    '✅f(10) = 23',
463: 1:    '✅f(20) = 78',
463: 1:    '✅f(30) = 195',
463: 1:    '✅f(100) = 2318',
463: 1:    '✅f(200) = 9168',
463: 1:    '✅f(300) = 20850',
463: 1:    '✅f(500) = 57918',
463: 1:    '✅f(1000) = 233168',
463: 1:    '❌f(2000) = ??? != 931668'
463: 1:  ],
463: 1:  'level': 16,
463: 1:  'nextQuestion': '2000',
463: 1:  'questions': [
463: 1:    '10',
463: 1:    '20',
463: 1:    '30',
463: 1:    '100',
463: 1:    '200',
463: 1:    '300',
463: 1:    '500',
463: 1:    '1000',
463: 1:    '2000'
463: 1:  ]
463: 1:}
463: 1:Scores: 26564
463: 1:Answer: message('['23', '78', '195', '2318', '9168', '20850', '57918', '233168', '931668']')
463: 1:Fire Event: PassTest{complexity=22, testCount=17}
------------------------------------------
464: 1:BoardData {
464: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
464: 1:  'expectedAnswer': '2098500',
464: 1:  'history': [
464: 1:    {
464: 1:      'answer': '23',
464: 1:      'question': '10',
464: 1:      'valid': true
464: 1:    },
464: 1:    {
464: 1:      'answer': '78',
464: 1:      'question': '20',
464: 1:      'valid': true
464: 1:    },
464: 1:    {
464: 1:      'answer': '195',
464: 1:      'question': '30',
464: 1:      'valid': true
464: 1:    },
464: 1:    {
464: 1:      'answer': '2318',
464: 1:      'question': '100',
464: 1:      'valid': true
464: 1:    },
464: 1:    {
464: 1:      'answer': '9168',
464: 1:      'question': '200',
464: 1:      'valid': true
464: 1:    },
464: 1:    {
464: 1:      'answer': '20850',
464: 1:      'question': '300',
464: 1:      'valid': true
464: 1:    },
464: 1:    {
464: 1:      'answer': '57918',
464: 1:      'question': '500',
464: 1:      'valid': true
464: 1:    },
464: 1:    {
464: 1:      'answer': '233168',
464: 1:      'question': '1000',
464: 1:      'valid': true
464: 1:    },
464: 1:    {
464: 1:      'answer': '931668',
464: 1:      'question': '2000',
464: 1:      'valid': true
464: 1:    }
464: 1:  ],
464: 1:  'info': [
464: 1:    '✅f(10) = 23',
464: 1:    '✅f(20) = 78',
464: 1:    '✅f(30) = 195',
464: 1:    '✅f(100) = 2318',
464: 1:    '✅f(200) = 9168',
464: 1:    '✅f(300) = 20850',
464: 1:    '✅f(500) = 57918',
464: 1:    '✅f(1000) = 233168',
464: 1:    '✅f(2000) = 931668',
464: 1:    '❌f(3000) = ??? != 2098500'
464: 1:  ],
464: 1:  'level': 16,
464: 1:  'nextQuestion': '3000',
464: 1:  'questions': [
464: 1:    '10',
464: 1:    '20',
464: 1:    '30',
464: 1:    '100',
464: 1:    '200',
464: 1:    '300',
464: 1:    '500',
464: 1:    '1000',
464: 1:    '2000',
464: 1:    '3000'
464: 1:  ]
464: 1:}
464: 1:Scores: 26576
464: 1:Answer: message('['23', '78', '195', '2318', '9168', '20850', '57918', '233168', '931668', '2098500']')
464: 1:Fire Event: PassTest{complexity=22, testCount=17}
------------------------------------------
465: 1:BoardData {
465: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
465: 1:  'expectedAnswer': '5829168',
465: 1:  'history': [
465: 1:    {
465: 1:      'answer': '23',
465: 1:      'question': '10',
465: 1:      'valid': true
465: 1:    },
465: 1:    {
465: 1:      'answer': '78',
465: 1:      'question': '20',
465: 1:      'valid': true
465: 1:    },
465: 1:    {
465: 1:      'answer': '195',
465: 1:      'question': '30',
465: 1:      'valid': true
465: 1:    },
465: 1:    {
465: 1:      'answer': '2318',
465: 1:      'question': '100',
465: 1:      'valid': true
465: 1:    },
465: 1:    {
465: 1:      'answer': '9168',
465: 1:      'question': '200',
465: 1:      'valid': true
465: 1:    },
465: 1:    {
465: 1:      'answer': '20850',
465: 1:      'question': '300',
465: 1:      'valid': true
465: 1:    },
465: 1:    {
465: 1:      'answer': '57918',
465: 1:      'question': '500',
465: 1:      'valid': true
465: 1:    },
465: 1:    {
465: 1:      'answer': '233168',
465: 1:      'question': '1000',
465: 1:      'valid': true
465: 1:    },
465: 1:    {
465: 1:      'answer': '931668',
465: 1:      'question': '2000',
465: 1:      'valid': true
465: 1:    },
465: 1:    {
465: 1:      'answer': '2098500',
465: 1:      'question': '3000',
465: 1:      'valid': true
465: 1:    }
465: 1:  ],
465: 1:  'info': [
465: 1:    '✅f(10) = 23',
465: 1:    '✅f(20) = 78',
465: 1:    '✅f(30) = 195',
465: 1:    '✅f(100) = 2318',
465: 1:    '✅f(200) = 9168',
465: 1:    '✅f(300) = 20850',
465: 1:    '✅f(500) = 57918',
465: 1:    '✅f(1000) = 233168',
465: 1:    '✅f(2000) = 931668',
465: 1:    '✅f(3000) = 2098500',
465: 1:    '❌f(5000) = ??? != 5829168'
465: 1:  ],
465: 1:  'level': 16,
465: 1:  'nextQuestion': '5000',
465: 1:  'questions': [
465: 1:    '10',
465: 1:    '20',
465: 1:    '30',
465: 1:    '100',
465: 1:    '200',
465: 1:    '300',
465: 1:    '500',
465: 1:    '1000',
465: 1:    '2000',
465: 1:    '3000',
465: 1:    '5000'
465: 1:  ]
465: 1:}
465: 1:Scores: 26588
465: 1:Answer: message('['23', '78', '195', '2318', '9168', '20850', '57918', '233168', '931668', '2098500', '5829168']')
465: 1:Fire Event: PassTest{complexity=22, testCount=17}
------------------------------------------
466: 1:BoardData {
466: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
466: 1:  'expectedAnswer': '23331668',
466: 1:  'history': [
466: 1:    {
466: 1:      'answer': '23',
466: 1:      'question': '10',
466: 1:      'valid': true
466: 1:    },
466: 1:    {
466: 1:      'answer': '78',
466: 1:      'question': '20',
466: 1:      'valid': true
466: 1:    },
466: 1:    {
466: 1:      'answer': '195',
466: 1:      'question': '30',
466: 1:      'valid': true
466: 1:    },
466: 1:    {
466: 1:      'answer': '2318',
466: 1:      'question': '100',
466: 1:      'valid': true
466: 1:    },
466: 1:    {
466: 1:      'answer': '9168',
466: 1:      'question': '200',
466: 1:      'valid': true
466: 1:    },
466: 1:    {
466: 1:      'answer': '20850',
466: 1:      'question': '300',
466: 1:      'valid': true
466: 1:    },
466: 1:    {
466: 1:      'answer': '57918',
466: 1:      'question': '500',
466: 1:      'valid': true
466: 1:    },
466: 1:    {
466: 1:      'answer': '233168',
466: 1:      'question': '1000',
466: 1:      'valid': true
466: 1:    },
466: 1:    {
466: 1:      'answer': '931668',
466: 1:      'question': '2000',
466: 1:      'valid': true
466: 1:    },
466: 1:    {
466: 1:      'answer': '2098500',
466: 1:      'question': '3000',
466: 1:      'valid': true
466: 1:    },
466: 1:    {
466: 1:      'answer': '5829168',
466: 1:      'question': '5000',
466: 1:      'valid': true
466: 1:    }
466: 1:  ],
466: 1:  'info': [
466: 1:    '✅f(10) = 23',
466: 1:    '✅f(20) = 78',
466: 1:    '✅f(30) = 195',
466: 1:    '✅f(100) = 2318',
466: 1:    '✅f(200) = 9168',
466: 1:    '✅f(300) = 20850',
466: 1:    '✅f(500) = 57918',
466: 1:    '✅f(1000) = 233168',
466: 1:    '✅f(2000) = 931668',
466: 1:    '✅f(3000) = 2098500',
466: 1:    '✅f(5000) = 5829168',
466: 1:    '❌f(10000) = ??? != 23331668'
466: 1:  ],
466: 1:  'level': 16,
466: 1:  'nextQuestion': '10000',
466: 1:  'questions': [
466: 1:    '10',
466: 1:    '20',
466: 1:    '30',
466: 1:    '100',
466: 1:    '200',
466: 1:    '300',
466: 1:    '500',
466: 1:    '1000',
466: 1:    '2000',
466: 1:    '3000',
466: 1:    '5000',
466: 1:    '10000'
466: 1:  ]
466: 1:}
466: 1:Scores: 26600
466: 1:Answer: message('['23', '78', '195', '2318', '9168', '20850', '57918', '233168', '931668', '2098500', '5829168', '23331668']')
466: 1:Fire Event: PassTest{complexity=22, testCount=17}
------------------------------------------
467: 1:BoardData {
467: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
467: 1:  'expectedAnswer': '115229219',
467: 1:  'history': [
467: 1:    {
467: 1:      'answer': '23',
467: 1:      'question': '10',
467: 1:      'valid': true
467: 1:    },
467: 1:    {
467: 1:      'answer': '78',
467: 1:      'question': '20',
467: 1:      'valid': true
467: 1:    },
467: 1:    {
467: 1:      'answer': '195',
467: 1:      'question': '30',
467: 1:      'valid': true
467: 1:    },
467: 1:    {
467: 1:      'answer': '2318',
467: 1:      'question': '100',
467: 1:      'valid': true
467: 1:    },
467: 1:    {
467: 1:      'answer': '9168',
467: 1:      'question': '200',
467: 1:      'valid': true
467: 1:    },
467: 1:    {
467: 1:      'answer': '20850',
467: 1:      'question': '300',
467: 1:      'valid': true
467: 1:    },
467: 1:    {
467: 1:      'answer': '57918',
467: 1:      'question': '500',
467: 1:      'valid': true
467: 1:    },
467: 1:    {
467: 1:      'answer': '233168',
467: 1:      'question': '1000',
467: 1:      'valid': true
467: 1:    },
467: 1:    {
467: 1:      'answer': '931668',
467: 1:      'question': '2000',
467: 1:      'valid': true
467: 1:    },
467: 1:    {
467: 1:      'answer': '2098500',
467: 1:      'question': '3000',
467: 1:      'valid': true
467: 1:    },
467: 1:    {
467: 1:      'answer': '5829168',
467: 1:      'question': '5000',
467: 1:      'valid': true
467: 1:    },
467: 1:    {
467: 1:      'answer': '23331668',
467: 1:      'question': '10000',
467: 1:      'valid': true
467: 1:    }
467: 1:  ],
467: 1:  'info': [
467: 1:    '✅f(10) = 23',
467: 1:    '✅f(20) = 78',
467: 1:    '✅f(30) = 195',
467: 1:    '✅f(100) = 2318',
467: 1:    '✅f(200) = 9168',
467: 1:    '✅f(300) = 20850',
467: 1:    '✅f(500) = 57918',
467: 1:    '✅f(1000) = 233168',
467: 1:    '✅f(2000) = 931668',
467: 1:    '✅f(3000) = 2098500',
467: 1:    '✅f(5000) = 5829168',
467: 1:    '✅f(10000) = 23331668',
467: 1:    '❌f(22222) = ??? != 115229219'
467: 1:  ],
467: 1:  'level': 16,
467: 1:  'nextQuestion': '22222',
467: 1:  'questions': [
467: 1:    '10',
467: 1:    '20',
467: 1:    '30',
467: 1:    '100',
467: 1:    '200',
467: 1:    '300',
467: 1:    '500',
467: 1:    '1000',
467: 1:    '2000',
467: 1:    '3000',
467: 1:    '5000',
467: 1:    '10000',
467: 1:    '22222'
467: 1:  ]
467: 1:}
467: 1:Scores: 26612
467: 1:Answer: message('['23', '78', '195', '2318', '9168', '20850', '57918', '233168', '931668', '2098500', '5829168', '23331668', '115229219']')
467: 1:Fire Event: PassTest{complexity=22, testCount=17}
------------------------------------------
468: 1:BoardData {
468: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
468: 1:  'expectedAnswer': '1036996298',
468: 1:  'history': [
468: 1:    {
468: 1:      'answer': '23',
468: 1:      'question': '10',
468: 1:      'valid': true
468: 1:    },
468: 1:    {
468: 1:      'answer': '78',
468: 1:      'question': '20',
468: 1:      'valid': true
468: 1:    },
468: 1:    {
468: 1:      'answer': '195',
468: 1:      'question': '30',
468: 1:      'valid': true
468: 1:    },
468: 1:    {
468: 1:      'answer': '2318',
468: 1:      'question': '100',
468: 1:      'valid': true
468: 1:    },
468: 1:    {
468: 1:      'answer': '9168',
468: 1:      'question': '200',
468: 1:      'valid': true
468: 1:    },
468: 1:    {
468: 1:      'answer': '20850',
468: 1:      'question': '300',
468: 1:      'valid': true
468: 1:    },
468: 1:    {
468: 1:      'answer': '57918',
468: 1:      'question': '500',
468: 1:      'valid': true
468: 1:    },
468: 1:    {
468: 1:      'answer': '233168',
468: 1:      'question': '1000',
468: 1:      'valid': true
468: 1:    },
468: 1:    {
468: 1:      'answer': '931668',
468: 1:      'question': '2000',
468: 1:      'valid': true
468: 1:    },
468: 1:    {
468: 1:      'answer': '2098500',
468: 1:      'question': '3000',
468: 1:      'valid': true
468: 1:    },
468: 1:    {
468: 1:      'answer': '5829168',
468: 1:      'question': '5000',
468: 1:      'valid': true
468: 1:    },
468: 1:    {
468: 1:      'answer': '23331668',
468: 1:      'question': '10000',
468: 1:      'valid': true
468: 1:    },
468: 1:    {
468: 1:      'answer': '115229219',
468: 1:      'question': '22222',
468: 1:      'valid': true
468: 1:    }
468: 1:  ],
468: 1:  'info': [
468: 1:    '✅f(10) = 23',
468: 1:    '✅f(20) = 78',
468: 1:    '✅f(30) = 195',
468: 1:    '✅f(100) = 2318',
468: 1:    '✅f(200) = 9168',
468: 1:    '✅f(300) = 20850',
468: 1:    '✅f(500) = 57918',
468: 1:    '✅f(1000) = 233168',
468: 1:    '✅f(2000) = 931668',
468: 1:    '✅f(3000) = 2098500',
468: 1:    '✅f(5000) = 5829168',
468: 1:    '✅f(10000) = 23331668',
468: 1:    '✅f(22222) = 115229219',
468: 1:    '❌f(66666) = ??? != 1036996298'
468: 1:  ],
468: 1:  'level': 16,
468: 1:  'nextQuestion': '66666',
468: 1:  'questions': [
468: 1:    '10',
468: 1:    '20',
468: 1:    '30',
468: 1:    '100',
468: 1:    '200',
468: 1:    '300',
468: 1:    '500',
468: 1:    '1000',
468: 1:    '2000',
468: 1:    '3000',
468: 1:    '5000',
468: 1:    '10000',
468: 1:    '22222',
468: 1:    '66666'
468: 1:  ]
468: 1:}
468: 1:Scores: 26624
468: 1:Answer: message('['23', '78', '195', '2318', '9168', '20850', '57918', '233168', '931668', '2098500', '5829168', '23331668', '115229219', '1036996298']')
468: 1:Fire Event: PassTest{complexity=22, testCount=17}
------------------------------------------
469: 1:BoardData {
469: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
469: 1:  'expectedAnswer': '2333216669',
469: 1:  'history': [
469: 1:    {
469: 1:      'answer': '23',
469: 1:      'question': '10',
469: 1:      'valid': true
469: 1:    },
469: 1:    {
469: 1:      'answer': '78',
469: 1:      'question': '20',
469: 1:      'valid': true
469: 1:    },
469: 1:    {
469: 1:      'answer': '195',
469: 1:      'question': '30',
469: 1:      'valid': true
469: 1:    },
469: 1:    {
469: 1:      'answer': '2318',
469: 1:      'question': '100',
469: 1:      'valid': true
469: 1:    },
469: 1:    {
469: 1:      'answer': '9168',
469: 1:      'question': '200',
469: 1:      'valid': true
469: 1:    },
469: 1:    {
469: 1:      'answer': '20850',
469: 1:      'question': '300',
469: 1:      'valid': true
469: 1:    },
469: 1:    {
469: 1:      'answer': '57918',
469: 1:      'question': '500',
469: 1:      'valid': true
469: 1:    },
469: 1:    {
469: 1:      'answer': '233168',
469: 1:      'question': '1000',
469: 1:      'valid': true
469: 1:    },
469: 1:    {
469: 1:      'answer': '931668',
469: 1:      'question': '2000',
469: 1:      'valid': true
469: 1:    },
469: 1:    {
469: 1:      'answer': '2098500',
469: 1:      'question': '3000',
469: 1:      'valid': true
469: 1:    },
469: 1:    {
469: 1:      'answer': '5829168',
469: 1:      'question': '5000',
469: 1:      'valid': true
469: 1:    },
469: 1:    {
469: 1:      'answer': '23331668',
469: 1:      'question': '10000',
469: 1:      'valid': true
469: 1:    },
469: 1:    {
469: 1:      'answer': '115229219',
469: 1:      'question': '22222',
469: 1:      'valid': true
469: 1:    },
469: 1:    {
469: 1:      'answer': '1036996298',
469: 1:      'question': '66666',
469: 1:      'valid': true
469: 1:    }
469: 1:  ],
469: 1:  'info': [
469: 1:    '✅f(10) = 23',
469: 1:    '✅f(20) = 78',
469: 1:    '✅f(30) = 195',
469: 1:    '✅f(100) = 2318',
469: 1:    '✅f(200) = 9168',
469: 1:    '✅f(300) = 20850',
469: 1:    '✅f(500) = 57918',
469: 1:    '✅f(1000) = 233168',
469: 1:    '✅f(2000) = 931668',
469: 1:    '✅f(3000) = 2098500',
469: 1:    '✅f(5000) = 5829168',
469: 1:    '✅f(10000) = 23331668',
469: 1:    '✅f(22222) = 115229219',
469: 1:    '✅f(66666) = 1036996298',
469: 1:    '❌f(99999) = ??? != 2333216669'
469: 1:  ],
469: 1:  'level': 16,
469: 1:  'nextQuestion': '99999',
469: 1:  'questions': [
469: 1:    '10',
469: 1:    '20',
469: 1:    '30',
469: 1:    '100',
469: 1:    '200',
469: 1:    '300',
469: 1:    '500',
469: 1:    '1000',
469: 1:    '2000',
469: 1:    '3000',
469: 1:    '5000',
469: 1:    '10000',
469: 1:    '22222',
469: 1:    '66666',
469: 1:    '99999'
469: 1:  ]
469: 1:}
469: 1:Scores: 26636
469: 1:Answer: message('['23', '78', '195', '2318', '9168', '20850', '57918', '233168', '931668', '2098500', '5829168', '23331668', '115229219', '1036996298', '2333216669']')
469: 1:Fire Event: PassTest{complexity=22, testCount=17}
------------------------------------------
470: 1:BoardData {
470: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
470: 1:  'expectedAnswer': '355636612814',
470: 1:  'history': [
470: 1:    {
470: 1:      'answer': '23',
470: 1:      'question': '10',
470: 1:      'valid': true
470: 1:    },
470: 1:    {
470: 1:      'answer': '78',
470: 1:      'question': '20',
470: 1:      'valid': true
470: 1:    },
470: 1:    {
470: 1:      'answer': '195',
470: 1:      'question': '30',
470: 1:      'valid': true
470: 1:    },
470: 1:    {
470: 1:      'answer': '2318',
470: 1:      'question': '100',
470: 1:      'valid': true
470: 1:    },
470: 1:    {
470: 1:      'answer': '9168',
470: 1:      'question': '200',
470: 1:      'valid': true
470: 1:    },
470: 1:    {
470: 1:      'answer': '20850',
470: 1:      'question': '300',
470: 1:      'valid': true
470: 1:    },
470: 1:    {
470: 1:      'answer': '57918',
470: 1:      'question': '500',
470: 1:      'valid': true
470: 1:    },
470: 1:    {
470: 1:      'answer': '233168',
470: 1:      'question': '1000',
470: 1:      'valid': true
470: 1:    },
470: 1:    {
470: 1:      'answer': '931668',
470: 1:      'question': '2000',
470: 1:      'valid': true
470: 1:    },
470: 1:    {
470: 1:      'answer': '2098500',
470: 1:      'question': '3000',
470: 1:      'valid': true
470: 1:    },
470: 1:    {
470: 1:      'answer': '5829168',
470: 1:      'question': '5000',
470: 1:      'valid': true
470: 1:    },
470: 1:    {
470: 1:      'answer': '23331668',
470: 1:      'question': '10000',
470: 1:      'valid': true
470: 1:    },
470: 1:    {
470: 1:      'answer': '115229219',
470: 1:      'question': '22222',
470: 1:      'valid': true
470: 1:    },
470: 1:    {
470: 1:      'answer': '1036996298',
470: 1:      'question': '66666',
470: 1:      'valid': true
470: 1:    },
470: 1:    {
470: 1:      'answer': '2333216669',
470: 1:      'question': '99999',
470: 1:      'valid': true
470: 1:    }
470: 1:  ],
470: 1:  'info': [
470: 1:    '✅f(10) = 23',
470: 1:    '✅f(20) = 78',
470: 1:    '✅f(30) = 195',
470: 1:    '✅f(100) = 2318',
470: 1:    '✅f(200) = 9168',
470: 1:    '✅f(300) = 20850',
470: 1:    '✅f(500) = 57918',
470: 1:    '✅f(1000) = 233168',
470: 1:    '✅f(2000) = 931668',
470: 1:    '✅f(3000) = 2098500',
470: 1:    '✅f(5000) = 5829168',
470: 1:    '✅f(10000) = 23331668',
470: 1:    '✅f(22222) = 115229219',
470: 1:    '✅f(66666) = 1036996298',
470: 1:    '✅f(99999) = 2333216669',
470: 1:    '❌f(1234567) = ??? != 355636612814'
470: 1:  ],
470: 1:  'level': 16,
470: 1:  'nextQuestion': '1234567',
470: 1:  'questions': [
470: 1:    '10',
470: 1:    '20',
470: 1:    '30',
470: 1:    '100',
470: 1:    '200',
470: 1:    '300',
470: 1:    '500',
470: 1:    '1000',
470: 1:    '2000',
470: 1:    '3000',
470: 1:    '5000',
470: 1:    '10000',
470: 1:    '22222',
470: 1:    '66666',
470: 1:    '99999',
470: 1:    '1234567'
470: 1:  ]
470: 1:}
470: 1:Scores: 26648
470: 1:Answer: message('['23', '78', '195', '2318', '9168', '20850', '57918', '233168', '931668', '2098500', '5829168', '23331668', '115229219', '1036996298', '2333216669', '355636612814']')
470: 1:Fire Event: PassTest{complexity=22, testCount=17}
------------------------------------------
471: 1:BoardData {
471: 1:  'description': ['If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\nThe sum of these multiples is 23.\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.\nAdditionally, if the number is negative, return 0 (for languages that do have them).\nNote: If the number is a multiple of both 3 and 5, only count it once.'],
471: 1:  'expectedAnswer': '13670680581720',
471: 1:  'history': [
471: 1:    {
471: 1:      'answer': '23',
471: 1:      'question': '10',
471: 1:      'valid': true
471: 1:    },
471: 1:    {
471: 1:      'answer': '78',
471: 1:      'question': '20',
471: 1:      'valid': true
471: 1:    },
471: 1:    {
471: 1:      'answer': '195',
471: 1:      'question': '30',
471: 1:      'valid': true
471: 1:    },
471: 1:    {
471: 1:      'answer': '2318',
471: 1:      'question': '100',
471: 1:      'valid': true
471: 1:    },
471: 1:    {
471: 1:      'answer': '9168',
471: 1:      'question': '200',
471: 1:      'valid': true
471: 1:    },
471: 1:    {
471: 1:      'answer': '20850',
471: 1:      'question': '300',
471: 1:      'valid': true
471: 1:    },
471: 1:    {
471: 1:      'answer': '57918',
471: 1:      'question': '500',
471: 1:      'valid': true
471: 1:    },
471: 1:    {
471: 1:      'answer': '233168',
471: 1:      'question': '1000',
471: 1:      'valid': true
471: 1:    },
471: 1:    {
471: 1:      'answer': '931668',
471: 1:      'question': '2000',
471: 1:      'valid': true
471: 1:    },
471: 1:    {
471: 1:      'answer': '2098500',
471: 1:      'question': '3000',
471: 1:      'valid': true
471: 1:    },
471: 1:    {
471: 1:      'answer': '5829168',
471: 1:      'question': '5000',
471: 1:      'valid': true
471: 1:    },
471: 1:    {
471: 1:      'answer': '23331668',
471: 1:      'question': '10000',
471: 1:      'valid': true
471: 1:    },
471: 1:    {
471: 1:      'answer': '115229219',
471: 1:      'question': '22222',
471: 1:      'valid': true
471: 1:    },
471: 1:    {
471: 1:      'answer': '1036996298',
471: 1:      'question': '66666',
471: 1:      'valid': true
471: 1:    },
471: 1:    {
471: 1:      'answer': '2333216669',
471: 1:      'question': '99999',
471: 1:      'valid': true
471: 1:    },
471: 1:    {
471: 1:      'answer': '355636612814',
471: 1:      'question': '1234567',
471: 1:      'valid': true
471: 1:    }
471: 1:  ],
471: 1:  'info': [
471: 1:    '✅f(10) = 23',
471: 1:    '✅f(20) = 78',
471: 1:    '✅f(30) = 195',
471: 1:    '✅f(100) = 2318',
471: 1:    '✅f(200) = 9168',
471: 1:    '✅f(300) = 20850',
471: 1:    '✅f(500) = 57918',
471: 1:    '✅f(1000) = 233168',
471: 1:    '✅f(2000) = 931668',
471: 1:    '✅f(3000) = 2098500',
471: 1:    '✅f(5000) = 5829168',
471: 1:    '✅f(10000) = 23331668',
471: 1:    '✅f(22222) = 115229219',
471: 1:    '✅f(66666) = 1036996298',
471: 1:    '✅f(99999) = 2333216669',
471: 1:    '✅f(1234567) = 355636612814',
471: 1:    '❌f(7654321) = ??? != 13670680581720'
471: 1:  ],
471: 1:  'level': 16,
471: 1:  'nextQuestion': '7654321',
471: 1:  'questions': [
471: 1:    '10',
471: 1:    '20',
471: 1:    '30',
471: 1:    '100',
471: 1:    '200',
471: 1:    '300',
471: 1:    '500',
471: 1:    '1000',
471: 1:    '2000',
471: 1:    '3000',
471: 1:    '5000',
471: 1:    '10000',
471: 1:    '22222',
471: 1:    '66666',
471: 1:    '99999',
471: 1:    '1234567',
471: 1:    '7654321'
471: 1:  ]
471: 1:}
471: 1:Scores: 26660
471: 1:Answer: message('['23', '78', '195', '2318', '9168', '20850', '57918', '233168', '931668', '2098500', '5829168', '23331668', '115229219', '1036996298', '2333216669', '355636612814', '13670680581720']')
471: 1:Fire Event: PassTest{complexity=22, testCount=17}
471: 1:Fire Event: NextAlgorithm{complexity=22, time=0}
------------------------------------------
472: 1:BoardData {
472: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
472: 1:  'history': [
472: 1:    {
472: 1:      'answer': '23',
472: 1:      'question': '10',
472: 1:      'valid': true
472: 1:    },
472: 1:    {
472: 1:      'answer': '78',
472: 1:      'question': '20',
472: 1:      'valid': true
472: 1:    },
472: 1:    {
472: 1:      'answer': '195',
472: 1:      'question': '30',
472: 1:      'valid': true
472: 1:    },
472: 1:    {
472: 1:      'answer': '2318',
472: 1:      'question': '100',
472: 1:      'valid': true
472: 1:    },
472: 1:    {
472: 1:      'answer': '9168',
472: 1:      'question': '200',
472: 1:      'valid': true
472: 1:    },
472: 1:    {
472: 1:      'answer': '20850',
472: 1:      'question': '300',
472: 1:      'valid': true
472: 1:    },
472: 1:    {
472: 1:      'answer': '57918',
472: 1:      'question': '500',
472: 1:      'valid': true
472: 1:    },
472: 1:    {
472: 1:      'answer': '233168',
472: 1:      'question': '1000',
472: 1:      'valid': true
472: 1:    },
472: 1:    {
472: 1:      'answer': '931668',
472: 1:      'question': '2000',
472: 1:      'valid': true
472: 1:    },
472: 1:    {
472: 1:      'answer': '2098500',
472: 1:      'question': '3000',
472: 1:      'valid': true
472: 1:    },
472: 1:    {
472: 1:      'answer': '5829168',
472: 1:      'question': '5000',
472: 1:      'valid': true
472: 1:    },
472: 1:    {
472: 1:      'answer': '23331668',
472: 1:      'question': '10000',
472: 1:      'valid': true
472: 1:    },
472: 1:    {
472: 1:      'answer': '115229219',
472: 1:      'question': '22222',
472: 1:      'valid': true
472: 1:    },
472: 1:    {
472: 1:      'answer': '1036996298',
472: 1:      'question': '66666',
472: 1:      'valid': true
472: 1:    },
472: 1:    {
472: 1:      'answer': '2333216669',
472: 1:      'question': '99999',
472: 1:      'valid': true
472: 1:    },
472: 1:    {
472: 1:      'answer': '355636612814',
472: 1:      'question': '1234567',
472: 1:      'valid': true
472: 1:    },
472: 1:    {
472: 1:      'answer': '13670680581720',
472: 1:      'question': '7654321',
472: 1:      'valid': true
472: 1:    }
472: 1:  ],
472: 1:  'info': [
472: 1:    '✅f(10) = 23',
472: 1:    '✅f(20) = 78',
472: 1:    '✅f(30) = 195',
472: 1:    '✅f(100) = 2318',
472: 1:    '✅f(200) = 9168',
472: 1:    '✅f(300) = 20850',
472: 1:    '✅f(500) = 57918',
472: 1:    '✅f(1000) = 233168',
472: 1:    '✅f(2000) = 931668',
472: 1:    '✅f(3000) = 2098500',
472: 1:    '✅f(5000) = 5829168',
472: 1:    '✅f(10000) = 23331668',
472: 1:    '✅f(22222) = 115229219',
472: 1:    '✅f(66666) = 1036996298',
472: 1:    '✅f(99999) = 2333216669',
472: 1:    '✅f(1234567) = 355636612814',
472: 1:    '✅f(7654321) = 13670680581720'
472: 1:  ],
472: 1:  'level': 16,
472: 1:  'questions': []
472: 1:}
472: 1:Scores: 29641
472: 1:Answer: message('StartNextLevel')
472: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
473: 1:BoardData {
473: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
473: 1:  'expectedAnswer': '7',
473: 1:  'history': [],
473: 1:  'info': ['❌f(456126121234546) = ??? != 7'],
473: 1:  'level': 17,
473: 1:  'nextQuestion': '456126121234546',
473: 1:  'questions': ['456126121234546']
473: 1:}
473: 1:Scores: 29641
473: 1:Answer: message('['7']')
473: 1:Fire Event: PassTest{complexity=23, testCount=27}
------------------------------------------
474: 1:BoardData {
474: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
474: 1:  'expectedAnswer': '0',
474: 1:  'history': [{
474: 1:    'answer': '7',
474: 1:    'question': '456126121234546',
474: 1:    'valid': true
474: 1:  }],
474: 1:  'info': [
474: 1:    '✅f(456126121234546) = 7',
474: 1:    '❌f(123456781234567) = ??? != 0'
474: 1:  ],
474: 1:  'level': 17,
474: 1:  'nextQuestion': '123456781234567',
474: 1:  'questions': [
474: 1:    '456126121234546',
474: 1:    '123456781234567'
474: 1:  ]
474: 1:}
474: 1:Scores: 29649
474: 1:Answer: message('['7', '0']')
474: 1:Fire Event: PassTest{complexity=23, testCount=27}
------------------------------------------
475: 1:BoardData {
475: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
475: 1:  'expectedAnswer': '2',
475: 1:  'history': [
475: 1:    {
475: 1:      'answer': '7',
475: 1:      'question': '456126121234546',
475: 1:      'valid': true
475: 1:    },
475: 1:    {
475: 1:      'answer': '0',
475: 1:      'question': '123456781234567',
475: 1:      'valid': true
475: 1:    }
475: 1:  ],
475: 1:  'info': [
475: 1:    '✅f(456126121234546) = 7',
475: 1:    '✅f(123456781234567) = 0',
475: 1:    '❌f(183168009579826) = ??? != 2'
475: 1:  ],
475: 1:  'level': 17,
475: 1:  'nextQuestion': '183168009579826',
475: 1:  'questions': [
475: 1:    '456126121234546',
475: 1:    '123456781234567',
475: 1:    '183168009579826'
475: 1:  ]
475: 1:}
475: 1:Scores: 29657
475: 1:Answer: message('['7', '0', '2']')
475: 1:Fire Event: PassTest{complexity=23, testCount=27}
------------------------------------------
476: 1:BoardData {
476: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
476: 1:  'expectedAnswer': '7',
476: 1:  'history': [
476: 1:    {
476: 1:      'answer': '7',
476: 1:      'question': '456126121234546',
476: 1:      'valid': true
476: 1:    },
476: 1:    {
476: 1:      'answer': '0',
476: 1:      'question': '123456781234567',
476: 1:      'valid': true
476: 1:    },
476: 1:    {
476: 1:      'answer': '2',
476: 1:      'question': '183168009579826',
476: 1:      'valid': true
476: 1:    }
476: 1:  ],
476: 1:  'info': [
476: 1:    '✅f(456126121234546) = 7',
476: 1:    '✅f(123456781234567) = 0',
476: 1:    '✅f(183168009579826) = 2',
476: 1:    '❌f(964720036906339) = ??? != 7'
476: 1:  ],
476: 1:  'level': 17,
476: 1:  'nextQuestion': '964720036906339',
476: 1:  'questions': [
476: 1:    '456126121234546',
476: 1:    '123456781234567',
476: 1:    '183168009579826',
476: 1:    '964720036906339'
476: 1:  ]
476: 1:}
476: 1:Scores: 29665
476: 1:Answer: message('['7', '0', '2', '7']')
476: 1:Fire Event: PassTest{complexity=23, testCount=27}
------------------------------------------
477: 1:BoardData {
477: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
477: 1:  'expectedAnswer': '9',
477: 1:  'history': [
477: 1:    {
477: 1:      'answer': '7',
477: 1:      'question': '456126121234546',
477: 1:      'valid': true
477: 1:    },
477: 1:    {
477: 1:      'answer': '0',
477: 1:      'question': '123456781234567',
477: 1:      'valid': true
477: 1:    },
477: 1:    {
477: 1:      'answer': '2',
477: 1:      'question': '183168009579826',
477: 1:      'valid': true
477: 1:    },
477: 1:    {
477: 1:      'answer': '7',
477: 1:      'question': '964720036906339',
477: 1:      'valid': true
477: 1:    }
477: 1:  ],
477: 1:  'info': [
477: 1:    '✅f(456126121234546) = 7',
477: 1:    '✅f(123456781234567) = 0',
477: 1:    '✅f(183168009579826) = 2',
477: 1:    '✅f(964720036906339) = 7',
477: 1:    '❌f(613951967276640) = ??? != 9'
477: 1:  ],
477: 1:  'level': 17,
477: 1:  'nextQuestion': '613951967276640',
477: 1:  'questions': [
477: 1:    '456126121234546',
477: 1:    '123456781234567',
477: 1:    '183168009579826',
477: 1:    '964720036906339',
477: 1:    '613951967276640'
477: 1:  ]
477: 1:}
477: 1:Scores: 29673
477: 1:Answer: message('['7', '0', '2', '7', '9']')
477: 1:Fire Event: PassTest{complexity=23, testCount=27}
------------------------------------------
478: 1:BoardData {
478: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
478: 1:  'expectedAnswer': '7',
478: 1:  'history': [
478: 1:    {
478: 1:      'answer': '7',
478: 1:      'question': '456126121234546',
478: 1:      'valid': true
478: 1:    },
478: 1:    {
478: 1:      'answer': '0',
478: 1:      'question': '123456781234567',
478: 1:      'valid': true
478: 1:    },
478: 1:    {
478: 1:      'answer': '2',
478: 1:      'question': '183168009579826',
478: 1:      'valid': true
478: 1:    },
478: 1:    {
478: 1:      'answer': '7',
478: 1:      'question': '964720036906339',
478: 1:      'valid': true
478: 1:    },
478: 1:    {
478: 1:      'answer': '9',
478: 1:      'question': '613951967276640',
478: 1:      'valid': true
478: 1:    }
478: 1:  ],
478: 1:  'info': [
478: 1:    '✅f(456126121234546) = 7',
478: 1:    '✅f(123456781234567) = 0',
478: 1:    '✅f(183168009579826) = 2',
478: 1:    '✅f(964720036906339) = 7',
478: 1:    '✅f(613951967276640) = 9',
478: 1:    '❌f(825813064400100) = ??? != 7'
478: 1:  ],
478: 1:  'level': 17,
478: 1:  'nextQuestion': '825813064400100',
478: 1:  'questions': [
478: 1:    '456126121234546',
478: 1:    '123456781234567',
478: 1:    '183168009579826',
478: 1:    '964720036906339',
478: 1:    '613951967276640',
478: 1:    '825813064400100'
478: 1:  ]
478: 1:}
478: 1:Scores: 29681
478: 1:Answer: message('['7', '0', '2', '7', '9', '7']')
478: 1:Fire Event: PassTest{complexity=23, testCount=27}
------------------------------------------
479: 1:BoardData {
479: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
479: 1:  'expectedAnswer': '9',
479: 1:  'history': [
479: 1:    {
479: 1:      'answer': '7',
479: 1:      'question': '456126121234546',
479: 1:      'valid': true
479: 1:    },
479: 1:    {
479: 1:      'answer': '0',
479: 1:      'question': '123456781234567',
479: 1:      'valid': true
479: 1:    },
479: 1:    {
479: 1:      'answer': '2',
479: 1:      'question': '183168009579826',
479: 1:      'valid': true
479: 1:    },
479: 1:    {
479: 1:      'answer': '7',
479: 1:      'question': '964720036906339',
479: 1:      'valid': true
479: 1:    },
479: 1:    {
479: 1:      'answer': '9',
479: 1:      'question': '613951967276640',
479: 1:      'valid': true
479: 1:    },
479: 1:    {
479: 1:      'answer': '7',
479: 1:      'question': '825813064400100',
479: 1:      'valid': true
479: 1:    }
479: 1:  ],
479: 1:  'info': [
479: 1:    '✅f(456126121234546) = 7',
479: 1:    '✅f(123456781234567) = 0',
479: 1:    '✅f(183168009579826) = 2',
479: 1:    '✅f(964720036906339) = 7',
479: 1:    '✅f(613951967276640) = 9',
479: 1:    '✅f(825813064400100) = 7',
479: 1:    '❌f(239698713103140) = ??? != 9'
479: 1:  ],
479: 1:  'level': 17,
479: 1:  'nextQuestion': '239698713103140',
479: 1:  'questions': [
479: 1:    '456126121234546',
479: 1:    '123456781234567',
479: 1:    '183168009579826',
479: 1:    '964720036906339',
479: 1:    '613951967276640',
479: 1:    '825813064400100',
479: 1:    '239698713103140'
479: 1:  ]
479: 1:}
479: 1:Scores: 29689
479: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9']')
479: 1:Fire Event: PassTest{complexity=23, testCount=27}
------------------------------------------
480: 1:BoardData {
480: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
480: 1:  'expectedAnswer': '7',
480: 1:  'history': [
480: 1:    {
480: 1:      'answer': '7',
480: 1:      'question': '456126121234546',
480: 1:      'valid': true
480: 1:    },
480: 1:    {
480: 1:      'answer': '0',
480: 1:      'question': '123456781234567',
480: 1:      'valid': true
480: 1:    },
480: 1:    {
480: 1:      'answer': '2',
480: 1:      'question': '183168009579826',
480: 1:      'valid': true
480: 1:    },
480: 1:    {
480: 1:      'answer': '7',
480: 1:      'question': '964720036906339',
480: 1:      'valid': true
480: 1:    },
480: 1:    {
480: 1:      'answer': '9',
480: 1:      'question': '613951967276640',
480: 1:      'valid': true
480: 1:    },
480: 1:    {
480: 1:      'answer': '7',
480: 1:      'question': '825813064400100',
480: 1:      'valid': true
480: 1:    },
480: 1:    {
480: 1:      'answer': '9',
480: 1:      'question': '239698713103140',
480: 1:      'valid': true
480: 1:    }
480: 1:  ],
480: 1:  'info': [
480: 1:    '✅f(456126121234546) = 7',
480: 1:    '✅f(123456781234567) = 0',
480: 1:    '✅f(183168009579826) = 2',
480: 1:    '✅f(964720036906339) = 7',
480: 1:    '✅f(613951967276640) = 9',
480: 1:    '✅f(825813064400100) = 7',
480: 1:    '✅f(239698713103140) = 9',
480: 1:    '❌f(771412693933286) = ??? != 7'
480: 1:  ],
480: 1:  'level': 17,
480: 1:  'nextQuestion': '771412693933286',
480: 1:  'questions': [
480: 1:    '456126121234546',
480: 1:    '123456781234567',
480: 1:    '183168009579826',
480: 1:    '964720036906339',
480: 1:    '613951967276640',
480: 1:    '825813064400100',
480: 1:    '239698713103140',
480: 1:    '771412693933286'
480: 1:  ]
480: 1:}
480: 1:Scores: 29697
480: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7']')
480: 1:Fire Event: PassTest{complexity=23, testCount=27}
------------------------------------------
481: 1:BoardData {
481: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
481: 1:  'expectedAnswer': '0',
481: 1:  'history': [
481: 1:    {
481: 1:      'answer': '7',
481: 1:      'question': '456126121234546',
481: 1:      'valid': true
481: 1:    },
481: 1:    {
481: 1:      'answer': '0',
481: 1:      'question': '123456781234567',
481: 1:      'valid': true
481: 1:    },
481: 1:    {
481: 1:      'answer': '2',
481: 1:      'question': '183168009579826',
481: 1:      'valid': true
481: 1:    },
481: 1:    {
481: 1:      'answer': '7',
481: 1:      'question': '964720036906339',
481: 1:      'valid': true
481: 1:    },
481: 1:    {
481: 1:      'answer': '9',
481: 1:      'question': '613951967276640',
481: 1:      'valid': true
481: 1:    },
481: 1:    {
481: 1:      'answer': '7',
481: 1:      'question': '825813064400100',
481: 1:      'valid': true
481: 1:    },
481: 1:    {
481: 1:      'answer': '9',
481: 1:      'question': '239698713103140',
481: 1:      'valid': true
481: 1:    },
481: 1:    {
481: 1:      'answer': '7',
481: 1:      'question': '771412693933286',
481: 1:      'valid': true
481: 1:    }
481: 1:  ],
481: 1:  'info': [
481: 1:    '✅f(456126121234546) = 7',
481: 1:    '✅f(123456781234567) = 0',
481: 1:    '✅f(183168009579826) = 2',
481: 1:    '✅f(964720036906339) = 7',
481: 1:    '✅f(613951967276640) = 9',
481: 1:    '✅f(825813064400100) = 7',
481: 1:    '✅f(239698713103140) = 9',
481: 1:    '✅f(771412693933286) = 7',
481: 1:    '❌f(254262384108564) = ??? != 0'
481: 1:  ],
481: 1:  'level': 17,
481: 1:  'nextQuestion': '254262384108564',
481: 1:  'questions': [
481: 1:    '456126121234546',
481: 1:    '123456781234567',
481: 1:    '183168009579826',
481: 1:    '964720036906339',
481: 1:    '613951967276640',
481: 1:    '825813064400100',
481: 1:    '239698713103140',
481: 1:    '771412693933286',
481: 1:    '254262384108564'
481: 1:  ]
481: 1:}
481: 1:Scores: 29705
481: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0']')
481: 1:Fire Event: PassTest{complexity=23, testCount=27}
------------------------------------------
482: 1:BoardData {
482: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
482: 1:  'expectedAnswer': '7',
482: 1:  'history': [
482: 1:    {
482: 1:      'answer': '7',
482: 1:      'question': '456126121234546',
482: 1:      'valid': true
482: 1:    },
482: 1:    {
482: 1:      'answer': '0',
482: 1:      'question': '123456781234567',
482: 1:      'valid': true
482: 1:    },
482: 1:    {
482: 1:      'answer': '2',
482: 1:      'question': '183168009579826',
482: 1:      'valid': true
482: 1:    },
482: 1:    {
482: 1:      'answer': '7',
482: 1:      'question': '964720036906339',
482: 1:      'valid': true
482: 1:    },
482: 1:    {
482: 1:      'answer': '9',
482: 1:      'question': '613951967276640',
482: 1:      'valid': true
482: 1:    },
482: 1:    {
482: 1:      'answer': '7',
482: 1:      'question': '825813064400100',
482: 1:      'valid': true
482: 1:    },
482: 1:    {
482: 1:      'answer': '9',
482: 1:      'question': '239698713103140',
482: 1:      'valid': true
482: 1:    },
482: 1:    {
482: 1:      'answer': '7',
482: 1:      'question': '771412693933286',
482: 1:      'valid': true
482: 1:    },
482: 1:    {
482: 1:      'answer': '0',
482: 1:      'question': '254262384108564',
482: 1:      'valid': true
482: 1:    }
482: 1:  ],
482: 1:  'info': [
482: 1:    '✅f(456126121234546) = 7',
482: 1:    '✅f(123456781234567) = 0',
482: 1:    '✅f(183168009579826) = 2',
482: 1:    '✅f(964720036906339) = 7',
482: 1:    '✅f(613951967276640) = 9',
482: 1:    '✅f(825813064400100) = 7',
482: 1:    '✅f(239698713103140) = 9',
482: 1:    '✅f(771412693933286) = 7',
482: 1:    '✅f(254262384108564) = 0',
482: 1:    '❌f(959681833483055) = ??? != 7'
482: 1:  ],
482: 1:  'level': 17,
482: 1:  'nextQuestion': '959681833483055',
482: 1:  'questions': [
482: 1:    '456126121234546',
482: 1:    '123456781234567',
482: 1:    '183168009579826',
482: 1:    '964720036906339',
482: 1:    '613951967276640',
482: 1:    '825813064400100',
482: 1:    '239698713103140',
482: 1:    '771412693933286',
482: 1:    '254262384108564',
482: 1:    '959681833483055'
482: 1:  ]
482: 1:}
482: 1:Scores: 29713
482: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7']')
482: 1:Fire Event: PassTest{complexity=23, testCount=27}
------------------------------------------
483: 1:BoardData {
483: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
483: 1:  'expectedAnswer': '4',
483: 1:  'history': [
483: 1:    {
483: 1:      'answer': '7',
483: 1:      'question': '456126121234546',
483: 1:      'valid': true
483: 1:    },
483: 1:    {
483: 1:      'answer': '0',
483: 1:      'question': '123456781234567',
483: 1:      'valid': true
483: 1:    },
483: 1:    {
483: 1:      'answer': '2',
483: 1:      'question': '183168009579826',
483: 1:      'valid': true
483: 1:    },
483: 1:    {
483: 1:      'answer': '7',
483: 1:      'question': '964720036906339',
483: 1:      'valid': true
483: 1:    },
483: 1:    {
483: 1:      'answer': '9',
483: 1:      'question': '613951967276640',
483: 1:      'valid': true
483: 1:    },
483: 1:    {
483: 1:      'answer': '7',
483: 1:      'question': '825813064400100',
483: 1:      'valid': true
483: 1:    },
483: 1:    {
483: 1:      'answer': '9',
483: 1:      'question': '239698713103140',
483: 1:      'valid': true
483: 1:    },
483: 1:    {
483: 1:      'answer': '7',
483: 1:      'question': '771412693933286',
483: 1:      'valid': true
483: 1:    },
483: 1:    {
483: 1:      'answer': '0',
483: 1:      'question': '254262384108564',
483: 1:      'valid': true
483: 1:    },
483: 1:    {
483: 1:      'answer': '7',
483: 1:      'question': '959681833483055',
483: 1:      'valid': true
483: 1:    }
483: 1:  ],
483: 1:  'info': [
483: 1:    '✅f(456126121234546) = 7',
483: 1:    '✅f(123456781234567) = 0',
483: 1:    '✅f(183168009579826) = 2',
483: 1:    '✅f(964720036906339) = 7',
483: 1:    '✅f(613951967276640) = 9',
483: 1:    '✅f(825813064400100) = 7',
483: 1:    '✅f(239698713103140) = 9',
483: 1:    '✅f(771412693933286) = 7',
483: 1:    '✅f(254262384108564) = 0',
483: 1:    '✅f(959681833483055) = 7',
483: 1:    '❌f(210087745295982) = ??? != 4'
483: 1:  ],
483: 1:  'level': 17,
483: 1:  'nextQuestion': '210087745295982',
483: 1:  'questions': [
483: 1:    '456126121234546',
483: 1:    '123456781234567',
483: 1:    '183168009579826',
483: 1:    '964720036906339',
483: 1:    '613951967276640',
483: 1:    '825813064400100',
483: 1:    '239698713103140',
483: 1:    '771412693933286',
483: 1:    '254262384108564',
483: 1:    '959681833483055',
483: 1:    '210087745295982'
483: 1:  ]
483: 1:}
483: 1:Scores: 29721
483: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4']')
483: 1:Fire Event: PassTest{complexity=23, testCount=27}
------------------------------------------
484: 1:BoardData {
484: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
484: 1:  'expectedAnswer': '2',
484: 1:  'history': [
484: 1:    {
484: 1:      'answer': '7',
484: 1:      'question': '456126121234546',
484: 1:      'valid': true
484: 1:    },
484: 1:    {
484: 1:      'answer': '0',
484: 1:      'question': '123456781234567',
484: 1:      'valid': true
484: 1:    },
484: 1:    {
484: 1:      'answer': '2',
484: 1:      'question': '183168009579826',
484: 1:      'valid': true
484: 1:    },
484: 1:    {
484: 1:      'answer': '7',
484: 1:      'question': '964720036906339',
484: 1:      'valid': true
484: 1:    },
484: 1:    {
484: 1:      'answer': '9',
484: 1:      'question': '613951967276640',
484: 1:      'valid': true
484: 1:    },
484: 1:    {
484: 1:      'answer': '7',
484: 1:      'question': '825813064400100',
484: 1:      'valid': true
484: 1:    },
484: 1:    {
484: 1:      'answer': '9',
484: 1:      'question': '239698713103140',
484: 1:      'valid': true
484: 1:    },
484: 1:    {
484: 1:      'answer': '7',
484: 1:      'question': '771412693933286',
484: 1:      'valid': true
484: 1:    },
484: 1:    {
484: 1:      'answer': '0',
484: 1:      'question': '254262384108564',
484: 1:      'valid': true
484: 1:    },
484: 1:    {
484: 1:      'answer': '7',
484: 1:      'question': '959681833483055',
484: 1:      'valid': true
484: 1:    },
484: 1:    {
484: 1:      'answer': '4',
484: 1:      'question': '210087745295982',
484: 1:      'valid': true
484: 1:    }
484: 1:  ],
484: 1:  'info': [
484: 1:    '✅f(456126121234546) = 7',
484: 1:    '✅f(123456781234567) = 0',
484: 1:    '✅f(183168009579826) = 2',
484: 1:    '✅f(964720036906339) = 7',
484: 1:    '✅f(613951967276640) = 9',
484: 1:    '✅f(825813064400100) = 7',
484: 1:    '✅f(239698713103140) = 9',
484: 1:    '✅f(771412693933286) = 7',
484: 1:    '✅f(254262384108564) = 0',
484: 1:    '✅f(959681833483055) = 7',
484: 1:    '✅f(210087745295982) = 4',
484: 1:    '❌f(367683885386271) = ??? != 2'
484: 1:  ],
484: 1:  'level': 17,
484: 1:  'nextQuestion': '367683885386271',
484: 1:  'questions': [
484: 1:    '456126121234546',
484: 1:    '123456781234567',
484: 1:    '183168009579826',
484: 1:    '964720036906339',
484: 1:    '613951967276640',
484: 1:    '825813064400100',
484: 1:    '239698713103140',
484: 1:    '771412693933286',
484: 1:    '254262384108564',
484: 1:    '959681833483055',
484: 1:    '210087745295982',
484: 1:    '367683885386271'
484: 1:  ]
484: 1:}
484: 1:Scores: 29729
484: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2']')
484: 1:Fire Event: PassTest{complexity=23, testCount=27}
------------------------------------------
485: 1:BoardData {
485: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
485: 1:  'expectedAnswer': '5',
485: 1:  'history': [
485: 1:    {
485: 1:      'answer': '7',
485: 1:      'question': '456126121234546',
485: 1:      'valid': true
485: 1:    },
485: 1:    {
485: 1:      'answer': '0',
485: 1:      'question': '123456781234567',
485: 1:      'valid': true
485: 1:    },
485: 1:    {
485: 1:      'answer': '2',
485: 1:      'question': '183168009579826',
485: 1:      'valid': true
485: 1:    },
485: 1:    {
485: 1:      'answer': '7',
485: 1:      'question': '964720036906339',
485: 1:      'valid': true
485: 1:    },
485: 1:    {
485: 1:      'answer': '9',
485: 1:      'question': '613951967276640',
485: 1:      'valid': true
485: 1:    },
485: 1:    {
485: 1:      'answer': '7',
485: 1:      'question': '825813064400100',
485: 1:      'valid': true
485: 1:    },
485: 1:    {
485: 1:      'answer': '9',
485: 1:      'question': '239698713103140',
485: 1:      'valid': true
485: 1:    },
485: 1:    {
485: 1:      'answer': '7',
485: 1:      'question': '771412693933286',
485: 1:      'valid': true
485: 1:    },
485: 1:    {
485: 1:      'answer': '0',
485: 1:      'question': '254262384108564',
485: 1:      'valid': true
485: 1:    },
485: 1:    {
485: 1:      'answer': '7',
485: 1:      'question': '959681833483055',
485: 1:      'valid': true
485: 1:    },
485: 1:    {
485: 1:      'answer': '4',
485: 1:      'question': '210087745295982',
485: 1:      'valid': true
485: 1:    },
485: 1:    {
485: 1:      'answer': '2',
485: 1:      'question': '367683885386271',
485: 1:      'valid': true
485: 1:    }
485: 1:  ],
485: 1:  'info': [
485: 1:    '✅f(456126121234546) = 7',
485: 1:    '✅f(123456781234567) = 0',
485: 1:    '✅f(183168009579826) = 2',
485: 1:    '✅f(964720036906339) = 7',
485: 1:    '✅f(613951967276640) = 9',
485: 1:    '✅f(825813064400100) = 7',
485: 1:    '✅f(239698713103140) = 9',
485: 1:    '✅f(771412693933286) = 7',
485: 1:    '✅f(254262384108564) = 0',
485: 1:    '✅f(959681833483055) = 7',
485: 1:    '✅f(210087745295982) = 4',
485: 1:    '✅f(367683885386271) = 2',
485: 1:    '❌f(894632429803471) = ??? != 5'
485: 1:  ],
485: 1:  'level': 17,
485: 1:  'nextQuestion': '894632429803471',
485: 1:  'questions': [
485: 1:    '456126121234546',
485: 1:    '123456781234567',
485: 1:    '183168009579826',
485: 1:    '964720036906339',
485: 1:    '613951967276640',
485: 1:    '825813064400100',
485: 1:    '239698713103140',
485: 1:    '771412693933286',
485: 1:    '254262384108564',
485: 1:    '959681833483055',
485: 1:    '210087745295982',
485: 1:    '367683885386271',
485: 1:    '894632429803471'
485: 1:  ]
485: 1:}
485: 1:Scores: 29737
485: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5']')
485: 1:Fire Event: PassTest{complexity=23, testCount=27}
------------------------------------------
486: 1:BoardData {
486: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
486: 1:  'expectedAnswer': '5',
486: 1:  'history': [
486: 1:    {
486: 1:      'answer': '7',
486: 1:      'question': '456126121234546',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': '0',
486: 1:      'question': '123456781234567',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': '2',
486: 1:      'question': '183168009579826',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': '7',
486: 1:      'question': '964720036906339',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': '9',
486: 1:      'question': '613951967276640',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': '7',
486: 1:      'question': '825813064400100',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': '9',
486: 1:      'question': '239698713103140',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': '7',
486: 1:      'question': '771412693933286',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': '0',
486: 1:      'question': '254262384108564',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': '7',
486: 1:      'question': '959681833483055',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': '4',
486: 1:      'question': '210087745295982',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': '2',
486: 1:      'question': '367683885386271',
486: 1:      'valid': true
486: 1:    },
486: 1:    {
486: 1:      'answer': '5',
486: 1:      'question': '894632429803471',
486: 1:      'valid': true
486: 1:    }
486: 1:  ],
486: 1:  'info': [
486: 1:    '✅f(456126121234546) = 7',
486: 1:    '✅f(123456781234567) = 0',
486: 1:    '✅f(183168009579826) = 2',
486: 1:    '✅f(964720036906339) = 7',
486: 1:    '✅f(613951967276640) = 9',
486: 1:    '✅f(825813064400100) = 7',
486: 1:    '✅f(239698713103140) = 9',
486: 1:    '✅f(771412693933286) = 7',
486: 1:    '✅f(254262384108564) = 0',
486: 1:    '✅f(959681833483055) = 7',
486: 1:    '✅f(210087745295982) = 4',
486: 1:    '✅f(367683885386271) = 2',
486: 1:    '✅f(894632429803471) = 5',
486: 1:    '❌f(471260044736237) = ??? != 5'
486: 1:  ],
486: 1:  'level': 17,
486: 1:  'nextQuestion': '471260044736237',
486: 1:  'questions': [
486: 1:    '456126121234546',
486: 1:    '123456781234567',
486: 1:    '183168009579826',
486: 1:    '964720036906339',
486: 1:    '613951967276640',
486: 1:    '825813064400100',
486: 1:    '239698713103140',
486: 1:    '771412693933286',
486: 1:    '254262384108564',
486: 1:    '959681833483055',
486: 1:    '210087745295982',
486: 1:    '367683885386271',
486: 1:    '894632429803471',
486: 1:    '471260044736237'
486: 1:  ]
486: 1:}
486: 1:Scores: 29745
486: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5', '5']')
486: 1:Fire Event: PassTest{complexity=23, testCount=27}
------------------------------------------
487: 1:BoardData {
487: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
487: 1:  'expectedAnswer': '1',
487: 1:  'history': [
487: 1:    {
487: 1:      'answer': '7',
487: 1:      'question': '456126121234546',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': '0',
487: 1:      'question': '123456781234567',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': '2',
487: 1:      'question': '183168009579826',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': '7',
487: 1:      'question': '964720036906339',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': '9',
487: 1:      'question': '613951967276640',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': '7',
487: 1:      'question': '825813064400100',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': '9',
487: 1:      'question': '239698713103140',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': '7',
487: 1:      'question': '771412693933286',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': '0',
487: 1:      'question': '254262384108564',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': '7',
487: 1:      'question': '959681833483055',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': '4',
487: 1:      'question': '210087745295982',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': '2',
487: 1:      'question': '367683885386271',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': '5',
487: 1:      'question': '894632429803471',
487: 1:      'valid': true
487: 1:    },
487: 1:    {
487: 1:      'answer': '5',
487: 1:      'question': '471260044736237',
487: 1:      'valid': true
487: 1:    }
487: 1:  ],
487: 1:  'info': [
487: 1:    '✅f(456126121234546) = 7',
487: 1:    '✅f(123456781234567) = 0',
487: 1:    '✅f(183168009579826) = 2',
487: 1:    '✅f(964720036906339) = 7',
487: 1:    '✅f(613951967276640) = 9',
487: 1:    '✅f(825813064400100) = 7',
487: 1:    '✅f(239698713103140) = 9',
487: 1:    '✅f(771412693933286) = 7',
487: 1:    '✅f(254262384108564) = 0',
487: 1:    '✅f(959681833483055) = 7',
487: 1:    '✅f(210087745295982) = 4',
487: 1:    '✅f(367683885386271) = 2',
487: 1:    '✅f(894632429803471) = 5',
487: 1:    '✅f(471260044736237) = 5',
487: 1:    '❌f(916471602234329) = ??? != 1'
487: 1:  ],
487: 1:  'level': 17,
487: 1:  'nextQuestion': '916471602234329',
487: 1:  'questions': [
487: 1:    '456126121234546',
487: 1:    '123456781234567',
487: 1:    '183168009579826',
487: 1:    '964720036906339',
487: 1:    '613951967276640',
487: 1:    '825813064400100',
487: 1:    '239698713103140',
487: 1:    '771412693933286',
487: 1:    '254262384108564',
487: 1:    '959681833483055',
487: 1:    '210087745295982',
487: 1:    '367683885386271',
487: 1:    '894632429803471',
487: 1:    '471260044736237',
487: 1:    '916471602234329'
487: 1:  ]
487: 1:}
487: 1:Scores: 29753
487: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5', '5', '1']')
487: 1:Fire Event: PassTest{complexity=23, testCount=27}
------------------------------------------
488: 1:BoardData {
488: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
488: 1:  'expectedAnswer': '4',
488: 1:  'history': [
488: 1:    {
488: 1:      'answer': '7',
488: 1:      'question': '456126121234546',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': '0',
488: 1:      'question': '123456781234567',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': '2',
488: 1:      'question': '183168009579826',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': '7',
488: 1:      'question': '964720036906339',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': '9',
488: 1:      'question': '613951967276640',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': '7',
488: 1:      'question': '825813064400100',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': '9',
488: 1:      'question': '239698713103140',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': '7',
488: 1:      'question': '771412693933286',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': '0',
488: 1:      'question': '254262384108564',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': '7',
488: 1:      'question': '959681833483055',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': '4',
488: 1:      'question': '210087745295982',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': '2',
488: 1:      'question': '367683885386271',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': '5',
488: 1:      'question': '894632429803471',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': '5',
488: 1:      'question': '471260044736237',
488: 1:      'valid': true
488: 1:    },
488: 1:    {
488: 1:      'answer': '1',
488: 1:      'question': '916471602234329',
488: 1:      'valid': true
488: 1:    }
488: 1:  ],
488: 1:  'info': [
488: 1:    '✅f(456126121234546) = 7',
488: 1:    '✅f(123456781234567) = 0',
488: 1:    '✅f(183168009579826) = 2',
488: 1:    '✅f(964720036906339) = 7',
488: 1:    '✅f(613951967276640) = 9',
488: 1:    '✅f(825813064400100) = 7',
488: 1:    '✅f(239698713103140) = 9',
488: 1:    '✅f(771412693933286) = 7',
488: 1:    '✅f(254262384108564) = 0',
488: 1:    '✅f(959681833483055) = 7',
488: 1:    '✅f(210087745295982) = 4',
488: 1:    '✅f(367683885386271) = 2',
488: 1:    '✅f(894632429803471) = 5',
488: 1:    '✅f(471260044736237) = 5',
488: 1:    '✅f(916471602234329) = 1',
488: 1:    '❌f(961073953339054) = ??? != 4'
488: 1:  ],
488: 1:  'level': 17,
488: 1:  'nextQuestion': '961073953339054',
488: 1:  'questions': [
488: 1:    '456126121234546',
488: 1:    '123456781234567',
488: 1:    '183168009579826',
488: 1:    '964720036906339',
488: 1:    '613951967276640',
488: 1:    '825813064400100',
488: 1:    '239698713103140',
488: 1:    '771412693933286',
488: 1:    '254262384108564',
488: 1:    '959681833483055',
488: 1:    '210087745295982',
488: 1:    '367683885386271',
488: 1:    '894632429803471',
488: 1:    '471260044736237',
488: 1:    '916471602234329',
488: 1:    '961073953339054'
488: 1:  ]
488: 1:}
488: 1:Scores: 29761
488: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5', '5', '1', '4']')
488: 1:Fire Event: PassTest{complexity=23, testCount=27}
------------------------------------------
489: 1:BoardData {
489: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
489: 1:  'expectedAnswer': '5',
489: 1:  'history': [
489: 1:    {
489: 1:      'answer': '7',
489: 1:      'question': '456126121234546',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': '0',
489: 1:      'question': '123456781234567',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': '2',
489: 1:      'question': '183168009579826',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': '7',
489: 1:      'question': '964720036906339',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': '9',
489: 1:      'question': '613951967276640',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': '7',
489: 1:      'question': '825813064400100',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': '9',
489: 1:      'question': '239698713103140',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': '7',
489: 1:      'question': '771412693933286',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': '0',
489: 1:      'question': '254262384108564',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': '7',
489: 1:      'question': '959681833483055',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': '4',
489: 1:      'question': '210087745295982',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': '2',
489: 1:      'question': '367683885386271',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': '5',
489: 1:      'question': '894632429803471',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': '5',
489: 1:      'question': '471260044736237',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': '1',
489: 1:      'question': '916471602234329',
489: 1:      'valid': true
489: 1:    },
489: 1:    {
489: 1:      'answer': '4',
489: 1:      'question': '961073953339054',
489: 1:      'valid': true
489: 1:    }
489: 1:  ],
489: 1:  'info': [
489: 1:    '✅f(456126121234546) = 7',
489: 1:    '✅f(123456781234567) = 0',
489: 1:    '✅f(183168009579826) = 2',
489: 1:    '✅f(964720036906339) = 7',
489: 1:    '✅f(613951967276640) = 9',
489: 1:    '✅f(825813064400100) = 7',
489: 1:    '✅f(239698713103140) = 9',
489: 1:    '✅f(771412693933286) = 7',
489: 1:    '✅f(254262384108564) = 0',
489: 1:    '✅f(959681833483055) = 7',
489: 1:    '✅f(210087745295982) = 4',
489: 1:    '✅f(367683885386271) = 2',
489: 1:    '✅f(894632429803471) = 5',
489: 1:    '✅f(471260044736237) = 5',
489: 1:    '✅f(916471602234329) = 1',
489: 1:    '✅f(961073953339054) = 4',
489: 1:    '❌f(917408439816341) = ??? != 5'
489: 1:  ],
489: 1:  'level': 17,
489: 1:  'nextQuestion': '917408439816341',
489: 1:  'questions': [
489: 1:    '456126121234546',
489: 1:    '123456781234567',
489: 1:    '183168009579826',
489: 1:    '964720036906339',
489: 1:    '613951967276640',
489: 1:    '825813064400100',
489: 1:    '239698713103140',
489: 1:    '771412693933286',
489: 1:    '254262384108564',
489: 1:    '959681833483055',
489: 1:    '210087745295982',
489: 1:    '367683885386271',
489: 1:    '894632429803471',
489: 1:    '471260044736237',
489: 1:    '916471602234329',
489: 1:    '961073953339054',
489: 1:    '917408439816341'
489: 1:  ]
489: 1:}
489: 1:Scores: 29769
489: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5', '5', '1', '4', '5']')
489: 1:Fire Event: PassTest{complexity=23, testCount=27}
------------------------------------------
490: 1:BoardData {
490: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
490: 1:  'expectedAnswer': '4',
490: 1:  'history': [
490: 1:    {
490: 1:      'answer': '7',
490: 1:      'question': '456126121234546',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': '0',
490: 1:      'question': '123456781234567',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': '2',
490: 1:      'question': '183168009579826',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': '7',
490: 1:      'question': '964720036906339',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': '9',
490: 1:      'question': '613951967276640',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': '7',
490: 1:      'question': '825813064400100',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': '9',
490: 1:      'question': '239698713103140',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': '7',
490: 1:      'question': '771412693933286',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': '0',
490: 1:      'question': '254262384108564',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': '7',
490: 1:      'question': '959681833483055',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': '4',
490: 1:      'question': '210087745295982',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': '2',
490: 1:      'question': '367683885386271',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': '5',
490: 1:      'question': '894632429803471',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': '5',
490: 1:      'question': '471260044736237',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': '1',
490: 1:      'question': '916471602234329',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': '4',
490: 1:      'question': '961073953339054',
490: 1:      'valid': true
490: 1:    },
490: 1:    {
490: 1:      'answer': '5',
490: 1:      'question': '917408439816341',
490: 1:      'valid': true
490: 1:    }
490: 1:  ],
490: 1:  'info': [
490: 1:    '✅f(456126121234546) = 7',
490: 1:    '✅f(123456781234567) = 0',
490: 1:    '✅f(183168009579826) = 2',
490: 1:    '✅f(964720036906339) = 7',
490: 1:    '✅f(613951967276640) = 9',
490: 1:    '✅f(825813064400100) = 7',
490: 1:    '✅f(239698713103140) = 9',
490: 1:    '✅f(771412693933286) = 7',
490: 1:    '✅f(254262384108564) = 0',
490: 1:    '✅f(959681833483055) = 7',
490: 1:    '✅f(210087745295982) = 4',
490: 1:    '✅f(367683885386271) = 2',
490: 1:    '✅f(894632429803471) = 5',
490: 1:    '✅f(471260044736237) = 5',
490: 1:    '✅f(916471602234329) = 1',
490: 1:    '✅f(961073953339054) = 4',
490: 1:    '✅f(917408439816341) = 5',
490: 1:    '❌f(498078140932499) = ??? != 4'
490: 1:  ],
490: 1:  'level': 17,
490: 1:  'nextQuestion': '498078140932499',
490: 1:  'questions': [
490: 1:    '456126121234546',
490: 1:    '123456781234567',
490: 1:    '183168009579826',
490: 1:    '964720036906339',
490: 1:    '613951967276640',
490: 1:    '825813064400100',
490: 1:    '239698713103140',
490: 1:    '771412693933286',
490: 1:    '254262384108564',
490: 1:    '959681833483055',
490: 1:    '210087745295982',
490: 1:    '367683885386271',
490: 1:    '894632429803471',
490: 1:    '471260044736237',
490: 1:    '916471602234329',
490: 1:    '961073953339054',
490: 1:    '917408439816341',
490: 1:    '498078140932499'
490: 1:  ]
490: 1:}
490: 1:Scores: 29777
490: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5', '5', '1', '4', '5', '4']')
490: 1:Fire Event: PassTest{complexity=23, testCount=27}
------------------------------------------
491: 1:BoardData {
491: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
491: 1:  'expectedAnswer': '2',
491: 1:  'history': [
491: 1:    {
491: 1:      'answer': '7',
491: 1:      'question': '456126121234546',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': '0',
491: 1:      'question': '123456781234567',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': '2',
491: 1:      'question': '183168009579826',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': '7',
491: 1:      'question': '964720036906339',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': '9',
491: 1:      'question': '613951967276640',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': '7',
491: 1:      'question': '825813064400100',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': '9',
491: 1:      'question': '239698713103140',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': '7',
491: 1:      'question': '771412693933286',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': '0',
491: 1:      'question': '254262384108564',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': '7',
491: 1:      'question': '959681833483055',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': '4',
491: 1:      'question': '210087745295982',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': '2',
491: 1:      'question': '367683885386271',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': '5',
491: 1:      'question': '894632429803471',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': '5',
491: 1:      'question': '471260044736237',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': '1',
491: 1:      'question': '916471602234329',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': '4',
491: 1:      'question': '961073953339054',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': '5',
491: 1:      'question': '917408439816341',
491: 1:      'valid': true
491: 1:    },
491: 1:    {
491: 1:      'answer': '4',
491: 1:      'question': '498078140932499',
491: 1:      'valid': true
491: 1:    }
491: 1:  ],
491: 1:  'info': [
491: 1:    '✅f(456126121234546) = 7',
491: 1:    '✅f(123456781234567) = 0',
491: 1:    '✅f(183168009579826) = 2',
491: 1:    '✅f(964720036906339) = 7',
491: 1:    '✅f(613951967276640) = 9',
491: 1:    '✅f(825813064400100) = 7',
491: 1:    '✅f(239698713103140) = 9',
491: 1:    '✅f(771412693933286) = 7',
491: 1:    '✅f(254262384108564) = 0',
491: 1:    '✅f(959681833483055) = 7',
491: 1:    '✅f(210087745295982) = 4',
491: 1:    '✅f(367683885386271) = 2',
491: 1:    '✅f(894632429803471) = 5',
491: 1:    '✅f(471260044736237) = 5',
491: 1:    '✅f(916471602234329) = 1',
491: 1:    '✅f(961073953339054) = 4',
491: 1:    '✅f(917408439816341) = 5',
491: 1:    '✅f(498078140932499) = 4',
491: 1:    '❌f(686244896142849) = ??? != 2'
491: 1:  ],
491: 1:  'level': 17,
491: 1:  'nextQuestion': '686244896142849',
491: 1:  'questions': [
491: 1:    '456126121234546',
491: 1:    '123456781234567',
491: 1:    '183168009579826',
491: 1:    '964720036906339',
491: 1:    '613951967276640',
491: 1:    '825813064400100',
491: 1:    '239698713103140',
491: 1:    '771412693933286',
491: 1:    '254262384108564',
491: 1:    '959681833483055',
491: 1:    '210087745295982',
491: 1:    '367683885386271',
491: 1:    '894632429803471',
491: 1:    '471260044736237',
491: 1:    '916471602234329',
491: 1:    '961073953339054',
491: 1:    '917408439816341',
491: 1:    '498078140932499',
491: 1:    '686244896142849'
491: 1:  ]
491: 1:}
491: 1:Scores: 29785
491: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5', '5', '1', '4', '5', '4', '2']')
491: 1:Fire Event: PassTest{complexity=23, testCount=27}
------------------------------------------
492: 1:BoardData {
492: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
492: 1:  'expectedAnswer': '2',
492: 1:  'history': [
492: 1:    {
492: 1:      'answer': '7',
492: 1:      'question': '456126121234546',
492: 1:      'valid': true
492: 1:    },
492: 1:    {
492: 1:      'answer': '0',
492: 1:      'question': '123456781234567',
492: 1:      'valid': true
492: 1:    },
492: 1:    {
492: 1:      'answer': '2',
492: 1:      'question': '183168009579826',
492: 1:      'valid': true
492: 1:    },
492: 1:    {
492: 1:      'answer': '7',
492: 1:      'question': '964720036906339',
492: 1:      'valid': true
492: 1:    },
492: 1:    {
492: 1:      'answer': '9',
492: 1:      'question': '613951967276640',
492: 1:      'valid': true
492: 1:    },
492: 1:    {
492: 1:      'answer': '7',
492: 1:      'question': '825813064400100',
492: 1:      'valid': true
492: 1:    },
492: 1:    {
492: 1:      'answer': '9',
492: 1:      'question': '239698713103140',
492: 1:      'valid': true
492: 1:    },
492: 1:    {
492: 1:      'answer': '7',
492: 1:      'question': '771412693933286',
492: 1:      'valid': true
492: 1:    },
492: 1:    {
492: 1:      'answer': '0',
492: 1:      'question': '254262384108564',
492: 1:      'valid': true
492: 1:    },
492: 1:    {
492: 1:      'answer': '7',
492: 1:      'question': '959681833483055',
492: 1:      'valid': true
492: 1:    },
492: 1:    {
492: 1:      'answer': '4',
492: 1:      'question': '210087745295982',
492: 1:      'valid': true
492: 1:    },
492: 1:    {
492: 1:      'answer': '2',
492: 1:      'question': '367683885386271',
492: 1:      'valid': true
492: 1:    },
492: 1:    {
492: 1:      'answer': '5',
492: 1:      'question': '894632429803471',
492: 1:      'valid': true
492: 1:    },
492: 1:    {
492: 1:      'answer': '5',
492: 1:      'question': '471260044736237',
492: 1:      'valid': true
492: 1:    },
492: 1:    {
492: 1:      'answer': '1',
492: 1:      'question': '916471602234329',
492: 1:      'valid': true
492: 1:    },
492: 1:    {
492: 1:      'answer': '4',
492: 1:      'question': '961073953339054',
492: 1:      'valid': true
492: 1:    },
492: 1:    {
492: 1:      'answer': '5',
492: 1:      'question': '917408439816341',
492: 1:      'valid': true
492: 1:    },
492: 1:    {
492: 1:      'answer': '4',
492: 1:      'question': '498078140932499',
492: 1:      'valid': true
492: 1:    },
492: 1:    {
492: 1:      'answer': '2',
492: 1:      'question': '686244896142849',
492: 1:      'valid': true
492: 1:    }
492: 1:  ],
492: 1:  'info': [
492: 1:    '✅f(456126121234546) = 7',
492: 1:    '✅f(123456781234567) = 0',
492: 1:    '✅f(183168009579826) = 2',
492: 1:    '✅f(964720036906339) = 7',
492: 1:    '✅f(613951967276640) = 9',
492: 1:    '✅f(825813064400100) = 7',
492: 1:    '✅f(239698713103140) = 9',
492: 1:    '✅f(771412693933286) = 7',
492: 1:    '✅f(254262384108564) = 0',
492: 1:    '✅f(959681833483055) = 7',
492: 1:    '✅f(210087745295982) = 4',
492: 1:    '✅f(367683885386271) = 2',
492: 1:    '✅f(894632429803471) = 5',
492: 1:    '✅f(471260044736237) = 5',
492: 1:    '✅f(916471602234329) = 1',
492: 1:    '✅f(961073953339054) = 4',
492: 1:    '✅f(917408439816341) = 5',
492: 1:    '✅f(498078140932499) = 4',
492: 1:    '✅f(686244896142849) = 2',
492: 1:    '❌f(772287416460433) = ??? != 2'
492: 1:  ],
492: 1:  'level': 17,
492: 1:  'nextQuestion': '772287416460433',
492: 1:  'questions': [
492: 1:    '456126121234546',
492: 1:    '123456781234567',
492: 1:    '183168009579826',
492: 1:    '964720036906339',
492: 1:    '613951967276640',
492: 1:    '825813064400100',
492: 1:    '239698713103140',
492: 1:    '771412693933286',
492: 1:    '254262384108564',
492: 1:    '959681833483055',
492: 1:    '210087745295982',
492: 1:    '367683885386271',
492: 1:    '894632429803471',
492: 1:    '471260044736237',
492: 1:    '916471602234329',
492: 1:    '961073953339054',
492: 1:    '917408439816341',
492: 1:    '498078140932499',
492: 1:    '686244896142849',
492: 1:    '772287416460433'
492: 1:  ]
492: 1:}
492: 1:Scores: 29793
492: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5', '5', '1', '4', '5', '4', '2', '2']')
492: 1:Fire Event: PassTest{complexity=23, testCount=27}
------------------------------------------
493: 1:BoardData {
493: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
493: 1:  'expectedAnswer': '1',
493: 1:  'history': [
493: 1:    {
493: 1:      'answer': '7',
493: 1:      'question': '456126121234546',
493: 1:      'valid': true
493: 1:    },
493: 1:    {
493: 1:      'answer': '0',
493: 1:      'question': '123456781234567',
493: 1:      'valid': true
493: 1:    },
493: 1:    {
493: 1:      'answer': '2',
493: 1:      'question': '183168009579826',
493: 1:      'valid': true
493: 1:    },
493: 1:    {
493: 1:      'answer': '7',
493: 1:      'question': '964720036906339',
493: 1:      'valid': true
493: 1:    },
493: 1:    {
493: 1:      'answer': '9',
493: 1:      'question': '613951967276640',
493: 1:      'valid': true
493: 1:    },
493: 1:    {
493: 1:      'answer': '7',
493: 1:      'question': '825813064400100',
493: 1:      'valid': true
493: 1:    },
493: 1:    {
493: 1:      'answer': '9',
493: 1:      'question': '239698713103140',
493: 1:      'valid': true
493: 1:    },
493: 1:    {
493: 1:      'answer': '7',
493: 1:      'question': '771412693933286',
493: 1:      'valid': true
493: 1:    },
493: 1:    {
493: 1:      'answer': '0',
493: 1:      'question': '254262384108564',
493: 1:      'valid': true
493: 1:    },
493: 1:    {
493: 1:      'answer': '7',
493: 1:      'question': '959681833483055',
493: 1:      'valid': true
493: 1:    },
493: 1:    {
493: 1:      'answer': '4',
493: 1:      'question': '210087745295982',
493: 1:      'valid': true
493: 1:    },
493: 1:    {
493: 1:      'answer': '2',
493: 1:      'question': '367683885386271',
493: 1:      'valid': true
493: 1:    },
493: 1:    {
493: 1:      'answer': '5',
493: 1:      'question': '894632429803471',
493: 1:      'valid': true
493: 1:    },
493: 1:    {
493: 1:      'answer': '5',
493: 1:      'question': '471260044736237',
493: 1:      'valid': true
493: 1:    },
493: 1:    {
493: 1:      'answer': '1',
493: 1:      'question': '916471602234329',
493: 1:      'valid': true
493: 1:    },
493: 1:    {
493: 1:      'answer': '4',
493: 1:      'question': '961073953339054',
493: 1:      'valid': true
493: 1:    },
493: 1:    {
493: 1:      'answer': '5',
493: 1:      'question': '917408439816341',
493: 1:      'valid': true
493: 1:    },
493: 1:    {
493: 1:      'answer': '4',
493: 1:      'question': '498078140932499',
493: 1:      'valid': true
493: 1:    },
493: 1:    {
493: 1:      'answer': '2',
493: 1:      'question': '686244896142849',
493: 1:      'valid': true
493: 1:    },
493: 1:    {
493: 1:      'answer': '2',
493: 1:      'question': '772287416460433',
493: 1:      'valid': true
493: 1:    }
493: 1:  ],
493: 1:  'info': [
493: 1:    '✅f(456126121234546) = 7',
493: 1:    '✅f(123456781234567) = 0',
493: 1:    '✅f(183168009579826) = 2',
493: 1:    '✅f(964720036906339) = 7',
493: 1:    '✅f(613951967276640) = 9',
493: 1:    '✅f(825813064400100) = 7',
493: 1:    '✅f(239698713103140) = 9',
493: 1:    '✅f(771412693933286) = 7',
493: 1:    '✅f(254262384108564) = 0',
493: 1:    '✅f(959681833483055) = 7',
493: 1:    '✅f(210087745295982) = 4',
493: 1:    '✅f(367683885386271) = 2',
493: 1:    '✅f(894632429803471) = 5',
493: 1:    '✅f(471260044736237) = 5',
493: 1:    '✅f(916471602234329) = 1',
493: 1:    '✅f(961073953339054) = 4',
493: 1:    '✅f(917408439816341) = 5',
493: 1:    '✅f(498078140932499) = 4',
493: 1:    '✅f(686244896142849) = 2',
493: 1:    '✅f(772287416460433) = 2',
493: 1:    '❌f(207725984977363) = ??? != 1'
493: 1:  ],
493: 1:  'level': 17,
493: 1:  'nextQuestion': '207725984977363',
493: 1:  'questions': [
493: 1:    '456126121234546',
493: 1:    '123456781234567',
493: 1:    '183168009579826',
493: 1:    '964720036906339',
493: 1:    '613951967276640',
493: 1:    '825813064400100',
493: 1:    '239698713103140',
493: 1:    '771412693933286',
493: 1:    '254262384108564',
493: 1:    '959681833483055',
493: 1:    '210087745295982',
493: 1:    '367683885386271',
493: 1:    '894632429803471',
493: 1:    '471260044736237',
493: 1:    '916471602234329',
493: 1:    '961073953339054',
493: 1:    '917408439816341',
493: 1:    '498078140932499',
493: 1:    '686244896142849',
493: 1:    '772287416460433',
493: 1:    '207725984977363'
493: 1:  ]
493: 1:}
493: 1:Scores: 29801
493: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5', '5', '1', '4', '5', '4', '2', '2', '1']')
493: 1:Fire Event: PassTest{complexity=23, testCount=27}
------------------------------------------
494: 1:BoardData {
494: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
494: 1:  'expectedAnswer': '2',
494: 1:  'history': [
494: 1:    {
494: 1:      'answer': '7',
494: 1:      'question': '456126121234546',
494: 1:      'valid': true
494: 1:    },
494: 1:    {
494: 1:      'answer': '0',
494: 1:      'question': '123456781234567',
494: 1:      'valid': true
494: 1:    },
494: 1:    {
494: 1:      'answer': '2',
494: 1:      'question': '183168009579826',
494: 1:      'valid': true
494: 1:    },
494: 1:    {
494: 1:      'answer': '7',
494: 1:      'question': '964720036906339',
494: 1:      'valid': true
494: 1:    },
494: 1:    {
494: 1:      'answer': '9',
494: 1:      'question': '613951967276640',
494: 1:      'valid': true
494: 1:    },
494: 1:    {
494: 1:      'answer': '7',
494: 1:      'question': '825813064400100',
494: 1:      'valid': true
494: 1:    },
494: 1:    {
494: 1:      'answer': '9',
494: 1:      'question': '239698713103140',
494: 1:      'valid': true
494: 1:    },
494: 1:    {
494: 1:      'answer': '7',
494: 1:      'question': '771412693933286',
494: 1:      'valid': true
494: 1:    },
494: 1:    {
494: 1:      'answer': '0',
494: 1:      'question': '254262384108564',
494: 1:      'valid': true
494: 1:    },
494: 1:    {
494: 1:      'answer': '7',
494: 1:      'question': '959681833483055',
494: 1:      'valid': true
494: 1:    },
494: 1:    {
494: 1:      'answer': '4',
494: 1:      'question': '210087745295982',
494: 1:      'valid': true
494: 1:    },
494: 1:    {
494: 1:      'answer': '2',
494: 1:      'question': '367683885386271',
494: 1:      'valid': true
494: 1:    },
494: 1:    {
494: 1:      'answer': '5',
494: 1:      'question': '894632429803471',
494: 1:      'valid': true
494: 1:    },
494: 1:    {
494: 1:      'answer': '5',
494: 1:      'question': '471260044736237',
494: 1:      'valid': true
494: 1:    },
494: 1:    {
494: 1:      'answer': '1',
494: 1:      'question': '916471602234329',
494: 1:      'valid': true
494: 1:    },
494: 1:    {
494: 1:      'answer': '4',
494: 1:      'question': '961073953339054',
494: 1:      'valid': true
494: 1:    },
494: 1:    {
494: 1:      'answer': '5',
494: 1:      'question': '917408439816341',
494: 1:      'valid': true
494: 1:    },
494: 1:    {
494: 1:      'answer': '4',
494: 1:      'question': '498078140932499',
494: 1:      'valid': true
494: 1:    },
494: 1:    {
494: 1:      'answer': '2',
494: 1:      'question': '686244896142849',
494: 1:      'valid': true
494: 1:    },
494: 1:    {
494: 1:      'answer': '2',
494: 1:      'question': '772287416460433',
494: 1:      'valid': true
494: 1:    },
494: 1:    {
494: 1:      'answer': '1',
494: 1:      'question': '207725984977363',
494: 1:      'valid': true
494: 1:    }
494: 1:  ],
494: 1:  'info': [
494: 1:    '✅f(456126121234546) = 7',
494: 1:    '✅f(123456781234567) = 0',
494: 1:    '✅f(183168009579826) = 2',
494: 1:    '✅f(964720036906339) = 7',
494: 1:    '✅f(613951967276640) = 9',
494: 1:    '✅f(825813064400100) = 7',
494: 1:    '✅f(239698713103140) = 9',
494: 1:    '✅f(771412693933286) = 7',
494: 1:    '✅f(254262384108564) = 0',
494: 1:    '✅f(959681833483055) = 7',
494: 1:    '✅f(210087745295982) = 4',
494: 1:    '✅f(367683885386271) = 2',
494: 1:    '✅f(894632429803471) = 5',
494: 1:    '✅f(471260044736237) = 5',
494: 1:    '✅f(916471602234329) = 1',
494: 1:    '✅f(961073953339054) = 4',
494: 1:    '✅f(917408439816341) = 5',
494: 1:    '✅f(498078140932499) = 4',
494: 1:    '✅f(686244896142849) = 2',
494: 1:    '✅f(772287416460433) = 2',
494: 1:    '✅f(207725984977363) = 1',
494: 1:    '❌f(199776984753064) = ??? != 2'
494: 1:  ],
494: 1:  'level': 17,
494: 1:  'nextQuestion': '199776984753064',
494: 1:  'questions': [
494: 1:    '456126121234546',
494: 1:    '123456781234567',
494: 1:    '183168009579826',
494: 1:    '964720036906339',
494: 1:    '613951967276640',
494: 1:    '825813064400100',
494: 1:    '239698713103140',
494: 1:    '771412693933286',
494: 1:    '254262384108564',
494: 1:    '959681833483055',
494: 1:    '210087745295982',
494: 1:    '367683885386271',
494: 1:    '894632429803471',
494: 1:    '471260044736237',
494: 1:    '916471602234329',
494: 1:    '961073953339054',
494: 1:    '917408439816341',
494: 1:    '498078140932499',
494: 1:    '686244896142849',
494: 1:    '772287416460433',
494: 1:    '207725984977363',
494: 1:    '199776984753064'
494: 1:  ]
494: 1:}
494: 1:Scores: 29809
494: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5', '5', '1', '4', '5', '4', '2', '2', '1', '2']')
494: 1:Fire Event: PassTest{complexity=23, testCount=27}
------------------------------------------
495: 1:BoardData {
495: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
495: 1:  'expectedAnswer': '5',
495: 1:  'history': [
495: 1:    {
495: 1:      'answer': '7',
495: 1:      'question': '456126121234546',
495: 1:      'valid': true
495: 1:    },
495: 1:    {
495: 1:      'answer': '0',
495: 1:      'question': '123456781234567',
495: 1:      'valid': true
495: 1:    },
495: 1:    {
495: 1:      'answer': '2',
495: 1:      'question': '183168009579826',
495: 1:      'valid': true
495: 1:    },
495: 1:    {
495: 1:      'answer': '7',
495: 1:      'question': '964720036906339',
495: 1:      'valid': true
495: 1:    },
495: 1:    {
495: 1:      'answer': '9',
495: 1:      'question': '613951967276640',
495: 1:      'valid': true
495: 1:    },
495: 1:    {
495: 1:      'answer': '7',
495: 1:      'question': '825813064400100',
495: 1:      'valid': true
495: 1:    },
495: 1:    {
495: 1:      'answer': '9',
495: 1:      'question': '239698713103140',
495: 1:      'valid': true
495: 1:    },
495: 1:    {
495: 1:      'answer': '7',
495: 1:      'question': '771412693933286',
495: 1:      'valid': true
495: 1:    },
495: 1:    {
495: 1:      'answer': '0',
495: 1:      'question': '254262384108564',
495: 1:      'valid': true
495: 1:    },
495: 1:    {
495: 1:      'answer': '7',
495: 1:      'question': '959681833483055',
495: 1:      'valid': true
495: 1:    },
495: 1:    {
495: 1:      'answer': '4',
495: 1:      'question': '210087745295982',
495: 1:      'valid': true
495: 1:    },
495: 1:    {
495: 1:      'answer': '2',
495: 1:      'question': '367683885386271',
495: 1:      'valid': true
495: 1:    },
495: 1:    {
495: 1:      'answer': '5',
495: 1:      'question': '894632429803471',
495: 1:      'valid': true
495: 1:    },
495: 1:    {
495: 1:      'answer': '5',
495: 1:      'question': '471260044736237',
495: 1:      'valid': true
495: 1:    },
495: 1:    {
495: 1:      'answer': '1',
495: 1:      'question': '916471602234329',
495: 1:      'valid': true
495: 1:    },
495: 1:    {
495: 1:      'answer': '4',
495: 1:      'question': '961073953339054',
495: 1:      'valid': true
495: 1:    },
495: 1:    {
495: 1:      'answer': '5',
495: 1:      'question': '917408439816341',
495: 1:      'valid': true
495: 1:    },
495: 1:    {
495: 1:      'answer': '4',
495: 1:      'question': '498078140932499',
495: 1:      'valid': true
495: 1:    },
495: 1:    {
495: 1:      'answer': '2',
495: 1:      'question': '686244896142849',
495: 1:      'valid': true
495: 1:    },
495: 1:    {
495: 1:      'answer': '2',
495: 1:      'question': '772287416460433',
495: 1:      'valid': true
495: 1:    },
495: 1:    {
495: 1:      'answer': '1',
495: 1:      'question': '207725984977363',
495: 1:      'valid': true
495: 1:    },
495: 1:    {
495: 1:      'answer': '2',
495: 1:      'question': '199776984753064',
495: 1:      'valid': true
495: 1:    }
495: 1:  ],
495: 1:  'info': [
495: 1:    '✅f(456126121234546) = 7',
495: 1:    '✅f(123456781234567) = 0',
495: 1:    '✅f(183168009579826) = 2',
495: 1:    '✅f(964720036906339) = 7',
495: 1:    '✅f(613951967276640) = 9',
495: 1:    '✅f(825813064400100) = 7',
495: 1:    '✅f(239698713103140) = 9',
495: 1:    '✅f(771412693933286) = 7',
495: 1:    '✅f(254262384108564) = 0',
495: 1:    '✅f(959681833483055) = 7',
495: 1:    '✅f(210087745295982) = 4',
495: 1:    '✅f(367683885386271) = 2',
495: 1:    '✅f(894632429803471) = 5',
495: 1:    '✅f(471260044736237) = 5',
495: 1:    '✅f(916471602234329) = 1',
495: 1:    '✅f(961073953339054) = 4',
495: 1:    '✅f(917408439816341) = 5',
495: 1:    '✅f(498078140932499) = 4',
495: 1:    '✅f(686244896142849) = 2',
495: 1:    '✅f(772287416460433) = 2',
495: 1:    '✅f(207725984977363) = 1',
495: 1:    '✅f(199776984753064) = 2',
495: 1:    '❌f(498874493103145) = ??? != 5'
495: 1:  ],
495: 1:  'level': 17,
495: 1:  'nextQuestion': '498874493103145',
495: 1:  'questions': [
495: 1:    '456126121234546',
495: 1:    '123456781234567',
495: 1:    '183168009579826',
495: 1:    '964720036906339',
495: 1:    '613951967276640',
495: 1:    '825813064400100',
495: 1:    '239698713103140',
495: 1:    '771412693933286',
495: 1:    '254262384108564',
495: 1:    '959681833483055',
495: 1:    '210087745295982',
495: 1:    '367683885386271',
495: 1:    '894632429803471',
495: 1:    '471260044736237',
495: 1:    '916471602234329',
495: 1:    '961073953339054',
495: 1:    '917408439816341',
495: 1:    '498078140932499',
495: 1:    '686244896142849',
495: 1:    '772287416460433',
495: 1:    '207725984977363',
495: 1:    '199776984753064',
495: 1:    '498874493103145'
495: 1:  ]
495: 1:}
495: 1:Scores: 29817
495: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5', '5', '1', '4', '5', '4', '2', '2', '1', '2', '5']')
495: 1:Fire Event: PassTest{complexity=23, testCount=27}
------------------------------------------
496: 1:BoardData {
496: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
496: 1:  'expectedAnswer': '1',
496: 1:  'history': [
496: 1:    {
496: 1:      'answer': '7',
496: 1:      'question': '456126121234546',
496: 1:      'valid': true
496: 1:    },
496: 1:    {
496: 1:      'answer': '0',
496: 1:      'question': '123456781234567',
496: 1:      'valid': true
496: 1:    },
496: 1:    {
496: 1:      'answer': '2',
496: 1:      'question': '183168009579826',
496: 1:      'valid': true
496: 1:    },
496: 1:    {
496: 1:      'answer': '7',
496: 1:      'question': '964720036906339',
496: 1:      'valid': true
496: 1:    },
496: 1:    {
496: 1:      'answer': '9',
496: 1:      'question': '613951967276640',
496: 1:      'valid': true
496: 1:    },
496: 1:    {
496: 1:      'answer': '7',
496: 1:      'question': '825813064400100',
496: 1:      'valid': true
496: 1:    },
496: 1:    {
496: 1:      'answer': '9',
496: 1:      'question': '239698713103140',
496: 1:      'valid': true
496: 1:    },
496: 1:    {
496: 1:      'answer': '7',
496: 1:      'question': '771412693933286',
496: 1:      'valid': true
496: 1:    },
496: 1:    {
496: 1:      'answer': '0',
496: 1:      'question': '254262384108564',
496: 1:      'valid': true
496: 1:    },
496: 1:    {
496: 1:      'answer': '7',
496: 1:      'question': '959681833483055',
496: 1:      'valid': true
496: 1:    },
496: 1:    {
496: 1:      'answer': '4',
496: 1:      'question': '210087745295982',
496: 1:      'valid': true
496: 1:    },
496: 1:    {
496: 1:      'answer': '2',
496: 1:      'question': '367683885386271',
496: 1:      'valid': true
496: 1:    },
496: 1:    {
496: 1:      'answer': '5',
496: 1:      'question': '894632429803471',
496: 1:      'valid': true
496: 1:    },
496: 1:    {
496: 1:      'answer': '5',
496: 1:      'question': '471260044736237',
496: 1:      'valid': true
496: 1:    },
496: 1:    {
496: 1:      'answer': '1',
496: 1:      'question': '916471602234329',
496: 1:      'valid': true
496: 1:    },
496: 1:    {
496: 1:      'answer': '4',
496: 1:      'question': '961073953339054',
496: 1:      'valid': true
496: 1:    },
496: 1:    {
496: 1:      'answer': '5',
496: 1:      'question': '917408439816341',
496: 1:      'valid': true
496: 1:    },
496: 1:    {
496: 1:      'answer': '4',
496: 1:      'question': '498078140932499',
496: 1:      'valid': true
496: 1:    },
496: 1:    {
496: 1:      'answer': '2',
496: 1:      'question': '686244896142849',
496: 1:      'valid': true
496: 1:    },
496: 1:    {
496: 1:      'answer': '2',
496: 1:      'question': '772287416460433',
496: 1:      'valid': true
496: 1:    },
496: 1:    {
496: 1:      'answer': '1',
496: 1:      'question': '207725984977363',
496: 1:      'valid': true
496: 1:    },
496: 1:    {
496: 1:      'answer': '2',
496: 1:      'question': '199776984753064',
496: 1:      'valid': true
496: 1:    },
496: 1:    {
496: 1:      'answer': '5',
496: 1:      'question': '498874493103145',
496: 1:      'valid': true
496: 1:    }
496: 1:  ],
496: 1:  'info': [
496: 1:    '✅f(456126121234546) = 7',
496: 1:    '✅f(123456781234567) = 0',
496: 1:    '✅f(183168009579826) = 2',
496: 1:    '✅f(964720036906339) = 7',
496: 1:    '✅f(613951967276640) = 9',
496: 1:    '✅f(825813064400100) = 7',
496: 1:    '✅f(239698713103140) = 9',
496: 1:    '✅f(771412693933286) = 7',
496: 1:    '✅f(254262384108564) = 0',
496: 1:    '✅f(959681833483055) = 7',
496: 1:    '✅f(210087745295982) = 4',
496: 1:    '✅f(367683885386271) = 2',
496: 1:    '✅f(894632429803471) = 5',
496: 1:    '✅f(471260044736237) = 5',
496: 1:    '✅f(916471602234329) = 1',
496: 1:    '✅f(961073953339054) = 4',
496: 1:    '✅f(917408439816341) = 5',
496: 1:    '✅f(498078140932499) = 4',
496: 1:    '✅f(686244896142849) = 2',
496: 1:    '✅f(772287416460433) = 2',
496: 1:    '✅f(207725984977363) = 1',
496: 1:    '✅f(199776984753064) = 2',
496: 1:    '✅f(498874493103145) = 5',
496: 1:    '❌f(662571495734934) = ??? != 1'
496: 1:  ],
496: 1:  'level': 17,
496: 1:  'nextQuestion': '662571495734934',
496: 1:  'questions': [
496: 1:    '456126121234546',
496: 1:    '123456781234567',
496: 1:    '183168009579826',
496: 1:    '964720036906339',
496: 1:    '613951967276640',
496: 1:    '825813064400100',
496: 1:    '239698713103140',
496: 1:    '771412693933286',
496: 1:    '254262384108564',
496: 1:    '959681833483055',
496: 1:    '210087745295982',
496: 1:    '367683885386271',
496: 1:    '894632429803471',
496: 1:    '471260044736237',
496: 1:    '916471602234329',
496: 1:    '961073953339054',
496: 1:    '917408439816341',
496: 1:    '498078140932499',
496: 1:    '686244896142849',
496: 1:    '772287416460433',
496: 1:    '207725984977363',
496: 1:    '199776984753064',
496: 1:    '498874493103145',
496: 1:    '662571495734934'
496: 1:  ]
496: 1:}
496: 1:Scores: 29825
496: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5', '5', '1', '4', '5', '4', '2', '2', '1', '2', '5', '1']')
496: 1:Fire Event: PassTest{complexity=23, testCount=27}
------------------------------------------
497: 1:BoardData {
497: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
497: 1:  'expectedAnswer': '1',
497: 1:  'history': [
497: 1:    {
497: 1:      'answer': '7',
497: 1:      'question': '456126121234546',
497: 1:      'valid': true
497: 1:    },
497: 1:    {
497: 1:      'answer': '0',
497: 1:      'question': '123456781234567',
497: 1:      'valid': true
497: 1:    },
497: 1:    {
497: 1:      'answer': '2',
497: 1:      'question': '183168009579826',
497: 1:      'valid': true
497: 1:    },
497: 1:    {
497: 1:      'answer': '7',
497: 1:      'question': '964720036906339',
497: 1:      'valid': true
497: 1:    },
497: 1:    {
497: 1:      'answer': '9',
497: 1:      'question': '613951967276640',
497: 1:      'valid': true
497: 1:    },
497: 1:    {
497: 1:      'answer': '7',
497: 1:      'question': '825813064400100',
497: 1:      'valid': true
497: 1:    },
497: 1:    {
497: 1:      'answer': '9',
497: 1:      'question': '239698713103140',
497: 1:      'valid': true
497: 1:    },
497: 1:    {
497: 1:      'answer': '7',
497: 1:      'question': '771412693933286',
497: 1:      'valid': true
497: 1:    },
497: 1:    {
497: 1:      'answer': '0',
497: 1:      'question': '254262384108564',
497: 1:      'valid': true
497: 1:    },
497: 1:    {
497: 1:      'answer': '7',
497: 1:      'question': '959681833483055',
497: 1:      'valid': true
497: 1:    },
497: 1:    {
497: 1:      'answer': '4',
497: 1:      'question': '210087745295982',
497: 1:      'valid': true
497: 1:    },
497: 1:    {
497: 1:      'answer': '2',
497: 1:      'question': '367683885386271',
497: 1:      'valid': true
497: 1:    },
497: 1:    {
497: 1:      'answer': '5',
497: 1:      'question': '894632429803471',
497: 1:      'valid': true
497: 1:    },
497: 1:    {
497: 1:      'answer': '5',
497: 1:      'question': '471260044736237',
497: 1:      'valid': true
497: 1:    },
497: 1:    {
497: 1:      'answer': '1',
497: 1:      'question': '916471602234329',
497: 1:      'valid': true
497: 1:    },
497: 1:    {
497: 1:      'answer': '4',
497: 1:      'question': '961073953339054',
497: 1:      'valid': true
497: 1:    },
497: 1:    {
497: 1:      'answer': '5',
497: 1:      'question': '917408439816341',
497: 1:      'valid': true
497: 1:    },
497: 1:    {
497: 1:      'answer': '4',
497: 1:      'question': '498078140932499',
497: 1:      'valid': true
497: 1:    },
497: 1:    {
497: 1:      'answer': '2',
497: 1:      'question': '686244896142849',
497: 1:      'valid': true
497: 1:    },
497: 1:    {
497: 1:      'answer': '2',
497: 1:      'question': '772287416460433',
497: 1:      'valid': true
497: 1:    },
497: 1:    {
497: 1:      'answer': '1',
497: 1:      'question': '207725984977363',
497: 1:      'valid': true
497: 1:    },
497: 1:    {
497: 1:      'answer': '2',
497: 1:      'question': '199776984753064',
497: 1:      'valid': true
497: 1:    },
497: 1:    {
497: 1:      'answer': '5',
497: 1:      'question': '498874493103145',
497: 1:      'valid': true
497: 1:    },
497: 1:    {
497: 1:      'answer': '1',
497: 1:      'question': '662571495734934',
497: 1:      'valid': true
497: 1:    }
497: 1:  ],
497: 1:  'info': [
497: 1:    '✅f(456126121234546) = 7',
497: 1:    '✅f(123456781234567) = 0',
497: 1:    '✅f(183168009579826) = 2',
497: 1:    '✅f(964720036906339) = 7',
497: 1:    '✅f(613951967276640) = 9',
497: 1:    '✅f(825813064400100) = 7',
497: 1:    '✅f(239698713103140) = 9',
497: 1:    '✅f(771412693933286) = 7',
497: 1:    '✅f(254262384108564) = 0',
497: 1:    '✅f(959681833483055) = 7',
497: 1:    '✅f(210087745295982) = 4',
497: 1:    '✅f(367683885386271) = 2',
497: 1:    '✅f(894632429803471) = 5',
497: 1:    '✅f(471260044736237) = 5',
497: 1:    '✅f(916471602234329) = 1',
497: 1:    '✅f(961073953339054) = 4',
497: 1:    '✅f(917408439816341) = 5',
497: 1:    '✅f(498078140932499) = 4',
497: 1:    '✅f(686244896142849) = 2',
497: 1:    '✅f(772287416460433) = 2',
497: 1:    '✅f(207725984977363) = 1',
497: 1:    '✅f(199776984753064) = 2',
497: 1:    '✅f(498874493103145) = 5',
497: 1:    '✅f(662571495734934) = 1',
497: 1:    '❌f(287442129303575) = ??? != 1'
497: 1:  ],
497: 1:  'level': 17,
497: 1:  'nextQuestion': '287442129303575',
497: 1:  'questions': [
497: 1:    '456126121234546',
497: 1:    '123456781234567',
497: 1:    '183168009579826',
497: 1:    '964720036906339',
497: 1:    '613951967276640',
497: 1:    '825813064400100',
497: 1:    '239698713103140',
497: 1:    '771412693933286',
497: 1:    '254262384108564',
497: 1:    '959681833483055',
497: 1:    '210087745295982',
497: 1:    '367683885386271',
497: 1:    '894632429803471',
497: 1:    '471260044736237',
497: 1:    '916471602234329',
497: 1:    '961073953339054',
497: 1:    '917408439816341',
497: 1:    '498078140932499',
497: 1:    '686244896142849',
497: 1:    '772287416460433',
497: 1:    '207725984977363',
497: 1:    '199776984753064',
497: 1:    '498874493103145',
497: 1:    '662571495734934',
497: 1:    '287442129303575'
497: 1:  ]
497: 1:}
497: 1:Scores: 29833
497: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5', '5', '1', '4', '5', '4', '2', '2', '1', '2', '5', '1', '1']')
497: 1:Fire Event: PassTest{complexity=23, testCount=27}
------------------------------------------
498: 1:BoardData {
498: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
498: 1:  'expectedAnswer': '0',
498: 1:  'history': [
498: 1:    {
498: 1:      'answer': '7',
498: 1:      'question': '456126121234546',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '0',
498: 1:      'question': '123456781234567',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '2',
498: 1:      'question': '183168009579826',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '7',
498: 1:      'question': '964720036906339',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '9',
498: 1:      'question': '613951967276640',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '7',
498: 1:      'question': '825813064400100',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '9',
498: 1:      'question': '239698713103140',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '7',
498: 1:      'question': '771412693933286',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '0',
498: 1:      'question': '254262384108564',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '7',
498: 1:      'question': '959681833483055',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '4',
498: 1:      'question': '210087745295982',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '2',
498: 1:      'question': '367683885386271',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '5',
498: 1:      'question': '894632429803471',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '5',
498: 1:      'question': '471260044736237',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '1',
498: 1:      'question': '916471602234329',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '4',
498: 1:      'question': '961073953339054',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '5',
498: 1:      'question': '917408439816341',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '4',
498: 1:      'question': '498078140932499',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '2',
498: 1:      'question': '686244896142849',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '2',
498: 1:      'question': '772287416460433',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '1',
498: 1:      'question': '207725984977363',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '2',
498: 1:      'question': '199776984753064',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '5',
498: 1:      'question': '498874493103145',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '1',
498: 1:      'question': '662571495734934',
498: 1:      'valid': true
498: 1:    },
498: 1:    {
498: 1:      'answer': '1',
498: 1:      'question': '287442129303575',
498: 1:      'valid': true
498: 1:    }
498: 1:  ],
498: 1:  'info': [
498: 1:    '✅f(456126121234546) = 7',
498: 1:    '✅f(123456781234567) = 0',
498: 1:    '✅f(183168009579826) = 2',
498: 1:    '✅f(964720036906339) = 7',
498: 1:    '✅f(613951967276640) = 9',
498: 1:    '✅f(825813064400100) = 7',
498: 1:    '✅f(239698713103140) = 9',
498: 1:    '✅f(771412693933286) = 7',
498: 1:    '✅f(254262384108564) = 0',
498: 1:    '✅f(959681833483055) = 7',
498: 1:    '✅f(210087745295982) = 4',
498: 1:    '✅f(367683885386271) = 2',
498: 1:    '✅f(894632429803471) = 5',
498: 1:    '✅f(471260044736237) = 5',
498: 1:    '✅f(916471602234329) = 1',
498: 1:    '✅f(961073953339054) = 4',
498: 1:    '✅f(917408439816341) = 5',
498: 1:    '✅f(498078140932499) = 4',
498: 1:    '✅f(686244896142849) = 2',
498: 1:    '✅f(772287416460433) = 2',
498: 1:    '✅f(207725984977363) = 1',
498: 1:    '✅f(199776984753064) = 2',
498: 1:    '✅f(498874493103145) = 5',
498: 1:    '✅f(662571495734934) = 1',
498: 1:    '✅f(287442129303575) = 1',
498: 1:    '❌f(358353262548397) = ??? != 0'
498: 1:  ],
498: 1:  'level': 17,
498: 1:  'nextQuestion': '358353262548397',
498: 1:  'questions': [
498: 1:    '456126121234546',
498: 1:    '123456781234567',
498: 1:    '183168009579826',
498: 1:    '964720036906339',
498: 1:    '613951967276640',
498: 1:    '825813064400100',
498: 1:    '239698713103140',
498: 1:    '771412693933286',
498: 1:    '254262384108564',
498: 1:    '959681833483055',
498: 1:    '210087745295982',
498: 1:    '367683885386271',
498: 1:    '894632429803471',
498: 1:    '471260044736237',
498: 1:    '916471602234329',
498: 1:    '961073953339054',
498: 1:    '917408439816341',
498: 1:    '498078140932499',
498: 1:    '686244896142849',
498: 1:    '772287416460433',
498: 1:    '207725984977363',
498: 1:    '199776984753064',
498: 1:    '498874493103145',
498: 1:    '662571495734934',
498: 1:    '287442129303575',
498: 1:    '358353262548397'
498: 1:  ]
498: 1:}
498: 1:Scores: 29841
498: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5', '5', '1', '4', '5', '4', '2', '2', '1', '2', '5', '1', '1', '0']')
498: 1:Fire Event: PassTest{complexity=23, testCount=27}
------------------------------------------
499: 1:BoardData {
499: 1:  'description': ['Credit Card Number...\n I will give you the first 15 digits of the credit card number. \nYou need to generate the last, 16th digit.\nPlease provide only the last digit as the answer.\nCorrect credit card number example: 4561261212345467Answer example: 456126121234546=>7'],
499: 1:  'expectedAnswer': '3',
499: 1:  'history': [
499: 1:    {
499: 1:      'answer': '7',
499: 1:      'question': '456126121234546',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '0',
499: 1:      'question': '123456781234567',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '2',
499: 1:      'question': '183168009579826',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '7',
499: 1:      'question': '964720036906339',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '9',
499: 1:      'question': '613951967276640',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '7',
499: 1:      'question': '825813064400100',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '9',
499: 1:      'question': '239698713103140',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '7',
499: 1:      'question': '771412693933286',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '0',
499: 1:      'question': '254262384108564',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '7',
499: 1:      'question': '959681833483055',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '4',
499: 1:      'question': '210087745295982',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '2',
499: 1:      'question': '367683885386271',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '5',
499: 1:      'question': '894632429803471',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '5',
499: 1:      'question': '471260044736237',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '1',
499: 1:      'question': '916471602234329',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '4',
499: 1:      'question': '961073953339054',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '5',
499: 1:      'question': '917408439816341',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '4',
499: 1:      'question': '498078140932499',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '2',
499: 1:      'question': '686244896142849',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '2',
499: 1:      'question': '772287416460433',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '1',
499: 1:      'question': '207725984977363',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '2',
499: 1:      'question': '199776984753064',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '5',
499: 1:      'question': '498874493103145',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '1',
499: 1:      'question': '662571495734934',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '1',
499: 1:      'question': '287442129303575',
499: 1:      'valid': true
499: 1:    },
499: 1:    {
499: 1:      'answer': '0',
499: 1:      'question': '358353262548397',
499: 1:      'valid': true
499: 1:    }
499: 1:  ],
499: 1:  'info': [
499: 1:    '✅f(456126121234546) = 7',
499: 1:    '✅f(123456781234567) = 0',
499: 1:    '✅f(183168009579826) = 2',
499: 1:    '✅f(964720036906339) = 7',
499: 1:    '✅f(613951967276640) = 9',
499: 1:    '✅f(825813064400100) = 7',
499: 1:    '✅f(239698713103140) = 9',
499: 1:    '✅f(771412693933286) = 7',
499: 1:    '✅f(254262384108564) = 0',
499: 1:    '✅f(959681833483055) = 7',
499: 1:    '✅f(210087745295982) = 4',
499: 1:    '✅f(367683885386271) = 2',
499: 1:    '✅f(894632429803471) = 5',
499: 1:    '✅f(471260044736237) = 5',
499: 1:    '✅f(916471602234329) = 1',
499: 1:    '✅f(961073953339054) = 4',
499: 1:    '✅f(917408439816341) = 5',
499: 1:    '✅f(498078140932499) = 4',
499: 1:    '✅f(686244896142849) = 2',
499: 1:    '✅f(772287416460433) = 2',
499: 1:    '✅f(207725984977363) = 1',
499: 1:    '✅f(199776984753064) = 2',
499: 1:    '✅f(498874493103145) = 5',
499: 1:    '✅f(662571495734934) = 1',
499: 1:    '✅f(287442129303575) = 1',
499: 1:    '✅f(358353262548397) = 0',
499: 1:    '❌f(576080532156469) = ??? != 3'
499: 1:  ],
499: 1:  'level': 17,
499: 1:  'nextQuestion': '576080532156469',
499: 1:  'questions': [
499: 1:    '456126121234546',
499: 1:    '123456781234567',
499: 1:    '183168009579826',
499: 1:    '964720036906339',
499: 1:    '613951967276640',
499: 1:    '825813064400100',
499: 1:    '239698713103140',
499: 1:    '771412693933286',
499: 1:    '254262384108564',
499: 1:    '959681833483055',
499: 1:    '210087745295982',
499: 1:    '367683885386271',
499: 1:    '894632429803471',
499: 1:    '471260044736237',
499: 1:    '916471602234329',
499: 1:    '961073953339054',
499: 1:    '917408439816341',
499: 1:    '498078140932499',
499: 1:    '686244896142849',
499: 1:    '772287416460433',
499: 1:    '207725984977363',
499: 1:    '199776984753064',
499: 1:    '498874493103145',
499: 1:    '662571495734934',
499: 1:    '287442129303575',
499: 1:    '358353262548397',
499: 1:    '576080532156469'
499: 1:  ]
499: 1:}
499: 1:Scores: 29849
499: 1:Answer: message('['7', '0', '2', '7', '9', '7', '9', '7', '0', '7', '4', '2', '5', '5', '1', '4', '5', '4', '2', '2', '1', '2', '5', '1', '1', '0', '3']')
499: 1:Fire Event: PassTest{complexity=23, testCount=27}
499: 1:Fire Event: NextAlgorithm{complexity=23, time=0}
------------------------------------------
500: 1:BoardData {
500: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
500: 1:  'history': [
500: 1:    {
500: 1:      'answer': '7',
500: 1:      'question': '456126121234546',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '0',
500: 1:      'question': '123456781234567',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '2',
500: 1:      'question': '183168009579826',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '7',
500: 1:      'question': '964720036906339',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '9',
500: 1:      'question': '613951967276640',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '7',
500: 1:      'question': '825813064400100',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '9',
500: 1:      'question': '239698713103140',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '7',
500: 1:      'question': '771412693933286',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '0',
500: 1:      'question': '254262384108564',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '7',
500: 1:      'question': '959681833483055',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '4',
500: 1:      'question': '210087745295982',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '2',
500: 1:      'question': '367683885386271',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '5',
500: 1:      'question': '894632429803471',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '5',
500: 1:      'question': '471260044736237',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '1',
500: 1:      'question': '916471602234329',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '4',
500: 1:      'question': '961073953339054',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '5',
500: 1:      'question': '917408439816341',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '4',
500: 1:      'question': '498078140932499',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '2',
500: 1:      'question': '686244896142849',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '2',
500: 1:      'question': '772287416460433',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '1',
500: 1:      'question': '207725984977363',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '2',
500: 1:      'question': '199776984753064',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '5',
500: 1:      'question': '498874493103145',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '1',
500: 1:      'question': '662571495734934',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '1',
500: 1:      'question': '287442129303575',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '0',
500: 1:      'question': '358353262548397',
500: 1:      'valid': true
500: 1:    },
500: 1:    {
500: 1:      'answer': '3',
500: 1:      'question': '576080532156469',
500: 1:      'valid': true
500: 1:    }
500: 1:  ],
500: 1:  'info': [
500: 1:    '✅f(456126121234546) = 7',
500: 1:    '✅f(123456781234567) = 0',
500: 1:    '✅f(183168009579826) = 2',
500: 1:    '✅f(964720036906339) = 7',
500: 1:    '✅f(613951967276640) = 9',
500: 1:    '✅f(825813064400100) = 7',
500: 1:    '✅f(239698713103140) = 9',
500: 1:    '✅f(771412693933286) = 7',
500: 1:    '✅f(254262384108564) = 0',
500: 1:    '✅f(959681833483055) = 7',
500: 1:    '✅f(210087745295982) = 4',
500: 1:    '✅f(367683885386271) = 2',
500: 1:    '✅f(894632429803471) = 5',
500: 1:    '✅f(471260044736237) = 5',
500: 1:    '✅f(916471602234329) = 1',
500: 1:    '✅f(961073953339054) = 4',
500: 1:    '✅f(917408439816341) = 5',
500: 1:    '✅f(498078140932499) = 4',
500: 1:    '✅f(686244896142849) = 2',
500: 1:    '✅f(772287416460433) = 2',
500: 1:    '✅f(207725984977363) = 1',
500: 1:    '✅f(199776984753064) = 2',
500: 1:    '✅f(498874493103145) = 5',
500: 1:    '✅f(662571495734934) = 1',
500: 1:    '✅f(287442129303575) = 1',
500: 1:    '✅f(358353262548397) = 0',
500: 1:    '✅f(576080532156469) = 3'
500: 1:  ],
500: 1:  'level': 17,
500: 1:  'questions': []
500: 1:}
500: 1:Scores: 32961
500: 1:Answer: message('StartNextLevel')
500: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
501: 1:BoardData {
501: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
501: 1:  'expectedAnswer': 'AAAA',
501: 1:  'history': [],
501: 1:  'info': ['❌f(TTTT) = ??? != AAAA'],
501: 1:  'level': 18,
501: 1:  'nextQuestion': 'TTTT',
501: 1:  'questions': ['TTTT']
501: 1:}
501: 1:Scores: 32961
501: 1:Answer: message('['AAAA']')
501: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
502: 1:BoardData {
502: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
502: 1:  'expectedAnswer': 'TTTT',
502: 1:  'history': [{
502: 1:    'answer': 'AAAA',
502: 1:    'question': 'TTTT',
502: 1:    'valid': true
502: 1:  }],
502: 1:  'info': [
502: 1:    '✅f(TTTT) = AAAA',
502: 1:    '❌f(AAAA) = ??? != TTTT'
502: 1:  ],
502: 1:  'level': 18,
502: 1:  'nextQuestion': 'AAAA',
502: 1:  'questions': [
502: 1:    'TTTT',
502: 1:    'AAAA'
502: 1:  ]
502: 1:}
502: 1:Scores: 32969
502: 1:Answer: message('['AAAA', 'TTTT']')
502: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
503: 1:BoardData {
503: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
503: 1:  'expectedAnswer': 'ATTGC',
503: 1:  'history': [
503: 1:    {
503: 1:      'answer': 'AAAA',
503: 1:      'question': 'TTTT',
503: 1:      'valid': true
503: 1:    },
503: 1:    {
503: 1:      'answer': 'TTTT',
503: 1:      'question': 'AAAA',
503: 1:      'valid': true
503: 1:    }
503: 1:  ],
503: 1:  'info': [
503: 1:    '✅f(TTTT) = AAAA',
503: 1:    '✅f(AAAA) = TTTT',
503: 1:    '❌f(TAACG) = ??? != ATTGC'
503: 1:  ],
503: 1:  'level': 18,
503: 1:  'nextQuestion': 'TAACG',
503: 1:  'questions': [
503: 1:    'TTTT',
503: 1:    'AAAA',
503: 1:    'TAACG'
503: 1:  ]
503: 1:}
503: 1:Scores: 32977
503: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC']')
503: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
504: 1:BoardData {
504: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
504: 1:  'expectedAnswer': 'TAACG',
504: 1:  'history': [
504: 1:    {
504: 1:      'answer': 'AAAA',
504: 1:      'question': 'TTTT',
504: 1:      'valid': true
504: 1:    },
504: 1:    {
504: 1:      'answer': 'TTTT',
504: 1:      'question': 'AAAA',
504: 1:      'valid': true
504: 1:    },
504: 1:    {
504: 1:      'answer': 'ATTGC',
504: 1:      'question': 'TAACG',
504: 1:      'valid': true
504: 1:    }
504: 1:  ],
504: 1:  'info': [
504: 1:    '✅f(TTTT) = AAAA',
504: 1:    '✅f(AAAA) = TTTT',
504: 1:    '✅f(TAACG) = ATTGC',
504: 1:    '❌f(ATTGC) = ??? != TAACG'
504: 1:  ],
504: 1:  'level': 18,
504: 1:  'nextQuestion': 'ATTGC',
504: 1:  'questions': [
504: 1:    'TTTT',
504: 1:    'AAAA',
504: 1:    'TAACG',
504: 1:    'ATTGC'
504: 1:  ]
504: 1:}
504: 1:Scores: 32985
504: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG']')
504: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
505: 1:BoardData {
505: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
505: 1:  'expectedAnswer': 'GTAT',
505: 1:  'history': [
505: 1:    {
505: 1:      'answer': 'AAAA',
505: 1:      'question': 'TTTT',
505: 1:      'valid': true
505: 1:    },
505: 1:    {
505: 1:      'answer': 'TTTT',
505: 1:      'question': 'AAAA',
505: 1:      'valid': true
505: 1:    },
505: 1:    {
505: 1:      'answer': 'ATTGC',
505: 1:      'question': 'TAACG',
505: 1:      'valid': true
505: 1:    },
505: 1:    {
505: 1:      'answer': 'TAACG',
505: 1:      'question': 'ATTGC',
505: 1:      'valid': true
505: 1:    }
505: 1:  ],
505: 1:  'info': [
505: 1:    '✅f(TTTT) = AAAA',
505: 1:    '✅f(AAAA) = TTTT',
505: 1:    '✅f(TAACG) = ATTGC',
505: 1:    '✅f(ATTGC) = TAACG',
505: 1:    '❌f(CATA) = ??? != GTAT'
505: 1:  ],
505: 1:  'level': 18,
505: 1:  'nextQuestion': 'CATA',
505: 1:  'questions': [
505: 1:    'TTTT',
505: 1:    'AAAA',
505: 1:    'TAACG',
505: 1:    'ATTGC',
505: 1:    'CATA'
505: 1:  ]
505: 1:}
505: 1:Scores: 32993
505: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT']')
505: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
506: 1:BoardData {
506: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
506: 1:  'expectedAnswer': 'CATA',
506: 1:  'history': [
506: 1:    {
506: 1:      'answer': 'AAAA',
506: 1:      'question': 'TTTT',
506: 1:      'valid': true
506: 1:    },
506: 1:    {
506: 1:      'answer': 'TTTT',
506: 1:      'question': 'AAAA',
506: 1:      'valid': true
506: 1:    },
506: 1:    {
506: 1:      'answer': 'ATTGC',
506: 1:      'question': 'TAACG',
506: 1:      'valid': true
506: 1:    },
506: 1:    {
506: 1:      'answer': 'TAACG',
506: 1:      'question': 'ATTGC',
506: 1:      'valid': true
506: 1:    },
506: 1:    {
506: 1:      'answer': 'GTAT',
506: 1:      'question': 'CATA',
506: 1:      'valid': true
506: 1:    }
506: 1:  ],
506: 1:  'info': [
506: 1:    '✅f(TTTT) = AAAA',
506: 1:    '✅f(AAAA) = TTTT',
506: 1:    '✅f(TAACG) = ATTGC',
506: 1:    '✅f(ATTGC) = TAACG',
506: 1:    '✅f(CATA) = GTAT',
506: 1:    '❌f(GTAT) = ??? != CATA'
506: 1:  ],
506: 1:  'level': 18,
506: 1:  'nextQuestion': 'GTAT',
506: 1:  'questions': [
506: 1:    'TTTT',
506: 1:    'AAAA',
506: 1:    'TAACG',
506: 1:    'ATTGC',
506: 1:    'CATA',
506: 1:    'GTAT'
506: 1:  ]
506: 1:}
506: 1:Scores: 33001
506: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA']')
506: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
507: 1:BoardData {
507: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
507: 1:  'expectedAnswer': 'ATCGGATCGA',
507: 1:  'history': [
507: 1:    {
507: 1:      'answer': 'AAAA',
507: 1:      'question': 'TTTT',
507: 1:      'valid': true
507: 1:    },
507: 1:    {
507: 1:      'answer': 'TTTT',
507: 1:      'question': 'AAAA',
507: 1:      'valid': true
507: 1:    },
507: 1:    {
507: 1:      'answer': 'ATTGC',
507: 1:      'question': 'TAACG',
507: 1:      'valid': true
507: 1:    },
507: 1:    {
507: 1:      'answer': 'TAACG',
507: 1:      'question': 'ATTGC',
507: 1:      'valid': true
507: 1:    },
507: 1:    {
507: 1:      'answer': 'GTAT',
507: 1:      'question': 'CATA',
507: 1:      'valid': true
507: 1:    },
507: 1:    {
507: 1:      'answer': 'CATA',
507: 1:      'question': 'GTAT',
507: 1:      'valid': true
507: 1:    }
507: 1:  ],
507: 1:  'info': [
507: 1:    '✅f(TTTT) = AAAA',
507: 1:    '✅f(AAAA) = TTTT',
507: 1:    '✅f(TAACG) = ATTGC',
507: 1:    '✅f(ATTGC) = TAACG',
507: 1:    '✅f(CATA) = GTAT',
507: 1:    '✅f(GTAT) = CATA',
507: 1:    '❌f(TAGCCTAGCT) = ??? != ATCGGATCGA'
507: 1:  ],
507: 1:  'level': 18,
507: 1:  'nextQuestion': 'TAGCCTAGCT',
507: 1:  'questions': [
507: 1:    'TTTT',
507: 1:    'AAAA',
507: 1:    'TAACG',
507: 1:    'ATTGC',
507: 1:    'CATA',
507: 1:    'GTAT',
507: 1:    'TAGCCTAGCT'
507: 1:  ]
507: 1:}
507: 1:Scores: 33009
507: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA']')
507: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
508: 1:BoardData {
508: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
508: 1:  'expectedAnswer': 'CTAGCTAGCT',
508: 1:  'history': [
508: 1:    {
508: 1:      'answer': 'AAAA',
508: 1:      'question': 'TTTT',
508: 1:      'valid': true
508: 1:    },
508: 1:    {
508: 1:      'answer': 'TTTT',
508: 1:      'question': 'AAAA',
508: 1:      'valid': true
508: 1:    },
508: 1:    {
508: 1:      'answer': 'ATTGC',
508: 1:      'question': 'TAACG',
508: 1:      'valid': true
508: 1:    },
508: 1:    {
508: 1:      'answer': 'TAACG',
508: 1:      'question': 'ATTGC',
508: 1:      'valid': true
508: 1:    },
508: 1:    {
508: 1:      'answer': 'GTAT',
508: 1:      'question': 'CATA',
508: 1:      'valid': true
508: 1:    },
508: 1:    {
508: 1:      'answer': 'CATA',
508: 1:      'question': 'GTAT',
508: 1:      'valid': true
508: 1:    },
508: 1:    {
508: 1:      'answer': 'ATCGGATCGA',
508: 1:      'question': 'TAGCCTAGCT',
508: 1:      'valid': true
508: 1:    }
508: 1:  ],
508: 1:  'info': [
508: 1:    '✅f(TTTT) = AAAA',
508: 1:    '✅f(AAAA) = TTTT',
508: 1:    '✅f(TAACG) = ATTGC',
508: 1:    '✅f(ATTGC) = TAACG',
508: 1:    '✅f(CATA) = GTAT',
508: 1:    '✅f(GTAT) = CATA',
508: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
508: 1:    '❌f(GATCGATCGA) = ??? != CTAGCTAGCT'
508: 1:  ],
508: 1:  'level': 18,
508: 1:  'nextQuestion': 'GATCGATCGA',
508: 1:  'questions': [
508: 1:    'TTTT',
508: 1:    'AAAA',
508: 1:    'TAACG',
508: 1:    'ATTGC',
508: 1:    'CATA',
508: 1:    'GTAT',
508: 1:    'TAGCCTAGCT',
508: 1:    'GATCGATCGA'
508: 1:  ]
508: 1:}
508: 1:Scores: 33017
508: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT']')
508: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
509: 1:BoardData {
509: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
509: 1:  'expectedAnswer': 'GATCGATCGATCGATCGA',
509: 1:  'history': [
509: 1:    {
509: 1:      'answer': 'AAAA',
509: 1:      'question': 'TTTT',
509: 1:      'valid': true
509: 1:    },
509: 1:    {
509: 1:      'answer': 'TTTT',
509: 1:      'question': 'AAAA',
509: 1:      'valid': true
509: 1:    },
509: 1:    {
509: 1:      'answer': 'ATTGC',
509: 1:      'question': 'TAACG',
509: 1:      'valid': true
509: 1:    },
509: 1:    {
509: 1:      'answer': 'TAACG',
509: 1:      'question': 'ATTGC',
509: 1:      'valid': true
509: 1:    },
509: 1:    {
509: 1:      'answer': 'GTAT',
509: 1:      'question': 'CATA',
509: 1:      'valid': true
509: 1:    },
509: 1:    {
509: 1:      'answer': 'CATA',
509: 1:      'question': 'GTAT',
509: 1:      'valid': true
509: 1:    },
509: 1:    {
509: 1:      'answer': 'ATCGGATCGA',
509: 1:      'question': 'TAGCCTAGCT',
509: 1:      'valid': true
509: 1:    },
509: 1:    {
509: 1:      'answer': 'CTAGCTAGCT',
509: 1:      'question': 'GATCGATCGA',
509: 1:      'valid': true
509: 1:    }
509: 1:  ],
509: 1:  'info': [
509: 1:    '✅f(TTTT) = AAAA',
509: 1:    '✅f(AAAA) = TTTT',
509: 1:    '✅f(TAACG) = ATTGC',
509: 1:    '✅f(ATTGC) = TAACG',
509: 1:    '✅f(CATA) = GTAT',
509: 1:    '✅f(GTAT) = CATA',
509: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
509: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
509: 1:    '❌f(CTAGCTAGCTAGCTAGCT) = ??? != GATCGATCGATCGATCGA'
509: 1:  ],
509: 1:  'level': 18,
509: 1:  'nextQuestion': 'CTAGCTAGCTAGCTAGCT',
509: 1:  'questions': [
509: 1:    'TTTT',
509: 1:    'AAAA',
509: 1:    'TAACG',
509: 1:    'ATTGC',
509: 1:    'CATA',
509: 1:    'GTAT',
509: 1:    'TAGCCTAGCT',
509: 1:    'GATCGATCGA',
509: 1:    'CTAGCTAGCTAGCTAGCT'
509: 1:  ]
509: 1:}
509: 1:Scores: 33025
509: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA']')
509: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
510: 1:BoardData {
510: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
510: 1:  'expectedAnswer': 'TGCATCGATCGATCGAT',
510: 1:  'history': [
510: 1:    {
510: 1:      'answer': 'AAAA',
510: 1:      'question': 'TTTT',
510: 1:      'valid': true
510: 1:    },
510: 1:    {
510: 1:      'answer': 'TTTT',
510: 1:      'question': 'AAAA',
510: 1:      'valid': true
510: 1:    },
510: 1:    {
510: 1:      'answer': 'ATTGC',
510: 1:      'question': 'TAACG',
510: 1:      'valid': true
510: 1:    },
510: 1:    {
510: 1:      'answer': 'TAACG',
510: 1:      'question': 'ATTGC',
510: 1:      'valid': true
510: 1:    },
510: 1:    {
510: 1:      'answer': 'GTAT',
510: 1:      'question': 'CATA',
510: 1:      'valid': true
510: 1:    },
510: 1:    {
510: 1:      'answer': 'CATA',
510: 1:      'question': 'GTAT',
510: 1:      'valid': true
510: 1:    },
510: 1:    {
510: 1:      'answer': 'ATCGGATCGA',
510: 1:      'question': 'TAGCCTAGCT',
510: 1:      'valid': true
510: 1:    },
510: 1:    {
510: 1:      'answer': 'CTAGCTAGCT',
510: 1:      'question': 'GATCGATCGA',
510: 1:      'valid': true
510: 1:    },
510: 1:    {
510: 1:      'answer': 'GATCGATCGATCGATCGA',
510: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
510: 1:      'valid': true
510: 1:    }
510: 1:  ],
510: 1:  'info': [
510: 1:    '✅f(TTTT) = AAAA',
510: 1:    '✅f(AAAA) = TTTT',
510: 1:    '✅f(TAACG) = ATTGC',
510: 1:    '✅f(ATTGC) = TAACG',
510: 1:    '✅f(CATA) = GTAT',
510: 1:    '✅f(GTAT) = CATA',
510: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
510: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
510: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
510: 1:    '❌f(ACGTAGCTAGCTAGCTA) = ??? != TGCATCGATCGATCGAT'
510: 1:  ],
510: 1:  'level': 18,
510: 1:  'nextQuestion': 'ACGTAGCTAGCTAGCTA',
510: 1:  'questions': [
510: 1:    'TTTT',
510: 1:    'AAAA',
510: 1:    'TAACG',
510: 1:    'ATTGC',
510: 1:    'CATA',
510: 1:    'GTAT',
510: 1:    'TAGCCTAGCT',
510: 1:    'GATCGATCGA',
510: 1:    'CTAGCTAGCTAGCTAGCT',
510: 1:    'ACGTAGCTAGCTAGCTA'
510: 1:  ]
510: 1:}
510: 1:Scores: 33033
510: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT']')
510: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
511: 1:BoardData {
511: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
511: 1:  'expectedAnswer': 'GATCGATCGATCGATCGATCGATCGA',
511: 1:  'history': [
511: 1:    {
511: 1:      'answer': 'AAAA',
511: 1:      'question': 'TTTT',
511: 1:      'valid': true
511: 1:    },
511: 1:    {
511: 1:      'answer': 'TTTT',
511: 1:      'question': 'AAAA',
511: 1:      'valid': true
511: 1:    },
511: 1:    {
511: 1:      'answer': 'ATTGC',
511: 1:      'question': 'TAACG',
511: 1:      'valid': true
511: 1:    },
511: 1:    {
511: 1:      'answer': 'TAACG',
511: 1:      'question': 'ATTGC',
511: 1:      'valid': true
511: 1:    },
511: 1:    {
511: 1:      'answer': 'GTAT',
511: 1:      'question': 'CATA',
511: 1:      'valid': true
511: 1:    },
511: 1:    {
511: 1:      'answer': 'CATA',
511: 1:      'question': 'GTAT',
511: 1:      'valid': true
511: 1:    },
511: 1:    {
511: 1:      'answer': 'ATCGGATCGA',
511: 1:      'question': 'TAGCCTAGCT',
511: 1:      'valid': true
511: 1:    },
511: 1:    {
511: 1:      'answer': 'CTAGCTAGCT',
511: 1:      'question': 'GATCGATCGA',
511: 1:      'valid': true
511: 1:    },
511: 1:    {
511: 1:      'answer': 'GATCGATCGATCGATCGA',
511: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
511: 1:      'valid': true
511: 1:    },
511: 1:    {
511: 1:      'answer': 'TGCATCGATCGATCGAT',
511: 1:      'question': 'ACGTAGCTAGCTAGCTA',
511: 1:      'valid': true
511: 1:    }
511: 1:  ],
511: 1:  'info': [
511: 1:    '✅f(TTTT) = AAAA',
511: 1:    '✅f(AAAA) = TTTT',
511: 1:    '✅f(TAACG) = ATTGC',
511: 1:    '✅f(ATTGC) = TAACG',
511: 1:    '✅f(CATA) = GTAT',
511: 1:    '✅f(GTAT) = CATA',
511: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
511: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
511: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
511: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
511: 1:    '❌f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = ??? != GATCGATCGATCGATCGATCGATCGA'
511: 1:  ],
511: 1:  'level': 18,
511: 1:  'nextQuestion': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
511: 1:  'questions': [
511: 1:    'TTTT',
511: 1:    'AAAA',
511: 1:    'TAACG',
511: 1:    'ATTGC',
511: 1:    'CATA',
511: 1:    'GTAT',
511: 1:    'TAGCCTAGCT',
511: 1:    'GATCGATCGA',
511: 1:    'CTAGCTAGCTAGCTAGCT',
511: 1:    'ACGTAGCTAGCTAGCTA',
511: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT'
511: 1:  ]
511: 1:}
511: 1:Scores: 33041
511: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA']')
511: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
512: 1:BoardData {
512: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
512: 1:  'expectedAnswer': 'CGATCGATCGATCGATCGATCGATCG',
512: 1:  'history': [
512: 1:    {
512: 1:      'answer': 'AAAA',
512: 1:      'question': 'TTTT',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': 'TTTT',
512: 1:      'question': 'AAAA',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': 'ATTGC',
512: 1:      'question': 'TAACG',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': 'TAACG',
512: 1:      'question': 'ATTGC',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': 'GTAT',
512: 1:      'question': 'CATA',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': 'CATA',
512: 1:      'question': 'GTAT',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': 'ATCGGATCGA',
512: 1:      'question': 'TAGCCTAGCT',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': 'CTAGCTAGCT',
512: 1:      'question': 'GATCGATCGA',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': 'GATCGATCGATCGATCGA',
512: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': 'TGCATCGATCGATCGAT',
512: 1:      'question': 'ACGTAGCTAGCTAGCTA',
512: 1:      'valid': true
512: 1:    },
512: 1:    {
512: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
512: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
512: 1:      'valid': true
512: 1:    }
512: 1:  ],
512: 1:  'info': [
512: 1:    '✅f(TTTT) = AAAA',
512: 1:    '✅f(AAAA) = TTTT',
512: 1:    '✅f(TAACG) = ATTGC',
512: 1:    '✅f(ATTGC) = TAACG',
512: 1:    '✅f(CATA) = GTAT',
512: 1:    '✅f(GTAT) = CATA',
512: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
512: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
512: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
512: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
512: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
512: 1:    '❌f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = ??? != CGATCGATCGATCGATCGATCGATCG'
512: 1:  ],
512: 1:  'level': 18,
512: 1:  'nextQuestion': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
512: 1:  'questions': [
512: 1:    'TTTT',
512: 1:    'AAAA',
512: 1:    'TAACG',
512: 1:    'ATTGC',
512: 1:    'CATA',
512: 1:    'GTAT',
512: 1:    'TAGCCTAGCT',
512: 1:    'GATCGATCGA',
512: 1:    'CTAGCTAGCTAGCTAGCT',
512: 1:    'ACGTAGCTAGCTAGCTA',
512: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
512: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC'
512: 1:  ]
512: 1:}
512: 1:Scores: 33049
512: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG']')
512: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
513: 1:BoardData {
513: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
513: 1:  'expectedAnswer': 'GATCGATCGATCGATCGATCGATCGATCG',
513: 1:  'history': [
513: 1:    {
513: 1:      'answer': 'AAAA',
513: 1:      'question': 'TTTT',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': 'TTTT',
513: 1:      'question': 'AAAA',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': 'ATTGC',
513: 1:      'question': 'TAACG',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': 'TAACG',
513: 1:      'question': 'ATTGC',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': 'GTAT',
513: 1:      'question': 'CATA',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': 'CATA',
513: 1:      'question': 'GTAT',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': 'ATCGGATCGA',
513: 1:      'question': 'TAGCCTAGCT',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': 'CTAGCTAGCT',
513: 1:      'question': 'GATCGATCGA',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': 'GATCGATCGATCGATCGA',
513: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': 'TGCATCGATCGATCGAT',
513: 1:      'question': 'ACGTAGCTAGCTAGCTA',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
513: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
513: 1:      'valid': true
513: 1:    },
513: 1:    {
513: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
513: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
513: 1:      'valid': true
513: 1:    }
513: 1:  ],
513: 1:  'info': [
513: 1:    '✅f(TTTT) = AAAA',
513: 1:    '✅f(AAAA) = TTTT',
513: 1:    '✅f(TAACG) = ATTGC',
513: 1:    '✅f(ATTGC) = TAACG',
513: 1:    '✅f(CATA) = GTAT',
513: 1:    '✅f(GTAT) = CATA',
513: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
513: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
513: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
513: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
513: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
513: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
513: 1:    '❌f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = ??? != GATCGATCGATCGATCGATCGATCGATCG'
513: 1:  ],
513: 1:  'level': 18,
513: 1:  'nextQuestion': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
513: 1:  'questions': [
513: 1:    'TTTT',
513: 1:    'AAAA',
513: 1:    'TAACG',
513: 1:    'ATTGC',
513: 1:    'CATA',
513: 1:    'GTAT',
513: 1:    'TAGCCTAGCT',
513: 1:    'GATCGATCGA',
513: 1:    'CTAGCTAGCTAGCTAGCT',
513: 1:    'ACGTAGCTAGCTAGCTA',
513: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
513: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
513: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC'
513: 1:  ]
513: 1:}
513: 1:Scores: 33057
513: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG']')
513: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
514: 1:BoardData {
514: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
514: 1:  'expectedAnswer': 'TCGATCGATCGATCGATCGATCGATCGAT',
514: 1:  'history': [
514: 1:    {
514: 1:      'answer': 'AAAA',
514: 1:      'question': 'TTTT',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': 'TTTT',
514: 1:      'question': 'AAAA',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': 'ATTGC',
514: 1:      'question': 'TAACG',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': 'TAACG',
514: 1:      'question': 'ATTGC',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': 'GTAT',
514: 1:      'question': 'CATA',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': 'CATA',
514: 1:      'question': 'GTAT',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': 'ATCGGATCGA',
514: 1:      'question': 'TAGCCTAGCT',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': 'CTAGCTAGCT',
514: 1:      'question': 'GATCGATCGA',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': 'GATCGATCGATCGATCGA',
514: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': 'TGCATCGATCGATCGAT',
514: 1:      'question': 'ACGTAGCTAGCTAGCTA',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
514: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
514: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
514: 1:      'valid': true
514: 1:    },
514: 1:    {
514: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
514: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
514: 1:      'valid': true
514: 1:    }
514: 1:  ],
514: 1:  'info': [
514: 1:    '✅f(TTTT) = AAAA',
514: 1:    '✅f(AAAA) = TTTT',
514: 1:    '✅f(TAACG) = ATTGC',
514: 1:    '✅f(ATTGC) = TAACG',
514: 1:    '✅f(CATA) = GTAT',
514: 1:    '✅f(GTAT) = CATA',
514: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
514: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
514: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
514: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
514: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
514: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
514: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
514: 1:    '❌f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = ??? != TCGATCGATCGATCGATCGATCGATCGAT'
514: 1:  ],
514: 1:  'level': 18,
514: 1:  'nextQuestion': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
514: 1:  'questions': [
514: 1:    'TTTT',
514: 1:    'AAAA',
514: 1:    'TAACG',
514: 1:    'ATTGC',
514: 1:    'CATA',
514: 1:    'GTAT',
514: 1:    'TAGCCTAGCT',
514: 1:    'GATCGATCGA',
514: 1:    'CTAGCTAGCTAGCTAGCT',
514: 1:    'ACGTAGCTAGCTAGCTA',
514: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
514: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
514: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
514: 1:    'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA'
514: 1:  ]
514: 1:}
514: 1:Scores: 33065
514: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG', 'TCGATCGATCGATCGATCGATCGATCGAT']')
514: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
515: 1:BoardData {
515: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
515: 1:  'expectedAnswer': 'CGATCGATCGATCGATCGATCGATCGATCG',
515: 1:  'history': [
515: 1:    {
515: 1:      'answer': 'AAAA',
515: 1:      'question': 'TTTT',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': 'TTTT',
515: 1:      'question': 'AAAA',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': 'ATTGC',
515: 1:      'question': 'TAACG',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': 'TAACG',
515: 1:      'question': 'ATTGC',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': 'GTAT',
515: 1:      'question': 'CATA',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': 'CATA',
515: 1:      'question': 'GTAT',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': 'ATCGGATCGA',
515: 1:      'question': 'TAGCCTAGCT',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': 'CTAGCTAGCT',
515: 1:      'question': 'GATCGATCGA',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': 'GATCGATCGATCGATCGA',
515: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': 'TGCATCGATCGATCGAT',
515: 1:      'question': 'ACGTAGCTAGCTAGCTA',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
515: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
515: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
515: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
515: 1:      'valid': true
515: 1:    },
515: 1:    {
515: 1:      'answer': 'TCGATCGATCGATCGATCGATCGATCGAT',
515: 1:      'question': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
515: 1:      'valid': true
515: 1:    }
515: 1:  ],
515: 1:  'info': [
515: 1:    '✅f(TTTT) = AAAA',
515: 1:    '✅f(AAAA) = TTTT',
515: 1:    '✅f(TAACG) = ATTGC',
515: 1:    '✅f(ATTGC) = TAACG',
515: 1:    '✅f(CATA) = GTAT',
515: 1:    '✅f(GTAT) = CATA',
515: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
515: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
515: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
515: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
515: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
515: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
515: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
515: 1:    '✅f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = TCGATCGATCGATCGATCGATCGATCGAT',
515: 1:    '❌f(GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = ??? != CGATCGATCGATCGATCGATCGATCGATCG'
515: 1:  ],
515: 1:  'level': 18,
515: 1:  'nextQuestion': 'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
515: 1:  'questions': [
515: 1:    'TTTT',
515: 1:    'AAAA',
515: 1:    'TAACG',
515: 1:    'ATTGC',
515: 1:    'CATA',
515: 1:    'GTAT',
515: 1:    'TAGCCTAGCT',
515: 1:    'GATCGATCGA',
515: 1:    'CTAGCTAGCTAGCTAGCT',
515: 1:    'ACGTAGCTAGCTAGCTA',
515: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
515: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
515: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
515: 1:    'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
515: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC'
515: 1:  ]
515: 1:}
515: 1:Scores: 33073
515: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG', 'TCGATCGATCGATCGATCGATCGATCGAT', 'CGATCGATCGATCGATCGATCGATCGATCG']')
515: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
516: 1:BoardData {
516: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
516: 1:  'expectedAnswer': 'GATCGATCGATCGATCGATCGATCGATCGA',
516: 1:  'history': [
516: 1:    {
516: 1:      'answer': 'AAAA',
516: 1:      'question': 'TTTT',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': 'TTTT',
516: 1:      'question': 'AAAA',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': 'ATTGC',
516: 1:      'question': 'TAACG',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': 'TAACG',
516: 1:      'question': 'ATTGC',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': 'GTAT',
516: 1:      'question': 'CATA',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': 'CATA',
516: 1:      'question': 'GTAT',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': 'ATCGGATCGA',
516: 1:      'question': 'TAGCCTAGCT',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': 'CTAGCTAGCT',
516: 1:      'question': 'GATCGATCGA',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': 'GATCGATCGATCGATCGA',
516: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': 'TGCATCGATCGATCGAT',
516: 1:      'question': 'ACGTAGCTAGCTAGCTA',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
516: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
516: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
516: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': 'TCGATCGATCGATCGATCGATCGATCGAT',
516: 1:      'question': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
516: 1:      'valid': true
516: 1:    },
516: 1:    {
516: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCGATCG',
516: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
516: 1:      'valid': true
516: 1:    }
516: 1:  ],
516: 1:  'info': [
516: 1:    '✅f(TTTT) = AAAA',
516: 1:    '✅f(AAAA) = TTTT',
516: 1:    '✅f(TAACG) = ATTGC',
516: 1:    '✅f(ATTGC) = TAACG',
516: 1:    '✅f(CATA) = GTAT',
516: 1:    '✅f(GTAT) = CATA',
516: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
516: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
516: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
516: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
516: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
516: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
516: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
516: 1:    '✅f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = TCGATCGATCGATCGATCGATCGATCGAT',
516: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCGATCG',
516: 1:    '❌f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT) = ??? != GATCGATCGATCGATCGATCGATCGATCGA'
516: 1:  ],
516: 1:  'level': 18,
516: 1:  'nextQuestion': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
516: 1:  'questions': [
516: 1:    'TTTT',
516: 1:    'AAAA',
516: 1:    'TAACG',
516: 1:    'ATTGC',
516: 1:    'CATA',
516: 1:    'GTAT',
516: 1:    'TAGCCTAGCT',
516: 1:    'GATCGATCGA',
516: 1:    'CTAGCTAGCTAGCTAGCT',
516: 1:    'ACGTAGCTAGCTAGCTA',
516: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
516: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
516: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
516: 1:    'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
516: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
516: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT'
516: 1:  ]
516: 1:}
516: 1:Scores: 33081
516: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG', 'TCGATCGATCGATCGATCGATCGATCGAT', 'CGATCGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCGA']')
516: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
517: 1:BoardData {
517: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
517: 1:  'expectedAnswer': 'TAGCTAGCTAGCTAGCTAG',
517: 1:  'history': [
517: 1:    {
517: 1:      'answer': 'AAAA',
517: 1:      'question': 'TTTT',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': 'TTTT',
517: 1:      'question': 'AAAA',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': 'ATTGC',
517: 1:      'question': 'TAACG',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': 'TAACG',
517: 1:      'question': 'ATTGC',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': 'GTAT',
517: 1:      'question': 'CATA',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': 'CATA',
517: 1:      'question': 'GTAT',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': 'ATCGGATCGA',
517: 1:      'question': 'TAGCCTAGCT',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': 'CTAGCTAGCT',
517: 1:      'question': 'GATCGATCGA',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': 'GATCGATCGATCGATCGA',
517: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': 'TGCATCGATCGATCGAT',
517: 1:      'question': 'ACGTAGCTAGCTAGCTA',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
517: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
517: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
517: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': 'TCGATCGATCGATCGATCGATCGATCGAT',
517: 1:      'question': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCGATCG',
517: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
517: 1:      'valid': true
517: 1:    },
517: 1:    {
517: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCGA',
517: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
517: 1:      'valid': true
517: 1:    }
517: 1:  ],
517: 1:  'info': [
517: 1:    '✅f(TTTT) = AAAA',
517: 1:    '✅f(AAAA) = TTTT',
517: 1:    '✅f(TAACG) = ATTGC',
517: 1:    '✅f(ATTGC) = TAACG',
517: 1:    '✅f(CATA) = GTAT',
517: 1:    '✅f(GTAT) = CATA',
517: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
517: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
517: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
517: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
517: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
517: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
517: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
517: 1:    '✅f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = TCGATCGATCGATCGATCGATCGATCGAT',
517: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCGATCG',
517: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGATCGA',
517: 1:    '❌f(ATCGATCGATCGATCGATC) = ??? != TAGCTAGCTAGCTAGCTAG'
517: 1:  ],
517: 1:  'level': 18,
517: 1:  'nextQuestion': 'ATCGATCGATCGATCGATC',
517: 1:  'questions': [
517: 1:    'TTTT',
517: 1:    'AAAA',
517: 1:    'TAACG',
517: 1:    'ATTGC',
517: 1:    'CATA',
517: 1:    'GTAT',
517: 1:    'TAGCCTAGCT',
517: 1:    'GATCGATCGA',
517: 1:    'CTAGCTAGCTAGCTAGCT',
517: 1:    'ACGTAGCTAGCTAGCTA',
517: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
517: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
517: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
517: 1:    'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
517: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
517: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
517: 1:    'ATCGATCGATCGATCGATC'
517: 1:  ]
517: 1:}
517: 1:Scores: 33089
517: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG', 'TCGATCGATCGATCGATCGATCGATCGAT', 'CGATCGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCGA', 'TAGCTAGCTAGCTAGCTAG']')
517: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
518: 1:BoardData {
518: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
518: 1:  'expectedAnswer': 'GTAGCTAGCTAGCTAGCT',
518: 1:  'history': [
518: 1:    {
518: 1:      'answer': 'AAAA',
518: 1:      'question': 'TTTT',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': 'TTTT',
518: 1:      'question': 'AAAA',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': 'ATTGC',
518: 1:      'question': 'TAACG',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': 'TAACG',
518: 1:      'question': 'ATTGC',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': 'GTAT',
518: 1:      'question': 'CATA',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': 'CATA',
518: 1:      'question': 'GTAT',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': 'ATCGGATCGA',
518: 1:      'question': 'TAGCCTAGCT',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': 'CTAGCTAGCT',
518: 1:      'question': 'GATCGATCGA',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': 'GATCGATCGATCGATCGA',
518: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': 'TGCATCGATCGATCGAT',
518: 1:      'question': 'ACGTAGCTAGCTAGCTA',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
518: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
518: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
518: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': 'TCGATCGATCGATCGATCGATCGATCGAT',
518: 1:      'question': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCGATCG',
518: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCGA',
518: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
518: 1:      'valid': true
518: 1:    },
518: 1:    {
518: 1:      'answer': 'TAGCTAGCTAGCTAGCTAG',
518: 1:      'question': 'ATCGATCGATCGATCGATC',
518: 1:      'valid': true
518: 1:    }
518: 1:  ],
518: 1:  'info': [
518: 1:    '✅f(TTTT) = AAAA',
518: 1:    '✅f(AAAA) = TTTT',
518: 1:    '✅f(TAACG) = ATTGC',
518: 1:    '✅f(ATTGC) = TAACG',
518: 1:    '✅f(CATA) = GTAT',
518: 1:    '✅f(GTAT) = CATA',
518: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
518: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
518: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
518: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
518: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
518: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
518: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
518: 1:    '✅f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = TCGATCGATCGATCGATCGATCGATCGAT',
518: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCGATCG',
518: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGATCGA',
518: 1:    '✅f(ATCGATCGATCGATCGATC) = TAGCTAGCTAGCTAGCTAG',
518: 1:    '❌f(CATCGATCGATCGATCGA) = ??? != GTAGCTAGCTAGCTAGCT'
518: 1:  ],
518: 1:  'level': 18,
518: 1:  'nextQuestion': 'CATCGATCGATCGATCGA',
518: 1:  'questions': [
518: 1:    'TTTT',
518: 1:    'AAAA',
518: 1:    'TAACG',
518: 1:    'ATTGC',
518: 1:    'CATA',
518: 1:    'GTAT',
518: 1:    'TAGCCTAGCT',
518: 1:    'GATCGATCGA',
518: 1:    'CTAGCTAGCTAGCTAGCT',
518: 1:    'ACGTAGCTAGCTAGCTA',
518: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
518: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
518: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
518: 1:    'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
518: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
518: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
518: 1:    'ATCGATCGATCGATCGATC',
518: 1:    'CATCGATCGATCGATCGA'
518: 1:  ]
518: 1:}
518: 1:Scores: 33097
518: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG', 'TCGATCGATCGATCGATCGATCGATCGAT', 'CGATCGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCGA', 'TAGCTAGCTAGCTAGCTAG', 'GTAGCTAGCTAGCTAGCT']')
518: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
519: 1:BoardData {
519: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
519: 1:  'expectedAnswer': 'CTAGCTAGCTAGCTAGCTAGCTA',
519: 1:  'history': [
519: 1:    {
519: 1:      'answer': 'AAAA',
519: 1:      'question': 'TTTT',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': 'TTTT',
519: 1:      'question': 'AAAA',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': 'ATTGC',
519: 1:      'question': 'TAACG',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': 'TAACG',
519: 1:      'question': 'ATTGC',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': 'GTAT',
519: 1:      'question': 'CATA',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': 'CATA',
519: 1:      'question': 'GTAT',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': 'ATCGGATCGA',
519: 1:      'question': 'TAGCCTAGCT',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': 'CTAGCTAGCT',
519: 1:      'question': 'GATCGATCGA',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': 'GATCGATCGATCGATCGA',
519: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': 'TGCATCGATCGATCGAT',
519: 1:      'question': 'ACGTAGCTAGCTAGCTA',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
519: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
519: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
519: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': 'TCGATCGATCGATCGATCGATCGATCGAT',
519: 1:      'question': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCGATCG',
519: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCGA',
519: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': 'TAGCTAGCTAGCTAGCTAG',
519: 1:      'question': 'ATCGATCGATCGATCGATC',
519: 1:      'valid': true
519: 1:    },
519: 1:    {
519: 1:      'answer': 'GTAGCTAGCTAGCTAGCT',
519: 1:      'question': 'CATCGATCGATCGATCGA',
519: 1:      'valid': true
519: 1:    }
519: 1:  ],
519: 1:  'info': [
519: 1:    '✅f(TTTT) = AAAA',
519: 1:    '✅f(AAAA) = TTTT',
519: 1:    '✅f(TAACG) = ATTGC',
519: 1:    '✅f(ATTGC) = TAACG',
519: 1:    '✅f(CATA) = GTAT',
519: 1:    '✅f(GTAT) = CATA',
519: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
519: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
519: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
519: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
519: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
519: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
519: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
519: 1:    '✅f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = TCGATCGATCGATCGATCGATCGATCGAT',
519: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCGATCG',
519: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGATCGA',
519: 1:    '✅f(ATCGATCGATCGATCGATC) = TAGCTAGCTAGCTAGCTAG',
519: 1:    '✅f(CATCGATCGATCGATCGA) = GTAGCTAGCTAGCTAGCT',
519: 1:    '❌f(GATCGATCGATCGATCGATCGAT) = ??? != CTAGCTAGCTAGCTAGCTAGCTA'
519: 1:  ],
519: 1:  'level': 18,
519: 1:  'nextQuestion': 'GATCGATCGATCGATCGATCGAT',
519: 1:  'questions': [
519: 1:    'TTTT',
519: 1:    'AAAA',
519: 1:    'TAACG',
519: 1:    'ATTGC',
519: 1:    'CATA',
519: 1:    'GTAT',
519: 1:    'TAGCCTAGCT',
519: 1:    'GATCGATCGA',
519: 1:    'CTAGCTAGCTAGCTAGCT',
519: 1:    'ACGTAGCTAGCTAGCTA',
519: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
519: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
519: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
519: 1:    'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
519: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
519: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
519: 1:    'ATCGATCGATCGATCGATC',
519: 1:    'CATCGATCGATCGATCGA',
519: 1:    'GATCGATCGATCGATCGATCGAT'
519: 1:  ]
519: 1:}
519: 1:Scores: 33105
519: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG', 'TCGATCGATCGATCGATCGATCGATCGAT', 'CGATCGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCGA', 'TAGCTAGCTAGCTAGCTAG', 'GTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTA']')
519: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
520: 1:BoardData {
520: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
520: 1:  'expectedAnswer': 'AGCTAGCTAGCTAGCTAGCT',
520: 1:  'history': [
520: 1:    {
520: 1:      'answer': 'AAAA',
520: 1:      'question': 'TTTT',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': 'TTTT',
520: 1:      'question': 'AAAA',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': 'ATTGC',
520: 1:      'question': 'TAACG',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': 'TAACG',
520: 1:      'question': 'ATTGC',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': 'GTAT',
520: 1:      'question': 'CATA',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': 'CATA',
520: 1:      'question': 'GTAT',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': 'ATCGGATCGA',
520: 1:      'question': 'TAGCCTAGCT',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': 'CTAGCTAGCT',
520: 1:      'question': 'GATCGATCGA',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': 'GATCGATCGATCGATCGA',
520: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': 'TGCATCGATCGATCGAT',
520: 1:      'question': 'ACGTAGCTAGCTAGCTA',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
520: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
520: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
520: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': 'TCGATCGATCGATCGATCGATCGATCGAT',
520: 1:      'question': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCGATCG',
520: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCGA',
520: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': 'TAGCTAGCTAGCTAGCTAG',
520: 1:      'question': 'ATCGATCGATCGATCGATC',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': 'GTAGCTAGCTAGCTAGCT',
520: 1:      'question': 'CATCGATCGATCGATCGA',
520: 1:      'valid': true
520: 1:    },
520: 1:    {
520: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTA',
520: 1:      'question': 'GATCGATCGATCGATCGATCGAT',
520: 1:      'valid': true
520: 1:    }
520: 1:  ],
520: 1:  'info': [
520: 1:    '✅f(TTTT) = AAAA',
520: 1:    '✅f(AAAA) = TTTT',
520: 1:    '✅f(TAACG) = ATTGC',
520: 1:    '✅f(ATTGC) = TAACG',
520: 1:    '✅f(CATA) = GTAT',
520: 1:    '✅f(GTAT) = CATA',
520: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
520: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
520: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
520: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
520: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
520: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
520: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
520: 1:    '✅f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = TCGATCGATCGATCGATCGATCGATCGAT',
520: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCGATCG',
520: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGATCGA',
520: 1:    '✅f(ATCGATCGATCGATCGATC) = TAGCTAGCTAGCTAGCTAG',
520: 1:    '✅f(CATCGATCGATCGATCGA) = GTAGCTAGCTAGCTAGCT',
520: 1:    '✅f(GATCGATCGATCGATCGATCGAT) = CTAGCTAGCTAGCTAGCTAGCTA',
520: 1:    '❌f(TCGATCGATCGATCGATCGA) = ??? != AGCTAGCTAGCTAGCTAGCT'
520: 1:  ],
520: 1:  'level': 18,
520: 1:  'nextQuestion': 'TCGATCGATCGATCGATCGA',
520: 1:  'questions': [
520: 1:    'TTTT',
520: 1:    'AAAA',
520: 1:    'TAACG',
520: 1:    'ATTGC',
520: 1:    'CATA',
520: 1:    'GTAT',
520: 1:    'TAGCCTAGCT',
520: 1:    'GATCGATCGA',
520: 1:    'CTAGCTAGCTAGCTAGCT',
520: 1:    'ACGTAGCTAGCTAGCTA',
520: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
520: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
520: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
520: 1:    'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
520: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
520: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
520: 1:    'ATCGATCGATCGATCGATC',
520: 1:    'CATCGATCGATCGATCGA',
520: 1:    'GATCGATCGATCGATCGATCGAT',
520: 1:    'TCGATCGATCGATCGATCGA'
520: 1:  ]
520: 1:}
520: 1:Scores: 33113
520: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG', 'TCGATCGATCGATCGATCGATCGATCGAT', 'CGATCGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCGA', 'TAGCTAGCTAGCTAGCTAG', 'GTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTA', 'AGCTAGCTAGCTAGCTAGCT']')
520: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
521: 1:BoardData {
521: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
521: 1:  'expectedAnswer': 'CTAGCTAGCTAGCTAGCTAGCTAG',
521: 1:  'history': [
521: 1:    {
521: 1:      'answer': 'AAAA',
521: 1:      'question': 'TTTT',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': 'TTTT',
521: 1:      'question': 'AAAA',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': 'ATTGC',
521: 1:      'question': 'TAACG',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': 'TAACG',
521: 1:      'question': 'ATTGC',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': 'GTAT',
521: 1:      'question': 'CATA',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': 'CATA',
521: 1:      'question': 'GTAT',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': 'ATCGGATCGA',
521: 1:      'question': 'TAGCCTAGCT',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': 'CTAGCTAGCT',
521: 1:      'question': 'GATCGATCGA',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': 'GATCGATCGATCGATCGA',
521: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': 'TGCATCGATCGATCGAT',
521: 1:      'question': 'ACGTAGCTAGCTAGCTA',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
521: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
521: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
521: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': 'TCGATCGATCGATCGATCGATCGATCGAT',
521: 1:      'question': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCGATCG',
521: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCGA',
521: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': 'TAGCTAGCTAGCTAGCTAG',
521: 1:      'question': 'ATCGATCGATCGATCGATC',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': 'GTAGCTAGCTAGCTAGCT',
521: 1:      'question': 'CATCGATCGATCGATCGA',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTA',
521: 1:      'question': 'GATCGATCGATCGATCGATCGAT',
521: 1:      'valid': true
521: 1:    },
521: 1:    {
521: 1:      'answer': 'AGCTAGCTAGCTAGCTAGCT',
521: 1:      'question': 'TCGATCGATCGATCGATCGA',
521: 1:      'valid': true
521: 1:    }
521: 1:  ],
521: 1:  'info': [
521: 1:    '✅f(TTTT) = AAAA',
521: 1:    '✅f(AAAA) = TTTT',
521: 1:    '✅f(TAACG) = ATTGC',
521: 1:    '✅f(ATTGC) = TAACG',
521: 1:    '✅f(CATA) = GTAT',
521: 1:    '✅f(GTAT) = CATA',
521: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
521: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
521: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
521: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
521: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
521: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
521: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
521: 1:    '✅f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = TCGATCGATCGATCGATCGATCGATCGAT',
521: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCGATCG',
521: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGATCGA',
521: 1:    '✅f(ATCGATCGATCGATCGATC) = TAGCTAGCTAGCTAGCTAG',
521: 1:    '✅f(CATCGATCGATCGATCGA) = GTAGCTAGCTAGCTAGCT',
521: 1:    '✅f(GATCGATCGATCGATCGATCGAT) = CTAGCTAGCTAGCTAGCTAGCTA',
521: 1:    '✅f(TCGATCGATCGATCGATCGA) = AGCTAGCTAGCTAGCTAGCT',
521: 1:    '❌f(GATCGATCGATCGATCGATCGATC) = ??? != CTAGCTAGCTAGCTAGCTAGCTAG'
521: 1:  ],
521: 1:  'level': 18,
521: 1:  'nextQuestion': 'GATCGATCGATCGATCGATCGATC',
521: 1:  'questions': [
521: 1:    'TTTT',
521: 1:    'AAAA',
521: 1:    'TAACG',
521: 1:    'ATTGC',
521: 1:    'CATA',
521: 1:    'GTAT',
521: 1:    'TAGCCTAGCT',
521: 1:    'GATCGATCGA',
521: 1:    'CTAGCTAGCTAGCTAGCT',
521: 1:    'ACGTAGCTAGCTAGCTA',
521: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
521: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
521: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
521: 1:    'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
521: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
521: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
521: 1:    'ATCGATCGATCGATCGATC',
521: 1:    'CATCGATCGATCGATCGA',
521: 1:    'GATCGATCGATCGATCGATCGAT',
521: 1:    'TCGATCGATCGATCGATCGA',
521: 1:    'GATCGATCGATCGATCGATCGATC'
521: 1:  ]
521: 1:}
521: 1:Scores: 33121
521: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG', 'TCGATCGATCGATCGATCGATCGATCGAT', 'CGATCGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCGA', 'TAGCTAGCTAGCTAGCTAG', 'GTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTA', 'AGCTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTAG']')
521: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
522: 1:BoardData {
522: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
522: 1:  'expectedAnswer': 'GATCGATCGATCGATCGATC',
522: 1:  'history': [
522: 1:    {
522: 1:      'answer': 'AAAA',
522: 1:      'question': 'TTTT',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': 'TTTT',
522: 1:      'question': 'AAAA',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': 'ATTGC',
522: 1:      'question': 'TAACG',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': 'TAACG',
522: 1:      'question': 'ATTGC',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': 'GTAT',
522: 1:      'question': 'CATA',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': 'CATA',
522: 1:      'question': 'GTAT',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': 'ATCGGATCGA',
522: 1:      'question': 'TAGCCTAGCT',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': 'CTAGCTAGCT',
522: 1:      'question': 'GATCGATCGA',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': 'GATCGATCGATCGATCGA',
522: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': 'TGCATCGATCGATCGAT',
522: 1:      'question': 'ACGTAGCTAGCTAGCTA',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
522: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
522: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
522: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': 'TCGATCGATCGATCGATCGATCGATCGAT',
522: 1:      'question': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCGATCG',
522: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCGA',
522: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': 'TAGCTAGCTAGCTAGCTAG',
522: 1:      'question': 'ATCGATCGATCGATCGATC',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': 'GTAGCTAGCTAGCTAGCT',
522: 1:      'question': 'CATCGATCGATCGATCGA',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTA',
522: 1:      'question': 'GATCGATCGATCGATCGATCGAT',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': 'AGCTAGCTAGCTAGCTAGCT',
522: 1:      'question': 'TCGATCGATCGATCGATCGA',
522: 1:      'valid': true
522: 1:    },
522: 1:    {
522: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTAG',
522: 1:      'question': 'GATCGATCGATCGATCGATCGATC',
522: 1:      'valid': true
522: 1:    }
522: 1:  ],
522: 1:  'info': [
522: 1:    '✅f(TTTT) = AAAA',
522: 1:    '✅f(AAAA) = TTTT',
522: 1:    '✅f(TAACG) = ATTGC',
522: 1:    '✅f(ATTGC) = TAACG',
522: 1:    '✅f(CATA) = GTAT',
522: 1:    '✅f(GTAT) = CATA',
522: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
522: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
522: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
522: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
522: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
522: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
522: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
522: 1:    '✅f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = TCGATCGATCGATCGATCGATCGATCGAT',
522: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCGATCG',
522: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGATCGA',
522: 1:    '✅f(ATCGATCGATCGATCGATC) = TAGCTAGCTAGCTAGCTAG',
522: 1:    '✅f(CATCGATCGATCGATCGA) = GTAGCTAGCTAGCTAGCT',
522: 1:    '✅f(GATCGATCGATCGATCGATCGAT) = CTAGCTAGCTAGCTAGCTAGCTA',
522: 1:    '✅f(TCGATCGATCGATCGATCGA) = AGCTAGCTAGCTAGCTAGCT',
522: 1:    '✅f(GATCGATCGATCGATCGATCGATC) = CTAGCTAGCTAGCTAGCTAGCTAG',
522: 1:    '❌f(CTAGCTAGCTAGCTAGCTAG) = ??? != GATCGATCGATCGATCGATC'
522: 1:  ],
522: 1:  'level': 18,
522: 1:  'nextQuestion': 'CTAGCTAGCTAGCTAGCTAG',
522: 1:  'questions': [
522: 1:    'TTTT',
522: 1:    'AAAA',
522: 1:    'TAACG',
522: 1:    'ATTGC',
522: 1:    'CATA',
522: 1:    'GTAT',
522: 1:    'TAGCCTAGCT',
522: 1:    'GATCGATCGA',
522: 1:    'CTAGCTAGCTAGCTAGCT',
522: 1:    'ACGTAGCTAGCTAGCTA',
522: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
522: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
522: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
522: 1:    'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
522: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
522: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
522: 1:    'ATCGATCGATCGATCGATC',
522: 1:    'CATCGATCGATCGATCGA',
522: 1:    'GATCGATCGATCGATCGATCGAT',
522: 1:    'TCGATCGATCGATCGATCGA',
522: 1:    'GATCGATCGATCGATCGATCGATC',
522: 1:    'CTAGCTAGCTAGCTAGCTAG'
522: 1:  ]
522: 1:}
522: 1:Scores: 33129
522: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG', 'TCGATCGATCGATCGATCGATCGATCGAT', 'CGATCGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCGA', 'TAGCTAGCTAGCTAGCTAG', 'GTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTA', 'AGCTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTAG', 'GATCGATCGATCGATCGATC']')
522: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
523: 1:BoardData {
523: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
523: 1:  'expectedAnswer': 'TGCATGCATGCATGCATG',
523: 1:  'history': [
523: 1:    {
523: 1:      'answer': 'AAAA',
523: 1:      'question': 'TTTT',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': 'TTTT',
523: 1:      'question': 'AAAA',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': 'ATTGC',
523: 1:      'question': 'TAACG',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': 'TAACG',
523: 1:      'question': 'ATTGC',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': 'GTAT',
523: 1:      'question': 'CATA',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': 'CATA',
523: 1:      'question': 'GTAT',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': 'ATCGGATCGA',
523: 1:      'question': 'TAGCCTAGCT',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': 'CTAGCTAGCT',
523: 1:      'question': 'GATCGATCGA',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': 'GATCGATCGATCGATCGA',
523: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': 'TGCATCGATCGATCGAT',
523: 1:      'question': 'ACGTAGCTAGCTAGCTA',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
523: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
523: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
523: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': 'TCGATCGATCGATCGATCGATCGATCGAT',
523: 1:      'question': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCGATCG',
523: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCGA',
523: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': 'TAGCTAGCTAGCTAGCTAG',
523: 1:      'question': 'ATCGATCGATCGATCGATC',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': 'GTAGCTAGCTAGCTAGCT',
523: 1:      'question': 'CATCGATCGATCGATCGA',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTA',
523: 1:      'question': 'GATCGATCGATCGATCGATCGAT',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': 'AGCTAGCTAGCTAGCTAGCT',
523: 1:      'question': 'TCGATCGATCGATCGATCGA',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTAG',
523: 1:      'question': 'GATCGATCGATCGATCGATCGATC',
523: 1:      'valid': true
523: 1:    },
523: 1:    {
523: 1:      'answer': 'GATCGATCGATCGATCGATC',
523: 1:      'question': 'CTAGCTAGCTAGCTAGCTAG',
523: 1:      'valid': true
523: 1:    }
523: 1:  ],
523: 1:  'info': [
523: 1:    '✅f(TTTT) = AAAA',
523: 1:    '✅f(AAAA) = TTTT',
523: 1:    '✅f(TAACG) = ATTGC',
523: 1:    '✅f(ATTGC) = TAACG',
523: 1:    '✅f(CATA) = GTAT',
523: 1:    '✅f(GTAT) = CATA',
523: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
523: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
523: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
523: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
523: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
523: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
523: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
523: 1:    '✅f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = TCGATCGATCGATCGATCGATCGATCGAT',
523: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCGATCG',
523: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGATCGA',
523: 1:    '✅f(ATCGATCGATCGATCGATC) = TAGCTAGCTAGCTAGCTAG',
523: 1:    '✅f(CATCGATCGATCGATCGA) = GTAGCTAGCTAGCTAGCT',
523: 1:    '✅f(GATCGATCGATCGATCGATCGAT) = CTAGCTAGCTAGCTAGCTAGCTA',
523: 1:    '✅f(TCGATCGATCGATCGATCGA) = AGCTAGCTAGCTAGCTAGCT',
523: 1:    '✅f(GATCGATCGATCGATCGATCGATC) = CTAGCTAGCTAGCTAGCTAGCTAG',
523: 1:    '✅f(CTAGCTAGCTAGCTAGCTAG) = GATCGATCGATCGATCGATC',
523: 1:    '❌f(ACGTACGTACGTACGTAC) = ??? != TGCATGCATGCATGCATG'
523: 1:  ],
523: 1:  'level': 18,
523: 1:  'nextQuestion': 'ACGTACGTACGTACGTAC',
523: 1:  'questions': [
523: 1:    'TTTT',
523: 1:    'AAAA',
523: 1:    'TAACG',
523: 1:    'ATTGC',
523: 1:    'CATA',
523: 1:    'GTAT',
523: 1:    'TAGCCTAGCT',
523: 1:    'GATCGATCGA',
523: 1:    'CTAGCTAGCTAGCTAGCT',
523: 1:    'ACGTAGCTAGCTAGCTA',
523: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
523: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
523: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
523: 1:    'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
523: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
523: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
523: 1:    'ATCGATCGATCGATCGATC',
523: 1:    'CATCGATCGATCGATCGA',
523: 1:    'GATCGATCGATCGATCGATCGAT',
523: 1:    'TCGATCGATCGATCGATCGA',
523: 1:    'GATCGATCGATCGATCGATCGATC',
523: 1:    'CTAGCTAGCTAGCTAGCTAG',
523: 1:    'ACGTACGTACGTACGTAC'
523: 1:  ]
523: 1:}
523: 1:Scores: 33137
523: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG', 'TCGATCGATCGATCGATCGATCGATCGAT', 'CGATCGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCGA', 'TAGCTAGCTAGCTAGCTAG', 'GTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTA', 'AGCTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTAG', 'GATCGATCGATCGATCGATC', 'TGCATGCATGCATGCATG']')
523: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
524: 1:BoardData {
524: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
524: 1:  'expectedAnswer': 'GTGCTGCTGCTGCTGCT',
524: 1:  'history': [
524: 1:    {
524: 1:      'answer': 'AAAA',
524: 1:      'question': 'TTTT',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': 'TTTT',
524: 1:      'question': 'AAAA',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': 'ATTGC',
524: 1:      'question': 'TAACG',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': 'TAACG',
524: 1:      'question': 'ATTGC',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': 'GTAT',
524: 1:      'question': 'CATA',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': 'CATA',
524: 1:      'question': 'GTAT',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': 'ATCGGATCGA',
524: 1:      'question': 'TAGCCTAGCT',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': 'CTAGCTAGCT',
524: 1:      'question': 'GATCGATCGA',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': 'GATCGATCGATCGATCGA',
524: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': 'TGCATCGATCGATCGAT',
524: 1:      'question': 'ACGTAGCTAGCTAGCTA',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
524: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
524: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
524: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': 'TCGATCGATCGATCGATCGATCGATCGAT',
524: 1:      'question': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCGATCG',
524: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCGA',
524: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': 'TAGCTAGCTAGCTAGCTAG',
524: 1:      'question': 'ATCGATCGATCGATCGATC',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': 'GTAGCTAGCTAGCTAGCT',
524: 1:      'question': 'CATCGATCGATCGATCGA',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTA',
524: 1:      'question': 'GATCGATCGATCGATCGATCGAT',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': 'AGCTAGCTAGCTAGCTAGCT',
524: 1:      'question': 'TCGATCGATCGATCGATCGA',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTAG',
524: 1:      'question': 'GATCGATCGATCGATCGATCGATC',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': 'GATCGATCGATCGATCGATC',
524: 1:      'question': 'CTAGCTAGCTAGCTAGCTAG',
524: 1:      'valid': true
524: 1:    },
524: 1:    {
524: 1:      'answer': 'TGCATGCATGCATGCATG',
524: 1:      'question': 'ACGTACGTACGTACGTAC',
524: 1:      'valid': true
524: 1:    }
524: 1:  ],
524: 1:  'info': [
524: 1:    '✅f(TTTT) = AAAA',
524: 1:    '✅f(AAAA) = TTTT',
524: 1:    '✅f(TAACG) = ATTGC',
524: 1:    '✅f(ATTGC) = TAACG',
524: 1:    '✅f(CATA) = GTAT',
524: 1:    '✅f(GTAT) = CATA',
524: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
524: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
524: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
524: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
524: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
524: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
524: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
524: 1:    '✅f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = TCGATCGATCGATCGATCGATCGATCGAT',
524: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCGATCG',
524: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGATCGA',
524: 1:    '✅f(ATCGATCGATCGATCGATC) = TAGCTAGCTAGCTAGCTAG',
524: 1:    '✅f(CATCGATCGATCGATCGA) = GTAGCTAGCTAGCTAGCT',
524: 1:    '✅f(GATCGATCGATCGATCGATCGAT) = CTAGCTAGCTAGCTAGCTAGCTA',
524: 1:    '✅f(TCGATCGATCGATCGATCGA) = AGCTAGCTAGCTAGCTAGCT',
524: 1:    '✅f(GATCGATCGATCGATCGATCGATC) = CTAGCTAGCTAGCTAGCTAGCTAG',
524: 1:    '✅f(CTAGCTAGCTAGCTAGCTAG) = GATCGATCGATCGATCGATC',
524: 1:    '✅f(ACGTACGTACGTACGTAC) = TGCATGCATGCATGCATG',
524: 1:    '❌f(CACGACGACGACGACGA) = ??? != GTGCTGCTGCTGCTGCT'
524: 1:  ],
524: 1:  'level': 18,
524: 1:  'nextQuestion': 'CACGACGACGACGACGA',
524: 1:  'questions': [
524: 1:    'TTTT',
524: 1:    'AAAA',
524: 1:    'TAACG',
524: 1:    'ATTGC',
524: 1:    'CATA',
524: 1:    'GTAT',
524: 1:    'TAGCCTAGCT',
524: 1:    'GATCGATCGA',
524: 1:    'CTAGCTAGCTAGCTAGCT',
524: 1:    'ACGTAGCTAGCTAGCTA',
524: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
524: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
524: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
524: 1:    'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
524: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
524: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
524: 1:    'ATCGATCGATCGATCGATC',
524: 1:    'CATCGATCGATCGATCGA',
524: 1:    'GATCGATCGATCGATCGATCGAT',
524: 1:    'TCGATCGATCGATCGATCGA',
524: 1:    'GATCGATCGATCGATCGATCGATC',
524: 1:    'CTAGCTAGCTAGCTAGCTAG',
524: 1:    'ACGTACGTACGTACGTAC',
524: 1:    'CACGACGACGACGACGA'
524: 1:  ]
524: 1:}
524: 1:Scores: 33145
524: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG', 'TCGATCGATCGATCGATCGATCGATCGAT', 'CGATCGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCGA', 'TAGCTAGCTAGCTAGCTAG', 'GTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTA', 'AGCTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTAG', 'GATCGATCGATCGATCGATC', 'TGCATGCATGCATGCATG', 'GTGCTGCTGCTGCTGCT']')
524: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
525: 1:BoardData {
525: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
525: 1:  'expectedAnswer': 'CAGTCAGTCAGTCAGT',
525: 1:  'history': [
525: 1:    {
525: 1:      'answer': 'AAAA',
525: 1:      'question': 'TTTT',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': 'TTTT',
525: 1:      'question': 'AAAA',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': 'ATTGC',
525: 1:      'question': 'TAACG',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': 'TAACG',
525: 1:      'question': 'ATTGC',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': 'GTAT',
525: 1:      'question': 'CATA',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': 'CATA',
525: 1:      'question': 'GTAT',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': 'ATCGGATCGA',
525: 1:      'question': 'TAGCCTAGCT',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': 'CTAGCTAGCT',
525: 1:      'question': 'GATCGATCGA',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': 'GATCGATCGATCGATCGA',
525: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': 'TGCATCGATCGATCGAT',
525: 1:      'question': 'ACGTAGCTAGCTAGCTA',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
525: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
525: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
525: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': 'TCGATCGATCGATCGATCGATCGATCGAT',
525: 1:      'question': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCGATCG',
525: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCGA',
525: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': 'TAGCTAGCTAGCTAGCTAG',
525: 1:      'question': 'ATCGATCGATCGATCGATC',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': 'GTAGCTAGCTAGCTAGCT',
525: 1:      'question': 'CATCGATCGATCGATCGA',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTA',
525: 1:      'question': 'GATCGATCGATCGATCGATCGAT',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': 'AGCTAGCTAGCTAGCTAGCT',
525: 1:      'question': 'TCGATCGATCGATCGATCGA',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTAG',
525: 1:      'question': 'GATCGATCGATCGATCGATCGATC',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': 'GATCGATCGATCGATCGATC',
525: 1:      'question': 'CTAGCTAGCTAGCTAGCTAG',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': 'TGCATGCATGCATGCATG',
525: 1:      'question': 'ACGTACGTACGTACGTAC',
525: 1:      'valid': true
525: 1:    },
525: 1:    {
525: 1:      'answer': 'GTGCTGCTGCTGCTGCT',
525: 1:      'question': 'CACGACGACGACGACGA',
525: 1:      'valid': true
525: 1:    }
525: 1:  ],
525: 1:  'info': [
525: 1:    '✅f(TTTT) = AAAA',
525: 1:    '✅f(AAAA) = TTTT',
525: 1:    '✅f(TAACG) = ATTGC',
525: 1:    '✅f(ATTGC) = TAACG',
525: 1:    '✅f(CATA) = GTAT',
525: 1:    '✅f(GTAT) = CATA',
525: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
525: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
525: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
525: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
525: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
525: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
525: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
525: 1:    '✅f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = TCGATCGATCGATCGATCGATCGATCGAT',
525: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCGATCG',
525: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGATCGA',
525: 1:    '✅f(ATCGATCGATCGATCGATC) = TAGCTAGCTAGCTAGCTAG',
525: 1:    '✅f(CATCGATCGATCGATCGA) = GTAGCTAGCTAGCTAGCT',
525: 1:    '✅f(GATCGATCGATCGATCGATCGAT) = CTAGCTAGCTAGCTAGCTAGCTA',
525: 1:    '✅f(TCGATCGATCGATCGATCGA) = AGCTAGCTAGCTAGCTAGCT',
525: 1:    '✅f(GATCGATCGATCGATCGATCGATC) = CTAGCTAGCTAGCTAGCTAGCTAG',
525: 1:    '✅f(CTAGCTAGCTAGCTAGCTAG) = GATCGATCGATCGATCGATC',
525: 1:    '✅f(ACGTACGTACGTACGTAC) = TGCATGCATGCATGCATG',
525: 1:    '✅f(CACGACGACGACGACGA) = GTGCTGCTGCTGCTGCT',
525: 1:    '❌f(GTCAGTCAGTCAGTCA) = ??? != CAGTCAGTCAGTCAGT'
525: 1:  ],
525: 1:  'level': 18,
525: 1:  'nextQuestion': 'GTCAGTCAGTCAGTCA',
525: 1:  'questions': [
525: 1:    'TTTT',
525: 1:    'AAAA',
525: 1:    'TAACG',
525: 1:    'ATTGC',
525: 1:    'CATA',
525: 1:    'GTAT',
525: 1:    'TAGCCTAGCT',
525: 1:    'GATCGATCGA',
525: 1:    'CTAGCTAGCTAGCTAGCT',
525: 1:    'ACGTAGCTAGCTAGCTA',
525: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
525: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
525: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
525: 1:    'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
525: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
525: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
525: 1:    'ATCGATCGATCGATCGATC',
525: 1:    'CATCGATCGATCGATCGA',
525: 1:    'GATCGATCGATCGATCGATCGAT',
525: 1:    'TCGATCGATCGATCGATCGA',
525: 1:    'GATCGATCGATCGATCGATCGATC',
525: 1:    'CTAGCTAGCTAGCTAGCTAG',
525: 1:    'ACGTACGTACGTACGTAC',
525: 1:    'CACGACGACGACGACGA',
525: 1:    'GTCAGTCAGTCAGTCA'
525: 1:  ]
525: 1:}
525: 1:Scores: 33153
525: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG', 'TCGATCGATCGATCGATCGATCGATCGAT', 'CGATCGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCGA', 'TAGCTAGCTAGCTAGCTAG', 'GTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTA', 'AGCTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTAG', 'GATCGATCGATCGATCGATC', 'TGCATGCATGCATGCATG', 'GTGCTGCTGCTGCTGCT', 'CAGTCAGTCAGTCAGT']')
525: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
526: 1:BoardData {
526: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
526: 1:  'expectedAnswer': 'GATCGATCGATCGATCG',
526: 1:  'history': [
526: 1:    {
526: 1:      'answer': 'AAAA',
526: 1:      'question': 'TTTT',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': 'TTTT',
526: 1:      'question': 'AAAA',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': 'ATTGC',
526: 1:      'question': 'TAACG',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': 'TAACG',
526: 1:      'question': 'ATTGC',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': 'GTAT',
526: 1:      'question': 'CATA',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': 'CATA',
526: 1:      'question': 'GTAT',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': 'ATCGGATCGA',
526: 1:      'question': 'TAGCCTAGCT',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': 'CTAGCTAGCT',
526: 1:      'question': 'GATCGATCGA',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': 'GATCGATCGATCGATCGA',
526: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': 'TGCATCGATCGATCGAT',
526: 1:      'question': 'ACGTAGCTAGCTAGCTA',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
526: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
526: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
526: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': 'TCGATCGATCGATCGATCGATCGATCGAT',
526: 1:      'question': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCGATCG',
526: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCGA',
526: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': 'TAGCTAGCTAGCTAGCTAG',
526: 1:      'question': 'ATCGATCGATCGATCGATC',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': 'GTAGCTAGCTAGCTAGCT',
526: 1:      'question': 'CATCGATCGATCGATCGA',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTA',
526: 1:      'question': 'GATCGATCGATCGATCGATCGAT',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': 'AGCTAGCTAGCTAGCTAGCT',
526: 1:      'question': 'TCGATCGATCGATCGATCGA',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTAG',
526: 1:      'question': 'GATCGATCGATCGATCGATCGATC',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': 'GATCGATCGATCGATCGATC',
526: 1:      'question': 'CTAGCTAGCTAGCTAGCTAG',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': 'TGCATGCATGCATGCATG',
526: 1:      'question': 'ACGTACGTACGTACGTAC',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': 'GTGCTGCTGCTGCTGCT',
526: 1:      'question': 'CACGACGACGACGACGA',
526: 1:      'valid': true
526: 1:    },
526: 1:    {
526: 1:      'answer': 'CAGTCAGTCAGTCAGT',
526: 1:      'question': 'GTCAGTCAGTCAGTCA',
526: 1:      'valid': true
526: 1:    }
526: 1:  ],
526: 1:  'info': [
526: 1:    '✅f(TTTT) = AAAA',
526: 1:    '✅f(AAAA) = TTTT',
526: 1:    '✅f(TAACG) = ATTGC',
526: 1:    '✅f(ATTGC) = TAACG',
526: 1:    '✅f(CATA) = GTAT',
526: 1:    '✅f(GTAT) = CATA',
526: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
526: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
526: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
526: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
526: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
526: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
526: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
526: 1:    '✅f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = TCGATCGATCGATCGATCGATCGATCGAT',
526: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCGATCG',
526: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGATCGA',
526: 1:    '✅f(ATCGATCGATCGATCGATC) = TAGCTAGCTAGCTAGCTAG',
526: 1:    '✅f(CATCGATCGATCGATCGA) = GTAGCTAGCTAGCTAGCT',
526: 1:    '✅f(GATCGATCGATCGATCGATCGAT) = CTAGCTAGCTAGCTAGCTAGCTA',
526: 1:    '✅f(TCGATCGATCGATCGATCGA) = AGCTAGCTAGCTAGCTAGCT',
526: 1:    '✅f(GATCGATCGATCGATCGATCGATC) = CTAGCTAGCTAGCTAGCTAGCTAG',
526: 1:    '✅f(CTAGCTAGCTAGCTAGCTAG) = GATCGATCGATCGATCGATC',
526: 1:    '✅f(ACGTACGTACGTACGTAC) = TGCATGCATGCATGCATG',
526: 1:    '✅f(CACGACGACGACGACGA) = GTGCTGCTGCTGCTGCT',
526: 1:    '✅f(GTCAGTCAGTCAGTCA) = CAGTCAGTCAGTCAGT',
526: 1:    '❌f(CTAGCTAGCTAGCTAGC) = ??? != GATCGATCGATCGATCG'
526: 1:  ],
526: 1:  'level': 18,
526: 1:  'nextQuestion': 'CTAGCTAGCTAGCTAGC',
526: 1:  'questions': [
526: 1:    'TTTT',
526: 1:    'AAAA',
526: 1:    'TAACG',
526: 1:    'ATTGC',
526: 1:    'CATA',
526: 1:    'GTAT',
526: 1:    'TAGCCTAGCT',
526: 1:    'GATCGATCGA',
526: 1:    'CTAGCTAGCTAGCTAGCT',
526: 1:    'ACGTAGCTAGCTAGCTA',
526: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
526: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
526: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
526: 1:    'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
526: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
526: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
526: 1:    'ATCGATCGATCGATCGATC',
526: 1:    'CATCGATCGATCGATCGA',
526: 1:    'GATCGATCGATCGATCGATCGAT',
526: 1:    'TCGATCGATCGATCGATCGA',
526: 1:    'GATCGATCGATCGATCGATCGATC',
526: 1:    'CTAGCTAGCTAGCTAGCTAG',
526: 1:    'ACGTACGTACGTACGTAC',
526: 1:    'CACGACGACGACGACGA',
526: 1:    'GTCAGTCAGTCAGTCA',
526: 1:    'CTAGCTAGCTAGCTAGC'
526: 1:  ]
526: 1:}
526: 1:Scores: 33161
526: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG', 'TCGATCGATCGATCGATCGATCGATCGAT', 'CGATCGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCGA', 'TAGCTAGCTAGCTAGCTAG', 'GTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTA', 'AGCTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTAG', 'GATCGATCGATCGATCGATC', 'TGCATGCATGCATGCATG', 'GTGCTGCTGCTGCTGCT', 'CAGTCAGTCAGTCAGT', 'GATCGATCGATCGATCG']')
526: 1:Fire Event: PassTest{complexity=24, testCount=27}
------------------------------------------
527: 1:BoardData {
527: 1:  'description': ['The structure of the DNA double helix (type B-DNA).\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\n\nIn DNA strings, symbols 'A' and 'T' are complements of each other, as 'C' and 'G'. \nYour function receives one side of the DNA (string). \nYou need to return the other complementary side. \nDNA strand is never empty or there is no DNA at all (again, except for Haskell).\nExample: TTTT=>AAAA, TAACG=>ATTGC etc.'],
527: 1:  'expectedAnswer': 'CATAGCTAGCTAGCTAGCTAATATAAAAGCTGCTCTAAATTTATATATATATATGCTCTCTTATGTCTATCTGTCTAAT',
527: 1:  'history': [
527: 1:    {
527: 1:      'answer': 'AAAA',
527: 1:      'question': 'TTTT',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': 'TTTT',
527: 1:      'question': 'AAAA',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': 'ATTGC',
527: 1:      'question': 'TAACG',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': 'TAACG',
527: 1:      'question': 'ATTGC',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': 'GTAT',
527: 1:      'question': 'CATA',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': 'CATA',
527: 1:      'question': 'GTAT',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': 'ATCGGATCGA',
527: 1:      'question': 'TAGCCTAGCT',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': 'CTAGCTAGCT',
527: 1:      'question': 'GATCGATCGA',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': 'GATCGATCGATCGATCGA',
527: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': 'TGCATCGATCGATCGAT',
527: 1:      'question': 'ACGTAGCTAGCTAGCTA',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
527: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
527: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
527: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': 'TCGATCGATCGATCGATCGATCGATCGAT',
527: 1:      'question': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCGATCG',
527: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCGA',
527: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': 'TAGCTAGCTAGCTAGCTAG',
527: 1:      'question': 'ATCGATCGATCGATCGATC',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': 'GTAGCTAGCTAGCTAGCT',
527: 1:      'question': 'CATCGATCGATCGATCGA',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTA',
527: 1:      'question': 'GATCGATCGATCGATCGATCGAT',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': 'AGCTAGCTAGCTAGCTAGCT',
527: 1:      'question': 'TCGATCGATCGATCGATCGA',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTAG',
527: 1:      'question': 'GATCGATCGATCGATCGATCGATC',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': 'GATCGATCGATCGATCGATC',
527: 1:      'question': 'CTAGCTAGCTAGCTAGCTAG',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': 'TGCATGCATGCATGCATG',
527: 1:      'question': 'ACGTACGTACGTACGTAC',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': 'GTGCTGCTGCTGCTGCT',
527: 1:      'question': 'CACGACGACGACGACGA',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': 'CAGTCAGTCAGTCAGT',
527: 1:      'question': 'GTCAGTCAGTCAGTCA',
527: 1:      'valid': true
527: 1:    },
527: 1:    {
527: 1:      'answer': 'GATCGATCGATCGATCG',
527: 1:      'question': 'CTAGCTAGCTAGCTAGC',
527: 1:      'valid': true
527: 1:    }
527: 1:  ],
527: 1:  'info': [
527: 1:    '✅f(TTTT) = AAAA',
527: 1:    '✅f(AAAA) = TTTT',
527: 1:    '✅f(TAACG) = ATTGC',
527: 1:    '✅f(ATTGC) = TAACG',
527: 1:    '✅f(CATA) = GTAT',
527: 1:    '✅f(GTAT) = CATA',
527: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
527: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
527: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
527: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
527: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
527: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
527: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
527: 1:    '✅f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = TCGATCGATCGATCGATCGATCGATCGAT',
527: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCGATCG',
527: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGATCGA',
527: 1:    '✅f(ATCGATCGATCGATCGATC) = TAGCTAGCTAGCTAGCTAG',
527: 1:    '✅f(CATCGATCGATCGATCGA) = GTAGCTAGCTAGCTAGCT',
527: 1:    '✅f(GATCGATCGATCGATCGATCGAT) = CTAGCTAGCTAGCTAGCTAGCTA',
527: 1:    '✅f(TCGATCGATCGATCGATCGA) = AGCTAGCTAGCTAGCTAGCT',
527: 1:    '✅f(GATCGATCGATCGATCGATCGATC) = CTAGCTAGCTAGCTAGCTAGCTAG',
527: 1:    '✅f(CTAGCTAGCTAGCTAGCTAG) = GATCGATCGATCGATCGATC',
527: 1:    '✅f(ACGTACGTACGTACGTAC) = TGCATGCATGCATGCATG',
527: 1:    '✅f(CACGACGACGACGACGA) = GTGCTGCTGCTGCTGCT',
527: 1:    '✅f(GTCAGTCAGTCAGTCA) = CAGTCAGTCAGTCAGT',
527: 1:    '✅f(CTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCG',
527: 1:    '❌f(GTATCGATCGATCGATCGATTATATTTTCGACGAGATTTAAATATATATATATACGAGAGAATACAGATAGACAGATTA) = ??? != CATAGCTAGCTAGCTAGCTAATATAAAAGCTGCTCTAAATTTATATATATATATGCTCTCTTATGTCTATCTGTCTAAT'
527: 1:  ],
527: 1:  'level': 18,
527: 1:  'nextQuestion': 'GTATCGATCGATCGATCGATTATATTTTCGACGAGATTTAAATATATATATATACGAGAGAATACAGATAGACAGATTA',
527: 1:  'questions': [
527: 1:    'TTTT',
527: 1:    'AAAA',
527: 1:    'TAACG',
527: 1:    'ATTGC',
527: 1:    'CATA',
527: 1:    'GTAT',
527: 1:    'TAGCCTAGCT',
527: 1:    'GATCGATCGA',
527: 1:    'CTAGCTAGCTAGCTAGCT',
527: 1:    'ACGTAGCTAGCTAGCTA',
527: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCT',
527: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGC',
527: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
527: 1:    'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
527: 1:    'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
527: 1:    'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
527: 1:    'ATCGATCGATCGATCGATC',
527: 1:    'CATCGATCGATCGATCGA',
527: 1:    'GATCGATCGATCGATCGATCGAT',
527: 1:    'TCGATCGATCGATCGATCGA',
527: 1:    'GATCGATCGATCGATCGATCGATC',
527: 1:    'CTAGCTAGCTAGCTAGCTAG',
527: 1:    'ACGTACGTACGTACGTAC',
527: 1:    'CACGACGACGACGACGA',
527: 1:    'GTCAGTCAGTCAGTCA',
527: 1:    'CTAGCTAGCTAGCTAGC',
527: 1:    'GTATCGATCGATCGATCGATTATATTTTCGACGAGATTTAAATATATATATATACGAGAGAATACAGATAGACAGATTA'
527: 1:  ]
527: 1:}
527: 1:Scores: 33169
527: 1:Answer: message('['AAAA', 'TTTT', 'ATTGC', 'TAACG', 'GTAT', 'CATA', 'ATCGGATCGA', 'CTAGCTAGCT', 'GATCGATCGATCGATCGA', 'TGCATCGATCGATCGAT', 'GATCGATCGATCGATCGATCGATCGA', 'CGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCG', 'TCGATCGATCGATCGATCGATCGATCGAT', 'CGATCGATCGATCGATCGATCGATCGATCG', 'GATCGATCGATCGATCGATCGATCGATCGA', 'TAGCTAGCTAGCTAGCTAG', 'GTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTA', 'AGCTAGCTAGCTAGCTAGCT', 'CTAGCTAGCTAGCTAGCTAGCTAG', 'GATCGATCGATCGATCGATC', 'TGCATGCATGCATGCATG', 'GTGCTGCTGCTGCTGCT', 'CAGTCAGTCAGTCAGT', 'GATCGATCGATCGATCG', 'CATAGCTAGCTAGCTAGCTAATATAAAAGCTGCTCTAAATTTATATATATATATGCTCTCTTATGTCTATCTGTCTAAT']')
527: 1:Fire Event: PassTest{complexity=24, testCount=27}
527: 1:Fire Event: NextAlgorithm{complexity=24, time=0}
------------------------------------------
528: 1:BoardData {
528: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
528: 1:  'history': [
528: 1:    {
528: 1:      'answer': 'AAAA',
528: 1:      'question': 'TTTT',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': 'TTTT',
528: 1:      'question': 'AAAA',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': 'ATTGC',
528: 1:      'question': 'TAACG',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': 'TAACG',
528: 1:      'question': 'ATTGC',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': 'GTAT',
528: 1:      'question': 'CATA',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': 'CATA',
528: 1:      'question': 'GTAT',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': 'ATCGGATCGA',
528: 1:      'question': 'TAGCCTAGCT',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': 'CTAGCTAGCT',
528: 1:      'question': 'GATCGATCGA',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': 'GATCGATCGATCGATCGA',
528: 1:      'question': 'CTAGCTAGCTAGCTAGCT',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': 'TGCATCGATCGATCGAT',
528: 1:      'question': 'ACGTAGCTAGCTAGCTA',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGA',
528: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCT',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCG',
528: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGC',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCG',
528: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': 'TCGATCGATCGATCGATCGATCGATCGAT',
528: 1:      'question': 'AGCTAGCTAGCTAGCTAGCTAGCTAGCTA',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': 'CGATCGATCGATCGATCGATCGATCGATCG',
528: 1:      'question': 'GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': 'GATCGATCGATCGATCGATCGATCGATCGA',
528: 1:      'question': 'CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': 'TAGCTAGCTAGCTAGCTAG',
528: 1:      'question': 'ATCGATCGATCGATCGATC',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': 'GTAGCTAGCTAGCTAGCT',
528: 1:      'question': 'CATCGATCGATCGATCGA',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTA',
528: 1:      'question': 'GATCGATCGATCGATCGATCGAT',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': 'AGCTAGCTAGCTAGCTAGCT',
528: 1:      'question': 'TCGATCGATCGATCGATCGA',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': 'CTAGCTAGCTAGCTAGCTAGCTAG',
528: 1:      'question': 'GATCGATCGATCGATCGATCGATC',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': 'GATCGATCGATCGATCGATC',
528: 1:      'question': 'CTAGCTAGCTAGCTAGCTAG',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': 'TGCATGCATGCATGCATG',
528: 1:      'question': 'ACGTACGTACGTACGTAC',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': 'GTGCTGCTGCTGCTGCT',
528: 1:      'question': 'CACGACGACGACGACGA',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': 'CAGTCAGTCAGTCAGT',
528: 1:      'question': 'GTCAGTCAGTCAGTCA',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': 'GATCGATCGATCGATCG',
528: 1:      'question': 'CTAGCTAGCTAGCTAGC',
528: 1:      'valid': true
528: 1:    },
528: 1:    {
528: 1:      'answer': 'CATAGCTAGCTAGCTAGCTAATATAAAAGCTGCTCTAAATTTATATATATATATGCTCTCTTATGTCTATCTGTCTAAT',
528: 1:      'question': 'GTATCGATCGATCGATCGATTATATTTTCGACGAGATTTAAATATATATATATACGAGAGAATACAGATAGACAGATTA',
528: 1:      'valid': true
528: 1:    }
528: 1:  ],
528: 1:  'info': [
528: 1:    '✅f(TTTT) = AAAA',
528: 1:    '✅f(AAAA) = TTTT',
528: 1:    '✅f(TAACG) = ATTGC',
528: 1:    '✅f(ATTGC) = TAACG',
528: 1:    '✅f(CATA) = GTAT',
528: 1:    '✅f(GTAT) = CATA',
528: 1:    '✅f(TAGCCTAGCT) = ATCGGATCGA',
528: 1:    '✅f(GATCGATCGA) = CTAGCTAGCT',
528: 1:    '✅f(CTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGA',
528: 1:    '✅f(ACGTAGCTAGCTAGCTA) = TGCATCGATCGATCGAT',
528: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGA',
528: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCG',
528: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCGATCGATCGATCG',
528: 1:    '✅f(AGCTAGCTAGCTAGCTAGCTAGCTAGCTA) = TCGATCGATCGATCGATCGATCGATCGAT',
528: 1:    '✅f(GCTAGCTAGCTAGCTAGCTAGCTAGCTAGC) = CGATCGATCGATCGATCGATCGATCGATCG',
528: 1:    '✅f(CTAGCTAGCTAGCTAGCTAGCTAGCTAGCT) = GATCGATCGATCGATCGATCGATCGATCGA',
528: 1:    '✅f(ATCGATCGATCGATCGATC) = TAGCTAGCTAGCTAGCTAG',
528: 1:    '✅f(CATCGATCGATCGATCGA) = GTAGCTAGCTAGCTAGCT',
528: 1:    '✅f(GATCGATCGATCGATCGATCGAT) = CTAGCTAGCTAGCTAGCTAGCTA',
528: 1:    '✅f(TCGATCGATCGATCGATCGA) = AGCTAGCTAGCTAGCTAGCT',
528: 1:    '✅f(GATCGATCGATCGATCGATCGATC) = CTAGCTAGCTAGCTAGCTAGCTAG',
528: 1:    '✅f(CTAGCTAGCTAGCTAGCTAG) = GATCGATCGATCGATCGATC',
528: 1:    '✅f(ACGTACGTACGTACGTAC) = TGCATGCATGCATGCATG',
528: 1:    '✅f(CACGACGACGACGACGA) = GTGCTGCTGCTGCTGCT',
528: 1:    '✅f(GTCAGTCAGTCAGTCA) = CAGTCAGTCAGTCAGT',
528: 1:    '✅f(CTAGCTAGCTAGCTAGC) = GATCGATCGATCGATCG',
528: 1:    '✅f(GTATCGATCGATCGATCGATTATATTTTCGACGAGATTTAAATATATATATATACGAGAGAATACAGATAGACAGATTA) = CATAGCTAGCTAGCTAGCTAATATAAAAGCTGCTCTAAATTTATATATATATATGCTCTCTTATGTCTATCTGTCTAAT'
528: 1:  ],
528: 1:  'level': 18,
528: 1:  'questions': []
528: 1:}
528: 1:Scores: 36416
528: 1:Answer: message('StartNextLevel')
528: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
529: 1:BoardData {
529: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
529: 1:  'expectedAnswer': 'es',
529: 1:  'history': [],
529: 1:  'info': ['❌f(test) = ??? != es'],
529: 1:  'level': 19,
529: 1:  'nextQuestion': 'test',
529: 1:  'questions': ['test']
529: 1:}
529: 1:Scores: 36416
529: 1:Answer: message('['es']')
529: 1:Fire Event: PassTest{complexity=25, testCount=22}
------------------------------------------
530: 1:BoardData {
530: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
530: 1:  'expectedAnswer': 't',
530: 1:  'history': [{
530: 1:    'answer': 'es',
530: 1:    'question': 'test',
530: 1:    'valid': true
530: 1:  }],
530: 1:  'info': [
530: 1:    '✅f(test) = es',
530: 1:    '❌f(testing) = ??? != t'
530: 1:  ],
530: 1:  'level': 19,
530: 1:  'nextQuestion': 'testing',
530: 1:  'questions': [
530: 1:    'test',
530: 1:    'testing'
530: 1:  ]
530: 1:}
530: 1:Scores: 36427
530: 1:Answer: message('['es', 't']')
530: 1:Fire Event: PassTest{complexity=25, testCount=22}
------------------------------------------
531: 1:BoardData {
531: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
531: 1:  'expectedAnswer': 'dd',
531: 1:  'history': [
531: 1:    {
531: 1:      'answer': 'es',
531: 1:      'question': 'test',
531: 1:      'valid': true
531: 1:    },
531: 1:    {
531: 1:      'answer': 't',
531: 1:      'question': 'testing',
531: 1:      'valid': true
531: 1:    }
531: 1:  ],
531: 1:  'info': [
531: 1:    '✅f(test) = es',
531: 1:    '✅f(testing) = t',
531: 1:    '❌f(middle) = ??? != dd'
531: 1:  ],
531: 1:  'level': 19,
531: 1:  'nextQuestion': 'middle',
531: 1:  'questions': [
531: 1:    'test',
531: 1:    'testing',
531: 1:    'middle'
531: 1:  ]
531: 1:}
531: 1:Scores: 36438
531: 1:Answer: message('['es', 't', 'dd']')
531: 1:Fire Event: PassTest{complexity=25, testCount=22}
------------------------------------------
532: 1:BoardData {
532: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
532: 1:  'expectedAnswer': 'A',
532: 1:  'history': [
532: 1:    {
532: 1:      'answer': 'es',
532: 1:      'question': 'test',
532: 1:      'valid': true
532: 1:    },
532: 1:    {
532: 1:      'answer': 't',
532: 1:      'question': 'testing',
532: 1:      'valid': true
532: 1:    },
532: 1:    {
532: 1:      'answer': 'dd',
532: 1:      'question': 'middle',
532: 1:      'valid': true
532: 1:    }
532: 1:  ],
532: 1:  'info': [
532: 1:    '✅f(test) = es',
532: 1:    '✅f(testing) = t',
532: 1:    '✅f(middle) = dd',
532: 1:    '❌f(A) = ??? != A'
532: 1:  ],
532: 1:  'level': 19,
532: 1:  'nextQuestion': 'A',
532: 1:  'questions': [
532: 1:    'test',
532: 1:    'testing',
532: 1:    'middle',
532: 1:    'A'
532: 1:  ]
532: 1:}
532: 1:Scores: 36449
532: 1:Answer: message('['es', 't', 'dd', 'A']')
532: 1:Fire Event: PassTest{complexity=25, testCount=22}
------------------------------------------
533: 1:BoardData {
533: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
533: 1:  'expectedAnswer': 'l',
533: 1:  'history': [
533: 1:    {
533: 1:      'answer': 'es',
533: 1:      'question': 'test',
533: 1:      'valid': true
533: 1:    },
533: 1:    {
533: 1:      'answer': 't',
533: 1:      'question': 'testing',
533: 1:      'valid': true
533: 1:    },
533: 1:    {
533: 1:      'answer': 'dd',
533: 1:      'question': 'middle',
533: 1:      'valid': true
533: 1:    },
533: 1:    {
533: 1:      'answer': 'A',
533: 1:      'question': 'A',
533: 1:      'valid': true
533: 1:    }
533: 1:  ],
533: 1:  'info': [
533: 1:    '✅f(test) = es',
533: 1:    '✅f(testing) = t',
533: 1:    '✅f(middle) = dd',
533: 1:    '✅f(A) = A',
533: 1:    '❌f(Hello) = ??? != l'
533: 1:  ],
533: 1:  'level': 19,
533: 1:  'nextQuestion': 'Hello',
533: 1:  'questions': [
533: 1:    'test',
533: 1:    'testing',
533: 1:    'middle',
533: 1:    'A',
533: 1:    'Hello'
533: 1:  ]
533: 1:}
533: 1:Scores: 36460
533: 1:Answer: message('['es', 't', 'dd', 'A', 'l']')
533: 1:Fire Event: PassTest{complexity=25, testCount=22}
------------------------------------------
534: 1:BoardData {
534: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
534: 1:  'expectedAnswer': 'av',
534: 1:  'history': [
534: 1:    {
534: 1:      'answer': 'es',
534: 1:      'question': 'test',
534: 1:      'valid': true
534: 1:    },
534: 1:    {
534: 1:      'answer': 't',
534: 1:      'question': 'testing',
534: 1:      'valid': true
534: 1:    },
534: 1:    {
534: 1:      'answer': 'dd',
534: 1:      'question': 'middle',
534: 1:      'valid': true
534: 1:    },
534: 1:    {
534: 1:      'answer': 'A',
534: 1:      'question': 'A',
534: 1:      'valid': true
534: 1:    },
534: 1:    {
534: 1:      'answer': 'l',
534: 1:      'question': 'Hello',
534: 1:      'valid': true
534: 1:    }
534: 1:  ],
534: 1:  'info': [
534: 1:    '✅f(test) = es',
534: 1:    '✅f(testing) = t',
534: 1:    '✅f(middle) = dd',
534: 1:    '✅f(A) = A',
534: 1:    '✅f(Hello) = l',
534: 1:    '❌f(Java) = ??? != av'
534: 1:  ],
534: 1:  'level': 19,
534: 1:  'nextQuestion': 'Java',
534: 1:  'questions': [
534: 1:    'test',
534: 1:    'testing',
534: 1:    'middle',
534: 1:    'A',
534: 1:    'Hello',
534: 1:    'Java'
534: 1:  ]
534: 1:}
534: 1:Scores: 36471
534: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av']')
534: 1:Fire Event: PassTest{complexity=25, testCount=22}
------------------------------------------
535: 1:BoardData {
535: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
535: 1:  'expectedAnswer': 'en',
535: 1:  'history': [
535: 1:    {
535: 1:      'answer': 'es',
535: 1:      'question': 'test',
535: 1:      'valid': true
535: 1:    },
535: 1:    {
535: 1:      'answer': 't',
535: 1:      'question': 'testing',
535: 1:      'valid': true
535: 1:    },
535: 1:    {
535: 1:      'answer': 'dd',
535: 1:      'question': 'middle',
535: 1:      'valid': true
535: 1:    },
535: 1:    {
535: 1:      'answer': 'A',
535: 1:      'question': 'A',
535: 1:      'valid': true
535: 1:    },
535: 1:    {
535: 1:      'answer': 'l',
535: 1:      'question': 'Hello',
535: 1:      'valid': true
535: 1:    },
535: 1:    {
535: 1:      'answer': 'av',
535: 1:      'question': 'Java',
535: 1:      'valid': true
535: 1:    }
535: 1:  ],
535: 1:  'info': [
535: 1:    '✅f(test) = es',
535: 1:    '✅f(testing) = t',
535: 1:    '✅f(middle) = dd',
535: 1:    '✅f(A) = A',
535: 1:    '✅f(Hello) = l',
535: 1:    '✅f(Java) = av',
535: 1:    '❌f(OpenAI) = ??? != en'
535: 1:  ],
535: 1:  'level': 19,
535: 1:  'nextQuestion': 'OpenAI',
535: 1:  'questions': [
535: 1:    'test',
535: 1:    'testing',
535: 1:    'middle',
535: 1:    'A',
535: 1:    'Hello',
535: 1:    'Java',
535: 1:    'OpenAI'
535: 1:  ]
535: 1:}
535: 1:Scores: 36482
535: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en']')
535: 1:Fire Event: PassTest{complexity=25, testCount=22}
------------------------------------------
536: 1:BoardData {
536: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
536: 1:  'expectedAnswer': 't',
536: 1:  'history': [
536: 1:    {
536: 1:      'answer': 'es',
536: 1:      'question': 'test',
536: 1:      'valid': true
536: 1:    },
536: 1:    {
536: 1:      'answer': 't',
536: 1:      'question': 'testing',
536: 1:      'valid': true
536: 1:    },
536: 1:    {
536: 1:      'answer': 'dd',
536: 1:      'question': 'middle',
536: 1:      'valid': true
536: 1:    },
536: 1:    {
536: 1:      'answer': 'A',
536: 1:      'question': 'A',
536: 1:      'valid': true
536: 1:    },
536: 1:    {
536: 1:      'answer': 'l',
536: 1:      'question': 'Hello',
536: 1:      'valid': true
536: 1:    },
536: 1:    {
536: 1:      'answer': 'av',
536: 1:      'question': 'Java',
536: 1:      'valid': true
536: 1:    },
536: 1:    {
536: 1:      'answer': 'en',
536: 1:      'question': 'OpenAI',
536: 1:      'valid': true
536: 1:    }
536: 1:  ],
536: 1:  'info': [
536: 1:    '✅f(test) = es',
536: 1:    '✅f(testing) = t',
536: 1:    '✅f(middle) = dd',
536: 1:    '✅f(A) = A',
536: 1:    '✅f(Hello) = l',
536: 1:    '✅f(Java) = av',
536: 1:    '✅f(OpenAI) = en',
536: 1:    '❌f(Testing) = ??? != t'
536: 1:  ],
536: 1:  'level': 19,
536: 1:  'nextQuestion': 'Testing',
536: 1:  'questions': [
536: 1:    'test',
536: 1:    'testing',
536: 1:    'middle',
536: 1:    'A',
536: 1:    'Hello',
536: 1:    'Java',
536: 1:    'OpenAI',
536: 1:    'Testing'
536: 1:  ]
536: 1:}
536: 1:Scores: 36493
536: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't']')
536: 1:Fire Event: PassTest{complexity=25, testCount=22}
------------------------------------------
537: 1:BoardData {
537: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
537: 1:  'expectedAnswer': 't',
537: 1:  'history': [
537: 1:    {
537: 1:      'answer': 'es',
537: 1:      'question': 'test',
537: 1:      'valid': true
537: 1:    },
537: 1:    {
537: 1:      'answer': 't',
537: 1:      'question': 'testing',
537: 1:      'valid': true
537: 1:    },
537: 1:    {
537: 1:      'answer': 'dd',
537: 1:      'question': 'middle',
537: 1:      'valid': true
537: 1:    },
537: 1:    {
537: 1:      'answer': 'A',
537: 1:      'question': 'A',
537: 1:      'valid': true
537: 1:    },
537: 1:    {
537: 1:      'answer': 'l',
537: 1:      'question': 'Hello',
537: 1:      'valid': true
537: 1:    },
537: 1:    {
537: 1:      'answer': 'av',
537: 1:      'question': 'Java',
537: 1:      'valid': true
537: 1:    },
537: 1:    {
537: 1:      'answer': 'en',
537: 1:      'question': 'OpenAI',
537: 1:      'valid': true
537: 1:    },
537: 1:    {
537: 1:      'answer': 't',
537: 1:      'question': 'Testing',
537: 1:      'valid': true
537: 1:    }
537: 1:  ],
537: 1:  'info': [
537: 1:    '✅f(test) = es',
537: 1:    '✅f(testing) = t',
537: 1:    '✅f(middle) = dd',
537: 1:    '✅f(A) = A',
537: 1:    '✅f(Hello) = l',
537: 1:    '✅f(Java) = av',
537: 1:    '✅f(OpenAI) = en',
537: 1:    '✅f(Testing) = t',
537: 1:    '❌f(ChatGPT) = ??? != t'
537: 1:  ],
537: 1:  'level': 19,
537: 1:  'nextQuestion': 'ChatGPT',
537: 1:  'questions': [
537: 1:    'test',
537: 1:    'testing',
537: 1:    'middle',
537: 1:    'A',
537: 1:    'Hello',
537: 1:    'Java',
537: 1:    'OpenAI',
537: 1:    'Testing',
537: 1:    'ChatGPT'
537: 1:  ]
537: 1:}
537: 1:Scores: 36504
537: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't', 't']')
537: 1:Fire Event: PassTest{complexity=25, testCount=22}
------------------------------------------
538: 1:BoardData {
538: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
538: 1:  'expectedAnswer': 'a',
538: 1:  'history': [
538: 1:    {
538: 1:      'answer': 'es',
538: 1:      'question': 'test',
538: 1:      'valid': true
538: 1:    },
538: 1:    {
538: 1:      'answer': 't',
538: 1:      'question': 'testing',
538: 1:      'valid': true
538: 1:    },
538: 1:    {
538: 1:      'answer': 'dd',
538: 1:      'question': 'middle',
538: 1:      'valid': true
538: 1:    },
538: 1:    {
538: 1:      'answer': 'A',
538: 1:      'question': 'A',
538: 1:      'valid': true
538: 1:    },
538: 1:    {
538: 1:      'answer': 'l',
538: 1:      'question': 'Hello',
538: 1:      'valid': true
538: 1:    },
538: 1:    {
538: 1:      'answer': 'av',
538: 1:      'question': 'Java',
538: 1:      'valid': true
538: 1:    },
538: 1:    {
538: 1:      'answer': 'en',
538: 1:      'question': 'OpenAI',
538: 1:      'valid': true
538: 1:    },
538: 1:    {
538: 1:      'answer': 't',
538: 1:      'question': 'Testing',
538: 1:      'valid': true
538: 1:    },
538: 1:    {
538: 1:      'answer': 't',
538: 1:      'question': 'ChatGPT',
538: 1:      'valid': true
538: 1:    }
538: 1:  ],
538: 1:  'info': [
538: 1:    '✅f(test) = es',
538: 1:    '✅f(testing) = t',
538: 1:    '✅f(middle) = dd',
538: 1:    '✅f(A) = A',
538: 1:    '✅f(Hello) = l',
538: 1:    '✅f(Java) = av',
538: 1:    '✅f(OpenAI) = en',
538: 1:    '✅f(Testing) = t',
538: 1:    '✅f(ChatGPT) = t',
538: 1:    '❌f(Programming) = ??? != a'
538: 1:  ],
538: 1:  'level': 19,
538: 1:  'nextQuestion': 'Programming',
538: 1:  'questions': [
538: 1:    'test',
538: 1:    'testing',
538: 1:    'middle',
538: 1:    'A',
538: 1:    'Hello',
538: 1:    'Java',
538: 1:    'OpenAI',
538: 1:    'Testing',
538: 1:    'ChatGPT',
538: 1:    'Programming'
538: 1:  ]
538: 1:}
538: 1:Scores: 36515
538: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't', 't', 'a']')
538: 1:Fire Event: PassTest{complexity=25, testCount=22}
------------------------------------------
539: 1:BoardData {
539: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
539: 1:  'expectedAnswer': 'r',
539: 1:  'history': [
539: 1:    {
539: 1:      'answer': 'es',
539: 1:      'question': 'test',
539: 1:      'valid': true
539: 1:    },
539: 1:    {
539: 1:      'answer': 't',
539: 1:      'question': 'testing',
539: 1:      'valid': true
539: 1:    },
539: 1:    {
539: 1:      'answer': 'dd',
539: 1:      'question': 'middle',
539: 1:      'valid': true
539: 1:    },
539: 1:    {
539: 1:      'answer': 'A',
539: 1:      'question': 'A',
539: 1:      'valid': true
539: 1:    },
539: 1:    {
539: 1:      'answer': 'l',
539: 1:      'question': 'Hello',
539: 1:      'valid': true
539: 1:    },
539: 1:    {
539: 1:      'answer': 'av',
539: 1:      'question': 'Java',
539: 1:      'valid': true
539: 1:    },
539: 1:    {
539: 1:      'answer': 'en',
539: 1:      'question': 'OpenAI',
539: 1:      'valid': true
539: 1:    },
539: 1:    {
539: 1:      'answer': 't',
539: 1:      'question': 'Testing',
539: 1:      'valid': true
539: 1:    },
539: 1:    {
539: 1:      'answer': 't',
539: 1:      'question': 'ChatGPT',
539: 1:      'valid': true
539: 1:    },
539: 1:    {
539: 1:      'answer': 'a',
539: 1:      'question': 'Programming',
539: 1:      'valid': true
539: 1:    }
539: 1:  ],
539: 1:  'info': [
539: 1:    '✅f(test) = es',
539: 1:    '✅f(testing) = t',
539: 1:    '✅f(middle) = dd',
539: 1:    '✅f(A) = A',
539: 1:    '✅f(Hello) = l',
539: 1:    '✅f(Java) = av',
539: 1:    '✅f(OpenAI) = en',
539: 1:    '✅f(Testing) = t',
539: 1:    '✅f(ChatGPT) = t',
539: 1:    '✅f(Programming) = a',
539: 1:    '❌f(Algorithm) = ??? != r'
539: 1:  ],
539: 1:  'level': 19,
539: 1:  'nextQuestion': 'Algorithm',
539: 1:  'questions': [
539: 1:    'test',
539: 1:    'testing',
539: 1:    'middle',
539: 1:    'A',
539: 1:    'Hello',
539: 1:    'Java',
539: 1:    'OpenAI',
539: 1:    'Testing',
539: 1:    'ChatGPT',
539: 1:    'Programming',
539: 1:    'Algorithm'
539: 1:  ]
539: 1:}
539: 1:Scores: 36526
539: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't', 't', 'a', 'r']')
539: 1:Fire Event: PassTest{complexity=25, testCount=22}
------------------------------------------
540: 1:BoardData {
540: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
540: 1:  'expectedAnswer': 'ru',
540: 1:  'history': [
540: 1:    {
540: 1:      'answer': 'es',
540: 1:      'question': 'test',
540: 1:      'valid': true
540: 1:    },
540: 1:    {
540: 1:      'answer': 't',
540: 1:      'question': 'testing',
540: 1:      'valid': true
540: 1:    },
540: 1:    {
540: 1:      'answer': 'dd',
540: 1:      'question': 'middle',
540: 1:      'valid': true
540: 1:    },
540: 1:    {
540: 1:      'answer': 'A',
540: 1:      'question': 'A',
540: 1:      'valid': true
540: 1:    },
540: 1:    {
540: 1:      'answer': 'l',
540: 1:      'question': 'Hello',
540: 1:      'valid': true
540: 1:    },
540: 1:    {
540: 1:      'answer': 'av',
540: 1:      'question': 'Java',
540: 1:      'valid': true
540: 1:    },
540: 1:    {
540: 1:      'answer': 'en',
540: 1:      'question': 'OpenAI',
540: 1:      'valid': true
540: 1:    },
540: 1:    {
540: 1:      'answer': 't',
540: 1:      'question': 'Testing',
540: 1:      'valid': true
540: 1:    },
540: 1:    {
540: 1:      'answer': 't',
540: 1:      'question': 'ChatGPT',
540: 1:      'valid': true
540: 1:    },
540: 1:    {
540: 1:      'answer': 'a',
540: 1:      'question': 'Programming',
540: 1:      'valid': true
540: 1:    },
540: 1:    {
540: 1:      'answer': 'r',
540: 1:      'question': 'Algorithm',
540: 1:      'valid': true
540: 1:    }
540: 1:  ],
540: 1:  'info': [
540: 1:    '✅f(test) = es',
540: 1:    '✅f(testing) = t',
540: 1:    '✅f(middle) = dd',
540: 1:    '✅f(A) = A',
540: 1:    '✅f(Hello) = l',
540: 1:    '✅f(Java) = av',
540: 1:    '✅f(OpenAI) = en',
540: 1:    '✅f(Testing) = t',
540: 1:    '✅f(ChatGPT) = t',
540: 1:    '✅f(Programming) = a',
540: 1:    '✅f(Algorithm) = r',
540: 1:    '❌f(DataStructures) = ??? != ru'
540: 1:  ],
540: 1:  'level': 19,
540: 1:  'nextQuestion': 'DataStructures',
540: 1:  'questions': [
540: 1:    'test',
540: 1:    'testing',
540: 1:    'middle',
540: 1:    'A',
540: 1:    'Hello',
540: 1:    'Java',
540: 1:    'OpenAI',
540: 1:    'Testing',
540: 1:    'ChatGPT',
540: 1:    'Programming',
540: 1:    'Algorithm',
540: 1:    'DataStructures'
540: 1:  ]
540: 1:}
540: 1:Scores: 36537
540: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't', 't', 'a', 'r', 'ru']')
540: 1:Fire Event: PassTest{complexity=25, testCount=22}
------------------------------------------
541: 1:BoardData {
541: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
541: 1:  'expectedAnswer': ' ',
541: 1:  'history': [
541: 1:    {
541: 1:      'answer': 'es',
541: 1:      'question': 'test',
541: 1:      'valid': true
541: 1:    },
541: 1:    {
541: 1:      'answer': 't',
541: 1:      'question': 'testing',
541: 1:      'valid': true
541: 1:    },
541: 1:    {
541: 1:      'answer': 'dd',
541: 1:      'question': 'middle',
541: 1:      'valid': true
541: 1:    },
541: 1:    {
541: 1:      'answer': 'A',
541: 1:      'question': 'A',
541: 1:      'valid': true
541: 1:    },
541: 1:    {
541: 1:      'answer': 'l',
541: 1:      'question': 'Hello',
541: 1:      'valid': true
541: 1:    },
541: 1:    {
541: 1:      'answer': 'av',
541: 1:      'question': 'Java',
541: 1:      'valid': true
541: 1:    },
541: 1:    {
541: 1:      'answer': 'en',
541: 1:      'question': 'OpenAI',
541: 1:      'valid': true
541: 1:    },
541: 1:    {
541: 1:      'answer': 't',
541: 1:      'question': 'Testing',
541: 1:      'valid': true
541: 1:    },
541: 1:    {
541: 1:      'answer': 't',
541: 1:      'question': 'ChatGPT',
541: 1:      'valid': true
541: 1:    },
541: 1:    {
541: 1:      'answer': 'a',
541: 1:      'question': 'Programming',
541: 1:      'valid': true
541: 1:    },
541: 1:    {
541: 1:      'answer': 'r',
541: 1:      'question': 'Algorithm',
541: 1:      'valid': true
541: 1:    },
541: 1:    {
541: 1:      'answer': 'ru',
541: 1:      'question': 'DataStructures',
541: 1:      'valid': true
541: 1:    }
541: 1:  ],
541: 1:  'info': [
541: 1:    '✅f(test) = es',
541: 1:    '✅f(testing) = t',
541: 1:    '✅f(middle) = dd',
541: 1:    '✅f(A) = A',
541: 1:    '✅f(Hello) = l',
541: 1:    '✅f(Java) = av',
541: 1:    '✅f(OpenAI) = en',
541: 1:    '✅f(Testing) = t',
541: 1:    '✅f(ChatGPT) = t',
541: 1:    '✅f(Programming) = a',
541: 1:    '✅f(Algorithm) = r',
541: 1:    '✅f(DataStructures) = ru',
541: 1:    '❌f(Hello, World!) = ??? !=  '
541: 1:  ],
541: 1:  'level': 19,
541: 1:  'nextQuestion': 'Hello, World!',
541: 1:  'questions': [
541: 1:    'test',
541: 1:    'testing',
541: 1:    'middle',
541: 1:    'A',
541: 1:    'Hello',
541: 1:    'Java',
541: 1:    'OpenAI',
541: 1:    'Testing',
541: 1:    'ChatGPT',
541: 1:    'Programming',
541: 1:    'Algorithm',
541: 1:    'DataStructures',
541: 1:    'Hello, World!'
541: 1:  ]
541: 1:}
541: 1:Scores: 36548
541: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't', 't', 'a', 'r', 'ru', ' ']')
541: 1:Fire Event: PassTest{complexity=25, testCount=22}
------------------------------------------
542: 1:BoardData {
542: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
542: 1:  'expectedAnswer': ' ',
542: 1:  'history': [
542: 1:    {
542: 1:      'answer': 'es',
542: 1:      'question': 'test',
542: 1:      'valid': true
542: 1:    },
542: 1:    {
542: 1:      'answer': 't',
542: 1:      'question': 'testing',
542: 1:      'valid': true
542: 1:    },
542: 1:    {
542: 1:      'answer': 'dd',
542: 1:      'question': 'middle',
542: 1:      'valid': true
542: 1:    },
542: 1:    {
542: 1:      'answer': 'A',
542: 1:      'question': 'A',
542: 1:      'valid': true
542: 1:    },
542: 1:    {
542: 1:      'answer': 'l',
542: 1:      'question': 'Hello',
542: 1:      'valid': true
542: 1:    },
542: 1:    {
542: 1:      'answer': 'av',
542: 1:      'question': 'Java',
542: 1:      'valid': true
542: 1:    },
542: 1:    {
542: 1:      'answer': 'en',
542: 1:      'question': 'OpenAI',
542: 1:      'valid': true
542: 1:    },
542: 1:    {
542: 1:      'answer': 't',
542: 1:      'question': 'Testing',
542: 1:      'valid': true
542: 1:    },
542: 1:    {
542: 1:      'answer': 't',
542: 1:      'question': 'ChatGPT',
542: 1:      'valid': true
542: 1:    },
542: 1:    {
542: 1:      'answer': 'a',
542: 1:      'question': 'Programming',
542: 1:      'valid': true
542: 1:    },
542: 1:    {
542: 1:      'answer': 'r',
542: 1:      'question': 'Algorithm',
542: 1:      'valid': true
542: 1:    },
542: 1:    {
542: 1:      'answer': 'ru',
542: 1:      'question': 'DataStructures',
542: 1:      'valid': true
542: 1:    },
542: 1:    {
542: 1:      'answer': ' ',
542: 1:      'question': 'Hello, World!',
542: 1:      'valid': true
542: 1:    }
542: 1:  ],
542: 1:  'info': [
542: 1:    '✅f(test) = es',
542: 1:    '✅f(testing) = t',
542: 1:    '✅f(middle) = dd',
542: 1:    '✅f(A) = A',
542: 1:    '✅f(Hello) = l',
542: 1:    '✅f(Java) = av',
542: 1:    '✅f(OpenAI) = en',
542: 1:    '✅f(Testing) = t',
542: 1:    '✅f(ChatGPT) = t',
542: 1:    '✅f(Programming) = a',
542: 1:    '✅f(Algorithm) = r',
542: 1:    '✅f(DataStructures) = ru',
542: 1:    '✅f(Hello, World!) =  ',
542: 1:    '❌f(Java is awesome) = ??? !=  '
542: 1:  ],
542: 1:  'level': 19,
542: 1:  'nextQuestion': 'Java is awesome',
542: 1:  'questions': [
542: 1:    'test',
542: 1:    'testing',
542: 1:    'middle',
542: 1:    'A',
542: 1:    'Hello',
542: 1:    'Java',
542: 1:    'OpenAI',
542: 1:    'Testing',
542: 1:    'ChatGPT',
542: 1:    'Programming',
542: 1:    'Algorithm',
542: 1:    'DataStructures',
542: 1:    'Hello, World!',
542: 1:    'Java is awesome'
542: 1:  ]
542: 1:}
542: 1:Scores: 36559
542: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't', 't', 'a', 'r', 'ru', ' ', ' ']')
542: 1:Fire Event: PassTest{complexity=25, testCount=22}
------------------------------------------
543: 1:BoardData {
543: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
543: 1:  'expectedAnswer': ' C',
543: 1:  'history': [
543: 1:    {
543: 1:      'answer': 'es',
543: 1:      'question': 'test',
543: 1:      'valid': true
543: 1:    },
543: 1:    {
543: 1:      'answer': 't',
543: 1:      'question': 'testing',
543: 1:      'valid': true
543: 1:    },
543: 1:    {
543: 1:      'answer': 'dd',
543: 1:      'question': 'middle',
543: 1:      'valid': true
543: 1:    },
543: 1:    {
543: 1:      'answer': 'A',
543: 1:      'question': 'A',
543: 1:      'valid': true
543: 1:    },
543: 1:    {
543: 1:      'answer': 'l',
543: 1:      'question': 'Hello',
543: 1:      'valid': true
543: 1:    },
543: 1:    {
543: 1:      'answer': 'av',
543: 1:      'question': 'Java',
543: 1:      'valid': true
543: 1:    },
543: 1:    {
543: 1:      'answer': 'en',
543: 1:      'question': 'OpenAI',
543: 1:      'valid': true
543: 1:    },
543: 1:    {
543: 1:      'answer': 't',
543: 1:      'question': 'Testing',
543: 1:      'valid': true
543: 1:    },
543: 1:    {
543: 1:      'answer': 't',
543: 1:      'question': 'ChatGPT',
543: 1:      'valid': true
543: 1:    },
543: 1:    {
543: 1:      'answer': 'a',
543: 1:      'question': 'Programming',
543: 1:      'valid': true
543: 1:    },
543: 1:    {
543: 1:      'answer': 'r',
543: 1:      'question': 'Algorithm',
543: 1:      'valid': true
543: 1:    },
543: 1:    {
543: 1:      'answer': 'ru',
543: 1:      'question': 'DataStructures',
543: 1:      'valid': true
543: 1:    },
543: 1:    {
543: 1:      'answer': ' ',
543: 1:      'question': 'Hello, World!',
543: 1:      'valid': true
543: 1:    },
543: 1:    {
543: 1:      'answer': ' ',
543: 1:      'question': 'Java is awesome',
543: 1:      'valid': true
543: 1:    }
543: 1:  ],
543: 1:  'info': [
543: 1:    '✅f(test) = es',
543: 1:    '✅f(testing) = t',
543: 1:    '✅f(middle) = dd',
543: 1:    '✅f(A) = A',
543: 1:    '✅f(Hello) = l',
543: 1:    '✅f(Java) = av',
543: 1:    '✅f(OpenAI) = en',
543: 1:    '✅f(Testing) = t',
543: 1:    '✅f(ChatGPT) = t',
543: 1:    '✅f(Programming) = a',
543: 1:    '✅f(Algorithm) = r',
543: 1:    '✅f(DataStructures) = ru',
543: 1:    '✅f(Hello, World!) =  ',
543: 1:    '✅f(Java is awesome) =  ',
543: 1:    '❌f(OpenAI ChatGPT) = ??? !=  C'
543: 1:  ],
543: 1:  'level': 19,
543: 1:  'nextQuestion': 'OpenAI ChatGPT',
543: 1:  'questions': [
543: 1:    'test',
543: 1:    'testing',
543: 1:    'middle',
543: 1:    'A',
543: 1:    'Hello',
543: 1:    'Java',
543: 1:    'OpenAI',
543: 1:    'Testing',
543: 1:    'ChatGPT',
543: 1:    'Programming',
543: 1:    'Algorithm',
543: 1:    'DataStructures',
543: 1:    'Hello, World!',
543: 1:    'Java is awesome',
543: 1:    'OpenAI ChatGPT'
543: 1:  ]
543: 1:}
543: 1:Scores: 36570
543: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't', 't', 'a', 'r', 'ru', ' ', ' ', ' C']')
543: 1:Fire Event: PassTest{complexity=25, testCount=22}
------------------------------------------
544: 1:BoardData {
544: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
544: 1:  'expectedAnswer': '3',
544: 1:  'history': [
544: 1:    {
544: 1:      'answer': 'es',
544: 1:      'question': 'test',
544: 1:      'valid': true
544: 1:    },
544: 1:    {
544: 1:      'answer': 't',
544: 1:      'question': 'testing',
544: 1:      'valid': true
544: 1:    },
544: 1:    {
544: 1:      'answer': 'dd',
544: 1:      'question': 'middle',
544: 1:      'valid': true
544: 1:    },
544: 1:    {
544: 1:      'answer': 'A',
544: 1:      'question': 'A',
544: 1:      'valid': true
544: 1:    },
544: 1:    {
544: 1:      'answer': 'l',
544: 1:      'question': 'Hello',
544: 1:      'valid': true
544: 1:    },
544: 1:    {
544: 1:      'answer': 'av',
544: 1:      'question': 'Java',
544: 1:      'valid': true
544: 1:    },
544: 1:    {
544: 1:      'answer': 'en',
544: 1:      'question': 'OpenAI',
544: 1:      'valid': true
544: 1:    },
544: 1:    {
544: 1:      'answer': 't',
544: 1:      'question': 'Testing',
544: 1:      'valid': true
544: 1:    },
544: 1:    {
544: 1:      'answer': 't',
544: 1:      'question': 'ChatGPT',
544: 1:      'valid': true
544: 1:    },
544: 1:    {
544: 1:      'answer': 'a',
544: 1:      'question': 'Programming',
544: 1:      'valid': true
544: 1:    },
544: 1:    {
544: 1:      'answer': 'r',
544: 1:      'question': 'Algorithm',
544: 1:      'valid': true
544: 1:    },
544: 1:    {
544: 1:      'answer': 'ru',
544: 1:      'question': 'DataStructures',
544: 1:      'valid': true
544: 1:    },
544: 1:    {
544: 1:      'answer': ' ',
544: 1:      'question': 'Hello, World!',
544: 1:      'valid': true
544: 1:    },
544: 1:    {
544: 1:      'answer': ' ',
544: 1:      'question': 'Java is awesome',
544: 1:      'valid': true
544: 1:    },
544: 1:    {
544: 1:      'answer': ' C',
544: 1:      'question': 'OpenAI ChatGPT',
544: 1:      'valid': true
544: 1:    }
544: 1:  ],
544: 1:  'info': [
544: 1:    '✅f(test) = es',
544: 1:    '✅f(testing) = t',
544: 1:    '✅f(middle) = dd',
544: 1:    '✅f(A) = A',
544: 1:    '✅f(Hello) = l',
544: 1:    '✅f(Java) = av',
544: 1:    '✅f(OpenAI) = en',
544: 1:    '✅f(Testing) = t',
544: 1:    '✅f(ChatGPT) = t',
544: 1:    '✅f(Programming) = a',
544: 1:    '✅f(Algorithm) = r',
544: 1:    '✅f(DataStructures) = ru',
544: 1:    '✅f(Hello, World!) =  ',
544: 1:    '✅f(Java is awesome) =  ',
544: 1:    '✅f(OpenAI ChatGPT) =  C',
544: 1:    '❌f(12345) = ??? != 3'
544: 1:  ],
544: 1:  'level': 19,
544: 1:  'nextQuestion': '12345',
544: 1:  'questions': [
544: 1:    'test',
544: 1:    'testing',
544: 1:    'middle',
544: 1:    'A',
544: 1:    'Hello',
544: 1:    'Java',
544: 1:    'OpenAI',
544: 1:    'Testing',
544: 1:    'ChatGPT',
544: 1:    'Programming',
544: 1:    'Algorithm',
544: 1:    'DataStructures',
544: 1:    'Hello, World!',
544: 1:    'Java is awesome',
544: 1:    'OpenAI ChatGPT',
544: 1:    '12345'
544: 1:  ]
544: 1:}
544: 1:Scores: 36581
544: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't', 't', 'a', 'r', 'ru', ' ', ' ', ' C', '3']')
544: 1:Fire Event: PassTest{complexity=25, testCount=22}
------------------------------------------
545: 1:BoardData {
545: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
545: 1:  'expectedAnswer': 'C',
545: 1:  'history': [
545: 1:    {
545: 1:      'answer': 'es',
545: 1:      'question': 'test',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': 't',
545: 1:      'question': 'testing',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': 'dd',
545: 1:      'question': 'middle',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': 'A',
545: 1:      'question': 'A',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': 'l',
545: 1:      'question': 'Hello',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': 'av',
545: 1:      'question': 'Java',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': 'en',
545: 1:      'question': 'OpenAI',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': 't',
545: 1:      'question': 'Testing',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': 't',
545: 1:      'question': 'ChatGPT',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': 'a',
545: 1:      'question': 'Programming',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': 'r',
545: 1:      'question': 'Algorithm',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': 'ru',
545: 1:      'question': 'DataStructures',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': ' ',
545: 1:      'question': 'Hello, World!',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': ' ',
545: 1:      'question': 'Java is awesome',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': ' C',
545: 1:      'question': 'OpenAI ChatGPT',
545: 1:      'valid': true
545: 1:    },
545: 1:    {
545: 1:      'answer': '3',
545: 1:      'question': '12345',
545: 1:      'valid': true
545: 1:    }
545: 1:  ],
545: 1:  'info': [
545: 1:    '✅f(test) = es',
545: 1:    '✅f(testing) = t',
545: 1:    '✅f(middle) = dd',
545: 1:    '✅f(A) = A',
545: 1:    '✅f(Hello) = l',
545: 1:    '✅f(Java) = av',
545: 1:    '✅f(OpenAI) = en',
545: 1:    '✅f(Testing) = t',
545: 1:    '✅f(ChatGPT) = t',
545: 1:    '✅f(Programming) = a',
545: 1:    '✅f(Algorithm) = r',
545: 1:    '✅f(DataStructures) = ru',
545: 1:    '✅f(Hello, World!) =  ',
545: 1:    '✅f(Java is awesome) =  ',
545: 1:    '✅f(OpenAI ChatGPT) =  C',
545: 1:    '✅f(12345) = 3',
545: 1:    '❌f(ABCDE) = ??? != C'
545: 1:  ],
545: 1:  'level': 19,
545: 1:  'nextQuestion': 'ABCDE',
545: 1:  'questions': [
545: 1:    'test',
545: 1:    'testing',
545: 1:    'middle',
545: 1:    'A',
545: 1:    'Hello',
545: 1:    'Java',
545: 1:    'OpenAI',
545: 1:    'Testing',
545: 1:    'ChatGPT',
545: 1:    'Programming',
545: 1:    'Algorithm',
545: 1:    'DataStructures',
545: 1:    'Hello, World!',
545: 1:    'Java is awesome',
545: 1:    'OpenAI ChatGPT',
545: 1:    '12345',
545: 1:    'ABCDE'
545: 1:  ]
545: 1:}
545: 1:Scores: 36592
545: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't', 't', 'a', 'r', 'ru', ' ', ' ', ' C', '3', 'C']')
545: 1:Fire Event: PassTest{complexity=25, testCount=22}
------------------------------------------
546: 1:BoardData {
546: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
546: 1:  'expectedAnswer': 'n',
546: 1:  'history': [
546: 1:    {
546: 1:      'answer': 'es',
546: 1:      'question': 'test',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': 't',
546: 1:      'question': 'testing',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': 'dd',
546: 1:      'question': 'middle',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': 'A',
546: 1:      'question': 'A',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': 'l',
546: 1:      'question': 'Hello',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': 'av',
546: 1:      'question': 'Java',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': 'en',
546: 1:      'question': 'OpenAI',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': 't',
546: 1:      'question': 'Testing',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': 't',
546: 1:      'question': 'ChatGPT',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': 'a',
546: 1:      'question': 'Programming',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': 'r',
546: 1:      'question': 'Algorithm',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': 'ru',
546: 1:      'question': 'DataStructures',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': ' ',
546: 1:      'question': 'Hello, World!',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': ' ',
546: 1:      'question': 'Java is awesome',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': ' C',
546: 1:      'question': 'OpenAI ChatGPT',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': '3',
546: 1:      'question': '12345',
546: 1:      'valid': true
546: 1:    },
546: 1:    {
546: 1:      'answer': 'C',
546: 1:      'question': 'ABCDE',
546: 1:      'valid': true
546: 1:    }
546: 1:  ],
546: 1:  'info': [
546: 1:    '✅f(test) = es',
546: 1:    '✅f(testing) = t',
546: 1:    '✅f(middle) = dd',
546: 1:    '✅f(A) = A',
546: 1:    '✅f(Hello) = l',
546: 1:    '✅f(Java) = av',
546: 1:    '✅f(OpenAI) = en',
546: 1:    '✅f(Testing) = t',
546: 1:    '✅f(ChatGPT) = t',
546: 1:    '✅f(Programming) = a',
546: 1:    '✅f(Algorithm) = r',
546: 1:    '✅f(DataStructures) = ru',
546: 1:    '✅f(Hello, World!) =  ',
546: 1:    '✅f(Java is awesome) =  ',
546: 1:    '✅f(OpenAI ChatGPT) =  C',
546: 1:    '✅f(12345) = 3',
546: 1:    '✅f(ABCDE) = C',
546: 1:    '❌f(Testing 123) = ??? != n'
546: 1:  ],
546: 1:  'level': 19,
546: 1:  'nextQuestion': 'Testing 123',
546: 1:  'questions': [
546: 1:    'test',
546: 1:    'testing',
546: 1:    'middle',
546: 1:    'A',
546: 1:    'Hello',
546: 1:    'Java',
546: 1:    'OpenAI',
546: 1:    'Testing',
546: 1:    'ChatGPT',
546: 1:    'Programming',
546: 1:    'Algorithm',
546: 1:    'DataStructures',
546: 1:    'Hello, World!',
546: 1:    'Java is awesome',
546: 1:    'OpenAI ChatGPT',
546: 1:    '12345',
546: 1:    'ABCDE',
546: 1:    'Testing 123'
546: 1:  ]
546: 1:}
546: 1:Scores: 36603
546: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't', 't', 'a', 'r', 'ru', ' ', ' ', ' C', '3', 'C', 'n']')
546: 1:Fire Event: PassTest{complexity=25, testCount=22}
------------------------------------------
547: 1:BoardData {
547: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
547: 1:  'expectedAnswer': ' ',
547: 1:  'history': [
547: 1:    {
547: 1:      'answer': 'es',
547: 1:      'question': 'test',
547: 1:      'valid': true
547: 1:    },
547: 1:    {
547: 1:      'answer': 't',
547: 1:      'question': 'testing',
547: 1:      'valid': true
547: 1:    },
547: 1:    {
547: 1:      'answer': 'dd',
547: 1:      'question': 'middle',
547: 1:      'valid': true
547: 1:    },
547: 1:    {
547: 1:      'answer': 'A',
547: 1:      'question': 'A',
547: 1:      'valid': true
547: 1:    },
547: 1:    {
547: 1:      'answer': 'l',
547: 1:      'question': 'Hello',
547: 1:      'valid': true
547: 1:    },
547: 1:    {
547: 1:      'answer': 'av',
547: 1:      'question': 'Java',
547: 1:      'valid': true
547: 1:    },
547: 1:    {
547: 1:      'answer': 'en',
547: 1:      'question': 'OpenAI',
547: 1:      'valid': true
547: 1:    },
547: 1:    {
547: 1:      'answer': 't',
547: 1:      'question': 'Testing',
547: 1:      'valid': true
547: 1:    },
547: 1:    {
547: 1:      'answer': 't',
547: 1:      'question': 'ChatGPT',
547: 1:      'valid': true
547: 1:    },
547: 1:    {
547: 1:      'answer': 'a',
547: 1:      'question': 'Programming',
547: 1:      'valid': true
547: 1:    },
547: 1:    {
547: 1:      'answer': 'r',
547: 1:      'question': 'Algorithm',
547: 1:      'valid': true
547: 1:    },
547: 1:    {
547: 1:      'answer': 'ru',
547: 1:      'question': 'DataStructures',
547: 1:      'valid': true
547: 1:    },
547: 1:    {
547: 1:      'answer': ' ',
547: 1:      'question': 'Hello, World!',
547: 1:      'valid': true
547: 1:    },
547: 1:    {
547: 1:      'answer': ' ',
547: 1:      'question': 'Java is awesome',
547: 1:      'valid': true
547: 1:    },
547: 1:    {
547: 1:      'answer': ' C',
547: 1:      'question': 'OpenAI ChatGPT',
547: 1:      'valid': true
547: 1:    },
547: 1:    {
547: 1:      'answer': '3',
547: 1:      'question': '12345',
547: 1:      'valid': true
547: 1:    },
547: 1:    {
547: 1:      'answer': 'C',
547: 1:      'question': 'ABCDE',
547: 1:      'valid': true
547: 1:    },
547: 1:    {
547: 1:      'answer': 'n',
547: 1:      'question': 'Testing 123',
547: 1:      'valid': true
547: 1:    }
547: 1:  ],
547: 1:  'info': [
547: 1:    '✅f(test) = es',
547: 1:    '✅f(testing) = t',
547: 1:    '✅f(middle) = dd',
547: 1:    '✅f(A) = A',
547: 1:    '✅f(Hello) = l',
547: 1:    '✅f(Java) = av',
547: 1:    '✅f(OpenAI) = en',
547: 1:    '✅f(Testing) = t',
547: 1:    '✅f(ChatGPT) = t',
547: 1:    '✅f(Programming) = a',
547: 1:    '✅f(Algorithm) = r',
547: 1:    '✅f(DataStructures) = ru',
547: 1:    '✅f(Hello, World!) =  ',
547: 1:    '✅f(Java is awesome) =  ',
547: 1:    '✅f(OpenAI ChatGPT) =  C',
547: 1:    '✅f(12345) = 3',
547: 1:    '✅f(ABCDE) = C',
547: 1:    '✅f(Testing 123) = n',
547: 1:    '❌f(Hello World) = ??? !=  '
547: 1:  ],
547: 1:  'level': 19,
547: 1:  'nextQuestion': 'Hello World',
547: 1:  'questions': [
547: 1:    'test',
547: 1:    'testing',
547: 1:    'middle',
547: 1:    'A',
547: 1:    'Hello',
547: 1:    'Java',
547: 1:    'OpenAI',
547: 1:    'Testing',
547: 1:    'ChatGPT',
547: 1:    'Programming',
547: 1:    'Algorithm',
547: 1:    'DataStructures',
547: 1:    'Hello, World!',
547: 1:    'Java is awesome',
547: 1:    'OpenAI ChatGPT',
547: 1:    '12345',
547: 1:    'ABCDE',
547: 1:    'Testing 123',
547: 1:    'Hello World'
547: 1:  ]
547: 1:}
547: 1:Scores: 36614
547: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't', 't', 'a', 'r', 'ru', ' ', ' ', ' C', '3', 'C', 'n', ' ']')
547: 1:Fire Event: PassTest{complexity=25, testCount=22}
------------------------------------------
548: 1:BoardData {
548: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
548: 1:  'expectedAnswer': ' ',
548: 1:  'history': [
548: 1:    {
548: 1:      'answer': 'es',
548: 1:      'question': 'test',
548: 1:      'valid': true
548: 1:    },
548: 1:    {
548: 1:      'answer': 't',
548: 1:      'question': 'testing',
548: 1:      'valid': true
548: 1:    },
548: 1:    {
548: 1:      'answer': 'dd',
548: 1:      'question': 'middle',
548: 1:      'valid': true
548: 1:    },
548: 1:    {
548: 1:      'answer': 'A',
548: 1:      'question': 'A',
548: 1:      'valid': true
548: 1:    },
548: 1:    {
548: 1:      'answer': 'l',
548: 1:      'question': 'Hello',
548: 1:      'valid': true
548: 1:    },
548: 1:    {
548: 1:      'answer': 'av',
548: 1:      'question': 'Java',
548: 1:      'valid': true
548: 1:    },
548: 1:    {
548: 1:      'answer': 'en',
548: 1:      'question': 'OpenAI',
548: 1:      'valid': true
548: 1:    },
548: 1:    {
548: 1:      'answer': 't',
548: 1:      'question': 'Testing',
548: 1:      'valid': true
548: 1:    },
548: 1:    {
548: 1:      'answer': 't',
548: 1:      'question': 'ChatGPT',
548: 1:      'valid': true
548: 1:    },
548: 1:    {
548: 1:      'answer': 'a',
548: 1:      'question': 'Programming',
548: 1:      'valid': true
548: 1:    },
548: 1:    {
548: 1:      'answer': 'r',
548: 1:      'question': 'Algorithm',
548: 1:      'valid': true
548: 1:    },
548: 1:    {
548: 1:      'answer': 'ru',
548: 1:      'question': 'DataStructures',
548: 1:      'valid': true
548: 1:    },
548: 1:    {
548: 1:      'answer': ' ',
548: 1:      'question': 'Hello, World!',
548: 1:      'valid': true
548: 1:    },
548: 1:    {
548: 1:      'answer': ' ',
548: 1:      'question': 'Java is awesome',
548: 1:      'valid': true
548: 1:    },
548: 1:    {
548: 1:      'answer': ' C',
548: 1:      'question': 'OpenAI ChatGPT',
548: 1:      'valid': true
548: 1:    },
548: 1:    {
548: 1:      'answer': '3',
548: 1:      'question': '12345',
548: 1:      'valid': true
548: 1:    },
548: 1:    {
548: 1:      'answer': 'C',
548: 1:      'question': 'ABCDE',
548: 1:      'valid': true
548: 1:    },
548: 1:    {
548: 1:      'answer': 'n',
548: 1:      'question': 'Testing 123',
548: 1:      'valid': true
548: 1:    },
548: 1:    {
548: 1:      'answer': ' ',
548: 1:      'question': 'Hello World',
548: 1:      'valid': true
548: 1:    }
548: 1:  ],
548: 1:  'info': [
548: 1:    '✅f(test) = es',
548: 1:    '✅f(testing) = t',
548: 1:    '✅f(middle) = dd',
548: 1:    '✅f(A) = A',
548: 1:    '✅f(Hello) = l',
548: 1:    '✅f(Java) = av',
548: 1:    '✅f(OpenAI) = en',
548: 1:    '✅f(Testing) = t',
548: 1:    '✅f(ChatGPT) = t',
548: 1:    '✅f(Programming) = a',
548: 1:    '✅f(Algorithm) = r',
548: 1:    '✅f(DataStructures) = ru',
548: 1:    '✅f(Hello, World!) =  ',
548: 1:    '✅f(Java is awesome) =  ',
548: 1:    '✅f(OpenAI ChatGPT) =  C',
548: 1:    '✅f(12345) = 3',
548: 1:    '✅f(ABCDE) = C',
548: 1:    '✅f(Testing 123) = n',
548: 1:    '✅f(Hello World) =  ',
548: 1:    '❌f(Java Code) = ??? !=  '
548: 1:  ],
548: 1:  'level': 19,
548: 1:  'nextQuestion': 'Java Code',
548: 1:  'questions': [
548: 1:    'test',
548: 1:    'testing',
548: 1:    'middle',
548: 1:    'A',
548: 1:    'Hello',
548: 1:    'Java',
548: 1:    'OpenAI',
548: 1:    'Testing',
548: 1:    'ChatGPT',
548: 1:    'Programming',
548: 1:    'Algorithm',
548: 1:    'DataStructures',
548: 1:    'Hello, World!',
548: 1:    'Java is awesome',
548: 1:    'OpenAI ChatGPT',
548: 1:    '12345',
548: 1:    'ABCDE',
548: 1:    'Testing 123',
548: 1:    'Hello World',
548: 1:    'Java Code'
548: 1:  ]
548: 1:}
548: 1:Scores: 36625
548: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't', 't', 'a', 'r', 'ru', ' ', ' ', ' C', '3', 'C', 'n', ' ', ' ']')
548: 1:Fire Event: PassTest{complexity=25, testCount=22}
------------------------------------------
549: 1:BoardData {
549: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
549: 1:  'expectedAnswer': 'I ',
549: 1:  'history': [
549: 1:    {
549: 1:      'answer': 'es',
549: 1:      'question': 'test',
549: 1:      'valid': true
549: 1:    },
549: 1:    {
549: 1:      'answer': 't',
549: 1:      'question': 'testing',
549: 1:      'valid': true
549: 1:    },
549: 1:    {
549: 1:      'answer': 'dd',
549: 1:      'question': 'middle',
549: 1:      'valid': true
549: 1:    },
549: 1:    {
549: 1:      'answer': 'A',
549: 1:      'question': 'A',
549: 1:      'valid': true
549: 1:    },
549: 1:    {
549: 1:      'answer': 'l',
549: 1:      'question': 'Hello',
549: 1:      'valid': true
549: 1:    },
549: 1:    {
549: 1:      'answer': 'av',
549: 1:      'question': 'Java',
549: 1:      'valid': true
549: 1:    },
549: 1:    {
549: 1:      'answer': 'en',
549: 1:      'question': 'OpenAI',
549: 1:      'valid': true
549: 1:    },
549: 1:    {
549: 1:      'answer': 't',
549: 1:      'question': 'Testing',
549: 1:      'valid': true
549: 1:    },
549: 1:    {
549: 1:      'answer': 't',
549: 1:      'question': 'ChatGPT',
549: 1:      'valid': true
549: 1:    },
549: 1:    {
549: 1:      'answer': 'a',
549: 1:      'question': 'Programming',
549: 1:      'valid': true
549: 1:    },
549: 1:    {
549: 1:      'answer': 'r',
549: 1:      'question': 'Algorithm',
549: 1:      'valid': true
549: 1:    },
549: 1:    {
549: 1:      'answer': 'ru',
549: 1:      'question': 'DataStructures',
549: 1:      'valid': true
549: 1:    },
549: 1:    {
549: 1:      'answer': ' ',
549: 1:      'question': 'Hello, World!',
549: 1:      'valid': true
549: 1:    },
549: 1:    {
549: 1:      'answer': ' ',
549: 1:      'question': 'Java is awesome',
549: 1:      'valid': true
549: 1:    },
549: 1:    {
549: 1:      'answer': ' C',
549: 1:      'question': 'OpenAI ChatGPT',
549: 1:      'valid': true
549: 1:    },
549: 1:    {
549: 1:      'answer': '3',
549: 1:      'question': '12345',
549: 1:      'valid': true
549: 1:    },
549: 1:    {
549: 1:      'answer': 'C',
549: 1:      'question': 'ABCDE',
549: 1:      'valid': true
549: 1:    },
549: 1:    {
549: 1:      'answer': 'n',
549: 1:      'question': 'Testing 123',
549: 1:      'valid': true
549: 1:    },
549: 1:    {
549: 1:      'answer': ' ',
549: 1:      'question': 'Hello World',
549: 1:      'valid': true
549: 1:    },
549: 1:    {
549: 1:      'answer': ' ',
549: 1:      'question': 'Java Code',
549: 1:      'valid': true
549: 1:    }
549: 1:  ],
549: 1:  'info': [
549: 1:    '✅f(test) = es',
549: 1:    '✅f(testing) = t',
549: 1:    '✅f(middle) = dd',
549: 1:    '✅f(A) = A',
549: 1:    '✅f(Hello) = l',
549: 1:    '✅f(Java) = av',
549: 1:    '✅f(OpenAI) = en',
549: 1:    '✅f(Testing) = t',
549: 1:    '✅f(ChatGPT) = t',
549: 1:    '✅f(Programming) = a',
549: 1:    '✅f(Algorithm) = r',
549: 1:    '✅f(DataStructures) = ru',
549: 1:    '✅f(Hello, World!) =  ',
549: 1:    '✅f(Java is awesome) =  ',
549: 1:    '✅f(OpenAI ChatGPT) =  C',
549: 1:    '✅f(12345) = 3',
549: 1:    '✅f(ABCDE) = C',
549: 1:    '✅f(Testing 123) = n',
549: 1:    '✅f(Hello World) =  ',
549: 1:    '✅f(Java Code) =  ',
549: 1:    '❌f(OpenAI Model) = ??? != I '
549: 1:  ],
549: 1:  'level': 19,
549: 1:  'nextQuestion': 'OpenAI Model',
549: 1:  'questions': [
549: 1:    'test',
549: 1:    'testing',
549: 1:    'middle',
549: 1:    'A',
549: 1:    'Hello',
549: 1:    'Java',
549: 1:    'OpenAI',
549: 1:    'Testing',
549: 1:    'ChatGPT',
549: 1:    'Programming',
549: 1:    'Algorithm',
549: 1:    'DataStructures',
549: 1:    'Hello, World!',
549: 1:    'Java is awesome',
549: 1:    'OpenAI ChatGPT',
549: 1:    '12345',
549: 1:    'ABCDE',
549: 1:    'Testing 123',
549: 1:    'Hello World',
549: 1:    'Java Code',
549: 1:    'OpenAI Model'
549: 1:  ]
549: 1:}
549: 1:Scores: 36636
549: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't', 't', 'a', 'r', 'ru', ' ', ' ', ' C', '3', 'C', 'n', ' ', ' ', 'I ']')
549: 1:Fire Event: PassTest{complexity=25, testCount=22}
------------------------------------------
550: 1:BoardData {
550: 1:  'description': ['You are going to be given a word. \nYour job is to return the middle character of the word. \nIf the word's length is odd, return the middle character. \nIf the word's length is even, return the middle 2 characters.\n#Examples:test=>es, testing=>t, middle=>dd, A=>A'],
550: 1:  'expectedAnswer': ' ',
550: 1:  'history': [
550: 1:    {
550: 1:      'answer': 'es',
550: 1:      'question': 'test',
550: 1:      'valid': true
550: 1:    },
550: 1:    {
550: 1:      'answer': 't',
550: 1:      'question': 'testing',
550: 1:      'valid': true
550: 1:    },
550: 1:    {
550: 1:      'answer': 'dd',
550: 1:      'question': 'middle',
550: 1:      'valid': true
550: 1:    },
550: 1:    {
550: 1:      'answer': 'A',
550: 1:      'question': 'A',
550: 1:      'valid': true
550: 1:    },
550: 1:    {
550: 1:      'answer': 'l',
550: 1:      'question': 'Hello',
550: 1:      'valid': true
550: 1:    },
550: 1:    {
550: 1:      'answer': 'av',
550: 1:      'question': 'Java',
550: 1:      'valid': true
550: 1:    },
550: 1:    {
550: 1:      'answer': 'en',
550: 1:      'question': 'OpenAI',
550: 1:      'valid': true
550: 1:    },
550: 1:    {
550: 1:      'answer': 't',
550: 1:      'question': 'Testing',
550: 1:      'valid': true
550: 1:    },
550: 1:    {
550: 1:      'answer': 't',
550: 1:      'question': 'ChatGPT',
550: 1:      'valid': true
550: 1:    },
550: 1:    {
550: 1:      'answer': 'a',
550: 1:      'question': 'Programming',
550: 1:      'valid': true
550: 1:    },
550: 1:    {
550: 1:      'answer': 'r',
550: 1:      'question': 'Algorithm',
550: 1:      'valid': true
550: 1:    },
550: 1:    {
550: 1:      'answer': 'ru',
550: 1:      'question': 'DataStructures',
550: 1:      'valid': true
550: 1:    },
550: 1:    {
550: 1:      'answer': ' ',
550: 1:      'question': 'Hello, World!',
550: 1:      'valid': true
550: 1:    },
550: 1:    {
550: 1:      'answer': ' ',
550: 1:      'question': 'Java is awesome',
550: 1:      'valid': true
550: 1:    },
550: 1:    {
550: 1:      'answer': ' C',
550: 1:      'question': 'OpenAI ChatGPT',
550: 1:      'valid': true
550: 1:    },
550: 1:    {
550: 1:      'answer': '3',
550: 1:      'question': '12345',
550: 1:      'valid': true
550: 1:    },
550: 1:    {
550: 1:      'answer': 'C',
550: 1:      'question': 'ABCDE',
550: 1:      'valid': true
550: 1:    },
550: 1:    {
550: 1:      'answer': 'n',
550: 1:      'question': 'Testing 123',
550: 1:      'valid': true
550: 1:    },
550: 1:    {
550: 1:      'answer': ' ',
550: 1:      'question': 'Hello World',
550: 1:      'valid': true
550: 1:    },
550: 1:    {
550: 1:      'answer': ' ',
550: 1:      'question': 'Java Code',
550: 1:      'valid': true
550: 1:    },
550: 1:    {
550: 1:      'answer': 'I ',
550: 1:      'question': 'OpenAI Model',
550: 1:      'valid': true
550: 1:    }
550: 1:  ],
550: 1:  'info': [
550: 1:    '✅f(test) = es',
550: 1:    '✅f(testing) = t',
550: 1:    '✅f(middle) = dd',
550: 1:    '✅f(A) = A',
550: 1:    '✅f(Hello) = l',
550: 1:    '✅f(Java) = av',
550: 1:    '✅f(OpenAI) = en',
550: 1:    '✅f(Testing) = t',
550: 1:    '✅f(ChatGPT) = t',
550: 1:    '✅f(Programming) = a',
550: 1:    '✅f(Algorithm) = r',
550: 1:    '✅f(DataStructures) = ru',
550: 1:    '✅f(Hello, World!) =  ',
550: 1:    '✅f(Java is awesome) =  ',
550: 1:    '✅f(OpenAI ChatGPT) =  C',
550: 1:    '✅f(12345) = 3',
550: 1:    '✅f(ABCDE) = C',
550: 1:    '✅f(Testing 123) = n',
550: 1:    '✅f(Hello World) =  ',
550: 1:    '✅f(Java Code) =  ',
550: 1:    '✅f(OpenAI Model) = I ',
550: 1:    '❌f(Lorem Ipsum) = ??? !=  '
550: 1:  ],
550: 1:  'level': 19,
550: 1:  'nextQuestion': 'Lorem Ipsum',
550: 1:  'questions': [
550: 1:    'test',
550: 1:    'testing',
550: 1:    'middle',
550: 1:    'A',
550: 1:    'Hello',
550: 1:    'Java',
550: 1:    'OpenAI',
550: 1:    'Testing',
550: 1:    'ChatGPT',
550: 1:    'Programming',
550: 1:    'Algorithm',
550: 1:    'DataStructures',
550: 1:    'Hello, World!',
550: 1:    'Java is awesome',
550: 1:    'OpenAI ChatGPT',
550: 1:    '12345',
550: 1:    'ABCDE',
550: 1:    'Testing 123',
550: 1:    'Hello World',
550: 1:    'Java Code',
550: 1:    'OpenAI Model',
550: 1:    'Lorem Ipsum'
550: 1:  ]
550: 1:}
550: 1:Scores: 36647
550: 1:Answer: message('['es', 't', 'dd', 'A', 'l', 'av', 'en', 't', 't', 'a', 'r', 'ru', ' ', ' ', ' C', '3', 'C', 'n', ' ', ' ', 'I ', ' ']')
550: 1:Fire Event: PassTest{complexity=25, testCount=22}
550: 1:Fire Event: NextAlgorithm{complexity=25, time=0}
------------------------------------------
551: 1:BoardData {
551: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
551: 1:  'history': [
551: 1:    {
551: 1:      'answer': 'es',
551: 1:      'question': 'test',
551: 1:      'valid': true
551: 1:    },
551: 1:    {
551: 1:      'answer': 't',
551: 1:      'question': 'testing',
551: 1:      'valid': true
551: 1:    },
551: 1:    {
551: 1:      'answer': 'dd',
551: 1:      'question': 'middle',
551: 1:      'valid': true
551: 1:    },
551: 1:    {
551: 1:      'answer': 'A',
551: 1:      'question': 'A',
551: 1:      'valid': true
551: 1:    },
551: 1:    {
551: 1:      'answer': 'l',
551: 1:      'question': 'Hello',
551: 1:      'valid': true
551: 1:    },
551: 1:    {
551: 1:      'answer': 'av',
551: 1:      'question': 'Java',
551: 1:      'valid': true
551: 1:    },
551: 1:    {
551: 1:      'answer': 'en',
551: 1:      'question': 'OpenAI',
551: 1:      'valid': true
551: 1:    },
551: 1:    {
551: 1:      'answer': 't',
551: 1:      'question': 'Testing',
551: 1:      'valid': true
551: 1:    },
551: 1:    {
551: 1:      'answer': 't',
551: 1:      'question': 'ChatGPT',
551: 1:      'valid': true
551: 1:    },
551: 1:    {
551: 1:      'answer': 'a',
551: 1:      'question': 'Programming',
551: 1:      'valid': true
551: 1:    },
551: 1:    {
551: 1:      'answer': 'r',
551: 1:      'question': 'Algorithm',
551: 1:      'valid': true
551: 1:    },
551: 1:    {
551: 1:      'answer': 'ru',
551: 1:      'question': 'DataStructures',
551: 1:      'valid': true
551: 1:    },
551: 1:    {
551: 1:      'answer': ' ',
551: 1:      'question': 'Hello, World!',
551: 1:      'valid': true
551: 1:    },
551: 1:    {
551: 1:      'answer': ' ',
551: 1:      'question': 'Java is awesome',
551: 1:      'valid': true
551: 1:    },
551: 1:    {
551: 1:      'answer': ' C',
551: 1:      'question': 'OpenAI ChatGPT',
551: 1:      'valid': true
551: 1:    },
551: 1:    {
551: 1:      'answer': '3',
551: 1:      'question': '12345',
551: 1:      'valid': true
551: 1:    },
551: 1:    {
551: 1:      'answer': 'C',
551: 1:      'question': 'ABCDE',
551: 1:      'valid': true
551: 1:    },
551: 1:    {
551: 1:      'answer': 'n',
551: 1:      'question': 'Testing 123',
551: 1:      'valid': true
551: 1:    },
551: 1:    {
551: 1:      'answer': ' ',
551: 1:      'question': 'Hello World',
551: 1:      'valid': true
551: 1:    },
551: 1:    {
551: 1:      'answer': ' ',
551: 1:      'question': 'Java Code',
551: 1:      'valid': true
551: 1:    },
551: 1:    {
551: 1:      'answer': 'I ',
551: 1:      'question': 'OpenAI Model',
551: 1:      'valid': true
551: 1:    },
551: 1:    {
551: 1:      'answer': ' ',
551: 1:      'question': 'Lorem Ipsum',
551: 1:      'valid': true
551: 1:    }
551: 1:  ],
551: 1:  'info': [
551: 1:    '✅f(test) = es',
551: 1:    '✅f(testing) = t',
551: 1:    '✅f(middle) = dd',
551: 1:    '✅f(A) = A',
551: 1:    '✅f(Hello) = l',
551: 1:    '✅f(Java) = av',
551: 1:    '✅f(OpenAI) = en',
551: 1:    '✅f(Testing) = t',
551: 1:    '✅f(ChatGPT) = t',
551: 1:    '✅f(Programming) = a',
551: 1:    '✅f(Algorithm) = r',
551: 1:    '✅f(DataStructures) = ru',
551: 1:    '✅f(Hello, World!) =  ',
551: 1:    '✅f(Java is awesome) =  ',
551: 1:    '✅f(OpenAI ChatGPT) =  C',
551: 1:    '✅f(12345) = 3',
551: 1:    '✅f(ABCDE) = C',
551: 1:    '✅f(Testing 123) = n',
551: 1:    '✅f(Hello World) =  ',
551: 1:    '✅f(Java Code) =  ',
551: 1:    '✅f(OpenAI Model) = I ',
551: 1:    '✅f(Lorem Ipsum) =  '
551: 1:  ],
551: 1:  'level': 19,
551: 1:  'questions': []
551: 1:}
551: 1:Scores: 40032
551: 1:Answer: message('StartNextLevel')
551: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
552: 1:BoardData {
552: 1:  'description': ['Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702'],
552: 1:  'expectedAnswer': '222',
552: 1:  'history': [],
552: 1:  'info': ['❌f(111) = ??? != 222'],
552: 1:  'level': 20,
552: 1:  'nextQuestion': '111',
552: 1:  'questions': ['111']
552: 1:}
552: 1:Scores: 40032
552: 1:Answer: message('['222']')
552: 1:Fire Event: PassTest{complexity=26, testCount=12}
------------------------------------------
553: 1:BoardData {
553: 1:  'description': ['Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702'],
553: 1:  'expectedAnswer': '333',
553: 1:  'history': [{
553: 1:    'answer': '222',
553: 1:    'question': '111',
553: 1:    'valid': true
553: 1:  }],
553: 1:  'info': [
553: 1:    '✅f(111) = 222',
553: 1:    '❌f(222) = ??? != 333'
553: 1:  ],
553: 1:  'level': 20,
553: 1:  'nextQuestion': '222',
553: 1:  'questions': [
553: 1:    '111',
553: 1:    '222'
553: 1:  ]
553: 1:}
553: 1:Scores: 40053
553: 1:Answer: message('['222', '333']')
553: 1:Fire Event: PassTest{complexity=26, testCount=12}
------------------------------------------
554: 1:BoardData {
554: 1:  'description': ['Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702'],
554: 1:  'expectedAnswer': '444',
554: 1:  'history': [
554: 1:    {
554: 1:      'answer': '222',
554: 1:      'question': '111',
554: 1:      'valid': true
554: 1:    },
554: 1:    {
554: 1:      'answer': '333',
554: 1:      'question': '222',
554: 1:      'valid': true
554: 1:    }
554: 1:  ],
554: 1:  'info': [
554: 1:    '✅f(111) = 222',
554: 1:    '✅f(222) = 333',
554: 1:    '❌f(333) = ??? != 444'
554: 1:  ],
554: 1:  'level': 20,
554: 1:  'nextQuestion': '333',
554: 1:  'questions': [
554: 1:    '111',
554: 1:    '222',
554: 1:    '333'
554: 1:  ]
554: 1:}
554: 1:Scores: 40074
554: 1:Answer: message('['222', '333', '444']')
554: 1:Fire Event: PassTest{complexity=26, testCount=12}
------------------------------------------
555: 1:BoardData {
555: 1:  'description': ['Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702'],
555: 1:  'expectedAnswer': '555',
555: 1:  'history': [
555: 1:    {
555: 1:      'answer': '222',
555: 1:      'question': '111',
555: 1:      'valid': true
555: 1:    },
555: 1:    {
555: 1:      'answer': '333',
555: 1:      'question': '222',
555: 1:      'valid': true
555: 1:    },
555: 1:    {
555: 1:      'answer': '444',
555: 1:      'question': '333',
555: 1:      'valid': true
555: 1:    }
555: 1:  ],
555: 1:  'info': [
555: 1:    '✅f(111) = 222',
555: 1:    '✅f(222) = 333',
555: 1:    '✅f(333) = 444',
555: 1:    '❌f(444) = ??? != 555'
555: 1:  ],
555: 1:  'level': 20,
555: 1:  'nextQuestion': '444',
555: 1:  'questions': [
555: 1:    '111',
555: 1:    '222',
555: 1:    '333',
555: 1:    '444'
555: 1:  ]
555: 1:}
555: 1:Scores: 40095
555: 1:Answer: message('['222', '333', '444', '555']')
555: 1:Fire Event: PassTest{complexity=26, testCount=12}
------------------------------------------
556: 1:BoardData {
556: 1:  'description': ['Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702'],
556: 1:  'expectedAnswer': '666',
556: 1:  'history': [
556: 1:    {
556: 1:      'answer': '222',
556: 1:      'question': '111',
556: 1:      'valid': true
556: 1:    },
556: 1:    {
556: 1:      'answer': '333',
556: 1:      'question': '222',
556: 1:      'valid': true
556: 1:    },
556: 1:    {
556: 1:      'answer': '444',
556: 1:      'question': '333',
556: 1:      'valid': true
556: 1:    },
556: 1:    {
556: 1:      'answer': '555',
556: 1:      'question': '444',
556: 1:      'valid': true
556: 1:    }
556: 1:  ],
556: 1:  'info': [
556: 1:    '✅f(111) = 222',
556: 1:    '✅f(222) = 333',
556: 1:    '✅f(333) = 444',
556: 1:    '✅f(444) = 555',
556: 1:    '❌f(555) = ??? != 666'
556: 1:  ],
556: 1:  'level': 20,
556: 1:  'nextQuestion': '555',
556: 1:  'questions': [
556: 1:    '111',
556: 1:    '222',
556: 1:    '333',
556: 1:    '444',
556: 1:    '555'
556: 1:  ]
556: 1:}
556: 1:Scores: 40116
556: 1:Answer: message('['222', '333', '444', '555', '666']')
556: 1:Fire Event: PassTest{complexity=26, testCount=12}
------------------------------------------
557: 1:BoardData {
557: 1:  'description': ['Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702'],
557: 1:  'expectedAnswer': '121',
557: 1:  'history': [
557: 1:    {
557: 1:      'answer': '222',
557: 1:      'question': '111',
557: 1:      'valid': true
557: 1:    },
557: 1:    {
557: 1:      'answer': '333',
557: 1:      'question': '222',
557: 1:      'valid': true
557: 1:    },
557: 1:    {
557: 1:      'answer': '444',
557: 1:      'question': '333',
557: 1:      'valid': true
557: 1:    },
557: 1:    {
557: 1:      'answer': '555',
557: 1:      'question': '444',
557: 1:      'valid': true
557: 1:    },
557: 1:    {
557: 1:      'answer': '666',
557: 1:      'question': '555',
557: 1:      'valid': true
557: 1:    }
557: 1:  ],
557: 1:  'info': [
557: 1:    '✅f(111) = 222',
557: 1:    '✅f(222) = 333',
557: 1:    '✅f(333) = 444',
557: 1:    '✅f(444) = 555',
557: 1:    '✅f(555) = 666',
557: 1:    '❌f(100) = ??? != 121'
557: 1:  ],
557: 1:  'level': 20,
557: 1:  'nextQuestion': '100',
557: 1:  'questions': [
557: 1:    '111',
557: 1:    '222',
557: 1:    '333',
557: 1:    '444',
557: 1:    '555',
557: 1:    '100'
557: 1:  ]
557: 1:}
557: 1:Scores: 40137
557: 1:Answer: message('['222', '333', '444', '555', '666', '121']')
557: 1:Fire Event: PassTest{complexity=26, testCount=12}
------------------------------------------
558: 1:BoardData {
558: 1:  'description': ['Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702'],
558: 1:  'expectedAnswer': '423',
558: 1:  'history': [
558: 1:    {
558: 1:      'answer': '222',
558: 1:      'question': '111',
558: 1:      'valid': true
558: 1:    },
558: 1:    {
558: 1:      'answer': '333',
558: 1:      'question': '222',
558: 1:      'valid': true
558: 1:    },
558: 1:    {
558: 1:      'answer': '444',
558: 1:      'question': '333',
558: 1:      'valid': true
558: 1:    },
558: 1:    {
558: 1:      'answer': '555',
558: 1:      'question': '444',
558: 1:      'valid': true
558: 1:    },
558: 1:    {
558: 1:      'answer': '666',
558: 1:      'question': '555',
558: 1:      'valid': true
558: 1:    },
558: 1:    {
558: 1:      'answer': '121',
558: 1:      'question': '100',
558: 1:      'valid': true
558: 1:    }
558: 1:  ],
558: 1:  'info': [
558: 1:    '✅f(111) = 222',
558: 1:    '✅f(222) = 333',
558: 1:    '✅f(333) = 444',
558: 1:    '✅f(444) = 555',
558: 1:    '✅f(555) = 666',
558: 1:    '✅f(100) = 121',
558: 1:    '❌f(123) = ??? != 423'
558: 1:  ],
558: 1:  'level': 20,
558: 1:  'nextQuestion': '123',
558: 1:  'questions': [
558: 1:    '111',
558: 1:    '222',
558: 1:    '333',
558: 1:    '444',
558: 1:    '555',
558: 1:    '100',
558: 1:    '123'
558: 1:  ]
558: 1:}
558: 1:Scores: 40158
558: 1:Answer: message('['222', '333', '444', '555', '666', '121', '423']')
558: 1:Fire Event: PassTest{complexity=26, testCount=12}
------------------------------------------
559: 1:BoardData {
559: 1:  'description': ['Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702'],
559: 1:  'expectedAnswer': '000',
559: 1:  'history': [
559: 1:    {
559: 1:      'answer': '222',
559: 1:      'question': '111',
559: 1:      'valid': true
559: 1:    },
559: 1:    {
559: 1:      'answer': '333',
559: 1:      'question': '222',
559: 1:      'valid': true
559: 1:    },
559: 1:    {
559: 1:      'answer': '444',
559: 1:      'question': '333',
559: 1:      'valid': true
559: 1:    },
559: 1:    {
559: 1:      'answer': '555',
559: 1:      'question': '444',
559: 1:      'valid': true
559: 1:    },
559: 1:    {
559: 1:      'answer': '666',
559: 1:      'question': '555',
559: 1:      'valid': true
559: 1:    },
559: 1:    {
559: 1:      'answer': '121',
559: 1:      'question': '100',
559: 1:      'valid': true
559: 1:    },
559: 1:    {
559: 1:      'answer': '423',
559: 1:      'question': '123',
559: 1:      'valid': true
559: 1:    }
559: 1:  ],
559: 1:  'info': [
559: 1:    '✅f(111) = 222',
559: 1:    '✅f(222) = 333',
559: 1:    '✅f(333) = 444',
559: 1:    '✅f(444) = 555',
559: 1:    '✅f(555) = 666',
559: 1:    '✅f(100) = 121',
559: 1:    '✅f(123) = 423',
559: 1:    '❌f(999) = ??? != 000'
559: 1:  ],
559: 1:  'level': 20,
559: 1:  'nextQuestion': '999',
559: 1:  'questions': [
559: 1:    '111',
559: 1:    '222',
559: 1:    '333',
559: 1:    '444',
559: 1:    '555',
559: 1:    '100',
559: 1:    '123',
559: 1:    '999'
559: 1:  ]
559: 1:}
559: 1:Scores: 40179
559: 1:Answer: message('['222', '333', '444', '555', '666', '121', '423', '000']')
559: 1:Fire Event: PassTest{complexity=26, testCount=12}
------------------------------------------
560: 1:BoardData {
560: 1:  'description': ['Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702'],
560: 1:  'expectedAnswer': '089',
560: 1:  'history': [
560: 1:    {
560: 1:      'answer': '222',
560: 1:      'question': '111',
560: 1:      'valid': true
560: 1:    },
560: 1:    {
560: 1:      'answer': '333',
560: 1:      'question': '222',
560: 1:      'valid': true
560: 1:    },
560: 1:    {
560: 1:      'answer': '444',
560: 1:      'question': '333',
560: 1:      'valid': true
560: 1:    },
560: 1:    {
560: 1:      'answer': '555',
560: 1:      'question': '444',
560: 1:      'valid': true
560: 1:    },
560: 1:    {
560: 1:      'answer': '666',
560: 1:      'question': '555',
560: 1:      'valid': true
560: 1:    },
560: 1:    {
560: 1:      'answer': '121',
560: 1:      'question': '100',
560: 1:      'valid': true
560: 1:    },
560: 1:    {
560: 1:      'answer': '423',
560: 1:      'question': '123',
560: 1:      'valid': true
560: 1:    },
560: 1:    {
560: 1:      'answer': '000',
560: 1:      'question': '999',
560: 1:      'valid': true
560: 1:    }
560: 1:  ],
560: 1:  'info': [
560: 1:    '✅f(111) = 222',
560: 1:    '✅f(222) = 333',
560: 1:    '✅f(333) = 444',
560: 1:    '✅f(444) = 555',
560: 1:    '✅f(555) = 666',
560: 1:    '✅f(100) = 121',
560: 1:    '✅f(123) = 423',
560: 1:    '✅f(999) = 000',
560: 1:    '❌f(789) = ??? != 089'
560: 1:  ],
560: 1:  'level': 20,
560: 1:  'nextQuestion': '789',
560: 1:  'questions': [
560: 1:    '111',
560: 1:    '222',
560: 1:    '333',
560: 1:    '444',
560: 1:    '555',
560: 1:    '100',
560: 1:    '123',
560: 1:    '999',
560: 1:    '789'
560: 1:  ]
560: 1:}
560: 1:Scores: 40200
560: 1:Answer: message('['222', '333', '444', '555', '666', '121', '423', '000', '089']')
560: 1:Fire Event: PassTest{complexity=26, testCount=12}
------------------------------------------
561: 1:BoardData {
561: 1:  'description': ['Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702'],
561: 1:  'expectedAnswer': '111',
561: 1:  'history': [
561: 1:    {
561: 1:      'answer': '222',
561: 1:      'question': '111',
561: 1:      'valid': true
561: 1:    },
561: 1:    {
561: 1:      'answer': '333',
561: 1:      'question': '222',
561: 1:      'valid': true
561: 1:    },
561: 1:    {
561: 1:      'answer': '444',
561: 1:      'question': '333',
561: 1:      'valid': true
561: 1:    },
561: 1:    {
561: 1:      'answer': '555',
561: 1:      'question': '444',
561: 1:      'valid': true
561: 1:    },
561: 1:    {
561: 1:      'answer': '666',
561: 1:      'question': '555',
561: 1:      'valid': true
561: 1:    },
561: 1:    {
561: 1:      'answer': '121',
561: 1:      'question': '100',
561: 1:      'valid': true
561: 1:    },
561: 1:    {
561: 1:      'answer': '423',
561: 1:      'question': '123',
561: 1:      'valid': true
561: 1:    },
561: 1:    {
561: 1:      'answer': '000',
561: 1:      'question': '999',
561: 1:      'valid': true
561: 1:    },
561: 1:    {
561: 1:      'answer': '089',
561: 1:      'question': '789',
561: 1:      'valid': true
561: 1:    }
561: 1:  ],
561: 1:  'info': [
561: 1:    '✅f(111) = 222',
561: 1:    '✅f(222) = 333',
561: 1:    '✅f(333) = 444',
561: 1:    '✅f(444) = 555',
561: 1:    '✅f(555) = 666',
561: 1:    '✅f(100) = 121',
561: 1:    '✅f(123) = 423',
561: 1:    '✅f(999) = 000',
561: 1:    '✅f(789) = 089',
561: 1:    '❌f(000) = ??? != 111'
561: 1:  ],
561: 1:  'level': 20,
561: 1:  'nextQuestion': '000',
561: 1:  'questions': [
561: 1:    '111',
561: 1:    '222',
561: 1:    '333',
561: 1:    '444',
561: 1:    '555',
561: 1:    '100',
561: 1:    '123',
561: 1:    '999',
561: 1:    '789',
561: 1:    '000'
561: 1:  ]
561: 1:}
561: 1:Scores: 40221
561: 1:Answer: message('['222', '333', '444', '555', '666', '121', '423', '000', '089', '111']')
561: 1:Fire Event: PassTest{complexity=26, testCount=12}
------------------------------------------
562: 1:BoardData {
562: 1:  'description': ['Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702'],
562: 1:  'expectedAnswer': '001',
562: 1:  'history': [
562: 1:    {
562: 1:      'answer': '222',
562: 1:      'question': '111',
562: 1:      'valid': true
562: 1:    },
562: 1:    {
562: 1:      'answer': '333',
562: 1:      'question': '222',
562: 1:      'valid': true
562: 1:    },
562: 1:    {
562: 1:      'answer': '444',
562: 1:      'question': '333',
562: 1:      'valid': true
562: 1:    },
562: 1:    {
562: 1:      'answer': '555',
562: 1:      'question': '444',
562: 1:      'valid': true
562: 1:    },
562: 1:    {
562: 1:      'answer': '666',
562: 1:      'question': '555',
562: 1:      'valid': true
562: 1:    },
562: 1:    {
562: 1:      'answer': '121',
562: 1:      'question': '100',
562: 1:      'valid': true
562: 1:    },
562: 1:    {
562: 1:      'answer': '423',
562: 1:      'question': '123',
562: 1:      'valid': true
562: 1:    },
562: 1:    {
562: 1:      'answer': '000',
562: 1:      'question': '999',
562: 1:      'valid': true
562: 1:    },
562: 1:    {
562: 1:      'answer': '089',
562: 1:      'question': '789',
562: 1:      'valid': true
562: 1:    },
562: 1:    {
562: 1:      'answer': '111',
562: 1:      'question': '000',
562: 1:      'valid': true
562: 1:    }
562: 1:  ],
562: 1:  'info': [
562: 1:    '✅f(111) = 222',
562: 1:    '✅f(222) = 333',
562: 1:    '✅f(333) = 444',
562: 1:    '✅f(444) = 555',
562: 1:    '✅f(555) = 666',
562: 1:    '✅f(100) = 121',
562: 1:    '✅f(123) = 423',
562: 1:    '✅f(999) = 000',
562: 1:    '✅f(789) = 089',
562: 1:    '✅f(000) = 111',
562: 1:    '❌f(909) = ??? != 001'
562: 1:  ],
562: 1:  'level': 20,
562: 1:  'nextQuestion': '909',
562: 1:  'questions': [
562: 1:    '111',
562: 1:    '222',
562: 1:    '333',
562: 1:    '444',
562: 1:    '555',
562: 1:    '100',
562: 1:    '123',
562: 1:    '999',
562: 1:    '789',
562: 1:    '000',
562: 1:    '909'
562: 1:  ]
562: 1:}
562: 1:Scores: 40242
562: 1:Answer: message('['222', '333', '444', '555', '666', '121', '423', '000', '089', '111', '001']')
562: 1:Fire Event: PassTest{complexity=26, testCount=12}
------------------------------------------
563: 1:BoardData {
563: 1:  'description': ['Order matters...\nYou need to work with three-digit numbers. \nSolve the algorithm for changing the number according to the given examples: \nExamples: 111=>222, 123=>423, 679=>078, 999=>000, 012=>312, 090=>110, 444=>555, 090=>110, 916=>702'],
563: 1:  'expectedAnswer': '110',
563: 1:  'history': [
563: 1:    {
563: 1:      'answer': '222',
563: 1:      'question': '111',
563: 1:      'valid': true
563: 1:    },
563: 1:    {
563: 1:      'answer': '333',
563: 1:      'question': '222',
563: 1:      'valid': true
563: 1:    },
563: 1:    {
563: 1:      'answer': '444',
563: 1:      'question': '333',
563: 1:      'valid': true
563: 1:    },
563: 1:    {
563: 1:      'answer': '555',
563: 1:      'question': '444',
563: 1:      'valid': true
563: 1:    },
563: 1:    {
563: 1:      'answer': '666',
563: 1:      'question': '555',
563: 1:      'valid': true
563: 1:    },
563: 1:    {
563: 1:      'answer': '121',
563: 1:      'question': '100',
563: 1:      'valid': true
563: 1:    },
563: 1:    {
563: 1:      'answer': '423',
563: 1:      'question': '123',
563: 1:      'valid': true
563: 1:    },
563: 1:    {
563: 1:      'answer': '000',
563: 1:      'question': '999',
563: 1:      'valid': true
563: 1:    },
563: 1:    {
563: 1:      'answer': '089',
563: 1:      'question': '789',
563: 1:      'valid': true
563: 1:    },
563: 1:    {
563: 1:      'answer': '111',
563: 1:      'question': '000',
563: 1:      'valid': true
563: 1:    },
563: 1:    {
563: 1:      'answer': '001',
563: 1:      'question': '909',
563: 1:      'valid': true
563: 1:    }
563: 1:  ],
563: 1:  'info': [
563: 1:    '✅f(111) = 222',
563: 1:    '✅f(222) = 333',
563: 1:    '✅f(333) = 444',
563: 1:    '✅f(444) = 555',
563: 1:    '✅f(555) = 666',
563: 1:    '✅f(100) = 121',
563: 1:    '✅f(123) = 423',
563: 1:    '✅f(999) = 000',
563: 1:    '✅f(789) = 089',
563: 1:    '✅f(000) = 111',
563: 1:    '✅f(909) = 001',
563: 1:    '❌f(090) = ??? != 110'
563: 1:  ],
563: 1:  'level': 20,
563: 1:  'nextQuestion': '090',
563: 1:  'questions': [
563: 1:    '111',
563: 1:    '222',
563: 1:    '333',
563: 1:    '444',
563: 1:    '555',
563: 1:    '100',
563: 1:    '123',
563: 1:    '999',
563: 1:    '789',
563: 1:    '000',
563: 1:    '909',
563: 1:    '090'
563: 1:  ]
563: 1:}
563: 1:Scores: 40263
563: 1:Answer: message('['222', '333', '444', '555', '666', '121', '423', '000', '089', '111', '001', '110']')
563: 1:Fire Event: PassTest{complexity=26, testCount=12}
563: 1:Fire Event: NextAlgorithm{complexity=26, time=0}
------------------------------------------
564: 1:BoardData {
564: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
564: 1:  'history': [
564: 1:    {
564: 1:      'answer': '222',
564: 1:      'question': '111',
564: 1:      'valid': true
564: 1:    },
564: 1:    {
564: 1:      'answer': '333',
564: 1:      'question': '222',
564: 1:      'valid': true
564: 1:    },
564: 1:    {
564: 1:      'answer': '444',
564: 1:      'question': '333',
564: 1:      'valid': true
564: 1:    },
564: 1:    {
564: 1:      'answer': '555',
564: 1:      'question': '444',
564: 1:      'valid': true
564: 1:    },
564: 1:    {
564: 1:      'answer': '666',
564: 1:      'question': '555',
564: 1:      'valid': true
564: 1:    },
564: 1:    {
564: 1:      'answer': '121',
564: 1:      'question': '100',
564: 1:      'valid': true
564: 1:    },
564: 1:    {
564: 1:      'answer': '423',
564: 1:      'question': '123',
564: 1:      'valid': true
564: 1:    },
564: 1:    {
564: 1:      'answer': '000',
564: 1:      'question': '999',
564: 1:      'valid': true
564: 1:    },
564: 1:    {
564: 1:      'answer': '089',
564: 1:      'question': '789',
564: 1:      'valid': true
564: 1:    },
564: 1:    {
564: 1:      'answer': '111',
564: 1:      'question': '000',
564: 1:      'valid': true
564: 1:    },
564: 1:    {
564: 1:      'answer': '001',
564: 1:      'question': '909',
564: 1:      'valid': true
564: 1:    },
564: 1:    {
564: 1:      'answer': '110',
564: 1:      'question': '090',
564: 1:      'valid': true
564: 1:    }
564: 1:  ],
564: 1:  'info': [
564: 1:    '✅f(111) = 222',
564: 1:    '✅f(222) = 333',
564: 1:    '✅f(333) = 444',
564: 1:    '✅f(444) = 555',
564: 1:    '✅f(555) = 666',
564: 1:    '✅f(100) = 121',
564: 1:    '✅f(123) = 423',
564: 1:    '✅f(999) = 000',
564: 1:    '✅f(789) = 089',
564: 1:    '✅f(000) = 111',
564: 1:    '✅f(909) = 001',
564: 1:    '✅f(090) = 110'
564: 1:  ],
564: 1:  'level': 20,
564: 1:  'questions': []
564: 1:}
564: 1:Scores: 43793
564: 1:Answer: message('StartNextLevel')
564: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
565: 1:BoardData {
565: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
565: 1:  'expectedAnswer': '101',
565: 1:  'history': [],
565: 1:  'info': ['❌f(1) = ??? != 101'],
565: 1:  'level': 21,
565: 1:  'nextQuestion': '1',
565: 1:  'questions': ['1']
565: 1:}
565: 1:Scores: 43793
565: 1:Answer: message('['101']')
565: 1:Fire Event: PassTest{complexity=27, testCount=25}
------------------------------------------
566: 1:BoardData {
566: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
566: 1:  'expectedAnswer': '112',
566: 1:  'history': [{
566: 1:    'answer': '101',
566: 1:    'question': '1',
566: 1:    'valid': true
566: 1:  }],
566: 1:  'info': [
566: 1:    '✅f(1) = 101',
566: 1:    '❌f(2) = ??? != 112'
566: 1:  ],
566: 1:  'level': 21,
566: 1:  'nextQuestion': '2',
566: 1:  'questions': [
566: 1:    '1',
566: 1:    '2'
566: 1:  ]
566: 1:}
566: 1:Scores: 43803
566: 1:Answer: message('['101', '112']')
566: 1:Fire Event: PassTest{complexity=27, testCount=25}
------------------------------------------
567: 1:BoardData {
567: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
567: 1:  'expectedAnswer': '131',
567: 1:  'history': [
567: 1:    {
567: 1:      'answer': '101',
567: 1:      'question': '1',
567: 1:      'valid': true
567: 1:    },
567: 1:    {
567: 1:      'answer': '112',
567: 1:      'question': '2',
567: 1:      'valid': true
567: 1:    }
567: 1:  ],
567: 1:  'info': [
567: 1:    '✅f(1) = 101',
567: 1:    '✅f(2) = 112',
567: 1:    '❌f(3) = ??? != 131'
567: 1:  ],
567: 1:  'level': 21,
567: 1:  'nextQuestion': '3',
567: 1:  'questions': [
567: 1:    '1',
567: 1:    '2',
567: 1:    '3'
567: 1:  ]
567: 1:}
567: 1:Scores: 43813
567: 1:Answer: message('['101', '112', '131']')
567: 1:Fire Event: PassTest{complexity=27, testCount=25}
------------------------------------------
568: 1:BoardData {
568: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
568: 1:  'expectedAnswer': '415',
568: 1:  'history': [
568: 1:    {
568: 1:      'answer': '101',
568: 1:      'question': '1',
568: 1:      'valid': true
568: 1:    },
568: 1:    {
568: 1:      'answer': '112',
568: 1:      'question': '2',
568: 1:      'valid': true
568: 1:    },
568: 1:    {
568: 1:      'answer': '131',
568: 1:      'question': '3',
568: 1:      'valid': true
568: 1:    }
568: 1:  ],
568: 1:  'info': [
568: 1:    '✅f(1) = 101',
568: 1:    '✅f(2) = 112',
568: 1:    '✅f(3) = 131',
568: 1:    '❌f(4) = ??? != 415'
568: 1:  ],
568: 1:  'level': 21,
568: 1:  'nextQuestion': '4',
568: 1:  'questions': [
568: 1:    '1',
568: 1:    '2',
568: 1:    '3',
568: 1:    '4'
568: 1:  ]
568: 1:}
568: 1:Scores: 43823
568: 1:Answer: message('['101', '112', '131', '415']')
568: 1:Fire Event: PassTest{complexity=27, testCount=25}
------------------------------------------
569: 1:BoardData {
569: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
569: 1:  'expectedAnswer': '161',
569: 1:  'history': [
569: 1:    {
569: 1:      'answer': '101',
569: 1:      'question': '1',
569: 1:      'valid': true
569: 1:    },
569: 1:    {
569: 1:      'answer': '112',
569: 1:      'question': '2',
569: 1:      'valid': true
569: 1:    },
569: 1:    {
569: 1:      'answer': '131',
569: 1:      'question': '3',
569: 1:      'valid': true
569: 1:    },
569: 1:    {
569: 1:      'answer': '415',
569: 1:      'question': '4',
569: 1:      'valid': true
569: 1:    }
569: 1:  ],
569: 1:  'info': [
569: 1:    '✅f(1) = 101',
569: 1:    '✅f(2) = 112',
569: 1:    '✅f(3) = 131',
569: 1:    '✅f(4) = 415',
569: 1:    '❌f(5) = ??? != 161'
569: 1:  ],
569: 1:  'level': 21,
569: 1:  'nextQuestion': '5',
569: 1:  'questions': [
569: 1:    '1',
569: 1:    '2',
569: 1:    '3',
569: 1:    '4',
569: 1:    '5'
569: 1:  ]
569: 1:}
569: 1:Scores: 43833
569: 1:Answer: message('['101', '112', '131', '415', '161']')
569: 1:Fire Event: PassTest{complexity=27, testCount=25}
------------------------------------------
570: 1:BoardData {
570: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
570: 1:  'expectedAnswer': '718',
570: 1:  'history': [
570: 1:    {
570: 1:      'answer': '101',
570: 1:      'question': '1',
570: 1:      'valid': true
570: 1:    },
570: 1:    {
570: 1:      'answer': '112',
570: 1:      'question': '2',
570: 1:      'valid': true
570: 1:    },
570: 1:    {
570: 1:      'answer': '131',
570: 1:      'question': '3',
570: 1:      'valid': true
570: 1:    },
570: 1:    {
570: 1:      'answer': '415',
570: 1:      'question': '4',
570: 1:      'valid': true
570: 1:    },
570: 1:    {
570: 1:      'answer': '161',
570: 1:      'question': '5',
570: 1:      'valid': true
570: 1:    }
570: 1:  ],
570: 1:  'info': [
570: 1:    '✅f(1) = 101',
570: 1:    '✅f(2) = 112',
570: 1:    '✅f(3) = 131',
570: 1:    '✅f(4) = 415',
570: 1:    '✅f(5) = 161',
570: 1:    '❌f(6) = ??? != 718'
570: 1:  ],
570: 1:  'level': 21,
570: 1:  'nextQuestion': '6',
570: 1:  'questions': [
570: 1:    '1',
570: 1:    '2',
570: 1:    '3',
570: 1:    '4',
570: 1:    '5',
570: 1:    '6'
570: 1:  ]
570: 1:}
570: 1:Scores: 43843
570: 1:Answer: message('['101', '112', '131', '415', '161', '718']')
570: 1:Fire Event: PassTest{complexity=27, testCount=25}
------------------------------------------
571: 1:BoardData {
571: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
571: 1:  'expectedAnswer': '192',
571: 1:  'history': [
571: 1:    {
571: 1:      'answer': '101',
571: 1:      'question': '1',
571: 1:      'valid': true
571: 1:    },
571: 1:    {
571: 1:      'answer': '112',
571: 1:      'question': '2',
571: 1:      'valid': true
571: 1:    },
571: 1:    {
571: 1:      'answer': '131',
571: 1:      'question': '3',
571: 1:      'valid': true
571: 1:    },
571: 1:    {
571: 1:      'answer': '415',
571: 1:      'question': '4',
571: 1:      'valid': true
571: 1:    },
571: 1:    {
571: 1:      'answer': '161',
571: 1:      'question': '5',
571: 1:      'valid': true
571: 1:    },
571: 1:    {
571: 1:      'answer': '718',
571: 1:      'question': '6',
571: 1:      'valid': true
571: 1:    }
571: 1:  ],
571: 1:  'info': [
571: 1:    '✅f(1) = 101',
571: 1:    '✅f(2) = 112',
571: 1:    '✅f(3) = 131',
571: 1:    '✅f(4) = 415',
571: 1:    '✅f(5) = 161',
571: 1:    '✅f(6) = 718',
571: 1:    '❌f(7) = ??? != 192'
571: 1:  ],
571: 1:  'level': 21,
571: 1:  'nextQuestion': '7',
571: 1:  'questions': [
571: 1:    '1',
571: 1:    '2',
571: 1:    '3',
571: 1:    '4',
571: 1:    '5',
571: 1:    '6',
571: 1:    '7'
571: 1:  ]
571: 1:}
571: 1:Scores: 43853
571: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192']')
571: 1:Fire Event: PassTest{complexity=27, testCount=25}
------------------------------------------
572: 1:BoardData {
572: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
572: 1:  'expectedAnswer': '021',
572: 1:  'history': [
572: 1:    {
572: 1:      'answer': '101',
572: 1:      'question': '1',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '112',
572: 1:      'question': '2',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '131',
572: 1:      'question': '3',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '415',
572: 1:      'question': '4',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '161',
572: 1:      'question': '5',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '718',
572: 1:      'question': '6',
572: 1:      'valid': true
572: 1:    },
572: 1:    {
572: 1:      'answer': '192',
572: 1:      'question': '7',
572: 1:      'valid': true
572: 1:    }
572: 1:  ],
572: 1:  'info': [
572: 1:    '✅f(1) = 101',
572: 1:    '✅f(2) = 112',
572: 1:    '✅f(3) = 131',
572: 1:    '✅f(4) = 415',
572: 1:    '✅f(5) = 161',
572: 1:    '✅f(6) = 718',
572: 1:    '✅f(7) = 192',
572: 1:    '❌f(8) = ??? != 021'
572: 1:  ],
572: 1:  'level': 21,
572: 1:  'nextQuestion': '8',
572: 1:  'questions': [
572: 1:    '1',
572: 1:    '2',
572: 1:    '3',
572: 1:    '4',
572: 1:    '5',
572: 1:    '6',
572: 1:    '7',
572: 1:    '8'
572: 1:  ]
572: 1:}
572: 1:Scores: 43863
572: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021']')
572: 1:Fire Event: PassTest{complexity=27, testCount=25}
------------------------------------------
573: 1:BoardData {
573: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
573: 1:  'expectedAnswer': '222',
573: 1:  'history': [
573: 1:    {
573: 1:      'answer': '101',
573: 1:      'question': '1',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '112',
573: 1:      'question': '2',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '131',
573: 1:      'question': '3',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '415',
573: 1:      'question': '4',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '161',
573: 1:      'question': '5',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '718',
573: 1:      'question': '6',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '192',
573: 1:      'question': '7',
573: 1:      'valid': true
573: 1:    },
573: 1:    {
573: 1:      'answer': '021',
573: 1:      'question': '8',
573: 1:      'valid': true
573: 1:    }
573: 1:  ],
573: 1:  'info': [
573: 1:    '✅f(1) = 101',
573: 1:    '✅f(2) = 112',
573: 1:    '✅f(3) = 131',
573: 1:    '✅f(4) = 415',
573: 1:    '✅f(5) = 161',
573: 1:    '✅f(6) = 718',
573: 1:    '✅f(7) = 192',
573: 1:    '✅f(8) = 021',
573: 1:    '❌f(9) = ??? != 222'
573: 1:  ],
573: 1:  'level': 21,
573: 1:  'nextQuestion': '9',
573: 1:  'questions': [
573: 1:    '1',
573: 1:    '2',
573: 1:    '3',
573: 1:    '4',
573: 1:    '5',
573: 1:    '6',
573: 1:    '7',
573: 1:    '8',
573: 1:    '9'
573: 1:  ]
573: 1:}
573: 1:Scores: 43873
573: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222']')
573: 1:Fire Event: PassTest{complexity=27, testCount=25}
------------------------------------------
574: 1:BoardData {
574: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
574: 1:  'expectedAnswer': '324',
574: 1:  'history': [
574: 1:    {
574: 1:      'answer': '101',
574: 1:      'question': '1',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '112',
574: 1:      'question': '2',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '131',
574: 1:      'question': '3',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '415',
574: 1:      'question': '4',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '161',
574: 1:      'question': '5',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '718',
574: 1:      'question': '6',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '192',
574: 1:      'question': '7',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '021',
574: 1:      'question': '8',
574: 1:      'valid': true
574: 1:    },
574: 1:    {
574: 1:      'answer': '222',
574: 1:      'question': '9',
574: 1:      'valid': true
574: 1:    }
574: 1:  ],
574: 1:  'info': [
574: 1:    '✅f(1) = 101',
574: 1:    '✅f(2) = 112',
574: 1:    '✅f(3) = 131',
574: 1:    '✅f(4) = 415',
574: 1:    '✅f(5) = 161',
574: 1:    '✅f(6) = 718',
574: 1:    '✅f(7) = 192',
574: 1:    '✅f(8) = 021',
574: 1:    '✅f(9) = 222',
574: 1:    '❌f(10) = ??? != 324'
574: 1:  ],
574: 1:  'level': 21,
574: 1:  'nextQuestion': '10',
574: 1:  'questions': [
574: 1:    '1',
574: 1:    '2',
574: 1:    '3',
574: 1:    '4',
574: 1:    '5',
574: 1:    '6',
574: 1:    '7',
574: 1:    '8',
574: 1:    '9',
574: 1:    '10'
574: 1:  ]
574: 1:}
574: 1:Scores: 43883
574: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324']')
574: 1:Fire Event: PassTest{complexity=27, testCount=25}
------------------------------------------
575: 1:BoardData {
575: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
575: 1:  'expectedAnswer': '252',
575: 1:  'history': [
575: 1:    {
575: 1:      'answer': '101',
575: 1:      'question': '1',
575: 1:      'valid': true
575: 1:    },
575: 1:    {
575: 1:      'answer': '112',
575: 1:      'question': '2',
575: 1:      'valid': true
575: 1:    },
575: 1:    {
575: 1:      'answer': '131',
575: 1:      'question': '3',
575: 1:      'valid': true
575: 1:    },
575: 1:    {
575: 1:      'answer': '415',
575: 1:      'question': '4',
575: 1:      'valid': true
575: 1:    },
575: 1:    {
575: 1:      'answer': '161',
575: 1:      'question': '5',
575: 1:      'valid': true
575: 1:    },
575: 1:    {
575: 1:      'answer': '718',
575: 1:      'question': '6',
575: 1:      'valid': true
575: 1:    },
575: 1:    {
575: 1:      'answer': '192',
575: 1:      'question': '7',
575: 1:      'valid': true
575: 1:    },
575: 1:    {
575: 1:      'answer': '021',
575: 1:      'question': '8',
575: 1:      'valid': true
575: 1:    },
575: 1:    {
575: 1:      'answer': '222',
575: 1:      'question': '9',
575: 1:      'valid': true
575: 1:    },
575: 1:    {
575: 1:      'answer': '324',
575: 1:      'question': '10',
575: 1:      'valid': true
575: 1:    }
575: 1:  ],
575: 1:  'info': [
575: 1:    '✅f(1) = 101',
575: 1:    '✅f(2) = 112',
575: 1:    '✅f(3) = 131',
575: 1:    '✅f(4) = 415',
575: 1:    '✅f(5) = 161',
575: 1:    '✅f(6) = 718',
575: 1:    '✅f(7) = 192',
575: 1:    '✅f(8) = 021',
575: 1:    '✅f(9) = 222',
575: 1:    '✅f(10) = 324',
575: 1:    '❌f(11) = ??? != 252'
575: 1:  ],
575: 1:  'level': 21,
575: 1:  'nextQuestion': '11',
575: 1:  'questions': [
575: 1:    '1',
575: 1:    '2',
575: 1:    '3',
575: 1:    '4',
575: 1:    '5',
575: 1:    '6',
575: 1:    '7',
575: 1:    '8',
575: 1:    '9',
575: 1:    '10',
575: 1:    '11'
575: 1:  ]
575: 1:}
575: 1:Scores: 43893
575: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252']')
575: 1:Fire Event: PassTest{complexity=27, testCount=25}
------------------------------------------
576: 1:BoardData {
576: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
576: 1:  'expectedAnswer': '627',
576: 1:  'history': [
576: 1:    {
576: 1:      'answer': '101',
576: 1:      'question': '1',
576: 1:      'valid': true
576: 1:    },
576: 1:    {
576: 1:      'answer': '112',
576: 1:      'question': '2',
576: 1:      'valid': true
576: 1:    },
576: 1:    {
576: 1:      'answer': '131',
576: 1:      'question': '3',
576: 1:      'valid': true
576: 1:    },
576: 1:    {
576: 1:      'answer': '415',
576: 1:      'question': '4',
576: 1:      'valid': true
576: 1:    },
576: 1:    {
576: 1:      'answer': '161',
576: 1:      'question': '5',
576: 1:      'valid': true
576: 1:    },
576: 1:    {
576: 1:      'answer': '718',
576: 1:      'question': '6',
576: 1:      'valid': true
576: 1:    },
576: 1:    {
576: 1:      'answer': '192',
576: 1:      'question': '7',
576: 1:      'valid': true
576: 1:    },
576: 1:    {
576: 1:      'answer': '021',
576: 1:      'question': '8',
576: 1:      'valid': true
576: 1:    },
576: 1:    {
576: 1:      'answer': '222',
576: 1:      'question': '9',
576: 1:      'valid': true
576: 1:    },
576: 1:    {
576: 1:      'answer': '324',
576: 1:      'question': '10',
576: 1:      'valid': true
576: 1:    },
576: 1:    {
576: 1:      'answer': '252',
576: 1:      'question': '11',
576: 1:      'valid': true
576: 1:    }
576: 1:  ],
576: 1:  'info': [
576: 1:    '✅f(1) = 101',
576: 1:    '✅f(2) = 112',
576: 1:    '✅f(3) = 131',
576: 1:    '✅f(4) = 415',
576: 1:    '✅f(5) = 161',
576: 1:    '✅f(6) = 718',
576: 1:    '✅f(7) = 192',
576: 1:    '✅f(8) = 021',
576: 1:    '✅f(9) = 222',
576: 1:    '✅f(10) = 324',
576: 1:    '✅f(11) = 252',
576: 1:    '❌f(12) = ??? != 627'
576: 1:  ],
576: 1:  'level': 21,
576: 1:  'nextQuestion': '12',
576: 1:  'questions': [
576: 1:    '1',
576: 1:    '2',
576: 1:    '3',
576: 1:    '4',
576: 1:    '5',
576: 1:    '6',
576: 1:    '7',
576: 1:    '8',
576: 1:    '9',
576: 1:    '10',
576: 1:    '11',
576: 1:    '12'
576: 1:  ]
576: 1:}
576: 1:Scores: 43903
576: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627']')
576: 1:Fire Event: PassTest{complexity=27, testCount=25}
------------------------------------------
577: 1:BoardData {
577: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
577: 1:  'expectedAnswer': '282',
577: 1:  'history': [
577: 1:    {
577: 1:      'answer': '101',
577: 1:      'question': '1',
577: 1:      'valid': true
577: 1:    },
577: 1:    {
577: 1:      'answer': '112',
577: 1:      'question': '2',
577: 1:      'valid': true
577: 1:    },
577: 1:    {
577: 1:      'answer': '131',
577: 1:      'question': '3',
577: 1:      'valid': true
577: 1:    },
577: 1:    {
577: 1:      'answer': '415',
577: 1:      'question': '4',
577: 1:      'valid': true
577: 1:    },
577: 1:    {
577: 1:      'answer': '161',
577: 1:      'question': '5',
577: 1:      'valid': true
577: 1:    },
577: 1:    {
577: 1:      'answer': '718',
577: 1:      'question': '6',
577: 1:      'valid': true
577: 1:    },
577: 1:    {
577: 1:      'answer': '192',
577: 1:      'question': '7',
577: 1:      'valid': true
577: 1:    },
577: 1:    {
577: 1:      'answer': '021',
577: 1:      'question': '8',
577: 1:      'valid': true
577: 1:    },
577: 1:    {
577: 1:      'answer': '222',
577: 1:      'question': '9',
577: 1:      'valid': true
577: 1:    },
577: 1:    {
577: 1:      'answer': '324',
577: 1:      'question': '10',
577: 1:      'valid': true
577: 1:    },
577: 1:    {
577: 1:      'answer': '252',
577: 1:      'question': '11',
577: 1:      'valid': true
577: 1:    },
577: 1:    {
577: 1:      'answer': '627',
577: 1:      'question': '12',
577: 1:      'valid': true
577: 1:    }
577: 1:  ],
577: 1:  'info': [
577: 1:    '✅f(1) = 101',
577: 1:    '✅f(2) = 112',
577: 1:    '✅f(3) = 131',
577: 1:    '✅f(4) = 415',
577: 1:    '✅f(5) = 161',
577: 1:    '✅f(6) = 718',
577: 1:    '✅f(7) = 192',
577: 1:    '✅f(8) = 021',
577: 1:    '✅f(9) = 222',
577: 1:    '✅f(10) = 324',
577: 1:    '✅f(11) = 252',
577: 1:    '✅f(12) = 627',
577: 1:    '❌f(13) = ??? != 282'
577: 1:  ],
577: 1:  'level': 21,
577: 1:  'nextQuestion': '13',
577: 1:  'questions': [
577: 1:    '1',
577: 1:    '2',
577: 1:    '3',
577: 1:    '4',
577: 1:    '5',
577: 1:    '6',
577: 1:    '7',
577: 1:    '8',
577: 1:    '9',
577: 1:    '10',
577: 1:    '11',
577: 1:    '12',
577: 1:    '13'
577: 1:  ]
577: 1:}
577: 1:Scores: 43913
577: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282']')
577: 1:Fire Event: PassTest{complexity=27, testCount=25}
------------------------------------------
578: 1:BoardData {
578: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
578: 1:  'expectedAnswer': '930',
578: 1:  'history': [
578: 1:    {
578: 1:      'answer': '101',
578: 1:      'question': '1',
578: 1:      'valid': true
578: 1:    },
578: 1:    {
578: 1:      'answer': '112',
578: 1:      'question': '2',
578: 1:      'valid': true
578: 1:    },
578: 1:    {
578: 1:      'answer': '131',
578: 1:      'question': '3',
578: 1:      'valid': true
578: 1:    },
578: 1:    {
578: 1:      'answer': '415',
578: 1:      'question': '4',
578: 1:      'valid': true
578: 1:    },
578: 1:    {
578: 1:      'answer': '161',
578: 1:      'question': '5',
578: 1:      'valid': true
578: 1:    },
578: 1:    {
578: 1:      'answer': '718',
578: 1:      'question': '6',
578: 1:      'valid': true
578: 1:    },
578: 1:    {
578: 1:      'answer': '192',
578: 1:      'question': '7',
578: 1:      'valid': true
578: 1:    },
578: 1:    {
578: 1:      'answer': '021',
578: 1:      'question': '8',
578: 1:      'valid': true
578: 1:    },
578: 1:    {
578: 1:      'answer': '222',
578: 1:      'question': '9',
578: 1:      'valid': true
578: 1:    },
578: 1:    {
578: 1:      'answer': '324',
578: 1:      'question': '10',
578: 1:      'valid': true
578: 1:    },
578: 1:    {
578: 1:      'answer': '252',
578: 1:      'question': '11',
578: 1:      'valid': true
578: 1:    },
578: 1:    {
578: 1:      'answer': '627',
578: 1:      'question': '12',
578: 1:      'valid': true
578: 1:    },
578: 1:    {
578: 1:      'answer': '282',
578: 1:      'question': '13',
578: 1:      'valid': true
578: 1:    }
578: 1:  ],
578: 1:  'info': [
578: 1:    '✅f(1) = 101',
578: 1:    '✅f(2) = 112',
578: 1:    '✅f(3) = 131',
578: 1:    '✅f(4) = 415',
578: 1:    '✅f(5) = 161',
578: 1:    '✅f(6) = 718',
578: 1:    '✅f(7) = 192',
578: 1:    '✅f(8) = 021',
578: 1:    '✅f(9) = 222',
578: 1:    '✅f(10) = 324',
578: 1:    '✅f(11) = 252',
578: 1:    '✅f(12) = 627',
578: 1:    '✅f(13) = 282',
578: 1:    '❌f(14) = ??? != 930'
578: 1:  ],
578: 1:  'level': 21,
578: 1:  'nextQuestion': '14',
578: 1:  'questions': [
578: 1:    '1',
578: 1:    '2',
578: 1:    '3',
578: 1:    '4',
578: 1:    '5',
578: 1:    '6',
578: 1:    '7',
578: 1:    '8',
578: 1:    '9',
578: 1:    '10',
578: 1:    '11',
578: 1:    '12',
578: 1:    '13',
578: 1:    '14'
578: 1:  ]
578: 1:}
578: 1:Scores: 43923
578: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930']')
578: 1:Fire Event: PassTest{complexity=27, testCount=25}
------------------------------------------
579: 1:BoardData {
579: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
579: 1:  'expectedAnswer': '313',
579: 1:  'history': [
579: 1:    {
579: 1:      'answer': '101',
579: 1:      'question': '1',
579: 1:      'valid': true
579: 1:    },
579: 1:    {
579: 1:      'answer': '112',
579: 1:      'question': '2',
579: 1:      'valid': true
579: 1:    },
579: 1:    {
579: 1:      'answer': '131',
579: 1:      'question': '3',
579: 1:      'valid': true
579: 1:    },
579: 1:    {
579: 1:      'answer': '415',
579: 1:      'question': '4',
579: 1:      'valid': true
579: 1:    },
579: 1:    {
579: 1:      'answer': '161',
579: 1:      'question': '5',
579: 1:      'valid': true
579: 1:    },
579: 1:    {
579: 1:      'answer': '718',
579: 1:      'question': '6',
579: 1:      'valid': true
579: 1:    },
579: 1:    {
579: 1:      'answer': '192',
579: 1:      'question': '7',
579: 1:      'valid': true
579: 1:    },
579: 1:    {
579: 1:      'answer': '021',
579: 1:      'question': '8',
579: 1:      'valid': true
579: 1:    },
579: 1:    {
579: 1:      'answer': '222',
579: 1:      'question': '9',
579: 1:      'valid': true
579: 1:    },
579: 1:    {
579: 1:      'answer': '324',
579: 1:      'question': '10',
579: 1:      'valid': true
579: 1:    },
579: 1:    {
579: 1:      'answer': '252',
579: 1:      'question': '11',
579: 1:      'valid': true
579: 1:    },
579: 1:    {
579: 1:      'answer': '627',
579: 1:      'question': '12',
579: 1:      'valid': true
579: 1:    },
579: 1:    {
579: 1:      'answer': '282',
579: 1:      'question': '13',
579: 1:      'valid': true
579: 1:    },
579: 1:    {
579: 1:      'answer': '930',
579: 1:      'question': '14',
579: 1:      'valid': true
579: 1:    }
579: 1:  ],
579: 1:  'info': [
579: 1:    '✅f(1) = 101',
579: 1:    '✅f(2) = 112',
579: 1:    '✅f(3) = 131',
579: 1:    '✅f(4) = 415',
579: 1:    '✅f(5) = 161',
579: 1:    '✅f(6) = 718',
579: 1:    '✅f(7) = 192',
579: 1:    '✅f(8) = 021',
579: 1:    '✅f(9) = 222',
579: 1:    '✅f(10) = 324',
579: 1:    '✅f(11) = 252',
579: 1:    '✅f(12) = 627',
579: 1:    '✅f(13) = 282',
579: 1:    '✅f(14) = 930',
579: 1:    '❌f(15) = ??? != 313'
579: 1:  ],
579: 1:  'level': 21,
579: 1:  'nextQuestion': '15',
579: 1:  'questions': [
579: 1:    '1',
579: 1:    '2',
579: 1:    '3',
579: 1:    '4',
579: 1:    '5',
579: 1:    '6',
579: 1:    '7',
579: 1:    '8',
579: 1:    '9',
579: 1:    '10',
579: 1:    '11',
579: 1:    '12',
579: 1:    '13',
579: 1:    '14',
579: 1:    '15'
579: 1:  ]
579: 1:}
579: 1:Scores: 43933
579: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313']')
579: 1:Fire Event: PassTest{complexity=27, testCount=25}
------------------------------------------
580: 1:BoardData {
580: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
580: 1:  'expectedAnswer': '233',
580: 1:  'history': [
580: 1:    {
580: 1:      'answer': '101',
580: 1:      'question': '1',
580: 1:      'valid': true
580: 1:    },
580: 1:    {
580: 1:      'answer': '112',
580: 1:      'question': '2',
580: 1:      'valid': true
580: 1:    },
580: 1:    {
580: 1:      'answer': '131',
580: 1:      'question': '3',
580: 1:      'valid': true
580: 1:    },
580: 1:    {
580: 1:      'answer': '415',
580: 1:      'question': '4',
580: 1:      'valid': true
580: 1:    },
580: 1:    {
580: 1:      'answer': '161',
580: 1:      'question': '5',
580: 1:      'valid': true
580: 1:    },
580: 1:    {
580: 1:      'answer': '718',
580: 1:      'question': '6',
580: 1:      'valid': true
580: 1:    },
580: 1:    {
580: 1:      'answer': '192',
580: 1:      'question': '7',
580: 1:      'valid': true
580: 1:    },
580: 1:    {
580: 1:      'answer': '021',
580: 1:      'question': '8',
580: 1:      'valid': true
580: 1:    },
580: 1:    {
580: 1:      'answer': '222',
580: 1:      'question': '9',
580: 1:      'valid': true
580: 1:    },
580: 1:    {
580: 1:      'answer': '324',
580: 1:      'question': '10',
580: 1:      'valid': true
580: 1:    },
580: 1:    {
580: 1:      'answer': '252',
580: 1:      'question': '11',
580: 1:      'valid': true
580: 1:    },
580: 1:    {
580: 1:      'answer': '627',
580: 1:      'question': '12',
580: 1:      'valid': true
580: 1:    },
580: 1:    {
580: 1:      'answer': '282',
580: 1:      'question': '13',
580: 1:      'valid': true
580: 1:    },
580: 1:    {
580: 1:      'answer': '930',
580: 1:      'question': '14',
580: 1:      'valid': true
580: 1:    },
580: 1:    {
580: 1:      'answer': '313',
580: 1:      'question': '15',
580: 1:      'valid': true
580: 1:    }
580: 1:  ],
580: 1:  'info': [
580: 1:    '✅f(1) = 101',
580: 1:    '✅f(2) = 112',
580: 1:    '✅f(3) = 131',
580: 1:    '✅f(4) = 415',
580: 1:    '✅f(5) = 161',
580: 1:    '✅f(6) = 718',
580: 1:    '✅f(7) = 192',
580: 1:    '✅f(8) = 021',
580: 1:    '✅f(9) = 222',
580: 1:    '✅f(10) = 324',
580: 1:    '✅f(11) = 252',
580: 1:    '✅f(12) = 627',
580: 1:    '✅f(13) = 282',
580: 1:    '✅f(14) = 930',
580: 1:    '✅f(15) = 313',
580: 1:    '❌f(16) = ??? != 233'
580: 1:  ],
580: 1:  'level': 21,
580: 1:  'nextQuestion': '16',
580: 1:  'questions': [
580: 1:    '1',
580: 1:    '2',
580: 1:    '3',
580: 1:    '4',
580: 1:    '5',
580: 1:    '6',
580: 1:    '7',
580: 1:    '8',
580: 1:    '9',
580: 1:    '10',
580: 1:    '11',
580: 1:    '12',
580: 1:    '13',
580: 1:    '14',
580: 1:    '15',
580: 1:    '16'
580: 1:  ]
580: 1:}
580: 1:Scores: 43943
580: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233']')
580: 1:Fire Event: PassTest{complexity=27, testCount=25}
------------------------------------------
581: 1:BoardData {
581: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
581: 1:  'expectedAnswer': '343',
581: 1:  'history': [
581: 1:    {
581: 1:      'answer': '101',
581: 1:      'question': '1',
581: 1:      'valid': true
581: 1:    },
581: 1:    {
581: 1:      'answer': '112',
581: 1:      'question': '2',
581: 1:      'valid': true
581: 1:    },
581: 1:    {
581: 1:      'answer': '131',
581: 1:      'question': '3',
581: 1:      'valid': true
581: 1:    },
581: 1:    {
581: 1:      'answer': '415',
581: 1:      'question': '4',
581: 1:      'valid': true
581: 1:    },
581: 1:    {
581: 1:      'answer': '161',
581: 1:      'question': '5',
581: 1:      'valid': true
581: 1:    },
581: 1:    {
581: 1:      'answer': '718',
581: 1:      'question': '6',
581: 1:      'valid': true
581: 1:    },
581: 1:    {
581: 1:      'answer': '192',
581: 1:      'question': '7',
581: 1:      'valid': true
581: 1:    },
581: 1:    {
581: 1:      'answer': '021',
581: 1:      'question': '8',
581: 1:      'valid': true
581: 1:    },
581: 1:    {
581: 1:      'answer': '222',
581: 1:      'question': '9',
581: 1:      'valid': true
581: 1:    },
581: 1:    {
581: 1:      'answer': '324',
581: 1:      'question': '10',
581: 1:      'valid': true
581: 1:    },
581: 1:    {
581: 1:      'answer': '252',
581: 1:      'question': '11',
581: 1:      'valid': true
581: 1:    },
581: 1:    {
581: 1:      'answer': '627',
581: 1:      'question': '12',
581: 1:      'valid': true
581: 1:    },
581: 1:    {
581: 1:      'answer': '282',
581: 1:      'question': '13',
581: 1:      'valid': true
581: 1:    },
581: 1:    {
581: 1:      'answer': '930',
581: 1:      'question': '14',
581: 1:      'valid': true
581: 1:    },
581: 1:    {
581: 1:      'answer': '313',
581: 1:      'question': '15',
581: 1:      'valid': true
581: 1:    },
581: 1:    {
581: 1:      'answer': '233',
581: 1:      'question': '16',
581: 1:      'valid': true
581: 1:    }
581: 1:  ],
581: 1:  'info': [
581: 1:    '✅f(1) = 101',
581: 1:    '✅f(2) = 112',
581: 1:    '✅f(3) = 131',
581: 1:    '✅f(4) = 415',
581: 1:    '✅f(5) = 161',
581: 1:    '✅f(6) = 718',
581: 1:    '✅f(7) = 192',
581: 1:    '✅f(8) = 021',
581: 1:    '✅f(9) = 222',
581: 1:    '✅f(10) = 324',
581: 1:    '✅f(11) = 252',
581: 1:    '✅f(12) = 627',
581: 1:    '✅f(13) = 282',
581: 1:    '✅f(14) = 930',
581: 1:    '✅f(15) = 313',
581: 1:    '✅f(16) = 233',
581: 1:    '❌f(17) = ??? != 343'
581: 1:  ],
581: 1:  'level': 21,
581: 1:  'nextQuestion': '17',
581: 1:  'questions': [
581: 1:    '1',
581: 1:    '2',
581: 1:    '3',
581: 1:    '4',
581: 1:    '5',
581: 1:    '6',
581: 1:    '7',
581: 1:    '8',
581: 1:    '9',
581: 1:    '10',
581: 1:    '11',
581: 1:    '12',
581: 1:    '13',
581: 1:    '14',
581: 1:    '15',
581: 1:    '16',
581: 1:    '17'
581: 1:  ]
581: 1:}
581: 1:Scores: 43953
581: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233', '343']')
581: 1:Fire Event: PassTest{complexity=27, testCount=25}
------------------------------------------
582: 1:BoardData {
582: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
582: 1:  'expectedAnswer': '536',
582: 1:  'history': [
582: 1:    {
582: 1:      'answer': '101',
582: 1:      'question': '1',
582: 1:      'valid': true
582: 1:    },
582: 1:    {
582: 1:      'answer': '112',
582: 1:      'question': '2',
582: 1:      'valid': true
582: 1:    },
582: 1:    {
582: 1:      'answer': '131',
582: 1:      'question': '3',
582: 1:      'valid': true
582: 1:    },
582: 1:    {
582: 1:      'answer': '415',
582: 1:      'question': '4',
582: 1:      'valid': true
582: 1:    },
582: 1:    {
582: 1:      'answer': '161',
582: 1:      'question': '5',
582: 1:      'valid': true
582: 1:    },
582: 1:    {
582: 1:      'answer': '718',
582: 1:      'question': '6',
582: 1:      'valid': true
582: 1:    },
582: 1:    {
582: 1:      'answer': '192',
582: 1:      'question': '7',
582: 1:      'valid': true
582: 1:    },
582: 1:    {
582: 1:      'answer': '021',
582: 1:      'question': '8',
582: 1:      'valid': true
582: 1:    },
582: 1:    {
582: 1:      'answer': '222',
582: 1:      'question': '9',
582: 1:      'valid': true
582: 1:    },
582: 1:    {
582: 1:      'answer': '324',
582: 1:      'question': '10',
582: 1:      'valid': true
582: 1:    },
582: 1:    {
582: 1:      'answer': '252',
582: 1:      'question': '11',
582: 1:      'valid': true
582: 1:    },
582: 1:    {
582: 1:      'answer': '627',
582: 1:      'question': '12',
582: 1:      'valid': true
582: 1:    },
582: 1:    {
582: 1:      'answer': '282',
582: 1:      'question': '13',
582: 1:      'valid': true
582: 1:    },
582: 1:    {
582: 1:      'answer': '930',
582: 1:      'question': '14',
582: 1:      'valid': true
582: 1:    },
582: 1:    {
582: 1:      'answer': '313',
582: 1:      'question': '15',
582: 1:      'valid': true
582: 1:    },
582: 1:    {
582: 1:      'answer': '233',
582: 1:      'question': '16',
582: 1:      'valid': true
582: 1:    },
582: 1:    {
582: 1:      'answer': '343',
582: 1:      'question': '17',
582: 1:      'valid': true
582: 1:    }
582: 1:  ],
582: 1:  'info': [
582: 1:    '✅f(1) = 101',
582: 1:    '✅f(2) = 112',
582: 1:    '✅f(3) = 131',
582: 1:    '✅f(4) = 415',
582: 1:    '✅f(5) = 161',
582: 1:    '✅f(6) = 718',
582: 1:    '✅f(7) = 192',
582: 1:    '✅f(8) = 021',
582: 1:    '✅f(9) = 222',
582: 1:    '✅f(10) = 324',
582: 1:    '✅f(11) = 252',
582: 1:    '✅f(12) = 627',
582: 1:    '✅f(13) = 282',
582: 1:    '✅f(14) = 930',
582: 1:    '✅f(15) = 313',
582: 1:    '✅f(16) = 233',
582: 1:    '✅f(17) = 343',
582: 1:    '❌f(18) = ??? != 536'
582: 1:  ],
582: 1:  'level': 21,
582: 1:  'nextQuestion': '18',
582: 1:  'questions': [
582: 1:    '1',
582: 1:    '2',
582: 1:    '3',
582: 1:    '4',
582: 1:    '5',
582: 1:    '6',
582: 1:    '7',
582: 1:    '8',
582: 1:    '9',
582: 1:    '10',
582: 1:    '11',
582: 1:    '12',
582: 1:    '13',
582: 1:    '14',
582: 1:    '15',
582: 1:    '16',
582: 1:    '17',
582: 1:    '18'
582: 1:  ]
582: 1:}
582: 1:Scores: 43963
582: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233', '343', '536']')
582: 1:Fire Event: PassTest{complexity=27, testCount=25}
------------------------------------------
583: 1:BoardData {
583: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
583: 1:  'expectedAnswer': '373',
583: 1:  'history': [
583: 1:    {
583: 1:      'answer': '101',
583: 1:      'question': '1',
583: 1:      'valid': true
583: 1:    },
583: 1:    {
583: 1:      'answer': '112',
583: 1:      'question': '2',
583: 1:      'valid': true
583: 1:    },
583: 1:    {
583: 1:      'answer': '131',
583: 1:      'question': '3',
583: 1:      'valid': true
583: 1:    },
583: 1:    {
583: 1:      'answer': '415',
583: 1:      'question': '4',
583: 1:      'valid': true
583: 1:    },
583: 1:    {
583: 1:      'answer': '161',
583: 1:      'question': '5',
583: 1:      'valid': true
583: 1:    },
583: 1:    {
583: 1:      'answer': '718',
583: 1:      'question': '6',
583: 1:      'valid': true
583: 1:    },
583: 1:    {
583: 1:      'answer': '192',
583: 1:      'question': '7',
583: 1:      'valid': true
583: 1:    },
583: 1:    {
583: 1:      'answer': '021',
583: 1:      'question': '8',
583: 1:      'valid': true
583: 1:    },
583: 1:    {
583: 1:      'answer': '222',
583: 1:      'question': '9',
583: 1:      'valid': true
583: 1:    },
583: 1:    {
583: 1:      'answer': '324',
583: 1:      'question': '10',
583: 1:      'valid': true
583: 1:    },
583: 1:    {
583: 1:      'answer': '252',
583: 1:      'question': '11',
583: 1:      'valid': true
583: 1:    },
583: 1:    {
583: 1:      'answer': '627',
583: 1:      'question': '12',
583: 1:      'valid': true
583: 1:    },
583: 1:    {
583: 1:      'answer': '282',
583: 1:      'question': '13',
583: 1:      'valid': true
583: 1:    },
583: 1:    {
583: 1:      'answer': '930',
583: 1:      'question': '14',
583: 1:      'valid': true
583: 1:    },
583: 1:    {
583: 1:      'answer': '313',
583: 1:      'question': '15',
583: 1:      'valid': true
583: 1:    },
583: 1:    {
583: 1:      'answer': '233',
583: 1:      'question': '16',
583: 1:      'valid': true
583: 1:    },
583: 1:    {
583: 1:      'answer': '343',
583: 1:      'question': '17',
583: 1:      'valid': true
583: 1:    },
583: 1:    {
583: 1:      'answer': '536',
583: 1:      'question': '18',
583: 1:      'valid': true
583: 1:    }
583: 1:  ],
583: 1:  'info': [
583: 1:    '✅f(1) = 101',
583: 1:    '✅f(2) = 112',
583: 1:    '✅f(3) = 131',
583: 1:    '✅f(4) = 415',
583: 1:    '✅f(5) = 161',
583: 1:    '✅f(6) = 718',
583: 1:    '✅f(7) = 192',
583: 1:    '✅f(8) = 021',
583: 1:    '✅f(9) = 222',
583: 1:    '✅f(10) = 324',
583: 1:    '✅f(11) = 252',
583: 1:    '✅f(12) = 627',
583: 1:    '✅f(13) = 282',
583: 1:    '✅f(14) = 930',
583: 1:    '✅f(15) = 313',
583: 1:    '✅f(16) = 233',
583: 1:    '✅f(17) = 343',
583: 1:    '✅f(18) = 536',
583: 1:    '❌f(19) = ??? != 373'
583: 1:  ],
583: 1:  'level': 21,
583: 1:  'nextQuestion': '19',
583: 1:  'questions': [
583: 1:    '1',
583: 1:    '2',
583: 1:    '3',
583: 1:    '4',
583: 1:    '5',
583: 1:    '6',
583: 1:    '7',
583: 1:    '8',
583: 1:    '9',
583: 1:    '10',
583: 1:    '11',
583: 1:    '12',
583: 1:    '13',
583: 1:    '14',
583: 1:    '15',
583: 1:    '16',
583: 1:    '17',
583: 1:    '18',
583: 1:    '19'
583: 1:  ]
583: 1:}
583: 1:Scores: 43973
583: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233', '343', '536', '373']')
583: 1:Fire Event: PassTest{complexity=27, testCount=25}
------------------------------------------
584: 1:BoardData {
584: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
584: 1:  'expectedAnswer': '839',
584: 1:  'history': [
584: 1:    {
584: 1:      'answer': '101',
584: 1:      'question': '1',
584: 1:      'valid': true
584: 1:    },
584: 1:    {
584: 1:      'answer': '112',
584: 1:      'question': '2',
584: 1:      'valid': true
584: 1:    },
584: 1:    {
584: 1:      'answer': '131',
584: 1:      'question': '3',
584: 1:      'valid': true
584: 1:    },
584: 1:    {
584: 1:      'answer': '415',
584: 1:      'question': '4',
584: 1:      'valid': true
584: 1:    },
584: 1:    {
584: 1:      'answer': '161',
584: 1:      'question': '5',
584: 1:      'valid': true
584: 1:    },
584: 1:    {
584: 1:      'answer': '718',
584: 1:      'question': '6',
584: 1:      'valid': true
584: 1:    },
584: 1:    {
584: 1:      'answer': '192',
584: 1:      'question': '7',
584: 1:      'valid': true
584: 1:    },
584: 1:    {
584: 1:      'answer': '021',
584: 1:      'question': '8',
584: 1:      'valid': true
584: 1:    },
584: 1:    {
584: 1:      'answer': '222',
584: 1:      'question': '9',
584: 1:      'valid': true
584: 1:    },
584: 1:    {
584: 1:      'answer': '324',
584: 1:      'question': '10',
584: 1:      'valid': true
584: 1:    },
584: 1:    {
584: 1:      'answer': '252',
584: 1:      'question': '11',
584: 1:      'valid': true
584: 1:    },
584: 1:    {
584: 1:      'answer': '627',
584: 1:      'question': '12',
584: 1:      'valid': true
584: 1:    },
584: 1:    {
584: 1:      'answer': '282',
584: 1:      'question': '13',
584: 1:      'valid': true
584: 1:    },
584: 1:    {
584: 1:      'answer': '930',
584: 1:      'question': '14',
584: 1:      'valid': true
584: 1:    },
584: 1:    {
584: 1:      'answer': '313',
584: 1:      'question': '15',
584: 1:      'valid': true
584: 1:    },
584: 1:    {
584: 1:      'answer': '233',
584: 1:      'question': '16',
584: 1:      'valid': true
584: 1:    },
584: 1:    {
584: 1:      'answer': '343',
584: 1:      'question': '17',
584: 1:      'valid': true
584: 1:    },
584: 1:    {
584: 1:      'answer': '536',
584: 1:      'question': '18',
584: 1:      'valid': true
584: 1:    },
584: 1:    {
584: 1:      'answer': '373',
584: 1:      'question': '19',
584: 1:      'valid': true
584: 1:    }
584: 1:  ],
584: 1:  'info': [
584: 1:    '✅f(1) = 101',
584: 1:    '✅f(2) = 112',
584: 1:    '✅f(3) = 131',
584: 1:    '✅f(4) = 415',
584: 1:    '✅f(5) = 161',
584: 1:    '✅f(6) = 718',
584: 1:    '✅f(7) = 192',
584: 1:    '✅f(8) = 021',
584: 1:    '✅f(9) = 222',
584: 1:    '✅f(10) = 324',
584: 1:    '✅f(11) = 252',
584: 1:    '✅f(12) = 627',
584: 1:    '✅f(13) = 282',
584: 1:    '✅f(14) = 930',
584: 1:    '✅f(15) = 313',
584: 1:    '✅f(16) = 233',
584: 1:    '✅f(17) = 343',
584: 1:    '✅f(18) = 536',
584: 1:    '✅f(19) = 373',
584: 1:    '❌f(20) = ??? != 839'
584: 1:  ],
584: 1:  'level': 21,
584: 1:  'nextQuestion': '20',
584: 1:  'questions': [
584: 1:    '1',
584: 1:    '2',
584: 1:    '3',
584: 1:    '4',
584: 1:    '5',
584: 1:    '6',
584: 1:    '7',
584: 1:    '8',
584: 1:    '9',
584: 1:    '10',
584: 1:    '11',
584: 1:    '12',
584: 1:    '13',
584: 1:    '14',
584: 1:    '15',
584: 1:    '16',
584: 1:    '17',
584: 1:    '18',
584: 1:    '19',
584: 1:    '20'
584: 1:  ]
584: 1:}
584: 1:Scores: 43983
584: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233', '343', '536', '373', '839']')
584: 1:Fire Event: PassTest{complexity=27, testCount=25}
------------------------------------------
585: 1:BoardData {
585: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
585: 1:  'expectedAnswer': '404',
585: 1:  'history': [
585: 1:    {
585: 1:      'answer': '101',
585: 1:      'question': '1',
585: 1:      'valid': true
585: 1:    },
585: 1:    {
585: 1:      'answer': '112',
585: 1:      'question': '2',
585: 1:      'valid': true
585: 1:    },
585: 1:    {
585: 1:      'answer': '131',
585: 1:      'question': '3',
585: 1:      'valid': true
585: 1:    },
585: 1:    {
585: 1:      'answer': '415',
585: 1:      'question': '4',
585: 1:      'valid': true
585: 1:    },
585: 1:    {
585: 1:      'answer': '161',
585: 1:      'question': '5',
585: 1:      'valid': true
585: 1:    },
585: 1:    {
585: 1:      'answer': '718',
585: 1:      'question': '6',
585: 1:      'valid': true
585: 1:    },
585: 1:    {
585: 1:      'answer': '192',
585: 1:      'question': '7',
585: 1:      'valid': true
585: 1:    },
585: 1:    {
585: 1:      'answer': '021',
585: 1:      'question': '8',
585: 1:      'valid': true
585: 1:    },
585: 1:    {
585: 1:      'answer': '222',
585: 1:      'question': '9',
585: 1:      'valid': true
585: 1:    },
585: 1:    {
585: 1:      'answer': '324',
585: 1:      'question': '10',
585: 1:      'valid': true
585: 1:    },
585: 1:    {
585: 1:      'answer': '252',
585: 1:      'question': '11',
585: 1:      'valid': true
585: 1:    },
585: 1:    {
585: 1:      'answer': '627',
585: 1:      'question': '12',
585: 1:      'valid': true
585: 1:    },
585: 1:    {
585: 1:      'answer': '282',
585: 1:      'question': '13',
585: 1:      'valid': true
585: 1:    },
585: 1:    {
585: 1:      'answer': '930',
585: 1:      'question': '14',
585: 1:      'valid': true
585: 1:    },
585: 1:    {
585: 1:      'answer': '313',
585: 1:      'question': '15',
585: 1:      'valid': true
585: 1:    },
585: 1:    {
585: 1:      'answer': '233',
585: 1:      'question': '16',
585: 1:      'valid': true
585: 1:    },
585: 1:    {
585: 1:      'answer': '343',
585: 1:      'question': '17',
585: 1:      'valid': true
585: 1:    },
585: 1:    {
585: 1:      'answer': '536',
585: 1:      'question': '18',
585: 1:      'valid': true
585: 1:    },
585: 1:    {
585: 1:      'answer': '373',
585: 1:      'question': '19',
585: 1:      'valid': true
585: 1:    },
585: 1:    {
585: 1:      'answer': '839',
585: 1:      'question': '20',
585: 1:      'valid': true
585: 1:    }
585: 1:  ],
585: 1:  'info': [
585: 1:    '✅f(1) = 101',
585: 1:    '✅f(2) = 112',
585: 1:    '✅f(3) = 131',
585: 1:    '✅f(4) = 415',
585: 1:    '✅f(5) = 161',
585: 1:    '✅f(6) = 718',
585: 1:    '✅f(7) = 192',
585: 1:    '✅f(8) = 021',
585: 1:    '✅f(9) = 222',
585: 1:    '✅f(10) = 324',
585: 1:    '✅f(11) = 252',
585: 1:    '✅f(12) = 627',
585: 1:    '✅f(13) = 282',
585: 1:    '✅f(14) = 930',
585: 1:    '✅f(15) = 313',
585: 1:    '✅f(16) = 233',
585: 1:    '✅f(17) = 343',
585: 1:    '✅f(18) = 536',
585: 1:    '✅f(19) = 373',
585: 1:    '✅f(20) = 839',
585: 1:    '❌f(21) = ??? != 404'
585: 1:  ],
585: 1:  'level': 21,
585: 1:  'nextQuestion': '21',
585: 1:  'questions': [
585: 1:    '1',
585: 1:    '2',
585: 1:    '3',
585: 1:    '4',
585: 1:    '5',
585: 1:    '6',
585: 1:    '7',
585: 1:    '8',
585: 1:    '9',
585: 1:    '10',
585: 1:    '11',
585: 1:    '12',
585: 1:    '13',
585: 1:    '14',
585: 1:    '15',
585: 1:    '16',
585: 1:    '17',
585: 1:    '18',
585: 1:    '19',
585: 1:    '20',
585: 1:    '21'
585: 1:  ]
585: 1:}
585: 1:Scores: 43993
585: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233', '343', '536', '373', '839', '404']')
585: 1:Fire Event: PassTest{complexity=27, testCount=25}
------------------------------------------
586: 1:BoardData {
586: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
586: 1:  'expectedAnswer': '142',
586: 1:  'history': [
586: 1:    {
586: 1:      'answer': '101',
586: 1:      'question': '1',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': '112',
586: 1:      'question': '2',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': '131',
586: 1:      'question': '3',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': '415',
586: 1:      'question': '4',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': '161',
586: 1:      'question': '5',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': '718',
586: 1:      'question': '6',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': '192',
586: 1:      'question': '7',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': '021',
586: 1:      'question': '8',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': '222',
586: 1:      'question': '9',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': '324',
586: 1:      'question': '10',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': '252',
586: 1:      'question': '11',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': '627',
586: 1:      'question': '12',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': '282',
586: 1:      'question': '13',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': '930',
586: 1:      'question': '14',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': '313',
586: 1:      'question': '15',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': '233',
586: 1:      'question': '16',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': '343',
586: 1:      'question': '17',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': '536',
586: 1:      'question': '18',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': '373',
586: 1:      'question': '19',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': '839',
586: 1:      'question': '20',
586: 1:      'valid': true
586: 1:    },
586: 1:    {
586: 1:      'answer': '404',
586: 1:      'question': '21',
586: 1:      'valid': true
586: 1:    }
586: 1:  ],
586: 1:  'info': [
586: 1:    '✅f(1) = 101',
586: 1:    '✅f(2) = 112',
586: 1:    '✅f(3) = 131',
586: 1:    '✅f(4) = 415',
586: 1:    '✅f(5) = 161',
586: 1:    '✅f(6) = 718',
586: 1:    '✅f(7) = 192',
586: 1:    '✅f(8) = 021',
586: 1:    '✅f(9) = 222',
586: 1:    '✅f(10) = 324',
586: 1:    '✅f(11) = 252',
586: 1:    '✅f(12) = 627',
586: 1:    '✅f(13) = 282',
586: 1:    '✅f(14) = 930',
586: 1:    '✅f(15) = 313',
586: 1:    '✅f(16) = 233',
586: 1:    '✅f(17) = 343',
586: 1:    '✅f(18) = 536',
586: 1:    '✅f(19) = 373',
586: 1:    '✅f(20) = 839',
586: 1:    '✅f(21) = 404',
586: 1:    '❌f(22) = ??? != 142'
586: 1:  ],
586: 1:  'level': 21,
586: 1:  'nextQuestion': '22',
586: 1:  'questions': [
586: 1:    '1',
586: 1:    '2',
586: 1:    '3',
586: 1:    '4',
586: 1:    '5',
586: 1:    '6',
586: 1:    '7',
586: 1:    '8',
586: 1:    '9',
586: 1:    '10',
586: 1:    '11',
586: 1:    '12',
586: 1:    '13',
586: 1:    '14',
586: 1:    '15',
586: 1:    '16',
586: 1:    '17',
586: 1:    '18',
586: 1:    '19',
586: 1:    '20',
586: 1:    '21',
586: 1:    '22'
586: 1:  ]
586: 1:}
586: 1:Scores: 44003
586: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233', '343', '536', '373', '839', '404', '142']')
586: 1:Fire Event: PassTest{complexity=27, testCount=25}
------------------------------------------
587: 1:BoardData {
587: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
587: 1:  'expectedAnswer': '434',
587: 1:  'history': [
587: 1:    {
587: 1:      'answer': '101',
587: 1:      'question': '1',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': '112',
587: 1:      'question': '2',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': '131',
587: 1:      'question': '3',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': '415',
587: 1:      'question': '4',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': '161',
587: 1:      'question': '5',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': '718',
587: 1:      'question': '6',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': '192',
587: 1:      'question': '7',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': '021',
587: 1:      'question': '8',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': '222',
587: 1:      'question': '9',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': '324',
587: 1:      'question': '10',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': '252',
587: 1:      'question': '11',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': '627',
587: 1:      'question': '12',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': '282',
587: 1:      'question': '13',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': '930',
587: 1:      'question': '14',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': '313',
587: 1:      'question': '15',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': '233',
587: 1:      'question': '16',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': '343',
587: 1:      'question': '17',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': '536',
587: 1:      'question': '18',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': '373',
587: 1:      'question': '19',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': '839',
587: 1:      'question': '20',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': '404',
587: 1:      'question': '21',
587: 1:      'valid': true
587: 1:    },
587: 1:    {
587: 1:      'answer': '142',
587: 1:      'question': '22',
587: 1:      'valid': true
587: 1:    }
587: 1:  ],
587: 1:  'info': [
587: 1:    '✅f(1) = 101',
587: 1:    '✅f(2) = 112',
587: 1:    '✅f(3) = 131',
587: 1:    '✅f(4) = 415',
587: 1:    '✅f(5) = 161',
587: 1:    '✅f(6) = 718',
587: 1:    '✅f(7) = 192',
587: 1:    '✅f(8) = 021',
587: 1:    '✅f(9) = 222',
587: 1:    '✅f(10) = 324',
587: 1:    '✅f(11) = 252',
587: 1:    '✅f(12) = 627',
587: 1:    '✅f(13) = 282',
587: 1:    '✅f(14) = 930',
587: 1:    '✅f(15) = 313',
587: 1:    '✅f(16) = 233',
587: 1:    '✅f(17) = 343',
587: 1:    '✅f(18) = 536',
587: 1:    '✅f(19) = 373',
587: 1:    '✅f(20) = 839',
587: 1:    '✅f(21) = 404',
587: 1:    '✅f(22) = 142',
587: 1:    '❌f(23) = ??? != 434'
587: 1:  ],
587: 1:  'level': 21,
587: 1:  'nextQuestion': '23',
587: 1:  'questions': [
587: 1:    '1',
587: 1:    '2',
587: 1:    '3',
587: 1:    '4',
587: 1:    '5',
587: 1:    '6',
587: 1:    '7',
587: 1:    '8',
587: 1:    '9',
587: 1:    '10',
587: 1:    '11',
587: 1:    '12',
587: 1:    '13',
587: 1:    '14',
587: 1:    '15',
587: 1:    '16',
587: 1:    '17',
587: 1:    '18',
587: 1:    '19',
587: 1:    '20',
587: 1:    '21',
587: 1:    '22',
587: 1:    '23'
587: 1:  ]
587: 1:}
587: 1:Scores: 44013
587: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233', '343', '536', '373', '839', '404', '142', '434']')
587: 1:Fire Event: PassTest{complexity=27, testCount=25}
------------------------------------------
588: 1:BoardData {
588: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
588: 1:  'expectedAnswer': '445',
588: 1:  'history': [
588: 1:    {
588: 1:      'answer': '101',
588: 1:      'question': '1',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': '112',
588: 1:      'question': '2',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': '131',
588: 1:      'question': '3',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': '415',
588: 1:      'question': '4',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': '161',
588: 1:      'question': '5',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': '718',
588: 1:      'question': '6',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': '192',
588: 1:      'question': '7',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': '021',
588: 1:      'question': '8',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': '222',
588: 1:      'question': '9',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': '324',
588: 1:      'question': '10',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': '252',
588: 1:      'question': '11',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': '627',
588: 1:      'question': '12',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': '282',
588: 1:      'question': '13',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': '930',
588: 1:      'question': '14',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': '313',
588: 1:      'question': '15',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': '233',
588: 1:      'question': '16',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': '343',
588: 1:      'question': '17',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': '536',
588: 1:      'question': '18',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': '373',
588: 1:      'question': '19',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': '839',
588: 1:      'question': '20',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': '404',
588: 1:      'question': '21',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': '142',
588: 1:      'question': '22',
588: 1:      'valid': true
588: 1:    },
588: 1:    {
588: 1:      'answer': '434',
588: 1:      'question': '23',
588: 1:      'valid': true
588: 1:    }
588: 1:  ],
588: 1:  'info': [
588: 1:    '✅f(1) = 101',
588: 1:    '✅f(2) = 112',
588: 1:    '✅f(3) = 131',
588: 1:    '✅f(4) = 415',
588: 1:    '✅f(5) = 161',
588: 1:    '✅f(6) = 718',
588: 1:    '✅f(7) = 192',
588: 1:    '✅f(8) = 021',
588: 1:    '✅f(9) = 222',
588: 1:    '✅f(10) = 324',
588: 1:    '✅f(11) = 252',
588: 1:    '✅f(12) = 627',
588: 1:    '✅f(13) = 282',
588: 1:    '✅f(14) = 930',
588: 1:    '✅f(15) = 313',
588: 1:    '✅f(16) = 233',
588: 1:    '✅f(17) = 343',
588: 1:    '✅f(18) = 536',
588: 1:    '✅f(19) = 373',
588: 1:    '✅f(20) = 839',
588: 1:    '✅f(21) = 404',
588: 1:    '✅f(22) = 142',
588: 1:    '✅f(23) = 434',
588: 1:    '❌f(24) = ??? != 445'
588: 1:  ],
588: 1:  'level': 21,
588: 1:  'nextQuestion': '24',
588: 1:  'questions': [
588: 1:    '1',
588: 1:    '2',
588: 1:    '3',
588: 1:    '4',
588: 1:    '5',
588: 1:    '6',
588: 1:    '7',
588: 1:    '8',
588: 1:    '9',
588: 1:    '10',
588: 1:    '11',
588: 1:    '12',
588: 1:    '13',
588: 1:    '14',
588: 1:    '15',
588: 1:    '16',
588: 1:    '17',
588: 1:    '18',
588: 1:    '19',
588: 1:    '20',
588: 1:    '21',
588: 1:    '22',
588: 1:    '23',
588: 1:    '24'
588: 1:  ]
588: 1:}
588: 1:Scores: 44023
588: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233', '343', '536', '373', '839', '404', '142', '434', '445']')
588: 1:Fire Event: PassTest{complexity=27, testCount=25}
------------------------------------------
589: 1:BoardData {
589: 1:  'description': ['Continue the sequence 101, 112, 131, 415, 161, 718... \ni.e f(1) = 101, f(2) = 112, ...\nHint: Look at the whole picture'],
589: 1:  'expectedAnswer': '464',
589: 1:  'history': [
589: 1:    {
589: 1:      'answer': '101',
589: 1:      'question': '1',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': '112',
589: 1:      'question': '2',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': '131',
589: 1:      'question': '3',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': '415',
589: 1:      'question': '4',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': '161',
589: 1:      'question': '5',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': '718',
589: 1:      'question': '6',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': '192',
589: 1:      'question': '7',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': '021',
589: 1:      'question': '8',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': '222',
589: 1:      'question': '9',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': '324',
589: 1:      'question': '10',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': '252',
589: 1:      'question': '11',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': '627',
589: 1:      'question': '12',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': '282',
589: 1:      'question': '13',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': '930',
589: 1:      'question': '14',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': '313',
589: 1:      'question': '15',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': '233',
589: 1:      'question': '16',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': '343',
589: 1:      'question': '17',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': '536',
589: 1:      'question': '18',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': '373',
589: 1:      'question': '19',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': '839',
589: 1:      'question': '20',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': '404',
589: 1:      'question': '21',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': '142',
589: 1:      'question': '22',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': '434',
589: 1:      'question': '23',
589: 1:      'valid': true
589: 1:    },
589: 1:    {
589: 1:      'answer': '445',
589: 1:      'question': '24',
589: 1:      'valid': true
589: 1:    }
589: 1:  ],
589: 1:  'info': [
589: 1:    '✅f(1) = 101',
589: 1:    '✅f(2) = 112',
589: 1:    '✅f(3) = 131',
589: 1:    '✅f(4) = 415',
589: 1:    '✅f(5) = 161',
589: 1:    '✅f(6) = 718',
589: 1:    '✅f(7) = 192',
589: 1:    '✅f(8) = 021',
589: 1:    '✅f(9) = 222',
589: 1:    '✅f(10) = 324',
589: 1:    '✅f(11) = 252',
589: 1:    '✅f(12) = 627',
589: 1:    '✅f(13) = 282',
589: 1:    '✅f(14) = 930',
589: 1:    '✅f(15) = 313',
589: 1:    '✅f(16) = 233',
589: 1:    '✅f(17) = 343',
589: 1:    '✅f(18) = 536',
589: 1:    '✅f(19) = 373',
589: 1:    '✅f(20) = 839',
589: 1:    '✅f(21) = 404',
589: 1:    '✅f(22) = 142',
589: 1:    '✅f(23) = 434',
589: 1:    '✅f(24) = 445',
589: 1:    '❌f(25) = ??? != 464'
589: 1:  ],
589: 1:  'level': 21,
589: 1:  'nextQuestion': '25',
589: 1:  'questions': [
589: 1:    '1',
589: 1:    '2',
589: 1:    '3',
589: 1:    '4',
589: 1:    '5',
589: 1:    '6',
589: 1:    '7',
589: 1:    '8',
589: 1:    '9',
589: 1:    '10',
589: 1:    '11',
589: 1:    '12',
589: 1:    '13',
589: 1:    '14',
589: 1:    '15',
589: 1:    '16',
589: 1:    '17',
589: 1:    '18',
589: 1:    '19',
589: 1:    '20',
589: 1:    '21',
589: 1:    '22',
589: 1:    '23',
589: 1:    '24',
589: 1:    '25'
589: 1:  ]
589: 1:}
589: 1:Scores: 44033
589: 1:Answer: message('['101', '112', '131', '415', '161', '718', '192', '021', '222', '324', '252', '627', '282', '930', '313', '233', '343', '536', '373', '839', '404', '142', '434', '445', '464']')
589: 1:Fire Event: PassTest{complexity=27, testCount=25}
589: 1:Fire Event: NextAlgorithm{complexity=27, time=0}
------------------------------------------
590: 1:BoardData {
590: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
590: 1:  'history': [
590: 1:    {
590: 1:      'answer': '101',
590: 1:      'question': '1',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': '112',
590: 1:      'question': '2',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': '131',
590: 1:      'question': '3',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': '415',
590: 1:      'question': '4',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': '161',
590: 1:      'question': '5',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': '718',
590: 1:      'question': '6',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': '192',
590: 1:      'question': '7',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': '021',
590: 1:      'question': '8',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': '222',
590: 1:      'question': '9',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': '324',
590: 1:      'question': '10',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': '252',
590: 1:      'question': '11',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': '627',
590: 1:      'question': '12',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': '282',
590: 1:      'question': '13',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': '930',
590: 1:      'question': '14',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': '313',
590: 1:      'question': '15',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': '233',
590: 1:      'question': '16',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': '343',
590: 1:      'question': '17',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': '536',
590: 1:      'question': '18',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': '373',
590: 1:      'question': '19',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': '839',
590: 1:      'question': '20',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': '404',
590: 1:      'question': '21',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': '142',
590: 1:      'question': '22',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': '434',
590: 1:      'question': '23',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': '445',
590: 1:      'question': '24',
590: 1:      'valid': true
590: 1:    },
590: 1:    {
590: 1:      'answer': '464',
590: 1:      'question': '25',
590: 1:      'valid': true
590: 1:    }
590: 1:  ],
590: 1:  'info': [
590: 1:    '✅f(1) = 101',
590: 1:    '✅f(2) = 112',
590: 1:    '✅f(3) = 131',
590: 1:    '✅f(4) = 415',
590: 1:    '✅f(5) = 161',
590: 1:    '✅f(6) = 718',
590: 1:    '✅f(7) = 192',
590: 1:    '✅f(8) = 021',
590: 1:    '✅f(9) = 222',
590: 1:    '✅f(10) = 324',
590: 1:    '✅f(11) = 252',
590: 1:    '✅f(12) = 627',
590: 1:    '✅f(13) = 282',
590: 1:    '✅f(14) = 930',
590: 1:    '✅f(15) = 313',
590: 1:    '✅f(16) = 233',
590: 1:    '✅f(17) = 343',
590: 1:    '✅f(18) = 536',
590: 1:    '✅f(19) = 373',
590: 1:    '✅f(20) = 839',
590: 1:    '✅f(21) = 404',
590: 1:    '✅f(22) = 142',
590: 1:    '✅f(23) = 434',
590: 1:    '✅f(24) = 445',
590: 1:    '✅f(25) = 464'
590: 1:  ],
590: 1:  'level': 21,
590: 1:  'questions': []
590: 1:}
590: 1:Scores: 47687
590: 1:Answer: message('StartNextLevel')
590: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
591: 1:BoardData {
591: 1:  'description': ['Please implement algorithm that converts number from one numeral system to another. Method should accept number, source numeral system and target numeral system.'],
591: 1:  'expectedAnswer': '10',
591: 1:  'history': [],
591: 1:  'info': ['❌f(10, 10, 10) = ??? != 10'],
591: 1:  'level': 22,
591: 1:  'nextQuestion': '10, 10, 10',
591: 1:  'questions': ['10, 10, 10']
591: 1:}
591: 1:Scores: 47687
591: 1:Answer: message('['10']')
591: 1:Fire Event: PassTest{complexity=28, testCount=21}
------------------------------------------
592: 1:BoardData {
592: 1:  'description': ['Please implement algorithm that converts number from one numeral system to another. Method should accept number, source numeral system and target numeral system.'],
592: 1:  'expectedAnswer': '1010',
592: 1:  'history': [{
592: 1:    'answer': '10',
592: 1:    'question': '10, 10, 10',
592: 1:    'valid': true
592: 1:  }],
592: 1:  'info': [
592: 1:    '✅f(10, 10, 10) = 10',
592: 1:    '❌f(10, 10, 2) = ??? != 1010'
592: 1:  ],
592: 1:  'level': 22,
592: 1:  'nextQuestion': '10, 10, 2',
592: 1:  'questions': [
592: 1:    '10, 10, 10',
592: 1:    '10, 10, 2'
592: 1:  ]
592: 1:}
592: 1:Scores: 47700
592: 1:Answer: message('['10', '1010']')
592: 1:Fire Event: PassTest{complexity=28, testCount=21}
------------------------------------------
593: 1:BoardData {
593: 1:  'description': ['Please implement algorithm that converts number from one numeral system to another. Method should accept number, source numeral system and target numeral system.'],
593: 1:  'expectedAnswer': '2',
593: 1:  'history': [
593: 1:    {
593: 1:      'answer': '10',
593: 1:      'question': '10, 10, 10',
593: 1:      'valid': true
593: 1:    },
593: 1:    {
593: 1:      'answer': '1010',
593: 1:      'question': '10, 10, 2',
593: 1:      'valid': true
593: 1:    }
593: 1:  ],
593: 1:  'info': [
593: 1:    '✅f(10, 10, 10) = 10',
593: 1:    '✅f(10, 10, 2) = 1010',
593: 1:    '❌f(10, 2, 10) = ??? != 2'
593: 1:  ],
593: 1:  'level': 22,
593: 1:  'nextQuestion': '10, 2, 10',
593: 1:  'questions': [
593: 1:    '10, 10, 10',
593: 1:    '10, 10, 2',
593: 1:    '10, 2, 10'
593: 1:  ]
593: 1:}
593: 1:Scores: 47713
593: 1:Answer: message('['10', '1010', '2']')
593: 1:Fire Event: PassTest{complexity=28, testCount=21}
------------------------------------------
594: 1:BoardData {
594: 1:  'description': ['Please implement algorithm that converts number from one numeral system to another. Method should accept number, source numeral system and target numeral system.'],
594: 1:  'expectedAnswer': '3e8',
594: 1:  'history': [
594: 1:    {
594: 1:      'answer': '10',
594: 1:      'question': '10, 10, 10',
594: 1:      'valid': true
594: 1:    },
594: 1:    {
594: 1:      'answer': '1010',
594: 1:      'question': '10, 10, 2',
594: 1:      'valid': true
594: 1:    },
594: 1:    {
594: 1:      'answer': '2',
594: 1:      'question': '10, 2, 10',
594: 1:      'valid': true
594: 1:    }
594: 1:  ],
594: 1:  'info': [
594: 1:    '✅f(10, 10, 10) = 10',
594: 1:    '✅f(10, 10, 2) = 1010',
594: 1:    '✅f(10, 2, 10) = 2',
594: 1:    '❌f(1000, 10, 16) = ??? != 3e8'
594: 1:  ],
594: 1:  'level': 22,
594: 1:  'nextQuestion': '1000, 10, 16',
594: 1:  'questions': [
594: 1:    '10, 10, 10',
594: 1:    '10, 10, 2',
594: 1:    '10, 2, 10',
594: 1:    '1000, 10, 16'
594: 1:  ]
594: 1:}
594: 1:Scores: 47726
594: 1:Answer: message('['10', '1010', '2', '3e8']')
594: 1:Fire Event: PassTest{complexity=28, testCount=21}
------------------------------------------
595: 1:BoardData {
595: 1:  'description': ['Please implement algorithm that converts number from one numeral system to another. Method should accept number, source numeral system and target numeral system.'],
595: 1:  'expectedAnswer': '4096',
595: 1:  'history': [
595: 1:    {
595: 1:      'answer': '10',
595: 1:      'question': '10, 10, 10',
595: 1:      'valid': true
595: 1:    },
595: 1:    {
595: 1:      'answer': '1010',
595: 1:      'question': '10, 10, 2',
595: 1:      'valid': true
595: 1:    },
595: 1:    {
595: 1:      'answer': '2',
595: 1:      'question': '10, 2, 10',
595: 1:      'valid': true
595: 1:    },
595: 1:    {
595: 1:      'answer': '3e8',
595: 1:      'question': '1000, 10, 16',
595: 1:      'valid': true
595: 1:    }
595: 1:  ],
595: 1:  'info': [
595: 1:    '✅f(10, 10, 10) = 10',
595: 1:    '✅f(10, 10, 2) = 1010',
595: 1:    '✅f(10, 2, 10) = 2',
595: 1:    '✅f(1000, 10, 16) = 3e8',
595: 1:    '❌f(1000, 16, 10) = ??? != 4096'
595: 1:  ],
595: 1:  'level': 22,
595: 1:  'nextQuestion': '1000, 16, 10',
595: 1:  'questions': [
595: 1:    '10, 10, 10',
595: 1:    '10, 10, 2',
595: 1:    '10, 2, 10',
595: 1:    '1000, 10, 16',
595: 1:    '1000, 16, 10'
595: 1:  ]
595: 1:}
595: 1:Scores: 47739
595: 1:Answer: message('['10', '1010', '2', '3e8', '4096']')
595: 1:Fire Event: PassTest{complexity=28, testCount=21}
------------------------------------------
596: 1:BoardData {
596: 1:  'description': ['Please implement algorithm that converts number from one numeral system to another. Method should accept number, source numeral system and target numeral system.'],
596: 1:  'expectedAnswer': '1000000000000',
596: 1:  'history': [
596: 1:    {
596: 1:      'answer': '10',
596: 1:      'question': '10, 10, 10',
596: 1:      'valid': true
596: 1:    },
596: 1:    {
596: 1:      'answer': '1010',
596: 1:      'question': '10, 10, 2',
596: 1:      'valid': true
596: 1:    },
596: 1:    {
596: 1:      'answer': '2',
596: 1:      'question': '10, 2, 10',
596: 1:      'valid': true
596: 1:    },
596: 1:    {
596: 1:      'answer': '3e8',
596: 1:      'question': '1000, 10, 16',
596: 1:      'valid': true
596: 1:    },
596: 1:    {
596: 1:      'answer': '4096',
596: 1:      'question': '1000, 16, 10',
596: 1:      'valid': true
596: 1:    }
596: 1:  ],
596: 1:  'info': [
596: 1:    '✅f(10, 10, 10) = 10',
596: 1:    '✅f(10, 10, 2) = 1010',
596: 1:    '✅f(10, 2, 10) = 2',
596: 1:    '✅f(1000, 10, 16) = 3e8',
596: 1:    '✅f(1000, 16, 10) = 4096',
596: 1:    '❌f(1000, 16, 2) = ??? != 1000000000000'
596: 1:  ],
596: 1:  'level': 22,
596: 1:  'nextQuestion': '1000, 16, 2',
596: 1:  'questions': [
596: 1:    '10, 10, 10',
596: 1:    '10, 10, 2',
596: 1:    '10, 2, 10',
596: 1:    '1000, 10, 16',
596: 1:    '1000, 16, 10',
596: 1:    '1000, 16, 2'
596: 1:  ]
596: 1:}
596: 1:Scores: 47752
596: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000']')
596: 1:Fire Event: PassTest{complexity=28, testCount=21}
------------------------------------------
597: 1:BoardData {
597: 1:  'description': ['Please implement algorithm that converts number from one numeral system to another. Method should accept number, source numeral system and target numeral system.'],
597: 1:  'expectedAnswer': '1101011001101',
597: 1:  'history': [
597: 1:    {
597: 1:      'answer': '10',
597: 1:      'question': '10, 10, 10',
597: 1:      'valid': true
597: 1:    },
597: 1:    {
597: 1:      'answer': '1010',
597: 1:      'question': '10, 10, 2',
597: 1:      'valid': true
597: 1:    },
597: 1:    {
597: 1:      'answer': '2',
597: 1:      'question': '10, 2, 10',
597: 1:      'valid': true
597: 1:    },
597: 1:    {
597: 1:      'answer': '3e8',
597: 1:      'question': '1000, 10, 16',
597: 1:      'valid': true
597: 1:    },
597: 1:    {
597: 1:      'answer': '4096',
597: 1:      'question': '1000, 16, 10',
597: 1:      'valid': true
597: 1:    },
597: 1:    {
597: 1:      'answer': '1000000000000',
597: 1:      'question': '1000, 16, 2',
597: 1:      'valid': true
597: 1:    }
597: 1:  ],
597: 1:  'info': [
597: 1:    '✅f(10, 10, 10) = 10',
597: 1:    '✅f(10, 10, 2) = 1010',
597: 1:    '✅f(10, 2, 10) = 2',
597: 1:    '✅f(1000, 10, 16) = 3e8',
597: 1:    '✅f(1000, 16, 10) = 4096',
597: 1:    '✅f(1000, 16, 2) = 1000000000000',
597: 1:    '❌f(1ACD, 16, 2) = ??? != 1101011001101'
597: 1:  ],
597: 1:  'level': 22,
597: 1:  'nextQuestion': '1ACD, 16, 2',
597: 1:  'questions': [
597: 1:    '10, 10, 10',
597: 1:    '10, 10, 2',
597: 1:    '10, 2, 10',
597: 1:    '1000, 10, 16',
597: 1:    '1000, 16, 10',
597: 1:    '1000, 16, 2',
597: 1:    '1ACD, 16, 2'
597: 1:  ]
597: 1:}
597: 1:Scores: 47765
597: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101']')
597: 1:Fire Event: PassTest{complexity=28, testCount=21}
------------------------------------------
598: 1:BoardData {
598: 1:  'description': ['Please implement algorithm that converts number from one numeral system to another. Method should accept number, source numeral system and target numeral system.'],
598: 1:  'expectedAnswer': '1010101111001101',
598: 1:  'history': [
598: 1:    {
598: 1:      'answer': '10',
598: 1:      'question': '10, 10, 10',
598: 1:      'valid': true
598: 1:    },
598: 1:    {
598: 1:      'answer': '1010',
598: 1:      'question': '10, 10, 2',
598: 1:      'valid': true
598: 1:    },
598: 1:    {
598: 1:      'answer': '2',
598: 1:      'question': '10, 2, 10',
598: 1:      'valid': true
598: 1:    },
598: 1:    {
598: 1:      'answer': '3e8',
598: 1:      'question': '1000, 10, 16',
598: 1:      'valid': true
598: 1:    },
598: 1:    {
598: 1:      'answer': '4096',
598: 1:      'question': '1000, 16, 10',
598: 1:      'valid': true
598: 1:    },
598: 1:    {
598: 1:      'answer': '1000000000000',
598: 1:      'question': '1000, 16, 2',
598: 1:      'valid': true
598: 1:    },
598: 1:    {
598: 1:      'answer': '1101011001101',
598: 1:      'question': '1ACD, 16, 2',
598: 1:      'valid': true
598: 1:    }
598: 1:  ],
598: 1:  'info': [
598: 1:    '✅f(10, 10, 10) = 10',
598: 1:    '✅f(10, 10, 2) = 1010',
598: 1:    '✅f(10, 2, 10) = 2',
598: 1:    '✅f(1000, 10, 16) = 3e8',
598: 1:    '✅f(1000, 16, 10) = 4096',
598: 1:    '✅f(1000, 16, 2) = 1000000000000',
598: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
598: 1:    '❌f(ABCD, 16, 2) = ??? != 1010101111001101'
598: 1:  ],
598: 1:  'level': 22,
598: 1:  'nextQuestion': 'ABCD, 16, 2',
598: 1:  'questions': [
598: 1:    '10, 10, 10',
598: 1:    '10, 10, 2',
598: 1:    '10, 2, 10',
598: 1:    '1000, 10, 16',
598: 1:    '1000, 16, 10',
598: 1:    '1000, 16, 2',
598: 1:    '1ACD, 16, 2',
598: 1:    'ABCD, 16, 2'
598: 1:  ]
598: 1:}
598: 1:Scores: 47778
598: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101', '1010101111001101']')
598: 1:Fire Event: PassTest{complexity=28, testCount=21}
------------------------------------------
599: 1:BoardData {
599: 1:  'description': ['Please implement algorithm that converts number from one numeral system to another. Method should accept number, source numeral system and target numeral system.'],
599: 1:  'expectedAnswer': '13502',
599: 1:  'history': [
599: 1:    {
599: 1:      'answer': '10',
599: 1:      'question': '10, 10, 10',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': '1010',
599: 1:      'question': '10, 10, 2',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': '2',
599: 1:      'question': '10, 2, 10',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': '3e8',
599: 1:      'question': '1000, 10, 16',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': '4096',
599: 1:      'question': '1000, 16, 10',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': '1000000000000',
599: 1:      'question': '1000, 16, 2',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': '1101011001101',
599: 1:      'question': '1ACD, 16, 2',
599: 1:      'valid': true
599: 1:    },
599: 1:    {
599: 1:      'answer': '1010101111001101',
599: 1:      'question': 'ABCD, 16, 2',
599: 1:      'valid': true
599: 1:    }
599: 1:  ],
599: 1:  'info': [
599: 1:    '✅f(10, 10, 10) = 10',
599: 1:    '✅f(10, 10, 2) = 1010',
599: 1:    '✅f(10, 2, 10) = 2',
599: 1:    '✅f(1000, 10, 16) = 3e8',
599: 1:    '✅f(1000, 16, 10) = 4096',
599: 1:    '✅f(1000, 16, 2) = 1000000000000',
599: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
599: 1:    '✅f(ABCD, 16, 2) = 1010101111001101',
599: 1:    '❌f(34BE, 16, 10) = ??? != 13502'
599: 1:  ],
599: 1:  'level': 22,
599: 1:  'nextQuestion': '34BE, 16, 10',
599: 1:  'questions': [
599: 1:    '10, 10, 10',
599: 1:    '10, 10, 2',
599: 1:    '10, 2, 10',
599: 1:    '1000, 10, 16',
599: 1:    '1000, 16, 10',
599: 1:    '1000, 16, 2',
599: 1:    '1ACD, 16, 2',
599: 1:    'ABCD, 16, 2',
599: 1:    '34BE, 16, 10'
599: 1:  ]
599: 1:}
599: 1:Scores: 47791
599: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101', '1010101111001101', '13502']')
599: 1:Fire Event: PassTest{complexity=28, testCount=21}
------------------------------------------
600: 1:BoardData {
600: 1:  'description': ['Please implement algorithm that converts number from one numeral system to another. Method should accept number, source numeral system and target numeral system.'],
600: 1:  'expectedAnswer': '8',
600: 1:  'history': [
600: 1:    {
600: 1:      'answer': '10',
600: 1:      'question': '10, 10, 10',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': '1010',
600: 1:      'question': '10, 10, 2',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': '2',
600: 1:      'question': '10, 2, 10',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': '3e8',
600: 1:      'question': '1000, 10, 16',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': '4096',
600: 1:      'question': '1000, 16, 10',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': '1000000000000',
600: 1:      'question': '1000, 16, 2',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': '1101011001101',
600: 1:      'question': '1ACD, 16, 2',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': '1010101111001101',
600: 1:      'question': 'ABCD, 16, 2',
600: 1:      'valid': true
600: 1:    },
600: 1:    {
600: 1:      'answer': '13502',
600: 1:      'question': '34BE, 16, 10',
600: 1:      'valid': true
600: 1:    }
600: 1:  ],
600: 1:  'info': [
600: 1:    '✅f(10, 10, 10) = 10',
600: 1:    '✅f(10, 10, 2) = 1010',
600: 1:    '✅f(10, 2, 10) = 2',
600: 1:    '✅f(1000, 10, 16) = 3e8',
600: 1:    '✅f(1000, 16, 10) = 4096',
600: 1:    '✅f(1000, 16, 2) = 1000000000000',
600: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
600: 1:    '✅f(ABCD, 16, 2) = 1010101111001101',
600: 1:    '✅f(34BE, 16, 10) = 13502',
600: 1:    '❌f(1000, 2, 16) = ??? != 8'
600: 1:  ],
600: 1:  'level': 22,
600: 1:  'nextQuestion': '1000, 2, 16',
600: 1:  'questions': [
600: 1:    '10, 10, 10',
600: 1:    '10, 10, 2',
600: 1:    '10, 2, 10',
600: 1:    '1000, 10, 16',
600: 1:    '1000, 16, 10',
600: 1:    '1000, 16, 2',
600: 1:    '1ACD, 16, 2',
600: 1:    'ABCD, 16, 2',
600: 1:    '34BE, 16, 10',
600: 1:    '1000, 2, 16'
600: 1:  ]
600: 1:}
600: 1:Scores: 47804
600: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101', '1010101111001101', '13502', '8']')
600: 1:Fire Event: PassTest{complexity=28, testCount=21}
------------------------------------------
601: 1:BoardData {
601: 1:  'description': ['Please implement algorithm that converts number from one numeral system to another. Method should accept number, source numeral system and target numeral system.'],
601: 1:  'expectedAnswer': 'a',
601: 1:  'history': [
601: 1:    {
601: 1:      'answer': '10',
601: 1:      'question': '10, 10, 10',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': '1010',
601: 1:      'question': '10, 10, 2',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': '2',
601: 1:      'question': '10, 2, 10',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': '3e8',
601: 1:      'question': '1000, 10, 16',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': '4096',
601: 1:      'question': '1000, 16, 10',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': '1000000000000',
601: 1:      'question': '1000, 16, 2',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': '1101011001101',
601: 1:      'question': '1ACD, 16, 2',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': '1010101111001101',
601: 1:      'question': 'ABCD, 16, 2',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': '13502',
601: 1:      'question': '34BE, 16, 10',
601: 1:      'valid': true
601: 1:    },
601: 1:    {
601: 1:      'answer': '8',
601: 1:      'question': '1000, 2, 16',
601: 1:      'valid': true
601: 1:    }
601: 1:  ],
601: 1:  'info': [
601: 1:    '✅f(10, 10, 10) = 10',
601: 1:    '✅f(10, 10, 2) = 1010',
601: 1:    '✅f(10, 2, 10) = 2',
601: 1:    '✅f(1000, 10, 16) = 3e8',
601: 1:    '✅f(1000, 16, 10) = 4096',
601: 1:    '✅f(1000, 16, 2) = 1000000000000',
601: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
601: 1:    '✅f(ABCD, 16, 2) = 1010101111001101',
601: 1:    '✅f(34BE, 16, 10) = 13502',
601: 1:    '✅f(1000, 2, 16) = 8',
601: 1:    '❌f(1010, 2, 16) = ??? != a'
601: 1:  ],
601: 1:  'level': 22,
601: 1:  'nextQuestion': '1010, 2, 16',
601: 1:  'questions': [
601: 1:    '10, 10, 10',
601: 1:    '10, 10, 2',
601: 1:    '10, 2, 10',
601: 1:    '1000, 10, 16',
601: 1:    '1000, 16, 10',
601: 1:    '1000, 16, 2',
601: 1:    '1ACD, 16, 2',
601: 1:    'ABCD, 16, 2',
601: 1:    '34BE, 16, 10',
601: 1:    '1000, 2, 16',
601: 1:    '1010, 2, 16'
601: 1:  ]
601: 1:}
601: 1:Scores: 47817
601: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101', '1010101111001101', '13502', '8', 'a']')
601: 1:Fire Event: PassTest{complexity=28, testCount=21}
------------------------------------------
602: 1:BoardData {
602: 1:  'description': ['Please implement algorithm that converts number from one numeral system to another. Method should accept number, source numeral system and target numeral system.'],
602: 1:  'expectedAnswer': '1111',
602: 1:  'history': [
602: 1:    {
602: 1:      'answer': '10',
602: 1:      'question': '10, 10, 10',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': '1010',
602: 1:      'question': '10, 10, 2',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': '2',
602: 1:      'question': '10, 2, 10',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': '3e8',
602: 1:      'question': '1000, 10, 16',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': '4096',
602: 1:      'question': '1000, 16, 10',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': '1000000000000',
602: 1:      'question': '1000, 16, 2',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': '1101011001101',
602: 1:      'question': '1ACD, 16, 2',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': '1010101111001101',
602: 1:      'question': 'ABCD, 16, 2',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': '13502',
602: 1:      'question': '34BE, 16, 10',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': '8',
602: 1:      'question': '1000, 2, 16',
602: 1:      'valid': true
602: 1:    },
602: 1:    {
602: 1:      'answer': 'a',
602: 1:      'question': '1010, 2, 16',
602: 1:      'valid': true
602: 1:    }
602: 1:  ],
602: 1:  'info': [
602: 1:    '✅f(10, 10, 10) = 10',
602: 1:    '✅f(10, 10, 2) = 1010',
602: 1:    '✅f(10, 2, 10) = 2',
602: 1:    '✅f(1000, 10, 16) = 3e8',
602: 1:    '✅f(1000, 16, 10) = 4096',
602: 1:    '✅f(1000, 16, 2) = 1000000000000',
602: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
602: 1:    '✅f(ABCD, 16, 2) = 1010101111001101',
602: 1:    '✅f(34BE, 16, 10) = 13502',
602: 1:    '✅f(1000, 2, 16) = 8',
602: 1:    '✅f(1010, 2, 16) = a',
602: 1:    '❌f(1010101, 2, 4) = ??? != 1111'
602: 1:  ],
602: 1:  'level': 22,
602: 1:  'nextQuestion': '1010101, 2, 4',
602: 1:  'questions': [
602: 1:    '10, 10, 10',
602: 1:    '10, 10, 2',
602: 1:    '10, 2, 10',
602: 1:    '1000, 10, 16',
602: 1:    '1000, 16, 10',
602: 1:    '1000, 16, 2',
602: 1:    '1ACD, 16, 2',
602: 1:    'ABCD, 16, 2',
602: 1:    '34BE, 16, 10',
602: 1:    '1000, 2, 16',
602: 1:    '1010, 2, 16',
602: 1:    '1010101, 2, 4'
602: 1:  ]
602: 1:}
602: 1:Scores: 47830
602: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101', '1010101111001101', '13502', '8', 'a', '1111']')
602: 1:Fire Event: PassTest{complexity=28, testCount=21}
------------------------------------------
603: 1:BoardData {
603: 1:  'description': ['Please implement algorithm that converts number from one numeral system to another. Method should accept number, source numeral system and target numeral system.'],
603: 1:  'expectedAnswer': '221',
603: 1:  'history': [
603: 1:    {
603: 1:      'answer': '10',
603: 1:      'question': '10, 10, 10',
603: 1:      'valid': true
603: 1:    },
603: 1:    {
603: 1:      'answer': '1010',
603: 1:      'question': '10, 10, 2',
603: 1:      'valid': true
603: 1:    },
603: 1:    {
603: 1:      'answer': '2',
603: 1:      'question': '10, 2, 10',
603: 1:      'valid': true
603: 1:    },
603: 1:    {
603: 1:      'answer': '3e8',
603: 1:      'question': '1000, 10, 16',
603: 1:      'valid': true
603: 1:    },
603: 1:    {
603: 1:      'answer': '4096',
603: 1:      'question': '1000, 16, 10',
603: 1:      'valid': true
603: 1:    },
603: 1:    {
603: 1:      'answer': '1000000000000',
603: 1:      'question': '1000, 16, 2',
603: 1:      'valid': true
603: 1:    },
603: 1:    {
603: 1:      'answer': '1101011001101',
603: 1:      'question': '1ACD, 16, 2',
603: 1:      'valid': true
603: 1:    },
603: 1:    {
603: 1:      'answer': '1010101111001101',
603: 1:      'question': 'ABCD, 16, 2',
603: 1:      'valid': true
603: 1:    },
603: 1:    {
603: 1:      'answer': '13502',
603: 1:      'question': '34BE, 16, 10',
603: 1:      'valid': true
603: 1:    },
603: 1:    {
603: 1:      'answer': '8',
603: 1:      'question': '1000, 2, 16',
603: 1:      'valid': true
603: 1:    },
603: 1:    {
603: 1:      'answer': 'a',
603: 1:      'question': '1010, 2, 16',
603: 1:      'valid': true
603: 1:    },
603: 1:    {
603: 1:      'answer': '1111',
603: 1:      'question': '1010101, 2, 4',
603: 1:      'valid': true
603: 1:    }
603: 1:  ],
603: 1:  'info': [
603: 1:    '✅f(10, 10, 10) = 10',
603: 1:    '✅f(10, 10, 2) = 1010',
603: 1:    '✅f(10, 2, 10) = 2',
603: 1:    '✅f(1000, 10, 16) = 3e8',
603: 1:    '✅f(1000, 16, 10) = 4096',
603: 1:    '✅f(1000, 16, 2) = 1000000000000',
603: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
603: 1:    '✅f(ABCD, 16, 2) = 1010101111001101',
603: 1:    '✅f(34BE, 16, 10) = 13502',
603: 1:    '✅f(1000, 2, 16) = 8',
603: 1:    '✅f(1010, 2, 16) = a',
603: 1:    '✅f(1010101, 2, 4) = 1111',
603: 1:    '❌f(1010101, 2, 6) = ??? != 221'
603: 1:  ],
603: 1:  'level': 22,
603: 1:  'nextQuestion': '1010101, 2, 6',
603: 1:  'questions': [
603: 1:    '10, 10, 10',
603: 1:    '10, 10, 2',
603: 1:    '10, 2, 10',
603: 1:    '1000, 10, 16',
603: 1:    '1000, 16, 10',
603: 1:    '1000, 16, 2',
603: 1:    '1ACD, 16, 2',
603: 1:    'ABCD, 16, 2',
603: 1:    '34BE, 16, 10',
603: 1:    '1000, 2, 16',
603: 1:    '1010, 2, 16',
603: 1:    '1010101, 2, 4',
603: 1:    '1010101, 2, 6'
603: 1:  ]
603: 1:}
603: 1:Scores: 47843
603: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101', '1010101111001101', '13502', '8', 'a', '1111', '221']')
603: 1:Fire Event: PassTest{complexity=28, testCount=21}
------------------------------------------
604: 1:BoardData {
604: 1:  'description': ['Please implement algorithm that converts number from one numeral system to another. Method should accept number, source numeral system and target numeral system.'],
604: 1:  'expectedAnswer': '125',
604: 1:  'history': [
604: 1:    {
604: 1:      'answer': '10',
604: 1:      'question': '10, 10, 10',
604: 1:      'valid': true
604: 1:    },
604: 1:    {
604: 1:      'answer': '1010',
604: 1:      'question': '10, 10, 2',
604: 1:      'valid': true
604: 1:    },
604: 1:    {
604: 1:      'answer': '2',
604: 1:      'question': '10, 2, 10',
604: 1:      'valid': true
604: 1:    },
604: 1:    {
604: 1:      'answer': '3e8',
604: 1:      'question': '1000, 10, 16',
604: 1:      'valid': true
604: 1:    },
604: 1:    {
604: 1:      'answer': '4096',
604: 1:      'question': '1000, 16, 10',
604: 1:      'valid': true
604: 1:    },
604: 1:    {
604: 1:      'answer': '1000000000000',
604: 1:      'question': '1000, 16, 2',
604: 1:      'valid': true
604: 1:    },
604: 1:    {
604: 1:      'answer': '1101011001101',
604: 1:      'question': '1ACD, 16, 2',
604: 1:      'valid': true
604: 1:    },
604: 1:    {
604: 1:      'answer': '1010101111001101',
604: 1:      'question': 'ABCD, 16, 2',
604: 1:      'valid': true
604: 1:    },
604: 1:    {
604: 1:      'answer': '13502',
604: 1:      'question': '34BE, 16, 10',
604: 1:      'valid': true
604: 1:    },
604: 1:    {
604: 1:      'answer': '8',
604: 1:      'question': '1000, 2, 16',
604: 1:      'valid': true
604: 1:    },
604: 1:    {
604: 1:      'answer': 'a',
604: 1:      'question': '1010, 2, 16',
604: 1:      'valid': true
604: 1:    },
604: 1:    {
604: 1:      'answer': '1111',
604: 1:      'question': '1010101, 2, 4',
604: 1:      'valid': true
604: 1:    },
604: 1:    {
604: 1:      'answer': '221',
604: 1:      'question': '1010101, 2, 6',
604: 1:      'valid': true
604: 1:    }
604: 1:  ],
604: 1:  'info': [
604: 1:    '✅f(10, 10, 10) = 10',
604: 1:    '✅f(10, 10, 2) = 1010',
604: 1:    '✅f(10, 2, 10) = 2',
604: 1:    '✅f(1000, 10, 16) = 3e8',
604: 1:    '✅f(1000, 16, 10) = 4096',
604: 1:    '✅f(1000, 16, 2) = 1000000000000',
604: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
604: 1:    '✅f(ABCD, 16, 2) = 1010101111001101',
604: 1:    '✅f(34BE, 16, 10) = 13502',
604: 1:    '✅f(1000, 2, 16) = 8',
604: 1:    '✅f(1010, 2, 16) = a',
604: 1:    '✅f(1010101, 2, 4) = 1111',
604: 1:    '✅f(1010101, 2, 6) = 221',
604: 1:    '❌f(1010101, 2, 8) = ??? != 125'
604: 1:  ],
604: 1:  'level': 22,
604: 1:  'nextQuestion': '1010101, 2, 8',
604: 1:  'questions': [
604: 1:    '10, 10, 10',
604: 1:    '10, 10, 2',
604: 1:    '10, 2, 10',
604: 1:    '1000, 10, 16',
604: 1:    '1000, 16, 10',
604: 1:    '1000, 16, 2',
604: 1:    '1ACD, 16, 2',
604: 1:    'ABCD, 16, 2',
604: 1:    '34BE, 16, 10',
604: 1:    '1000, 2, 16',
604: 1:    '1010, 2, 16',
604: 1:    '1010101, 2, 4',
604: 1:    '1010101, 2, 6',
604: 1:    '1010101, 2, 8'
604: 1:  ]
604: 1:}
604: 1:Scores: 47856
604: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101', '1010101111001101', '13502', '8', 'a', '1111', '221', '125']')
604: 1:Fire Event: PassTest{complexity=28, testCount=21}
------------------------------------------
605: 1:BoardData {
605: 1:  'description': ['Please implement algorithm that converts number from one numeral system to another. Method should accept number, source numeral system and target numeral system.'],
605: 1:  'expectedAnswer': '85',
605: 1:  'history': [
605: 1:    {
605: 1:      'answer': '10',
605: 1:      'question': '10, 10, 10',
605: 1:      'valid': true
605: 1:    },
605: 1:    {
605: 1:      'answer': '1010',
605: 1:      'question': '10, 10, 2',
605: 1:      'valid': true
605: 1:    },
605: 1:    {
605: 1:      'answer': '2',
605: 1:      'question': '10, 2, 10',
605: 1:      'valid': true
605: 1:    },
605: 1:    {
605: 1:      'answer': '3e8',
605: 1:      'question': '1000, 10, 16',
605: 1:      'valid': true
605: 1:    },
605: 1:    {
605: 1:      'answer': '4096',
605: 1:      'question': '1000, 16, 10',
605: 1:      'valid': true
605: 1:    },
605: 1:    {
605: 1:      'answer': '1000000000000',
605: 1:      'question': '1000, 16, 2',
605: 1:      'valid': true
605: 1:    },
605: 1:    {
605: 1:      'answer': '1101011001101',
605: 1:      'question': '1ACD, 16, 2',
605: 1:      'valid': true
605: 1:    },
605: 1:    {
605: 1:      'answer': '1010101111001101',
605: 1:      'question': 'ABCD, 16, 2',
605: 1:      'valid': true
605: 1:    },
605: 1:    {
605: 1:      'answer': '13502',
605: 1:      'question': '34BE, 16, 10',
605: 1:      'valid': true
605: 1:    },
605: 1:    {
605: 1:      'answer': '8',
605: 1:      'question': '1000, 2, 16',
605: 1:      'valid': true
605: 1:    },
605: 1:    {
605: 1:      'answer': 'a',
605: 1:      'question': '1010, 2, 16',
605: 1:      'valid': true
605: 1:    },
605: 1:    {
605: 1:      'answer': '1111',
605: 1:      'question': '1010101, 2, 4',
605: 1:      'valid': true
605: 1:    },
605: 1:    {
605: 1:      'answer': '221',
605: 1:      'question': '1010101, 2, 6',
605: 1:      'valid': true
605: 1:    },
605: 1:    {
605: 1:      'answer': '125',
605: 1:      'question': '1010101, 2, 8',
605: 1:      'valid': true
605: 1:    }
605: 1:  ],
605: 1:  'info': [
605: 1:    '✅f(10, 10, 10) = 10',
605: 1:    '✅f(10, 10, 2) = 1010',
605: 1:    '✅f(10, 2, 10) = 2',
605: 1:    '✅f(1000, 10, 16) = 3e8',
605: 1:    '✅f(1000, 16, 10) = 4096',
605: 1:    '✅f(1000, 16, 2) = 1000000000000',
605: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
605: 1:    '✅f(ABCD, 16, 2) = 1010101111001101',
605: 1:    '✅f(34BE, 16, 10) = 13502',
605: 1:    '✅f(1000, 2, 16) = 8',
605: 1:    '✅f(1010, 2, 16) = a',
605: 1:    '✅f(1010101, 2, 4) = 1111',
605: 1:    '✅f(1010101, 2, 6) = 221',
605: 1:    '✅f(1010101, 2, 8) = 125',
605: 1:    '❌f(1010101, 2, 10) = ??? != 85'
605: 1:  ],
605: 1:  'level': 22,
605: 1:  'nextQuestion': '1010101, 2, 10',
605: 1:  'questions': [
605: 1:    '10, 10, 10',
605: 1:    '10, 10, 2',
605: 1:    '10, 2, 10',
605: 1:    '1000, 10, 16',
605: 1:    '1000, 16, 10',
605: 1:    '1000, 16, 2',
605: 1:    '1ACD, 16, 2',
605: 1:    'ABCD, 16, 2',
605: 1:    '34BE, 16, 10',
605: 1:    '1000, 2, 16',
605: 1:    '1010, 2, 16',
605: 1:    '1010101, 2, 4',
605: 1:    '1010101, 2, 6',
605: 1:    '1010101, 2, 8',
605: 1:    '1010101, 2, 10'
605: 1:  ]
605: 1:}
605: 1:Scores: 47869
605: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101', '1010101111001101', '13502', '8', 'a', '1111', '221', '125', '85']')
605: 1:Fire Event: PassTest{complexity=28, testCount=21}
------------------------------------------
606: 1:BoardData {
606: 1:  'description': ['Please implement algorithm that converts number from one numeral system to another. Method should accept number, source numeral system and target numeral system.'],
606: 1:  'expectedAnswer': '71',
606: 1:  'history': [
606: 1:    {
606: 1:      'answer': '10',
606: 1:      'question': '10, 10, 10',
606: 1:      'valid': true
606: 1:    },
606: 1:    {
606: 1:      'answer': '1010',
606: 1:      'question': '10, 10, 2',
606: 1:      'valid': true
606: 1:    },
606: 1:    {
606: 1:      'answer': '2',
606: 1:      'question': '10, 2, 10',
606: 1:      'valid': true
606: 1:    },
606: 1:    {
606: 1:      'answer': '3e8',
606: 1:      'question': '1000, 10, 16',
606: 1:      'valid': true
606: 1:    },
606: 1:    {
606: 1:      'answer': '4096',
606: 1:      'question': '1000, 16, 10',
606: 1:      'valid': true
606: 1:    },
606: 1:    {
606: 1:      'answer': '1000000000000',
606: 1:      'question': '1000, 16, 2',
606: 1:      'valid': true
606: 1:    },
606: 1:    {
606: 1:      'answer': '1101011001101',
606: 1:      'question': '1ACD, 16, 2',
606: 1:      'valid': true
606: 1:    },
606: 1:    {
606: 1:      'answer': '1010101111001101',
606: 1:      'question': 'ABCD, 16, 2',
606: 1:      'valid': true
606: 1:    },
606: 1:    {
606: 1:      'answer': '13502',
606: 1:      'question': '34BE, 16, 10',
606: 1:      'valid': true
606: 1:    },
606: 1:    {
606: 1:      'answer': '8',
606: 1:      'question': '1000, 2, 16',
606: 1:      'valid': true
606: 1:    },
606: 1:    {
606: 1:      'answer': 'a',
606: 1:      'question': '1010, 2, 16',
606: 1:      'valid': true
606: 1:    },
606: 1:    {
606: 1:      'answer': '1111',
606: 1:      'question': '1010101, 2, 4',
606: 1:      'valid': true
606: 1:    },
606: 1:    {
606: 1:      'answer': '221',
606: 1:      'question': '1010101, 2, 6',
606: 1:      'valid': true
606: 1:    },
606: 1:    {
606: 1:      'answer': '125',
606: 1:      'question': '1010101, 2, 8',
606: 1:      'valid': true
606: 1:    },
606: 1:    {
606: 1:      'answer': '85',
606: 1:      'question': '1010101, 2, 10',
606: 1:      'valid': true
606: 1:    }
606: 1:  ],
606: 1:  'info': [
606: 1:    '✅f(10, 10, 10) = 10',
606: 1:    '✅f(10, 10, 2) = 1010',
606: 1:    '✅f(10, 2, 10) = 2',
606: 1:    '✅f(1000, 10, 16) = 3e8',
606: 1:    '✅f(1000, 16, 10) = 4096',
606: 1:    '✅f(1000, 16, 2) = 1000000000000',
606: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
606: 1:    '✅f(ABCD, 16, 2) = 1010101111001101',
606: 1:    '✅f(34BE, 16, 10) = 13502',
606: 1:    '✅f(1000, 2, 16) = 8',
606: 1:    '✅f(1010, 2, 16) = a',
606: 1:    '✅f(1010101, 2, 4) = 1111',
606: 1:    '✅f(1010101, 2, 6) = 221',
606: 1:    '✅f(1010101, 2, 8) = 125',
606: 1:    '✅f(1010101, 2, 10) = 85',
606: 1:    '❌f(1010101, 2, 12) = ??? != 71'
606: 1:  ],
606: 1:  'level': 22,
606: 1:  'nextQuestion': '1010101, 2, 12',
606: 1:  'questions': [
606: 1:    '10, 10, 10',
606: 1:    '10, 10, 2',
606: 1:    '10, 2, 10',
606: 1:    '1000, 10, 16',
606: 1:    '1000, 16, 10',
606: 1:    '1000, 16, 2',
606: 1:    '1ACD, 16, 2',
606: 1:    'ABCD, 16, 2',
606: 1:    '34BE, 16, 10',
606: 1:    '1000, 2, 16',
606: 1:    '1010, 2, 16',
606: 1:    '1010101, 2, 4',
606: 1:    '1010101, 2, 6',
606: 1:    '1010101, 2, 8',
606: 1:    '1010101, 2, 10',
606: 1:    '1010101, 2, 12'
606: 1:  ]
606: 1:}
606: 1:Scores: 47882
606: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101', '1010101111001101', '13502', '8', 'a', '1111', '221', '125', '85', '71']')
606: 1:Fire Event: PassTest{complexity=28, testCount=21}
------------------------------------------
607: 1:BoardData {
607: 1:  'description': ['Please implement algorithm that converts number from one numeral system to another. Method should accept number, source numeral system and target numeral system.'],
607: 1:  'expectedAnswer': '61',
607: 1:  'history': [
607: 1:    {
607: 1:      'answer': '10',
607: 1:      'question': '10, 10, 10',
607: 1:      'valid': true
607: 1:    },
607: 1:    {
607: 1:      'answer': '1010',
607: 1:      'question': '10, 10, 2',
607: 1:      'valid': true
607: 1:    },
607: 1:    {
607: 1:      'answer': '2',
607: 1:      'question': '10, 2, 10',
607: 1:      'valid': true
607: 1:    },
607: 1:    {
607: 1:      'answer': '3e8',
607: 1:      'question': '1000, 10, 16',
607: 1:      'valid': true
607: 1:    },
607: 1:    {
607: 1:      'answer': '4096',
607: 1:      'question': '1000, 16, 10',
607: 1:      'valid': true
607: 1:    },
607: 1:    {
607: 1:      'answer': '1000000000000',
607: 1:      'question': '1000, 16, 2',
607: 1:      'valid': true
607: 1:    },
607: 1:    {
607: 1:      'answer': '1101011001101',
607: 1:      'question': '1ACD, 16, 2',
607: 1:      'valid': true
607: 1:    },
607: 1:    {
607: 1:      'answer': '1010101111001101',
607: 1:      'question': 'ABCD, 16, 2',
607: 1:      'valid': true
607: 1:    },
607: 1:    {
607: 1:      'answer': '13502',
607: 1:      'question': '34BE, 16, 10',
607: 1:      'valid': true
607: 1:    },
607: 1:    {
607: 1:      'answer': '8',
607: 1:      'question': '1000, 2, 16',
607: 1:      'valid': true
607: 1:    },
607: 1:    {
607: 1:      'answer': 'a',
607: 1:      'question': '1010, 2, 16',
607: 1:      'valid': true
607: 1:    },
607: 1:    {
607: 1:      'answer': '1111',
607: 1:      'question': '1010101, 2, 4',
607: 1:      'valid': true
607: 1:    },
607: 1:    {
607: 1:      'answer': '221',
607: 1:      'question': '1010101, 2, 6',
607: 1:      'valid': true
607: 1:    },
607: 1:    {
607: 1:      'answer': '125',
607: 1:      'question': '1010101, 2, 8',
607: 1:      'valid': true
607: 1:    },
607: 1:    {
607: 1:      'answer': '85',
607: 1:      'question': '1010101, 2, 10',
607: 1:      'valid': true
607: 1:    },
607: 1:    {
607: 1:      'answer': '71',
607: 1:      'question': '1010101, 2, 12',
607: 1:      'valid': true
607: 1:    }
607: 1:  ],
607: 1:  'info': [
607: 1:    '✅f(10, 10, 10) = 10',
607: 1:    '✅f(10, 10, 2) = 1010',
607: 1:    '✅f(10, 2, 10) = 2',
607: 1:    '✅f(1000, 10, 16) = 3e8',
607: 1:    '✅f(1000, 16, 10) = 4096',
607: 1:    '✅f(1000, 16, 2) = 1000000000000',
607: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
607: 1:    '✅f(ABCD, 16, 2) = 1010101111001101',
607: 1:    '✅f(34BE, 16, 10) = 13502',
607: 1:    '✅f(1000, 2, 16) = 8',
607: 1:    '✅f(1010, 2, 16) = a',
607: 1:    '✅f(1010101, 2, 4) = 1111',
607: 1:    '✅f(1010101, 2, 6) = 221',
607: 1:    '✅f(1010101, 2, 8) = 125',
607: 1:    '✅f(1010101, 2, 10) = 85',
607: 1:    '✅f(1010101, 2, 12) = 71',
607: 1:    '❌f(1010101, 2, 14) = ??? != 61'
607: 1:  ],
607: 1:  'level': 22,
607: 1:  'nextQuestion': '1010101, 2, 14',
607: 1:  'questions': [
607: 1:    '10, 10, 10',
607: 1:    '10, 10, 2',
607: 1:    '10, 2, 10',
607: 1:    '1000, 10, 16',
607: 1:    '1000, 16, 10',
607: 1:    '1000, 16, 2',
607: 1:    '1ACD, 16, 2',
607: 1:    'ABCD, 16, 2',
607: 1:    '34BE, 16, 10',
607: 1:    '1000, 2, 16',
607: 1:    '1010, 2, 16',
607: 1:    '1010101, 2, 4',
607: 1:    '1010101, 2, 6',
607: 1:    '1010101, 2, 8',
607: 1:    '1010101, 2, 10',
607: 1:    '1010101, 2, 12',
607: 1:    '1010101, 2, 14'
607: 1:  ]
607: 1:}
607: 1:Scores: 47895
607: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101', '1010101111001101', '13502', '8', 'a', '1111', '221', '125', '85', '71', '61']')
607: 1:Fire Event: PassTest{complexity=28, testCount=21}
------------------------------------------
608: 1:BoardData {
608: 1:  'description': ['Please implement algorithm that converts number from one numeral system to another. Method should accept number, source numeral system and target numeral system.'],
608: 1:  'expectedAnswer': '55',
608: 1:  'history': [
608: 1:    {
608: 1:      'answer': '10',
608: 1:      'question': '10, 10, 10',
608: 1:      'valid': true
608: 1:    },
608: 1:    {
608: 1:      'answer': '1010',
608: 1:      'question': '10, 10, 2',
608: 1:      'valid': true
608: 1:    },
608: 1:    {
608: 1:      'answer': '2',
608: 1:      'question': '10, 2, 10',
608: 1:      'valid': true
608: 1:    },
608: 1:    {
608: 1:      'answer': '3e8',
608: 1:      'question': '1000, 10, 16',
608: 1:      'valid': true
608: 1:    },
608: 1:    {
608: 1:      'answer': '4096',
608: 1:      'question': '1000, 16, 10',
608: 1:      'valid': true
608: 1:    },
608: 1:    {
608: 1:      'answer': '1000000000000',
608: 1:      'question': '1000, 16, 2',
608: 1:      'valid': true
608: 1:    },
608: 1:    {
608: 1:      'answer': '1101011001101',
608: 1:      'question': '1ACD, 16, 2',
608: 1:      'valid': true
608: 1:    },
608: 1:    {
608: 1:      'answer': '1010101111001101',
608: 1:      'question': 'ABCD, 16, 2',
608: 1:      'valid': true
608: 1:    },
608: 1:    {
608: 1:      'answer': '13502',
608: 1:      'question': '34BE, 16, 10',
608: 1:      'valid': true
608: 1:    },
608: 1:    {
608: 1:      'answer': '8',
608: 1:      'question': '1000, 2, 16',
608: 1:      'valid': true
608: 1:    },
608: 1:    {
608: 1:      'answer': 'a',
608: 1:      'question': '1010, 2, 16',
608: 1:      'valid': true
608: 1:    },
608: 1:    {
608: 1:      'answer': '1111',
608: 1:      'question': '1010101, 2, 4',
608: 1:      'valid': true
608: 1:    },
608: 1:    {
608: 1:      'answer': '221',
608: 1:      'question': '1010101, 2, 6',
608: 1:      'valid': true
608: 1:    },
608: 1:    {
608: 1:      'answer': '125',
608: 1:      'question': '1010101, 2, 8',
608: 1:      'valid': true
608: 1:    },
608: 1:    {
608: 1:      'answer': '85',
608: 1:      'question': '1010101, 2, 10',
608: 1:      'valid': true
608: 1:    },
608: 1:    {
608: 1:      'answer': '71',
608: 1:      'question': '1010101, 2, 12',
608: 1:      'valid': true
608: 1:    },
608: 1:    {
608: 1:      'answer': '61',
608: 1:      'question': '1010101, 2, 14',
608: 1:      'valid': true
608: 1:    }
608: 1:  ],
608: 1:  'info': [
608: 1:    '✅f(10, 10, 10) = 10',
608: 1:    '✅f(10, 10, 2) = 1010',
608: 1:    '✅f(10, 2, 10) = 2',
608: 1:    '✅f(1000, 10, 16) = 3e8',
608: 1:    '✅f(1000, 16, 10) = 4096',
608: 1:    '✅f(1000, 16, 2) = 1000000000000',
608: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
608: 1:    '✅f(ABCD, 16, 2) = 1010101111001101',
608: 1:    '✅f(34BE, 16, 10) = 13502',
608: 1:    '✅f(1000, 2, 16) = 8',
608: 1:    '✅f(1010, 2, 16) = a',
608: 1:    '✅f(1010101, 2, 4) = 1111',
608: 1:    '✅f(1010101, 2, 6) = 221',
608: 1:    '✅f(1010101, 2, 8) = 125',
608: 1:    '✅f(1010101, 2, 10) = 85',
608: 1:    '✅f(1010101, 2, 12) = 71',
608: 1:    '✅f(1010101, 2, 14) = 61',
608: 1:    '❌f(1010101, 2, 16) = ??? != 55'
608: 1:  ],
608: 1:  'level': 22,
608: 1:  'nextQuestion': '1010101, 2, 16',
608: 1:  'questions': [
608: 1:    '10, 10, 10',
608: 1:    '10, 10, 2',
608: 1:    '10, 2, 10',
608: 1:    '1000, 10, 16',
608: 1:    '1000, 16, 10',
608: 1:    '1000, 16, 2',
608: 1:    '1ACD, 16, 2',
608: 1:    'ABCD, 16, 2',
608: 1:    '34BE, 16, 10',
608: 1:    '1000, 2, 16',
608: 1:    '1010, 2, 16',
608: 1:    '1010101, 2, 4',
608: 1:    '1010101, 2, 6',
608: 1:    '1010101, 2, 8',
608: 1:    '1010101, 2, 10',
608: 1:    '1010101, 2, 12',
608: 1:    '1010101, 2, 14',
608: 1:    '1010101, 2, 16'
608: 1:  ]
608: 1:}
608: 1:Scores: 47908
608: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101', '1010101111001101', '13502', '8', 'a', '1111', '221', '125', '85', '71', '61', '55']')
608: 1:Fire Event: PassTest{complexity=28, testCount=21}
------------------------------------------
609: 1:BoardData {
609: 1:  'description': ['Please implement algorithm that converts number from one numeral system to another. Method should accept number, source numeral system and target numeral system.'],
609: 1:  'expectedAnswer': '0',
609: 1:  'history': [
609: 1:    {
609: 1:      'answer': '10',
609: 1:      'question': '10, 10, 10',
609: 1:      'valid': true
609: 1:    },
609: 1:    {
609: 1:      'answer': '1010',
609: 1:      'question': '10, 10, 2',
609: 1:      'valid': true
609: 1:    },
609: 1:    {
609: 1:      'answer': '2',
609: 1:      'question': '10, 2, 10',
609: 1:      'valid': true
609: 1:    },
609: 1:    {
609: 1:      'answer': '3e8',
609: 1:      'question': '1000, 10, 16',
609: 1:      'valid': true
609: 1:    },
609: 1:    {
609: 1:      'answer': '4096',
609: 1:      'question': '1000, 16, 10',
609: 1:      'valid': true
609: 1:    },
609: 1:    {
609: 1:      'answer': '1000000000000',
609: 1:      'question': '1000, 16, 2',
609: 1:      'valid': true
609: 1:    },
609: 1:    {
609: 1:      'answer': '1101011001101',
609: 1:      'question': '1ACD, 16, 2',
609: 1:      'valid': true
609: 1:    },
609: 1:    {
609: 1:      'answer': '1010101111001101',
609: 1:      'question': 'ABCD, 16, 2',
609: 1:      'valid': true
609: 1:    },
609: 1:    {
609: 1:      'answer': '13502',
609: 1:      'question': '34BE, 16, 10',
609: 1:      'valid': true
609: 1:    },
609: 1:    {
609: 1:      'answer': '8',
609: 1:      'question': '1000, 2, 16',
609: 1:      'valid': true
609: 1:    },
609: 1:    {
609: 1:      'answer': 'a',
609: 1:      'question': '1010, 2, 16',
609: 1:      'valid': true
609: 1:    },
609: 1:    {
609: 1:      'answer': '1111',
609: 1:      'question': '1010101, 2, 4',
609: 1:      'valid': true
609: 1:    },
609: 1:    {
609: 1:      'answer': '221',
609: 1:      'question': '1010101, 2, 6',
609: 1:      'valid': true
609: 1:    },
609: 1:    {
609: 1:      'answer': '125',
609: 1:      'question': '1010101, 2, 8',
609: 1:      'valid': true
609: 1:    },
609: 1:    {
609: 1:      'answer': '85',
609: 1:      'question': '1010101, 2, 10',
609: 1:      'valid': true
609: 1:    },
609: 1:    {
609: 1:      'answer': '71',
609: 1:      'question': '1010101, 2, 12',
609: 1:      'valid': true
609: 1:    },
609: 1:    {
609: 1:      'answer': '61',
609: 1:      'question': '1010101, 2, 14',
609: 1:      'valid': true
609: 1:    },
609: 1:    {
609: 1:      'answer': '55',
609: 1:      'question': '1010101, 2, 16',
609: 1:      'valid': true
609: 1:    }
609: 1:  ],
609: 1:  'info': [
609: 1:    '✅f(10, 10, 10) = 10',
609: 1:    '✅f(10, 10, 2) = 1010',
609: 1:    '✅f(10, 2, 10) = 2',
609: 1:    '✅f(1000, 10, 16) = 3e8',
609: 1:    '✅f(1000, 16, 10) = 4096',
609: 1:    '✅f(1000, 16, 2) = 1000000000000',
609: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
609: 1:    '✅f(ABCD, 16, 2) = 1010101111001101',
609: 1:    '✅f(34BE, 16, 10) = 13502',
609: 1:    '✅f(1000, 2, 16) = 8',
609: 1:    '✅f(1010, 2, 16) = a',
609: 1:    '✅f(1010101, 2, 4) = 1111',
609: 1:    '✅f(1010101, 2, 6) = 221',
609: 1:    '✅f(1010101, 2, 8) = 125',
609: 1:    '✅f(1010101, 2, 10) = 85',
609: 1:    '✅f(1010101, 2, 12) = 71',
609: 1:    '✅f(1010101, 2, 14) = 61',
609: 1:    '✅f(1010101, 2, 16) = 55',
609: 1:    '❌f(0, 2, 16) = ??? != 0'
609: 1:  ],
609: 1:  'level': 22,
609: 1:  'nextQuestion': '0, 2, 16',
609: 1:  'questions': [
609: 1:    '10, 10, 10',
609: 1:    '10, 10, 2',
609: 1:    '10, 2, 10',
609: 1:    '1000, 10, 16',
609: 1:    '1000, 16, 10',
609: 1:    '1000, 16, 2',
609: 1:    '1ACD, 16, 2',
609: 1:    'ABCD, 16, 2',
609: 1:    '34BE, 16, 10',
609: 1:    '1000, 2, 16',
609: 1:    '1010, 2, 16',
609: 1:    '1010101, 2, 4',
609: 1:    '1010101, 2, 6',
609: 1:    '1010101, 2, 8',
609: 1:    '1010101, 2, 10',
609: 1:    '1010101, 2, 12',
609: 1:    '1010101, 2, 14',
609: 1:    '1010101, 2, 16',
609: 1:    '0, 2, 16'
609: 1:  ]
609: 1:}
609: 1:Scores: 47921
609: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101', '1010101111001101', '13502', '8', 'a', '1111', '221', '125', '85', '71', '61', '55', '0']')
609: 1:Fire Event: PassTest{complexity=28, testCount=21}
------------------------------------------
610: 1:BoardData {
610: 1:  'description': ['Please implement algorithm that converts number from one numeral system to another. Method should accept number, source numeral system and target numeral system.'],
610: 1:  'expectedAnswer': '360',
610: 1:  'history': [
610: 1:    {
610: 1:      'answer': '10',
610: 1:      'question': '10, 10, 10',
610: 1:      'valid': true
610: 1:    },
610: 1:    {
610: 1:      'answer': '1010',
610: 1:      'question': '10, 10, 2',
610: 1:      'valid': true
610: 1:    },
610: 1:    {
610: 1:      'answer': '2',
610: 1:      'question': '10, 2, 10',
610: 1:      'valid': true
610: 1:    },
610: 1:    {
610: 1:      'answer': '3e8',
610: 1:      'question': '1000, 10, 16',
610: 1:      'valid': true
610: 1:    },
610: 1:    {
610: 1:      'answer': '4096',
610: 1:      'question': '1000, 16, 10',
610: 1:      'valid': true
610: 1:    },
610: 1:    {
610: 1:      'answer': '1000000000000',
610: 1:      'question': '1000, 16, 2',
610: 1:      'valid': true
610: 1:    },
610: 1:    {
610: 1:      'answer': '1101011001101',
610: 1:      'question': '1ACD, 16, 2',
610: 1:      'valid': true
610: 1:    },
610: 1:    {
610: 1:      'answer': '1010101111001101',
610: 1:      'question': 'ABCD, 16, 2',
610: 1:      'valid': true
610: 1:    },
610: 1:    {
610: 1:      'answer': '13502',
610: 1:      'question': '34BE, 16, 10',
610: 1:      'valid': true
610: 1:    },
610: 1:    {
610: 1:      'answer': '8',
610: 1:      'question': '1000, 2, 16',
610: 1:      'valid': true
610: 1:    },
610: 1:    {
610: 1:      'answer': 'a',
610: 1:      'question': '1010, 2, 16',
610: 1:      'valid': true
610: 1:    },
610: 1:    {
610: 1:      'answer': '1111',
610: 1:      'question': '1010101, 2, 4',
610: 1:      'valid': true
610: 1:    },
610: 1:    {
610: 1:      'answer': '221',
610: 1:      'question': '1010101, 2, 6',
610: 1:      'valid': true
610: 1:    },
610: 1:    {
610: 1:      'answer': '125',
610: 1:      'question': '1010101, 2, 8',
610: 1:      'valid': true
610: 1:    },
610: 1:    {
610: 1:      'answer': '85',
610: 1:      'question': '1010101, 2, 10',
610: 1:      'valid': true
610: 1:    },
610: 1:    {
610: 1:      'answer': '71',
610: 1:      'question': '1010101, 2, 12',
610: 1:      'valid': true
610: 1:    },
610: 1:    {
610: 1:      'answer': '61',
610: 1:      'question': '1010101, 2, 14',
610: 1:      'valid': true
610: 1:    },
610: 1:    {
610: 1:      'answer': '55',
610: 1:      'question': '1010101, 2, 16',
610: 1:      'valid': true
610: 1:    },
610: 1:    {
610: 1:      'answer': '0',
610: 1:      'question': '0, 2, 16',
610: 1:      'valid': true
610: 1:    }
610: 1:  ],
610: 1:  'info': [
610: 1:    '✅f(10, 10, 10) = 10',
610: 1:    '✅f(10, 10, 2) = 1010',
610: 1:    '✅f(10, 2, 10) = 2',
610: 1:    '✅f(1000, 10, 16) = 3e8',
610: 1:    '✅f(1000, 16, 10) = 4096',
610: 1:    '✅f(1000, 16, 2) = 1000000000000',
610: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
610: 1:    '✅f(ABCD, 16, 2) = 1010101111001101',
610: 1:    '✅f(34BE, 16, 10) = 13502',
610: 1:    '✅f(1000, 2, 16) = 8',
610: 1:    '✅f(1010, 2, 16) = a',
610: 1:    '✅f(1010101, 2, 4) = 1111',
610: 1:    '✅f(1010101, 2, 6) = 221',
610: 1:    '✅f(1010101, 2, 8) = 125',
610: 1:    '✅f(1010101, 2, 10) = 85',
610: 1:    '✅f(1010101, 2, 12) = 71',
610: 1:    '✅f(1010101, 2, 14) = 61',
610: 1:    '✅f(1010101, 2, 16) = 55',
610: 1:    '✅f(0, 2, 16) = 0',
610: 1:    '❌f(360, 10, 60) = ??? != 360'
610: 1:  ],
610: 1:  'level': 22,
610: 1:  'nextQuestion': '360, 10, 60',
610: 1:  'questions': [
610: 1:    '10, 10, 10',
610: 1:    '10, 10, 2',
610: 1:    '10, 2, 10',
610: 1:    '1000, 10, 16',
610: 1:    '1000, 16, 10',
610: 1:    '1000, 16, 2',
610: 1:    '1ACD, 16, 2',
610: 1:    'ABCD, 16, 2',
610: 1:    '34BE, 16, 10',
610: 1:    '1000, 2, 16',
610: 1:    '1010, 2, 16',
610: 1:    '1010101, 2, 4',
610: 1:    '1010101, 2, 6',
610: 1:    '1010101, 2, 8',
610: 1:    '1010101, 2, 10',
610: 1:    '1010101, 2, 12',
610: 1:    '1010101, 2, 14',
610: 1:    '1010101, 2, 16',
610: 1:    '0, 2, 16',
610: 1:    '360, 10, 60'
610: 1:  ]
610: 1:}
610: 1:Scores: 47934
610: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101', '1010101111001101', '13502', '8', 'a', '1111', '221', '125', '85', '71', '61', '55', '0', '360']')
610: 1:Fire Event: PassTest{complexity=28, testCount=21}
------------------------------------------
611: 1:BoardData {
611: 1:  'description': ['Please implement algorithm that converts number from one numeral system to another. Method should accept number, source numeral system and target numeral system.'],
611: 1:  'expectedAnswer': '260',
611: 1:  'history': [
611: 1:    {
611: 1:      'answer': '10',
611: 1:      'question': '10, 10, 10',
611: 1:      'valid': true
611: 1:    },
611: 1:    {
611: 1:      'answer': '1010',
611: 1:      'question': '10, 10, 2',
611: 1:      'valid': true
611: 1:    },
611: 1:    {
611: 1:      'answer': '2',
611: 1:      'question': '10, 2, 10',
611: 1:      'valid': true
611: 1:    },
611: 1:    {
611: 1:      'answer': '3e8',
611: 1:      'question': '1000, 10, 16',
611: 1:      'valid': true
611: 1:    },
611: 1:    {
611: 1:      'answer': '4096',
611: 1:      'question': '1000, 16, 10',
611: 1:      'valid': true
611: 1:    },
611: 1:    {
611: 1:      'answer': '1000000000000',
611: 1:      'question': '1000, 16, 2',
611: 1:      'valid': true
611: 1:    },
611: 1:    {
611: 1:      'answer': '1101011001101',
611: 1:      'question': '1ACD, 16, 2',
611: 1:      'valid': true
611: 1:    },
611: 1:    {
611: 1:      'answer': '1010101111001101',
611: 1:      'question': 'ABCD, 16, 2',
611: 1:      'valid': true
611: 1:    },
611: 1:    {
611: 1:      'answer': '13502',
611: 1:      'question': '34BE, 16, 10',
611: 1:      'valid': true
611: 1:    },
611: 1:    {
611: 1:      'answer': '8',
611: 1:      'question': '1000, 2, 16',
611: 1:      'valid': true
611: 1:    },
611: 1:    {
611: 1:      'answer': 'a',
611: 1:      'question': '1010, 2, 16',
611: 1:      'valid': true
611: 1:    },
611: 1:    {
611: 1:      'answer': '1111',
611: 1:      'question': '1010101, 2, 4',
611: 1:      'valid': true
611: 1:    },
611: 1:    {
611: 1:      'answer': '221',
611: 1:      'question': '1010101, 2, 6',
611: 1:      'valid': true
611: 1:    },
611: 1:    {
611: 1:      'answer': '125',
611: 1:      'question': '1010101, 2, 8',
611: 1:      'valid': true
611: 1:    },
611: 1:    {
611: 1:      'answer': '85',
611: 1:      'question': '1010101, 2, 10',
611: 1:      'valid': true
611: 1:    },
611: 1:    {
611: 1:      'answer': '71',
611: 1:      'question': '1010101, 2, 12',
611: 1:      'valid': true
611: 1:    },
611: 1:    {
611: 1:      'answer': '61',
611: 1:      'question': '1010101, 2, 14',
611: 1:      'valid': true
611: 1:    },
611: 1:    {
611: 1:      'answer': '55',
611: 1:      'question': '1010101, 2, 16',
611: 1:      'valid': true
611: 1:    },
611: 1:    {
611: 1:      'answer': '0',
611: 1:      'question': '0, 2, 16',
611: 1:      'valid': true
611: 1:    },
611: 1:    {
611: 1:      'answer': '360',
611: 1:      'question': '360, 10, 60',
611: 1:      'valid': true
611: 1:    }
611: 1:  ],
611: 1:  'info': [
611: 1:    '✅f(10, 10, 10) = 10',
611: 1:    '✅f(10, 10, 2) = 1010',
611: 1:    '✅f(10, 2, 10) = 2',
611: 1:    '✅f(1000, 10, 16) = 3e8',
611: 1:    '✅f(1000, 16, 10) = 4096',
611: 1:    '✅f(1000, 16, 2) = 1000000000000',
611: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
611: 1:    '✅f(ABCD, 16, 2) = 1010101111001101',
611: 1:    '✅f(34BE, 16, 10) = 13502',
611: 1:    '✅f(1000, 2, 16) = 8',
611: 1:    '✅f(1010, 2, 16) = a',
611: 1:    '✅f(1010101, 2, 4) = 1111',
611: 1:    '✅f(1010101, 2, 6) = 221',
611: 1:    '✅f(1010101, 2, 8) = 125',
611: 1:    '✅f(1010101, 2, 10) = 85',
611: 1:    '✅f(1010101, 2, 12) = 71',
611: 1:    '✅f(1010101, 2, 14) = 61',
611: 1:    '✅f(1010101, 2, 16) = 55',
611: 1:    '✅f(0, 2, 16) = 0',
611: 1:    '✅f(360, 10, 60) = 360',
611: 1:    '❌f(360, 10, 12) = ??? != 260'
611: 1:  ],
611: 1:  'level': 22,
611: 1:  'nextQuestion': '360, 10, 12',
611: 1:  'questions': [
611: 1:    '10, 10, 10',
611: 1:    '10, 10, 2',
611: 1:    '10, 2, 10',
611: 1:    '1000, 10, 16',
611: 1:    '1000, 16, 10',
611: 1:    '1000, 16, 2',
611: 1:    '1ACD, 16, 2',
611: 1:    'ABCD, 16, 2',
611: 1:    '34BE, 16, 10',
611: 1:    '1000, 2, 16',
611: 1:    '1010, 2, 16',
611: 1:    '1010101, 2, 4',
611: 1:    '1010101, 2, 6',
611: 1:    '1010101, 2, 8',
611: 1:    '1010101, 2, 10',
611: 1:    '1010101, 2, 12',
611: 1:    '1010101, 2, 14',
611: 1:    '1010101, 2, 16',
611: 1:    '0, 2, 16',
611: 1:    '360, 10, 60',
611: 1:    '360, 10, 12'
611: 1:  ]
611: 1:}
611: 1:Scores: 47947
611: 1:Answer: message('['10', '1010', '2', '3e8', '4096', '1000000000000', '1101011001101', '1010101111001101', '13502', '8', 'a', '1111', '221', '125', '85', '71', '61', '55', '0', '360', '260']')
611: 1:Fire Event: PassTest{complexity=28, testCount=21}
611: 1:Fire Event: NextAlgorithm{complexity=28, time=0}
------------------------------------------
612: 1:BoardData {
612: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
612: 1:  'history': [
612: 1:    {
612: 1:      'answer': '10',
612: 1:      'question': '10, 10, 10',
612: 1:      'valid': true
612: 1:    },
612: 1:    {
612: 1:      'answer': '1010',
612: 1:      'question': '10, 10, 2',
612: 1:      'valid': true
612: 1:    },
612: 1:    {
612: 1:      'answer': '2',
612: 1:      'question': '10, 2, 10',
612: 1:      'valid': true
612: 1:    },
612: 1:    {
612: 1:      'answer': '3e8',
612: 1:      'question': '1000, 10, 16',
612: 1:      'valid': true
612: 1:    },
612: 1:    {
612: 1:      'answer': '4096',
612: 1:      'question': '1000, 16, 10',
612: 1:      'valid': true
612: 1:    },
612: 1:    {
612: 1:      'answer': '1000000000000',
612: 1:      'question': '1000, 16, 2',
612: 1:      'valid': true
612: 1:    },
612: 1:    {
612: 1:      'answer': '1101011001101',
612: 1:      'question': '1ACD, 16, 2',
612: 1:      'valid': true
612: 1:    },
612: 1:    {
612: 1:      'answer': '1010101111001101',
612: 1:      'question': 'ABCD, 16, 2',
612: 1:      'valid': true
612: 1:    },
612: 1:    {
612: 1:      'answer': '13502',
612: 1:      'question': '34BE, 16, 10',
612: 1:      'valid': true
612: 1:    },
612: 1:    {
612: 1:      'answer': '8',
612: 1:      'question': '1000, 2, 16',
612: 1:      'valid': true
612: 1:    },
612: 1:    {
612: 1:      'answer': 'a',
612: 1:      'question': '1010, 2, 16',
612: 1:      'valid': true
612: 1:    },
612: 1:    {
612: 1:      'answer': '1111',
612: 1:      'question': '1010101, 2, 4',
612: 1:      'valid': true
612: 1:    },
612: 1:    {
612: 1:      'answer': '221',
612: 1:      'question': '1010101, 2, 6',
612: 1:      'valid': true
612: 1:    },
612: 1:    {
612: 1:      'answer': '125',
612: 1:      'question': '1010101, 2, 8',
612: 1:      'valid': true
612: 1:    },
612: 1:    {
612: 1:      'answer': '85',
612: 1:      'question': '1010101, 2, 10',
612: 1:      'valid': true
612: 1:    },
612: 1:    {
612: 1:      'answer': '71',
612: 1:      'question': '1010101, 2, 12',
612: 1:      'valid': true
612: 1:    },
612: 1:    {
612: 1:      'answer': '61',
612: 1:      'question': '1010101, 2, 14',
612: 1:      'valid': true
612: 1:    },
612: 1:    {
612: 1:      'answer': '55',
612: 1:      'question': '1010101, 2, 16',
612: 1:      'valid': true
612: 1:    },
612: 1:    {
612: 1:      'answer': '0',
612: 1:      'question': '0, 2, 16',
612: 1:      'valid': true
612: 1:    },
612: 1:    {
612: 1:      'answer': '360',
612: 1:      'question': '360, 10, 60',
612: 1:      'valid': true
612: 1:    },
612: 1:    {
612: 1:      'answer': '260',
612: 1:      'question': '360, 10, 12',
612: 1:      'valid': true
612: 1:    }
612: 1:  ],
612: 1:  'info': [
612: 1:    '✅f(10, 10, 10) = 10',
612: 1:    '✅f(10, 10, 2) = 1010',
612: 1:    '✅f(10, 2, 10) = 2',
612: 1:    '✅f(1000, 10, 16) = 3e8',
612: 1:    '✅f(1000, 16, 10) = 4096',
612: 1:    '✅f(1000, 16, 2) = 1000000000000',
612: 1:    '✅f(1ACD, 16, 2) = 1101011001101',
612: 1:    '✅f(ABCD, 16, 2) = 1010101111001101',
612: 1:    '✅f(34BE, 16, 10) = 13502',
612: 1:    '✅f(1000, 2, 16) = 8',
612: 1:    '✅f(1010, 2, 16) = a',
612: 1:    '✅f(1010101, 2, 4) = 1111',
612: 1:    '✅f(1010101, 2, 6) = 221',
612: 1:    '✅f(1010101, 2, 8) = 125',
612: 1:    '✅f(1010101, 2, 10) = 85',
612: 1:    '✅f(1010101, 2, 12) = 71',
612: 1:    '✅f(1010101, 2, 14) = 61',
612: 1:    '✅f(1010101, 2, 16) = 55',
612: 1:    '✅f(0, 2, 16) = 0',
612: 1:    '✅f(360, 10, 60) = 360',
612: 1:    '✅f(360, 10, 12) = 260'
612: 1:  ],
612: 1:  'level': 22,
612: 1:  'questions': []
612: 1:}
612: 1:Scores: 51739
612: 1:Answer: message('StartNextLevel')
612: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
613: 1:BoardData {
613: 1:  'description': ['Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...'],
613: 1:  'expectedAnswer': '1',
613: 1:  'history': [],
613: 1:  'info': ['❌f(1) = ??? != 1'],
613: 1:  'level': 23,
613: 1:  'nextQuestion': '1',
613: 1:  'questions': ['1']
613: 1:}
613: 1:Scores: 51739
613: 1:Answer: message('['1']')
613: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
614: 1:BoardData {
614: 1:  'description': ['Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...'],
614: 1:  'expectedAnswer': '1',
614: 1:  'history': [{
614: 1:    'answer': '1',
614: 1:    'question': '1',
614: 1:    'valid': true
614: 1:  }],
614: 1:  'info': [
614: 1:    '✅f(1) = 1',
614: 1:    '❌f(2) = ??? != 1'
614: 1:  ],
614: 1:  'level': 23,
614: 1:  'nextQuestion': '2',
614: 1:  'questions': [
614: 1:    '1',
614: 1:    '2'
614: 1:  ]
614: 1:}
614: 1:Scores: 51751
614: 1:Answer: message('['1', '1']')
614: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
615: 1:BoardData {
615: 1:  'description': ['Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...'],
615: 1:  'expectedAnswer': '2',
615: 1:  'history': [
615: 1:    {
615: 1:      'answer': '1',
615: 1:      'question': '1',
615: 1:      'valid': true
615: 1:    },
615: 1:    {
615: 1:      'answer': '1',
615: 1:      'question': '2',
615: 1:      'valid': true
615: 1:    }
615: 1:  ],
615: 1:  'info': [
615: 1:    '✅f(1) = 1',
615: 1:    '✅f(2) = 1',
615: 1:    '❌f(3) = ??? != 2'
615: 1:  ],
615: 1:  'level': 23,
615: 1:  'nextQuestion': '3',
615: 1:  'questions': [
615: 1:    '1',
615: 1:    '2',
615: 1:    '3'
615: 1:  ]
615: 1:}
615: 1:Scores: 51763
615: 1:Answer: message('['1', '1', '2']')
615: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
616: 1:BoardData {
616: 1:  'description': ['Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...'],
616: 1:  'expectedAnswer': '3',
616: 1:  'history': [
616: 1:    {
616: 1:      'answer': '1',
616: 1:      'question': '1',
616: 1:      'valid': true
616: 1:    },
616: 1:    {
616: 1:      'answer': '1',
616: 1:      'question': '2',
616: 1:      'valid': true
616: 1:    },
616: 1:    {
616: 1:      'answer': '2',
616: 1:      'question': '3',
616: 1:      'valid': true
616: 1:    }
616: 1:  ],
616: 1:  'info': [
616: 1:    '✅f(1) = 1',
616: 1:    '✅f(2) = 1',
616: 1:    '✅f(3) = 2',
616: 1:    '❌f(4) = ??? != 3'
616: 1:  ],
616: 1:  'level': 23,
616: 1:  'nextQuestion': '4',
616: 1:  'questions': [
616: 1:    '1',
616: 1:    '2',
616: 1:    '3',
616: 1:    '4'
616: 1:  ]
616: 1:}
616: 1:Scores: 51775
616: 1:Answer: message('['1', '1', '2', '3']')
616: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
617: 1:BoardData {
617: 1:  'description': ['Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...'],
617: 1:  'expectedAnswer': '5',
617: 1:  'history': [
617: 1:    {
617: 1:      'answer': '1',
617: 1:      'question': '1',
617: 1:      'valid': true
617: 1:    },
617: 1:    {
617: 1:      'answer': '1',
617: 1:      'question': '2',
617: 1:      'valid': true
617: 1:    },
617: 1:    {
617: 1:      'answer': '2',
617: 1:      'question': '3',
617: 1:      'valid': true
617: 1:    },
617: 1:    {
617: 1:      'answer': '3',
617: 1:      'question': '4',
617: 1:      'valid': true
617: 1:    }
617: 1:  ],
617: 1:  'info': [
617: 1:    '✅f(1) = 1',
617: 1:    '✅f(2) = 1',
617: 1:    '✅f(3) = 2',
617: 1:    '✅f(4) = 3',
617: 1:    '❌f(5) = ??? != 5'
617: 1:  ],
617: 1:  'level': 23,
617: 1:  'nextQuestion': '5',
617: 1:  'questions': [
617: 1:    '1',
617: 1:    '2',
617: 1:    '3',
617: 1:    '4',
617: 1:    '5'
617: 1:  ]
617: 1:}
617: 1:Scores: 51787
617: 1:Answer: message('['1', '1', '2', '3', '5']')
617: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
618: 1:BoardData {
618: 1:  'description': ['Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...'],
618: 1:  'expectedAnswer': '8',
618: 1:  'history': [
618: 1:    {
618: 1:      'answer': '1',
618: 1:      'question': '1',
618: 1:      'valid': true
618: 1:    },
618: 1:    {
618: 1:      'answer': '1',
618: 1:      'question': '2',
618: 1:      'valid': true
618: 1:    },
618: 1:    {
618: 1:      'answer': '2',
618: 1:      'question': '3',
618: 1:      'valid': true
618: 1:    },
618: 1:    {
618: 1:      'answer': '3',
618: 1:      'question': '4',
618: 1:      'valid': true
618: 1:    },
618: 1:    {
618: 1:      'answer': '5',
618: 1:      'question': '5',
618: 1:      'valid': true
618: 1:    }
618: 1:  ],
618: 1:  'info': [
618: 1:    '✅f(1) = 1',
618: 1:    '✅f(2) = 1',
618: 1:    '✅f(3) = 2',
618: 1:    '✅f(4) = 3',
618: 1:    '✅f(5) = 5',
618: 1:    '❌f(6) = ??? != 8'
618: 1:  ],
618: 1:  'level': 23,
618: 1:  'nextQuestion': '6',
618: 1:  'questions': [
618: 1:    '1',
618: 1:    '2',
618: 1:    '3',
618: 1:    '4',
618: 1:    '5',
618: 1:    '6'
618: 1:  ]
618: 1:}
618: 1:Scores: 51799
618: 1:Answer: message('['1', '1', '2', '3', '5', '8']')
618: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
619: 1:BoardData {
619: 1:  'description': ['Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...'],
619: 1:  'expectedAnswer': '13',
619: 1:  'history': [
619: 1:    {
619: 1:      'answer': '1',
619: 1:      'question': '1',
619: 1:      'valid': true
619: 1:    },
619: 1:    {
619: 1:      'answer': '1',
619: 1:      'question': '2',
619: 1:      'valid': true
619: 1:    },
619: 1:    {
619: 1:      'answer': '2',
619: 1:      'question': '3',
619: 1:      'valid': true
619: 1:    },
619: 1:    {
619: 1:      'answer': '3',
619: 1:      'question': '4',
619: 1:      'valid': true
619: 1:    },
619: 1:    {
619: 1:      'answer': '5',
619: 1:      'question': '5',
619: 1:      'valid': true
619: 1:    },
619: 1:    {
619: 1:      'answer': '8',
619: 1:      'question': '6',
619: 1:      'valid': true
619: 1:    }
619: 1:  ],
619: 1:  'info': [
619: 1:    '✅f(1) = 1',
619: 1:    '✅f(2) = 1',
619: 1:    '✅f(3) = 2',
619: 1:    '✅f(4) = 3',
619: 1:    '✅f(5) = 5',
619: 1:    '✅f(6) = 8',
619: 1:    '❌f(7) = ??? != 13'
619: 1:  ],
619: 1:  'level': 23,
619: 1:  'nextQuestion': '7',
619: 1:  'questions': [
619: 1:    '1',
619: 1:    '2',
619: 1:    '3',
619: 1:    '4',
619: 1:    '5',
619: 1:    '6',
619: 1:    '7'
619: 1:  ]
619: 1:}
619: 1:Scores: 51811
619: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13']')
619: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
620: 1:BoardData {
620: 1:  'description': ['Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...'],
620: 1:  'expectedAnswer': '21',
620: 1:  'history': [
620: 1:    {
620: 1:      'answer': '1',
620: 1:      'question': '1',
620: 1:      'valid': true
620: 1:    },
620: 1:    {
620: 1:      'answer': '1',
620: 1:      'question': '2',
620: 1:      'valid': true
620: 1:    },
620: 1:    {
620: 1:      'answer': '2',
620: 1:      'question': '3',
620: 1:      'valid': true
620: 1:    },
620: 1:    {
620: 1:      'answer': '3',
620: 1:      'question': '4',
620: 1:      'valid': true
620: 1:    },
620: 1:    {
620: 1:      'answer': '5',
620: 1:      'question': '5',
620: 1:      'valid': true
620: 1:    },
620: 1:    {
620: 1:      'answer': '8',
620: 1:      'question': '6',
620: 1:      'valid': true
620: 1:    },
620: 1:    {
620: 1:      'answer': '13',
620: 1:      'question': '7',
620: 1:      'valid': true
620: 1:    }
620: 1:  ],
620: 1:  'info': [
620: 1:    '✅f(1) = 1',
620: 1:    '✅f(2) = 1',
620: 1:    '✅f(3) = 2',
620: 1:    '✅f(4) = 3',
620: 1:    '✅f(5) = 5',
620: 1:    '✅f(6) = 8',
620: 1:    '✅f(7) = 13',
620: 1:    '❌f(8) = ??? != 21'
620: 1:  ],
620: 1:  'level': 23,
620: 1:  'nextQuestion': '8',
620: 1:  'questions': [
620: 1:    '1',
620: 1:    '2',
620: 1:    '3',
620: 1:    '4',
620: 1:    '5',
620: 1:    '6',
620: 1:    '7',
620: 1:    '8'
620: 1:  ]
620: 1:}
620: 1:Scores: 51823
620: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21']')
620: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
621: 1:BoardData {
621: 1:  'description': ['Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...'],
621: 1:  'expectedAnswer': '34',
621: 1:  'history': [
621: 1:    {
621: 1:      'answer': '1',
621: 1:      'question': '1',
621: 1:      'valid': true
621: 1:    },
621: 1:    {
621: 1:      'answer': '1',
621: 1:      'question': '2',
621: 1:      'valid': true
621: 1:    },
621: 1:    {
621: 1:      'answer': '2',
621: 1:      'question': '3',
621: 1:      'valid': true
621: 1:    },
621: 1:    {
621: 1:      'answer': '3',
621: 1:      'question': '4',
621: 1:      'valid': true
621: 1:    },
621: 1:    {
621: 1:      'answer': '5',
621: 1:      'question': '5',
621: 1:      'valid': true
621: 1:    },
621: 1:    {
621: 1:      'answer': '8',
621: 1:      'question': '6',
621: 1:      'valid': true
621: 1:    },
621: 1:    {
621: 1:      'answer': '13',
621: 1:      'question': '7',
621: 1:      'valid': true
621: 1:    },
621: 1:    {
621: 1:      'answer': '21',
621: 1:      'question': '8',
621: 1:      'valid': true
621: 1:    }
621: 1:  ],
621: 1:  'info': [
621: 1:    '✅f(1) = 1',
621: 1:    '✅f(2) = 1',
621: 1:    '✅f(3) = 2',
621: 1:    '✅f(4) = 3',
621: 1:    '✅f(5) = 5',
621: 1:    '✅f(6) = 8',
621: 1:    '✅f(7) = 13',
621: 1:    '✅f(8) = 21',
621: 1:    '❌f(9) = ??? != 34'
621: 1:  ],
621: 1:  'level': 23,
621: 1:  'nextQuestion': '9',
621: 1:  'questions': [
621: 1:    '1',
621: 1:    '2',
621: 1:    '3',
621: 1:    '4',
621: 1:    '5',
621: 1:    '6',
621: 1:    '7',
621: 1:    '8',
621: 1:    '9'
621: 1:  ]
621: 1:}
621: 1:Scores: 51835
621: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34']')
621: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
622: 1:BoardData {
622: 1:  'description': ['Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...'],
622: 1:  'expectedAnswer': '55',
622: 1:  'history': [
622: 1:    {
622: 1:      'answer': '1',
622: 1:      'question': '1',
622: 1:      'valid': true
622: 1:    },
622: 1:    {
622: 1:      'answer': '1',
622: 1:      'question': '2',
622: 1:      'valid': true
622: 1:    },
622: 1:    {
622: 1:      'answer': '2',
622: 1:      'question': '3',
622: 1:      'valid': true
622: 1:    },
622: 1:    {
622: 1:      'answer': '3',
622: 1:      'question': '4',
622: 1:      'valid': true
622: 1:    },
622: 1:    {
622: 1:      'answer': '5',
622: 1:      'question': '5',
622: 1:      'valid': true
622: 1:    },
622: 1:    {
622: 1:      'answer': '8',
622: 1:      'question': '6',
622: 1:      'valid': true
622: 1:    },
622: 1:    {
622: 1:      'answer': '13',
622: 1:      'question': '7',
622: 1:      'valid': true
622: 1:    },
622: 1:    {
622: 1:      'answer': '21',
622: 1:      'question': '8',
622: 1:      'valid': true
622: 1:    },
622: 1:    {
622: 1:      'answer': '34',
622: 1:      'question': '9',
622: 1:      'valid': true
622: 1:    }
622: 1:  ],
622: 1:  'info': [
622: 1:    '✅f(1) = 1',
622: 1:    '✅f(2) = 1',
622: 1:    '✅f(3) = 2',
622: 1:    '✅f(4) = 3',
622: 1:    '✅f(5) = 5',
622: 1:    '✅f(6) = 8',
622: 1:    '✅f(7) = 13',
622: 1:    '✅f(8) = 21',
622: 1:    '✅f(9) = 34',
622: 1:    '❌f(10) = ??? != 55'
622: 1:  ],
622: 1:  'level': 23,
622: 1:  'nextQuestion': '10',
622: 1:  'questions': [
622: 1:    '1',
622: 1:    '2',
622: 1:    '3',
622: 1:    '4',
622: 1:    '5',
622: 1:    '6',
622: 1:    '7',
622: 1:    '8',
622: 1:    '9',
622: 1:    '10'
622: 1:  ]
622: 1:}
622: 1:Scores: 51847
622: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55']')
622: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
623: 1:BoardData {
623: 1:  'description': ['Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...'],
623: 1:  'expectedAnswer': '89',
623: 1:  'history': [
623: 1:    {
623: 1:      'answer': '1',
623: 1:      'question': '1',
623: 1:      'valid': true
623: 1:    },
623: 1:    {
623: 1:      'answer': '1',
623: 1:      'question': '2',
623: 1:      'valid': true
623: 1:    },
623: 1:    {
623: 1:      'answer': '2',
623: 1:      'question': '3',
623: 1:      'valid': true
623: 1:    },
623: 1:    {
623: 1:      'answer': '3',
623: 1:      'question': '4',
623: 1:      'valid': true
623: 1:    },
623: 1:    {
623: 1:      'answer': '5',
623: 1:      'question': '5',
623: 1:      'valid': true
623: 1:    },
623: 1:    {
623: 1:      'answer': '8',
623: 1:      'question': '6',
623: 1:      'valid': true
623: 1:    },
623: 1:    {
623: 1:      'answer': '13',
623: 1:      'question': '7',
623: 1:      'valid': true
623: 1:    },
623: 1:    {
623: 1:      'answer': '21',
623: 1:      'question': '8',
623: 1:      'valid': true
623: 1:    },
623: 1:    {
623: 1:      'answer': '34',
623: 1:      'question': '9',
623: 1:      'valid': true
623: 1:    },
623: 1:    {
623: 1:      'answer': '55',
623: 1:      'question': '10',
623: 1:      'valid': true
623: 1:    }
623: 1:  ],
623: 1:  'info': [
623: 1:    '✅f(1) = 1',
623: 1:    '✅f(2) = 1',
623: 1:    '✅f(3) = 2',
623: 1:    '✅f(4) = 3',
623: 1:    '✅f(5) = 5',
623: 1:    '✅f(6) = 8',
623: 1:    '✅f(7) = 13',
623: 1:    '✅f(8) = 21',
623: 1:    '✅f(9) = 34',
623: 1:    '✅f(10) = 55',
623: 1:    '❌f(11) = ??? != 89'
623: 1:  ],
623: 1:  'level': 23,
623: 1:  'nextQuestion': '11',
623: 1:  'questions': [
623: 1:    '1',
623: 1:    '2',
623: 1:    '3',
623: 1:    '4',
623: 1:    '5',
623: 1:    '6',
623: 1:    '7',
623: 1:    '8',
623: 1:    '9',
623: 1:    '10',
623: 1:    '11'
623: 1:  ]
623: 1:}
623: 1:Scores: 51859
623: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89']')
623: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
624: 1:BoardData {
624: 1:  'description': ['Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...'],
624: 1:  'expectedAnswer': '144',
624: 1:  'history': [
624: 1:    {
624: 1:      'answer': '1',
624: 1:      'question': '1',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': '1',
624: 1:      'question': '2',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': '2',
624: 1:      'question': '3',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': '3',
624: 1:      'question': '4',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': '5',
624: 1:      'question': '5',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': '8',
624: 1:      'question': '6',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': '13',
624: 1:      'question': '7',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': '21',
624: 1:      'question': '8',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': '34',
624: 1:      'question': '9',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': '55',
624: 1:      'question': '10',
624: 1:      'valid': true
624: 1:    },
624: 1:    {
624: 1:      'answer': '89',
624: 1:      'question': '11',
624: 1:      'valid': true
624: 1:    }
624: 1:  ],
624: 1:  'info': [
624: 1:    '✅f(1) = 1',
624: 1:    '✅f(2) = 1',
624: 1:    '✅f(3) = 2',
624: 1:    '✅f(4) = 3',
624: 1:    '✅f(5) = 5',
624: 1:    '✅f(6) = 8',
624: 1:    '✅f(7) = 13',
624: 1:    '✅f(8) = 21',
624: 1:    '✅f(9) = 34',
624: 1:    '✅f(10) = 55',
624: 1:    '✅f(11) = 89',
624: 1:    '❌f(12) = ??? != 144'
624: 1:  ],
624: 1:  'level': 23,
624: 1:  'nextQuestion': '12',
624: 1:  'questions': [
624: 1:    '1',
624: 1:    '2',
624: 1:    '3',
624: 1:    '4',
624: 1:    '5',
624: 1:    '6',
624: 1:    '7',
624: 1:    '8',
624: 1:    '9',
624: 1:    '10',
624: 1:    '11',
624: 1:    '12'
624: 1:  ]
624: 1:}
624: 1:Scores: 51871
624: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144']')
624: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
625: 1:BoardData {
625: 1:  'description': ['Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...'],
625: 1:  'expectedAnswer': '233',
625: 1:  'history': [
625: 1:    {
625: 1:      'answer': '1',
625: 1:      'question': '1',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': '1',
625: 1:      'question': '2',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': '2',
625: 1:      'question': '3',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': '3',
625: 1:      'question': '4',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': '5',
625: 1:      'question': '5',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': '8',
625: 1:      'question': '6',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': '13',
625: 1:      'question': '7',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': '21',
625: 1:      'question': '8',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': '34',
625: 1:      'question': '9',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': '55',
625: 1:      'question': '10',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': '89',
625: 1:      'question': '11',
625: 1:      'valid': true
625: 1:    },
625: 1:    {
625: 1:      'answer': '144',
625: 1:      'question': '12',
625: 1:      'valid': true
625: 1:    }
625: 1:  ],
625: 1:  'info': [
625: 1:    '✅f(1) = 1',
625: 1:    '✅f(2) = 1',
625: 1:    '✅f(3) = 2',
625: 1:    '✅f(4) = 3',
625: 1:    '✅f(5) = 5',
625: 1:    '✅f(6) = 8',
625: 1:    '✅f(7) = 13',
625: 1:    '✅f(8) = 21',
625: 1:    '✅f(9) = 34',
625: 1:    '✅f(10) = 55',
625: 1:    '✅f(11) = 89',
625: 1:    '✅f(12) = 144',
625: 1:    '❌f(13) = ??? != 233'
625: 1:  ],
625: 1:  'level': 23,
625: 1:  'nextQuestion': '13',
625: 1:  'questions': [
625: 1:    '1',
625: 1:    '2',
625: 1:    '3',
625: 1:    '4',
625: 1:    '5',
625: 1:    '6',
625: 1:    '7',
625: 1:    '8',
625: 1:    '9',
625: 1:    '10',
625: 1:    '11',
625: 1:    '12',
625: 1:    '13'
625: 1:  ]
625: 1:}
625: 1:Scores: 51883
625: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233']')
625: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
626: 1:BoardData {
626: 1:  'description': ['Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...'],
626: 1:  'expectedAnswer': '377',
626: 1:  'history': [
626: 1:    {
626: 1:      'answer': '1',
626: 1:      'question': '1',
626: 1:      'valid': true
626: 1:    },
626: 1:    {
626: 1:      'answer': '1',
626: 1:      'question': '2',
626: 1:      'valid': true
626: 1:    },
626: 1:    {
626: 1:      'answer': '2',
626: 1:      'question': '3',
626: 1:      'valid': true
626: 1:    },
626: 1:    {
626: 1:      'answer': '3',
626: 1:      'question': '4',
626: 1:      'valid': true
626: 1:    },
626: 1:    {
626: 1:      'answer': '5',
626: 1:      'question': '5',
626: 1:      'valid': true
626: 1:    },
626: 1:    {
626: 1:      'answer': '8',
626: 1:      'question': '6',
626: 1:      'valid': true
626: 1:    },
626: 1:    {
626: 1:      'answer': '13',
626: 1:      'question': '7',
626: 1:      'valid': true
626: 1:    },
626: 1:    {
626: 1:      'answer': '21',
626: 1:      'question': '8',
626: 1:      'valid': true
626: 1:    },
626: 1:    {
626: 1:      'answer': '34',
626: 1:      'question': '9',
626: 1:      'valid': true
626: 1:    },
626: 1:    {
626: 1:      'answer': '55',
626: 1:      'question': '10',
626: 1:      'valid': true
626: 1:    },
626: 1:    {
626: 1:      'answer': '89',
626: 1:      'question': '11',
626: 1:      'valid': true
626: 1:    },
626: 1:    {
626: 1:      'answer': '144',
626: 1:      'question': '12',
626: 1:      'valid': true
626: 1:    },
626: 1:    {
626: 1:      'answer': '233',
626: 1:      'question': '13',
626: 1:      'valid': true
626: 1:    }
626: 1:  ],
626: 1:  'info': [
626: 1:    '✅f(1) = 1',
626: 1:    '✅f(2) = 1',
626: 1:    '✅f(3) = 2',
626: 1:    '✅f(4) = 3',
626: 1:    '✅f(5) = 5',
626: 1:    '✅f(6) = 8',
626: 1:    '✅f(7) = 13',
626: 1:    '✅f(8) = 21',
626: 1:    '✅f(9) = 34',
626: 1:    '✅f(10) = 55',
626: 1:    '✅f(11) = 89',
626: 1:    '✅f(12) = 144',
626: 1:    '✅f(13) = 233',
626: 1:    '❌f(14) = ??? != 377'
626: 1:  ],
626: 1:  'level': 23,
626: 1:  'nextQuestion': '14',
626: 1:  'questions': [
626: 1:    '1',
626: 1:    '2',
626: 1:    '3',
626: 1:    '4',
626: 1:    '5',
626: 1:    '6',
626: 1:    '7',
626: 1:    '8',
626: 1:    '9',
626: 1:    '10',
626: 1:    '11',
626: 1:    '12',
626: 1:    '13',
626: 1:    '14'
626: 1:  ]
626: 1:}
626: 1:Scores: 51895
626: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377']')
626: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
627: 1:BoardData {
627: 1:  'description': ['Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...'],
627: 1:  'expectedAnswer': '610',
627: 1:  'history': [
627: 1:    {
627: 1:      'answer': '1',
627: 1:      'question': '1',
627: 1:      'valid': true
627: 1:    },
627: 1:    {
627: 1:      'answer': '1',
627: 1:      'question': '2',
627: 1:      'valid': true
627: 1:    },
627: 1:    {
627: 1:      'answer': '2',
627: 1:      'question': '3',
627: 1:      'valid': true
627: 1:    },
627: 1:    {
627: 1:      'answer': '3',
627: 1:      'question': '4',
627: 1:      'valid': true
627: 1:    },
627: 1:    {
627: 1:      'answer': '5',
627: 1:      'question': '5',
627: 1:      'valid': true
627: 1:    },
627: 1:    {
627: 1:      'answer': '8',
627: 1:      'question': '6',
627: 1:      'valid': true
627: 1:    },
627: 1:    {
627: 1:      'answer': '13',
627: 1:      'question': '7',
627: 1:      'valid': true
627: 1:    },
627: 1:    {
627: 1:      'answer': '21',
627: 1:      'question': '8',
627: 1:      'valid': true
627: 1:    },
627: 1:    {
627: 1:      'answer': '34',
627: 1:      'question': '9',
627: 1:      'valid': true
627: 1:    },
627: 1:    {
627: 1:      'answer': '55',
627: 1:      'question': '10',
627: 1:      'valid': true
627: 1:    },
627: 1:    {
627: 1:      'answer': '89',
627: 1:      'question': '11',
627: 1:      'valid': true
627: 1:    },
627: 1:    {
627: 1:      'answer': '144',
627: 1:      'question': '12',
627: 1:      'valid': true
627: 1:    },
627: 1:    {
627: 1:      'answer': '233',
627: 1:      'question': '13',
627: 1:      'valid': true
627: 1:    },
627: 1:    {
627: 1:      'answer': '377',
627: 1:      'question': '14',
627: 1:      'valid': true
627: 1:    }
627: 1:  ],
627: 1:  'info': [
627: 1:    '✅f(1) = 1',
627: 1:    '✅f(2) = 1',
627: 1:    '✅f(3) = 2',
627: 1:    '✅f(4) = 3',
627: 1:    '✅f(5) = 5',
627: 1:    '✅f(6) = 8',
627: 1:    '✅f(7) = 13',
627: 1:    '✅f(8) = 21',
627: 1:    '✅f(9) = 34',
627: 1:    '✅f(10) = 55',
627: 1:    '✅f(11) = 89',
627: 1:    '✅f(12) = 144',
627: 1:    '✅f(13) = 233',
627: 1:    '✅f(14) = 377',
627: 1:    '❌f(15) = ??? != 610'
627: 1:  ],
627: 1:  'level': 23,
627: 1:  'nextQuestion': '15',
627: 1:  'questions': [
627: 1:    '1',
627: 1:    '2',
627: 1:    '3',
627: 1:    '4',
627: 1:    '5',
627: 1:    '6',
627: 1:    '7',
627: 1:    '8',
627: 1:    '9',
627: 1:    '10',
627: 1:    '11',
627: 1:    '12',
627: 1:    '13',
627: 1:    '14',
627: 1:    '15'
627: 1:  ]
627: 1:}
627: 1:Scores: 51907
627: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610']')
627: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
628: 1:BoardData {
628: 1:  'description': ['Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...'],
628: 1:  'expectedAnswer': '987',
628: 1:  'history': [
628: 1:    {
628: 1:      'answer': '1',
628: 1:      'question': '1',
628: 1:      'valid': true
628: 1:    },
628: 1:    {
628: 1:      'answer': '1',
628: 1:      'question': '2',
628: 1:      'valid': true
628: 1:    },
628: 1:    {
628: 1:      'answer': '2',
628: 1:      'question': '3',
628: 1:      'valid': true
628: 1:    },
628: 1:    {
628: 1:      'answer': '3',
628: 1:      'question': '4',
628: 1:      'valid': true
628: 1:    },
628: 1:    {
628: 1:      'answer': '5',
628: 1:      'question': '5',
628: 1:      'valid': true
628: 1:    },
628: 1:    {
628: 1:      'answer': '8',
628: 1:      'question': '6',
628: 1:      'valid': true
628: 1:    },
628: 1:    {
628: 1:      'answer': '13',
628: 1:      'question': '7',
628: 1:      'valid': true
628: 1:    },
628: 1:    {
628: 1:      'answer': '21',
628: 1:      'question': '8',
628: 1:      'valid': true
628: 1:    },
628: 1:    {
628: 1:      'answer': '34',
628: 1:      'question': '9',
628: 1:      'valid': true
628: 1:    },
628: 1:    {
628: 1:      'answer': '55',
628: 1:      'question': '10',
628: 1:      'valid': true
628: 1:    },
628: 1:    {
628: 1:      'answer': '89',
628: 1:      'question': '11',
628: 1:      'valid': true
628: 1:    },
628: 1:    {
628: 1:      'answer': '144',
628: 1:      'question': '12',
628: 1:      'valid': true
628: 1:    },
628: 1:    {
628: 1:      'answer': '233',
628: 1:      'question': '13',
628: 1:      'valid': true
628: 1:    },
628: 1:    {
628: 1:      'answer': '377',
628: 1:      'question': '14',
628: 1:      'valid': true
628: 1:    },
628: 1:    {
628: 1:      'answer': '610',
628: 1:      'question': '15',
628: 1:      'valid': true
628: 1:    }
628: 1:  ],
628: 1:  'info': [
628: 1:    '✅f(1) = 1',
628: 1:    '✅f(2) = 1',
628: 1:    '✅f(3) = 2',
628: 1:    '✅f(4) = 3',
628: 1:    '✅f(5) = 5',
628: 1:    '✅f(6) = 8',
628: 1:    '✅f(7) = 13',
628: 1:    '✅f(8) = 21',
628: 1:    '✅f(9) = 34',
628: 1:    '✅f(10) = 55',
628: 1:    '✅f(11) = 89',
628: 1:    '✅f(12) = 144',
628: 1:    '✅f(13) = 233',
628: 1:    '✅f(14) = 377',
628: 1:    '✅f(15) = 610',
628: 1:    '❌f(16) = ??? != 987'
628: 1:  ],
628: 1:  'level': 23,
628: 1:  'nextQuestion': '16',
628: 1:  'questions': [
628: 1:    '1',
628: 1:    '2',
628: 1:    '3',
628: 1:    '4',
628: 1:    '5',
628: 1:    '6',
628: 1:    '7',
628: 1:    '8',
628: 1:    '9',
628: 1:    '10',
628: 1:    '11',
628: 1:    '12',
628: 1:    '13',
628: 1:    '14',
628: 1:    '15',
628: 1:    '16'
628: 1:  ]
628: 1:}
628: 1:Scores: 51919
628: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987']')
628: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
629: 1:BoardData {
629: 1:  'description': ['Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...'],
629: 1:  'expectedAnswer': '1597',
629: 1:  'history': [
629: 1:    {
629: 1:      'answer': '1',
629: 1:      'question': '1',
629: 1:      'valid': true
629: 1:    },
629: 1:    {
629: 1:      'answer': '1',
629: 1:      'question': '2',
629: 1:      'valid': true
629: 1:    },
629: 1:    {
629: 1:      'answer': '2',
629: 1:      'question': '3',
629: 1:      'valid': true
629: 1:    },
629: 1:    {
629: 1:      'answer': '3',
629: 1:      'question': '4',
629: 1:      'valid': true
629: 1:    },
629: 1:    {
629: 1:      'answer': '5',
629: 1:      'question': '5',
629: 1:      'valid': true
629: 1:    },
629: 1:    {
629: 1:      'answer': '8',
629: 1:      'question': '6',
629: 1:      'valid': true
629: 1:    },
629: 1:    {
629: 1:      'answer': '13',
629: 1:      'question': '7',
629: 1:      'valid': true
629: 1:    },
629: 1:    {
629: 1:      'answer': '21',
629: 1:      'question': '8',
629: 1:      'valid': true
629: 1:    },
629: 1:    {
629: 1:      'answer': '34',
629: 1:      'question': '9',
629: 1:      'valid': true
629: 1:    },
629: 1:    {
629: 1:      'answer': '55',
629: 1:      'question': '10',
629: 1:      'valid': true
629: 1:    },
629: 1:    {
629: 1:      'answer': '89',
629: 1:      'question': '11',
629: 1:      'valid': true
629: 1:    },
629: 1:    {
629: 1:      'answer': '144',
629: 1:      'question': '12',
629: 1:      'valid': true
629: 1:    },
629: 1:    {
629: 1:      'answer': '233',
629: 1:      'question': '13',
629: 1:      'valid': true
629: 1:    },
629: 1:    {
629: 1:      'answer': '377',
629: 1:      'question': '14',
629: 1:      'valid': true
629: 1:    },
629: 1:    {
629: 1:      'answer': '610',
629: 1:      'question': '15',
629: 1:      'valid': true
629: 1:    },
629: 1:    {
629: 1:      'answer': '987',
629: 1:      'question': '16',
629: 1:      'valid': true
629: 1:    }
629: 1:  ],
629: 1:  'info': [
629: 1:    '✅f(1) = 1',
629: 1:    '✅f(2) = 1',
629: 1:    '✅f(3) = 2',
629: 1:    '✅f(4) = 3',
629: 1:    '✅f(5) = 5',
629: 1:    '✅f(6) = 8',
629: 1:    '✅f(7) = 13',
629: 1:    '✅f(8) = 21',
629: 1:    '✅f(9) = 34',
629: 1:    '✅f(10) = 55',
629: 1:    '✅f(11) = 89',
629: 1:    '✅f(12) = 144',
629: 1:    '✅f(13) = 233',
629: 1:    '✅f(14) = 377',
629: 1:    '✅f(15) = 610',
629: 1:    '✅f(16) = 987',
629: 1:    '❌f(17) = ??? != 1597'
629: 1:  ],
629: 1:  'level': 23,
629: 1:  'nextQuestion': '17',
629: 1:  'questions': [
629: 1:    '1',
629: 1:    '2',
629: 1:    '3',
629: 1:    '4',
629: 1:    '5',
629: 1:    '6',
629: 1:    '7',
629: 1:    '8',
629: 1:    '9',
629: 1:    '10',
629: 1:    '11',
629: 1:    '12',
629: 1:    '13',
629: 1:    '14',
629: 1:    '15',
629: 1:    '16',
629: 1:    '17'
629: 1:  ]
629: 1:}
629: 1:Scores: 51931
629: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597']')
629: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
630: 1:BoardData {
630: 1:  'description': ['Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...'],
630: 1:  'expectedAnswer': '2584',
630: 1:  'history': [
630: 1:    {
630: 1:      'answer': '1',
630: 1:      'question': '1',
630: 1:      'valid': true
630: 1:    },
630: 1:    {
630: 1:      'answer': '1',
630: 1:      'question': '2',
630: 1:      'valid': true
630: 1:    },
630: 1:    {
630: 1:      'answer': '2',
630: 1:      'question': '3',
630: 1:      'valid': true
630: 1:    },
630: 1:    {
630: 1:      'answer': '3',
630: 1:      'question': '4',
630: 1:      'valid': true
630: 1:    },
630: 1:    {
630: 1:      'answer': '5',
630: 1:      'question': '5',
630: 1:      'valid': true
630: 1:    },
630: 1:    {
630: 1:      'answer': '8',
630: 1:      'question': '6',
630: 1:      'valid': true
630: 1:    },
630: 1:    {
630: 1:      'answer': '13',
630: 1:      'question': '7',
630: 1:      'valid': true
630: 1:    },
630: 1:    {
630: 1:      'answer': '21',
630: 1:      'question': '8',
630: 1:      'valid': true
630: 1:    },
630: 1:    {
630: 1:      'answer': '34',
630: 1:      'question': '9',
630: 1:      'valid': true
630: 1:    },
630: 1:    {
630: 1:      'answer': '55',
630: 1:      'question': '10',
630: 1:      'valid': true
630: 1:    },
630: 1:    {
630: 1:      'answer': '89',
630: 1:      'question': '11',
630: 1:      'valid': true
630: 1:    },
630: 1:    {
630: 1:      'answer': '144',
630: 1:      'question': '12',
630: 1:      'valid': true
630: 1:    },
630: 1:    {
630: 1:      'answer': '233',
630: 1:      'question': '13',
630: 1:      'valid': true
630: 1:    },
630: 1:    {
630: 1:      'answer': '377',
630: 1:      'question': '14',
630: 1:      'valid': true
630: 1:    },
630: 1:    {
630: 1:      'answer': '610',
630: 1:      'question': '15',
630: 1:      'valid': true
630: 1:    },
630: 1:    {
630: 1:      'answer': '987',
630: 1:      'question': '16',
630: 1:      'valid': true
630: 1:    },
630: 1:    {
630: 1:      'answer': '1597',
630: 1:      'question': '17',
630: 1:      'valid': true
630: 1:    }
630: 1:  ],
630: 1:  'info': [
630: 1:    '✅f(1) = 1',
630: 1:    '✅f(2) = 1',
630: 1:    '✅f(3) = 2',
630: 1:    '✅f(4) = 3',
630: 1:    '✅f(5) = 5',
630: 1:    '✅f(6) = 8',
630: 1:    '✅f(7) = 13',
630: 1:    '✅f(8) = 21',
630: 1:    '✅f(9) = 34',
630: 1:    '✅f(10) = 55',
630: 1:    '✅f(11) = 89',
630: 1:    '✅f(12) = 144',
630: 1:    '✅f(13) = 233',
630: 1:    '✅f(14) = 377',
630: 1:    '✅f(15) = 610',
630: 1:    '✅f(16) = 987',
630: 1:    '✅f(17) = 1597',
630: 1:    '❌f(18) = ??? != 2584'
630: 1:  ],
630: 1:  'level': 23,
630: 1:  'nextQuestion': '18',
630: 1:  'questions': [
630: 1:    '1',
630: 1:    '2',
630: 1:    '3',
630: 1:    '4',
630: 1:    '5',
630: 1:    '6',
630: 1:    '7',
630: 1:    '8',
630: 1:    '9',
630: 1:    '10',
630: 1:    '11',
630: 1:    '12',
630: 1:    '13',
630: 1:    '14',
630: 1:    '15',
630: 1:    '16',
630: 1:    '17',
630: 1:    '18'
630: 1:  ]
630: 1:}
630: 1:Scores: 51943
630: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597', '2584']')
630: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
631: 1:BoardData {
631: 1:  'description': ['Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...'],
631: 1:  'expectedAnswer': '4181',
631: 1:  'history': [
631: 1:    {
631: 1:      'answer': '1',
631: 1:      'question': '1',
631: 1:      'valid': true
631: 1:    },
631: 1:    {
631: 1:      'answer': '1',
631: 1:      'question': '2',
631: 1:      'valid': true
631: 1:    },
631: 1:    {
631: 1:      'answer': '2',
631: 1:      'question': '3',
631: 1:      'valid': true
631: 1:    },
631: 1:    {
631: 1:      'answer': '3',
631: 1:      'question': '4',
631: 1:      'valid': true
631: 1:    },
631: 1:    {
631: 1:      'answer': '5',
631: 1:      'question': '5',
631: 1:      'valid': true
631: 1:    },
631: 1:    {
631: 1:      'answer': '8',
631: 1:      'question': '6',
631: 1:      'valid': true
631: 1:    },
631: 1:    {
631: 1:      'answer': '13',
631: 1:      'question': '7',
631: 1:      'valid': true
631: 1:    },
631: 1:    {
631: 1:      'answer': '21',
631: 1:      'question': '8',
631: 1:      'valid': true
631: 1:    },
631: 1:    {
631: 1:      'answer': '34',
631: 1:      'question': '9',
631: 1:      'valid': true
631: 1:    },
631: 1:    {
631: 1:      'answer': '55',
631: 1:      'question': '10',
631: 1:      'valid': true
631: 1:    },
631: 1:    {
631: 1:      'answer': '89',
631: 1:      'question': '11',
631: 1:      'valid': true
631: 1:    },
631: 1:    {
631: 1:      'answer': '144',
631: 1:      'question': '12',
631: 1:      'valid': true
631: 1:    },
631: 1:    {
631: 1:      'answer': '233',
631: 1:      'question': '13',
631: 1:      'valid': true
631: 1:    },
631: 1:    {
631: 1:      'answer': '377',
631: 1:      'question': '14',
631: 1:      'valid': true
631: 1:    },
631: 1:    {
631: 1:      'answer': '610',
631: 1:      'question': '15',
631: 1:      'valid': true
631: 1:    },
631: 1:    {
631: 1:      'answer': '987',
631: 1:      'question': '16',
631: 1:      'valid': true
631: 1:    },
631: 1:    {
631: 1:      'answer': '1597',
631: 1:      'question': '17',
631: 1:      'valid': true
631: 1:    },
631: 1:    {
631: 1:      'answer': '2584',
631: 1:      'question': '18',
631: 1:      'valid': true
631: 1:    }
631: 1:  ],
631: 1:  'info': [
631: 1:    '✅f(1) = 1',
631: 1:    '✅f(2) = 1',
631: 1:    '✅f(3) = 2',
631: 1:    '✅f(4) = 3',
631: 1:    '✅f(5) = 5',
631: 1:    '✅f(6) = 8',
631: 1:    '✅f(7) = 13',
631: 1:    '✅f(8) = 21',
631: 1:    '✅f(9) = 34',
631: 1:    '✅f(10) = 55',
631: 1:    '✅f(11) = 89',
631: 1:    '✅f(12) = 144',
631: 1:    '✅f(13) = 233',
631: 1:    '✅f(14) = 377',
631: 1:    '✅f(15) = 610',
631: 1:    '✅f(16) = 987',
631: 1:    '✅f(17) = 1597',
631: 1:    '✅f(18) = 2584',
631: 1:    '❌f(19) = ??? != 4181'
631: 1:  ],
631: 1:  'level': 23,
631: 1:  'nextQuestion': '19',
631: 1:  'questions': [
631: 1:    '1',
631: 1:    '2',
631: 1:    '3',
631: 1:    '4',
631: 1:    '5',
631: 1:    '6',
631: 1:    '7',
631: 1:    '8',
631: 1:    '9',
631: 1:    '10',
631: 1:    '11',
631: 1:    '12',
631: 1:    '13',
631: 1:    '14',
631: 1:    '15',
631: 1:    '16',
631: 1:    '17',
631: 1:    '18',
631: 1:    '19'
631: 1:  ]
631: 1:}
631: 1:Scores: 51955
631: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597', '2584', '4181']')
631: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
632: 1:BoardData {
632: 1:  'description': ['Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...'],
632: 1:  'expectedAnswer': '6765',
632: 1:  'history': [
632: 1:    {
632: 1:      'answer': '1',
632: 1:      'question': '1',
632: 1:      'valid': true
632: 1:    },
632: 1:    {
632: 1:      'answer': '1',
632: 1:      'question': '2',
632: 1:      'valid': true
632: 1:    },
632: 1:    {
632: 1:      'answer': '2',
632: 1:      'question': '3',
632: 1:      'valid': true
632: 1:    },
632: 1:    {
632: 1:      'answer': '3',
632: 1:      'question': '4',
632: 1:      'valid': true
632: 1:    },
632: 1:    {
632: 1:      'answer': '5',
632: 1:      'question': '5',
632: 1:      'valid': true
632: 1:    },
632: 1:    {
632: 1:      'answer': '8',
632: 1:      'question': '6',
632: 1:      'valid': true
632: 1:    },
632: 1:    {
632: 1:      'answer': '13',
632: 1:      'question': '7',
632: 1:      'valid': true
632: 1:    },
632: 1:    {
632: 1:      'answer': '21',
632: 1:      'question': '8',
632: 1:      'valid': true
632: 1:    },
632: 1:    {
632: 1:      'answer': '34',
632: 1:      'question': '9',
632: 1:      'valid': true
632: 1:    },
632: 1:    {
632: 1:      'answer': '55',
632: 1:      'question': '10',
632: 1:      'valid': true
632: 1:    },
632: 1:    {
632: 1:      'answer': '89',
632: 1:      'question': '11',
632: 1:      'valid': true
632: 1:    },
632: 1:    {
632: 1:      'answer': '144',
632: 1:      'question': '12',
632: 1:      'valid': true
632: 1:    },
632: 1:    {
632: 1:      'answer': '233',
632: 1:      'question': '13',
632: 1:      'valid': true
632: 1:    },
632: 1:    {
632: 1:      'answer': '377',
632: 1:      'question': '14',
632: 1:      'valid': true
632: 1:    },
632: 1:    {
632: 1:      'answer': '610',
632: 1:      'question': '15',
632: 1:      'valid': true
632: 1:    },
632: 1:    {
632: 1:      'answer': '987',
632: 1:      'question': '16',
632: 1:      'valid': true
632: 1:    },
632: 1:    {
632: 1:      'answer': '1597',
632: 1:      'question': '17',
632: 1:      'valid': true
632: 1:    },
632: 1:    {
632: 1:      'answer': '2584',
632: 1:      'question': '18',
632: 1:      'valid': true
632: 1:    },
632: 1:    {
632: 1:      'answer': '4181',
632: 1:      'question': '19',
632: 1:      'valid': true
632: 1:    }
632: 1:  ],
632: 1:  'info': [
632: 1:    '✅f(1) = 1',
632: 1:    '✅f(2) = 1',
632: 1:    '✅f(3) = 2',
632: 1:    '✅f(4) = 3',
632: 1:    '✅f(5) = 5',
632: 1:    '✅f(6) = 8',
632: 1:    '✅f(7) = 13',
632: 1:    '✅f(8) = 21',
632: 1:    '✅f(9) = 34',
632: 1:    '✅f(10) = 55',
632: 1:    '✅f(11) = 89',
632: 1:    '✅f(12) = 144',
632: 1:    '✅f(13) = 233',
632: 1:    '✅f(14) = 377',
632: 1:    '✅f(15) = 610',
632: 1:    '✅f(16) = 987',
632: 1:    '✅f(17) = 1597',
632: 1:    '✅f(18) = 2584',
632: 1:    '✅f(19) = 4181',
632: 1:    '❌f(20) = ??? != 6765'
632: 1:  ],
632: 1:  'level': 23,
632: 1:  'nextQuestion': '20',
632: 1:  'questions': [
632: 1:    '1',
632: 1:    '2',
632: 1:    '3',
632: 1:    '4',
632: 1:    '5',
632: 1:    '6',
632: 1:    '7',
632: 1:    '8',
632: 1:    '9',
632: 1:    '10',
632: 1:    '11',
632: 1:    '12',
632: 1:    '13',
632: 1:    '14',
632: 1:    '15',
632: 1:    '16',
632: 1:    '17',
632: 1:    '18',
632: 1:    '19',
632: 1:    '20'
632: 1:  ]
632: 1:}
632: 1:Scores: 51967
632: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597', '2584', '4181', '6765']')
632: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
633: 1:BoardData {
633: 1:  'description': ['Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...'],
633: 1:  'expectedAnswer': '10946',
633: 1:  'history': [
633: 1:    {
633: 1:      'answer': '1',
633: 1:      'question': '1',
633: 1:      'valid': true
633: 1:    },
633: 1:    {
633: 1:      'answer': '1',
633: 1:      'question': '2',
633: 1:      'valid': true
633: 1:    },
633: 1:    {
633: 1:      'answer': '2',
633: 1:      'question': '3',
633: 1:      'valid': true
633: 1:    },
633: 1:    {
633: 1:      'answer': '3',
633: 1:      'question': '4',
633: 1:      'valid': true
633: 1:    },
633: 1:    {
633: 1:      'answer': '5',
633: 1:      'question': '5',
633: 1:      'valid': true
633: 1:    },
633: 1:    {
633: 1:      'answer': '8',
633: 1:      'question': '6',
633: 1:      'valid': true
633: 1:    },
633: 1:    {
633: 1:      'answer': '13',
633: 1:      'question': '7',
633: 1:      'valid': true
633: 1:    },
633: 1:    {
633: 1:      'answer': '21',
633: 1:      'question': '8',
633: 1:      'valid': true
633: 1:    },
633: 1:    {
633: 1:      'answer': '34',
633: 1:      'question': '9',
633: 1:      'valid': true
633: 1:    },
633: 1:    {
633: 1:      'answer': '55',
633: 1:      'question': '10',
633: 1:      'valid': true
633: 1:    },
633: 1:    {
633: 1:      'answer': '89',
633: 1:      'question': '11',
633: 1:      'valid': true
633: 1:    },
633: 1:    {
633: 1:      'answer': '144',
633: 1:      'question': '12',
633: 1:      'valid': true
633: 1:    },
633: 1:    {
633: 1:      'answer': '233',
633: 1:      'question': '13',
633: 1:      'valid': true
633: 1:    },
633: 1:    {
633: 1:      'answer': '377',
633: 1:      'question': '14',
633: 1:      'valid': true
633: 1:    },
633: 1:    {
633: 1:      'answer': '610',
633: 1:      'question': '15',
633: 1:      'valid': true
633: 1:    },
633: 1:    {
633: 1:      'answer': '987',
633: 1:      'question': '16',
633: 1:      'valid': true
633: 1:    },
633: 1:    {
633: 1:      'answer': '1597',
633: 1:      'question': '17',
633: 1:      'valid': true
633: 1:    },
633: 1:    {
633: 1:      'answer': '2584',
633: 1:      'question': '18',
633: 1:      'valid': true
633: 1:    },
633: 1:    {
633: 1:      'answer': '4181',
633: 1:      'question': '19',
633: 1:      'valid': true
633: 1:    },
633: 1:    {
633: 1:      'answer': '6765',
633: 1:      'question': '20',
633: 1:      'valid': true
633: 1:    }
633: 1:  ],
633: 1:  'info': [
633: 1:    '✅f(1) = 1',
633: 1:    '✅f(2) = 1',
633: 1:    '✅f(3) = 2',
633: 1:    '✅f(4) = 3',
633: 1:    '✅f(5) = 5',
633: 1:    '✅f(6) = 8',
633: 1:    '✅f(7) = 13',
633: 1:    '✅f(8) = 21',
633: 1:    '✅f(9) = 34',
633: 1:    '✅f(10) = 55',
633: 1:    '✅f(11) = 89',
633: 1:    '✅f(12) = 144',
633: 1:    '✅f(13) = 233',
633: 1:    '✅f(14) = 377',
633: 1:    '✅f(15) = 610',
633: 1:    '✅f(16) = 987',
633: 1:    '✅f(17) = 1597',
633: 1:    '✅f(18) = 2584',
633: 1:    '✅f(19) = 4181',
633: 1:    '✅f(20) = 6765',
633: 1:    '❌f(21) = ??? != 10946'
633: 1:  ],
633: 1:  'level': 23,
633: 1:  'nextQuestion': '21',
633: 1:  'questions': [
633: 1:    '1',
633: 1:    '2',
633: 1:    '3',
633: 1:    '4',
633: 1:    '5',
633: 1:    '6',
633: 1:    '7',
633: 1:    '8',
633: 1:    '9',
633: 1:    '10',
633: 1:    '11',
633: 1:    '12',
633: 1:    '13',
633: 1:    '14',
633: 1:    '15',
633: 1:    '16',
633: 1:    '17',
633: 1:    '18',
633: 1:    '19',
633: 1:    '20',
633: 1:    '21'
633: 1:  ]
633: 1:}
633: 1:Scores: 51979
633: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597', '2584', '4181', '6765', '10946']')
633: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
634: 1:BoardData {
634: 1:  'description': ['Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...'],
634: 1:  'expectedAnswer': '17711',
634: 1:  'history': [
634: 1:    {
634: 1:      'answer': '1',
634: 1:      'question': '1',
634: 1:      'valid': true
634: 1:    },
634: 1:    {
634: 1:      'answer': '1',
634: 1:      'question': '2',
634: 1:      'valid': true
634: 1:    },
634: 1:    {
634: 1:      'answer': '2',
634: 1:      'question': '3',
634: 1:      'valid': true
634: 1:    },
634: 1:    {
634: 1:      'answer': '3',
634: 1:      'question': '4',
634: 1:      'valid': true
634: 1:    },
634: 1:    {
634: 1:      'answer': '5',
634: 1:      'question': '5',
634: 1:      'valid': true
634: 1:    },
634: 1:    {
634: 1:      'answer': '8',
634: 1:      'question': '6',
634: 1:      'valid': true
634: 1:    },
634: 1:    {
634: 1:      'answer': '13',
634: 1:      'question': '7',
634: 1:      'valid': true
634: 1:    },
634: 1:    {
634: 1:      'answer': '21',
634: 1:      'question': '8',
634: 1:      'valid': true
634: 1:    },
634: 1:    {
634: 1:      'answer': '34',
634: 1:      'question': '9',
634: 1:      'valid': true
634: 1:    },
634: 1:    {
634: 1:      'answer': '55',
634: 1:      'question': '10',
634: 1:      'valid': true
634: 1:    },
634: 1:    {
634: 1:      'answer': '89',
634: 1:      'question': '11',
634: 1:      'valid': true
634: 1:    },
634: 1:    {
634: 1:      'answer': '144',
634: 1:      'question': '12',
634: 1:      'valid': true
634: 1:    },
634: 1:    {
634: 1:      'answer': '233',
634: 1:      'question': '13',
634: 1:      'valid': true
634: 1:    },
634: 1:    {
634: 1:      'answer': '377',
634: 1:      'question': '14',
634: 1:      'valid': true
634: 1:    },
634: 1:    {
634: 1:      'answer': '610',
634: 1:      'question': '15',
634: 1:      'valid': true
634: 1:    },
634: 1:    {
634: 1:      'answer': '987',
634: 1:      'question': '16',
634: 1:      'valid': true
634: 1:    },
634: 1:    {
634: 1:      'answer': '1597',
634: 1:      'question': '17',
634: 1:      'valid': true
634: 1:    },
634: 1:    {
634: 1:      'answer': '2584',
634: 1:      'question': '18',
634: 1:      'valid': true
634: 1:    },
634: 1:    {
634: 1:      'answer': '4181',
634: 1:      'question': '19',
634: 1:      'valid': true
634: 1:    },
634: 1:    {
634: 1:      'answer': '6765',
634: 1:      'question': '20',
634: 1:      'valid': true
634: 1:    },
634: 1:    {
634: 1:      'answer': '10946',
634: 1:      'question': '21',
634: 1:      'valid': true
634: 1:    }
634: 1:  ],
634: 1:  'info': [
634: 1:    '✅f(1) = 1',
634: 1:    '✅f(2) = 1',
634: 1:    '✅f(3) = 2',
634: 1:    '✅f(4) = 3',
634: 1:    '✅f(5) = 5',
634: 1:    '✅f(6) = 8',
634: 1:    '✅f(7) = 13',
634: 1:    '✅f(8) = 21',
634: 1:    '✅f(9) = 34',
634: 1:    '✅f(10) = 55',
634: 1:    '✅f(11) = 89',
634: 1:    '✅f(12) = 144',
634: 1:    '✅f(13) = 233',
634: 1:    '✅f(14) = 377',
634: 1:    '✅f(15) = 610',
634: 1:    '✅f(16) = 987',
634: 1:    '✅f(17) = 1597',
634: 1:    '✅f(18) = 2584',
634: 1:    '✅f(19) = 4181',
634: 1:    '✅f(20) = 6765',
634: 1:    '✅f(21) = 10946',
634: 1:    '❌f(22) = ??? != 17711'
634: 1:  ],
634: 1:  'level': 23,
634: 1:  'nextQuestion': '22',
634: 1:  'questions': [
634: 1:    '1',
634: 1:    '2',
634: 1:    '3',
634: 1:    '4',
634: 1:    '5',
634: 1:    '6',
634: 1:    '7',
634: 1:    '8',
634: 1:    '9',
634: 1:    '10',
634: 1:    '11',
634: 1:    '12',
634: 1:    '13',
634: 1:    '14',
634: 1:    '15',
634: 1:    '16',
634: 1:    '17',
634: 1:    '18',
634: 1:    '19',
634: 1:    '20',
634: 1:    '21',
634: 1:    '22'
634: 1:  ]
634: 1:}
634: 1:Scores: 51991
634: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597', '2584', '4181', '6765', '10946', '17711']')
634: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
635: 1:BoardData {
635: 1:  'description': ['Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...'],
635: 1:  'expectedAnswer': '28657',
635: 1:  'history': [
635: 1:    {
635: 1:      'answer': '1',
635: 1:      'question': '1',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '1',
635: 1:      'question': '2',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '2',
635: 1:      'question': '3',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '3',
635: 1:      'question': '4',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '5',
635: 1:      'question': '5',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '8',
635: 1:      'question': '6',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '13',
635: 1:      'question': '7',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '21',
635: 1:      'question': '8',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '34',
635: 1:      'question': '9',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '55',
635: 1:      'question': '10',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '89',
635: 1:      'question': '11',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '144',
635: 1:      'question': '12',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '233',
635: 1:      'question': '13',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '377',
635: 1:      'question': '14',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '610',
635: 1:      'question': '15',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '987',
635: 1:      'question': '16',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '1597',
635: 1:      'question': '17',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '2584',
635: 1:      'question': '18',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '4181',
635: 1:      'question': '19',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '6765',
635: 1:      'question': '20',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '10946',
635: 1:      'question': '21',
635: 1:      'valid': true
635: 1:    },
635: 1:    {
635: 1:      'answer': '17711',
635: 1:      'question': '22',
635: 1:      'valid': true
635: 1:    }
635: 1:  ],
635: 1:  'info': [
635: 1:    '✅f(1) = 1',
635: 1:    '✅f(2) = 1',
635: 1:    '✅f(3) = 2',
635: 1:    '✅f(4) = 3',
635: 1:    '✅f(5) = 5',
635: 1:    '✅f(6) = 8',
635: 1:    '✅f(7) = 13',
635: 1:    '✅f(8) = 21',
635: 1:    '✅f(9) = 34',
635: 1:    '✅f(10) = 55',
635: 1:    '✅f(11) = 89',
635: 1:    '✅f(12) = 144',
635: 1:    '✅f(13) = 233',
635: 1:    '✅f(14) = 377',
635: 1:    '✅f(15) = 610',
635: 1:    '✅f(16) = 987',
635: 1:    '✅f(17) = 1597',
635: 1:    '✅f(18) = 2584',
635: 1:    '✅f(19) = 4181',
635: 1:    '✅f(20) = 6765',
635: 1:    '✅f(21) = 10946',
635: 1:    '✅f(22) = 17711',
635: 1:    '❌f(23) = ??? != 28657'
635: 1:  ],
635: 1:  'level': 23,
635: 1:  'nextQuestion': '23',
635: 1:  'questions': [
635: 1:    '1',
635: 1:    '2',
635: 1:    '3',
635: 1:    '4',
635: 1:    '5',
635: 1:    '6',
635: 1:    '7',
635: 1:    '8',
635: 1:    '9',
635: 1:    '10',
635: 1:    '11',
635: 1:    '12',
635: 1:    '13',
635: 1:    '14',
635: 1:    '15',
635: 1:    '16',
635: 1:    '17',
635: 1:    '18',
635: 1:    '19',
635: 1:    '20',
635: 1:    '21',
635: 1:    '22',
635: 1:    '23'
635: 1:  ]
635: 1:}
635: 1:Scores: 52003
635: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597', '2584', '4181', '6765', '10946', '17711', '28657']')
635: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
636: 1:BoardData {
636: 1:  'description': ['Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...'],
636: 1:  'expectedAnswer': '46368',
636: 1:  'history': [
636: 1:    {
636: 1:      'answer': '1',
636: 1:      'question': '1',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '1',
636: 1:      'question': '2',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '2',
636: 1:      'question': '3',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '3',
636: 1:      'question': '4',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '5',
636: 1:      'question': '5',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '8',
636: 1:      'question': '6',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '13',
636: 1:      'question': '7',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '21',
636: 1:      'question': '8',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '34',
636: 1:      'question': '9',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '55',
636: 1:      'question': '10',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '89',
636: 1:      'question': '11',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '144',
636: 1:      'question': '12',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '233',
636: 1:      'question': '13',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '377',
636: 1:      'question': '14',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '610',
636: 1:      'question': '15',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '987',
636: 1:      'question': '16',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '1597',
636: 1:      'question': '17',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '2584',
636: 1:      'question': '18',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '4181',
636: 1:      'question': '19',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '6765',
636: 1:      'question': '20',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '10946',
636: 1:      'question': '21',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '17711',
636: 1:      'question': '22',
636: 1:      'valid': true
636: 1:    },
636: 1:    {
636: 1:      'answer': '28657',
636: 1:      'question': '23',
636: 1:      'valid': true
636: 1:    }
636: 1:  ],
636: 1:  'info': [
636: 1:    '✅f(1) = 1',
636: 1:    '✅f(2) = 1',
636: 1:    '✅f(3) = 2',
636: 1:    '✅f(4) = 3',
636: 1:    '✅f(5) = 5',
636: 1:    '✅f(6) = 8',
636: 1:    '✅f(7) = 13',
636: 1:    '✅f(8) = 21',
636: 1:    '✅f(9) = 34',
636: 1:    '✅f(10) = 55',
636: 1:    '✅f(11) = 89',
636: 1:    '✅f(12) = 144',
636: 1:    '✅f(13) = 233',
636: 1:    '✅f(14) = 377',
636: 1:    '✅f(15) = 610',
636: 1:    '✅f(16) = 987',
636: 1:    '✅f(17) = 1597',
636: 1:    '✅f(18) = 2584',
636: 1:    '✅f(19) = 4181',
636: 1:    '✅f(20) = 6765',
636: 1:    '✅f(21) = 10946',
636: 1:    '✅f(22) = 17711',
636: 1:    '✅f(23) = 28657',
636: 1:    '❌f(24) = ??? != 46368'
636: 1:  ],
636: 1:  'level': 23,
636: 1:  'nextQuestion': '24',
636: 1:  'questions': [
636: 1:    '1',
636: 1:    '2',
636: 1:    '3',
636: 1:    '4',
636: 1:    '5',
636: 1:    '6',
636: 1:    '7',
636: 1:    '8',
636: 1:    '9',
636: 1:    '10',
636: 1:    '11',
636: 1:    '12',
636: 1:    '13',
636: 1:    '14',
636: 1:    '15',
636: 1:    '16',
636: 1:    '17',
636: 1:    '18',
636: 1:    '19',
636: 1:    '20',
636: 1:    '21',
636: 1:    '22',
636: 1:    '23',
636: 1:    '24'
636: 1:  ]
636: 1:}
636: 1:Scores: 52015
636: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597', '2584', '4181', '6765', '10946', '17711', '28657', '46368']')
636: 1:Fire Event: PassTest{complexity=30, testCount=25}
------------------------------------------
637: 1:BoardData {
637: 1:  'description': ['Make a method that returns a Fibonacci number from the series by its number:\nf(0) = 0\nf(1) = 1\nf(2) = 0 + 1 = 1\nf(3) = 1 + 1 = 2\nf(4) = 1 + 2 = 3\nf(5) = 2 + 3 = 5\nf(6) = 3 + 5 = 8\nf(7) = 5 + 8 = 13\nf(8) = 8 + 13 = 21\nf(9) = 13 + 21 = 34\netc...'],
637: 1:  'expectedAnswer': '75025',
637: 1:  'history': [
637: 1:    {
637: 1:      'answer': '1',
637: 1:      'question': '1',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '1',
637: 1:      'question': '2',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '2',
637: 1:      'question': '3',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '3',
637: 1:      'question': '4',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '5',
637: 1:      'question': '5',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '8',
637: 1:      'question': '6',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '13',
637: 1:      'question': '7',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '21',
637: 1:      'question': '8',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '34',
637: 1:      'question': '9',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '55',
637: 1:      'question': '10',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '89',
637: 1:      'question': '11',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '144',
637: 1:      'question': '12',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '233',
637: 1:      'question': '13',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '377',
637: 1:      'question': '14',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '610',
637: 1:      'question': '15',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '987',
637: 1:      'question': '16',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '1597',
637: 1:      'question': '17',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '2584',
637: 1:      'question': '18',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '4181',
637: 1:      'question': '19',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '6765',
637: 1:      'question': '20',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '10946',
637: 1:      'question': '21',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '17711',
637: 1:      'question': '22',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '28657',
637: 1:      'question': '23',
637: 1:      'valid': true
637: 1:    },
637: 1:    {
637: 1:      'answer': '46368',
637: 1:      'question': '24',
637: 1:      'valid': true
637: 1:    }
637: 1:  ],
637: 1:  'info': [
637: 1:    '✅f(1) = 1',
637: 1:    '✅f(2) = 1',
637: 1:    '✅f(3) = 2',
637: 1:    '✅f(4) = 3',
637: 1:    '✅f(5) = 5',
637: 1:    '✅f(6) = 8',
637: 1:    '✅f(7) = 13',
637: 1:    '✅f(8) = 21',
637: 1:    '✅f(9) = 34',
637: 1:    '✅f(10) = 55',
637: 1:    '✅f(11) = 89',
637: 1:    '✅f(12) = 144',
637: 1:    '✅f(13) = 233',
637: 1:    '✅f(14) = 377',
637: 1:    '✅f(15) = 610',
637: 1:    '✅f(16) = 987',
637: 1:    '✅f(17) = 1597',
637: 1:    '✅f(18) = 2584',
637: 1:    '✅f(19) = 4181',
637: 1:    '✅f(20) = 6765',
637: 1:    '✅f(21) = 10946',
637: 1:    '✅f(22) = 17711',
637: 1:    '✅f(23) = 28657',
637: 1:    '✅f(24) = 46368',
637: 1:    '❌f(25) = ??? != 75025'
637: 1:  ],
637: 1:  'level': 23,
637: 1:  'nextQuestion': '25',
637: 1:  'questions': [
637: 1:    '1',
637: 1:    '2',
637: 1:    '3',
637: 1:    '4',
637: 1:    '5',
637: 1:    '6',
637: 1:    '7',
637: 1:    '8',
637: 1:    '9',
637: 1:    '10',
637: 1:    '11',
637: 1:    '12',
637: 1:    '13',
637: 1:    '14',
637: 1:    '15',
637: 1:    '16',
637: 1:    '17',
637: 1:    '18',
637: 1:    '19',
637: 1:    '20',
637: 1:    '21',
637: 1:    '22',
637: 1:    '23',
637: 1:    '24',
637: 1:    '25'
637: 1:  ]
637: 1:}
637: 1:Scores: 52027
637: 1:Answer: message('['1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597', '2584', '4181', '6765', '10946', '17711', '28657', '46368', '75025']')
637: 1:Fire Event: PassTest{complexity=30, testCount=25}
637: 1:Fire Event: NextAlgorithm{complexity=30, time=0}
------------------------------------------
638: 1:BoardData {
638: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
638: 1:  'history': [
638: 1:    {
638: 1:      'answer': '1',
638: 1:      'question': '1',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '1',
638: 1:      'question': '2',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '2',
638: 1:      'question': '3',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '3',
638: 1:      'question': '4',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '5',
638: 1:      'question': '5',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '8',
638: 1:      'question': '6',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '13',
638: 1:      'question': '7',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '21',
638: 1:      'question': '8',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '34',
638: 1:      'question': '9',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '55',
638: 1:      'question': '10',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '89',
638: 1:      'question': '11',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '144',
638: 1:      'question': '12',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '233',
638: 1:      'question': '13',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '377',
638: 1:      'question': '14',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '610',
638: 1:      'question': '15',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '987',
638: 1:      'question': '16',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '1597',
638: 1:      'question': '17',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '2584',
638: 1:      'question': '18',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '4181',
638: 1:      'question': '19',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '6765',
638: 1:      'question': '20',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '10946',
638: 1:      'question': '21',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '17711',
638: 1:      'question': '22',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '28657',
638: 1:      'question': '23',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '46368',
638: 1:      'question': '24',
638: 1:      'valid': true
638: 1:    },
638: 1:    {
638: 1:      'answer': '75025',
638: 1:      'question': '25',
638: 1:      'valid': true
638: 1:    }
638: 1:  ],
638: 1:  'info': [
638: 1:    '✅f(1) = 1',
638: 1:    '✅f(2) = 1',
638: 1:    '✅f(3) = 2',
638: 1:    '✅f(4) = 3',
638: 1:    '✅f(5) = 5',
638: 1:    '✅f(6) = 8',
638: 1:    '✅f(7) = 13',
638: 1:    '✅f(8) = 21',
638: 1:    '✅f(9) = 34',
638: 1:    '✅f(10) = 55',
638: 1:    '✅f(11) = 89',
638: 1:    '✅f(12) = 144',
638: 1:    '✅f(13) = 233',
638: 1:    '✅f(14) = 377',
638: 1:    '✅f(15) = 610',
638: 1:    '✅f(16) = 987',
638: 1:    '✅f(17) = 1597',
638: 1:    '✅f(18) = 2584',
638: 1:    '✅f(19) = 4181',
638: 1:    '✅f(20) = 6765',
638: 1:    '✅f(21) = 10946',
638: 1:    '✅f(22) = 17711',
638: 1:    '✅f(23) = 28657',
638: 1:    '✅f(24) = 46368',
638: 1:    '✅f(25) = 75025'
638: 1:  ],
638: 1:  'level': 23,
638: 1:  'questions': []
638: 1:}
638: 1:Scores: 56088
638: 1:Answer: message('StartNextLevel')
638: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
639: 1:BoardData {
639: 1:  'description': ['Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...'],
639: 1:  'expectedAnswer': '[1]',
639: 1:  'history': [],
639: 1:  'info': ['❌f(1) = ??? != [1]'],
639: 1:  'level': 24,
639: 1:  'nextQuestion': '1',
639: 1:  'questions': ['1']
639: 1:}
639: 1:Scores: 56088
639: 1:Answer: message('['[1]']')
639: 1:Fire Event: PassTest{complexity=35, testCount=25}
------------------------------------------
640: 1:BoardData {
640: 1:  'description': ['Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...'],
640: 1:  'expectedAnswer': '[2]',
640: 1:  'history': [{
640: 1:    'answer': '[1]',
640: 1:    'question': '1',
640: 1:    'valid': true
640: 1:  }],
640: 1:  'info': [
640: 1:    '✅f(1) = [1]',
640: 1:    '❌f(2) = ??? != [2]'
640: 1:  ],
640: 1:  'level': 24,
640: 1:  'nextQuestion': '2',
640: 1:  'questions': [
640: 1:    '1',
640: 1:    '2'
640: 1:  ]
640: 1:}
640: 1:Scores: 56102
640: 1:Answer: message('['[1]', '[2]']')
640: 1:Fire Event: PassTest{complexity=35, testCount=25}
------------------------------------------
641: 1:BoardData {
641: 1:  'description': ['Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...'],
641: 1:  'expectedAnswer': '[3]',
641: 1:  'history': [
641: 1:    {
641: 1:      'answer': '[1]',
641: 1:      'question': '1',
641: 1:      'valid': true
641: 1:    },
641: 1:    {
641: 1:      'answer': '[2]',
641: 1:      'question': '2',
641: 1:      'valid': true
641: 1:    }
641: 1:  ],
641: 1:  'info': [
641: 1:    '✅f(1) = [1]',
641: 1:    '✅f(2) = [2]',
641: 1:    '❌f(3) = ??? != [3]'
641: 1:  ],
641: 1:  'level': 24,
641: 1:  'nextQuestion': '3',
641: 1:  'questions': [
641: 1:    '1',
641: 1:    '2',
641: 1:    '3'
641: 1:  ]
641: 1:}
641: 1:Scores: 56116
641: 1:Answer: message('['[1]', '[2]', '[3]']')
641: 1:Fire Event: PassTest{complexity=35, testCount=25}
------------------------------------------
642: 1:BoardData {
642: 1:  'description': ['Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...'],
642: 1:  'expectedAnswer': '[2,2]',
642: 1:  'history': [
642: 1:    {
642: 1:      'answer': '[1]',
642: 1:      'question': '1',
642: 1:      'valid': true
642: 1:    },
642: 1:    {
642: 1:      'answer': '[2]',
642: 1:      'question': '2',
642: 1:      'valid': true
642: 1:    },
642: 1:    {
642: 1:      'answer': '[3]',
642: 1:      'question': '3',
642: 1:      'valid': true
642: 1:    }
642: 1:  ],
642: 1:  'info': [
642: 1:    '✅f(1) = [1]',
642: 1:    '✅f(2) = [2]',
642: 1:    '✅f(3) = [3]',
642: 1:    '❌f(4) = ??? != [2,2]'
642: 1:  ],
642: 1:  'level': 24,
642: 1:  'nextQuestion': '4',
642: 1:  'questions': [
642: 1:    '1',
642: 1:    '2',
642: 1:    '3',
642: 1:    '4'
642: 1:  ]
642: 1:}
642: 1:Scores: 56130
642: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]']')
642: 1:Fire Event: PassTest{complexity=35, testCount=25}
------------------------------------------
643: 1:BoardData {
643: 1:  'description': ['Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...'],
643: 1:  'expectedAnswer': '[5]',
643: 1:  'history': [
643: 1:    {
643: 1:      'answer': '[1]',
643: 1:      'question': '1',
643: 1:      'valid': true
643: 1:    },
643: 1:    {
643: 1:      'answer': '[2]',
643: 1:      'question': '2',
643: 1:      'valid': true
643: 1:    },
643: 1:    {
643: 1:      'answer': '[3]',
643: 1:      'question': '3',
643: 1:      'valid': true
643: 1:    },
643: 1:    {
643: 1:      'answer': '[2,2]',
643: 1:      'question': '4',
643: 1:      'valid': true
643: 1:    }
643: 1:  ],
643: 1:  'info': [
643: 1:    '✅f(1) = [1]',
643: 1:    '✅f(2) = [2]',
643: 1:    '✅f(3) = [3]',
643: 1:    '✅f(4) = [2,2]',
643: 1:    '❌f(5) = ??? != [5]'
643: 1:  ],
643: 1:  'level': 24,
643: 1:  'nextQuestion': '5',
643: 1:  'questions': [
643: 1:    '1',
643: 1:    '2',
643: 1:    '3',
643: 1:    '4',
643: 1:    '5'
643: 1:  ]
643: 1:}
643: 1:Scores: 56144
643: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]']')
643: 1:Fire Event: PassTest{complexity=35, testCount=25}
------------------------------------------
644: 1:BoardData {
644: 1:  'description': ['Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...'],
644: 1:  'expectedAnswer': '[2,3]',
644: 1:  'history': [
644: 1:    {
644: 1:      'answer': '[1]',
644: 1:      'question': '1',
644: 1:      'valid': true
644: 1:    },
644: 1:    {
644: 1:      'answer': '[2]',
644: 1:      'question': '2',
644: 1:      'valid': true
644: 1:    },
644: 1:    {
644: 1:      'answer': '[3]',
644: 1:      'question': '3',
644: 1:      'valid': true
644: 1:    },
644: 1:    {
644: 1:      'answer': '[2,2]',
644: 1:      'question': '4',
644: 1:      'valid': true
644: 1:    },
644: 1:    {
644: 1:      'answer': '[5]',
644: 1:      'question': '5',
644: 1:      'valid': true
644: 1:    }
644: 1:  ],
644: 1:  'info': [
644: 1:    '✅f(1) = [1]',
644: 1:    '✅f(2) = [2]',
644: 1:    '✅f(3) = [3]',
644: 1:    '✅f(4) = [2,2]',
644: 1:    '✅f(5) = [5]',
644: 1:    '❌f(6) = ??? != [2,3]'
644: 1:  ],
644: 1:  'level': 24,
644: 1:  'nextQuestion': '6',
644: 1:  'questions': [
644: 1:    '1',
644: 1:    '2',
644: 1:    '3',
644: 1:    '4',
644: 1:    '5',
644: 1:    '6'
644: 1:  ]
644: 1:}
644: 1:Scores: 56158
644: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]']')
644: 1:Fire Event: PassTest{complexity=35, testCount=25}
------------------------------------------
645: 1:BoardData {
645: 1:  'description': ['Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...'],
645: 1:  'expectedAnswer': '[7]',
645: 1:  'history': [
645: 1:    {
645: 1:      'answer': '[1]',
645: 1:      'question': '1',
645: 1:      'valid': true
645: 1:    },
645: 1:    {
645: 1:      'answer': '[2]',
645: 1:      'question': '2',
645: 1:      'valid': true
645: 1:    },
645: 1:    {
645: 1:      'answer': '[3]',
645: 1:      'question': '3',
645: 1:      'valid': true
645: 1:    },
645: 1:    {
645: 1:      'answer': '[2,2]',
645: 1:      'question': '4',
645: 1:      'valid': true
645: 1:    },
645: 1:    {
645: 1:      'answer': '[5]',
645: 1:      'question': '5',
645: 1:      'valid': true
645: 1:    },
645: 1:    {
645: 1:      'answer': '[2,3]',
645: 1:      'question': '6',
645: 1:      'valid': true
645: 1:    }
645: 1:  ],
645: 1:  'info': [
645: 1:    '✅f(1) = [1]',
645: 1:    '✅f(2) = [2]',
645: 1:    '✅f(3) = [3]',
645: 1:    '✅f(4) = [2,2]',
645: 1:    '✅f(5) = [5]',
645: 1:    '✅f(6) = [2,3]',
645: 1:    '❌f(7) = ??? != [7]'
645: 1:  ],
645: 1:  'level': 24,
645: 1:  'nextQuestion': '7',
645: 1:  'questions': [
645: 1:    '1',
645: 1:    '2',
645: 1:    '3',
645: 1:    '4',
645: 1:    '5',
645: 1:    '6',
645: 1:    '7'
645: 1:  ]
645: 1:}
645: 1:Scores: 56172
645: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]']')
645: 1:Fire Event: PassTest{complexity=35, testCount=25}
------------------------------------------
646: 1:BoardData {
646: 1:  'description': ['Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...'],
646: 1:  'expectedAnswer': '[2,2,2]',
646: 1:  'history': [
646: 1:    {
646: 1:      'answer': '[1]',
646: 1:      'question': '1',
646: 1:      'valid': true
646: 1:    },
646: 1:    {
646: 1:      'answer': '[2]',
646: 1:      'question': '2',
646: 1:      'valid': true
646: 1:    },
646: 1:    {
646: 1:      'answer': '[3]',
646: 1:      'question': '3',
646: 1:      'valid': true
646: 1:    },
646: 1:    {
646: 1:      'answer': '[2,2]',
646: 1:      'question': '4',
646: 1:      'valid': true
646: 1:    },
646: 1:    {
646: 1:      'answer': '[5]',
646: 1:      'question': '5',
646: 1:      'valid': true
646: 1:    },
646: 1:    {
646: 1:      'answer': '[2,3]',
646: 1:      'question': '6',
646: 1:      'valid': true
646: 1:    },
646: 1:    {
646: 1:      'answer': '[7]',
646: 1:      'question': '7',
646: 1:      'valid': true
646: 1:    }
646: 1:  ],
646: 1:  'info': [
646: 1:    '✅f(1) = [1]',
646: 1:    '✅f(2) = [2]',
646: 1:    '✅f(3) = [3]',
646: 1:    '✅f(4) = [2,2]',
646: 1:    '✅f(5) = [5]',
646: 1:    '✅f(6) = [2,3]',
646: 1:    '✅f(7) = [7]',
646: 1:    '❌f(8) = ??? != [2,2,2]'
646: 1:  ],
646: 1:  'level': 24,
646: 1:  'nextQuestion': '8',
646: 1:  'questions': [
646: 1:    '1',
646: 1:    '2',
646: 1:    '3',
646: 1:    '4',
646: 1:    '5',
646: 1:    '6',
646: 1:    '7',
646: 1:    '8'
646: 1:  ]
646: 1:}
646: 1:Scores: 56186
646: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]']')
646: 1:Fire Event: PassTest{complexity=35, testCount=25}
------------------------------------------
647: 1:BoardData {
647: 1:  'description': ['Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...'],
647: 1:  'expectedAnswer': '[3,3]',
647: 1:  'history': [
647: 1:    {
647: 1:      'answer': '[1]',
647: 1:      'question': '1',
647: 1:      'valid': true
647: 1:    },
647: 1:    {
647: 1:      'answer': '[2]',
647: 1:      'question': '2',
647: 1:      'valid': true
647: 1:    },
647: 1:    {
647: 1:      'answer': '[3]',
647: 1:      'question': '3',
647: 1:      'valid': true
647: 1:    },
647: 1:    {
647: 1:      'answer': '[2,2]',
647: 1:      'question': '4',
647: 1:      'valid': true
647: 1:    },
647: 1:    {
647: 1:      'answer': '[5]',
647: 1:      'question': '5',
647: 1:      'valid': true
647: 1:    },
647: 1:    {
647: 1:      'answer': '[2,3]',
647: 1:      'question': '6',
647: 1:      'valid': true
647: 1:    },
647: 1:    {
647: 1:      'answer': '[7]',
647: 1:      'question': '7',
647: 1:      'valid': true
647: 1:    },
647: 1:    {
647: 1:      'answer': '[2,2,2]',
647: 1:      'question': '8',
647: 1:      'valid': true
647: 1:    }
647: 1:  ],
647: 1:  'info': [
647: 1:    '✅f(1) = [1]',
647: 1:    '✅f(2) = [2]',
647: 1:    '✅f(3) = [3]',
647: 1:    '✅f(4) = [2,2]',
647: 1:    '✅f(5) = [5]',
647: 1:    '✅f(6) = [2,3]',
647: 1:    '✅f(7) = [7]',
647: 1:    '✅f(8) = [2,2,2]',
647: 1:    '❌f(9) = ??? != [3,3]'
647: 1:  ],
647: 1:  'level': 24,
647: 1:  'nextQuestion': '9',
647: 1:  'questions': [
647: 1:    '1',
647: 1:    '2',
647: 1:    '3',
647: 1:    '4',
647: 1:    '5',
647: 1:    '6',
647: 1:    '7',
647: 1:    '8',
647: 1:    '9'
647: 1:  ]
647: 1:}
647: 1:Scores: 56200
647: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]']')
647: 1:Fire Event: PassTest{complexity=35, testCount=25}
------------------------------------------
648: 1:BoardData {
648: 1:  'description': ['Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...'],
648: 1:  'expectedAnswer': '[2,5]',
648: 1:  'history': [
648: 1:    {
648: 1:      'answer': '[1]',
648: 1:      'question': '1',
648: 1:      'valid': true
648: 1:    },
648: 1:    {
648: 1:      'answer': '[2]',
648: 1:      'question': '2',
648: 1:      'valid': true
648: 1:    },
648: 1:    {
648: 1:      'answer': '[3]',
648: 1:      'question': '3',
648: 1:      'valid': true
648: 1:    },
648: 1:    {
648: 1:      'answer': '[2,2]',
648: 1:      'question': '4',
648: 1:      'valid': true
648: 1:    },
648: 1:    {
648: 1:      'answer': '[5]',
648: 1:      'question': '5',
648: 1:      'valid': true
648: 1:    },
648: 1:    {
648: 1:      'answer': '[2,3]',
648: 1:      'question': '6',
648: 1:      'valid': true
648: 1:    },
648: 1:    {
648: 1:      'answer': '[7]',
648: 1:      'question': '7',
648: 1:      'valid': true
648: 1:    },
648: 1:    {
648: 1:      'answer': '[2,2,2]',
648: 1:      'question': '8',
648: 1:      'valid': true
648: 1:    },
648: 1:    {
648: 1:      'answer': '[3,3]',
648: 1:      'question': '9',
648: 1:      'valid': true
648: 1:    }
648: 1:  ],
648: 1:  'info': [
648: 1:    '✅f(1) = [1]',
648: 1:    '✅f(2) = [2]',
648: 1:    '✅f(3) = [3]',
648: 1:    '✅f(4) = [2,2]',
648: 1:    '✅f(5) = [5]',
648: 1:    '✅f(6) = [2,3]',
648: 1:    '✅f(7) = [7]',
648: 1:    '✅f(8) = [2,2,2]',
648: 1:    '✅f(9) = [3,3]',
648: 1:    '❌f(10) = ??? != [2,5]'
648: 1:  ],
648: 1:  'level': 24,
648: 1:  'nextQuestion': '10',
648: 1:  'questions': [
648: 1:    '1',
648: 1:    '2',
648: 1:    '3',
648: 1:    '4',
648: 1:    '5',
648: 1:    '6',
648: 1:    '7',
648: 1:    '8',
648: 1:    '9',
648: 1:    '10'
648: 1:  ]
648: 1:}
648: 1:Scores: 56214
648: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]']')
648: 1:Fire Event: PassTest{complexity=35, testCount=25}
------------------------------------------
649: 1:BoardData {
649: 1:  'description': ['Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...'],
649: 1:  'expectedAnswer': '[11]',
649: 1:  'history': [
649: 1:    {
649: 1:      'answer': '[1]',
649: 1:      'question': '1',
649: 1:      'valid': true
649: 1:    },
649: 1:    {
649: 1:      'answer': '[2]',
649: 1:      'question': '2',
649: 1:      'valid': true
649: 1:    },
649: 1:    {
649: 1:      'answer': '[3]',
649: 1:      'question': '3',
649: 1:      'valid': true
649: 1:    },
649: 1:    {
649: 1:      'answer': '[2,2]',
649: 1:      'question': '4',
649: 1:      'valid': true
649: 1:    },
649: 1:    {
649: 1:      'answer': '[5]',
649: 1:      'question': '5',
649: 1:      'valid': true
649: 1:    },
649: 1:    {
649: 1:      'answer': '[2,3]',
649: 1:      'question': '6',
649: 1:      'valid': true
649: 1:    },
649: 1:    {
649: 1:      'answer': '[7]',
649: 1:      'question': '7',
649: 1:      'valid': true
649: 1:    },
649: 1:    {
649: 1:      'answer': '[2,2,2]',
649: 1:      'question': '8',
649: 1:      'valid': true
649: 1:    },
649: 1:    {
649: 1:      'answer': '[3,3]',
649: 1:      'question': '9',
649: 1:      'valid': true
649: 1:    },
649: 1:    {
649: 1:      'answer': '[2,5]',
649: 1:      'question': '10',
649: 1:      'valid': true
649: 1:    }
649: 1:  ],
649: 1:  'info': [
649: 1:    '✅f(1) = [1]',
649: 1:    '✅f(2) = [2]',
649: 1:    '✅f(3) = [3]',
649: 1:    '✅f(4) = [2,2]',
649: 1:    '✅f(5) = [5]',
649: 1:    '✅f(6) = [2,3]',
649: 1:    '✅f(7) = [7]',
649: 1:    '✅f(8) = [2,2,2]',
649: 1:    '✅f(9) = [3,3]',
649: 1:    '✅f(10) = [2,5]',
649: 1:    '❌f(11) = ??? != [11]'
649: 1:  ],
649: 1:  'level': 24,
649: 1:  'nextQuestion': '11',
649: 1:  'questions': [
649: 1:    '1',
649: 1:    '2',
649: 1:    '3',
649: 1:    '4',
649: 1:    '5',
649: 1:    '6',
649: 1:    '7',
649: 1:    '8',
649: 1:    '9',
649: 1:    '10',
649: 1:    '11'
649: 1:  ]
649: 1:}
649: 1:Scores: 56228
649: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]']')
649: 1:Fire Event: PassTest{complexity=35, testCount=25}
------------------------------------------
650: 1:BoardData {
650: 1:  'description': ['Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...'],
650: 1:  'expectedAnswer': '[2,2,3]',
650: 1:  'history': [
650: 1:    {
650: 1:      'answer': '[1]',
650: 1:      'question': '1',
650: 1:      'valid': true
650: 1:    },
650: 1:    {
650: 1:      'answer': '[2]',
650: 1:      'question': '2',
650: 1:      'valid': true
650: 1:    },
650: 1:    {
650: 1:      'answer': '[3]',
650: 1:      'question': '3',
650: 1:      'valid': true
650: 1:    },
650: 1:    {
650: 1:      'answer': '[2,2]',
650: 1:      'question': '4',
650: 1:      'valid': true
650: 1:    },
650: 1:    {
650: 1:      'answer': '[5]',
650: 1:      'question': '5',
650: 1:      'valid': true
650: 1:    },
650: 1:    {
650: 1:      'answer': '[2,3]',
650: 1:      'question': '6',
650: 1:      'valid': true
650: 1:    },
650: 1:    {
650: 1:      'answer': '[7]',
650: 1:      'question': '7',
650: 1:      'valid': true
650: 1:    },
650: 1:    {
650: 1:      'answer': '[2,2,2]',
650: 1:      'question': '8',
650: 1:      'valid': true
650: 1:    },
650: 1:    {
650: 1:      'answer': '[3,3]',
650: 1:      'question': '9',
650: 1:      'valid': true
650: 1:    },
650: 1:    {
650: 1:      'answer': '[2,5]',
650: 1:      'question': '10',
650: 1:      'valid': true
650: 1:    },
650: 1:    {
650: 1:      'answer': '[11]',
650: 1:      'question': '11',
650: 1:      'valid': true
650: 1:    }
650: 1:  ],
650: 1:  'info': [
650: 1:    '✅f(1) = [1]',
650: 1:    '✅f(2) = [2]',
650: 1:    '✅f(3) = [3]',
650: 1:    '✅f(4) = [2,2]',
650: 1:    '✅f(5) = [5]',
650: 1:    '✅f(6) = [2,3]',
650: 1:    '✅f(7) = [7]',
650: 1:    '✅f(8) = [2,2,2]',
650: 1:    '✅f(9) = [3,3]',
650: 1:    '✅f(10) = [2,5]',
650: 1:    '✅f(11) = [11]',
650: 1:    '❌f(12) = ??? != [2,2,3]'
650: 1:  ],
650: 1:  'level': 24,
650: 1:  'nextQuestion': '12',
650: 1:  'questions': [
650: 1:    '1',
650: 1:    '2',
650: 1:    '3',
650: 1:    '4',
650: 1:    '5',
650: 1:    '6',
650: 1:    '7',
650: 1:    '8',
650: 1:    '9',
650: 1:    '10',
650: 1:    '11',
650: 1:    '12'
650: 1:  ]
650: 1:}
650: 1:Scores: 56242
650: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]']')
650: 1:Fire Event: PassTest{complexity=35, testCount=25}
------------------------------------------
651: 1:BoardData {
651: 1:  'description': ['Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...'],
651: 1:  'expectedAnswer': '[13]',
651: 1:  'history': [
651: 1:    {
651: 1:      'answer': '[1]',
651: 1:      'question': '1',
651: 1:      'valid': true
651: 1:    },
651: 1:    {
651: 1:      'answer': '[2]',
651: 1:      'question': '2',
651: 1:      'valid': true
651: 1:    },
651: 1:    {
651: 1:      'answer': '[3]',
651: 1:      'question': '3',
651: 1:      'valid': true
651: 1:    },
651: 1:    {
651: 1:      'answer': '[2,2]',
651: 1:      'question': '4',
651: 1:      'valid': true
651: 1:    },
651: 1:    {
651: 1:      'answer': '[5]',
651: 1:      'question': '5',
651: 1:      'valid': true
651: 1:    },
651: 1:    {
651: 1:      'answer': '[2,3]',
651: 1:      'question': '6',
651: 1:      'valid': true
651: 1:    },
651: 1:    {
651: 1:      'answer': '[7]',
651: 1:      'question': '7',
651: 1:      'valid': true
651: 1:    },
651: 1:    {
651: 1:      'answer': '[2,2,2]',
651: 1:      'question': '8',
651: 1:      'valid': true
651: 1:    },
651: 1:    {
651: 1:      'answer': '[3,3]',
651: 1:      'question': '9',
651: 1:      'valid': true
651: 1:    },
651: 1:    {
651: 1:      'answer': '[2,5]',
651: 1:      'question': '10',
651: 1:      'valid': true
651: 1:    },
651: 1:    {
651: 1:      'answer': '[11]',
651: 1:      'question': '11',
651: 1:      'valid': true
651: 1:    },
651: 1:    {
651: 1:      'answer': '[2,2,3]',
651: 1:      'question': '12',
651: 1:      'valid': true
651: 1:    }
651: 1:  ],
651: 1:  'info': [
651: 1:    '✅f(1) = [1]',
651: 1:    '✅f(2) = [2]',
651: 1:    '✅f(3) = [3]',
651: 1:    '✅f(4) = [2,2]',
651: 1:    '✅f(5) = [5]',
651: 1:    '✅f(6) = [2,3]',
651: 1:    '✅f(7) = [7]',
651: 1:    '✅f(8) = [2,2,2]',
651: 1:    '✅f(9) = [3,3]',
651: 1:    '✅f(10) = [2,5]',
651: 1:    '✅f(11) = [11]',
651: 1:    '✅f(12) = [2,2,3]',
651: 1:    '❌f(13) = ??? != [13]'
651: 1:  ],
651: 1:  'level': 24,
651: 1:  'nextQuestion': '13',
651: 1:  'questions': [
651: 1:    '1',
651: 1:    '2',
651: 1:    '3',
651: 1:    '4',
651: 1:    '5',
651: 1:    '6',
651: 1:    '7',
651: 1:    '8',
651: 1:    '9',
651: 1:    '10',
651: 1:    '11',
651: 1:    '12',
651: 1:    '13'
651: 1:  ]
651: 1:}
651: 1:Scores: 56256
651: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]']')
651: 1:Fire Event: PassTest{complexity=35, testCount=25}
------------------------------------------
652: 1:BoardData {
652: 1:  'description': ['Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...'],
652: 1:  'expectedAnswer': '[2,7]',
652: 1:  'history': [
652: 1:    {
652: 1:      'answer': '[1]',
652: 1:      'question': '1',
652: 1:      'valid': true
652: 1:    },
652: 1:    {
652: 1:      'answer': '[2]',
652: 1:      'question': '2',
652: 1:      'valid': true
652: 1:    },
652: 1:    {
652: 1:      'answer': '[3]',
652: 1:      'question': '3',
652: 1:      'valid': true
652: 1:    },
652: 1:    {
652: 1:      'answer': '[2,2]',
652: 1:      'question': '4',
652: 1:      'valid': true
652: 1:    },
652: 1:    {
652: 1:      'answer': '[5]',
652: 1:      'question': '5',
652: 1:      'valid': true
652: 1:    },
652: 1:    {
652: 1:      'answer': '[2,3]',
652: 1:      'question': '6',
652: 1:      'valid': true
652: 1:    },
652: 1:    {
652: 1:      'answer': '[7]',
652: 1:      'question': '7',
652: 1:      'valid': true
652: 1:    },
652: 1:    {
652: 1:      'answer': '[2,2,2]',
652: 1:      'question': '8',
652: 1:      'valid': true
652: 1:    },
652: 1:    {
652: 1:      'answer': '[3,3]',
652: 1:      'question': '9',
652: 1:      'valid': true
652: 1:    },
652: 1:    {
652: 1:      'answer': '[2,5]',
652: 1:      'question': '10',
652: 1:      'valid': true
652: 1:    },
652: 1:    {
652: 1:      'answer': '[11]',
652: 1:      'question': '11',
652: 1:      'valid': true
652: 1:    },
652: 1:    {
652: 1:      'answer': '[2,2,3]',
652: 1:      'question': '12',
652: 1:      'valid': true
652: 1:    },
652: 1:    {
652: 1:      'answer': '[13]',
652: 1:      'question': '13',
652: 1:      'valid': true
652: 1:    }
652: 1:  ],
652: 1:  'info': [
652: 1:    '✅f(1) = [1]',
652: 1:    '✅f(2) = [2]',
652: 1:    '✅f(3) = [3]',
652: 1:    '✅f(4) = [2,2]',
652: 1:    '✅f(5) = [5]',
652: 1:    '✅f(6) = [2,3]',
652: 1:    '✅f(7) = [7]',
652: 1:    '✅f(8) = [2,2,2]',
652: 1:    '✅f(9) = [3,3]',
652: 1:    '✅f(10) = [2,5]',
652: 1:    '✅f(11) = [11]',
652: 1:    '✅f(12) = [2,2,3]',
652: 1:    '✅f(13) = [13]',
652: 1:    '❌f(14) = ??? != [2,7]'
652: 1:  ],
652: 1:  'level': 24,
652: 1:  'nextQuestion': '14',
652: 1:  'questions': [
652: 1:    '1',
652: 1:    '2',
652: 1:    '3',
652: 1:    '4',
652: 1:    '5',
652: 1:    '6',
652: 1:    '7',
652: 1:    '8',
652: 1:    '9',
652: 1:    '10',
652: 1:    '11',
652: 1:    '12',
652: 1:    '13',
652: 1:    '14'
652: 1:  ]
652: 1:}
652: 1:Scores: 56270
652: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]']')
652: 1:Fire Event: PassTest{complexity=35, testCount=25}
------------------------------------------
653: 1:BoardData {
653: 1:  'description': ['Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...'],
653: 1:  'expectedAnswer': '[3,5]',
653: 1:  'history': [
653: 1:    {
653: 1:      'answer': '[1]',
653: 1:      'question': '1',
653: 1:      'valid': true
653: 1:    },
653: 1:    {
653: 1:      'answer': '[2]',
653: 1:      'question': '2',
653: 1:      'valid': true
653: 1:    },
653: 1:    {
653: 1:      'answer': '[3]',
653: 1:      'question': '3',
653: 1:      'valid': true
653: 1:    },
653: 1:    {
653: 1:      'answer': '[2,2]',
653: 1:      'question': '4',
653: 1:      'valid': true
653: 1:    },
653: 1:    {
653: 1:      'answer': '[5]',
653: 1:      'question': '5',
653: 1:      'valid': true
653: 1:    },
653: 1:    {
653: 1:      'answer': '[2,3]',
653: 1:      'question': '6',
653: 1:      'valid': true
653: 1:    },
653: 1:    {
653: 1:      'answer': '[7]',
653: 1:      'question': '7',
653: 1:      'valid': true
653: 1:    },
653: 1:    {
653: 1:      'answer': '[2,2,2]',
653: 1:      'question': '8',
653: 1:      'valid': true
653: 1:    },
653: 1:    {
653: 1:      'answer': '[3,3]',
653: 1:      'question': '9',
653: 1:      'valid': true
653: 1:    },
653: 1:    {
653: 1:      'answer': '[2,5]',
653: 1:      'question': '10',
653: 1:      'valid': true
653: 1:    },
653: 1:    {
653: 1:      'answer': '[11]',
653: 1:      'question': '11',
653: 1:      'valid': true
653: 1:    },
653: 1:    {
653: 1:      'answer': '[2,2,3]',
653: 1:      'question': '12',
653: 1:      'valid': true
653: 1:    },
653: 1:    {
653: 1:      'answer': '[13]',
653: 1:      'question': '13',
653: 1:      'valid': true
653: 1:    },
653: 1:    {
653: 1:      'answer': '[2,7]',
653: 1:      'question': '14',
653: 1:      'valid': true
653: 1:    }
653: 1:  ],
653: 1:  'info': [
653: 1:    '✅f(1) = [1]',
653: 1:    '✅f(2) = [2]',
653: 1:    '✅f(3) = [3]',
653: 1:    '✅f(4) = [2,2]',
653: 1:    '✅f(5) = [5]',
653: 1:    '✅f(6) = [2,3]',
653: 1:    '✅f(7) = [7]',
653: 1:    '✅f(8) = [2,2,2]',
653: 1:    '✅f(9) = [3,3]',
653: 1:    '✅f(10) = [2,5]',
653: 1:    '✅f(11) = [11]',
653: 1:    '✅f(12) = [2,2,3]',
653: 1:    '✅f(13) = [13]',
653: 1:    '✅f(14) = [2,7]',
653: 1:    '❌f(15) = ??? != [3,5]'
653: 1:  ],
653: 1:  'level': 24,
653: 1:  'nextQuestion': '15',
653: 1:  'questions': [
653: 1:    '1',
653: 1:    '2',
653: 1:    '3',
653: 1:    '4',
653: 1:    '5',
653: 1:    '6',
653: 1:    '7',
653: 1:    '8',
653: 1:    '9',
653: 1:    '10',
653: 1:    '11',
653: 1:    '12',
653: 1:    '13',
653: 1:    '14',
653: 1:    '15'
653: 1:  ]
653: 1:}
653: 1:Scores: 56284
653: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]']')
653: 1:Fire Event: PassTest{complexity=35, testCount=25}
------------------------------------------
654: 1:BoardData {
654: 1:  'description': ['Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...'],
654: 1:  'expectedAnswer': '[2,2,2,2]',
654: 1:  'history': [
654: 1:    {
654: 1:      'answer': '[1]',
654: 1:      'question': '1',
654: 1:      'valid': true
654: 1:    },
654: 1:    {
654: 1:      'answer': '[2]',
654: 1:      'question': '2',
654: 1:      'valid': true
654: 1:    },
654: 1:    {
654: 1:      'answer': '[3]',
654: 1:      'question': '3',
654: 1:      'valid': true
654: 1:    },
654: 1:    {
654: 1:      'answer': '[2,2]',
654: 1:      'question': '4',
654: 1:      'valid': true
654: 1:    },
654: 1:    {
654: 1:      'answer': '[5]',
654: 1:      'question': '5',
654: 1:      'valid': true
654: 1:    },
654: 1:    {
654: 1:      'answer': '[2,3]',
654: 1:      'question': '6',
654: 1:      'valid': true
654: 1:    },
654: 1:    {
654: 1:      'answer': '[7]',
654: 1:      'question': '7',
654: 1:      'valid': true
654: 1:    },
654: 1:    {
654: 1:      'answer': '[2,2,2]',
654: 1:      'question': '8',
654: 1:      'valid': true
654: 1:    },
654: 1:    {
654: 1:      'answer': '[3,3]',
654: 1:      'question': '9',
654: 1:      'valid': true
654: 1:    },
654: 1:    {
654: 1:      'answer': '[2,5]',
654: 1:      'question': '10',
654: 1:      'valid': true
654: 1:    },
654: 1:    {
654: 1:      'answer': '[11]',
654: 1:      'question': '11',
654: 1:      'valid': true
654: 1:    },
654: 1:    {
654: 1:      'answer': '[2,2,3]',
654: 1:      'question': '12',
654: 1:      'valid': true
654: 1:    },
654: 1:    {
654: 1:      'answer': '[13]',
654: 1:      'question': '13',
654: 1:      'valid': true
654: 1:    },
654: 1:    {
654: 1:      'answer': '[2,7]',
654: 1:      'question': '14',
654: 1:      'valid': true
654: 1:    },
654: 1:    {
654: 1:      'answer': '[3,5]',
654: 1:      'question': '15',
654: 1:      'valid': true
654: 1:    }
654: 1:  ],
654: 1:  'info': [
654: 1:    '✅f(1) = [1]',
654: 1:    '✅f(2) = [2]',
654: 1:    '✅f(3) = [3]',
654: 1:    '✅f(4) = [2,2]',
654: 1:    '✅f(5) = [5]',
654: 1:    '✅f(6) = [2,3]',
654: 1:    '✅f(7) = [7]',
654: 1:    '✅f(8) = [2,2,2]',
654: 1:    '✅f(9) = [3,3]',
654: 1:    '✅f(10) = [2,5]',
654: 1:    '✅f(11) = [11]',
654: 1:    '✅f(12) = [2,2,3]',
654: 1:    '✅f(13) = [13]',
654: 1:    '✅f(14) = [2,7]',
654: 1:    '✅f(15) = [3,5]',
654: 1:    '❌f(16) = ??? != [2,2,2,2]'
654: 1:  ],
654: 1:  'level': 24,
654: 1:  'nextQuestion': '16',
654: 1:  'questions': [
654: 1:    '1',
654: 1:    '2',
654: 1:    '3',
654: 1:    '4',
654: 1:    '5',
654: 1:    '6',
654: 1:    '7',
654: 1:    '8',
654: 1:    '9',
654: 1:    '10',
654: 1:    '11',
654: 1:    '12',
654: 1:    '13',
654: 1:    '14',
654: 1:    '15',
654: 1:    '16'
654: 1:  ]
654: 1:}
654: 1:Scores: 56298
654: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]']')
654: 1:Fire Event: PassTest{complexity=35, testCount=25}
------------------------------------------
655: 1:BoardData {
655: 1:  'description': ['Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...'],
655: 1:  'expectedAnswer': '[17]',
655: 1:  'history': [
655: 1:    {
655: 1:      'answer': '[1]',
655: 1:      'question': '1',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '[2]',
655: 1:      'question': '2',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '[3]',
655: 1:      'question': '3',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '[2,2]',
655: 1:      'question': '4',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '[5]',
655: 1:      'question': '5',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '[2,3]',
655: 1:      'question': '6',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '[7]',
655: 1:      'question': '7',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '[2,2,2]',
655: 1:      'question': '8',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '[3,3]',
655: 1:      'question': '9',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '[2,5]',
655: 1:      'question': '10',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '[11]',
655: 1:      'question': '11',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '[2,2,3]',
655: 1:      'question': '12',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '[13]',
655: 1:      'question': '13',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '[2,7]',
655: 1:      'question': '14',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '[3,5]',
655: 1:      'question': '15',
655: 1:      'valid': true
655: 1:    },
655: 1:    {
655: 1:      'answer': '[2,2,2,2]',
655: 1:      'question': '16',
655: 1:      'valid': true
655: 1:    }
655: 1:  ],
655: 1:  'info': [
655: 1:    '✅f(1) = [1]',
655: 1:    '✅f(2) = [2]',
655: 1:    '✅f(3) = [3]',
655: 1:    '✅f(4) = [2,2]',
655: 1:    '✅f(5) = [5]',
655: 1:    '✅f(6) = [2,3]',
655: 1:    '✅f(7) = [7]',
655: 1:    '✅f(8) = [2,2,2]',
655: 1:    '✅f(9) = [3,3]',
655: 1:    '✅f(10) = [2,5]',
655: 1:    '✅f(11) = [11]',
655: 1:    '✅f(12) = [2,2,3]',
655: 1:    '✅f(13) = [13]',
655: 1:    '✅f(14) = [2,7]',
655: 1:    '✅f(15) = [3,5]',
655: 1:    '✅f(16) = [2,2,2,2]',
655: 1:    '❌f(17) = ??? != [17]'
655: 1:  ],
655: 1:  'level': 24,
655: 1:  'nextQuestion': '17',
655: 1:  'questions': [
655: 1:    '1',
655: 1:    '2',
655: 1:    '3',
655: 1:    '4',
655: 1:    '5',
655: 1:    '6',
655: 1:    '7',
655: 1:    '8',
655: 1:    '9',
655: 1:    '10',
655: 1:    '11',
655: 1:    '12',
655: 1:    '13',
655: 1:    '14',
655: 1:    '15',
655: 1:    '16',
655: 1:    '17'
655: 1:  ]
655: 1:}
655: 1:Scores: 56312
655: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]', '[17]']')
655: 1:Fire Event: PassTest{complexity=35, testCount=25}
------------------------------------------
656: 1:BoardData {
656: 1:  'description': ['Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...'],
656: 1:  'expectedAnswer': '[2,3,3]',
656: 1:  'history': [
656: 1:    {
656: 1:      'answer': '[1]',
656: 1:      'question': '1',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '[2]',
656: 1:      'question': '2',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '[3]',
656: 1:      'question': '3',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '[2,2]',
656: 1:      'question': '4',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '[5]',
656: 1:      'question': '5',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '[2,3]',
656: 1:      'question': '6',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '[7]',
656: 1:      'question': '7',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '[2,2,2]',
656: 1:      'question': '8',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '[3,3]',
656: 1:      'question': '9',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '[2,5]',
656: 1:      'question': '10',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '[11]',
656: 1:      'question': '11',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '[2,2,3]',
656: 1:      'question': '12',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '[13]',
656: 1:      'question': '13',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '[2,7]',
656: 1:      'question': '14',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '[3,5]',
656: 1:      'question': '15',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '[2,2,2,2]',
656: 1:      'question': '16',
656: 1:      'valid': true
656: 1:    },
656: 1:    {
656: 1:      'answer': '[17]',
656: 1:      'question': '17',
656: 1:      'valid': true
656: 1:    }
656: 1:  ],
656: 1:  'info': [
656: 1:    '✅f(1) = [1]',
656: 1:    '✅f(2) = [2]',
656: 1:    '✅f(3) = [3]',
656: 1:    '✅f(4) = [2,2]',
656: 1:    '✅f(5) = [5]',
656: 1:    '✅f(6) = [2,3]',
656: 1:    '✅f(7) = [7]',
656: 1:    '✅f(8) = [2,2,2]',
656: 1:    '✅f(9) = [3,3]',
656: 1:    '✅f(10) = [2,5]',
656: 1:    '✅f(11) = [11]',
656: 1:    '✅f(12) = [2,2,3]',
656: 1:    '✅f(13) = [13]',
656: 1:    '✅f(14) = [2,7]',
656: 1:    '✅f(15) = [3,5]',
656: 1:    '✅f(16) = [2,2,2,2]',
656: 1:    '✅f(17) = [17]',
656: 1:    '❌f(18) = ??? != [2,3,3]'
656: 1:  ],
656: 1:  'level': 24,
656: 1:  'nextQuestion': '18',
656: 1:  'questions': [
656: 1:    '1',
656: 1:    '2',
656: 1:    '3',
656: 1:    '4',
656: 1:    '5',
656: 1:    '6',
656: 1:    '7',
656: 1:    '8',
656: 1:    '9',
656: 1:    '10',
656: 1:    '11',
656: 1:    '12',
656: 1:    '13',
656: 1:    '14',
656: 1:    '15',
656: 1:    '16',
656: 1:    '17',
656: 1:    '18'
656: 1:  ]
656: 1:}
656: 1:Scores: 56326
656: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]', '[17]', '[2,3,3]']')
656: 1:Fire Event: PassTest{complexity=35, testCount=25}
------------------------------------------
657: 1:BoardData {
657: 1:  'description': ['Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...'],
657: 1:  'expectedAnswer': '[19]',
657: 1:  'history': [
657: 1:    {
657: 1:      'answer': '[1]',
657: 1:      'question': '1',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '[2]',
657: 1:      'question': '2',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '[3]',
657: 1:      'question': '3',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '[2,2]',
657: 1:      'question': '4',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '[5]',
657: 1:      'question': '5',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '[2,3]',
657: 1:      'question': '6',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '[7]',
657: 1:      'question': '7',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '[2,2,2]',
657: 1:      'question': '8',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '[3,3]',
657: 1:      'question': '9',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '[2,5]',
657: 1:      'question': '10',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '[11]',
657: 1:      'question': '11',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '[2,2,3]',
657: 1:      'question': '12',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '[13]',
657: 1:      'question': '13',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '[2,7]',
657: 1:      'question': '14',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '[3,5]',
657: 1:      'question': '15',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '[2,2,2,2]',
657: 1:      'question': '16',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '[17]',
657: 1:      'question': '17',
657: 1:      'valid': true
657: 1:    },
657: 1:    {
657: 1:      'answer': '[2,3,3]',
657: 1:      'question': '18',
657: 1:      'valid': true
657: 1:    }
657: 1:  ],
657: 1:  'info': [
657: 1:    '✅f(1) = [1]',
657: 1:    '✅f(2) = [2]',
657: 1:    '✅f(3) = [3]',
657: 1:    '✅f(4) = [2,2]',
657: 1:    '✅f(5) = [5]',
657: 1:    '✅f(6) = [2,3]',
657: 1:    '✅f(7) = [7]',
657: 1:    '✅f(8) = [2,2,2]',
657: 1:    '✅f(9) = [3,3]',
657: 1:    '✅f(10) = [2,5]',
657: 1:    '✅f(11) = [11]',
657: 1:    '✅f(12) = [2,2,3]',
657: 1:    '✅f(13) = [13]',
657: 1:    '✅f(14) = [2,7]',
657: 1:    '✅f(15) = [3,5]',
657: 1:    '✅f(16) = [2,2,2,2]',
657: 1:    '✅f(17) = [17]',
657: 1:    '✅f(18) = [2,3,3]',
657: 1:    '❌f(19) = ??? != [19]'
657: 1:  ],
657: 1:  'level': 24,
657: 1:  'nextQuestion': '19',
657: 1:  'questions': [
657: 1:    '1',
657: 1:    '2',
657: 1:    '3',
657: 1:    '4',
657: 1:    '5',
657: 1:    '6',
657: 1:    '7',
657: 1:    '8',
657: 1:    '9',
657: 1:    '10',
657: 1:    '11',
657: 1:    '12',
657: 1:    '13',
657: 1:    '14',
657: 1:    '15',
657: 1:    '16',
657: 1:    '17',
657: 1:    '18',
657: 1:    '19'
657: 1:  ]
657: 1:}
657: 1:Scores: 56340
657: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]', '[17]', '[2,3,3]', '[19]']')
657: 1:Fire Event: PassTest{complexity=35, testCount=25}
------------------------------------------
658: 1:BoardData {
658: 1:  'description': ['Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...'],
658: 1:  'expectedAnswer': '[2,2,5]',
658: 1:  'history': [
658: 1:    {
658: 1:      'answer': '[1]',
658: 1:      'question': '1',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '[2]',
658: 1:      'question': '2',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '[3]',
658: 1:      'question': '3',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '[2,2]',
658: 1:      'question': '4',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '[5]',
658: 1:      'question': '5',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '[2,3]',
658: 1:      'question': '6',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '[7]',
658: 1:      'question': '7',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '[2,2,2]',
658: 1:      'question': '8',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '[3,3]',
658: 1:      'question': '9',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '[2,5]',
658: 1:      'question': '10',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '[11]',
658: 1:      'question': '11',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '[2,2,3]',
658: 1:      'question': '12',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '[13]',
658: 1:      'question': '13',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '[2,7]',
658: 1:      'question': '14',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '[3,5]',
658: 1:      'question': '15',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '[2,2,2,2]',
658: 1:      'question': '16',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '[17]',
658: 1:      'question': '17',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '[2,3,3]',
658: 1:      'question': '18',
658: 1:      'valid': true
658: 1:    },
658: 1:    {
658: 1:      'answer': '[19]',
658: 1:      'question': '19',
658: 1:      'valid': true
658: 1:    }
658: 1:  ],
658: 1:  'info': [
658: 1:    '✅f(1) = [1]',
658: 1:    '✅f(2) = [2]',
658: 1:    '✅f(3) = [3]',
658: 1:    '✅f(4) = [2,2]',
658: 1:    '✅f(5) = [5]',
658: 1:    '✅f(6) = [2,3]',
658: 1:    '✅f(7) = [7]',
658: 1:    '✅f(8) = [2,2,2]',
658: 1:    '✅f(9) = [3,3]',
658: 1:    '✅f(10) = [2,5]',
658: 1:    '✅f(11) = [11]',
658: 1:    '✅f(12) = [2,2,3]',
658: 1:    '✅f(13) = [13]',
658: 1:    '✅f(14) = [2,7]',
658: 1:    '✅f(15) = [3,5]',
658: 1:    '✅f(16) = [2,2,2,2]',
658: 1:    '✅f(17) = [17]',
658: 1:    '✅f(18) = [2,3,3]',
658: 1:    '✅f(19) = [19]',
658: 1:    '❌f(20) = ??? != [2,2,5]'
658: 1:  ],
658: 1:  'level': 24,
658: 1:  'nextQuestion': '20',
658: 1:  'questions': [
658: 1:    '1',
658: 1:    '2',
658: 1:    '3',
658: 1:    '4',
658: 1:    '5',
658: 1:    '6',
658: 1:    '7',
658: 1:    '8',
658: 1:    '9',
658: 1:    '10',
658: 1:    '11',
658: 1:    '12',
658: 1:    '13',
658: 1:    '14',
658: 1:    '15',
658: 1:    '16',
658: 1:    '17',
658: 1:    '18',
658: 1:    '19',
658: 1:    '20'
658: 1:  ]
658: 1:}
658: 1:Scores: 56354
658: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]', '[17]', '[2,3,3]', '[19]', '[2,2,5]']')
658: 1:Fire Event: PassTest{complexity=35, testCount=25}
------------------------------------------
659: 1:BoardData {
659: 1:  'description': ['Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...'],
659: 1:  'expectedAnswer': '[3,7]',
659: 1:  'history': [
659: 1:    {
659: 1:      'answer': '[1]',
659: 1:      'question': '1',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '[2]',
659: 1:      'question': '2',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '[3]',
659: 1:      'question': '3',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '[2,2]',
659: 1:      'question': '4',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '[5]',
659: 1:      'question': '5',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '[2,3]',
659: 1:      'question': '6',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '[7]',
659: 1:      'question': '7',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '[2,2,2]',
659: 1:      'question': '8',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '[3,3]',
659: 1:      'question': '9',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '[2,5]',
659: 1:      'question': '10',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '[11]',
659: 1:      'question': '11',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '[2,2,3]',
659: 1:      'question': '12',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '[13]',
659: 1:      'question': '13',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '[2,7]',
659: 1:      'question': '14',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '[3,5]',
659: 1:      'question': '15',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '[2,2,2,2]',
659: 1:      'question': '16',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '[17]',
659: 1:      'question': '17',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '[2,3,3]',
659: 1:      'question': '18',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '[19]',
659: 1:      'question': '19',
659: 1:      'valid': true
659: 1:    },
659: 1:    {
659: 1:      'answer': '[2,2,5]',
659: 1:      'question': '20',
659: 1:      'valid': true
659: 1:    }
659: 1:  ],
659: 1:  'info': [
659: 1:    '✅f(1) = [1]',
659: 1:    '✅f(2) = [2]',
659: 1:    '✅f(3) = [3]',
659: 1:    '✅f(4) = [2,2]',
659: 1:    '✅f(5) = [5]',
659: 1:    '✅f(6) = [2,3]',
659: 1:    '✅f(7) = [7]',
659: 1:    '✅f(8) = [2,2,2]',
659: 1:    '✅f(9) = [3,3]',
659: 1:    '✅f(10) = [2,5]',
659: 1:    '✅f(11) = [11]',
659: 1:    '✅f(12) = [2,2,3]',
659: 1:    '✅f(13) = [13]',
659: 1:    '✅f(14) = [2,7]',
659: 1:    '✅f(15) = [3,5]',
659: 1:    '✅f(16) = [2,2,2,2]',
659: 1:    '✅f(17) = [17]',
659: 1:    '✅f(18) = [2,3,3]',
659: 1:    '✅f(19) = [19]',
659: 1:    '✅f(20) = [2,2,5]',
659: 1:    '❌f(21) = ??? != [3,7]'
659: 1:  ],
659: 1:  'level': 24,
659: 1:  'nextQuestion': '21',
659: 1:  'questions': [
659: 1:    '1',
659: 1:    '2',
659: 1:    '3',
659: 1:    '4',
659: 1:    '5',
659: 1:    '6',
659: 1:    '7',
659: 1:    '8',
659: 1:    '9',
659: 1:    '10',
659: 1:    '11',
659: 1:    '12',
659: 1:    '13',
659: 1:    '14',
659: 1:    '15',
659: 1:    '16',
659: 1:    '17',
659: 1:    '18',
659: 1:    '19',
659: 1:    '20',
659: 1:    '21'
659: 1:  ]
659: 1:}
659: 1:Scores: 56368
659: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]', '[17]', '[2,3,3]', '[19]', '[2,2,5]', '[3,7]']')
659: 1:Fire Event: PassTest{complexity=35, testCount=25}
------------------------------------------
660: 1:BoardData {
660: 1:  'description': ['Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...'],
660: 1:  'expectedAnswer': '[2,11]',
660: 1:  'history': [
660: 1:    {
660: 1:      'answer': '[1]',
660: 1:      'question': '1',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '[2]',
660: 1:      'question': '2',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '[3]',
660: 1:      'question': '3',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '[2,2]',
660: 1:      'question': '4',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '[5]',
660: 1:      'question': '5',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '[2,3]',
660: 1:      'question': '6',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '[7]',
660: 1:      'question': '7',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '[2,2,2]',
660: 1:      'question': '8',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '[3,3]',
660: 1:      'question': '9',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '[2,5]',
660: 1:      'question': '10',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '[11]',
660: 1:      'question': '11',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '[2,2,3]',
660: 1:      'question': '12',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '[13]',
660: 1:      'question': '13',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '[2,7]',
660: 1:      'question': '14',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '[3,5]',
660: 1:      'question': '15',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '[2,2,2,2]',
660: 1:      'question': '16',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '[17]',
660: 1:      'question': '17',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '[2,3,3]',
660: 1:      'question': '18',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '[19]',
660: 1:      'question': '19',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '[2,2,5]',
660: 1:      'question': '20',
660: 1:      'valid': true
660: 1:    },
660: 1:    {
660: 1:      'answer': '[3,7]',
660: 1:      'question': '21',
660: 1:      'valid': true
660: 1:    }
660: 1:  ],
660: 1:  'info': [
660: 1:    '✅f(1) = [1]',
660: 1:    '✅f(2) = [2]',
660: 1:    '✅f(3) = [3]',
660: 1:    '✅f(4) = [2,2]',
660: 1:    '✅f(5) = [5]',
660: 1:    '✅f(6) = [2,3]',
660: 1:    '✅f(7) = [7]',
660: 1:    '✅f(8) = [2,2,2]',
660: 1:    '✅f(9) = [3,3]',
660: 1:    '✅f(10) = [2,5]',
660: 1:    '✅f(11) = [11]',
660: 1:    '✅f(12) = [2,2,3]',
660: 1:    '✅f(13) = [13]',
660: 1:    '✅f(14) = [2,7]',
660: 1:    '✅f(15) = [3,5]',
660: 1:    '✅f(16) = [2,2,2,2]',
660: 1:    '✅f(17) = [17]',
660: 1:    '✅f(18) = [2,3,3]',
660: 1:    '✅f(19) = [19]',
660: 1:    '✅f(20) = [2,2,5]',
660: 1:    '✅f(21) = [3,7]',
660: 1:    '❌f(22) = ??? != [2,11]'
660: 1:  ],
660: 1:  'level': 24,
660: 1:  'nextQuestion': '22',
660: 1:  'questions': [
660: 1:    '1',
660: 1:    '2',
660: 1:    '3',
660: 1:    '4',
660: 1:    '5',
660: 1:    '6',
660: 1:    '7',
660: 1:    '8',
660: 1:    '9',
660: 1:    '10',
660: 1:    '11',
660: 1:    '12',
660: 1:    '13',
660: 1:    '14',
660: 1:    '15',
660: 1:    '16',
660: 1:    '17',
660: 1:    '18',
660: 1:    '19',
660: 1:    '20',
660: 1:    '21',
660: 1:    '22'
660: 1:  ]
660: 1:}
660: 1:Scores: 56382
660: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]', '[17]', '[2,3,3]', '[19]', '[2,2,5]', '[3,7]', '[2,11]']')
660: 1:Fire Event: PassTest{complexity=35, testCount=25}
------------------------------------------
661: 1:BoardData {
661: 1:  'description': ['Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...'],
661: 1:  'expectedAnswer': '[23]',
661: 1:  'history': [
661: 1:    {
661: 1:      'answer': '[1]',
661: 1:      'question': '1',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '[2]',
661: 1:      'question': '2',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '[3]',
661: 1:      'question': '3',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '[2,2]',
661: 1:      'question': '4',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '[5]',
661: 1:      'question': '5',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '[2,3]',
661: 1:      'question': '6',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '[7]',
661: 1:      'question': '7',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '[2,2,2]',
661: 1:      'question': '8',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '[3,3]',
661: 1:      'question': '9',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '[2,5]',
661: 1:      'question': '10',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '[11]',
661: 1:      'question': '11',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '[2,2,3]',
661: 1:      'question': '12',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '[13]',
661: 1:      'question': '13',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '[2,7]',
661: 1:      'question': '14',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '[3,5]',
661: 1:      'question': '15',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '[2,2,2,2]',
661: 1:      'question': '16',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '[17]',
661: 1:      'question': '17',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '[2,3,3]',
661: 1:      'question': '18',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '[19]',
661: 1:      'question': '19',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '[2,2,5]',
661: 1:      'question': '20',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '[3,7]',
661: 1:      'question': '21',
661: 1:      'valid': true
661: 1:    },
661: 1:    {
661: 1:      'answer': '[2,11]',
661: 1:      'question': '22',
661: 1:      'valid': true
661: 1:    }
661: 1:  ],
661: 1:  'info': [
661: 1:    '✅f(1) = [1]',
661: 1:    '✅f(2) = [2]',
661: 1:    '✅f(3) = [3]',
661: 1:    '✅f(4) = [2,2]',
661: 1:    '✅f(5) = [5]',
661: 1:    '✅f(6) = [2,3]',
661: 1:    '✅f(7) = [7]',
661: 1:    '✅f(8) = [2,2,2]',
661: 1:    '✅f(9) = [3,3]',
661: 1:    '✅f(10) = [2,5]',
661: 1:    '✅f(11) = [11]',
661: 1:    '✅f(12) = [2,2,3]',
661: 1:    '✅f(13) = [13]',
661: 1:    '✅f(14) = [2,7]',
661: 1:    '✅f(15) = [3,5]',
661: 1:    '✅f(16) = [2,2,2,2]',
661: 1:    '✅f(17) = [17]',
661: 1:    '✅f(18) = [2,3,3]',
661: 1:    '✅f(19) = [19]',
661: 1:    '✅f(20) = [2,2,5]',
661: 1:    '✅f(21) = [3,7]',
661: 1:    '✅f(22) = [2,11]',
661: 1:    '❌f(23) = ??? != [23]'
661: 1:  ],
661: 1:  'level': 24,
661: 1:  'nextQuestion': '23',
661: 1:  'questions': [
661: 1:    '1',
661: 1:    '2',
661: 1:    '3',
661: 1:    '4',
661: 1:    '5',
661: 1:    '6',
661: 1:    '7',
661: 1:    '8',
661: 1:    '9',
661: 1:    '10',
661: 1:    '11',
661: 1:    '12',
661: 1:    '13',
661: 1:    '14',
661: 1:    '15',
661: 1:    '16',
661: 1:    '17',
661: 1:    '18',
661: 1:    '19',
661: 1:    '20',
661: 1:    '21',
661: 1:    '22',
661: 1:    '23'
661: 1:  ]
661: 1:}
661: 1:Scores: 56396
661: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]', '[17]', '[2,3,3]', '[19]', '[2,2,5]', '[3,7]', '[2,11]', '[23]']')
661: 1:Fire Event: PassTest{complexity=35, testCount=25}
------------------------------------------
662: 1:BoardData {
662: 1:  'description': ['Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...'],
662: 1:  'expectedAnswer': '[2,2,2,3]',
662: 1:  'history': [
662: 1:    {
662: 1:      'answer': '[1]',
662: 1:      'question': '1',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '[2]',
662: 1:      'question': '2',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '[3]',
662: 1:      'question': '3',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '[2,2]',
662: 1:      'question': '4',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '[5]',
662: 1:      'question': '5',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '[2,3]',
662: 1:      'question': '6',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '[7]',
662: 1:      'question': '7',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '[2,2,2]',
662: 1:      'question': '8',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '[3,3]',
662: 1:      'question': '9',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '[2,5]',
662: 1:      'question': '10',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '[11]',
662: 1:      'question': '11',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '[2,2,3]',
662: 1:      'question': '12',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '[13]',
662: 1:      'question': '13',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '[2,7]',
662: 1:      'question': '14',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '[3,5]',
662: 1:      'question': '15',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '[2,2,2,2]',
662: 1:      'question': '16',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '[17]',
662: 1:      'question': '17',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '[2,3,3]',
662: 1:      'question': '18',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '[19]',
662: 1:      'question': '19',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '[2,2,5]',
662: 1:      'question': '20',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '[3,7]',
662: 1:      'question': '21',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '[2,11]',
662: 1:      'question': '22',
662: 1:      'valid': true
662: 1:    },
662: 1:    {
662: 1:      'answer': '[23]',
662: 1:      'question': '23',
662: 1:      'valid': true
662: 1:    }
662: 1:  ],
662: 1:  'info': [
662: 1:    '✅f(1) = [1]',
662: 1:    '✅f(2) = [2]',
662: 1:    '✅f(3) = [3]',
662: 1:    '✅f(4) = [2,2]',
662: 1:    '✅f(5) = [5]',
662: 1:    '✅f(6) = [2,3]',
662: 1:    '✅f(7) = [7]',
662: 1:    '✅f(8) = [2,2,2]',
662: 1:    '✅f(9) = [3,3]',
662: 1:    '✅f(10) = [2,5]',
662: 1:    '✅f(11) = [11]',
662: 1:    '✅f(12) = [2,2,3]',
662: 1:    '✅f(13) = [13]',
662: 1:    '✅f(14) = [2,7]',
662: 1:    '✅f(15) = [3,5]',
662: 1:    '✅f(16) = [2,2,2,2]',
662: 1:    '✅f(17) = [17]',
662: 1:    '✅f(18) = [2,3,3]',
662: 1:    '✅f(19) = [19]',
662: 1:    '✅f(20) = [2,2,5]',
662: 1:    '✅f(21) = [3,7]',
662: 1:    '✅f(22) = [2,11]',
662: 1:    '✅f(23) = [23]',
662: 1:    '❌f(24) = ??? != [2,2,2,3]'
662: 1:  ],
662: 1:  'level': 24,
662: 1:  'nextQuestion': '24',
662: 1:  'questions': [
662: 1:    '1',
662: 1:    '2',
662: 1:    '3',
662: 1:    '4',
662: 1:    '5',
662: 1:    '6',
662: 1:    '7',
662: 1:    '8',
662: 1:    '9',
662: 1:    '10',
662: 1:    '11',
662: 1:    '12',
662: 1:    '13',
662: 1:    '14',
662: 1:    '15',
662: 1:    '16',
662: 1:    '17',
662: 1:    '18',
662: 1:    '19',
662: 1:    '20',
662: 1:    '21',
662: 1:    '22',
662: 1:    '23',
662: 1:    '24'
662: 1:  ]
662: 1:}
662: 1:Scores: 56410
662: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]', '[17]', '[2,3,3]', '[19]', '[2,2,5]', '[3,7]', '[2,11]', '[23]', '[2,2,2,3]']')
662: 1:Fire Event: PassTest{complexity=35, testCount=25}
------------------------------------------
663: 1:BoardData {
663: 1:  'description': ['Divide an integer into multiples of prime numbers:\n1 -> [1]\n2 -> [2]\n3 -> [3]\n4 -> [2,2]\n6 -> [2,3]\n9 -> [3,3]\n12 -> [2,2,3]\n15 -> [3,5]\netc...'],
663: 1:  'expectedAnswer': '[5,5]',
663: 1:  'history': [
663: 1:    {
663: 1:      'answer': '[1]',
663: 1:      'question': '1',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '[2]',
663: 1:      'question': '2',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '[3]',
663: 1:      'question': '3',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '[2,2]',
663: 1:      'question': '4',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '[5]',
663: 1:      'question': '5',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '[2,3]',
663: 1:      'question': '6',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '[7]',
663: 1:      'question': '7',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '[2,2,2]',
663: 1:      'question': '8',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '[3,3]',
663: 1:      'question': '9',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '[2,5]',
663: 1:      'question': '10',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '[11]',
663: 1:      'question': '11',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '[2,2,3]',
663: 1:      'question': '12',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '[13]',
663: 1:      'question': '13',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '[2,7]',
663: 1:      'question': '14',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '[3,5]',
663: 1:      'question': '15',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '[2,2,2,2]',
663: 1:      'question': '16',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '[17]',
663: 1:      'question': '17',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '[2,3,3]',
663: 1:      'question': '18',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '[19]',
663: 1:      'question': '19',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '[2,2,5]',
663: 1:      'question': '20',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '[3,7]',
663: 1:      'question': '21',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '[2,11]',
663: 1:      'question': '22',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '[23]',
663: 1:      'question': '23',
663: 1:      'valid': true
663: 1:    },
663: 1:    {
663: 1:      'answer': '[2,2,2,3]',
663: 1:      'question': '24',
663: 1:      'valid': true
663: 1:    }
663: 1:  ],
663: 1:  'info': [
663: 1:    '✅f(1) = [1]',
663: 1:    '✅f(2) = [2]',
663: 1:    '✅f(3) = [3]',
663: 1:    '✅f(4) = [2,2]',
663: 1:    '✅f(5) = [5]',
663: 1:    '✅f(6) = [2,3]',
663: 1:    '✅f(7) = [7]',
663: 1:    '✅f(8) = [2,2,2]',
663: 1:    '✅f(9) = [3,3]',
663: 1:    '✅f(10) = [2,5]',
663: 1:    '✅f(11) = [11]',
663: 1:    '✅f(12) = [2,2,3]',
663: 1:    '✅f(13) = [13]',
663: 1:    '✅f(14) = [2,7]',
663: 1:    '✅f(15) = [3,5]',
663: 1:    '✅f(16) = [2,2,2,2]',
663: 1:    '✅f(17) = [17]',
663: 1:    '✅f(18) = [2,3,3]',
663: 1:    '✅f(19) = [19]',
663: 1:    '✅f(20) = [2,2,5]',
663: 1:    '✅f(21) = [3,7]',
663: 1:    '✅f(22) = [2,11]',
663: 1:    '✅f(23) = [23]',
663: 1:    '✅f(24) = [2,2,2,3]',
663: 1:    '❌f(25) = ??? != [5,5]'
663: 1:  ],
663: 1:  'level': 24,
663: 1:  'nextQuestion': '25',
663: 1:  'questions': [
663: 1:    '1',
663: 1:    '2',
663: 1:    '3',
663: 1:    '4',
663: 1:    '5',
663: 1:    '6',
663: 1:    '7',
663: 1:    '8',
663: 1:    '9',
663: 1:    '10',
663: 1:    '11',
663: 1:    '12',
663: 1:    '13',
663: 1:    '14',
663: 1:    '15',
663: 1:    '16',
663: 1:    '17',
663: 1:    '18',
663: 1:    '19',
663: 1:    '20',
663: 1:    '21',
663: 1:    '22',
663: 1:    '23',
663: 1:    '24',
663: 1:    '25'
663: 1:  ]
663: 1:}
663: 1:Scores: 56424
663: 1:Answer: message('['[1]', '[2]', '[3]', '[2,2]', '[5]', '[2,3]', '[7]', '[2,2,2]', '[3,3]', '[2,5]', '[11]', '[2,2,3]', '[13]', '[2,7]', '[3,5]', '[2,2,2,2]', '[17]', '[2,3,3]', '[19]', '[2,2,5]', '[3,7]', '[2,11]', '[23]', '[2,2,2,3]', '[5,5]']')
663: 1:Fire Event: PassTest{complexity=35, testCount=25}
663: 1:Fire Event: NextAlgorithm{complexity=35, time=0}
------------------------------------------
664: 1:BoardData {
664: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
664: 1:  'history': [
664: 1:    {
664: 1:      'answer': '[1]',
664: 1:      'question': '1',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '[2]',
664: 1:      'question': '2',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '[3]',
664: 1:      'question': '3',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '[2,2]',
664: 1:      'question': '4',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '[5]',
664: 1:      'question': '5',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '[2,3]',
664: 1:      'question': '6',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '[7]',
664: 1:      'question': '7',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '[2,2,2]',
664: 1:      'question': '8',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '[3,3]',
664: 1:      'question': '9',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '[2,5]',
664: 1:      'question': '10',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '[11]',
664: 1:      'question': '11',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '[2,2,3]',
664: 1:      'question': '12',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '[13]',
664: 1:      'question': '13',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '[2,7]',
664: 1:      'question': '14',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '[3,5]',
664: 1:      'question': '15',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '[2,2,2,2]',
664: 1:      'question': '16',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '[17]',
664: 1:      'question': '17',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '[2,3,3]',
664: 1:      'question': '18',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '[19]',
664: 1:      'question': '19',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '[2,2,5]',
664: 1:      'question': '20',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '[3,7]',
664: 1:      'question': '21',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '[2,11]',
664: 1:      'question': '22',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '[23]',
664: 1:      'question': '23',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '[2,2,2,3]',
664: 1:      'question': '24',
664: 1:      'valid': true
664: 1:    },
664: 1:    {
664: 1:      'answer': '[5,5]',
664: 1:      'question': '25',
664: 1:      'valid': true
664: 1:    }
664: 1:  ],
664: 1:  'info': [
664: 1:    '✅f(1) = [1]',
664: 1:    '✅f(2) = [2]',
664: 1:    '✅f(3) = [3]',
664: 1:    '✅f(4) = [2,2]',
664: 1:    '✅f(5) = [5]',
664: 1:    '✅f(6) = [2,3]',
664: 1:    '✅f(7) = [7]',
664: 1:    '✅f(8) = [2,2,2]',
664: 1:    '✅f(9) = [3,3]',
664: 1:    '✅f(10) = [2,5]',
664: 1:    '✅f(11) = [11]',
664: 1:    '✅f(12) = [2,2,3]',
664: 1:    '✅f(13) = [13]',
664: 1:    '✅f(14) = [2,7]',
664: 1:    '✅f(15) = [3,5]',
664: 1:    '✅f(16) = [2,2,2,2]',
664: 1:    '✅f(17) = [17]',
664: 1:    '✅f(18) = [2,3,3]',
664: 1:    '✅f(19) = [19]',
664: 1:    '✅f(20) = [2,2,5]',
664: 1:    '✅f(21) = [3,7]',
664: 1:    '✅f(22) = [2,11]',
664: 1:    '✅f(23) = [23]',
664: 1:    '✅f(24) = [2,2,2,3]',
664: 1:    '✅f(25) = [5,5]'
664: 1:  ],
664: 1:  'level': 24,
664: 1:  'questions': []
664: 1:}
664: 1:Scores: 61162
664: 1:Answer: message('StartNextLevel')
664: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
665: 1:BoardData {
665: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
665: 1:  'expectedAnswer': '2',
665: 1:  'history': [],
665: 1:  'info': ['❌f(1) = ??? != 2'],
665: 1:  'level': 25,
665: 1:  'nextQuestion': '1',
665: 1:  'questions': ['1']
665: 1:}
665: 1:Scores: 61162
665: 1:Answer: message('['2']')
665: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
666: 1:BoardData {
666: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
666: 1:  'expectedAnswer': '4',
666: 1:  'history': [{
666: 1:    'answer': '2',
666: 1:    'question': '1',
666: 1:    'valid': true
666: 1:  }],
666: 1:  'info': [
666: 1:    '✅f(1) = 2',
666: 1:    '❌f(2) = ??? != 4'
666: 1:  ],
666: 1:  'level': 25,
666: 1:  'nextQuestion': '2',
666: 1:  'questions': [
666: 1:    '1',
666: 1:    '2'
666: 1:  ]
666: 1:}
666: 1:Scores: 61176
666: 1:Answer: message('['2', '4']')
666: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
667: 1:BoardData {
667: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
667: 1:  'expectedAnswer': '8',
667: 1:  'history': [
667: 1:    {
667: 1:      'answer': '2',
667: 1:      'question': '1',
667: 1:      'valid': true
667: 1:    },
667: 1:    {
667: 1:      'answer': '4',
667: 1:      'question': '2',
667: 1:      'valid': true
667: 1:    }
667: 1:  ],
667: 1:  'info': [
667: 1:    '✅f(1) = 2',
667: 1:    '✅f(2) = 4',
667: 1:    '❌f(3) = ??? != 8'
667: 1:  ],
667: 1:  'level': 25,
667: 1:  'nextQuestion': '3',
667: 1:  'questions': [
667: 1:    '1',
667: 1:    '2',
667: 1:    '3'
667: 1:  ]
667: 1:}
667: 1:Scores: 61190
667: 1:Answer: message('['2', '4', '8']')
667: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
668: 1:BoardData {
668: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
668: 1:  'expectedAnswer': '7',
668: 1:  'history': [
668: 1:    {
668: 1:      'answer': '2',
668: 1:      'question': '1',
668: 1:      'valid': true
668: 1:    },
668: 1:    {
668: 1:      'answer': '4',
668: 1:      'question': '2',
668: 1:      'valid': true
668: 1:    },
668: 1:    {
668: 1:      'answer': '8',
668: 1:      'question': '3',
668: 1:      'valid': true
668: 1:    }
668: 1:  ],
668: 1:  'info': [
668: 1:    '✅f(1) = 2',
668: 1:    '✅f(2) = 4',
668: 1:    '✅f(3) = 8',
668: 1:    '❌f(4) = ??? != 7'
668: 1:  ],
668: 1:  'level': 25,
668: 1:  'nextQuestion': '4',
668: 1:  'questions': [
668: 1:    '1',
668: 1:    '2',
668: 1:    '3',
668: 1:    '4'
668: 1:  ]
668: 1:}
668: 1:Scores: 61204
668: 1:Answer: message('['2', '4', '8', '7']')
668: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
669: 1:BoardData {
669: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
669: 1:  'expectedAnswer': '5',
669: 1:  'history': [
669: 1:    {
669: 1:      'answer': '2',
669: 1:      'question': '1',
669: 1:      'valid': true
669: 1:    },
669: 1:    {
669: 1:      'answer': '4',
669: 1:      'question': '2',
669: 1:      'valid': true
669: 1:    },
669: 1:    {
669: 1:      'answer': '8',
669: 1:      'question': '3',
669: 1:      'valid': true
669: 1:    },
669: 1:    {
669: 1:      'answer': '7',
669: 1:      'question': '4',
669: 1:      'valid': true
669: 1:    }
669: 1:  ],
669: 1:  'info': [
669: 1:    '✅f(1) = 2',
669: 1:    '✅f(2) = 4',
669: 1:    '✅f(3) = 8',
669: 1:    '✅f(4) = 7',
669: 1:    '❌f(5) = ??? != 5'
669: 1:  ],
669: 1:  'level': 25,
669: 1:  'nextQuestion': '5',
669: 1:  'questions': [
669: 1:    '1',
669: 1:    '2',
669: 1:    '3',
669: 1:    '4',
669: 1:    '5'
669: 1:  ]
669: 1:}
669: 1:Scores: 61218
669: 1:Answer: message('['2', '4', '8', '7', '5']')
669: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
670: 1:BoardData {
670: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
670: 1:  'expectedAnswer': '10',
670: 1:  'history': [
670: 1:    {
670: 1:      'answer': '2',
670: 1:      'question': '1',
670: 1:      'valid': true
670: 1:    },
670: 1:    {
670: 1:      'answer': '4',
670: 1:      'question': '2',
670: 1:      'valid': true
670: 1:    },
670: 1:    {
670: 1:      'answer': '8',
670: 1:      'question': '3',
670: 1:      'valid': true
670: 1:    },
670: 1:    {
670: 1:      'answer': '7',
670: 1:      'question': '4',
670: 1:      'valid': true
670: 1:    },
670: 1:    {
670: 1:      'answer': '5',
670: 1:      'question': '5',
670: 1:      'valid': true
670: 1:    }
670: 1:  ],
670: 1:  'info': [
670: 1:    '✅f(1) = 2',
670: 1:    '✅f(2) = 4',
670: 1:    '✅f(3) = 8',
670: 1:    '✅f(4) = 7',
670: 1:    '✅f(5) = 5',
670: 1:    '❌f(6) = ??? != 10'
670: 1:  ],
670: 1:  'level': 25,
670: 1:  'nextQuestion': '6',
670: 1:  'questions': [
670: 1:    '1',
670: 1:    '2',
670: 1:    '3',
670: 1:    '4',
670: 1:    '5',
670: 1:    '6'
670: 1:  ]
670: 1:}
670: 1:Scores: 61232
670: 1:Answer: message('['2', '4', '8', '7', '5', '10']')
670: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
671: 1:BoardData {
671: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
671: 1:  'expectedAnswer': '11',
671: 1:  'history': [
671: 1:    {
671: 1:      'answer': '2',
671: 1:      'question': '1',
671: 1:      'valid': true
671: 1:    },
671: 1:    {
671: 1:      'answer': '4',
671: 1:      'question': '2',
671: 1:      'valid': true
671: 1:    },
671: 1:    {
671: 1:      'answer': '8',
671: 1:      'question': '3',
671: 1:      'valid': true
671: 1:    },
671: 1:    {
671: 1:      'answer': '7',
671: 1:      'question': '4',
671: 1:      'valid': true
671: 1:    },
671: 1:    {
671: 1:      'answer': '5',
671: 1:      'question': '5',
671: 1:      'valid': true
671: 1:    },
671: 1:    {
671: 1:      'answer': '10',
671: 1:      'question': '6',
671: 1:      'valid': true
671: 1:    }
671: 1:  ],
671: 1:  'info': [
671: 1:    '✅f(1) = 2',
671: 1:    '✅f(2) = 4',
671: 1:    '✅f(3) = 8',
671: 1:    '✅f(4) = 7',
671: 1:    '✅f(5) = 5',
671: 1:    '✅f(6) = 10',
671: 1:    '❌f(7) = ??? != 11'
671: 1:  ],
671: 1:  'level': 25,
671: 1:  'nextQuestion': '7',
671: 1:  'questions': [
671: 1:    '1',
671: 1:    '2',
671: 1:    '3',
671: 1:    '4',
671: 1:    '5',
671: 1:    '6',
671: 1:    '7'
671: 1:  ]
671: 1:}
671: 1:Scores: 61246
671: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11']')
671: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
672: 1:BoardData {
672: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
672: 1:  'expectedAnswer': '13',
672: 1:  'history': [
672: 1:    {
672: 1:      'answer': '2',
672: 1:      'question': '1',
672: 1:      'valid': true
672: 1:    },
672: 1:    {
672: 1:      'answer': '4',
672: 1:      'question': '2',
672: 1:      'valid': true
672: 1:    },
672: 1:    {
672: 1:      'answer': '8',
672: 1:      'question': '3',
672: 1:      'valid': true
672: 1:    },
672: 1:    {
672: 1:      'answer': '7',
672: 1:      'question': '4',
672: 1:      'valid': true
672: 1:    },
672: 1:    {
672: 1:      'answer': '5',
672: 1:      'question': '5',
672: 1:      'valid': true
672: 1:    },
672: 1:    {
672: 1:      'answer': '10',
672: 1:      'question': '6',
672: 1:      'valid': true
672: 1:    },
672: 1:    {
672: 1:      'answer': '11',
672: 1:      'question': '7',
672: 1:      'valid': true
672: 1:    }
672: 1:  ],
672: 1:  'info': [
672: 1:    '✅f(1) = 2',
672: 1:    '✅f(2) = 4',
672: 1:    '✅f(3) = 8',
672: 1:    '✅f(4) = 7',
672: 1:    '✅f(5) = 5',
672: 1:    '✅f(6) = 10',
672: 1:    '✅f(7) = 11',
672: 1:    '❌f(8) = ??? != 13'
672: 1:  ],
672: 1:  'level': 25,
672: 1:  'nextQuestion': '8',
672: 1:  'questions': [
672: 1:    '1',
672: 1:    '2',
672: 1:    '3',
672: 1:    '4',
672: 1:    '5',
672: 1:    '6',
672: 1:    '7',
672: 1:    '8'
672: 1:  ]
672: 1:}
672: 1:Scores: 61260
672: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13']')
672: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
673: 1:BoardData {
673: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
673: 1:  'expectedAnswer': '8',
673: 1:  'history': [
673: 1:    {
673: 1:      'answer': '2',
673: 1:      'question': '1',
673: 1:      'valid': true
673: 1:    },
673: 1:    {
673: 1:      'answer': '4',
673: 1:      'question': '2',
673: 1:      'valid': true
673: 1:    },
673: 1:    {
673: 1:      'answer': '8',
673: 1:      'question': '3',
673: 1:      'valid': true
673: 1:    },
673: 1:    {
673: 1:      'answer': '7',
673: 1:      'question': '4',
673: 1:      'valid': true
673: 1:    },
673: 1:    {
673: 1:      'answer': '5',
673: 1:      'question': '5',
673: 1:      'valid': true
673: 1:    },
673: 1:    {
673: 1:      'answer': '10',
673: 1:      'question': '6',
673: 1:      'valid': true
673: 1:    },
673: 1:    {
673: 1:      'answer': '11',
673: 1:      'question': '7',
673: 1:      'valid': true
673: 1:    },
673: 1:    {
673: 1:      'answer': '13',
673: 1:      'question': '8',
673: 1:      'valid': true
673: 1:    }
673: 1:  ],
673: 1:  'info': [
673: 1:    '✅f(1) = 2',
673: 1:    '✅f(2) = 4',
673: 1:    '✅f(3) = 8',
673: 1:    '✅f(4) = 7',
673: 1:    '✅f(5) = 5',
673: 1:    '✅f(6) = 10',
673: 1:    '✅f(7) = 11',
673: 1:    '✅f(8) = 13',
673: 1:    '❌f(9) = ??? != 8'
673: 1:  ],
673: 1:  'level': 25,
673: 1:  'nextQuestion': '9',
673: 1:  'questions': [
673: 1:    '1',
673: 1:    '2',
673: 1:    '3',
673: 1:    '4',
673: 1:    '5',
673: 1:    '6',
673: 1:    '7',
673: 1:    '8',
673: 1:    '9'
673: 1:  ]
673: 1:}
673: 1:Scores: 61274
673: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8']')
673: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
674: 1:BoardData {
674: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
674: 1:  'expectedAnswer': '7',
674: 1:  'history': [
674: 1:    {
674: 1:      'answer': '2',
674: 1:      'question': '1',
674: 1:      'valid': true
674: 1:    },
674: 1:    {
674: 1:      'answer': '4',
674: 1:      'question': '2',
674: 1:      'valid': true
674: 1:    },
674: 1:    {
674: 1:      'answer': '8',
674: 1:      'question': '3',
674: 1:      'valid': true
674: 1:    },
674: 1:    {
674: 1:      'answer': '7',
674: 1:      'question': '4',
674: 1:      'valid': true
674: 1:    },
674: 1:    {
674: 1:      'answer': '5',
674: 1:      'question': '5',
674: 1:      'valid': true
674: 1:    },
674: 1:    {
674: 1:      'answer': '10',
674: 1:      'question': '6',
674: 1:      'valid': true
674: 1:    },
674: 1:    {
674: 1:      'answer': '11',
674: 1:      'question': '7',
674: 1:      'valid': true
674: 1:    },
674: 1:    {
674: 1:      'answer': '13',
674: 1:      'question': '8',
674: 1:      'valid': true
674: 1:    },
674: 1:    {
674: 1:      'answer': '8',
674: 1:      'question': '9',
674: 1:      'valid': true
674: 1:    }
674: 1:  ],
674: 1:  'info': [
674: 1:    '✅f(1) = 2',
674: 1:    '✅f(2) = 4',
674: 1:    '✅f(3) = 8',
674: 1:    '✅f(4) = 7',
674: 1:    '✅f(5) = 5',
674: 1:    '✅f(6) = 10',
674: 1:    '✅f(7) = 11',
674: 1:    '✅f(8) = 13',
674: 1:    '✅f(9) = 8',
674: 1:    '❌f(10) = ??? != 7'
674: 1:  ],
674: 1:  'level': 25,
674: 1:  'nextQuestion': '10',
674: 1:  'questions': [
674: 1:    '1',
674: 1:    '2',
674: 1:    '3',
674: 1:    '4',
674: 1:    '5',
674: 1:    '6',
674: 1:    '7',
674: 1:    '8',
674: 1:    '9',
674: 1:    '10'
674: 1:  ]
674: 1:}
674: 1:Scores: 61288
674: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7']')
674: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
675: 1:BoardData {
675: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
675: 1:  'expectedAnswer': '14',
675: 1:  'history': [
675: 1:    {
675: 1:      'answer': '2',
675: 1:      'question': '1',
675: 1:      'valid': true
675: 1:    },
675: 1:    {
675: 1:      'answer': '4',
675: 1:      'question': '2',
675: 1:      'valid': true
675: 1:    },
675: 1:    {
675: 1:      'answer': '8',
675: 1:      'question': '3',
675: 1:      'valid': true
675: 1:    },
675: 1:    {
675: 1:      'answer': '7',
675: 1:      'question': '4',
675: 1:      'valid': true
675: 1:    },
675: 1:    {
675: 1:      'answer': '5',
675: 1:      'question': '5',
675: 1:      'valid': true
675: 1:    },
675: 1:    {
675: 1:      'answer': '10',
675: 1:      'question': '6',
675: 1:      'valid': true
675: 1:    },
675: 1:    {
675: 1:      'answer': '11',
675: 1:      'question': '7',
675: 1:      'valid': true
675: 1:    },
675: 1:    {
675: 1:      'answer': '13',
675: 1:      'question': '8',
675: 1:      'valid': true
675: 1:    },
675: 1:    {
675: 1:      'answer': '8',
675: 1:      'question': '9',
675: 1:      'valid': true
675: 1:    },
675: 1:    {
675: 1:      'answer': '7',
675: 1:      'question': '10',
675: 1:      'valid': true
675: 1:    }
675: 1:  ],
675: 1:  'info': [
675: 1:    '✅f(1) = 2',
675: 1:    '✅f(2) = 4',
675: 1:    '✅f(3) = 8',
675: 1:    '✅f(4) = 7',
675: 1:    '✅f(5) = 5',
675: 1:    '✅f(6) = 10',
675: 1:    '✅f(7) = 11',
675: 1:    '✅f(8) = 13',
675: 1:    '✅f(9) = 8',
675: 1:    '✅f(10) = 7',
675: 1:    '❌f(11) = ??? != 14'
675: 1:  ],
675: 1:  'level': 25,
675: 1:  'nextQuestion': '11',
675: 1:  'questions': [
675: 1:    '1',
675: 1:    '2',
675: 1:    '3',
675: 1:    '4',
675: 1:    '5',
675: 1:    '6',
675: 1:    '7',
675: 1:    '8',
675: 1:    '9',
675: 1:    '10',
675: 1:    '11'
675: 1:  ]
675: 1:}
675: 1:Scores: 61302
675: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14']')
675: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
676: 1:BoardData {
676: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
676: 1:  'expectedAnswer': '19',
676: 1:  'history': [
676: 1:    {
676: 1:      'answer': '2',
676: 1:      'question': '1',
676: 1:      'valid': true
676: 1:    },
676: 1:    {
676: 1:      'answer': '4',
676: 1:      'question': '2',
676: 1:      'valid': true
676: 1:    },
676: 1:    {
676: 1:      'answer': '8',
676: 1:      'question': '3',
676: 1:      'valid': true
676: 1:    },
676: 1:    {
676: 1:      'answer': '7',
676: 1:      'question': '4',
676: 1:      'valid': true
676: 1:    },
676: 1:    {
676: 1:      'answer': '5',
676: 1:      'question': '5',
676: 1:      'valid': true
676: 1:    },
676: 1:    {
676: 1:      'answer': '10',
676: 1:      'question': '6',
676: 1:      'valid': true
676: 1:    },
676: 1:    {
676: 1:      'answer': '11',
676: 1:      'question': '7',
676: 1:      'valid': true
676: 1:    },
676: 1:    {
676: 1:      'answer': '13',
676: 1:      'question': '8',
676: 1:      'valid': true
676: 1:    },
676: 1:    {
676: 1:      'answer': '8',
676: 1:      'question': '9',
676: 1:      'valid': true
676: 1:    },
676: 1:    {
676: 1:      'answer': '7',
676: 1:      'question': '10',
676: 1:      'valid': true
676: 1:    },
676: 1:    {
676: 1:      'answer': '14',
676: 1:      'question': '11',
676: 1:      'valid': true
676: 1:    }
676: 1:  ],
676: 1:  'info': [
676: 1:    '✅f(1) = 2',
676: 1:    '✅f(2) = 4',
676: 1:    '✅f(3) = 8',
676: 1:    '✅f(4) = 7',
676: 1:    '✅f(5) = 5',
676: 1:    '✅f(6) = 10',
676: 1:    '✅f(7) = 11',
676: 1:    '✅f(8) = 13',
676: 1:    '✅f(9) = 8',
676: 1:    '✅f(10) = 7',
676: 1:    '✅f(11) = 14',
676: 1:    '❌f(12) = ??? != 19'
676: 1:  ],
676: 1:  'level': 25,
676: 1:  'nextQuestion': '12',
676: 1:  'questions': [
676: 1:    '1',
676: 1:    '2',
676: 1:    '3',
676: 1:    '4',
676: 1:    '5',
676: 1:    '6',
676: 1:    '7',
676: 1:    '8',
676: 1:    '9',
676: 1:    '10',
676: 1:    '11',
676: 1:    '12'
676: 1:  ]
676: 1:}
676: 1:Scores: 61316
676: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19']')
676: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
677: 1:BoardData {
677: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
677: 1:  'expectedAnswer': '20',
677: 1:  'history': [
677: 1:    {
677: 1:      'answer': '2',
677: 1:      'question': '1',
677: 1:      'valid': true
677: 1:    },
677: 1:    {
677: 1:      'answer': '4',
677: 1:      'question': '2',
677: 1:      'valid': true
677: 1:    },
677: 1:    {
677: 1:      'answer': '8',
677: 1:      'question': '3',
677: 1:      'valid': true
677: 1:    },
677: 1:    {
677: 1:      'answer': '7',
677: 1:      'question': '4',
677: 1:      'valid': true
677: 1:    },
677: 1:    {
677: 1:      'answer': '5',
677: 1:      'question': '5',
677: 1:      'valid': true
677: 1:    },
677: 1:    {
677: 1:      'answer': '10',
677: 1:      'question': '6',
677: 1:      'valid': true
677: 1:    },
677: 1:    {
677: 1:      'answer': '11',
677: 1:      'question': '7',
677: 1:      'valid': true
677: 1:    },
677: 1:    {
677: 1:      'answer': '13',
677: 1:      'question': '8',
677: 1:      'valid': true
677: 1:    },
677: 1:    {
677: 1:      'answer': '8',
677: 1:      'question': '9',
677: 1:      'valid': true
677: 1:    },
677: 1:    {
677: 1:      'answer': '7',
677: 1:      'question': '10',
677: 1:      'valid': true
677: 1:    },
677: 1:    {
677: 1:      'answer': '14',
677: 1:      'question': '11',
677: 1:      'valid': true
677: 1:    },
677: 1:    {
677: 1:      'answer': '19',
677: 1:      'question': '12',
677: 1:      'valid': true
677: 1:    }
677: 1:  ],
677: 1:  'info': [
677: 1:    '✅f(1) = 2',
677: 1:    '✅f(2) = 4',
677: 1:    '✅f(3) = 8',
677: 1:    '✅f(4) = 7',
677: 1:    '✅f(5) = 5',
677: 1:    '✅f(6) = 10',
677: 1:    '✅f(7) = 11',
677: 1:    '✅f(8) = 13',
677: 1:    '✅f(9) = 8',
677: 1:    '✅f(10) = 7',
677: 1:    '✅f(11) = 14',
677: 1:    '✅f(12) = 19',
677: 1:    '❌f(13) = ??? != 20'
677: 1:  ],
677: 1:  'level': 25,
677: 1:  'nextQuestion': '13',
677: 1:  'questions': [
677: 1:    '1',
677: 1:    '2',
677: 1:    '3',
677: 1:    '4',
677: 1:    '5',
677: 1:    '6',
677: 1:    '7',
677: 1:    '8',
677: 1:    '9',
677: 1:    '10',
677: 1:    '11',
677: 1:    '12',
677: 1:    '13'
677: 1:  ]
677: 1:}
677: 1:Scores: 61330
677: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20']')
677: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
678: 1:BoardData {
678: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
678: 1:  'expectedAnswer': '22',
678: 1:  'history': [
678: 1:    {
678: 1:      'answer': '2',
678: 1:      'question': '1',
678: 1:      'valid': true
678: 1:    },
678: 1:    {
678: 1:      'answer': '4',
678: 1:      'question': '2',
678: 1:      'valid': true
678: 1:    },
678: 1:    {
678: 1:      'answer': '8',
678: 1:      'question': '3',
678: 1:      'valid': true
678: 1:    },
678: 1:    {
678: 1:      'answer': '7',
678: 1:      'question': '4',
678: 1:      'valid': true
678: 1:    },
678: 1:    {
678: 1:      'answer': '5',
678: 1:      'question': '5',
678: 1:      'valid': true
678: 1:    },
678: 1:    {
678: 1:      'answer': '10',
678: 1:      'question': '6',
678: 1:      'valid': true
678: 1:    },
678: 1:    {
678: 1:      'answer': '11',
678: 1:      'question': '7',
678: 1:      'valid': true
678: 1:    },
678: 1:    {
678: 1:      'answer': '13',
678: 1:      'question': '8',
678: 1:      'valid': true
678: 1:    },
678: 1:    {
678: 1:      'answer': '8',
678: 1:      'question': '9',
678: 1:      'valid': true
678: 1:    },
678: 1:    {
678: 1:      'answer': '7',
678: 1:      'question': '10',
678: 1:      'valid': true
678: 1:    },
678: 1:    {
678: 1:      'answer': '14',
678: 1:      'question': '11',
678: 1:      'valid': true
678: 1:    },
678: 1:    {
678: 1:      'answer': '19',
678: 1:      'question': '12',
678: 1:      'valid': true
678: 1:    },
678: 1:    {
678: 1:      'answer': '20',
678: 1:      'question': '13',
678: 1:      'valid': true
678: 1:    }
678: 1:  ],
678: 1:  'info': [
678: 1:    '✅f(1) = 2',
678: 1:    '✅f(2) = 4',
678: 1:    '✅f(3) = 8',
678: 1:    '✅f(4) = 7',
678: 1:    '✅f(5) = 5',
678: 1:    '✅f(6) = 10',
678: 1:    '✅f(7) = 11',
678: 1:    '✅f(8) = 13',
678: 1:    '✅f(9) = 8',
678: 1:    '✅f(10) = 7',
678: 1:    '✅f(11) = 14',
678: 1:    '✅f(12) = 19',
678: 1:    '✅f(13) = 20',
678: 1:    '❌f(14) = ??? != 22'
678: 1:  ],
678: 1:  'level': 25,
678: 1:  'nextQuestion': '14',
678: 1:  'questions': [
678: 1:    '1',
678: 1:    '2',
678: 1:    '3',
678: 1:    '4',
678: 1:    '5',
678: 1:    '6',
678: 1:    '7',
678: 1:    '8',
678: 1:    '9',
678: 1:    '10',
678: 1:    '11',
678: 1:    '12',
678: 1:    '13',
678: 1:    '14'
678: 1:  ]
678: 1:}
678: 1:Scores: 61344
678: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22']')
678: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
679: 1:BoardData {
679: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
679: 1:  'expectedAnswer': '26',
679: 1:  'history': [
679: 1:    {
679: 1:      'answer': '2',
679: 1:      'question': '1',
679: 1:      'valid': true
679: 1:    },
679: 1:    {
679: 1:      'answer': '4',
679: 1:      'question': '2',
679: 1:      'valid': true
679: 1:    },
679: 1:    {
679: 1:      'answer': '8',
679: 1:      'question': '3',
679: 1:      'valid': true
679: 1:    },
679: 1:    {
679: 1:      'answer': '7',
679: 1:      'question': '4',
679: 1:      'valid': true
679: 1:    },
679: 1:    {
679: 1:      'answer': '5',
679: 1:      'question': '5',
679: 1:      'valid': true
679: 1:    },
679: 1:    {
679: 1:      'answer': '10',
679: 1:      'question': '6',
679: 1:      'valid': true
679: 1:    },
679: 1:    {
679: 1:      'answer': '11',
679: 1:      'question': '7',
679: 1:      'valid': true
679: 1:    },
679: 1:    {
679: 1:      'answer': '13',
679: 1:      'question': '8',
679: 1:      'valid': true
679: 1:    },
679: 1:    {
679: 1:      'answer': '8',
679: 1:      'question': '9',
679: 1:      'valid': true
679: 1:    },
679: 1:    {
679: 1:      'answer': '7',
679: 1:      'question': '10',
679: 1:      'valid': true
679: 1:    },
679: 1:    {
679: 1:      'answer': '14',
679: 1:      'question': '11',
679: 1:      'valid': true
679: 1:    },
679: 1:    {
679: 1:      'answer': '19',
679: 1:      'question': '12',
679: 1:      'valid': true
679: 1:    },
679: 1:    {
679: 1:      'answer': '20',
679: 1:      'question': '13',
679: 1:      'valid': true
679: 1:    },
679: 1:    {
679: 1:      'answer': '22',
679: 1:      'question': '14',
679: 1:      'valid': true
679: 1:    }
679: 1:  ],
679: 1:  'info': [
679: 1:    '✅f(1) = 2',
679: 1:    '✅f(2) = 4',
679: 1:    '✅f(3) = 8',
679: 1:    '✅f(4) = 7',
679: 1:    '✅f(5) = 5',
679: 1:    '✅f(6) = 10',
679: 1:    '✅f(7) = 11',
679: 1:    '✅f(8) = 13',
679: 1:    '✅f(9) = 8',
679: 1:    '✅f(10) = 7',
679: 1:    '✅f(11) = 14',
679: 1:    '✅f(12) = 19',
679: 1:    '✅f(13) = 20',
679: 1:    '✅f(14) = 22',
679: 1:    '❌f(15) = ??? != 26'
679: 1:  ],
679: 1:  'level': 25,
679: 1:  'nextQuestion': '15',
679: 1:  'questions': [
679: 1:    '1',
679: 1:    '2',
679: 1:    '3',
679: 1:    '4',
679: 1:    '5',
679: 1:    '6',
679: 1:    '7',
679: 1:    '8',
679: 1:    '9',
679: 1:    '10',
679: 1:    '11',
679: 1:    '12',
679: 1:    '13',
679: 1:    '14',
679: 1:    '15'
679: 1:  ]
679: 1:}
679: 1:Scores: 61358
679: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26']')
679: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
680: 1:BoardData {
680: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
680: 1:  'expectedAnswer': '25',
680: 1:  'history': [
680: 1:    {
680: 1:      'answer': '2',
680: 1:      'question': '1',
680: 1:      'valid': true
680: 1:    },
680: 1:    {
680: 1:      'answer': '4',
680: 1:      'question': '2',
680: 1:      'valid': true
680: 1:    },
680: 1:    {
680: 1:      'answer': '8',
680: 1:      'question': '3',
680: 1:      'valid': true
680: 1:    },
680: 1:    {
680: 1:      'answer': '7',
680: 1:      'question': '4',
680: 1:      'valid': true
680: 1:    },
680: 1:    {
680: 1:      'answer': '5',
680: 1:      'question': '5',
680: 1:      'valid': true
680: 1:    },
680: 1:    {
680: 1:      'answer': '10',
680: 1:      'question': '6',
680: 1:      'valid': true
680: 1:    },
680: 1:    {
680: 1:      'answer': '11',
680: 1:      'question': '7',
680: 1:      'valid': true
680: 1:    },
680: 1:    {
680: 1:      'answer': '13',
680: 1:      'question': '8',
680: 1:      'valid': true
680: 1:    },
680: 1:    {
680: 1:      'answer': '8',
680: 1:      'question': '9',
680: 1:      'valid': true
680: 1:    },
680: 1:    {
680: 1:      'answer': '7',
680: 1:      'question': '10',
680: 1:      'valid': true
680: 1:    },
680: 1:    {
680: 1:      'answer': '14',
680: 1:      'question': '11',
680: 1:      'valid': true
680: 1:    },
680: 1:    {
680: 1:      'answer': '19',
680: 1:      'question': '12',
680: 1:      'valid': true
680: 1:    },
680: 1:    {
680: 1:      'answer': '20',
680: 1:      'question': '13',
680: 1:      'valid': true
680: 1:    },
680: 1:    {
680: 1:      'answer': '22',
680: 1:      'question': '14',
680: 1:      'valid': true
680: 1:    },
680: 1:    {
680: 1:      'answer': '26',
680: 1:      'question': '15',
680: 1:      'valid': true
680: 1:    }
680: 1:  ],
680: 1:  'info': [
680: 1:    '✅f(1) = 2',
680: 1:    '✅f(2) = 4',
680: 1:    '✅f(3) = 8',
680: 1:    '✅f(4) = 7',
680: 1:    '✅f(5) = 5',
680: 1:    '✅f(6) = 10',
680: 1:    '✅f(7) = 11',
680: 1:    '✅f(8) = 13',
680: 1:    '✅f(9) = 8',
680: 1:    '✅f(10) = 7',
680: 1:    '✅f(11) = 14',
680: 1:    '✅f(12) = 19',
680: 1:    '✅f(13) = 20',
680: 1:    '✅f(14) = 22',
680: 1:    '✅f(15) = 26',
680: 1:    '❌f(16) = ??? != 25'
680: 1:  ],
680: 1:  'level': 25,
680: 1:  'nextQuestion': '16',
680: 1:  'questions': [
680: 1:    '1',
680: 1:    '2',
680: 1:    '3',
680: 1:    '4',
680: 1:    '5',
680: 1:    '6',
680: 1:    '7',
680: 1:    '8',
680: 1:    '9',
680: 1:    '10',
680: 1:    '11',
680: 1:    '12',
680: 1:    '13',
680: 1:    '14',
680: 1:    '15',
680: 1:    '16'
680: 1:  ]
680: 1:}
680: 1:Scores: 61372
680: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25']')
680: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
681: 1:BoardData {
681: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
681: 1:  'expectedAnswer': '14',
681: 1:  'history': [
681: 1:    {
681: 1:      'answer': '2',
681: 1:      'question': '1',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '4',
681: 1:      'question': '2',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '8',
681: 1:      'question': '3',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '7',
681: 1:      'question': '4',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '5',
681: 1:      'question': '5',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '10',
681: 1:      'question': '6',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '11',
681: 1:      'question': '7',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '13',
681: 1:      'question': '8',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '8',
681: 1:      'question': '9',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '7',
681: 1:      'question': '10',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '14',
681: 1:      'question': '11',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '19',
681: 1:      'question': '12',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '20',
681: 1:      'question': '13',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '22',
681: 1:      'question': '14',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '26',
681: 1:      'question': '15',
681: 1:      'valid': true
681: 1:    },
681: 1:    {
681: 1:      'answer': '25',
681: 1:      'question': '16',
681: 1:      'valid': true
681: 1:    }
681: 1:  ],
681: 1:  'info': [
681: 1:    '✅f(1) = 2',
681: 1:    '✅f(2) = 4',
681: 1:    '✅f(3) = 8',
681: 1:    '✅f(4) = 7',
681: 1:    '✅f(5) = 5',
681: 1:    '✅f(6) = 10',
681: 1:    '✅f(7) = 11',
681: 1:    '✅f(8) = 13',
681: 1:    '✅f(9) = 8',
681: 1:    '✅f(10) = 7',
681: 1:    '✅f(11) = 14',
681: 1:    '✅f(12) = 19',
681: 1:    '✅f(13) = 20',
681: 1:    '✅f(14) = 22',
681: 1:    '✅f(15) = 26',
681: 1:    '✅f(16) = 25',
681: 1:    '❌f(17) = ??? != 14'
681: 1:  ],
681: 1:  'level': 25,
681: 1:  'nextQuestion': '17',
681: 1:  'questions': [
681: 1:    '1',
681: 1:    '2',
681: 1:    '3',
681: 1:    '4',
681: 1:    '5',
681: 1:    '6',
681: 1:    '7',
681: 1:    '8',
681: 1:    '9',
681: 1:    '10',
681: 1:    '11',
681: 1:    '12',
681: 1:    '13',
681: 1:    '14',
681: 1:    '15',
681: 1:    '16',
681: 1:    '17'
681: 1:  ]
681: 1:}
681: 1:Scores: 61386
681: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25', '14']')
681: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
682: 1:BoardData {
682: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
682: 1:  'expectedAnswer': '19',
682: 1:  'history': [
682: 1:    {
682: 1:      'answer': '2',
682: 1:      'question': '1',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '4',
682: 1:      'question': '2',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '8',
682: 1:      'question': '3',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '7',
682: 1:      'question': '4',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '5',
682: 1:      'question': '5',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '10',
682: 1:      'question': '6',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '11',
682: 1:      'question': '7',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '13',
682: 1:      'question': '8',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '8',
682: 1:      'question': '9',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '7',
682: 1:      'question': '10',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '14',
682: 1:      'question': '11',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '19',
682: 1:      'question': '12',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '20',
682: 1:      'question': '13',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '22',
682: 1:      'question': '14',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '26',
682: 1:      'question': '15',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '25',
682: 1:      'question': '16',
682: 1:      'valid': true
682: 1:    },
682: 1:    {
682: 1:      'answer': '14',
682: 1:      'question': '17',
682: 1:      'valid': true
682: 1:    }
682: 1:  ],
682: 1:  'info': [
682: 1:    '✅f(1) = 2',
682: 1:    '✅f(2) = 4',
682: 1:    '✅f(3) = 8',
682: 1:    '✅f(4) = 7',
682: 1:    '✅f(5) = 5',
682: 1:    '✅f(6) = 10',
682: 1:    '✅f(7) = 11',
682: 1:    '✅f(8) = 13',
682: 1:    '✅f(9) = 8',
682: 1:    '✅f(10) = 7',
682: 1:    '✅f(11) = 14',
682: 1:    '✅f(12) = 19',
682: 1:    '✅f(13) = 20',
682: 1:    '✅f(14) = 22',
682: 1:    '✅f(15) = 26',
682: 1:    '✅f(16) = 25',
682: 1:    '✅f(17) = 14',
682: 1:    '❌f(18) = ??? != 19'
682: 1:  ],
682: 1:  'level': 25,
682: 1:  'nextQuestion': '18',
682: 1:  'questions': [
682: 1:    '1',
682: 1:    '2',
682: 1:    '3',
682: 1:    '4',
682: 1:    '5',
682: 1:    '6',
682: 1:    '7',
682: 1:    '8',
682: 1:    '9',
682: 1:    '10',
682: 1:    '11',
682: 1:    '12',
682: 1:    '13',
682: 1:    '14',
682: 1:    '15',
682: 1:    '16',
682: 1:    '17',
682: 1:    '18'
682: 1:  ]
682: 1:}
682: 1:Scores: 61400
682: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25', '14', '19']')
682: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
683: 1:BoardData {
683: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
683: 1:  'expectedAnswer': '29',
683: 1:  'history': [
683: 1:    {
683: 1:      'answer': '2',
683: 1:      'question': '1',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '4',
683: 1:      'question': '2',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '8',
683: 1:      'question': '3',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '7',
683: 1:      'question': '4',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '5',
683: 1:      'question': '5',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '10',
683: 1:      'question': '6',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '11',
683: 1:      'question': '7',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '13',
683: 1:      'question': '8',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '8',
683: 1:      'question': '9',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '7',
683: 1:      'question': '10',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '14',
683: 1:      'question': '11',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '19',
683: 1:      'question': '12',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '20',
683: 1:      'question': '13',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '22',
683: 1:      'question': '14',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '26',
683: 1:      'question': '15',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '25',
683: 1:      'question': '16',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '14',
683: 1:      'question': '17',
683: 1:      'valid': true
683: 1:    },
683: 1:    {
683: 1:      'answer': '19',
683: 1:      'question': '18',
683: 1:      'valid': true
683: 1:    }
683: 1:  ],
683: 1:  'info': [
683: 1:    '✅f(1) = 2',
683: 1:    '✅f(2) = 4',
683: 1:    '✅f(3) = 8',
683: 1:    '✅f(4) = 7',
683: 1:    '✅f(5) = 5',
683: 1:    '✅f(6) = 10',
683: 1:    '✅f(7) = 11',
683: 1:    '✅f(8) = 13',
683: 1:    '✅f(9) = 8',
683: 1:    '✅f(10) = 7',
683: 1:    '✅f(11) = 14',
683: 1:    '✅f(12) = 19',
683: 1:    '✅f(13) = 20',
683: 1:    '✅f(14) = 22',
683: 1:    '✅f(15) = 26',
683: 1:    '✅f(16) = 25',
683: 1:    '✅f(17) = 14',
683: 1:    '✅f(18) = 19',
683: 1:    '❌f(19) = ??? != 29'
683: 1:  ],
683: 1:  'level': 25,
683: 1:  'nextQuestion': '19',
683: 1:  'questions': [
683: 1:    '1',
683: 1:    '2',
683: 1:    '3',
683: 1:    '4',
683: 1:    '5',
683: 1:    '6',
683: 1:    '7',
683: 1:    '8',
683: 1:    '9',
683: 1:    '10',
683: 1:    '11',
683: 1:    '12',
683: 1:    '13',
683: 1:    '14',
683: 1:    '15',
683: 1:    '16',
683: 1:    '17',
683: 1:    '18',
683: 1:    '19'
683: 1:  ]
683: 1:}
683: 1:Scores: 61414
683: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25', '14', '19', '29']')
683: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
684: 1:BoardData {
684: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
684: 1:  'expectedAnswer': '31',
684: 1:  'history': [
684: 1:    {
684: 1:      'answer': '2',
684: 1:      'question': '1',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '4',
684: 1:      'question': '2',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '8',
684: 1:      'question': '3',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '7',
684: 1:      'question': '4',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '5',
684: 1:      'question': '5',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '10',
684: 1:      'question': '6',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '11',
684: 1:      'question': '7',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '13',
684: 1:      'question': '8',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '8',
684: 1:      'question': '9',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '7',
684: 1:      'question': '10',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '14',
684: 1:      'question': '11',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '19',
684: 1:      'question': '12',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '20',
684: 1:      'question': '13',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '22',
684: 1:      'question': '14',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '26',
684: 1:      'question': '15',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '25',
684: 1:      'question': '16',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '14',
684: 1:      'question': '17',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '19',
684: 1:      'question': '18',
684: 1:      'valid': true
684: 1:    },
684: 1:    {
684: 1:      'answer': '29',
684: 1:      'question': '19',
684: 1:      'valid': true
684: 1:    }
684: 1:  ],
684: 1:  'info': [
684: 1:    '✅f(1) = 2',
684: 1:    '✅f(2) = 4',
684: 1:    '✅f(3) = 8',
684: 1:    '✅f(4) = 7',
684: 1:    '✅f(5) = 5',
684: 1:    '✅f(6) = 10',
684: 1:    '✅f(7) = 11',
684: 1:    '✅f(8) = 13',
684: 1:    '✅f(9) = 8',
684: 1:    '✅f(10) = 7',
684: 1:    '✅f(11) = 14',
684: 1:    '✅f(12) = 19',
684: 1:    '✅f(13) = 20',
684: 1:    '✅f(14) = 22',
684: 1:    '✅f(15) = 26',
684: 1:    '✅f(16) = 25',
684: 1:    '✅f(17) = 14',
684: 1:    '✅f(18) = 19',
684: 1:    '✅f(19) = 29',
684: 1:    '❌f(20) = ??? != 31'
684: 1:  ],
684: 1:  'level': 25,
684: 1:  'nextQuestion': '20',
684: 1:  'questions': [
684: 1:    '1',
684: 1:    '2',
684: 1:    '3',
684: 1:    '4',
684: 1:    '5',
684: 1:    '6',
684: 1:    '7',
684: 1:    '8',
684: 1:    '9',
684: 1:    '10',
684: 1:    '11',
684: 1:    '12',
684: 1:    '13',
684: 1:    '14',
684: 1:    '15',
684: 1:    '16',
684: 1:    '17',
684: 1:    '18',
684: 1:    '19',
684: 1:    '20'
684: 1:  ]
684: 1:}
684: 1:Scores: 61428
684: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25', '14', '19', '29', '31']')
684: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
685: 1:BoardData {
685: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
685: 1:  'expectedAnswer': '26',
685: 1:  'history': [
685: 1:    {
685: 1:      'answer': '2',
685: 1:      'question': '1',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '4',
685: 1:      'question': '2',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '8',
685: 1:      'question': '3',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '7',
685: 1:      'question': '4',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '5',
685: 1:      'question': '5',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '10',
685: 1:      'question': '6',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '11',
685: 1:      'question': '7',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '13',
685: 1:      'question': '8',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '8',
685: 1:      'question': '9',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '7',
685: 1:      'question': '10',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '14',
685: 1:      'question': '11',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '19',
685: 1:      'question': '12',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '20',
685: 1:      'question': '13',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '22',
685: 1:      'question': '14',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '26',
685: 1:      'question': '15',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '25',
685: 1:      'question': '16',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '14',
685: 1:      'question': '17',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '19',
685: 1:      'question': '18',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '29',
685: 1:      'question': '19',
685: 1:      'valid': true
685: 1:    },
685: 1:    {
685: 1:      'answer': '31',
685: 1:      'question': '20',
685: 1:      'valid': true
685: 1:    }
685: 1:  ],
685: 1:  'info': [
685: 1:    '✅f(1) = 2',
685: 1:    '✅f(2) = 4',
685: 1:    '✅f(3) = 8',
685: 1:    '✅f(4) = 7',
685: 1:    '✅f(5) = 5',
685: 1:    '✅f(6) = 10',
685: 1:    '✅f(7) = 11',
685: 1:    '✅f(8) = 13',
685: 1:    '✅f(9) = 8',
685: 1:    '✅f(10) = 7',
685: 1:    '✅f(11) = 14',
685: 1:    '✅f(12) = 19',
685: 1:    '✅f(13) = 20',
685: 1:    '✅f(14) = 22',
685: 1:    '✅f(15) = 26',
685: 1:    '✅f(16) = 25',
685: 1:    '✅f(17) = 14',
685: 1:    '✅f(18) = 19',
685: 1:    '✅f(19) = 29',
685: 1:    '✅f(20) = 31',
685: 1:    '❌f(21) = ??? != 26'
685: 1:  ],
685: 1:  'level': 25,
685: 1:  'nextQuestion': '21',
685: 1:  'questions': [
685: 1:    '1',
685: 1:    '2',
685: 1:    '3',
685: 1:    '4',
685: 1:    '5',
685: 1:    '6',
685: 1:    '7',
685: 1:    '8',
685: 1:    '9',
685: 1:    '10',
685: 1:    '11',
685: 1:    '12',
685: 1:    '13',
685: 1:    '14',
685: 1:    '15',
685: 1:    '16',
685: 1:    '17',
685: 1:    '18',
685: 1:    '19',
685: 1:    '20',
685: 1:    '21'
685: 1:  ]
685: 1:}
685: 1:Scores: 61442
685: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25', '14', '19', '29', '31', '26']')
685: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
686: 1:BoardData {
686: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
686: 1:  'expectedAnswer': '25',
686: 1:  'history': [
686: 1:    {
686: 1:      'answer': '2',
686: 1:      'question': '1',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '4',
686: 1:      'question': '2',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '8',
686: 1:      'question': '3',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '7',
686: 1:      'question': '4',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '5',
686: 1:      'question': '5',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '10',
686: 1:      'question': '6',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '11',
686: 1:      'question': '7',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '13',
686: 1:      'question': '8',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '8',
686: 1:      'question': '9',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '7',
686: 1:      'question': '10',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '14',
686: 1:      'question': '11',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '19',
686: 1:      'question': '12',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '20',
686: 1:      'question': '13',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '22',
686: 1:      'question': '14',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '26',
686: 1:      'question': '15',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '25',
686: 1:      'question': '16',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '14',
686: 1:      'question': '17',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '19',
686: 1:      'question': '18',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '29',
686: 1:      'question': '19',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '31',
686: 1:      'question': '20',
686: 1:      'valid': true
686: 1:    },
686: 1:    {
686: 1:      'answer': '26',
686: 1:      'question': '21',
686: 1:      'valid': true
686: 1:    }
686: 1:  ],
686: 1:  'info': [
686: 1:    '✅f(1) = 2',
686: 1:    '✅f(2) = 4',
686: 1:    '✅f(3) = 8',
686: 1:    '✅f(4) = 7',
686: 1:    '✅f(5) = 5',
686: 1:    '✅f(6) = 10',
686: 1:    '✅f(7) = 11',
686: 1:    '✅f(8) = 13',
686: 1:    '✅f(9) = 8',
686: 1:    '✅f(10) = 7',
686: 1:    '✅f(11) = 14',
686: 1:    '✅f(12) = 19',
686: 1:    '✅f(13) = 20',
686: 1:    '✅f(14) = 22',
686: 1:    '✅f(15) = 26',
686: 1:    '✅f(16) = 25',
686: 1:    '✅f(17) = 14',
686: 1:    '✅f(18) = 19',
686: 1:    '✅f(19) = 29',
686: 1:    '✅f(20) = 31',
686: 1:    '✅f(21) = 26',
686: 1:    '❌f(22) = ??? != 25'
686: 1:  ],
686: 1:  'level': 25,
686: 1:  'nextQuestion': '22',
686: 1:  'questions': [
686: 1:    '1',
686: 1:    '2',
686: 1:    '3',
686: 1:    '4',
686: 1:    '5',
686: 1:    '6',
686: 1:    '7',
686: 1:    '8',
686: 1:    '9',
686: 1:    '10',
686: 1:    '11',
686: 1:    '12',
686: 1:    '13',
686: 1:    '14',
686: 1:    '15',
686: 1:    '16',
686: 1:    '17',
686: 1:    '18',
686: 1:    '19',
686: 1:    '20',
686: 1:    '21',
686: 1:    '22'
686: 1:  ]
686: 1:}
686: 1:Scores: 61456
686: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25', '14', '19', '29', '31', '26', '25']')
686: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
687: 1:BoardData {
687: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
687: 1:  'expectedAnswer': '41',
687: 1:  'history': [
687: 1:    {
687: 1:      'answer': '2',
687: 1:      'question': '1',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '4',
687: 1:      'question': '2',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '8',
687: 1:      'question': '3',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '7',
687: 1:      'question': '4',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '5',
687: 1:      'question': '5',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '10',
687: 1:      'question': '6',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '11',
687: 1:      'question': '7',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '13',
687: 1:      'question': '8',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '8',
687: 1:      'question': '9',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '7',
687: 1:      'question': '10',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '14',
687: 1:      'question': '11',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '19',
687: 1:      'question': '12',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '20',
687: 1:      'question': '13',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '22',
687: 1:      'question': '14',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '26',
687: 1:      'question': '15',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '25',
687: 1:      'question': '16',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '14',
687: 1:      'question': '17',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '19',
687: 1:      'question': '18',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '29',
687: 1:      'question': '19',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '31',
687: 1:      'question': '20',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '26',
687: 1:      'question': '21',
687: 1:      'valid': true
687: 1:    },
687: 1:    {
687: 1:      'answer': '25',
687: 1:      'question': '22',
687: 1:      'valid': true
687: 1:    }
687: 1:  ],
687: 1:  'info': [
687: 1:    '✅f(1) = 2',
687: 1:    '✅f(2) = 4',
687: 1:    '✅f(3) = 8',
687: 1:    '✅f(4) = 7',
687: 1:    '✅f(5) = 5',
687: 1:    '✅f(6) = 10',
687: 1:    '✅f(7) = 11',
687: 1:    '✅f(8) = 13',
687: 1:    '✅f(9) = 8',
687: 1:    '✅f(10) = 7',
687: 1:    '✅f(11) = 14',
687: 1:    '✅f(12) = 19',
687: 1:    '✅f(13) = 20',
687: 1:    '✅f(14) = 22',
687: 1:    '✅f(15) = 26',
687: 1:    '✅f(16) = 25',
687: 1:    '✅f(17) = 14',
687: 1:    '✅f(18) = 19',
687: 1:    '✅f(19) = 29',
687: 1:    '✅f(20) = 31',
687: 1:    '✅f(21) = 26',
687: 1:    '✅f(22) = 25',
687: 1:    '❌f(23) = ??? != 41'
687: 1:  ],
687: 1:  'level': 25,
687: 1:  'nextQuestion': '23',
687: 1:  'questions': [
687: 1:    '1',
687: 1:    '2',
687: 1:    '3',
687: 1:    '4',
687: 1:    '5',
687: 1:    '6',
687: 1:    '7',
687: 1:    '8',
687: 1:    '9',
687: 1:    '10',
687: 1:    '11',
687: 1:    '12',
687: 1:    '13',
687: 1:    '14',
687: 1:    '15',
687: 1:    '16',
687: 1:    '17',
687: 1:    '18',
687: 1:    '19',
687: 1:    '20',
687: 1:    '21',
687: 1:    '22',
687: 1:    '23'
687: 1:  ]
687: 1:}
687: 1:Scores: 61470
687: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25', '14', '19', '29', '31', '26', '25', '41']')
687: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
688: 1:BoardData {
688: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
688: 1:  'expectedAnswer': '37',
688: 1:  'history': [
688: 1:    {
688: 1:      'answer': '2',
688: 1:      'question': '1',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '4',
688: 1:      'question': '2',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '8',
688: 1:      'question': '3',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '7',
688: 1:      'question': '4',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '5',
688: 1:      'question': '5',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '10',
688: 1:      'question': '6',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '11',
688: 1:      'question': '7',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '13',
688: 1:      'question': '8',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '8',
688: 1:      'question': '9',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '7',
688: 1:      'question': '10',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '14',
688: 1:      'question': '11',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '19',
688: 1:      'question': '12',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '20',
688: 1:      'question': '13',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '22',
688: 1:      'question': '14',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '26',
688: 1:      'question': '15',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '25',
688: 1:      'question': '16',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '14',
688: 1:      'question': '17',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '19',
688: 1:      'question': '18',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '29',
688: 1:      'question': '19',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '31',
688: 1:      'question': '20',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '26',
688: 1:      'question': '21',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '25',
688: 1:      'question': '22',
688: 1:      'valid': true
688: 1:    },
688: 1:    {
688: 1:      'answer': '41',
688: 1:      'question': '23',
688: 1:      'valid': true
688: 1:    }
688: 1:  ],
688: 1:  'info': [
688: 1:    '✅f(1) = 2',
688: 1:    '✅f(2) = 4',
688: 1:    '✅f(3) = 8',
688: 1:    '✅f(4) = 7',
688: 1:    '✅f(5) = 5',
688: 1:    '✅f(6) = 10',
688: 1:    '✅f(7) = 11',
688: 1:    '✅f(8) = 13',
688: 1:    '✅f(9) = 8',
688: 1:    '✅f(10) = 7',
688: 1:    '✅f(11) = 14',
688: 1:    '✅f(12) = 19',
688: 1:    '✅f(13) = 20',
688: 1:    '✅f(14) = 22',
688: 1:    '✅f(15) = 26',
688: 1:    '✅f(16) = 25',
688: 1:    '✅f(17) = 14',
688: 1:    '✅f(18) = 19',
688: 1:    '✅f(19) = 29',
688: 1:    '✅f(20) = 31',
688: 1:    '✅f(21) = 26',
688: 1:    '✅f(22) = 25',
688: 1:    '✅f(23) = 41',
688: 1:    '❌f(24) = ??? != 37'
688: 1:  ],
688: 1:  'level': 25,
688: 1:  'nextQuestion': '24',
688: 1:  'questions': [
688: 1:    '1',
688: 1:    '2',
688: 1:    '3',
688: 1:    '4',
688: 1:    '5',
688: 1:    '6',
688: 1:    '7',
688: 1:    '8',
688: 1:    '9',
688: 1:    '10',
688: 1:    '11',
688: 1:    '12',
688: 1:    '13',
688: 1:    '14',
688: 1:    '15',
688: 1:    '16',
688: 1:    '17',
688: 1:    '18',
688: 1:    '19',
688: 1:    '20',
688: 1:    '21',
688: 1:    '22',
688: 1:    '23',
688: 1:    '24'
688: 1:  ]
688: 1:}
688: 1:Scores: 61484
688: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25', '14', '19', '29', '31', '26', '25', '41', '37']')
688: 1:Fire Event: PassTest{complexity=36, testCount=25}
------------------------------------------
689: 1:BoardData {
689: 1:  'description': ['2 to the power of 15 = 32768, the sum of digits of the result 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of 2 to the power of i?\nWrite a method for calculation that takes int and returns the result as a String'],
689: 1:  'expectedAnswer': '29',
689: 1:  'history': [
689: 1:    {
689: 1:      'answer': '2',
689: 1:      'question': '1',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '4',
689: 1:      'question': '2',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '8',
689: 1:      'question': '3',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '7',
689: 1:      'question': '4',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '5',
689: 1:      'question': '5',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '10',
689: 1:      'question': '6',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '11',
689: 1:      'question': '7',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '13',
689: 1:      'question': '8',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '8',
689: 1:      'question': '9',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '7',
689: 1:      'question': '10',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '14',
689: 1:      'question': '11',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '19',
689: 1:      'question': '12',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '20',
689: 1:      'question': '13',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '22',
689: 1:      'question': '14',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '26',
689: 1:      'question': '15',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '25',
689: 1:      'question': '16',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '14',
689: 1:      'question': '17',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '19',
689: 1:      'question': '18',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '29',
689: 1:      'question': '19',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '31',
689: 1:      'question': '20',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '26',
689: 1:      'question': '21',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '25',
689: 1:      'question': '22',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '41',
689: 1:      'question': '23',
689: 1:      'valid': true
689: 1:    },
689: 1:    {
689: 1:      'answer': '37',
689: 1:      'question': '24',
689: 1:      'valid': true
689: 1:    }
689: 1:  ],
689: 1:  'info': [
689: 1:    '✅f(1) = 2',
689: 1:    '✅f(2) = 4',
689: 1:    '✅f(3) = 8',
689: 1:    '✅f(4) = 7',
689: 1:    '✅f(5) = 5',
689: 1:    '✅f(6) = 10',
689: 1:    '✅f(7) = 11',
689: 1:    '✅f(8) = 13',
689: 1:    '✅f(9) = 8',
689: 1:    '✅f(10) = 7',
689: 1:    '✅f(11) = 14',
689: 1:    '✅f(12) = 19',
689: 1:    '✅f(13) = 20',
689: 1:    '✅f(14) = 22',
689: 1:    '✅f(15) = 26',
689: 1:    '✅f(16) = 25',
689: 1:    '✅f(17) = 14',
689: 1:    '✅f(18) = 19',
689: 1:    '✅f(19) = 29',
689: 1:    '✅f(20) = 31',
689: 1:    '✅f(21) = 26',
689: 1:    '✅f(22) = 25',
689: 1:    '✅f(23) = 41',
689: 1:    '✅f(24) = 37',
689: 1:    '❌f(25) = ??? != 29'
689: 1:  ],
689: 1:  'level': 25,
689: 1:  'nextQuestion': '25',
689: 1:  'questions': [
689: 1:    '1',
689: 1:    '2',
689: 1:    '3',
689: 1:    '4',
689: 1:    '5',
689: 1:    '6',
689: 1:    '7',
689: 1:    '8',
689: 1:    '9',
689: 1:    '10',
689: 1:    '11',
689: 1:    '12',
689: 1:    '13',
689: 1:    '14',
689: 1:    '15',
689: 1:    '16',
689: 1:    '17',
689: 1:    '18',
689: 1:    '19',
689: 1:    '20',
689: 1:    '21',
689: 1:    '22',
689: 1:    '23',
689: 1:    '24',
689: 1:    '25'
689: 1:  ]
689: 1:}
689: 1:Scores: 61498
689: 1:Answer: message('['2', '4', '8', '7', '5', '10', '11', '13', '8', '7', '14', '19', '20', '22', '26', '25', '14', '19', '29', '31', '26', '25', '41', '37', '29']')
689: 1:Fire Event: PassTest{complexity=36, testCount=25}
689: 1:Fire Event: NextAlgorithm{complexity=36, time=0}
------------------------------------------
690: 1:BoardData {
690: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
690: 1:  'history': [
690: 1:    {
690: 1:      'answer': '2',
690: 1:      'question': '1',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '4',
690: 1:      'question': '2',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '8',
690: 1:      'question': '3',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '7',
690: 1:      'question': '4',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '5',
690: 1:      'question': '5',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '10',
690: 1:      'question': '6',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '11',
690: 1:      'question': '7',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '13',
690: 1:      'question': '8',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '8',
690: 1:      'question': '9',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '7',
690: 1:      'question': '10',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '14',
690: 1:      'question': '11',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '19',
690: 1:      'question': '12',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '20',
690: 1:      'question': '13',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '22',
690: 1:      'question': '14',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '26',
690: 1:      'question': '15',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '25',
690: 1:      'question': '16',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '14',
690: 1:      'question': '17',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '19',
690: 1:      'question': '18',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '29',
690: 1:      'question': '19',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '31',
690: 1:      'question': '20',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '26',
690: 1:      'question': '21',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '25',
690: 1:      'question': '22',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '41',
690: 1:      'question': '23',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '37',
690: 1:      'question': '24',
690: 1:      'valid': true
690: 1:    },
690: 1:    {
690: 1:      'answer': '29',
690: 1:      'question': '25',
690: 1:      'valid': true
690: 1:    }
690: 1:  ],
690: 1:  'info': [
690: 1:    '✅f(1) = 2',
690: 1:    '✅f(2) = 4',
690: 1:    '✅f(3) = 8',
690: 1:    '✅f(4) = 7',
690: 1:    '✅f(5) = 5',
690: 1:    '✅f(6) = 10',
690: 1:    '✅f(7) = 11',
690: 1:    '✅f(8) = 13',
690: 1:    '✅f(9) = 8',
690: 1:    '✅f(10) = 7',
690: 1:    '✅f(11) = 14',
690: 1:    '✅f(12) = 19',
690: 1:    '✅f(13) = 20',
690: 1:    '✅f(14) = 22',
690: 1:    '✅f(15) = 26',
690: 1:    '✅f(16) = 25',
690: 1:    '✅f(17) = 14',
690: 1:    '✅f(18) = 19',
690: 1:    '✅f(19) = 29',
690: 1:    '✅f(20) = 31',
690: 1:    '✅f(21) = 26',
690: 1:    '✅f(22) = 25',
690: 1:    '✅f(23) = 41',
690: 1:    '✅f(24) = 37',
690: 1:    '✅f(25) = 29'
690: 1:  ],
690: 1:  'level': 25,
690: 1:  'questions': []
690: 1:}
690: 1:Scores: 66371
690: 1:Answer: message('StartNextLevel')
690: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
691: 1:BoardData {
691: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
691: 1:  'expectedAnswer': 'true',
691: 1:  'history': [],
691: 1:  'info': ['❌f(0, 1, 5) = ??? != true'],
691: 1:  'level': 26,
691: 1:  'nextQuestion': '0, 1, 5',
691: 1:  'questions': ['0, 1, 5']
691: 1:}
691: 1:Scores: 66371
691: 1:Answer: message('['true']')
691: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
692: 1:BoardData {
692: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
692: 1:  'expectedAnswer': 'true',
692: 1:  'history': [{
692: 1:    'answer': 'true',
692: 1:    'question': '0, 1, 5',
692: 1:    'valid': true
692: 1:  }],
692: 1:  'info': [
692: 1:    '✅f(0, 1, 5) = true',
692: 1:    '❌f(1, 0, 1) = ??? != true'
692: 1:  ],
692: 1:  'level': 26,
692: 1:  'nextQuestion': '1, 0, 1',
692: 1:  'questions': [
692: 1:    '0, 1, 5',
692: 1:    '1, 0, 1'
692: 1:  ]
692: 1:}
692: 1:Scores: 66378
692: 1:Answer: message('['true', 'true']')
692: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
693: 1:BoardData {
693: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
693: 1:  'expectedAnswer': 'false',
693: 1:  'history': [
693: 1:    {
693: 1:      'answer': 'true',
693: 1:      'question': '0, 1, 5',
693: 1:      'valid': true
693: 1:    },
693: 1:    {
693: 1:      'answer': 'true',
693: 1:      'question': '1, 0, 1',
693: 1:      'valid': true
693: 1:    }
693: 1:  ],
693: 1:  'info': [
693: 1:    '✅f(0, 1, 5) = true',
693: 1:    '✅f(1, 0, 1) = true',
693: 1:    '❌f(1, 0, 2) = ??? != false'
693: 1:  ],
693: 1:  'level': 26,
693: 1:  'nextQuestion': '1, 0, 2',
693: 1:  'questions': [
693: 1:    '0, 1, 5',
693: 1:    '1, 0, 1',
693: 1:    '1, 0, 2'
693: 1:  ]
693: 1:}
693: 1:Scores: 66385
693: 1:Answer: message('['true', 'true', 'false']')
693: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
694: 1:BoardData {
694: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
694: 1:  'expectedAnswer': 'true',
694: 1:  'history': [
694: 1:    {
694: 1:      'answer': 'true',
694: 1:      'question': '0, 1, 5',
694: 1:      'valid': true
694: 1:    },
694: 1:    {
694: 1:      'answer': 'true',
694: 1:      'question': '1, 0, 1',
694: 1:      'valid': true
694: 1:    },
694: 1:    {
694: 1:      'answer': 'false',
694: 1:      'question': '1, 0, 2',
694: 1:      'valid': true
694: 1:    }
694: 1:  ],
694: 1:  'info': [
694: 1:    '✅f(0, 1, 5) = true',
694: 1:    '✅f(1, 0, 1) = true',
694: 1:    '✅f(1, 0, 2) = false',
694: 1:    '❌f(3, 1, 7) = ??? != true'
694: 1:  ],
694: 1:  'level': 26,
694: 1:  'nextQuestion': '3, 1, 7',
694: 1:  'questions': [
694: 1:    '0, 1, 5',
694: 1:    '1, 0, 1',
694: 1:    '1, 0, 2',
694: 1:    '3, 1, 7'
694: 1:  ]
694: 1:}
694: 1:Scores: 66392
694: 1:Answer: message('['true', 'true', 'false', 'true']')
694: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
695: 1:BoardData {
695: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
695: 1:  'expectedAnswer': 'true',
695: 1:  'history': [
695: 1:    {
695: 1:      'answer': 'true',
695: 1:      'question': '0, 1, 5',
695: 1:      'valid': true
695: 1:    },
695: 1:    {
695: 1:      'answer': 'true',
695: 1:      'question': '1, 0, 1',
695: 1:      'valid': true
695: 1:    },
695: 1:    {
695: 1:      'answer': 'false',
695: 1:      'question': '1, 0, 2',
695: 1:      'valid': true
695: 1:    },
695: 1:    {
695: 1:      'answer': 'true',
695: 1:      'question': '3, 1, 7',
695: 1:      'valid': true
695: 1:    }
695: 1:  ],
695: 1:  'info': [
695: 1:    '✅f(0, 1, 5) = true',
695: 1:    '✅f(1, 0, 1) = true',
695: 1:    '✅f(1, 0, 2) = false',
695: 1:    '✅f(3, 1, 7) = true',
695: 1:    '❌f(4, 2, 14) = ??? != true'
695: 1:  ],
695: 1:  'level': 26,
695: 1:  'nextQuestion': '4, 2, 14',
695: 1:  'questions': [
695: 1:    '0, 1, 5',
695: 1:    '1, 0, 1',
695: 1:    '1, 0, 2',
695: 1:    '3, 1, 7',
695: 1:    '4, 2, 14'
695: 1:  ]
695: 1:}
695: 1:Scores: 66399
695: 1:Answer: message('['true', 'true', 'false', 'true', 'true']')
695: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
696: 1:BoardData {
696: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
696: 1:  'expectedAnswer': 'false',
696: 1:  'history': [
696: 1:    {
696: 1:      'answer': 'true',
696: 1:      'question': '0, 1, 5',
696: 1:      'valid': true
696: 1:    },
696: 1:    {
696: 1:      'answer': 'true',
696: 1:      'question': '1, 0, 1',
696: 1:      'valid': true
696: 1:    },
696: 1:    {
696: 1:      'answer': 'false',
696: 1:      'question': '1, 0, 2',
696: 1:      'valid': true
696: 1:    },
696: 1:    {
696: 1:      'answer': 'true',
696: 1:      'question': '3, 1, 7',
696: 1:      'valid': true
696: 1:    },
696: 1:    {
696: 1:      'answer': 'true',
696: 1:      'question': '4, 2, 14',
696: 1:      'valid': true
696: 1:    }
696: 1:  ],
696: 1:  'info': [
696: 1:    '✅f(0, 1, 5) = true',
696: 1:    '✅f(1, 0, 1) = true',
696: 1:    '✅f(1, 0, 2) = false',
696: 1:    '✅f(3, 1, 7) = true',
696: 1:    '✅f(4, 2, 14) = true',
696: 1:    '❌f(3, 2, 14) = ??? != false'
696: 1:  ],
696: 1:  'level': 26,
696: 1:  'nextQuestion': '3, 2, 14',
696: 1:  'questions': [
696: 1:    '0, 1, 5',
696: 1:    '1, 0, 1',
696: 1:    '1, 0, 2',
696: 1:    '3, 1, 7',
696: 1:    '4, 2, 14',
696: 1:    '3, 2, 14'
696: 1:  ]
696: 1:}
696: 1:Scores: 66406
696: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false']')
696: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
697: 1:BoardData {
697: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
697: 1:  'expectedAnswer': 'true',
697: 1:  'history': [
697: 1:    {
697: 1:      'answer': 'true',
697: 1:      'question': '0, 1, 5',
697: 1:      'valid': true
697: 1:    },
697: 1:    {
697: 1:      'answer': 'true',
697: 1:      'question': '1, 0, 1',
697: 1:      'valid': true
697: 1:    },
697: 1:    {
697: 1:      'answer': 'false',
697: 1:      'question': '1, 0, 2',
697: 1:      'valid': true
697: 1:    },
697: 1:    {
697: 1:      'answer': 'true',
697: 1:      'question': '3, 1, 7',
697: 1:      'valid': true
697: 1:    },
697: 1:    {
697: 1:      'answer': 'true',
697: 1:      'question': '4, 2, 14',
697: 1:      'valid': true
697: 1:    },
697: 1:    {
697: 1:      'answer': 'false',
697: 1:      'question': '3, 2, 14',
697: 1:      'valid': true
697: 1:    }
697: 1:  ],
697: 1:  'info': [
697: 1:    '✅f(0, 1, 5) = true',
697: 1:    '✅f(1, 0, 1) = true',
697: 1:    '✅f(1, 0, 2) = false',
697: 1:    '✅f(3, 1, 7) = true',
697: 1:    '✅f(4, 2, 14) = true',
697: 1:    '✅f(3, 2, 14) = false',
697: 1:    '❌f(0, 2, 5) = ??? != true'
697: 1:  ],
697: 1:  'level': 26,
697: 1:  'nextQuestion': '0, 2, 5',
697: 1:  'questions': [
697: 1:    '0, 1, 5',
697: 1:    '1, 0, 1',
697: 1:    '1, 0, 2',
697: 1:    '3, 1, 7',
697: 1:    '4, 2, 14',
697: 1:    '3, 2, 14',
697: 1:    '0, 2, 5'
697: 1:  ]
697: 1:}
697: 1:Scores: 66413
697: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true']')
697: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
698: 1:BoardData {
698: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
698: 1:  'expectedAnswer': 'true',
698: 1:  'history': [
698: 1:    {
698: 1:      'answer': 'true',
698: 1:      'question': '0, 1, 5',
698: 1:      'valid': true
698: 1:    },
698: 1:    {
698: 1:      'answer': 'true',
698: 1:      'question': '1, 0, 1',
698: 1:      'valid': true
698: 1:    },
698: 1:    {
698: 1:      'answer': 'false',
698: 1:      'question': '1, 0, 2',
698: 1:      'valid': true
698: 1:    },
698: 1:    {
698: 1:      'answer': 'true',
698: 1:      'question': '3, 1, 7',
698: 1:      'valid': true
698: 1:    },
698: 1:    {
698: 1:      'answer': 'true',
698: 1:      'question': '4, 2, 14',
698: 1:      'valid': true
698: 1:    },
698: 1:    {
698: 1:      'answer': 'false',
698: 1:      'question': '3, 2, 14',
698: 1:      'valid': true
698: 1:    },
698: 1:    {
698: 1:      'answer': 'true',
698: 1:      'question': '0, 2, 5',
698: 1:      'valid': true
698: 1:    }
698: 1:  ],
698: 1:  'info': [
698: 1:    '✅f(0, 1, 5) = true',
698: 1:    '✅f(1, 0, 1) = true',
698: 1:    '✅f(1, 0, 2) = false',
698: 1:    '✅f(3, 1, 7) = true',
698: 1:    '✅f(4, 2, 14) = true',
698: 1:    '✅f(3, 2, 14) = false',
698: 1:    '✅f(0, 2, 5) = true',
698: 1:    '❌f(3, 1, 6) = ??? != true'
698: 1:  ],
698: 1:  'level': 26,
698: 1:  'nextQuestion': '3, 1, 6',
698: 1:  'questions': [
698: 1:    '0, 1, 5',
698: 1:    '1, 0, 1',
698: 1:    '1, 0, 2',
698: 1:    '3, 1, 7',
698: 1:    '4, 2, 14',
698: 1:    '3, 2, 14',
698: 1:    '0, 2, 5',
698: 1:    '3, 1, 6'
698: 1:  ]
698: 1:}
698: 1:Scores: 66420
698: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true']')
698: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
699: 1:BoardData {
699: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
699: 1:  'expectedAnswer': 'false',
699: 1:  'history': [
699: 1:    {
699: 1:      'answer': 'true',
699: 1:      'question': '0, 1, 5',
699: 1:      'valid': true
699: 1:    },
699: 1:    {
699: 1:      'answer': 'true',
699: 1:      'question': '1, 0, 1',
699: 1:      'valid': true
699: 1:    },
699: 1:    {
699: 1:      'answer': 'false',
699: 1:      'question': '1, 0, 2',
699: 1:      'valid': true
699: 1:    },
699: 1:    {
699: 1:      'answer': 'true',
699: 1:      'question': '3, 1, 7',
699: 1:      'valid': true
699: 1:    },
699: 1:    {
699: 1:      'answer': 'true',
699: 1:      'question': '4, 2, 14',
699: 1:      'valid': true
699: 1:    },
699: 1:    {
699: 1:      'answer': 'false',
699: 1:      'question': '3, 2, 14',
699: 1:      'valid': true
699: 1:    },
699: 1:    {
699: 1:      'answer': 'true',
699: 1:      'question': '0, 2, 5',
699: 1:      'valid': true
699: 1:    },
699: 1:    {
699: 1:      'answer': 'true',
699: 1:      'question': '3, 1, 6',
699: 1:      'valid': true
699: 1:    }
699: 1:  ],
699: 1:  'info': [
699: 1:    '✅f(0, 1, 5) = true',
699: 1:    '✅f(1, 0, 1) = true',
699: 1:    '✅f(1, 0, 2) = false',
699: 1:    '✅f(3, 1, 7) = true',
699: 1:    '✅f(4, 2, 14) = true',
699: 1:    '✅f(3, 2, 14) = false',
699: 1:    '✅f(0, 2, 5) = true',
699: 1:    '✅f(3, 1, 6) = true',
699: 1:    '❌f(3, 1, 9) = ??? != false'
699: 1:  ],
699: 1:  'level': 26,
699: 1:  'nextQuestion': '3, 1, 9',
699: 1:  'questions': [
699: 1:    '0, 1, 5',
699: 1:    '1, 0, 1',
699: 1:    '1, 0, 2',
699: 1:    '3, 1, 7',
699: 1:    '4, 2, 14',
699: 1:    '3, 2, 14',
699: 1:    '0, 2, 5',
699: 1:    '3, 1, 6',
699: 1:    '3, 1, 9'
699: 1:  ]
699: 1:}
699: 1:Scores: 66427
699: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false']')
699: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
700: 1:BoardData {
700: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
700: 1:  'expectedAnswer': 'false',
700: 1:  'history': [
700: 1:    {
700: 1:      'answer': 'true',
700: 1:      'question': '0, 1, 5',
700: 1:      'valid': true
700: 1:    },
700: 1:    {
700: 1:      'answer': 'true',
700: 1:      'question': '1, 0, 1',
700: 1:      'valid': true
700: 1:    },
700: 1:    {
700: 1:      'answer': 'false',
700: 1:      'question': '1, 0, 2',
700: 1:      'valid': true
700: 1:    },
700: 1:    {
700: 1:      'answer': 'true',
700: 1:      'question': '3, 1, 7',
700: 1:      'valid': true
700: 1:    },
700: 1:    {
700: 1:      'answer': 'true',
700: 1:      'question': '4, 2, 14',
700: 1:      'valid': true
700: 1:    },
700: 1:    {
700: 1:      'answer': 'false',
700: 1:      'question': '3, 2, 14',
700: 1:      'valid': true
700: 1:    },
700: 1:    {
700: 1:      'answer': 'true',
700: 1:      'question': '0, 2, 5',
700: 1:      'valid': true
700: 1:    },
700: 1:    {
700: 1:      'answer': 'true',
700: 1:      'question': '3, 1, 6',
700: 1:      'valid': true
700: 1:    },
700: 1:    {
700: 1:      'answer': 'false',
700: 1:      'question': '3, 1, 9',
700: 1:      'valid': true
700: 1:    }
700: 1:  ],
700: 1:  'info': [
700: 1:    '✅f(0, 1, 5) = true',
700: 1:    '✅f(1, 0, 1) = true',
700: 1:    '✅f(1, 0, 2) = false',
700: 1:    '✅f(3, 1, 7) = true',
700: 1:    '✅f(4, 2, 14) = true',
700: 1:    '✅f(3, 2, 14) = false',
700: 1:    '✅f(0, 2, 5) = true',
700: 1:    '✅f(3, 1, 6) = true',
700: 1:    '✅f(3, 1, 9) = false',
700: 1:    '❌f(3, 2, 9) = ??? != false'
700: 1:  ],
700: 1:  'level': 26,
700: 1:  'nextQuestion': '3, 2, 9',
700: 1:  'questions': [
700: 1:    '0, 1, 5',
700: 1:    '1, 0, 1',
700: 1:    '1, 0, 2',
700: 1:    '3, 1, 7',
700: 1:    '4, 2, 14',
700: 1:    '3, 2, 14',
700: 1:    '0, 2, 5',
700: 1:    '3, 1, 6',
700: 1:    '3, 1, 9',
700: 1:    '3, 2, 9'
700: 1:  ]
700: 1:}
700: 1:Scores: 66434
700: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false']')
700: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
701: 1:BoardData {
701: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
701: 1:  'expectedAnswer': 'true',
701: 1:  'history': [
701: 1:    {
701: 1:      'answer': 'true',
701: 1:      'question': '0, 1, 5',
701: 1:      'valid': true
701: 1:    },
701: 1:    {
701: 1:      'answer': 'true',
701: 1:      'question': '1, 0, 1',
701: 1:      'valid': true
701: 1:    },
701: 1:    {
701: 1:      'answer': 'false',
701: 1:      'question': '1, 0, 2',
701: 1:      'valid': true
701: 1:    },
701: 1:    {
701: 1:      'answer': 'true',
701: 1:      'question': '3, 1, 7',
701: 1:      'valid': true
701: 1:    },
701: 1:    {
701: 1:      'answer': 'true',
701: 1:      'question': '4, 2, 14',
701: 1:      'valid': true
701: 1:    },
701: 1:    {
701: 1:      'answer': 'false',
701: 1:      'question': '3, 2, 14',
701: 1:      'valid': true
701: 1:    },
701: 1:    {
701: 1:      'answer': 'true',
701: 1:      'question': '0, 2, 5',
701: 1:      'valid': true
701: 1:    },
701: 1:    {
701: 1:      'answer': 'true',
701: 1:      'question': '3, 1, 6',
701: 1:      'valid': true
701: 1:    },
701: 1:    {
701: 1:      'answer': 'false',
701: 1:      'question': '3, 1, 9',
701: 1:      'valid': true
701: 1:    },
701: 1:    {
701: 1:      'answer': 'false',
701: 1:      'question': '3, 2, 9',
701: 1:      'valid': true
701: 1:    }
701: 1:  ],
701: 1:  'info': [
701: 1:    '✅f(0, 1, 5) = true',
701: 1:    '✅f(1, 0, 1) = true',
701: 1:    '✅f(1, 0, 2) = false',
701: 1:    '✅f(3, 1, 7) = true',
701: 1:    '✅f(4, 2, 14) = true',
701: 1:    '✅f(3, 2, 14) = false',
701: 1:    '✅f(0, 2, 5) = true',
701: 1:    '✅f(3, 1, 6) = true',
701: 1:    '✅f(3, 1, 9) = false',
701: 1:    '✅f(3, 2, 9) = false',
701: 1:    '❌f(10, 10, 0) = ??? != true'
701: 1:  ],
701: 1:  'level': 26,
701: 1:  'nextQuestion': '10, 10, 0',
701: 1:  'questions': [
701: 1:    '0, 1, 5',
701: 1:    '1, 0, 1',
701: 1:    '1, 0, 2',
701: 1:    '3, 1, 7',
701: 1:    '4, 2, 14',
701: 1:    '3, 2, 14',
701: 1:    '0, 2, 5',
701: 1:    '3, 1, 6',
701: 1:    '3, 1, 9',
701: 1:    '3, 2, 9',
701: 1:    '10, 10, 0'
701: 1:  ]
701: 1:}
701: 1:Scores: 66441
701: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true']')
701: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
702: 1:BoardData {
702: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
702: 1:  'expectedAnswer': 'false',
702: 1:  'history': [
702: 1:    {
702: 1:      'answer': 'true',
702: 1:      'question': '0, 1, 5',
702: 1:      'valid': true
702: 1:    },
702: 1:    {
702: 1:      'answer': 'true',
702: 1:      'question': '1, 0, 1',
702: 1:      'valid': true
702: 1:    },
702: 1:    {
702: 1:      'answer': 'false',
702: 1:      'question': '1, 0, 2',
702: 1:      'valid': true
702: 1:    },
702: 1:    {
702: 1:      'answer': 'true',
702: 1:      'question': '3, 1, 7',
702: 1:      'valid': true
702: 1:    },
702: 1:    {
702: 1:      'answer': 'true',
702: 1:      'question': '4, 2, 14',
702: 1:      'valid': true
702: 1:    },
702: 1:    {
702: 1:      'answer': 'false',
702: 1:      'question': '3, 2, 14',
702: 1:      'valid': true
702: 1:    },
702: 1:    {
702: 1:      'answer': 'true',
702: 1:      'question': '0, 2, 5',
702: 1:      'valid': true
702: 1:    },
702: 1:    {
702: 1:      'answer': 'true',
702: 1:      'question': '3, 1, 6',
702: 1:      'valid': true
702: 1:    },
702: 1:    {
702: 1:      'answer': 'false',
702: 1:      'question': '3, 1, 9',
702: 1:      'valid': true
702: 1:    },
702: 1:    {
702: 1:      'answer': 'false',
702: 1:      'question': '3, 2, 9',
702: 1:      'valid': true
702: 1:    },
702: 1:    {
702: 1:      'answer': 'true',
702: 1:      'question': '10, 10, 0',
702: 1:      'valid': true
702: 1:    }
702: 1:  ],
702: 1:  'info': [
702: 1:    '✅f(0, 1, 5) = true',
702: 1:    '✅f(1, 0, 1) = true',
702: 1:    '✅f(1, 0, 2) = false',
702: 1:    '✅f(3, 1, 7) = true',
702: 1:    '✅f(4, 2, 14) = true',
702: 1:    '✅f(3, 2, 14) = false',
702: 1:    '✅f(0, 2, 5) = true',
702: 1:    '✅f(3, 1, 6) = true',
702: 1:    '✅f(3, 1, 9) = false',
702: 1:    '✅f(3, 2, 9) = false',
702: 1:    '✅f(10, 10, 0) = true',
702: 1:    '❌f(0, 0, 1) = ??? != false'
702: 1:  ],
702: 1:  'level': 26,
702: 1:  'nextQuestion': '0, 0, 1',
702: 1:  'questions': [
702: 1:    '0, 1, 5',
702: 1:    '1, 0, 1',
702: 1:    '1, 0, 2',
702: 1:    '3, 1, 7',
702: 1:    '4, 2, 14',
702: 1:    '3, 2, 14',
702: 1:    '0, 2, 5',
702: 1:    '3, 1, 6',
702: 1:    '3, 1, 9',
702: 1:    '3, 2, 9',
702: 1:    '10, 10, 0',
702: 1:    '0, 0, 1'
702: 1:  ]
702: 1:}
702: 1:Scores: 66448
702: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false']')
702: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
703: 1:BoardData {
703: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
703: 1:  'expectedAnswer': 'false',
703: 1:  'history': [
703: 1:    {
703: 1:      'answer': 'true',
703: 1:      'question': '0, 1, 5',
703: 1:      'valid': true
703: 1:    },
703: 1:    {
703: 1:      'answer': 'true',
703: 1:      'question': '1, 0, 1',
703: 1:      'valid': true
703: 1:    },
703: 1:    {
703: 1:      'answer': 'false',
703: 1:      'question': '1, 0, 2',
703: 1:      'valid': true
703: 1:    },
703: 1:    {
703: 1:      'answer': 'true',
703: 1:      'question': '3, 1, 7',
703: 1:      'valid': true
703: 1:    },
703: 1:    {
703: 1:      'answer': 'true',
703: 1:      'question': '4, 2, 14',
703: 1:      'valid': true
703: 1:    },
703: 1:    {
703: 1:      'answer': 'false',
703: 1:      'question': '3, 2, 14',
703: 1:      'valid': true
703: 1:    },
703: 1:    {
703: 1:      'answer': 'true',
703: 1:      'question': '0, 2, 5',
703: 1:      'valid': true
703: 1:    },
703: 1:    {
703: 1:      'answer': 'true',
703: 1:      'question': '3, 1, 6',
703: 1:      'valid': true
703: 1:    },
703: 1:    {
703: 1:      'answer': 'false',
703: 1:      'question': '3, 1, 9',
703: 1:      'valid': true
703: 1:    },
703: 1:    {
703: 1:      'answer': 'false',
703: 1:      'question': '3, 2, 9',
703: 1:      'valid': true
703: 1:    },
703: 1:    {
703: 1:      'answer': 'true',
703: 1:      'question': '10, 10, 0',
703: 1:      'valid': true
703: 1:    },
703: 1:    {
703: 1:      'answer': 'false',
703: 1:      'question': '0, 0, 1',
703: 1:      'valid': true
703: 1:    }
703: 1:  ],
703: 1:  'info': [
703: 1:    '✅f(0, 1, 5) = true',
703: 1:    '✅f(1, 0, 1) = true',
703: 1:    '✅f(1, 0, 2) = false',
703: 1:    '✅f(3, 1, 7) = true',
703: 1:    '✅f(4, 2, 14) = true',
703: 1:    '✅f(3, 2, 14) = false',
703: 1:    '✅f(0, 2, 5) = true',
703: 1:    '✅f(3, 1, 6) = true',
703: 1:    '✅f(3, 1, 9) = false',
703: 1:    '✅f(3, 2, 9) = false',
703: 1:    '✅f(10, 10, 0) = true',
703: 1:    '✅f(0, 0, 1) = false',
703: 1:    '❌f(0, 1, 1) = ??? != false'
703: 1:  ],
703: 1:  'level': 26,
703: 1:  'nextQuestion': '0, 1, 1',
703: 1:  'questions': [
703: 1:    '0, 1, 5',
703: 1:    '1, 0, 1',
703: 1:    '1, 0, 2',
703: 1:    '3, 1, 7',
703: 1:    '4, 2, 14',
703: 1:    '3, 2, 14',
703: 1:    '0, 2, 5',
703: 1:    '3, 1, 6',
703: 1:    '3, 1, 9',
703: 1:    '3, 2, 9',
703: 1:    '10, 10, 0',
703: 1:    '0, 0, 1',
703: 1:    '0, 1, 1'
703: 1:  ]
703: 1:}
703: 1:Scores: 66455
703: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false']')
703: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
704: 1:BoardData {
704: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
704: 1:  'expectedAnswer': 'false',
704: 1:  'history': [
704: 1:    {
704: 1:      'answer': 'true',
704: 1:      'question': '0, 1, 5',
704: 1:      'valid': true
704: 1:    },
704: 1:    {
704: 1:      'answer': 'true',
704: 1:      'question': '1, 0, 1',
704: 1:      'valid': true
704: 1:    },
704: 1:    {
704: 1:      'answer': 'false',
704: 1:      'question': '1, 0, 2',
704: 1:      'valid': true
704: 1:    },
704: 1:    {
704: 1:      'answer': 'true',
704: 1:      'question': '3, 1, 7',
704: 1:      'valid': true
704: 1:    },
704: 1:    {
704: 1:      'answer': 'true',
704: 1:      'question': '4, 2, 14',
704: 1:      'valid': true
704: 1:    },
704: 1:    {
704: 1:      'answer': 'false',
704: 1:      'question': '3, 2, 14',
704: 1:      'valid': true
704: 1:    },
704: 1:    {
704: 1:      'answer': 'true',
704: 1:      'question': '0, 2, 5',
704: 1:      'valid': true
704: 1:    },
704: 1:    {
704: 1:      'answer': 'true',
704: 1:      'question': '3, 1, 6',
704: 1:      'valid': true
704: 1:    },
704: 1:    {
704: 1:      'answer': 'false',
704: 1:      'question': '3, 1, 9',
704: 1:      'valid': true
704: 1:    },
704: 1:    {
704: 1:      'answer': 'false',
704: 1:      'question': '3, 2, 9',
704: 1:      'valid': true
704: 1:    },
704: 1:    {
704: 1:      'answer': 'true',
704: 1:      'question': '10, 10, 0',
704: 1:      'valid': true
704: 1:    },
704: 1:    {
704: 1:      'answer': 'false',
704: 1:      'question': '0, 0, 1',
704: 1:      'valid': true
704: 1:    },
704: 1:    {
704: 1:      'answer': 'false',
704: 1:      'question': '0, 1, 1',
704: 1:      'valid': true
704: 1:    }
704: 1:  ],
704: 1:  'info': [
704: 1:    '✅f(0, 1, 5) = true',
704: 1:    '✅f(1, 0, 1) = true',
704: 1:    '✅f(1, 0, 2) = false',
704: 1:    '✅f(3, 1, 7) = true',
704: 1:    '✅f(4, 2, 14) = true',
704: 1:    '✅f(3, 2, 14) = false',
704: 1:    '✅f(0, 2, 5) = true',
704: 1:    '✅f(3, 1, 6) = true',
704: 1:    '✅f(3, 1, 9) = false',
704: 1:    '✅f(3, 2, 9) = false',
704: 1:    '✅f(10, 10, 0) = true',
704: 1:    '✅f(0, 0, 1) = false',
704: 1:    '✅f(0, 1, 1) = false',
704: 1:    '❌f(0, 0, 2) = ??? != false'
704: 1:  ],
704: 1:  'level': 26,
704: 1:  'nextQuestion': '0, 0, 2',
704: 1:  'questions': [
704: 1:    '0, 1, 5',
704: 1:    '1, 0, 1',
704: 1:    '1, 0, 2',
704: 1:    '3, 1, 7',
704: 1:    '4, 2, 14',
704: 1:    '3, 2, 14',
704: 1:    '0, 2, 5',
704: 1:    '3, 1, 6',
704: 1:    '3, 1, 9',
704: 1:    '3, 2, 9',
704: 1:    '10, 10, 0',
704: 1:    '0, 0, 1',
704: 1:    '0, 1, 1',
704: 1:    '0, 0, 2'
704: 1:  ]
704: 1:}
704: 1:Scores: 66462
704: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false']')
704: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
705: 1:BoardData {
705: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
705: 1:  'expectedAnswer': 'true',
705: 1:  'history': [
705: 1:    {
705: 1:      'answer': 'true',
705: 1:      'question': '0, 1, 5',
705: 1:      'valid': true
705: 1:    },
705: 1:    {
705: 1:      'answer': 'true',
705: 1:      'question': '1, 0, 1',
705: 1:      'valid': true
705: 1:    },
705: 1:    {
705: 1:      'answer': 'false',
705: 1:      'question': '1, 0, 2',
705: 1:      'valid': true
705: 1:    },
705: 1:    {
705: 1:      'answer': 'true',
705: 1:      'question': '3, 1, 7',
705: 1:      'valid': true
705: 1:    },
705: 1:    {
705: 1:      'answer': 'true',
705: 1:      'question': '4, 2, 14',
705: 1:      'valid': true
705: 1:    },
705: 1:    {
705: 1:      'answer': 'false',
705: 1:      'question': '3, 2, 14',
705: 1:      'valid': true
705: 1:    },
705: 1:    {
705: 1:      'answer': 'true',
705: 1:      'question': '0, 2, 5',
705: 1:      'valid': true
705: 1:    },
705: 1:    {
705: 1:      'answer': 'true',
705: 1:      'question': '3, 1, 6',
705: 1:      'valid': true
705: 1:    },
705: 1:    {
705: 1:      'answer': 'false',
705: 1:      'question': '3, 1, 9',
705: 1:      'valid': true
705: 1:    },
705: 1:    {
705: 1:      'answer': 'false',
705: 1:      'question': '3, 2, 9',
705: 1:      'valid': true
705: 1:    },
705: 1:    {
705: 1:      'answer': 'true',
705: 1:      'question': '10, 10, 0',
705: 1:      'valid': true
705: 1:    },
705: 1:    {
705: 1:      'answer': 'false',
705: 1:      'question': '0, 0, 1',
705: 1:      'valid': true
705: 1:    },
705: 1:    {
705: 1:      'answer': 'false',
705: 1:      'question': '0, 1, 1',
705: 1:      'valid': true
705: 1:    },
705: 1:    {
705: 1:      'answer': 'false',
705: 1:      'question': '0, 0, 2',
705: 1:      'valid': true
705: 1:    }
705: 1:  ],
705: 1:  'info': [
705: 1:    '✅f(0, 1, 5) = true',
705: 1:    '✅f(1, 0, 1) = true',
705: 1:    '✅f(1, 0, 2) = false',
705: 1:    '✅f(3, 1, 7) = true',
705: 1:    '✅f(4, 2, 14) = true',
705: 1:    '✅f(3, 2, 14) = false',
705: 1:    '✅f(0, 2, 5) = true',
705: 1:    '✅f(3, 1, 6) = true',
705: 1:    '✅f(3, 1, 9) = false',
705: 1:    '✅f(3, 2, 9) = false',
705: 1:    '✅f(10, 10, 0) = true',
705: 1:    '✅f(0, 0, 1) = false',
705: 1:    '✅f(0, 1, 1) = false',
705: 1:    '✅f(0, 0, 2) = false',
705: 1:    '❌f(2, 0, 2) = ??? != true'
705: 1:  ],
705: 1:  'level': 26,
705: 1:  'nextQuestion': '2, 0, 2',
705: 1:  'questions': [
705: 1:    '0, 1, 5',
705: 1:    '1, 0, 1',
705: 1:    '1, 0, 2',
705: 1:    '3, 1, 7',
705: 1:    '4, 2, 14',
705: 1:    '3, 2, 14',
705: 1:    '0, 2, 5',
705: 1:    '3, 1, 6',
705: 1:    '3, 1, 9',
705: 1:    '3, 2, 9',
705: 1:    '10, 10, 0',
705: 1:    '0, 0, 1',
705: 1:    '0, 1, 1',
705: 1:    '0, 0, 2',
705: 1:    '2, 0, 2'
705: 1:  ]
705: 1:}
705: 1:Scores: 66469
705: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true']')
705: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
706: 1:BoardData {
706: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
706: 1:  'expectedAnswer': 'false',
706: 1:  'history': [
706: 1:    {
706: 1:      'answer': 'true',
706: 1:      'question': '0, 1, 5',
706: 1:      'valid': true
706: 1:    },
706: 1:    {
706: 1:      'answer': 'true',
706: 1:      'question': '1, 0, 1',
706: 1:      'valid': true
706: 1:    },
706: 1:    {
706: 1:      'answer': 'false',
706: 1:      'question': '1, 0, 2',
706: 1:      'valid': true
706: 1:    },
706: 1:    {
706: 1:      'answer': 'true',
706: 1:      'question': '3, 1, 7',
706: 1:      'valid': true
706: 1:    },
706: 1:    {
706: 1:      'answer': 'true',
706: 1:      'question': '4, 2, 14',
706: 1:      'valid': true
706: 1:    },
706: 1:    {
706: 1:      'answer': 'false',
706: 1:      'question': '3, 2, 14',
706: 1:      'valid': true
706: 1:    },
706: 1:    {
706: 1:      'answer': 'true',
706: 1:      'question': '0, 2, 5',
706: 1:      'valid': true
706: 1:    },
706: 1:    {
706: 1:      'answer': 'true',
706: 1:      'question': '3, 1, 6',
706: 1:      'valid': true
706: 1:    },
706: 1:    {
706: 1:      'answer': 'false',
706: 1:      'question': '3, 1, 9',
706: 1:      'valid': true
706: 1:    },
706: 1:    {
706: 1:      'answer': 'false',
706: 1:      'question': '3, 2, 9',
706: 1:      'valid': true
706: 1:    },
706: 1:    {
706: 1:      'answer': 'true',
706: 1:      'question': '10, 10, 0',
706: 1:      'valid': true
706: 1:    },
706: 1:    {
706: 1:      'answer': 'false',
706: 1:      'question': '0, 0, 1',
706: 1:      'valid': true
706: 1:    },
706: 1:    {
706: 1:      'answer': 'false',
706: 1:      'question': '0, 1, 1',
706: 1:      'valid': true
706: 1:    },
706: 1:    {
706: 1:      'answer': 'false',
706: 1:      'question': '0, 0, 2',
706: 1:      'valid': true
706: 1:    },
706: 1:    {
706: 1:      'answer': 'true',
706: 1:      'question': '2, 0, 2',
706: 1:      'valid': true
706: 1:    }
706: 1:  ],
706: 1:  'info': [
706: 1:    '✅f(0, 1, 5) = true',
706: 1:    '✅f(1, 0, 1) = true',
706: 1:    '✅f(1, 0, 2) = false',
706: 1:    '✅f(3, 1, 7) = true',
706: 1:    '✅f(4, 2, 14) = true',
706: 1:    '✅f(3, 2, 14) = false',
706: 1:    '✅f(0, 2, 5) = true',
706: 1:    '✅f(3, 1, 6) = true',
706: 1:    '✅f(3, 1, 9) = false',
706: 1:    '✅f(3, 2, 9) = false',
706: 1:    '✅f(10, 10, 0) = true',
706: 1:    '✅f(0, 0, 1) = false',
706: 1:    '✅f(0, 1, 1) = false',
706: 1:    '✅f(0, 0, 2) = false',
706: 1:    '✅f(2, 0, 2) = true',
706: 1:    '❌f(0, 1, 2) = ??? != false'
706: 1:  ],
706: 1:  'level': 26,
706: 1:  'nextQuestion': '0, 1, 2',
706: 1:  'questions': [
706: 1:    '0, 1, 5',
706: 1:    '1, 0, 1',
706: 1:    '1, 0, 2',
706: 1:    '3, 1, 7',
706: 1:    '4, 2, 14',
706: 1:    '3, 2, 14',
706: 1:    '0, 2, 5',
706: 1:    '3, 1, 6',
706: 1:    '3, 1, 9',
706: 1:    '3, 2, 9',
706: 1:    '10, 10, 0',
706: 1:    '0, 0, 1',
706: 1:    '0, 1, 1',
706: 1:    '0, 0, 2',
706: 1:    '2, 0, 2',
706: 1:    '0, 1, 2'
706: 1:  ]
706: 1:}
706: 1:Scores: 66476
706: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false']')
706: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
707: 1:BoardData {
707: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
707: 1:  'expectedAnswer': 'false',
707: 1:  'history': [
707: 1:    {
707: 1:      'answer': 'true',
707: 1:      'question': '0, 1, 5',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'true',
707: 1:      'question': '1, 0, 1',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'false',
707: 1:      'question': '1, 0, 2',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'true',
707: 1:      'question': '3, 1, 7',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'true',
707: 1:      'question': '4, 2, 14',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'false',
707: 1:      'question': '3, 2, 14',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'true',
707: 1:      'question': '0, 2, 5',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'true',
707: 1:      'question': '3, 1, 6',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'false',
707: 1:      'question': '3, 1, 9',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'false',
707: 1:      'question': '3, 2, 9',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'true',
707: 1:      'question': '10, 10, 0',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'false',
707: 1:      'question': '0, 0, 1',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'false',
707: 1:      'question': '0, 1, 1',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'false',
707: 1:      'question': '0, 0, 2',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'true',
707: 1:      'question': '2, 0, 2',
707: 1:      'valid': true
707: 1:    },
707: 1:    {
707: 1:      'answer': 'false',
707: 1:      'question': '0, 1, 2',
707: 1:      'valid': true
707: 1:    }
707: 1:  ],
707: 1:  'info': [
707: 1:    '✅f(0, 1, 5) = true',
707: 1:    '✅f(1, 0, 1) = true',
707: 1:    '✅f(1, 0, 2) = false',
707: 1:    '✅f(3, 1, 7) = true',
707: 1:    '✅f(4, 2, 14) = true',
707: 1:    '✅f(3, 2, 14) = false',
707: 1:    '✅f(0, 2, 5) = true',
707: 1:    '✅f(3, 1, 6) = true',
707: 1:    '✅f(3, 1, 9) = false',
707: 1:    '✅f(3, 2, 9) = false',
707: 1:    '✅f(10, 10, 0) = true',
707: 1:    '✅f(0, 0, 1) = false',
707: 1:    '✅f(0, 1, 1) = false',
707: 1:    '✅f(0, 0, 2) = false',
707: 1:    '✅f(2, 0, 2) = true',
707: 1:    '✅f(0, 1, 2) = false',
707: 1:    '❌f(1, 1, 2) = ??? != false'
707: 1:  ],
707: 1:  'level': 26,
707: 1:  'nextQuestion': '1, 1, 2',
707: 1:  'questions': [
707: 1:    '0, 1, 5',
707: 1:    '1, 0, 1',
707: 1:    '1, 0, 2',
707: 1:    '3, 1, 7',
707: 1:    '4, 2, 14',
707: 1:    '3, 2, 14',
707: 1:    '0, 2, 5',
707: 1:    '3, 1, 6',
707: 1:    '3, 1, 9',
707: 1:    '3, 2, 9',
707: 1:    '10, 10, 0',
707: 1:    '0, 0, 1',
707: 1:    '0, 1, 1',
707: 1:    '0, 0, 2',
707: 1:    '2, 0, 2',
707: 1:    '0, 1, 2',
707: 1:    '1, 1, 2'
707: 1:  ]
707: 1:}
707: 1:Scores: 66483
707: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false']')
707: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
708: 1:BoardData {
708: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
708: 1:  'expectedAnswer': 'false',
708: 1:  'history': [
708: 1:    {
708: 1:      'answer': 'true',
708: 1:      'question': '0, 1, 5',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'true',
708: 1:      'question': '1, 0, 1',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'false',
708: 1:      'question': '1, 0, 2',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'true',
708: 1:      'question': '3, 1, 7',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'true',
708: 1:      'question': '4, 2, 14',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'false',
708: 1:      'question': '3, 2, 14',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'true',
708: 1:      'question': '0, 2, 5',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'true',
708: 1:      'question': '3, 1, 6',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'false',
708: 1:      'question': '3, 1, 9',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'false',
708: 1:      'question': '3, 2, 9',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'true',
708: 1:      'question': '10, 10, 0',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'false',
708: 1:      'question': '0, 0, 1',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'false',
708: 1:      'question': '0, 1, 1',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'false',
708: 1:      'question': '0, 0, 2',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'true',
708: 1:      'question': '2, 0, 2',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'false',
708: 1:      'question': '0, 1, 2',
708: 1:      'valid': true
708: 1:    },
708: 1:    {
708: 1:      'answer': 'false',
708: 1:      'question': '1, 1, 2',
708: 1:      'valid': true
708: 1:    }
708: 1:  ],
708: 1:  'info': [
708: 1:    '✅f(0, 1, 5) = true',
708: 1:    '✅f(1, 0, 1) = true',
708: 1:    '✅f(1, 0, 2) = false',
708: 1:    '✅f(3, 1, 7) = true',
708: 1:    '✅f(4, 2, 14) = true',
708: 1:    '✅f(3, 2, 14) = false',
708: 1:    '✅f(0, 2, 5) = true',
708: 1:    '✅f(3, 1, 6) = true',
708: 1:    '✅f(3, 1, 9) = false',
708: 1:    '✅f(3, 2, 9) = false',
708: 1:    '✅f(10, 10, 0) = true',
708: 1:    '✅f(0, 0, 1) = false',
708: 1:    '✅f(0, 1, 1) = false',
708: 1:    '✅f(0, 0, 2) = false',
708: 1:    '✅f(2, 0, 2) = true',
708: 1:    '✅f(0, 1, 2) = false',
708: 1:    '✅f(1, 1, 2) = false',
708: 1:    '❌f(2, 1, 3) = ??? != false'
708: 1:  ],
708: 1:  'level': 26,
708: 1:  'nextQuestion': '2, 1, 3',
708: 1:  'questions': [
708: 1:    '0, 1, 5',
708: 1:    '1, 0, 1',
708: 1:    '1, 0, 2',
708: 1:    '3, 1, 7',
708: 1:    '4, 2, 14',
708: 1:    '3, 2, 14',
708: 1:    '0, 2, 5',
708: 1:    '3, 1, 6',
708: 1:    '3, 1, 9',
708: 1:    '3, 2, 9',
708: 1:    '10, 10, 0',
708: 1:    '0, 0, 1',
708: 1:    '0, 1, 1',
708: 1:    '0, 0, 2',
708: 1:    '2, 0, 2',
708: 1:    '0, 1, 2',
708: 1:    '1, 1, 2',
708: 1:    '2, 1, 3'
708: 1:  ]
708: 1:}
708: 1:Scores: 66490
708: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false']')
708: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
709: 1:BoardData {
709: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
709: 1:  'expectedAnswer': 'false',
709: 1:  'history': [
709: 1:    {
709: 1:      'answer': 'true',
709: 1:      'question': '0, 1, 5',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'true',
709: 1:      'question': '1, 0, 1',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'false',
709: 1:      'question': '1, 0, 2',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'true',
709: 1:      'question': '3, 1, 7',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'true',
709: 1:      'question': '4, 2, 14',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'false',
709: 1:      'question': '3, 2, 14',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'true',
709: 1:      'question': '0, 2, 5',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'true',
709: 1:      'question': '3, 1, 6',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'false',
709: 1:      'question': '3, 1, 9',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'false',
709: 1:      'question': '3, 2, 9',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'true',
709: 1:      'question': '10, 10, 0',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'false',
709: 1:      'question': '0, 0, 1',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'false',
709: 1:      'question': '0, 1, 1',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'false',
709: 1:      'question': '0, 0, 2',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'true',
709: 1:      'question': '2, 0, 2',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'false',
709: 1:      'question': '0, 1, 2',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'false',
709: 1:      'question': '1, 1, 2',
709: 1:      'valid': true
709: 1:    },
709: 1:    {
709: 1:      'answer': 'false',
709: 1:      'question': '2, 1, 3',
709: 1:      'valid': true
709: 1:    }
709: 1:  ],
709: 1:  'info': [
709: 1:    '✅f(0, 1, 5) = true',
709: 1:    '✅f(1, 0, 1) = true',
709: 1:    '✅f(1, 0, 2) = false',
709: 1:    '✅f(3, 1, 7) = true',
709: 1:    '✅f(4, 2, 14) = true',
709: 1:    '✅f(3, 2, 14) = false',
709: 1:    '✅f(0, 2, 5) = true',
709: 1:    '✅f(3, 1, 6) = true',
709: 1:    '✅f(3, 1, 9) = false',
709: 1:    '✅f(3, 2, 9) = false',
709: 1:    '✅f(10, 10, 0) = true',
709: 1:    '✅f(0, 0, 1) = false',
709: 1:    '✅f(0, 1, 1) = false',
709: 1:    '✅f(0, 0, 2) = false',
709: 1:    '✅f(2, 0, 2) = true',
709: 1:    '✅f(0, 1, 2) = false',
709: 1:    '✅f(1, 1, 2) = false',
709: 1:    '✅f(2, 1, 3) = false',
709: 1:    '❌f(3, 1, 4) = ??? != false'
709: 1:  ],
709: 1:  'level': 26,
709: 1:  'nextQuestion': '3, 1, 4',
709: 1:  'questions': [
709: 1:    '0, 1, 5',
709: 1:    '1, 0, 1',
709: 1:    '1, 0, 2',
709: 1:    '3, 1, 7',
709: 1:    '4, 2, 14',
709: 1:    '3, 2, 14',
709: 1:    '0, 2, 5',
709: 1:    '3, 1, 6',
709: 1:    '3, 1, 9',
709: 1:    '3, 2, 9',
709: 1:    '10, 10, 0',
709: 1:    '0, 0, 1',
709: 1:    '0, 1, 1',
709: 1:    '0, 0, 2',
709: 1:    '2, 0, 2',
709: 1:    '0, 1, 2',
709: 1:    '1, 1, 2',
709: 1:    '2, 1, 3',
709: 1:    '3, 1, 4'
709: 1:  ]
709: 1:}
709: 1:Scores: 66497
709: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false']')
709: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
710: 1:BoardData {
710: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
710: 1:  'expectedAnswer': 'true',
710: 1:  'history': [
710: 1:    {
710: 1:      'answer': 'true',
710: 1:      'question': '0, 1, 5',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'true',
710: 1:      'question': '1, 0, 1',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'false',
710: 1:      'question': '1, 0, 2',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'true',
710: 1:      'question': '3, 1, 7',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'true',
710: 1:      'question': '4, 2, 14',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'false',
710: 1:      'question': '3, 2, 14',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'true',
710: 1:      'question': '0, 2, 5',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'true',
710: 1:      'question': '3, 1, 6',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'false',
710: 1:      'question': '3, 1, 9',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'false',
710: 1:      'question': '3, 2, 9',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'true',
710: 1:      'question': '10, 10, 0',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'false',
710: 1:      'question': '0, 0, 1',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'false',
710: 1:      'question': '0, 1, 1',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'false',
710: 1:      'question': '0, 0, 2',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'true',
710: 1:      'question': '2, 0, 2',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'false',
710: 1:      'question': '0, 1, 2',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'false',
710: 1:      'question': '1, 1, 2',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'false',
710: 1:      'question': '2, 1, 3',
710: 1:      'valid': true
710: 1:    },
710: 1:    {
710: 1:      'answer': 'false',
710: 1:      'question': '3, 1, 4',
710: 1:      'valid': true
710: 1:    }
710: 1:  ],
710: 1:  'info': [
710: 1:    '✅f(0, 1, 5) = true',
710: 1:    '✅f(1, 0, 1) = true',
710: 1:    '✅f(1, 0, 2) = false',
710: 1:    '✅f(3, 1, 7) = true',
710: 1:    '✅f(4, 2, 14) = true',
710: 1:    '✅f(3, 2, 14) = false',
710: 1:    '✅f(0, 2, 5) = true',
710: 1:    '✅f(3, 1, 6) = true',
710: 1:    '✅f(3, 1, 9) = false',
710: 1:    '✅f(3, 2, 9) = false',
710: 1:    '✅f(10, 10, 0) = true',
710: 1:    '✅f(0, 0, 1) = false',
710: 1:    '✅f(0, 1, 1) = false',
710: 1:    '✅f(0, 0, 2) = false',
710: 1:    '✅f(2, 0, 2) = true',
710: 1:    '✅f(0, 1, 2) = false',
710: 1:    '✅f(1, 1, 2) = false',
710: 1:    '✅f(2, 1, 3) = false',
710: 1:    '✅f(3, 1, 4) = false',
710: 1:    '❌f(2, 1, 1) = ??? != true'
710: 1:  ],
710: 1:  'level': 26,
710: 1:  'nextQuestion': '2, 1, 1',
710: 1:  'questions': [
710: 1:    '0, 1, 5',
710: 1:    '1, 0, 1',
710: 1:    '1, 0, 2',
710: 1:    '3, 1, 7',
710: 1:    '4, 2, 14',
710: 1:    '3, 2, 14',
710: 1:    '0, 2, 5',
710: 1:    '3, 1, 6',
710: 1:    '3, 1, 9',
710: 1:    '3, 2, 9',
710: 1:    '10, 10, 0',
710: 1:    '0, 0, 1',
710: 1:    '0, 1, 1',
710: 1:    '0, 0, 2',
710: 1:    '2, 0, 2',
710: 1:    '0, 1, 2',
710: 1:    '1, 1, 2',
710: 1:    '2, 1, 3',
710: 1:    '3, 1, 4',
710: 1:    '2, 1, 1'
710: 1:  ]
710: 1:}
710: 1:Scores: 66504
710: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true']')
710: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
711: 1:BoardData {
711: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
711: 1:  'expectedAnswer': 'true',
711: 1:  'history': [
711: 1:    {
711: 1:      'answer': 'true',
711: 1:      'question': '0, 1, 5',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'true',
711: 1:      'question': '1, 0, 1',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'false',
711: 1:      'question': '1, 0, 2',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'true',
711: 1:      'question': '3, 1, 7',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'true',
711: 1:      'question': '4, 2, 14',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'false',
711: 1:      'question': '3, 2, 14',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'true',
711: 1:      'question': '0, 2, 5',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'true',
711: 1:      'question': '3, 1, 6',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'false',
711: 1:      'question': '3, 1, 9',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'false',
711: 1:      'question': '3, 2, 9',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'true',
711: 1:      'question': '10, 10, 0',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'false',
711: 1:      'question': '0, 0, 1',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'false',
711: 1:      'question': '0, 1, 1',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'false',
711: 1:      'question': '0, 0, 2',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'true',
711: 1:      'question': '2, 0, 2',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'false',
711: 1:      'question': '0, 1, 2',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'false',
711: 1:      'question': '1, 1, 2',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'false',
711: 1:      'question': '2, 1, 3',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'false',
711: 1:      'question': '3, 1, 4',
711: 1:      'valid': true
711: 1:    },
711: 1:    {
711: 1:      'answer': 'true',
711: 1:      'question': '2, 1, 1',
711: 1:      'valid': true
711: 1:    }
711: 1:  ],
711: 1:  'info': [
711: 1:    '✅f(0, 1, 5) = true',
711: 1:    '✅f(1, 0, 1) = true',
711: 1:    '✅f(1, 0, 2) = false',
711: 1:    '✅f(3, 1, 7) = true',
711: 1:    '✅f(4, 2, 14) = true',
711: 1:    '✅f(3, 2, 14) = false',
711: 1:    '✅f(0, 2, 5) = true',
711: 1:    '✅f(3, 1, 6) = true',
711: 1:    '✅f(3, 1, 9) = false',
711: 1:    '✅f(3, 2, 9) = false',
711: 1:    '✅f(10, 10, 0) = true',
711: 1:    '✅f(0, 0, 1) = false',
711: 1:    '✅f(0, 1, 1) = false',
711: 1:    '✅f(0, 0, 2) = false',
711: 1:    '✅f(2, 0, 2) = true',
711: 1:    '✅f(0, 1, 2) = false',
711: 1:    '✅f(1, 1, 2) = false',
711: 1:    '✅f(2, 1, 3) = false',
711: 1:    '✅f(3, 1, 4) = false',
711: 1:    '✅f(2, 1, 1) = true',
711: 1:    '❌f(2, 2, 6) = ??? != true'
711: 1:  ],
711: 1:  'level': 26,
711: 1:  'nextQuestion': '2, 2, 6',
711: 1:  'questions': [
711: 1:    '0, 1, 5',
711: 1:    '1, 0, 1',
711: 1:    '1, 0, 2',
711: 1:    '3, 1, 7',
711: 1:    '4, 2, 14',
711: 1:    '3, 2, 14',
711: 1:    '0, 2, 5',
711: 1:    '3, 1, 6',
711: 1:    '3, 1, 9',
711: 1:    '3, 2, 9',
711: 1:    '10, 10, 0',
711: 1:    '0, 0, 1',
711: 1:    '0, 1, 1',
711: 1:    '0, 0, 2',
711: 1:    '2, 0, 2',
711: 1:    '0, 1, 2',
711: 1:    '1, 1, 2',
711: 1:    '2, 1, 3',
711: 1:    '3, 1, 4',
711: 1:    '2, 1, 1',
711: 1:    '2, 2, 6'
711: 1:  ]
711: 1:}
711: 1:Scores: 66511
711: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true']')
711: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
712: 1:BoardData {
712: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
712: 1:  'expectedAnswer': 'true',
712: 1:  'history': [
712: 1:    {
712: 1:      'answer': 'true',
712: 1:      'question': '0, 1, 5',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'true',
712: 1:      'question': '1, 0, 1',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'false',
712: 1:      'question': '1, 0, 2',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'true',
712: 1:      'question': '3, 1, 7',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'true',
712: 1:      'question': '4, 2, 14',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'false',
712: 1:      'question': '3, 2, 14',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'true',
712: 1:      'question': '0, 2, 5',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'true',
712: 1:      'question': '3, 1, 6',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'false',
712: 1:      'question': '3, 1, 9',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'false',
712: 1:      'question': '3, 2, 9',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'true',
712: 1:      'question': '10, 10, 0',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'false',
712: 1:      'question': '0, 0, 1',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'false',
712: 1:      'question': '0, 1, 1',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'false',
712: 1:      'question': '0, 0, 2',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'true',
712: 1:      'question': '2, 0, 2',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'false',
712: 1:      'question': '0, 1, 2',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'false',
712: 1:      'question': '1, 1, 2',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'false',
712: 1:      'question': '2, 1, 3',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'false',
712: 1:      'question': '3, 1, 4',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'true',
712: 1:      'question': '2, 1, 1',
712: 1:      'valid': true
712: 1:    },
712: 1:    {
712: 1:      'answer': 'true',
712: 1:      'question': '2, 2, 6',
712: 1:      'valid': true
712: 1:    }
712: 1:  ],
712: 1:  'info': [
712: 1:    '✅f(0, 1, 5) = true',
712: 1:    '✅f(1, 0, 1) = true',
712: 1:    '✅f(1, 0, 2) = false',
712: 1:    '✅f(3, 1, 7) = true',
712: 1:    '✅f(4, 2, 14) = true',
712: 1:    '✅f(3, 2, 14) = false',
712: 1:    '✅f(0, 2, 5) = true',
712: 1:    '✅f(3, 1, 6) = true',
712: 1:    '✅f(3, 1, 9) = false',
712: 1:    '✅f(3, 2, 9) = false',
712: 1:    '✅f(10, 10, 0) = true',
712: 1:    '✅f(0, 0, 1) = false',
712: 1:    '✅f(0, 1, 1) = false',
712: 1:    '✅f(0, 0, 2) = false',
712: 1:    '✅f(2, 0, 2) = true',
712: 1:    '✅f(0, 1, 2) = false',
712: 1:    '✅f(1, 1, 2) = false',
712: 1:    '✅f(2, 1, 3) = false',
712: 1:    '✅f(3, 1, 4) = false',
712: 1:    '✅f(2, 1, 1) = true',
712: 1:    '✅f(2, 2, 6) = true',
712: 1:    '❌f(6, 1, 11) = ??? != true'
712: 1:  ],
712: 1:  'level': 26,
712: 1:  'nextQuestion': '6, 1, 11',
712: 1:  'questions': [
712: 1:    '0, 1, 5',
712: 1:    '1, 0, 1',
712: 1:    '1, 0, 2',
712: 1:    '3, 1, 7',
712: 1:    '4, 2, 14',
712: 1:    '3, 2, 14',
712: 1:    '0, 2, 5',
712: 1:    '3, 1, 6',
712: 1:    '3, 1, 9',
712: 1:    '3, 2, 9',
712: 1:    '10, 10, 0',
712: 1:    '0, 0, 1',
712: 1:    '0, 1, 1',
712: 1:    '0, 0, 2',
712: 1:    '2, 0, 2',
712: 1:    '0, 1, 2',
712: 1:    '1, 1, 2',
712: 1:    '2, 1, 3',
712: 1:    '3, 1, 4',
712: 1:    '2, 1, 1',
712: 1:    '2, 2, 6',
712: 1:    '6, 1, 11'
712: 1:  ]
712: 1:}
712: 1:Scores: 66518
712: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true']')
712: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
713: 1:BoardData {
713: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
713: 1:  'expectedAnswer': 'true',
713: 1:  'history': [
713: 1:    {
713: 1:      'answer': 'true',
713: 1:      'question': '0, 1, 5',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'true',
713: 1:      'question': '1, 0, 1',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'false',
713: 1:      'question': '1, 0, 2',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'true',
713: 1:      'question': '3, 1, 7',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'true',
713: 1:      'question': '4, 2, 14',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'false',
713: 1:      'question': '3, 2, 14',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'true',
713: 1:      'question': '0, 2, 5',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'true',
713: 1:      'question': '3, 1, 6',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'false',
713: 1:      'question': '3, 1, 9',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'false',
713: 1:      'question': '3, 2, 9',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'true',
713: 1:      'question': '10, 10, 0',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'false',
713: 1:      'question': '0, 0, 1',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'false',
713: 1:      'question': '0, 1, 1',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'false',
713: 1:      'question': '0, 0, 2',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'true',
713: 1:      'question': '2, 0, 2',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'false',
713: 1:      'question': '0, 1, 2',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'false',
713: 1:      'question': '1, 1, 2',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'false',
713: 1:      'question': '2, 1, 3',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'false',
713: 1:      'question': '3, 1, 4',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'true',
713: 1:      'question': '2, 1, 1',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'true',
713: 1:      'question': '2, 2, 6',
713: 1:      'valid': true
713: 1:    },
713: 1:    {
713: 1:      'answer': 'true',
713: 1:      'question': '6, 1, 11',
713: 1:      'valid': true
713: 1:    }
713: 1:  ],
713: 1:  'info': [
713: 1:    '✅f(0, 1, 5) = true',
713: 1:    '✅f(1, 0, 1) = true',
713: 1:    '✅f(1, 0, 2) = false',
713: 1:    '✅f(3, 1, 7) = true',
713: 1:    '✅f(4, 2, 14) = true',
713: 1:    '✅f(3, 2, 14) = false',
713: 1:    '✅f(0, 2, 5) = true',
713: 1:    '✅f(3, 1, 6) = true',
713: 1:    '✅f(3, 1, 9) = false',
713: 1:    '✅f(3, 2, 9) = false',
713: 1:    '✅f(10, 10, 0) = true',
713: 1:    '✅f(0, 0, 1) = false',
713: 1:    '✅f(0, 1, 1) = false',
713: 1:    '✅f(0, 0, 2) = false',
713: 1:    '✅f(2, 0, 2) = true',
713: 1:    '✅f(0, 1, 2) = false',
713: 1:    '✅f(1, 1, 2) = false',
713: 1:    '✅f(2, 1, 3) = false',
713: 1:    '✅f(3, 1, 4) = false',
713: 1:    '✅f(2, 1, 1) = true',
713: 1:    '✅f(2, 2, 6) = true',
713: 1:    '✅f(6, 1, 11) = true',
713: 1:    '❌f(5, 0, 1) = ??? != true'
713: 1:  ],
713: 1:  'level': 26,
713: 1:  'nextQuestion': '5, 0, 1',
713: 1:  'questions': [
713: 1:    '0, 1, 5',
713: 1:    '1, 0, 1',
713: 1:    '1, 0, 2',
713: 1:    '3, 1, 7',
713: 1:    '4, 2, 14',
713: 1:    '3, 2, 14',
713: 1:    '0, 2, 5',
713: 1:    '3, 1, 6',
713: 1:    '3, 1, 9',
713: 1:    '3, 2, 9',
713: 1:    '10, 10, 0',
713: 1:    '0, 0, 1',
713: 1:    '0, 1, 1',
713: 1:    '0, 0, 2',
713: 1:    '2, 0, 2',
713: 1:    '0, 1, 2',
713: 1:    '1, 1, 2',
713: 1:    '2, 1, 3',
713: 1:    '3, 1, 4',
713: 1:    '2, 1, 1',
713: 1:    '2, 2, 6',
713: 1:    '6, 1, 11',
713: 1:    '5, 0, 1'
713: 1:  ]
713: 1:}
713: 1:Scores: 66525
713: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true']')
713: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
714: 1:BoardData {
714: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
714: 1:  'expectedAnswer': 'true',
714: 1:  'history': [
714: 1:    {
714: 1:      'answer': 'true',
714: 1:      'question': '0, 1, 5',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'true',
714: 1:      'question': '1, 0, 1',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'false',
714: 1:      'question': '1, 0, 2',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'true',
714: 1:      'question': '3, 1, 7',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'true',
714: 1:      'question': '4, 2, 14',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'false',
714: 1:      'question': '3, 2, 14',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'true',
714: 1:      'question': '0, 2, 5',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'true',
714: 1:      'question': '3, 1, 6',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'false',
714: 1:      'question': '3, 1, 9',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'false',
714: 1:      'question': '3, 2, 9',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'true',
714: 1:      'question': '10, 10, 0',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'false',
714: 1:      'question': '0, 0, 1',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'false',
714: 1:      'question': '0, 1, 1',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'false',
714: 1:      'question': '0, 0, 2',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'true',
714: 1:      'question': '2, 0, 2',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'false',
714: 1:      'question': '0, 1, 2',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'false',
714: 1:      'question': '1, 1, 2',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'false',
714: 1:      'question': '2, 1, 3',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'false',
714: 1:      'question': '3, 1, 4',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'true',
714: 1:      'question': '2, 1, 1',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'true',
714: 1:      'question': '2, 2, 6',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'true',
714: 1:      'question': '6, 1, 11',
714: 1:      'valid': true
714: 1:    },
714: 1:    {
714: 1:      'answer': 'true',
714: 1:      'question': '5, 0, 1',
714: 1:      'valid': true
714: 1:    }
714: 1:  ],
714: 1:  'info': [
714: 1:    '✅f(0, 1, 5) = true',
714: 1:    '✅f(1, 0, 1) = true',
714: 1:    '✅f(1, 0, 2) = false',
714: 1:    '✅f(3, 1, 7) = true',
714: 1:    '✅f(4, 2, 14) = true',
714: 1:    '✅f(3, 2, 14) = false',
714: 1:    '✅f(0, 2, 5) = true',
714: 1:    '✅f(3, 1, 6) = true',
714: 1:    '✅f(3, 1, 9) = false',
714: 1:    '✅f(3, 2, 9) = false',
714: 1:    '✅f(10, 10, 0) = true',
714: 1:    '✅f(0, 0, 1) = false',
714: 1:    '✅f(0, 1, 1) = false',
714: 1:    '✅f(0, 0, 2) = false',
714: 1:    '✅f(2, 0, 2) = true',
714: 1:    '✅f(0, 1, 2) = false',
714: 1:    '✅f(1, 1, 2) = false',
714: 1:    '✅f(2, 1, 3) = false',
714: 1:    '✅f(3, 1, 4) = false',
714: 1:    '✅f(2, 1, 1) = true',
714: 1:    '✅f(2, 2, 6) = true',
714: 1:    '✅f(6, 1, 11) = true',
714: 1:    '✅f(5, 0, 1) = true',
714: 1:    '❌f(3, 1, 8) = ??? != true'
714: 1:  ],
714: 1:  'level': 26,
714: 1:  'nextQuestion': '3, 1, 8',
714: 1:  'questions': [
714: 1:    '0, 1, 5',
714: 1:    '1, 0, 1',
714: 1:    '1, 0, 2',
714: 1:    '3, 1, 7',
714: 1:    '4, 2, 14',
714: 1:    '3, 2, 14',
714: 1:    '0, 2, 5',
714: 1:    '3, 1, 6',
714: 1:    '3, 1, 9',
714: 1:    '3, 2, 9',
714: 1:    '10, 10, 0',
714: 1:    '0, 0, 1',
714: 1:    '0, 1, 1',
714: 1:    '0, 0, 2',
714: 1:    '2, 0, 2',
714: 1:    '0, 1, 2',
714: 1:    '1, 1, 2',
714: 1:    '2, 1, 3',
714: 1:    '3, 1, 4',
714: 1:    '2, 1, 1',
714: 1:    '2, 2, 6',
714: 1:    '6, 1, 11',
714: 1:    '5, 0, 1',
714: 1:    '3, 1, 8'
714: 1:  ]
714: 1:}
714: 1:Scores: 66532
714: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true']')
714: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
715: 1:BoardData {
715: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
715: 1:  'expectedAnswer': 'true',
715: 1:  'history': [
715: 1:    {
715: 1:      'answer': 'true',
715: 1:      'question': '0, 1, 5',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'true',
715: 1:      'question': '1, 0, 1',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'false',
715: 1:      'question': '1, 0, 2',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'true',
715: 1:      'question': '3, 1, 7',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'true',
715: 1:      'question': '4, 2, 14',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'false',
715: 1:      'question': '3, 2, 14',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'true',
715: 1:      'question': '0, 2, 5',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'true',
715: 1:      'question': '3, 1, 6',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'false',
715: 1:      'question': '3, 1, 9',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'false',
715: 1:      'question': '3, 2, 9',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'true',
715: 1:      'question': '10, 10, 0',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'false',
715: 1:      'question': '0, 0, 1',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'false',
715: 1:      'question': '0, 1, 1',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'false',
715: 1:      'question': '0, 0, 2',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'true',
715: 1:      'question': '2, 0, 2',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'false',
715: 1:      'question': '0, 1, 2',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'false',
715: 1:      'question': '1, 1, 2',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'false',
715: 1:      'question': '2, 1, 3',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'false',
715: 1:      'question': '3, 1, 4',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'true',
715: 1:      'question': '2, 1, 1',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'true',
715: 1:      'question': '2, 2, 6',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'true',
715: 1:      'question': '6, 1, 11',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'true',
715: 1:      'question': '5, 0, 1',
715: 1:      'valid': true
715: 1:    },
715: 1:    {
715: 1:      'answer': 'true',
715: 1:      'question': '3, 1, 8',
715: 1:      'valid': true
715: 1:    }
715: 1:  ],
715: 1:  'info': [
715: 1:    '✅f(0, 1, 5) = true',
715: 1:    '✅f(1, 0, 1) = true',
715: 1:    '✅f(1, 0, 2) = false',
715: 1:    '✅f(3, 1, 7) = true',
715: 1:    '✅f(4, 2, 14) = true',
715: 1:    '✅f(3, 2, 14) = false',
715: 1:    '✅f(0, 2, 5) = true',
715: 1:    '✅f(3, 1, 6) = true',
715: 1:    '✅f(3, 1, 9) = false',
715: 1:    '✅f(3, 2, 9) = false',
715: 1:    '✅f(10, 10, 0) = true',
715: 1:    '✅f(0, 0, 1) = false',
715: 1:    '✅f(0, 1, 1) = false',
715: 1:    '✅f(0, 0, 2) = false',
715: 1:    '✅f(2, 0, 2) = true',
715: 1:    '✅f(0, 1, 2) = false',
715: 1:    '✅f(1, 1, 2) = false',
715: 1:    '✅f(2, 1, 3) = false',
715: 1:    '✅f(3, 1, 4) = false',
715: 1:    '✅f(2, 1, 1) = true',
715: 1:    '✅f(2, 2, 6) = true',
715: 1:    '✅f(6, 1, 11) = true',
715: 1:    '✅f(5, 0, 1) = true',
715: 1:    '✅f(3, 1, 8) = true',
715: 1:    '❌f(3, 2, 10) = ??? != true'
715: 1:  ],
715: 1:  'level': 26,
715: 1:  'nextQuestion': '3, 2, 10',
715: 1:  'questions': [
715: 1:    '0, 1, 5',
715: 1:    '1, 0, 1',
715: 1:    '1, 0, 2',
715: 1:    '3, 1, 7',
715: 1:    '4, 2, 14',
715: 1:    '3, 2, 14',
715: 1:    '0, 2, 5',
715: 1:    '3, 1, 6',
715: 1:    '3, 1, 9',
715: 1:    '3, 2, 9',
715: 1:    '10, 10, 0',
715: 1:    '0, 0, 1',
715: 1:    '0, 1, 1',
715: 1:    '0, 0, 2',
715: 1:    '2, 0, 2',
715: 1:    '0, 1, 2',
715: 1:    '1, 1, 2',
715: 1:    '2, 1, 3',
715: 1:    '3, 1, 4',
715: 1:    '2, 1, 1',
715: 1:    '2, 2, 6',
715: 1:    '6, 1, 11',
715: 1:    '5, 0, 1',
715: 1:    '3, 1, 8',
715: 1:    '3, 2, 10'
715: 1:  ]
715: 1:}
715: 1:Scores: 66539
715: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true']')
715: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
716: 1:BoardData {
716: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
716: 1:  'expectedAnswer': 'true',
716: 1:  'history': [
716: 1:    {
716: 1:      'answer': 'true',
716: 1:      'question': '0, 1, 5',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'true',
716: 1:      'question': '1, 0, 1',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'false',
716: 1:      'question': '1, 0, 2',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'true',
716: 1:      'question': '3, 1, 7',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'true',
716: 1:      'question': '4, 2, 14',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'false',
716: 1:      'question': '3, 2, 14',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'true',
716: 1:      'question': '0, 2, 5',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'true',
716: 1:      'question': '3, 1, 6',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'false',
716: 1:      'question': '3, 1, 9',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'false',
716: 1:      'question': '3, 2, 9',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'true',
716: 1:      'question': '10, 10, 0',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'false',
716: 1:      'question': '0, 0, 1',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'false',
716: 1:      'question': '0, 1, 1',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'false',
716: 1:      'question': '0, 0, 2',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'true',
716: 1:      'question': '2, 0, 2',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'false',
716: 1:      'question': '0, 1, 2',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'false',
716: 1:      'question': '1, 1, 2',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'false',
716: 1:      'question': '2, 1, 3',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'false',
716: 1:      'question': '3, 1, 4',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'true',
716: 1:      'question': '2, 1, 1',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'true',
716: 1:      'question': '2, 2, 6',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'true',
716: 1:      'question': '6, 1, 11',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'true',
716: 1:      'question': '5, 0, 1',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'true',
716: 1:      'question': '3, 1, 8',
716: 1:      'valid': true
716: 1:    },
716: 1:    {
716: 1:      'answer': 'true',
716: 1:      'question': '3, 2, 10',
716: 1:      'valid': true
716: 1:    }
716: 1:  ],
716: 1:  'info': [
716: 1:    '✅f(0, 1, 5) = true',
716: 1:    '✅f(1, 0, 1) = true',
716: 1:    '✅f(1, 0, 2) = false',
716: 1:    '✅f(3, 1, 7) = true',
716: 1:    '✅f(4, 2, 14) = true',
716: 1:    '✅f(3, 2, 14) = false',
716: 1:    '✅f(0, 2, 5) = true',
716: 1:    '✅f(3, 1, 6) = true',
716: 1:    '✅f(3, 1, 9) = false',
716: 1:    '✅f(3, 2, 9) = false',
716: 1:    '✅f(10, 10, 0) = true',
716: 1:    '✅f(0, 0, 1) = false',
716: 1:    '✅f(0, 1, 1) = false',
716: 1:    '✅f(0, 0, 2) = false',
716: 1:    '✅f(2, 0, 2) = true',
716: 1:    '✅f(0, 1, 2) = false',
716: 1:    '✅f(1, 1, 2) = false',
716: 1:    '✅f(2, 1, 3) = false',
716: 1:    '✅f(3, 1, 4) = false',
716: 1:    '✅f(2, 1, 1) = true',
716: 1:    '✅f(2, 2, 6) = true',
716: 1:    '✅f(6, 1, 11) = true',
716: 1:    '✅f(5, 0, 1) = true',
716: 1:    '✅f(3, 1, 8) = true',
716: 1:    '✅f(3, 2, 10) = true',
716: 1:    '❌f(3, 2, 8) = ??? != true'
716: 1:  ],
716: 1:  'level': 26,
716: 1:  'nextQuestion': '3, 2, 8',
716: 1:  'questions': [
716: 1:    '0, 1, 5',
716: 1:    '1, 0, 1',
716: 1:    '1, 0, 2',
716: 1:    '3, 1, 7',
716: 1:    '4, 2, 14',
716: 1:    '3, 2, 14',
716: 1:    '0, 2, 5',
716: 1:    '3, 1, 6',
716: 1:    '3, 1, 9',
716: 1:    '3, 2, 9',
716: 1:    '10, 10, 0',
716: 1:    '0, 0, 1',
716: 1:    '0, 1, 1',
716: 1:    '0, 0, 2',
716: 1:    '2, 0, 2',
716: 1:    '0, 1, 2',
716: 1:    '1, 1, 2',
716: 1:    '2, 1, 3',
716: 1:    '3, 1, 4',
716: 1:    '2, 1, 1',
716: 1:    '2, 2, 6',
716: 1:    '6, 1, 11',
716: 1:    '5, 0, 1',
716: 1:    '3, 1, 8',
716: 1:    '3, 2, 10',
716: 1:    '3, 2, 8'
716: 1:  ]
716: 1:}
716: 1:Scores: 66546
716: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true']')
716: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
717: 1:BoardData {
717: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
717: 1:  'expectedAnswer': 'false',
717: 1:  'history': [
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '0, 1, 5',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '1, 0, 1',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'false',
717: 1:      'question': '1, 0, 2',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '3, 1, 7',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '4, 2, 14',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'false',
717: 1:      'question': '3, 2, 14',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '0, 2, 5',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '3, 1, 6',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'false',
717: 1:      'question': '3, 1, 9',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'false',
717: 1:      'question': '3, 2, 9',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '10, 10, 0',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'false',
717: 1:      'question': '0, 0, 1',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'false',
717: 1:      'question': '0, 1, 1',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'false',
717: 1:      'question': '0, 0, 2',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '2, 0, 2',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'false',
717: 1:      'question': '0, 1, 2',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'false',
717: 1:      'question': '1, 1, 2',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'false',
717: 1:      'question': '2, 1, 3',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'false',
717: 1:      'question': '3, 1, 4',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '2, 1, 1',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '2, 2, 6',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '6, 1, 11',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '5, 0, 1',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '3, 1, 8',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '3, 2, 10',
717: 1:      'valid': true
717: 1:    },
717: 1:    {
717: 1:      'answer': 'true',
717: 1:      'question': '3, 2, 8',
717: 1:      'valid': true
717: 1:    }
717: 1:  ],
717: 1:  'info': [
717: 1:    '✅f(0, 1, 5) = true',
717: 1:    '✅f(1, 0, 1) = true',
717: 1:    '✅f(1, 0, 2) = false',
717: 1:    '✅f(3, 1, 7) = true',
717: 1:    '✅f(4, 2, 14) = true',
717: 1:    '✅f(3, 2, 14) = false',
717: 1:    '✅f(0, 2, 5) = true',
717: 1:    '✅f(3, 1, 6) = true',
717: 1:    '✅f(3, 1, 9) = false',
717: 1:    '✅f(3, 2, 9) = false',
717: 1:    '✅f(10, 10, 0) = true',
717: 1:    '✅f(0, 0, 1) = false',
717: 1:    '✅f(0, 1, 1) = false',
717: 1:    '✅f(0, 0, 2) = false',
717: 1:    '✅f(2, 0, 2) = true',
717: 1:    '✅f(0, 1, 2) = false',
717: 1:    '✅f(1, 1, 2) = false',
717: 1:    '✅f(2, 1, 3) = false',
717: 1:    '✅f(3, 1, 4) = false',
717: 1:    '✅f(2, 1, 1) = true',
717: 1:    '✅f(2, 2, 6) = true',
717: 1:    '✅f(6, 1, 11) = true',
717: 1:    '✅f(5, 0, 1) = true',
717: 1:    '✅f(3, 1, 8) = true',
717: 1:    '✅f(3, 2, 10) = true',
717: 1:    '✅f(3, 2, 8) = true',
717: 1:    '❌f(6, 0, 11) = ??? != false'
717: 1:  ],
717: 1:  'level': 26,
717: 1:  'nextQuestion': '6, 0, 11',
717: 1:  'questions': [
717: 1:    '0, 1, 5',
717: 1:    '1, 0, 1',
717: 1:    '1, 0, 2',
717: 1:    '3, 1, 7',
717: 1:    '4, 2, 14',
717: 1:    '3, 2, 14',
717: 1:    '0, 2, 5',
717: 1:    '3, 1, 6',
717: 1:    '3, 1, 9',
717: 1:    '3, 2, 9',
717: 1:    '10, 10, 0',
717: 1:    '0, 0, 1',
717: 1:    '0, 1, 1',
717: 1:    '0, 0, 2',
717: 1:    '2, 0, 2',
717: 1:    '0, 1, 2',
717: 1:    '1, 1, 2',
717: 1:    '2, 1, 3',
717: 1:    '3, 1, 4',
717: 1:    '2, 1, 1',
717: 1:    '2, 2, 6',
717: 1:    '6, 1, 11',
717: 1:    '5, 0, 1',
717: 1:    '3, 1, 8',
717: 1:    '3, 2, 10',
717: 1:    '3, 2, 8',
717: 1:    '6, 0, 11'
717: 1:  ]
717: 1:}
717: 1:Scores: 66553
717: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false']')
717: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
718: 1:BoardData {
718: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
718: 1:  'expectedAnswer': 'true',
718: 1:  'history': [
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '0, 1, 5',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '1, 0, 1',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'false',
718: 1:      'question': '1, 0, 2',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '3, 1, 7',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '4, 2, 14',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'false',
718: 1:      'question': '3, 2, 14',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '0, 2, 5',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '3, 1, 6',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'false',
718: 1:      'question': '3, 1, 9',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'false',
718: 1:      'question': '3, 2, 9',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '10, 10, 0',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'false',
718: 1:      'question': '0, 0, 1',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'false',
718: 1:      'question': '0, 1, 1',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'false',
718: 1:      'question': '0, 0, 2',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '2, 0, 2',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'false',
718: 1:      'question': '0, 1, 2',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'false',
718: 1:      'question': '1, 1, 2',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'false',
718: 1:      'question': '2, 1, 3',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'false',
718: 1:      'question': '3, 1, 4',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '2, 1, 1',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '2, 2, 6',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '6, 1, 11',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '5, 0, 1',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '3, 1, 8',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '3, 2, 10',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'true',
718: 1:      'question': '3, 2, 8',
718: 1:      'valid': true
718: 1:    },
718: 1:    {
718: 1:      'answer': 'false',
718: 1:      'question': '6, 0, 11',
718: 1:      'valid': true
718: 1:    }
718: 1:  ],
718: 1:  'info': [
718: 1:    '✅f(0, 1, 5) = true',
718: 1:    '✅f(1, 0, 1) = true',
718: 1:    '✅f(1, 0, 2) = false',
718: 1:    '✅f(3, 1, 7) = true',
718: 1:    '✅f(4, 2, 14) = true',
718: 1:    '✅f(3, 2, 14) = false',
718: 1:    '✅f(0, 2, 5) = true',
718: 1:    '✅f(3, 1, 6) = true',
718: 1:    '✅f(3, 1, 9) = false',
718: 1:    '✅f(3, 2, 9) = false',
718: 1:    '✅f(10, 10, 0) = true',
718: 1:    '✅f(0, 0, 1) = false',
718: 1:    '✅f(0, 1, 1) = false',
718: 1:    '✅f(0, 0, 2) = false',
718: 1:    '✅f(2, 0, 2) = true',
718: 1:    '✅f(0, 1, 2) = false',
718: 1:    '✅f(1, 1, 2) = false',
718: 1:    '✅f(2, 1, 3) = false',
718: 1:    '✅f(3, 1, 4) = false',
718: 1:    '✅f(2, 1, 1) = true',
718: 1:    '✅f(2, 2, 6) = true',
718: 1:    '✅f(6, 1, 11) = true',
718: 1:    '✅f(5, 0, 1) = true',
718: 1:    '✅f(3, 1, 8) = true',
718: 1:    '✅f(3, 2, 10) = true',
718: 1:    '✅f(3, 2, 8) = true',
718: 1:    '✅f(6, 0, 11) = false',
718: 1:    '❌f(1, 4, 11) = ??? != true'
718: 1:  ],
718: 1:  'level': 26,
718: 1:  'nextQuestion': '1, 4, 11',
718: 1:  'questions': [
718: 1:    '0, 1, 5',
718: 1:    '1, 0, 1',
718: 1:    '1, 0, 2',
718: 1:    '3, 1, 7',
718: 1:    '4, 2, 14',
718: 1:    '3, 2, 14',
718: 1:    '0, 2, 5',
718: 1:    '3, 1, 6',
718: 1:    '3, 1, 9',
718: 1:    '3, 2, 9',
718: 1:    '10, 10, 0',
718: 1:    '0, 0, 1',
718: 1:    '0, 1, 1',
718: 1:    '0, 0, 2',
718: 1:    '2, 0, 2',
718: 1:    '0, 1, 2',
718: 1:    '1, 1, 2',
718: 1:    '2, 1, 3',
718: 1:    '3, 1, 4',
718: 1:    '2, 1, 1',
718: 1:    '2, 2, 6',
718: 1:    '6, 1, 11',
718: 1:    '5, 0, 1',
718: 1:    '3, 1, 8',
718: 1:    '3, 2, 10',
718: 1:    '3, 2, 8',
718: 1:    '6, 0, 11',
718: 1:    '1, 4, 11'
718: 1:  ]
718: 1:}
718: 1:Scores: 66560
718: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true']')
718: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
719: 1:BoardData {
719: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
719: 1:  'expectedAnswer': 'true',
719: 1:  'history': [
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '0, 1, 5',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '1, 0, 1',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'false',
719: 1:      'question': '1, 0, 2',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '3, 1, 7',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '4, 2, 14',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'false',
719: 1:      'question': '3, 2, 14',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '0, 2, 5',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '3, 1, 6',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'false',
719: 1:      'question': '3, 1, 9',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'false',
719: 1:      'question': '3, 2, 9',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '10, 10, 0',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'false',
719: 1:      'question': '0, 0, 1',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'false',
719: 1:      'question': '0, 1, 1',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'false',
719: 1:      'question': '0, 0, 2',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '2, 0, 2',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'false',
719: 1:      'question': '0, 1, 2',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'false',
719: 1:      'question': '1, 1, 2',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'false',
719: 1:      'question': '2, 1, 3',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'false',
719: 1:      'question': '3, 1, 4',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '2, 1, 1',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '2, 2, 6',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '6, 1, 11',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '5, 0, 1',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '3, 1, 8',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '3, 2, 10',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '3, 2, 8',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'false',
719: 1:      'question': '6, 0, 11',
719: 1:      'valid': true
719: 1:    },
719: 1:    {
719: 1:      'answer': 'true',
719: 1:      'question': '1, 4, 11',
719: 1:      'valid': true
719: 1:    }
719: 1:  ],
719: 1:  'info': [
719: 1:    '✅f(0, 1, 5) = true',
719: 1:    '✅f(1, 0, 1) = true',
719: 1:    '✅f(1, 0, 2) = false',
719: 1:    '✅f(3, 1, 7) = true',
719: 1:    '✅f(4, 2, 14) = true',
719: 1:    '✅f(3, 2, 14) = false',
719: 1:    '✅f(0, 2, 5) = true',
719: 1:    '✅f(3, 1, 6) = true',
719: 1:    '✅f(3, 1, 9) = false',
719: 1:    '✅f(3, 2, 9) = false',
719: 1:    '✅f(10, 10, 0) = true',
719: 1:    '✅f(0, 0, 1) = false',
719: 1:    '✅f(0, 1, 1) = false',
719: 1:    '✅f(0, 0, 2) = false',
719: 1:    '✅f(2, 0, 2) = true',
719: 1:    '✅f(0, 1, 2) = false',
719: 1:    '✅f(1, 1, 2) = false',
719: 1:    '✅f(2, 1, 3) = false',
719: 1:    '✅f(3, 1, 4) = false',
719: 1:    '✅f(2, 1, 1) = true',
719: 1:    '✅f(2, 2, 6) = true',
719: 1:    '✅f(6, 1, 11) = true',
719: 1:    '✅f(5, 0, 1) = true',
719: 1:    '✅f(3, 1, 8) = true',
719: 1:    '✅f(3, 2, 10) = true',
719: 1:    '✅f(3, 2, 8) = true',
719: 1:    '✅f(6, 0, 11) = false',
719: 1:    '✅f(1, 4, 11) = true',
719: 1:    '❌f(0, 3, 10) = ??? != true'
719: 1:  ],
719: 1:  'level': 26,
719: 1:  'nextQuestion': '0, 3, 10',
719: 1:  'questions': [
719: 1:    '0, 1, 5',
719: 1:    '1, 0, 1',
719: 1:    '1, 0, 2',
719: 1:    '3, 1, 7',
719: 1:    '4, 2, 14',
719: 1:    '3, 2, 14',
719: 1:    '0, 2, 5',
719: 1:    '3, 1, 6',
719: 1:    '3, 1, 9',
719: 1:    '3, 2, 9',
719: 1:    '10, 10, 0',
719: 1:    '0, 0, 1',
719: 1:    '0, 1, 1',
719: 1:    '0, 0, 2',
719: 1:    '2, 0, 2',
719: 1:    '0, 1, 2',
719: 1:    '1, 1, 2',
719: 1:    '2, 1, 3',
719: 1:    '3, 1, 4',
719: 1:    '2, 1, 1',
719: 1:    '2, 2, 6',
719: 1:    '6, 1, 11',
719: 1:    '5, 0, 1',
719: 1:    '3, 1, 8',
719: 1:    '3, 2, 10',
719: 1:    '3, 2, 8',
719: 1:    '6, 0, 11',
719: 1:    '1, 4, 11',
719: 1:    '0, 3, 10'
719: 1:  ]
719: 1:}
719: 1:Scores: 66567
719: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true']')
719: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
720: 1:BoardData {
720: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
720: 1:  'expectedAnswer': 'false',
720: 1:  'history': [
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '0, 1, 5',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '1, 0, 1',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'false',
720: 1:      'question': '1, 0, 2',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '3, 1, 7',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '4, 2, 14',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'false',
720: 1:      'question': '3, 2, 14',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '0, 2, 5',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '3, 1, 6',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'false',
720: 1:      'question': '3, 1, 9',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'false',
720: 1:      'question': '3, 2, 9',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '10, 10, 0',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'false',
720: 1:      'question': '0, 0, 1',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'false',
720: 1:      'question': '0, 1, 1',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'false',
720: 1:      'question': '0, 0, 2',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '2, 0, 2',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'false',
720: 1:      'question': '0, 1, 2',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'false',
720: 1:      'question': '1, 1, 2',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'false',
720: 1:      'question': '2, 1, 3',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'false',
720: 1:      'question': '3, 1, 4',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '2, 1, 1',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '2, 2, 6',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '6, 1, 11',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '5, 0, 1',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '3, 1, 8',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '3, 2, 10',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '3, 2, 8',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'false',
720: 1:      'question': '6, 0, 11',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '1, 4, 11',
720: 1:      'valid': true
720: 1:    },
720: 1:    {
720: 1:      'answer': 'true',
720: 1:      'question': '0, 3, 10',
720: 1:      'valid': true
720: 1:    }
720: 1:  ],
720: 1:  'info': [
720: 1:    '✅f(0, 1, 5) = true',
720: 1:    '✅f(1, 0, 1) = true',
720: 1:    '✅f(1, 0, 2) = false',
720: 1:    '✅f(3, 1, 7) = true',
720: 1:    '✅f(4, 2, 14) = true',
720: 1:    '✅f(3, 2, 14) = false',
720: 1:    '✅f(0, 2, 5) = true',
720: 1:    '✅f(3, 1, 6) = true',
720: 1:    '✅f(3, 1, 9) = false',
720: 1:    '✅f(3, 2, 9) = false',
720: 1:    '✅f(10, 10, 0) = true',
720: 1:    '✅f(0, 0, 1) = false',
720: 1:    '✅f(0, 1, 1) = false',
720: 1:    '✅f(0, 0, 2) = false',
720: 1:    '✅f(2, 0, 2) = true',
720: 1:    '✅f(0, 1, 2) = false',
720: 1:    '✅f(1, 1, 2) = false',
720: 1:    '✅f(2, 1, 3) = false',
720: 1:    '✅f(3, 1, 4) = false',
720: 1:    '✅f(2, 1, 1) = true',
720: 1:    '✅f(2, 2, 6) = true',
720: 1:    '✅f(6, 1, 11) = true',
720: 1:    '✅f(5, 0, 1) = true',
720: 1:    '✅f(3, 1, 8) = true',
720: 1:    '✅f(3, 2, 10) = true',
720: 1:    '✅f(3, 2, 8) = true',
720: 1:    '✅f(6, 0, 11) = false',
720: 1:    '✅f(1, 4, 11) = true',
720: 1:    '✅f(0, 3, 10) = true',
720: 1:    '❌f(1, 4, 12) = ??? != false'
720: 1:  ],
720: 1:  'level': 26,
720: 1:  'nextQuestion': '1, 4, 12',
720: 1:  'questions': [
720: 1:    '0, 1, 5',
720: 1:    '1, 0, 1',
720: 1:    '1, 0, 2',
720: 1:    '3, 1, 7',
720: 1:    '4, 2, 14',
720: 1:    '3, 2, 14',
720: 1:    '0, 2, 5',
720: 1:    '3, 1, 6',
720: 1:    '3, 1, 9',
720: 1:    '3, 2, 9',
720: 1:    '10, 10, 0',
720: 1:    '0, 0, 1',
720: 1:    '0, 1, 1',
720: 1:    '0, 0, 2',
720: 1:    '2, 0, 2',
720: 1:    '0, 1, 2',
720: 1:    '1, 1, 2',
720: 1:    '2, 1, 3',
720: 1:    '3, 1, 4',
720: 1:    '2, 1, 1',
720: 1:    '2, 2, 6',
720: 1:    '6, 1, 11',
720: 1:    '5, 0, 1',
720: 1:    '3, 1, 8',
720: 1:    '3, 2, 10',
720: 1:    '3, 2, 8',
720: 1:    '6, 0, 11',
720: 1:    '1, 4, 11',
720: 1:    '0, 3, 10',
720: 1:    '1, 4, 12'
720: 1:  ]
720: 1:}
720: 1:Scores: 66574
720: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false']')
720: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
721: 1:BoardData {
721: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
721: 1:  'expectedAnswer': 'false',
721: 1:  'history': [
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '0, 1, 5',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '1, 0, 1',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'false',
721: 1:      'question': '1, 0, 2',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '3, 1, 7',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '4, 2, 14',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'false',
721: 1:      'question': '3, 2, 14',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '0, 2, 5',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '3, 1, 6',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'false',
721: 1:      'question': '3, 1, 9',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'false',
721: 1:      'question': '3, 2, 9',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '10, 10, 0',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'false',
721: 1:      'question': '0, 0, 1',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'false',
721: 1:      'question': '0, 1, 1',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'false',
721: 1:      'question': '0, 0, 2',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '2, 0, 2',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'false',
721: 1:      'question': '0, 1, 2',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'false',
721: 1:      'question': '1, 1, 2',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'false',
721: 1:      'question': '2, 1, 3',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'false',
721: 1:      'question': '3, 1, 4',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '2, 1, 1',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '2, 2, 6',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '6, 1, 11',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '5, 0, 1',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '3, 1, 8',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '3, 2, 10',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '3, 2, 8',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'false',
721: 1:      'question': '6, 0, 11',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '1, 4, 11',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'true',
721: 1:      'question': '0, 3, 10',
721: 1:      'valid': true
721: 1:    },
721: 1:    {
721: 1:      'answer': 'false',
721: 1:      'question': '1, 4, 12',
721: 1:      'valid': true
721: 1:    }
721: 1:  ],
721: 1:  'info': [
721: 1:    '✅f(0, 1, 5) = true',
721: 1:    '✅f(1, 0, 1) = true',
721: 1:    '✅f(1, 0, 2) = false',
721: 1:    '✅f(3, 1, 7) = true',
721: 1:    '✅f(4, 2, 14) = true',
721: 1:    '✅f(3, 2, 14) = false',
721: 1:    '✅f(0, 2, 5) = true',
721: 1:    '✅f(3, 1, 6) = true',
721: 1:    '✅f(3, 1, 9) = false',
721: 1:    '✅f(3, 2, 9) = false',
721: 1:    '✅f(10, 10, 0) = true',
721: 1:    '✅f(0, 0, 1) = false',
721: 1:    '✅f(0, 1, 1) = false',
721: 1:    '✅f(0, 0, 2) = false',
721: 1:    '✅f(2, 0, 2) = true',
721: 1:    '✅f(0, 1, 2) = false',
721: 1:    '✅f(1, 1, 2) = false',
721: 1:    '✅f(2, 1, 3) = false',
721: 1:    '✅f(3, 1, 4) = false',
721: 1:    '✅f(2, 1, 1) = true',
721: 1:    '✅f(2, 2, 6) = true',
721: 1:    '✅f(6, 1, 11) = true',
721: 1:    '✅f(5, 0, 1) = true',
721: 1:    '✅f(3, 1, 8) = true',
721: 1:    '✅f(3, 2, 10) = true',
721: 1:    '✅f(3, 2, 8) = true',
721: 1:    '✅f(6, 0, 11) = false',
721: 1:    '✅f(1, 4, 11) = true',
721: 1:    '✅f(0, 3, 10) = true',
721: 1:    '✅f(1, 4, 12) = false',
721: 1:    '❌f(1, 1, 7) = ??? != false'
721: 1:  ],
721: 1:  'level': 26,
721: 1:  'nextQuestion': '1, 1, 7',
721: 1:  'questions': [
721: 1:    '0, 1, 5',
721: 1:    '1, 0, 1',
721: 1:    '1, 0, 2',
721: 1:    '3, 1, 7',
721: 1:    '4, 2, 14',
721: 1:    '3, 2, 14',
721: 1:    '0, 2, 5',
721: 1:    '3, 1, 6',
721: 1:    '3, 1, 9',
721: 1:    '3, 2, 9',
721: 1:    '10, 10, 0',
721: 1:    '0, 0, 1',
721: 1:    '0, 1, 1',
721: 1:    '0, 0, 2',
721: 1:    '2, 0, 2',
721: 1:    '0, 1, 2',
721: 1:    '1, 1, 2',
721: 1:    '2, 1, 3',
721: 1:    '3, 1, 4',
721: 1:    '2, 1, 1',
721: 1:    '2, 2, 6',
721: 1:    '6, 1, 11',
721: 1:    '5, 0, 1',
721: 1:    '3, 1, 8',
721: 1:    '3, 2, 10',
721: 1:    '3, 2, 8',
721: 1:    '6, 0, 11',
721: 1:    '1, 4, 11',
721: 1:    '0, 3, 10',
721: 1:    '1, 4, 12',
721: 1:    '1, 1, 7'
721: 1:  ]
721: 1:}
721: 1:Scores: 66581
721: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false']')
721: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
722: 1:BoardData {
722: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
722: 1:  'expectedAnswer': 'true',
722: 1:  'history': [
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '0, 1, 5',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '1, 0, 1',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'false',
722: 1:      'question': '1, 0, 2',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '3, 1, 7',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '4, 2, 14',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'false',
722: 1:      'question': '3, 2, 14',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '0, 2, 5',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '3, 1, 6',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'false',
722: 1:      'question': '3, 1, 9',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'false',
722: 1:      'question': '3, 2, 9',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '10, 10, 0',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'false',
722: 1:      'question': '0, 0, 1',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'false',
722: 1:      'question': '0, 1, 1',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'false',
722: 1:      'question': '0, 0, 2',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '2, 0, 2',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'false',
722: 1:      'question': '0, 1, 2',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'false',
722: 1:      'question': '1, 1, 2',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'false',
722: 1:      'question': '2, 1, 3',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'false',
722: 1:      'question': '3, 1, 4',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '2, 1, 1',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '2, 2, 6',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '6, 1, 11',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '5, 0, 1',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '3, 1, 8',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '3, 2, 10',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '3, 2, 8',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'false',
722: 1:      'question': '6, 0, 11',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '1, 4, 11',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'true',
722: 1:      'question': '0, 3, 10',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'false',
722: 1:      'question': '1, 4, 12',
722: 1:      'valid': true
722: 1:    },
722: 1:    {
722: 1:      'answer': 'false',
722: 1:      'question': '1, 1, 7',
722: 1:      'valid': true
722: 1:    }
722: 1:  ],
722: 1:  'info': [
722: 1:    '✅f(0, 1, 5) = true',
722: 1:    '✅f(1, 0, 1) = true',
722: 1:    '✅f(1, 0, 2) = false',
722: 1:    '✅f(3, 1, 7) = true',
722: 1:    '✅f(4, 2, 14) = true',
722: 1:    '✅f(3, 2, 14) = false',
722: 1:    '✅f(0, 2, 5) = true',
722: 1:    '✅f(3, 1, 6) = true',
722: 1:    '✅f(3, 1, 9) = false',
722: 1:    '✅f(3, 2, 9) = false',
722: 1:    '✅f(10, 10, 0) = true',
722: 1:    '✅f(0, 0, 1) = false',
722: 1:    '✅f(0, 1, 1) = false',
722: 1:    '✅f(0, 0, 2) = false',
722: 1:    '✅f(2, 0, 2) = true',
722: 1:    '✅f(0, 1, 2) = false',
722: 1:    '✅f(1, 1, 2) = false',
722: 1:    '✅f(2, 1, 3) = false',
722: 1:    '✅f(3, 1, 4) = false',
722: 1:    '✅f(2, 1, 1) = true',
722: 1:    '✅f(2, 2, 6) = true',
722: 1:    '✅f(6, 1, 11) = true',
722: 1:    '✅f(5, 0, 1) = true',
722: 1:    '✅f(3, 1, 8) = true',
722: 1:    '✅f(3, 2, 10) = true',
722: 1:    '✅f(3, 2, 8) = true',
722: 1:    '✅f(6, 0, 11) = false',
722: 1:    '✅f(1, 4, 11) = true',
722: 1:    '✅f(0, 3, 10) = true',
722: 1:    '✅f(1, 4, 12) = false',
722: 1:    '✅f(1, 1, 7) = false',
722: 1:    '❌f(2, 1, 7) = ??? != true'
722: 1:  ],
722: 1:  'level': 26,
722: 1:  'nextQuestion': '2, 1, 7',
722: 1:  'questions': [
722: 1:    '0, 1, 5',
722: 1:    '1, 0, 1',
722: 1:    '1, 0, 2',
722: 1:    '3, 1, 7',
722: 1:    '4, 2, 14',
722: 1:    '3, 2, 14',
722: 1:    '0, 2, 5',
722: 1:    '3, 1, 6',
722: 1:    '3, 1, 9',
722: 1:    '3, 2, 9',
722: 1:    '10, 10, 0',
722: 1:    '0, 0, 1',
722: 1:    '0, 1, 1',
722: 1:    '0, 0, 2',
722: 1:    '2, 0, 2',
722: 1:    '0, 1, 2',
722: 1:    '1, 1, 2',
722: 1:    '2, 1, 3',
722: 1:    '3, 1, 4',
722: 1:    '2, 1, 1',
722: 1:    '2, 2, 6',
722: 1:    '6, 1, 11',
722: 1:    '5, 0, 1',
722: 1:    '3, 1, 8',
722: 1:    '3, 2, 10',
722: 1:    '3, 2, 8',
722: 1:    '6, 0, 11',
722: 1:    '1, 4, 11',
722: 1:    '0, 3, 10',
722: 1:    '1, 4, 12',
722: 1:    '1, 1, 7',
722: 1:    '2, 1, 7'
722: 1:  ]
722: 1:}
722: 1:Scores: 66588
722: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true']')
722: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
723: 1:BoardData {
723: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
723: 1:  'expectedAnswer': 'true',
723: 1:  'history': [
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '0, 1, 5',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '1, 0, 1',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'false',
723: 1:      'question': '1, 0, 2',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '3, 1, 7',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '4, 2, 14',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'false',
723: 1:      'question': '3, 2, 14',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '0, 2, 5',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '3, 1, 6',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'false',
723: 1:      'question': '3, 1, 9',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'false',
723: 1:      'question': '3, 2, 9',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '10, 10, 0',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'false',
723: 1:      'question': '0, 0, 1',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'false',
723: 1:      'question': '0, 1, 1',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'false',
723: 1:      'question': '0, 0, 2',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '2, 0, 2',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'false',
723: 1:      'question': '0, 1, 2',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'false',
723: 1:      'question': '1, 1, 2',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'false',
723: 1:      'question': '2, 1, 3',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'false',
723: 1:      'question': '3, 1, 4',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '2, 1, 1',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '2, 2, 6',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '6, 1, 11',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '5, 0, 1',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '3, 1, 8',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '3, 2, 10',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '3, 2, 8',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'false',
723: 1:      'question': '6, 0, 11',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '1, 4, 11',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '0, 3, 10',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'false',
723: 1:      'question': '1, 4, 12',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'false',
723: 1:      'question': '1, 1, 7',
723: 1:      'valid': true
723: 1:    },
723: 1:    {
723: 1:      'answer': 'true',
723: 1:      'question': '2, 1, 7',
723: 1:      'valid': true
723: 1:    }
723: 1:  ],
723: 1:  'info': [
723: 1:    '✅f(0, 1, 5) = true',
723: 1:    '✅f(1, 0, 1) = true',
723: 1:    '✅f(1, 0, 2) = false',
723: 1:    '✅f(3, 1, 7) = true',
723: 1:    '✅f(4, 2, 14) = true',
723: 1:    '✅f(3, 2, 14) = false',
723: 1:    '✅f(0, 2, 5) = true',
723: 1:    '✅f(3, 1, 6) = true',
723: 1:    '✅f(3, 1, 9) = false',
723: 1:    '✅f(3, 2, 9) = false',
723: 1:    '✅f(10, 10, 0) = true',
723: 1:    '✅f(0, 0, 1) = false',
723: 1:    '✅f(0, 1, 1) = false',
723: 1:    '✅f(0, 0, 2) = false',
723: 1:    '✅f(2, 0, 2) = true',
723: 1:    '✅f(0, 1, 2) = false',
723: 1:    '✅f(1, 1, 2) = false',
723: 1:    '✅f(2, 1, 3) = false',
723: 1:    '✅f(3, 1, 4) = false',
723: 1:    '✅f(2, 1, 1) = true',
723: 1:    '✅f(2, 2, 6) = true',
723: 1:    '✅f(6, 1, 11) = true',
723: 1:    '✅f(5, 0, 1) = true',
723: 1:    '✅f(3, 1, 8) = true',
723: 1:    '✅f(3, 2, 10) = true',
723: 1:    '✅f(3, 2, 8) = true',
723: 1:    '✅f(6, 0, 11) = false',
723: 1:    '✅f(1, 4, 11) = true',
723: 1:    '✅f(0, 3, 10) = true',
723: 1:    '✅f(1, 4, 12) = false',
723: 1:    '✅f(1, 1, 7) = false',
723: 1:    '✅f(2, 1, 7) = true',
723: 1:    '❌f(7, 1, 11) = ??? != true'
723: 1:  ],
723: 1:  'level': 26,
723: 1:  'nextQuestion': '7, 1, 11',
723: 1:  'questions': [
723: 1:    '0, 1, 5',
723: 1:    '1, 0, 1',
723: 1:    '1, 0, 2',
723: 1:    '3, 1, 7',
723: 1:    '4, 2, 14',
723: 1:    '3, 2, 14',
723: 1:    '0, 2, 5',
723: 1:    '3, 1, 6',
723: 1:    '3, 1, 9',
723: 1:    '3, 2, 9',
723: 1:    '10, 10, 0',
723: 1:    '0, 0, 1',
723: 1:    '0, 1, 1',
723: 1:    '0, 0, 2',
723: 1:    '2, 0, 2',
723: 1:    '0, 1, 2',
723: 1:    '1, 1, 2',
723: 1:    '2, 1, 3',
723: 1:    '3, 1, 4',
723: 1:    '2, 1, 1',
723: 1:    '2, 2, 6',
723: 1:    '6, 1, 11',
723: 1:    '5, 0, 1',
723: 1:    '3, 1, 8',
723: 1:    '3, 2, 10',
723: 1:    '3, 2, 8',
723: 1:    '6, 0, 11',
723: 1:    '1, 4, 11',
723: 1:    '0, 3, 10',
723: 1:    '1, 4, 12',
723: 1:    '1, 1, 7',
723: 1:    '2, 1, 7',
723: 1:    '7, 1, 11'
723: 1:  ]
723: 1:}
723: 1:Scores: 66595
723: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true']')
723: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
724: 1:BoardData {
724: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
724: 1:  'expectedAnswer': 'true',
724: 1:  'history': [
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '0, 1, 5',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '1, 0, 1',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'false',
724: 1:      'question': '1, 0, 2',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '3, 1, 7',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '4, 2, 14',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'false',
724: 1:      'question': '3, 2, 14',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '0, 2, 5',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '3, 1, 6',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'false',
724: 1:      'question': '3, 1, 9',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'false',
724: 1:      'question': '3, 2, 9',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '10, 10, 0',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'false',
724: 1:      'question': '0, 0, 1',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'false',
724: 1:      'question': '0, 1, 1',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'false',
724: 1:      'question': '0, 0, 2',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '2, 0, 2',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'false',
724: 1:      'question': '0, 1, 2',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'false',
724: 1:      'question': '1, 1, 2',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'false',
724: 1:      'question': '2, 1, 3',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'false',
724: 1:      'question': '3, 1, 4',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '2, 1, 1',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '2, 2, 6',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '6, 1, 11',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '5, 0, 1',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '3, 1, 8',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '3, 2, 10',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '3, 2, 8',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'false',
724: 1:      'question': '6, 0, 11',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '1, 4, 11',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '0, 3, 10',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'false',
724: 1:      'question': '1, 4, 12',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'false',
724: 1:      'question': '1, 1, 7',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '2, 1, 7',
724: 1:      'valid': true
724: 1:    },
724: 1:    {
724: 1:      'answer': 'true',
724: 1:      'question': '7, 1, 11',
724: 1:      'valid': true
724: 1:    }
724: 1:  ],
724: 1:  'info': [
724: 1:    '✅f(0, 1, 5) = true',
724: 1:    '✅f(1, 0, 1) = true',
724: 1:    '✅f(1, 0, 2) = false',
724: 1:    '✅f(3, 1, 7) = true',
724: 1:    '✅f(4, 2, 14) = true',
724: 1:    '✅f(3, 2, 14) = false',
724: 1:    '✅f(0, 2, 5) = true',
724: 1:    '✅f(3, 1, 6) = true',
724: 1:    '✅f(3, 1, 9) = false',
724: 1:    '✅f(3, 2, 9) = false',
724: 1:    '✅f(10, 10, 0) = true',
724: 1:    '✅f(0, 0, 1) = false',
724: 1:    '✅f(0, 1, 1) = false',
724: 1:    '✅f(0, 0, 2) = false',
724: 1:    '✅f(2, 0, 2) = true',
724: 1:    '✅f(0, 1, 2) = false',
724: 1:    '✅f(1, 1, 2) = false',
724: 1:    '✅f(2, 1, 3) = false',
724: 1:    '✅f(3, 1, 4) = false',
724: 1:    '✅f(2, 1, 1) = true',
724: 1:    '✅f(2, 2, 6) = true',
724: 1:    '✅f(6, 1, 11) = true',
724: 1:    '✅f(5, 0, 1) = true',
724: 1:    '✅f(3, 1, 8) = true',
724: 1:    '✅f(3, 2, 10) = true',
724: 1:    '✅f(3, 2, 8) = true',
724: 1:    '✅f(6, 0, 11) = false',
724: 1:    '✅f(1, 4, 11) = true',
724: 1:    '✅f(0, 3, 10) = true',
724: 1:    '✅f(1, 4, 12) = false',
724: 1:    '✅f(1, 1, 7) = false',
724: 1:    '✅f(2, 1, 7) = true',
724: 1:    '✅f(7, 1, 11) = true',
724: 1:    '❌f(7, 1, 8) = ??? != true'
724: 1:  ],
724: 1:  'level': 26,
724: 1:  'nextQuestion': '7, 1, 8',
724: 1:  'questions': [
724: 1:    '0, 1, 5',
724: 1:    '1, 0, 1',
724: 1:    '1, 0, 2',
724: 1:    '3, 1, 7',
724: 1:    '4, 2, 14',
724: 1:    '3, 2, 14',
724: 1:    '0, 2, 5',
724: 1:    '3, 1, 6',
724: 1:    '3, 1, 9',
724: 1:    '3, 2, 9',
724: 1:    '10, 10, 0',
724: 1:    '0, 0, 1',
724: 1:    '0, 1, 1',
724: 1:    '0, 0, 2',
724: 1:    '2, 0, 2',
724: 1:    '0, 1, 2',
724: 1:    '1, 1, 2',
724: 1:    '2, 1, 3',
724: 1:    '3, 1, 4',
724: 1:    '2, 1, 1',
724: 1:    '2, 2, 6',
724: 1:    '6, 1, 11',
724: 1:    '5, 0, 1',
724: 1:    '3, 1, 8',
724: 1:    '3, 2, 10',
724: 1:    '3, 2, 8',
724: 1:    '6, 0, 11',
724: 1:    '1, 4, 11',
724: 1:    '0, 3, 10',
724: 1:    '1, 4, 12',
724: 1:    '1, 1, 7',
724: 1:    '2, 1, 7',
724: 1:    '7, 1, 11',
724: 1:    '7, 1, 8'
724: 1:  ]
724: 1:}
724: 1:Scores: 66602
724: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true']')
724: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
725: 1:BoardData {
725: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
725: 1:  'expectedAnswer': 'false',
725: 1:  'history': [
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '0, 1, 5',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '1, 0, 1',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'false',
725: 1:      'question': '1, 0, 2',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '3, 1, 7',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '4, 2, 14',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'false',
725: 1:      'question': '3, 2, 14',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '0, 2, 5',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '3, 1, 6',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'false',
725: 1:      'question': '3, 1, 9',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'false',
725: 1:      'question': '3, 2, 9',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '10, 10, 0',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'false',
725: 1:      'question': '0, 0, 1',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'false',
725: 1:      'question': '0, 1, 1',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'false',
725: 1:      'question': '0, 0, 2',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '2, 0, 2',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'false',
725: 1:      'question': '0, 1, 2',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'false',
725: 1:      'question': '1, 1, 2',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'false',
725: 1:      'question': '2, 1, 3',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'false',
725: 1:      'question': '3, 1, 4',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '2, 1, 1',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '2, 2, 6',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '6, 1, 11',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '5, 0, 1',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '3, 1, 8',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '3, 2, 10',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '3, 2, 8',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'false',
725: 1:      'question': '6, 0, 11',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '1, 4, 11',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '0, 3, 10',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'false',
725: 1:      'question': '1, 4, 12',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'false',
725: 1:      'question': '1, 1, 7',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '2, 1, 7',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '7, 1, 11',
725: 1:      'valid': true
725: 1:    },
725: 1:    {
725: 1:      'answer': 'true',
725: 1:      'question': '7, 1, 8',
725: 1:      'valid': true
725: 1:    }
725: 1:  ],
725: 1:  'info': [
725: 1:    '✅f(0, 1, 5) = true',
725: 1:    '✅f(1, 0, 1) = true',
725: 1:    '✅f(1, 0, 2) = false',
725: 1:    '✅f(3, 1, 7) = true',
725: 1:    '✅f(4, 2, 14) = true',
725: 1:    '✅f(3, 2, 14) = false',
725: 1:    '✅f(0, 2, 5) = true',
725: 1:    '✅f(3, 1, 6) = true',
725: 1:    '✅f(3, 1, 9) = false',
725: 1:    '✅f(3, 2, 9) = false',
725: 1:    '✅f(10, 10, 0) = true',
725: 1:    '✅f(0, 0, 1) = false',
725: 1:    '✅f(0, 1, 1) = false',
725: 1:    '✅f(0, 0, 2) = false',
725: 1:    '✅f(2, 0, 2) = true',
725: 1:    '✅f(0, 1, 2) = false',
725: 1:    '✅f(1, 1, 2) = false',
725: 1:    '✅f(2, 1, 3) = false',
725: 1:    '✅f(3, 1, 4) = false',
725: 1:    '✅f(2, 1, 1) = true',
725: 1:    '✅f(2, 2, 6) = true',
725: 1:    '✅f(6, 1, 11) = true',
725: 1:    '✅f(5, 0, 1) = true',
725: 1:    '✅f(3, 1, 8) = true',
725: 1:    '✅f(3, 2, 10) = true',
725: 1:    '✅f(3, 2, 8) = true',
725: 1:    '✅f(6, 0, 11) = false',
725: 1:    '✅f(1, 4, 11) = true',
725: 1:    '✅f(0, 3, 10) = true',
725: 1:    '✅f(1, 4, 12) = false',
725: 1:    '✅f(1, 1, 7) = false',
725: 1:    '✅f(2, 1, 7) = true',
725: 1:    '✅f(7, 1, 11) = true',
725: 1:    '✅f(7, 1, 8) = true',
725: 1:    '❌f(7, 1, 13) = ??? != false'
725: 1:  ],
725: 1:  'level': 26,
725: 1:  'nextQuestion': '7, 1, 13',
725: 1:  'questions': [
725: 1:    '0, 1, 5',
725: 1:    '1, 0, 1',
725: 1:    '1, 0, 2',
725: 1:    '3, 1, 7',
725: 1:    '4, 2, 14',
725: 1:    '3, 2, 14',
725: 1:    '0, 2, 5',
725: 1:    '3, 1, 6',
725: 1:    '3, 1, 9',
725: 1:    '3, 2, 9',
725: 1:    '10, 10, 0',
725: 1:    '0, 0, 1',
725: 1:    '0, 1, 1',
725: 1:    '0, 0, 2',
725: 1:    '2, 0, 2',
725: 1:    '0, 1, 2',
725: 1:    '1, 1, 2',
725: 1:    '2, 1, 3',
725: 1:    '3, 1, 4',
725: 1:    '2, 1, 1',
725: 1:    '2, 2, 6',
725: 1:    '6, 1, 11',
725: 1:    '5, 0, 1',
725: 1:    '3, 1, 8',
725: 1:    '3, 2, 10',
725: 1:    '3, 2, 8',
725: 1:    '6, 0, 11',
725: 1:    '1, 4, 11',
725: 1:    '0, 3, 10',
725: 1:    '1, 4, 12',
725: 1:    '1, 1, 7',
725: 1:    '2, 1, 7',
725: 1:    '7, 1, 11',
725: 1:    '7, 1, 8',
725: 1:    '7, 1, 13'
725: 1:  ]
725: 1:}
725: 1:Scores: 66609
725: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false']')
725: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
726: 1:BoardData {
726: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
726: 1:  'expectedAnswer': 'true',
726: 1:  'history': [
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '0, 1, 5',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '1, 0, 1',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '1, 0, 2',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '3, 1, 7',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '4, 2, 14',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '3, 2, 14',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '0, 2, 5',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '3, 1, 6',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '3, 1, 9',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '3, 2, 9',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '10, 10, 0',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '0, 0, 1',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '0, 1, 1',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '0, 0, 2',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '2, 0, 2',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '0, 1, 2',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '1, 1, 2',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '2, 1, 3',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '3, 1, 4',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '2, 1, 1',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '2, 2, 6',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '6, 1, 11',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '5, 0, 1',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '3, 1, 8',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '3, 2, 10',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '3, 2, 8',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '6, 0, 11',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '1, 4, 11',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '0, 3, 10',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '1, 4, 12',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '1, 1, 7',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '2, 1, 7',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '7, 1, 11',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'true',
726: 1:      'question': '7, 1, 8',
726: 1:      'valid': true
726: 1:    },
726: 1:    {
726: 1:      'answer': 'false',
726: 1:      'question': '7, 1, 13',
726: 1:      'valid': true
726: 1:    }
726: 1:  ],
726: 1:  'info': [
726: 1:    '✅f(0, 1, 5) = true',
726: 1:    '✅f(1, 0, 1) = true',
726: 1:    '✅f(1, 0, 2) = false',
726: 1:    '✅f(3, 1, 7) = true',
726: 1:    '✅f(4, 2, 14) = true',
726: 1:    '✅f(3, 2, 14) = false',
726: 1:    '✅f(0, 2, 5) = true',
726: 1:    '✅f(3, 1, 6) = true',
726: 1:    '✅f(3, 1, 9) = false',
726: 1:    '✅f(3, 2, 9) = false',
726: 1:    '✅f(10, 10, 0) = true',
726: 1:    '✅f(0, 0, 1) = false',
726: 1:    '✅f(0, 1, 1) = false',
726: 1:    '✅f(0, 0, 2) = false',
726: 1:    '✅f(2, 0, 2) = true',
726: 1:    '✅f(0, 1, 2) = false',
726: 1:    '✅f(1, 1, 2) = false',
726: 1:    '✅f(2, 1, 3) = false',
726: 1:    '✅f(3, 1, 4) = false',
726: 1:    '✅f(2, 1, 1) = true',
726: 1:    '✅f(2, 2, 6) = true',
726: 1:    '✅f(6, 1, 11) = true',
726: 1:    '✅f(5, 0, 1) = true',
726: 1:    '✅f(3, 1, 8) = true',
726: 1:    '✅f(3, 2, 10) = true',
726: 1:    '✅f(3, 2, 8) = true',
726: 1:    '✅f(6, 0, 11) = false',
726: 1:    '✅f(1, 4, 11) = true',
726: 1:    '✅f(0, 3, 10) = true',
726: 1:    '✅f(1, 4, 12) = false',
726: 1:    '✅f(1, 1, 7) = false',
726: 1:    '✅f(2, 1, 7) = true',
726: 1:    '✅f(7, 1, 11) = true',
726: 1:    '✅f(7, 1, 8) = true',
726: 1:    '✅f(7, 1, 13) = false',
726: 1:    '❌f(43, 1, 46) = ??? != true'
726: 1:  ],
726: 1:  'level': 26,
726: 1:  'nextQuestion': '43, 1, 46',
726: 1:  'questions': [
726: 1:    '0, 1, 5',
726: 1:    '1, 0, 1',
726: 1:    '1, 0, 2',
726: 1:    '3, 1, 7',
726: 1:    '4, 2, 14',
726: 1:    '3, 2, 14',
726: 1:    '0, 2, 5',
726: 1:    '3, 1, 6',
726: 1:    '3, 1, 9',
726: 1:    '3, 2, 9',
726: 1:    '10, 10, 0',
726: 1:    '0, 0, 1',
726: 1:    '0, 1, 1',
726: 1:    '0, 0, 2',
726: 1:    '2, 0, 2',
726: 1:    '0, 1, 2',
726: 1:    '1, 1, 2',
726: 1:    '2, 1, 3',
726: 1:    '3, 1, 4',
726: 1:    '2, 1, 1',
726: 1:    '2, 2, 6',
726: 1:    '6, 1, 11',
726: 1:    '5, 0, 1',
726: 1:    '3, 1, 8',
726: 1:    '3, 2, 10',
726: 1:    '3, 2, 8',
726: 1:    '6, 0, 11',
726: 1:    '1, 4, 11',
726: 1:    '0, 3, 10',
726: 1:    '1, 4, 12',
726: 1:    '1, 1, 7',
726: 1:    '2, 1, 7',
726: 1:    '7, 1, 11',
726: 1:    '7, 1, 8',
726: 1:    '7, 1, 13',
726: 1:    '43, 1, 46'
726: 1:  ]
726: 1:}
726: 1:Scores: 66616
726: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true']')
726: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
727: 1:BoardData {
727: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
727: 1:  'expectedAnswer': 'false',
727: 1:  'history': [
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '0, 1, 5',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '1, 0, 1',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '1, 0, 2',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '3, 1, 7',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '4, 2, 14',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '3, 2, 14',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '0, 2, 5',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '3, 1, 6',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '3, 1, 9',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '3, 2, 9',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '10, 10, 0',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '0, 0, 1',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '0, 1, 1',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '0, 0, 2',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '2, 0, 2',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '0, 1, 2',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '1, 1, 2',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '2, 1, 3',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '3, 1, 4',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '2, 1, 1',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '2, 2, 6',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '6, 1, 11',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '5, 0, 1',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '3, 1, 8',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '3, 2, 10',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '3, 2, 8',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '6, 0, 11',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '1, 4, 11',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '0, 3, 10',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '1, 4, 12',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '1, 1, 7',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '2, 1, 7',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '7, 1, 11',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '7, 1, 8',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'false',
727: 1:      'question': '7, 1, 13',
727: 1:      'valid': true
727: 1:    },
727: 1:    {
727: 1:      'answer': 'true',
727: 1:      'question': '43, 1, 46',
727: 1:      'valid': true
727: 1:    }
727: 1:  ],
727: 1:  'info': [
727: 1:    '✅f(0, 1, 5) = true',
727: 1:    '✅f(1, 0, 1) = true',
727: 1:    '✅f(1, 0, 2) = false',
727: 1:    '✅f(3, 1, 7) = true',
727: 1:    '✅f(4, 2, 14) = true',
727: 1:    '✅f(3, 2, 14) = false',
727: 1:    '✅f(0, 2, 5) = true',
727: 1:    '✅f(3, 1, 6) = true',
727: 1:    '✅f(3, 1, 9) = false',
727: 1:    '✅f(3, 2, 9) = false',
727: 1:    '✅f(10, 10, 0) = true',
727: 1:    '✅f(0, 0, 1) = false',
727: 1:    '✅f(0, 1, 1) = false',
727: 1:    '✅f(0, 0, 2) = false',
727: 1:    '✅f(2, 0, 2) = true',
727: 1:    '✅f(0, 1, 2) = false',
727: 1:    '✅f(1, 1, 2) = false',
727: 1:    '✅f(2, 1, 3) = false',
727: 1:    '✅f(3, 1, 4) = false',
727: 1:    '✅f(2, 1, 1) = true',
727: 1:    '✅f(2, 2, 6) = true',
727: 1:    '✅f(6, 1, 11) = true',
727: 1:    '✅f(5, 0, 1) = true',
727: 1:    '✅f(3, 1, 8) = true',
727: 1:    '✅f(3, 2, 10) = true',
727: 1:    '✅f(3, 2, 8) = true',
727: 1:    '✅f(6, 0, 11) = false',
727: 1:    '✅f(1, 4, 11) = true',
727: 1:    '✅f(0, 3, 10) = true',
727: 1:    '✅f(1, 4, 12) = false',
727: 1:    '✅f(1, 1, 7) = false',
727: 1:    '✅f(2, 1, 7) = true',
727: 1:    '✅f(7, 1, 11) = true',
727: 1:    '✅f(7, 1, 8) = true',
727: 1:    '✅f(7, 1, 13) = false',
727: 1:    '✅f(43, 1, 46) = true',
727: 1:    '❌f(40, 1, 46) = ??? != false'
727: 1:  ],
727: 1:  'level': 26,
727: 1:  'nextQuestion': '40, 1, 46',
727: 1:  'questions': [
727: 1:    '0, 1, 5',
727: 1:    '1, 0, 1',
727: 1:    '1, 0, 2',
727: 1:    '3, 1, 7',
727: 1:    '4, 2, 14',
727: 1:    '3, 2, 14',
727: 1:    '0, 2, 5',
727: 1:    '3, 1, 6',
727: 1:    '3, 1, 9',
727: 1:    '3, 2, 9',
727: 1:    '10, 10, 0',
727: 1:    '0, 0, 1',
727: 1:    '0, 1, 1',
727: 1:    '0, 0, 2',
727: 1:    '2, 0, 2',
727: 1:    '0, 1, 2',
727: 1:    '1, 1, 2',
727: 1:    '2, 1, 3',
727: 1:    '3, 1, 4',
727: 1:    '2, 1, 1',
727: 1:    '2, 2, 6',
727: 1:    '6, 1, 11',
727: 1:    '5, 0, 1',
727: 1:    '3, 1, 8',
727: 1:    '3, 2, 10',
727: 1:    '3, 2, 8',
727: 1:    '6, 0, 11',
727: 1:    '1, 4, 11',
727: 1:    '0, 3, 10',
727: 1:    '1, 4, 12',
727: 1:    '1, 1, 7',
727: 1:    '2, 1, 7',
727: 1:    '7, 1, 11',
727: 1:    '7, 1, 8',
727: 1:    '7, 1, 13',
727: 1:    '43, 1, 46',
727: 1:    '40, 1, 46'
727: 1:  ]
727: 1:}
727: 1:Scores: 66623
727: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false']')
727: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
728: 1:BoardData {
728: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
728: 1:  'expectedAnswer': 'true',
728: 1:  'history': [
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '0, 1, 5',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '1, 0, 1',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '1, 0, 2',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '3, 1, 7',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '4, 2, 14',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '3, 2, 14',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '0, 2, 5',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '3, 1, 6',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '3, 1, 9',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '3, 2, 9',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '10, 10, 0',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '0, 0, 1',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '0, 1, 1',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '0, 0, 2',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '2, 0, 2',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '0, 1, 2',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '1, 1, 2',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '2, 1, 3',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '3, 1, 4',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '2, 1, 1',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '2, 2, 6',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '6, 1, 11',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '5, 0, 1',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '3, 1, 8',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '3, 2, 10',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '3, 2, 8',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '6, 0, 11',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '1, 4, 11',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '0, 3, 10',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '1, 4, 12',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '1, 1, 7',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '2, 1, 7',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '7, 1, 11',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '7, 1, 8',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '7, 1, 13',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'true',
728: 1:      'question': '43, 1, 46',
728: 1:      'valid': true
728: 1:    },
728: 1:    {
728: 1:      'answer': 'false',
728: 1:      'question': '40, 1, 46',
728: 1:      'valid': true
728: 1:    }
728: 1:  ],
728: 1:  'info': [
728: 1:    '✅f(0, 1, 5) = true',
728: 1:    '✅f(1, 0, 1) = true',
728: 1:    '✅f(1, 0, 2) = false',
728: 1:    '✅f(3, 1, 7) = true',
728: 1:    '✅f(4, 2, 14) = true',
728: 1:    '✅f(3, 2, 14) = false',
728: 1:    '✅f(0, 2, 5) = true',
728: 1:    '✅f(3, 1, 6) = true',
728: 1:    '✅f(3, 1, 9) = false',
728: 1:    '✅f(3, 2, 9) = false',
728: 1:    '✅f(10, 10, 0) = true',
728: 1:    '✅f(0, 0, 1) = false',
728: 1:    '✅f(0, 1, 1) = false',
728: 1:    '✅f(0, 0, 2) = false',
728: 1:    '✅f(2, 0, 2) = true',
728: 1:    '✅f(0, 1, 2) = false',
728: 1:    '✅f(1, 1, 2) = false',
728: 1:    '✅f(2, 1, 3) = false',
728: 1:    '✅f(3, 1, 4) = false',
728: 1:    '✅f(2, 1, 1) = true',
728: 1:    '✅f(2, 2, 6) = true',
728: 1:    '✅f(6, 1, 11) = true',
728: 1:    '✅f(5, 0, 1) = true',
728: 1:    '✅f(3, 1, 8) = true',
728: 1:    '✅f(3, 2, 10) = true',
728: 1:    '✅f(3, 2, 8) = true',
728: 1:    '✅f(6, 0, 11) = false',
728: 1:    '✅f(1, 4, 11) = true',
728: 1:    '✅f(0, 3, 10) = true',
728: 1:    '✅f(1, 4, 12) = false',
728: 1:    '✅f(1, 1, 7) = false',
728: 1:    '✅f(2, 1, 7) = true',
728: 1:    '✅f(7, 1, 11) = true',
728: 1:    '✅f(7, 1, 8) = true',
728: 1:    '✅f(7, 1, 13) = false',
728: 1:    '✅f(43, 1, 46) = true',
728: 1:    '✅f(40, 1, 46) = false',
728: 1:    '❌f(40, 2, 47) = ??? != true'
728: 1:  ],
728: 1:  'level': 26,
728: 1:  'nextQuestion': '40, 2, 47',
728: 1:  'questions': [
728: 1:    '0, 1, 5',
728: 1:    '1, 0, 1',
728: 1:    '1, 0, 2',
728: 1:    '3, 1, 7',
728: 1:    '4, 2, 14',
728: 1:    '3, 2, 14',
728: 1:    '0, 2, 5',
728: 1:    '3, 1, 6',
728: 1:    '3, 1, 9',
728: 1:    '3, 2, 9',
728: 1:    '10, 10, 0',
728: 1:    '0, 0, 1',
728: 1:    '0, 1, 1',
728: 1:    '0, 0, 2',
728: 1:    '2, 0, 2',
728: 1:    '0, 1, 2',
728: 1:    '1, 1, 2',
728: 1:    '2, 1, 3',
728: 1:    '3, 1, 4',
728: 1:    '2, 1, 1',
728: 1:    '2, 2, 6',
728: 1:    '6, 1, 11',
728: 1:    '5, 0, 1',
728: 1:    '3, 1, 8',
728: 1:    '3, 2, 10',
728: 1:    '3, 2, 8',
728: 1:    '6, 0, 11',
728: 1:    '1, 4, 11',
728: 1:    '0, 3, 10',
728: 1:    '1, 4, 12',
728: 1:    '1, 1, 7',
728: 1:    '2, 1, 7',
728: 1:    '7, 1, 11',
728: 1:    '7, 1, 8',
728: 1:    '7, 1, 13',
728: 1:    '43, 1, 46',
728: 1:    '40, 1, 46',
728: 1:    '40, 2, 47'
728: 1:  ]
728: 1:}
728: 1:Scores: 66630
728: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true']')
728: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
729: 1:BoardData {
729: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
729: 1:  'expectedAnswer': 'true',
729: 1:  'history': [
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '0, 1, 5',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '1, 0, 1',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '1, 0, 2',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '3, 1, 7',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '4, 2, 14',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '3, 2, 14',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '0, 2, 5',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '3, 1, 6',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '3, 1, 9',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '3, 2, 9',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '10, 10, 0',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '0, 0, 1',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '0, 1, 1',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '0, 0, 2',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '2, 0, 2',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '0, 1, 2',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '1, 1, 2',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '2, 1, 3',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '3, 1, 4',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '2, 1, 1',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '2, 2, 6',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '6, 1, 11',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '5, 0, 1',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '3, 1, 8',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '3, 2, 10',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '3, 2, 8',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '6, 0, 11',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '1, 4, 11',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '0, 3, 10',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '1, 4, 12',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '1, 1, 7',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '2, 1, 7',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '7, 1, 11',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '7, 1, 8',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '7, 1, 13',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '43, 1, 46',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'false',
729: 1:      'question': '40, 1, 46',
729: 1:      'valid': true
729: 1:    },
729: 1:    {
729: 1:      'answer': 'true',
729: 1:      'question': '40, 2, 47',
729: 1:      'valid': true
729: 1:    }
729: 1:  ],
729: 1:  'info': [
729: 1:    '✅f(0, 1, 5) = true',
729: 1:    '✅f(1, 0, 1) = true',
729: 1:    '✅f(1, 0, 2) = false',
729: 1:    '✅f(3, 1, 7) = true',
729: 1:    '✅f(4, 2, 14) = true',
729: 1:    '✅f(3, 2, 14) = false',
729: 1:    '✅f(0, 2, 5) = true',
729: 1:    '✅f(3, 1, 6) = true',
729: 1:    '✅f(3, 1, 9) = false',
729: 1:    '✅f(3, 2, 9) = false',
729: 1:    '✅f(10, 10, 0) = true',
729: 1:    '✅f(0, 0, 1) = false',
729: 1:    '✅f(0, 1, 1) = false',
729: 1:    '✅f(0, 0, 2) = false',
729: 1:    '✅f(2, 0, 2) = true',
729: 1:    '✅f(0, 1, 2) = false',
729: 1:    '✅f(1, 1, 2) = false',
729: 1:    '✅f(2, 1, 3) = false',
729: 1:    '✅f(3, 1, 4) = false',
729: 1:    '✅f(2, 1, 1) = true',
729: 1:    '✅f(2, 2, 6) = true',
729: 1:    '✅f(6, 1, 11) = true',
729: 1:    '✅f(5, 0, 1) = true',
729: 1:    '✅f(3, 1, 8) = true',
729: 1:    '✅f(3, 2, 10) = true',
729: 1:    '✅f(3, 2, 8) = true',
729: 1:    '✅f(6, 0, 11) = false',
729: 1:    '✅f(1, 4, 11) = true',
729: 1:    '✅f(0, 3, 10) = true',
729: 1:    '✅f(1, 4, 12) = false',
729: 1:    '✅f(1, 1, 7) = false',
729: 1:    '✅f(2, 1, 7) = true',
729: 1:    '✅f(7, 1, 11) = true',
729: 1:    '✅f(7, 1, 8) = true',
729: 1:    '✅f(7, 1, 13) = false',
729: 1:    '✅f(43, 1, 46) = true',
729: 1:    '✅f(40, 1, 46) = false',
729: 1:    '✅f(40, 2, 47) = true',
729: 1:    '❌f(40, 2, 50) = ??? != true'
729: 1:  ],
729: 1:  'level': 26,
729: 1:  'nextQuestion': '40, 2, 50',
729: 1:  'questions': [
729: 1:    '0, 1, 5',
729: 1:    '1, 0, 1',
729: 1:    '1, 0, 2',
729: 1:    '3, 1, 7',
729: 1:    '4, 2, 14',
729: 1:    '3, 2, 14',
729: 1:    '0, 2, 5',
729: 1:    '3, 1, 6',
729: 1:    '3, 1, 9',
729: 1:    '3, 2, 9',
729: 1:    '10, 10, 0',
729: 1:    '0, 0, 1',
729: 1:    '0, 1, 1',
729: 1:    '0, 0, 2',
729: 1:    '2, 0, 2',
729: 1:    '0, 1, 2',
729: 1:    '1, 1, 2',
729: 1:    '2, 1, 3',
729: 1:    '3, 1, 4',
729: 1:    '2, 1, 1',
729: 1:    '2, 2, 6',
729: 1:    '6, 1, 11',
729: 1:    '5, 0, 1',
729: 1:    '3, 1, 8',
729: 1:    '3, 2, 10',
729: 1:    '3, 2, 8',
729: 1:    '6, 0, 11',
729: 1:    '1, 4, 11',
729: 1:    '0, 3, 10',
729: 1:    '1, 4, 12',
729: 1:    '1, 1, 7',
729: 1:    '2, 1, 7',
729: 1:    '7, 1, 11',
729: 1:    '7, 1, 8',
729: 1:    '7, 1, 13',
729: 1:    '43, 1, 46',
729: 1:    '40, 1, 46',
729: 1:    '40, 2, 47',
729: 1:    '40, 2, 50'
729: 1:  ]
729: 1:}
729: 1:Scores: 66637
729: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true']')
729: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
730: 1:BoardData {
730: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
730: 1:  'expectedAnswer': 'false',
730: 1:  'history': [
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '0, 1, 5',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '1, 0, 1',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '1, 0, 2',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '3, 1, 7',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '4, 2, 14',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '3, 2, 14',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '0, 2, 5',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '3, 1, 6',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '3, 1, 9',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '3, 2, 9',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '10, 10, 0',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '0, 0, 1',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '0, 1, 1',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '0, 0, 2',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '2, 0, 2',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '0, 1, 2',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '1, 1, 2',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '2, 1, 3',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '3, 1, 4',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '2, 1, 1',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '2, 2, 6',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '6, 1, 11',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '5, 0, 1',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '3, 1, 8',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '3, 2, 10',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '3, 2, 8',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '6, 0, 11',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '1, 4, 11',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '0, 3, 10',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '1, 4, 12',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '1, 1, 7',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '2, 1, 7',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '7, 1, 11',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '7, 1, 8',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '7, 1, 13',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '43, 1, 46',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'false',
730: 1:      'question': '40, 1, 46',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '40, 2, 47',
730: 1:      'valid': true
730: 1:    },
730: 1:    {
730: 1:      'answer': 'true',
730: 1:      'question': '40, 2, 50',
730: 1:      'valid': true
730: 1:    }
730: 1:  ],
730: 1:  'info': [
730: 1:    '✅f(0, 1, 5) = true',
730: 1:    '✅f(1, 0, 1) = true',
730: 1:    '✅f(1, 0, 2) = false',
730: 1:    '✅f(3, 1, 7) = true',
730: 1:    '✅f(4, 2, 14) = true',
730: 1:    '✅f(3, 2, 14) = false',
730: 1:    '✅f(0, 2, 5) = true',
730: 1:    '✅f(3, 1, 6) = true',
730: 1:    '✅f(3, 1, 9) = false',
730: 1:    '✅f(3, 2, 9) = false',
730: 1:    '✅f(10, 10, 0) = true',
730: 1:    '✅f(0, 0, 1) = false',
730: 1:    '✅f(0, 1, 1) = false',
730: 1:    '✅f(0, 0, 2) = false',
730: 1:    '✅f(2, 0, 2) = true',
730: 1:    '✅f(0, 1, 2) = false',
730: 1:    '✅f(1, 1, 2) = false',
730: 1:    '✅f(2, 1, 3) = false',
730: 1:    '✅f(3, 1, 4) = false',
730: 1:    '✅f(2, 1, 1) = true',
730: 1:    '✅f(2, 2, 6) = true',
730: 1:    '✅f(6, 1, 11) = true',
730: 1:    '✅f(5, 0, 1) = true',
730: 1:    '✅f(3, 1, 8) = true',
730: 1:    '✅f(3, 2, 10) = true',
730: 1:    '✅f(3, 2, 8) = true',
730: 1:    '✅f(6, 0, 11) = false',
730: 1:    '✅f(1, 4, 11) = true',
730: 1:    '✅f(0, 3, 10) = true',
730: 1:    '✅f(1, 4, 12) = false',
730: 1:    '✅f(1, 1, 7) = false',
730: 1:    '✅f(2, 1, 7) = true',
730: 1:    '✅f(7, 1, 11) = true',
730: 1:    '✅f(7, 1, 8) = true',
730: 1:    '✅f(7, 1, 13) = false',
730: 1:    '✅f(43, 1, 46) = true',
730: 1:    '✅f(40, 1, 46) = false',
730: 1:    '✅f(40, 2, 47) = true',
730: 1:    '✅f(40, 2, 50) = true',
730: 1:    '❌f(40, 2, 52) = ??? != false'
730: 1:  ],
730: 1:  'level': 26,
730: 1:  'nextQuestion': '40, 2, 52',
730: 1:  'questions': [
730: 1:    '0, 1, 5',
730: 1:    '1, 0, 1',
730: 1:    '1, 0, 2',
730: 1:    '3, 1, 7',
730: 1:    '4, 2, 14',
730: 1:    '3, 2, 14',
730: 1:    '0, 2, 5',
730: 1:    '3, 1, 6',
730: 1:    '3, 1, 9',
730: 1:    '3, 2, 9',
730: 1:    '10, 10, 0',
730: 1:    '0, 0, 1',
730: 1:    '0, 1, 1',
730: 1:    '0, 0, 2',
730: 1:    '2, 0, 2',
730: 1:    '0, 1, 2',
730: 1:    '1, 1, 2',
730: 1:    '2, 1, 3',
730: 1:    '3, 1, 4',
730: 1:    '2, 1, 1',
730: 1:    '2, 2, 6',
730: 1:    '6, 1, 11',
730: 1:    '5, 0, 1',
730: 1:    '3, 1, 8',
730: 1:    '3, 2, 10',
730: 1:    '3, 2, 8',
730: 1:    '6, 0, 11',
730: 1:    '1, 4, 11',
730: 1:    '0, 3, 10',
730: 1:    '1, 4, 12',
730: 1:    '1, 1, 7',
730: 1:    '2, 1, 7',
730: 1:    '7, 1, 11',
730: 1:    '7, 1, 8',
730: 1:    '7, 1, 13',
730: 1:    '43, 1, 46',
730: 1:    '40, 1, 46',
730: 1:    '40, 2, 47',
730: 1:    '40, 2, 50',
730: 1:    '40, 2, 52'
730: 1:  ]
730: 1:}
730: 1:Scores: 66644
730: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true', 'false']')
730: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
731: 1:BoardData {
731: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
731: 1:  'expectedAnswer': 'false',
731: 1:  'history': [
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '0, 1, 5',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '1, 0, 1',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '1, 0, 2',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '3, 1, 7',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '4, 2, 14',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '3, 2, 14',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '0, 2, 5',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '3, 1, 6',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '3, 1, 9',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '3, 2, 9',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '10, 10, 0',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '0, 0, 1',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '0, 1, 1',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '0, 0, 2',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '2, 0, 2',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '0, 1, 2',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '1, 1, 2',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '2, 1, 3',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '3, 1, 4',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '2, 1, 1',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '2, 2, 6',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '6, 1, 11',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '5, 0, 1',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '3, 1, 8',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '3, 2, 10',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '3, 2, 8',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '6, 0, 11',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '1, 4, 11',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '0, 3, 10',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '1, 4, 12',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '1, 1, 7',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '2, 1, 7',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '7, 1, 11',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '7, 1, 8',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '7, 1, 13',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '43, 1, 46',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '40, 1, 46',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '40, 2, 47',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'true',
731: 1:      'question': '40, 2, 50',
731: 1:      'valid': true
731: 1:    },
731: 1:    {
731: 1:      'answer': 'false',
731: 1:      'question': '40, 2, 52',
731: 1:      'valid': true
731: 1:    }
731: 1:  ],
731: 1:  'info': [
731: 1:    '✅f(0, 1, 5) = true',
731: 1:    '✅f(1, 0, 1) = true',
731: 1:    '✅f(1, 0, 2) = false',
731: 1:    '✅f(3, 1, 7) = true',
731: 1:    '✅f(4, 2, 14) = true',
731: 1:    '✅f(3, 2, 14) = false',
731: 1:    '✅f(0, 2, 5) = true',
731: 1:    '✅f(3, 1, 6) = true',
731: 1:    '✅f(3, 1, 9) = false',
731: 1:    '✅f(3, 2, 9) = false',
731: 1:    '✅f(10, 10, 0) = true',
731: 1:    '✅f(0, 0, 1) = false',
731: 1:    '✅f(0, 1, 1) = false',
731: 1:    '✅f(0, 0, 2) = false',
731: 1:    '✅f(2, 0, 2) = true',
731: 1:    '✅f(0, 1, 2) = false',
731: 1:    '✅f(1, 1, 2) = false',
731: 1:    '✅f(2, 1, 3) = false',
731: 1:    '✅f(3, 1, 4) = false',
731: 1:    '✅f(2, 1, 1) = true',
731: 1:    '✅f(2, 2, 6) = true',
731: 1:    '✅f(6, 1, 11) = true',
731: 1:    '✅f(5, 0, 1) = true',
731: 1:    '✅f(3, 1, 8) = true',
731: 1:    '✅f(3, 2, 10) = true',
731: 1:    '✅f(3, 2, 8) = true',
731: 1:    '✅f(6, 0, 11) = false',
731: 1:    '✅f(1, 4, 11) = true',
731: 1:    '✅f(0, 3, 10) = true',
731: 1:    '✅f(1, 4, 12) = false',
731: 1:    '✅f(1, 1, 7) = false',
731: 1:    '✅f(2, 1, 7) = true',
731: 1:    '✅f(7, 1, 11) = true',
731: 1:    '✅f(7, 1, 8) = true',
731: 1:    '✅f(7, 1, 13) = false',
731: 1:    '✅f(43, 1, 46) = true',
731: 1:    '✅f(40, 1, 46) = false',
731: 1:    '✅f(40, 2, 47) = true',
731: 1:    '✅f(40, 2, 50) = true',
731: 1:    '✅f(40, 2, 52) = false',
731: 1:    '❌f(22, 2, 33) = ??? != false'
731: 1:  ],
731: 1:  'level': 26,
731: 1:  'nextQuestion': '22, 2, 33',
731: 1:  'questions': [
731: 1:    '0, 1, 5',
731: 1:    '1, 0, 1',
731: 1:    '1, 0, 2',
731: 1:    '3, 1, 7',
731: 1:    '4, 2, 14',
731: 1:    '3, 2, 14',
731: 1:    '0, 2, 5',
731: 1:    '3, 1, 6',
731: 1:    '3, 1, 9',
731: 1:    '3, 2, 9',
731: 1:    '10, 10, 0',
731: 1:    '0, 0, 1',
731: 1:    '0, 1, 1',
731: 1:    '0, 0, 2',
731: 1:    '2, 0, 2',
731: 1:    '0, 1, 2',
731: 1:    '1, 1, 2',
731: 1:    '2, 1, 3',
731: 1:    '3, 1, 4',
731: 1:    '2, 1, 1',
731: 1:    '2, 2, 6',
731: 1:    '6, 1, 11',
731: 1:    '5, 0, 1',
731: 1:    '3, 1, 8',
731: 1:    '3, 2, 10',
731: 1:    '3, 2, 8',
731: 1:    '6, 0, 11',
731: 1:    '1, 4, 11',
731: 1:    '0, 3, 10',
731: 1:    '1, 4, 12',
731: 1:    '1, 1, 7',
731: 1:    '2, 1, 7',
731: 1:    '7, 1, 11',
731: 1:    '7, 1, 8',
731: 1:    '7, 1, 13',
731: 1:    '43, 1, 46',
731: 1:    '40, 1, 46',
731: 1:    '40, 2, 47',
731: 1:    '40, 2, 50',
731: 1:    '40, 2, 52',
731: 1:    '22, 2, 33'
731: 1:  ]
731: 1:}
731: 1:Scores: 66651
731: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true', 'false', 'false']')
731: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
732: 1:BoardData {
732: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
732: 1:  'expectedAnswer': 'true',
732: 1:  'history': [
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '0, 1, 5',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '1, 0, 1',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '1, 0, 2',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '3, 1, 7',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '4, 2, 14',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '3, 2, 14',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '0, 2, 5',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '3, 1, 6',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '3, 1, 9',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '3, 2, 9',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '10, 10, 0',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '0, 0, 1',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '0, 1, 1',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '0, 0, 2',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '2, 0, 2',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '0, 1, 2',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '1, 1, 2',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '2, 1, 3',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '3, 1, 4',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '2, 1, 1',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '2, 2, 6',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '6, 1, 11',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '5, 0, 1',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '3, 1, 8',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '3, 2, 10',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '3, 2, 8',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '6, 0, 11',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '1, 4, 11',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '0, 3, 10',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '1, 4, 12',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '1, 1, 7',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '2, 1, 7',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '7, 1, 11',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '7, 1, 8',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '7, 1, 13',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '43, 1, 46',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '40, 1, 46',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '40, 2, 47',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'true',
732: 1:      'question': '40, 2, 50',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '40, 2, 52',
732: 1:      'valid': true
732: 1:    },
732: 1:    {
732: 1:      'answer': 'false',
732: 1:      'question': '22, 2, 33',
732: 1:      'valid': true
732: 1:    }
732: 1:  ],
732: 1:  'info': [
732: 1:    '✅f(0, 1, 5) = true',
732: 1:    '✅f(1, 0, 1) = true',
732: 1:    '✅f(1, 0, 2) = false',
732: 1:    '✅f(3, 1, 7) = true',
732: 1:    '✅f(4, 2, 14) = true',
732: 1:    '✅f(3, 2, 14) = false',
732: 1:    '✅f(0, 2, 5) = true',
732: 1:    '✅f(3, 1, 6) = true',
732: 1:    '✅f(3, 1, 9) = false',
732: 1:    '✅f(3, 2, 9) = false',
732: 1:    '✅f(10, 10, 0) = true',
732: 1:    '✅f(0, 0, 1) = false',
732: 1:    '✅f(0, 1, 1) = false',
732: 1:    '✅f(0, 0, 2) = false',
732: 1:    '✅f(2, 0, 2) = true',
732: 1:    '✅f(0, 1, 2) = false',
732: 1:    '✅f(1, 1, 2) = false',
732: 1:    '✅f(2, 1, 3) = false',
732: 1:    '✅f(3, 1, 4) = false',
732: 1:    '✅f(2, 1, 1) = true',
732: 1:    '✅f(2, 2, 6) = true',
732: 1:    '✅f(6, 1, 11) = true',
732: 1:    '✅f(5, 0, 1) = true',
732: 1:    '✅f(3, 1, 8) = true',
732: 1:    '✅f(3, 2, 10) = true',
732: 1:    '✅f(3, 2, 8) = true',
732: 1:    '✅f(6, 0, 11) = false',
732: 1:    '✅f(1, 4, 11) = true',
732: 1:    '✅f(0, 3, 10) = true',
732: 1:    '✅f(1, 4, 12) = false',
732: 1:    '✅f(1, 1, 7) = false',
732: 1:    '✅f(2, 1, 7) = true',
732: 1:    '✅f(7, 1, 11) = true',
732: 1:    '✅f(7, 1, 8) = true',
732: 1:    '✅f(7, 1, 13) = false',
732: 1:    '✅f(43, 1, 46) = true',
732: 1:    '✅f(40, 1, 46) = false',
732: 1:    '✅f(40, 2, 47) = true',
732: 1:    '✅f(40, 2, 50) = true',
732: 1:    '✅f(40, 2, 52) = false',
732: 1:    '✅f(22, 2, 33) = false',
732: 1:    '❌f(0, 2, 10) = ??? != true'
732: 1:  ],
732: 1:  'level': 26,
732: 1:  'nextQuestion': '0, 2, 10',
732: 1:  'questions': [
732: 1:    '0, 1, 5',
732: 1:    '1, 0, 1',
732: 1:    '1, 0, 2',
732: 1:    '3, 1, 7',
732: 1:    '4, 2, 14',
732: 1:    '3, 2, 14',
732: 1:    '0, 2, 5',
732: 1:    '3, 1, 6',
732: 1:    '3, 1, 9',
732: 1:    '3, 2, 9',
732: 1:    '10, 10, 0',
732: 1:    '0, 0, 1',
732: 1:    '0, 1, 1',
732: 1:    '0, 0, 2',
732: 1:    '2, 0, 2',
732: 1:    '0, 1, 2',
732: 1:    '1, 1, 2',
732: 1:    '2, 1, 3',
732: 1:    '3, 1, 4',
732: 1:    '2, 1, 1',
732: 1:    '2, 2, 6',
732: 1:    '6, 1, 11',
732: 1:    '5, 0, 1',
732: 1:    '3, 1, 8',
732: 1:    '3, 2, 10',
732: 1:    '3, 2, 8',
732: 1:    '6, 0, 11',
732: 1:    '1, 4, 11',
732: 1:    '0, 3, 10',
732: 1:    '1, 4, 12',
732: 1:    '1, 1, 7',
732: 1:    '2, 1, 7',
732: 1:    '7, 1, 11',
732: 1:    '7, 1, 8',
732: 1:    '7, 1, 13',
732: 1:    '43, 1, 46',
732: 1:    '40, 1, 46',
732: 1:    '40, 2, 47',
732: 1:    '40, 2, 50',
732: 1:    '40, 2, 52',
732: 1:    '22, 2, 33',
732: 1:    '0, 2, 10'
732: 1:  ]
732: 1:}
732: 1:Scores: 66658
732: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true', 'false', 'false', 'true']')
732: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
733: 1:BoardData {
733: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
733: 1:  'expectedAnswer': 'true',
733: 1:  'history': [
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '0, 1, 5',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '1, 0, 1',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '1, 0, 2',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '3, 1, 7',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '4, 2, 14',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '3, 2, 14',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '0, 2, 5',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '3, 1, 6',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '3, 1, 9',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '3, 2, 9',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '10, 10, 0',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '0, 0, 1',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '0, 1, 1',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '0, 0, 2',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '2, 0, 2',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '0, 1, 2',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '1, 1, 2',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '2, 1, 3',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '3, 1, 4',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '2, 1, 1',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '2, 2, 6',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '6, 1, 11',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '5, 0, 1',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '3, 1, 8',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '3, 2, 10',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '3, 2, 8',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '6, 0, 11',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '1, 4, 11',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '0, 3, 10',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '1, 4, 12',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '1, 1, 7',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '2, 1, 7',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '7, 1, 11',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '7, 1, 8',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '7, 1, 13',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '43, 1, 46',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '40, 1, 46',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '40, 2, 47',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '40, 2, 50',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '40, 2, 52',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'false',
733: 1:      'question': '22, 2, 33',
733: 1:      'valid': true
733: 1:    },
733: 1:    {
733: 1:      'answer': 'true',
733: 1:      'question': '0, 2, 10',
733: 1:      'valid': true
733: 1:    }
733: 1:  ],
733: 1:  'info': [
733: 1:    '✅f(0, 1, 5) = true',
733: 1:    '✅f(1, 0, 1) = true',
733: 1:    '✅f(1, 0, 2) = false',
733: 1:    '✅f(3, 1, 7) = true',
733: 1:    '✅f(4, 2, 14) = true',
733: 1:    '✅f(3, 2, 14) = false',
733: 1:    '✅f(0, 2, 5) = true',
733: 1:    '✅f(3, 1, 6) = true',
733: 1:    '✅f(3, 1, 9) = false',
733: 1:    '✅f(3, 2, 9) = false',
733: 1:    '✅f(10, 10, 0) = true',
733: 1:    '✅f(0, 0, 1) = false',
733: 1:    '✅f(0, 1, 1) = false',
733: 1:    '✅f(0, 0, 2) = false',
733: 1:    '✅f(2, 0, 2) = true',
733: 1:    '✅f(0, 1, 2) = false',
733: 1:    '✅f(1, 1, 2) = false',
733: 1:    '✅f(2, 1, 3) = false',
733: 1:    '✅f(3, 1, 4) = false',
733: 1:    '✅f(2, 1, 1) = true',
733: 1:    '✅f(2, 2, 6) = true',
733: 1:    '✅f(6, 1, 11) = true',
733: 1:    '✅f(5, 0, 1) = true',
733: 1:    '✅f(3, 1, 8) = true',
733: 1:    '✅f(3, 2, 10) = true',
733: 1:    '✅f(3, 2, 8) = true',
733: 1:    '✅f(6, 0, 11) = false',
733: 1:    '✅f(1, 4, 11) = true',
733: 1:    '✅f(0, 3, 10) = true',
733: 1:    '✅f(1, 4, 12) = false',
733: 1:    '✅f(1, 1, 7) = false',
733: 1:    '✅f(2, 1, 7) = true',
733: 1:    '✅f(7, 1, 11) = true',
733: 1:    '✅f(7, 1, 8) = true',
733: 1:    '✅f(7, 1, 13) = false',
733: 1:    '✅f(43, 1, 46) = true',
733: 1:    '✅f(40, 1, 46) = false',
733: 1:    '✅f(40, 2, 47) = true',
733: 1:    '✅f(40, 2, 50) = true',
733: 1:    '✅f(40, 2, 52) = false',
733: 1:    '✅f(22, 2, 33) = false',
733: 1:    '✅f(0, 2, 10) = true',
733: 1:    '❌f(1000000, 1000, 1000100) = ??? != true'
733: 1:  ],
733: 1:  'level': 26,
733: 1:  'nextQuestion': '1000000, 1000, 1000100',
733: 1:  'questions': [
733: 1:    '0, 1, 5',
733: 1:    '1, 0, 1',
733: 1:    '1, 0, 2',
733: 1:    '3, 1, 7',
733: 1:    '4, 2, 14',
733: 1:    '3, 2, 14',
733: 1:    '0, 2, 5',
733: 1:    '3, 1, 6',
733: 1:    '3, 1, 9',
733: 1:    '3, 2, 9',
733: 1:    '10, 10, 0',
733: 1:    '0, 0, 1',
733: 1:    '0, 1, 1',
733: 1:    '0, 0, 2',
733: 1:    '2, 0, 2',
733: 1:    '0, 1, 2',
733: 1:    '1, 1, 2',
733: 1:    '2, 1, 3',
733: 1:    '3, 1, 4',
733: 1:    '2, 1, 1',
733: 1:    '2, 2, 6',
733: 1:    '6, 1, 11',
733: 1:    '5, 0, 1',
733: 1:    '3, 1, 8',
733: 1:    '3, 2, 10',
733: 1:    '3, 2, 8',
733: 1:    '6, 0, 11',
733: 1:    '1, 4, 11',
733: 1:    '0, 3, 10',
733: 1:    '1, 4, 12',
733: 1:    '1, 1, 7',
733: 1:    '2, 1, 7',
733: 1:    '7, 1, 11',
733: 1:    '7, 1, 8',
733: 1:    '7, 1, 13',
733: 1:    '43, 1, 46',
733: 1:    '40, 1, 46',
733: 1:    '40, 2, 47',
733: 1:    '40, 2, 50',
733: 1:    '40, 2, 52',
733: 1:    '22, 2, 33',
733: 1:    '0, 2, 10',
733: 1:    '1000000, 1000, 1000100'
733: 1:  ]
733: 1:}
733: 1:Scores: 66665
733: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true']')
733: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
734: 1:BoardData {
734: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
734: 1:  'expectedAnswer': 'false',
734: 1:  'history': [
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '0, 1, 5',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '1, 0, 1',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '1, 0, 2',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '3, 1, 7',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '4, 2, 14',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '3, 2, 14',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '0, 2, 5',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '3, 1, 6',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '3, 1, 9',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '3, 2, 9',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '10, 10, 0',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '0, 0, 1',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '0, 1, 1',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '0, 0, 2',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '2, 0, 2',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '0, 1, 2',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '1, 1, 2',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '2, 1, 3',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '3, 1, 4',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '2, 1, 1',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '2, 2, 6',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '6, 1, 11',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '5, 0, 1',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '3, 1, 8',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '3, 2, 10',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '3, 2, 8',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '6, 0, 11',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '1, 4, 11',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '0, 3, 10',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '1, 4, 12',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '1, 1, 7',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '2, 1, 7',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '7, 1, 11',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '7, 1, 8',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '7, 1, 13',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '43, 1, 46',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '40, 1, 46',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '40, 2, 47',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '40, 2, 50',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '40, 2, 52',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'false',
734: 1:      'question': '22, 2, 33',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '0, 2, 10',
734: 1:      'valid': true
734: 1:    },
734: 1:    {
734: 1:      'answer': 'true',
734: 1:      'question': '1000000, 1000, 1000100',
734: 1:      'valid': true
734: 1:    }
734: 1:  ],
734: 1:  'info': [
734: 1:    '✅f(0, 1, 5) = true',
734: 1:    '✅f(1, 0, 1) = true',
734: 1:    '✅f(1, 0, 2) = false',
734: 1:    '✅f(3, 1, 7) = true',
734: 1:    '✅f(4, 2, 14) = true',
734: 1:    '✅f(3, 2, 14) = false',
734: 1:    '✅f(0, 2, 5) = true',
734: 1:    '✅f(3, 1, 6) = true',
734: 1:    '✅f(3, 1, 9) = false',
734: 1:    '✅f(3, 2, 9) = false',
734: 1:    '✅f(10, 10, 0) = true',
734: 1:    '✅f(0, 0, 1) = false',
734: 1:    '✅f(0, 1, 1) = false',
734: 1:    '✅f(0, 0, 2) = false',
734: 1:    '✅f(2, 0, 2) = true',
734: 1:    '✅f(0, 1, 2) = false',
734: 1:    '✅f(1, 1, 2) = false',
734: 1:    '✅f(2, 1, 3) = false',
734: 1:    '✅f(3, 1, 4) = false',
734: 1:    '✅f(2, 1, 1) = true',
734: 1:    '✅f(2, 2, 6) = true',
734: 1:    '✅f(6, 1, 11) = true',
734: 1:    '✅f(5, 0, 1) = true',
734: 1:    '✅f(3, 1, 8) = true',
734: 1:    '✅f(3, 2, 10) = true',
734: 1:    '✅f(3, 2, 8) = true',
734: 1:    '✅f(6, 0, 11) = false',
734: 1:    '✅f(1, 4, 11) = true',
734: 1:    '✅f(0, 3, 10) = true',
734: 1:    '✅f(1, 4, 12) = false',
734: 1:    '✅f(1, 1, 7) = false',
734: 1:    '✅f(2, 1, 7) = true',
734: 1:    '✅f(7, 1, 11) = true',
734: 1:    '✅f(7, 1, 8) = true',
734: 1:    '✅f(7, 1, 13) = false',
734: 1:    '✅f(43, 1, 46) = true',
734: 1:    '✅f(40, 1, 46) = false',
734: 1:    '✅f(40, 2, 47) = true',
734: 1:    '✅f(40, 2, 50) = true',
734: 1:    '✅f(40, 2, 52) = false',
734: 1:    '✅f(22, 2, 33) = false',
734: 1:    '✅f(0, 2, 10) = true',
734: 1:    '✅f(1000000, 1000, 1000100) = true',
734: 1:    '❌f(2, 1000000, 100003) = ??? != false'
734: 1:  ],
734: 1:  'level': 26,
734: 1:  'nextQuestion': '2, 1000000, 100003',
734: 1:  'questions': [
734: 1:    '0, 1, 5',
734: 1:    '1, 0, 1',
734: 1:    '1, 0, 2',
734: 1:    '3, 1, 7',
734: 1:    '4, 2, 14',
734: 1:    '3, 2, 14',
734: 1:    '0, 2, 5',
734: 1:    '3, 1, 6',
734: 1:    '3, 1, 9',
734: 1:    '3, 2, 9',
734: 1:    '10, 10, 0',
734: 1:    '0, 0, 1',
734: 1:    '0, 1, 1',
734: 1:    '0, 0, 2',
734: 1:    '2, 0, 2',
734: 1:    '0, 1, 2',
734: 1:    '1, 1, 2',
734: 1:    '2, 1, 3',
734: 1:    '3, 1, 4',
734: 1:    '2, 1, 1',
734: 1:    '2, 2, 6',
734: 1:    '6, 1, 11',
734: 1:    '5, 0, 1',
734: 1:    '3, 1, 8',
734: 1:    '3, 2, 10',
734: 1:    '3, 2, 8',
734: 1:    '6, 0, 11',
734: 1:    '1, 4, 11',
734: 1:    '0, 3, 10',
734: 1:    '1, 4, 12',
734: 1:    '1, 1, 7',
734: 1:    '2, 1, 7',
734: 1:    '7, 1, 11',
734: 1:    '7, 1, 8',
734: 1:    '7, 1, 13',
734: 1:    '43, 1, 46',
734: 1:    '40, 1, 46',
734: 1:    '40, 2, 47',
734: 1:    '40, 2, 50',
734: 1:    '40, 2, 52',
734: 1:    '22, 2, 33',
734: 1:    '0, 2, 10',
734: 1:    '1000000, 1000, 1000100',
734: 1:    '2, 1000000, 100003'
734: 1:  ]
734: 1:}
734: 1:Scores: 66672
734: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'false']')
734: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
735: 1:BoardData {
735: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
735: 1:  'expectedAnswer': 'true',
735: 1:  'history': [
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '0, 1, 5',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '1, 0, 1',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '1, 0, 2',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '3, 1, 7',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '4, 2, 14',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '3, 2, 14',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '0, 2, 5',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '3, 1, 6',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '3, 1, 9',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '3, 2, 9',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '10, 10, 0',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '0, 0, 1',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '0, 1, 1',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '0, 0, 2',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '2, 0, 2',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '0, 1, 2',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '1, 1, 2',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '2, 1, 3',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '3, 1, 4',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '2, 1, 1',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '2, 2, 6',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '6, 1, 11',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '5, 0, 1',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '3, 1, 8',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '3, 2, 10',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '3, 2, 8',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '6, 0, 11',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '1, 4, 11',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '0, 3, 10',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '1, 4, 12',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '1, 1, 7',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '2, 1, 7',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '7, 1, 11',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '7, 1, 8',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '7, 1, 13',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '43, 1, 46',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '40, 1, 46',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '40, 2, 47',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '40, 2, 50',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '40, 2, 52',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '22, 2, 33',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '0, 2, 10',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'true',
735: 1:      'question': '1000000, 1000, 1000100',
735: 1:      'valid': true
735: 1:    },
735: 1:    {
735: 1:      'answer': 'false',
735: 1:      'question': '2, 1000000, 100003',
735: 1:      'valid': true
735: 1:    }
735: 1:  ],
735: 1:  'info': [
735: 1:    '✅f(0, 1, 5) = true',
735: 1:    '✅f(1, 0, 1) = true',
735: 1:    '✅f(1, 0, 2) = false',
735: 1:    '✅f(3, 1, 7) = true',
735: 1:    '✅f(4, 2, 14) = true',
735: 1:    '✅f(3, 2, 14) = false',
735: 1:    '✅f(0, 2, 5) = true',
735: 1:    '✅f(3, 1, 6) = true',
735: 1:    '✅f(3, 1, 9) = false',
735: 1:    '✅f(3, 2, 9) = false',
735: 1:    '✅f(10, 10, 0) = true',
735: 1:    '✅f(0, 0, 1) = false',
735: 1:    '✅f(0, 1, 1) = false',
735: 1:    '✅f(0, 0, 2) = false',
735: 1:    '✅f(2, 0, 2) = true',
735: 1:    '✅f(0, 1, 2) = false',
735: 1:    '✅f(1, 1, 2) = false',
735: 1:    '✅f(2, 1, 3) = false',
735: 1:    '✅f(3, 1, 4) = false',
735: 1:    '✅f(2, 1, 1) = true',
735: 1:    '✅f(2, 2, 6) = true',
735: 1:    '✅f(6, 1, 11) = true',
735: 1:    '✅f(5, 0, 1) = true',
735: 1:    '✅f(3, 1, 8) = true',
735: 1:    '✅f(3, 2, 10) = true',
735: 1:    '✅f(3, 2, 8) = true',
735: 1:    '✅f(6, 0, 11) = false',
735: 1:    '✅f(1, 4, 11) = true',
735: 1:    '✅f(0, 3, 10) = true',
735: 1:    '✅f(1, 4, 12) = false',
735: 1:    '✅f(1, 1, 7) = false',
735: 1:    '✅f(2, 1, 7) = true',
735: 1:    '✅f(7, 1, 11) = true',
735: 1:    '✅f(7, 1, 8) = true',
735: 1:    '✅f(7, 1, 13) = false',
735: 1:    '✅f(43, 1, 46) = true',
735: 1:    '✅f(40, 1, 46) = false',
735: 1:    '✅f(40, 2, 47) = true',
735: 1:    '✅f(40, 2, 50) = true',
735: 1:    '✅f(40, 2, 52) = false',
735: 1:    '✅f(22, 2, 33) = false',
735: 1:    '✅f(0, 2, 10) = true',
735: 1:    '✅f(1000000, 1000, 1000100) = true',
735: 1:    '✅f(2, 1000000, 100003) = false',
735: 1:    '❌f(20, 0, 19) = ??? != true'
735: 1:  ],
735: 1:  'level': 26,
735: 1:  'nextQuestion': '20, 0, 19',
735: 1:  'questions': [
735: 1:    '0, 1, 5',
735: 1:    '1, 0, 1',
735: 1:    '1, 0, 2',
735: 1:    '3, 1, 7',
735: 1:    '4, 2, 14',
735: 1:    '3, 2, 14',
735: 1:    '0, 2, 5',
735: 1:    '3, 1, 6',
735: 1:    '3, 1, 9',
735: 1:    '3, 2, 9',
735: 1:    '10, 10, 0',
735: 1:    '0, 0, 1',
735: 1:    '0, 1, 1',
735: 1:    '0, 0, 2',
735: 1:    '2, 0, 2',
735: 1:    '0, 1, 2',
735: 1:    '1, 1, 2',
735: 1:    '2, 1, 3',
735: 1:    '3, 1, 4',
735: 1:    '2, 1, 1',
735: 1:    '2, 2, 6',
735: 1:    '6, 1, 11',
735: 1:    '5, 0, 1',
735: 1:    '3, 1, 8',
735: 1:    '3, 2, 10',
735: 1:    '3, 2, 8',
735: 1:    '6, 0, 11',
735: 1:    '1, 4, 11',
735: 1:    '0, 3, 10',
735: 1:    '1, 4, 12',
735: 1:    '1, 1, 7',
735: 1:    '2, 1, 7',
735: 1:    '7, 1, 11',
735: 1:    '7, 1, 8',
735: 1:    '7, 1, 13',
735: 1:    '43, 1, 46',
735: 1:    '40, 1, 46',
735: 1:    '40, 2, 47',
735: 1:    '40, 2, 50',
735: 1:    '40, 2, 52',
735: 1:    '22, 2, 33',
735: 1:    '0, 2, 10',
735: 1:    '1000000, 1000, 1000100',
735: 1:    '2, 1000000, 100003',
735: 1:    '20, 0, 19'
735: 1:  ]
735: 1:}
735: 1:Scores: 66679
735: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'false', 'true']')
735: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
736: 1:BoardData {
736: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
736: 1:  'expectedAnswer': 'false',
736: 1:  'history': [
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '0, 1, 5',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '1, 0, 1',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '1, 0, 2',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '3, 1, 7',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '4, 2, 14',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '3, 2, 14',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '0, 2, 5',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '3, 1, 6',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '3, 1, 9',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '3, 2, 9',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '10, 10, 0',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '0, 0, 1',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '0, 1, 1',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '0, 0, 2',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '2, 0, 2',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '0, 1, 2',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '1, 1, 2',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '2, 1, 3',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '3, 1, 4',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '2, 1, 1',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '2, 2, 6',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '6, 1, 11',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '5, 0, 1',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '3, 1, 8',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '3, 2, 10',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '3, 2, 8',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '6, 0, 11',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '1, 4, 11',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '0, 3, 10',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '1, 4, 12',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '1, 1, 7',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '2, 1, 7',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '7, 1, 11',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '7, 1, 8',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '7, 1, 13',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '43, 1, 46',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '40, 1, 46',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '40, 2, 47',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '40, 2, 50',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '40, 2, 52',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '22, 2, 33',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '0, 2, 10',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '1000000, 1000, 1000100',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'false',
736: 1:      'question': '2, 1000000, 100003',
736: 1:      'valid': true
736: 1:    },
736: 1:    {
736: 1:      'answer': 'true',
736: 1:      'question': '20, 0, 19',
736: 1:      'valid': true
736: 1:    }
736: 1:  ],
736: 1:  'info': [
736: 1:    '✅f(0, 1, 5) = true',
736: 1:    '✅f(1, 0, 1) = true',
736: 1:    '✅f(1, 0, 2) = false',
736: 1:    '✅f(3, 1, 7) = true',
736: 1:    '✅f(4, 2, 14) = true',
736: 1:    '✅f(3, 2, 14) = false',
736: 1:    '✅f(0, 2, 5) = true',
736: 1:    '✅f(3, 1, 6) = true',
736: 1:    '✅f(3, 1, 9) = false',
736: 1:    '✅f(3, 2, 9) = false',
736: 1:    '✅f(10, 10, 0) = true',
736: 1:    '✅f(0, 0, 1) = false',
736: 1:    '✅f(0, 1, 1) = false',
736: 1:    '✅f(0, 0, 2) = false',
736: 1:    '✅f(2, 0, 2) = true',
736: 1:    '✅f(0, 1, 2) = false',
736: 1:    '✅f(1, 1, 2) = false',
736: 1:    '✅f(2, 1, 3) = false',
736: 1:    '✅f(3, 1, 4) = false',
736: 1:    '✅f(2, 1, 1) = true',
736: 1:    '✅f(2, 2, 6) = true',
736: 1:    '✅f(6, 1, 11) = true',
736: 1:    '✅f(5, 0, 1) = true',
736: 1:    '✅f(3, 1, 8) = true',
736: 1:    '✅f(3, 2, 10) = true',
736: 1:    '✅f(3, 2, 8) = true',
736: 1:    '✅f(6, 0, 11) = false',
736: 1:    '✅f(1, 4, 11) = true',
736: 1:    '✅f(0, 3, 10) = true',
736: 1:    '✅f(1, 4, 12) = false',
736: 1:    '✅f(1, 1, 7) = false',
736: 1:    '✅f(2, 1, 7) = true',
736: 1:    '✅f(7, 1, 11) = true',
736: 1:    '✅f(7, 1, 8) = true',
736: 1:    '✅f(7, 1, 13) = false',
736: 1:    '✅f(43, 1, 46) = true',
736: 1:    '✅f(40, 1, 46) = false',
736: 1:    '✅f(40, 2, 47) = true',
736: 1:    '✅f(40, 2, 50) = true',
736: 1:    '✅f(40, 2, 52) = false',
736: 1:    '✅f(22, 2, 33) = false',
736: 1:    '✅f(0, 2, 10) = true',
736: 1:    '✅f(1000000, 1000, 1000100) = true',
736: 1:    '✅f(2, 1000000, 100003) = false',
736: 1:    '✅f(20, 0, 19) = true',
736: 1:    '❌f(20, 0, 21) = ??? != false'
736: 1:  ],
736: 1:  'level': 26,
736: 1:  'nextQuestion': '20, 0, 21',
736: 1:  'questions': [
736: 1:    '0, 1, 5',
736: 1:    '1, 0, 1',
736: 1:    '1, 0, 2',
736: 1:    '3, 1, 7',
736: 1:    '4, 2, 14',
736: 1:    '3, 2, 14',
736: 1:    '0, 2, 5',
736: 1:    '3, 1, 6',
736: 1:    '3, 1, 9',
736: 1:    '3, 2, 9',
736: 1:    '10, 10, 0',
736: 1:    '0, 0, 1',
736: 1:    '0, 1, 1',
736: 1:    '0, 0, 2',
736: 1:    '2, 0, 2',
736: 1:    '0, 1, 2',
736: 1:    '1, 1, 2',
736: 1:    '2, 1, 3',
736: 1:    '3, 1, 4',
736: 1:    '2, 1, 1',
736: 1:    '2, 2, 6',
736: 1:    '6, 1, 11',
736: 1:    '5, 0, 1',
736: 1:    '3, 1, 8',
736: 1:    '3, 2, 10',
736: 1:    '3, 2, 8',
736: 1:    '6, 0, 11',
736: 1:    '1, 4, 11',
736: 1:    '0, 3, 10',
736: 1:    '1, 4, 12',
736: 1:    '1, 1, 7',
736: 1:    '2, 1, 7',
736: 1:    '7, 1, 11',
736: 1:    '7, 1, 8',
736: 1:    '7, 1, 13',
736: 1:    '43, 1, 46',
736: 1:    '40, 1, 46',
736: 1:    '40, 2, 47',
736: 1:    '40, 2, 50',
736: 1:    '40, 2, 52',
736: 1:    '22, 2, 33',
736: 1:    '0, 2, 10',
736: 1:    '1000000, 1000, 1000100',
736: 1:    '2, 1000000, 100003',
736: 1:    '20, 0, 19',
736: 1:    '20, 0, 21'
736: 1:  ]
736: 1:}
736: 1:Scores: 66686
736: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'false', 'true', 'false']')
736: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
737: 1:BoardData {
737: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
737: 1:  'expectedAnswer': 'false',
737: 1:  'history': [
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '0, 1, 5',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '1, 0, 1',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '1, 0, 2',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '3, 1, 7',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '4, 2, 14',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '3, 2, 14',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '0, 2, 5',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '3, 1, 6',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '3, 1, 9',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '3, 2, 9',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '10, 10, 0',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '0, 0, 1',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '0, 1, 1',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '0, 0, 2',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '2, 0, 2',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '0, 1, 2',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '1, 1, 2',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '2, 1, 3',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '3, 1, 4',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '2, 1, 1',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '2, 2, 6',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '6, 1, 11',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '5, 0, 1',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '3, 1, 8',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '3, 2, 10',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '3, 2, 8',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '6, 0, 11',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '1, 4, 11',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '0, 3, 10',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '1, 4, 12',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '1, 1, 7',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '2, 1, 7',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '7, 1, 11',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '7, 1, 8',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '7, 1, 13',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '43, 1, 46',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '40, 1, 46',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '40, 2, 47',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '40, 2, 50',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '40, 2, 52',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '22, 2, 33',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '0, 2, 10',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '1000000, 1000, 1000100',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '2, 1000000, 100003',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'true',
737: 1:      'question': '20, 0, 19',
737: 1:      'valid': true
737: 1:    },
737: 1:    {
737: 1:      'answer': 'false',
737: 1:      'question': '20, 0, 21',
737: 1:      'valid': true
737: 1:    }
737: 1:  ],
737: 1:  'info': [
737: 1:    '✅f(0, 1, 5) = true',
737: 1:    '✅f(1, 0, 1) = true',
737: 1:    '✅f(1, 0, 2) = false',
737: 1:    '✅f(3, 1, 7) = true',
737: 1:    '✅f(4, 2, 14) = true',
737: 1:    '✅f(3, 2, 14) = false',
737: 1:    '✅f(0, 2, 5) = true',
737: 1:    '✅f(3, 1, 6) = true',
737: 1:    '✅f(3, 1, 9) = false',
737: 1:    '✅f(3, 2, 9) = false',
737: 1:    '✅f(10, 10, 0) = true',
737: 1:    '✅f(0, 0, 1) = false',
737: 1:    '✅f(0, 1, 1) = false',
737: 1:    '✅f(0, 0, 2) = false',
737: 1:    '✅f(2, 0, 2) = true',
737: 1:    '✅f(0, 1, 2) = false',
737: 1:    '✅f(1, 1, 2) = false',
737: 1:    '✅f(2, 1, 3) = false',
737: 1:    '✅f(3, 1, 4) = false',
737: 1:    '✅f(2, 1, 1) = true',
737: 1:    '✅f(2, 2, 6) = true',
737: 1:    '✅f(6, 1, 11) = true',
737: 1:    '✅f(5, 0, 1) = true',
737: 1:    '✅f(3, 1, 8) = true',
737: 1:    '✅f(3, 2, 10) = true',
737: 1:    '✅f(3, 2, 8) = true',
737: 1:    '✅f(6, 0, 11) = false',
737: 1:    '✅f(1, 4, 11) = true',
737: 1:    '✅f(0, 3, 10) = true',
737: 1:    '✅f(1, 4, 12) = false',
737: 1:    '✅f(1, 1, 7) = false',
737: 1:    '✅f(2, 1, 7) = true',
737: 1:    '✅f(7, 1, 11) = true',
737: 1:    '✅f(7, 1, 8) = true',
737: 1:    '✅f(7, 1, 13) = false',
737: 1:    '✅f(43, 1, 46) = true',
737: 1:    '✅f(40, 1, 46) = false',
737: 1:    '✅f(40, 2, 47) = true',
737: 1:    '✅f(40, 2, 50) = true',
737: 1:    '✅f(40, 2, 52) = false',
737: 1:    '✅f(22, 2, 33) = false',
737: 1:    '✅f(0, 2, 10) = true',
737: 1:    '✅f(1000000, 1000, 1000100) = true',
737: 1:    '✅f(2, 1000000, 100003) = false',
737: 1:    '✅f(20, 0, 19) = true',
737: 1:    '✅f(20, 0, 21) = false',
737: 1:    '❌f(20, 4, 51) = ??? != false'
737: 1:  ],
737: 1:  'level': 26,
737: 1:  'nextQuestion': '20, 4, 51',
737: 1:  'questions': [
737: 1:    '0, 1, 5',
737: 1:    '1, 0, 1',
737: 1:    '1, 0, 2',
737: 1:    '3, 1, 7',
737: 1:    '4, 2, 14',
737: 1:    '3, 2, 14',
737: 1:    '0, 2, 5',
737: 1:    '3, 1, 6',
737: 1:    '3, 1, 9',
737: 1:    '3, 2, 9',
737: 1:    '10, 10, 0',
737: 1:    '0, 0, 1',
737: 1:    '0, 1, 1',
737: 1:    '0, 0, 2',
737: 1:    '2, 0, 2',
737: 1:    '0, 1, 2',
737: 1:    '1, 1, 2',
737: 1:    '2, 1, 3',
737: 1:    '3, 1, 4',
737: 1:    '2, 1, 1',
737: 1:    '2, 2, 6',
737: 1:    '6, 1, 11',
737: 1:    '5, 0, 1',
737: 1:    '3, 1, 8',
737: 1:    '3, 2, 10',
737: 1:    '3, 2, 8',
737: 1:    '6, 0, 11',
737: 1:    '1, 4, 11',
737: 1:    '0, 3, 10',
737: 1:    '1, 4, 12',
737: 1:    '1, 1, 7',
737: 1:    '2, 1, 7',
737: 1:    '7, 1, 11',
737: 1:    '7, 1, 8',
737: 1:    '7, 1, 13',
737: 1:    '43, 1, 46',
737: 1:    '40, 1, 46',
737: 1:    '40, 2, 47',
737: 1:    '40, 2, 50',
737: 1:    '40, 2, 52',
737: 1:    '22, 2, 33',
737: 1:    '0, 2, 10',
737: 1:    '1000000, 1000, 1000100',
737: 1:    '2, 1000000, 100003',
737: 1:    '20, 0, 19',
737: 1:    '20, 0, 21',
737: 1:    '20, 4, 51'
737: 1:  ]
737: 1:}
737: 1:Scores: 66693
737: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'false', 'true', 'false', 'false']')
737: 1:Fire Event: PassTest{complexity=37, testCount=48}
------------------------------------------
738: 1:BoardData {
738: 1:  'description': ['You have bricks of size 5 (bigCount) and 1 (smallCount). Write a method that can determine if a given set of bricks can be used to build a wall of a given length. a given set of bricks to build a wall of a given length (length). For example: \nmethod(3, 1, 8) → true\nmethod(3, 1, 9) → false\nmethod(3, 2, 10) → true'],
738: 1:  'expectedAnswer': 'true',
738: 1:  'history': [
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '0, 1, 5',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '1, 0, 1',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '1, 0, 2',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '3, 1, 7',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '4, 2, 14',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '3, 2, 14',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '0, 2, 5',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '3, 1, 6',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '3, 1, 9',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '3, 2, 9',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '10, 10, 0',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '0, 0, 1',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '0, 1, 1',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '0, 0, 2',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '2, 0, 2',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '0, 1, 2',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '1, 1, 2',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '2, 1, 3',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '3, 1, 4',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '2, 1, 1',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '2, 2, 6',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '6, 1, 11',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '5, 0, 1',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '3, 1, 8',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '3, 2, 10',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '3, 2, 8',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '6, 0, 11',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '1, 4, 11',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '0, 3, 10',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '1, 4, 12',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '1, 1, 7',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '2, 1, 7',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '7, 1, 11',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '7, 1, 8',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '7, 1, 13',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '43, 1, 46',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '40, 1, 46',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '40, 2, 47',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '40, 2, 50',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '40, 2, 52',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '22, 2, 33',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '0, 2, 10',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '1000000, 1000, 1000100',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '2, 1000000, 100003',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'true',
738: 1:      'question': '20, 0, 19',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '20, 0, 21',
738: 1:      'valid': true
738: 1:    },
738: 1:    {
738: 1:      'answer': 'false',
738: 1:      'question': '20, 4, 51',
738: 1:      'valid': true
738: 1:    }
738: 1:  ],
738: 1:  'info': [
738: 1:    '✅f(0, 1, 5) = true',
738: 1:    '✅f(1, 0, 1) = true',
738: 1:    '✅f(1, 0, 2) = false',
738: 1:    '✅f(3, 1, 7) = true',
738: 1:    '✅f(4, 2, 14) = true',
738: 1:    '✅f(3, 2, 14) = false',
738: 1:    '✅f(0, 2, 5) = true',
738: 1:    '✅f(3, 1, 6) = true',
738: 1:    '✅f(3, 1, 9) = false',
738: 1:    '✅f(3, 2, 9) = false',
738: 1:    '✅f(10, 10, 0) = true',
738: 1:    '✅f(0, 0, 1) = false',
738: 1:    '✅f(0, 1, 1) = false',
738: 1:    '✅f(0, 0, 2) = false',
738: 1:    '✅f(2, 0, 2) = true',
738: 1:    '✅f(0, 1, 2) = false',
738: 1:    '✅f(1, 1, 2) = false',
738: 1:    '✅f(2, 1, 3) = false',
738: 1:    '✅f(3, 1, 4) = false',
738: 1:    '✅f(2, 1, 1) = true',
738: 1:    '✅f(2, 2, 6) = true',
738: 1:    '✅f(6, 1, 11) = true',
738: 1:    '✅f(5, 0, 1) = true',
738: 1:    '✅f(3, 1, 8) = true',
738: 1:    '✅f(3, 2, 10) = true',
738: 1:    '✅f(3, 2, 8) = true',
738: 1:    '✅f(6, 0, 11) = false',
738: 1:    '✅f(1, 4, 11) = true',
738: 1:    '✅f(0, 3, 10) = true',
738: 1:    '✅f(1, 4, 12) = false',
738: 1:    '✅f(1, 1, 7) = false',
738: 1:    '✅f(2, 1, 7) = true',
738: 1:    '✅f(7, 1, 11) = true',
738: 1:    '✅f(7, 1, 8) = true',
738: 1:    '✅f(7, 1, 13) = false',
738: 1:    '✅f(43, 1, 46) = true',
738: 1:    '✅f(40, 1, 46) = false',
738: 1:    '✅f(40, 2, 47) = true',
738: 1:    '✅f(40, 2, 50) = true',
738: 1:    '✅f(40, 2, 52) = false',
738: 1:    '✅f(22, 2, 33) = false',
738: 1:    '✅f(0, 2, 10) = true',
738: 1:    '✅f(1000000, 1000, 1000100) = true',
738: 1:    '✅f(2, 1000000, 100003) = false',
738: 1:    '✅f(20, 0, 19) = true',
738: 1:    '✅f(20, 0, 21) = false',
738: 1:    '✅f(20, 4, 51) = false',
738: 1:    '❌f(20, 4, 39) = ??? != true'
738: 1:  ],
738: 1:  'level': 26,
738: 1:  'nextQuestion': '20, 4, 39',
738: 1:  'questions': [
738: 1:    '0, 1, 5',
738: 1:    '1, 0, 1',
738: 1:    '1, 0, 2',
738: 1:    '3, 1, 7',
738: 1:    '4, 2, 14',
738: 1:    '3, 2, 14',
738: 1:    '0, 2, 5',
738: 1:    '3, 1, 6',
738: 1:    '3, 1, 9',
738: 1:    '3, 2, 9',
738: 1:    '10, 10, 0',
738: 1:    '0, 0, 1',
738: 1:    '0, 1, 1',
738: 1:    '0, 0, 2',
738: 1:    '2, 0, 2',
738: 1:    '0, 1, 2',
738: 1:    '1, 1, 2',
738: 1:    '2, 1, 3',
738: 1:    '3, 1, 4',
738: 1:    '2, 1, 1',
738: 1:    '2, 2, 6',
738: 1:    '6, 1, 11',
738: 1:    '5, 0, 1',
738: 1:    '3, 1, 8',
738: 1:    '3, 2, 10',
738: 1:    '3, 2, 8',
738: 1:    '6, 0, 11',
738: 1:    '1, 4, 11',
738: 1:    '0, 3, 10',
738: 1:    '1, 4, 12',
738: 1:    '1, 1, 7',
738: 1:    '2, 1, 7',
738: 1:    '7, 1, 11',
738: 1:    '7, 1, 8',
738: 1:    '7, 1, 13',
738: 1:    '43, 1, 46',
738: 1:    '40, 1, 46',
738: 1:    '40, 2, 47',
738: 1:    '40, 2, 50',
738: 1:    '40, 2, 52',
738: 1:    '22, 2, 33',
738: 1:    '0, 2, 10',
738: 1:    '1000000, 1000, 1000100',
738: 1:    '2, 1000000, 100003',
738: 1:    '20, 0, 19',
738: 1:    '20, 0, 21',
738: 1:    '20, 4, 51',
738: 1:    '20, 4, 39'
738: 1:  ]
738: 1:}
738: 1:Scores: 66700
738: 1:Answer: message('['true', 'true', 'false', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'false', 'false', 'true', 'false', 'false', 'false', 'false', 'true', 'true', 'true', 'true', 'true', 'true', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'true', 'false', 'true', 'false', 'true', 'true', 'false', 'false', 'true', 'true', 'false', 'true', 'false', 'false', 'true']')
738: 1:Fire Event: PassTest{complexity=37, testCount=48}
738: 1:Fire Event: NextAlgorithm{complexity=37, time=0}
------------------------------------------
739: 1:BoardData {
739: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
739: 1:  'history': [
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '0, 1, 5',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '1, 0, 1',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '1, 0, 2',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '3, 1, 7',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '4, 2, 14',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '3, 2, 14',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '0, 2, 5',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '3, 1, 6',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '3, 1, 9',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '3, 2, 9',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '10, 10, 0',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '0, 0, 1',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '0, 1, 1',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '0, 0, 2',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '2, 0, 2',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '0, 1, 2',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '1, 1, 2',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '2, 1, 3',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '3, 1, 4',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '2, 1, 1',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '2, 2, 6',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '6, 1, 11',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '5, 0, 1',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '3, 1, 8',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '3, 2, 10',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '3, 2, 8',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '6, 0, 11',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '1, 4, 11',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '0, 3, 10',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '1, 4, 12',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '1, 1, 7',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '2, 1, 7',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '7, 1, 11',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '7, 1, 8',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '7, 1, 13',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '43, 1, 46',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '40, 1, 46',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '40, 2, 47',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '40, 2, 50',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '40, 2, 52',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '22, 2, 33',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '0, 2, 10',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '1000000, 1000, 1000100',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '2, 1000000, 100003',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '20, 0, 19',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '20, 0, 21',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'false',
739: 1:      'question': '20, 4, 51',
739: 1:      'valid': true
739: 1:    },
739: 1:    {
739: 1:      'answer': 'true',
739: 1:      'question': '20, 4, 39',
739: 1:      'valid': true
739: 1:    }
739: 1:  ],
739: 1:  'info': [
739: 1:    '✅f(0, 1, 5) = true',
739: 1:    '✅f(1, 0, 1) = true',
739: 1:    '✅f(1, 0, 2) = false',
739: 1:    '✅f(3, 1, 7) = true',
739: 1:    '✅f(4, 2, 14) = true',
739: 1:    '✅f(3, 2, 14) = false',
739: 1:    '✅f(0, 2, 5) = true',
739: 1:    '✅f(3, 1, 6) = true',
739: 1:    '✅f(3, 1, 9) = false',
739: 1:    '✅f(3, 2, 9) = false',
739: 1:    '✅f(10, 10, 0) = true',
739: 1:    '✅f(0, 0, 1) = false',
739: 1:    '✅f(0, 1, 1) = false',
739: 1:    '✅f(0, 0, 2) = false',
739: 1:    '✅f(2, 0, 2) = true',
739: 1:    '✅f(0, 1, 2) = false',
739: 1:    '✅f(1, 1, 2) = false',
739: 1:    '✅f(2, 1, 3) = false',
739: 1:    '✅f(3, 1, 4) = false',
739: 1:    '✅f(2, 1, 1) = true',
739: 1:    '✅f(2, 2, 6) = true',
739: 1:    '✅f(6, 1, 11) = true',
739: 1:    '✅f(5, 0, 1) = true',
739: 1:    '✅f(3, 1, 8) = true',
739: 1:    '✅f(3, 2, 10) = true',
739: 1:    '✅f(3, 2, 8) = true',
739: 1:    '✅f(6, 0, 11) = false',
739: 1:    '✅f(1, 4, 11) = true',
739: 1:    '✅f(0, 3, 10) = true',
739: 1:    '✅f(1, 4, 12) = false',
739: 1:    '✅f(1, 1, 7) = false',
739: 1:    '✅f(2, 1, 7) = true',
739: 1:    '✅f(7, 1, 11) = true',
739: 1:    '✅f(7, 1, 8) = true',
739: 1:    '✅f(7, 1, 13) = false',
739: 1:    '✅f(43, 1, 46) = true',
739: 1:    '✅f(40, 1, 46) = false',
739: 1:    '✅f(40, 2, 47) = true',
739: 1:    '✅f(40, 2, 50) = true',
739: 1:    '✅f(40, 2, 52) = false',
739: 1:    '✅f(22, 2, 33) = false',
739: 1:    '✅f(0, 2, 10) = true',
739: 1:    '✅f(1000000, 1000, 1000100) = true',
739: 1:    '✅f(2, 1000000, 100003) = false',
739: 1:    '✅f(20, 0, 19) = true',
739: 1:    '✅f(20, 0, 21) = false',
739: 1:    '✅f(20, 4, 51) = false',
739: 1:    '✅f(20, 4, 39) = true'
739: 1:  ],
739: 1:  'level': 26,
739: 1:  'questions': []
739: 1:}
739: 1:Scores: 71701
739: 1:Answer: message('StartNextLevel')
739: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
740: 1:BoardData {
740: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
740: 1:  'expectedAnswer': 'I',
740: 1:  'history': [],
740: 1:  'info': ['❌f(1) = ??? != I'],
740: 1:  'level': 27,
740: 1:  'nextQuestion': '1',
740: 1:  'questions': ['1']
740: 1:}
740: 1:Scores: 71701
740: 1:Answer: message('['I']')
740: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
741: 1:BoardData {
741: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
741: 1:  'expectedAnswer': 'II',
741: 1:  'history': [{
741: 1:    'answer': 'I',
741: 1:    'question': '1',
741: 1:    'valid': true
741: 1:  }],
741: 1:  'info': [
741: 1:    '✅f(1) = I',
741: 1:    '❌f(2) = ??? != II'
741: 1:  ],
741: 1:  'level': 27,
741: 1:  'nextQuestion': '2',
741: 1:  'questions': [
741: 1:    '1',
741: 1:    '2'
741: 1:  ]
741: 1:}
741: 1:Scores: 71711
741: 1:Answer: message('['I', 'II']')
741: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
742: 1:BoardData {
742: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
742: 1:  'expectedAnswer': 'III',
742: 1:  'history': [
742: 1:    {
742: 1:      'answer': 'I',
742: 1:      'question': '1',
742: 1:      'valid': true
742: 1:    },
742: 1:    {
742: 1:      'answer': 'II',
742: 1:      'question': '2',
742: 1:      'valid': true
742: 1:    }
742: 1:  ],
742: 1:  'info': [
742: 1:    '✅f(1) = I',
742: 1:    '✅f(2) = II',
742: 1:    '❌f(3) = ??? != III'
742: 1:  ],
742: 1:  'level': 27,
742: 1:  'nextQuestion': '3',
742: 1:  'questions': [
742: 1:    '1',
742: 1:    '2',
742: 1:    '3'
742: 1:  ]
742: 1:}
742: 1:Scores: 71721
742: 1:Answer: message('['I', 'II', 'III']')
742: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
743: 1:BoardData {
743: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
743: 1:  'expectedAnswer': 'IV',
743: 1:  'history': [
743: 1:    {
743: 1:      'answer': 'I',
743: 1:      'question': '1',
743: 1:      'valid': true
743: 1:    },
743: 1:    {
743: 1:      'answer': 'II',
743: 1:      'question': '2',
743: 1:      'valid': true
743: 1:    },
743: 1:    {
743: 1:      'answer': 'III',
743: 1:      'question': '3',
743: 1:      'valid': true
743: 1:    }
743: 1:  ],
743: 1:  'info': [
743: 1:    '✅f(1) = I',
743: 1:    '✅f(2) = II',
743: 1:    '✅f(3) = III',
743: 1:    '❌f(4) = ??? != IV'
743: 1:  ],
743: 1:  'level': 27,
743: 1:  'nextQuestion': '4',
743: 1:  'questions': [
743: 1:    '1',
743: 1:    '2',
743: 1:    '3',
743: 1:    '4'
743: 1:  ]
743: 1:}
743: 1:Scores: 71731
743: 1:Answer: message('['I', 'II', 'III', 'IV']')
743: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
744: 1:BoardData {
744: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
744: 1:  'expectedAnswer': 'V',
744: 1:  'history': [
744: 1:    {
744: 1:      'answer': 'I',
744: 1:      'question': '1',
744: 1:      'valid': true
744: 1:    },
744: 1:    {
744: 1:      'answer': 'II',
744: 1:      'question': '2',
744: 1:      'valid': true
744: 1:    },
744: 1:    {
744: 1:      'answer': 'III',
744: 1:      'question': '3',
744: 1:      'valid': true
744: 1:    },
744: 1:    {
744: 1:      'answer': 'IV',
744: 1:      'question': '4',
744: 1:      'valid': true
744: 1:    }
744: 1:  ],
744: 1:  'info': [
744: 1:    '✅f(1) = I',
744: 1:    '✅f(2) = II',
744: 1:    '✅f(3) = III',
744: 1:    '✅f(4) = IV',
744: 1:    '❌f(5) = ??? != V'
744: 1:  ],
744: 1:  'level': 27,
744: 1:  'nextQuestion': '5',
744: 1:  'questions': [
744: 1:    '1',
744: 1:    '2',
744: 1:    '3',
744: 1:    '4',
744: 1:    '5'
744: 1:  ]
744: 1:}
744: 1:Scores: 71741
744: 1:Answer: message('['I', 'II', 'III', 'IV', 'V']')
744: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
745: 1:BoardData {
745: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
745: 1:  'expectedAnswer': 'VI',
745: 1:  'history': [
745: 1:    {
745: 1:      'answer': 'I',
745: 1:      'question': '1',
745: 1:      'valid': true
745: 1:    },
745: 1:    {
745: 1:      'answer': 'II',
745: 1:      'question': '2',
745: 1:      'valid': true
745: 1:    },
745: 1:    {
745: 1:      'answer': 'III',
745: 1:      'question': '3',
745: 1:      'valid': true
745: 1:    },
745: 1:    {
745: 1:      'answer': 'IV',
745: 1:      'question': '4',
745: 1:      'valid': true
745: 1:    },
745: 1:    {
745: 1:      'answer': 'V',
745: 1:      'question': '5',
745: 1:      'valid': true
745: 1:    }
745: 1:  ],
745: 1:  'info': [
745: 1:    '✅f(1) = I',
745: 1:    '✅f(2) = II',
745: 1:    '✅f(3) = III',
745: 1:    '✅f(4) = IV',
745: 1:    '✅f(5) = V',
745: 1:    '❌f(6) = ??? != VI'
745: 1:  ],
745: 1:  'level': 27,
745: 1:  'nextQuestion': '6',
745: 1:  'questions': [
745: 1:    '1',
745: 1:    '2',
745: 1:    '3',
745: 1:    '4',
745: 1:    '5',
745: 1:    '6'
745: 1:  ]
745: 1:}
745: 1:Scores: 71751
745: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI']')
745: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
746: 1:BoardData {
746: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
746: 1:  'expectedAnswer': 'VII',
746: 1:  'history': [
746: 1:    {
746: 1:      'answer': 'I',
746: 1:      'question': '1',
746: 1:      'valid': true
746: 1:    },
746: 1:    {
746: 1:      'answer': 'II',
746: 1:      'question': '2',
746: 1:      'valid': true
746: 1:    },
746: 1:    {
746: 1:      'answer': 'III',
746: 1:      'question': '3',
746: 1:      'valid': true
746: 1:    },
746: 1:    {
746: 1:      'answer': 'IV',
746: 1:      'question': '4',
746: 1:      'valid': true
746: 1:    },
746: 1:    {
746: 1:      'answer': 'V',
746: 1:      'question': '5',
746: 1:      'valid': true
746: 1:    },
746: 1:    {
746: 1:      'answer': 'VI',
746: 1:      'question': '6',
746: 1:      'valid': true
746: 1:    }
746: 1:  ],
746: 1:  'info': [
746: 1:    '✅f(1) = I',
746: 1:    '✅f(2) = II',
746: 1:    '✅f(3) = III',
746: 1:    '✅f(4) = IV',
746: 1:    '✅f(5) = V',
746: 1:    '✅f(6) = VI',
746: 1:    '❌f(7) = ??? != VII'
746: 1:  ],
746: 1:  'level': 27,
746: 1:  'nextQuestion': '7',
746: 1:  'questions': [
746: 1:    '1',
746: 1:    '2',
746: 1:    '3',
746: 1:    '4',
746: 1:    '5',
746: 1:    '6',
746: 1:    '7'
746: 1:  ]
746: 1:}
746: 1:Scores: 71761
746: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII']')
746: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
747: 1:BoardData {
747: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
747: 1:  'expectedAnswer': 'VIII',
747: 1:  'history': [
747: 1:    {
747: 1:      'answer': 'I',
747: 1:      'question': '1',
747: 1:      'valid': true
747: 1:    },
747: 1:    {
747: 1:      'answer': 'II',
747: 1:      'question': '2',
747: 1:      'valid': true
747: 1:    },
747: 1:    {
747: 1:      'answer': 'III',
747: 1:      'question': '3',
747: 1:      'valid': true
747: 1:    },
747: 1:    {
747: 1:      'answer': 'IV',
747: 1:      'question': '4',
747: 1:      'valid': true
747: 1:    },
747: 1:    {
747: 1:      'answer': 'V',
747: 1:      'question': '5',
747: 1:      'valid': true
747: 1:    },
747: 1:    {
747: 1:      'answer': 'VI',
747: 1:      'question': '6',
747: 1:      'valid': true
747: 1:    },
747: 1:    {
747: 1:      'answer': 'VII',
747: 1:      'question': '7',
747: 1:      'valid': true
747: 1:    }
747: 1:  ],
747: 1:  'info': [
747: 1:    '✅f(1) = I',
747: 1:    '✅f(2) = II',
747: 1:    '✅f(3) = III',
747: 1:    '✅f(4) = IV',
747: 1:    '✅f(5) = V',
747: 1:    '✅f(6) = VI',
747: 1:    '✅f(7) = VII',
747: 1:    '❌f(8) = ??? != VIII'
747: 1:  ],
747: 1:  'level': 27,
747: 1:  'nextQuestion': '8',
747: 1:  'questions': [
747: 1:    '1',
747: 1:    '2',
747: 1:    '3',
747: 1:    '4',
747: 1:    '5',
747: 1:    '6',
747: 1:    '7',
747: 1:    '8'
747: 1:  ]
747: 1:}
747: 1:Scores: 71771
747: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII']')
747: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
748: 1:BoardData {
748: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
748: 1:  'expectedAnswer': 'IX',
748: 1:  'history': [
748: 1:    {
748: 1:      'answer': 'I',
748: 1:      'question': '1',
748: 1:      'valid': true
748: 1:    },
748: 1:    {
748: 1:      'answer': 'II',
748: 1:      'question': '2',
748: 1:      'valid': true
748: 1:    },
748: 1:    {
748: 1:      'answer': 'III',
748: 1:      'question': '3',
748: 1:      'valid': true
748: 1:    },
748: 1:    {
748: 1:      'answer': 'IV',
748: 1:      'question': '4',
748: 1:      'valid': true
748: 1:    },
748: 1:    {
748: 1:      'answer': 'V',
748: 1:      'question': '5',
748: 1:      'valid': true
748: 1:    },
748: 1:    {
748: 1:      'answer': 'VI',
748: 1:      'question': '6',
748: 1:      'valid': true
748: 1:    },
748: 1:    {
748: 1:      'answer': 'VII',
748: 1:      'question': '7',
748: 1:      'valid': true
748: 1:    },
748: 1:    {
748: 1:      'answer': 'VIII',
748: 1:      'question': '8',
748: 1:      'valid': true
748: 1:    }
748: 1:  ],
748: 1:  'info': [
748: 1:    '✅f(1) = I',
748: 1:    '✅f(2) = II',
748: 1:    '✅f(3) = III',
748: 1:    '✅f(4) = IV',
748: 1:    '✅f(5) = V',
748: 1:    '✅f(6) = VI',
748: 1:    '✅f(7) = VII',
748: 1:    '✅f(8) = VIII',
748: 1:    '❌f(9) = ??? != IX'
748: 1:  ],
748: 1:  'level': 27,
748: 1:  'nextQuestion': '9',
748: 1:  'questions': [
748: 1:    '1',
748: 1:    '2',
748: 1:    '3',
748: 1:    '4',
748: 1:    '5',
748: 1:    '6',
748: 1:    '7',
748: 1:    '8',
748: 1:    '9'
748: 1:  ]
748: 1:}
748: 1:Scores: 71781
748: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX']')
748: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
749: 1:BoardData {
749: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
749: 1:  'expectedAnswer': 'X',
749: 1:  'history': [
749: 1:    {
749: 1:      'answer': 'I',
749: 1:      'question': '1',
749: 1:      'valid': true
749: 1:    },
749: 1:    {
749: 1:      'answer': 'II',
749: 1:      'question': '2',
749: 1:      'valid': true
749: 1:    },
749: 1:    {
749: 1:      'answer': 'III',
749: 1:      'question': '3',
749: 1:      'valid': true
749: 1:    },
749: 1:    {
749: 1:      'answer': 'IV',
749: 1:      'question': '4',
749: 1:      'valid': true
749: 1:    },
749: 1:    {
749: 1:      'answer': 'V',
749: 1:      'question': '5',
749: 1:      'valid': true
749: 1:    },
749: 1:    {
749: 1:      'answer': 'VI',
749: 1:      'question': '6',
749: 1:      'valid': true
749: 1:    },
749: 1:    {
749: 1:      'answer': 'VII',
749: 1:      'question': '7',
749: 1:      'valid': true
749: 1:    },
749: 1:    {
749: 1:      'answer': 'VIII',
749: 1:      'question': '8',
749: 1:      'valid': true
749: 1:    },
749: 1:    {
749: 1:      'answer': 'IX',
749: 1:      'question': '9',
749: 1:      'valid': true
749: 1:    }
749: 1:  ],
749: 1:  'info': [
749: 1:    '✅f(1) = I',
749: 1:    '✅f(2) = II',
749: 1:    '✅f(3) = III',
749: 1:    '✅f(4) = IV',
749: 1:    '✅f(5) = V',
749: 1:    '✅f(6) = VI',
749: 1:    '✅f(7) = VII',
749: 1:    '✅f(8) = VIII',
749: 1:    '✅f(9) = IX',
749: 1:    '❌f(10) = ??? != X'
749: 1:  ],
749: 1:  'level': 27,
749: 1:  'nextQuestion': '10',
749: 1:  'questions': [
749: 1:    '1',
749: 1:    '2',
749: 1:    '3',
749: 1:    '4',
749: 1:    '5',
749: 1:    '6',
749: 1:    '7',
749: 1:    '8',
749: 1:    '9',
749: 1:    '10'
749: 1:  ]
749: 1:}
749: 1:Scores: 71791
749: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X']')
749: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
750: 1:BoardData {
750: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
750: 1:  'expectedAnswer': 'XI',
750: 1:  'history': [
750: 1:    {
750: 1:      'answer': 'I',
750: 1:      'question': '1',
750: 1:      'valid': true
750: 1:    },
750: 1:    {
750: 1:      'answer': 'II',
750: 1:      'question': '2',
750: 1:      'valid': true
750: 1:    },
750: 1:    {
750: 1:      'answer': 'III',
750: 1:      'question': '3',
750: 1:      'valid': true
750: 1:    },
750: 1:    {
750: 1:      'answer': 'IV',
750: 1:      'question': '4',
750: 1:      'valid': true
750: 1:    },
750: 1:    {
750: 1:      'answer': 'V',
750: 1:      'question': '5',
750: 1:      'valid': true
750: 1:    },
750: 1:    {
750: 1:      'answer': 'VI',
750: 1:      'question': '6',
750: 1:      'valid': true
750: 1:    },
750: 1:    {
750: 1:      'answer': 'VII',
750: 1:      'question': '7',
750: 1:      'valid': true
750: 1:    },
750: 1:    {
750: 1:      'answer': 'VIII',
750: 1:      'question': '8',
750: 1:      'valid': true
750: 1:    },
750: 1:    {
750: 1:      'answer': 'IX',
750: 1:      'question': '9',
750: 1:      'valid': true
750: 1:    },
750: 1:    {
750: 1:      'answer': 'X',
750: 1:      'question': '10',
750: 1:      'valid': true
750: 1:    }
750: 1:  ],
750: 1:  'info': [
750: 1:    '✅f(1) = I',
750: 1:    '✅f(2) = II',
750: 1:    '✅f(3) = III',
750: 1:    '✅f(4) = IV',
750: 1:    '✅f(5) = V',
750: 1:    '✅f(6) = VI',
750: 1:    '✅f(7) = VII',
750: 1:    '✅f(8) = VIII',
750: 1:    '✅f(9) = IX',
750: 1:    '✅f(10) = X',
750: 1:    '❌f(11) = ??? != XI'
750: 1:  ],
750: 1:  'level': 27,
750: 1:  'nextQuestion': '11',
750: 1:  'questions': [
750: 1:    '1',
750: 1:    '2',
750: 1:    '3',
750: 1:    '4',
750: 1:    '5',
750: 1:    '6',
750: 1:    '7',
750: 1:    '8',
750: 1:    '9',
750: 1:    '10',
750: 1:    '11'
750: 1:  ]
750: 1:}
750: 1:Scores: 71801
750: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI']')
750: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
751: 1:BoardData {
751: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
751: 1:  'expectedAnswer': 'XII',
751: 1:  'history': [
751: 1:    {
751: 1:      'answer': 'I',
751: 1:      'question': '1',
751: 1:      'valid': true
751: 1:    },
751: 1:    {
751: 1:      'answer': 'II',
751: 1:      'question': '2',
751: 1:      'valid': true
751: 1:    },
751: 1:    {
751: 1:      'answer': 'III',
751: 1:      'question': '3',
751: 1:      'valid': true
751: 1:    },
751: 1:    {
751: 1:      'answer': 'IV',
751: 1:      'question': '4',
751: 1:      'valid': true
751: 1:    },
751: 1:    {
751: 1:      'answer': 'V',
751: 1:      'question': '5',
751: 1:      'valid': true
751: 1:    },
751: 1:    {
751: 1:      'answer': 'VI',
751: 1:      'question': '6',
751: 1:      'valid': true
751: 1:    },
751: 1:    {
751: 1:      'answer': 'VII',
751: 1:      'question': '7',
751: 1:      'valid': true
751: 1:    },
751: 1:    {
751: 1:      'answer': 'VIII',
751: 1:      'question': '8',
751: 1:      'valid': true
751: 1:    },
751: 1:    {
751: 1:      'answer': 'IX',
751: 1:      'question': '9',
751: 1:      'valid': true
751: 1:    },
751: 1:    {
751: 1:      'answer': 'X',
751: 1:      'question': '10',
751: 1:      'valid': true
751: 1:    },
751: 1:    {
751: 1:      'answer': 'XI',
751: 1:      'question': '11',
751: 1:      'valid': true
751: 1:    }
751: 1:  ],
751: 1:  'info': [
751: 1:    '✅f(1) = I',
751: 1:    '✅f(2) = II',
751: 1:    '✅f(3) = III',
751: 1:    '✅f(4) = IV',
751: 1:    '✅f(5) = V',
751: 1:    '✅f(6) = VI',
751: 1:    '✅f(7) = VII',
751: 1:    '✅f(8) = VIII',
751: 1:    '✅f(9) = IX',
751: 1:    '✅f(10) = X',
751: 1:    '✅f(11) = XI',
751: 1:    '❌f(12) = ??? != XII'
751: 1:  ],
751: 1:  'level': 27,
751: 1:  'nextQuestion': '12',
751: 1:  'questions': [
751: 1:    '1',
751: 1:    '2',
751: 1:    '3',
751: 1:    '4',
751: 1:    '5',
751: 1:    '6',
751: 1:    '7',
751: 1:    '8',
751: 1:    '9',
751: 1:    '10',
751: 1:    '11',
751: 1:    '12'
751: 1:  ]
751: 1:}
751: 1:Scores: 71811
751: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII']')
751: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
752: 1:BoardData {
752: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
752: 1:  'expectedAnswer': 'XIII',
752: 1:  'history': [
752: 1:    {
752: 1:      'answer': 'I',
752: 1:      'question': '1',
752: 1:      'valid': true
752: 1:    },
752: 1:    {
752: 1:      'answer': 'II',
752: 1:      'question': '2',
752: 1:      'valid': true
752: 1:    },
752: 1:    {
752: 1:      'answer': 'III',
752: 1:      'question': '3',
752: 1:      'valid': true
752: 1:    },
752: 1:    {
752: 1:      'answer': 'IV',
752: 1:      'question': '4',
752: 1:      'valid': true
752: 1:    },
752: 1:    {
752: 1:      'answer': 'V',
752: 1:      'question': '5',
752: 1:      'valid': true
752: 1:    },
752: 1:    {
752: 1:      'answer': 'VI',
752: 1:      'question': '6',
752: 1:      'valid': true
752: 1:    },
752: 1:    {
752: 1:      'answer': 'VII',
752: 1:      'question': '7',
752: 1:      'valid': true
752: 1:    },
752: 1:    {
752: 1:      'answer': 'VIII',
752: 1:      'question': '8',
752: 1:      'valid': true
752: 1:    },
752: 1:    {
752: 1:      'answer': 'IX',
752: 1:      'question': '9',
752: 1:      'valid': true
752: 1:    },
752: 1:    {
752: 1:      'answer': 'X',
752: 1:      'question': '10',
752: 1:      'valid': true
752: 1:    },
752: 1:    {
752: 1:      'answer': 'XI',
752: 1:      'question': '11',
752: 1:      'valid': true
752: 1:    },
752: 1:    {
752: 1:      'answer': 'XII',
752: 1:      'question': '12',
752: 1:      'valid': true
752: 1:    }
752: 1:  ],
752: 1:  'info': [
752: 1:    '✅f(1) = I',
752: 1:    '✅f(2) = II',
752: 1:    '✅f(3) = III',
752: 1:    '✅f(4) = IV',
752: 1:    '✅f(5) = V',
752: 1:    '✅f(6) = VI',
752: 1:    '✅f(7) = VII',
752: 1:    '✅f(8) = VIII',
752: 1:    '✅f(9) = IX',
752: 1:    '✅f(10) = X',
752: 1:    '✅f(11) = XI',
752: 1:    '✅f(12) = XII',
752: 1:    '❌f(13) = ??? != XIII'
752: 1:  ],
752: 1:  'level': 27,
752: 1:  'nextQuestion': '13',
752: 1:  'questions': [
752: 1:    '1',
752: 1:    '2',
752: 1:    '3',
752: 1:    '4',
752: 1:    '5',
752: 1:    '6',
752: 1:    '7',
752: 1:    '8',
752: 1:    '9',
752: 1:    '10',
752: 1:    '11',
752: 1:    '12',
752: 1:    '13'
752: 1:  ]
752: 1:}
752: 1:Scores: 71821
752: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII']')
752: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
753: 1:BoardData {
753: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
753: 1:  'expectedAnswer': 'XIV',
753: 1:  'history': [
753: 1:    {
753: 1:      'answer': 'I',
753: 1:      'question': '1',
753: 1:      'valid': true
753: 1:    },
753: 1:    {
753: 1:      'answer': 'II',
753: 1:      'question': '2',
753: 1:      'valid': true
753: 1:    },
753: 1:    {
753: 1:      'answer': 'III',
753: 1:      'question': '3',
753: 1:      'valid': true
753: 1:    },
753: 1:    {
753: 1:      'answer': 'IV',
753: 1:      'question': '4',
753: 1:      'valid': true
753: 1:    },
753: 1:    {
753: 1:      'answer': 'V',
753: 1:      'question': '5',
753: 1:      'valid': true
753: 1:    },
753: 1:    {
753: 1:      'answer': 'VI',
753: 1:      'question': '6',
753: 1:      'valid': true
753: 1:    },
753: 1:    {
753: 1:      'answer': 'VII',
753: 1:      'question': '7',
753: 1:      'valid': true
753: 1:    },
753: 1:    {
753: 1:      'answer': 'VIII',
753: 1:      'question': '8',
753: 1:      'valid': true
753: 1:    },
753: 1:    {
753: 1:      'answer': 'IX',
753: 1:      'question': '9',
753: 1:      'valid': true
753: 1:    },
753: 1:    {
753: 1:      'answer': 'X',
753: 1:      'question': '10',
753: 1:      'valid': true
753: 1:    },
753: 1:    {
753: 1:      'answer': 'XI',
753: 1:      'question': '11',
753: 1:      'valid': true
753: 1:    },
753: 1:    {
753: 1:      'answer': 'XII',
753: 1:      'question': '12',
753: 1:      'valid': true
753: 1:    },
753: 1:    {
753: 1:      'answer': 'XIII',
753: 1:      'question': '13',
753: 1:      'valid': true
753: 1:    }
753: 1:  ],
753: 1:  'info': [
753: 1:    '✅f(1) = I',
753: 1:    '✅f(2) = II',
753: 1:    '✅f(3) = III',
753: 1:    '✅f(4) = IV',
753: 1:    '✅f(5) = V',
753: 1:    '✅f(6) = VI',
753: 1:    '✅f(7) = VII',
753: 1:    '✅f(8) = VIII',
753: 1:    '✅f(9) = IX',
753: 1:    '✅f(10) = X',
753: 1:    '✅f(11) = XI',
753: 1:    '✅f(12) = XII',
753: 1:    '✅f(13) = XIII',
753: 1:    '❌f(14) = ??? != XIV'
753: 1:  ],
753: 1:  'level': 27,
753: 1:  'nextQuestion': '14',
753: 1:  'questions': [
753: 1:    '1',
753: 1:    '2',
753: 1:    '3',
753: 1:    '4',
753: 1:    '5',
753: 1:    '6',
753: 1:    '7',
753: 1:    '8',
753: 1:    '9',
753: 1:    '10',
753: 1:    '11',
753: 1:    '12',
753: 1:    '13',
753: 1:    '14'
753: 1:  ]
753: 1:}
753: 1:Scores: 71831
753: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV']')
753: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
754: 1:BoardData {
754: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
754: 1:  'expectedAnswer': 'XV',
754: 1:  'history': [
754: 1:    {
754: 1:      'answer': 'I',
754: 1:      'question': '1',
754: 1:      'valid': true
754: 1:    },
754: 1:    {
754: 1:      'answer': 'II',
754: 1:      'question': '2',
754: 1:      'valid': true
754: 1:    },
754: 1:    {
754: 1:      'answer': 'III',
754: 1:      'question': '3',
754: 1:      'valid': true
754: 1:    },
754: 1:    {
754: 1:      'answer': 'IV',
754: 1:      'question': '4',
754: 1:      'valid': true
754: 1:    },
754: 1:    {
754: 1:      'answer': 'V',
754: 1:      'question': '5',
754: 1:      'valid': true
754: 1:    },
754: 1:    {
754: 1:      'answer': 'VI',
754: 1:      'question': '6',
754: 1:      'valid': true
754: 1:    },
754: 1:    {
754: 1:      'answer': 'VII',
754: 1:      'question': '7',
754: 1:      'valid': true
754: 1:    },
754: 1:    {
754: 1:      'answer': 'VIII',
754: 1:      'question': '8',
754: 1:      'valid': true
754: 1:    },
754: 1:    {
754: 1:      'answer': 'IX',
754: 1:      'question': '9',
754: 1:      'valid': true
754: 1:    },
754: 1:    {
754: 1:      'answer': 'X',
754: 1:      'question': '10',
754: 1:      'valid': true
754: 1:    },
754: 1:    {
754: 1:      'answer': 'XI',
754: 1:      'question': '11',
754: 1:      'valid': true
754: 1:    },
754: 1:    {
754: 1:      'answer': 'XII',
754: 1:      'question': '12',
754: 1:      'valid': true
754: 1:    },
754: 1:    {
754: 1:      'answer': 'XIII',
754: 1:      'question': '13',
754: 1:      'valid': true
754: 1:    },
754: 1:    {
754: 1:      'answer': 'XIV',
754: 1:      'question': '14',
754: 1:      'valid': true
754: 1:    }
754: 1:  ],
754: 1:  'info': [
754: 1:    '✅f(1) = I',
754: 1:    '✅f(2) = II',
754: 1:    '✅f(3) = III',
754: 1:    '✅f(4) = IV',
754: 1:    '✅f(5) = V',
754: 1:    '✅f(6) = VI',
754: 1:    '✅f(7) = VII',
754: 1:    '✅f(8) = VIII',
754: 1:    '✅f(9) = IX',
754: 1:    '✅f(10) = X',
754: 1:    '✅f(11) = XI',
754: 1:    '✅f(12) = XII',
754: 1:    '✅f(13) = XIII',
754: 1:    '✅f(14) = XIV',
754: 1:    '❌f(15) = ??? != XV'
754: 1:  ],
754: 1:  'level': 27,
754: 1:  'nextQuestion': '15',
754: 1:  'questions': [
754: 1:    '1',
754: 1:    '2',
754: 1:    '3',
754: 1:    '4',
754: 1:    '5',
754: 1:    '6',
754: 1:    '7',
754: 1:    '8',
754: 1:    '9',
754: 1:    '10',
754: 1:    '11',
754: 1:    '12',
754: 1:    '13',
754: 1:    '14',
754: 1:    '15'
754: 1:  ]
754: 1:}
754: 1:Scores: 71841
754: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV']')
754: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
755: 1:BoardData {
755: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
755: 1:  'expectedAnswer': 'XVI',
755: 1:  'history': [
755: 1:    {
755: 1:      'answer': 'I',
755: 1:      'question': '1',
755: 1:      'valid': true
755: 1:    },
755: 1:    {
755: 1:      'answer': 'II',
755: 1:      'question': '2',
755: 1:      'valid': true
755: 1:    },
755: 1:    {
755: 1:      'answer': 'III',
755: 1:      'question': '3',
755: 1:      'valid': true
755: 1:    },
755: 1:    {
755: 1:      'answer': 'IV',
755: 1:      'question': '4',
755: 1:      'valid': true
755: 1:    },
755: 1:    {
755: 1:      'answer': 'V',
755: 1:      'question': '5',
755: 1:      'valid': true
755: 1:    },
755: 1:    {
755: 1:      'answer': 'VI',
755: 1:      'question': '6',
755: 1:      'valid': true
755: 1:    },
755: 1:    {
755: 1:      'answer': 'VII',
755: 1:      'question': '7',
755: 1:      'valid': true
755: 1:    },
755: 1:    {
755: 1:      'answer': 'VIII',
755: 1:      'question': '8',
755: 1:      'valid': true
755: 1:    },
755: 1:    {
755: 1:      'answer': 'IX',
755: 1:      'question': '9',
755: 1:      'valid': true
755: 1:    },
755: 1:    {
755: 1:      'answer': 'X',
755: 1:      'question': '10',
755: 1:      'valid': true
755: 1:    },
755: 1:    {
755: 1:      'answer': 'XI',
755: 1:      'question': '11',
755: 1:      'valid': true
755: 1:    },
755: 1:    {
755: 1:      'answer': 'XII',
755: 1:      'question': '12',
755: 1:      'valid': true
755: 1:    },
755: 1:    {
755: 1:      'answer': 'XIII',
755: 1:      'question': '13',
755: 1:      'valid': true
755: 1:    },
755: 1:    {
755: 1:      'answer': 'XIV',
755: 1:      'question': '14',
755: 1:      'valid': true
755: 1:    },
755: 1:    {
755: 1:      'answer': 'XV',
755: 1:      'question': '15',
755: 1:      'valid': true
755: 1:    }
755: 1:  ],
755: 1:  'info': [
755: 1:    '✅f(1) = I',
755: 1:    '✅f(2) = II',
755: 1:    '✅f(3) = III',
755: 1:    '✅f(4) = IV',
755: 1:    '✅f(5) = V',
755: 1:    '✅f(6) = VI',
755: 1:    '✅f(7) = VII',
755: 1:    '✅f(8) = VIII',
755: 1:    '✅f(9) = IX',
755: 1:    '✅f(10) = X',
755: 1:    '✅f(11) = XI',
755: 1:    '✅f(12) = XII',
755: 1:    '✅f(13) = XIII',
755: 1:    '✅f(14) = XIV',
755: 1:    '✅f(15) = XV',
755: 1:    '❌f(16) = ??? != XVI'
755: 1:  ],
755: 1:  'level': 27,
755: 1:  'nextQuestion': '16',
755: 1:  'questions': [
755: 1:    '1',
755: 1:    '2',
755: 1:    '3',
755: 1:    '4',
755: 1:    '5',
755: 1:    '6',
755: 1:    '7',
755: 1:    '8',
755: 1:    '9',
755: 1:    '10',
755: 1:    '11',
755: 1:    '12',
755: 1:    '13',
755: 1:    '14',
755: 1:    '15',
755: 1:    '16'
755: 1:  ]
755: 1:}
755: 1:Scores: 71851
755: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI']')
755: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
756: 1:BoardData {
756: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
756: 1:  'expectedAnswer': 'XVII',
756: 1:  'history': [
756: 1:    {
756: 1:      'answer': 'I',
756: 1:      'question': '1',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'II',
756: 1:      'question': '2',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'III',
756: 1:      'question': '3',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'IV',
756: 1:      'question': '4',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'V',
756: 1:      'question': '5',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'VI',
756: 1:      'question': '6',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'VII',
756: 1:      'question': '7',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'VIII',
756: 1:      'question': '8',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'IX',
756: 1:      'question': '9',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'X',
756: 1:      'question': '10',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'XI',
756: 1:      'question': '11',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'XII',
756: 1:      'question': '12',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'XIII',
756: 1:      'question': '13',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'XIV',
756: 1:      'question': '14',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'XV',
756: 1:      'question': '15',
756: 1:      'valid': true
756: 1:    },
756: 1:    {
756: 1:      'answer': 'XVI',
756: 1:      'question': '16',
756: 1:      'valid': true
756: 1:    }
756: 1:  ],
756: 1:  'info': [
756: 1:    '✅f(1) = I',
756: 1:    '✅f(2) = II',
756: 1:    '✅f(3) = III',
756: 1:    '✅f(4) = IV',
756: 1:    '✅f(5) = V',
756: 1:    '✅f(6) = VI',
756: 1:    '✅f(7) = VII',
756: 1:    '✅f(8) = VIII',
756: 1:    '✅f(9) = IX',
756: 1:    '✅f(10) = X',
756: 1:    '✅f(11) = XI',
756: 1:    '✅f(12) = XII',
756: 1:    '✅f(13) = XIII',
756: 1:    '✅f(14) = XIV',
756: 1:    '✅f(15) = XV',
756: 1:    '✅f(16) = XVI',
756: 1:    '❌f(17) = ??? != XVII'
756: 1:  ],
756: 1:  'level': 27,
756: 1:  'nextQuestion': '17',
756: 1:  'questions': [
756: 1:    '1',
756: 1:    '2',
756: 1:    '3',
756: 1:    '4',
756: 1:    '5',
756: 1:    '6',
756: 1:    '7',
756: 1:    '8',
756: 1:    '9',
756: 1:    '10',
756: 1:    '11',
756: 1:    '12',
756: 1:    '13',
756: 1:    '14',
756: 1:    '15',
756: 1:    '16',
756: 1:    '17'
756: 1:  ]
756: 1:}
756: 1:Scores: 71861
756: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII']')
756: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
757: 1:BoardData {
757: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
757: 1:  'expectedAnswer': 'XVIII',
757: 1:  'history': [
757: 1:    {
757: 1:      'answer': 'I',
757: 1:      'question': '1',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'II',
757: 1:      'question': '2',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'III',
757: 1:      'question': '3',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'IV',
757: 1:      'question': '4',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'V',
757: 1:      'question': '5',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'VI',
757: 1:      'question': '6',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'VII',
757: 1:      'question': '7',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'VIII',
757: 1:      'question': '8',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'IX',
757: 1:      'question': '9',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'X',
757: 1:      'question': '10',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'XI',
757: 1:      'question': '11',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'XII',
757: 1:      'question': '12',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'XIII',
757: 1:      'question': '13',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'XIV',
757: 1:      'question': '14',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'XV',
757: 1:      'question': '15',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'XVI',
757: 1:      'question': '16',
757: 1:      'valid': true
757: 1:    },
757: 1:    {
757: 1:      'answer': 'XVII',
757: 1:      'question': '17',
757: 1:      'valid': true
757: 1:    }
757: 1:  ],
757: 1:  'info': [
757: 1:    '✅f(1) = I',
757: 1:    '✅f(2) = II',
757: 1:    '✅f(3) = III',
757: 1:    '✅f(4) = IV',
757: 1:    '✅f(5) = V',
757: 1:    '✅f(6) = VI',
757: 1:    '✅f(7) = VII',
757: 1:    '✅f(8) = VIII',
757: 1:    '✅f(9) = IX',
757: 1:    '✅f(10) = X',
757: 1:    '✅f(11) = XI',
757: 1:    '✅f(12) = XII',
757: 1:    '✅f(13) = XIII',
757: 1:    '✅f(14) = XIV',
757: 1:    '✅f(15) = XV',
757: 1:    '✅f(16) = XVI',
757: 1:    '✅f(17) = XVII',
757: 1:    '❌f(18) = ??? != XVIII'
757: 1:  ],
757: 1:  'level': 27,
757: 1:  'nextQuestion': '18',
757: 1:  'questions': [
757: 1:    '1',
757: 1:    '2',
757: 1:    '3',
757: 1:    '4',
757: 1:    '5',
757: 1:    '6',
757: 1:    '7',
757: 1:    '8',
757: 1:    '9',
757: 1:    '10',
757: 1:    '11',
757: 1:    '12',
757: 1:    '13',
757: 1:    '14',
757: 1:    '15',
757: 1:    '16',
757: 1:    '17',
757: 1:    '18'
757: 1:  ]
757: 1:}
757: 1:Scores: 71871
757: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII']')
757: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
758: 1:BoardData {
758: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
758: 1:  'expectedAnswer': 'XIX',
758: 1:  'history': [
758: 1:    {
758: 1:      'answer': 'I',
758: 1:      'question': '1',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'II',
758: 1:      'question': '2',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'III',
758: 1:      'question': '3',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'IV',
758: 1:      'question': '4',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'V',
758: 1:      'question': '5',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'VI',
758: 1:      'question': '6',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'VII',
758: 1:      'question': '7',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'VIII',
758: 1:      'question': '8',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'IX',
758: 1:      'question': '9',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'X',
758: 1:      'question': '10',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'XI',
758: 1:      'question': '11',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'XII',
758: 1:      'question': '12',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'XIII',
758: 1:      'question': '13',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'XIV',
758: 1:      'question': '14',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'XV',
758: 1:      'question': '15',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'XVI',
758: 1:      'question': '16',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'XVII',
758: 1:      'question': '17',
758: 1:      'valid': true
758: 1:    },
758: 1:    {
758: 1:      'answer': 'XVIII',
758: 1:      'question': '18',
758: 1:      'valid': true
758: 1:    }
758: 1:  ],
758: 1:  'info': [
758: 1:    '✅f(1) = I',
758: 1:    '✅f(2) = II',
758: 1:    '✅f(3) = III',
758: 1:    '✅f(4) = IV',
758: 1:    '✅f(5) = V',
758: 1:    '✅f(6) = VI',
758: 1:    '✅f(7) = VII',
758: 1:    '✅f(8) = VIII',
758: 1:    '✅f(9) = IX',
758: 1:    '✅f(10) = X',
758: 1:    '✅f(11) = XI',
758: 1:    '✅f(12) = XII',
758: 1:    '✅f(13) = XIII',
758: 1:    '✅f(14) = XIV',
758: 1:    '✅f(15) = XV',
758: 1:    '✅f(16) = XVI',
758: 1:    '✅f(17) = XVII',
758: 1:    '✅f(18) = XVIII',
758: 1:    '❌f(19) = ??? != XIX'
758: 1:  ],
758: 1:  'level': 27,
758: 1:  'nextQuestion': '19',
758: 1:  'questions': [
758: 1:    '1',
758: 1:    '2',
758: 1:    '3',
758: 1:    '4',
758: 1:    '5',
758: 1:    '6',
758: 1:    '7',
758: 1:    '8',
758: 1:    '9',
758: 1:    '10',
758: 1:    '11',
758: 1:    '12',
758: 1:    '13',
758: 1:    '14',
758: 1:    '15',
758: 1:    '16',
758: 1:    '17',
758: 1:    '18',
758: 1:    '19'
758: 1:  ]
758: 1:}
758: 1:Scores: 71881
758: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX']')
758: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
759: 1:BoardData {
759: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
759: 1:  'expectedAnswer': 'XX',
759: 1:  'history': [
759: 1:    {
759: 1:      'answer': 'I',
759: 1:      'question': '1',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'II',
759: 1:      'question': '2',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'III',
759: 1:      'question': '3',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'IV',
759: 1:      'question': '4',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'V',
759: 1:      'question': '5',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'VI',
759: 1:      'question': '6',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'VII',
759: 1:      'question': '7',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'VIII',
759: 1:      'question': '8',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'IX',
759: 1:      'question': '9',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'X',
759: 1:      'question': '10',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'XI',
759: 1:      'question': '11',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'XII',
759: 1:      'question': '12',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'XIII',
759: 1:      'question': '13',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'XIV',
759: 1:      'question': '14',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'XV',
759: 1:      'question': '15',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'XVI',
759: 1:      'question': '16',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'XVII',
759: 1:      'question': '17',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'XVIII',
759: 1:      'question': '18',
759: 1:      'valid': true
759: 1:    },
759: 1:    {
759: 1:      'answer': 'XIX',
759: 1:      'question': '19',
759: 1:      'valid': true
759: 1:    }
759: 1:  ],
759: 1:  'info': [
759: 1:    '✅f(1) = I',
759: 1:    '✅f(2) = II',
759: 1:    '✅f(3) = III',
759: 1:    '✅f(4) = IV',
759: 1:    '✅f(5) = V',
759: 1:    '✅f(6) = VI',
759: 1:    '✅f(7) = VII',
759: 1:    '✅f(8) = VIII',
759: 1:    '✅f(9) = IX',
759: 1:    '✅f(10) = X',
759: 1:    '✅f(11) = XI',
759: 1:    '✅f(12) = XII',
759: 1:    '✅f(13) = XIII',
759: 1:    '✅f(14) = XIV',
759: 1:    '✅f(15) = XV',
759: 1:    '✅f(16) = XVI',
759: 1:    '✅f(17) = XVII',
759: 1:    '✅f(18) = XVIII',
759: 1:    '✅f(19) = XIX',
759: 1:    '❌f(20) = ??? != XX'
759: 1:  ],
759: 1:  'level': 27,
759: 1:  'nextQuestion': '20',
759: 1:  'questions': [
759: 1:    '1',
759: 1:    '2',
759: 1:    '3',
759: 1:    '4',
759: 1:    '5',
759: 1:    '6',
759: 1:    '7',
759: 1:    '8',
759: 1:    '9',
759: 1:    '10',
759: 1:    '11',
759: 1:    '12',
759: 1:    '13',
759: 1:    '14',
759: 1:    '15',
759: 1:    '16',
759: 1:    '17',
759: 1:    '18',
759: 1:    '19',
759: 1:    '20'
759: 1:  ]
759: 1:}
759: 1:Scores: 71891
759: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX']')
759: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
760: 1:BoardData {
760: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
760: 1:  'expectedAnswer': 'XXX',
760: 1:  'history': [
760: 1:    {
760: 1:      'answer': 'I',
760: 1:      'question': '1',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'II',
760: 1:      'question': '2',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'III',
760: 1:      'question': '3',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'IV',
760: 1:      'question': '4',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'V',
760: 1:      'question': '5',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'VI',
760: 1:      'question': '6',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'VII',
760: 1:      'question': '7',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'VIII',
760: 1:      'question': '8',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'IX',
760: 1:      'question': '9',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'X',
760: 1:      'question': '10',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'XI',
760: 1:      'question': '11',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'XII',
760: 1:      'question': '12',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'XIII',
760: 1:      'question': '13',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'XIV',
760: 1:      'question': '14',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'XV',
760: 1:      'question': '15',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'XVI',
760: 1:      'question': '16',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'XVII',
760: 1:      'question': '17',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'XVIII',
760: 1:      'question': '18',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'XIX',
760: 1:      'question': '19',
760: 1:      'valid': true
760: 1:    },
760: 1:    {
760: 1:      'answer': 'XX',
760: 1:      'question': '20',
760: 1:      'valid': true
760: 1:    }
760: 1:  ],
760: 1:  'info': [
760: 1:    '✅f(1) = I',
760: 1:    '✅f(2) = II',
760: 1:    '✅f(3) = III',
760: 1:    '✅f(4) = IV',
760: 1:    '✅f(5) = V',
760: 1:    '✅f(6) = VI',
760: 1:    '✅f(7) = VII',
760: 1:    '✅f(8) = VIII',
760: 1:    '✅f(9) = IX',
760: 1:    '✅f(10) = X',
760: 1:    '✅f(11) = XI',
760: 1:    '✅f(12) = XII',
760: 1:    '✅f(13) = XIII',
760: 1:    '✅f(14) = XIV',
760: 1:    '✅f(15) = XV',
760: 1:    '✅f(16) = XVI',
760: 1:    '✅f(17) = XVII',
760: 1:    '✅f(18) = XVIII',
760: 1:    '✅f(19) = XIX',
760: 1:    '✅f(20) = XX',
760: 1:    '❌f(30) = ??? != XXX'
760: 1:  ],
760: 1:  'level': 27,
760: 1:  'nextQuestion': '30',
760: 1:  'questions': [
760: 1:    '1',
760: 1:    '2',
760: 1:    '3',
760: 1:    '4',
760: 1:    '5',
760: 1:    '6',
760: 1:    '7',
760: 1:    '8',
760: 1:    '9',
760: 1:    '10',
760: 1:    '11',
760: 1:    '12',
760: 1:    '13',
760: 1:    '14',
760: 1:    '15',
760: 1:    '16',
760: 1:    '17',
760: 1:    '18',
760: 1:    '19',
760: 1:    '20',
760: 1:    '30'
760: 1:  ]
760: 1:}
760: 1:Scores: 71901
760: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX']')
760: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
761: 1:BoardData {
761: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
761: 1:  'expectedAnswer': 'XXXV',
761: 1:  'history': [
761: 1:    {
761: 1:      'answer': 'I',
761: 1:      'question': '1',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'II',
761: 1:      'question': '2',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'III',
761: 1:      'question': '3',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'IV',
761: 1:      'question': '4',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'V',
761: 1:      'question': '5',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'VI',
761: 1:      'question': '6',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'VII',
761: 1:      'question': '7',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'VIII',
761: 1:      'question': '8',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'IX',
761: 1:      'question': '9',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'X',
761: 1:      'question': '10',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'XI',
761: 1:      'question': '11',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'XII',
761: 1:      'question': '12',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'XIII',
761: 1:      'question': '13',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'XIV',
761: 1:      'question': '14',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'XV',
761: 1:      'question': '15',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'XVI',
761: 1:      'question': '16',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'XVII',
761: 1:      'question': '17',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'XVIII',
761: 1:      'question': '18',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'XIX',
761: 1:      'question': '19',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'XX',
761: 1:      'question': '20',
761: 1:      'valid': true
761: 1:    },
761: 1:    {
761: 1:      'answer': 'XXX',
761: 1:      'question': '30',
761: 1:      'valid': true
761: 1:    }
761: 1:  ],
761: 1:  'info': [
761: 1:    '✅f(1) = I',
761: 1:    '✅f(2) = II',
761: 1:    '✅f(3) = III',
761: 1:    '✅f(4) = IV',
761: 1:    '✅f(5) = V',
761: 1:    '✅f(6) = VI',
761: 1:    '✅f(7) = VII',
761: 1:    '✅f(8) = VIII',
761: 1:    '✅f(9) = IX',
761: 1:    '✅f(10) = X',
761: 1:    '✅f(11) = XI',
761: 1:    '✅f(12) = XII',
761: 1:    '✅f(13) = XIII',
761: 1:    '✅f(14) = XIV',
761: 1:    '✅f(15) = XV',
761: 1:    '✅f(16) = XVI',
761: 1:    '✅f(17) = XVII',
761: 1:    '✅f(18) = XVIII',
761: 1:    '✅f(19) = XIX',
761: 1:    '✅f(20) = XX',
761: 1:    '✅f(30) = XXX',
761: 1:    '❌f(35) = ??? != XXXV'
761: 1:  ],
761: 1:  'level': 27,
761: 1:  'nextQuestion': '35',
761: 1:  'questions': [
761: 1:    '1',
761: 1:    '2',
761: 1:    '3',
761: 1:    '4',
761: 1:    '5',
761: 1:    '6',
761: 1:    '7',
761: 1:    '8',
761: 1:    '9',
761: 1:    '10',
761: 1:    '11',
761: 1:    '12',
761: 1:    '13',
761: 1:    '14',
761: 1:    '15',
761: 1:    '16',
761: 1:    '17',
761: 1:    '18',
761: 1:    '19',
761: 1:    '20',
761: 1:    '30',
761: 1:    '35'
761: 1:  ]
761: 1:}
761: 1:Scores: 71911
761: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV']')
761: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
762: 1:BoardData {
762: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
762: 1:  'expectedAnswer': 'XXXVI',
762: 1:  'history': [
762: 1:    {
762: 1:      'answer': 'I',
762: 1:      'question': '1',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'II',
762: 1:      'question': '2',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'III',
762: 1:      'question': '3',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'IV',
762: 1:      'question': '4',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'V',
762: 1:      'question': '5',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'VI',
762: 1:      'question': '6',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'VII',
762: 1:      'question': '7',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'VIII',
762: 1:      'question': '8',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'IX',
762: 1:      'question': '9',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'X',
762: 1:      'question': '10',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'XI',
762: 1:      'question': '11',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'XII',
762: 1:      'question': '12',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'XIII',
762: 1:      'question': '13',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'XIV',
762: 1:      'question': '14',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'XV',
762: 1:      'question': '15',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'XVI',
762: 1:      'question': '16',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'XVII',
762: 1:      'question': '17',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'XVIII',
762: 1:      'question': '18',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'XIX',
762: 1:      'question': '19',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'XX',
762: 1:      'question': '20',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'XXX',
762: 1:      'question': '30',
762: 1:      'valid': true
762: 1:    },
762: 1:    {
762: 1:      'answer': 'XXXV',
762: 1:      'question': '35',
762: 1:      'valid': true
762: 1:    }
762: 1:  ],
762: 1:  'info': [
762: 1:    '✅f(1) = I',
762: 1:    '✅f(2) = II',
762: 1:    '✅f(3) = III',
762: 1:    '✅f(4) = IV',
762: 1:    '✅f(5) = V',
762: 1:    '✅f(6) = VI',
762: 1:    '✅f(7) = VII',
762: 1:    '✅f(8) = VIII',
762: 1:    '✅f(9) = IX',
762: 1:    '✅f(10) = X',
762: 1:    '✅f(11) = XI',
762: 1:    '✅f(12) = XII',
762: 1:    '✅f(13) = XIII',
762: 1:    '✅f(14) = XIV',
762: 1:    '✅f(15) = XV',
762: 1:    '✅f(16) = XVI',
762: 1:    '✅f(17) = XVII',
762: 1:    '✅f(18) = XVIII',
762: 1:    '✅f(19) = XIX',
762: 1:    '✅f(20) = XX',
762: 1:    '✅f(30) = XXX',
762: 1:    '✅f(35) = XXXV',
762: 1:    '❌f(36) = ??? != XXXVI'
762: 1:  ],
762: 1:  'level': 27,
762: 1:  'nextQuestion': '36',
762: 1:  'questions': [
762: 1:    '1',
762: 1:    '2',
762: 1:    '3',
762: 1:    '4',
762: 1:    '5',
762: 1:    '6',
762: 1:    '7',
762: 1:    '8',
762: 1:    '9',
762: 1:    '10',
762: 1:    '11',
762: 1:    '12',
762: 1:    '13',
762: 1:    '14',
762: 1:    '15',
762: 1:    '16',
762: 1:    '17',
762: 1:    '18',
762: 1:    '19',
762: 1:    '20',
762: 1:    '30',
762: 1:    '35',
762: 1:    '36'
762: 1:  ]
762: 1:}
762: 1:Scores: 71921
762: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI']')
762: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
763: 1:BoardData {
763: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
763: 1:  'expectedAnswer': 'XLVI',
763: 1:  'history': [
763: 1:    {
763: 1:      'answer': 'I',
763: 1:      'question': '1',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'II',
763: 1:      'question': '2',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'III',
763: 1:      'question': '3',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'IV',
763: 1:      'question': '4',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'V',
763: 1:      'question': '5',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'VI',
763: 1:      'question': '6',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'VII',
763: 1:      'question': '7',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'VIII',
763: 1:      'question': '8',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'IX',
763: 1:      'question': '9',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'X',
763: 1:      'question': '10',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'XI',
763: 1:      'question': '11',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'XII',
763: 1:      'question': '12',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'XIII',
763: 1:      'question': '13',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'XIV',
763: 1:      'question': '14',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'XV',
763: 1:      'question': '15',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'XVI',
763: 1:      'question': '16',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'XVII',
763: 1:      'question': '17',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'XVIII',
763: 1:      'question': '18',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'XIX',
763: 1:      'question': '19',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'XX',
763: 1:      'question': '20',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'XXX',
763: 1:      'question': '30',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'XXXV',
763: 1:      'question': '35',
763: 1:      'valid': true
763: 1:    },
763: 1:    {
763: 1:      'answer': 'XXXVI',
763: 1:      'question': '36',
763: 1:      'valid': true
763: 1:    }
763: 1:  ],
763: 1:  'info': [
763: 1:    '✅f(1) = I',
763: 1:    '✅f(2) = II',
763: 1:    '✅f(3) = III',
763: 1:    '✅f(4) = IV',
763: 1:    '✅f(5) = V',
763: 1:    '✅f(6) = VI',
763: 1:    '✅f(7) = VII',
763: 1:    '✅f(8) = VIII',
763: 1:    '✅f(9) = IX',
763: 1:    '✅f(10) = X',
763: 1:    '✅f(11) = XI',
763: 1:    '✅f(12) = XII',
763: 1:    '✅f(13) = XIII',
763: 1:    '✅f(14) = XIV',
763: 1:    '✅f(15) = XV',
763: 1:    '✅f(16) = XVI',
763: 1:    '✅f(17) = XVII',
763: 1:    '✅f(18) = XVIII',
763: 1:    '✅f(19) = XIX',
763: 1:    '✅f(20) = XX',
763: 1:    '✅f(30) = XXX',
763: 1:    '✅f(35) = XXXV',
763: 1:    '✅f(36) = XXXVI',
763: 1:    '❌f(46) = ??? != XLVI'
763: 1:  ],
763: 1:  'level': 27,
763: 1:  'nextQuestion': '46',
763: 1:  'questions': [
763: 1:    '1',
763: 1:    '2',
763: 1:    '3',
763: 1:    '4',
763: 1:    '5',
763: 1:    '6',
763: 1:    '7',
763: 1:    '8',
763: 1:    '9',
763: 1:    '10',
763: 1:    '11',
763: 1:    '12',
763: 1:    '13',
763: 1:    '14',
763: 1:    '15',
763: 1:    '16',
763: 1:    '17',
763: 1:    '18',
763: 1:    '19',
763: 1:    '20',
763: 1:    '30',
763: 1:    '35',
763: 1:    '36',
763: 1:    '46'
763: 1:  ]
763: 1:}
763: 1:Scores: 71931
763: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI', 'XLVI']')
763: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
764: 1:BoardData {
764: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
764: 1:  'expectedAnswer': 'LVII',
764: 1:  'history': [
764: 1:    {
764: 1:      'answer': 'I',
764: 1:      'question': '1',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'II',
764: 1:      'question': '2',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'III',
764: 1:      'question': '3',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'IV',
764: 1:      'question': '4',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'V',
764: 1:      'question': '5',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'VI',
764: 1:      'question': '6',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'VII',
764: 1:      'question': '7',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'VIII',
764: 1:      'question': '8',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'IX',
764: 1:      'question': '9',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'X',
764: 1:      'question': '10',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'XI',
764: 1:      'question': '11',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'XII',
764: 1:      'question': '12',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'XIII',
764: 1:      'question': '13',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'XIV',
764: 1:      'question': '14',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'XV',
764: 1:      'question': '15',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'XVI',
764: 1:      'question': '16',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'XVII',
764: 1:      'question': '17',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'XVIII',
764: 1:      'question': '18',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'XIX',
764: 1:      'question': '19',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'XX',
764: 1:      'question': '20',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'XXX',
764: 1:      'question': '30',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'XXXV',
764: 1:      'question': '35',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'XXXVI',
764: 1:      'question': '36',
764: 1:      'valid': true
764: 1:    },
764: 1:    {
764: 1:      'answer': 'XLVI',
764: 1:      'question': '46',
764: 1:      'valid': true
764: 1:    }
764: 1:  ],
764: 1:  'info': [
764: 1:    '✅f(1) = I',
764: 1:    '✅f(2) = II',
764: 1:    '✅f(3) = III',
764: 1:    '✅f(4) = IV',
764: 1:    '✅f(5) = V',
764: 1:    '✅f(6) = VI',
764: 1:    '✅f(7) = VII',
764: 1:    '✅f(8) = VIII',
764: 1:    '✅f(9) = IX',
764: 1:    '✅f(10) = X',
764: 1:    '✅f(11) = XI',
764: 1:    '✅f(12) = XII',
764: 1:    '✅f(13) = XIII',
764: 1:    '✅f(14) = XIV',
764: 1:    '✅f(15) = XV',
764: 1:    '✅f(16) = XVI',
764: 1:    '✅f(17) = XVII',
764: 1:    '✅f(18) = XVIII',
764: 1:    '✅f(19) = XIX',
764: 1:    '✅f(20) = XX',
764: 1:    '✅f(30) = XXX',
764: 1:    '✅f(35) = XXXV',
764: 1:    '✅f(36) = XXXVI',
764: 1:    '✅f(46) = XLVI',
764: 1:    '❌f(57) = ??? != LVII'
764: 1:  ],
764: 1:  'level': 27,
764: 1:  'nextQuestion': '57',
764: 1:  'questions': [
764: 1:    '1',
764: 1:    '2',
764: 1:    '3',
764: 1:    '4',
764: 1:    '5',
764: 1:    '6',
764: 1:    '7',
764: 1:    '8',
764: 1:    '9',
764: 1:    '10',
764: 1:    '11',
764: 1:    '12',
764: 1:    '13',
764: 1:    '14',
764: 1:    '15',
764: 1:    '16',
764: 1:    '17',
764: 1:    '18',
764: 1:    '19',
764: 1:    '20',
764: 1:    '30',
764: 1:    '35',
764: 1:    '36',
764: 1:    '46',
764: 1:    '57'
764: 1:  ]
764: 1:}
764: 1:Scores: 71941
764: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI', 'XLVI', 'LVII']')
764: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
765: 1:BoardData {
765: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
765: 1:  'expectedAnswer': 'LXVII',
765: 1:  'history': [
765: 1:    {
765: 1:      'answer': 'I',
765: 1:      'question': '1',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'II',
765: 1:      'question': '2',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'III',
765: 1:      'question': '3',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'IV',
765: 1:      'question': '4',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'V',
765: 1:      'question': '5',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'VI',
765: 1:      'question': '6',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'VII',
765: 1:      'question': '7',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'VIII',
765: 1:      'question': '8',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'IX',
765: 1:      'question': '9',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'X',
765: 1:      'question': '10',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'XI',
765: 1:      'question': '11',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'XII',
765: 1:      'question': '12',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'XIII',
765: 1:      'question': '13',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'XIV',
765: 1:      'question': '14',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'XV',
765: 1:      'question': '15',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'XVI',
765: 1:      'question': '16',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'XVII',
765: 1:      'question': '17',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'XVIII',
765: 1:      'question': '18',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'XIX',
765: 1:      'question': '19',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'XX',
765: 1:      'question': '20',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'XXX',
765: 1:      'question': '30',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'XXXV',
765: 1:      'question': '35',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'XXXVI',
765: 1:      'question': '36',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'XLVI',
765: 1:      'question': '46',
765: 1:      'valid': true
765: 1:    },
765: 1:    {
765: 1:      'answer': 'LVII',
765: 1:      'question': '57',
765: 1:      'valid': true
765: 1:    }
765: 1:  ],
765: 1:  'info': [
765: 1:    '✅f(1) = I',
765: 1:    '✅f(2) = II',
765: 1:    '✅f(3) = III',
765: 1:    '✅f(4) = IV',
765: 1:    '✅f(5) = V',
765: 1:    '✅f(6) = VI',
765: 1:    '✅f(7) = VII',
765: 1:    '✅f(8) = VIII',
765: 1:    '✅f(9) = IX',
765: 1:    '✅f(10) = X',
765: 1:    '✅f(11) = XI',
765: 1:    '✅f(12) = XII',
765: 1:    '✅f(13) = XIII',
765: 1:    '✅f(14) = XIV',
765: 1:    '✅f(15) = XV',
765: 1:    '✅f(16) = XVI',
765: 1:    '✅f(17) = XVII',
765: 1:    '✅f(18) = XVIII',
765: 1:    '✅f(19) = XIX',
765: 1:    '✅f(20) = XX',
765: 1:    '✅f(30) = XXX',
765: 1:    '✅f(35) = XXXV',
765: 1:    '✅f(36) = XXXVI',
765: 1:    '✅f(46) = XLVI',
765: 1:    '✅f(57) = LVII',
765: 1:    '❌f(67) = ??? != LXVII'
765: 1:  ],
765: 1:  'level': 27,
765: 1:  'nextQuestion': '67',
765: 1:  'questions': [
765: 1:    '1',
765: 1:    '2',
765: 1:    '3',
765: 1:    '4',
765: 1:    '5',
765: 1:    '6',
765: 1:    '7',
765: 1:    '8',
765: 1:    '9',
765: 1:    '10',
765: 1:    '11',
765: 1:    '12',
765: 1:    '13',
765: 1:    '14',
765: 1:    '15',
765: 1:    '16',
765: 1:    '17',
765: 1:    '18',
765: 1:    '19',
765: 1:    '20',
765: 1:    '30',
765: 1:    '35',
765: 1:    '36',
765: 1:    '46',
765: 1:    '57',
765: 1:    '67'
765: 1:  ]
765: 1:}
765: 1:Scores: 71951
765: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI', 'XLVI', 'LVII', 'LXVII']')
765: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
766: 1:BoardData {
766: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
766: 1:  'expectedAnswer': 'LXXXIX',
766: 1:  'history': [
766: 1:    {
766: 1:      'answer': 'I',
766: 1:      'question': '1',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'II',
766: 1:      'question': '2',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'III',
766: 1:      'question': '3',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'IV',
766: 1:      'question': '4',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'V',
766: 1:      'question': '5',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'VI',
766: 1:      'question': '6',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'VII',
766: 1:      'question': '7',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'VIII',
766: 1:      'question': '8',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'IX',
766: 1:      'question': '9',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'X',
766: 1:      'question': '10',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'XI',
766: 1:      'question': '11',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'XII',
766: 1:      'question': '12',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'XIII',
766: 1:      'question': '13',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'XIV',
766: 1:      'question': '14',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'XV',
766: 1:      'question': '15',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'XVI',
766: 1:      'question': '16',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'XVII',
766: 1:      'question': '17',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'XVIII',
766: 1:      'question': '18',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'XIX',
766: 1:      'question': '19',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'XX',
766: 1:      'question': '20',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'XXX',
766: 1:      'question': '30',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'XXXV',
766: 1:      'question': '35',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'XXXVI',
766: 1:      'question': '36',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'XLVI',
766: 1:      'question': '46',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'LVII',
766: 1:      'question': '57',
766: 1:      'valid': true
766: 1:    },
766: 1:    {
766: 1:      'answer': 'LXVII',
766: 1:      'question': '67',
766: 1:      'valid': true
766: 1:    }
766: 1:  ],
766: 1:  'info': [
766: 1:    '✅f(1) = I',
766: 1:    '✅f(2) = II',
766: 1:    '✅f(3) = III',
766: 1:    '✅f(4) = IV',
766: 1:    '✅f(5) = V',
766: 1:    '✅f(6) = VI',
766: 1:    '✅f(7) = VII',
766: 1:    '✅f(8) = VIII',
766: 1:    '✅f(9) = IX',
766: 1:    '✅f(10) = X',
766: 1:    '✅f(11) = XI',
766: 1:    '✅f(12) = XII',
766: 1:    '✅f(13) = XIII',
766: 1:    '✅f(14) = XIV',
766: 1:    '✅f(15) = XV',
766: 1:    '✅f(16) = XVI',
766: 1:    '✅f(17) = XVII',
766: 1:    '✅f(18) = XVIII',
766: 1:    '✅f(19) = XIX',
766: 1:    '✅f(20) = XX',
766: 1:    '✅f(30) = XXX',
766: 1:    '✅f(35) = XXXV',
766: 1:    '✅f(36) = XXXVI',
766: 1:    '✅f(46) = XLVI',
766: 1:    '✅f(57) = LVII',
766: 1:    '✅f(67) = LXVII',
766: 1:    '❌f(89) = ??? != LXXXIX'
766: 1:  ],
766: 1:  'level': 27,
766: 1:  'nextQuestion': '89',
766: 1:  'questions': [
766: 1:    '1',
766: 1:    '2',
766: 1:    '3',
766: 1:    '4',
766: 1:    '5',
766: 1:    '6',
766: 1:    '7',
766: 1:    '8',
766: 1:    '9',
766: 1:    '10',
766: 1:    '11',
766: 1:    '12',
766: 1:    '13',
766: 1:    '14',
766: 1:    '15',
766: 1:    '16',
766: 1:    '17',
766: 1:    '18',
766: 1:    '19',
766: 1:    '20',
766: 1:    '30',
766: 1:    '35',
766: 1:    '36',
766: 1:    '46',
766: 1:    '57',
766: 1:    '67',
766: 1:    '89'
766: 1:  ]
766: 1:}
766: 1:Scores: 71961
766: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI', 'XLVI', 'LVII', 'LXVII', 'LXXXIX']')
766: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
767: 1:BoardData {
767: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
767: 1:  'expectedAnswer': 'CXXIII',
767: 1:  'history': [
767: 1:    {
767: 1:      'answer': 'I',
767: 1:      'question': '1',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'II',
767: 1:      'question': '2',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'III',
767: 1:      'question': '3',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'IV',
767: 1:      'question': '4',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'V',
767: 1:      'question': '5',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'VI',
767: 1:      'question': '6',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'VII',
767: 1:      'question': '7',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'VIII',
767: 1:      'question': '8',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'IX',
767: 1:      'question': '9',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'X',
767: 1:      'question': '10',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'XI',
767: 1:      'question': '11',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'XII',
767: 1:      'question': '12',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'XIII',
767: 1:      'question': '13',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'XIV',
767: 1:      'question': '14',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'XV',
767: 1:      'question': '15',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'XVI',
767: 1:      'question': '16',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'XVII',
767: 1:      'question': '17',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'XVIII',
767: 1:      'question': '18',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'XIX',
767: 1:      'question': '19',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'XX',
767: 1:      'question': '20',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'XXX',
767: 1:      'question': '30',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'XXXV',
767: 1:      'question': '35',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'XXXVI',
767: 1:      'question': '36',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'XLVI',
767: 1:      'question': '46',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'LVII',
767: 1:      'question': '57',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'LXVII',
767: 1:      'question': '67',
767: 1:      'valid': true
767: 1:    },
767: 1:    {
767: 1:      'answer': 'LXXXIX',
767: 1:      'question': '89',
767: 1:      'valid': true
767: 1:    }
767: 1:  ],
767: 1:  'info': [
767: 1:    '✅f(1) = I',
767: 1:    '✅f(2) = II',
767: 1:    '✅f(3) = III',
767: 1:    '✅f(4) = IV',
767: 1:    '✅f(5) = V',
767: 1:    '✅f(6) = VI',
767: 1:    '✅f(7) = VII',
767: 1:    '✅f(8) = VIII',
767: 1:    '✅f(9) = IX',
767: 1:    '✅f(10) = X',
767: 1:    '✅f(11) = XI',
767: 1:    '✅f(12) = XII',
767: 1:    '✅f(13) = XIII',
767: 1:    '✅f(14) = XIV',
767: 1:    '✅f(15) = XV',
767: 1:    '✅f(16) = XVI',
767: 1:    '✅f(17) = XVII',
767: 1:    '✅f(18) = XVIII',
767: 1:    '✅f(19) = XIX',
767: 1:    '✅f(20) = XX',
767: 1:    '✅f(30) = XXX',
767: 1:    '✅f(35) = XXXV',
767: 1:    '✅f(36) = XXXVI',
767: 1:    '✅f(46) = XLVI',
767: 1:    '✅f(57) = LVII',
767: 1:    '✅f(67) = LXVII',
767: 1:    '✅f(89) = LXXXIX',
767: 1:    '❌f(123) = ??? != CXXIII'
767: 1:  ],
767: 1:  'level': 27,
767: 1:  'nextQuestion': '123',
767: 1:  'questions': [
767: 1:    '1',
767: 1:    '2',
767: 1:    '3',
767: 1:    '4',
767: 1:    '5',
767: 1:    '6',
767: 1:    '7',
767: 1:    '8',
767: 1:    '9',
767: 1:    '10',
767: 1:    '11',
767: 1:    '12',
767: 1:    '13',
767: 1:    '14',
767: 1:    '15',
767: 1:    '16',
767: 1:    '17',
767: 1:    '18',
767: 1:    '19',
767: 1:    '20',
767: 1:    '30',
767: 1:    '35',
767: 1:    '36',
767: 1:    '46',
767: 1:    '57',
767: 1:    '67',
767: 1:    '89',
767: 1:    '123'
767: 1:  ]
767: 1:}
767: 1:Scores: 71971
767: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI', 'XLVI', 'LVII', 'LXVII', 'LXXXIX', 'CXXIII']')
767: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
768: 1:BoardData {
768: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
768: 1:  'expectedAnswer': 'CCXXXIV',
768: 1:  'history': [
768: 1:    {
768: 1:      'answer': 'I',
768: 1:      'question': '1',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'II',
768: 1:      'question': '2',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'III',
768: 1:      'question': '3',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'IV',
768: 1:      'question': '4',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'V',
768: 1:      'question': '5',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'VI',
768: 1:      'question': '6',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'VII',
768: 1:      'question': '7',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'VIII',
768: 1:      'question': '8',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'IX',
768: 1:      'question': '9',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'X',
768: 1:      'question': '10',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'XI',
768: 1:      'question': '11',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'XII',
768: 1:      'question': '12',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'XIII',
768: 1:      'question': '13',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'XIV',
768: 1:      'question': '14',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'XV',
768: 1:      'question': '15',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'XVI',
768: 1:      'question': '16',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'XVII',
768: 1:      'question': '17',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'XVIII',
768: 1:      'question': '18',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'XIX',
768: 1:      'question': '19',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'XX',
768: 1:      'question': '20',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'XXX',
768: 1:      'question': '30',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'XXXV',
768: 1:      'question': '35',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'XXXVI',
768: 1:      'question': '36',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'XLVI',
768: 1:      'question': '46',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'LVII',
768: 1:      'question': '57',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'LXVII',
768: 1:      'question': '67',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'LXXXIX',
768: 1:      'question': '89',
768: 1:      'valid': true
768: 1:    },
768: 1:    {
768: 1:      'answer': 'CXXIII',
768: 1:      'question': '123',
768: 1:      'valid': true
768: 1:    }
768: 1:  ],
768: 1:  'info': [
768: 1:    '✅f(1) = I',
768: 1:    '✅f(2) = II',
768: 1:    '✅f(3) = III',
768: 1:    '✅f(4) = IV',
768: 1:    '✅f(5) = V',
768: 1:    '✅f(6) = VI',
768: 1:    '✅f(7) = VII',
768: 1:    '✅f(8) = VIII',
768: 1:    '✅f(9) = IX',
768: 1:    '✅f(10) = X',
768: 1:    '✅f(11) = XI',
768: 1:    '✅f(12) = XII',
768: 1:    '✅f(13) = XIII',
768: 1:    '✅f(14) = XIV',
768: 1:    '✅f(15) = XV',
768: 1:    '✅f(16) = XVI',
768: 1:    '✅f(17) = XVII',
768: 1:    '✅f(18) = XVIII',
768: 1:    '✅f(19) = XIX',
768: 1:    '✅f(20) = XX',
768: 1:    '✅f(30) = XXX',
768: 1:    '✅f(35) = XXXV',
768: 1:    '✅f(36) = XXXVI',
768: 1:    '✅f(46) = XLVI',
768: 1:    '✅f(57) = LVII',
768: 1:    '✅f(67) = LXVII',
768: 1:    '✅f(89) = LXXXIX',
768: 1:    '✅f(123) = CXXIII',
768: 1:    '❌f(234) = ??? != CCXXXIV'
768: 1:  ],
768: 1:  'level': 27,
768: 1:  'nextQuestion': '234',
768: 1:  'questions': [
768: 1:    '1',
768: 1:    '2',
768: 1:    '3',
768: 1:    '4',
768: 1:    '5',
768: 1:    '6',
768: 1:    '7',
768: 1:    '8',
768: 1:    '9',
768: 1:    '10',
768: 1:    '11',
768: 1:    '12',
768: 1:    '13',
768: 1:    '14',
768: 1:    '15',
768: 1:    '16',
768: 1:    '17',
768: 1:    '18',
768: 1:    '19',
768: 1:    '20',
768: 1:    '30',
768: 1:    '35',
768: 1:    '36',
768: 1:    '46',
768: 1:    '57',
768: 1:    '67',
768: 1:    '89',
768: 1:    '123',
768: 1:    '234'
768: 1:  ]
768: 1:}
768: 1:Scores: 71981
768: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI', 'XLVI', 'LVII', 'LXVII', 'LXXXIX', 'CXXIII', 'CCXXXIV']')
768: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
769: 1:BoardData {
769: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
769: 1:  'expectedAnswer': 'CCCXLV',
769: 1:  'history': [
769: 1:    {
769: 1:      'answer': 'I',
769: 1:      'question': '1',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'II',
769: 1:      'question': '2',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'III',
769: 1:      'question': '3',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'IV',
769: 1:      'question': '4',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'V',
769: 1:      'question': '5',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'VI',
769: 1:      'question': '6',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'VII',
769: 1:      'question': '7',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'VIII',
769: 1:      'question': '8',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'IX',
769: 1:      'question': '9',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'X',
769: 1:      'question': '10',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'XI',
769: 1:      'question': '11',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'XII',
769: 1:      'question': '12',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'XIII',
769: 1:      'question': '13',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'XIV',
769: 1:      'question': '14',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'XV',
769: 1:      'question': '15',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'XVI',
769: 1:      'question': '16',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'XVII',
769: 1:      'question': '17',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'XVIII',
769: 1:      'question': '18',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'XIX',
769: 1:      'question': '19',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'XX',
769: 1:      'question': '20',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'XXX',
769: 1:      'question': '30',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'XXXV',
769: 1:      'question': '35',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'XXXVI',
769: 1:      'question': '36',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'XLVI',
769: 1:      'question': '46',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'LVII',
769: 1:      'question': '57',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'LXVII',
769: 1:      'question': '67',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'LXXXIX',
769: 1:      'question': '89',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'CXXIII',
769: 1:      'question': '123',
769: 1:      'valid': true
769: 1:    },
769: 1:    {
769: 1:      'answer': 'CCXXXIV',
769: 1:      'question': '234',
769: 1:      'valid': true
769: 1:    }
769: 1:  ],
769: 1:  'info': [
769: 1:    '✅f(1) = I',
769: 1:    '✅f(2) = II',
769: 1:    '✅f(3) = III',
769: 1:    '✅f(4) = IV',
769: 1:    '✅f(5) = V',
769: 1:    '✅f(6) = VI',
769: 1:    '✅f(7) = VII',
769: 1:    '✅f(8) = VIII',
769: 1:    '✅f(9) = IX',
769: 1:    '✅f(10) = X',
769: 1:    '✅f(11) = XI',
769: 1:    '✅f(12) = XII',
769: 1:    '✅f(13) = XIII',
769: 1:    '✅f(14) = XIV',
769: 1:    '✅f(15) = XV',
769: 1:    '✅f(16) = XVI',
769: 1:    '✅f(17) = XVII',
769: 1:    '✅f(18) = XVIII',
769: 1:    '✅f(19) = XIX',
769: 1:    '✅f(20) = XX',
769: 1:    '✅f(30) = XXX',
769: 1:    '✅f(35) = XXXV',
769: 1:    '✅f(36) = XXXVI',
769: 1:    '✅f(46) = XLVI',
769: 1:    '✅f(57) = LVII',
769: 1:    '✅f(67) = LXVII',
769: 1:    '✅f(89) = LXXXIX',
769: 1:    '✅f(123) = CXXIII',
769: 1:    '✅f(234) = CCXXXIV',
769: 1:    '❌f(345) = ??? != CCCXLV'
769: 1:  ],
769: 1:  'level': 27,
769: 1:  'nextQuestion': '345',
769: 1:  'questions': [
769: 1:    '1',
769: 1:    '2',
769: 1:    '3',
769: 1:    '4',
769: 1:    '5',
769: 1:    '6',
769: 1:    '7',
769: 1:    '8',
769: 1:    '9',
769: 1:    '10',
769: 1:    '11',
769: 1:    '12',
769: 1:    '13',
769: 1:    '14',
769: 1:    '15',
769: 1:    '16',
769: 1:    '17',
769: 1:    '18',
769: 1:    '19',
769: 1:    '20',
769: 1:    '30',
769: 1:    '35',
769: 1:    '36',
769: 1:    '46',
769: 1:    '57',
769: 1:    '67',
769: 1:    '89',
769: 1:    '123',
769: 1:    '234',
769: 1:    '345'
769: 1:  ]
769: 1:}
769: 1:Scores: 71991
769: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI', 'XLVI', 'LVII', 'LXVII', 'LXXXIX', 'CXXIII', 'CCXXXIV', 'CCCXLV']')
769: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
770: 1:BoardData {
770: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
770: 1:  'expectedAnswer': 'CDLVI',
770: 1:  'history': [
770: 1:    {
770: 1:      'answer': 'I',
770: 1:      'question': '1',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'II',
770: 1:      'question': '2',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'III',
770: 1:      'question': '3',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'IV',
770: 1:      'question': '4',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'V',
770: 1:      'question': '5',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'VI',
770: 1:      'question': '6',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'VII',
770: 1:      'question': '7',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'VIII',
770: 1:      'question': '8',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'IX',
770: 1:      'question': '9',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'X',
770: 1:      'question': '10',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'XI',
770: 1:      'question': '11',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'XII',
770: 1:      'question': '12',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'XIII',
770: 1:      'question': '13',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'XIV',
770: 1:      'question': '14',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'XV',
770: 1:      'question': '15',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'XVI',
770: 1:      'question': '16',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'XVII',
770: 1:      'question': '17',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'XVIII',
770: 1:      'question': '18',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'XIX',
770: 1:      'question': '19',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'XX',
770: 1:      'question': '20',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'XXX',
770: 1:      'question': '30',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'XXXV',
770: 1:      'question': '35',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'XXXVI',
770: 1:      'question': '36',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'XLVI',
770: 1:      'question': '46',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'LVII',
770: 1:      'question': '57',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'LXVII',
770: 1:      'question': '67',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'LXXXIX',
770: 1:      'question': '89',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'CXXIII',
770: 1:      'question': '123',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'CCXXXIV',
770: 1:      'question': '234',
770: 1:      'valid': true
770: 1:    },
770: 1:    {
770: 1:      'answer': 'CCCXLV',
770: 1:      'question': '345',
770: 1:      'valid': true
770: 1:    }
770: 1:  ],
770: 1:  'info': [
770: 1:    '✅f(1) = I',
770: 1:    '✅f(2) = II',
770: 1:    '✅f(3) = III',
770: 1:    '✅f(4) = IV',
770: 1:    '✅f(5) = V',
770: 1:    '✅f(6) = VI',
770: 1:    '✅f(7) = VII',
770: 1:    '✅f(8) = VIII',
770: 1:    '✅f(9) = IX',
770: 1:    '✅f(10) = X',
770: 1:    '✅f(11) = XI',
770: 1:    '✅f(12) = XII',
770: 1:    '✅f(13) = XIII',
770: 1:    '✅f(14) = XIV',
770: 1:    '✅f(15) = XV',
770: 1:    '✅f(16) = XVI',
770: 1:    '✅f(17) = XVII',
770: 1:    '✅f(18) = XVIII',
770: 1:    '✅f(19) = XIX',
770: 1:    '✅f(20) = XX',
770: 1:    '✅f(30) = XXX',
770: 1:    '✅f(35) = XXXV',
770: 1:    '✅f(36) = XXXVI',
770: 1:    '✅f(46) = XLVI',
770: 1:    '✅f(57) = LVII',
770: 1:    '✅f(67) = LXVII',
770: 1:    '✅f(89) = LXXXIX',
770: 1:    '✅f(123) = CXXIII',
770: 1:    '✅f(234) = CCXXXIV',
770: 1:    '✅f(345) = CCCXLV',
770: 1:    '❌f(456) = ??? != CDLVI'
770: 1:  ],
770: 1:  'level': 27,
770: 1:  'nextQuestion': '456',
770: 1:  'questions': [
770: 1:    '1',
770: 1:    '2',
770: 1:    '3',
770: 1:    '4',
770: 1:    '5',
770: 1:    '6',
770: 1:    '7',
770: 1:    '8',
770: 1:    '9',
770: 1:    '10',
770: 1:    '11',
770: 1:    '12',
770: 1:    '13',
770: 1:    '14',
770: 1:    '15',
770: 1:    '16',
770: 1:    '17',
770: 1:    '18',
770: 1:    '19',
770: 1:    '20',
770: 1:    '30',
770: 1:    '35',
770: 1:    '36',
770: 1:    '46',
770: 1:    '57',
770: 1:    '67',
770: 1:    '89',
770: 1:    '123',
770: 1:    '234',
770: 1:    '345',
770: 1:    '456'
770: 1:  ]
770: 1:}
770: 1:Scores: 72001
770: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI', 'XLVI', 'LVII', 'LXVII', 'LXXXIX', 'CXXIII', 'CCXXXIV', 'CCCXLV', 'CDLVI']')
770: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
771: 1:BoardData {
771: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
771: 1:  'expectedAnswer': 'DLXVII',
771: 1:  'history': [
771: 1:    {
771: 1:      'answer': 'I',
771: 1:      'question': '1',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'II',
771: 1:      'question': '2',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'III',
771: 1:      'question': '3',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'IV',
771: 1:      'question': '4',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'V',
771: 1:      'question': '5',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'VI',
771: 1:      'question': '6',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'VII',
771: 1:      'question': '7',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'VIII',
771: 1:      'question': '8',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'IX',
771: 1:      'question': '9',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'X',
771: 1:      'question': '10',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'XI',
771: 1:      'question': '11',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'XII',
771: 1:      'question': '12',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'XIII',
771: 1:      'question': '13',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'XIV',
771: 1:      'question': '14',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'XV',
771: 1:      'question': '15',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'XVI',
771: 1:      'question': '16',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'XVII',
771: 1:      'question': '17',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'XVIII',
771: 1:      'question': '18',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'XIX',
771: 1:      'question': '19',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'XX',
771: 1:      'question': '20',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'XXX',
771: 1:      'question': '30',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'XXXV',
771: 1:      'question': '35',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'XXXVI',
771: 1:      'question': '36',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'XLVI',
771: 1:      'question': '46',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'LVII',
771: 1:      'question': '57',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'LXVII',
771: 1:      'question': '67',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'LXXXIX',
771: 1:      'question': '89',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'CXXIII',
771: 1:      'question': '123',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'CCXXXIV',
771: 1:      'question': '234',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'CCCXLV',
771: 1:      'question': '345',
771: 1:      'valid': true
771: 1:    },
771: 1:    {
771: 1:      'answer': 'CDLVI',
771: 1:      'question': '456',
771: 1:      'valid': true
771: 1:    }
771: 1:  ],
771: 1:  'info': [
771: 1:    '✅f(1) = I',
771: 1:    '✅f(2) = II',
771: 1:    '✅f(3) = III',
771: 1:    '✅f(4) = IV',
771: 1:    '✅f(5) = V',
771: 1:    '✅f(6) = VI',
771: 1:    '✅f(7) = VII',
771: 1:    '✅f(8) = VIII',
771: 1:    '✅f(9) = IX',
771: 1:    '✅f(10) = X',
771: 1:    '✅f(11) = XI',
771: 1:    '✅f(12) = XII',
771: 1:    '✅f(13) = XIII',
771: 1:    '✅f(14) = XIV',
771: 1:    '✅f(15) = XV',
771: 1:    '✅f(16) = XVI',
771: 1:    '✅f(17) = XVII',
771: 1:    '✅f(18) = XVIII',
771: 1:    '✅f(19) = XIX',
771: 1:    '✅f(20) = XX',
771: 1:    '✅f(30) = XXX',
771: 1:    '✅f(35) = XXXV',
771: 1:    '✅f(36) = XXXVI',
771: 1:    '✅f(46) = XLVI',
771: 1:    '✅f(57) = LVII',
771: 1:    '✅f(67) = LXVII',
771: 1:    '✅f(89) = LXXXIX',
771: 1:    '✅f(123) = CXXIII',
771: 1:    '✅f(234) = CCXXXIV',
771: 1:    '✅f(345) = CCCXLV',
771: 1:    '✅f(456) = CDLVI',
771: 1:    '❌f(567) = ??? != DLXVII'
771: 1:  ],
771: 1:  'level': 27,
771: 1:  'nextQuestion': '567',
771: 1:  'questions': [
771: 1:    '1',
771: 1:    '2',
771: 1:    '3',
771: 1:    '4',
771: 1:    '5',
771: 1:    '6',
771: 1:    '7',
771: 1:    '8',
771: 1:    '9',
771: 1:    '10',
771: 1:    '11',
771: 1:    '12',
771: 1:    '13',
771: 1:    '14',
771: 1:    '15',
771: 1:    '16',
771: 1:    '17',
771: 1:    '18',
771: 1:    '19',
771: 1:    '20',
771: 1:    '30',
771: 1:    '35',
771: 1:    '36',
771: 1:    '46',
771: 1:    '57',
771: 1:    '67',
771: 1:    '89',
771: 1:    '123',
771: 1:    '234',
771: 1:    '345',
771: 1:    '456',
771: 1:    '567'
771: 1:  ]
771: 1:}
771: 1:Scores: 72011
771: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI', 'XLVI', 'LVII', 'LXVII', 'LXXXIX', 'CXXIII', 'CCXXXIV', 'CCCXLV', 'CDLVI', 'DLXVII']')
771: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
772: 1:BoardData {
772: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
772: 1:  'expectedAnswer': 'DCLXXVIII',
772: 1:  'history': [
772: 1:    {
772: 1:      'answer': 'I',
772: 1:      'question': '1',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'II',
772: 1:      'question': '2',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'III',
772: 1:      'question': '3',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'IV',
772: 1:      'question': '4',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'V',
772: 1:      'question': '5',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'VI',
772: 1:      'question': '6',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'VII',
772: 1:      'question': '7',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'VIII',
772: 1:      'question': '8',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'IX',
772: 1:      'question': '9',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'X',
772: 1:      'question': '10',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'XI',
772: 1:      'question': '11',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'XII',
772: 1:      'question': '12',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'XIII',
772: 1:      'question': '13',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'XIV',
772: 1:      'question': '14',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'XV',
772: 1:      'question': '15',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'XVI',
772: 1:      'question': '16',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'XVII',
772: 1:      'question': '17',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'XVIII',
772: 1:      'question': '18',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'XIX',
772: 1:      'question': '19',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'XX',
772: 1:      'question': '20',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'XXX',
772: 1:      'question': '30',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'XXXV',
772: 1:      'question': '35',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'XXXVI',
772: 1:      'question': '36',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'XLVI',
772: 1:      'question': '46',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'LVII',
772: 1:      'question': '57',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'LXVII',
772: 1:      'question': '67',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'LXXXIX',
772: 1:      'question': '89',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'CXXIII',
772: 1:      'question': '123',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'CCXXXIV',
772: 1:      'question': '234',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'CCCXLV',
772: 1:      'question': '345',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'CDLVI',
772: 1:      'question': '456',
772: 1:      'valid': true
772: 1:    },
772: 1:    {
772: 1:      'answer': 'DLXVII',
772: 1:      'question': '567',
772: 1:      'valid': true
772: 1:    }
772: 1:  ],
772: 1:  'info': [
772: 1:    '✅f(1) = I',
772: 1:    '✅f(2) = II',
772: 1:    '✅f(3) = III',
772: 1:    '✅f(4) = IV',
772: 1:    '✅f(5) = V',
772: 1:    '✅f(6) = VI',
772: 1:    '✅f(7) = VII',
772: 1:    '✅f(8) = VIII',
772: 1:    '✅f(9) = IX',
772: 1:    '✅f(10) = X',
772: 1:    '✅f(11) = XI',
772: 1:    '✅f(12) = XII',
772: 1:    '✅f(13) = XIII',
772: 1:    '✅f(14) = XIV',
772: 1:    '✅f(15) = XV',
772: 1:    '✅f(16) = XVI',
772: 1:    '✅f(17) = XVII',
772: 1:    '✅f(18) = XVIII',
772: 1:    '✅f(19) = XIX',
772: 1:    '✅f(20) = XX',
772: 1:    '✅f(30) = XXX',
772: 1:    '✅f(35) = XXXV',
772: 1:    '✅f(36) = XXXVI',
772: 1:    '✅f(46) = XLVI',
772: 1:    '✅f(57) = LVII',
772: 1:    '✅f(67) = LXVII',
772: 1:    '✅f(89) = LXXXIX',
772: 1:    '✅f(123) = CXXIII',
772: 1:    '✅f(234) = CCXXXIV',
772: 1:    '✅f(345) = CCCXLV',
772: 1:    '✅f(456) = CDLVI',
772: 1:    '✅f(567) = DLXVII',
772: 1:    '❌f(678) = ??? != DCLXXVIII'
772: 1:  ],
772: 1:  'level': 27,
772: 1:  'nextQuestion': '678',
772: 1:  'questions': [
772: 1:    '1',
772: 1:    '2',
772: 1:    '3',
772: 1:    '4',
772: 1:    '5',
772: 1:    '6',
772: 1:    '7',
772: 1:    '8',
772: 1:    '9',
772: 1:    '10',
772: 1:    '11',
772: 1:    '12',
772: 1:    '13',
772: 1:    '14',
772: 1:    '15',
772: 1:    '16',
772: 1:    '17',
772: 1:    '18',
772: 1:    '19',
772: 1:    '20',
772: 1:    '30',
772: 1:    '35',
772: 1:    '36',
772: 1:    '46',
772: 1:    '57',
772: 1:    '67',
772: 1:    '89',
772: 1:    '123',
772: 1:    '234',
772: 1:    '345',
772: 1:    '456',
772: 1:    '567',
772: 1:    '678'
772: 1:  ]
772: 1:}
772: 1:Scores: 72021
772: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI', 'XLVI', 'LVII', 'LXVII', 'LXXXIX', 'CXXIII', 'CCXXXIV', 'CCCXLV', 'CDLVI', 'DLXVII', 'DCLXXVIII']')
772: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
773: 1:BoardData {
773: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
773: 1:  'expectedAnswer': 'DCCCXC',
773: 1:  'history': [
773: 1:    {
773: 1:      'answer': 'I',
773: 1:      'question': '1',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'II',
773: 1:      'question': '2',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'III',
773: 1:      'question': '3',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'IV',
773: 1:      'question': '4',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'V',
773: 1:      'question': '5',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'VI',
773: 1:      'question': '6',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'VII',
773: 1:      'question': '7',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'VIII',
773: 1:      'question': '8',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'IX',
773: 1:      'question': '9',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'X',
773: 1:      'question': '10',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'XI',
773: 1:      'question': '11',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'XII',
773: 1:      'question': '12',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'XIII',
773: 1:      'question': '13',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'XIV',
773: 1:      'question': '14',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'XV',
773: 1:      'question': '15',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'XVI',
773: 1:      'question': '16',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'XVII',
773: 1:      'question': '17',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'XVIII',
773: 1:      'question': '18',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'XIX',
773: 1:      'question': '19',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'XX',
773: 1:      'question': '20',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'XXX',
773: 1:      'question': '30',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'XXXV',
773: 1:      'question': '35',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'XXXVI',
773: 1:      'question': '36',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'XLVI',
773: 1:      'question': '46',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'LVII',
773: 1:      'question': '57',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'LXVII',
773: 1:      'question': '67',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'LXXXIX',
773: 1:      'question': '89',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'CXXIII',
773: 1:      'question': '123',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'CCXXXIV',
773: 1:      'question': '234',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'CCCXLV',
773: 1:      'question': '345',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'CDLVI',
773: 1:      'question': '456',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'DLXVII',
773: 1:      'question': '567',
773: 1:      'valid': true
773: 1:    },
773: 1:    {
773: 1:      'answer': 'DCLXXVIII',
773: 1:      'question': '678',
773: 1:      'valid': true
773: 1:    }
773: 1:  ],
773: 1:  'info': [
773: 1:    '✅f(1) = I',
773: 1:    '✅f(2) = II',
773: 1:    '✅f(3) = III',
773: 1:    '✅f(4) = IV',
773: 1:    '✅f(5) = V',
773: 1:    '✅f(6) = VI',
773: 1:    '✅f(7) = VII',
773: 1:    '✅f(8) = VIII',
773: 1:    '✅f(9) = IX',
773: 1:    '✅f(10) = X',
773: 1:    '✅f(11) = XI',
773: 1:    '✅f(12) = XII',
773: 1:    '✅f(13) = XIII',
773: 1:    '✅f(14) = XIV',
773: 1:    '✅f(15) = XV',
773: 1:    '✅f(16) = XVI',
773: 1:    '✅f(17) = XVII',
773: 1:    '✅f(18) = XVIII',
773: 1:    '✅f(19) = XIX',
773: 1:    '✅f(20) = XX',
773: 1:    '✅f(30) = XXX',
773: 1:    '✅f(35) = XXXV',
773: 1:    '✅f(36) = XXXVI',
773: 1:    '✅f(46) = XLVI',
773: 1:    '✅f(57) = LVII',
773: 1:    '✅f(67) = LXVII',
773: 1:    '✅f(89) = LXXXIX',
773: 1:    '✅f(123) = CXXIII',
773: 1:    '✅f(234) = CCXXXIV',
773: 1:    '✅f(345) = CCCXLV',
773: 1:    '✅f(456) = CDLVI',
773: 1:    '✅f(567) = DLXVII',
773: 1:    '✅f(678) = DCLXXVIII',
773: 1:    '❌f(890) = ??? != DCCCXC'
773: 1:  ],
773: 1:  'level': 27,
773: 1:  'nextQuestion': '890',
773: 1:  'questions': [
773: 1:    '1',
773: 1:    '2',
773: 1:    '3',
773: 1:    '4',
773: 1:    '5',
773: 1:    '6',
773: 1:    '7',
773: 1:    '8',
773: 1:    '9',
773: 1:    '10',
773: 1:    '11',
773: 1:    '12',
773: 1:    '13',
773: 1:    '14',
773: 1:    '15',
773: 1:    '16',
773: 1:    '17',
773: 1:    '18',
773: 1:    '19',
773: 1:    '20',
773: 1:    '30',
773: 1:    '35',
773: 1:    '36',
773: 1:    '46',
773: 1:    '57',
773: 1:    '67',
773: 1:    '89',
773: 1:    '123',
773: 1:    '234',
773: 1:    '345',
773: 1:    '456',
773: 1:    '567',
773: 1:    '678',
773: 1:    '890'
773: 1:  ]
773: 1:}
773: 1:Scores: 72031
773: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI', 'XLVI', 'LVII', 'LXVII', 'LXXXIX', 'CXXIII', 'CCXXXIV', 'CCCXLV', 'CDLVI', 'DLXVII', 'DCLXXVIII', 'DCCCXC']')
773: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
774: 1:BoardData {
774: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
774: 1:  'expectedAnswer': 'MCCXXXIV',
774: 1:  'history': [
774: 1:    {
774: 1:      'answer': 'I',
774: 1:      'question': '1',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'II',
774: 1:      'question': '2',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'III',
774: 1:      'question': '3',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'IV',
774: 1:      'question': '4',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'V',
774: 1:      'question': '5',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'VI',
774: 1:      'question': '6',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'VII',
774: 1:      'question': '7',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'VIII',
774: 1:      'question': '8',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'IX',
774: 1:      'question': '9',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'X',
774: 1:      'question': '10',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'XI',
774: 1:      'question': '11',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'XII',
774: 1:      'question': '12',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'XIII',
774: 1:      'question': '13',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'XIV',
774: 1:      'question': '14',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'XV',
774: 1:      'question': '15',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'XVI',
774: 1:      'question': '16',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'XVII',
774: 1:      'question': '17',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'XVIII',
774: 1:      'question': '18',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'XIX',
774: 1:      'question': '19',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'XX',
774: 1:      'question': '20',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'XXX',
774: 1:      'question': '30',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'XXXV',
774: 1:      'question': '35',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'XXXVI',
774: 1:      'question': '36',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'XLVI',
774: 1:      'question': '46',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'LVII',
774: 1:      'question': '57',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'LXVII',
774: 1:      'question': '67',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'LXXXIX',
774: 1:      'question': '89',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'CXXIII',
774: 1:      'question': '123',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'CCXXXIV',
774: 1:      'question': '234',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'CCCXLV',
774: 1:      'question': '345',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'CDLVI',
774: 1:      'question': '456',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'DLXVII',
774: 1:      'question': '567',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'DCLXXVIII',
774: 1:      'question': '678',
774: 1:      'valid': true
774: 1:    },
774: 1:    {
774: 1:      'answer': 'DCCCXC',
774: 1:      'question': '890',
774: 1:      'valid': true
774: 1:    }
774: 1:  ],
774: 1:  'info': [
774: 1:    '✅f(1) = I',
774: 1:    '✅f(2) = II',
774: 1:    '✅f(3) = III',
774: 1:    '✅f(4) = IV',
774: 1:    '✅f(5) = V',
774: 1:    '✅f(6) = VI',
774: 1:    '✅f(7) = VII',
774: 1:    '✅f(8) = VIII',
774: 1:    '✅f(9) = IX',
774: 1:    '✅f(10) = X',
774: 1:    '✅f(11) = XI',
774: 1:    '✅f(12) = XII',
774: 1:    '✅f(13) = XIII',
774: 1:    '✅f(14) = XIV',
774: 1:    '✅f(15) = XV',
774: 1:    '✅f(16) = XVI',
774: 1:    '✅f(17) = XVII',
774: 1:    '✅f(18) = XVIII',
774: 1:    '✅f(19) = XIX',
774: 1:    '✅f(20) = XX',
774: 1:    '✅f(30) = XXX',
774: 1:    '✅f(35) = XXXV',
774: 1:    '✅f(36) = XXXVI',
774: 1:    '✅f(46) = XLVI',
774: 1:    '✅f(57) = LVII',
774: 1:    '✅f(67) = LXVII',
774: 1:    '✅f(89) = LXXXIX',
774: 1:    '✅f(123) = CXXIII',
774: 1:    '✅f(234) = CCXXXIV',
774: 1:    '✅f(345) = CCCXLV',
774: 1:    '✅f(456) = CDLVI',
774: 1:    '✅f(567) = DLXVII',
774: 1:    '✅f(678) = DCLXXVIII',
774: 1:    '✅f(890) = DCCCXC',
774: 1:    '❌f(1234) = ??? != MCCXXXIV'
774: 1:  ],
774: 1:  'level': 27,
774: 1:  'nextQuestion': '1234',
774: 1:  'questions': [
774: 1:    '1',
774: 1:    '2',
774: 1:    '3',
774: 1:    '4',
774: 1:    '5',
774: 1:    '6',
774: 1:    '7',
774: 1:    '8',
774: 1:    '9',
774: 1:    '10',
774: 1:    '11',
774: 1:    '12',
774: 1:    '13',
774: 1:    '14',
774: 1:    '15',
774: 1:    '16',
774: 1:    '17',
774: 1:    '18',
774: 1:    '19',
774: 1:    '20',
774: 1:    '30',
774: 1:    '35',
774: 1:    '36',
774: 1:    '46',
774: 1:    '57',
774: 1:    '67',
774: 1:    '89',
774: 1:    '123',
774: 1:    '234',
774: 1:    '345',
774: 1:    '456',
774: 1:    '567',
774: 1:    '678',
774: 1:    '890',
774: 1:    '1234'
774: 1:  ]
774: 1:}
774: 1:Scores: 72041
774: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI', 'XLVI', 'LVII', 'LXVII', 'LXXXIX', 'CXXIII', 'CCXXXIV', 'CCCXLV', 'CDLVI', 'DLXVII', 'DCLXXVIII', 'DCCCXC', 'MCCXXXIV']')
774: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
775: 1:BoardData {
775: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
775: 1:  'expectedAnswer': 'MMCCCXLV',
775: 1:  'history': [
775: 1:    {
775: 1:      'answer': 'I',
775: 1:      'question': '1',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'II',
775: 1:      'question': '2',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'III',
775: 1:      'question': '3',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'IV',
775: 1:      'question': '4',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'V',
775: 1:      'question': '5',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'VI',
775: 1:      'question': '6',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'VII',
775: 1:      'question': '7',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'VIII',
775: 1:      'question': '8',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'IX',
775: 1:      'question': '9',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'X',
775: 1:      'question': '10',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'XI',
775: 1:      'question': '11',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'XII',
775: 1:      'question': '12',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'XIII',
775: 1:      'question': '13',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'XIV',
775: 1:      'question': '14',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'XV',
775: 1:      'question': '15',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'XVI',
775: 1:      'question': '16',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'XVII',
775: 1:      'question': '17',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'XVIII',
775: 1:      'question': '18',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'XIX',
775: 1:      'question': '19',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'XX',
775: 1:      'question': '20',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'XXX',
775: 1:      'question': '30',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'XXXV',
775: 1:      'question': '35',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'XXXVI',
775: 1:      'question': '36',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'XLVI',
775: 1:      'question': '46',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'LVII',
775: 1:      'question': '57',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'LXVII',
775: 1:      'question': '67',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'LXXXIX',
775: 1:      'question': '89',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'CXXIII',
775: 1:      'question': '123',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'CCXXXIV',
775: 1:      'question': '234',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'CCCXLV',
775: 1:      'question': '345',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'CDLVI',
775: 1:      'question': '456',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'DLXVII',
775: 1:      'question': '567',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'DCLXXVIII',
775: 1:      'question': '678',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'DCCCXC',
775: 1:      'question': '890',
775: 1:      'valid': true
775: 1:    },
775: 1:    {
775: 1:      'answer': 'MCCXXXIV',
775: 1:      'question': '1234',
775: 1:      'valid': true
775: 1:    }
775: 1:  ],
775: 1:  'info': [
775: 1:    '✅f(1) = I',
775: 1:    '✅f(2) = II',
775: 1:    '✅f(3) = III',
775: 1:    '✅f(4) = IV',
775: 1:    '✅f(5) = V',
775: 1:    '✅f(6) = VI',
775: 1:    '✅f(7) = VII',
775: 1:    '✅f(8) = VIII',
775: 1:    '✅f(9) = IX',
775: 1:    '✅f(10) = X',
775: 1:    '✅f(11) = XI',
775: 1:    '✅f(12) = XII',
775: 1:    '✅f(13) = XIII',
775: 1:    '✅f(14) = XIV',
775: 1:    '✅f(15) = XV',
775: 1:    '✅f(16) = XVI',
775: 1:    '✅f(17) = XVII',
775: 1:    '✅f(18) = XVIII',
775: 1:    '✅f(19) = XIX',
775: 1:    '✅f(20) = XX',
775: 1:    '✅f(30) = XXX',
775: 1:    '✅f(35) = XXXV',
775: 1:    '✅f(36) = XXXVI',
775: 1:    '✅f(46) = XLVI',
775: 1:    '✅f(57) = LVII',
775: 1:    '✅f(67) = LXVII',
775: 1:    '✅f(89) = LXXXIX',
775: 1:    '✅f(123) = CXXIII',
775: 1:    '✅f(234) = CCXXXIV',
775: 1:    '✅f(345) = CCCXLV',
775: 1:    '✅f(456) = CDLVI',
775: 1:    '✅f(567) = DLXVII',
775: 1:    '✅f(678) = DCLXXVIII',
775: 1:    '✅f(890) = DCCCXC',
775: 1:    '✅f(1234) = MCCXXXIV',
775: 1:    '❌f(2345) = ??? != MMCCCXLV'
775: 1:  ],
775: 1:  'level': 27,
775: 1:  'nextQuestion': '2345',
775: 1:  'questions': [
775: 1:    '1',
775: 1:    '2',
775: 1:    '3',
775: 1:    '4',
775: 1:    '5',
775: 1:    '6',
775: 1:    '7',
775: 1:    '8',
775: 1:    '9',
775: 1:    '10',
775: 1:    '11',
775: 1:    '12',
775: 1:    '13',
775: 1:    '14',
775: 1:    '15',
775: 1:    '16',
775: 1:    '17',
775: 1:    '18',
775: 1:    '19',
775: 1:    '20',
775: 1:    '30',
775: 1:    '35',
775: 1:    '36',
775: 1:    '46',
775: 1:    '57',
775: 1:    '67',
775: 1:    '89',
775: 1:    '123',
775: 1:    '234',
775: 1:    '345',
775: 1:    '456',
775: 1:    '567',
775: 1:    '678',
775: 1:    '890',
775: 1:    '1234',
775: 1:    '2345'
775: 1:  ]
775: 1:}
775: 1:Scores: 72051
775: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI', 'XLVI', 'LVII', 'LXVII', 'LXXXIX', 'CXXIII', 'CCXXXIV', 'CCCXLV', 'CDLVI', 'DLXVII', 'DCLXXVIII', 'DCCCXC', 'MCCXXXIV', 'MMCCCXLV']')
775: 1:Fire Event: PassTest{complexity=40, testCount=37}
------------------------------------------
776: 1:BoardData {
776: 1:  'description': ['Roman number algorithm. Convert arabic number to roman number.'],
776: 1:  'expectedAnswer': 'MMMCDLVI',
776: 1:  'history': [
776: 1:    {
776: 1:      'answer': 'I',
776: 1:      'question': '1',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'II',
776: 1:      'question': '2',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'III',
776: 1:      'question': '3',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'IV',
776: 1:      'question': '4',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'V',
776: 1:      'question': '5',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'VI',
776: 1:      'question': '6',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'VII',
776: 1:      'question': '7',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'VIII',
776: 1:      'question': '8',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'IX',
776: 1:      'question': '9',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'X',
776: 1:      'question': '10',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'XI',
776: 1:      'question': '11',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'XII',
776: 1:      'question': '12',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'XIII',
776: 1:      'question': '13',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'XIV',
776: 1:      'question': '14',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'XV',
776: 1:      'question': '15',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'XVI',
776: 1:      'question': '16',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'XVII',
776: 1:      'question': '17',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'XVIII',
776: 1:      'question': '18',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'XIX',
776: 1:      'question': '19',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'XX',
776: 1:      'question': '20',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'XXX',
776: 1:      'question': '30',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'XXXV',
776: 1:      'question': '35',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'XXXVI',
776: 1:      'question': '36',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'XLVI',
776: 1:      'question': '46',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'LVII',
776: 1:      'question': '57',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'LXVII',
776: 1:      'question': '67',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'LXXXIX',
776: 1:      'question': '89',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'CXXIII',
776: 1:      'question': '123',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'CCXXXIV',
776: 1:      'question': '234',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'CCCXLV',
776: 1:      'question': '345',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'CDLVI',
776: 1:      'question': '456',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'DLXVII',
776: 1:      'question': '567',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'DCLXXVIII',
776: 1:      'question': '678',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'DCCCXC',
776: 1:      'question': '890',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'MCCXXXIV',
776: 1:      'question': '1234',
776: 1:      'valid': true
776: 1:    },
776: 1:    {
776: 1:      'answer': 'MMCCCXLV',
776: 1:      'question': '2345',
776: 1:      'valid': true
776: 1:    }
776: 1:  ],
776: 1:  'info': [
776: 1:    '✅f(1) = I',
776: 1:    '✅f(2) = II',
776: 1:    '✅f(3) = III',
776: 1:    '✅f(4) = IV',
776: 1:    '✅f(5) = V',
776: 1:    '✅f(6) = VI',
776: 1:    '✅f(7) = VII',
776: 1:    '✅f(8) = VIII',
776: 1:    '✅f(9) = IX',
776: 1:    '✅f(10) = X',
776: 1:    '✅f(11) = XI',
776: 1:    '✅f(12) = XII',
776: 1:    '✅f(13) = XIII',
776: 1:    '✅f(14) = XIV',
776: 1:    '✅f(15) = XV',
776: 1:    '✅f(16) = XVI',
776: 1:    '✅f(17) = XVII',
776: 1:    '✅f(18) = XVIII',
776: 1:    '✅f(19) = XIX',
776: 1:    '✅f(20) = XX',
776: 1:    '✅f(30) = XXX',
776: 1:    '✅f(35) = XXXV',
776: 1:    '✅f(36) = XXXVI',
776: 1:    '✅f(46) = XLVI',
776: 1:    '✅f(57) = LVII',
776: 1:    '✅f(67) = LXVII',
776: 1:    '✅f(89) = LXXXIX',
776: 1:    '✅f(123) = CXXIII',
776: 1:    '✅f(234) = CCXXXIV',
776: 1:    '✅f(345) = CCCXLV',
776: 1:    '✅f(456) = CDLVI',
776: 1:    '✅f(567) = DLXVII',
776: 1:    '✅f(678) = DCLXXVIII',
776: 1:    '✅f(890) = DCCCXC',
776: 1:    '✅f(1234) = MCCXXXIV',
776: 1:    '✅f(2345) = MMCCCXLV',
776: 1:    '❌f(3456) = ??? != MMMCDLVI'
776: 1:  ],
776: 1:  'level': 27,
776: 1:  'nextQuestion': '3456',
776: 1:  'questions': [
776: 1:    '1',
776: 1:    '2',
776: 1:    '3',
776: 1:    '4',
776: 1:    '5',
776: 1:    '6',
776: 1:    '7',
776: 1:    '8',
776: 1:    '9',
776: 1:    '10',
776: 1:    '11',
776: 1:    '12',
776: 1:    '13',
776: 1:    '14',
776: 1:    '15',
776: 1:    '16',
776: 1:    '17',
776: 1:    '18',
776: 1:    '19',
776: 1:    '20',
776: 1:    '30',
776: 1:    '35',
776: 1:    '36',
776: 1:    '46',
776: 1:    '57',
776: 1:    '67',
776: 1:    '89',
776: 1:    '123',
776: 1:    '234',
776: 1:    '345',
776: 1:    '456',
776: 1:    '567',
776: 1:    '678',
776: 1:    '890',
776: 1:    '1234',
776: 1:    '2345',
776: 1:    '3456'
776: 1:  ]
776: 1:}
776: 1:Scores: 72061
776: 1:Answer: message('['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXX', 'XXXV', 'XXXVI', 'XLVI', 'LVII', 'LXVII', 'LXXXIX', 'CXXIII', 'CCXXXIV', 'CCCXLV', 'CDLVI', 'DLXVII', 'DCLXXVIII', 'DCCCXC', 'MCCXXXIV', 'MMCCCXLV', 'MMMCDLVI']')
776: 1:Fire Event: PassTest{complexity=40, testCount=37}
776: 1:Fire Event: NextAlgorithm{complexity=40, time=0}
------------------------------------------
777: 1:BoardData {
777: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
777: 1:  'history': [
777: 1:    {
777: 1:      'answer': 'I',
777: 1:      'question': '1',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'II',
777: 1:      'question': '2',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'III',
777: 1:      'question': '3',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'IV',
777: 1:      'question': '4',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'V',
777: 1:      'question': '5',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'VI',
777: 1:      'question': '6',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'VII',
777: 1:      'question': '7',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'VIII',
777: 1:      'question': '8',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'IX',
777: 1:      'question': '9',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'X',
777: 1:      'question': '10',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'XI',
777: 1:      'question': '11',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'XII',
777: 1:      'question': '12',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'XIII',
777: 1:      'question': '13',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'XIV',
777: 1:      'question': '14',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'XV',
777: 1:      'question': '15',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'XVI',
777: 1:      'question': '16',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'XVII',
777: 1:      'question': '17',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'XVIII',
777: 1:      'question': '18',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'XIX',
777: 1:      'question': '19',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'XX',
777: 1:      'question': '20',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'XXX',
777: 1:      'question': '30',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'XXXV',
777: 1:      'question': '35',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'XXXVI',
777: 1:      'question': '36',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'XLVI',
777: 1:      'question': '46',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'LVII',
777: 1:      'question': '57',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'LXVII',
777: 1:      'question': '67',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'LXXXIX',
777: 1:      'question': '89',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'CXXIII',
777: 1:      'question': '123',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'CCXXXIV',
777: 1:      'question': '234',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'CCCXLV',
777: 1:      'question': '345',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'CDLVI',
777: 1:      'question': '456',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'DLXVII',
777: 1:      'question': '567',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'DCLXXVIII',
777: 1:      'question': '678',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'DCCCXC',
777: 1:      'question': '890',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'MCCXXXIV',
777: 1:      'question': '1234',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'MMCCCXLV',
777: 1:      'question': '2345',
777: 1:      'valid': true
777: 1:    },
777: 1:    {
777: 1:      'answer': 'MMMCDLVI',
777: 1:      'question': '3456',
777: 1:      'valid': true
777: 1:    }
777: 1:  ],
777: 1:  'info': [
777: 1:    '✅f(1) = I',
777: 1:    '✅f(2) = II',
777: 1:    '✅f(3) = III',
777: 1:    '✅f(4) = IV',
777: 1:    '✅f(5) = V',
777: 1:    '✅f(6) = VI',
777: 1:    '✅f(7) = VII',
777: 1:    '✅f(8) = VIII',
777: 1:    '✅f(9) = IX',
777: 1:    '✅f(10) = X',
777: 1:    '✅f(11) = XI',
777: 1:    '✅f(12) = XII',
777: 1:    '✅f(13) = XIII',
777: 1:    '✅f(14) = XIV',
777: 1:    '✅f(15) = XV',
777: 1:    '✅f(16) = XVI',
777: 1:    '✅f(17) = XVII',
777: 1:    '✅f(18) = XVIII',
777: 1:    '✅f(19) = XIX',
777: 1:    '✅f(20) = XX',
777: 1:    '✅f(30) = XXX',
777: 1:    '✅f(35) = XXXV',
777: 1:    '✅f(36) = XXXVI',
777: 1:    '✅f(46) = XLVI',
777: 1:    '✅f(57) = LVII',
777: 1:    '✅f(67) = LXVII',
777: 1:    '✅f(89) = LXXXIX',
777: 1:    '✅f(123) = CXXIII',
777: 1:    '✅f(234) = CCXXXIV',
777: 1:    '✅f(345) = CCCXLV',
777: 1:    '✅f(456) = CDLVI',
777: 1:    '✅f(567) = DLXVII',
777: 1:    '✅f(678) = DCLXXVIII',
777: 1:    '✅f(890) = DCCCXC',
777: 1:    '✅f(1234) = MCCXXXIV',
777: 1:    '✅f(2345) = MMCCCXLV',
777: 1:    '✅f(3456) = MMMCDLVI'
777: 1:  ],
777: 1:  'level': 27,
777: 1:  'questions': []
777: 1:}
777: 1:Scores: 77470
777: 1:Answer: message('StartNextLevel')
777: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
778: 1:BoardData {
778: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
778: 1:  'expectedAnswer': '1',
778: 1:  'history': [],
778: 1:  'info': ['❌f(I) = ??? != 1'],
778: 1:  'level': 28,
778: 1:  'nextQuestion': 'I',
778: 1:  'questions': ['I']
778: 1:}
778: 1:Scores: 77470
778: 1:Answer: message('['1']')
778: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
779: 1:BoardData {
779: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
779: 1:  'expectedAnswer': '2',
779: 1:  'history': [{
779: 1:    'answer': '1',
779: 1:    'question': 'I',
779: 1:    'valid': true
779: 1:  }],
779: 1:  'info': [
779: 1:    '✅f(I) = 1',
779: 1:    '❌f(II) = ??? != 2'
779: 1:  ],
779: 1:  'level': 28,
779: 1:  'nextQuestion': 'II',
779: 1:  'questions': [
779: 1:    'I',
779: 1:    'II'
779: 1:  ]
779: 1:}
779: 1:Scores: 77481
779: 1:Answer: message('['1', '2']')
779: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
780: 1:BoardData {
780: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
780: 1:  'expectedAnswer': '3',
780: 1:  'history': [
780: 1:    {
780: 1:      'answer': '1',
780: 1:      'question': 'I',
780: 1:      'valid': true
780: 1:    },
780: 1:    {
780: 1:      'answer': '2',
780: 1:      'question': 'II',
780: 1:      'valid': true
780: 1:    }
780: 1:  ],
780: 1:  'info': [
780: 1:    '✅f(I) = 1',
780: 1:    '✅f(II) = 2',
780: 1:    '❌f(III) = ??? != 3'
780: 1:  ],
780: 1:  'level': 28,
780: 1:  'nextQuestion': 'III',
780: 1:  'questions': [
780: 1:    'I',
780: 1:    'II',
780: 1:    'III'
780: 1:  ]
780: 1:}
780: 1:Scores: 77492
780: 1:Answer: message('['1', '2', '3']')
780: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
781: 1:BoardData {
781: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
781: 1:  'expectedAnswer': '4',
781: 1:  'history': [
781: 1:    {
781: 1:      'answer': '1',
781: 1:      'question': 'I',
781: 1:      'valid': true
781: 1:    },
781: 1:    {
781: 1:      'answer': '2',
781: 1:      'question': 'II',
781: 1:      'valid': true
781: 1:    },
781: 1:    {
781: 1:      'answer': '3',
781: 1:      'question': 'III',
781: 1:      'valid': true
781: 1:    }
781: 1:  ],
781: 1:  'info': [
781: 1:    '✅f(I) = 1',
781: 1:    '✅f(II) = 2',
781: 1:    '✅f(III) = 3',
781: 1:    '❌f(IV) = ??? != 4'
781: 1:  ],
781: 1:  'level': 28,
781: 1:  'nextQuestion': 'IV',
781: 1:  'questions': [
781: 1:    'I',
781: 1:    'II',
781: 1:    'III',
781: 1:    'IV'
781: 1:  ]
781: 1:}
781: 1:Scores: 77503
781: 1:Answer: message('['1', '2', '3', '4']')
781: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
782: 1:BoardData {
782: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
782: 1:  'expectedAnswer': '5',
782: 1:  'history': [
782: 1:    {
782: 1:      'answer': '1',
782: 1:      'question': 'I',
782: 1:      'valid': true
782: 1:    },
782: 1:    {
782: 1:      'answer': '2',
782: 1:      'question': 'II',
782: 1:      'valid': true
782: 1:    },
782: 1:    {
782: 1:      'answer': '3',
782: 1:      'question': 'III',
782: 1:      'valid': true
782: 1:    },
782: 1:    {
782: 1:      'answer': '4',
782: 1:      'question': 'IV',
782: 1:      'valid': true
782: 1:    }
782: 1:  ],
782: 1:  'info': [
782: 1:    '✅f(I) = 1',
782: 1:    '✅f(II) = 2',
782: 1:    '✅f(III) = 3',
782: 1:    '✅f(IV) = 4',
782: 1:    '❌f(V) = ??? != 5'
782: 1:  ],
782: 1:  'level': 28,
782: 1:  'nextQuestion': 'V',
782: 1:  'questions': [
782: 1:    'I',
782: 1:    'II',
782: 1:    'III',
782: 1:    'IV',
782: 1:    'V'
782: 1:  ]
782: 1:}
782: 1:Scores: 77514
782: 1:Answer: message('['1', '2', '3', '4', '5']')
782: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
783: 1:BoardData {
783: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
783: 1:  'expectedAnswer': '6',
783: 1:  'history': [
783: 1:    {
783: 1:      'answer': '1',
783: 1:      'question': 'I',
783: 1:      'valid': true
783: 1:    },
783: 1:    {
783: 1:      'answer': '2',
783: 1:      'question': 'II',
783: 1:      'valid': true
783: 1:    },
783: 1:    {
783: 1:      'answer': '3',
783: 1:      'question': 'III',
783: 1:      'valid': true
783: 1:    },
783: 1:    {
783: 1:      'answer': '4',
783: 1:      'question': 'IV',
783: 1:      'valid': true
783: 1:    },
783: 1:    {
783: 1:      'answer': '5',
783: 1:      'question': 'V',
783: 1:      'valid': true
783: 1:    }
783: 1:  ],
783: 1:  'info': [
783: 1:    '✅f(I) = 1',
783: 1:    '✅f(II) = 2',
783: 1:    '✅f(III) = 3',
783: 1:    '✅f(IV) = 4',
783: 1:    '✅f(V) = 5',
783: 1:    '❌f(VI) = ??? != 6'
783: 1:  ],
783: 1:  'level': 28,
783: 1:  'nextQuestion': 'VI',
783: 1:  'questions': [
783: 1:    'I',
783: 1:    'II',
783: 1:    'III',
783: 1:    'IV',
783: 1:    'V',
783: 1:    'VI'
783: 1:  ]
783: 1:}
783: 1:Scores: 77525
783: 1:Answer: message('['1', '2', '3', '4', '5', '6']')
783: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
784: 1:BoardData {
784: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
784: 1:  'expectedAnswer': '7',
784: 1:  'history': [
784: 1:    {
784: 1:      'answer': '1',
784: 1:      'question': 'I',
784: 1:      'valid': true
784: 1:    },
784: 1:    {
784: 1:      'answer': '2',
784: 1:      'question': 'II',
784: 1:      'valid': true
784: 1:    },
784: 1:    {
784: 1:      'answer': '3',
784: 1:      'question': 'III',
784: 1:      'valid': true
784: 1:    },
784: 1:    {
784: 1:      'answer': '4',
784: 1:      'question': 'IV',
784: 1:      'valid': true
784: 1:    },
784: 1:    {
784: 1:      'answer': '5',
784: 1:      'question': 'V',
784: 1:      'valid': true
784: 1:    },
784: 1:    {
784: 1:      'answer': '6',
784: 1:      'question': 'VI',
784: 1:      'valid': true
784: 1:    }
784: 1:  ],
784: 1:  'info': [
784: 1:    '✅f(I) = 1',
784: 1:    '✅f(II) = 2',
784: 1:    '✅f(III) = 3',
784: 1:    '✅f(IV) = 4',
784: 1:    '✅f(V) = 5',
784: 1:    '✅f(VI) = 6',
784: 1:    '❌f(VII) = ??? != 7'
784: 1:  ],
784: 1:  'level': 28,
784: 1:  'nextQuestion': 'VII',
784: 1:  'questions': [
784: 1:    'I',
784: 1:    'II',
784: 1:    'III',
784: 1:    'IV',
784: 1:    'V',
784: 1:    'VI',
784: 1:    'VII'
784: 1:  ]
784: 1:}
784: 1:Scores: 77536
784: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7']')
784: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
785: 1:BoardData {
785: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
785: 1:  'expectedAnswer': '8',
785: 1:  'history': [
785: 1:    {
785: 1:      'answer': '1',
785: 1:      'question': 'I',
785: 1:      'valid': true
785: 1:    },
785: 1:    {
785: 1:      'answer': '2',
785: 1:      'question': 'II',
785: 1:      'valid': true
785: 1:    },
785: 1:    {
785: 1:      'answer': '3',
785: 1:      'question': 'III',
785: 1:      'valid': true
785: 1:    },
785: 1:    {
785: 1:      'answer': '4',
785: 1:      'question': 'IV',
785: 1:      'valid': true
785: 1:    },
785: 1:    {
785: 1:      'answer': '5',
785: 1:      'question': 'V',
785: 1:      'valid': true
785: 1:    },
785: 1:    {
785: 1:      'answer': '6',
785: 1:      'question': 'VI',
785: 1:      'valid': true
785: 1:    },
785: 1:    {
785: 1:      'answer': '7',
785: 1:      'question': 'VII',
785: 1:      'valid': true
785: 1:    }
785: 1:  ],
785: 1:  'info': [
785: 1:    '✅f(I) = 1',
785: 1:    '✅f(II) = 2',
785: 1:    '✅f(III) = 3',
785: 1:    '✅f(IV) = 4',
785: 1:    '✅f(V) = 5',
785: 1:    '✅f(VI) = 6',
785: 1:    '✅f(VII) = 7',
785: 1:    '❌f(VIII) = ??? != 8'
785: 1:  ],
785: 1:  'level': 28,
785: 1:  'nextQuestion': 'VIII',
785: 1:  'questions': [
785: 1:    'I',
785: 1:    'II',
785: 1:    'III',
785: 1:    'IV',
785: 1:    'V',
785: 1:    'VI',
785: 1:    'VII',
785: 1:    'VIII'
785: 1:  ]
785: 1:}
785: 1:Scores: 77547
785: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8']')
785: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
786: 1:BoardData {
786: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
786: 1:  'expectedAnswer': '9',
786: 1:  'history': [
786: 1:    {
786: 1:      'answer': '1',
786: 1:      'question': 'I',
786: 1:      'valid': true
786: 1:    },
786: 1:    {
786: 1:      'answer': '2',
786: 1:      'question': 'II',
786: 1:      'valid': true
786: 1:    },
786: 1:    {
786: 1:      'answer': '3',
786: 1:      'question': 'III',
786: 1:      'valid': true
786: 1:    },
786: 1:    {
786: 1:      'answer': '4',
786: 1:      'question': 'IV',
786: 1:      'valid': true
786: 1:    },
786: 1:    {
786: 1:      'answer': '5',
786: 1:      'question': 'V',
786: 1:      'valid': true
786: 1:    },
786: 1:    {
786: 1:      'answer': '6',
786: 1:      'question': 'VI',
786: 1:      'valid': true
786: 1:    },
786: 1:    {
786: 1:      'answer': '7',
786: 1:      'question': 'VII',
786: 1:      'valid': true
786: 1:    },
786: 1:    {
786: 1:      'answer': '8',
786: 1:      'question': 'VIII',
786: 1:      'valid': true
786: 1:    }
786: 1:  ],
786: 1:  'info': [
786: 1:    '✅f(I) = 1',
786: 1:    '✅f(II) = 2',
786: 1:    '✅f(III) = 3',
786: 1:    '✅f(IV) = 4',
786: 1:    '✅f(V) = 5',
786: 1:    '✅f(VI) = 6',
786: 1:    '✅f(VII) = 7',
786: 1:    '✅f(VIII) = 8',
786: 1:    '❌f(IX) = ??? != 9'
786: 1:  ],
786: 1:  'level': 28,
786: 1:  'nextQuestion': 'IX',
786: 1:  'questions': [
786: 1:    'I',
786: 1:    'II',
786: 1:    'III',
786: 1:    'IV',
786: 1:    'V',
786: 1:    'VI',
786: 1:    'VII',
786: 1:    'VIII',
786: 1:    'IX'
786: 1:  ]
786: 1:}
786: 1:Scores: 77558
786: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9']')
786: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
787: 1:BoardData {
787: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
787: 1:  'expectedAnswer': '10',
787: 1:  'history': [
787: 1:    {
787: 1:      'answer': '1',
787: 1:      'question': 'I',
787: 1:      'valid': true
787: 1:    },
787: 1:    {
787: 1:      'answer': '2',
787: 1:      'question': 'II',
787: 1:      'valid': true
787: 1:    },
787: 1:    {
787: 1:      'answer': '3',
787: 1:      'question': 'III',
787: 1:      'valid': true
787: 1:    },
787: 1:    {
787: 1:      'answer': '4',
787: 1:      'question': 'IV',
787: 1:      'valid': true
787: 1:    },
787: 1:    {
787: 1:      'answer': '5',
787: 1:      'question': 'V',
787: 1:      'valid': true
787: 1:    },
787: 1:    {
787: 1:      'answer': '6',
787: 1:      'question': 'VI',
787: 1:      'valid': true
787: 1:    },
787: 1:    {
787: 1:      'answer': '7',
787: 1:      'question': 'VII',
787: 1:      'valid': true
787: 1:    },
787: 1:    {
787: 1:      'answer': '8',
787: 1:      'question': 'VIII',
787: 1:      'valid': true
787: 1:    },
787: 1:    {
787: 1:      'answer': '9',
787: 1:      'question': 'IX',
787: 1:      'valid': true
787: 1:    }
787: 1:  ],
787: 1:  'info': [
787: 1:    '✅f(I) = 1',
787: 1:    '✅f(II) = 2',
787: 1:    '✅f(III) = 3',
787: 1:    '✅f(IV) = 4',
787: 1:    '✅f(V) = 5',
787: 1:    '✅f(VI) = 6',
787: 1:    '✅f(VII) = 7',
787: 1:    '✅f(VIII) = 8',
787: 1:    '✅f(IX) = 9',
787: 1:    '❌f(X) = ??? != 10'
787: 1:  ],
787: 1:  'level': 28,
787: 1:  'nextQuestion': 'X',
787: 1:  'questions': [
787: 1:    'I',
787: 1:    'II',
787: 1:    'III',
787: 1:    'IV',
787: 1:    'V',
787: 1:    'VI',
787: 1:    'VII',
787: 1:    'VIII',
787: 1:    'IX',
787: 1:    'X'
787: 1:  ]
787: 1:}
787: 1:Scores: 77569
787: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']')
787: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
788: 1:BoardData {
788: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
788: 1:  'expectedAnswer': '11',
788: 1:  'history': [
788: 1:    {
788: 1:      'answer': '1',
788: 1:      'question': 'I',
788: 1:      'valid': true
788: 1:    },
788: 1:    {
788: 1:      'answer': '2',
788: 1:      'question': 'II',
788: 1:      'valid': true
788: 1:    },
788: 1:    {
788: 1:      'answer': '3',
788: 1:      'question': 'III',
788: 1:      'valid': true
788: 1:    },
788: 1:    {
788: 1:      'answer': '4',
788: 1:      'question': 'IV',
788: 1:      'valid': true
788: 1:    },
788: 1:    {
788: 1:      'answer': '5',
788: 1:      'question': 'V',
788: 1:      'valid': true
788: 1:    },
788: 1:    {
788: 1:      'answer': '6',
788: 1:      'question': 'VI',
788: 1:      'valid': true
788: 1:    },
788: 1:    {
788: 1:      'answer': '7',
788: 1:      'question': 'VII',
788: 1:      'valid': true
788: 1:    },
788: 1:    {
788: 1:      'answer': '8',
788: 1:      'question': 'VIII',
788: 1:      'valid': true
788: 1:    },
788: 1:    {
788: 1:      'answer': '9',
788: 1:      'question': 'IX',
788: 1:      'valid': true
788: 1:    },
788: 1:    {
788: 1:      'answer': '10',
788: 1:      'question': 'X',
788: 1:      'valid': true
788: 1:    }
788: 1:  ],
788: 1:  'info': [
788: 1:    '✅f(I) = 1',
788: 1:    '✅f(II) = 2',
788: 1:    '✅f(III) = 3',
788: 1:    '✅f(IV) = 4',
788: 1:    '✅f(V) = 5',
788: 1:    '✅f(VI) = 6',
788: 1:    '✅f(VII) = 7',
788: 1:    '✅f(VIII) = 8',
788: 1:    '✅f(IX) = 9',
788: 1:    '✅f(X) = 10',
788: 1:    '❌f(XI) = ??? != 11'
788: 1:  ],
788: 1:  'level': 28,
788: 1:  'nextQuestion': 'XI',
788: 1:  'questions': [
788: 1:    'I',
788: 1:    'II',
788: 1:    'III',
788: 1:    'IV',
788: 1:    'V',
788: 1:    'VI',
788: 1:    'VII',
788: 1:    'VIII',
788: 1:    'IX',
788: 1:    'X',
788: 1:    'XI'
788: 1:  ]
788: 1:}
788: 1:Scores: 77580
788: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']')
788: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
789: 1:BoardData {
789: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
789: 1:  'expectedAnswer': '12',
789: 1:  'history': [
789: 1:    {
789: 1:      'answer': '1',
789: 1:      'question': 'I',
789: 1:      'valid': true
789: 1:    },
789: 1:    {
789: 1:      'answer': '2',
789: 1:      'question': 'II',
789: 1:      'valid': true
789: 1:    },
789: 1:    {
789: 1:      'answer': '3',
789: 1:      'question': 'III',
789: 1:      'valid': true
789: 1:    },
789: 1:    {
789: 1:      'answer': '4',
789: 1:      'question': 'IV',
789: 1:      'valid': true
789: 1:    },
789: 1:    {
789: 1:      'answer': '5',
789: 1:      'question': 'V',
789: 1:      'valid': true
789: 1:    },
789: 1:    {
789: 1:      'answer': '6',
789: 1:      'question': 'VI',
789: 1:      'valid': true
789: 1:    },
789: 1:    {
789: 1:      'answer': '7',
789: 1:      'question': 'VII',
789: 1:      'valid': true
789: 1:    },
789: 1:    {
789: 1:      'answer': '8',
789: 1:      'question': 'VIII',
789: 1:      'valid': true
789: 1:    },
789: 1:    {
789: 1:      'answer': '9',
789: 1:      'question': 'IX',
789: 1:      'valid': true
789: 1:    },
789: 1:    {
789: 1:      'answer': '10',
789: 1:      'question': 'X',
789: 1:      'valid': true
789: 1:    },
789: 1:    {
789: 1:      'answer': '11',
789: 1:      'question': 'XI',
789: 1:      'valid': true
789: 1:    }
789: 1:  ],
789: 1:  'info': [
789: 1:    '✅f(I) = 1',
789: 1:    '✅f(II) = 2',
789: 1:    '✅f(III) = 3',
789: 1:    '✅f(IV) = 4',
789: 1:    '✅f(V) = 5',
789: 1:    '✅f(VI) = 6',
789: 1:    '✅f(VII) = 7',
789: 1:    '✅f(VIII) = 8',
789: 1:    '✅f(IX) = 9',
789: 1:    '✅f(X) = 10',
789: 1:    '✅f(XI) = 11',
789: 1:    '❌f(XII) = ??? != 12'
789: 1:  ],
789: 1:  'level': 28,
789: 1:  'nextQuestion': 'XII',
789: 1:  'questions': [
789: 1:    'I',
789: 1:    'II',
789: 1:    'III',
789: 1:    'IV',
789: 1:    'V',
789: 1:    'VI',
789: 1:    'VII',
789: 1:    'VIII',
789: 1:    'IX',
789: 1:    'X',
789: 1:    'XI',
789: 1:    'XII'
789: 1:  ]
789: 1:}
789: 1:Scores: 77591
789: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12']')
789: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
790: 1:BoardData {
790: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
790: 1:  'expectedAnswer': '13',
790: 1:  'history': [
790: 1:    {
790: 1:      'answer': '1',
790: 1:      'question': 'I',
790: 1:      'valid': true
790: 1:    },
790: 1:    {
790: 1:      'answer': '2',
790: 1:      'question': 'II',
790: 1:      'valid': true
790: 1:    },
790: 1:    {
790: 1:      'answer': '3',
790: 1:      'question': 'III',
790: 1:      'valid': true
790: 1:    },
790: 1:    {
790: 1:      'answer': '4',
790: 1:      'question': 'IV',
790: 1:      'valid': true
790: 1:    },
790: 1:    {
790: 1:      'answer': '5',
790: 1:      'question': 'V',
790: 1:      'valid': true
790: 1:    },
790: 1:    {
790: 1:      'answer': '6',
790: 1:      'question': 'VI',
790: 1:      'valid': true
790: 1:    },
790: 1:    {
790: 1:      'answer': '7',
790: 1:      'question': 'VII',
790: 1:      'valid': true
790: 1:    },
790: 1:    {
790: 1:      'answer': '8',
790: 1:      'question': 'VIII',
790: 1:      'valid': true
790: 1:    },
790: 1:    {
790: 1:      'answer': '9',
790: 1:      'question': 'IX',
790: 1:      'valid': true
790: 1:    },
790: 1:    {
790: 1:      'answer': '10',
790: 1:      'question': 'X',
790: 1:      'valid': true
790: 1:    },
790: 1:    {
790: 1:      'answer': '11',
790: 1:      'question': 'XI',
790: 1:      'valid': true
790: 1:    },
790: 1:    {
790: 1:      'answer': '12',
790: 1:      'question': 'XII',
790: 1:      'valid': true
790: 1:    }
790: 1:  ],
790: 1:  'info': [
790: 1:    '✅f(I) = 1',
790: 1:    '✅f(II) = 2',
790: 1:    '✅f(III) = 3',
790: 1:    '✅f(IV) = 4',
790: 1:    '✅f(V) = 5',
790: 1:    '✅f(VI) = 6',
790: 1:    '✅f(VII) = 7',
790: 1:    '✅f(VIII) = 8',
790: 1:    '✅f(IX) = 9',
790: 1:    '✅f(X) = 10',
790: 1:    '✅f(XI) = 11',
790: 1:    '✅f(XII) = 12',
790: 1:    '❌f(XIII) = ??? != 13'
790: 1:  ],
790: 1:  'level': 28,
790: 1:  'nextQuestion': 'XIII',
790: 1:  'questions': [
790: 1:    'I',
790: 1:    'II',
790: 1:    'III',
790: 1:    'IV',
790: 1:    'V',
790: 1:    'VI',
790: 1:    'VII',
790: 1:    'VIII',
790: 1:    'IX',
790: 1:    'X',
790: 1:    'XI',
790: 1:    'XII',
790: 1:    'XIII'
790: 1:  ]
790: 1:}
790: 1:Scores: 77602
790: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13']')
790: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
791: 1:BoardData {
791: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
791: 1:  'expectedAnswer': '14',
791: 1:  'history': [
791: 1:    {
791: 1:      'answer': '1',
791: 1:      'question': 'I',
791: 1:      'valid': true
791: 1:    },
791: 1:    {
791: 1:      'answer': '2',
791: 1:      'question': 'II',
791: 1:      'valid': true
791: 1:    },
791: 1:    {
791: 1:      'answer': '3',
791: 1:      'question': 'III',
791: 1:      'valid': true
791: 1:    },
791: 1:    {
791: 1:      'answer': '4',
791: 1:      'question': 'IV',
791: 1:      'valid': true
791: 1:    },
791: 1:    {
791: 1:      'answer': '5',
791: 1:      'question': 'V',
791: 1:      'valid': true
791: 1:    },
791: 1:    {
791: 1:      'answer': '6',
791: 1:      'question': 'VI',
791: 1:      'valid': true
791: 1:    },
791: 1:    {
791: 1:      'answer': '7',
791: 1:      'question': 'VII',
791: 1:      'valid': true
791: 1:    },
791: 1:    {
791: 1:      'answer': '8',
791: 1:      'question': 'VIII',
791: 1:      'valid': true
791: 1:    },
791: 1:    {
791: 1:      'answer': '9',
791: 1:      'question': 'IX',
791: 1:      'valid': true
791: 1:    },
791: 1:    {
791: 1:      'answer': '10',
791: 1:      'question': 'X',
791: 1:      'valid': true
791: 1:    },
791: 1:    {
791: 1:      'answer': '11',
791: 1:      'question': 'XI',
791: 1:      'valid': true
791: 1:    },
791: 1:    {
791: 1:      'answer': '12',
791: 1:      'question': 'XII',
791: 1:      'valid': true
791: 1:    },
791: 1:    {
791: 1:      'answer': '13',
791: 1:      'question': 'XIII',
791: 1:      'valid': true
791: 1:    }
791: 1:  ],
791: 1:  'info': [
791: 1:    '✅f(I) = 1',
791: 1:    '✅f(II) = 2',
791: 1:    '✅f(III) = 3',
791: 1:    '✅f(IV) = 4',
791: 1:    '✅f(V) = 5',
791: 1:    '✅f(VI) = 6',
791: 1:    '✅f(VII) = 7',
791: 1:    '✅f(VIII) = 8',
791: 1:    '✅f(IX) = 9',
791: 1:    '✅f(X) = 10',
791: 1:    '✅f(XI) = 11',
791: 1:    '✅f(XII) = 12',
791: 1:    '✅f(XIII) = 13',
791: 1:    '❌f(XIV) = ??? != 14'
791: 1:  ],
791: 1:  'level': 28,
791: 1:  'nextQuestion': 'XIV',
791: 1:  'questions': [
791: 1:    'I',
791: 1:    'II',
791: 1:    'III',
791: 1:    'IV',
791: 1:    'V',
791: 1:    'VI',
791: 1:    'VII',
791: 1:    'VIII',
791: 1:    'IX',
791: 1:    'X',
791: 1:    'XI',
791: 1:    'XII',
791: 1:    'XIII',
791: 1:    'XIV'
791: 1:  ]
791: 1:}
791: 1:Scores: 77613
791: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14']')
791: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
792: 1:BoardData {
792: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
792: 1:  'expectedAnswer': '15',
792: 1:  'history': [
792: 1:    {
792: 1:      'answer': '1',
792: 1:      'question': 'I',
792: 1:      'valid': true
792: 1:    },
792: 1:    {
792: 1:      'answer': '2',
792: 1:      'question': 'II',
792: 1:      'valid': true
792: 1:    },
792: 1:    {
792: 1:      'answer': '3',
792: 1:      'question': 'III',
792: 1:      'valid': true
792: 1:    },
792: 1:    {
792: 1:      'answer': '4',
792: 1:      'question': 'IV',
792: 1:      'valid': true
792: 1:    },
792: 1:    {
792: 1:      'answer': '5',
792: 1:      'question': 'V',
792: 1:      'valid': true
792: 1:    },
792: 1:    {
792: 1:      'answer': '6',
792: 1:      'question': 'VI',
792: 1:      'valid': true
792: 1:    },
792: 1:    {
792: 1:      'answer': '7',
792: 1:      'question': 'VII',
792: 1:      'valid': true
792: 1:    },
792: 1:    {
792: 1:      'answer': '8',
792: 1:      'question': 'VIII',
792: 1:      'valid': true
792: 1:    },
792: 1:    {
792: 1:      'answer': '9',
792: 1:      'question': 'IX',
792: 1:      'valid': true
792: 1:    },
792: 1:    {
792: 1:      'answer': '10',
792: 1:      'question': 'X',
792: 1:      'valid': true
792: 1:    },
792: 1:    {
792: 1:      'answer': '11',
792: 1:      'question': 'XI',
792: 1:      'valid': true
792: 1:    },
792: 1:    {
792: 1:      'answer': '12',
792: 1:      'question': 'XII',
792: 1:      'valid': true
792: 1:    },
792: 1:    {
792: 1:      'answer': '13',
792: 1:      'question': 'XIII',
792: 1:      'valid': true
792: 1:    },
792: 1:    {
792: 1:      'answer': '14',
792: 1:      'question': 'XIV',
792: 1:      'valid': true
792: 1:    }
792: 1:  ],
792: 1:  'info': [
792: 1:    '✅f(I) = 1',
792: 1:    '✅f(II) = 2',
792: 1:    '✅f(III) = 3',
792: 1:    '✅f(IV) = 4',
792: 1:    '✅f(V) = 5',
792: 1:    '✅f(VI) = 6',
792: 1:    '✅f(VII) = 7',
792: 1:    '✅f(VIII) = 8',
792: 1:    '✅f(IX) = 9',
792: 1:    '✅f(X) = 10',
792: 1:    '✅f(XI) = 11',
792: 1:    '✅f(XII) = 12',
792: 1:    '✅f(XIII) = 13',
792: 1:    '✅f(XIV) = 14',
792: 1:    '❌f(XV) = ??? != 15'
792: 1:  ],
792: 1:  'level': 28,
792: 1:  'nextQuestion': 'XV',
792: 1:  'questions': [
792: 1:    'I',
792: 1:    'II',
792: 1:    'III',
792: 1:    'IV',
792: 1:    'V',
792: 1:    'VI',
792: 1:    'VII',
792: 1:    'VIII',
792: 1:    'IX',
792: 1:    'X',
792: 1:    'XI',
792: 1:    'XII',
792: 1:    'XIII',
792: 1:    'XIV',
792: 1:    'XV'
792: 1:  ]
792: 1:}
792: 1:Scores: 77624
792: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15']')
792: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
793: 1:BoardData {
793: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
793: 1:  'expectedAnswer': '16',
793: 1:  'history': [
793: 1:    {
793: 1:      'answer': '1',
793: 1:      'question': 'I',
793: 1:      'valid': true
793: 1:    },
793: 1:    {
793: 1:      'answer': '2',
793: 1:      'question': 'II',
793: 1:      'valid': true
793: 1:    },
793: 1:    {
793: 1:      'answer': '3',
793: 1:      'question': 'III',
793: 1:      'valid': true
793: 1:    },
793: 1:    {
793: 1:      'answer': '4',
793: 1:      'question': 'IV',
793: 1:      'valid': true
793: 1:    },
793: 1:    {
793: 1:      'answer': '5',
793: 1:      'question': 'V',
793: 1:      'valid': true
793: 1:    },
793: 1:    {
793: 1:      'answer': '6',
793: 1:      'question': 'VI',
793: 1:      'valid': true
793: 1:    },
793: 1:    {
793: 1:      'answer': '7',
793: 1:      'question': 'VII',
793: 1:      'valid': true
793: 1:    },
793: 1:    {
793: 1:      'answer': '8',
793: 1:      'question': 'VIII',
793: 1:      'valid': true
793: 1:    },
793: 1:    {
793: 1:      'answer': '9',
793: 1:      'question': 'IX',
793: 1:      'valid': true
793: 1:    },
793: 1:    {
793: 1:      'answer': '10',
793: 1:      'question': 'X',
793: 1:      'valid': true
793: 1:    },
793: 1:    {
793: 1:      'answer': '11',
793: 1:      'question': 'XI',
793: 1:      'valid': true
793: 1:    },
793: 1:    {
793: 1:      'answer': '12',
793: 1:      'question': 'XII',
793: 1:      'valid': true
793: 1:    },
793: 1:    {
793: 1:      'answer': '13',
793: 1:      'question': 'XIII',
793: 1:      'valid': true
793: 1:    },
793: 1:    {
793: 1:      'answer': '14',
793: 1:      'question': 'XIV',
793: 1:      'valid': true
793: 1:    },
793: 1:    {
793: 1:      'answer': '15',
793: 1:      'question': 'XV',
793: 1:      'valid': true
793: 1:    }
793: 1:  ],
793: 1:  'info': [
793: 1:    '✅f(I) = 1',
793: 1:    '✅f(II) = 2',
793: 1:    '✅f(III) = 3',
793: 1:    '✅f(IV) = 4',
793: 1:    '✅f(V) = 5',
793: 1:    '✅f(VI) = 6',
793: 1:    '✅f(VII) = 7',
793: 1:    '✅f(VIII) = 8',
793: 1:    '✅f(IX) = 9',
793: 1:    '✅f(X) = 10',
793: 1:    '✅f(XI) = 11',
793: 1:    '✅f(XII) = 12',
793: 1:    '✅f(XIII) = 13',
793: 1:    '✅f(XIV) = 14',
793: 1:    '✅f(XV) = 15',
793: 1:    '❌f(XVI) = ??? != 16'
793: 1:  ],
793: 1:  'level': 28,
793: 1:  'nextQuestion': 'XVI',
793: 1:  'questions': [
793: 1:    'I',
793: 1:    'II',
793: 1:    'III',
793: 1:    'IV',
793: 1:    'V',
793: 1:    'VI',
793: 1:    'VII',
793: 1:    'VIII',
793: 1:    'IX',
793: 1:    'X',
793: 1:    'XI',
793: 1:    'XII',
793: 1:    'XIII',
793: 1:    'XIV',
793: 1:    'XV',
793: 1:    'XVI'
793: 1:  ]
793: 1:}
793: 1:Scores: 77635
793: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16']')
793: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
794: 1:BoardData {
794: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
794: 1:  'expectedAnswer': '17',
794: 1:  'history': [
794: 1:    {
794: 1:      'answer': '1',
794: 1:      'question': 'I',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '2',
794: 1:      'question': 'II',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '3',
794: 1:      'question': 'III',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '4',
794: 1:      'question': 'IV',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '5',
794: 1:      'question': 'V',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '6',
794: 1:      'question': 'VI',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '7',
794: 1:      'question': 'VII',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '8',
794: 1:      'question': 'VIII',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '9',
794: 1:      'question': 'IX',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '10',
794: 1:      'question': 'X',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '11',
794: 1:      'question': 'XI',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '12',
794: 1:      'question': 'XII',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '13',
794: 1:      'question': 'XIII',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '14',
794: 1:      'question': 'XIV',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '15',
794: 1:      'question': 'XV',
794: 1:      'valid': true
794: 1:    },
794: 1:    {
794: 1:      'answer': '16',
794: 1:      'question': 'XVI',
794: 1:      'valid': true
794: 1:    }
794: 1:  ],
794: 1:  'info': [
794: 1:    '✅f(I) = 1',
794: 1:    '✅f(II) = 2',
794: 1:    '✅f(III) = 3',
794: 1:    '✅f(IV) = 4',
794: 1:    '✅f(V) = 5',
794: 1:    '✅f(VI) = 6',
794: 1:    '✅f(VII) = 7',
794: 1:    '✅f(VIII) = 8',
794: 1:    '✅f(IX) = 9',
794: 1:    '✅f(X) = 10',
794: 1:    '✅f(XI) = 11',
794: 1:    '✅f(XII) = 12',
794: 1:    '✅f(XIII) = 13',
794: 1:    '✅f(XIV) = 14',
794: 1:    '✅f(XV) = 15',
794: 1:    '✅f(XVI) = 16',
794: 1:    '❌f(XVII) = ??? != 17'
794: 1:  ],
794: 1:  'level': 28,
794: 1:  'nextQuestion': 'XVII',
794: 1:  'questions': [
794: 1:    'I',
794: 1:    'II',
794: 1:    'III',
794: 1:    'IV',
794: 1:    'V',
794: 1:    'VI',
794: 1:    'VII',
794: 1:    'VIII',
794: 1:    'IX',
794: 1:    'X',
794: 1:    'XI',
794: 1:    'XII',
794: 1:    'XIII',
794: 1:    'XIV',
794: 1:    'XV',
794: 1:    'XVI',
794: 1:    'XVII'
794: 1:  ]
794: 1:}
794: 1:Scores: 77646
794: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17']')
794: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
795: 1:BoardData {
795: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
795: 1:  'expectedAnswer': '18',
795: 1:  'history': [
795: 1:    {
795: 1:      'answer': '1',
795: 1:      'question': 'I',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '2',
795: 1:      'question': 'II',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '3',
795: 1:      'question': 'III',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '4',
795: 1:      'question': 'IV',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '5',
795: 1:      'question': 'V',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '6',
795: 1:      'question': 'VI',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '7',
795: 1:      'question': 'VII',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '8',
795: 1:      'question': 'VIII',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '9',
795: 1:      'question': 'IX',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '10',
795: 1:      'question': 'X',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '11',
795: 1:      'question': 'XI',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '12',
795: 1:      'question': 'XII',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '13',
795: 1:      'question': 'XIII',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '14',
795: 1:      'question': 'XIV',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '15',
795: 1:      'question': 'XV',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '16',
795: 1:      'question': 'XVI',
795: 1:      'valid': true
795: 1:    },
795: 1:    {
795: 1:      'answer': '17',
795: 1:      'question': 'XVII',
795: 1:      'valid': true
795: 1:    }
795: 1:  ],
795: 1:  'info': [
795: 1:    '✅f(I) = 1',
795: 1:    '✅f(II) = 2',
795: 1:    '✅f(III) = 3',
795: 1:    '✅f(IV) = 4',
795: 1:    '✅f(V) = 5',
795: 1:    '✅f(VI) = 6',
795: 1:    '✅f(VII) = 7',
795: 1:    '✅f(VIII) = 8',
795: 1:    '✅f(IX) = 9',
795: 1:    '✅f(X) = 10',
795: 1:    '✅f(XI) = 11',
795: 1:    '✅f(XII) = 12',
795: 1:    '✅f(XIII) = 13',
795: 1:    '✅f(XIV) = 14',
795: 1:    '✅f(XV) = 15',
795: 1:    '✅f(XVI) = 16',
795: 1:    '✅f(XVII) = 17',
795: 1:    '❌f(XVIII) = ??? != 18'
795: 1:  ],
795: 1:  'level': 28,
795: 1:  'nextQuestion': 'XVIII',
795: 1:  'questions': [
795: 1:    'I',
795: 1:    'II',
795: 1:    'III',
795: 1:    'IV',
795: 1:    'V',
795: 1:    'VI',
795: 1:    'VII',
795: 1:    'VIII',
795: 1:    'IX',
795: 1:    'X',
795: 1:    'XI',
795: 1:    'XII',
795: 1:    'XIII',
795: 1:    'XIV',
795: 1:    'XV',
795: 1:    'XVI',
795: 1:    'XVII',
795: 1:    'XVIII'
795: 1:  ]
795: 1:}
795: 1:Scores: 77657
795: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18']')
795: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
796: 1:BoardData {
796: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
796: 1:  'expectedAnswer': '19',
796: 1:  'history': [
796: 1:    {
796: 1:      'answer': '1',
796: 1:      'question': 'I',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '2',
796: 1:      'question': 'II',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '3',
796: 1:      'question': 'III',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '4',
796: 1:      'question': 'IV',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '5',
796: 1:      'question': 'V',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '6',
796: 1:      'question': 'VI',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '7',
796: 1:      'question': 'VII',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '8',
796: 1:      'question': 'VIII',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '9',
796: 1:      'question': 'IX',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '10',
796: 1:      'question': 'X',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '11',
796: 1:      'question': 'XI',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '12',
796: 1:      'question': 'XII',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '13',
796: 1:      'question': 'XIII',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '14',
796: 1:      'question': 'XIV',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '15',
796: 1:      'question': 'XV',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '16',
796: 1:      'question': 'XVI',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '17',
796: 1:      'question': 'XVII',
796: 1:      'valid': true
796: 1:    },
796: 1:    {
796: 1:      'answer': '18',
796: 1:      'question': 'XVIII',
796: 1:      'valid': true
796: 1:    }
796: 1:  ],
796: 1:  'info': [
796: 1:    '✅f(I) = 1',
796: 1:    '✅f(II) = 2',
796: 1:    '✅f(III) = 3',
796: 1:    '✅f(IV) = 4',
796: 1:    '✅f(V) = 5',
796: 1:    '✅f(VI) = 6',
796: 1:    '✅f(VII) = 7',
796: 1:    '✅f(VIII) = 8',
796: 1:    '✅f(IX) = 9',
796: 1:    '✅f(X) = 10',
796: 1:    '✅f(XI) = 11',
796: 1:    '✅f(XII) = 12',
796: 1:    '✅f(XIII) = 13',
796: 1:    '✅f(XIV) = 14',
796: 1:    '✅f(XV) = 15',
796: 1:    '✅f(XVI) = 16',
796: 1:    '✅f(XVII) = 17',
796: 1:    '✅f(XVIII) = 18',
796: 1:    '❌f(XIX) = ??? != 19'
796: 1:  ],
796: 1:  'level': 28,
796: 1:  'nextQuestion': 'XIX',
796: 1:  'questions': [
796: 1:    'I',
796: 1:    'II',
796: 1:    'III',
796: 1:    'IV',
796: 1:    'V',
796: 1:    'VI',
796: 1:    'VII',
796: 1:    'VIII',
796: 1:    'IX',
796: 1:    'X',
796: 1:    'XI',
796: 1:    'XII',
796: 1:    'XIII',
796: 1:    'XIV',
796: 1:    'XV',
796: 1:    'XVI',
796: 1:    'XVII',
796: 1:    'XVIII',
796: 1:    'XIX'
796: 1:  ]
796: 1:}
796: 1:Scores: 77668
796: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19']')
796: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
797: 1:BoardData {
797: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
797: 1:  'expectedAnswer': '20',
797: 1:  'history': [
797: 1:    {
797: 1:      'answer': '1',
797: 1:      'question': 'I',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '2',
797: 1:      'question': 'II',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '3',
797: 1:      'question': 'III',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '4',
797: 1:      'question': 'IV',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '5',
797: 1:      'question': 'V',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '6',
797: 1:      'question': 'VI',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '7',
797: 1:      'question': 'VII',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '8',
797: 1:      'question': 'VIII',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '9',
797: 1:      'question': 'IX',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '10',
797: 1:      'question': 'X',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '11',
797: 1:      'question': 'XI',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '12',
797: 1:      'question': 'XII',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '13',
797: 1:      'question': 'XIII',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '14',
797: 1:      'question': 'XIV',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '15',
797: 1:      'question': 'XV',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '16',
797: 1:      'question': 'XVI',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '17',
797: 1:      'question': 'XVII',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '18',
797: 1:      'question': 'XVIII',
797: 1:      'valid': true
797: 1:    },
797: 1:    {
797: 1:      'answer': '19',
797: 1:      'question': 'XIX',
797: 1:      'valid': true
797: 1:    }
797: 1:  ],
797: 1:  'info': [
797: 1:    '✅f(I) = 1',
797: 1:    '✅f(II) = 2',
797: 1:    '✅f(III) = 3',
797: 1:    '✅f(IV) = 4',
797: 1:    '✅f(V) = 5',
797: 1:    '✅f(VI) = 6',
797: 1:    '✅f(VII) = 7',
797: 1:    '✅f(VIII) = 8',
797: 1:    '✅f(IX) = 9',
797: 1:    '✅f(X) = 10',
797: 1:    '✅f(XI) = 11',
797: 1:    '✅f(XII) = 12',
797: 1:    '✅f(XIII) = 13',
797: 1:    '✅f(XIV) = 14',
797: 1:    '✅f(XV) = 15',
797: 1:    '✅f(XVI) = 16',
797: 1:    '✅f(XVII) = 17',
797: 1:    '✅f(XVIII) = 18',
797: 1:    '✅f(XIX) = 19',
797: 1:    '❌f(XX) = ??? != 20'
797: 1:  ],
797: 1:  'level': 28,
797: 1:  'nextQuestion': 'XX',
797: 1:  'questions': [
797: 1:    'I',
797: 1:    'II',
797: 1:    'III',
797: 1:    'IV',
797: 1:    'V',
797: 1:    'VI',
797: 1:    'VII',
797: 1:    'VIII',
797: 1:    'IX',
797: 1:    'X',
797: 1:    'XI',
797: 1:    'XII',
797: 1:    'XIII',
797: 1:    'XIV',
797: 1:    'XV',
797: 1:    'XVI',
797: 1:    'XVII',
797: 1:    'XVIII',
797: 1:    'XIX',
797: 1:    'XX'
797: 1:  ]
797: 1:}
797: 1:Scores: 77679
797: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20']')
797: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
798: 1:BoardData {
798: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
798: 1:  'expectedAnswer': '30',
798: 1:  'history': [
798: 1:    {
798: 1:      'answer': '1',
798: 1:      'question': 'I',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '2',
798: 1:      'question': 'II',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '3',
798: 1:      'question': 'III',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '4',
798: 1:      'question': 'IV',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '5',
798: 1:      'question': 'V',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '6',
798: 1:      'question': 'VI',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '7',
798: 1:      'question': 'VII',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '8',
798: 1:      'question': 'VIII',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '9',
798: 1:      'question': 'IX',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '10',
798: 1:      'question': 'X',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '11',
798: 1:      'question': 'XI',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '12',
798: 1:      'question': 'XII',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '13',
798: 1:      'question': 'XIII',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '14',
798: 1:      'question': 'XIV',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '15',
798: 1:      'question': 'XV',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '16',
798: 1:      'question': 'XVI',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '17',
798: 1:      'question': 'XVII',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '18',
798: 1:      'question': 'XVIII',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '19',
798: 1:      'question': 'XIX',
798: 1:      'valid': true
798: 1:    },
798: 1:    {
798: 1:      'answer': '20',
798: 1:      'question': 'XX',
798: 1:      'valid': true
798: 1:    }
798: 1:  ],
798: 1:  'info': [
798: 1:    '✅f(I) = 1',
798: 1:    '✅f(II) = 2',
798: 1:    '✅f(III) = 3',
798: 1:    '✅f(IV) = 4',
798: 1:    '✅f(V) = 5',
798: 1:    '✅f(VI) = 6',
798: 1:    '✅f(VII) = 7',
798: 1:    '✅f(VIII) = 8',
798: 1:    '✅f(IX) = 9',
798: 1:    '✅f(X) = 10',
798: 1:    '✅f(XI) = 11',
798: 1:    '✅f(XII) = 12',
798: 1:    '✅f(XIII) = 13',
798: 1:    '✅f(XIV) = 14',
798: 1:    '✅f(XV) = 15',
798: 1:    '✅f(XVI) = 16',
798: 1:    '✅f(XVII) = 17',
798: 1:    '✅f(XVIII) = 18',
798: 1:    '✅f(XIX) = 19',
798: 1:    '✅f(XX) = 20',
798: 1:    '❌f(XXX) = ??? != 30'
798: 1:  ],
798: 1:  'level': 28,
798: 1:  'nextQuestion': 'XXX',
798: 1:  'questions': [
798: 1:    'I',
798: 1:    'II',
798: 1:    'III',
798: 1:    'IV',
798: 1:    'V',
798: 1:    'VI',
798: 1:    'VII',
798: 1:    'VIII',
798: 1:    'IX',
798: 1:    'X',
798: 1:    'XI',
798: 1:    'XII',
798: 1:    'XIII',
798: 1:    'XIV',
798: 1:    'XV',
798: 1:    'XVI',
798: 1:    'XVII',
798: 1:    'XVIII',
798: 1:    'XIX',
798: 1:    'XX',
798: 1:    'XXX'
798: 1:  ]
798: 1:}
798: 1:Scores: 77690
798: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30']')
798: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
799: 1:BoardData {
799: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
799: 1:  'expectedAnswer': '35',
799: 1:  'history': [
799: 1:    {
799: 1:      'answer': '1',
799: 1:      'question': 'I',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '2',
799: 1:      'question': 'II',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '3',
799: 1:      'question': 'III',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '4',
799: 1:      'question': 'IV',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '5',
799: 1:      'question': 'V',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '6',
799: 1:      'question': 'VI',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '7',
799: 1:      'question': 'VII',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '8',
799: 1:      'question': 'VIII',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '9',
799: 1:      'question': 'IX',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '10',
799: 1:      'question': 'X',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '11',
799: 1:      'question': 'XI',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '12',
799: 1:      'question': 'XII',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '13',
799: 1:      'question': 'XIII',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '14',
799: 1:      'question': 'XIV',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '15',
799: 1:      'question': 'XV',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '16',
799: 1:      'question': 'XVI',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '17',
799: 1:      'question': 'XVII',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '18',
799: 1:      'question': 'XVIII',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '19',
799: 1:      'question': 'XIX',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '20',
799: 1:      'question': 'XX',
799: 1:      'valid': true
799: 1:    },
799: 1:    {
799: 1:      'answer': '30',
799: 1:      'question': 'XXX',
799: 1:      'valid': true
799: 1:    }
799: 1:  ],
799: 1:  'info': [
799: 1:    '✅f(I) = 1',
799: 1:    '✅f(II) = 2',
799: 1:    '✅f(III) = 3',
799: 1:    '✅f(IV) = 4',
799: 1:    '✅f(V) = 5',
799: 1:    '✅f(VI) = 6',
799: 1:    '✅f(VII) = 7',
799: 1:    '✅f(VIII) = 8',
799: 1:    '✅f(IX) = 9',
799: 1:    '✅f(X) = 10',
799: 1:    '✅f(XI) = 11',
799: 1:    '✅f(XII) = 12',
799: 1:    '✅f(XIII) = 13',
799: 1:    '✅f(XIV) = 14',
799: 1:    '✅f(XV) = 15',
799: 1:    '✅f(XVI) = 16',
799: 1:    '✅f(XVII) = 17',
799: 1:    '✅f(XVIII) = 18',
799: 1:    '✅f(XIX) = 19',
799: 1:    '✅f(XX) = 20',
799: 1:    '✅f(XXX) = 30',
799: 1:    '❌f(XXXV) = ??? != 35'
799: 1:  ],
799: 1:  'level': 28,
799: 1:  'nextQuestion': 'XXXV',
799: 1:  'questions': [
799: 1:    'I',
799: 1:    'II',
799: 1:    'III',
799: 1:    'IV',
799: 1:    'V',
799: 1:    'VI',
799: 1:    'VII',
799: 1:    'VIII',
799: 1:    'IX',
799: 1:    'X',
799: 1:    'XI',
799: 1:    'XII',
799: 1:    'XIII',
799: 1:    'XIV',
799: 1:    'XV',
799: 1:    'XVI',
799: 1:    'XVII',
799: 1:    'XVIII',
799: 1:    'XIX',
799: 1:    'XX',
799: 1:    'XXX',
799: 1:    'XXXV'
799: 1:  ]
799: 1:}
799: 1:Scores: 77701
799: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35']')
799: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
800: 1:BoardData {
800: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
800: 1:  'expectedAnswer': '36',
800: 1:  'history': [
800: 1:    {
800: 1:      'answer': '1',
800: 1:      'question': 'I',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '2',
800: 1:      'question': 'II',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '3',
800: 1:      'question': 'III',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '4',
800: 1:      'question': 'IV',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '5',
800: 1:      'question': 'V',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '6',
800: 1:      'question': 'VI',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '7',
800: 1:      'question': 'VII',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '8',
800: 1:      'question': 'VIII',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '9',
800: 1:      'question': 'IX',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '10',
800: 1:      'question': 'X',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '11',
800: 1:      'question': 'XI',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '12',
800: 1:      'question': 'XII',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '13',
800: 1:      'question': 'XIII',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '14',
800: 1:      'question': 'XIV',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '15',
800: 1:      'question': 'XV',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '16',
800: 1:      'question': 'XVI',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '17',
800: 1:      'question': 'XVII',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '18',
800: 1:      'question': 'XVIII',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '19',
800: 1:      'question': 'XIX',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '20',
800: 1:      'question': 'XX',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '30',
800: 1:      'question': 'XXX',
800: 1:      'valid': true
800: 1:    },
800: 1:    {
800: 1:      'answer': '35',
800: 1:      'question': 'XXXV',
800: 1:      'valid': true
800: 1:    }
800: 1:  ],
800: 1:  'info': [
800: 1:    '✅f(I) = 1',
800: 1:    '✅f(II) = 2',
800: 1:    '✅f(III) = 3',
800: 1:    '✅f(IV) = 4',
800: 1:    '✅f(V) = 5',
800: 1:    '✅f(VI) = 6',
800: 1:    '✅f(VII) = 7',
800: 1:    '✅f(VIII) = 8',
800: 1:    '✅f(IX) = 9',
800: 1:    '✅f(X) = 10',
800: 1:    '✅f(XI) = 11',
800: 1:    '✅f(XII) = 12',
800: 1:    '✅f(XIII) = 13',
800: 1:    '✅f(XIV) = 14',
800: 1:    '✅f(XV) = 15',
800: 1:    '✅f(XVI) = 16',
800: 1:    '✅f(XVII) = 17',
800: 1:    '✅f(XVIII) = 18',
800: 1:    '✅f(XIX) = 19',
800: 1:    '✅f(XX) = 20',
800: 1:    '✅f(XXX) = 30',
800: 1:    '✅f(XXXV) = 35',
800: 1:    '❌f(XXXVI) = ??? != 36'
800: 1:  ],
800: 1:  'level': 28,
800: 1:  'nextQuestion': 'XXXVI',
800: 1:  'questions': [
800: 1:    'I',
800: 1:    'II',
800: 1:    'III',
800: 1:    'IV',
800: 1:    'V',
800: 1:    'VI',
800: 1:    'VII',
800: 1:    'VIII',
800: 1:    'IX',
800: 1:    'X',
800: 1:    'XI',
800: 1:    'XII',
800: 1:    'XIII',
800: 1:    'XIV',
800: 1:    'XV',
800: 1:    'XVI',
800: 1:    'XVII',
800: 1:    'XVIII',
800: 1:    'XIX',
800: 1:    'XX',
800: 1:    'XXX',
800: 1:    'XXXV',
800: 1:    'XXXVI'
800: 1:  ]
800: 1:}
800: 1:Scores: 77712
800: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36']')
800: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
801: 1:BoardData {
801: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
801: 1:  'expectedAnswer': '46',
801: 1:  'history': [
801: 1:    {
801: 1:      'answer': '1',
801: 1:      'question': 'I',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '2',
801: 1:      'question': 'II',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '3',
801: 1:      'question': 'III',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '4',
801: 1:      'question': 'IV',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '5',
801: 1:      'question': 'V',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '6',
801: 1:      'question': 'VI',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '7',
801: 1:      'question': 'VII',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '8',
801: 1:      'question': 'VIII',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '9',
801: 1:      'question': 'IX',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '10',
801: 1:      'question': 'X',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '11',
801: 1:      'question': 'XI',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '12',
801: 1:      'question': 'XII',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '13',
801: 1:      'question': 'XIII',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '14',
801: 1:      'question': 'XIV',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '15',
801: 1:      'question': 'XV',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '16',
801: 1:      'question': 'XVI',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '17',
801: 1:      'question': 'XVII',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '18',
801: 1:      'question': 'XVIII',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '19',
801: 1:      'question': 'XIX',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '20',
801: 1:      'question': 'XX',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '30',
801: 1:      'question': 'XXX',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '35',
801: 1:      'question': 'XXXV',
801: 1:      'valid': true
801: 1:    },
801: 1:    {
801: 1:      'answer': '36',
801: 1:      'question': 'XXXVI',
801: 1:      'valid': true
801: 1:    }
801: 1:  ],
801: 1:  'info': [
801: 1:    '✅f(I) = 1',
801: 1:    '✅f(II) = 2',
801: 1:    '✅f(III) = 3',
801: 1:    '✅f(IV) = 4',
801: 1:    '✅f(V) = 5',
801: 1:    '✅f(VI) = 6',
801: 1:    '✅f(VII) = 7',
801: 1:    '✅f(VIII) = 8',
801: 1:    '✅f(IX) = 9',
801: 1:    '✅f(X) = 10',
801: 1:    '✅f(XI) = 11',
801: 1:    '✅f(XII) = 12',
801: 1:    '✅f(XIII) = 13',
801: 1:    '✅f(XIV) = 14',
801: 1:    '✅f(XV) = 15',
801: 1:    '✅f(XVI) = 16',
801: 1:    '✅f(XVII) = 17',
801: 1:    '✅f(XVIII) = 18',
801: 1:    '✅f(XIX) = 19',
801: 1:    '✅f(XX) = 20',
801: 1:    '✅f(XXX) = 30',
801: 1:    '✅f(XXXV) = 35',
801: 1:    '✅f(XXXVI) = 36',
801: 1:    '❌f(XLVI) = ??? != 46'
801: 1:  ],
801: 1:  'level': 28,
801: 1:  'nextQuestion': 'XLVI',
801: 1:  'questions': [
801: 1:    'I',
801: 1:    'II',
801: 1:    'III',
801: 1:    'IV',
801: 1:    'V',
801: 1:    'VI',
801: 1:    'VII',
801: 1:    'VIII',
801: 1:    'IX',
801: 1:    'X',
801: 1:    'XI',
801: 1:    'XII',
801: 1:    'XIII',
801: 1:    'XIV',
801: 1:    'XV',
801: 1:    'XVI',
801: 1:    'XVII',
801: 1:    'XVIII',
801: 1:    'XIX',
801: 1:    'XX',
801: 1:    'XXX',
801: 1:    'XXXV',
801: 1:    'XXXVI',
801: 1:    'XLVI'
801: 1:  ]
801: 1:}
801: 1:Scores: 77723
801: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36', '46']')
801: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
802: 1:BoardData {
802: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
802: 1:  'expectedAnswer': '57',
802: 1:  'history': [
802: 1:    {
802: 1:      'answer': '1',
802: 1:      'question': 'I',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '2',
802: 1:      'question': 'II',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '3',
802: 1:      'question': 'III',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '4',
802: 1:      'question': 'IV',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '5',
802: 1:      'question': 'V',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '6',
802: 1:      'question': 'VI',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '7',
802: 1:      'question': 'VII',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '8',
802: 1:      'question': 'VIII',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '9',
802: 1:      'question': 'IX',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '10',
802: 1:      'question': 'X',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '11',
802: 1:      'question': 'XI',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '12',
802: 1:      'question': 'XII',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '13',
802: 1:      'question': 'XIII',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '14',
802: 1:      'question': 'XIV',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '15',
802: 1:      'question': 'XV',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '16',
802: 1:      'question': 'XVI',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '17',
802: 1:      'question': 'XVII',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '18',
802: 1:      'question': 'XVIII',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '19',
802: 1:      'question': 'XIX',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '20',
802: 1:      'question': 'XX',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '30',
802: 1:      'question': 'XXX',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '35',
802: 1:      'question': 'XXXV',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '36',
802: 1:      'question': 'XXXVI',
802: 1:      'valid': true
802: 1:    },
802: 1:    {
802: 1:      'answer': '46',
802: 1:      'question': 'XLVI',
802: 1:      'valid': true
802: 1:    }
802: 1:  ],
802: 1:  'info': [
802: 1:    '✅f(I) = 1',
802: 1:    '✅f(II) = 2',
802: 1:    '✅f(III) = 3',
802: 1:    '✅f(IV) = 4',
802: 1:    '✅f(V) = 5',
802: 1:    '✅f(VI) = 6',
802: 1:    '✅f(VII) = 7',
802: 1:    '✅f(VIII) = 8',
802: 1:    '✅f(IX) = 9',
802: 1:    '✅f(X) = 10',
802: 1:    '✅f(XI) = 11',
802: 1:    '✅f(XII) = 12',
802: 1:    '✅f(XIII) = 13',
802: 1:    '✅f(XIV) = 14',
802: 1:    '✅f(XV) = 15',
802: 1:    '✅f(XVI) = 16',
802: 1:    '✅f(XVII) = 17',
802: 1:    '✅f(XVIII) = 18',
802: 1:    '✅f(XIX) = 19',
802: 1:    '✅f(XX) = 20',
802: 1:    '✅f(XXX) = 30',
802: 1:    '✅f(XXXV) = 35',
802: 1:    '✅f(XXXVI) = 36',
802: 1:    '✅f(XLVI) = 46',
802: 1:    '❌f(LVII) = ??? != 57'
802: 1:  ],
802: 1:  'level': 28,
802: 1:  'nextQuestion': 'LVII',
802: 1:  'questions': [
802: 1:    'I',
802: 1:    'II',
802: 1:    'III',
802: 1:    'IV',
802: 1:    'V',
802: 1:    'VI',
802: 1:    'VII',
802: 1:    'VIII',
802: 1:    'IX',
802: 1:    'X',
802: 1:    'XI',
802: 1:    'XII',
802: 1:    'XIII',
802: 1:    'XIV',
802: 1:    'XV',
802: 1:    'XVI',
802: 1:    'XVII',
802: 1:    'XVIII',
802: 1:    'XIX',
802: 1:    'XX',
802: 1:    'XXX',
802: 1:    'XXXV',
802: 1:    'XXXVI',
802: 1:    'XLVI',
802: 1:    'LVII'
802: 1:  ]
802: 1:}
802: 1:Scores: 77734
802: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36', '46', '57']')
802: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
803: 1:BoardData {
803: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
803: 1:  'expectedAnswer': '67',
803: 1:  'history': [
803: 1:    {
803: 1:      'answer': '1',
803: 1:      'question': 'I',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '2',
803: 1:      'question': 'II',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '3',
803: 1:      'question': 'III',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '4',
803: 1:      'question': 'IV',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '5',
803: 1:      'question': 'V',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '6',
803: 1:      'question': 'VI',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '7',
803: 1:      'question': 'VII',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '8',
803: 1:      'question': 'VIII',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '9',
803: 1:      'question': 'IX',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '10',
803: 1:      'question': 'X',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '11',
803: 1:      'question': 'XI',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '12',
803: 1:      'question': 'XII',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '13',
803: 1:      'question': 'XIII',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '14',
803: 1:      'question': 'XIV',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '15',
803: 1:      'question': 'XV',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '16',
803: 1:      'question': 'XVI',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '17',
803: 1:      'question': 'XVII',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '18',
803: 1:      'question': 'XVIII',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '19',
803: 1:      'question': 'XIX',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '20',
803: 1:      'question': 'XX',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '30',
803: 1:      'question': 'XXX',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '35',
803: 1:      'question': 'XXXV',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '36',
803: 1:      'question': 'XXXVI',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '46',
803: 1:      'question': 'XLVI',
803: 1:      'valid': true
803: 1:    },
803: 1:    {
803: 1:      'answer': '57',
803: 1:      'question': 'LVII',
803: 1:      'valid': true
803: 1:    }
803: 1:  ],
803: 1:  'info': [
803: 1:    '✅f(I) = 1',
803: 1:    '✅f(II) = 2',
803: 1:    '✅f(III) = 3',
803: 1:    '✅f(IV) = 4',
803: 1:    '✅f(V) = 5',
803: 1:    '✅f(VI) = 6',
803: 1:    '✅f(VII) = 7',
803: 1:    '✅f(VIII) = 8',
803: 1:    '✅f(IX) = 9',
803: 1:    '✅f(X) = 10',
803: 1:    '✅f(XI) = 11',
803: 1:    '✅f(XII) = 12',
803: 1:    '✅f(XIII) = 13',
803: 1:    '✅f(XIV) = 14',
803: 1:    '✅f(XV) = 15',
803: 1:    '✅f(XVI) = 16',
803: 1:    '✅f(XVII) = 17',
803: 1:    '✅f(XVIII) = 18',
803: 1:    '✅f(XIX) = 19',
803: 1:    '✅f(XX) = 20',
803: 1:    '✅f(XXX) = 30',
803: 1:    '✅f(XXXV) = 35',
803: 1:    '✅f(XXXVI) = 36',
803: 1:    '✅f(XLVI) = 46',
803: 1:    '✅f(LVII) = 57',
803: 1:    '❌f(LXVII) = ??? != 67'
803: 1:  ],
803: 1:  'level': 28,
803: 1:  'nextQuestion': 'LXVII',
803: 1:  'questions': [
803: 1:    'I',
803: 1:    'II',
803: 1:    'III',
803: 1:    'IV',
803: 1:    'V',
803: 1:    'VI',
803: 1:    'VII',
803: 1:    'VIII',
803: 1:    'IX',
803: 1:    'X',
803: 1:    'XI',
803: 1:    'XII',
803: 1:    'XIII',
803: 1:    'XIV',
803: 1:    'XV',
803: 1:    'XVI',
803: 1:    'XVII',
803: 1:    'XVIII',
803: 1:    'XIX',
803: 1:    'XX',
803: 1:    'XXX',
803: 1:    'XXXV',
803: 1:    'XXXVI',
803: 1:    'XLVI',
803: 1:    'LVII',
803: 1:    'LXVII'
803: 1:  ]
803: 1:}
803: 1:Scores: 77745
803: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36', '46', '57', '67']')
803: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
804: 1:BoardData {
804: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
804: 1:  'expectedAnswer': '89',
804: 1:  'history': [
804: 1:    {
804: 1:      'answer': '1',
804: 1:      'question': 'I',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '2',
804: 1:      'question': 'II',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '3',
804: 1:      'question': 'III',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '4',
804: 1:      'question': 'IV',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '5',
804: 1:      'question': 'V',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '6',
804: 1:      'question': 'VI',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '7',
804: 1:      'question': 'VII',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '8',
804: 1:      'question': 'VIII',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '9',
804: 1:      'question': 'IX',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '10',
804: 1:      'question': 'X',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '11',
804: 1:      'question': 'XI',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '12',
804: 1:      'question': 'XII',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '13',
804: 1:      'question': 'XIII',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '14',
804: 1:      'question': 'XIV',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '15',
804: 1:      'question': 'XV',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '16',
804: 1:      'question': 'XVI',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '17',
804: 1:      'question': 'XVII',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '18',
804: 1:      'question': 'XVIII',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '19',
804: 1:      'question': 'XIX',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '20',
804: 1:      'question': 'XX',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '30',
804: 1:      'question': 'XXX',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '35',
804: 1:      'question': 'XXXV',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '36',
804: 1:      'question': 'XXXVI',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '46',
804: 1:      'question': 'XLVI',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '57',
804: 1:      'question': 'LVII',
804: 1:      'valid': true
804: 1:    },
804: 1:    {
804: 1:      'answer': '67',
804: 1:      'question': 'LXVII',
804: 1:      'valid': true
804: 1:    }
804: 1:  ],
804: 1:  'info': [
804: 1:    '✅f(I) = 1',
804: 1:    '✅f(II) = 2',
804: 1:    '✅f(III) = 3',
804: 1:    '✅f(IV) = 4',
804: 1:    '✅f(V) = 5',
804: 1:    '✅f(VI) = 6',
804: 1:    '✅f(VII) = 7',
804: 1:    '✅f(VIII) = 8',
804: 1:    '✅f(IX) = 9',
804: 1:    '✅f(X) = 10',
804: 1:    '✅f(XI) = 11',
804: 1:    '✅f(XII) = 12',
804: 1:    '✅f(XIII) = 13',
804: 1:    '✅f(XIV) = 14',
804: 1:    '✅f(XV) = 15',
804: 1:    '✅f(XVI) = 16',
804: 1:    '✅f(XVII) = 17',
804: 1:    '✅f(XVIII) = 18',
804: 1:    '✅f(XIX) = 19',
804: 1:    '✅f(XX) = 20',
804: 1:    '✅f(XXX) = 30',
804: 1:    '✅f(XXXV) = 35',
804: 1:    '✅f(XXXVI) = 36',
804: 1:    '✅f(XLVI) = 46',
804: 1:    '✅f(LVII) = 57',
804: 1:    '✅f(LXVII) = 67',
804: 1:    '❌f(LXXXIX) = ??? != 89'
804: 1:  ],
804: 1:  'level': 28,
804: 1:  'nextQuestion': 'LXXXIX',
804: 1:  'questions': [
804: 1:    'I',
804: 1:    'II',
804: 1:    'III',
804: 1:    'IV',
804: 1:    'V',
804: 1:    'VI',
804: 1:    'VII',
804: 1:    'VIII',
804: 1:    'IX',
804: 1:    'X',
804: 1:    'XI',
804: 1:    'XII',
804: 1:    'XIII',
804: 1:    'XIV',
804: 1:    'XV',
804: 1:    'XVI',
804: 1:    'XVII',
804: 1:    'XVIII',
804: 1:    'XIX',
804: 1:    'XX',
804: 1:    'XXX',
804: 1:    'XXXV',
804: 1:    'XXXVI',
804: 1:    'XLVI',
804: 1:    'LVII',
804: 1:    'LXVII',
804: 1:    'LXXXIX'
804: 1:  ]
804: 1:}
804: 1:Scores: 77756
804: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36', '46', '57', '67', '89']')
804: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
805: 1:BoardData {
805: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
805: 1:  'expectedAnswer': '123',
805: 1:  'history': [
805: 1:    {
805: 1:      'answer': '1',
805: 1:      'question': 'I',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '2',
805: 1:      'question': 'II',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '3',
805: 1:      'question': 'III',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '4',
805: 1:      'question': 'IV',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '5',
805: 1:      'question': 'V',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '6',
805: 1:      'question': 'VI',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '7',
805: 1:      'question': 'VII',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '8',
805: 1:      'question': 'VIII',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '9',
805: 1:      'question': 'IX',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '10',
805: 1:      'question': 'X',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '11',
805: 1:      'question': 'XI',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '12',
805: 1:      'question': 'XII',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '13',
805: 1:      'question': 'XIII',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '14',
805: 1:      'question': 'XIV',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '15',
805: 1:      'question': 'XV',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '16',
805: 1:      'question': 'XVI',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '17',
805: 1:      'question': 'XVII',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '18',
805: 1:      'question': 'XVIII',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '19',
805: 1:      'question': 'XIX',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '20',
805: 1:      'question': 'XX',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '30',
805: 1:      'question': 'XXX',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '35',
805: 1:      'question': 'XXXV',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '36',
805: 1:      'question': 'XXXVI',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '46',
805: 1:      'question': 'XLVI',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '57',
805: 1:      'question': 'LVII',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '67',
805: 1:      'question': 'LXVII',
805: 1:      'valid': true
805: 1:    },
805: 1:    {
805: 1:      'answer': '89',
805: 1:      'question': 'LXXXIX',
805: 1:      'valid': true
805: 1:    }
805: 1:  ],
805: 1:  'info': [
805: 1:    '✅f(I) = 1',
805: 1:    '✅f(II) = 2',
805: 1:    '✅f(III) = 3',
805: 1:    '✅f(IV) = 4',
805: 1:    '✅f(V) = 5',
805: 1:    '✅f(VI) = 6',
805: 1:    '✅f(VII) = 7',
805: 1:    '✅f(VIII) = 8',
805: 1:    '✅f(IX) = 9',
805: 1:    '✅f(X) = 10',
805: 1:    '✅f(XI) = 11',
805: 1:    '✅f(XII) = 12',
805: 1:    '✅f(XIII) = 13',
805: 1:    '✅f(XIV) = 14',
805: 1:    '✅f(XV) = 15',
805: 1:    '✅f(XVI) = 16',
805: 1:    '✅f(XVII) = 17',
805: 1:    '✅f(XVIII) = 18',
805: 1:    '✅f(XIX) = 19',
805: 1:    '✅f(XX) = 20',
805: 1:    '✅f(XXX) = 30',
805: 1:    '✅f(XXXV) = 35',
805: 1:    '✅f(XXXVI) = 36',
805: 1:    '✅f(XLVI) = 46',
805: 1:    '✅f(LVII) = 57',
805: 1:    '✅f(LXVII) = 67',
805: 1:    '✅f(LXXXIX) = 89',
805: 1:    '❌f(CXXIII) = ??? != 123'
805: 1:  ],
805: 1:  'level': 28,
805: 1:  'nextQuestion': 'CXXIII',
805: 1:  'questions': [
805: 1:    'I',
805: 1:    'II',
805: 1:    'III',
805: 1:    'IV',
805: 1:    'V',
805: 1:    'VI',
805: 1:    'VII',
805: 1:    'VIII',
805: 1:    'IX',
805: 1:    'X',
805: 1:    'XI',
805: 1:    'XII',
805: 1:    'XIII',
805: 1:    'XIV',
805: 1:    'XV',
805: 1:    'XVI',
805: 1:    'XVII',
805: 1:    'XVIII',
805: 1:    'XIX',
805: 1:    'XX',
805: 1:    'XXX',
805: 1:    'XXXV',
805: 1:    'XXXVI',
805: 1:    'XLVI',
805: 1:    'LVII',
805: 1:    'LXVII',
805: 1:    'LXXXIX',
805: 1:    'CXXIII'
805: 1:  ]
805: 1:}
805: 1:Scores: 77767
805: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36', '46', '57', '67', '89', '123']')
805: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
806: 1:BoardData {
806: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
806: 1:  'expectedAnswer': '234',
806: 1:  'history': [
806: 1:    {
806: 1:      'answer': '1',
806: 1:      'question': 'I',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '2',
806: 1:      'question': 'II',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '3',
806: 1:      'question': 'III',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '4',
806: 1:      'question': 'IV',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '5',
806: 1:      'question': 'V',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '6',
806: 1:      'question': 'VI',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '7',
806: 1:      'question': 'VII',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '8',
806: 1:      'question': 'VIII',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '9',
806: 1:      'question': 'IX',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '10',
806: 1:      'question': 'X',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '11',
806: 1:      'question': 'XI',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '12',
806: 1:      'question': 'XII',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '13',
806: 1:      'question': 'XIII',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '14',
806: 1:      'question': 'XIV',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '15',
806: 1:      'question': 'XV',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '16',
806: 1:      'question': 'XVI',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '17',
806: 1:      'question': 'XVII',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '18',
806: 1:      'question': 'XVIII',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '19',
806: 1:      'question': 'XIX',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '20',
806: 1:      'question': 'XX',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '30',
806: 1:      'question': 'XXX',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '35',
806: 1:      'question': 'XXXV',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '36',
806: 1:      'question': 'XXXVI',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '46',
806: 1:      'question': 'XLVI',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '57',
806: 1:      'question': 'LVII',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '67',
806: 1:      'question': 'LXVII',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '89',
806: 1:      'question': 'LXXXIX',
806: 1:      'valid': true
806: 1:    },
806: 1:    {
806: 1:      'answer': '123',
806: 1:      'question': 'CXXIII',
806: 1:      'valid': true
806: 1:    }
806: 1:  ],
806: 1:  'info': [
806: 1:    '✅f(I) = 1',
806: 1:    '✅f(II) = 2',
806: 1:    '✅f(III) = 3',
806: 1:    '✅f(IV) = 4',
806: 1:    '✅f(V) = 5',
806: 1:    '✅f(VI) = 6',
806: 1:    '✅f(VII) = 7',
806: 1:    '✅f(VIII) = 8',
806: 1:    '✅f(IX) = 9',
806: 1:    '✅f(X) = 10',
806: 1:    '✅f(XI) = 11',
806: 1:    '✅f(XII) = 12',
806: 1:    '✅f(XIII) = 13',
806: 1:    '✅f(XIV) = 14',
806: 1:    '✅f(XV) = 15',
806: 1:    '✅f(XVI) = 16',
806: 1:    '✅f(XVII) = 17',
806: 1:    '✅f(XVIII) = 18',
806: 1:    '✅f(XIX) = 19',
806: 1:    '✅f(XX) = 20',
806: 1:    '✅f(XXX) = 30',
806: 1:    '✅f(XXXV) = 35',
806: 1:    '✅f(XXXVI) = 36',
806: 1:    '✅f(XLVI) = 46',
806: 1:    '✅f(LVII) = 57',
806: 1:    '✅f(LXVII) = 67',
806: 1:    '✅f(LXXXIX) = 89',
806: 1:    '✅f(CXXIII) = 123',
806: 1:    '❌f(CCXXXIV) = ??? != 234'
806: 1:  ],
806: 1:  'level': 28,
806: 1:  'nextQuestion': 'CCXXXIV',
806: 1:  'questions': [
806: 1:    'I',
806: 1:    'II',
806: 1:    'III',
806: 1:    'IV',
806: 1:    'V',
806: 1:    'VI',
806: 1:    'VII',
806: 1:    'VIII',
806: 1:    'IX',
806: 1:    'X',
806: 1:    'XI',
806: 1:    'XII',
806: 1:    'XIII',
806: 1:    'XIV',
806: 1:    'XV',
806: 1:    'XVI',
806: 1:    'XVII',
806: 1:    'XVIII',
806: 1:    'XIX',
806: 1:    'XX',
806: 1:    'XXX',
806: 1:    'XXXV',
806: 1:    'XXXVI',
806: 1:    'XLVI',
806: 1:    'LVII',
806: 1:    'LXVII',
806: 1:    'LXXXIX',
806: 1:    'CXXIII',
806: 1:    'CCXXXIV'
806: 1:  ]
806: 1:}
806: 1:Scores: 77778
806: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36', '46', '57', '67', '89', '123', '234']')
806: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
807: 1:BoardData {
807: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
807: 1:  'expectedAnswer': '345',
807: 1:  'history': [
807: 1:    {
807: 1:      'answer': '1',
807: 1:      'question': 'I',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '2',
807: 1:      'question': 'II',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '3',
807: 1:      'question': 'III',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '4',
807: 1:      'question': 'IV',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '5',
807: 1:      'question': 'V',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '6',
807: 1:      'question': 'VI',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '7',
807: 1:      'question': 'VII',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '8',
807: 1:      'question': 'VIII',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '9',
807: 1:      'question': 'IX',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '10',
807: 1:      'question': 'X',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '11',
807: 1:      'question': 'XI',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '12',
807: 1:      'question': 'XII',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '13',
807: 1:      'question': 'XIII',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '14',
807: 1:      'question': 'XIV',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '15',
807: 1:      'question': 'XV',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '16',
807: 1:      'question': 'XVI',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '17',
807: 1:      'question': 'XVII',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '18',
807: 1:      'question': 'XVIII',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '19',
807: 1:      'question': 'XIX',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '20',
807: 1:      'question': 'XX',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '30',
807: 1:      'question': 'XXX',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '35',
807: 1:      'question': 'XXXV',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '36',
807: 1:      'question': 'XXXVI',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '46',
807: 1:      'question': 'XLVI',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '57',
807: 1:      'question': 'LVII',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '67',
807: 1:      'question': 'LXVII',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '89',
807: 1:      'question': 'LXXXIX',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '123',
807: 1:      'question': 'CXXIII',
807: 1:      'valid': true
807: 1:    },
807: 1:    {
807: 1:      'answer': '234',
807: 1:      'question': 'CCXXXIV',
807: 1:      'valid': true
807: 1:    }
807: 1:  ],
807: 1:  'info': [
807: 1:    '✅f(I) = 1',
807: 1:    '✅f(II) = 2',
807: 1:    '✅f(III) = 3',
807: 1:    '✅f(IV) = 4',
807: 1:    '✅f(V) = 5',
807: 1:    '✅f(VI) = 6',
807: 1:    '✅f(VII) = 7',
807: 1:    '✅f(VIII) = 8',
807: 1:    '✅f(IX) = 9',
807: 1:    '✅f(X) = 10',
807: 1:    '✅f(XI) = 11',
807: 1:    '✅f(XII) = 12',
807: 1:    '✅f(XIII) = 13',
807: 1:    '✅f(XIV) = 14',
807: 1:    '✅f(XV) = 15',
807: 1:    '✅f(XVI) = 16',
807: 1:    '✅f(XVII) = 17',
807: 1:    '✅f(XVIII) = 18',
807: 1:    '✅f(XIX) = 19',
807: 1:    '✅f(XX) = 20',
807: 1:    '✅f(XXX) = 30',
807: 1:    '✅f(XXXV) = 35',
807: 1:    '✅f(XXXVI) = 36',
807: 1:    '✅f(XLVI) = 46',
807: 1:    '✅f(LVII) = 57',
807: 1:    '✅f(LXVII) = 67',
807: 1:    '✅f(LXXXIX) = 89',
807: 1:    '✅f(CXXIII) = 123',
807: 1:    '✅f(CCXXXIV) = 234',
807: 1:    '❌f(CCCXLV) = ??? != 345'
807: 1:  ],
807: 1:  'level': 28,
807: 1:  'nextQuestion': 'CCCXLV',
807: 1:  'questions': [
807: 1:    'I',
807: 1:    'II',
807: 1:    'III',
807: 1:    'IV',
807: 1:    'V',
807: 1:    'VI',
807: 1:    'VII',
807: 1:    'VIII',
807: 1:    'IX',
807: 1:    'X',
807: 1:    'XI',
807: 1:    'XII',
807: 1:    'XIII',
807: 1:    'XIV',
807: 1:    'XV',
807: 1:    'XVI',
807: 1:    'XVII',
807: 1:    'XVIII',
807: 1:    'XIX',
807: 1:    'XX',
807: 1:    'XXX',
807: 1:    'XXXV',
807: 1:    'XXXVI',
807: 1:    'XLVI',
807: 1:    'LVII',
807: 1:    'LXVII',
807: 1:    'LXXXIX',
807: 1:    'CXXIII',
807: 1:    'CCXXXIV',
807: 1:    'CCCXLV'
807: 1:  ]
807: 1:}
807: 1:Scores: 77789
807: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36', '46', '57', '67', '89', '123', '234', '345']')
807: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
808: 1:BoardData {
808: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
808: 1:  'expectedAnswer': '456',
808: 1:  'history': [
808: 1:    {
808: 1:      'answer': '1',
808: 1:      'question': 'I',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '2',
808: 1:      'question': 'II',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '3',
808: 1:      'question': 'III',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '4',
808: 1:      'question': 'IV',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '5',
808: 1:      'question': 'V',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '6',
808: 1:      'question': 'VI',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '7',
808: 1:      'question': 'VII',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '8',
808: 1:      'question': 'VIII',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '9',
808: 1:      'question': 'IX',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '10',
808: 1:      'question': 'X',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '11',
808: 1:      'question': 'XI',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '12',
808: 1:      'question': 'XII',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '13',
808: 1:      'question': 'XIII',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '14',
808: 1:      'question': 'XIV',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '15',
808: 1:      'question': 'XV',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '16',
808: 1:      'question': 'XVI',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '17',
808: 1:      'question': 'XVII',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '18',
808: 1:      'question': 'XVIII',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '19',
808: 1:      'question': 'XIX',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '20',
808: 1:      'question': 'XX',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '30',
808: 1:      'question': 'XXX',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '35',
808: 1:      'question': 'XXXV',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '36',
808: 1:      'question': 'XXXVI',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '46',
808: 1:      'question': 'XLVI',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '57',
808: 1:      'question': 'LVII',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '67',
808: 1:      'question': 'LXVII',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '89',
808: 1:      'question': 'LXXXIX',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '123',
808: 1:      'question': 'CXXIII',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '234',
808: 1:      'question': 'CCXXXIV',
808: 1:      'valid': true
808: 1:    },
808: 1:    {
808: 1:      'answer': '345',
808: 1:      'question': 'CCCXLV',
808: 1:      'valid': true
808: 1:    }
808: 1:  ],
808: 1:  'info': [
808: 1:    '✅f(I) = 1',
808: 1:    '✅f(II) = 2',
808: 1:    '✅f(III) = 3',
808: 1:    '✅f(IV) = 4',
808: 1:    '✅f(V) = 5',
808: 1:    '✅f(VI) = 6',
808: 1:    '✅f(VII) = 7',
808: 1:    '✅f(VIII) = 8',
808: 1:    '✅f(IX) = 9',
808: 1:    '✅f(X) = 10',
808: 1:    '✅f(XI) = 11',
808: 1:    '✅f(XII) = 12',
808: 1:    '✅f(XIII) = 13',
808: 1:    '✅f(XIV) = 14',
808: 1:    '✅f(XV) = 15',
808: 1:    '✅f(XVI) = 16',
808: 1:    '✅f(XVII) = 17',
808: 1:    '✅f(XVIII) = 18',
808: 1:    '✅f(XIX) = 19',
808: 1:    '✅f(XX) = 20',
808: 1:    '✅f(XXX) = 30',
808: 1:    '✅f(XXXV) = 35',
808: 1:    '✅f(XXXVI) = 36',
808: 1:    '✅f(XLVI) = 46',
808: 1:    '✅f(LVII) = 57',
808: 1:    '✅f(LXVII) = 67',
808: 1:    '✅f(LXXXIX) = 89',
808: 1:    '✅f(CXXIII) = 123',
808: 1:    '✅f(CCXXXIV) = 234',
808: 1:    '✅f(CCCXLV) = 345',
808: 1:    '❌f(CDLVI) = ??? != 456'
808: 1:  ],
808: 1:  'level': 28,
808: 1:  'nextQuestion': 'CDLVI',
808: 1:  'questions': [
808: 1:    'I',
808: 1:    'II',
808: 1:    'III',
808: 1:    'IV',
808: 1:    'V',
808: 1:    'VI',
808: 1:    'VII',
808: 1:    'VIII',
808: 1:    'IX',
808: 1:    'X',
808: 1:    'XI',
808: 1:    'XII',
808: 1:    'XIII',
808: 1:    'XIV',
808: 1:    'XV',
808: 1:    'XVI',
808: 1:    'XVII',
808: 1:    'XVIII',
808: 1:    'XIX',
808: 1:    'XX',
808: 1:    'XXX',
808: 1:    'XXXV',
808: 1:    'XXXVI',
808: 1:    'XLVI',
808: 1:    'LVII',
808: 1:    'LXVII',
808: 1:    'LXXXIX',
808: 1:    'CXXIII',
808: 1:    'CCXXXIV',
808: 1:    'CCCXLV',
808: 1:    'CDLVI'
808: 1:  ]
808: 1:}
808: 1:Scores: 77800
808: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36', '46', '57', '67', '89', '123', '234', '345', '456']')
808: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
809: 1:BoardData {
809: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
809: 1:  'expectedAnswer': '567',
809: 1:  'history': [
809: 1:    {
809: 1:      'answer': '1',
809: 1:      'question': 'I',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '2',
809: 1:      'question': 'II',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '3',
809: 1:      'question': 'III',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '4',
809: 1:      'question': 'IV',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '5',
809: 1:      'question': 'V',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '6',
809: 1:      'question': 'VI',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '7',
809: 1:      'question': 'VII',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '8',
809: 1:      'question': 'VIII',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '9',
809: 1:      'question': 'IX',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '10',
809: 1:      'question': 'X',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '11',
809: 1:      'question': 'XI',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '12',
809: 1:      'question': 'XII',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '13',
809: 1:      'question': 'XIII',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '14',
809: 1:      'question': 'XIV',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '15',
809: 1:      'question': 'XV',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '16',
809: 1:      'question': 'XVI',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '17',
809: 1:      'question': 'XVII',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '18',
809: 1:      'question': 'XVIII',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '19',
809: 1:      'question': 'XIX',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '20',
809: 1:      'question': 'XX',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '30',
809: 1:      'question': 'XXX',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '35',
809: 1:      'question': 'XXXV',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '36',
809: 1:      'question': 'XXXVI',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '46',
809: 1:      'question': 'XLVI',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '57',
809: 1:      'question': 'LVII',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '67',
809: 1:      'question': 'LXVII',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '89',
809: 1:      'question': 'LXXXIX',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '123',
809: 1:      'question': 'CXXIII',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '234',
809: 1:      'question': 'CCXXXIV',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '345',
809: 1:      'question': 'CCCXLV',
809: 1:      'valid': true
809: 1:    },
809: 1:    {
809: 1:      'answer': '456',
809: 1:      'question': 'CDLVI',
809: 1:      'valid': true
809: 1:    }
809: 1:  ],
809: 1:  'info': [
809: 1:    '✅f(I) = 1',
809: 1:    '✅f(II) = 2',
809: 1:    '✅f(III) = 3',
809: 1:    '✅f(IV) = 4',
809: 1:    '✅f(V) = 5',
809: 1:    '✅f(VI) = 6',
809: 1:    '✅f(VII) = 7',
809: 1:    '✅f(VIII) = 8',
809: 1:    '✅f(IX) = 9',
809: 1:    '✅f(X) = 10',
809: 1:    '✅f(XI) = 11',
809: 1:    '✅f(XII) = 12',
809: 1:    '✅f(XIII) = 13',
809: 1:    '✅f(XIV) = 14',
809: 1:    '✅f(XV) = 15',
809: 1:    '✅f(XVI) = 16',
809: 1:    '✅f(XVII) = 17',
809: 1:    '✅f(XVIII) = 18',
809: 1:    '✅f(XIX) = 19',
809: 1:    '✅f(XX) = 20',
809: 1:    '✅f(XXX) = 30',
809: 1:    '✅f(XXXV) = 35',
809: 1:    '✅f(XXXVI) = 36',
809: 1:    '✅f(XLVI) = 46',
809: 1:    '✅f(LVII) = 57',
809: 1:    '✅f(LXVII) = 67',
809: 1:    '✅f(LXXXIX) = 89',
809: 1:    '✅f(CXXIII) = 123',
809: 1:    '✅f(CCXXXIV) = 234',
809: 1:    '✅f(CCCXLV) = 345',
809: 1:    '✅f(CDLVI) = 456',
809: 1:    '❌f(DLXVII) = ??? != 567'
809: 1:  ],
809: 1:  'level': 28,
809: 1:  'nextQuestion': 'DLXVII',
809: 1:  'questions': [
809: 1:    'I',
809: 1:    'II',
809: 1:    'III',
809: 1:    'IV',
809: 1:    'V',
809: 1:    'VI',
809: 1:    'VII',
809: 1:    'VIII',
809: 1:    'IX',
809: 1:    'X',
809: 1:    'XI',
809: 1:    'XII',
809: 1:    'XIII',
809: 1:    'XIV',
809: 1:    'XV',
809: 1:    'XVI',
809: 1:    'XVII',
809: 1:    'XVIII',
809: 1:    'XIX',
809: 1:    'XX',
809: 1:    'XXX',
809: 1:    'XXXV',
809: 1:    'XXXVI',
809: 1:    'XLVI',
809: 1:    'LVII',
809: 1:    'LXVII',
809: 1:    'LXXXIX',
809: 1:    'CXXIII',
809: 1:    'CCXXXIV',
809: 1:    'CCCXLV',
809: 1:    'CDLVI',
809: 1:    'DLXVII'
809: 1:  ]
809: 1:}
809: 1:Scores: 77811
809: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36', '46', '57', '67', '89', '123', '234', '345', '456', '567']')
809: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
810: 1:BoardData {
810: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
810: 1:  'expectedAnswer': '678',
810: 1:  'history': [
810: 1:    {
810: 1:      'answer': '1',
810: 1:      'question': 'I',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '2',
810: 1:      'question': 'II',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '3',
810: 1:      'question': 'III',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '4',
810: 1:      'question': 'IV',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '5',
810: 1:      'question': 'V',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '6',
810: 1:      'question': 'VI',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '7',
810: 1:      'question': 'VII',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '8',
810: 1:      'question': 'VIII',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '9',
810: 1:      'question': 'IX',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '10',
810: 1:      'question': 'X',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '11',
810: 1:      'question': 'XI',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '12',
810: 1:      'question': 'XII',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '13',
810: 1:      'question': 'XIII',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '14',
810: 1:      'question': 'XIV',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '15',
810: 1:      'question': 'XV',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '16',
810: 1:      'question': 'XVI',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '17',
810: 1:      'question': 'XVII',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '18',
810: 1:      'question': 'XVIII',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '19',
810: 1:      'question': 'XIX',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '20',
810: 1:      'question': 'XX',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '30',
810: 1:      'question': 'XXX',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '35',
810: 1:      'question': 'XXXV',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '36',
810: 1:      'question': 'XXXVI',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '46',
810: 1:      'question': 'XLVI',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '57',
810: 1:      'question': 'LVII',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '67',
810: 1:      'question': 'LXVII',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '89',
810: 1:      'question': 'LXXXIX',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '123',
810: 1:      'question': 'CXXIII',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '234',
810: 1:      'question': 'CCXXXIV',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '345',
810: 1:      'question': 'CCCXLV',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '456',
810: 1:      'question': 'CDLVI',
810: 1:      'valid': true
810: 1:    },
810: 1:    {
810: 1:      'answer': '567',
810: 1:      'question': 'DLXVII',
810: 1:      'valid': true
810: 1:    }
810: 1:  ],
810: 1:  'info': [
810: 1:    '✅f(I) = 1',
810: 1:    '✅f(II) = 2',
810: 1:    '✅f(III) = 3',
810: 1:    '✅f(IV) = 4',
810: 1:    '✅f(V) = 5',
810: 1:    '✅f(VI) = 6',
810: 1:    '✅f(VII) = 7',
810: 1:    '✅f(VIII) = 8',
810: 1:    '✅f(IX) = 9',
810: 1:    '✅f(X) = 10',
810: 1:    '✅f(XI) = 11',
810: 1:    '✅f(XII) = 12',
810: 1:    '✅f(XIII) = 13',
810: 1:    '✅f(XIV) = 14',
810: 1:    '✅f(XV) = 15',
810: 1:    '✅f(XVI) = 16',
810: 1:    '✅f(XVII) = 17',
810: 1:    '✅f(XVIII) = 18',
810: 1:    '✅f(XIX) = 19',
810: 1:    '✅f(XX) = 20',
810: 1:    '✅f(XXX) = 30',
810: 1:    '✅f(XXXV) = 35',
810: 1:    '✅f(XXXVI) = 36',
810: 1:    '✅f(XLVI) = 46',
810: 1:    '✅f(LVII) = 57',
810: 1:    '✅f(LXVII) = 67',
810: 1:    '✅f(LXXXIX) = 89',
810: 1:    '✅f(CXXIII) = 123',
810: 1:    '✅f(CCXXXIV) = 234',
810: 1:    '✅f(CCCXLV) = 345',
810: 1:    '✅f(CDLVI) = 456',
810: 1:    '✅f(DLXVII) = 567',
810: 1:    '❌f(DCLXXVIII) = ??? != 678'
810: 1:  ],
810: 1:  'level': 28,
810: 1:  'nextQuestion': 'DCLXXVIII',
810: 1:  'questions': [
810: 1:    'I',
810: 1:    'II',
810: 1:    'III',
810: 1:    'IV',
810: 1:    'V',
810: 1:    'VI',
810: 1:    'VII',
810: 1:    'VIII',
810: 1:    'IX',
810: 1:    'X',
810: 1:    'XI',
810: 1:    'XII',
810: 1:    'XIII',
810: 1:    'XIV',
810: 1:    'XV',
810: 1:    'XVI',
810: 1:    'XVII',
810: 1:    'XVIII',
810: 1:    'XIX',
810: 1:    'XX',
810: 1:    'XXX',
810: 1:    'XXXV',
810: 1:    'XXXVI',
810: 1:    'XLVI',
810: 1:    'LVII',
810: 1:    'LXVII',
810: 1:    'LXXXIX',
810: 1:    'CXXIII',
810: 1:    'CCXXXIV',
810: 1:    'CCCXLV',
810: 1:    'CDLVI',
810: 1:    'DLXVII',
810: 1:    'DCLXXVIII'
810: 1:  ]
810: 1:}
810: 1:Scores: 77822
810: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36', '46', '57', '67', '89', '123', '234', '345', '456', '567', '678']')
810: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
811: 1:BoardData {
811: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
811: 1:  'expectedAnswer': '890',
811: 1:  'history': [
811: 1:    {
811: 1:      'answer': '1',
811: 1:      'question': 'I',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '2',
811: 1:      'question': 'II',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '3',
811: 1:      'question': 'III',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '4',
811: 1:      'question': 'IV',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '5',
811: 1:      'question': 'V',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '6',
811: 1:      'question': 'VI',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '7',
811: 1:      'question': 'VII',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '8',
811: 1:      'question': 'VIII',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '9',
811: 1:      'question': 'IX',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '10',
811: 1:      'question': 'X',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '11',
811: 1:      'question': 'XI',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '12',
811: 1:      'question': 'XII',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '13',
811: 1:      'question': 'XIII',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '14',
811: 1:      'question': 'XIV',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '15',
811: 1:      'question': 'XV',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '16',
811: 1:      'question': 'XVI',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '17',
811: 1:      'question': 'XVII',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '18',
811: 1:      'question': 'XVIII',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '19',
811: 1:      'question': 'XIX',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '20',
811: 1:      'question': 'XX',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '30',
811: 1:      'question': 'XXX',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '35',
811: 1:      'question': 'XXXV',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '36',
811: 1:      'question': 'XXXVI',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '46',
811: 1:      'question': 'XLVI',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '57',
811: 1:      'question': 'LVII',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '67',
811: 1:      'question': 'LXVII',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '89',
811: 1:      'question': 'LXXXIX',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '123',
811: 1:      'question': 'CXXIII',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '234',
811: 1:      'question': 'CCXXXIV',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '345',
811: 1:      'question': 'CCCXLV',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '456',
811: 1:      'question': 'CDLVI',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '567',
811: 1:      'question': 'DLXVII',
811: 1:      'valid': true
811: 1:    },
811: 1:    {
811: 1:      'answer': '678',
811: 1:      'question': 'DCLXXVIII',
811: 1:      'valid': true
811: 1:    }
811: 1:  ],
811: 1:  'info': [
811: 1:    '✅f(I) = 1',
811: 1:    '✅f(II) = 2',
811: 1:    '✅f(III) = 3',
811: 1:    '✅f(IV) = 4',
811: 1:    '✅f(V) = 5',
811: 1:    '✅f(VI) = 6',
811: 1:    '✅f(VII) = 7',
811: 1:    '✅f(VIII) = 8',
811: 1:    '✅f(IX) = 9',
811: 1:    '✅f(X) = 10',
811: 1:    '✅f(XI) = 11',
811: 1:    '✅f(XII) = 12',
811: 1:    '✅f(XIII) = 13',
811: 1:    '✅f(XIV) = 14',
811: 1:    '✅f(XV) = 15',
811: 1:    '✅f(XVI) = 16',
811: 1:    '✅f(XVII) = 17',
811: 1:    '✅f(XVIII) = 18',
811: 1:    '✅f(XIX) = 19',
811: 1:    '✅f(XX) = 20',
811: 1:    '✅f(XXX) = 30',
811: 1:    '✅f(XXXV) = 35',
811: 1:    '✅f(XXXVI) = 36',
811: 1:    '✅f(XLVI) = 46',
811: 1:    '✅f(LVII) = 57',
811: 1:    '✅f(LXVII) = 67',
811: 1:    '✅f(LXXXIX) = 89',
811: 1:    '✅f(CXXIII) = 123',
811: 1:    '✅f(CCXXXIV) = 234',
811: 1:    '✅f(CCCXLV) = 345',
811: 1:    '✅f(CDLVI) = 456',
811: 1:    '✅f(DLXVII) = 567',
811: 1:    '✅f(DCLXXVIII) = 678',
811: 1:    '❌f(DCCCXC) = ??? != 890'
811: 1:  ],
811: 1:  'level': 28,
811: 1:  'nextQuestion': 'DCCCXC',
811: 1:  'questions': [
811: 1:    'I',
811: 1:    'II',
811: 1:    'III',
811: 1:    'IV',
811: 1:    'V',
811: 1:    'VI',
811: 1:    'VII',
811: 1:    'VIII',
811: 1:    'IX',
811: 1:    'X',
811: 1:    'XI',
811: 1:    'XII',
811: 1:    'XIII',
811: 1:    'XIV',
811: 1:    'XV',
811: 1:    'XVI',
811: 1:    'XVII',
811: 1:    'XVIII',
811: 1:    'XIX',
811: 1:    'XX',
811: 1:    'XXX',
811: 1:    'XXXV',
811: 1:    'XXXVI',
811: 1:    'XLVI',
811: 1:    'LVII',
811: 1:    'LXVII',
811: 1:    'LXXXIX',
811: 1:    'CXXIII',
811: 1:    'CCXXXIV',
811: 1:    'CCCXLV',
811: 1:    'CDLVI',
811: 1:    'DLXVII',
811: 1:    'DCLXXVIII',
811: 1:    'DCCCXC'
811: 1:  ]
811: 1:}
811: 1:Scores: 77833
811: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36', '46', '57', '67', '89', '123', '234', '345', '456', '567', '678', '890']')
811: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
812: 1:BoardData {
812: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
812: 1:  'expectedAnswer': '1234',
812: 1:  'history': [
812: 1:    {
812: 1:      'answer': '1',
812: 1:      'question': 'I',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '2',
812: 1:      'question': 'II',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '3',
812: 1:      'question': 'III',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '4',
812: 1:      'question': 'IV',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '5',
812: 1:      'question': 'V',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '6',
812: 1:      'question': 'VI',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '7',
812: 1:      'question': 'VII',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '8',
812: 1:      'question': 'VIII',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '9',
812: 1:      'question': 'IX',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '10',
812: 1:      'question': 'X',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '11',
812: 1:      'question': 'XI',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '12',
812: 1:      'question': 'XII',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '13',
812: 1:      'question': 'XIII',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '14',
812: 1:      'question': 'XIV',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '15',
812: 1:      'question': 'XV',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '16',
812: 1:      'question': 'XVI',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '17',
812: 1:      'question': 'XVII',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '18',
812: 1:      'question': 'XVIII',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '19',
812: 1:      'question': 'XIX',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '20',
812: 1:      'question': 'XX',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '30',
812: 1:      'question': 'XXX',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '35',
812: 1:      'question': 'XXXV',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '36',
812: 1:      'question': 'XXXVI',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '46',
812: 1:      'question': 'XLVI',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '57',
812: 1:      'question': 'LVII',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '67',
812: 1:      'question': 'LXVII',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '89',
812: 1:      'question': 'LXXXIX',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '123',
812: 1:      'question': 'CXXIII',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '234',
812: 1:      'question': 'CCXXXIV',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '345',
812: 1:      'question': 'CCCXLV',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '456',
812: 1:      'question': 'CDLVI',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '567',
812: 1:      'question': 'DLXVII',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '678',
812: 1:      'question': 'DCLXXVIII',
812: 1:      'valid': true
812: 1:    },
812: 1:    {
812: 1:      'answer': '890',
812: 1:      'question': 'DCCCXC',
812: 1:      'valid': true
812: 1:    }
812: 1:  ],
812: 1:  'info': [
812: 1:    '✅f(I) = 1',
812: 1:    '✅f(II) = 2',
812: 1:    '✅f(III) = 3',
812: 1:    '✅f(IV) = 4',
812: 1:    '✅f(V) = 5',
812: 1:    '✅f(VI) = 6',
812: 1:    '✅f(VII) = 7',
812: 1:    '✅f(VIII) = 8',
812: 1:    '✅f(IX) = 9',
812: 1:    '✅f(X) = 10',
812: 1:    '✅f(XI) = 11',
812: 1:    '✅f(XII) = 12',
812: 1:    '✅f(XIII) = 13',
812: 1:    '✅f(XIV) = 14',
812: 1:    '✅f(XV) = 15',
812: 1:    '✅f(XVI) = 16',
812: 1:    '✅f(XVII) = 17',
812: 1:    '✅f(XVIII) = 18',
812: 1:    '✅f(XIX) = 19',
812: 1:    '✅f(XX) = 20',
812: 1:    '✅f(XXX) = 30',
812: 1:    '✅f(XXXV) = 35',
812: 1:    '✅f(XXXVI) = 36',
812: 1:    '✅f(XLVI) = 46',
812: 1:    '✅f(LVII) = 57',
812: 1:    '✅f(LXVII) = 67',
812: 1:    '✅f(LXXXIX) = 89',
812: 1:    '✅f(CXXIII) = 123',
812: 1:    '✅f(CCXXXIV) = 234',
812: 1:    '✅f(CCCXLV) = 345',
812: 1:    '✅f(CDLVI) = 456',
812: 1:    '✅f(DLXVII) = 567',
812: 1:    '✅f(DCLXXVIII) = 678',
812: 1:    '✅f(DCCCXC) = 890',
812: 1:    '❌f(MCCXXXIV) = ??? != 1234'
812: 1:  ],
812: 1:  'level': 28,
812: 1:  'nextQuestion': 'MCCXXXIV',
812: 1:  'questions': [
812: 1:    'I',
812: 1:    'II',
812: 1:    'III',
812: 1:    'IV',
812: 1:    'V',
812: 1:    'VI',
812: 1:    'VII',
812: 1:    'VIII',
812: 1:    'IX',
812: 1:    'X',
812: 1:    'XI',
812: 1:    'XII',
812: 1:    'XIII',
812: 1:    'XIV',
812: 1:    'XV',
812: 1:    'XVI',
812: 1:    'XVII',
812: 1:    'XVIII',
812: 1:    'XIX',
812: 1:    'XX',
812: 1:    'XXX',
812: 1:    'XXXV',
812: 1:    'XXXVI',
812: 1:    'XLVI',
812: 1:    'LVII',
812: 1:    'LXVII',
812: 1:    'LXXXIX',
812: 1:    'CXXIII',
812: 1:    'CCXXXIV',
812: 1:    'CCCXLV',
812: 1:    'CDLVI',
812: 1:    'DLXVII',
812: 1:    'DCLXXVIII',
812: 1:    'DCCCXC',
812: 1:    'MCCXXXIV'
812: 1:  ]
812: 1:}
812: 1:Scores: 77844
812: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36', '46', '57', '67', '89', '123', '234', '345', '456', '567', '678', '890', '1234']')
812: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
813: 1:BoardData {
813: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
813: 1:  'expectedAnswer': '2345',
813: 1:  'history': [
813: 1:    {
813: 1:      'answer': '1',
813: 1:      'question': 'I',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '2',
813: 1:      'question': 'II',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '3',
813: 1:      'question': 'III',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '4',
813: 1:      'question': 'IV',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '5',
813: 1:      'question': 'V',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '6',
813: 1:      'question': 'VI',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '7',
813: 1:      'question': 'VII',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '8',
813: 1:      'question': 'VIII',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '9',
813: 1:      'question': 'IX',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '10',
813: 1:      'question': 'X',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '11',
813: 1:      'question': 'XI',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '12',
813: 1:      'question': 'XII',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '13',
813: 1:      'question': 'XIII',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '14',
813: 1:      'question': 'XIV',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '15',
813: 1:      'question': 'XV',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '16',
813: 1:      'question': 'XVI',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '17',
813: 1:      'question': 'XVII',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '18',
813: 1:      'question': 'XVIII',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '19',
813: 1:      'question': 'XIX',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '20',
813: 1:      'question': 'XX',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '30',
813: 1:      'question': 'XXX',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '35',
813: 1:      'question': 'XXXV',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '36',
813: 1:      'question': 'XXXVI',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '46',
813: 1:      'question': 'XLVI',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '57',
813: 1:      'question': 'LVII',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '67',
813: 1:      'question': 'LXVII',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '89',
813: 1:      'question': 'LXXXIX',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '123',
813: 1:      'question': 'CXXIII',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '234',
813: 1:      'question': 'CCXXXIV',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '345',
813: 1:      'question': 'CCCXLV',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '456',
813: 1:      'question': 'CDLVI',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '567',
813: 1:      'question': 'DLXVII',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '678',
813: 1:      'question': 'DCLXXVIII',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '890',
813: 1:      'question': 'DCCCXC',
813: 1:      'valid': true
813: 1:    },
813: 1:    {
813: 1:      'answer': '1234',
813: 1:      'question': 'MCCXXXIV',
813: 1:      'valid': true
813: 1:    }
813: 1:  ],
813: 1:  'info': [
813: 1:    '✅f(I) = 1',
813: 1:    '✅f(II) = 2',
813: 1:    '✅f(III) = 3',
813: 1:    '✅f(IV) = 4',
813: 1:    '✅f(V) = 5',
813: 1:    '✅f(VI) = 6',
813: 1:    '✅f(VII) = 7',
813: 1:    '✅f(VIII) = 8',
813: 1:    '✅f(IX) = 9',
813: 1:    '✅f(X) = 10',
813: 1:    '✅f(XI) = 11',
813: 1:    '✅f(XII) = 12',
813: 1:    '✅f(XIII) = 13',
813: 1:    '✅f(XIV) = 14',
813: 1:    '✅f(XV) = 15',
813: 1:    '✅f(XVI) = 16',
813: 1:    '✅f(XVII) = 17',
813: 1:    '✅f(XVIII) = 18',
813: 1:    '✅f(XIX) = 19',
813: 1:    '✅f(XX) = 20',
813: 1:    '✅f(XXX) = 30',
813: 1:    '✅f(XXXV) = 35',
813: 1:    '✅f(XXXVI) = 36',
813: 1:    '✅f(XLVI) = 46',
813: 1:    '✅f(LVII) = 57',
813: 1:    '✅f(LXVII) = 67',
813: 1:    '✅f(LXXXIX) = 89',
813: 1:    '✅f(CXXIII) = 123',
813: 1:    '✅f(CCXXXIV) = 234',
813: 1:    '✅f(CCCXLV) = 345',
813: 1:    '✅f(CDLVI) = 456',
813: 1:    '✅f(DLXVII) = 567',
813: 1:    '✅f(DCLXXVIII) = 678',
813: 1:    '✅f(DCCCXC) = 890',
813: 1:    '✅f(MCCXXXIV) = 1234',
813: 1:    '❌f(MMCCCXLV) = ??? != 2345'
813: 1:  ],
813: 1:  'level': 28,
813: 1:  'nextQuestion': 'MMCCCXLV',
813: 1:  'questions': [
813: 1:    'I',
813: 1:    'II',
813: 1:    'III',
813: 1:    'IV',
813: 1:    'V',
813: 1:    'VI',
813: 1:    'VII',
813: 1:    'VIII',
813: 1:    'IX',
813: 1:    'X',
813: 1:    'XI',
813: 1:    'XII',
813: 1:    'XIII',
813: 1:    'XIV',
813: 1:    'XV',
813: 1:    'XVI',
813: 1:    'XVII',
813: 1:    'XVIII',
813: 1:    'XIX',
813: 1:    'XX',
813: 1:    'XXX',
813: 1:    'XXXV',
813: 1:    'XXXVI',
813: 1:    'XLVI',
813: 1:    'LVII',
813: 1:    'LXVII',
813: 1:    'LXXXIX',
813: 1:    'CXXIII',
813: 1:    'CCXXXIV',
813: 1:    'CCCXLV',
813: 1:    'CDLVI',
813: 1:    'DLXVII',
813: 1:    'DCLXXVIII',
813: 1:    'DCCCXC',
813: 1:    'MCCXXXIV',
813: 1:    'MMCCCXLV'
813: 1:  ]
813: 1:}
813: 1:Scores: 77855
813: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36', '46', '57', '67', '89', '123', '234', '345', '456', '567', '678', '890', '1234', '2345']')
813: 1:Fire Event: PassTest{complexity=41, testCount=37}
------------------------------------------
814: 1:BoardData {
814: 1:  'description': ['Write a function that converts a Roman number to Arabic'],
814: 1:  'expectedAnswer': '3456',
814: 1:  'history': [
814: 1:    {
814: 1:      'answer': '1',
814: 1:      'question': 'I',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '2',
814: 1:      'question': 'II',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '3',
814: 1:      'question': 'III',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '4',
814: 1:      'question': 'IV',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '5',
814: 1:      'question': 'V',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '6',
814: 1:      'question': 'VI',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '7',
814: 1:      'question': 'VII',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '8',
814: 1:      'question': 'VIII',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '9',
814: 1:      'question': 'IX',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '10',
814: 1:      'question': 'X',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '11',
814: 1:      'question': 'XI',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '12',
814: 1:      'question': 'XII',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '13',
814: 1:      'question': 'XIII',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '14',
814: 1:      'question': 'XIV',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '15',
814: 1:      'question': 'XV',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '16',
814: 1:      'question': 'XVI',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '17',
814: 1:      'question': 'XVII',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '18',
814: 1:      'question': 'XVIII',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '19',
814: 1:      'question': 'XIX',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '20',
814: 1:      'question': 'XX',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '30',
814: 1:      'question': 'XXX',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '35',
814: 1:      'question': 'XXXV',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '36',
814: 1:      'question': 'XXXVI',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '46',
814: 1:      'question': 'XLVI',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '57',
814: 1:      'question': 'LVII',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '67',
814: 1:      'question': 'LXVII',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '89',
814: 1:      'question': 'LXXXIX',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '123',
814: 1:      'question': 'CXXIII',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '234',
814: 1:      'question': 'CCXXXIV',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '345',
814: 1:      'question': 'CCCXLV',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '456',
814: 1:      'question': 'CDLVI',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '567',
814: 1:      'question': 'DLXVII',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '678',
814: 1:      'question': 'DCLXXVIII',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '890',
814: 1:      'question': 'DCCCXC',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '1234',
814: 1:      'question': 'MCCXXXIV',
814: 1:      'valid': true
814: 1:    },
814: 1:    {
814: 1:      'answer': '2345',
814: 1:      'question': 'MMCCCXLV',
814: 1:      'valid': true
814: 1:    }
814: 1:  ],
814: 1:  'info': [
814: 1:    '✅f(I) = 1',
814: 1:    '✅f(II) = 2',
814: 1:    '✅f(III) = 3',
814: 1:    '✅f(IV) = 4',
814: 1:    '✅f(V) = 5',
814: 1:    '✅f(VI) = 6',
814: 1:    '✅f(VII) = 7',
814: 1:    '✅f(VIII) = 8',
814: 1:    '✅f(IX) = 9',
814: 1:    '✅f(X) = 10',
814: 1:    '✅f(XI) = 11',
814: 1:    '✅f(XII) = 12',
814: 1:    '✅f(XIII) = 13',
814: 1:    '✅f(XIV) = 14',
814: 1:    '✅f(XV) = 15',
814: 1:    '✅f(XVI) = 16',
814: 1:    '✅f(XVII) = 17',
814: 1:    '✅f(XVIII) = 18',
814: 1:    '✅f(XIX) = 19',
814: 1:    '✅f(XX) = 20',
814: 1:    '✅f(XXX) = 30',
814: 1:    '✅f(XXXV) = 35',
814: 1:    '✅f(XXXVI) = 36',
814: 1:    '✅f(XLVI) = 46',
814: 1:    '✅f(LVII) = 57',
814: 1:    '✅f(LXVII) = 67',
814: 1:    '✅f(LXXXIX) = 89',
814: 1:    '✅f(CXXIII) = 123',
814: 1:    '✅f(CCXXXIV) = 234',
814: 1:    '✅f(CCCXLV) = 345',
814: 1:    '✅f(CDLVI) = 456',
814: 1:    '✅f(DLXVII) = 567',
814: 1:    '✅f(DCLXXVIII) = 678',
814: 1:    '✅f(DCCCXC) = 890',
814: 1:    '✅f(MCCXXXIV) = 1234',
814: 1:    '✅f(MMCCCXLV) = 2345',
814: 1:    '❌f(MMMCDLVI) = ??? != 3456'
814: 1:  ],
814: 1:  'level': 28,
814: 1:  'nextQuestion': 'MMMCDLVI',
814: 1:  'questions': [
814: 1:    'I',
814: 1:    'II',
814: 1:    'III',
814: 1:    'IV',
814: 1:    'V',
814: 1:    'VI',
814: 1:    'VII',
814: 1:    'VIII',
814: 1:    'IX',
814: 1:    'X',
814: 1:    'XI',
814: 1:    'XII',
814: 1:    'XIII',
814: 1:    'XIV',
814: 1:    'XV',
814: 1:    'XVI',
814: 1:    'XVII',
814: 1:    'XVIII',
814: 1:    'XIX',
814: 1:    'XX',
814: 1:    'XXX',
814: 1:    'XXXV',
814: 1:    'XXXVI',
814: 1:    'XLVI',
814: 1:    'LVII',
814: 1:    'LXVII',
814: 1:    'LXXXIX',
814: 1:    'CXXIII',
814: 1:    'CCXXXIV',
814: 1:    'CCCXLV',
814: 1:    'CDLVI',
814: 1:    'DLXVII',
814: 1:    'DCLXXVIII',
814: 1:    'DCCCXC',
814: 1:    'MCCXXXIV',
814: 1:    'MMCCCXLV',
814: 1:    'MMMCDLVI'
814: 1:  ]
814: 1:}
814: 1:Scores: 77866
814: 1:Answer: message('['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '30', '35', '36', '46', '57', '67', '89', '123', '234', '345', '456', '567', '678', '890', '1234', '2345', '3456']')
814: 1:Fire Event: PassTest{complexity=41, testCount=37}
814: 1:Fire Event: NextAlgorithm{complexity=41, time=0}
------------------------------------------
815: 1:BoardData {
815: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
815: 1:  'history': [
815: 1:    {
815: 1:      'answer': '1',
815: 1:      'question': 'I',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '2',
815: 1:      'question': 'II',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '3',
815: 1:      'question': 'III',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '4',
815: 1:      'question': 'IV',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '5',
815: 1:      'question': 'V',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '6',
815: 1:      'question': 'VI',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '7',
815: 1:      'question': 'VII',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '8',
815: 1:      'question': 'VIII',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '9',
815: 1:      'question': 'IX',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '10',
815: 1:      'question': 'X',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '11',
815: 1:      'question': 'XI',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '12',
815: 1:      'question': 'XII',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '13',
815: 1:      'question': 'XIII',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '14',
815: 1:      'question': 'XIV',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '15',
815: 1:      'question': 'XV',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '16',
815: 1:      'question': 'XVI',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '17',
815: 1:      'question': 'XVII',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '18',
815: 1:      'question': 'XVIII',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '19',
815: 1:      'question': 'XIX',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '20',
815: 1:      'question': 'XX',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '30',
815: 1:      'question': 'XXX',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '35',
815: 1:      'question': 'XXXV',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '36',
815: 1:      'question': 'XXXVI',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '46',
815: 1:      'question': 'XLVI',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '57',
815: 1:      'question': 'LVII',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '67',
815: 1:      'question': 'LXVII',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '89',
815: 1:      'question': 'LXXXIX',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '123',
815: 1:      'question': 'CXXIII',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '234',
815: 1:      'question': 'CCXXXIV',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '345',
815: 1:      'question': 'CCCXLV',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '456',
815: 1:      'question': 'CDLVI',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '567',
815: 1:      'question': 'DLXVII',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '678',
815: 1:      'question': 'DCLXXVIII',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '890',
815: 1:      'question': 'DCCCXC',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '1234',
815: 1:      'question': 'MCCXXXIV',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '2345',
815: 1:      'question': 'MMCCCXLV',
815: 1:      'valid': true
815: 1:    },
815: 1:    {
815: 1:      'answer': '3456',
815: 1:      'question': 'MMMCDLVI',
815: 1:      'valid': true
815: 1:    }
815: 1:  ],
815: 1:  'info': [
815: 1:    '✅f(I) = 1',
815: 1:    '✅f(II) = 2',
815: 1:    '✅f(III) = 3',
815: 1:    '✅f(IV) = 4',
815: 1:    '✅f(V) = 5',
815: 1:    '✅f(VI) = 6',
815: 1:    '✅f(VII) = 7',
815: 1:    '✅f(VIII) = 8',
815: 1:    '✅f(IX) = 9',
815: 1:    '✅f(X) = 10',
815: 1:    '✅f(XI) = 11',
815: 1:    '✅f(XII) = 12',
815: 1:    '✅f(XIII) = 13',
815: 1:    '✅f(XIV) = 14',
815: 1:    '✅f(XV) = 15',
815: 1:    '✅f(XVI) = 16',
815: 1:    '✅f(XVII) = 17',
815: 1:    '✅f(XVIII) = 18',
815: 1:    '✅f(XIX) = 19',
815: 1:    '✅f(XX) = 20',
815: 1:    '✅f(XXX) = 30',
815: 1:    '✅f(XXXV) = 35',
815: 1:    '✅f(XXXVI) = 36',
815: 1:    '✅f(XLVI) = 46',
815: 1:    '✅f(LVII) = 57',
815: 1:    '✅f(LXVII) = 67',
815: 1:    '✅f(LXXXIX) = 89',
815: 1:    '✅f(CXXIII) = 123',
815: 1:    '✅f(CCXXXIV) = 234',
815: 1:    '✅f(CCCXLV) = 345',
815: 1:    '✅f(CDLVI) = 456',
815: 1:    '✅f(DLXVII) = 567',
815: 1:    '✅f(DCLXXVIII) = 678',
815: 1:    '✅f(DCCCXC) = 890',
815: 1:    '✅f(MCCXXXIV) = 1234',
815: 1:    '✅f(MMCCCXLV) = 2345',
815: 1:    '✅f(MMMCDLVI) = 3456'
815: 1:  ],
815: 1:  'level': 28,
815: 1:  'questions': []
815: 1:}
815: 1:Scores: 83411
815: 1:Answer: message('StartNextLevel')
815: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
816: 1:BoardData {
816: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
816: 1:  'expectedAnswer': '1',
816: 1:  'history': [],
816: 1:  'info': ['❌f(1) = ??? != 1'],
816: 1:  'level': 29,
816: 1:  'nextQuestion': '1',
816: 1:  'questions': ['1']
816: 1:}
816: 1:Scores: 83411
816: 1:Answer: message('['1']')
816: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
817: 1:BoardData {
817: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
817: 1:  'expectedAnswer': '2',
817: 1:  'history': [{
817: 1:    'answer': '1',
817: 1:    'question': '1',
817: 1:    'valid': true
817: 1:  }],
817: 1:  'info': [
817: 1:    '✅f(1) = 1',
817: 1:    '❌f(2) = ??? != 2'
817: 1:  ],
817: 1:  'level': 29,
817: 1:  'nextQuestion': '2',
817: 1:  'questions': [
817: 1:    '1',
817: 1:    '2'
817: 1:  ]
817: 1:}
817: 1:Scores: 83427
817: 1:Answer: message('['1', '2']')
817: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
818: 1:BoardData {
818: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
818: 1:  'expectedAnswer': '6',
818: 1:  'history': [
818: 1:    {
818: 1:      'answer': '1',
818: 1:      'question': '1',
818: 1:      'valid': true
818: 1:    },
818: 1:    {
818: 1:      'answer': '2',
818: 1:      'question': '2',
818: 1:      'valid': true
818: 1:    }
818: 1:  ],
818: 1:  'info': [
818: 1:    '✅f(1) = 1',
818: 1:    '✅f(2) = 2',
818: 1:    '❌f(3) = ??? != 6'
818: 1:  ],
818: 1:  'level': 29,
818: 1:  'nextQuestion': '3',
818: 1:  'questions': [
818: 1:    '1',
818: 1:    '2',
818: 1:    '3'
818: 1:  ]
818: 1:}
818: 1:Scores: 83443
818: 1:Answer: message('['1', '2', '6']')
818: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
819: 1:BoardData {
819: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
819: 1:  'expectedAnswer': '24',
819: 1:  'history': [
819: 1:    {
819: 1:      'answer': '1',
819: 1:      'question': '1',
819: 1:      'valid': true
819: 1:    },
819: 1:    {
819: 1:      'answer': '2',
819: 1:      'question': '2',
819: 1:      'valid': true
819: 1:    },
819: 1:    {
819: 1:      'answer': '6',
819: 1:      'question': '3',
819: 1:      'valid': true
819: 1:    }
819: 1:  ],
819: 1:  'info': [
819: 1:    '✅f(1) = 1',
819: 1:    '✅f(2) = 2',
819: 1:    '✅f(3) = 6',
819: 1:    '❌f(4) = ??? != 24'
819: 1:  ],
819: 1:  'level': 29,
819: 1:  'nextQuestion': '4',
819: 1:  'questions': [
819: 1:    '1',
819: 1:    '2',
819: 1:    '3',
819: 1:    '4'
819: 1:  ]
819: 1:}
819: 1:Scores: 83459
819: 1:Answer: message('['1', '2', '6', '24']')
819: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
820: 1:BoardData {
820: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
820: 1:  'expectedAnswer': '120',
820: 1:  'history': [
820: 1:    {
820: 1:      'answer': '1',
820: 1:      'question': '1',
820: 1:      'valid': true
820: 1:    },
820: 1:    {
820: 1:      'answer': '2',
820: 1:      'question': '2',
820: 1:      'valid': true
820: 1:    },
820: 1:    {
820: 1:      'answer': '6',
820: 1:      'question': '3',
820: 1:      'valid': true
820: 1:    },
820: 1:    {
820: 1:      'answer': '24',
820: 1:      'question': '4',
820: 1:      'valid': true
820: 1:    }
820: 1:  ],
820: 1:  'info': [
820: 1:    '✅f(1) = 1',
820: 1:    '✅f(2) = 2',
820: 1:    '✅f(3) = 6',
820: 1:    '✅f(4) = 24',
820: 1:    '❌f(5) = ??? != 120'
820: 1:  ],
820: 1:  'level': 29,
820: 1:  'nextQuestion': '5',
820: 1:  'questions': [
820: 1:    '1',
820: 1:    '2',
820: 1:    '3',
820: 1:    '4',
820: 1:    '5'
820: 1:  ]
820: 1:}
820: 1:Scores: 83475
820: 1:Answer: message('['1', '2', '6', '24', '120']')
820: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
821: 1:BoardData {
821: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
821: 1:  'expectedAnswer': '720',
821: 1:  'history': [
821: 1:    {
821: 1:      'answer': '1',
821: 1:      'question': '1',
821: 1:      'valid': true
821: 1:    },
821: 1:    {
821: 1:      'answer': '2',
821: 1:      'question': '2',
821: 1:      'valid': true
821: 1:    },
821: 1:    {
821: 1:      'answer': '6',
821: 1:      'question': '3',
821: 1:      'valid': true
821: 1:    },
821: 1:    {
821: 1:      'answer': '24',
821: 1:      'question': '4',
821: 1:      'valid': true
821: 1:    },
821: 1:    {
821: 1:      'answer': '120',
821: 1:      'question': '5',
821: 1:      'valid': true
821: 1:    }
821: 1:  ],
821: 1:  'info': [
821: 1:    '✅f(1) = 1',
821: 1:    '✅f(2) = 2',
821: 1:    '✅f(3) = 6',
821: 1:    '✅f(4) = 24',
821: 1:    '✅f(5) = 120',
821: 1:    '❌f(6) = ??? != 720'
821: 1:  ],
821: 1:  'level': 29,
821: 1:  'nextQuestion': '6',
821: 1:  'questions': [
821: 1:    '1',
821: 1:    '2',
821: 1:    '3',
821: 1:    '4',
821: 1:    '5',
821: 1:    '6'
821: 1:  ]
821: 1:}
821: 1:Scores: 83491
821: 1:Answer: message('['1', '2', '6', '24', '120', '720']')
821: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
822: 1:BoardData {
822: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
822: 1:  'expectedAnswer': '5040',
822: 1:  'history': [
822: 1:    {
822: 1:      'answer': '1',
822: 1:      'question': '1',
822: 1:      'valid': true
822: 1:    },
822: 1:    {
822: 1:      'answer': '2',
822: 1:      'question': '2',
822: 1:      'valid': true
822: 1:    },
822: 1:    {
822: 1:      'answer': '6',
822: 1:      'question': '3',
822: 1:      'valid': true
822: 1:    },
822: 1:    {
822: 1:      'answer': '24',
822: 1:      'question': '4',
822: 1:      'valid': true
822: 1:    },
822: 1:    {
822: 1:      'answer': '120',
822: 1:      'question': '5',
822: 1:      'valid': true
822: 1:    },
822: 1:    {
822: 1:      'answer': '720',
822: 1:      'question': '6',
822: 1:      'valid': true
822: 1:    }
822: 1:  ],
822: 1:  'info': [
822: 1:    '✅f(1) = 1',
822: 1:    '✅f(2) = 2',
822: 1:    '✅f(3) = 6',
822: 1:    '✅f(4) = 24',
822: 1:    '✅f(5) = 120',
822: 1:    '✅f(6) = 720',
822: 1:    '❌f(7) = ??? != 5040'
822: 1:  ],
822: 1:  'level': 29,
822: 1:  'nextQuestion': '7',
822: 1:  'questions': [
822: 1:    '1',
822: 1:    '2',
822: 1:    '3',
822: 1:    '4',
822: 1:    '5',
822: 1:    '6',
822: 1:    '7'
822: 1:  ]
822: 1:}
822: 1:Scores: 83507
822: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040']')
822: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
823: 1:BoardData {
823: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
823: 1:  'expectedAnswer': '40320',
823: 1:  'history': [
823: 1:    {
823: 1:      'answer': '1',
823: 1:      'question': '1',
823: 1:      'valid': true
823: 1:    },
823: 1:    {
823: 1:      'answer': '2',
823: 1:      'question': '2',
823: 1:      'valid': true
823: 1:    },
823: 1:    {
823: 1:      'answer': '6',
823: 1:      'question': '3',
823: 1:      'valid': true
823: 1:    },
823: 1:    {
823: 1:      'answer': '24',
823: 1:      'question': '4',
823: 1:      'valid': true
823: 1:    },
823: 1:    {
823: 1:      'answer': '120',
823: 1:      'question': '5',
823: 1:      'valid': true
823: 1:    },
823: 1:    {
823: 1:      'answer': '720',
823: 1:      'question': '6',
823: 1:      'valid': true
823: 1:    },
823: 1:    {
823: 1:      'answer': '5040',
823: 1:      'question': '7',
823: 1:      'valid': true
823: 1:    }
823: 1:  ],
823: 1:  'info': [
823: 1:    '✅f(1) = 1',
823: 1:    '✅f(2) = 2',
823: 1:    '✅f(3) = 6',
823: 1:    '✅f(4) = 24',
823: 1:    '✅f(5) = 120',
823: 1:    '✅f(6) = 720',
823: 1:    '✅f(7) = 5040',
823: 1:    '❌f(8) = ??? != 40320'
823: 1:  ],
823: 1:  'level': 29,
823: 1:  'nextQuestion': '8',
823: 1:  'questions': [
823: 1:    '1',
823: 1:    '2',
823: 1:    '3',
823: 1:    '4',
823: 1:    '5',
823: 1:    '6',
823: 1:    '7',
823: 1:    '8'
823: 1:  ]
823: 1:}
823: 1:Scores: 83523
823: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320']')
823: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
824: 1:BoardData {
824: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
824: 1:  'expectedAnswer': '362880',
824: 1:  'history': [
824: 1:    {
824: 1:      'answer': '1',
824: 1:      'question': '1',
824: 1:      'valid': true
824: 1:    },
824: 1:    {
824: 1:      'answer': '2',
824: 1:      'question': '2',
824: 1:      'valid': true
824: 1:    },
824: 1:    {
824: 1:      'answer': '6',
824: 1:      'question': '3',
824: 1:      'valid': true
824: 1:    },
824: 1:    {
824: 1:      'answer': '24',
824: 1:      'question': '4',
824: 1:      'valid': true
824: 1:    },
824: 1:    {
824: 1:      'answer': '120',
824: 1:      'question': '5',
824: 1:      'valid': true
824: 1:    },
824: 1:    {
824: 1:      'answer': '720',
824: 1:      'question': '6',
824: 1:      'valid': true
824: 1:    },
824: 1:    {
824: 1:      'answer': '5040',
824: 1:      'question': '7',
824: 1:      'valid': true
824: 1:    },
824: 1:    {
824: 1:      'answer': '40320',
824: 1:      'question': '8',
824: 1:      'valid': true
824: 1:    }
824: 1:  ],
824: 1:  'info': [
824: 1:    '✅f(1) = 1',
824: 1:    '✅f(2) = 2',
824: 1:    '✅f(3) = 6',
824: 1:    '✅f(4) = 24',
824: 1:    '✅f(5) = 120',
824: 1:    '✅f(6) = 720',
824: 1:    '✅f(7) = 5040',
824: 1:    '✅f(8) = 40320',
824: 1:    '❌f(9) = ??? != 362880'
824: 1:  ],
824: 1:  'level': 29,
824: 1:  'nextQuestion': '9',
824: 1:  'questions': [
824: 1:    '1',
824: 1:    '2',
824: 1:    '3',
824: 1:    '4',
824: 1:    '5',
824: 1:    '6',
824: 1:    '7',
824: 1:    '8',
824: 1:    '9'
824: 1:  ]
824: 1:}
824: 1:Scores: 83539
824: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880']')
824: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
825: 1:BoardData {
825: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
825: 1:  'expectedAnswer': '3628800',
825: 1:  'history': [
825: 1:    {
825: 1:      'answer': '1',
825: 1:      'question': '1',
825: 1:      'valid': true
825: 1:    },
825: 1:    {
825: 1:      'answer': '2',
825: 1:      'question': '2',
825: 1:      'valid': true
825: 1:    },
825: 1:    {
825: 1:      'answer': '6',
825: 1:      'question': '3',
825: 1:      'valid': true
825: 1:    },
825: 1:    {
825: 1:      'answer': '24',
825: 1:      'question': '4',
825: 1:      'valid': true
825: 1:    },
825: 1:    {
825: 1:      'answer': '120',
825: 1:      'question': '5',
825: 1:      'valid': true
825: 1:    },
825: 1:    {
825: 1:      'answer': '720',
825: 1:      'question': '6',
825: 1:      'valid': true
825: 1:    },
825: 1:    {
825: 1:      'answer': '5040',
825: 1:      'question': '7',
825: 1:      'valid': true
825: 1:    },
825: 1:    {
825: 1:      'answer': '40320',
825: 1:      'question': '8',
825: 1:      'valid': true
825: 1:    },
825: 1:    {
825: 1:      'answer': '362880',
825: 1:      'question': '9',
825: 1:      'valid': true
825: 1:    }
825: 1:  ],
825: 1:  'info': [
825: 1:    '✅f(1) = 1',
825: 1:    '✅f(2) = 2',
825: 1:    '✅f(3) = 6',
825: 1:    '✅f(4) = 24',
825: 1:    '✅f(5) = 120',
825: 1:    '✅f(6) = 720',
825: 1:    '✅f(7) = 5040',
825: 1:    '✅f(8) = 40320',
825: 1:    '✅f(9) = 362880',
825: 1:    '❌f(10) = ??? != 3628800'
825: 1:  ],
825: 1:  'level': 29,
825: 1:  'nextQuestion': '10',
825: 1:  'questions': [
825: 1:    '1',
825: 1:    '2',
825: 1:    '3',
825: 1:    '4',
825: 1:    '5',
825: 1:    '6',
825: 1:    '7',
825: 1:    '8',
825: 1:    '9',
825: 1:    '10'
825: 1:  ]
825: 1:}
825: 1:Scores: 83555
825: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800']')
825: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
826: 1:BoardData {
826: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
826: 1:  'expectedAnswer': '39916800',
826: 1:  'history': [
826: 1:    {
826: 1:      'answer': '1',
826: 1:      'question': '1',
826: 1:      'valid': true
826: 1:    },
826: 1:    {
826: 1:      'answer': '2',
826: 1:      'question': '2',
826: 1:      'valid': true
826: 1:    },
826: 1:    {
826: 1:      'answer': '6',
826: 1:      'question': '3',
826: 1:      'valid': true
826: 1:    },
826: 1:    {
826: 1:      'answer': '24',
826: 1:      'question': '4',
826: 1:      'valid': true
826: 1:    },
826: 1:    {
826: 1:      'answer': '120',
826: 1:      'question': '5',
826: 1:      'valid': true
826: 1:    },
826: 1:    {
826: 1:      'answer': '720',
826: 1:      'question': '6',
826: 1:      'valid': true
826: 1:    },
826: 1:    {
826: 1:      'answer': '5040',
826: 1:      'question': '7',
826: 1:      'valid': true
826: 1:    },
826: 1:    {
826: 1:      'answer': '40320',
826: 1:      'question': '8',
826: 1:      'valid': true
826: 1:    },
826: 1:    {
826: 1:      'answer': '362880',
826: 1:      'question': '9',
826: 1:      'valid': true
826: 1:    },
826: 1:    {
826: 1:      'answer': '3628800',
826: 1:      'question': '10',
826: 1:      'valid': true
826: 1:    }
826: 1:  ],
826: 1:  'info': [
826: 1:    '✅f(1) = 1',
826: 1:    '✅f(2) = 2',
826: 1:    '✅f(3) = 6',
826: 1:    '✅f(4) = 24',
826: 1:    '✅f(5) = 120',
826: 1:    '✅f(6) = 720',
826: 1:    '✅f(7) = 5040',
826: 1:    '✅f(8) = 40320',
826: 1:    '✅f(9) = 362880',
826: 1:    '✅f(10) = 3628800',
826: 1:    '❌f(11) = ??? != 39916800'
826: 1:  ],
826: 1:  'level': 29,
826: 1:  'nextQuestion': '11',
826: 1:  'questions': [
826: 1:    '1',
826: 1:    '2',
826: 1:    '3',
826: 1:    '4',
826: 1:    '5',
826: 1:    '6',
826: 1:    '7',
826: 1:    '8',
826: 1:    '9',
826: 1:    '10',
826: 1:    '11'
826: 1:  ]
826: 1:}
826: 1:Scores: 83571
826: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800']')
826: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
827: 1:BoardData {
827: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
827: 1:  'expectedAnswer': '479001600',
827: 1:  'history': [
827: 1:    {
827: 1:      'answer': '1',
827: 1:      'question': '1',
827: 1:      'valid': true
827: 1:    },
827: 1:    {
827: 1:      'answer': '2',
827: 1:      'question': '2',
827: 1:      'valid': true
827: 1:    },
827: 1:    {
827: 1:      'answer': '6',
827: 1:      'question': '3',
827: 1:      'valid': true
827: 1:    },
827: 1:    {
827: 1:      'answer': '24',
827: 1:      'question': '4',
827: 1:      'valid': true
827: 1:    },
827: 1:    {
827: 1:      'answer': '120',
827: 1:      'question': '5',
827: 1:      'valid': true
827: 1:    },
827: 1:    {
827: 1:      'answer': '720',
827: 1:      'question': '6',
827: 1:      'valid': true
827: 1:    },
827: 1:    {
827: 1:      'answer': '5040',
827: 1:      'question': '7',
827: 1:      'valid': true
827: 1:    },
827: 1:    {
827: 1:      'answer': '40320',
827: 1:      'question': '8',
827: 1:      'valid': true
827: 1:    },
827: 1:    {
827: 1:      'answer': '362880',
827: 1:      'question': '9',
827: 1:      'valid': true
827: 1:    },
827: 1:    {
827: 1:      'answer': '3628800',
827: 1:      'question': '10',
827: 1:      'valid': true
827: 1:    },
827: 1:    {
827: 1:      'answer': '39916800',
827: 1:      'question': '11',
827: 1:      'valid': true
827: 1:    }
827: 1:  ],
827: 1:  'info': [
827: 1:    '✅f(1) = 1',
827: 1:    '✅f(2) = 2',
827: 1:    '✅f(3) = 6',
827: 1:    '✅f(4) = 24',
827: 1:    '✅f(5) = 120',
827: 1:    '✅f(6) = 720',
827: 1:    '✅f(7) = 5040',
827: 1:    '✅f(8) = 40320',
827: 1:    '✅f(9) = 362880',
827: 1:    '✅f(10) = 3628800',
827: 1:    '✅f(11) = 39916800',
827: 1:    '❌f(12) = ??? != 479001600'
827: 1:  ],
827: 1:  'level': 29,
827: 1:  'nextQuestion': '12',
827: 1:  'questions': [
827: 1:    '1',
827: 1:    '2',
827: 1:    '3',
827: 1:    '4',
827: 1:    '5',
827: 1:    '6',
827: 1:    '7',
827: 1:    '8',
827: 1:    '9',
827: 1:    '10',
827: 1:    '11',
827: 1:    '12'
827: 1:  ]
827: 1:}
827: 1:Scores: 83587
827: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600']')
827: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
828: 1:BoardData {
828: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
828: 1:  'expectedAnswer': '6227020800',
828: 1:  'history': [
828: 1:    {
828: 1:      'answer': '1',
828: 1:      'question': '1',
828: 1:      'valid': true
828: 1:    },
828: 1:    {
828: 1:      'answer': '2',
828: 1:      'question': '2',
828: 1:      'valid': true
828: 1:    },
828: 1:    {
828: 1:      'answer': '6',
828: 1:      'question': '3',
828: 1:      'valid': true
828: 1:    },
828: 1:    {
828: 1:      'answer': '24',
828: 1:      'question': '4',
828: 1:      'valid': true
828: 1:    },
828: 1:    {
828: 1:      'answer': '120',
828: 1:      'question': '5',
828: 1:      'valid': true
828: 1:    },
828: 1:    {
828: 1:      'answer': '720',
828: 1:      'question': '6',
828: 1:      'valid': true
828: 1:    },
828: 1:    {
828: 1:      'answer': '5040',
828: 1:      'question': '7',
828: 1:      'valid': true
828: 1:    },
828: 1:    {
828: 1:      'answer': '40320',
828: 1:      'question': '8',
828: 1:      'valid': true
828: 1:    },
828: 1:    {
828: 1:      'answer': '362880',
828: 1:      'question': '9',
828: 1:      'valid': true
828: 1:    },
828: 1:    {
828: 1:      'answer': '3628800',
828: 1:      'question': '10',
828: 1:      'valid': true
828: 1:    },
828: 1:    {
828: 1:      'answer': '39916800',
828: 1:      'question': '11',
828: 1:      'valid': true
828: 1:    },
828: 1:    {
828: 1:      'answer': '479001600',
828: 1:      'question': '12',
828: 1:      'valid': true
828: 1:    }
828: 1:  ],
828: 1:  'info': [
828: 1:    '✅f(1) = 1',
828: 1:    '✅f(2) = 2',
828: 1:    '✅f(3) = 6',
828: 1:    '✅f(4) = 24',
828: 1:    '✅f(5) = 120',
828: 1:    '✅f(6) = 720',
828: 1:    '✅f(7) = 5040',
828: 1:    '✅f(8) = 40320',
828: 1:    '✅f(9) = 362880',
828: 1:    '✅f(10) = 3628800',
828: 1:    '✅f(11) = 39916800',
828: 1:    '✅f(12) = 479001600',
828: 1:    '❌f(13) = ??? != 6227020800'
828: 1:  ],
828: 1:  'level': 29,
828: 1:  'nextQuestion': '13',
828: 1:  'questions': [
828: 1:    '1',
828: 1:    '2',
828: 1:    '3',
828: 1:    '4',
828: 1:    '5',
828: 1:    '6',
828: 1:    '7',
828: 1:    '8',
828: 1:    '9',
828: 1:    '10',
828: 1:    '11',
828: 1:    '12',
828: 1:    '13'
828: 1:  ]
828: 1:}
828: 1:Scores: 83603
828: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800']')
828: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
829: 1:BoardData {
829: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
829: 1:  'expectedAnswer': '87178291200',
829: 1:  'history': [
829: 1:    {
829: 1:      'answer': '1',
829: 1:      'question': '1',
829: 1:      'valid': true
829: 1:    },
829: 1:    {
829: 1:      'answer': '2',
829: 1:      'question': '2',
829: 1:      'valid': true
829: 1:    },
829: 1:    {
829: 1:      'answer': '6',
829: 1:      'question': '3',
829: 1:      'valid': true
829: 1:    },
829: 1:    {
829: 1:      'answer': '24',
829: 1:      'question': '4',
829: 1:      'valid': true
829: 1:    },
829: 1:    {
829: 1:      'answer': '120',
829: 1:      'question': '5',
829: 1:      'valid': true
829: 1:    },
829: 1:    {
829: 1:      'answer': '720',
829: 1:      'question': '6',
829: 1:      'valid': true
829: 1:    },
829: 1:    {
829: 1:      'answer': '5040',
829: 1:      'question': '7',
829: 1:      'valid': true
829: 1:    },
829: 1:    {
829: 1:      'answer': '40320',
829: 1:      'question': '8',
829: 1:      'valid': true
829: 1:    },
829: 1:    {
829: 1:      'answer': '362880',
829: 1:      'question': '9',
829: 1:      'valid': true
829: 1:    },
829: 1:    {
829: 1:      'answer': '3628800',
829: 1:      'question': '10',
829: 1:      'valid': true
829: 1:    },
829: 1:    {
829: 1:      'answer': '39916800',
829: 1:      'question': '11',
829: 1:      'valid': true
829: 1:    },
829: 1:    {
829: 1:      'answer': '479001600',
829: 1:      'question': '12',
829: 1:      'valid': true
829: 1:    },
829: 1:    {
829: 1:      'answer': '6227020800',
829: 1:      'question': '13',
829: 1:      'valid': true
829: 1:    }
829: 1:  ],
829: 1:  'info': [
829: 1:    '✅f(1) = 1',
829: 1:    '✅f(2) = 2',
829: 1:    '✅f(3) = 6',
829: 1:    '✅f(4) = 24',
829: 1:    '✅f(5) = 120',
829: 1:    '✅f(6) = 720',
829: 1:    '✅f(7) = 5040',
829: 1:    '✅f(8) = 40320',
829: 1:    '✅f(9) = 362880',
829: 1:    '✅f(10) = 3628800',
829: 1:    '✅f(11) = 39916800',
829: 1:    '✅f(12) = 479001600',
829: 1:    '✅f(13) = 6227020800',
829: 1:    '❌f(14) = ??? != 87178291200'
829: 1:  ],
829: 1:  'level': 29,
829: 1:  'nextQuestion': '14',
829: 1:  'questions': [
829: 1:    '1',
829: 1:    '2',
829: 1:    '3',
829: 1:    '4',
829: 1:    '5',
829: 1:    '6',
829: 1:    '7',
829: 1:    '8',
829: 1:    '9',
829: 1:    '10',
829: 1:    '11',
829: 1:    '12',
829: 1:    '13',
829: 1:    '14'
829: 1:  ]
829: 1:}
829: 1:Scores: 83619
829: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200']')
829: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
830: 1:BoardData {
830: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
830: 1:  'expectedAnswer': '1307674368000',
830: 1:  'history': [
830: 1:    {
830: 1:      'answer': '1',
830: 1:      'question': '1',
830: 1:      'valid': true
830: 1:    },
830: 1:    {
830: 1:      'answer': '2',
830: 1:      'question': '2',
830: 1:      'valid': true
830: 1:    },
830: 1:    {
830: 1:      'answer': '6',
830: 1:      'question': '3',
830: 1:      'valid': true
830: 1:    },
830: 1:    {
830: 1:      'answer': '24',
830: 1:      'question': '4',
830: 1:      'valid': true
830: 1:    },
830: 1:    {
830: 1:      'answer': '120',
830: 1:      'question': '5',
830: 1:      'valid': true
830: 1:    },
830: 1:    {
830: 1:      'answer': '720',
830: 1:      'question': '6',
830: 1:      'valid': true
830: 1:    },
830: 1:    {
830: 1:      'answer': '5040',
830: 1:      'question': '7',
830: 1:      'valid': true
830: 1:    },
830: 1:    {
830: 1:      'answer': '40320',
830: 1:      'question': '8',
830: 1:      'valid': true
830: 1:    },
830: 1:    {
830: 1:      'answer': '362880',
830: 1:      'question': '9',
830: 1:      'valid': true
830: 1:    },
830: 1:    {
830: 1:      'answer': '3628800',
830: 1:      'question': '10',
830: 1:      'valid': true
830: 1:    },
830: 1:    {
830: 1:      'answer': '39916800',
830: 1:      'question': '11',
830: 1:      'valid': true
830: 1:    },
830: 1:    {
830: 1:      'answer': '479001600',
830: 1:      'question': '12',
830: 1:      'valid': true
830: 1:    },
830: 1:    {
830: 1:      'answer': '6227020800',
830: 1:      'question': '13',
830: 1:      'valid': true
830: 1:    },
830: 1:    {
830: 1:      'answer': '87178291200',
830: 1:      'question': '14',
830: 1:      'valid': true
830: 1:    }
830: 1:  ],
830: 1:  'info': [
830: 1:    '✅f(1) = 1',
830: 1:    '✅f(2) = 2',
830: 1:    '✅f(3) = 6',
830: 1:    '✅f(4) = 24',
830: 1:    '✅f(5) = 120',
830: 1:    '✅f(6) = 720',
830: 1:    '✅f(7) = 5040',
830: 1:    '✅f(8) = 40320',
830: 1:    '✅f(9) = 362880',
830: 1:    '✅f(10) = 3628800',
830: 1:    '✅f(11) = 39916800',
830: 1:    '✅f(12) = 479001600',
830: 1:    '✅f(13) = 6227020800',
830: 1:    '✅f(14) = 87178291200',
830: 1:    '❌f(15) = ??? != 1307674368000'
830: 1:  ],
830: 1:  'level': 29,
830: 1:  'nextQuestion': '15',
830: 1:  'questions': [
830: 1:    '1',
830: 1:    '2',
830: 1:    '3',
830: 1:    '4',
830: 1:    '5',
830: 1:    '6',
830: 1:    '7',
830: 1:    '8',
830: 1:    '9',
830: 1:    '10',
830: 1:    '11',
830: 1:    '12',
830: 1:    '13',
830: 1:    '14',
830: 1:    '15'
830: 1:  ]
830: 1:}
830: 1:Scores: 83635
830: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000']')
830: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
831: 1:BoardData {
831: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
831: 1:  'expectedAnswer': '20922789888000',
831: 1:  'history': [
831: 1:    {
831: 1:      'answer': '1',
831: 1:      'question': '1',
831: 1:      'valid': true
831: 1:    },
831: 1:    {
831: 1:      'answer': '2',
831: 1:      'question': '2',
831: 1:      'valid': true
831: 1:    },
831: 1:    {
831: 1:      'answer': '6',
831: 1:      'question': '3',
831: 1:      'valid': true
831: 1:    },
831: 1:    {
831: 1:      'answer': '24',
831: 1:      'question': '4',
831: 1:      'valid': true
831: 1:    },
831: 1:    {
831: 1:      'answer': '120',
831: 1:      'question': '5',
831: 1:      'valid': true
831: 1:    },
831: 1:    {
831: 1:      'answer': '720',
831: 1:      'question': '6',
831: 1:      'valid': true
831: 1:    },
831: 1:    {
831: 1:      'answer': '5040',
831: 1:      'question': '7',
831: 1:      'valid': true
831: 1:    },
831: 1:    {
831: 1:      'answer': '40320',
831: 1:      'question': '8',
831: 1:      'valid': true
831: 1:    },
831: 1:    {
831: 1:      'answer': '362880',
831: 1:      'question': '9',
831: 1:      'valid': true
831: 1:    },
831: 1:    {
831: 1:      'answer': '3628800',
831: 1:      'question': '10',
831: 1:      'valid': true
831: 1:    },
831: 1:    {
831: 1:      'answer': '39916800',
831: 1:      'question': '11',
831: 1:      'valid': true
831: 1:    },
831: 1:    {
831: 1:      'answer': '479001600',
831: 1:      'question': '12',
831: 1:      'valid': true
831: 1:    },
831: 1:    {
831: 1:      'answer': '6227020800',
831: 1:      'question': '13',
831: 1:      'valid': true
831: 1:    },
831: 1:    {
831: 1:      'answer': '87178291200',
831: 1:      'question': '14',
831: 1:      'valid': true
831: 1:    },
831: 1:    {
831: 1:      'answer': '1307674368000',
831: 1:      'question': '15',
831: 1:      'valid': true
831: 1:    }
831: 1:  ],
831: 1:  'info': [
831: 1:    '✅f(1) = 1',
831: 1:    '✅f(2) = 2',
831: 1:    '✅f(3) = 6',
831: 1:    '✅f(4) = 24',
831: 1:    '✅f(5) = 120',
831: 1:    '✅f(6) = 720',
831: 1:    '✅f(7) = 5040',
831: 1:    '✅f(8) = 40320',
831: 1:    '✅f(9) = 362880',
831: 1:    '✅f(10) = 3628800',
831: 1:    '✅f(11) = 39916800',
831: 1:    '✅f(12) = 479001600',
831: 1:    '✅f(13) = 6227020800',
831: 1:    '✅f(14) = 87178291200',
831: 1:    '✅f(15) = 1307674368000',
831: 1:    '❌f(16) = ??? != 20922789888000'
831: 1:  ],
831: 1:  'level': 29,
831: 1:  'nextQuestion': '16',
831: 1:  'questions': [
831: 1:    '1',
831: 1:    '2',
831: 1:    '3',
831: 1:    '4',
831: 1:    '5',
831: 1:    '6',
831: 1:    '7',
831: 1:    '8',
831: 1:    '9',
831: 1:    '10',
831: 1:    '11',
831: 1:    '12',
831: 1:    '13',
831: 1:    '14',
831: 1:    '15',
831: 1:    '16'
831: 1:  ]
831: 1:}
831: 1:Scores: 83651
831: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000']')
831: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
832: 1:BoardData {
832: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
832: 1:  'expectedAnswer': '355687428096000',
832: 1:  'history': [
832: 1:    {
832: 1:      'answer': '1',
832: 1:      'question': '1',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '2',
832: 1:      'question': '2',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '6',
832: 1:      'question': '3',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '24',
832: 1:      'question': '4',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '120',
832: 1:      'question': '5',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '720',
832: 1:      'question': '6',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '5040',
832: 1:      'question': '7',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '40320',
832: 1:      'question': '8',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '362880',
832: 1:      'question': '9',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '3628800',
832: 1:      'question': '10',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '39916800',
832: 1:      'question': '11',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '479001600',
832: 1:      'question': '12',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '6227020800',
832: 1:      'question': '13',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '87178291200',
832: 1:      'question': '14',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '1307674368000',
832: 1:      'question': '15',
832: 1:      'valid': true
832: 1:    },
832: 1:    {
832: 1:      'answer': '20922789888000',
832: 1:      'question': '16',
832: 1:      'valid': true
832: 1:    }
832: 1:  ],
832: 1:  'info': [
832: 1:    '✅f(1) = 1',
832: 1:    '✅f(2) = 2',
832: 1:    '✅f(3) = 6',
832: 1:    '✅f(4) = 24',
832: 1:    '✅f(5) = 120',
832: 1:    '✅f(6) = 720',
832: 1:    '✅f(7) = 5040',
832: 1:    '✅f(8) = 40320',
832: 1:    '✅f(9) = 362880',
832: 1:    '✅f(10) = 3628800',
832: 1:    '✅f(11) = 39916800',
832: 1:    '✅f(12) = 479001600',
832: 1:    '✅f(13) = 6227020800',
832: 1:    '✅f(14) = 87178291200',
832: 1:    '✅f(15) = 1307674368000',
832: 1:    '✅f(16) = 20922789888000',
832: 1:    '❌f(17) = ??? != 355687428096000'
832: 1:  ],
832: 1:  'level': 29,
832: 1:  'nextQuestion': '17',
832: 1:  'questions': [
832: 1:    '1',
832: 1:    '2',
832: 1:    '3',
832: 1:    '4',
832: 1:    '5',
832: 1:    '6',
832: 1:    '7',
832: 1:    '8',
832: 1:    '9',
832: 1:    '10',
832: 1:    '11',
832: 1:    '12',
832: 1:    '13',
832: 1:    '14',
832: 1:    '15',
832: 1:    '16',
832: 1:    '17'
832: 1:  ]
832: 1:}
832: 1:Scores: 83667
832: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000', '355687428096000']')
832: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
833: 1:BoardData {
833: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
833: 1:  'expectedAnswer': '6402373705728000',
833: 1:  'history': [
833: 1:    {
833: 1:      'answer': '1',
833: 1:      'question': '1',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '2',
833: 1:      'question': '2',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '6',
833: 1:      'question': '3',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '24',
833: 1:      'question': '4',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '120',
833: 1:      'question': '5',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '720',
833: 1:      'question': '6',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '5040',
833: 1:      'question': '7',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '40320',
833: 1:      'question': '8',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '362880',
833: 1:      'question': '9',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '3628800',
833: 1:      'question': '10',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '39916800',
833: 1:      'question': '11',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '479001600',
833: 1:      'question': '12',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '6227020800',
833: 1:      'question': '13',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '87178291200',
833: 1:      'question': '14',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '1307674368000',
833: 1:      'question': '15',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '20922789888000',
833: 1:      'question': '16',
833: 1:      'valid': true
833: 1:    },
833: 1:    {
833: 1:      'answer': '355687428096000',
833: 1:      'question': '17',
833: 1:      'valid': true
833: 1:    }
833: 1:  ],
833: 1:  'info': [
833: 1:    '✅f(1) = 1',
833: 1:    '✅f(2) = 2',
833: 1:    '✅f(3) = 6',
833: 1:    '✅f(4) = 24',
833: 1:    '✅f(5) = 120',
833: 1:    '✅f(6) = 720',
833: 1:    '✅f(7) = 5040',
833: 1:    '✅f(8) = 40320',
833: 1:    '✅f(9) = 362880',
833: 1:    '✅f(10) = 3628800',
833: 1:    '✅f(11) = 39916800',
833: 1:    '✅f(12) = 479001600',
833: 1:    '✅f(13) = 6227020800',
833: 1:    '✅f(14) = 87178291200',
833: 1:    '✅f(15) = 1307674368000',
833: 1:    '✅f(16) = 20922789888000',
833: 1:    '✅f(17) = 355687428096000',
833: 1:    '❌f(18) = ??? != 6402373705728000'
833: 1:  ],
833: 1:  'level': 29,
833: 1:  'nextQuestion': '18',
833: 1:  'questions': [
833: 1:    '1',
833: 1:    '2',
833: 1:    '3',
833: 1:    '4',
833: 1:    '5',
833: 1:    '6',
833: 1:    '7',
833: 1:    '8',
833: 1:    '9',
833: 1:    '10',
833: 1:    '11',
833: 1:    '12',
833: 1:    '13',
833: 1:    '14',
833: 1:    '15',
833: 1:    '16',
833: 1:    '17',
833: 1:    '18'
833: 1:  ]
833: 1:}
833: 1:Scores: 83683
833: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000', '355687428096000', '6402373705728000']')
833: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
834: 1:BoardData {
834: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
834: 1:  'expectedAnswer': '121645100408832000',
834: 1:  'history': [
834: 1:    {
834: 1:      'answer': '1',
834: 1:      'question': '1',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '2',
834: 1:      'question': '2',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '6',
834: 1:      'question': '3',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '24',
834: 1:      'question': '4',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '120',
834: 1:      'question': '5',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '720',
834: 1:      'question': '6',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '5040',
834: 1:      'question': '7',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '40320',
834: 1:      'question': '8',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '362880',
834: 1:      'question': '9',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '3628800',
834: 1:      'question': '10',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '39916800',
834: 1:      'question': '11',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '479001600',
834: 1:      'question': '12',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '6227020800',
834: 1:      'question': '13',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '87178291200',
834: 1:      'question': '14',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '1307674368000',
834: 1:      'question': '15',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '20922789888000',
834: 1:      'question': '16',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '355687428096000',
834: 1:      'question': '17',
834: 1:      'valid': true
834: 1:    },
834: 1:    {
834: 1:      'answer': '6402373705728000',
834: 1:      'question': '18',
834: 1:      'valid': true
834: 1:    }
834: 1:  ],
834: 1:  'info': [
834: 1:    '✅f(1) = 1',
834: 1:    '✅f(2) = 2',
834: 1:    '✅f(3) = 6',
834: 1:    '✅f(4) = 24',
834: 1:    '✅f(5) = 120',
834: 1:    '✅f(6) = 720',
834: 1:    '✅f(7) = 5040',
834: 1:    '✅f(8) = 40320',
834: 1:    '✅f(9) = 362880',
834: 1:    '✅f(10) = 3628800',
834: 1:    '✅f(11) = 39916800',
834: 1:    '✅f(12) = 479001600',
834: 1:    '✅f(13) = 6227020800',
834: 1:    '✅f(14) = 87178291200',
834: 1:    '✅f(15) = 1307674368000',
834: 1:    '✅f(16) = 20922789888000',
834: 1:    '✅f(17) = 355687428096000',
834: 1:    '✅f(18) = 6402373705728000',
834: 1:    '❌f(19) = ??? != 121645100408832000'
834: 1:  ],
834: 1:  'level': 29,
834: 1:  'nextQuestion': '19',
834: 1:  'questions': [
834: 1:    '1',
834: 1:    '2',
834: 1:    '3',
834: 1:    '4',
834: 1:    '5',
834: 1:    '6',
834: 1:    '7',
834: 1:    '8',
834: 1:    '9',
834: 1:    '10',
834: 1:    '11',
834: 1:    '12',
834: 1:    '13',
834: 1:    '14',
834: 1:    '15',
834: 1:    '16',
834: 1:    '17',
834: 1:    '18',
834: 1:    '19'
834: 1:  ]
834: 1:}
834: 1:Scores: 83699
834: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000', '355687428096000', '6402373705728000', '121645100408832000']')
834: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
835: 1:BoardData {
835: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
835: 1:  'expectedAnswer': '2432902008176640000',
835: 1:  'history': [
835: 1:    {
835: 1:      'answer': '1',
835: 1:      'question': '1',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '2',
835: 1:      'question': '2',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '6',
835: 1:      'question': '3',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '24',
835: 1:      'question': '4',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '120',
835: 1:      'question': '5',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '720',
835: 1:      'question': '6',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '5040',
835: 1:      'question': '7',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '40320',
835: 1:      'question': '8',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '362880',
835: 1:      'question': '9',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '3628800',
835: 1:      'question': '10',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '39916800',
835: 1:      'question': '11',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '479001600',
835: 1:      'question': '12',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '6227020800',
835: 1:      'question': '13',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '87178291200',
835: 1:      'question': '14',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '1307674368000',
835: 1:      'question': '15',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '20922789888000',
835: 1:      'question': '16',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '355687428096000',
835: 1:      'question': '17',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '6402373705728000',
835: 1:      'question': '18',
835: 1:      'valid': true
835: 1:    },
835: 1:    {
835: 1:      'answer': '121645100408832000',
835: 1:      'question': '19',
835: 1:      'valid': true
835: 1:    }
835: 1:  ],
835: 1:  'info': [
835: 1:    '✅f(1) = 1',
835: 1:    '✅f(2) = 2',
835: 1:    '✅f(3) = 6',
835: 1:    '✅f(4) = 24',
835: 1:    '✅f(5) = 120',
835: 1:    '✅f(6) = 720',
835: 1:    '✅f(7) = 5040',
835: 1:    '✅f(8) = 40320',
835: 1:    '✅f(9) = 362880',
835: 1:    '✅f(10) = 3628800',
835: 1:    '✅f(11) = 39916800',
835: 1:    '✅f(12) = 479001600',
835: 1:    '✅f(13) = 6227020800',
835: 1:    '✅f(14) = 87178291200',
835: 1:    '✅f(15) = 1307674368000',
835: 1:    '✅f(16) = 20922789888000',
835: 1:    '✅f(17) = 355687428096000',
835: 1:    '✅f(18) = 6402373705728000',
835: 1:    '✅f(19) = 121645100408832000',
835: 1:    '❌f(20) = ??? != 2432902008176640000'
835: 1:  ],
835: 1:  'level': 29,
835: 1:  'nextQuestion': '20',
835: 1:  'questions': [
835: 1:    '1',
835: 1:    '2',
835: 1:    '3',
835: 1:    '4',
835: 1:    '5',
835: 1:    '6',
835: 1:    '7',
835: 1:    '8',
835: 1:    '9',
835: 1:    '10',
835: 1:    '11',
835: 1:    '12',
835: 1:    '13',
835: 1:    '14',
835: 1:    '15',
835: 1:    '16',
835: 1:    '17',
835: 1:    '18',
835: 1:    '19',
835: 1:    '20'
835: 1:  ]
835: 1:}
835: 1:Scores: 83715
835: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000', '355687428096000', '6402373705728000', '121645100408832000', '2432902008176640000']')
835: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
836: 1:BoardData {
836: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
836: 1:  'expectedAnswer': '51090942171709440000',
836: 1:  'history': [
836: 1:    {
836: 1:      'answer': '1',
836: 1:      'question': '1',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '2',
836: 1:      'question': '2',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '6',
836: 1:      'question': '3',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '24',
836: 1:      'question': '4',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '120',
836: 1:      'question': '5',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '720',
836: 1:      'question': '6',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '5040',
836: 1:      'question': '7',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '40320',
836: 1:      'question': '8',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '362880',
836: 1:      'question': '9',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '3628800',
836: 1:      'question': '10',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '39916800',
836: 1:      'question': '11',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '479001600',
836: 1:      'question': '12',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '6227020800',
836: 1:      'question': '13',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '87178291200',
836: 1:      'question': '14',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '1307674368000',
836: 1:      'question': '15',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '20922789888000',
836: 1:      'question': '16',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '355687428096000',
836: 1:      'question': '17',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '6402373705728000',
836: 1:      'question': '18',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '121645100408832000',
836: 1:      'question': '19',
836: 1:      'valid': true
836: 1:    },
836: 1:    {
836: 1:      'answer': '2432902008176640000',
836: 1:      'question': '20',
836: 1:      'valid': true
836: 1:    }
836: 1:  ],
836: 1:  'info': [
836: 1:    '✅f(1) = 1',
836: 1:    '✅f(2) = 2',
836: 1:    '✅f(3) = 6',
836: 1:    '✅f(4) = 24',
836: 1:    '✅f(5) = 120',
836: 1:    '✅f(6) = 720',
836: 1:    '✅f(7) = 5040',
836: 1:    '✅f(8) = 40320',
836: 1:    '✅f(9) = 362880',
836: 1:    '✅f(10) = 3628800',
836: 1:    '✅f(11) = 39916800',
836: 1:    '✅f(12) = 479001600',
836: 1:    '✅f(13) = 6227020800',
836: 1:    '✅f(14) = 87178291200',
836: 1:    '✅f(15) = 1307674368000',
836: 1:    '✅f(16) = 20922789888000',
836: 1:    '✅f(17) = 355687428096000',
836: 1:    '✅f(18) = 6402373705728000',
836: 1:    '✅f(19) = 121645100408832000',
836: 1:    '✅f(20) = 2432902008176640000',
836: 1:    '❌f(21) = ??? != 51090942171709440000'
836: 1:  ],
836: 1:  'level': 29,
836: 1:  'nextQuestion': '21',
836: 1:  'questions': [
836: 1:    '1',
836: 1:    '2',
836: 1:    '3',
836: 1:    '4',
836: 1:    '5',
836: 1:    '6',
836: 1:    '7',
836: 1:    '8',
836: 1:    '9',
836: 1:    '10',
836: 1:    '11',
836: 1:    '12',
836: 1:    '13',
836: 1:    '14',
836: 1:    '15',
836: 1:    '16',
836: 1:    '17',
836: 1:    '18',
836: 1:    '19',
836: 1:    '20',
836: 1:    '21'
836: 1:  ]
836: 1:}
836: 1:Scores: 83731
836: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000', '355687428096000', '6402373705728000', '121645100408832000', '2432902008176640000', '51090942171709440000']')
836: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
837: 1:BoardData {
837: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
837: 1:  'expectedAnswer': '1124000727777607680000',
837: 1:  'history': [
837: 1:    {
837: 1:      'answer': '1',
837: 1:      'question': '1',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '2',
837: 1:      'question': '2',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '6',
837: 1:      'question': '3',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '24',
837: 1:      'question': '4',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '120',
837: 1:      'question': '5',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '720',
837: 1:      'question': '6',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '5040',
837: 1:      'question': '7',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '40320',
837: 1:      'question': '8',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '362880',
837: 1:      'question': '9',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '3628800',
837: 1:      'question': '10',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '39916800',
837: 1:      'question': '11',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '479001600',
837: 1:      'question': '12',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '6227020800',
837: 1:      'question': '13',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '87178291200',
837: 1:      'question': '14',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '1307674368000',
837: 1:      'question': '15',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '20922789888000',
837: 1:      'question': '16',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '355687428096000',
837: 1:      'question': '17',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '6402373705728000',
837: 1:      'question': '18',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '121645100408832000',
837: 1:      'question': '19',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '2432902008176640000',
837: 1:      'question': '20',
837: 1:      'valid': true
837: 1:    },
837: 1:    {
837: 1:      'answer': '51090942171709440000',
837: 1:      'question': '21',
837: 1:      'valid': true
837: 1:    }
837: 1:  ],
837: 1:  'info': [
837: 1:    '✅f(1) = 1',
837: 1:    '✅f(2) = 2',
837: 1:    '✅f(3) = 6',
837: 1:    '✅f(4) = 24',
837: 1:    '✅f(5) = 120',
837: 1:    '✅f(6) = 720',
837: 1:    '✅f(7) = 5040',
837: 1:    '✅f(8) = 40320',
837: 1:    '✅f(9) = 362880',
837: 1:    '✅f(10) = 3628800',
837: 1:    '✅f(11) = 39916800',
837: 1:    '✅f(12) = 479001600',
837: 1:    '✅f(13) = 6227020800',
837: 1:    '✅f(14) = 87178291200',
837: 1:    '✅f(15) = 1307674368000',
837: 1:    '✅f(16) = 20922789888000',
837: 1:    '✅f(17) = 355687428096000',
837: 1:    '✅f(18) = 6402373705728000',
837: 1:    '✅f(19) = 121645100408832000',
837: 1:    '✅f(20) = 2432902008176640000',
837: 1:    '✅f(21) = 51090942171709440000',
837: 1:    '❌f(22) = ??? != 1124000727777607680000'
837: 1:  ],
837: 1:  'level': 29,
837: 1:  'nextQuestion': '22',
837: 1:  'questions': [
837: 1:    '1',
837: 1:    '2',
837: 1:    '3',
837: 1:    '4',
837: 1:    '5',
837: 1:    '6',
837: 1:    '7',
837: 1:    '8',
837: 1:    '9',
837: 1:    '10',
837: 1:    '11',
837: 1:    '12',
837: 1:    '13',
837: 1:    '14',
837: 1:    '15',
837: 1:    '16',
837: 1:    '17',
837: 1:    '18',
837: 1:    '19',
837: 1:    '20',
837: 1:    '21',
837: 1:    '22'
837: 1:  ]
837: 1:}
837: 1:Scores: 83747
837: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000', '355687428096000', '6402373705728000', '121645100408832000', '2432902008176640000', '51090942171709440000', '1124000727777607680000']')
837: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
838: 1:BoardData {
838: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
838: 1:  'expectedAnswer': '25852016738884976640000',
838: 1:  'history': [
838: 1:    {
838: 1:      'answer': '1',
838: 1:      'question': '1',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '2',
838: 1:      'question': '2',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '6',
838: 1:      'question': '3',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '24',
838: 1:      'question': '4',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '120',
838: 1:      'question': '5',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '720',
838: 1:      'question': '6',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '5040',
838: 1:      'question': '7',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '40320',
838: 1:      'question': '8',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '362880',
838: 1:      'question': '9',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '3628800',
838: 1:      'question': '10',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '39916800',
838: 1:      'question': '11',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '479001600',
838: 1:      'question': '12',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '6227020800',
838: 1:      'question': '13',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '87178291200',
838: 1:      'question': '14',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '1307674368000',
838: 1:      'question': '15',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '20922789888000',
838: 1:      'question': '16',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '355687428096000',
838: 1:      'question': '17',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '6402373705728000',
838: 1:      'question': '18',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '121645100408832000',
838: 1:      'question': '19',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '2432902008176640000',
838: 1:      'question': '20',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '51090942171709440000',
838: 1:      'question': '21',
838: 1:      'valid': true
838: 1:    },
838: 1:    {
838: 1:      'answer': '1124000727777607680000',
838: 1:      'question': '22',
838: 1:      'valid': true
838: 1:    }
838: 1:  ],
838: 1:  'info': [
838: 1:    '✅f(1) = 1',
838: 1:    '✅f(2) = 2',
838: 1:    '✅f(3) = 6',
838: 1:    '✅f(4) = 24',
838: 1:    '✅f(5) = 120',
838: 1:    '✅f(6) = 720',
838: 1:    '✅f(7) = 5040',
838: 1:    '✅f(8) = 40320',
838: 1:    '✅f(9) = 362880',
838: 1:    '✅f(10) = 3628800',
838: 1:    '✅f(11) = 39916800',
838: 1:    '✅f(12) = 479001600',
838: 1:    '✅f(13) = 6227020800',
838: 1:    '✅f(14) = 87178291200',
838: 1:    '✅f(15) = 1307674368000',
838: 1:    '✅f(16) = 20922789888000',
838: 1:    '✅f(17) = 355687428096000',
838: 1:    '✅f(18) = 6402373705728000',
838: 1:    '✅f(19) = 121645100408832000',
838: 1:    '✅f(20) = 2432902008176640000',
838: 1:    '✅f(21) = 51090942171709440000',
838: 1:    '✅f(22) = 1124000727777607680000',
838: 1:    '❌f(23) = ??? != 25852016738884976640000'
838: 1:  ],
838: 1:  'level': 29,
838: 1:  'nextQuestion': '23',
838: 1:  'questions': [
838: 1:    '1',
838: 1:    '2',
838: 1:    '3',
838: 1:    '4',
838: 1:    '5',
838: 1:    '6',
838: 1:    '7',
838: 1:    '8',
838: 1:    '9',
838: 1:    '10',
838: 1:    '11',
838: 1:    '12',
838: 1:    '13',
838: 1:    '14',
838: 1:    '15',
838: 1:    '16',
838: 1:    '17',
838: 1:    '18',
838: 1:    '19',
838: 1:    '20',
838: 1:    '21',
838: 1:    '22',
838: 1:    '23'
838: 1:  ]
838: 1:}
838: 1:Scores: 83763
838: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000', '355687428096000', '6402373705728000', '121645100408832000', '2432902008176640000', '51090942171709440000', '1124000727777607680000', '25852016738884976640000']')
838: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
839: 1:BoardData {
839: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
839: 1:  'expectedAnswer': '620448401733239439360000',
839: 1:  'history': [
839: 1:    {
839: 1:      'answer': '1',
839: 1:      'question': '1',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '2',
839: 1:      'question': '2',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '6',
839: 1:      'question': '3',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '24',
839: 1:      'question': '4',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '120',
839: 1:      'question': '5',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '720',
839: 1:      'question': '6',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '5040',
839: 1:      'question': '7',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '40320',
839: 1:      'question': '8',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '362880',
839: 1:      'question': '9',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '3628800',
839: 1:      'question': '10',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '39916800',
839: 1:      'question': '11',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '479001600',
839: 1:      'question': '12',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '6227020800',
839: 1:      'question': '13',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '87178291200',
839: 1:      'question': '14',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '1307674368000',
839: 1:      'question': '15',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '20922789888000',
839: 1:      'question': '16',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '355687428096000',
839: 1:      'question': '17',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '6402373705728000',
839: 1:      'question': '18',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '121645100408832000',
839: 1:      'question': '19',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '2432902008176640000',
839: 1:      'question': '20',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '51090942171709440000',
839: 1:      'question': '21',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '1124000727777607680000',
839: 1:      'question': '22',
839: 1:      'valid': true
839: 1:    },
839: 1:    {
839: 1:      'answer': '25852016738884976640000',
839: 1:      'question': '23',
839: 1:      'valid': true
839: 1:    }
839: 1:  ],
839: 1:  'info': [
839: 1:    '✅f(1) = 1',
839: 1:    '✅f(2) = 2',
839: 1:    '✅f(3) = 6',
839: 1:    '✅f(4) = 24',
839: 1:    '✅f(5) = 120',
839: 1:    '✅f(6) = 720',
839: 1:    '✅f(7) = 5040',
839: 1:    '✅f(8) = 40320',
839: 1:    '✅f(9) = 362880',
839: 1:    '✅f(10) = 3628800',
839: 1:    '✅f(11) = 39916800',
839: 1:    '✅f(12) = 479001600',
839: 1:    '✅f(13) = 6227020800',
839: 1:    '✅f(14) = 87178291200',
839: 1:    '✅f(15) = 1307674368000',
839: 1:    '✅f(16) = 20922789888000',
839: 1:    '✅f(17) = 355687428096000',
839: 1:    '✅f(18) = 6402373705728000',
839: 1:    '✅f(19) = 121645100408832000',
839: 1:    '✅f(20) = 2432902008176640000',
839: 1:    '✅f(21) = 51090942171709440000',
839: 1:    '✅f(22) = 1124000727777607680000',
839: 1:    '✅f(23) = 25852016738884976640000',
839: 1:    '❌f(24) = ??? != 620448401733239439360000'
839: 1:  ],
839: 1:  'level': 29,
839: 1:  'nextQuestion': '24',
839: 1:  'questions': [
839: 1:    '1',
839: 1:    '2',
839: 1:    '3',
839: 1:    '4',
839: 1:    '5',
839: 1:    '6',
839: 1:    '7',
839: 1:    '8',
839: 1:    '9',
839: 1:    '10',
839: 1:    '11',
839: 1:    '12',
839: 1:    '13',
839: 1:    '14',
839: 1:    '15',
839: 1:    '16',
839: 1:    '17',
839: 1:    '18',
839: 1:    '19',
839: 1:    '20',
839: 1:    '21',
839: 1:    '22',
839: 1:    '23',
839: 1:    '24'
839: 1:  ]
839: 1:}
839: 1:Scores: 83779
839: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000', '355687428096000', '6402373705728000', '121645100408832000', '2432902008176640000', '51090942171709440000', '1124000727777607680000', '25852016738884976640000', '620448401733239439360000']')
839: 1:Fire Event: PassTest{complexity=42, testCount=25}
------------------------------------------
840: 1:BoardData {
840: 1:  'description': ['Write a method that takes one int argument and that returns the factorial of that number as a String.\nWarning: Int/long overflow is possible.'],
840: 1:  'expectedAnswer': '15511210043330985984000000',
840: 1:  'history': [
840: 1:    {
840: 1:      'answer': '1',
840: 1:      'question': '1',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '2',
840: 1:      'question': '2',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '6',
840: 1:      'question': '3',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '24',
840: 1:      'question': '4',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '120',
840: 1:      'question': '5',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '720',
840: 1:      'question': '6',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '5040',
840: 1:      'question': '7',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '40320',
840: 1:      'question': '8',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '362880',
840: 1:      'question': '9',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '3628800',
840: 1:      'question': '10',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '39916800',
840: 1:      'question': '11',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '479001600',
840: 1:      'question': '12',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '6227020800',
840: 1:      'question': '13',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '87178291200',
840: 1:      'question': '14',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '1307674368000',
840: 1:      'question': '15',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '20922789888000',
840: 1:      'question': '16',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '355687428096000',
840: 1:      'question': '17',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '6402373705728000',
840: 1:      'question': '18',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '121645100408832000',
840: 1:      'question': '19',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '2432902008176640000',
840: 1:      'question': '20',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '51090942171709440000',
840: 1:      'question': '21',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '1124000727777607680000',
840: 1:      'question': '22',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '25852016738884976640000',
840: 1:      'question': '23',
840: 1:      'valid': true
840: 1:    },
840: 1:    {
840: 1:      'answer': '620448401733239439360000',
840: 1:      'question': '24',
840: 1:      'valid': true
840: 1:    }
840: 1:  ],
840: 1:  'info': [
840: 1:    '✅f(1) = 1',
840: 1:    '✅f(2) = 2',
840: 1:    '✅f(3) = 6',
840: 1:    '✅f(4) = 24',
840: 1:    '✅f(5) = 120',
840: 1:    '✅f(6) = 720',
840: 1:    '✅f(7) = 5040',
840: 1:    '✅f(8) = 40320',
840: 1:    '✅f(9) = 362880',
840: 1:    '✅f(10) = 3628800',
840: 1:    '✅f(11) = 39916800',
840: 1:    '✅f(12) = 479001600',
840: 1:    '✅f(13) = 6227020800',
840: 1:    '✅f(14) = 87178291200',
840: 1:    '✅f(15) = 1307674368000',
840: 1:    '✅f(16) = 20922789888000',
840: 1:    '✅f(17) = 355687428096000',
840: 1:    '✅f(18) = 6402373705728000',
840: 1:    '✅f(19) = 121645100408832000',
840: 1:    '✅f(20) = 2432902008176640000',
840: 1:    '✅f(21) = 51090942171709440000',
840: 1:    '✅f(22) = 1124000727777607680000',
840: 1:    '✅f(23) = 25852016738884976640000',
840: 1:    '✅f(24) = 620448401733239439360000',
840: 1:    '❌f(25) = ??? != 15511210043330985984000000'
840: 1:  ],
840: 1:  'level': 29,
840: 1:  'nextQuestion': '25',
840: 1:  'questions': [
840: 1:    '1',
840: 1:    '2',
840: 1:    '3',
840: 1:    '4',
840: 1:    '5',
840: 1:    '6',
840: 1:    '7',
840: 1:    '8',
840: 1:    '9',
840: 1:    '10',
840: 1:    '11',
840: 1:    '12',
840: 1:    '13',
840: 1:    '14',
840: 1:    '15',
840: 1:    '16',
840: 1:    '17',
840: 1:    '18',
840: 1:    '19',
840: 1:    '20',
840: 1:    '21',
840: 1:    '22',
840: 1:    '23',
840: 1:    '24',
840: 1:    '25'
840: 1:  ]
840: 1:}
840: 1:Scores: 83795
840: 1:Answer: message('['1', '2', '6', '24', '120', '720', '5040', '40320', '362880', '3628800', '39916800', '479001600', '6227020800', '87178291200', '1307674368000', '20922789888000', '355687428096000', '6402373705728000', '121645100408832000', '2432902008176640000', '51090942171709440000', '1124000727777607680000', '25852016738884976640000', '620448401733239439360000', '15511210043330985984000000']')
840: 1:Fire Event: PassTest{complexity=42, testCount=25}
840: 1:Fire Event: NextAlgorithm{complexity=42, time=0}
------------------------------------------
841: 1:BoardData {
841: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
841: 1:  'history': [
841: 1:    {
841: 1:      'answer': '1',
841: 1:      'question': '1',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '2',
841: 1:      'question': '2',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '6',
841: 1:      'question': '3',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '24',
841: 1:      'question': '4',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '120',
841: 1:      'question': '5',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '720',
841: 1:      'question': '6',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '5040',
841: 1:      'question': '7',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '40320',
841: 1:      'question': '8',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '362880',
841: 1:      'question': '9',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '3628800',
841: 1:      'question': '10',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '39916800',
841: 1:      'question': '11',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '479001600',
841: 1:      'question': '12',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '6227020800',
841: 1:      'question': '13',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '87178291200',
841: 1:      'question': '14',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '1307674368000',
841: 1:      'question': '15',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '20922789888000',
841: 1:      'question': '16',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '355687428096000',
841: 1:      'question': '17',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '6402373705728000',
841: 1:      'question': '18',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '121645100408832000',
841: 1:      'question': '19',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '2432902008176640000',
841: 1:      'question': '20',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '51090942171709440000',
841: 1:      'question': '21',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '1124000727777607680000',
841: 1:      'question': '22',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '25852016738884976640000',
841: 1:      'question': '23',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '620448401733239439360000',
841: 1:      'question': '24',
841: 1:      'valid': true
841: 1:    },
841: 1:    {
841: 1:      'answer': '15511210043330985984000000',
841: 1:      'question': '25',
841: 1:      'valid': true
841: 1:    }
841: 1:  ],
841: 1:  'info': [
841: 1:    '✅f(1) = 1',
841: 1:    '✅f(2) = 2',
841: 1:    '✅f(3) = 6',
841: 1:    '✅f(4) = 24',
841: 1:    '✅f(5) = 120',
841: 1:    '✅f(6) = 720',
841: 1:    '✅f(7) = 5040',
841: 1:    '✅f(8) = 40320',
841: 1:    '✅f(9) = 362880',
841: 1:    '✅f(10) = 3628800',
841: 1:    '✅f(11) = 39916800',
841: 1:    '✅f(12) = 479001600',
841: 1:    '✅f(13) = 6227020800',
841: 1:    '✅f(14) = 87178291200',
841: 1:    '✅f(15) = 1307674368000',
841: 1:    '✅f(16) = 20922789888000',
841: 1:    '✅f(17) = 355687428096000',
841: 1:    '✅f(18) = 6402373705728000',
841: 1:    '✅f(19) = 121645100408832000',
841: 1:    '✅f(20) = 2432902008176640000',
841: 1:    '✅f(21) = 51090942171709440000',
841: 1:    '✅f(22) = 1124000727777607680000',
841: 1:    '✅f(23) = 25852016738884976640000',
841: 1:    '✅f(24) = 620448401733239439360000',
841: 1:    '✅f(25) = 15511210043330985984000000'
841: 1:  ],
841: 1:  'level': 29,
841: 1:  'questions': []
841: 1:}
841: 1:Scores: 89480
841: 1:Answer: message('StartNextLevel')
841: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
842: 1:BoardData {
842: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
842: 1:  'expectedAnswer': '2',
842: 1:  'history': [],
842: 1:  'info': ['❌f(1) = ??? != 2'],
842: 1:  'level': 30,
842: 1:  'nextQuestion': '1',
842: 1:  'questions': ['1']
842: 1:}
842: 1:Scores: 89480
842: 1:Answer: message('['2']')
842: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
843: 1:BoardData {
843: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
843: 1:  'expectedAnswer': '4',
843: 1:  'history': [{
843: 1:    'answer': '2',
843: 1:    'question': '1',
843: 1:    'valid': true
843: 1:  }],
843: 1:  'info': [
843: 1:    '✅f(1) = 2',
843: 1:    '❌f(2) = ??? != 4'
843: 1:  ],
843: 1:  'level': 30,
843: 1:  'nextQuestion': '2',
843: 1:  'questions': [
843: 1:    '1',
843: 1:    '2'
843: 1:  ]
843: 1:}
843: 1:Scores: 89494
843: 1:Answer: message('['2', '4']')
843: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
844: 1:BoardData {
844: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
844: 1:  'expectedAnswer': '6',
844: 1:  'history': [
844: 1:    {
844: 1:      'answer': '2',
844: 1:      'question': '1',
844: 1:      'valid': true
844: 1:    },
844: 1:    {
844: 1:      'answer': '4',
844: 1:      'question': '2',
844: 1:      'valid': true
844: 1:    }
844: 1:  ],
844: 1:  'info': [
844: 1:    '✅f(1) = 2',
844: 1:    '✅f(2) = 4',
844: 1:    '❌f(3) = ??? != 6'
844: 1:  ],
844: 1:  'level': 30,
844: 1:  'nextQuestion': '3',
844: 1:  'questions': [
844: 1:    '1',
844: 1:    '2',
844: 1:    '3'
844: 1:  ]
844: 1:}
844: 1:Scores: 89508
844: 1:Answer: message('['2', '4', '6']')
844: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
845: 1:BoardData {
845: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
845: 1:  'expectedAnswer': '8',
845: 1:  'history': [
845: 1:    {
845: 1:      'answer': '2',
845: 1:      'question': '1',
845: 1:      'valid': true
845: 1:    },
845: 1:    {
845: 1:      'answer': '4',
845: 1:      'question': '2',
845: 1:      'valid': true
845: 1:    },
845: 1:    {
845: 1:      'answer': '6',
845: 1:      'question': '3',
845: 1:      'valid': true
845: 1:    }
845: 1:  ],
845: 1:  'info': [
845: 1:    '✅f(1) = 2',
845: 1:    '✅f(2) = 4',
845: 1:    '✅f(3) = 6',
845: 1:    '❌f(4) = ??? != 8'
845: 1:  ],
845: 1:  'level': 30,
845: 1:  'nextQuestion': '4',
845: 1:  'questions': [
845: 1:    '1',
845: 1:    '2',
845: 1:    '3',
845: 1:    '4'
845: 1:  ]
845: 1:}
845: 1:Scores: 89522
845: 1:Answer: message('['2', '4', '6', '8']')
845: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
846: 1:BoardData {
846: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
846: 1:  'expectedAnswer': '11',
846: 1:  'history': [
846: 1:    {
846: 1:      'answer': '2',
846: 1:      'question': '1',
846: 1:      'valid': true
846: 1:    },
846: 1:    {
846: 1:      'answer': '4',
846: 1:      'question': '2',
846: 1:      'valid': true
846: 1:    },
846: 1:    {
846: 1:      'answer': '6',
846: 1:      'question': '3',
846: 1:      'valid': true
846: 1:    },
846: 1:    {
846: 1:      'answer': '8',
846: 1:      'question': '4',
846: 1:      'valid': true
846: 1:    }
846: 1:  ],
846: 1:  'info': [
846: 1:    '✅f(1) = 2',
846: 1:    '✅f(2) = 4',
846: 1:    '✅f(3) = 6',
846: 1:    '✅f(4) = 8',
846: 1:    '❌f(5) = ??? != 11'
846: 1:  ],
846: 1:  'level': 30,
846: 1:  'nextQuestion': '5',
846: 1:  'questions': [
846: 1:    '1',
846: 1:    '2',
846: 1:    '3',
846: 1:    '4',
846: 1:    '5'
846: 1:  ]
846: 1:}
846: 1:Scores: 89536
846: 1:Answer: message('['2', '4', '6', '8', '11']')
846: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
847: 1:BoardData {
847: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
847: 1:  'expectedAnswer': '33',
847: 1:  'history': [
847: 1:    {
847: 1:      'answer': '2',
847: 1:      'question': '1',
847: 1:      'valid': true
847: 1:    },
847: 1:    {
847: 1:      'answer': '4',
847: 1:      'question': '2',
847: 1:      'valid': true
847: 1:    },
847: 1:    {
847: 1:      'answer': '6',
847: 1:      'question': '3',
847: 1:      'valid': true
847: 1:    },
847: 1:    {
847: 1:      'answer': '8',
847: 1:      'question': '4',
847: 1:      'valid': true
847: 1:    },
847: 1:    {
847: 1:      'answer': '11',
847: 1:      'question': '5',
847: 1:      'valid': true
847: 1:    }
847: 1:  ],
847: 1:  'info': [
847: 1:    '✅f(1) = 2',
847: 1:    '✅f(2) = 4',
847: 1:    '✅f(3) = 6',
847: 1:    '✅f(4) = 8',
847: 1:    '✅f(5) = 11',
847: 1:    '❌f(6) = ??? != 33'
847: 1:  ],
847: 1:  'level': 30,
847: 1:  'nextQuestion': '6',
847: 1:  'questions': [
847: 1:    '1',
847: 1:    '2',
847: 1:    '3',
847: 1:    '4',
847: 1:    '5',
847: 1:    '6'
847: 1:  ]
847: 1:}
847: 1:Scores: 89550
847: 1:Answer: message('['2', '4', '6', '8', '11', '33']')
847: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
848: 1:BoardData {
848: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
848: 1:  'expectedAnswer': '55',
848: 1:  'history': [
848: 1:    {
848: 1:      'answer': '2',
848: 1:      'question': '1',
848: 1:      'valid': true
848: 1:    },
848: 1:    {
848: 1:      'answer': '4',
848: 1:      'question': '2',
848: 1:      'valid': true
848: 1:    },
848: 1:    {
848: 1:      'answer': '6',
848: 1:      'question': '3',
848: 1:      'valid': true
848: 1:    },
848: 1:    {
848: 1:      'answer': '8',
848: 1:      'question': '4',
848: 1:      'valid': true
848: 1:    },
848: 1:    {
848: 1:      'answer': '11',
848: 1:      'question': '5',
848: 1:      'valid': true
848: 1:    },
848: 1:    {
848: 1:      'answer': '33',
848: 1:      'question': '6',
848: 1:      'valid': true
848: 1:    }
848: 1:  ],
848: 1:  'info': [
848: 1:    '✅f(1) = 2',
848: 1:    '✅f(2) = 4',
848: 1:    '✅f(3) = 6',
848: 1:    '✅f(4) = 8',
848: 1:    '✅f(5) = 11',
848: 1:    '✅f(6) = 33',
848: 1:    '❌f(7) = ??? != 55'
848: 1:  ],
848: 1:  'level': 30,
848: 1:  'nextQuestion': '7',
848: 1:  'questions': [
848: 1:    '1',
848: 1:    '2',
848: 1:    '3',
848: 1:    '4',
848: 1:    '5',
848: 1:    '6',
848: 1:    '7'
848: 1:  ]
848: 1:}
848: 1:Scores: 89564
848: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55']')
848: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
849: 1:BoardData {
849: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
849: 1:  'expectedAnswer': '99',
849: 1:  'history': [
849: 1:    {
849: 1:      'answer': '2',
849: 1:      'question': '1',
849: 1:      'valid': true
849: 1:    },
849: 1:    {
849: 1:      'answer': '4',
849: 1:      'question': '2',
849: 1:      'valid': true
849: 1:    },
849: 1:    {
849: 1:      'answer': '6',
849: 1:      'question': '3',
849: 1:      'valid': true
849: 1:    },
849: 1:    {
849: 1:      'answer': '8',
849: 1:      'question': '4',
849: 1:      'valid': true
849: 1:    },
849: 1:    {
849: 1:      'answer': '11',
849: 1:      'question': '5',
849: 1:      'valid': true
849: 1:    },
849: 1:    {
849: 1:      'answer': '33',
849: 1:      'question': '6',
849: 1:      'valid': true
849: 1:    },
849: 1:    {
849: 1:      'answer': '55',
849: 1:      'question': '7',
849: 1:      'valid': true
849: 1:    }
849: 1:  ],
849: 1:  'info': [
849: 1:    '✅f(1) = 2',
849: 1:    '✅f(2) = 4',
849: 1:    '✅f(3) = 6',
849: 1:    '✅f(4) = 8',
849: 1:    '✅f(5) = 11',
849: 1:    '✅f(6) = 33',
849: 1:    '✅f(7) = 55',
849: 1:    '❌f(9) = ??? != 99'
849: 1:  ],
849: 1:  'level': 30,
849: 1:  'nextQuestion': '9',
849: 1:  'questions': [
849: 1:    '1',
849: 1:    '2',
849: 1:    '3',
849: 1:    '4',
849: 1:    '5',
849: 1:    '6',
849: 1:    '7',
849: 1:    '9'
849: 1:  ]
849: 1:}
849: 1:Scores: 89578
849: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99']')
849: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
850: 1:BoardData {
850: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
850: 1:  'expectedAnswer': '11',
850: 1:  'history': [
850: 1:    {
850: 1:      'answer': '2',
850: 1:      'question': '1',
850: 1:      'valid': true
850: 1:    },
850: 1:    {
850: 1:      'answer': '4',
850: 1:      'question': '2',
850: 1:      'valid': true
850: 1:    },
850: 1:    {
850: 1:      'answer': '6',
850: 1:      'question': '3',
850: 1:      'valid': true
850: 1:    },
850: 1:    {
850: 1:      'answer': '8',
850: 1:      'question': '4',
850: 1:      'valid': true
850: 1:    },
850: 1:    {
850: 1:      'answer': '11',
850: 1:      'question': '5',
850: 1:      'valid': true
850: 1:    },
850: 1:    {
850: 1:      'answer': '33',
850: 1:      'question': '6',
850: 1:      'valid': true
850: 1:    },
850: 1:    {
850: 1:      'answer': '55',
850: 1:      'question': '7',
850: 1:      'valid': true
850: 1:    },
850: 1:    {
850: 1:      'answer': '99',
850: 1:      'question': '9',
850: 1:      'valid': true
850: 1:    }
850: 1:  ],
850: 1:  'info': [
850: 1:    '✅f(1) = 2',
850: 1:    '✅f(2) = 4',
850: 1:    '✅f(3) = 6',
850: 1:    '✅f(4) = 8',
850: 1:    '✅f(5) = 11',
850: 1:    '✅f(6) = 33',
850: 1:    '✅f(7) = 55',
850: 1:    '✅f(9) = 99',
850: 1:    '❌f(10) = ??? != 11'
850: 1:  ],
850: 1:  'level': 30,
850: 1:  'nextQuestion': '10',
850: 1:  'questions': [
850: 1:    '1',
850: 1:    '2',
850: 1:    '3',
850: 1:    '4',
850: 1:    '5',
850: 1:    '6',
850: 1:    '7',
850: 1:    '9',
850: 1:    '10'
850: 1:  ]
850: 1:}
850: 1:Scores: 89592
850: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11']')
850: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
851: 1:BoardData {
851: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
851: 1:  'expectedAnswer': '22',
851: 1:  'history': [
851: 1:    {
851: 1:      'answer': '2',
851: 1:      'question': '1',
851: 1:      'valid': true
851: 1:    },
851: 1:    {
851: 1:      'answer': '4',
851: 1:      'question': '2',
851: 1:      'valid': true
851: 1:    },
851: 1:    {
851: 1:      'answer': '6',
851: 1:      'question': '3',
851: 1:      'valid': true
851: 1:    },
851: 1:    {
851: 1:      'answer': '8',
851: 1:      'question': '4',
851: 1:      'valid': true
851: 1:    },
851: 1:    {
851: 1:      'answer': '11',
851: 1:      'question': '5',
851: 1:      'valid': true
851: 1:    },
851: 1:    {
851: 1:      'answer': '33',
851: 1:      'question': '6',
851: 1:      'valid': true
851: 1:    },
851: 1:    {
851: 1:      'answer': '55',
851: 1:      'question': '7',
851: 1:      'valid': true
851: 1:    },
851: 1:    {
851: 1:      'answer': '99',
851: 1:      'question': '9',
851: 1:      'valid': true
851: 1:    },
851: 1:    {
851: 1:      'answer': '11',
851: 1:      'question': '10',
851: 1:      'valid': true
851: 1:    }
851: 1:  ],
851: 1:  'info': [
851: 1:    '✅f(1) = 2',
851: 1:    '✅f(2) = 4',
851: 1:    '✅f(3) = 6',
851: 1:    '✅f(4) = 8',
851: 1:    '✅f(5) = 11',
851: 1:    '✅f(6) = 33',
851: 1:    '✅f(7) = 55',
851: 1:    '✅f(9) = 99',
851: 1:    '✅f(10) = 11',
851: 1:    '❌f(11) = ??? != 22'
851: 1:  ],
851: 1:  'level': 30,
851: 1:  'nextQuestion': '11',
851: 1:  'questions': [
851: 1:    '1',
851: 1:    '2',
851: 1:    '3',
851: 1:    '4',
851: 1:    '5',
851: 1:    '6',
851: 1:    '7',
851: 1:    '9',
851: 1:    '10',
851: 1:    '11'
851: 1:  ]
851: 1:}
851: 1:Scores: 89606
851: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22']')
851: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
852: 1:BoardData {
852: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
852: 1:  'expectedAnswer': '33',
852: 1:  'history': [
852: 1:    {
852: 1:      'answer': '2',
852: 1:      'question': '1',
852: 1:      'valid': true
852: 1:    },
852: 1:    {
852: 1:      'answer': '4',
852: 1:      'question': '2',
852: 1:      'valid': true
852: 1:    },
852: 1:    {
852: 1:      'answer': '6',
852: 1:      'question': '3',
852: 1:      'valid': true
852: 1:    },
852: 1:    {
852: 1:      'answer': '8',
852: 1:      'question': '4',
852: 1:      'valid': true
852: 1:    },
852: 1:    {
852: 1:      'answer': '11',
852: 1:      'question': '5',
852: 1:      'valid': true
852: 1:    },
852: 1:    {
852: 1:      'answer': '33',
852: 1:      'question': '6',
852: 1:      'valid': true
852: 1:    },
852: 1:    {
852: 1:      'answer': '55',
852: 1:      'question': '7',
852: 1:      'valid': true
852: 1:    },
852: 1:    {
852: 1:      'answer': '99',
852: 1:      'question': '9',
852: 1:      'valid': true
852: 1:    },
852: 1:    {
852: 1:      'answer': '11',
852: 1:      'question': '10',
852: 1:      'valid': true
852: 1:    },
852: 1:    {
852: 1:      'answer': '22',
852: 1:      'question': '11',
852: 1:      'valid': true
852: 1:    }
852: 1:  ],
852: 1:  'info': [
852: 1:    '✅f(1) = 2',
852: 1:    '✅f(2) = 4',
852: 1:    '✅f(3) = 6',
852: 1:    '✅f(4) = 8',
852: 1:    '✅f(5) = 11',
852: 1:    '✅f(6) = 33',
852: 1:    '✅f(7) = 55',
852: 1:    '✅f(9) = 99',
852: 1:    '✅f(10) = 11',
852: 1:    '✅f(11) = 22',
852: 1:    '❌f(12) = ??? != 33'
852: 1:  ],
852: 1:  'level': 30,
852: 1:  'nextQuestion': '12',
852: 1:  'questions': [
852: 1:    '1',
852: 1:    '2',
852: 1:    '3',
852: 1:    '4',
852: 1:    '5',
852: 1:    '6',
852: 1:    '7',
852: 1:    '9',
852: 1:    '10',
852: 1:    '11',
852: 1:    '12'
852: 1:  ]
852: 1:}
852: 1:Scores: 89620
852: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33']')
852: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
853: 1:BoardData {
853: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
853: 1:  'expectedAnswer': '444',
853: 1:  'history': [
853: 1:    {
853: 1:      'answer': '2',
853: 1:      'question': '1',
853: 1:      'valid': true
853: 1:    },
853: 1:    {
853: 1:      'answer': '4',
853: 1:      'question': '2',
853: 1:      'valid': true
853: 1:    },
853: 1:    {
853: 1:      'answer': '6',
853: 1:      'question': '3',
853: 1:      'valid': true
853: 1:    },
853: 1:    {
853: 1:      'answer': '8',
853: 1:      'question': '4',
853: 1:      'valid': true
853: 1:    },
853: 1:    {
853: 1:      'answer': '11',
853: 1:      'question': '5',
853: 1:      'valid': true
853: 1:    },
853: 1:    {
853: 1:      'answer': '33',
853: 1:      'question': '6',
853: 1:      'valid': true
853: 1:    },
853: 1:    {
853: 1:      'answer': '55',
853: 1:      'question': '7',
853: 1:      'valid': true
853: 1:    },
853: 1:    {
853: 1:      'answer': '99',
853: 1:      'question': '9',
853: 1:      'valid': true
853: 1:    },
853: 1:    {
853: 1:      'answer': '11',
853: 1:      'question': '10',
853: 1:      'valid': true
853: 1:    },
853: 1:    {
853: 1:      'answer': '22',
853: 1:      'question': '11',
853: 1:      'valid': true
853: 1:    },
853: 1:    {
853: 1:      'answer': '33',
853: 1:      'question': '12',
853: 1:      'valid': true
853: 1:    }
853: 1:  ],
853: 1:  'info': [
853: 1:    '✅f(1) = 2',
853: 1:    '✅f(2) = 4',
853: 1:    '✅f(3) = 6',
853: 1:    '✅f(4) = 8',
853: 1:    '✅f(5) = 11',
853: 1:    '✅f(6) = 33',
853: 1:    '✅f(7) = 55',
853: 1:    '✅f(9) = 99',
853: 1:    '✅f(10) = 11',
853: 1:    '✅f(11) = 22',
853: 1:    '✅f(12) = 33',
853: 1:    '❌f(123) = ??? != 444'
853: 1:  ],
853: 1:  'level': 30,
853: 1:  'nextQuestion': '123',
853: 1:  'questions': [
853: 1:    '1',
853: 1:    '2',
853: 1:    '3',
853: 1:    '4',
853: 1:    '5',
853: 1:    '6',
853: 1:    '7',
853: 1:    '9',
853: 1:    '10',
853: 1:    '11',
853: 1:    '12',
853: 1:    '123'
853: 1:  ]
853: 1:}
853: 1:Scores: 89634
853: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444']')
853: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
854: 1:BoardData {
854: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
854: 1:  'expectedAnswer': '666',
854: 1:  'history': [
854: 1:    {
854: 1:      'answer': '2',
854: 1:      'question': '1',
854: 1:      'valid': true
854: 1:    },
854: 1:    {
854: 1:      'answer': '4',
854: 1:      'question': '2',
854: 1:      'valid': true
854: 1:    },
854: 1:    {
854: 1:      'answer': '6',
854: 1:      'question': '3',
854: 1:      'valid': true
854: 1:    },
854: 1:    {
854: 1:      'answer': '8',
854: 1:      'question': '4',
854: 1:      'valid': true
854: 1:    },
854: 1:    {
854: 1:      'answer': '11',
854: 1:      'question': '5',
854: 1:      'valid': true
854: 1:    },
854: 1:    {
854: 1:      'answer': '33',
854: 1:      'question': '6',
854: 1:      'valid': true
854: 1:    },
854: 1:    {
854: 1:      'answer': '55',
854: 1:      'question': '7',
854: 1:      'valid': true
854: 1:    },
854: 1:    {
854: 1:      'answer': '99',
854: 1:      'question': '9',
854: 1:      'valid': true
854: 1:    },
854: 1:    {
854: 1:      'answer': '11',
854: 1:      'question': '10',
854: 1:      'valid': true
854: 1:    },
854: 1:    {
854: 1:      'answer': '22',
854: 1:      'question': '11',
854: 1:      'valid': true
854: 1:    },
854: 1:    {
854: 1:      'answer': '33',
854: 1:      'question': '12',
854: 1:      'valid': true
854: 1:    },
854: 1:    {
854: 1:      'answer': '444',
854: 1:      'question': '123',
854: 1:      'valid': true
854: 1:    }
854: 1:  ],
854: 1:  'info': [
854: 1:    '✅f(1) = 2',
854: 1:    '✅f(2) = 4',
854: 1:    '✅f(3) = 6',
854: 1:    '✅f(4) = 8',
854: 1:    '✅f(5) = 11',
854: 1:    '✅f(6) = 33',
854: 1:    '✅f(7) = 55',
854: 1:    '✅f(9) = 99',
854: 1:    '✅f(10) = 11',
854: 1:    '✅f(11) = 22',
854: 1:    '✅f(12) = 33',
854: 1:    '✅f(123) = 444',
854: 1:    '❌f(234) = ??? != 666'
854: 1:  ],
854: 1:  'level': 30,
854: 1:  'nextQuestion': '234',
854: 1:  'questions': [
854: 1:    '1',
854: 1:    '2',
854: 1:    '3',
854: 1:    '4',
854: 1:    '5',
854: 1:    '6',
854: 1:    '7',
854: 1:    '9',
854: 1:    '10',
854: 1:    '11',
854: 1:    '12',
854: 1:    '123',
854: 1:    '234'
854: 1:  ]
854: 1:}
854: 1:Scores: 89648
854: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666']')
854: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
855: 1:BoardData {
855: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
855: 1:  'expectedAnswer': '888',
855: 1:  'history': [
855: 1:    {
855: 1:      'answer': '2',
855: 1:      'question': '1',
855: 1:      'valid': true
855: 1:    },
855: 1:    {
855: 1:      'answer': '4',
855: 1:      'question': '2',
855: 1:      'valid': true
855: 1:    },
855: 1:    {
855: 1:      'answer': '6',
855: 1:      'question': '3',
855: 1:      'valid': true
855: 1:    },
855: 1:    {
855: 1:      'answer': '8',
855: 1:      'question': '4',
855: 1:      'valid': true
855: 1:    },
855: 1:    {
855: 1:      'answer': '11',
855: 1:      'question': '5',
855: 1:      'valid': true
855: 1:    },
855: 1:    {
855: 1:      'answer': '33',
855: 1:      'question': '6',
855: 1:      'valid': true
855: 1:    },
855: 1:    {
855: 1:      'answer': '55',
855: 1:      'question': '7',
855: 1:      'valid': true
855: 1:    },
855: 1:    {
855: 1:      'answer': '99',
855: 1:      'question': '9',
855: 1:      'valid': true
855: 1:    },
855: 1:    {
855: 1:      'answer': '11',
855: 1:      'question': '10',
855: 1:      'valid': true
855: 1:    },
855: 1:    {
855: 1:      'answer': '22',
855: 1:      'question': '11',
855: 1:      'valid': true
855: 1:    },
855: 1:    {
855: 1:      'answer': '33',
855: 1:      'question': '12',
855: 1:      'valid': true
855: 1:    },
855: 1:    {
855: 1:      'answer': '444',
855: 1:      'question': '123',
855: 1:      'valid': true
855: 1:    },
855: 1:    {
855: 1:      'answer': '666',
855: 1:      'question': '234',
855: 1:      'valid': true
855: 1:    }
855: 1:  ],
855: 1:  'info': [
855: 1:    '✅f(1) = 2',
855: 1:    '✅f(2) = 4',
855: 1:    '✅f(3) = 6',
855: 1:    '✅f(4) = 8',
855: 1:    '✅f(5) = 11',
855: 1:    '✅f(6) = 33',
855: 1:    '✅f(7) = 55',
855: 1:    '✅f(9) = 99',
855: 1:    '✅f(10) = 11',
855: 1:    '✅f(11) = 22',
855: 1:    '✅f(12) = 33',
855: 1:    '✅f(123) = 444',
855: 1:    '✅f(234) = 666',
855: 1:    '❌f(345) = ??? != 888'
855: 1:  ],
855: 1:  'level': 30,
855: 1:  'nextQuestion': '345',
855: 1:  'questions': [
855: 1:    '1',
855: 1:    '2',
855: 1:    '3',
855: 1:    '4',
855: 1:    '5',
855: 1:    '6',
855: 1:    '7',
855: 1:    '9',
855: 1:    '10',
855: 1:    '11',
855: 1:    '12',
855: 1:    '123',
855: 1:    '234',
855: 1:    '345'
855: 1:  ]
855: 1:}
855: 1:Scores: 89662
855: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888']')
855: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
856: 1:BoardData {
856: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
856: 1:  'expectedAnswer': '1221',
856: 1:  'history': [
856: 1:    {
856: 1:      'answer': '2',
856: 1:      'question': '1',
856: 1:      'valid': true
856: 1:    },
856: 1:    {
856: 1:      'answer': '4',
856: 1:      'question': '2',
856: 1:      'valid': true
856: 1:    },
856: 1:    {
856: 1:      'answer': '6',
856: 1:      'question': '3',
856: 1:      'valid': true
856: 1:    },
856: 1:    {
856: 1:      'answer': '8',
856: 1:      'question': '4',
856: 1:      'valid': true
856: 1:    },
856: 1:    {
856: 1:      'answer': '11',
856: 1:      'question': '5',
856: 1:      'valid': true
856: 1:    },
856: 1:    {
856: 1:      'answer': '33',
856: 1:      'question': '6',
856: 1:      'valid': true
856: 1:    },
856: 1:    {
856: 1:      'answer': '55',
856: 1:      'question': '7',
856: 1:      'valid': true
856: 1:    },
856: 1:    {
856: 1:      'answer': '99',
856: 1:      'question': '9',
856: 1:      'valid': true
856: 1:    },
856: 1:    {
856: 1:      'answer': '11',
856: 1:      'question': '10',
856: 1:      'valid': true
856: 1:    },
856: 1:    {
856: 1:      'answer': '22',
856: 1:      'question': '11',
856: 1:      'valid': true
856: 1:    },
856: 1:    {
856: 1:      'answer': '33',
856: 1:      'question': '12',
856: 1:      'valid': true
856: 1:    },
856: 1:    {
856: 1:      'answer': '444',
856: 1:      'question': '123',
856: 1:      'valid': true
856: 1:    },
856: 1:    {
856: 1:      'answer': '666',
856: 1:      'question': '234',
856: 1:      'valid': true
856: 1:    },
856: 1:    {
856: 1:      'answer': '888',
856: 1:      'question': '345',
856: 1:      'valid': true
856: 1:    }
856: 1:  ],
856: 1:  'info': [
856: 1:    '✅f(1) = 2',
856: 1:    '✅f(2) = 4',
856: 1:    '✅f(3) = 6',
856: 1:    '✅f(4) = 8',
856: 1:    '✅f(5) = 11',
856: 1:    '✅f(6) = 33',
856: 1:    '✅f(7) = 55',
856: 1:    '✅f(9) = 99',
856: 1:    '✅f(10) = 11',
856: 1:    '✅f(11) = 22',
856: 1:    '✅f(12) = 33',
856: 1:    '✅f(123) = 444',
856: 1:    '✅f(234) = 666',
856: 1:    '✅f(345) = 888',
856: 1:    '❌f(456) = ??? != 1221'
856: 1:  ],
856: 1:  'level': 30,
856: 1:  'nextQuestion': '456',
856: 1:  'questions': [
856: 1:    '1',
856: 1:    '2',
856: 1:    '3',
856: 1:    '4',
856: 1:    '5',
856: 1:    '6',
856: 1:    '7',
856: 1:    '9',
856: 1:    '10',
856: 1:    '11',
856: 1:    '12',
856: 1:    '123',
856: 1:    '234',
856: 1:    '345',
856: 1:    '456'
856: 1:  ]
856: 1:}
856: 1:Scores: 89676
856: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221']')
856: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
857: 1:BoardData {
857: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
857: 1:  'expectedAnswer': '3663',
857: 1:  'history': [
857: 1:    {
857: 1:      'answer': '2',
857: 1:      'question': '1',
857: 1:      'valid': true
857: 1:    },
857: 1:    {
857: 1:      'answer': '4',
857: 1:      'question': '2',
857: 1:      'valid': true
857: 1:    },
857: 1:    {
857: 1:      'answer': '6',
857: 1:      'question': '3',
857: 1:      'valid': true
857: 1:    },
857: 1:    {
857: 1:      'answer': '8',
857: 1:      'question': '4',
857: 1:      'valid': true
857: 1:    },
857: 1:    {
857: 1:      'answer': '11',
857: 1:      'question': '5',
857: 1:      'valid': true
857: 1:    },
857: 1:    {
857: 1:      'answer': '33',
857: 1:      'question': '6',
857: 1:      'valid': true
857: 1:    },
857: 1:    {
857: 1:      'answer': '55',
857: 1:      'question': '7',
857: 1:      'valid': true
857: 1:    },
857: 1:    {
857: 1:      'answer': '99',
857: 1:      'question': '9',
857: 1:      'valid': true
857: 1:    },
857: 1:    {
857: 1:      'answer': '11',
857: 1:      'question': '10',
857: 1:      'valid': true
857: 1:    },
857: 1:    {
857: 1:      'answer': '22',
857: 1:      'question': '11',
857: 1:      'valid': true
857: 1:    },
857: 1:    {
857: 1:      'answer': '33',
857: 1:      'question': '12',
857: 1:      'valid': true
857: 1:    },
857: 1:    {
857: 1:      'answer': '444',
857: 1:      'question': '123',
857: 1:      'valid': true
857: 1:    },
857: 1:    {
857: 1:      'answer': '666',
857: 1:      'question': '234',
857: 1:      'valid': true
857: 1:    },
857: 1:    {
857: 1:      'answer': '888',
857: 1:      'question': '345',
857: 1:      'valid': true
857: 1:    },
857: 1:    {
857: 1:      'answer': '1221',
857: 1:      'question': '456',
857: 1:      'valid': true
857: 1:    }
857: 1:  ],
857: 1:  'info': [
857: 1:    '✅f(1) = 2',
857: 1:    '✅f(2) = 4',
857: 1:    '✅f(3) = 6',
857: 1:    '✅f(4) = 8',
857: 1:    '✅f(5) = 11',
857: 1:    '✅f(6) = 33',
857: 1:    '✅f(7) = 55',
857: 1:    '✅f(9) = 99',
857: 1:    '✅f(10) = 11',
857: 1:    '✅f(11) = 22',
857: 1:    '✅f(12) = 33',
857: 1:    '✅f(123) = 444',
857: 1:    '✅f(234) = 666',
857: 1:    '✅f(345) = 888',
857: 1:    '✅f(456) = 1221',
857: 1:    '❌f(567) = ??? != 3663'
857: 1:  ],
857: 1:  'level': 30,
857: 1:  'nextQuestion': '567',
857: 1:  'questions': [
857: 1:    '1',
857: 1:    '2',
857: 1:    '3',
857: 1:    '4',
857: 1:    '5',
857: 1:    '6',
857: 1:    '7',
857: 1:    '9',
857: 1:    '10',
857: 1:    '11',
857: 1:    '12',
857: 1:    '123',
857: 1:    '234',
857: 1:    '345',
857: 1:    '456',
857: 1:    '567'
857: 1:  ]
857: 1:}
857: 1:Scores: 89690
857: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663']')
857: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
858: 1:BoardData {
858: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
858: 1:  'expectedAnswer': '23232',
858: 1:  'history': [
858: 1:    {
858: 1:      'answer': '2',
858: 1:      'question': '1',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '4',
858: 1:      'question': '2',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '6',
858: 1:      'question': '3',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '8',
858: 1:      'question': '4',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '11',
858: 1:      'question': '5',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '33',
858: 1:      'question': '6',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '55',
858: 1:      'question': '7',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '99',
858: 1:      'question': '9',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '11',
858: 1:      'question': '10',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '22',
858: 1:      'question': '11',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '33',
858: 1:      'question': '12',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '444',
858: 1:      'question': '123',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '666',
858: 1:      'question': '234',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '888',
858: 1:      'question': '345',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '1221',
858: 1:      'question': '456',
858: 1:      'valid': true
858: 1:    },
858: 1:    {
858: 1:      'answer': '3663',
858: 1:      'question': '567',
858: 1:      'valid': true
858: 1:    }
858: 1:  ],
858: 1:  'info': [
858: 1:    '✅f(1) = 2',
858: 1:    '✅f(2) = 4',
858: 1:    '✅f(3) = 6',
858: 1:    '✅f(4) = 8',
858: 1:    '✅f(5) = 11',
858: 1:    '✅f(6) = 33',
858: 1:    '✅f(7) = 55',
858: 1:    '✅f(9) = 99',
858: 1:    '✅f(10) = 11',
858: 1:    '✅f(11) = 22',
858: 1:    '✅f(12) = 33',
858: 1:    '✅f(123) = 444',
858: 1:    '✅f(234) = 666',
858: 1:    '✅f(345) = 888',
858: 1:    '✅f(456) = 1221',
858: 1:    '✅f(567) = 3663',
858: 1:    '❌f(678) = ??? != 23232'
858: 1:  ],
858: 1:  'level': 30,
858: 1:  'nextQuestion': '678',
858: 1:  'questions': [
858: 1:    '1',
858: 1:    '2',
858: 1:    '3',
858: 1:    '4',
858: 1:    '5',
858: 1:    '6',
858: 1:    '7',
858: 1:    '9',
858: 1:    '10',
858: 1:    '11',
858: 1:    '12',
858: 1:    '123',
858: 1:    '234',
858: 1:    '345',
858: 1:    '456',
858: 1:    '567',
858: 1:    '678'
858: 1:  ]
858: 1:}
858: 1:Scores: 89704
858: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232']')
858: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
859: 1:BoardData {
859: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
859: 1:  'expectedAnswer': '66066',
859: 1:  'history': [
859: 1:    {
859: 1:      'answer': '2',
859: 1:      'question': '1',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '4',
859: 1:      'question': '2',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '6',
859: 1:      'question': '3',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '8',
859: 1:      'question': '4',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '11',
859: 1:      'question': '5',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '33',
859: 1:      'question': '6',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '55',
859: 1:      'question': '7',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '99',
859: 1:      'question': '9',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '11',
859: 1:      'question': '10',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '22',
859: 1:      'question': '11',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '33',
859: 1:      'question': '12',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '444',
859: 1:      'question': '123',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '666',
859: 1:      'question': '234',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '888',
859: 1:      'question': '345',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '1221',
859: 1:      'question': '456',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '3663',
859: 1:      'question': '567',
859: 1:      'valid': true
859: 1:    },
859: 1:    {
859: 1:      'answer': '23232',
859: 1:      'question': '678',
859: 1:      'valid': true
859: 1:    }
859: 1:  ],
859: 1:  'info': [
859: 1:    '✅f(1) = 2',
859: 1:    '✅f(2) = 4',
859: 1:    '✅f(3) = 6',
859: 1:    '✅f(4) = 8',
859: 1:    '✅f(5) = 11',
859: 1:    '✅f(6) = 33',
859: 1:    '✅f(7) = 55',
859: 1:    '✅f(9) = 99',
859: 1:    '✅f(10) = 11',
859: 1:    '✅f(11) = 22',
859: 1:    '✅f(12) = 33',
859: 1:    '✅f(123) = 444',
859: 1:    '✅f(234) = 666',
859: 1:    '✅f(345) = 888',
859: 1:    '✅f(456) = 1221',
859: 1:    '✅f(567) = 3663',
859: 1:    '✅f(678) = 23232',
859: 1:    '❌f(789) = ??? != 66066'
859: 1:  ],
859: 1:  'level': 30,
859: 1:  'nextQuestion': '789',
859: 1:  'questions': [
859: 1:    '1',
859: 1:    '2',
859: 1:    '3',
859: 1:    '4',
859: 1:    '5',
859: 1:    '6',
859: 1:    '7',
859: 1:    '9',
859: 1:    '10',
859: 1:    '11',
859: 1:    '12',
859: 1:    '123',
859: 1:    '234',
859: 1:    '345',
859: 1:    '456',
859: 1:    '567',
859: 1:    '678',
859: 1:    '789'
859: 1:  ]
859: 1:}
859: 1:Scores: 89718
859: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066']')
859: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
860: 1:BoardData {
860: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
860: 1:  'expectedAnswer': '5555',
860: 1:  'history': [
860: 1:    {
860: 1:      'answer': '2',
860: 1:      'question': '1',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '4',
860: 1:      'question': '2',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '6',
860: 1:      'question': '3',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '8',
860: 1:      'question': '4',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '11',
860: 1:      'question': '5',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '33',
860: 1:      'question': '6',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '55',
860: 1:      'question': '7',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '99',
860: 1:      'question': '9',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '11',
860: 1:      'question': '10',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '22',
860: 1:      'question': '11',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '33',
860: 1:      'question': '12',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '444',
860: 1:      'question': '123',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '666',
860: 1:      'question': '234',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '888',
860: 1:      'question': '345',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '1221',
860: 1:      'question': '456',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '3663',
860: 1:      'question': '567',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '23232',
860: 1:      'question': '678',
860: 1:      'valid': true
860: 1:    },
860: 1:    {
860: 1:      'answer': '66066',
860: 1:      'question': '789',
860: 1:      'valid': true
860: 1:    }
860: 1:  ],
860: 1:  'info': [
860: 1:    '✅f(1) = 2',
860: 1:    '✅f(2) = 4',
860: 1:    '✅f(3) = 6',
860: 1:    '✅f(4) = 8',
860: 1:    '✅f(5) = 11',
860: 1:    '✅f(6) = 33',
860: 1:    '✅f(7) = 55',
860: 1:    '✅f(9) = 99',
860: 1:    '✅f(10) = 11',
860: 1:    '✅f(11) = 22',
860: 1:    '✅f(12) = 33',
860: 1:    '✅f(123) = 444',
860: 1:    '✅f(234) = 666',
860: 1:    '✅f(345) = 888',
860: 1:    '✅f(456) = 1221',
860: 1:    '✅f(567) = 3663',
860: 1:    '✅f(678) = 23232',
860: 1:    '✅f(789) = 66066',
860: 1:    '❌f(1234) = ??? != 5555'
860: 1:  ],
860: 1:  'level': 30,
860: 1:  'nextQuestion': '1234',
860: 1:  'questions': [
860: 1:    '1',
860: 1:    '2',
860: 1:    '3',
860: 1:    '4',
860: 1:    '5',
860: 1:    '6',
860: 1:    '7',
860: 1:    '9',
860: 1:    '10',
860: 1:    '11',
860: 1:    '12',
860: 1:    '123',
860: 1:    '234',
860: 1:    '345',
860: 1:    '456',
860: 1:    '567',
860: 1:    '678',
860: 1:    '789',
860: 1:    '1234'
860: 1:  ]
860: 1:}
860: 1:Scores: 89732
860: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555']')
860: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
861: 1:BoardData {
861: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
861: 1:  'expectedAnswer': '7777',
861: 1:  'history': [
861: 1:    {
861: 1:      'answer': '2',
861: 1:      'question': '1',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '4',
861: 1:      'question': '2',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '6',
861: 1:      'question': '3',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '8',
861: 1:      'question': '4',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '11',
861: 1:      'question': '5',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '33',
861: 1:      'question': '6',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '55',
861: 1:      'question': '7',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '99',
861: 1:      'question': '9',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '11',
861: 1:      'question': '10',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '22',
861: 1:      'question': '11',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '33',
861: 1:      'question': '12',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '444',
861: 1:      'question': '123',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '666',
861: 1:      'question': '234',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '888',
861: 1:      'question': '345',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '1221',
861: 1:      'question': '456',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '3663',
861: 1:      'question': '567',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '23232',
861: 1:      'question': '678',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '66066',
861: 1:      'question': '789',
861: 1:      'valid': true
861: 1:    },
861: 1:    {
861: 1:      'answer': '5555',
861: 1:      'question': '1234',
861: 1:      'valid': true
861: 1:    }
861: 1:  ],
861: 1:  'info': [
861: 1:    '✅f(1) = 2',
861: 1:    '✅f(2) = 4',
861: 1:    '✅f(3) = 6',
861: 1:    '✅f(4) = 8',
861: 1:    '✅f(5) = 11',
861: 1:    '✅f(6) = 33',
861: 1:    '✅f(7) = 55',
861: 1:    '✅f(9) = 99',
861: 1:    '✅f(10) = 11',
861: 1:    '✅f(11) = 22',
861: 1:    '✅f(12) = 33',
861: 1:    '✅f(123) = 444',
861: 1:    '✅f(234) = 666',
861: 1:    '✅f(345) = 888',
861: 1:    '✅f(456) = 1221',
861: 1:    '✅f(567) = 3663',
861: 1:    '✅f(678) = 23232',
861: 1:    '✅f(789) = 66066',
861: 1:    '✅f(1234) = 5555',
861: 1:    '❌f(2345) = ??? != 7777'
861: 1:  ],
861: 1:  'level': 30,
861: 1:  'nextQuestion': '2345',
861: 1:  'questions': [
861: 1:    '1',
861: 1:    '2',
861: 1:    '3',
861: 1:    '4',
861: 1:    '5',
861: 1:    '6',
861: 1:    '7',
861: 1:    '9',
861: 1:    '10',
861: 1:    '11',
861: 1:    '12',
861: 1:    '123',
861: 1:    '234',
861: 1:    '345',
861: 1:    '456',
861: 1:    '567',
861: 1:    '678',
861: 1:    '789',
861: 1:    '1234',
861: 1:    '2345'
861: 1:  ]
861: 1:}
861: 1:Scores: 89746
861: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777']')
861: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
862: 1:BoardData {
862: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
862: 1:  'expectedAnswer': '9999',
862: 1:  'history': [
862: 1:    {
862: 1:      'answer': '2',
862: 1:      'question': '1',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '4',
862: 1:      'question': '2',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '6',
862: 1:      'question': '3',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '8',
862: 1:      'question': '4',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '11',
862: 1:      'question': '5',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '33',
862: 1:      'question': '6',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '55',
862: 1:      'question': '7',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '99',
862: 1:      'question': '9',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '11',
862: 1:      'question': '10',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '22',
862: 1:      'question': '11',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '33',
862: 1:      'question': '12',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '444',
862: 1:      'question': '123',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '666',
862: 1:      'question': '234',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '888',
862: 1:      'question': '345',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '1221',
862: 1:      'question': '456',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '3663',
862: 1:      'question': '567',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '23232',
862: 1:      'question': '678',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '66066',
862: 1:      'question': '789',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '5555',
862: 1:      'question': '1234',
862: 1:      'valid': true
862: 1:    },
862: 1:    {
862: 1:      'answer': '7777',
862: 1:      'question': '2345',
862: 1:      'valid': true
862: 1:    }
862: 1:  ],
862: 1:  'info': [
862: 1:    '✅f(1) = 2',
862: 1:    '✅f(2) = 4',
862: 1:    '✅f(3) = 6',
862: 1:    '✅f(4) = 8',
862: 1:    '✅f(5) = 11',
862: 1:    '✅f(6) = 33',
862: 1:    '✅f(7) = 55',
862: 1:    '✅f(9) = 99',
862: 1:    '✅f(10) = 11',
862: 1:    '✅f(11) = 22',
862: 1:    '✅f(12) = 33',
862: 1:    '✅f(123) = 444',
862: 1:    '✅f(234) = 666',
862: 1:    '✅f(345) = 888',
862: 1:    '✅f(456) = 1221',
862: 1:    '✅f(567) = 3663',
862: 1:    '✅f(678) = 23232',
862: 1:    '✅f(789) = 66066',
862: 1:    '✅f(1234) = 5555',
862: 1:    '✅f(2345) = 7777',
862: 1:    '❌f(3456) = ??? != 9999'
862: 1:  ],
862: 1:  'level': 30,
862: 1:  'nextQuestion': '3456',
862: 1:  'questions': [
862: 1:    '1',
862: 1:    '2',
862: 1:    '3',
862: 1:    '4',
862: 1:    '5',
862: 1:    '6',
862: 1:    '7',
862: 1:    '9',
862: 1:    '10',
862: 1:    '11',
862: 1:    '12',
862: 1:    '123',
862: 1:    '234',
862: 1:    '345',
862: 1:    '456',
862: 1:    '567',
862: 1:    '678',
862: 1:    '789',
862: 1:    '1234',
862: 1:    '2345',
862: 1:    '3456'
862: 1:  ]
862: 1:}
862: 1:Scores: 89760
862: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999']')
862: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
863: 1:BoardData {
863: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
863: 1:  'expectedAnswer': '12221',
863: 1:  'history': [
863: 1:    {
863: 1:      'answer': '2',
863: 1:      'question': '1',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '4',
863: 1:      'question': '2',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '6',
863: 1:      'question': '3',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '8',
863: 1:      'question': '4',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '11',
863: 1:      'question': '5',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '33',
863: 1:      'question': '6',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '55',
863: 1:      'question': '7',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '99',
863: 1:      'question': '9',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '11',
863: 1:      'question': '10',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '22',
863: 1:      'question': '11',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '33',
863: 1:      'question': '12',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '444',
863: 1:      'question': '123',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '666',
863: 1:      'question': '234',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '888',
863: 1:      'question': '345',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '1221',
863: 1:      'question': '456',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '3663',
863: 1:      'question': '567',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '23232',
863: 1:      'question': '678',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '66066',
863: 1:      'question': '789',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '5555',
863: 1:      'question': '1234',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '7777',
863: 1:      'question': '2345',
863: 1:      'valid': true
863: 1:    },
863: 1:    {
863: 1:      'answer': '9999',
863: 1:      'question': '3456',
863: 1:      'valid': true
863: 1:    }
863: 1:  ],
863: 1:  'info': [
863: 1:    '✅f(1) = 2',
863: 1:    '✅f(2) = 4',
863: 1:    '✅f(3) = 6',
863: 1:    '✅f(4) = 8',
863: 1:    '✅f(5) = 11',
863: 1:    '✅f(6) = 33',
863: 1:    '✅f(7) = 55',
863: 1:    '✅f(9) = 99',
863: 1:    '✅f(10) = 11',
863: 1:    '✅f(11) = 22',
863: 1:    '✅f(12) = 33',
863: 1:    '✅f(123) = 444',
863: 1:    '✅f(234) = 666',
863: 1:    '✅f(345) = 888',
863: 1:    '✅f(456) = 1221',
863: 1:    '✅f(567) = 3663',
863: 1:    '✅f(678) = 23232',
863: 1:    '✅f(789) = 66066',
863: 1:    '✅f(1234) = 5555',
863: 1:    '✅f(2345) = 7777',
863: 1:    '✅f(3456) = 9999',
863: 1:    '❌f(4567) = ??? != 12221'
863: 1:  ],
863: 1:  'level': 30,
863: 1:  'nextQuestion': '4567',
863: 1:  'questions': [
863: 1:    '1',
863: 1:    '2',
863: 1:    '3',
863: 1:    '4',
863: 1:    '5',
863: 1:    '6',
863: 1:    '7',
863: 1:    '9',
863: 1:    '10',
863: 1:    '11',
863: 1:    '12',
863: 1:    '123',
863: 1:    '234',
863: 1:    '345',
863: 1:    '456',
863: 1:    '567',
863: 1:    '678',
863: 1:    '789',
863: 1:    '1234',
863: 1:    '2345',
863: 1:    '3456',
863: 1:    '4567'
863: 1:  ]
863: 1:}
863: 1:Scores: 89774
863: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221']')
863: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
864: 1:BoardData {
864: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
864: 1:  'expectedAnswer': '48884',
864: 1:  'history': [
864: 1:    {
864: 1:      'answer': '2',
864: 1:      'question': '1',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '4',
864: 1:      'question': '2',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '6',
864: 1:      'question': '3',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '8',
864: 1:      'question': '4',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '11',
864: 1:      'question': '5',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '33',
864: 1:      'question': '6',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '55',
864: 1:      'question': '7',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '99',
864: 1:      'question': '9',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '11',
864: 1:      'question': '10',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '22',
864: 1:      'question': '11',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '33',
864: 1:      'question': '12',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '444',
864: 1:      'question': '123',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '666',
864: 1:      'question': '234',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '888',
864: 1:      'question': '345',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '1221',
864: 1:      'question': '456',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '3663',
864: 1:      'question': '567',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '23232',
864: 1:      'question': '678',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '66066',
864: 1:      'question': '789',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '5555',
864: 1:      'question': '1234',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '7777',
864: 1:      'question': '2345',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '9999',
864: 1:      'question': '3456',
864: 1:      'valid': true
864: 1:    },
864: 1:    {
864: 1:      'answer': '12221',
864: 1:      'question': '4567',
864: 1:      'valid': true
864: 1:    }
864: 1:  ],
864: 1:  'info': [
864: 1:    '✅f(1) = 2',
864: 1:    '✅f(2) = 4',
864: 1:    '✅f(3) = 6',
864: 1:    '✅f(4) = 8',
864: 1:    '✅f(5) = 11',
864: 1:    '✅f(6) = 33',
864: 1:    '✅f(7) = 55',
864: 1:    '✅f(9) = 99',
864: 1:    '✅f(10) = 11',
864: 1:    '✅f(11) = 22',
864: 1:    '✅f(12) = 33',
864: 1:    '✅f(123) = 444',
864: 1:    '✅f(234) = 666',
864: 1:    '✅f(345) = 888',
864: 1:    '✅f(456) = 1221',
864: 1:    '✅f(567) = 3663',
864: 1:    '✅f(678) = 23232',
864: 1:    '✅f(789) = 66066',
864: 1:    '✅f(1234) = 5555',
864: 1:    '✅f(2345) = 7777',
864: 1:    '✅f(3456) = 9999',
864: 1:    '✅f(4567) = 12221',
864: 1:    '❌f(5678) = ??? != 48884'
864: 1:  ],
864: 1:  'level': 30,
864: 1:  'nextQuestion': '5678',
864: 1:  'questions': [
864: 1:    '1',
864: 1:    '2',
864: 1:    '3',
864: 1:    '4',
864: 1:    '5',
864: 1:    '6',
864: 1:    '7',
864: 1:    '9',
864: 1:    '10',
864: 1:    '11',
864: 1:    '12',
864: 1:    '123',
864: 1:    '234',
864: 1:    '345',
864: 1:    '456',
864: 1:    '567',
864: 1:    '678',
864: 1:    '789',
864: 1:    '1234',
864: 1:    '2345',
864: 1:    '3456',
864: 1:    '4567',
864: 1:    '5678'
864: 1:  ]
864: 1:}
864: 1:Scores: 89788
864: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221', '48884']')
864: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
865: 1:BoardData {
865: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
865: 1:  'expectedAnswer': '993399',
865: 1:  'history': [
865: 1:    {
865: 1:      'answer': '2',
865: 1:      'question': '1',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '4',
865: 1:      'question': '2',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '6',
865: 1:      'question': '3',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '8',
865: 1:      'question': '4',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '11',
865: 1:      'question': '5',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '33',
865: 1:      'question': '6',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '55',
865: 1:      'question': '7',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '99',
865: 1:      'question': '9',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '11',
865: 1:      'question': '10',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '22',
865: 1:      'question': '11',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '33',
865: 1:      'question': '12',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '444',
865: 1:      'question': '123',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '666',
865: 1:      'question': '234',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '888',
865: 1:      'question': '345',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '1221',
865: 1:      'question': '456',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '3663',
865: 1:      'question': '567',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '23232',
865: 1:      'question': '678',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '66066',
865: 1:      'question': '789',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '5555',
865: 1:      'question': '1234',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '7777',
865: 1:      'question': '2345',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '9999',
865: 1:      'question': '3456',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '12221',
865: 1:      'question': '4567',
865: 1:      'valid': true
865: 1:    },
865: 1:    {
865: 1:      'answer': '48884',
865: 1:      'question': '5678',
865: 1:      'valid': true
865: 1:    }
865: 1:  ],
865: 1:  'info': [
865: 1:    '✅f(1) = 2',
865: 1:    '✅f(2) = 4',
865: 1:    '✅f(3) = 6',
865: 1:    '✅f(4) = 8',
865: 1:    '✅f(5) = 11',
865: 1:    '✅f(6) = 33',
865: 1:    '✅f(7) = 55',
865: 1:    '✅f(9) = 99',
865: 1:    '✅f(10) = 11',
865: 1:    '✅f(11) = 22',
865: 1:    '✅f(12) = 33',
865: 1:    '✅f(123) = 444',
865: 1:    '✅f(234) = 666',
865: 1:    '✅f(345) = 888',
865: 1:    '✅f(456) = 1221',
865: 1:    '✅f(567) = 3663',
865: 1:    '✅f(678) = 23232',
865: 1:    '✅f(789) = 66066',
865: 1:    '✅f(1234) = 5555',
865: 1:    '✅f(2345) = 7777',
865: 1:    '✅f(3456) = 9999',
865: 1:    '✅f(4567) = 12221',
865: 1:    '✅f(5678) = 48884',
865: 1:    '❌f(6789) = ??? != 993399'
865: 1:  ],
865: 1:  'level': 30,
865: 1:  'nextQuestion': '6789',
865: 1:  'questions': [
865: 1:    '1',
865: 1:    '2',
865: 1:    '3',
865: 1:    '4',
865: 1:    '5',
865: 1:    '6',
865: 1:    '7',
865: 1:    '9',
865: 1:    '10',
865: 1:    '11',
865: 1:    '12',
865: 1:    '123',
865: 1:    '234',
865: 1:    '345',
865: 1:    '456',
865: 1:    '567',
865: 1:    '678',
865: 1:    '789',
865: 1:    '1234',
865: 1:    '2345',
865: 1:    '3456',
865: 1:    '4567',
865: 1:    '5678',
865: 1:    '6789'
865: 1:  ]
865: 1:}
865: 1:Scores: 89802
865: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221', '48884', '993399']')
865: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
866: 1:BoardData {
866: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
866: 1:  'expectedAnswer': '993399',
866: 1:  'history': [
866: 1:    {
866: 1:      'answer': '2',
866: 1:      'question': '1',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '4',
866: 1:      'question': '2',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '6',
866: 1:      'question': '3',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '8',
866: 1:      'question': '4',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '11',
866: 1:      'question': '5',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '33',
866: 1:      'question': '6',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '55',
866: 1:      'question': '7',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '99',
866: 1:      'question': '9',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '11',
866: 1:      'question': '10',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '22',
866: 1:      'question': '11',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '33',
866: 1:      'question': '12',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '444',
866: 1:      'question': '123',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '666',
866: 1:      'question': '234',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '888',
866: 1:      'question': '345',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '1221',
866: 1:      'question': '456',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '3663',
866: 1:      'question': '567',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '23232',
866: 1:      'question': '678',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '66066',
866: 1:      'question': '789',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '5555',
866: 1:      'question': '1234',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '7777',
866: 1:      'question': '2345',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '9999',
866: 1:      'question': '3456',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '12221',
866: 1:      'question': '4567',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '48884',
866: 1:      'question': '5678',
866: 1:      'valid': true
866: 1:    },
866: 1:    {
866: 1:      'answer': '993399',
866: 1:      'question': '6789',
866: 1:      'valid': true
866: 1:    }
866: 1:  ],
866: 1:  'info': [
866: 1:    '✅f(1) = 2',
866: 1:    '✅f(2) = 4',
866: 1:    '✅f(3) = 6',
866: 1:    '✅f(4) = 8',
866: 1:    '✅f(5) = 11',
866: 1:    '✅f(6) = 33',
866: 1:    '✅f(7) = 55',
866: 1:    '✅f(9) = 99',
866: 1:    '✅f(10) = 11',
866: 1:    '✅f(11) = 22',
866: 1:    '✅f(12) = 33',
866: 1:    '✅f(123) = 444',
866: 1:    '✅f(234) = 666',
866: 1:    '✅f(345) = 888',
866: 1:    '✅f(456) = 1221',
866: 1:    '✅f(567) = 3663',
866: 1:    '✅f(678) = 23232',
866: 1:    '✅f(789) = 66066',
866: 1:    '✅f(1234) = 5555',
866: 1:    '✅f(2345) = 7777',
866: 1:    '✅f(3456) = 9999',
866: 1:    '✅f(4567) = 12221',
866: 1:    '✅f(5678) = 48884',
866: 1:    '✅f(6789) = 993399',
866: 1:    '❌f(7890) = ??? != 993399'
866: 1:  ],
866: 1:  'level': 30,
866: 1:  'nextQuestion': '7890',
866: 1:  'questions': [
866: 1:    '1',
866: 1:    '2',
866: 1:    '3',
866: 1:    '4',
866: 1:    '5',
866: 1:    '6',
866: 1:    '7',
866: 1:    '9',
866: 1:    '10',
866: 1:    '11',
866: 1:    '12',
866: 1:    '123',
866: 1:    '234',
866: 1:    '345',
866: 1:    '456',
866: 1:    '567',
866: 1:    '678',
866: 1:    '789',
866: 1:    '1234',
866: 1:    '2345',
866: 1:    '3456',
866: 1:    '4567',
866: 1:    '5678',
866: 1:    '6789',
866: 1:    '7890'
866: 1:  ]
866: 1:}
866: 1:Scores: 89816
866: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221', '48884', '993399', '993399']')
866: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
867: 1:BoardData {
867: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
867: 1:  'expectedAnswer': '66666',
867: 1:  'history': [
867: 1:    {
867: 1:      'answer': '2',
867: 1:      'question': '1',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '4',
867: 1:      'question': '2',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '6',
867: 1:      'question': '3',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '8',
867: 1:      'question': '4',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '11',
867: 1:      'question': '5',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '33',
867: 1:      'question': '6',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '55',
867: 1:      'question': '7',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '99',
867: 1:      'question': '9',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '11',
867: 1:      'question': '10',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '22',
867: 1:      'question': '11',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '33',
867: 1:      'question': '12',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '444',
867: 1:      'question': '123',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '666',
867: 1:      'question': '234',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '888',
867: 1:      'question': '345',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '1221',
867: 1:      'question': '456',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '3663',
867: 1:      'question': '567',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '23232',
867: 1:      'question': '678',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '66066',
867: 1:      'question': '789',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '5555',
867: 1:      'question': '1234',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '7777',
867: 1:      'question': '2345',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '9999',
867: 1:      'question': '3456',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '12221',
867: 1:      'question': '4567',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '48884',
867: 1:      'question': '5678',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '993399',
867: 1:      'question': '6789',
867: 1:      'valid': true
867: 1:    },
867: 1:    {
867: 1:      'answer': '993399',
867: 1:      'question': '7890',
867: 1:      'valid': true
867: 1:    }
867: 1:  ],
867: 1:  'info': [
867: 1:    '✅f(1) = 2',
867: 1:    '✅f(2) = 4',
867: 1:    '✅f(3) = 6',
867: 1:    '✅f(4) = 8',
867: 1:    '✅f(5) = 11',
867: 1:    '✅f(6) = 33',
867: 1:    '✅f(7) = 55',
867: 1:    '✅f(9) = 99',
867: 1:    '✅f(10) = 11',
867: 1:    '✅f(11) = 22',
867: 1:    '✅f(12) = 33',
867: 1:    '✅f(123) = 444',
867: 1:    '✅f(234) = 666',
867: 1:    '✅f(345) = 888',
867: 1:    '✅f(456) = 1221',
867: 1:    '✅f(567) = 3663',
867: 1:    '✅f(678) = 23232',
867: 1:    '✅f(789) = 66066',
867: 1:    '✅f(1234) = 5555',
867: 1:    '✅f(2345) = 7777',
867: 1:    '✅f(3456) = 9999',
867: 1:    '✅f(4567) = 12221',
867: 1:    '✅f(5678) = 48884',
867: 1:    '✅f(6789) = 993399',
867: 1:    '✅f(7890) = 993399',
867: 1:    '❌f(12345) = ??? != 66666'
867: 1:  ],
867: 1:  'level': 30,
867: 1:  'nextQuestion': '12345',
867: 1:  'questions': [
867: 1:    '1',
867: 1:    '2',
867: 1:    '3',
867: 1:    '4',
867: 1:    '5',
867: 1:    '6',
867: 1:    '7',
867: 1:    '9',
867: 1:    '10',
867: 1:    '11',
867: 1:    '12',
867: 1:    '123',
867: 1:    '234',
867: 1:    '345',
867: 1:    '456',
867: 1:    '567',
867: 1:    '678',
867: 1:    '789',
867: 1:    '1234',
867: 1:    '2345',
867: 1:    '3456',
867: 1:    '4567',
867: 1:    '5678',
867: 1:    '6789',
867: 1:    '7890',
867: 1:    '12345'
867: 1:  ]
867: 1:}
867: 1:Scores: 89830
867: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221', '48884', '993399', '993399', '66666']')
867: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
868: 1:BoardData {
868: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
868: 1:  'expectedAnswer': '777777',
868: 1:  'history': [
868: 1:    {
868: 1:      'answer': '2',
868: 1:      'question': '1',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '4',
868: 1:      'question': '2',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '6',
868: 1:      'question': '3',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '8',
868: 1:      'question': '4',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '11',
868: 1:      'question': '5',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '33',
868: 1:      'question': '6',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '55',
868: 1:      'question': '7',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '99',
868: 1:      'question': '9',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '11',
868: 1:      'question': '10',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '22',
868: 1:      'question': '11',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '33',
868: 1:      'question': '12',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '444',
868: 1:      'question': '123',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '666',
868: 1:      'question': '234',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '888',
868: 1:      'question': '345',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '1221',
868: 1:      'question': '456',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '3663',
868: 1:      'question': '567',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '23232',
868: 1:      'question': '678',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '66066',
868: 1:      'question': '789',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '5555',
868: 1:      'question': '1234',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '7777',
868: 1:      'question': '2345',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '9999',
868: 1:      'question': '3456',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '12221',
868: 1:      'question': '4567',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '48884',
868: 1:      'question': '5678',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '993399',
868: 1:      'question': '6789',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '993399',
868: 1:      'question': '7890',
868: 1:      'valid': true
868: 1:    },
868: 1:    {
868: 1:      'answer': '66666',
868: 1:      'question': '12345',
868: 1:      'valid': true
868: 1:    }
868: 1:  ],
868: 1:  'info': [
868: 1:    '✅f(1) = 2',
868: 1:    '✅f(2) = 4',
868: 1:    '✅f(3) = 6',
868: 1:    '✅f(4) = 8',
868: 1:    '✅f(5) = 11',
868: 1:    '✅f(6) = 33',
868: 1:    '✅f(7) = 55',
868: 1:    '✅f(9) = 99',
868: 1:    '✅f(10) = 11',
868: 1:    '✅f(11) = 22',
868: 1:    '✅f(12) = 33',
868: 1:    '✅f(123) = 444',
868: 1:    '✅f(234) = 666',
868: 1:    '✅f(345) = 888',
868: 1:    '✅f(456) = 1221',
868: 1:    '✅f(567) = 3663',
868: 1:    '✅f(678) = 23232',
868: 1:    '✅f(789) = 66066',
868: 1:    '✅f(1234) = 5555',
868: 1:    '✅f(2345) = 7777',
868: 1:    '✅f(3456) = 9999',
868: 1:    '✅f(4567) = 12221',
868: 1:    '✅f(5678) = 48884',
868: 1:    '✅f(6789) = 993399',
868: 1:    '✅f(7890) = 993399',
868: 1:    '✅f(12345) = 66666',
868: 1:    '❌f(123456) = ??? != 777777'
868: 1:  ],
868: 1:  'level': 30,
868: 1:  'nextQuestion': '123456',
868: 1:  'questions': [
868: 1:    '1',
868: 1:    '2',
868: 1:    '3',
868: 1:    '4',
868: 1:    '5',
868: 1:    '6',
868: 1:    '7',
868: 1:    '9',
868: 1:    '10',
868: 1:    '11',
868: 1:    '12',
868: 1:    '123',
868: 1:    '234',
868: 1:    '345',
868: 1:    '456',
868: 1:    '567',
868: 1:    '678',
868: 1:    '789',
868: 1:    '1234',
868: 1:    '2345',
868: 1:    '3456',
868: 1:    '4567',
868: 1:    '5678',
868: 1:    '6789',
868: 1:    '7890',
868: 1:    '12345',
868: 1:    '123456'
868: 1:  ]
868: 1:}
868: 1:Scores: 89844
868: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221', '48884', '993399', '993399', '66666', '777777']')
868: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
869: 1:BoardData {
869: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
869: 1:  'expectedAnswer': '8888888',
869: 1:  'history': [
869: 1:    {
869: 1:      'answer': '2',
869: 1:      'question': '1',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '4',
869: 1:      'question': '2',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '6',
869: 1:      'question': '3',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '8',
869: 1:      'question': '4',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '11',
869: 1:      'question': '5',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '33',
869: 1:      'question': '6',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '55',
869: 1:      'question': '7',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '99',
869: 1:      'question': '9',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '11',
869: 1:      'question': '10',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '22',
869: 1:      'question': '11',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '33',
869: 1:      'question': '12',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '444',
869: 1:      'question': '123',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '666',
869: 1:      'question': '234',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '888',
869: 1:      'question': '345',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '1221',
869: 1:      'question': '456',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '3663',
869: 1:      'question': '567',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '23232',
869: 1:      'question': '678',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '66066',
869: 1:      'question': '789',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '5555',
869: 1:      'question': '1234',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '7777',
869: 1:      'question': '2345',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '9999',
869: 1:      'question': '3456',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '12221',
869: 1:      'question': '4567',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '48884',
869: 1:      'question': '5678',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '993399',
869: 1:      'question': '6789',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '993399',
869: 1:      'question': '7890',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '66666',
869: 1:      'question': '12345',
869: 1:      'valid': true
869: 1:    },
869: 1:    {
869: 1:      'answer': '777777',
869: 1:      'question': '123456',
869: 1:      'valid': true
869: 1:    }
869: 1:  ],
869: 1:  'info': [
869: 1:    '✅f(1) = 2',
869: 1:    '✅f(2) = 4',
869: 1:    '✅f(3) = 6',
869: 1:    '✅f(4) = 8',
869: 1:    '✅f(5) = 11',
869: 1:    '✅f(6) = 33',
869: 1:    '✅f(7) = 55',
869: 1:    '✅f(9) = 99',
869: 1:    '✅f(10) = 11',
869: 1:    '✅f(11) = 22',
869: 1:    '✅f(12) = 33',
869: 1:    '✅f(123) = 444',
869: 1:    '✅f(234) = 666',
869: 1:    '✅f(345) = 888',
869: 1:    '✅f(456) = 1221',
869: 1:    '✅f(567) = 3663',
869: 1:    '✅f(678) = 23232',
869: 1:    '✅f(789) = 66066',
869: 1:    '✅f(1234) = 5555',
869: 1:    '✅f(2345) = 7777',
869: 1:    '✅f(3456) = 9999',
869: 1:    '✅f(4567) = 12221',
869: 1:    '✅f(5678) = 48884',
869: 1:    '✅f(6789) = 993399',
869: 1:    '✅f(7890) = 993399',
869: 1:    '✅f(12345) = 66666',
869: 1:    '✅f(123456) = 777777',
869: 1:    '❌f(1234567) = ??? != 8888888'
869: 1:  ],
869: 1:  'level': 30,
869: 1:  'nextQuestion': '1234567',
869: 1:  'questions': [
869: 1:    '1',
869: 1:    '2',
869: 1:    '3',
869: 1:    '4',
869: 1:    '5',
869: 1:    '6',
869: 1:    '7',
869: 1:    '9',
869: 1:    '10',
869: 1:    '11',
869: 1:    '12',
869: 1:    '123',
869: 1:    '234',
869: 1:    '345',
869: 1:    '456',
869: 1:    '567',
869: 1:    '678',
869: 1:    '789',
869: 1:    '1234',
869: 1:    '2345',
869: 1:    '3456',
869: 1:    '4567',
869: 1:    '5678',
869: 1:    '6789',
869: 1:    '7890',
869: 1:    '12345',
869: 1:    '123456',
869: 1:    '1234567'
869: 1:  ]
869: 1:}
869: 1:Scores: 89858
869: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221', '48884', '993399', '993399', '66666', '777777', '8888888']')
869: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
870: 1:BoardData {
870: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
870: 1:  'expectedAnswer': '99999999',
870: 1:  'history': [
870: 1:    {
870: 1:      'answer': '2',
870: 1:      'question': '1',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '4',
870: 1:      'question': '2',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '6',
870: 1:      'question': '3',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '8',
870: 1:      'question': '4',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '11',
870: 1:      'question': '5',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '33',
870: 1:      'question': '6',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '55',
870: 1:      'question': '7',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '99',
870: 1:      'question': '9',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '11',
870: 1:      'question': '10',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '22',
870: 1:      'question': '11',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '33',
870: 1:      'question': '12',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '444',
870: 1:      'question': '123',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '666',
870: 1:      'question': '234',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '888',
870: 1:      'question': '345',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '1221',
870: 1:      'question': '456',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '3663',
870: 1:      'question': '567',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '23232',
870: 1:      'question': '678',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '66066',
870: 1:      'question': '789',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '5555',
870: 1:      'question': '1234',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '7777',
870: 1:      'question': '2345',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '9999',
870: 1:      'question': '3456',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '12221',
870: 1:      'question': '4567',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '48884',
870: 1:      'question': '5678',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '993399',
870: 1:      'question': '6789',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '993399',
870: 1:      'question': '7890',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '66666',
870: 1:      'question': '12345',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '777777',
870: 1:      'question': '123456',
870: 1:      'valid': true
870: 1:    },
870: 1:    {
870: 1:      'answer': '8888888',
870: 1:      'question': '1234567',
870: 1:      'valid': true
870: 1:    }
870: 1:  ],
870: 1:  'info': [
870: 1:    '✅f(1) = 2',
870: 1:    '✅f(2) = 4',
870: 1:    '✅f(3) = 6',
870: 1:    '✅f(4) = 8',
870: 1:    '✅f(5) = 11',
870: 1:    '✅f(6) = 33',
870: 1:    '✅f(7) = 55',
870: 1:    '✅f(9) = 99',
870: 1:    '✅f(10) = 11',
870: 1:    '✅f(11) = 22',
870: 1:    '✅f(12) = 33',
870: 1:    '✅f(123) = 444',
870: 1:    '✅f(234) = 666',
870: 1:    '✅f(345) = 888',
870: 1:    '✅f(456) = 1221',
870: 1:    '✅f(567) = 3663',
870: 1:    '✅f(678) = 23232',
870: 1:    '✅f(789) = 66066',
870: 1:    '✅f(1234) = 5555',
870: 1:    '✅f(2345) = 7777',
870: 1:    '✅f(3456) = 9999',
870: 1:    '✅f(4567) = 12221',
870: 1:    '✅f(5678) = 48884',
870: 1:    '✅f(6789) = 993399',
870: 1:    '✅f(7890) = 993399',
870: 1:    '✅f(12345) = 66666',
870: 1:    '✅f(123456) = 777777',
870: 1:    '✅f(1234567) = 8888888',
870: 1:    '❌f(12345678) = ??? != 99999999'
870: 1:  ],
870: 1:  'level': 30,
870: 1:  'nextQuestion': '12345678',
870: 1:  'questions': [
870: 1:    '1',
870: 1:    '2',
870: 1:    '3',
870: 1:    '4',
870: 1:    '5',
870: 1:    '6',
870: 1:    '7',
870: 1:    '9',
870: 1:    '10',
870: 1:    '11',
870: 1:    '12',
870: 1:    '123',
870: 1:    '234',
870: 1:    '345',
870: 1:    '456',
870: 1:    '567',
870: 1:    '678',
870: 1:    '789',
870: 1:    '1234',
870: 1:    '2345',
870: 1:    '3456',
870: 1:    '4567',
870: 1:    '5678',
870: 1:    '6789',
870: 1:    '7890',
870: 1:    '12345',
870: 1:    '123456',
870: 1:    '1234567',
870: 1:    '12345678'
870: 1:  ]
870: 1:}
870: 1:Scores: 89872
870: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221', '48884', '993399', '993399', '66666', '777777', '8888888', '99999999']')
870: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
871: 1:BoardData {
871: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
871: 1:  'expectedAnswer': '1222222221',
871: 1:  'history': [
871: 1:    {
871: 1:      'answer': '2',
871: 1:      'question': '1',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '4',
871: 1:      'question': '2',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '6',
871: 1:      'question': '3',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '8',
871: 1:      'question': '4',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '11',
871: 1:      'question': '5',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '33',
871: 1:      'question': '6',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '55',
871: 1:      'question': '7',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '99',
871: 1:      'question': '9',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '11',
871: 1:      'question': '10',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '22',
871: 1:      'question': '11',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '33',
871: 1:      'question': '12',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '444',
871: 1:      'question': '123',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '666',
871: 1:      'question': '234',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '888',
871: 1:      'question': '345',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '1221',
871: 1:      'question': '456',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '3663',
871: 1:      'question': '567',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '23232',
871: 1:      'question': '678',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '66066',
871: 1:      'question': '789',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '5555',
871: 1:      'question': '1234',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '7777',
871: 1:      'question': '2345',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '9999',
871: 1:      'question': '3456',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '12221',
871: 1:      'question': '4567',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '48884',
871: 1:      'question': '5678',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '993399',
871: 1:      'question': '6789',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '993399',
871: 1:      'question': '7890',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '66666',
871: 1:      'question': '12345',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '777777',
871: 1:      'question': '123456',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '8888888',
871: 1:      'question': '1234567',
871: 1:      'valid': true
871: 1:    },
871: 1:    {
871: 1:      'answer': '99999999',
871: 1:      'question': '12345678',
871: 1:      'valid': true
871: 1:    }
871: 1:  ],
871: 1:  'info': [
871: 1:    '✅f(1) = 2',
871: 1:    '✅f(2) = 4',
871: 1:    '✅f(3) = 6',
871: 1:    '✅f(4) = 8',
871: 1:    '✅f(5) = 11',
871: 1:    '✅f(6) = 33',
871: 1:    '✅f(7) = 55',
871: 1:    '✅f(9) = 99',
871: 1:    '✅f(10) = 11',
871: 1:    '✅f(11) = 22',
871: 1:    '✅f(12) = 33',
871: 1:    '✅f(123) = 444',
871: 1:    '✅f(234) = 666',
871: 1:    '✅f(345) = 888',
871: 1:    '✅f(456) = 1221',
871: 1:    '✅f(567) = 3663',
871: 1:    '✅f(678) = 23232',
871: 1:    '✅f(789) = 66066',
871: 1:    '✅f(1234) = 5555',
871: 1:    '✅f(2345) = 7777',
871: 1:    '✅f(3456) = 9999',
871: 1:    '✅f(4567) = 12221',
871: 1:    '✅f(5678) = 48884',
871: 1:    '✅f(6789) = 993399',
871: 1:    '✅f(7890) = 993399',
871: 1:    '✅f(12345) = 66666',
871: 1:    '✅f(123456) = 777777',
871: 1:    '✅f(1234567) = 8888888',
871: 1:    '✅f(12345678) = 99999999',
871: 1:    '❌f(123456789) = ??? != 1222222221'
871: 1:  ],
871: 1:  'level': 30,
871: 1:  'nextQuestion': '123456789',
871: 1:  'questions': [
871: 1:    '1',
871: 1:    '2',
871: 1:    '3',
871: 1:    '4',
871: 1:    '5',
871: 1:    '6',
871: 1:    '7',
871: 1:    '9',
871: 1:    '10',
871: 1:    '11',
871: 1:    '12',
871: 1:    '123',
871: 1:    '234',
871: 1:    '345',
871: 1:    '456',
871: 1:    '567',
871: 1:    '678',
871: 1:    '789',
871: 1:    '1234',
871: 1:    '2345',
871: 1:    '3456',
871: 1:    '4567',
871: 1:    '5678',
871: 1:    '6789',
871: 1:    '7890',
871: 1:    '12345',
871: 1:    '123456',
871: 1:    '1234567',
871: 1:    '12345678',
871: 1:    '123456789'
871: 1:  ]
871: 1:}
871: 1:Scores: 89886
871: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221', '48884', '993399', '993399', '66666', '777777', '8888888', '99999999', '1222222221']')
871: 1:Fire Event: PassTest{complexity=45, testCount=31}
------------------------------------------
872: 1:BoardData {
872: 1:  'description': ['For the most of numbers iterative 'reverse and add' actions lead to palindrome number. For example: \nNumber 23: 23 + 32 = 55; \nNumber 254: 254 + 452 = 706; 706 + 607 = 1313; 1313 + 3131 = 4444;\nWrite a method which calculates 'ReverseAndAdd' palindrome for a number. i.e f(23) = 55; f(254) = 4444'],
872: 1:  'expectedAnswer': '3344444433',
872: 1:  'history': [
872: 1:    {
872: 1:      'answer': '2',
872: 1:      'question': '1',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '4',
872: 1:      'question': '2',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '6',
872: 1:      'question': '3',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '8',
872: 1:      'question': '4',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '11',
872: 1:      'question': '5',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '33',
872: 1:      'question': '6',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '55',
872: 1:      'question': '7',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '99',
872: 1:      'question': '9',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '11',
872: 1:      'question': '10',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '22',
872: 1:      'question': '11',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '33',
872: 1:      'question': '12',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '444',
872: 1:      'question': '123',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '666',
872: 1:      'question': '234',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '888',
872: 1:      'question': '345',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '1221',
872: 1:      'question': '456',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '3663',
872: 1:      'question': '567',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '23232',
872: 1:      'question': '678',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '66066',
872: 1:      'question': '789',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '5555',
872: 1:      'question': '1234',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '7777',
872: 1:      'question': '2345',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '9999',
872: 1:      'question': '3456',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '12221',
872: 1:      'question': '4567',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '48884',
872: 1:      'question': '5678',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '993399',
872: 1:      'question': '6789',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '993399',
872: 1:      'question': '7890',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '66666',
872: 1:      'question': '12345',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '777777',
872: 1:      'question': '123456',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '8888888',
872: 1:      'question': '1234567',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '99999999',
872: 1:      'question': '12345678',
872: 1:      'valid': true
872: 1:    },
872: 1:    {
872: 1:      'answer': '1222222221',
872: 1:      'question': '123456789',
872: 1:      'valid': true
872: 1:    }
872: 1:  ],
872: 1:  'info': [
872: 1:    '✅f(1) = 2',
872: 1:    '✅f(2) = 4',
872: 1:    '✅f(3) = 6',
872: 1:    '✅f(4) = 8',
872: 1:    '✅f(5) = 11',
872: 1:    '✅f(6) = 33',
872: 1:    '✅f(7) = 55',
872: 1:    '✅f(9) = 99',
872: 1:    '✅f(10) = 11',
872: 1:    '✅f(11) = 22',
872: 1:    '✅f(12) = 33',
872: 1:    '✅f(123) = 444',
872: 1:    '✅f(234) = 666',
872: 1:    '✅f(345) = 888',
872: 1:    '✅f(456) = 1221',
872: 1:    '✅f(567) = 3663',
872: 1:    '✅f(678) = 23232',
872: 1:    '✅f(789) = 66066',
872: 1:    '✅f(1234) = 5555',
872: 1:    '✅f(2345) = 7777',
872: 1:    '✅f(3456) = 9999',
872: 1:    '✅f(4567) = 12221',
872: 1:    '✅f(5678) = 48884',
872: 1:    '✅f(6789) = 993399',
872: 1:    '✅f(7890) = 993399',
872: 1:    '✅f(12345) = 66666',
872: 1:    '✅f(123456) = 777777',
872: 1:    '✅f(1234567) = 8888888',
872: 1:    '✅f(12345678) = 99999999',
872: 1:    '✅f(123456789) = 1222222221',
872: 1:    '❌f(1234567890) = ??? != 3344444433'
872: 1:  ],
872: 1:  'level': 30,
872: 1:  'nextQuestion': '1234567890',
872: 1:  'questions': [
872: 1:    '1',
872: 1:    '2',
872: 1:    '3',
872: 1:    '4',
872: 1:    '5',
872: 1:    '6',
872: 1:    '7',
872: 1:    '9',
872: 1:    '10',
872: 1:    '11',
872: 1:    '12',
872: 1:    '123',
872: 1:    '234',
872: 1:    '345',
872: 1:    '456',
872: 1:    '567',
872: 1:    '678',
872: 1:    '789',
872: 1:    '1234',
872: 1:    '2345',
872: 1:    '3456',
872: 1:    '4567',
872: 1:    '5678',
872: 1:    '6789',
872: 1:    '7890',
872: 1:    '12345',
872: 1:    '123456',
872: 1:    '1234567',
872: 1:    '12345678',
872: 1:    '123456789',
872: 1:    '1234567890'
872: 1:  ]
872: 1:}
872: 1:Scores: 89900
872: 1:Answer: message('['2', '4', '6', '8', '11', '33', '55', '99', '11', '22', '33', '444', '666', '888', '1221', '3663', '23232', '66066', '5555', '7777', '9999', '12221', '48884', '993399', '993399', '66666', '777777', '8888888', '99999999', '1222222221', '3344444433']')
872: 1:Fire Event: PassTest{complexity=45, testCount=31}
872: 1:Fire Event: NextAlgorithm{complexity=45, time=0}
------------------------------------------
873: 1:BoardData {
873: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
873: 1:  'history': [
873: 1:    {
873: 1:      'answer': '2',
873: 1:      'question': '1',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '4',
873: 1:      'question': '2',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '6',
873: 1:      'question': '3',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '8',
873: 1:      'question': '4',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '11',
873: 1:      'question': '5',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '33',
873: 1:      'question': '6',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '55',
873: 1:      'question': '7',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '99',
873: 1:      'question': '9',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '11',
873: 1:      'question': '10',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '22',
873: 1:      'question': '11',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '33',
873: 1:      'question': '12',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '444',
873: 1:      'question': '123',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '666',
873: 1:      'question': '234',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '888',
873: 1:      'question': '345',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '1221',
873: 1:      'question': '456',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '3663',
873: 1:      'question': '567',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '23232',
873: 1:      'question': '678',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '66066',
873: 1:      'question': '789',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '5555',
873: 1:      'question': '1234',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '7777',
873: 1:      'question': '2345',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '9999',
873: 1:      'question': '3456',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '12221',
873: 1:      'question': '4567',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '48884',
873: 1:      'question': '5678',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '993399',
873: 1:      'question': '6789',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '993399',
873: 1:      'question': '7890',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '66666',
873: 1:      'question': '12345',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '777777',
873: 1:      'question': '123456',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '8888888',
873: 1:      'question': '1234567',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '99999999',
873: 1:      'question': '12345678',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '1222222221',
873: 1:      'question': '123456789',
873: 1:      'valid': true
873: 1:    },
873: 1:    {
873: 1:      'answer': '3344444433',
873: 1:      'question': '1234567890',
873: 1:      'valid': true
873: 1:    }
873: 1:  ],
873: 1:  'info': [
873: 1:    '✅f(1) = 2',
873: 1:    '✅f(2) = 4',
873: 1:    '✅f(3) = 6',
873: 1:    '✅f(4) = 8',
873: 1:    '✅f(5) = 11',
873: 1:    '✅f(6) = 33',
873: 1:    '✅f(7) = 55',
873: 1:    '✅f(9) = 99',
873: 1:    '✅f(10) = 11',
873: 1:    '✅f(11) = 22',
873: 1:    '✅f(12) = 33',
873: 1:    '✅f(123) = 444',
873: 1:    '✅f(234) = 666',
873: 1:    '✅f(345) = 888',
873: 1:    '✅f(456) = 1221',
873: 1:    '✅f(567) = 3663',
873: 1:    '✅f(678) = 23232',
873: 1:    '✅f(789) = 66066',
873: 1:    '✅f(1234) = 5555',
873: 1:    '✅f(2345) = 7777',
873: 1:    '✅f(3456) = 9999',
873: 1:    '✅f(4567) = 12221',
873: 1:    '✅f(5678) = 48884',
873: 1:    '✅f(6789) = 993399',
873: 1:    '✅f(7890) = 993399',
873: 1:    '✅f(12345) = 66666',
873: 1:    '✅f(123456) = 777777',
873: 1:    '✅f(1234567) = 8888888',
873: 1:    '✅f(12345678) = 99999999',
873: 1:    '✅f(123456789) = 1222222221',
873: 1:    '✅f(1234567890) = 3344444433'
873: 1:  ],
873: 1:  'level': 30,
873: 1:  'questions': []
873: 1:}
873: 1:Scores: 95988
873: 1:Answer: message('StartNextLevel')
873: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
874: 1:BoardData {
874: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
874: 1:  'expectedAnswer': '971',
874: 1:  'history': [],
874: 1:  'info': ['❌f(1) = ??? != 971'],
874: 1:  'level': 31,
874: 1:  'nextQuestion': '1',
874: 1:  'questions': ['1']
874: 1:}
874: 1:Scores: 95988
874: 1:Answer: message('['971']')
874: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
875: 1:BoardData {
875: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
875: 1:  'expectedAnswer': '874',
875: 1:  'history': [{
875: 1:    'answer': '971',
875: 1:    'question': '1',
875: 1:    'valid': true
875: 1:  }],
875: 1:  'info': [
875: 1:    '✅f(1) = 971',
875: 1:    '❌f(2) = ??? != 874'
875: 1:  ],
875: 1:  'level': 31,
875: 1:  'nextQuestion': '2',
875: 1:  'questions': [
875: 1:    '1',
875: 1:    '2'
875: 1:  ]
875: 1:}
875: 1:Scores: 96008
875: 1:Answer: message('['971', '874']')
875: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
876: 1:BoardData {
876: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
876: 1:  'expectedAnswer': '787',
876: 1:  'history': [
876: 1:    {
876: 1:      'answer': '971',
876: 1:      'question': '1',
876: 1:      'valid': true
876: 1:    },
876: 1:    {
876: 1:      'answer': '874',
876: 1:      'question': '2',
876: 1:      'valid': true
876: 1:    }
876: 1:  ],
876: 1:  'info': [
876: 1:    '✅f(1) = 971',
876: 1:    '✅f(2) = 874',
876: 1:    '❌f(3) = ??? != 787'
876: 1:  ],
876: 1:  'level': 31,
876: 1:  'nextQuestion': '3',
876: 1:  'questions': [
876: 1:    '1',
876: 1:    '2',
876: 1:    '3'
876: 1:  ]
876: 1:}
876: 1:Scores: 96028
876: 1:Answer: message('['971', '874', '787']')
876: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
877: 1:BoardData {
877: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
877: 1:  'expectedAnswer': '709',
877: 1:  'history': [
877: 1:    {
877: 1:      'answer': '971',
877: 1:      'question': '1',
877: 1:      'valid': true
877: 1:    },
877: 1:    {
877: 1:      'answer': '874',
877: 1:      'question': '2',
877: 1:      'valid': true
877: 1:    },
877: 1:    {
877: 1:      'answer': '787',
877: 1:      'question': '3',
877: 1:      'valid': true
877: 1:    }
877: 1:  ],
877: 1:  'info': [
877: 1:    '✅f(1) = 971',
877: 1:    '✅f(2) = 874',
877: 1:    '✅f(3) = 787',
877: 1:    '❌f(4) = ??? != 709'
877: 1:  ],
877: 1:  'level': 31,
877: 1:  'nextQuestion': '4',
877: 1:  'questions': [
877: 1:    '1',
877: 1:    '2',
877: 1:    '3',
877: 1:    '4'
877: 1:  ]
877: 1:}
877: 1:Scores: 96048
877: 1:Answer: message('['971', '874', '787', '709']')
877: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
878: 1:BoardData {
878: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
878: 1:  'expectedAnswer': '639',
878: 1:  'history': [
878: 1:    {
878: 1:      'answer': '971',
878: 1:      'question': '1',
878: 1:      'valid': true
878: 1:    },
878: 1:    {
878: 1:      'answer': '874',
878: 1:      'question': '2',
878: 1:      'valid': true
878: 1:    },
878: 1:    {
878: 1:      'answer': '787',
878: 1:      'question': '3',
878: 1:      'valid': true
878: 1:    },
878: 1:    {
878: 1:      'answer': '709',
878: 1:      'question': '4',
878: 1:      'valid': true
878: 1:    }
878: 1:  ],
878: 1:  'info': [
878: 1:    '✅f(1) = 971',
878: 1:    '✅f(2) = 874',
878: 1:    '✅f(3) = 787',
878: 1:    '✅f(4) = 709',
878: 1:    '❌f(5) = ??? != 639'
878: 1:  ],
878: 1:  'level': 31,
878: 1:  'nextQuestion': '5',
878: 1:  'questions': [
878: 1:    '1',
878: 1:    '2',
878: 1:    '3',
878: 1:    '4',
878: 1:    '5'
878: 1:  ]
878: 1:}
878: 1:Scores: 96068
878: 1:Answer: message('['971', '874', '787', '709', '639']')
878: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
879: 1:BoardData {
879: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
879: 1:  'expectedAnswer': '576',
879: 1:  'history': [
879: 1:    {
879: 1:      'answer': '971',
879: 1:      'question': '1',
879: 1:      'valid': true
879: 1:    },
879: 1:    {
879: 1:      'answer': '874',
879: 1:      'question': '2',
879: 1:      'valid': true
879: 1:    },
879: 1:    {
879: 1:      'answer': '787',
879: 1:      'question': '3',
879: 1:      'valid': true
879: 1:    },
879: 1:    {
879: 1:      'answer': '709',
879: 1:      'question': '4',
879: 1:      'valid': true
879: 1:    },
879: 1:    {
879: 1:      'answer': '639',
879: 1:      'question': '5',
879: 1:      'valid': true
879: 1:    }
879: 1:  ],
879: 1:  'info': [
879: 1:    '✅f(1) = 971',
879: 1:    '✅f(2) = 874',
879: 1:    '✅f(3) = 787',
879: 1:    '✅f(4) = 709',
879: 1:    '✅f(5) = 639',
879: 1:    '❌f(6) = ??? != 576'
879: 1:  ],
879: 1:  'level': 31,
879: 1:  'nextQuestion': '6',
879: 1:  'questions': [
879: 1:    '1',
879: 1:    '2',
879: 1:    '3',
879: 1:    '4',
879: 1:    '5',
879: 1:    '6'
879: 1:  ]
879: 1:}
879: 1:Scores: 96088
879: 1:Answer: message('['971', '874', '787', '709', '639', '576']')
879: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
880: 1:BoardData {
880: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
880: 1:  'expectedAnswer': '519',
880: 1:  'history': [
880: 1:    {
880: 1:      'answer': '971',
880: 1:      'question': '1',
880: 1:      'valid': true
880: 1:    },
880: 1:    {
880: 1:      'answer': '874',
880: 1:      'question': '2',
880: 1:      'valid': true
880: 1:    },
880: 1:    {
880: 1:      'answer': '787',
880: 1:      'question': '3',
880: 1:      'valid': true
880: 1:    },
880: 1:    {
880: 1:      'answer': '709',
880: 1:      'question': '4',
880: 1:      'valid': true
880: 1:    },
880: 1:    {
880: 1:      'answer': '639',
880: 1:      'question': '5',
880: 1:      'valid': true
880: 1:    },
880: 1:    {
880: 1:      'answer': '576',
880: 1:      'question': '6',
880: 1:      'valid': true
880: 1:    }
880: 1:  ],
880: 1:  'info': [
880: 1:    '✅f(1) = 971',
880: 1:    '✅f(2) = 874',
880: 1:    '✅f(3) = 787',
880: 1:    '✅f(4) = 709',
880: 1:    '✅f(5) = 639',
880: 1:    '✅f(6) = 576',
880: 1:    '❌f(7) = ??? != 519'
880: 1:  ],
880: 1:  'level': 31,
880: 1:  'nextQuestion': '7',
880: 1:  'questions': [
880: 1:    '1',
880: 1:    '2',
880: 1:    '3',
880: 1:    '4',
880: 1:    '5',
880: 1:    '6',
880: 1:    '7'
880: 1:  ]
880: 1:}
880: 1:Scores: 96108
880: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519']')
880: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
881: 1:BoardData {
881: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
881: 1:  'expectedAnswer': '468',
881: 1:  'history': [
881: 1:    {
881: 1:      'answer': '971',
881: 1:      'question': '1',
881: 1:      'valid': true
881: 1:    },
881: 1:    {
881: 1:      'answer': '874',
881: 1:      'question': '2',
881: 1:      'valid': true
881: 1:    },
881: 1:    {
881: 1:      'answer': '787',
881: 1:      'question': '3',
881: 1:      'valid': true
881: 1:    },
881: 1:    {
881: 1:      'answer': '709',
881: 1:      'question': '4',
881: 1:      'valid': true
881: 1:    },
881: 1:    {
881: 1:      'answer': '639',
881: 1:      'question': '5',
881: 1:      'valid': true
881: 1:    },
881: 1:    {
881: 1:      'answer': '576',
881: 1:      'question': '6',
881: 1:      'valid': true
881: 1:    },
881: 1:    {
881: 1:      'answer': '519',
881: 1:      'question': '7',
881: 1:      'valid': true
881: 1:    }
881: 1:  ],
881: 1:  'info': [
881: 1:    '✅f(1) = 971',
881: 1:    '✅f(2) = 874',
881: 1:    '✅f(3) = 787',
881: 1:    '✅f(4) = 709',
881: 1:    '✅f(5) = 639',
881: 1:    '✅f(6) = 576',
881: 1:    '✅f(7) = 519',
881: 1:    '❌f(8) = ??? != 468'
881: 1:  ],
881: 1:  'level': 31,
881: 1:  'nextQuestion': '8',
881: 1:  'questions': [
881: 1:    '1',
881: 1:    '2',
881: 1:    '3',
881: 1:    '4',
881: 1:    '5',
881: 1:    '6',
881: 1:    '7',
881: 1:    '8'
881: 1:  ]
881: 1:}
881: 1:Scores: 96128
881: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468']')
881: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
882: 1:BoardData {
882: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
882: 1:  'expectedAnswer': '422',
882: 1:  'history': [
882: 1:    {
882: 1:      'answer': '971',
882: 1:      'question': '1',
882: 1:      'valid': true
882: 1:    },
882: 1:    {
882: 1:      'answer': '874',
882: 1:      'question': '2',
882: 1:      'valid': true
882: 1:    },
882: 1:    {
882: 1:      'answer': '787',
882: 1:      'question': '3',
882: 1:      'valid': true
882: 1:    },
882: 1:    {
882: 1:      'answer': '709',
882: 1:      'question': '4',
882: 1:      'valid': true
882: 1:    },
882: 1:    {
882: 1:      'answer': '639',
882: 1:      'question': '5',
882: 1:      'valid': true
882: 1:    },
882: 1:    {
882: 1:      'answer': '576',
882: 1:      'question': '6',
882: 1:      'valid': true
882: 1:    },
882: 1:    {
882: 1:      'answer': '519',
882: 1:      'question': '7',
882: 1:      'valid': true
882: 1:    },
882: 1:    {
882: 1:      'answer': '468',
882: 1:      'question': '8',
882: 1:      'valid': true
882: 1:    }
882: 1:  ],
882: 1:  'info': [
882: 1:    '✅f(1) = 971',
882: 1:    '✅f(2) = 874',
882: 1:    '✅f(3) = 787',
882: 1:    '✅f(4) = 709',
882: 1:    '✅f(5) = 639',
882: 1:    '✅f(6) = 576',
882: 1:    '✅f(7) = 519',
882: 1:    '✅f(8) = 468',
882: 1:    '❌f(9) = ??? != 422'
882: 1:  ],
882: 1:  'level': 31,
882: 1:  'nextQuestion': '9',
882: 1:  'questions': [
882: 1:    '1',
882: 1:    '2',
882: 1:    '3',
882: 1:    '4',
882: 1:    '5',
882: 1:    '6',
882: 1:    '7',
882: 1:    '8',
882: 1:    '9'
882: 1:  ]
882: 1:}
882: 1:Scores: 96148
882: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422']')
882: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
883: 1:BoardData {
883: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
883: 1:  'expectedAnswer': '380',
883: 1:  'history': [
883: 1:    {
883: 1:      'answer': '971',
883: 1:      'question': '1',
883: 1:      'valid': true
883: 1:    },
883: 1:    {
883: 1:      'answer': '874',
883: 1:      'question': '2',
883: 1:      'valid': true
883: 1:    },
883: 1:    {
883: 1:      'answer': '787',
883: 1:      'question': '3',
883: 1:      'valid': true
883: 1:    },
883: 1:    {
883: 1:      'answer': '709',
883: 1:      'question': '4',
883: 1:      'valid': true
883: 1:    },
883: 1:    {
883: 1:      'answer': '639',
883: 1:      'question': '5',
883: 1:      'valid': true
883: 1:    },
883: 1:    {
883: 1:      'answer': '576',
883: 1:      'question': '6',
883: 1:      'valid': true
883: 1:    },
883: 1:    {
883: 1:      'answer': '519',
883: 1:      'question': '7',
883: 1:      'valid': true
883: 1:    },
883: 1:    {
883: 1:      'answer': '468',
883: 1:      'question': '8',
883: 1:      'valid': true
883: 1:    },
883: 1:    {
883: 1:      'answer': '422',
883: 1:      'question': '9',
883: 1:      'valid': true
883: 1:    }
883: 1:  ],
883: 1:  'info': [
883: 1:    '✅f(1) = 971',
883: 1:    '✅f(2) = 874',
883: 1:    '✅f(3) = 787',
883: 1:    '✅f(4) = 709',
883: 1:    '✅f(5) = 639',
883: 1:    '✅f(6) = 576',
883: 1:    '✅f(7) = 519',
883: 1:    '✅f(8) = 468',
883: 1:    '✅f(9) = 422',
883: 1:    '❌f(10) = ??? != 380'
883: 1:  ],
883: 1:  'level': 31,
883: 1:  'nextQuestion': '10',
883: 1:  'questions': [
883: 1:    '1',
883: 1:    '2',
883: 1:    '3',
883: 1:    '4',
883: 1:    '5',
883: 1:    '6',
883: 1:    '7',
883: 1:    '8',
883: 1:    '9',
883: 1:    '10'
883: 1:  ]
883: 1:}
883: 1:Scores: 96168
883: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380']')
883: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
884: 1:BoardData {
884: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
884: 1:  'expectedAnswer': '342',
884: 1:  'history': [
884: 1:    {
884: 1:      'answer': '971',
884: 1:      'question': '1',
884: 1:      'valid': true
884: 1:    },
884: 1:    {
884: 1:      'answer': '874',
884: 1:      'question': '2',
884: 1:      'valid': true
884: 1:    },
884: 1:    {
884: 1:      'answer': '787',
884: 1:      'question': '3',
884: 1:      'valid': true
884: 1:    },
884: 1:    {
884: 1:      'answer': '709',
884: 1:      'question': '4',
884: 1:      'valid': true
884: 1:    },
884: 1:    {
884: 1:      'answer': '639',
884: 1:      'question': '5',
884: 1:      'valid': true
884: 1:    },
884: 1:    {
884: 1:      'answer': '576',
884: 1:      'question': '6',
884: 1:      'valid': true
884: 1:    },
884: 1:    {
884: 1:      'answer': '519',
884: 1:      'question': '7',
884: 1:      'valid': true
884: 1:    },
884: 1:    {
884: 1:      'answer': '468',
884: 1:      'question': '8',
884: 1:      'valid': true
884: 1:    },
884: 1:    {
884: 1:      'answer': '422',
884: 1:      'question': '9',
884: 1:      'valid': true
884: 1:    },
884: 1:    {
884: 1:      'answer': '380',
884: 1:      'question': '10',
884: 1:      'valid': true
884: 1:    }
884: 1:  ],
884: 1:  'info': [
884: 1:    '✅f(1) = 971',
884: 1:    '✅f(2) = 874',
884: 1:    '✅f(3) = 787',
884: 1:    '✅f(4) = 709',
884: 1:    '✅f(5) = 639',
884: 1:    '✅f(6) = 576',
884: 1:    '✅f(7) = 519',
884: 1:    '✅f(8) = 468',
884: 1:    '✅f(9) = 422',
884: 1:    '✅f(10) = 380',
884: 1:    '❌f(11) = ??? != 342'
884: 1:  ],
884: 1:  'level': 31,
884: 1:  'nextQuestion': '11',
884: 1:  'questions': [
884: 1:    '1',
884: 1:    '2',
884: 1:    '3',
884: 1:    '4',
884: 1:    '5',
884: 1:    '6',
884: 1:    '7',
884: 1:    '8',
884: 1:    '9',
884: 1:    '10',
884: 1:    '11'
884: 1:  ]
884: 1:}
884: 1:Scores: 96188
884: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342']')
884: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
885: 1:BoardData {
885: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
885: 1:  'expectedAnswer': '308',
885: 1:  'history': [
885: 1:    {
885: 1:      'answer': '971',
885: 1:      'question': '1',
885: 1:      'valid': true
885: 1:    },
885: 1:    {
885: 1:      'answer': '874',
885: 1:      'question': '2',
885: 1:      'valid': true
885: 1:    },
885: 1:    {
885: 1:      'answer': '787',
885: 1:      'question': '3',
885: 1:      'valid': true
885: 1:    },
885: 1:    {
885: 1:      'answer': '709',
885: 1:      'question': '4',
885: 1:      'valid': true
885: 1:    },
885: 1:    {
885: 1:      'answer': '639',
885: 1:      'question': '5',
885: 1:      'valid': true
885: 1:    },
885: 1:    {
885: 1:      'answer': '576',
885: 1:      'question': '6',
885: 1:      'valid': true
885: 1:    },
885: 1:    {
885: 1:      'answer': '519',
885: 1:      'question': '7',
885: 1:      'valid': true
885: 1:    },
885: 1:    {
885: 1:      'answer': '468',
885: 1:      'question': '8',
885: 1:      'valid': true
885: 1:    },
885: 1:    {
885: 1:      'answer': '422',
885: 1:      'question': '9',
885: 1:      'valid': true
885: 1:    },
885: 1:    {
885: 1:      'answer': '380',
885: 1:      'question': '10',
885: 1:      'valid': true
885: 1:    },
885: 1:    {
885: 1:      'answer': '342',
885: 1:      'question': '11',
885: 1:      'valid': true
885: 1:    }
885: 1:  ],
885: 1:  'info': [
885: 1:    '✅f(1) = 971',
885: 1:    '✅f(2) = 874',
885: 1:    '✅f(3) = 787',
885: 1:    '✅f(4) = 709',
885: 1:    '✅f(5) = 639',
885: 1:    '✅f(6) = 576',
885: 1:    '✅f(7) = 519',
885: 1:    '✅f(8) = 468',
885: 1:    '✅f(9) = 422',
885: 1:    '✅f(10) = 380',
885: 1:    '✅f(11) = 342',
885: 1:    '❌f(12) = ??? != 308'
885: 1:  ],
885: 1:  'level': 31,
885: 1:  'nextQuestion': '12',
885: 1:  'questions': [
885: 1:    '1',
885: 1:    '2',
885: 1:    '3',
885: 1:    '4',
885: 1:    '5',
885: 1:    '6',
885: 1:    '7',
885: 1:    '8',
885: 1:    '9',
885: 1:    '10',
885: 1:    '11',
885: 1:    '12'
885: 1:  ]
885: 1:}
885: 1:Scores: 96208
885: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308']')
885: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
886: 1:BoardData {
886: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
886: 1:  'expectedAnswer': '278',
886: 1:  'history': [
886: 1:    {
886: 1:      'answer': '971',
886: 1:      'question': '1',
886: 1:      'valid': true
886: 1:    },
886: 1:    {
886: 1:      'answer': '874',
886: 1:      'question': '2',
886: 1:      'valid': true
886: 1:    },
886: 1:    {
886: 1:      'answer': '787',
886: 1:      'question': '3',
886: 1:      'valid': true
886: 1:    },
886: 1:    {
886: 1:      'answer': '709',
886: 1:      'question': '4',
886: 1:      'valid': true
886: 1:    },
886: 1:    {
886: 1:      'answer': '639',
886: 1:      'question': '5',
886: 1:      'valid': true
886: 1:    },
886: 1:    {
886: 1:      'answer': '576',
886: 1:      'question': '6',
886: 1:      'valid': true
886: 1:    },
886: 1:    {
886: 1:      'answer': '519',
886: 1:      'question': '7',
886: 1:      'valid': true
886: 1:    },
886: 1:    {
886: 1:      'answer': '468',
886: 1:      'question': '8',
886: 1:      'valid': true
886: 1:    },
886: 1:    {
886: 1:      'answer': '422',
886: 1:      'question': '9',
886: 1:      'valid': true
886: 1:    },
886: 1:    {
886: 1:      'answer': '380',
886: 1:      'question': '10',
886: 1:      'valid': true
886: 1:    },
886: 1:    {
886: 1:      'answer': '342',
886: 1:      'question': '11',
886: 1:      'valid': true
886: 1:    },
886: 1:    {
886: 1:      'answer': '308',
886: 1:      'question': '12',
886: 1:      'valid': true
886: 1:    }
886: 1:  ],
886: 1:  'info': [
886: 1:    '✅f(1) = 971',
886: 1:    '✅f(2) = 874',
886: 1:    '✅f(3) = 787',
886: 1:    '✅f(4) = 709',
886: 1:    '✅f(5) = 639',
886: 1:    '✅f(6) = 576',
886: 1:    '✅f(7) = 519',
886: 1:    '✅f(8) = 468',
886: 1:    '✅f(9) = 422',
886: 1:    '✅f(10) = 380',
886: 1:    '✅f(11) = 342',
886: 1:    '✅f(12) = 308',
886: 1:    '❌f(13) = ??? != 278'
886: 1:  ],
886: 1:  'level': 31,
886: 1:  'nextQuestion': '13',
886: 1:  'questions': [
886: 1:    '1',
886: 1:    '2',
886: 1:    '3',
886: 1:    '4',
886: 1:    '5',
886: 1:    '6',
886: 1:    '7',
886: 1:    '8',
886: 1:    '9',
886: 1:    '10',
886: 1:    '11',
886: 1:    '12',
886: 1:    '13'
886: 1:  ]
886: 1:}
886: 1:Scores: 96228
886: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278']')
886: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
887: 1:BoardData {
887: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
887: 1:  'expectedAnswer': '251',
887: 1:  'history': [
887: 1:    {
887: 1:      'answer': '971',
887: 1:      'question': '1',
887: 1:      'valid': true
887: 1:    },
887: 1:    {
887: 1:      'answer': '874',
887: 1:      'question': '2',
887: 1:      'valid': true
887: 1:    },
887: 1:    {
887: 1:      'answer': '787',
887: 1:      'question': '3',
887: 1:      'valid': true
887: 1:    },
887: 1:    {
887: 1:      'answer': '709',
887: 1:      'question': '4',
887: 1:      'valid': true
887: 1:    },
887: 1:    {
887: 1:      'answer': '639',
887: 1:      'question': '5',
887: 1:      'valid': true
887: 1:    },
887: 1:    {
887: 1:      'answer': '576',
887: 1:      'question': '6',
887: 1:      'valid': true
887: 1:    },
887: 1:    {
887: 1:      'answer': '519',
887: 1:      'question': '7',
887: 1:      'valid': true
887: 1:    },
887: 1:    {
887: 1:      'answer': '468',
887: 1:      'question': '8',
887: 1:      'valid': true
887: 1:    },
887: 1:    {
887: 1:      'answer': '422',
887: 1:      'question': '9',
887: 1:      'valid': true
887: 1:    },
887: 1:    {
887: 1:      'answer': '380',
887: 1:      'question': '10',
887: 1:      'valid': true
887: 1:    },
887: 1:    {
887: 1:      'answer': '342',
887: 1:      'question': '11',
887: 1:      'valid': true
887: 1:    },
887: 1:    {
887: 1:      'answer': '308',
887: 1:      'question': '12',
887: 1:      'valid': true
887: 1:    },
887: 1:    {
887: 1:      'answer': '278',
887: 1:      'question': '13',
887: 1:      'valid': true
887: 1:    }
887: 1:  ],
887: 1:  'info': [
887: 1:    '✅f(1) = 971',
887: 1:    '✅f(2) = 874',
887: 1:    '✅f(3) = 787',
887: 1:    '✅f(4) = 709',
887: 1:    '✅f(5) = 639',
887: 1:    '✅f(6) = 576',
887: 1:    '✅f(7) = 519',
887: 1:    '✅f(8) = 468',
887: 1:    '✅f(9) = 422',
887: 1:    '✅f(10) = 380',
887: 1:    '✅f(11) = 342',
887: 1:    '✅f(12) = 308',
887: 1:    '✅f(13) = 278',
887: 1:    '❌f(14) = ??? != 251'
887: 1:  ],
887: 1:  'level': 31,
887: 1:  'nextQuestion': '14',
887: 1:  'questions': [
887: 1:    '1',
887: 1:    '2',
887: 1:    '3',
887: 1:    '4',
887: 1:    '5',
887: 1:    '6',
887: 1:    '7',
887: 1:    '8',
887: 1:    '9',
887: 1:    '10',
887: 1:    '11',
887: 1:    '12',
887: 1:    '13',
887: 1:    '14'
887: 1:  ]
887: 1:}
887: 1:Scores: 96248
887: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251']')
887: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
888: 1:BoardData {
888: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
888: 1:  'expectedAnswer': '226',
888: 1:  'history': [
888: 1:    {
888: 1:      'answer': '971',
888: 1:      'question': '1',
888: 1:      'valid': true
888: 1:    },
888: 1:    {
888: 1:      'answer': '874',
888: 1:      'question': '2',
888: 1:      'valid': true
888: 1:    },
888: 1:    {
888: 1:      'answer': '787',
888: 1:      'question': '3',
888: 1:      'valid': true
888: 1:    },
888: 1:    {
888: 1:      'answer': '709',
888: 1:      'question': '4',
888: 1:      'valid': true
888: 1:    },
888: 1:    {
888: 1:      'answer': '639',
888: 1:      'question': '5',
888: 1:      'valid': true
888: 1:    },
888: 1:    {
888: 1:      'answer': '576',
888: 1:      'question': '6',
888: 1:      'valid': true
888: 1:    },
888: 1:    {
888: 1:      'answer': '519',
888: 1:      'question': '7',
888: 1:      'valid': true
888: 1:    },
888: 1:    {
888: 1:      'answer': '468',
888: 1:      'question': '8',
888: 1:      'valid': true
888: 1:    },
888: 1:    {
888: 1:      'answer': '422',
888: 1:      'question': '9',
888: 1:      'valid': true
888: 1:    },
888: 1:    {
888: 1:      'answer': '380',
888: 1:      'question': '10',
888: 1:      'valid': true
888: 1:    },
888: 1:    {
888: 1:      'answer': '342',
888: 1:      'question': '11',
888: 1:      'valid': true
888: 1:    },
888: 1:    {
888: 1:      'answer': '308',
888: 1:      'question': '12',
888: 1:      'valid': true
888: 1:    },
888: 1:    {
888: 1:      'answer': '278',
888: 1:      'question': '13',
888: 1:      'valid': true
888: 1:    },
888: 1:    {
888: 1:      'answer': '251',
888: 1:      'question': '14',
888: 1:      'valid': true
888: 1:    }
888: 1:  ],
888: 1:  'info': [
888: 1:    '✅f(1) = 971',
888: 1:    '✅f(2) = 874',
888: 1:    '✅f(3) = 787',
888: 1:    '✅f(4) = 709',
888: 1:    '✅f(5) = 639',
888: 1:    '✅f(6) = 576',
888: 1:    '✅f(7) = 519',
888: 1:    '✅f(8) = 468',
888: 1:    '✅f(9) = 422',
888: 1:    '✅f(10) = 380',
888: 1:    '✅f(11) = 342',
888: 1:    '✅f(12) = 308',
888: 1:    '✅f(13) = 278',
888: 1:    '✅f(14) = 251',
888: 1:    '❌f(15) = ??? != 226'
888: 1:  ],
888: 1:  'level': 31,
888: 1:  'nextQuestion': '15',
888: 1:  'questions': [
888: 1:    '1',
888: 1:    '2',
888: 1:    '3',
888: 1:    '4',
888: 1:    '5',
888: 1:    '6',
888: 1:    '7',
888: 1:    '8',
888: 1:    '9',
888: 1:    '10',
888: 1:    '11',
888: 1:    '12',
888: 1:    '13',
888: 1:    '14',
888: 1:    '15'
888: 1:  ]
888: 1:}
888: 1:Scores: 96268
888: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226']')
888: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
889: 1:BoardData {
889: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
889: 1:  'expectedAnswer': '204',
889: 1:  'history': [
889: 1:    {
889: 1:      'answer': '971',
889: 1:      'question': '1',
889: 1:      'valid': true
889: 1:    },
889: 1:    {
889: 1:      'answer': '874',
889: 1:      'question': '2',
889: 1:      'valid': true
889: 1:    },
889: 1:    {
889: 1:      'answer': '787',
889: 1:      'question': '3',
889: 1:      'valid': true
889: 1:    },
889: 1:    {
889: 1:      'answer': '709',
889: 1:      'question': '4',
889: 1:      'valid': true
889: 1:    },
889: 1:    {
889: 1:      'answer': '639',
889: 1:      'question': '5',
889: 1:      'valid': true
889: 1:    },
889: 1:    {
889: 1:      'answer': '576',
889: 1:      'question': '6',
889: 1:      'valid': true
889: 1:    },
889: 1:    {
889: 1:      'answer': '519',
889: 1:      'question': '7',
889: 1:      'valid': true
889: 1:    },
889: 1:    {
889: 1:      'answer': '468',
889: 1:      'question': '8',
889: 1:      'valid': true
889: 1:    },
889: 1:    {
889: 1:      'answer': '422',
889: 1:      'question': '9',
889: 1:      'valid': true
889: 1:    },
889: 1:    {
889: 1:      'answer': '380',
889: 1:      'question': '10',
889: 1:      'valid': true
889: 1:    },
889: 1:    {
889: 1:      'answer': '342',
889: 1:      'question': '11',
889: 1:      'valid': true
889: 1:    },
889: 1:    {
889: 1:      'answer': '308',
889: 1:      'question': '12',
889: 1:      'valid': true
889: 1:    },
889: 1:    {
889: 1:      'answer': '278',
889: 1:      'question': '13',
889: 1:      'valid': true
889: 1:    },
889: 1:    {
889: 1:      'answer': '251',
889: 1:      'question': '14',
889: 1:      'valid': true
889: 1:    },
889: 1:    {
889: 1:      'answer': '226',
889: 1:      'question': '15',
889: 1:      'valid': true
889: 1:    }
889: 1:  ],
889: 1:  'info': [
889: 1:    '✅f(1) = 971',
889: 1:    '✅f(2) = 874',
889: 1:    '✅f(3) = 787',
889: 1:    '✅f(4) = 709',
889: 1:    '✅f(5) = 639',
889: 1:    '✅f(6) = 576',
889: 1:    '✅f(7) = 519',
889: 1:    '✅f(8) = 468',
889: 1:    '✅f(9) = 422',
889: 1:    '✅f(10) = 380',
889: 1:    '✅f(11) = 342',
889: 1:    '✅f(12) = 308',
889: 1:    '✅f(13) = 278',
889: 1:    '✅f(14) = 251',
889: 1:    '✅f(15) = 226',
889: 1:    '❌f(16) = ??? != 204'
889: 1:  ],
889: 1:  'level': 31,
889: 1:  'nextQuestion': '16',
889: 1:  'questions': [
889: 1:    '1',
889: 1:    '2',
889: 1:    '3',
889: 1:    '4',
889: 1:    '5',
889: 1:    '6',
889: 1:    '7',
889: 1:    '8',
889: 1:    '9',
889: 1:    '10',
889: 1:    '11',
889: 1:    '12',
889: 1:    '13',
889: 1:    '14',
889: 1:    '15',
889: 1:    '16'
889: 1:  ]
889: 1:}
889: 1:Scores: 96288
889: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204']')
889: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
890: 1:BoardData {
890: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
890: 1:  'expectedAnswer': '184',
890: 1:  'history': [
890: 1:    {
890: 1:      'answer': '971',
890: 1:      'question': '1',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '874',
890: 1:      'question': '2',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '787',
890: 1:      'question': '3',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '709',
890: 1:      'question': '4',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '639',
890: 1:      'question': '5',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '576',
890: 1:      'question': '6',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '519',
890: 1:      'question': '7',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '468',
890: 1:      'question': '8',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '422',
890: 1:      'question': '9',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '380',
890: 1:      'question': '10',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '342',
890: 1:      'question': '11',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '308',
890: 1:      'question': '12',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '278',
890: 1:      'question': '13',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '251',
890: 1:      'question': '14',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '226',
890: 1:      'question': '15',
890: 1:      'valid': true
890: 1:    },
890: 1:    {
890: 1:      'answer': '204',
890: 1:      'question': '16',
890: 1:      'valid': true
890: 1:    }
890: 1:  ],
890: 1:  'info': [
890: 1:    '✅f(1) = 971',
890: 1:    '✅f(2) = 874',
890: 1:    '✅f(3) = 787',
890: 1:    '✅f(4) = 709',
890: 1:    '✅f(5) = 639',
890: 1:    '✅f(6) = 576',
890: 1:    '✅f(7) = 519',
890: 1:    '✅f(8) = 468',
890: 1:    '✅f(9) = 422',
890: 1:    '✅f(10) = 380',
890: 1:    '✅f(11) = 342',
890: 1:    '✅f(12) = 308',
890: 1:    '✅f(13) = 278',
890: 1:    '✅f(14) = 251',
890: 1:    '✅f(15) = 226',
890: 1:    '✅f(16) = 204',
890: 1:    '❌f(17) = ??? != 184'
890: 1:  ],
890: 1:  'level': 31,
890: 1:  'nextQuestion': '17',
890: 1:  'questions': [
890: 1:    '1',
890: 1:    '2',
890: 1:    '3',
890: 1:    '4',
890: 1:    '5',
890: 1:    '6',
890: 1:    '7',
890: 1:    '8',
890: 1:    '9',
890: 1:    '10',
890: 1:    '11',
890: 1:    '12',
890: 1:    '13',
890: 1:    '14',
890: 1:    '15',
890: 1:    '16',
890: 1:    '17'
890: 1:  ]
890: 1:}
890: 1:Scores: 96308
890: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204', '184']')
890: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
891: 1:BoardData {
891: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
891: 1:  'expectedAnswer': '166',
891: 1:  'history': [
891: 1:    {
891: 1:      'answer': '971',
891: 1:      'question': '1',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '874',
891: 1:      'question': '2',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '787',
891: 1:      'question': '3',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '709',
891: 1:      'question': '4',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '639',
891: 1:      'question': '5',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '576',
891: 1:      'question': '6',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '519',
891: 1:      'question': '7',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '468',
891: 1:      'question': '8',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '422',
891: 1:      'question': '9',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '380',
891: 1:      'question': '10',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '342',
891: 1:      'question': '11',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '308',
891: 1:      'question': '12',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '278',
891: 1:      'question': '13',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '251',
891: 1:      'question': '14',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '226',
891: 1:      'question': '15',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '204',
891: 1:      'question': '16',
891: 1:      'valid': true
891: 1:    },
891: 1:    {
891: 1:      'answer': '184',
891: 1:      'question': '17',
891: 1:      'valid': true
891: 1:    }
891: 1:  ],
891: 1:  'info': [
891: 1:    '✅f(1) = 971',
891: 1:    '✅f(2) = 874',
891: 1:    '✅f(3) = 787',
891: 1:    '✅f(4) = 709',
891: 1:    '✅f(5) = 639',
891: 1:    '✅f(6) = 576',
891: 1:    '✅f(7) = 519',
891: 1:    '✅f(8) = 468',
891: 1:    '✅f(9) = 422',
891: 1:    '✅f(10) = 380',
891: 1:    '✅f(11) = 342',
891: 1:    '✅f(12) = 308',
891: 1:    '✅f(13) = 278',
891: 1:    '✅f(14) = 251',
891: 1:    '✅f(15) = 226',
891: 1:    '✅f(16) = 204',
891: 1:    '✅f(17) = 184',
891: 1:    '❌f(18) = ??? != 166'
891: 1:  ],
891: 1:  'level': 31,
891: 1:  'nextQuestion': '18',
891: 1:  'questions': [
891: 1:    '1',
891: 1:    '2',
891: 1:    '3',
891: 1:    '4',
891: 1:    '5',
891: 1:    '6',
891: 1:    '7',
891: 1:    '8',
891: 1:    '9',
891: 1:    '10',
891: 1:    '11',
891: 1:    '12',
891: 1:    '13',
891: 1:    '14',
891: 1:    '15',
891: 1:    '16',
891: 1:    '17',
891: 1:    '18'
891: 1:  ]
891: 1:}
891: 1:Scores: 96328
891: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204', '184', '166']')
891: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
892: 1:BoardData {
892: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
892: 1:  'expectedAnswer': '150',
892: 1:  'history': [
892: 1:    {
892: 1:      'answer': '971',
892: 1:      'question': '1',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '874',
892: 1:      'question': '2',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '787',
892: 1:      'question': '3',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '709',
892: 1:      'question': '4',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '639',
892: 1:      'question': '5',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '576',
892: 1:      'question': '6',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '519',
892: 1:      'question': '7',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '468',
892: 1:      'question': '8',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '422',
892: 1:      'question': '9',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '380',
892: 1:      'question': '10',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '342',
892: 1:      'question': '11',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '308',
892: 1:      'question': '12',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '278',
892: 1:      'question': '13',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '251',
892: 1:      'question': '14',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '226',
892: 1:      'question': '15',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '204',
892: 1:      'question': '16',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '184',
892: 1:      'question': '17',
892: 1:      'valid': true
892: 1:    },
892: 1:    {
892: 1:      'answer': '166',
892: 1:      'question': '18',
892: 1:      'valid': true
892: 1:    }
892: 1:  ],
892: 1:  'info': [
892: 1:    '✅f(1) = 971',
892: 1:    '✅f(2) = 874',
892: 1:    '✅f(3) = 787',
892: 1:    '✅f(4) = 709',
892: 1:    '✅f(5) = 639',
892: 1:    '✅f(6) = 576',
892: 1:    '✅f(7) = 519',
892: 1:    '✅f(8) = 468',
892: 1:    '✅f(9) = 422',
892: 1:    '✅f(10) = 380',
892: 1:    '✅f(11) = 342',
892: 1:    '✅f(12) = 308',
892: 1:    '✅f(13) = 278',
892: 1:    '✅f(14) = 251',
892: 1:    '✅f(15) = 226',
892: 1:    '✅f(16) = 204',
892: 1:    '✅f(17) = 184',
892: 1:    '✅f(18) = 166',
892: 1:    '❌f(19) = ??? != 150'
892: 1:  ],
892: 1:  'level': 31,
892: 1:  'nextQuestion': '19',
892: 1:  'questions': [
892: 1:    '1',
892: 1:    '2',
892: 1:    '3',
892: 1:    '4',
892: 1:    '5',
892: 1:    '6',
892: 1:    '7',
892: 1:    '8',
892: 1:    '9',
892: 1:    '10',
892: 1:    '11',
892: 1:    '12',
892: 1:    '13',
892: 1:    '14',
892: 1:    '15',
892: 1:    '16',
892: 1:    '17',
892: 1:    '18',
892: 1:    '19'
892: 1:  ]
892: 1:}
892: 1:Scores: 96348
892: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204', '184', '166', '150']')
892: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
893: 1:BoardData {
893: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
893: 1:  'expectedAnswer': '135',
893: 1:  'history': [
893: 1:    {
893: 1:      'answer': '971',
893: 1:      'question': '1',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '874',
893: 1:      'question': '2',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '787',
893: 1:      'question': '3',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '709',
893: 1:      'question': '4',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '639',
893: 1:      'question': '5',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '576',
893: 1:      'question': '6',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '519',
893: 1:      'question': '7',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '468',
893: 1:      'question': '8',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '422',
893: 1:      'question': '9',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '380',
893: 1:      'question': '10',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '342',
893: 1:      'question': '11',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '308',
893: 1:      'question': '12',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '278',
893: 1:      'question': '13',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '251',
893: 1:      'question': '14',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '226',
893: 1:      'question': '15',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '204',
893: 1:      'question': '16',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '184',
893: 1:      'question': '17',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '166',
893: 1:      'question': '18',
893: 1:      'valid': true
893: 1:    },
893: 1:    {
893: 1:      'answer': '150',
893: 1:      'question': '19',
893: 1:      'valid': true
893: 1:    }
893: 1:  ],
893: 1:  'info': [
893: 1:    '✅f(1) = 971',
893: 1:    '✅f(2) = 874',
893: 1:    '✅f(3) = 787',
893: 1:    '✅f(4) = 709',
893: 1:    '✅f(5) = 639',
893: 1:    '✅f(6) = 576',
893: 1:    '✅f(7) = 519',
893: 1:    '✅f(8) = 468',
893: 1:    '✅f(9) = 422',
893: 1:    '✅f(10) = 380',
893: 1:    '✅f(11) = 342',
893: 1:    '✅f(12) = 308',
893: 1:    '✅f(13) = 278',
893: 1:    '✅f(14) = 251',
893: 1:    '✅f(15) = 226',
893: 1:    '✅f(16) = 204',
893: 1:    '✅f(17) = 184',
893: 1:    '✅f(18) = 166',
893: 1:    '✅f(19) = 150',
893: 1:    '❌f(20) = ??? != 135'
893: 1:  ],
893: 1:  'level': 31,
893: 1:  'nextQuestion': '20',
893: 1:  'questions': [
893: 1:    '1',
893: 1:    '2',
893: 1:    '3',
893: 1:    '4',
893: 1:    '5',
893: 1:    '6',
893: 1:    '7',
893: 1:    '8',
893: 1:    '9',
893: 1:    '10',
893: 1:    '11',
893: 1:    '12',
893: 1:    '13',
893: 1:    '14',
893: 1:    '15',
893: 1:    '16',
893: 1:    '17',
893: 1:    '18',
893: 1:    '19',
893: 1:    '20'
893: 1:  ]
893: 1:}
893: 1:Scores: 96368
893: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204', '184', '166', '150', '135']')
893: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
894: 1:BoardData {
894: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
894: 1:  'expectedAnswer': '122',
894: 1:  'history': [
894: 1:    {
894: 1:      'answer': '971',
894: 1:      'question': '1',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '874',
894: 1:      'question': '2',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '787',
894: 1:      'question': '3',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '709',
894: 1:      'question': '4',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '639',
894: 1:      'question': '5',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '576',
894: 1:      'question': '6',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '519',
894: 1:      'question': '7',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '468',
894: 1:      'question': '8',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '422',
894: 1:      'question': '9',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '380',
894: 1:      'question': '10',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '342',
894: 1:      'question': '11',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '308',
894: 1:      'question': '12',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '278',
894: 1:      'question': '13',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '251',
894: 1:      'question': '14',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '226',
894: 1:      'question': '15',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '204',
894: 1:      'question': '16',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '184',
894: 1:      'question': '17',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '166',
894: 1:      'question': '18',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '150',
894: 1:      'question': '19',
894: 1:      'valid': true
894: 1:    },
894: 1:    {
894: 1:      'answer': '135',
894: 1:      'question': '20',
894: 1:      'valid': true
894: 1:    }
894: 1:  ],
894: 1:  'info': [
894: 1:    '✅f(1) = 971',
894: 1:    '✅f(2) = 874',
894: 1:    '✅f(3) = 787',
894: 1:    '✅f(4) = 709',
894: 1:    '✅f(5) = 639',
894: 1:    '✅f(6) = 576',
894: 1:    '✅f(7) = 519',
894: 1:    '✅f(8) = 468',
894: 1:    '✅f(9) = 422',
894: 1:    '✅f(10) = 380',
894: 1:    '✅f(11) = 342',
894: 1:    '✅f(12) = 308',
894: 1:    '✅f(13) = 278',
894: 1:    '✅f(14) = 251',
894: 1:    '✅f(15) = 226',
894: 1:    '✅f(16) = 204',
894: 1:    '✅f(17) = 184',
894: 1:    '✅f(18) = 166',
894: 1:    '✅f(19) = 150',
894: 1:    '✅f(20) = 135',
894: 1:    '❌f(21) = ??? != 122'
894: 1:  ],
894: 1:  'level': 31,
894: 1:  'nextQuestion': '21',
894: 1:  'questions': [
894: 1:    '1',
894: 1:    '2',
894: 1:    '3',
894: 1:    '4',
894: 1:    '5',
894: 1:    '6',
894: 1:    '7',
894: 1:    '8',
894: 1:    '9',
894: 1:    '10',
894: 1:    '11',
894: 1:    '12',
894: 1:    '13',
894: 1:    '14',
894: 1:    '15',
894: 1:    '16',
894: 1:    '17',
894: 1:    '18',
894: 1:    '19',
894: 1:    '20',
894: 1:    '21'
894: 1:  ]
894: 1:}
894: 1:Scores: 96388
894: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204', '184', '166', '150', '135', '122']')
894: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
895: 1:BoardData {
895: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
895: 1:  'expectedAnswer': '110',
895: 1:  'history': [
895: 1:    {
895: 1:      'answer': '971',
895: 1:      'question': '1',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '874',
895: 1:      'question': '2',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '787',
895: 1:      'question': '3',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '709',
895: 1:      'question': '4',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '639',
895: 1:      'question': '5',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '576',
895: 1:      'question': '6',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '519',
895: 1:      'question': '7',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '468',
895: 1:      'question': '8',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '422',
895: 1:      'question': '9',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '380',
895: 1:      'question': '10',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '342',
895: 1:      'question': '11',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '308',
895: 1:      'question': '12',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '278',
895: 1:      'question': '13',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '251',
895: 1:      'question': '14',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '226',
895: 1:      'question': '15',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '204',
895: 1:      'question': '16',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '184',
895: 1:      'question': '17',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '166',
895: 1:      'question': '18',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '150',
895: 1:      'question': '19',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '135',
895: 1:      'question': '20',
895: 1:      'valid': true
895: 1:    },
895: 1:    {
895: 1:      'answer': '122',
895: 1:      'question': '21',
895: 1:      'valid': true
895: 1:    }
895: 1:  ],
895: 1:  'info': [
895: 1:    '✅f(1) = 971',
895: 1:    '✅f(2) = 874',
895: 1:    '✅f(3) = 787',
895: 1:    '✅f(4) = 709',
895: 1:    '✅f(5) = 639',
895: 1:    '✅f(6) = 576',
895: 1:    '✅f(7) = 519',
895: 1:    '✅f(8) = 468',
895: 1:    '✅f(9) = 422',
895: 1:    '✅f(10) = 380',
895: 1:    '✅f(11) = 342',
895: 1:    '✅f(12) = 308',
895: 1:    '✅f(13) = 278',
895: 1:    '✅f(14) = 251',
895: 1:    '✅f(15) = 226',
895: 1:    '✅f(16) = 204',
895: 1:    '✅f(17) = 184',
895: 1:    '✅f(18) = 166',
895: 1:    '✅f(19) = 150',
895: 1:    '✅f(20) = 135',
895: 1:    '✅f(21) = 122',
895: 1:    '❌f(22) = ??? != 110'
895: 1:  ],
895: 1:  'level': 31,
895: 1:  'nextQuestion': '22',
895: 1:  'questions': [
895: 1:    '1',
895: 1:    '2',
895: 1:    '3',
895: 1:    '4',
895: 1:    '5',
895: 1:    '6',
895: 1:    '7',
895: 1:    '8',
895: 1:    '9',
895: 1:    '10',
895: 1:    '11',
895: 1:    '12',
895: 1:    '13',
895: 1:    '14',
895: 1:    '15',
895: 1:    '16',
895: 1:    '17',
895: 1:    '18',
895: 1:    '19',
895: 1:    '20',
895: 1:    '21',
895: 1:    '22'
895: 1:  ]
895: 1:}
895: 1:Scores: 96408
895: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204', '184', '166', '150', '135', '122', '110']')
895: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
896: 1:BoardData {
896: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
896: 1:  'expectedAnswer': '99',
896: 1:  'history': [
896: 1:    {
896: 1:      'answer': '971',
896: 1:      'question': '1',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '874',
896: 1:      'question': '2',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '787',
896: 1:      'question': '3',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '709',
896: 1:      'question': '4',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '639',
896: 1:      'question': '5',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '576',
896: 1:      'question': '6',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '519',
896: 1:      'question': '7',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '468',
896: 1:      'question': '8',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '422',
896: 1:      'question': '9',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '380',
896: 1:      'question': '10',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '342',
896: 1:      'question': '11',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '308',
896: 1:      'question': '12',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '278',
896: 1:      'question': '13',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '251',
896: 1:      'question': '14',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '226',
896: 1:      'question': '15',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '204',
896: 1:      'question': '16',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '184',
896: 1:      'question': '17',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '166',
896: 1:      'question': '18',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '150',
896: 1:      'question': '19',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '135',
896: 1:      'question': '20',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '122',
896: 1:      'question': '21',
896: 1:      'valid': true
896: 1:    },
896: 1:    {
896: 1:      'answer': '110',
896: 1:      'question': '22',
896: 1:      'valid': true
896: 1:    }
896: 1:  ],
896: 1:  'info': [
896: 1:    '✅f(1) = 971',
896: 1:    '✅f(2) = 874',
896: 1:    '✅f(3) = 787',
896: 1:    '✅f(4) = 709',
896: 1:    '✅f(5) = 639',
896: 1:    '✅f(6) = 576',
896: 1:    '✅f(7) = 519',
896: 1:    '✅f(8) = 468',
896: 1:    '✅f(9) = 422',
896: 1:    '✅f(10) = 380',
896: 1:    '✅f(11) = 342',
896: 1:    '✅f(12) = 308',
896: 1:    '✅f(13) = 278',
896: 1:    '✅f(14) = 251',
896: 1:    '✅f(15) = 226',
896: 1:    '✅f(16) = 204',
896: 1:    '✅f(17) = 184',
896: 1:    '✅f(18) = 166',
896: 1:    '✅f(19) = 150',
896: 1:    '✅f(20) = 135',
896: 1:    '✅f(21) = 122',
896: 1:    '✅f(22) = 110',
896: 1:    '❌f(23) = ??? != 99'
896: 1:  ],
896: 1:  'level': 31,
896: 1:  'nextQuestion': '23',
896: 1:  'questions': [
896: 1:    '1',
896: 1:    '2',
896: 1:    '3',
896: 1:    '4',
896: 1:    '5',
896: 1:    '6',
896: 1:    '7',
896: 1:    '8',
896: 1:    '9',
896: 1:    '10',
896: 1:    '11',
896: 1:    '12',
896: 1:    '13',
896: 1:    '14',
896: 1:    '15',
896: 1:    '16',
896: 1:    '17',
896: 1:    '18',
896: 1:    '19',
896: 1:    '20',
896: 1:    '21',
896: 1:    '22',
896: 1:    '23'
896: 1:  ]
896: 1:}
896: 1:Scores: 96428
896: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204', '184', '166', '150', '135', '122', '110', '99']')
896: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
897: 1:BoardData {
897: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
897: 1:  'expectedAnswer': '90',
897: 1:  'history': [
897: 1:    {
897: 1:      'answer': '971',
897: 1:      'question': '1',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '874',
897: 1:      'question': '2',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '787',
897: 1:      'question': '3',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '709',
897: 1:      'question': '4',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '639',
897: 1:      'question': '5',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '576',
897: 1:      'question': '6',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '519',
897: 1:      'question': '7',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '468',
897: 1:      'question': '8',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '422',
897: 1:      'question': '9',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '380',
897: 1:      'question': '10',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '342',
897: 1:      'question': '11',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '308',
897: 1:      'question': '12',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '278',
897: 1:      'question': '13',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '251',
897: 1:      'question': '14',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '226',
897: 1:      'question': '15',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '204',
897: 1:      'question': '16',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '184',
897: 1:      'question': '17',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '166',
897: 1:      'question': '18',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '150',
897: 1:      'question': '19',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '135',
897: 1:      'question': '20',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '122',
897: 1:      'question': '21',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '110',
897: 1:      'question': '22',
897: 1:      'valid': true
897: 1:    },
897: 1:    {
897: 1:      'answer': '99',
897: 1:      'question': '23',
897: 1:      'valid': true
897: 1:    }
897: 1:  ],
897: 1:  'info': [
897: 1:    '✅f(1) = 971',
897: 1:    '✅f(2) = 874',
897: 1:    '✅f(3) = 787',
897: 1:    '✅f(4) = 709',
897: 1:    '✅f(5) = 639',
897: 1:    '✅f(6) = 576',
897: 1:    '✅f(7) = 519',
897: 1:    '✅f(8) = 468',
897: 1:    '✅f(9) = 422',
897: 1:    '✅f(10) = 380',
897: 1:    '✅f(11) = 342',
897: 1:    '✅f(12) = 308',
897: 1:    '✅f(13) = 278',
897: 1:    '✅f(14) = 251',
897: 1:    '✅f(15) = 226',
897: 1:    '✅f(16) = 204',
897: 1:    '✅f(17) = 184',
897: 1:    '✅f(18) = 166',
897: 1:    '✅f(19) = 150',
897: 1:    '✅f(20) = 135',
897: 1:    '✅f(21) = 122',
897: 1:    '✅f(22) = 110',
897: 1:    '✅f(23) = 99',
897: 1:    '❌f(24) = ??? != 90'
897: 1:  ],
897: 1:  'level': 31,
897: 1:  'nextQuestion': '24',
897: 1:  'questions': [
897: 1:    '1',
897: 1:    '2',
897: 1:    '3',
897: 1:    '4',
897: 1:    '5',
897: 1:    '6',
897: 1:    '7',
897: 1:    '8',
897: 1:    '9',
897: 1:    '10',
897: 1:    '11',
897: 1:    '12',
897: 1:    '13',
897: 1:    '14',
897: 1:    '15',
897: 1:    '16',
897: 1:    '17',
897: 1:    '18',
897: 1:    '19',
897: 1:    '20',
897: 1:    '21',
897: 1:    '22',
897: 1:    '23',
897: 1:    '24'
897: 1:  ]
897: 1:}
897: 1:Scores: 96448
897: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204', '184', '166', '150', '135', '122', '110', '99', '90']')
897: 1:Fire Event: PassTest{complexity=50, testCount=25}
------------------------------------------
898: 1:BoardData {
898: 1:  'description': ['Continue the sequence 971, 874, 787, 709, 639...\ni.e f(1) = 971, f(2) = 874, ...\nHint: Use subtraction'],
898: 1:  'expectedAnswer': '81',
898: 1:  'history': [
898: 1:    {
898: 1:      'answer': '971',
898: 1:      'question': '1',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '874',
898: 1:      'question': '2',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '787',
898: 1:      'question': '3',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '709',
898: 1:      'question': '4',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '639',
898: 1:      'question': '5',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '576',
898: 1:      'question': '6',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '519',
898: 1:      'question': '7',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '468',
898: 1:      'question': '8',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '422',
898: 1:      'question': '9',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '380',
898: 1:      'question': '10',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '342',
898: 1:      'question': '11',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '308',
898: 1:      'question': '12',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '278',
898: 1:      'question': '13',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '251',
898: 1:      'question': '14',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '226',
898: 1:      'question': '15',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '204',
898: 1:      'question': '16',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '184',
898: 1:      'question': '17',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '166',
898: 1:      'question': '18',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '150',
898: 1:      'question': '19',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '135',
898: 1:      'question': '20',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '122',
898: 1:      'question': '21',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '110',
898: 1:      'question': '22',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '99',
898: 1:      'question': '23',
898: 1:      'valid': true
898: 1:    },
898: 1:    {
898: 1:      'answer': '90',
898: 1:      'question': '24',
898: 1:      'valid': true
898: 1:    }
898: 1:  ],
898: 1:  'info': [
898: 1:    '✅f(1) = 971',
898: 1:    '✅f(2) = 874',
898: 1:    '✅f(3) = 787',
898: 1:    '✅f(4) = 709',
898: 1:    '✅f(5) = 639',
898: 1:    '✅f(6) = 576',
898: 1:    '✅f(7) = 519',
898: 1:    '✅f(8) = 468',
898: 1:    '✅f(9) = 422',
898: 1:    '✅f(10) = 380',
898: 1:    '✅f(11) = 342',
898: 1:    '✅f(12) = 308',
898: 1:    '✅f(13) = 278',
898: 1:    '✅f(14) = 251',
898: 1:    '✅f(15) = 226',
898: 1:    '✅f(16) = 204',
898: 1:    '✅f(17) = 184',
898: 1:    '✅f(18) = 166',
898: 1:    '✅f(19) = 150',
898: 1:    '✅f(20) = 135',
898: 1:    '✅f(21) = 122',
898: 1:    '✅f(22) = 110',
898: 1:    '✅f(23) = 99',
898: 1:    '✅f(24) = 90',
898: 1:    '❌f(25) = ??? != 81'
898: 1:  ],
898: 1:  'level': 31,
898: 1:  'nextQuestion': '25',
898: 1:  'questions': [
898: 1:    '1',
898: 1:    '2',
898: 1:    '3',
898: 1:    '4',
898: 1:    '5',
898: 1:    '6',
898: 1:    '7',
898: 1:    '8',
898: 1:    '9',
898: 1:    '10',
898: 1:    '11',
898: 1:    '12',
898: 1:    '13',
898: 1:    '14',
898: 1:    '15',
898: 1:    '16',
898: 1:    '17',
898: 1:    '18',
898: 1:    '19',
898: 1:    '20',
898: 1:    '21',
898: 1:    '22',
898: 1:    '23',
898: 1:    '24',
898: 1:    '25'
898: 1:  ]
898: 1:}
898: 1:Scores: 96468
898: 1:Answer: message('['971', '874', '787', '709', '639', '576', '519', '468', '422', '380', '342', '308', '278', '251', '226', '204', '184', '166', '150', '135', '122', '110', '99', '90', '81']')
898: 1:Fire Event: PassTest{complexity=50, testCount=25}
898: 1:Fire Event: NextAlgorithm{complexity=50, time=0}
------------------------------------------
899: 1:BoardData {
899: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
899: 1:  'history': [
899: 1:    {
899: 1:      'answer': '971',
899: 1:      'question': '1',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '874',
899: 1:      'question': '2',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '787',
899: 1:      'question': '3',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '709',
899: 1:      'question': '4',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '639',
899: 1:      'question': '5',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '576',
899: 1:      'question': '6',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '519',
899: 1:      'question': '7',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '468',
899: 1:      'question': '8',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '422',
899: 1:      'question': '9',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '380',
899: 1:      'question': '10',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '342',
899: 1:      'question': '11',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '308',
899: 1:      'question': '12',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '278',
899: 1:      'question': '13',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '251',
899: 1:      'question': '14',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '226',
899: 1:      'question': '15',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '204',
899: 1:      'question': '16',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '184',
899: 1:      'question': '17',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '166',
899: 1:      'question': '18',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '150',
899: 1:      'question': '19',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '135',
899: 1:      'question': '20',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '122',
899: 1:      'question': '21',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '110',
899: 1:      'question': '22',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '99',
899: 1:      'question': '23',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '90',
899: 1:      'question': '24',
899: 1:      'valid': true
899: 1:    },
899: 1:    {
899: 1:      'answer': '81',
899: 1:      'question': '25',
899: 1:      'valid': true
899: 1:    }
899: 1:  ],
899: 1:  'info': [
899: 1:    '✅f(1) = 971',
899: 1:    '✅f(2) = 874',
899: 1:    '✅f(3) = 787',
899: 1:    '✅f(4) = 709',
899: 1:    '✅f(5) = 639',
899: 1:    '✅f(6) = 576',
899: 1:    '✅f(7) = 519',
899: 1:    '✅f(8) = 468',
899: 1:    '✅f(9) = 422',
899: 1:    '✅f(10) = 380',
899: 1:    '✅f(11) = 342',
899: 1:    '✅f(12) = 308',
899: 1:    '✅f(13) = 278',
899: 1:    '✅f(14) = 251',
899: 1:    '✅f(15) = 226',
899: 1:    '✅f(16) = 204',
899: 1:    '✅f(17) = 184',
899: 1:    '✅f(18) = 166',
899: 1:    '✅f(19) = 150',
899: 1:    '✅f(20) = 135',
899: 1:    '✅f(21) = 122',
899: 1:    '✅f(22) = 110',
899: 1:    '✅f(23) = 99',
899: 1:    '✅f(24) = 90',
899: 1:    '✅f(25) = 81'
899: 1:  ],
899: 1:  'level': 31,
899: 1:  'questions': []
899: 1:}
899: 1:Scores: 103237
899: 1:Answer: message('StartNextLevel')
899: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
900: 1:BoardData {
900: 1:  'description': [
900: 1:    'You are given an array of vertical lines height, so that Y-axis is the line height and X-axis is line index from an array. Write a Javascript function that finds two lines that together forms the rectangle with largest area. Return the maximum area number and line coordinates in format {area}:{x1},{x2}. For example:\n 1, 6, 3, 2, 8 => 18:1,4\n 5, 2, 8, 1, 4 => 16:0,4\n 7, 10, 2, 3, 1 => 9:0,3',
900: 1:    'Solve this task with O(n) complexity.',
900: 1:    'Return line coordinates of last found rectangle.'
900: 1:  ],
900: 1:  'expectedAnswer': '24:1,5',
900: 1:  'history': [],
900: 1:  'info': ['❌f(3, 6, 2, 5, 4, 8, 3) = ??? != 24:1,5'],
900: 1:  'level': 32,
900: 1:  'nextQuestion': '3, 6, 2, 5, 4, 8, 3',
900: 1:  'questions': ['3, 6, 2, 5, 4, 8, 3']
900: 1:}
900: 1:Scores: 103237
900: 1:Answer: message('['24:1,5']')
900: 1:Fire Event: PassTest{complexity=51, testCount=9}
------------------------------------------
901: 1:BoardData {
901: 1:  'description': [
901: 1:    'You are given an array of vertical lines height, so that Y-axis is the line height and X-axis is line index from an array. Write a Javascript function that finds two lines that together forms the rectangle with largest area. Return the maximum area number and line coordinates in format {area}:{x1},{x2}. For example:\n 1, 6, 3, 2, 8 => 18:1,4\n 5, 2, 8, 1, 4 => 16:0,4\n 7, 10, 2, 3, 1 => 9:0,3',
901: 1:    'Solve this task with O(n) complexity.',
901: 1:    'Return line coordinates of last found rectangle.'
901: 1:  ],
901: 1:  'expectedAnswer': '4:0,4',
901: 1:  'history': [{
901: 1:    'answer': '24:1,5',
901: 1:    'question': '3, 6, 2, 5, 4, 8, 3',
901: 1:    'valid': true
901: 1:  }],
901: 1:  'info': [
901: 1:    '✅f(3, 6, 2, 5, 4, 8, 3) = 24:1,5',
901: 1:    '❌f(1, 1, 1, 1, 1) = ??? != 4:0,4'
901: 1:  ],
901: 1:  'level': 32,
901: 1:  'nextQuestion': '1, 1, 1, 1, 1',
901: 1:  'questions': [
901: 1:    '3, 6, 2, 5, 4, 8, 3',
901: 1:    '1, 1, 1, 1, 1'
901: 1:  ]
901: 1:}
901: 1:Scores: 103293
901: 1:Answer: message('['24:1,5', '4:0,4']')
901: 1:Fire Event: PassTest{complexity=51, testCount=9}
------------------------------------------
902: 1:BoardData {
902: 1:  'description': [
902: 1:    'You are given an array of vertical lines height, so that Y-axis is the line height and X-axis is line index from an array. Write a Javascript function that finds two lines that together forms the rectangle with largest area. Return the maximum area number and line coordinates in format {area}:{x1},{x2}. For example:\n 1, 6, 3, 2, 8 => 18:1,4\n 5, 2, 8, 1, 4 => 16:0,4\n 7, 10, 2, 3, 1 => 9:0,3',
902: 1:    'Solve this task with O(n) complexity.',
902: 1:    'Return line coordinates of last found rectangle.'
902: 1:  ],
902: 1:  'expectedAnswer': '4:1,3',
902: 1:  'history': [
902: 1:    {
902: 1:      'answer': '24:1,5',
902: 1:      'question': '3, 6, 2, 5, 4, 8, 3',
902: 1:      'valid': true
902: 1:    },
902: 1:    {
902: 1:      'answer': '4:0,4',
902: 1:      'question': '1, 1, 1, 1, 1',
902: 1:      'valid': true
902: 1:    }
902: 1:  ],
902: 1:  'info': [
902: 1:    '✅f(3, 6, 2, 5, 4, 8, 3) = 24:1,5',
902: 1:    '✅f(1, 1, 1, 1, 1) = 4:0,4',
902: 1:    '❌f(1, 2, 1, 2, 1) = ??? != 4:1,3'
902: 1:  ],
902: 1:  'level': 32,
902: 1:  'nextQuestion': '1, 2, 1, 2, 1',
902: 1:  'questions': [
902: 1:    '3, 6, 2, 5, 4, 8, 3',
902: 1:    '1, 1, 1, 1, 1',
902: 1:    '1, 2, 1, 2, 1'
902: 1:  ]
902: 1:}
902: 1:Scores: 103349
902: 1:Answer: message('['24:1,5', '4:0,4', '4:1,3']')
902: 1:Fire Event: PassTest{complexity=51, testCount=9}
------------------------------------------
903: 1:BoardData {
903: 1:  'description': [
903: 1:    'You are given an array of vertical lines height, so that Y-axis is the line height and X-axis is line index from an array. Write a Javascript function that finds two lines that together forms the rectangle with largest area. Return the maximum area number and line coordinates in format {area}:{x1},{x2}. For example:\n 1, 6, 3, 2, 8 => 18:1,4\n 5, 2, 8, 1, 4 => 16:0,4\n 7, 10, 2, 3, 1 => 9:0,3',
903: 1:    'Solve this task with O(n) complexity.',
903: 1:    'Return line coordinates of last found rectangle.'
903: 1:  ],
903: 1:  'expectedAnswer': '4:0,4',
903: 1:  'history': [
903: 1:    {
903: 1:      'answer': '24:1,5',
903: 1:      'question': '3, 6, 2, 5, 4, 8, 3',
903: 1:      'valid': true
903: 1:    },
903: 1:    {
903: 1:      'answer': '4:0,4',
903: 1:      'question': '1, 1, 1, 1, 1',
903: 1:      'valid': true
903: 1:    },
903: 1:    {
903: 1:      'answer': '4:1,3',
903: 1:      'question': '1, 2, 1, 2, 1',
903: 1:      'valid': true
903: 1:    }
903: 1:  ],
903: 1:  'info': [
903: 1:    '✅f(3, 6, 2, 5, 4, 8, 3) = 24:1,5',
903: 1:    '✅f(1, 1, 1, 1, 1) = 4:0,4',
903: 1:    '✅f(1, 2, 1, 2, 1) = 4:1,3',
903: 1:    '❌f(1, 1, 10, 1, 1) = ??? != 4:0,4'
903: 1:  ],
903: 1:  'level': 32,
903: 1:  'nextQuestion': '1, 1, 10, 1, 1',
903: 1:  'questions': [
903: 1:    '3, 6, 2, 5, 4, 8, 3',
903: 1:    '1, 1, 1, 1, 1',
903: 1:    '1, 2, 1, 2, 1',
903: 1:    '1, 1, 10, 1, 1'
903: 1:  ]
903: 1:}
903: 1:Scores: 103405
903: 1:Answer: message('['24:1,5', '4:0,4', '4:1,3', '4:0,4']')
903: 1:Fire Event: PassTest{complexity=51, testCount=9}
------------------------------------------
904: 1:BoardData {
904: 1:  'description': [
904: 1:    'You are given an array of vertical lines height, so that Y-axis is the line height and X-axis is line index from an array. Write a Javascript function that finds two lines that together forms the rectangle with largest area. Return the maximum area number and line coordinates in format {area}:{x1},{x2}. For example:\n 1, 6, 3, 2, 8 => 18:1,4\n 5, 2, 8, 1, 4 => 16:0,4\n 7, 10, 2, 3, 1 => 9:0,3',
904: 1:    'Solve this task with O(n) complexity.',
904: 1:    'Return line coordinates of last found rectangle.'
904: 1:  ],
904: 1:  'expectedAnswer': '10:1,3',
904: 1:  'history': [
904: 1:    {
904: 1:      'answer': '24:1,5',
904: 1:      'question': '3, 6, 2, 5, 4, 8, 3',
904: 1:      'valid': true
904: 1:    },
904: 1:    {
904: 1:      'answer': '4:0,4',
904: 1:      'question': '1, 1, 1, 1, 1',
904: 1:      'valid': true
904: 1:    },
904: 1:    {
904: 1:      'answer': '4:1,3',
904: 1:      'question': '1, 2, 1, 2, 1',
904: 1:      'valid': true
904: 1:    },
904: 1:    {
904: 1:      'answer': '4:0,4',
904: 1:      'question': '1, 1, 10, 1, 1',
904: 1:      'valid': true
904: 1:    }
904: 1:  ],
904: 1:  'info': [
904: 1:    '✅f(3, 6, 2, 5, 4, 8, 3) = 24:1,5',
904: 1:    '✅f(1, 1, 1, 1, 1) = 4:0,4',
904: 1:    '✅f(1, 2, 1, 2, 1) = 4:1,3',
904: 1:    '✅f(1, 1, 10, 1, 1) = 4:0,4',
904: 1:    '❌f(1, 5, 10, 5, 1) = ??? != 10:1,3'
904: 1:  ],
904: 1:  'level': 32,
904: 1:  'nextQuestion': '1, 5, 10, 5, 1',
904: 1:  'questions': [
904: 1:    '3, 6, 2, 5, 4, 8, 3',
904: 1:    '1, 1, 1, 1, 1',
904: 1:    '1, 2, 1, 2, 1',
904: 1:    '1, 1, 10, 1, 1',
904: 1:    '1, 5, 10, 5, 1'
904: 1:  ]
904: 1:}
904: 1:Scores: 103461
904: 1:Answer: message('['24:1,5', '4:0,4', '4:1,3', '4:0,4', '10:1,3']')
904: 1:Fire Event: PassTest{complexity=51, testCount=9}
------------------------------------------
905: 1:BoardData {
905: 1:  'description': [
905: 1:    'You are given an array of vertical lines height, so that Y-axis is the line height and X-axis is line index from an array. Write a Javascript function that finds two lines that together forms the rectangle with largest area. Return the maximum area number and line coordinates in format {area}:{x1},{x2}. For example:\n 1, 6, 3, 2, 8 => 18:1,4\n 5, 2, 8, 1, 4 => 16:0,4\n 7, 10, 2, 3, 1 => 9:0,3',
905: 1:    'Solve this task with O(n) complexity.',
905: 1:    'Return line coordinates of last found rectangle.'
905: 1:  ],
905: 1:  'expectedAnswer': '20:0,4',
905: 1:  'history': [
905: 1:    {
905: 1:      'answer': '24:1,5',
905: 1:      'question': '3, 6, 2, 5, 4, 8, 3',
905: 1:      'valid': true
905: 1:    },
905: 1:    {
905: 1:      'answer': '4:0,4',
905: 1:      'question': '1, 1, 1, 1, 1',
905: 1:      'valid': true
905: 1:    },
905: 1:    {
905: 1:      'answer': '4:1,3',
905: 1:      'question': '1, 2, 1, 2, 1',
905: 1:      'valid': true
905: 1:    },
905: 1:    {
905: 1:      'answer': '4:0,4',
905: 1:      'question': '1, 1, 10, 1, 1',
905: 1:      'valid': true
905: 1:    },
905: 1:    {
905: 1:      'answer': '10:1,3',
905: 1:      'question': '1, 5, 10, 5, 1',
905: 1:      'valid': true
905: 1:    }
905: 1:  ],
905: 1:  'info': [
905: 1:    '✅f(3, 6, 2, 5, 4, 8, 3) = 24:1,5',
905: 1:    '✅f(1, 1, 1, 1, 1) = 4:0,4',
905: 1:    '✅f(1, 2, 1, 2, 1) = 4:1,3',
905: 1:    '✅f(1, 1, 10, 1, 1) = 4:0,4',
905: 1:    '✅f(1, 5, 10, 5, 1) = 10:1,3',
905: 1:    '❌f(5, 1, 10, 1, 5) = ??? != 20:0,4'
905: 1:  ],
905: 1:  'level': 32,
905: 1:  'nextQuestion': '5, 1, 10, 1, 5',
905: 1:  'questions': [
905: 1:    '3, 6, 2, 5, 4, 8, 3',
905: 1:    '1, 1, 1, 1, 1',
905: 1:    '1, 2, 1, 2, 1',
905: 1:    '1, 1, 10, 1, 1',
905: 1:    '1, 5, 10, 5, 1',
905: 1:    '5, 1, 10, 1, 5'
905: 1:  ]
905: 1:}
905: 1:Scores: 103517
905: 1:Answer: message('['24:1,5', '4:0,4', '4:1,3', '4:0,4', '10:1,3', '20:0,4']')
905: 1:Fire Event: PassTest{complexity=51, testCount=9}
------------------------------------------
906: 1:BoardData {
906: 1:  'description': [
906: 1:    'You are given an array of vertical lines height, so that Y-axis is the line height and X-axis is line index from an array. Write a Javascript function that finds two lines that together forms the rectangle with largest area. Return the maximum area number and line coordinates in format {area}:{x1},{x2}. For example:\n 1, 6, 3, 2, 8 => 18:1,4\n 5, 2, 8, 1, 4 => 16:0,4\n 7, 10, 2, 3, 1 => 9:0,3',
906: 1:    'Solve this task with O(n) complexity.',
906: 1:    'Return line coordinates of last found rectangle.'
906: 1:  ],
906: 1:  'expectedAnswer': '400:0,4',
906: 1:  'history': [
906: 1:    {
906: 1:      'answer': '24:1,5',
906: 1:      'question': '3, 6, 2, 5, 4, 8, 3',
906: 1:      'valid': true
906: 1:    },
906: 1:    {
906: 1:      'answer': '4:0,4',
906: 1:      'question': '1, 1, 1, 1, 1',
906: 1:      'valid': true
906: 1:    },
906: 1:    {
906: 1:      'answer': '4:1,3',
906: 1:      'question': '1, 2, 1, 2, 1',
906: 1:      'valid': true
906: 1:    },
906: 1:    {
906: 1:      'answer': '4:0,4',
906: 1:      'question': '1, 1, 10, 1, 1',
906: 1:      'valid': true
906: 1:    },
906: 1:    {
906: 1:      'answer': '10:1,3',
906: 1:      'question': '1, 5, 10, 5, 1',
906: 1:      'valid': true
906: 1:    },
906: 1:    {
906: 1:      'answer': '20:0,4',
906: 1:      'question': '5, 1, 10, 1, 5',
906: 1:      'valid': true
906: 1:    }
906: 1:  ],
906: 1:  'info': [
906: 1:    '✅f(3, 6, 2, 5, 4, 8, 3) = 24:1,5',
906: 1:    '✅f(1, 1, 1, 1, 1) = 4:0,4',
906: 1:    '✅f(1, 2, 1, 2, 1) = 4:1,3',
906: 1:    '✅f(1, 1, 10, 1, 1) = 4:0,4',
906: 1:    '✅f(1, 5, 10, 5, 1) = 10:1,3',
906: 1:    '✅f(5, 1, 10, 1, 5) = 20:0,4',
906: 1:    '❌f(100, 5, 1, 5, 100) = ??? != 400:0,4'
906: 1:  ],
906: 1:  'level': 32,
906: 1:  'nextQuestion': '100, 5, 1, 5, 100',
906: 1:  'questions': [
906: 1:    '3, 6, 2, 5, 4, 8, 3',
906: 1:    '1, 1, 1, 1, 1',
906: 1:    '1, 2, 1, 2, 1',
906: 1:    '1, 1, 10, 1, 1',
906: 1:    '1, 5, 10, 5, 1',
906: 1:    '5, 1, 10, 1, 5',
906: 1:    '100, 5, 1, 5, 100'
906: 1:  ]
906: 1:}
906: 1:Scores: 103573
906: 1:Answer: message('['24:1,5', '4:0,4', '4:1,3', '4:0,4', '10:1,3', '20:0,4', '400:0,4']')
906: 1:Fire Event: PassTest{complexity=51, testCount=9}
------------------------------------------
907: 1:BoardData {
907: 1:  'description': [
907: 1:    'You are given an array of vertical lines height, so that Y-axis is the line height and X-axis is line index from an array. Write a Javascript function that finds two lines that together forms the rectangle with largest area. Return the maximum area number and line coordinates in format {area}:{x1},{x2}. For example:\n 1, 6, 3, 2, 8 => 18:1,4\n 5, 2, 8, 1, 4 => 16:0,4\n 7, 10, 2, 3, 1 => 9:0,3',
907: 1:    'Solve this task with O(n) complexity.',
907: 1:    'Return line coordinates of last found rectangle.'
907: 1:  ],
907: 1:  'expectedAnswer': '400:0,4',
907: 1:  'history': [
907: 1:    {
907: 1:      'answer': '24:1,5',
907: 1:      'question': '3, 6, 2, 5, 4, 8, 3',
907: 1:      'valid': true
907: 1:    },
907: 1:    {
907: 1:      'answer': '4:0,4',
907: 1:      'question': '1, 1, 1, 1, 1',
907: 1:      'valid': true
907: 1:    },
907: 1:    {
907: 1:      'answer': '4:1,3',
907: 1:      'question': '1, 2, 1, 2, 1',
907: 1:      'valid': true
907: 1:    },
907: 1:    {
907: 1:      'answer': '4:0,4',
907: 1:      'question': '1, 1, 10, 1, 1',
907: 1:      'valid': true
907: 1:    },
907: 1:    {
907: 1:      'answer': '10:1,3',
907: 1:      'question': '1, 5, 10, 5, 1',
907: 1:      'valid': true
907: 1:    },
907: 1:    {
907: 1:      'answer': '20:0,4',
907: 1:      'question': '5, 1, 10, 1, 5',
907: 1:      'valid': true
907: 1:    },
907: 1:    {
907: 1:      'answer': '400:0,4',
907: 1:      'question': '100, 5, 1, 5, 100',
907: 1:      'valid': true
907: 1:    }
907: 1:  ],
907: 1:  'info': [
907: 1:    '✅f(3, 6, 2, 5, 4, 8, 3) = 24:1,5',
907: 1:    '✅f(1, 1, 1, 1, 1) = 4:0,4',
907: 1:    '✅f(1, 2, 1, 2, 1) = 4:1,3',
907: 1:    '✅f(1, 1, 10, 1, 1) = 4:0,4',
907: 1:    '✅f(1, 5, 10, 5, 1) = 10:1,3',
907: 1:    '✅f(5, 1, 10, 1, 5) = 20:0,4',
907: 1:    '✅f(100, 5, 1, 5, 100) = 400:0,4',
907: 1:    '❌f(100, 1, 5, 1, 100) = ??? != 400:0,4'
907: 1:  ],
907: 1:  'level': 32,
907: 1:  'nextQuestion': '100, 1, 5, 1, 100',
907: 1:  'questions': [
907: 1:    '3, 6, 2, 5, 4, 8, 3',
907: 1:    '1, 1, 1, 1, 1',
907: 1:    '1, 2, 1, 2, 1',
907: 1:    '1, 1, 10, 1, 1',
907: 1:    '1, 5, 10, 5, 1',
907: 1:    '5, 1, 10, 1, 5',
907: 1:    '100, 5, 1, 5, 100',
907: 1:    '100, 1, 5, 1, 100'
907: 1:  ]
907: 1:}
907: 1:Scores: 103629
907: 1:Answer: message('['24:1,5', '4:0,4', '4:1,3', '4:0,4', '10:1,3', '20:0,4', '400:0,4', '400:0,4']')
907: 1:Fire Event: PassTest{complexity=51, testCount=9}
------------------------------------------
908: 1:BoardData {
908: 1:  'description': [
908: 1:    'You are given an array of vertical lines height, so that Y-axis is the line height and X-axis is line index from an array. Write a Javascript function that finds two lines that together forms the rectangle with largest area. Return the maximum area number and line coordinates in format {area}:{x1},{x2}. For example:\n 1, 6, 3, 2, 8 => 18:1,4\n 5, 2, 8, 1, 4 => 16:0,4\n 7, 10, 2, 3, 1 => 9:0,3',
908: 1:    'Solve this task with O(n) complexity.',
908: 1:    'Return line coordinates of last found rectangle.'
908: 1:  ],
908: 1:  'expectedAnswer': '200:1,3',
908: 1:  'history': [
908: 1:    {
908: 1:      'answer': '24:1,5',
908: 1:      'question': '3, 6, 2, 5, 4, 8, 3',
908: 1:      'valid': true
908: 1:    },
908: 1:    {
908: 1:      'answer': '4:0,4',
908: 1:      'question': '1, 1, 1, 1, 1',
908: 1:      'valid': true
908: 1:    },
908: 1:    {
908: 1:      'answer': '4:1,3',
908: 1:      'question': '1, 2, 1, 2, 1',
908: 1:      'valid': true
908: 1:    },
908: 1:    {
908: 1:      'answer': '4:0,4',
908: 1:      'question': '1, 1, 10, 1, 1',
908: 1:      'valid': true
908: 1:    },
908: 1:    {
908: 1:      'answer': '10:1,3',
908: 1:      'question': '1, 5, 10, 5, 1',
908: 1:      'valid': true
908: 1:    },
908: 1:    {
908: 1:      'answer': '20:0,4',
908: 1:      'question': '5, 1, 10, 1, 5',
908: 1:      'valid': true
908: 1:    },
908: 1:    {
908: 1:      'answer': '400:0,4',
908: 1:      'question': '100, 5, 1, 5, 100',
908: 1:      'valid': true
908: 1:    },
908: 1:    {
908: 1:      'answer': '400:0,4',
908: 1:      'question': '100, 1, 5, 1, 100',
908: 1:      'valid': true
908: 1:    }
908: 1:  ],
908: 1:  'info': [
908: 1:    '✅f(3, 6, 2, 5, 4, 8, 3) = 24:1,5',
908: 1:    '✅f(1, 1, 1, 1, 1) = 4:0,4',
908: 1:    '✅f(1, 2, 1, 2, 1) = 4:1,3',
908: 1:    '✅f(1, 1, 10, 1, 1) = 4:0,4',
908: 1:    '✅f(1, 5, 10, 5, 1) = 10:1,3',
908: 1:    '✅f(5, 1, 10, 1, 5) = 20:0,4',
908: 1:    '✅f(100, 5, 1, 5, 100) = 400:0,4',
908: 1:    '✅f(100, 1, 5, 1, 100) = 400:0,4',
908: 1:    '❌f(1, 100, 1, 100, 1) = ??? != 200:1,3'
908: 1:  ],
908: 1:  'level': 32,
908: 1:  'nextQuestion': '1, 100, 1, 100, 1',
908: 1:  'questions': [
908: 1:    '3, 6, 2, 5, 4, 8, 3',
908: 1:    '1, 1, 1, 1, 1',
908: 1:    '1, 2, 1, 2, 1',
908: 1:    '1, 1, 10, 1, 1',
908: 1:    '1, 5, 10, 5, 1',
908: 1:    '5, 1, 10, 1, 5',
908: 1:    '100, 5, 1, 5, 100',
908: 1:    '100, 1, 5, 1, 100',
908: 1:    '1, 100, 1, 100, 1'
908: 1:  ]
908: 1:}
908: 1:Scores: 103685
908: 1:Answer: message('['24:1,5', '4:0,4', '4:1,3', '4:0,4', '10:1,3', '20:0,4', '400:0,4', '400:0,4', '200:1,3']')
908: 1:Fire Event: PassTest{complexity=51, testCount=9}
908: 1:Fire Event: NextAlgorithm{complexity=51, time=0}
------------------------------------------
909: 1:BoardData {
909: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
909: 1:  'history': [
909: 1:    {
909: 1:      'answer': '24:1,5',
909: 1:      'question': '3, 6, 2, 5, 4, 8, 3',
909: 1:      'valid': true
909: 1:    },
909: 1:    {
909: 1:      'answer': '4:0,4',
909: 1:      'question': '1, 1, 1, 1, 1',
909: 1:      'valid': true
909: 1:    },
909: 1:    {
909: 1:      'answer': '4:1,3',
909: 1:      'question': '1, 2, 1, 2, 1',
909: 1:      'valid': true
909: 1:    },
909: 1:    {
909: 1:      'answer': '4:0,4',
909: 1:      'question': '1, 1, 10, 1, 1',
909: 1:      'valid': true
909: 1:    },
909: 1:    {
909: 1:      'answer': '10:1,3',
909: 1:      'question': '1, 5, 10, 5, 1',
909: 1:      'valid': true
909: 1:    },
909: 1:    {
909: 1:      'answer': '20:0,4',
909: 1:      'question': '5, 1, 10, 1, 5',
909: 1:      'valid': true
909: 1:    },
909: 1:    {
909: 1:      'answer': '400:0,4',
909: 1:      'question': '100, 5, 1, 5, 100',
909: 1:      'valid': true
909: 1:    },
909: 1:    {
909: 1:      'answer': '400:0,4',
909: 1:      'question': '100, 1, 5, 1, 100',
909: 1:      'valid': true
909: 1:    },
909: 1:    {
909: 1:      'answer': '200:1,3',
909: 1:      'question': '1, 100, 1, 100, 1',
909: 1:      'valid': true
909: 1:    }
909: 1:  ],
909: 1:  'info': [
909: 1:    '✅f(3, 6, 2, 5, 4, 8, 3) = 24:1,5',
909: 1:    '✅f(1, 1, 1, 1, 1) = 4:0,4',
909: 1:    '✅f(1, 2, 1, 2, 1) = 4:1,3',
909: 1:    '✅f(1, 1, 10, 1, 1) = 4:0,4',
909: 1:    '✅f(1, 5, 10, 5, 1) = 10:1,3',
909: 1:    '✅f(5, 1, 10, 1, 5) = 20:0,4',
909: 1:    '✅f(100, 5, 1, 5, 100) = 400:0,4',
909: 1:    '✅f(100, 1, 5, 1, 100) = 400:0,4',
909: 1:    '✅f(1, 100, 1, 100, 1) = 200:1,3'
909: 1:  ],
909: 1:  'level': 32,
909: 1:  'questions': []
909: 1:}
909: 1:Scores: 110625
909: 1:Answer: message('StartNextLevel')
909: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
910: 1:BoardData {
910: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
910: 1:  'expectedAnswer': '2',
910: 1:  'history': [],
910: 1:  'info': ['❌f(1) = ??? != 2'],
910: 1:  'level': 33,
910: 1:  'nextQuestion': '1',
910: 1:  'questions': ['1']
910: 1:}
910: 1:Scores: 110625
910: 1:Answer: message('['2']')
910: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
911: 1:BoardData {
911: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
911: 1:  'expectedAnswer': '3',
911: 1:  'history': [{
911: 1:    'answer': '2',
911: 1:    'question': '1',
911: 1:    'valid': true
911: 1:  }],
911: 1:  'info': [
911: 1:    '✅f(1) = 2',
911: 1:    '❌f(2) = ??? != 3'
911: 1:  ],
911: 1:  'level': 33,
911: 1:  'nextQuestion': '2',
911: 1:  'questions': [
911: 1:    '1',
911: 1:    '2'
911: 1:  ]
911: 1:}
911: 1:Scores: 110647
911: 1:Answer: message('['2', '3']')
911: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
912: 1:BoardData {
912: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
912: 1:  'expectedAnswer': '5',
912: 1:  'history': [
912: 1:    {
912: 1:      'answer': '2',
912: 1:      'question': '1',
912: 1:      'valid': true
912: 1:    },
912: 1:    {
912: 1:      'answer': '3',
912: 1:      'question': '2',
912: 1:      'valid': true
912: 1:    }
912: 1:  ],
912: 1:  'info': [
912: 1:    '✅f(1) = 2',
912: 1:    '✅f(2) = 3',
912: 1:    '❌f(3) = ??? != 5'
912: 1:  ],
912: 1:  'level': 33,
912: 1:  'nextQuestion': '3',
912: 1:  'questions': [
912: 1:    '1',
912: 1:    '2',
912: 1:    '3'
912: 1:  ]
912: 1:}
912: 1:Scores: 110669
912: 1:Answer: message('['2', '3', '5']')
912: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
913: 1:BoardData {
913: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
913: 1:  'expectedAnswer': '7',
913: 1:  'history': [
913: 1:    {
913: 1:      'answer': '2',
913: 1:      'question': '1',
913: 1:      'valid': true
913: 1:    },
913: 1:    {
913: 1:      'answer': '3',
913: 1:      'question': '2',
913: 1:      'valid': true
913: 1:    },
913: 1:    {
913: 1:      'answer': '5',
913: 1:      'question': '3',
913: 1:      'valid': true
913: 1:    }
913: 1:  ],
913: 1:  'info': [
913: 1:    '✅f(1) = 2',
913: 1:    '✅f(2) = 3',
913: 1:    '✅f(3) = 5',
913: 1:    '❌f(4) = ??? != 7'
913: 1:  ],
913: 1:  'level': 33,
913: 1:  'nextQuestion': '4',
913: 1:  'questions': [
913: 1:    '1',
913: 1:    '2',
913: 1:    '3',
913: 1:    '4'
913: 1:  ]
913: 1:}
913: 1:Scores: 110691
913: 1:Answer: message('['2', '3', '5', '7']')
913: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
914: 1:BoardData {
914: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
914: 1:  'expectedAnswer': '11',
914: 1:  'history': [
914: 1:    {
914: 1:      'answer': '2',
914: 1:      'question': '1',
914: 1:      'valid': true
914: 1:    },
914: 1:    {
914: 1:      'answer': '3',
914: 1:      'question': '2',
914: 1:      'valid': true
914: 1:    },
914: 1:    {
914: 1:      'answer': '5',
914: 1:      'question': '3',
914: 1:      'valid': true
914: 1:    },
914: 1:    {
914: 1:      'answer': '7',
914: 1:      'question': '4',
914: 1:      'valid': true
914: 1:    }
914: 1:  ],
914: 1:  'info': [
914: 1:    '✅f(1) = 2',
914: 1:    '✅f(2) = 3',
914: 1:    '✅f(3) = 5',
914: 1:    '✅f(4) = 7',
914: 1:    '❌f(5) = ??? != 11'
914: 1:  ],
914: 1:  'level': 33,
914: 1:  'nextQuestion': '5',
914: 1:  'questions': [
914: 1:    '1',
914: 1:    '2',
914: 1:    '3',
914: 1:    '4',
914: 1:    '5'
914: 1:  ]
914: 1:}
914: 1:Scores: 110713
914: 1:Answer: message('['2', '3', '5', '7', '11']')
914: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
915: 1:BoardData {
915: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
915: 1:  'expectedAnswer': '13',
915: 1:  'history': [
915: 1:    {
915: 1:      'answer': '2',
915: 1:      'question': '1',
915: 1:      'valid': true
915: 1:    },
915: 1:    {
915: 1:      'answer': '3',
915: 1:      'question': '2',
915: 1:      'valid': true
915: 1:    },
915: 1:    {
915: 1:      'answer': '5',
915: 1:      'question': '3',
915: 1:      'valid': true
915: 1:    },
915: 1:    {
915: 1:      'answer': '7',
915: 1:      'question': '4',
915: 1:      'valid': true
915: 1:    },
915: 1:    {
915: 1:      'answer': '11',
915: 1:      'question': '5',
915: 1:      'valid': true
915: 1:    }
915: 1:  ],
915: 1:  'info': [
915: 1:    '✅f(1) = 2',
915: 1:    '✅f(2) = 3',
915: 1:    '✅f(3) = 5',
915: 1:    '✅f(4) = 7',
915: 1:    '✅f(5) = 11',
915: 1:    '❌f(6) = ??? != 13'
915: 1:  ],
915: 1:  'level': 33,
915: 1:  'nextQuestion': '6',
915: 1:  'questions': [
915: 1:    '1',
915: 1:    '2',
915: 1:    '3',
915: 1:    '4',
915: 1:    '5',
915: 1:    '6'
915: 1:  ]
915: 1:}
915: 1:Scores: 110735
915: 1:Answer: message('['2', '3', '5', '7', '11', '13']')
915: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
916: 1:BoardData {
916: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
916: 1:  'expectedAnswer': '17',
916: 1:  'history': [
916: 1:    {
916: 1:      'answer': '2',
916: 1:      'question': '1',
916: 1:      'valid': true
916: 1:    },
916: 1:    {
916: 1:      'answer': '3',
916: 1:      'question': '2',
916: 1:      'valid': true
916: 1:    },
916: 1:    {
916: 1:      'answer': '5',
916: 1:      'question': '3',
916: 1:      'valid': true
916: 1:    },
916: 1:    {
916: 1:      'answer': '7',
916: 1:      'question': '4',
916: 1:      'valid': true
916: 1:    },
916: 1:    {
916: 1:      'answer': '11',
916: 1:      'question': '5',
916: 1:      'valid': true
916: 1:    },
916: 1:    {
916: 1:      'answer': '13',
916: 1:      'question': '6',
916: 1:      'valid': true
916: 1:    }
916: 1:  ],
916: 1:  'info': [
916: 1:    '✅f(1) = 2',
916: 1:    '✅f(2) = 3',
916: 1:    '✅f(3) = 5',
916: 1:    '✅f(4) = 7',
916: 1:    '✅f(5) = 11',
916: 1:    '✅f(6) = 13',
916: 1:    '❌f(7) = ??? != 17'
916: 1:  ],
916: 1:  'level': 33,
916: 1:  'nextQuestion': '7',
916: 1:  'questions': [
916: 1:    '1',
916: 1:    '2',
916: 1:    '3',
916: 1:    '4',
916: 1:    '5',
916: 1:    '6',
916: 1:    '7'
916: 1:  ]
916: 1:}
916: 1:Scores: 110757
916: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17']')
916: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
917: 1:BoardData {
917: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
917: 1:  'expectedAnswer': '19',
917: 1:  'history': [
917: 1:    {
917: 1:      'answer': '2',
917: 1:      'question': '1',
917: 1:      'valid': true
917: 1:    },
917: 1:    {
917: 1:      'answer': '3',
917: 1:      'question': '2',
917: 1:      'valid': true
917: 1:    },
917: 1:    {
917: 1:      'answer': '5',
917: 1:      'question': '3',
917: 1:      'valid': true
917: 1:    },
917: 1:    {
917: 1:      'answer': '7',
917: 1:      'question': '4',
917: 1:      'valid': true
917: 1:    },
917: 1:    {
917: 1:      'answer': '11',
917: 1:      'question': '5',
917: 1:      'valid': true
917: 1:    },
917: 1:    {
917: 1:      'answer': '13',
917: 1:      'question': '6',
917: 1:      'valid': true
917: 1:    },
917: 1:    {
917: 1:      'answer': '17',
917: 1:      'question': '7',
917: 1:      'valid': true
917: 1:    }
917: 1:  ],
917: 1:  'info': [
917: 1:    '✅f(1) = 2',
917: 1:    '✅f(2) = 3',
917: 1:    '✅f(3) = 5',
917: 1:    '✅f(4) = 7',
917: 1:    '✅f(5) = 11',
917: 1:    '✅f(6) = 13',
917: 1:    '✅f(7) = 17',
917: 1:    '❌f(8) = ??? != 19'
917: 1:  ],
917: 1:  'level': 33,
917: 1:  'nextQuestion': '8',
917: 1:  'questions': [
917: 1:    '1',
917: 1:    '2',
917: 1:    '3',
917: 1:    '4',
917: 1:    '5',
917: 1:    '6',
917: 1:    '7',
917: 1:    '8'
917: 1:  ]
917: 1:}
917: 1:Scores: 110779
917: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19']')
917: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
918: 1:BoardData {
918: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
918: 1:  'expectedAnswer': '23',
918: 1:  'history': [
918: 1:    {
918: 1:      'answer': '2',
918: 1:      'question': '1',
918: 1:      'valid': true
918: 1:    },
918: 1:    {
918: 1:      'answer': '3',
918: 1:      'question': '2',
918: 1:      'valid': true
918: 1:    },
918: 1:    {
918: 1:      'answer': '5',
918: 1:      'question': '3',
918: 1:      'valid': true
918: 1:    },
918: 1:    {
918: 1:      'answer': '7',
918: 1:      'question': '4',
918: 1:      'valid': true
918: 1:    },
918: 1:    {
918: 1:      'answer': '11',
918: 1:      'question': '5',
918: 1:      'valid': true
918: 1:    },
918: 1:    {
918: 1:      'answer': '13',
918: 1:      'question': '6',
918: 1:      'valid': true
918: 1:    },
918: 1:    {
918: 1:      'answer': '17',
918: 1:      'question': '7',
918: 1:      'valid': true
918: 1:    },
918: 1:    {
918: 1:      'answer': '19',
918: 1:      'question': '8',
918: 1:      'valid': true
918: 1:    }
918: 1:  ],
918: 1:  'info': [
918: 1:    '✅f(1) = 2',
918: 1:    '✅f(2) = 3',
918: 1:    '✅f(3) = 5',
918: 1:    '✅f(4) = 7',
918: 1:    '✅f(5) = 11',
918: 1:    '✅f(6) = 13',
918: 1:    '✅f(7) = 17',
918: 1:    '✅f(8) = 19',
918: 1:    '❌f(9) = ??? != 23'
918: 1:  ],
918: 1:  'level': 33,
918: 1:  'nextQuestion': '9',
918: 1:  'questions': [
918: 1:    '1',
918: 1:    '2',
918: 1:    '3',
918: 1:    '4',
918: 1:    '5',
918: 1:    '6',
918: 1:    '7',
918: 1:    '8',
918: 1:    '9'
918: 1:  ]
918: 1:}
918: 1:Scores: 110801
918: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23']')
918: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
919: 1:BoardData {
919: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
919: 1:  'expectedAnswer': '29',
919: 1:  'history': [
919: 1:    {
919: 1:      'answer': '2',
919: 1:      'question': '1',
919: 1:      'valid': true
919: 1:    },
919: 1:    {
919: 1:      'answer': '3',
919: 1:      'question': '2',
919: 1:      'valid': true
919: 1:    },
919: 1:    {
919: 1:      'answer': '5',
919: 1:      'question': '3',
919: 1:      'valid': true
919: 1:    },
919: 1:    {
919: 1:      'answer': '7',
919: 1:      'question': '4',
919: 1:      'valid': true
919: 1:    },
919: 1:    {
919: 1:      'answer': '11',
919: 1:      'question': '5',
919: 1:      'valid': true
919: 1:    },
919: 1:    {
919: 1:      'answer': '13',
919: 1:      'question': '6',
919: 1:      'valid': true
919: 1:    },
919: 1:    {
919: 1:      'answer': '17',
919: 1:      'question': '7',
919: 1:      'valid': true
919: 1:    },
919: 1:    {
919: 1:      'answer': '19',
919: 1:      'question': '8',
919: 1:      'valid': true
919: 1:    },
919: 1:    {
919: 1:      'answer': '23',
919: 1:      'question': '9',
919: 1:      'valid': true
919: 1:    }
919: 1:  ],
919: 1:  'info': [
919: 1:    '✅f(1) = 2',
919: 1:    '✅f(2) = 3',
919: 1:    '✅f(3) = 5',
919: 1:    '✅f(4) = 7',
919: 1:    '✅f(5) = 11',
919: 1:    '✅f(6) = 13',
919: 1:    '✅f(7) = 17',
919: 1:    '✅f(8) = 19',
919: 1:    '✅f(9) = 23',
919: 1:    '❌f(10) = ??? != 29'
919: 1:  ],
919: 1:  'level': 33,
919: 1:  'nextQuestion': '10',
919: 1:  'questions': [
919: 1:    '1',
919: 1:    '2',
919: 1:    '3',
919: 1:    '4',
919: 1:    '5',
919: 1:    '6',
919: 1:    '7',
919: 1:    '8',
919: 1:    '9',
919: 1:    '10'
919: 1:  ]
919: 1:}
919: 1:Scores: 110823
919: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29']')
919: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
920: 1:BoardData {
920: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
920: 1:  'expectedAnswer': '31',
920: 1:  'history': [
920: 1:    {
920: 1:      'answer': '2',
920: 1:      'question': '1',
920: 1:      'valid': true
920: 1:    },
920: 1:    {
920: 1:      'answer': '3',
920: 1:      'question': '2',
920: 1:      'valid': true
920: 1:    },
920: 1:    {
920: 1:      'answer': '5',
920: 1:      'question': '3',
920: 1:      'valid': true
920: 1:    },
920: 1:    {
920: 1:      'answer': '7',
920: 1:      'question': '4',
920: 1:      'valid': true
920: 1:    },
920: 1:    {
920: 1:      'answer': '11',
920: 1:      'question': '5',
920: 1:      'valid': true
920: 1:    },
920: 1:    {
920: 1:      'answer': '13',
920: 1:      'question': '6',
920: 1:      'valid': true
920: 1:    },
920: 1:    {
920: 1:      'answer': '17',
920: 1:      'question': '7',
920: 1:      'valid': true
920: 1:    },
920: 1:    {
920: 1:      'answer': '19',
920: 1:      'question': '8',
920: 1:      'valid': true
920: 1:    },
920: 1:    {
920: 1:      'answer': '23',
920: 1:      'question': '9',
920: 1:      'valid': true
920: 1:    },
920: 1:    {
920: 1:      'answer': '29',
920: 1:      'question': '10',
920: 1:      'valid': true
920: 1:    }
920: 1:  ],
920: 1:  'info': [
920: 1:    '✅f(1) = 2',
920: 1:    '✅f(2) = 3',
920: 1:    '✅f(3) = 5',
920: 1:    '✅f(4) = 7',
920: 1:    '✅f(5) = 11',
920: 1:    '✅f(6) = 13',
920: 1:    '✅f(7) = 17',
920: 1:    '✅f(8) = 19',
920: 1:    '✅f(9) = 23',
920: 1:    '✅f(10) = 29',
920: 1:    '❌f(11) = ??? != 31'
920: 1:  ],
920: 1:  'level': 33,
920: 1:  'nextQuestion': '11',
920: 1:  'questions': [
920: 1:    '1',
920: 1:    '2',
920: 1:    '3',
920: 1:    '4',
920: 1:    '5',
920: 1:    '6',
920: 1:    '7',
920: 1:    '8',
920: 1:    '9',
920: 1:    '10',
920: 1:    '11'
920: 1:  ]
920: 1:}
920: 1:Scores: 110845
920: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31']')
920: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
921: 1:BoardData {
921: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
921: 1:  'expectedAnswer': '37',
921: 1:  'history': [
921: 1:    {
921: 1:      'answer': '2',
921: 1:      'question': '1',
921: 1:      'valid': true
921: 1:    },
921: 1:    {
921: 1:      'answer': '3',
921: 1:      'question': '2',
921: 1:      'valid': true
921: 1:    },
921: 1:    {
921: 1:      'answer': '5',
921: 1:      'question': '3',
921: 1:      'valid': true
921: 1:    },
921: 1:    {
921: 1:      'answer': '7',
921: 1:      'question': '4',
921: 1:      'valid': true
921: 1:    },
921: 1:    {
921: 1:      'answer': '11',
921: 1:      'question': '5',
921: 1:      'valid': true
921: 1:    },
921: 1:    {
921: 1:      'answer': '13',
921: 1:      'question': '6',
921: 1:      'valid': true
921: 1:    },
921: 1:    {
921: 1:      'answer': '17',
921: 1:      'question': '7',
921: 1:      'valid': true
921: 1:    },
921: 1:    {
921: 1:      'answer': '19',
921: 1:      'question': '8',
921: 1:      'valid': true
921: 1:    },
921: 1:    {
921: 1:      'answer': '23',
921: 1:      'question': '9',
921: 1:      'valid': true
921: 1:    },
921: 1:    {
921: 1:      'answer': '29',
921: 1:      'question': '10',
921: 1:      'valid': true
921: 1:    },
921: 1:    {
921: 1:      'answer': '31',
921: 1:      'question': '11',
921: 1:      'valid': true
921: 1:    }
921: 1:  ],
921: 1:  'info': [
921: 1:    '✅f(1) = 2',
921: 1:    '✅f(2) = 3',
921: 1:    '✅f(3) = 5',
921: 1:    '✅f(4) = 7',
921: 1:    '✅f(5) = 11',
921: 1:    '✅f(6) = 13',
921: 1:    '✅f(7) = 17',
921: 1:    '✅f(8) = 19',
921: 1:    '✅f(9) = 23',
921: 1:    '✅f(10) = 29',
921: 1:    '✅f(11) = 31',
921: 1:    '❌f(12) = ??? != 37'
921: 1:  ],
921: 1:  'level': 33,
921: 1:  'nextQuestion': '12',
921: 1:  'questions': [
921: 1:    '1',
921: 1:    '2',
921: 1:    '3',
921: 1:    '4',
921: 1:    '5',
921: 1:    '6',
921: 1:    '7',
921: 1:    '8',
921: 1:    '9',
921: 1:    '10',
921: 1:    '11',
921: 1:    '12'
921: 1:  ]
921: 1:}
921: 1:Scores: 110867
921: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37']')
921: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
922: 1:BoardData {
922: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
922: 1:  'expectedAnswer': '41',
922: 1:  'history': [
922: 1:    {
922: 1:      'answer': '2',
922: 1:      'question': '1',
922: 1:      'valid': true
922: 1:    },
922: 1:    {
922: 1:      'answer': '3',
922: 1:      'question': '2',
922: 1:      'valid': true
922: 1:    },
922: 1:    {
922: 1:      'answer': '5',
922: 1:      'question': '3',
922: 1:      'valid': true
922: 1:    },
922: 1:    {
922: 1:      'answer': '7',
922: 1:      'question': '4',
922: 1:      'valid': true
922: 1:    },
922: 1:    {
922: 1:      'answer': '11',
922: 1:      'question': '5',
922: 1:      'valid': true
922: 1:    },
922: 1:    {
922: 1:      'answer': '13',
922: 1:      'question': '6',
922: 1:      'valid': true
922: 1:    },
922: 1:    {
922: 1:      'answer': '17',
922: 1:      'question': '7',
922: 1:      'valid': true
922: 1:    },
922: 1:    {
922: 1:      'answer': '19',
922: 1:      'question': '8',
922: 1:      'valid': true
922: 1:    },
922: 1:    {
922: 1:      'answer': '23',
922: 1:      'question': '9',
922: 1:      'valid': true
922: 1:    },
922: 1:    {
922: 1:      'answer': '29',
922: 1:      'question': '10',
922: 1:      'valid': true
922: 1:    },
922: 1:    {
922: 1:      'answer': '31',
922: 1:      'question': '11',
922: 1:      'valid': true
922: 1:    },
922: 1:    {
922: 1:      'answer': '37',
922: 1:      'question': '12',
922: 1:      'valid': true
922: 1:    }
922: 1:  ],
922: 1:  'info': [
922: 1:    '✅f(1) = 2',
922: 1:    '✅f(2) = 3',
922: 1:    '✅f(3) = 5',
922: 1:    '✅f(4) = 7',
922: 1:    '✅f(5) = 11',
922: 1:    '✅f(6) = 13',
922: 1:    '✅f(7) = 17',
922: 1:    '✅f(8) = 19',
922: 1:    '✅f(9) = 23',
922: 1:    '✅f(10) = 29',
922: 1:    '✅f(11) = 31',
922: 1:    '✅f(12) = 37',
922: 1:    '❌f(13) = ??? != 41'
922: 1:  ],
922: 1:  'level': 33,
922: 1:  'nextQuestion': '13',
922: 1:  'questions': [
922: 1:    '1',
922: 1:    '2',
922: 1:    '3',
922: 1:    '4',
922: 1:    '5',
922: 1:    '6',
922: 1:    '7',
922: 1:    '8',
922: 1:    '9',
922: 1:    '10',
922: 1:    '11',
922: 1:    '12',
922: 1:    '13'
922: 1:  ]
922: 1:}
922: 1:Scores: 110889
922: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41']')
922: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
923: 1:BoardData {
923: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
923: 1:  'expectedAnswer': '43',
923: 1:  'history': [
923: 1:    {
923: 1:      'answer': '2',
923: 1:      'question': '1',
923: 1:      'valid': true
923: 1:    },
923: 1:    {
923: 1:      'answer': '3',
923: 1:      'question': '2',
923: 1:      'valid': true
923: 1:    },
923: 1:    {
923: 1:      'answer': '5',
923: 1:      'question': '3',
923: 1:      'valid': true
923: 1:    },
923: 1:    {
923: 1:      'answer': '7',
923: 1:      'question': '4',
923: 1:      'valid': true
923: 1:    },
923: 1:    {
923: 1:      'answer': '11',
923: 1:      'question': '5',
923: 1:      'valid': true
923: 1:    },
923: 1:    {
923: 1:      'answer': '13',
923: 1:      'question': '6',
923: 1:      'valid': true
923: 1:    },
923: 1:    {
923: 1:      'answer': '17',
923: 1:      'question': '7',
923: 1:      'valid': true
923: 1:    },
923: 1:    {
923: 1:      'answer': '19',
923: 1:      'question': '8',
923: 1:      'valid': true
923: 1:    },
923: 1:    {
923: 1:      'answer': '23',
923: 1:      'question': '9',
923: 1:      'valid': true
923: 1:    },
923: 1:    {
923: 1:      'answer': '29',
923: 1:      'question': '10',
923: 1:      'valid': true
923: 1:    },
923: 1:    {
923: 1:      'answer': '31',
923: 1:      'question': '11',
923: 1:      'valid': true
923: 1:    },
923: 1:    {
923: 1:      'answer': '37',
923: 1:      'question': '12',
923: 1:      'valid': true
923: 1:    },
923: 1:    {
923: 1:      'answer': '41',
923: 1:      'question': '13',
923: 1:      'valid': true
923: 1:    }
923: 1:  ],
923: 1:  'info': [
923: 1:    '✅f(1) = 2',
923: 1:    '✅f(2) = 3',
923: 1:    '✅f(3) = 5',
923: 1:    '✅f(4) = 7',
923: 1:    '✅f(5) = 11',
923: 1:    '✅f(6) = 13',
923: 1:    '✅f(7) = 17',
923: 1:    '✅f(8) = 19',
923: 1:    '✅f(9) = 23',
923: 1:    '✅f(10) = 29',
923: 1:    '✅f(11) = 31',
923: 1:    '✅f(12) = 37',
923: 1:    '✅f(13) = 41',
923: 1:    '❌f(14) = ??? != 43'
923: 1:  ],
923: 1:  'level': 33,
923: 1:  'nextQuestion': '14',
923: 1:  'questions': [
923: 1:    '1',
923: 1:    '2',
923: 1:    '3',
923: 1:    '4',
923: 1:    '5',
923: 1:    '6',
923: 1:    '7',
923: 1:    '8',
923: 1:    '9',
923: 1:    '10',
923: 1:    '11',
923: 1:    '12',
923: 1:    '13',
923: 1:    '14'
923: 1:  ]
923: 1:}
923: 1:Scores: 110911
923: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43']')
923: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
924: 1:BoardData {
924: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
924: 1:  'expectedAnswer': '47',
924: 1:  'history': [
924: 1:    {
924: 1:      'answer': '2',
924: 1:      'question': '1',
924: 1:      'valid': true
924: 1:    },
924: 1:    {
924: 1:      'answer': '3',
924: 1:      'question': '2',
924: 1:      'valid': true
924: 1:    },
924: 1:    {
924: 1:      'answer': '5',
924: 1:      'question': '3',
924: 1:      'valid': true
924: 1:    },
924: 1:    {
924: 1:      'answer': '7',
924: 1:      'question': '4',
924: 1:      'valid': true
924: 1:    },
924: 1:    {
924: 1:      'answer': '11',
924: 1:      'question': '5',
924: 1:      'valid': true
924: 1:    },
924: 1:    {
924: 1:      'answer': '13',
924: 1:      'question': '6',
924: 1:      'valid': true
924: 1:    },
924: 1:    {
924: 1:      'answer': '17',
924: 1:      'question': '7',
924: 1:      'valid': true
924: 1:    },
924: 1:    {
924: 1:      'answer': '19',
924: 1:      'question': '8',
924: 1:      'valid': true
924: 1:    },
924: 1:    {
924: 1:      'answer': '23',
924: 1:      'question': '9',
924: 1:      'valid': true
924: 1:    },
924: 1:    {
924: 1:      'answer': '29',
924: 1:      'question': '10',
924: 1:      'valid': true
924: 1:    },
924: 1:    {
924: 1:      'answer': '31',
924: 1:      'question': '11',
924: 1:      'valid': true
924: 1:    },
924: 1:    {
924: 1:      'answer': '37',
924: 1:      'question': '12',
924: 1:      'valid': true
924: 1:    },
924: 1:    {
924: 1:      'answer': '41',
924: 1:      'question': '13',
924: 1:      'valid': true
924: 1:    },
924: 1:    {
924: 1:      'answer': '43',
924: 1:      'question': '14',
924: 1:      'valid': true
924: 1:    }
924: 1:  ],
924: 1:  'info': [
924: 1:    '✅f(1) = 2',
924: 1:    '✅f(2) = 3',
924: 1:    '✅f(3) = 5',
924: 1:    '✅f(4) = 7',
924: 1:    '✅f(5) = 11',
924: 1:    '✅f(6) = 13',
924: 1:    '✅f(7) = 17',
924: 1:    '✅f(8) = 19',
924: 1:    '✅f(9) = 23',
924: 1:    '✅f(10) = 29',
924: 1:    '✅f(11) = 31',
924: 1:    '✅f(12) = 37',
924: 1:    '✅f(13) = 41',
924: 1:    '✅f(14) = 43',
924: 1:    '❌f(15) = ??? != 47'
924: 1:  ],
924: 1:  'level': 33,
924: 1:  'nextQuestion': '15',
924: 1:  'questions': [
924: 1:    '1',
924: 1:    '2',
924: 1:    '3',
924: 1:    '4',
924: 1:    '5',
924: 1:    '6',
924: 1:    '7',
924: 1:    '8',
924: 1:    '9',
924: 1:    '10',
924: 1:    '11',
924: 1:    '12',
924: 1:    '13',
924: 1:    '14',
924: 1:    '15'
924: 1:  ]
924: 1:}
924: 1:Scores: 110933
924: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47']')
924: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
925: 1:BoardData {
925: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
925: 1:  'expectedAnswer': '53',
925: 1:  'history': [
925: 1:    {
925: 1:      'answer': '2',
925: 1:      'question': '1',
925: 1:      'valid': true
925: 1:    },
925: 1:    {
925: 1:      'answer': '3',
925: 1:      'question': '2',
925: 1:      'valid': true
925: 1:    },
925: 1:    {
925: 1:      'answer': '5',
925: 1:      'question': '3',
925: 1:      'valid': true
925: 1:    },
925: 1:    {
925: 1:      'answer': '7',
925: 1:      'question': '4',
925: 1:      'valid': true
925: 1:    },
925: 1:    {
925: 1:      'answer': '11',
925: 1:      'question': '5',
925: 1:      'valid': true
925: 1:    },
925: 1:    {
925: 1:      'answer': '13',
925: 1:      'question': '6',
925: 1:      'valid': true
925: 1:    },
925: 1:    {
925: 1:      'answer': '17',
925: 1:      'question': '7',
925: 1:      'valid': true
925: 1:    },
925: 1:    {
925: 1:      'answer': '19',
925: 1:      'question': '8',
925: 1:      'valid': true
925: 1:    },
925: 1:    {
925: 1:      'answer': '23',
925: 1:      'question': '9',
925: 1:      'valid': true
925: 1:    },
925: 1:    {
925: 1:      'answer': '29',
925: 1:      'question': '10',
925: 1:      'valid': true
925: 1:    },
925: 1:    {
925: 1:      'answer': '31',
925: 1:      'question': '11',
925: 1:      'valid': true
925: 1:    },
925: 1:    {
925: 1:      'answer': '37',
925: 1:      'question': '12',
925: 1:      'valid': true
925: 1:    },
925: 1:    {
925: 1:      'answer': '41',
925: 1:      'question': '13',
925: 1:      'valid': true
925: 1:    },
925: 1:    {
925: 1:      'answer': '43',
925: 1:      'question': '14',
925: 1:      'valid': true
925: 1:    },
925: 1:    {
925: 1:      'answer': '47',
925: 1:      'question': '15',
925: 1:      'valid': true
925: 1:    }
925: 1:  ],
925: 1:  'info': [
925: 1:    '✅f(1) = 2',
925: 1:    '✅f(2) = 3',
925: 1:    '✅f(3) = 5',
925: 1:    '✅f(4) = 7',
925: 1:    '✅f(5) = 11',
925: 1:    '✅f(6) = 13',
925: 1:    '✅f(7) = 17',
925: 1:    '✅f(8) = 19',
925: 1:    '✅f(9) = 23',
925: 1:    '✅f(10) = 29',
925: 1:    '✅f(11) = 31',
925: 1:    '✅f(12) = 37',
925: 1:    '✅f(13) = 41',
925: 1:    '✅f(14) = 43',
925: 1:    '✅f(15) = 47',
925: 1:    '❌f(16) = ??? != 53'
925: 1:  ],
925: 1:  'level': 33,
925: 1:  'nextQuestion': '16',
925: 1:  'questions': [
925: 1:    '1',
925: 1:    '2',
925: 1:    '3',
925: 1:    '4',
925: 1:    '5',
925: 1:    '6',
925: 1:    '7',
925: 1:    '8',
925: 1:    '9',
925: 1:    '10',
925: 1:    '11',
925: 1:    '12',
925: 1:    '13',
925: 1:    '14',
925: 1:    '15',
925: 1:    '16'
925: 1:  ]
925: 1:}
925: 1:Scores: 110955
925: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53']')
925: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
926: 1:BoardData {
926: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
926: 1:  'expectedAnswer': '59',
926: 1:  'history': [
926: 1:    {
926: 1:      'answer': '2',
926: 1:      'question': '1',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '3',
926: 1:      'question': '2',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '5',
926: 1:      'question': '3',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '7',
926: 1:      'question': '4',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '11',
926: 1:      'question': '5',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '13',
926: 1:      'question': '6',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '17',
926: 1:      'question': '7',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '19',
926: 1:      'question': '8',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '23',
926: 1:      'question': '9',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '29',
926: 1:      'question': '10',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '31',
926: 1:      'question': '11',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '37',
926: 1:      'question': '12',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '41',
926: 1:      'question': '13',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '43',
926: 1:      'question': '14',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '47',
926: 1:      'question': '15',
926: 1:      'valid': true
926: 1:    },
926: 1:    {
926: 1:      'answer': '53',
926: 1:      'question': '16',
926: 1:      'valid': true
926: 1:    }
926: 1:  ],
926: 1:  'info': [
926: 1:    '✅f(1) = 2',
926: 1:    '✅f(2) = 3',
926: 1:    '✅f(3) = 5',
926: 1:    '✅f(4) = 7',
926: 1:    '✅f(5) = 11',
926: 1:    '✅f(6) = 13',
926: 1:    '✅f(7) = 17',
926: 1:    '✅f(8) = 19',
926: 1:    '✅f(9) = 23',
926: 1:    '✅f(10) = 29',
926: 1:    '✅f(11) = 31',
926: 1:    '✅f(12) = 37',
926: 1:    '✅f(13) = 41',
926: 1:    '✅f(14) = 43',
926: 1:    '✅f(15) = 47',
926: 1:    '✅f(16) = 53',
926: 1:    '❌f(17) = ??? != 59'
926: 1:  ],
926: 1:  'level': 33,
926: 1:  'nextQuestion': '17',
926: 1:  'questions': [
926: 1:    '1',
926: 1:    '2',
926: 1:    '3',
926: 1:    '4',
926: 1:    '5',
926: 1:    '6',
926: 1:    '7',
926: 1:    '8',
926: 1:    '9',
926: 1:    '10',
926: 1:    '11',
926: 1:    '12',
926: 1:    '13',
926: 1:    '14',
926: 1:    '15',
926: 1:    '16',
926: 1:    '17'
926: 1:  ]
926: 1:}
926: 1:Scores: 110977
926: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59']')
926: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
927: 1:BoardData {
927: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
927: 1:  'expectedAnswer': '61',
927: 1:  'history': [
927: 1:    {
927: 1:      'answer': '2',
927: 1:      'question': '1',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '3',
927: 1:      'question': '2',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '5',
927: 1:      'question': '3',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '7',
927: 1:      'question': '4',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '11',
927: 1:      'question': '5',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '13',
927: 1:      'question': '6',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '17',
927: 1:      'question': '7',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '19',
927: 1:      'question': '8',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '23',
927: 1:      'question': '9',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '29',
927: 1:      'question': '10',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '31',
927: 1:      'question': '11',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '37',
927: 1:      'question': '12',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '41',
927: 1:      'question': '13',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '43',
927: 1:      'question': '14',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '47',
927: 1:      'question': '15',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '53',
927: 1:      'question': '16',
927: 1:      'valid': true
927: 1:    },
927: 1:    {
927: 1:      'answer': '59',
927: 1:      'question': '17',
927: 1:      'valid': true
927: 1:    }
927: 1:  ],
927: 1:  'info': [
927: 1:    '✅f(1) = 2',
927: 1:    '✅f(2) = 3',
927: 1:    '✅f(3) = 5',
927: 1:    '✅f(4) = 7',
927: 1:    '✅f(5) = 11',
927: 1:    '✅f(6) = 13',
927: 1:    '✅f(7) = 17',
927: 1:    '✅f(8) = 19',
927: 1:    '✅f(9) = 23',
927: 1:    '✅f(10) = 29',
927: 1:    '✅f(11) = 31',
927: 1:    '✅f(12) = 37',
927: 1:    '✅f(13) = 41',
927: 1:    '✅f(14) = 43',
927: 1:    '✅f(15) = 47',
927: 1:    '✅f(16) = 53',
927: 1:    '✅f(17) = 59',
927: 1:    '❌f(18) = ??? != 61'
927: 1:  ],
927: 1:  'level': 33,
927: 1:  'nextQuestion': '18',
927: 1:  'questions': [
927: 1:    '1',
927: 1:    '2',
927: 1:    '3',
927: 1:    '4',
927: 1:    '5',
927: 1:    '6',
927: 1:    '7',
927: 1:    '8',
927: 1:    '9',
927: 1:    '10',
927: 1:    '11',
927: 1:    '12',
927: 1:    '13',
927: 1:    '14',
927: 1:    '15',
927: 1:    '16',
927: 1:    '17',
927: 1:    '18'
927: 1:  ]
927: 1:}
927: 1:Scores: 110999
927: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61']')
927: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
928: 1:BoardData {
928: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
928: 1:  'expectedAnswer': '67',
928: 1:  'history': [
928: 1:    {
928: 1:      'answer': '2',
928: 1:      'question': '1',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '3',
928: 1:      'question': '2',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '5',
928: 1:      'question': '3',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '7',
928: 1:      'question': '4',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '11',
928: 1:      'question': '5',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '13',
928: 1:      'question': '6',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '17',
928: 1:      'question': '7',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '19',
928: 1:      'question': '8',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '23',
928: 1:      'question': '9',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '29',
928: 1:      'question': '10',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '31',
928: 1:      'question': '11',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '37',
928: 1:      'question': '12',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '41',
928: 1:      'question': '13',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '43',
928: 1:      'question': '14',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '47',
928: 1:      'question': '15',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '53',
928: 1:      'question': '16',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '59',
928: 1:      'question': '17',
928: 1:      'valid': true
928: 1:    },
928: 1:    {
928: 1:      'answer': '61',
928: 1:      'question': '18',
928: 1:      'valid': true
928: 1:    }
928: 1:  ],
928: 1:  'info': [
928: 1:    '✅f(1) = 2',
928: 1:    '✅f(2) = 3',
928: 1:    '✅f(3) = 5',
928: 1:    '✅f(4) = 7',
928: 1:    '✅f(5) = 11',
928: 1:    '✅f(6) = 13',
928: 1:    '✅f(7) = 17',
928: 1:    '✅f(8) = 19',
928: 1:    '✅f(9) = 23',
928: 1:    '✅f(10) = 29',
928: 1:    '✅f(11) = 31',
928: 1:    '✅f(12) = 37',
928: 1:    '✅f(13) = 41',
928: 1:    '✅f(14) = 43',
928: 1:    '✅f(15) = 47',
928: 1:    '✅f(16) = 53',
928: 1:    '✅f(17) = 59',
928: 1:    '✅f(18) = 61',
928: 1:    '❌f(19) = ??? != 67'
928: 1:  ],
928: 1:  'level': 33,
928: 1:  'nextQuestion': '19',
928: 1:  'questions': [
928: 1:    '1',
928: 1:    '2',
928: 1:    '3',
928: 1:    '4',
928: 1:    '5',
928: 1:    '6',
928: 1:    '7',
928: 1:    '8',
928: 1:    '9',
928: 1:    '10',
928: 1:    '11',
928: 1:    '12',
928: 1:    '13',
928: 1:    '14',
928: 1:    '15',
928: 1:    '16',
928: 1:    '17',
928: 1:    '18',
928: 1:    '19'
928: 1:  ]
928: 1:}
928: 1:Scores: 111021
928: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67']')
928: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
929: 1:BoardData {
929: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
929: 1:  'expectedAnswer': '71',
929: 1:  'history': [
929: 1:    {
929: 1:      'answer': '2',
929: 1:      'question': '1',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '3',
929: 1:      'question': '2',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '5',
929: 1:      'question': '3',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '7',
929: 1:      'question': '4',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '11',
929: 1:      'question': '5',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '13',
929: 1:      'question': '6',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '17',
929: 1:      'question': '7',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '19',
929: 1:      'question': '8',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '23',
929: 1:      'question': '9',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '29',
929: 1:      'question': '10',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '31',
929: 1:      'question': '11',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '37',
929: 1:      'question': '12',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '41',
929: 1:      'question': '13',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '43',
929: 1:      'question': '14',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '47',
929: 1:      'question': '15',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '53',
929: 1:      'question': '16',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '59',
929: 1:      'question': '17',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '61',
929: 1:      'question': '18',
929: 1:      'valid': true
929: 1:    },
929: 1:    {
929: 1:      'answer': '67',
929: 1:      'question': '19',
929: 1:      'valid': true
929: 1:    }
929: 1:  ],
929: 1:  'info': [
929: 1:    '✅f(1) = 2',
929: 1:    '✅f(2) = 3',
929: 1:    '✅f(3) = 5',
929: 1:    '✅f(4) = 7',
929: 1:    '✅f(5) = 11',
929: 1:    '✅f(6) = 13',
929: 1:    '✅f(7) = 17',
929: 1:    '✅f(8) = 19',
929: 1:    '✅f(9) = 23',
929: 1:    '✅f(10) = 29',
929: 1:    '✅f(11) = 31',
929: 1:    '✅f(12) = 37',
929: 1:    '✅f(13) = 41',
929: 1:    '✅f(14) = 43',
929: 1:    '✅f(15) = 47',
929: 1:    '✅f(16) = 53',
929: 1:    '✅f(17) = 59',
929: 1:    '✅f(18) = 61',
929: 1:    '✅f(19) = 67',
929: 1:    '❌f(20) = ??? != 71'
929: 1:  ],
929: 1:  'level': 33,
929: 1:  'nextQuestion': '20',
929: 1:  'questions': [
929: 1:    '1',
929: 1:    '2',
929: 1:    '3',
929: 1:    '4',
929: 1:    '5',
929: 1:    '6',
929: 1:    '7',
929: 1:    '8',
929: 1:    '9',
929: 1:    '10',
929: 1:    '11',
929: 1:    '12',
929: 1:    '13',
929: 1:    '14',
929: 1:    '15',
929: 1:    '16',
929: 1:    '17',
929: 1:    '18',
929: 1:    '19',
929: 1:    '20'
929: 1:  ]
929: 1:}
929: 1:Scores: 111043
929: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71']')
929: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
930: 1:BoardData {
930: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
930: 1:  'expectedAnswer': '73',
930: 1:  'history': [
930: 1:    {
930: 1:      'answer': '2',
930: 1:      'question': '1',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '3',
930: 1:      'question': '2',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '5',
930: 1:      'question': '3',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '7',
930: 1:      'question': '4',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '11',
930: 1:      'question': '5',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '13',
930: 1:      'question': '6',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '17',
930: 1:      'question': '7',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '19',
930: 1:      'question': '8',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '23',
930: 1:      'question': '9',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '29',
930: 1:      'question': '10',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '31',
930: 1:      'question': '11',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '37',
930: 1:      'question': '12',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '41',
930: 1:      'question': '13',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '43',
930: 1:      'question': '14',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '47',
930: 1:      'question': '15',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '53',
930: 1:      'question': '16',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '59',
930: 1:      'question': '17',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '61',
930: 1:      'question': '18',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '67',
930: 1:      'question': '19',
930: 1:      'valid': true
930: 1:    },
930: 1:    {
930: 1:      'answer': '71',
930: 1:      'question': '20',
930: 1:      'valid': true
930: 1:    }
930: 1:  ],
930: 1:  'info': [
930: 1:    '✅f(1) = 2',
930: 1:    '✅f(2) = 3',
930: 1:    '✅f(3) = 5',
930: 1:    '✅f(4) = 7',
930: 1:    '✅f(5) = 11',
930: 1:    '✅f(6) = 13',
930: 1:    '✅f(7) = 17',
930: 1:    '✅f(8) = 19',
930: 1:    '✅f(9) = 23',
930: 1:    '✅f(10) = 29',
930: 1:    '✅f(11) = 31',
930: 1:    '✅f(12) = 37',
930: 1:    '✅f(13) = 41',
930: 1:    '✅f(14) = 43',
930: 1:    '✅f(15) = 47',
930: 1:    '✅f(16) = 53',
930: 1:    '✅f(17) = 59',
930: 1:    '✅f(18) = 61',
930: 1:    '✅f(19) = 67',
930: 1:    '✅f(20) = 71',
930: 1:    '❌f(21) = ??? != 73'
930: 1:  ],
930: 1:  'level': 33,
930: 1:  'nextQuestion': '21',
930: 1:  'questions': [
930: 1:    '1',
930: 1:    '2',
930: 1:    '3',
930: 1:    '4',
930: 1:    '5',
930: 1:    '6',
930: 1:    '7',
930: 1:    '8',
930: 1:    '9',
930: 1:    '10',
930: 1:    '11',
930: 1:    '12',
930: 1:    '13',
930: 1:    '14',
930: 1:    '15',
930: 1:    '16',
930: 1:    '17',
930: 1:    '18',
930: 1:    '19',
930: 1:    '20',
930: 1:    '21'
930: 1:  ]
930: 1:}
930: 1:Scores: 111065
930: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', '73']')
930: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
931: 1:BoardData {
931: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
931: 1:  'expectedAnswer': '79',
931: 1:  'history': [
931: 1:    {
931: 1:      'answer': '2',
931: 1:      'question': '1',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '3',
931: 1:      'question': '2',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '5',
931: 1:      'question': '3',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '7',
931: 1:      'question': '4',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '11',
931: 1:      'question': '5',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '13',
931: 1:      'question': '6',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '17',
931: 1:      'question': '7',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '19',
931: 1:      'question': '8',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '23',
931: 1:      'question': '9',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '29',
931: 1:      'question': '10',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '31',
931: 1:      'question': '11',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '37',
931: 1:      'question': '12',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '41',
931: 1:      'question': '13',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '43',
931: 1:      'question': '14',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '47',
931: 1:      'question': '15',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '53',
931: 1:      'question': '16',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '59',
931: 1:      'question': '17',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '61',
931: 1:      'question': '18',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '67',
931: 1:      'question': '19',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '71',
931: 1:      'question': '20',
931: 1:      'valid': true
931: 1:    },
931: 1:    {
931: 1:      'answer': '73',
931: 1:      'question': '21',
931: 1:      'valid': true
931: 1:    }
931: 1:  ],
931: 1:  'info': [
931: 1:    '✅f(1) = 2',
931: 1:    '✅f(2) = 3',
931: 1:    '✅f(3) = 5',
931: 1:    '✅f(4) = 7',
931: 1:    '✅f(5) = 11',
931: 1:    '✅f(6) = 13',
931: 1:    '✅f(7) = 17',
931: 1:    '✅f(8) = 19',
931: 1:    '✅f(9) = 23',
931: 1:    '✅f(10) = 29',
931: 1:    '✅f(11) = 31',
931: 1:    '✅f(12) = 37',
931: 1:    '✅f(13) = 41',
931: 1:    '✅f(14) = 43',
931: 1:    '✅f(15) = 47',
931: 1:    '✅f(16) = 53',
931: 1:    '✅f(17) = 59',
931: 1:    '✅f(18) = 61',
931: 1:    '✅f(19) = 67',
931: 1:    '✅f(20) = 71',
931: 1:    '✅f(21) = 73',
931: 1:    '❌f(22) = ??? != 79'
931: 1:  ],
931: 1:  'level': 33,
931: 1:  'nextQuestion': '22',
931: 1:  'questions': [
931: 1:    '1',
931: 1:    '2',
931: 1:    '3',
931: 1:    '4',
931: 1:    '5',
931: 1:    '6',
931: 1:    '7',
931: 1:    '8',
931: 1:    '9',
931: 1:    '10',
931: 1:    '11',
931: 1:    '12',
931: 1:    '13',
931: 1:    '14',
931: 1:    '15',
931: 1:    '16',
931: 1:    '17',
931: 1:    '18',
931: 1:    '19',
931: 1:    '20',
931: 1:    '21',
931: 1:    '22'
931: 1:  ]
931: 1:}
931: 1:Scores: 111087
931: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', '73', '79']')
931: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
932: 1:BoardData {
932: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
932: 1:  'expectedAnswer': '83',
932: 1:  'history': [
932: 1:    {
932: 1:      'answer': '2',
932: 1:      'question': '1',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '3',
932: 1:      'question': '2',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '5',
932: 1:      'question': '3',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '7',
932: 1:      'question': '4',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '11',
932: 1:      'question': '5',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '13',
932: 1:      'question': '6',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '17',
932: 1:      'question': '7',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '19',
932: 1:      'question': '8',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '23',
932: 1:      'question': '9',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '29',
932: 1:      'question': '10',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '31',
932: 1:      'question': '11',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '37',
932: 1:      'question': '12',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '41',
932: 1:      'question': '13',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '43',
932: 1:      'question': '14',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '47',
932: 1:      'question': '15',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '53',
932: 1:      'question': '16',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '59',
932: 1:      'question': '17',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '61',
932: 1:      'question': '18',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '67',
932: 1:      'question': '19',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '71',
932: 1:      'question': '20',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '73',
932: 1:      'question': '21',
932: 1:      'valid': true
932: 1:    },
932: 1:    {
932: 1:      'answer': '79',
932: 1:      'question': '22',
932: 1:      'valid': true
932: 1:    }
932: 1:  ],
932: 1:  'info': [
932: 1:    '✅f(1) = 2',
932: 1:    '✅f(2) = 3',
932: 1:    '✅f(3) = 5',
932: 1:    '✅f(4) = 7',
932: 1:    '✅f(5) = 11',
932: 1:    '✅f(6) = 13',
932: 1:    '✅f(7) = 17',
932: 1:    '✅f(8) = 19',
932: 1:    '✅f(9) = 23',
932: 1:    '✅f(10) = 29',
932: 1:    '✅f(11) = 31',
932: 1:    '✅f(12) = 37',
932: 1:    '✅f(13) = 41',
932: 1:    '✅f(14) = 43',
932: 1:    '✅f(15) = 47',
932: 1:    '✅f(16) = 53',
932: 1:    '✅f(17) = 59',
932: 1:    '✅f(18) = 61',
932: 1:    '✅f(19) = 67',
932: 1:    '✅f(20) = 71',
932: 1:    '✅f(21) = 73',
932: 1:    '✅f(22) = 79',
932: 1:    '❌f(23) = ??? != 83'
932: 1:  ],
932: 1:  'level': 33,
932: 1:  'nextQuestion': '23',
932: 1:  'questions': [
932: 1:    '1',
932: 1:    '2',
932: 1:    '3',
932: 1:    '4',
932: 1:    '5',
932: 1:    '6',
932: 1:    '7',
932: 1:    '8',
932: 1:    '9',
932: 1:    '10',
932: 1:    '11',
932: 1:    '12',
932: 1:    '13',
932: 1:    '14',
932: 1:    '15',
932: 1:    '16',
932: 1:    '17',
932: 1:    '18',
932: 1:    '19',
932: 1:    '20',
932: 1:    '21',
932: 1:    '22',
932: 1:    '23'
932: 1:  ]
932: 1:}
932: 1:Scores: 111109
932: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', '73', '79', '83']')
932: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
933: 1:BoardData {
933: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
933: 1:  'expectedAnswer': '89',
933: 1:  'history': [
933: 1:    {
933: 1:      'answer': '2',
933: 1:      'question': '1',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '3',
933: 1:      'question': '2',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '5',
933: 1:      'question': '3',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '7',
933: 1:      'question': '4',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '11',
933: 1:      'question': '5',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '13',
933: 1:      'question': '6',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '17',
933: 1:      'question': '7',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '19',
933: 1:      'question': '8',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '23',
933: 1:      'question': '9',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '29',
933: 1:      'question': '10',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '31',
933: 1:      'question': '11',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '37',
933: 1:      'question': '12',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '41',
933: 1:      'question': '13',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '43',
933: 1:      'question': '14',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '47',
933: 1:      'question': '15',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '53',
933: 1:      'question': '16',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '59',
933: 1:      'question': '17',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '61',
933: 1:      'question': '18',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '67',
933: 1:      'question': '19',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '71',
933: 1:      'question': '20',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '73',
933: 1:      'question': '21',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '79',
933: 1:      'question': '22',
933: 1:      'valid': true
933: 1:    },
933: 1:    {
933: 1:      'answer': '83',
933: 1:      'question': '23',
933: 1:      'valid': true
933: 1:    }
933: 1:  ],
933: 1:  'info': [
933: 1:    '✅f(1) = 2',
933: 1:    '✅f(2) = 3',
933: 1:    '✅f(3) = 5',
933: 1:    '✅f(4) = 7',
933: 1:    '✅f(5) = 11',
933: 1:    '✅f(6) = 13',
933: 1:    '✅f(7) = 17',
933: 1:    '✅f(8) = 19',
933: 1:    '✅f(9) = 23',
933: 1:    '✅f(10) = 29',
933: 1:    '✅f(11) = 31',
933: 1:    '✅f(12) = 37',
933: 1:    '✅f(13) = 41',
933: 1:    '✅f(14) = 43',
933: 1:    '✅f(15) = 47',
933: 1:    '✅f(16) = 53',
933: 1:    '✅f(17) = 59',
933: 1:    '✅f(18) = 61',
933: 1:    '✅f(19) = 67',
933: 1:    '✅f(20) = 71',
933: 1:    '✅f(21) = 73',
933: 1:    '✅f(22) = 79',
933: 1:    '✅f(23) = 83',
933: 1:    '❌f(24) = ??? != 89'
933: 1:  ],
933: 1:  'level': 33,
933: 1:  'nextQuestion': '24',
933: 1:  'questions': [
933: 1:    '1',
933: 1:    '2',
933: 1:    '3',
933: 1:    '4',
933: 1:    '5',
933: 1:    '6',
933: 1:    '7',
933: 1:    '8',
933: 1:    '9',
933: 1:    '10',
933: 1:    '11',
933: 1:    '12',
933: 1:    '13',
933: 1:    '14',
933: 1:    '15',
933: 1:    '16',
933: 1:    '17',
933: 1:    '18',
933: 1:    '19',
933: 1:    '20',
933: 1:    '21',
933: 1:    '22',
933: 1:    '23',
933: 1:    '24'
933: 1:  ]
933: 1:}
933: 1:Scores: 111131
933: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', '73', '79', '83', '89']')
933: 1:Fire Event: PassTest{complexity=55, testCount=25}
------------------------------------------
934: 1:BoardData {
934: 1:  'description': ['The first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Write a method that returns the i-th prime number.'],
934: 1:  'expectedAnswer': '97',
934: 1:  'history': [
934: 1:    {
934: 1:      'answer': '2',
934: 1:      'question': '1',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '3',
934: 1:      'question': '2',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '5',
934: 1:      'question': '3',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '7',
934: 1:      'question': '4',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '11',
934: 1:      'question': '5',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '13',
934: 1:      'question': '6',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '17',
934: 1:      'question': '7',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '19',
934: 1:      'question': '8',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '23',
934: 1:      'question': '9',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '29',
934: 1:      'question': '10',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '31',
934: 1:      'question': '11',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '37',
934: 1:      'question': '12',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '41',
934: 1:      'question': '13',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '43',
934: 1:      'question': '14',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '47',
934: 1:      'question': '15',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '53',
934: 1:      'question': '16',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '59',
934: 1:      'question': '17',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '61',
934: 1:      'question': '18',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '67',
934: 1:      'question': '19',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '71',
934: 1:      'question': '20',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '73',
934: 1:      'question': '21',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '79',
934: 1:      'question': '22',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '83',
934: 1:      'question': '23',
934: 1:      'valid': true
934: 1:    },
934: 1:    {
934: 1:      'answer': '89',
934: 1:      'question': '24',
934: 1:      'valid': true
934: 1:    }
934: 1:  ],
934: 1:  'info': [
934: 1:    '✅f(1) = 2',
934: 1:    '✅f(2) = 3',
934: 1:    '✅f(3) = 5',
934: 1:    '✅f(4) = 7',
934: 1:    '✅f(5) = 11',
934: 1:    '✅f(6) = 13',
934: 1:    '✅f(7) = 17',
934: 1:    '✅f(8) = 19',
934: 1:    '✅f(9) = 23',
934: 1:    '✅f(10) = 29',
934: 1:    '✅f(11) = 31',
934: 1:    '✅f(12) = 37',
934: 1:    '✅f(13) = 41',
934: 1:    '✅f(14) = 43',
934: 1:    '✅f(15) = 47',
934: 1:    '✅f(16) = 53',
934: 1:    '✅f(17) = 59',
934: 1:    '✅f(18) = 61',
934: 1:    '✅f(19) = 67',
934: 1:    '✅f(20) = 71',
934: 1:    '✅f(21) = 73',
934: 1:    '✅f(22) = 79',
934: 1:    '✅f(23) = 83',
934: 1:    '✅f(24) = 89',
934: 1:    '❌f(25) = ??? != 97'
934: 1:  ],
934: 1:  'level': 33,
934: 1:  'nextQuestion': '25',
934: 1:  'questions': [
934: 1:    '1',
934: 1:    '2',
934: 1:    '3',
934: 1:    '4',
934: 1:    '5',
934: 1:    '6',
934: 1:    '7',
934: 1:    '8',
934: 1:    '9',
934: 1:    '10',
934: 1:    '11',
934: 1:    '12',
934: 1:    '13',
934: 1:    '14',
934: 1:    '15',
934: 1:    '16',
934: 1:    '17',
934: 1:    '18',
934: 1:    '19',
934: 1:    '20',
934: 1:    '21',
934: 1:    '22',
934: 1:    '23',
934: 1:    '24',
934: 1:    '25'
934: 1:  ]
934: 1:}
934: 1:Scores: 111153
934: 1:Answer: message('['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', '73', '79', '83', '89', '97']')
934: 1:Fire Event: PassTest{complexity=55, testCount=25}
934: 1:Fire Event: NextAlgorithm{complexity=55, time=0}
------------------------------------------
935: 1:BoardData {
935: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
935: 1:  'history': [
935: 1:    {
935: 1:      'answer': '2',
935: 1:      'question': '1',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '3',
935: 1:      'question': '2',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '5',
935: 1:      'question': '3',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '7',
935: 1:      'question': '4',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '11',
935: 1:      'question': '5',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '13',
935: 1:      'question': '6',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '17',
935: 1:      'question': '7',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '19',
935: 1:      'question': '8',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '23',
935: 1:      'question': '9',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '29',
935: 1:      'question': '10',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '31',
935: 1:      'question': '11',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '37',
935: 1:      'question': '12',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '41',
935: 1:      'question': '13',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '43',
935: 1:      'question': '14',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '47',
935: 1:      'question': '15',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '53',
935: 1:      'question': '16',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '59',
935: 1:      'question': '17',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '61',
935: 1:      'question': '18',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '67',
935: 1:      'question': '19',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '71',
935: 1:      'question': '20',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '73',
935: 1:      'question': '21',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '79',
935: 1:      'question': '22',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '83',
935: 1:      'question': '23',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '89',
935: 1:      'question': '24',
935: 1:      'valid': true
935: 1:    },
935: 1:    {
935: 1:      'answer': '97',
935: 1:      'question': '25',
935: 1:      'valid': true
935: 1:    }
935: 1:  ],
935: 1:  'info': [
935: 1:    '✅f(1) = 2',
935: 1:    '✅f(2) = 3',
935: 1:    '✅f(3) = 5',
935: 1:    '✅f(4) = 7',
935: 1:    '✅f(5) = 11',
935: 1:    '✅f(6) = 13',
935: 1:    '✅f(7) = 17',
935: 1:    '✅f(8) = 19',
935: 1:    '✅f(9) = 23',
935: 1:    '✅f(10) = 29',
935: 1:    '✅f(11) = 31',
935: 1:    '✅f(12) = 37',
935: 1:    '✅f(13) = 41',
935: 1:    '✅f(14) = 43',
935: 1:    '✅f(15) = 47',
935: 1:    '✅f(16) = 53',
935: 1:    '✅f(17) = 59',
935: 1:    '✅f(18) = 61',
935: 1:    '✅f(19) = 67',
935: 1:    '✅f(20) = 71',
935: 1:    '✅f(21) = 73',
935: 1:    '✅f(22) = 79',
935: 1:    '✅f(23) = 83',
935: 1:    '✅f(24) = 89',
935: 1:    '✅f(25) = 97'
935: 1:  ],
935: 1:  'level': 33,
935: 1:  'questions': []
935: 1:}
935: 1:Scores: 118599
935: 1:Answer: message('StartNextLevel')
935: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
936: 1:BoardData {
936: 1:  'description': [
936: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
936: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
936: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
936: 1:  ],
936: 1:  'expectedAnswer': '15:3*5:FizzBuzz',
936: 1:  'history': [],
936: 1:  'info': ['❌f(1) = ??? != 15:3*5:FizzBuzz'],
936: 1:  'level': 34,
936: 1:  'nextQuestion': '1',
936: 1:  'questions': ['1']
936: 1:}
936: 1:Scores: 118599
936: 1:Answer: message('['15:3*5:FizzBuzz']')
936: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
937: 1:BoardData {
937: 1:  'description': [
937: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
937: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
937: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
937: 1:  ],
937: 1:  'expectedAnswer': '21:3*7:FizzMuzz',
937: 1:  'history': [{
937: 1:    'answer': '15:3*5:FizzBuzz',
937: 1:    'question': '1',
937: 1:    'valid': true
937: 1:  }],
937: 1:  'info': [
937: 1:    '✅f(1) = 15:3*5:FizzBuzz',
937: 1:    '❌f(2) = ??? != 21:3*7:FizzMuzz'
937: 1:  ],
937: 1:  'level': 34,
937: 1:  'nextQuestion': '2',
937: 1:  'questions': [
937: 1:    '1',
937: 1:    '2'
937: 1:  ]
937: 1:}
937: 1:Scores: 118620
937: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz']')
937: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
938: 1:BoardData {
938: 1:  'description': [
938: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
938: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
938: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
938: 1:  ],
938: 1:  'expectedAnswer': '33:3*11:FizzDuzz',
938: 1:  'history': [
938: 1:    {
938: 1:      'answer': '15:3*5:FizzBuzz',
938: 1:      'question': '1',
938: 1:      'valid': true
938: 1:    },
938: 1:    {
938: 1:      'answer': '21:3*7:FizzMuzz',
938: 1:      'question': '2',
938: 1:      'valid': true
938: 1:    }
938: 1:  ],
938: 1:  'info': [
938: 1:    '✅f(1) = 15:3*5:FizzBuzz',
938: 1:    '✅f(2) = 21:3*7:FizzMuzz',
938: 1:    '❌f(3) = ??? != 33:3*11:FizzDuzz'
938: 1:  ],
938: 1:  'level': 34,
938: 1:  'nextQuestion': '3',
938: 1:  'questions': [
938: 1:    '1',
938: 1:    '2',
938: 1:    '3'
938: 1:  ]
938: 1:}
938: 1:Scores: 118641
938: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz']')
938: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
939: 1:BoardData {
939: 1:  'description': [
939: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
939: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
939: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
939: 1:  ],
939: 1:  'expectedAnswer': '35:5*7:BuzzMuzz',
939: 1:  'history': [
939: 1:    {
939: 1:      'answer': '15:3*5:FizzBuzz',
939: 1:      'question': '1',
939: 1:      'valid': true
939: 1:    },
939: 1:    {
939: 1:      'answer': '21:3*7:FizzMuzz',
939: 1:      'question': '2',
939: 1:      'valid': true
939: 1:    },
939: 1:    {
939: 1:      'answer': '33:3*11:FizzDuzz',
939: 1:      'question': '3',
939: 1:      'valid': true
939: 1:    }
939: 1:  ],
939: 1:  'info': [
939: 1:    '✅f(1) = 15:3*5:FizzBuzz',
939: 1:    '✅f(2) = 21:3*7:FizzMuzz',
939: 1:    '✅f(3) = 33:3*11:FizzDuzz',
939: 1:    '❌f(4) = ??? != 35:5*7:BuzzMuzz'
939: 1:  ],
939: 1:  'level': 34,
939: 1:  'nextQuestion': '4',
939: 1:  'questions': [
939: 1:    '1',
939: 1:    '2',
939: 1:    '3',
939: 1:    '4'
939: 1:  ]
939: 1:}
939: 1:Scores: 118662
939: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz']')
939: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
940: 1:BoardData {
940: 1:  'description': [
940: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
940: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
940: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
940: 1:  ],
940: 1:  'expectedAnswer': '39:3*13:FizzCazz',
940: 1:  'history': [
940: 1:    {
940: 1:      'answer': '15:3*5:FizzBuzz',
940: 1:      'question': '1',
940: 1:      'valid': true
940: 1:    },
940: 1:    {
940: 1:      'answer': '21:3*7:FizzMuzz',
940: 1:      'question': '2',
940: 1:      'valid': true
940: 1:    },
940: 1:    {
940: 1:      'answer': '33:3*11:FizzDuzz',
940: 1:      'question': '3',
940: 1:      'valid': true
940: 1:    },
940: 1:    {
940: 1:      'answer': '35:5*7:BuzzMuzz',
940: 1:      'question': '4',
940: 1:      'valid': true
940: 1:    }
940: 1:  ],
940: 1:  'info': [
940: 1:    '✅f(1) = 15:3*5:FizzBuzz',
940: 1:    '✅f(2) = 21:3*7:FizzMuzz',
940: 1:    '✅f(3) = 33:3*11:FizzDuzz',
940: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
940: 1:    '❌f(5) = ??? != 39:3*13:FizzCazz'
940: 1:  ],
940: 1:  'level': 34,
940: 1:  'nextQuestion': '5',
940: 1:  'questions': [
940: 1:    '1',
940: 1:    '2',
940: 1:    '3',
940: 1:    '4',
940: 1:    '5'
940: 1:  ]
940: 1:}
940: 1:Scores: 118683
940: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz']')
940: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
941: 1:BoardData {
941: 1:  'description': [
941: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
941: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
941: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
941: 1:  ],
941: 1:  'expectedAnswer': '55:5*11:BuzzDuzz',
941: 1:  'history': [
941: 1:    {
941: 1:      'answer': '15:3*5:FizzBuzz',
941: 1:      'question': '1',
941: 1:      'valid': true
941: 1:    },
941: 1:    {
941: 1:      'answer': '21:3*7:FizzMuzz',
941: 1:      'question': '2',
941: 1:      'valid': true
941: 1:    },
941: 1:    {
941: 1:      'answer': '33:3*11:FizzDuzz',
941: 1:      'question': '3',
941: 1:      'valid': true
941: 1:    },
941: 1:    {
941: 1:      'answer': '35:5*7:BuzzMuzz',
941: 1:      'question': '4',
941: 1:      'valid': true
941: 1:    },
941: 1:    {
941: 1:      'answer': '39:3*13:FizzCazz',
941: 1:      'question': '5',
941: 1:      'valid': true
941: 1:    }
941: 1:  ],
941: 1:  'info': [
941: 1:    '✅f(1) = 15:3*5:FizzBuzz',
941: 1:    '✅f(2) = 21:3*7:FizzMuzz',
941: 1:    '✅f(3) = 33:3*11:FizzDuzz',
941: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
941: 1:    '✅f(5) = 39:3*13:FizzCazz',
941: 1:    '❌f(6) = ??? != 55:5*11:BuzzDuzz'
941: 1:  ],
941: 1:  'level': 34,
941: 1:  'nextQuestion': '6',
941: 1:  'questions': [
941: 1:    '1',
941: 1:    '2',
941: 1:    '3',
941: 1:    '4',
941: 1:    '5',
941: 1:    '6'
941: 1:  ]
941: 1:}
941: 1:Scores: 118704
941: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz']')
941: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
942: 1:BoardData {
942: 1:  'description': [
942: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
942: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
942: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
942: 1:  ],
942: 1:  'expectedAnswer': '65:5*13:BuzzCazz',
942: 1:  'history': [
942: 1:    {
942: 1:      'answer': '15:3*5:FizzBuzz',
942: 1:      'question': '1',
942: 1:      'valid': true
942: 1:    },
942: 1:    {
942: 1:      'answer': '21:3*7:FizzMuzz',
942: 1:      'question': '2',
942: 1:      'valid': true
942: 1:    },
942: 1:    {
942: 1:      'answer': '33:3*11:FizzDuzz',
942: 1:      'question': '3',
942: 1:      'valid': true
942: 1:    },
942: 1:    {
942: 1:      'answer': '35:5*7:BuzzMuzz',
942: 1:      'question': '4',
942: 1:      'valid': true
942: 1:    },
942: 1:    {
942: 1:      'answer': '39:3*13:FizzCazz',
942: 1:      'question': '5',
942: 1:      'valid': true
942: 1:    },
942: 1:    {
942: 1:      'answer': '55:5*11:BuzzDuzz',
942: 1:      'question': '6',
942: 1:      'valid': true
942: 1:    }
942: 1:  ],
942: 1:  'info': [
942: 1:    '✅f(1) = 15:3*5:FizzBuzz',
942: 1:    '✅f(2) = 21:3*7:FizzMuzz',
942: 1:    '✅f(3) = 33:3*11:FizzDuzz',
942: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
942: 1:    '✅f(5) = 39:3*13:FizzCazz',
942: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
942: 1:    '❌f(7) = ??? != 65:5*13:BuzzCazz'
942: 1:  ],
942: 1:  'level': 34,
942: 1:  'nextQuestion': '7',
942: 1:  'questions': [
942: 1:    '1',
942: 1:    '2',
942: 1:    '3',
942: 1:    '4',
942: 1:    '5',
942: 1:    '6',
942: 1:    '7'
942: 1:  ]
942: 1:}
942: 1:Scores: 118725
942: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz']')
942: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
943: 1:BoardData {
943: 1:  'description': [
943: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
943: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
943: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
943: 1:  ],
943: 1:  'expectedAnswer': '77:7*11:MuzzDuzz',
943: 1:  'history': [
943: 1:    {
943: 1:      'answer': '15:3*5:FizzBuzz',
943: 1:      'question': '1',
943: 1:      'valid': true
943: 1:    },
943: 1:    {
943: 1:      'answer': '21:3*7:FizzMuzz',
943: 1:      'question': '2',
943: 1:      'valid': true
943: 1:    },
943: 1:    {
943: 1:      'answer': '33:3*11:FizzDuzz',
943: 1:      'question': '3',
943: 1:      'valid': true
943: 1:    },
943: 1:    {
943: 1:      'answer': '35:5*7:BuzzMuzz',
943: 1:      'question': '4',
943: 1:      'valid': true
943: 1:    },
943: 1:    {
943: 1:      'answer': '39:3*13:FizzCazz',
943: 1:      'question': '5',
943: 1:      'valid': true
943: 1:    },
943: 1:    {
943: 1:      'answer': '55:5*11:BuzzDuzz',
943: 1:      'question': '6',
943: 1:      'valid': true
943: 1:    },
943: 1:    {
943: 1:      'answer': '65:5*13:BuzzCazz',
943: 1:      'question': '7',
943: 1:      'valid': true
943: 1:    }
943: 1:  ],
943: 1:  'info': [
943: 1:    '✅f(1) = 15:3*5:FizzBuzz',
943: 1:    '✅f(2) = 21:3*7:FizzMuzz',
943: 1:    '✅f(3) = 33:3*11:FizzDuzz',
943: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
943: 1:    '✅f(5) = 39:3*13:FizzCazz',
943: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
943: 1:    '✅f(7) = 65:5*13:BuzzCazz',
943: 1:    '❌f(8) = ??? != 77:7*11:MuzzDuzz'
943: 1:  ],
943: 1:  'level': 34,
943: 1:  'nextQuestion': '8',
943: 1:  'questions': [
943: 1:    '1',
943: 1:    '2',
943: 1:    '3',
943: 1:    '4',
943: 1:    '5',
943: 1:    '6',
943: 1:    '7',
943: 1:    '8'
943: 1:  ]
943: 1:}
943: 1:Scores: 118746
943: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz']')
943: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
944: 1:BoardData {
944: 1:  'description': [
944: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
944: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
944: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
944: 1:  ],
944: 1:  'expectedAnswer': '91:7*13:MuzzCazz',
944: 1:  'history': [
944: 1:    {
944: 1:      'answer': '15:3*5:FizzBuzz',
944: 1:      'question': '1',
944: 1:      'valid': true
944: 1:    },
944: 1:    {
944: 1:      'answer': '21:3*7:FizzMuzz',
944: 1:      'question': '2',
944: 1:      'valid': true
944: 1:    },
944: 1:    {
944: 1:      'answer': '33:3*11:FizzDuzz',
944: 1:      'question': '3',
944: 1:      'valid': true
944: 1:    },
944: 1:    {
944: 1:      'answer': '35:5*7:BuzzMuzz',
944: 1:      'question': '4',
944: 1:      'valid': true
944: 1:    },
944: 1:    {
944: 1:      'answer': '39:3*13:FizzCazz',
944: 1:      'question': '5',
944: 1:      'valid': true
944: 1:    },
944: 1:    {
944: 1:      'answer': '55:5*11:BuzzDuzz',
944: 1:      'question': '6',
944: 1:      'valid': true
944: 1:    },
944: 1:    {
944: 1:      'answer': '65:5*13:BuzzCazz',
944: 1:      'question': '7',
944: 1:      'valid': true
944: 1:    },
944: 1:    {
944: 1:      'answer': '77:7*11:MuzzDuzz',
944: 1:      'question': '8',
944: 1:      'valid': true
944: 1:    }
944: 1:  ],
944: 1:  'info': [
944: 1:    '✅f(1) = 15:3*5:FizzBuzz',
944: 1:    '✅f(2) = 21:3*7:FizzMuzz',
944: 1:    '✅f(3) = 33:3*11:FizzDuzz',
944: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
944: 1:    '✅f(5) = 39:3*13:FizzCazz',
944: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
944: 1:    '✅f(7) = 65:5*13:BuzzCazz',
944: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
944: 1:    '❌f(9) = ??? != 91:7*13:MuzzCazz'
944: 1:  ],
944: 1:  'level': 34,
944: 1:  'nextQuestion': '9',
944: 1:  'questions': [
944: 1:    '1',
944: 1:    '2',
944: 1:    '3',
944: 1:    '4',
944: 1:    '5',
944: 1:    '6',
944: 1:    '7',
944: 1:    '8',
944: 1:    '9'
944: 1:  ]
944: 1:}
944: 1:Scores: 118767
944: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz']')
944: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
945: 1:BoardData {
945: 1:  'description': [
945: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
945: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
945: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
945: 1:  ],
945: 1:  'expectedAnswer': '105:3*5*7:FizzBuzzMuzz',
945: 1:  'history': [
945: 1:    {
945: 1:      'answer': '15:3*5:FizzBuzz',
945: 1:      'question': '1',
945: 1:      'valid': true
945: 1:    },
945: 1:    {
945: 1:      'answer': '21:3*7:FizzMuzz',
945: 1:      'question': '2',
945: 1:      'valid': true
945: 1:    },
945: 1:    {
945: 1:      'answer': '33:3*11:FizzDuzz',
945: 1:      'question': '3',
945: 1:      'valid': true
945: 1:    },
945: 1:    {
945: 1:      'answer': '35:5*7:BuzzMuzz',
945: 1:      'question': '4',
945: 1:      'valid': true
945: 1:    },
945: 1:    {
945: 1:      'answer': '39:3*13:FizzCazz',
945: 1:      'question': '5',
945: 1:      'valid': true
945: 1:    },
945: 1:    {
945: 1:      'answer': '55:5*11:BuzzDuzz',
945: 1:      'question': '6',
945: 1:      'valid': true
945: 1:    },
945: 1:    {
945: 1:      'answer': '65:5*13:BuzzCazz',
945: 1:      'question': '7',
945: 1:      'valid': true
945: 1:    },
945: 1:    {
945: 1:      'answer': '77:7*11:MuzzDuzz',
945: 1:      'question': '8',
945: 1:      'valid': true
945: 1:    },
945: 1:    {
945: 1:      'answer': '91:7*13:MuzzCazz',
945: 1:      'question': '9',
945: 1:      'valid': true
945: 1:    }
945: 1:  ],
945: 1:  'info': [
945: 1:    '✅f(1) = 15:3*5:FizzBuzz',
945: 1:    '✅f(2) = 21:3*7:FizzMuzz',
945: 1:    '✅f(3) = 33:3*11:FizzDuzz',
945: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
945: 1:    '✅f(5) = 39:3*13:FizzCazz',
945: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
945: 1:    '✅f(7) = 65:5*13:BuzzCazz',
945: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
945: 1:    '✅f(9) = 91:7*13:MuzzCazz',
945: 1:    '❌f(10) = ??? != 105:3*5*7:FizzBuzzMuzz'
945: 1:  ],
945: 1:  'level': 34,
945: 1:  'nextQuestion': '10',
945: 1:  'questions': [
945: 1:    '1',
945: 1:    '2',
945: 1:    '3',
945: 1:    '4',
945: 1:    '5',
945: 1:    '6',
945: 1:    '7',
945: 1:    '8',
945: 1:    '9',
945: 1:    '10'
945: 1:  ]
945: 1:}
945: 1:Scores: 118788
945: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz']')
945: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
946: 1:BoardData {
946: 1:  'description': [
946: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
946: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
946: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
946: 1:  ],
946: 1:  'expectedAnswer': '143:11*13:DuzzCazz',
946: 1:  'history': [
946: 1:    {
946: 1:      'answer': '15:3*5:FizzBuzz',
946: 1:      'question': '1',
946: 1:      'valid': true
946: 1:    },
946: 1:    {
946: 1:      'answer': '21:3*7:FizzMuzz',
946: 1:      'question': '2',
946: 1:      'valid': true
946: 1:    },
946: 1:    {
946: 1:      'answer': '33:3*11:FizzDuzz',
946: 1:      'question': '3',
946: 1:      'valid': true
946: 1:    },
946: 1:    {
946: 1:      'answer': '35:5*7:BuzzMuzz',
946: 1:      'question': '4',
946: 1:      'valid': true
946: 1:    },
946: 1:    {
946: 1:      'answer': '39:3*13:FizzCazz',
946: 1:      'question': '5',
946: 1:      'valid': true
946: 1:    },
946: 1:    {
946: 1:      'answer': '55:5*11:BuzzDuzz',
946: 1:      'question': '6',
946: 1:      'valid': true
946: 1:    },
946: 1:    {
946: 1:      'answer': '65:5*13:BuzzCazz',
946: 1:      'question': '7',
946: 1:      'valid': true
946: 1:    },
946: 1:    {
946: 1:      'answer': '77:7*11:MuzzDuzz',
946: 1:      'question': '8',
946: 1:      'valid': true
946: 1:    },
946: 1:    {
946: 1:      'answer': '91:7*13:MuzzCazz',
946: 1:      'question': '9',
946: 1:      'valid': true
946: 1:    },
946: 1:    {
946: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
946: 1:      'question': '10',
946: 1:      'valid': true
946: 1:    }
946: 1:  ],
946: 1:  'info': [
946: 1:    '✅f(1) = 15:3*5:FizzBuzz',
946: 1:    '✅f(2) = 21:3*7:FizzMuzz',
946: 1:    '✅f(3) = 33:3*11:FizzDuzz',
946: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
946: 1:    '✅f(5) = 39:3*13:FizzCazz',
946: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
946: 1:    '✅f(7) = 65:5*13:BuzzCazz',
946: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
946: 1:    '✅f(9) = 91:7*13:MuzzCazz',
946: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
946: 1:    '❌f(11) = ??? != 143:11*13:DuzzCazz'
946: 1:  ],
946: 1:  'level': 34,
946: 1:  'nextQuestion': '11',
946: 1:  'questions': [
946: 1:    '1',
946: 1:    '2',
946: 1:    '3',
946: 1:    '4',
946: 1:    '5',
946: 1:    '6',
946: 1:    '7',
946: 1:    '8',
946: 1:    '9',
946: 1:    '10',
946: 1:    '11'
946: 1:  ]
946: 1:}
946: 1:Scores: 118809
946: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz']')
946: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
947: 1:BoardData {
947: 1:  'description': [
947: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
947: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
947: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
947: 1:  ],
947: 1:  'expectedAnswer': '165:3*5*11:FizzBuzzDuzz',
947: 1:  'history': [
947: 1:    {
947: 1:      'answer': '15:3*5:FizzBuzz',
947: 1:      'question': '1',
947: 1:      'valid': true
947: 1:    },
947: 1:    {
947: 1:      'answer': '21:3*7:FizzMuzz',
947: 1:      'question': '2',
947: 1:      'valid': true
947: 1:    },
947: 1:    {
947: 1:      'answer': '33:3*11:FizzDuzz',
947: 1:      'question': '3',
947: 1:      'valid': true
947: 1:    },
947: 1:    {
947: 1:      'answer': '35:5*7:BuzzMuzz',
947: 1:      'question': '4',
947: 1:      'valid': true
947: 1:    },
947: 1:    {
947: 1:      'answer': '39:3*13:FizzCazz',
947: 1:      'question': '5',
947: 1:      'valid': true
947: 1:    },
947: 1:    {
947: 1:      'answer': '55:5*11:BuzzDuzz',
947: 1:      'question': '6',
947: 1:      'valid': true
947: 1:    },
947: 1:    {
947: 1:      'answer': '65:5*13:BuzzCazz',
947: 1:      'question': '7',
947: 1:      'valid': true
947: 1:    },
947: 1:    {
947: 1:      'answer': '77:7*11:MuzzDuzz',
947: 1:      'question': '8',
947: 1:      'valid': true
947: 1:    },
947: 1:    {
947: 1:      'answer': '91:7*13:MuzzCazz',
947: 1:      'question': '9',
947: 1:      'valid': true
947: 1:    },
947: 1:    {
947: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
947: 1:      'question': '10',
947: 1:      'valid': true
947: 1:    },
947: 1:    {
947: 1:      'answer': '143:11*13:DuzzCazz',
947: 1:      'question': '11',
947: 1:      'valid': true
947: 1:    }
947: 1:  ],
947: 1:  'info': [
947: 1:    '✅f(1) = 15:3*5:FizzBuzz',
947: 1:    '✅f(2) = 21:3*7:FizzMuzz',
947: 1:    '✅f(3) = 33:3*11:FizzDuzz',
947: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
947: 1:    '✅f(5) = 39:3*13:FizzCazz',
947: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
947: 1:    '✅f(7) = 65:5*13:BuzzCazz',
947: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
947: 1:    '✅f(9) = 91:7*13:MuzzCazz',
947: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
947: 1:    '✅f(11) = 143:11*13:DuzzCazz',
947: 1:    '❌f(12) = ??? != 165:3*5*11:FizzBuzzDuzz'
947: 1:  ],
947: 1:  'level': 34,
947: 1:  'nextQuestion': '12',
947: 1:  'questions': [
947: 1:    '1',
947: 1:    '2',
947: 1:    '3',
947: 1:    '4',
947: 1:    '5',
947: 1:    '6',
947: 1:    '7',
947: 1:    '8',
947: 1:    '9',
947: 1:    '10',
947: 1:    '11',
947: 1:    '12'
947: 1:  ]
947: 1:}
947: 1:Scores: 118830
947: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz']')
947: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
948: 1:BoardData {
948: 1:  'description': [
948: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
948: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
948: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
948: 1:  ],
948: 1:  'expectedAnswer': '195:3*5*13:FizzBuzzCazz',
948: 1:  'history': [
948: 1:    {
948: 1:      'answer': '15:3*5:FizzBuzz',
948: 1:      'question': '1',
948: 1:      'valid': true
948: 1:    },
948: 1:    {
948: 1:      'answer': '21:3*7:FizzMuzz',
948: 1:      'question': '2',
948: 1:      'valid': true
948: 1:    },
948: 1:    {
948: 1:      'answer': '33:3*11:FizzDuzz',
948: 1:      'question': '3',
948: 1:      'valid': true
948: 1:    },
948: 1:    {
948: 1:      'answer': '35:5*7:BuzzMuzz',
948: 1:      'question': '4',
948: 1:      'valid': true
948: 1:    },
948: 1:    {
948: 1:      'answer': '39:3*13:FizzCazz',
948: 1:      'question': '5',
948: 1:      'valid': true
948: 1:    },
948: 1:    {
948: 1:      'answer': '55:5*11:BuzzDuzz',
948: 1:      'question': '6',
948: 1:      'valid': true
948: 1:    },
948: 1:    {
948: 1:      'answer': '65:5*13:BuzzCazz',
948: 1:      'question': '7',
948: 1:      'valid': true
948: 1:    },
948: 1:    {
948: 1:      'answer': '77:7*11:MuzzDuzz',
948: 1:      'question': '8',
948: 1:      'valid': true
948: 1:    },
948: 1:    {
948: 1:      'answer': '91:7*13:MuzzCazz',
948: 1:      'question': '9',
948: 1:      'valid': true
948: 1:    },
948: 1:    {
948: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
948: 1:      'question': '10',
948: 1:      'valid': true
948: 1:    },
948: 1:    {
948: 1:      'answer': '143:11*13:DuzzCazz',
948: 1:      'question': '11',
948: 1:      'valid': true
948: 1:    },
948: 1:    {
948: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
948: 1:      'question': '12',
948: 1:      'valid': true
948: 1:    }
948: 1:  ],
948: 1:  'info': [
948: 1:    '✅f(1) = 15:3*5:FizzBuzz',
948: 1:    '✅f(2) = 21:3*7:FizzMuzz',
948: 1:    '✅f(3) = 33:3*11:FizzDuzz',
948: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
948: 1:    '✅f(5) = 39:3*13:FizzCazz',
948: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
948: 1:    '✅f(7) = 65:5*13:BuzzCazz',
948: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
948: 1:    '✅f(9) = 91:7*13:MuzzCazz',
948: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
948: 1:    '✅f(11) = 143:11*13:DuzzCazz',
948: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
948: 1:    '❌f(13) = ??? != 195:3*5*13:FizzBuzzCazz'
948: 1:  ],
948: 1:  'level': 34,
948: 1:  'nextQuestion': '13',
948: 1:  'questions': [
948: 1:    '1',
948: 1:    '2',
948: 1:    '3',
948: 1:    '4',
948: 1:    '5',
948: 1:    '6',
948: 1:    '7',
948: 1:    '8',
948: 1:    '9',
948: 1:    '10',
948: 1:    '11',
948: 1:    '12',
948: 1:    '13'
948: 1:  ]
948: 1:}
948: 1:Scores: 118851
948: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz']')
948: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
949: 1:BoardData {
949: 1:  'description': [
949: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
949: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
949: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
949: 1:  ],
949: 1:  'expectedAnswer': '231:3*7*11:FizzMuzzDuzz',
949: 1:  'history': [
949: 1:    {
949: 1:      'answer': '15:3*5:FizzBuzz',
949: 1:      'question': '1',
949: 1:      'valid': true
949: 1:    },
949: 1:    {
949: 1:      'answer': '21:3*7:FizzMuzz',
949: 1:      'question': '2',
949: 1:      'valid': true
949: 1:    },
949: 1:    {
949: 1:      'answer': '33:3*11:FizzDuzz',
949: 1:      'question': '3',
949: 1:      'valid': true
949: 1:    },
949: 1:    {
949: 1:      'answer': '35:5*7:BuzzMuzz',
949: 1:      'question': '4',
949: 1:      'valid': true
949: 1:    },
949: 1:    {
949: 1:      'answer': '39:3*13:FizzCazz',
949: 1:      'question': '5',
949: 1:      'valid': true
949: 1:    },
949: 1:    {
949: 1:      'answer': '55:5*11:BuzzDuzz',
949: 1:      'question': '6',
949: 1:      'valid': true
949: 1:    },
949: 1:    {
949: 1:      'answer': '65:5*13:BuzzCazz',
949: 1:      'question': '7',
949: 1:      'valid': true
949: 1:    },
949: 1:    {
949: 1:      'answer': '77:7*11:MuzzDuzz',
949: 1:      'question': '8',
949: 1:      'valid': true
949: 1:    },
949: 1:    {
949: 1:      'answer': '91:7*13:MuzzCazz',
949: 1:      'question': '9',
949: 1:      'valid': true
949: 1:    },
949: 1:    {
949: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
949: 1:      'question': '10',
949: 1:      'valid': true
949: 1:    },
949: 1:    {
949: 1:      'answer': '143:11*13:DuzzCazz',
949: 1:      'question': '11',
949: 1:      'valid': true
949: 1:    },
949: 1:    {
949: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
949: 1:      'question': '12',
949: 1:      'valid': true
949: 1:    },
949: 1:    {
949: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
949: 1:      'question': '13',
949: 1:      'valid': true
949: 1:    }
949: 1:  ],
949: 1:  'info': [
949: 1:    '✅f(1) = 15:3*5:FizzBuzz',
949: 1:    '✅f(2) = 21:3*7:FizzMuzz',
949: 1:    '✅f(3) = 33:3*11:FizzDuzz',
949: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
949: 1:    '✅f(5) = 39:3*13:FizzCazz',
949: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
949: 1:    '✅f(7) = 65:5*13:BuzzCazz',
949: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
949: 1:    '✅f(9) = 91:7*13:MuzzCazz',
949: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
949: 1:    '✅f(11) = 143:11*13:DuzzCazz',
949: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
949: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
949: 1:    '❌f(14) = ??? != 231:3*7*11:FizzMuzzDuzz'
949: 1:  ],
949: 1:  'level': 34,
949: 1:  'nextQuestion': '14',
949: 1:  'questions': [
949: 1:    '1',
949: 1:    '2',
949: 1:    '3',
949: 1:    '4',
949: 1:    '5',
949: 1:    '6',
949: 1:    '7',
949: 1:    '8',
949: 1:    '9',
949: 1:    '10',
949: 1:    '11',
949: 1:    '12',
949: 1:    '13',
949: 1:    '14'
949: 1:  ]
949: 1:}
949: 1:Scores: 118872
949: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz', '231:3*7*11:FizzMuzzDuzz']')
949: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
950: 1:BoardData {
950: 1:  'description': [
950: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
950: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
950: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
950: 1:  ],
950: 1:  'expectedAnswer': '273:3*7*13:FizzMuzzCazz',
950: 1:  'history': [
950: 1:    {
950: 1:      'answer': '15:3*5:FizzBuzz',
950: 1:      'question': '1',
950: 1:      'valid': true
950: 1:    },
950: 1:    {
950: 1:      'answer': '21:3*7:FizzMuzz',
950: 1:      'question': '2',
950: 1:      'valid': true
950: 1:    },
950: 1:    {
950: 1:      'answer': '33:3*11:FizzDuzz',
950: 1:      'question': '3',
950: 1:      'valid': true
950: 1:    },
950: 1:    {
950: 1:      'answer': '35:5*7:BuzzMuzz',
950: 1:      'question': '4',
950: 1:      'valid': true
950: 1:    },
950: 1:    {
950: 1:      'answer': '39:3*13:FizzCazz',
950: 1:      'question': '5',
950: 1:      'valid': true
950: 1:    },
950: 1:    {
950: 1:      'answer': '55:5*11:BuzzDuzz',
950: 1:      'question': '6',
950: 1:      'valid': true
950: 1:    },
950: 1:    {
950: 1:      'answer': '65:5*13:BuzzCazz',
950: 1:      'question': '7',
950: 1:      'valid': true
950: 1:    },
950: 1:    {
950: 1:      'answer': '77:7*11:MuzzDuzz',
950: 1:      'question': '8',
950: 1:      'valid': true
950: 1:    },
950: 1:    {
950: 1:      'answer': '91:7*13:MuzzCazz',
950: 1:      'question': '9',
950: 1:      'valid': true
950: 1:    },
950: 1:    {
950: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
950: 1:      'question': '10',
950: 1:      'valid': true
950: 1:    },
950: 1:    {
950: 1:      'answer': '143:11*13:DuzzCazz',
950: 1:      'question': '11',
950: 1:      'valid': true
950: 1:    },
950: 1:    {
950: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
950: 1:      'question': '12',
950: 1:      'valid': true
950: 1:    },
950: 1:    {
950: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
950: 1:      'question': '13',
950: 1:      'valid': true
950: 1:    },
950: 1:    {
950: 1:      'answer': '231:3*7*11:FizzMuzzDuzz',
950: 1:      'question': '14',
950: 1:      'valid': true
950: 1:    }
950: 1:  ],
950: 1:  'info': [
950: 1:    '✅f(1) = 15:3*5:FizzBuzz',
950: 1:    '✅f(2) = 21:3*7:FizzMuzz',
950: 1:    '✅f(3) = 33:3*11:FizzDuzz',
950: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
950: 1:    '✅f(5) = 39:3*13:FizzCazz',
950: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
950: 1:    '✅f(7) = 65:5*13:BuzzCazz',
950: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
950: 1:    '✅f(9) = 91:7*13:MuzzCazz',
950: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
950: 1:    '✅f(11) = 143:11*13:DuzzCazz',
950: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
950: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
950: 1:    '✅f(14) = 231:3*7*11:FizzMuzzDuzz',
950: 1:    '❌f(15) = ??? != 273:3*7*13:FizzMuzzCazz'
950: 1:  ],
950: 1:  'level': 34,
950: 1:  'nextQuestion': '15',
950: 1:  'questions': [
950: 1:    '1',
950: 1:    '2',
950: 1:    '3',
950: 1:    '4',
950: 1:    '5',
950: 1:    '6',
950: 1:    '7',
950: 1:    '8',
950: 1:    '9',
950: 1:    '10',
950: 1:    '11',
950: 1:    '12',
950: 1:    '13',
950: 1:    '14',
950: 1:    '15'
950: 1:  ]
950: 1:}
950: 1:Scores: 118893
950: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz', '231:3*7*11:FizzMuzzDuzz', '273:3*7*13:FizzMuzzCazz']')
950: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
951: 1:BoardData {
951: 1:  'description': [
951: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
951: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
951: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
951: 1:  ],
951: 1:  'expectedAnswer': '385:5*7*11:BuzzMuzzDuzz',
951: 1:  'history': [
951: 1:    {
951: 1:      'answer': '15:3*5:FizzBuzz',
951: 1:      'question': '1',
951: 1:      'valid': true
951: 1:    },
951: 1:    {
951: 1:      'answer': '21:3*7:FizzMuzz',
951: 1:      'question': '2',
951: 1:      'valid': true
951: 1:    },
951: 1:    {
951: 1:      'answer': '33:3*11:FizzDuzz',
951: 1:      'question': '3',
951: 1:      'valid': true
951: 1:    },
951: 1:    {
951: 1:      'answer': '35:5*7:BuzzMuzz',
951: 1:      'question': '4',
951: 1:      'valid': true
951: 1:    },
951: 1:    {
951: 1:      'answer': '39:3*13:FizzCazz',
951: 1:      'question': '5',
951: 1:      'valid': true
951: 1:    },
951: 1:    {
951: 1:      'answer': '55:5*11:BuzzDuzz',
951: 1:      'question': '6',
951: 1:      'valid': true
951: 1:    },
951: 1:    {
951: 1:      'answer': '65:5*13:BuzzCazz',
951: 1:      'question': '7',
951: 1:      'valid': true
951: 1:    },
951: 1:    {
951: 1:      'answer': '77:7*11:MuzzDuzz',
951: 1:      'question': '8',
951: 1:      'valid': true
951: 1:    },
951: 1:    {
951: 1:      'answer': '91:7*13:MuzzCazz',
951: 1:      'question': '9',
951: 1:      'valid': true
951: 1:    },
951: 1:    {
951: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
951: 1:      'question': '10',
951: 1:      'valid': true
951: 1:    },
951: 1:    {
951: 1:      'answer': '143:11*13:DuzzCazz',
951: 1:      'question': '11',
951: 1:      'valid': true
951: 1:    },
951: 1:    {
951: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
951: 1:      'question': '12',
951: 1:      'valid': true
951: 1:    },
951: 1:    {
951: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
951: 1:      'question': '13',
951: 1:      'valid': true
951: 1:    },
951: 1:    {
951: 1:      'answer': '231:3*7*11:FizzMuzzDuzz',
951: 1:      'question': '14',
951: 1:      'valid': true
951: 1:    },
951: 1:    {
951: 1:      'answer': '273:3*7*13:FizzMuzzCazz',
951: 1:      'question': '15',
951: 1:      'valid': true
951: 1:    }
951: 1:  ],
951: 1:  'info': [
951: 1:    '✅f(1) = 15:3*5:FizzBuzz',
951: 1:    '✅f(2) = 21:3*7:FizzMuzz',
951: 1:    '✅f(3) = 33:3*11:FizzDuzz',
951: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
951: 1:    '✅f(5) = 39:3*13:FizzCazz',
951: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
951: 1:    '✅f(7) = 65:5*13:BuzzCazz',
951: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
951: 1:    '✅f(9) = 91:7*13:MuzzCazz',
951: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
951: 1:    '✅f(11) = 143:11*13:DuzzCazz',
951: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
951: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
951: 1:    '✅f(14) = 231:3*7*11:FizzMuzzDuzz',
951: 1:    '✅f(15) = 273:3*7*13:FizzMuzzCazz',
951: 1:    '❌f(16) = ??? != 385:5*7*11:BuzzMuzzDuzz'
951: 1:  ],
951: 1:  'level': 34,
951: 1:  'nextQuestion': '16',
951: 1:  'questions': [
951: 1:    '1',
951: 1:    '2',
951: 1:    '3',
951: 1:    '4',
951: 1:    '5',
951: 1:    '6',
951: 1:    '7',
951: 1:    '8',
951: 1:    '9',
951: 1:    '10',
951: 1:    '11',
951: 1:    '12',
951: 1:    '13',
951: 1:    '14',
951: 1:    '15',
951: 1:    '16'
951: 1:  ]
951: 1:}
951: 1:Scores: 118914
951: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz', '231:3*7*11:FizzMuzzDuzz', '273:3*7*13:FizzMuzzCazz', '385:5*7*11:BuzzMuzzDuzz']')
951: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
952: 1:BoardData {
952: 1:  'description': [
952: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
952: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
952: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
952: 1:  ],
952: 1:  'expectedAnswer': '429:3*11*13:FizzDuzzCazz',
952: 1:  'history': [
952: 1:    {
952: 1:      'answer': '15:3*5:FizzBuzz',
952: 1:      'question': '1',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '21:3*7:FizzMuzz',
952: 1:      'question': '2',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '33:3*11:FizzDuzz',
952: 1:      'question': '3',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '35:5*7:BuzzMuzz',
952: 1:      'question': '4',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '39:3*13:FizzCazz',
952: 1:      'question': '5',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '55:5*11:BuzzDuzz',
952: 1:      'question': '6',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '65:5*13:BuzzCazz',
952: 1:      'question': '7',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '77:7*11:MuzzDuzz',
952: 1:      'question': '8',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '91:7*13:MuzzCazz',
952: 1:      'question': '9',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
952: 1:      'question': '10',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '143:11*13:DuzzCazz',
952: 1:      'question': '11',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
952: 1:      'question': '12',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
952: 1:      'question': '13',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '231:3*7*11:FizzMuzzDuzz',
952: 1:      'question': '14',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '273:3*7*13:FizzMuzzCazz',
952: 1:      'question': '15',
952: 1:      'valid': true
952: 1:    },
952: 1:    {
952: 1:      'answer': '385:5*7*11:BuzzMuzzDuzz',
952: 1:      'question': '16',
952: 1:      'valid': true
952: 1:    }
952: 1:  ],
952: 1:  'info': [
952: 1:    '✅f(1) = 15:3*5:FizzBuzz',
952: 1:    '✅f(2) = 21:3*7:FizzMuzz',
952: 1:    '✅f(3) = 33:3*11:FizzDuzz',
952: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
952: 1:    '✅f(5) = 39:3*13:FizzCazz',
952: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
952: 1:    '✅f(7) = 65:5*13:BuzzCazz',
952: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
952: 1:    '✅f(9) = 91:7*13:MuzzCazz',
952: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
952: 1:    '✅f(11) = 143:11*13:DuzzCazz',
952: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
952: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
952: 1:    '✅f(14) = 231:3*7*11:FizzMuzzDuzz',
952: 1:    '✅f(15) = 273:3*7*13:FizzMuzzCazz',
952: 1:    '✅f(16) = 385:5*7*11:BuzzMuzzDuzz',
952: 1:    '❌f(17) = ??? != 429:3*11*13:FizzDuzzCazz'
952: 1:  ],
952: 1:  'level': 34,
952: 1:  'nextQuestion': '17',
952: 1:  'questions': [
952: 1:    '1',
952: 1:    '2',
952: 1:    '3',
952: 1:    '4',
952: 1:    '5',
952: 1:    '6',
952: 1:    '7',
952: 1:    '8',
952: 1:    '9',
952: 1:    '10',
952: 1:    '11',
952: 1:    '12',
952: 1:    '13',
952: 1:    '14',
952: 1:    '15',
952: 1:    '16',
952: 1:    '17'
952: 1:  ]
952: 1:}
952: 1:Scores: 118935
952: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz', '231:3*7*11:FizzMuzzDuzz', '273:3*7*13:FizzMuzzCazz', '385:5*7*11:BuzzMuzzDuzz', '429:3*11*13:FizzDuzzCazz']')
952: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
953: 1:BoardData {
953: 1:  'description': [
953: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
953: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
953: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
953: 1:  ],
953: 1:  'expectedAnswer': '455:5*7*13:BuzzMuzzCazz',
953: 1:  'history': [
953: 1:    {
953: 1:      'answer': '15:3*5:FizzBuzz',
953: 1:      'question': '1',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '21:3*7:FizzMuzz',
953: 1:      'question': '2',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '33:3*11:FizzDuzz',
953: 1:      'question': '3',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '35:5*7:BuzzMuzz',
953: 1:      'question': '4',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '39:3*13:FizzCazz',
953: 1:      'question': '5',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '55:5*11:BuzzDuzz',
953: 1:      'question': '6',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '65:5*13:BuzzCazz',
953: 1:      'question': '7',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '77:7*11:MuzzDuzz',
953: 1:      'question': '8',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '91:7*13:MuzzCazz',
953: 1:      'question': '9',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
953: 1:      'question': '10',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '143:11*13:DuzzCazz',
953: 1:      'question': '11',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
953: 1:      'question': '12',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
953: 1:      'question': '13',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '231:3*7*11:FizzMuzzDuzz',
953: 1:      'question': '14',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '273:3*7*13:FizzMuzzCazz',
953: 1:      'question': '15',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '385:5*7*11:BuzzMuzzDuzz',
953: 1:      'question': '16',
953: 1:      'valid': true
953: 1:    },
953: 1:    {
953: 1:      'answer': '429:3*11*13:FizzDuzzCazz',
953: 1:      'question': '17',
953: 1:      'valid': true
953: 1:    }
953: 1:  ],
953: 1:  'info': [
953: 1:    '✅f(1) = 15:3*5:FizzBuzz',
953: 1:    '✅f(2) = 21:3*7:FizzMuzz',
953: 1:    '✅f(3) = 33:3*11:FizzDuzz',
953: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
953: 1:    '✅f(5) = 39:3*13:FizzCazz',
953: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
953: 1:    '✅f(7) = 65:5*13:BuzzCazz',
953: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
953: 1:    '✅f(9) = 91:7*13:MuzzCazz',
953: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
953: 1:    '✅f(11) = 143:11*13:DuzzCazz',
953: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
953: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
953: 1:    '✅f(14) = 231:3*7*11:FizzMuzzDuzz',
953: 1:    '✅f(15) = 273:3*7*13:FizzMuzzCazz',
953: 1:    '✅f(16) = 385:5*7*11:BuzzMuzzDuzz',
953: 1:    '✅f(17) = 429:3*11*13:FizzDuzzCazz',
953: 1:    '❌f(18) = ??? != 455:5*7*13:BuzzMuzzCazz'
953: 1:  ],
953: 1:  'level': 34,
953: 1:  'nextQuestion': '18',
953: 1:  'questions': [
953: 1:    '1',
953: 1:    '2',
953: 1:    '3',
953: 1:    '4',
953: 1:    '5',
953: 1:    '6',
953: 1:    '7',
953: 1:    '8',
953: 1:    '9',
953: 1:    '10',
953: 1:    '11',
953: 1:    '12',
953: 1:    '13',
953: 1:    '14',
953: 1:    '15',
953: 1:    '16',
953: 1:    '17',
953: 1:    '18'
953: 1:  ]
953: 1:}
953: 1:Scores: 118956
953: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz', '231:3*7*11:FizzMuzzDuzz', '273:3*7*13:FizzMuzzCazz', '385:5*7*11:BuzzMuzzDuzz', '429:3*11*13:FizzDuzzCazz', '455:5*7*13:BuzzMuzzCazz']')
953: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
954: 1:BoardData {
954: 1:  'description': [
954: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
954: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
954: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
954: 1:  ],
954: 1:  'expectedAnswer': '715:5*11*13:BuzzDuzzCazz',
954: 1:  'history': [
954: 1:    {
954: 1:      'answer': '15:3*5:FizzBuzz',
954: 1:      'question': '1',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '21:3*7:FizzMuzz',
954: 1:      'question': '2',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '33:3*11:FizzDuzz',
954: 1:      'question': '3',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '35:5*7:BuzzMuzz',
954: 1:      'question': '4',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '39:3*13:FizzCazz',
954: 1:      'question': '5',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '55:5*11:BuzzDuzz',
954: 1:      'question': '6',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '65:5*13:BuzzCazz',
954: 1:      'question': '7',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '77:7*11:MuzzDuzz',
954: 1:      'question': '8',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '91:7*13:MuzzCazz',
954: 1:      'question': '9',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
954: 1:      'question': '10',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '143:11*13:DuzzCazz',
954: 1:      'question': '11',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
954: 1:      'question': '12',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
954: 1:      'question': '13',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '231:3*7*11:FizzMuzzDuzz',
954: 1:      'question': '14',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '273:3*7*13:FizzMuzzCazz',
954: 1:      'question': '15',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '385:5*7*11:BuzzMuzzDuzz',
954: 1:      'question': '16',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '429:3*11*13:FizzDuzzCazz',
954: 1:      'question': '17',
954: 1:      'valid': true
954: 1:    },
954: 1:    {
954: 1:      'answer': '455:5*7*13:BuzzMuzzCazz',
954: 1:      'question': '18',
954: 1:      'valid': true
954: 1:    }
954: 1:  ],
954: 1:  'info': [
954: 1:    '✅f(1) = 15:3*5:FizzBuzz',
954: 1:    '✅f(2) = 21:3*7:FizzMuzz',
954: 1:    '✅f(3) = 33:3*11:FizzDuzz',
954: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
954: 1:    '✅f(5) = 39:3*13:FizzCazz',
954: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
954: 1:    '✅f(7) = 65:5*13:BuzzCazz',
954: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
954: 1:    '✅f(9) = 91:7*13:MuzzCazz',
954: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
954: 1:    '✅f(11) = 143:11*13:DuzzCazz',
954: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
954: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
954: 1:    '✅f(14) = 231:3*7*11:FizzMuzzDuzz',
954: 1:    '✅f(15) = 273:3*7*13:FizzMuzzCazz',
954: 1:    '✅f(16) = 385:5*7*11:BuzzMuzzDuzz',
954: 1:    '✅f(17) = 429:3*11*13:FizzDuzzCazz',
954: 1:    '✅f(18) = 455:5*7*13:BuzzMuzzCazz',
954: 1:    '❌f(19) = ??? != 715:5*11*13:BuzzDuzzCazz'
954: 1:  ],
954: 1:  'level': 34,
954: 1:  'nextQuestion': '19',
954: 1:  'questions': [
954: 1:    '1',
954: 1:    '2',
954: 1:    '3',
954: 1:    '4',
954: 1:    '5',
954: 1:    '6',
954: 1:    '7',
954: 1:    '8',
954: 1:    '9',
954: 1:    '10',
954: 1:    '11',
954: 1:    '12',
954: 1:    '13',
954: 1:    '14',
954: 1:    '15',
954: 1:    '16',
954: 1:    '17',
954: 1:    '18',
954: 1:    '19'
954: 1:  ]
954: 1:}
954: 1:Scores: 118977
954: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz', '231:3*7*11:FizzMuzzDuzz', '273:3*7*13:FizzMuzzCazz', '385:5*7*11:BuzzMuzzDuzz', '429:3*11*13:FizzDuzzCazz', '455:5*7*13:BuzzMuzzCazz', '715:5*11*13:BuzzDuzzCazz']')
954: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
955: 1:BoardData {
955: 1:  'description': [
955: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
955: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
955: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
955: 1:  ],
955: 1:  'expectedAnswer': '1001:7*11*13:MuzzDuzzCazz',
955: 1:  'history': [
955: 1:    {
955: 1:      'answer': '15:3*5:FizzBuzz',
955: 1:      'question': '1',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '21:3*7:FizzMuzz',
955: 1:      'question': '2',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '33:3*11:FizzDuzz',
955: 1:      'question': '3',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '35:5*7:BuzzMuzz',
955: 1:      'question': '4',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '39:3*13:FizzCazz',
955: 1:      'question': '5',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '55:5*11:BuzzDuzz',
955: 1:      'question': '6',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '65:5*13:BuzzCazz',
955: 1:      'question': '7',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '77:7*11:MuzzDuzz',
955: 1:      'question': '8',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '91:7*13:MuzzCazz',
955: 1:      'question': '9',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
955: 1:      'question': '10',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '143:11*13:DuzzCazz',
955: 1:      'question': '11',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
955: 1:      'question': '12',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
955: 1:      'question': '13',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '231:3*7*11:FizzMuzzDuzz',
955: 1:      'question': '14',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '273:3*7*13:FizzMuzzCazz',
955: 1:      'question': '15',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '385:5*7*11:BuzzMuzzDuzz',
955: 1:      'question': '16',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '429:3*11*13:FizzDuzzCazz',
955: 1:      'question': '17',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '455:5*7*13:BuzzMuzzCazz',
955: 1:      'question': '18',
955: 1:      'valid': true
955: 1:    },
955: 1:    {
955: 1:      'answer': '715:5*11*13:BuzzDuzzCazz',
955: 1:      'question': '19',
955: 1:      'valid': true
955: 1:    }
955: 1:  ],
955: 1:  'info': [
955: 1:    '✅f(1) = 15:3*5:FizzBuzz',
955: 1:    '✅f(2) = 21:3*7:FizzMuzz',
955: 1:    '✅f(3) = 33:3*11:FizzDuzz',
955: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
955: 1:    '✅f(5) = 39:3*13:FizzCazz',
955: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
955: 1:    '✅f(7) = 65:5*13:BuzzCazz',
955: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
955: 1:    '✅f(9) = 91:7*13:MuzzCazz',
955: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
955: 1:    '✅f(11) = 143:11*13:DuzzCazz',
955: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
955: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
955: 1:    '✅f(14) = 231:3*7*11:FizzMuzzDuzz',
955: 1:    '✅f(15) = 273:3*7*13:FizzMuzzCazz',
955: 1:    '✅f(16) = 385:5*7*11:BuzzMuzzDuzz',
955: 1:    '✅f(17) = 429:3*11*13:FizzDuzzCazz',
955: 1:    '✅f(18) = 455:5*7*13:BuzzMuzzCazz',
955: 1:    '✅f(19) = 715:5*11*13:BuzzDuzzCazz',
955: 1:    '❌f(20) = ??? != 1001:7*11*13:MuzzDuzzCazz'
955: 1:  ],
955: 1:  'level': 34,
955: 1:  'nextQuestion': '20',
955: 1:  'questions': [
955: 1:    '1',
955: 1:    '2',
955: 1:    '3',
955: 1:    '4',
955: 1:    '5',
955: 1:    '6',
955: 1:    '7',
955: 1:    '8',
955: 1:    '9',
955: 1:    '10',
955: 1:    '11',
955: 1:    '12',
955: 1:    '13',
955: 1:    '14',
955: 1:    '15',
955: 1:    '16',
955: 1:    '17',
955: 1:    '18',
955: 1:    '19',
955: 1:    '20'
955: 1:  ]
955: 1:}
955: 1:Scores: 118998
955: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz', '231:3*7*11:FizzMuzzDuzz', '273:3*7*13:FizzMuzzCazz', '385:5*7*11:BuzzMuzzDuzz', '429:3*11*13:FizzDuzzCazz', '455:5*7*13:BuzzMuzzCazz', '715:5*11*13:BuzzDuzzCazz', '1001:7*11*13:MuzzDuzzCazz']')
955: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
956: 1:BoardData {
956: 1:  'description': [
956: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
956: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
956: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
956: 1:  ],
956: 1:  'expectedAnswer': '1155:3*5*7*11:FizzBuzzMuzzDuzz',
956: 1:  'history': [
956: 1:    {
956: 1:      'answer': '15:3*5:FizzBuzz',
956: 1:      'question': '1',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '21:3*7:FizzMuzz',
956: 1:      'question': '2',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '33:3*11:FizzDuzz',
956: 1:      'question': '3',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '35:5*7:BuzzMuzz',
956: 1:      'question': '4',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '39:3*13:FizzCazz',
956: 1:      'question': '5',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '55:5*11:BuzzDuzz',
956: 1:      'question': '6',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '65:5*13:BuzzCazz',
956: 1:      'question': '7',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '77:7*11:MuzzDuzz',
956: 1:      'question': '8',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '91:7*13:MuzzCazz',
956: 1:      'question': '9',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
956: 1:      'question': '10',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '143:11*13:DuzzCazz',
956: 1:      'question': '11',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
956: 1:      'question': '12',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
956: 1:      'question': '13',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '231:3*7*11:FizzMuzzDuzz',
956: 1:      'question': '14',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '273:3*7*13:FizzMuzzCazz',
956: 1:      'question': '15',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '385:5*7*11:BuzzMuzzDuzz',
956: 1:      'question': '16',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '429:3*11*13:FizzDuzzCazz',
956: 1:      'question': '17',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '455:5*7*13:BuzzMuzzCazz',
956: 1:      'question': '18',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '715:5*11*13:BuzzDuzzCazz',
956: 1:      'question': '19',
956: 1:      'valid': true
956: 1:    },
956: 1:    {
956: 1:      'answer': '1001:7*11*13:MuzzDuzzCazz',
956: 1:      'question': '20',
956: 1:      'valid': true
956: 1:    }
956: 1:  ],
956: 1:  'info': [
956: 1:    '✅f(1) = 15:3*5:FizzBuzz',
956: 1:    '✅f(2) = 21:3*7:FizzMuzz',
956: 1:    '✅f(3) = 33:3*11:FizzDuzz',
956: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
956: 1:    '✅f(5) = 39:3*13:FizzCazz',
956: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
956: 1:    '✅f(7) = 65:5*13:BuzzCazz',
956: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
956: 1:    '✅f(9) = 91:7*13:MuzzCazz',
956: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
956: 1:    '✅f(11) = 143:11*13:DuzzCazz',
956: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
956: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
956: 1:    '✅f(14) = 231:3*7*11:FizzMuzzDuzz',
956: 1:    '✅f(15) = 273:3*7*13:FizzMuzzCazz',
956: 1:    '✅f(16) = 385:5*7*11:BuzzMuzzDuzz',
956: 1:    '✅f(17) = 429:3*11*13:FizzDuzzCazz',
956: 1:    '✅f(18) = 455:5*7*13:BuzzMuzzCazz',
956: 1:    '✅f(19) = 715:5*11*13:BuzzDuzzCazz',
956: 1:    '✅f(20) = 1001:7*11*13:MuzzDuzzCazz',
956: 1:    '❌f(21) = ??? != 1155:3*5*7*11:FizzBuzzMuzzDuzz'
956: 1:  ],
956: 1:  'level': 34,
956: 1:  'nextQuestion': '21',
956: 1:  'questions': [
956: 1:    '1',
956: 1:    '2',
956: 1:    '3',
956: 1:    '4',
956: 1:    '5',
956: 1:    '6',
956: 1:    '7',
956: 1:    '8',
956: 1:    '9',
956: 1:    '10',
956: 1:    '11',
956: 1:    '12',
956: 1:    '13',
956: 1:    '14',
956: 1:    '15',
956: 1:    '16',
956: 1:    '17',
956: 1:    '18',
956: 1:    '19',
956: 1:    '20',
956: 1:    '21'
956: 1:  ]
956: 1:}
956: 1:Scores: 119019
956: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz', '231:3*7*11:FizzMuzzDuzz', '273:3*7*13:FizzMuzzCazz', '385:5*7*11:BuzzMuzzDuzz', '429:3*11*13:FizzDuzzCazz', '455:5*7*13:BuzzMuzzCazz', '715:5*11*13:BuzzDuzzCazz', '1001:7*11*13:MuzzDuzzCazz', '1155:3*5*7*11:FizzBuzzMuzzDuzz']')
956: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
957: 1:BoardData {
957: 1:  'description': [
957: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
957: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
957: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
957: 1:  ],
957: 1:  'expectedAnswer': '1365:3*5*7*13:FizzBuzzMuzzCazz',
957: 1:  'history': [
957: 1:    {
957: 1:      'answer': '15:3*5:FizzBuzz',
957: 1:      'question': '1',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '21:3*7:FizzMuzz',
957: 1:      'question': '2',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '33:3*11:FizzDuzz',
957: 1:      'question': '3',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '35:5*7:BuzzMuzz',
957: 1:      'question': '4',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '39:3*13:FizzCazz',
957: 1:      'question': '5',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '55:5*11:BuzzDuzz',
957: 1:      'question': '6',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '65:5*13:BuzzCazz',
957: 1:      'question': '7',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '77:7*11:MuzzDuzz',
957: 1:      'question': '8',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '91:7*13:MuzzCazz',
957: 1:      'question': '9',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
957: 1:      'question': '10',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '143:11*13:DuzzCazz',
957: 1:      'question': '11',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
957: 1:      'question': '12',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
957: 1:      'question': '13',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '231:3*7*11:FizzMuzzDuzz',
957: 1:      'question': '14',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '273:3*7*13:FizzMuzzCazz',
957: 1:      'question': '15',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '385:5*7*11:BuzzMuzzDuzz',
957: 1:      'question': '16',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '429:3*11*13:FizzDuzzCazz',
957: 1:      'question': '17',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '455:5*7*13:BuzzMuzzCazz',
957: 1:      'question': '18',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '715:5*11*13:BuzzDuzzCazz',
957: 1:      'question': '19',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '1001:7*11*13:MuzzDuzzCazz',
957: 1:      'question': '20',
957: 1:      'valid': true
957: 1:    },
957: 1:    {
957: 1:      'answer': '1155:3*5*7*11:FizzBuzzMuzzDuzz',
957: 1:      'question': '21',
957: 1:      'valid': true
957: 1:    }
957: 1:  ],
957: 1:  'info': [
957: 1:    '✅f(1) = 15:3*5:FizzBuzz',
957: 1:    '✅f(2) = 21:3*7:FizzMuzz',
957: 1:    '✅f(3) = 33:3*11:FizzDuzz',
957: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
957: 1:    '✅f(5) = 39:3*13:FizzCazz',
957: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
957: 1:    '✅f(7) = 65:5*13:BuzzCazz',
957: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
957: 1:    '✅f(9) = 91:7*13:MuzzCazz',
957: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
957: 1:    '✅f(11) = 143:11*13:DuzzCazz',
957: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
957: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
957: 1:    '✅f(14) = 231:3*7*11:FizzMuzzDuzz',
957: 1:    '✅f(15) = 273:3*7*13:FizzMuzzCazz',
957: 1:    '✅f(16) = 385:5*7*11:BuzzMuzzDuzz',
957: 1:    '✅f(17) = 429:3*11*13:FizzDuzzCazz',
957: 1:    '✅f(18) = 455:5*7*13:BuzzMuzzCazz',
957: 1:    '✅f(19) = 715:5*11*13:BuzzDuzzCazz',
957: 1:    '✅f(20) = 1001:7*11*13:MuzzDuzzCazz',
957: 1:    '✅f(21) = 1155:3*5*7*11:FizzBuzzMuzzDuzz',
957: 1:    '❌f(22) = ??? != 1365:3*5*7*13:FizzBuzzMuzzCazz'
957: 1:  ],
957: 1:  'level': 34,
957: 1:  'nextQuestion': '22',
957: 1:  'questions': [
957: 1:    '1',
957: 1:    '2',
957: 1:    '3',
957: 1:    '4',
957: 1:    '5',
957: 1:    '6',
957: 1:    '7',
957: 1:    '8',
957: 1:    '9',
957: 1:    '10',
957: 1:    '11',
957: 1:    '12',
957: 1:    '13',
957: 1:    '14',
957: 1:    '15',
957: 1:    '16',
957: 1:    '17',
957: 1:    '18',
957: 1:    '19',
957: 1:    '20',
957: 1:    '21',
957: 1:    '22'
957: 1:  ]
957: 1:}
957: 1:Scores: 119040
957: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz', '231:3*7*11:FizzMuzzDuzz', '273:3*7*13:FizzMuzzCazz', '385:5*7*11:BuzzMuzzDuzz', '429:3*11*13:FizzDuzzCazz', '455:5*7*13:BuzzMuzzCazz', '715:5*11*13:BuzzDuzzCazz', '1001:7*11*13:MuzzDuzzCazz', '1155:3*5*7*11:FizzBuzzMuzzDuzz', '1365:3*5*7*13:FizzBuzzMuzzCazz']')
957: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
958: 1:BoardData {
958: 1:  'description': [
958: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
958: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
958: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
958: 1:  ],
958: 1:  'expectedAnswer': '2145:3*5*11*13:FizzBuzzDuzzCazz',
958: 1:  'history': [
958: 1:    {
958: 1:      'answer': '15:3*5:FizzBuzz',
958: 1:      'question': '1',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '21:3*7:FizzMuzz',
958: 1:      'question': '2',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '33:3*11:FizzDuzz',
958: 1:      'question': '3',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '35:5*7:BuzzMuzz',
958: 1:      'question': '4',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '39:3*13:FizzCazz',
958: 1:      'question': '5',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '55:5*11:BuzzDuzz',
958: 1:      'question': '6',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '65:5*13:BuzzCazz',
958: 1:      'question': '7',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '77:7*11:MuzzDuzz',
958: 1:      'question': '8',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '91:7*13:MuzzCazz',
958: 1:      'question': '9',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
958: 1:      'question': '10',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '143:11*13:DuzzCazz',
958: 1:      'question': '11',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
958: 1:      'question': '12',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
958: 1:      'question': '13',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '231:3*7*11:FizzMuzzDuzz',
958: 1:      'question': '14',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '273:3*7*13:FizzMuzzCazz',
958: 1:      'question': '15',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '385:5*7*11:BuzzMuzzDuzz',
958: 1:      'question': '16',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '429:3*11*13:FizzDuzzCazz',
958: 1:      'question': '17',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '455:5*7*13:BuzzMuzzCazz',
958: 1:      'question': '18',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '715:5*11*13:BuzzDuzzCazz',
958: 1:      'question': '19',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '1001:7*11*13:MuzzDuzzCazz',
958: 1:      'question': '20',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '1155:3*5*7*11:FizzBuzzMuzzDuzz',
958: 1:      'question': '21',
958: 1:      'valid': true
958: 1:    },
958: 1:    {
958: 1:      'answer': '1365:3*5*7*13:FizzBuzzMuzzCazz',
958: 1:      'question': '22',
958: 1:      'valid': true
958: 1:    }
958: 1:  ],
958: 1:  'info': [
958: 1:    '✅f(1) = 15:3*5:FizzBuzz',
958: 1:    '✅f(2) = 21:3*7:FizzMuzz',
958: 1:    '✅f(3) = 33:3*11:FizzDuzz',
958: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
958: 1:    '✅f(5) = 39:3*13:FizzCazz',
958: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
958: 1:    '✅f(7) = 65:5*13:BuzzCazz',
958: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
958: 1:    '✅f(9) = 91:7*13:MuzzCazz',
958: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
958: 1:    '✅f(11) = 143:11*13:DuzzCazz',
958: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
958: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
958: 1:    '✅f(14) = 231:3*7*11:FizzMuzzDuzz',
958: 1:    '✅f(15) = 273:3*7*13:FizzMuzzCazz',
958: 1:    '✅f(16) = 385:5*7*11:BuzzMuzzDuzz',
958: 1:    '✅f(17) = 429:3*11*13:FizzDuzzCazz',
958: 1:    '✅f(18) = 455:5*7*13:BuzzMuzzCazz',
958: 1:    '✅f(19) = 715:5*11*13:BuzzDuzzCazz',
958: 1:    '✅f(20) = 1001:7*11*13:MuzzDuzzCazz',
958: 1:    '✅f(21) = 1155:3*5*7*11:FizzBuzzMuzzDuzz',
958: 1:    '✅f(22) = 1365:3*5*7*13:FizzBuzzMuzzCazz',
958: 1:    '❌f(23) = ??? != 2145:3*5*11*13:FizzBuzzDuzzCazz'
958: 1:  ],
958: 1:  'level': 34,
958: 1:  'nextQuestion': '23',
958: 1:  'questions': [
958: 1:    '1',
958: 1:    '2',
958: 1:    '3',
958: 1:    '4',
958: 1:    '5',
958: 1:    '6',
958: 1:    '7',
958: 1:    '8',
958: 1:    '9',
958: 1:    '10',
958: 1:    '11',
958: 1:    '12',
958: 1:    '13',
958: 1:    '14',
958: 1:    '15',
958: 1:    '16',
958: 1:    '17',
958: 1:    '18',
958: 1:    '19',
958: 1:    '20',
958: 1:    '21',
958: 1:    '22',
958: 1:    '23'
958: 1:  ]
958: 1:}
958: 1:Scores: 119061
958: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz', '231:3*7*11:FizzMuzzDuzz', '273:3*7*13:FizzMuzzCazz', '385:5*7*11:BuzzMuzzDuzz', '429:3*11*13:FizzDuzzCazz', '455:5*7*13:BuzzMuzzCazz', '715:5*11*13:BuzzDuzzCazz', '1001:7*11*13:MuzzDuzzCazz', '1155:3*5*7*11:FizzBuzzMuzzDuzz', '1365:3*5*7*13:FizzBuzzMuzzCazz', '2145:3*5*11*13:FizzBuzzDuzzCazz']')
958: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
959: 1:BoardData {
959: 1:  'description': [
959: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
959: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
959: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
959: 1:  ],
959: 1:  'expectedAnswer': '3003:3*7*11*13:FizzMuzzDuzzCazz',
959: 1:  'history': [
959: 1:    {
959: 1:      'answer': '15:3*5:FizzBuzz',
959: 1:      'question': '1',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '21:3*7:FizzMuzz',
959: 1:      'question': '2',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '33:3*11:FizzDuzz',
959: 1:      'question': '3',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '35:5*7:BuzzMuzz',
959: 1:      'question': '4',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '39:3*13:FizzCazz',
959: 1:      'question': '5',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '55:5*11:BuzzDuzz',
959: 1:      'question': '6',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '65:5*13:BuzzCazz',
959: 1:      'question': '7',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '77:7*11:MuzzDuzz',
959: 1:      'question': '8',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '91:7*13:MuzzCazz',
959: 1:      'question': '9',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
959: 1:      'question': '10',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '143:11*13:DuzzCazz',
959: 1:      'question': '11',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
959: 1:      'question': '12',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
959: 1:      'question': '13',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '231:3*7*11:FizzMuzzDuzz',
959: 1:      'question': '14',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '273:3*7*13:FizzMuzzCazz',
959: 1:      'question': '15',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '385:5*7*11:BuzzMuzzDuzz',
959: 1:      'question': '16',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '429:3*11*13:FizzDuzzCazz',
959: 1:      'question': '17',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '455:5*7*13:BuzzMuzzCazz',
959: 1:      'question': '18',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '715:5*11*13:BuzzDuzzCazz',
959: 1:      'question': '19',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '1001:7*11*13:MuzzDuzzCazz',
959: 1:      'question': '20',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '1155:3*5*7*11:FizzBuzzMuzzDuzz',
959: 1:      'question': '21',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '1365:3*5*7*13:FizzBuzzMuzzCazz',
959: 1:      'question': '22',
959: 1:      'valid': true
959: 1:    },
959: 1:    {
959: 1:      'answer': '2145:3*5*11*13:FizzBuzzDuzzCazz',
959: 1:      'question': '23',
959: 1:      'valid': true
959: 1:    }
959: 1:  ],
959: 1:  'info': [
959: 1:    '✅f(1) = 15:3*5:FizzBuzz',
959: 1:    '✅f(2) = 21:3*7:FizzMuzz',
959: 1:    '✅f(3) = 33:3*11:FizzDuzz',
959: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
959: 1:    '✅f(5) = 39:3*13:FizzCazz',
959: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
959: 1:    '✅f(7) = 65:5*13:BuzzCazz',
959: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
959: 1:    '✅f(9) = 91:7*13:MuzzCazz',
959: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
959: 1:    '✅f(11) = 143:11*13:DuzzCazz',
959: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
959: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
959: 1:    '✅f(14) = 231:3*7*11:FizzMuzzDuzz',
959: 1:    '✅f(15) = 273:3*7*13:FizzMuzzCazz',
959: 1:    '✅f(16) = 385:5*7*11:BuzzMuzzDuzz',
959: 1:    '✅f(17) = 429:3*11*13:FizzDuzzCazz',
959: 1:    '✅f(18) = 455:5*7*13:BuzzMuzzCazz',
959: 1:    '✅f(19) = 715:5*11*13:BuzzDuzzCazz',
959: 1:    '✅f(20) = 1001:7*11*13:MuzzDuzzCazz',
959: 1:    '✅f(21) = 1155:3*5*7*11:FizzBuzzMuzzDuzz',
959: 1:    '✅f(22) = 1365:3*5*7*13:FizzBuzzMuzzCazz',
959: 1:    '✅f(23) = 2145:3*5*11*13:FizzBuzzDuzzCazz',
959: 1:    '❌f(24) = ??? != 3003:3*7*11*13:FizzMuzzDuzzCazz'
959: 1:  ],
959: 1:  'level': 34,
959: 1:  'nextQuestion': '24',
959: 1:  'questions': [
959: 1:    '1',
959: 1:    '2',
959: 1:    '3',
959: 1:    '4',
959: 1:    '5',
959: 1:    '6',
959: 1:    '7',
959: 1:    '8',
959: 1:    '9',
959: 1:    '10',
959: 1:    '11',
959: 1:    '12',
959: 1:    '13',
959: 1:    '14',
959: 1:    '15',
959: 1:    '16',
959: 1:    '17',
959: 1:    '18',
959: 1:    '19',
959: 1:    '20',
959: 1:    '21',
959: 1:    '22',
959: 1:    '23',
959: 1:    '24'
959: 1:  ]
959: 1:}
959: 1:Scores: 119082
959: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz', '231:3*7*11:FizzMuzzDuzz', '273:3*7*13:FizzMuzzCazz', '385:5*7*11:BuzzMuzzDuzz', '429:3*11*13:FizzDuzzCazz', '455:5*7*13:BuzzMuzzCazz', '715:5*11*13:BuzzDuzzCazz', '1001:7*11*13:MuzzDuzzCazz', '1155:3*5*7*11:FizzBuzzMuzzDuzz', '1365:3*5*7*13:FizzBuzzMuzzCazz', '2145:3*5*11*13:FizzBuzzDuzzCazz', '3003:3*7*11*13:FizzMuzzDuzzCazz']')
959: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
960: 1:BoardData {
960: 1:  'description': [
960: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
960: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
960: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
960: 1:  ],
960: 1:  'expectedAnswer': '5005:5*7*11*13:BuzzMuzzDuzzCazz',
960: 1:  'history': [
960: 1:    {
960: 1:      'answer': '15:3*5:FizzBuzz',
960: 1:      'question': '1',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '21:3*7:FizzMuzz',
960: 1:      'question': '2',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '33:3*11:FizzDuzz',
960: 1:      'question': '3',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '35:5*7:BuzzMuzz',
960: 1:      'question': '4',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '39:3*13:FizzCazz',
960: 1:      'question': '5',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '55:5*11:BuzzDuzz',
960: 1:      'question': '6',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '65:5*13:BuzzCazz',
960: 1:      'question': '7',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '77:7*11:MuzzDuzz',
960: 1:      'question': '8',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '91:7*13:MuzzCazz',
960: 1:      'question': '9',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
960: 1:      'question': '10',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '143:11*13:DuzzCazz',
960: 1:      'question': '11',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
960: 1:      'question': '12',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
960: 1:      'question': '13',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '231:3*7*11:FizzMuzzDuzz',
960: 1:      'question': '14',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '273:3*7*13:FizzMuzzCazz',
960: 1:      'question': '15',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '385:5*7*11:BuzzMuzzDuzz',
960: 1:      'question': '16',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '429:3*11*13:FizzDuzzCazz',
960: 1:      'question': '17',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '455:5*7*13:BuzzMuzzCazz',
960: 1:      'question': '18',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '715:5*11*13:BuzzDuzzCazz',
960: 1:      'question': '19',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '1001:7*11*13:MuzzDuzzCazz',
960: 1:      'question': '20',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '1155:3*5*7*11:FizzBuzzMuzzDuzz',
960: 1:      'question': '21',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '1365:3*5*7*13:FizzBuzzMuzzCazz',
960: 1:      'question': '22',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '2145:3*5*11*13:FizzBuzzDuzzCazz',
960: 1:      'question': '23',
960: 1:      'valid': true
960: 1:    },
960: 1:    {
960: 1:      'answer': '3003:3*7*11*13:FizzMuzzDuzzCazz',
960: 1:      'question': '24',
960: 1:      'valid': true
960: 1:    }
960: 1:  ],
960: 1:  'info': [
960: 1:    '✅f(1) = 15:3*5:FizzBuzz',
960: 1:    '✅f(2) = 21:3*7:FizzMuzz',
960: 1:    '✅f(3) = 33:3*11:FizzDuzz',
960: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
960: 1:    '✅f(5) = 39:3*13:FizzCazz',
960: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
960: 1:    '✅f(7) = 65:5*13:BuzzCazz',
960: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
960: 1:    '✅f(9) = 91:7*13:MuzzCazz',
960: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
960: 1:    '✅f(11) = 143:11*13:DuzzCazz',
960: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
960: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
960: 1:    '✅f(14) = 231:3*7*11:FizzMuzzDuzz',
960: 1:    '✅f(15) = 273:3*7*13:FizzMuzzCazz',
960: 1:    '✅f(16) = 385:5*7*11:BuzzMuzzDuzz',
960: 1:    '✅f(17) = 429:3*11*13:FizzDuzzCazz',
960: 1:    '✅f(18) = 455:5*7*13:BuzzMuzzCazz',
960: 1:    '✅f(19) = 715:5*11*13:BuzzDuzzCazz',
960: 1:    '✅f(20) = 1001:7*11*13:MuzzDuzzCazz',
960: 1:    '✅f(21) = 1155:3*5*7*11:FizzBuzzMuzzDuzz',
960: 1:    '✅f(22) = 1365:3*5*7*13:FizzBuzzMuzzCazz',
960: 1:    '✅f(23) = 2145:3*5*11*13:FizzBuzzDuzzCazz',
960: 1:    '✅f(24) = 3003:3*7*11*13:FizzMuzzDuzzCazz',
960: 1:    '❌f(25) = ??? != 5005:5*7*11*13:BuzzMuzzDuzzCazz'
960: 1:  ],
960: 1:  'level': 34,
960: 1:  'nextQuestion': '25',
960: 1:  'questions': [
960: 1:    '1',
960: 1:    '2',
960: 1:    '3',
960: 1:    '4',
960: 1:    '5',
960: 1:    '6',
960: 1:    '7',
960: 1:    '8',
960: 1:    '9',
960: 1:    '10',
960: 1:    '11',
960: 1:    '12',
960: 1:    '13',
960: 1:    '14',
960: 1:    '15',
960: 1:    '16',
960: 1:    '17',
960: 1:    '18',
960: 1:    '19',
960: 1:    '20',
960: 1:    '21',
960: 1:    '22',
960: 1:    '23',
960: 1:    '24',
960: 1:    '25'
960: 1:  ]
960: 1:}
960: 1:Scores: 119103
960: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz', '231:3*7*11:FizzMuzzDuzz', '273:3*7*13:FizzMuzzCazz', '385:5*7*11:BuzzMuzzDuzz', '429:3*11*13:FizzDuzzCazz', '455:5*7*13:BuzzMuzzCazz', '715:5*11*13:BuzzDuzzCazz', '1001:7*11*13:MuzzDuzzCazz', '1155:3*5*7*11:FizzBuzzMuzzDuzz', '1365:3*5*7*13:FizzBuzzMuzzCazz', '2145:3*5*11*13:FizzBuzzDuzzCazz', '3003:3*7*11*13:FizzMuzzDuzzCazz', '5005:5*7*11*13:BuzzMuzzDuzzCazz']')
960: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
961: 1:BoardData {
961: 1:  'description': [
961: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
961: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
961: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
961: 1:  ],
961: 1:  'expectedAnswer': '15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz',
961: 1:  'history': [
961: 1:    {
961: 1:      'answer': '15:3*5:FizzBuzz',
961: 1:      'question': '1',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '21:3*7:FizzMuzz',
961: 1:      'question': '2',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '33:3*11:FizzDuzz',
961: 1:      'question': '3',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '35:5*7:BuzzMuzz',
961: 1:      'question': '4',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '39:3*13:FizzCazz',
961: 1:      'question': '5',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '55:5*11:BuzzDuzz',
961: 1:      'question': '6',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '65:5*13:BuzzCazz',
961: 1:      'question': '7',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '77:7*11:MuzzDuzz',
961: 1:      'question': '8',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '91:7*13:MuzzCazz',
961: 1:      'question': '9',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
961: 1:      'question': '10',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '143:11*13:DuzzCazz',
961: 1:      'question': '11',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
961: 1:      'question': '12',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
961: 1:      'question': '13',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '231:3*7*11:FizzMuzzDuzz',
961: 1:      'question': '14',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '273:3*7*13:FizzMuzzCazz',
961: 1:      'question': '15',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '385:5*7*11:BuzzMuzzDuzz',
961: 1:      'question': '16',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '429:3*11*13:FizzDuzzCazz',
961: 1:      'question': '17',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '455:5*7*13:BuzzMuzzCazz',
961: 1:      'question': '18',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '715:5*11*13:BuzzDuzzCazz',
961: 1:      'question': '19',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '1001:7*11*13:MuzzDuzzCazz',
961: 1:      'question': '20',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '1155:3*5*7*11:FizzBuzzMuzzDuzz',
961: 1:      'question': '21',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '1365:3*5*7*13:FizzBuzzMuzzCazz',
961: 1:      'question': '22',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '2145:3*5*11*13:FizzBuzzDuzzCazz',
961: 1:      'question': '23',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '3003:3*7*11*13:FizzMuzzDuzzCazz',
961: 1:      'question': '24',
961: 1:      'valid': true
961: 1:    },
961: 1:    {
961: 1:      'answer': '5005:5*7*11*13:BuzzMuzzDuzzCazz',
961: 1:      'question': '25',
961: 1:      'valid': true
961: 1:    }
961: 1:  ],
961: 1:  'info': [
961: 1:    '✅f(1) = 15:3*5:FizzBuzz',
961: 1:    '✅f(2) = 21:3*7:FizzMuzz',
961: 1:    '✅f(3) = 33:3*11:FizzDuzz',
961: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
961: 1:    '✅f(5) = 39:3*13:FizzCazz',
961: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
961: 1:    '✅f(7) = 65:5*13:BuzzCazz',
961: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
961: 1:    '✅f(9) = 91:7*13:MuzzCazz',
961: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
961: 1:    '✅f(11) = 143:11*13:DuzzCazz',
961: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
961: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
961: 1:    '✅f(14) = 231:3*7*11:FizzMuzzDuzz',
961: 1:    '✅f(15) = 273:3*7*13:FizzMuzzCazz',
961: 1:    '✅f(16) = 385:5*7*11:BuzzMuzzDuzz',
961: 1:    '✅f(17) = 429:3*11*13:FizzDuzzCazz',
961: 1:    '✅f(18) = 455:5*7*13:BuzzMuzzCazz',
961: 1:    '✅f(19) = 715:5*11*13:BuzzDuzzCazz',
961: 1:    '✅f(20) = 1001:7*11*13:MuzzDuzzCazz',
961: 1:    '✅f(21) = 1155:3*5*7*11:FizzBuzzMuzzDuzz',
961: 1:    '✅f(22) = 1365:3*5*7*13:FizzBuzzMuzzCazz',
961: 1:    '✅f(23) = 2145:3*5*11*13:FizzBuzzDuzzCazz',
961: 1:    '✅f(24) = 3003:3*7*11*13:FizzMuzzDuzzCazz',
961: 1:    '✅f(25) = 5005:5*7*11*13:BuzzMuzzDuzzCazz',
961: 1:    '❌f(26) = ??? != 15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
961: 1:  ],
961: 1:  'level': 34,
961: 1:  'nextQuestion': '26',
961: 1:  'questions': [
961: 1:    '1',
961: 1:    '2',
961: 1:    '3',
961: 1:    '4',
961: 1:    '5',
961: 1:    '6',
961: 1:    '7',
961: 1:    '8',
961: 1:    '9',
961: 1:    '10',
961: 1:    '11',
961: 1:    '12',
961: 1:    '13',
961: 1:    '14',
961: 1:    '15',
961: 1:    '16',
961: 1:    '17',
961: 1:    '18',
961: 1:    '19',
961: 1:    '20',
961: 1:    '21',
961: 1:    '22',
961: 1:    '23',
961: 1:    '24',
961: 1:    '25',
961: 1:    '26'
961: 1:  ]
961: 1:}
961: 1:Scores: 119124
961: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz', '231:3*7*11:FizzMuzzDuzz', '273:3*7*13:FizzMuzzCazz', '385:5*7*11:BuzzMuzzDuzz', '429:3*11*13:FizzDuzzCazz', '455:5*7*13:BuzzMuzzCazz', '715:5*11*13:BuzzDuzzCazz', '1001:7*11*13:MuzzDuzzCazz', '1155:3*5*7*11:FizzBuzzMuzzDuzz', '1365:3*5*7*13:FizzBuzzMuzzCazz', '2145:3*5*11*13:FizzBuzzDuzzCazz', '3003:3*7*11*13:FizzMuzzDuzzCazz', '5005:5*7*11*13:BuzzMuzzDuzzCazz', '15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz']')
961: 1:Fire Event: PassTest{complexity=57, testCount=27}
------------------------------------------
962: 1:BoardData {
962: 1:  'description': [
962: 1:    'Write a js function that takes an integer index as input and returns a string in the format 'number:divisors:fizzBuzz', where 'number' is the nth positive integer that has at least two distinct dividers [3, 5, 7, 9, 13] and is divisible by them without a rest, 'divisors' is a separated by '*' list of the distinct prime factors of 'number', and 'fizzBuzz' is the result of calling a function 'fizzBuzz(number)'. If the input index is less than or equal to 0 or greater than or equal to 25, return 'none'.',
962: 1:    'JavaScript program:\nfunction fizzBuzz(number) {\n    const divisors = [3, 5, 7, 11, 13];\n    const strings = ['Fizz', 'Buzz', 'Muzz', 'Duzz', 'Cazz'];\n    let str = '';\n    for (let i = 0; i < divisors.length; i++) {\n        if (number % divisors[i] === 0) {\n            str += strings[i];\n        }\n    }\n    return str || number.toString();\n}',
962: 1:    'For example:\n1=>15:3*5:FizzBuzz\n2=>21:3*7:FizzMuzz\n3=>33:3*11:FizzDuzz\n10=>105:3*5*7:FizzBuzzMuzz\n12=>165:3*5*11:FizzBuzzDuzz\n13=>195:3*5*13:FizzBuzzCazz\n21=>1155:3*5*7*11:FizzBuzzMuzzDuzz\n23=>2145:3*5*11*13:FizzBuzzDuzzCazz\n24=>3003:3*7*11*13:FizzMuzzDuzzCazz\n26=>15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz'
962: 1:  ],
962: 1:  'expectedAnswer': 'none',
962: 1:  'history': [
962: 1:    {
962: 1:      'answer': '15:3*5:FizzBuzz',
962: 1:      'question': '1',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '21:3*7:FizzMuzz',
962: 1:      'question': '2',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '33:3*11:FizzDuzz',
962: 1:      'question': '3',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '35:5*7:BuzzMuzz',
962: 1:      'question': '4',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '39:3*13:FizzCazz',
962: 1:      'question': '5',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '55:5*11:BuzzDuzz',
962: 1:      'question': '6',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '65:5*13:BuzzCazz',
962: 1:      'question': '7',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '77:7*11:MuzzDuzz',
962: 1:      'question': '8',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '91:7*13:MuzzCazz',
962: 1:      'question': '9',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
962: 1:      'question': '10',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '143:11*13:DuzzCazz',
962: 1:      'question': '11',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
962: 1:      'question': '12',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
962: 1:      'question': '13',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '231:3*7*11:FizzMuzzDuzz',
962: 1:      'question': '14',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '273:3*7*13:FizzMuzzCazz',
962: 1:      'question': '15',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '385:5*7*11:BuzzMuzzDuzz',
962: 1:      'question': '16',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '429:3*11*13:FizzDuzzCazz',
962: 1:      'question': '17',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '455:5*7*13:BuzzMuzzCazz',
962: 1:      'question': '18',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '715:5*11*13:BuzzDuzzCazz',
962: 1:      'question': '19',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '1001:7*11*13:MuzzDuzzCazz',
962: 1:      'question': '20',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '1155:3*5*7*11:FizzBuzzMuzzDuzz',
962: 1:      'question': '21',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '1365:3*5*7*13:FizzBuzzMuzzCazz',
962: 1:      'question': '22',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '2145:3*5*11*13:FizzBuzzDuzzCazz',
962: 1:      'question': '23',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '3003:3*7*11*13:FizzMuzzDuzzCazz',
962: 1:      'question': '24',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '5005:5*7*11*13:BuzzMuzzDuzzCazz',
962: 1:      'question': '25',
962: 1:      'valid': true
962: 1:    },
962: 1:    {
962: 1:      'answer': '15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz',
962: 1:      'question': '26',
962: 1:      'valid': true
962: 1:    }
962: 1:  ],
962: 1:  'info': [
962: 1:    '✅f(1) = 15:3*5:FizzBuzz',
962: 1:    '✅f(2) = 21:3*7:FizzMuzz',
962: 1:    '✅f(3) = 33:3*11:FizzDuzz',
962: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
962: 1:    '✅f(5) = 39:3*13:FizzCazz',
962: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
962: 1:    '✅f(7) = 65:5*13:BuzzCazz',
962: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
962: 1:    '✅f(9) = 91:7*13:MuzzCazz',
962: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
962: 1:    '✅f(11) = 143:11*13:DuzzCazz',
962: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
962: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
962: 1:    '✅f(14) = 231:3*7*11:FizzMuzzDuzz',
962: 1:    '✅f(15) = 273:3*7*13:FizzMuzzCazz',
962: 1:    '✅f(16) = 385:5*7*11:BuzzMuzzDuzz',
962: 1:    '✅f(17) = 429:3*11*13:FizzDuzzCazz',
962: 1:    '✅f(18) = 455:5*7*13:BuzzMuzzCazz',
962: 1:    '✅f(19) = 715:5*11*13:BuzzDuzzCazz',
962: 1:    '✅f(20) = 1001:7*11*13:MuzzDuzzCazz',
962: 1:    '✅f(21) = 1155:3*5*7*11:FizzBuzzMuzzDuzz',
962: 1:    '✅f(22) = 1365:3*5*7*13:FizzBuzzMuzzCazz',
962: 1:    '✅f(23) = 2145:3*5*11*13:FizzBuzzDuzzCazz',
962: 1:    '✅f(24) = 3003:3*7*11*13:FizzMuzzDuzzCazz',
962: 1:    '✅f(25) = 5005:5*7*11*13:BuzzMuzzDuzzCazz',
962: 1:    '✅f(26) = 15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz',
962: 1:    '❌f(27) = ??? != none'
962: 1:  ],
962: 1:  'level': 34,
962: 1:  'nextQuestion': '27',
962: 1:  'questions': [
962: 1:    '1',
962: 1:    '2',
962: 1:    '3',
962: 1:    '4',
962: 1:    '5',
962: 1:    '6',
962: 1:    '7',
962: 1:    '8',
962: 1:    '9',
962: 1:    '10',
962: 1:    '11',
962: 1:    '12',
962: 1:    '13',
962: 1:    '14',
962: 1:    '15',
962: 1:    '16',
962: 1:    '17',
962: 1:    '18',
962: 1:    '19',
962: 1:    '20',
962: 1:    '21',
962: 1:    '22',
962: 1:    '23',
962: 1:    '24',
962: 1:    '25',
962: 1:    '26',
962: 1:    '27'
962: 1:  ]
962: 1:}
962: 1:Scores: 119145
962: 1:Answer: message('['15:3*5:FizzBuzz', '21:3*7:FizzMuzz', '33:3*11:FizzDuzz', '35:5*7:BuzzMuzz', '39:3*13:FizzCazz', '55:5*11:BuzzDuzz', '65:5*13:BuzzCazz', '77:7*11:MuzzDuzz', '91:7*13:MuzzCazz', '105:3*5*7:FizzBuzzMuzz', '143:11*13:DuzzCazz', '165:3*5*11:FizzBuzzDuzz', '195:3*5*13:FizzBuzzCazz', '231:3*7*11:FizzMuzzDuzz', '273:3*7*13:FizzMuzzCazz', '385:5*7*11:BuzzMuzzDuzz', '429:3*11*13:FizzDuzzCazz', '455:5*7*13:BuzzMuzzCazz', '715:5*11*13:BuzzDuzzCazz', '1001:7*11*13:MuzzDuzzCazz', '1155:3*5*7*11:FizzBuzzMuzzDuzz', '1365:3*5*7*13:FizzBuzzMuzzCazz', '2145:3*5*11*13:FizzBuzzDuzzCazz', '3003:3*7*11*13:FizzMuzzDuzzCazz', '5005:5*7*11*13:BuzzMuzzDuzzCazz', '15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz', 'none']')
962: 1:Fire Event: PassTest{complexity=57, testCount=27}
962: 1:Fire Event: NextAlgorithm{complexity=57, time=0}
------------------------------------------
963: 1:BoardData {
963: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
963: 1:  'history': [
963: 1:    {
963: 1:      'answer': '15:3*5:FizzBuzz',
963: 1:      'question': '1',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '21:3*7:FizzMuzz',
963: 1:      'question': '2',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '33:3*11:FizzDuzz',
963: 1:      'question': '3',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '35:5*7:BuzzMuzz',
963: 1:      'question': '4',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '39:3*13:FizzCazz',
963: 1:      'question': '5',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '55:5*11:BuzzDuzz',
963: 1:      'question': '6',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '65:5*13:BuzzCazz',
963: 1:      'question': '7',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '77:7*11:MuzzDuzz',
963: 1:      'question': '8',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '91:7*13:MuzzCazz',
963: 1:      'question': '9',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '105:3*5*7:FizzBuzzMuzz',
963: 1:      'question': '10',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '143:11*13:DuzzCazz',
963: 1:      'question': '11',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '165:3*5*11:FizzBuzzDuzz',
963: 1:      'question': '12',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '195:3*5*13:FizzBuzzCazz',
963: 1:      'question': '13',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '231:3*7*11:FizzMuzzDuzz',
963: 1:      'question': '14',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '273:3*7*13:FizzMuzzCazz',
963: 1:      'question': '15',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '385:5*7*11:BuzzMuzzDuzz',
963: 1:      'question': '16',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '429:3*11*13:FizzDuzzCazz',
963: 1:      'question': '17',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '455:5*7*13:BuzzMuzzCazz',
963: 1:      'question': '18',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '715:5*11*13:BuzzDuzzCazz',
963: 1:      'question': '19',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '1001:7*11*13:MuzzDuzzCazz',
963: 1:      'question': '20',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '1155:3*5*7*11:FizzBuzzMuzzDuzz',
963: 1:      'question': '21',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '1365:3*5*7*13:FizzBuzzMuzzCazz',
963: 1:      'question': '22',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '2145:3*5*11*13:FizzBuzzDuzzCazz',
963: 1:      'question': '23',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '3003:3*7*11*13:FizzMuzzDuzzCazz',
963: 1:      'question': '24',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '5005:5*7*11*13:BuzzMuzzDuzzCazz',
963: 1:      'question': '25',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': '15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz',
963: 1:      'question': '26',
963: 1:      'valid': true
963: 1:    },
963: 1:    {
963: 1:      'answer': 'none',
963: 1:      'question': '27',
963: 1:      'valid': true
963: 1:    }
963: 1:  ],
963: 1:  'info': [
963: 1:    '✅f(1) = 15:3*5:FizzBuzz',
963: 1:    '✅f(2) = 21:3*7:FizzMuzz',
963: 1:    '✅f(3) = 33:3*11:FizzDuzz',
963: 1:    '✅f(4) = 35:5*7:BuzzMuzz',
963: 1:    '✅f(5) = 39:3*13:FizzCazz',
963: 1:    '✅f(6) = 55:5*11:BuzzDuzz',
963: 1:    '✅f(7) = 65:5*13:BuzzCazz',
963: 1:    '✅f(8) = 77:7*11:MuzzDuzz',
963: 1:    '✅f(9) = 91:7*13:MuzzCazz',
963: 1:    '✅f(10) = 105:3*5*7:FizzBuzzMuzz',
963: 1:    '✅f(11) = 143:11*13:DuzzCazz',
963: 1:    '✅f(12) = 165:3*5*11:FizzBuzzDuzz',
963: 1:    '✅f(13) = 195:3*5*13:FizzBuzzCazz',
963: 1:    '✅f(14) = 231:3*7*11:FizzMuzzDuzz',
963: 1:    '✅f(15) = 273:3*7*13:FizzMuzzCazz',
963: 1:    '✅f(16) = 385:5*7*11:BuzzMuzzDuzz',
963: 1:    '✅f(17) = 429:3*11*13:FizzDuzzCazz',
963: 1:    '✅f(18) = 455:5*7*13:BuzzMuzzCazz',
963: 1:    '✅f(19) = 715:5*11*13:BuzzDuzzCazz',
963: 1:    '✅f(20) = 1001:7*11*13:MuzzDuzzCazz',
963: 1:    '✅f(21) = 1155:3*5*7*11:FizzBuzzMuzzDuzz',
963: 1:    '✅f(22) = 1365:3*5*7*13:FizzBuzzMuzzCazz',
963: 1:    '✅f(23) = 2145:3*5*11*13:FizzBuzzDuzzCazz',
963: 1:    '✅f(24) = 3003:3*7*11*13:FizzMuzzDuzzCazz',
963: 1:    '✅f(25) = 5005:5*7*11*13:BuzzMuzzDuzzCazz',
963: 1:    '✅f(26) = 15015:3*5*7*11*13:FizzBuzzMuzzDuzzCazz',
963: 1:    '✅f(27) = none'
963: 1:  ],
963: 1:  'level': 34,
963: 1:  'questions': []
963: 1:}
963: 1:Scores: 126860
963: 1:Answer: message('StartNextLevel')
963: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
964: 1:BoardData {
964: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
964: 1:  'expectedAnswer': '0.5',
964: 1:  'history': [],
964: 1:  'info': ['❌f(1, 2) = ??? != 0.5'],
964: 1:  'level': 35,
964: 1:  'nextQuestion': '1, 2',
964: 1:  'questions': ['1, 2']
964: 1:}
964: 1:Scores: 126860
964: 1:Answer: message('['0.5']')
964: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
965: 1:BoardData {
965: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
965: 1:  'expectedAnswer': '1',
965: 1:  'history': [{
965: 1:    'answer': '0.5',
965: 1:    'question': '1, 2',
965: 1:    'valid': true
965: 1:  }],
965: 1:  'info': [
965: 1:    '✅f(1, 2) = 0.5',
965: 1:    '❌f(1, 1) = ??? != 1'
965: 1:  ],
965: 1:  'level': 35,
965: 1:  'nextQuestion': '1, 1',
965: 1:  'questions': [
965: 1:    '1, 2',
965: 1:    '1, 1'
965: 1:  ]
965: 1:}
965: 1:Scores: 126881
965: 1:Answer: message('['0.5', '1']')
965: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
966: 1:BoardData {
966: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
966: 1:  'expectedAnswer': '1',
966: 1:  'history': [
966: 1:    {
966: 1:      'answer': '0.5',
966: 1:      'question': '1, 2',
966: 1:      'valid': true
966: 1:    },
966: 1:    {
966: 1:      'answer': '1',
966: 1:      'question': '1, 1',
966: 1:      'valid': true
966: 1:    }
966: 1:  ],
966: 1:  'info': [
966: 1:    '✅f(1, 2) = 0.5',
966: 1:    '✅f(1, 1) = 1',
966: 1:    '❌f(5, 5) = ??? != 1'
966: 1:  ],
966: 1:  'level': 35,
966: 1:  'nextQuestion': '5, 5',
966: 1:  'questions': [
966: 1:    '1, 2',
966: 1:    '1, 1',
966: 1:    '5, 5'
966: 1:  ]
966: 1:}
966: 1:Scores: 126902
966: 1:Answer: message('['0.5', '1', '1']')
966: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
967: 1:BoardData {
967: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
967: 1:  'expectedAnswer': '11',
967: 1:  'history': [
967: 1:    {
967: 1:      'answer': '0.5',
967: 1:      'question': '1, 2',
967: 1:      'valid': true
967: 1:    },
967: 1:    {
967: 1:      'answer': '1',
967: 1:      'question': '1, 1',
967: 1:      'valid': true
967: 1:    },
967: 1:    {
967: 1:      'answer': '1',
967: 1:      'question': '5, 5',
967: 1:      'valid': true
967: 1:    }
967: 1:  ],
967: 1:  'info': [
967: 1:    '✅f(1, 2) = 0.5',
967: 1:    '✅f(1, 1) = 1',
967: 1:    '✅f(5, 5) = 1',
967: 1:    '❌f(55, 5) = ??? != 11'
967: 1:  ],
967: 1:  'level': 35,
967: 1:  'nextQuestion': '55, 5',
967: 1:  'questions': [
967: 1:    '1, 2',
967: 1:    '1, 1',
967: 1:    '5, 5',
967: 1:    '55, 5'
967: 1:  ]
967: 1:}
967: 1:Scores: 126923
967: 1:Answer: message('['0.5', '1', '1', '11']')
967: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
968: 1:BoardData {
968: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
968: 1:  'expectedAnswer': '1.25',
968: 1:  'history': [
968: 1:    {
968: 1:      'answer': '0.5',
968: 1:      'question': '1, 2',
968: 1:      'valid': true
968: 1:    },
968: 1:    {
968: 1:      'answer': '1',
968: 1:      'question': '1, 1',
968: 1:      'valid': true
968: 1:    },
968: 1:    {
968: 1:      'answer': '1',
968: 1:      'question': '5, 5',
968: 1:      'valid': true
968: 1:    },
968: 1:    {
968: 1:      'answer': '11',
968: 1:      'question': '55, 5',
968: 1:      'valid': true
968: 1:    }
968: 1:  ],
968: 1:  'info': [
968: 1:    '✅f(1, 2) = 0.5',
968: 1:    '✅f(1, 1) = 1',
968: 1:    '✅f(5, 5) = 1',
968: 1:    '✅f(55, 5) = 11',
968: 1:    '❌f(55, 44) = ??? != 1.25'
968: 1:  ],
968: 1:  'level': 35,
968: 1:  'nextQuestion': '55, 44',
968: 1:  'questions': [
968: 1:    '1, 2',
968: 1:    '1, 1',
968: 1:    '5, 5',
968: 1:    '55, 5',
968: 1:    '55, 44'
968: 1:  ]
968: 1:}
968: 1:Scores: 126944
968: 1:Answer: message('['0.5', '1', '1', '11', '1.25']')
968: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
969: 1:BoardData {
969: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
969: 1:  'expectedAnswer': '0',
969: 1:  'history': [
969: 1:    {
969: 1:      'answer': '0.5',
969: 1:      'question': '1, 2',
969: 1:      'valid': true
969: 1:    },
969: 1:    {
969: 1:      'answer': '1',
969: 1:      'question': '1, 1',
969: 1:      'valid': true
969: 1:    },
969: 1:    {
969: 1:      'answer': '1',
969: 1:      'question': '5, 5',
969: 1:      'valid': true
969: 1:    },
969: 1:    {
969: 1:      'answer': '11',
969: 1:      'question': '55, 5',
969: 1:      'valid': true
969: 1:    },
969: 1:    {
969: 1:      'answer': '1.25',
969: 1:      'question': '55, 44',
969: 1:      'valid': true
969: 1:    }
969: 1:  ],
969: 1:  'info': [
969: 1:    '✅f(1, 2) = 0.5',
969: 1:    '✅f(1, 1) = 1',
969: 1:    '✅f(5, 5) = 1',
969: 1:    '✅f(55, 5) = 11',
969: 1:    '✅f(55, 44) = 1.25',
969: 1:    '❌f(0, 56) = ??? != 0'
969: 1:  ],
969: 1:  'level': 35,
969: 1:  'nextQuestion': '0, 56',
969: 1:  'questions': [
969: 1:    '1, 2',
969: 1:    '1, 1',
969: 1:    '5, 5',
969: 1:    '55, 5',
969: 1:    '55, 44',
969: 1:    '0, 56'
969: 1:  ]
969: 1:}
969: 1:Scores: 126965
969: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0']')
969: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
970: 1:BoardData {
970: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
970: 1:  'expectedAnswer': '56',
970: 1:  'history': [
970: 1:    {
970: 1:      'answer': '0.5',
970: 1:      'question': '1, 2',
970: 1:      'valid': true
970: 1:    },
970: 1:    {
970: 1:      'answer': '1',
970: 1:      'question': '1, 1',
970: 1:      'valid': true
970: 1:    },
970: 1:    {
970: 1:      'answer': '1',
970: 1:      'question': '5, 5',
970: 1:      'valid': true
970: 1:    },
970: 1:    {
970: 1:      'answer': '11',
970: 1:      'question': '55, 5',
970: 1:      'valid': true
970: 1:    },
970: 1:    {
970: 1:      'answer': '1.25',
970: 1:      'question': '55, 44',
970: 1:      'valid': true
970: 1:    },
970: 1:    {
970: 1:      'answer': '0',
970: 1:      'question': '0, 56',
970: 1:      'valid': true
970: 1:    }
970: 1:  ],
970: 1:  'info': [
970: 1:    '✅f(1, 2) = 0.5',
970: 1:    '✅f(1, 1) = 1',
970: 1:    '✅f(5, 5) = 1',
970: 1:    '✅f(55, 5) = 11',
970: 1:    '✅f(55, 44) = 1.25',
970: 1:    '✅f(0, 56) = 0',
970: 1:    '❌f(56, 1) = ??? != 56'
970: 1:  ],
970: 1:  'level': 35,
970: 1:  'nextQuestion': '56, 1',
970: 1:  'questions': [
970: 1:    '1, 2',
970: 1:    '1, 1',
970: 1:    '5, 5',
970: 1:    '55, 5',
970: 1:    '55, 44',
970: 1:    '0, 56',
970: 1:    '56, 1'
970: 1:  ]
970: 1:}
970: 1:Scores: 126986
970: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56']')
970: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
971: 1:BoardData {
971: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
971: 1:  'expectedAnswer': '-0.5',
971: 1:  'history': [
971: 1:    {
971: 1:      'answer': '0.5',
971: 1:      'question': '1, 2',
971: 1:      'valid': true
971: 1:    },
971: 1:    {
971: 1:      'answer': '1',
971: 1:      'question': '1, 1',
971: 1:      'valid': true
971: 1:    },
971: 1:    {
971: 1:      'answer': '1',
971: 1:      'question': '5, 5',
971: 1:      'valid': true
971: 1:    },
971: 1:    {
971: 1:      'answer': '11',
971: 1:      'question': '55, 5',
971: 1:      'valid': true
971: 1:    },
971: 1:    {
971: 1:      'answer': '1.25',
971: 1:      'question': '55, 44',
971: 1:      'valid': true
971: 1:    },
971: 1:    {
971: 1:      'answer': '0',
971: 1:      'question': '0, 56',
971: 1:      'valid': true
971: 1:    },
971: 1:    {
971: 1:      'answer': '56',
971: 1:      'question': '56, 1',
971: 1:      'valid': true
971: 1:    }
971: 1:  ],
971: 1:  'info': [
971: 1:    '✅f(1, 2) = 0.5',
971: 1:    '✅f(1, 1) = 1',
971: 1:    '✅f(5, 5) = 1',
971: 1:    '✅f(55, 5) = 11',
971: 1:    '✅f(55, 44) = 1.25',
971: 1:    '✅f(0, 56) = 0',
971: 1:    '✅f(56, 1) = 56',
971: 1:    '❌f(1, -2) = ??? != -0.5'
971: 1:  ],
971: 1:  'level': 35,
971: 1:  'nextQuestion': '1, -2',
971: 1:  'questions': [
971: 1:    '1, 2',
971: 1:    '1, 1',
971: 1:    '5, 5',
971: 1:    '55, 5',
971: 1:    '55, 44',
971: 1:    '0, 56',
971: 1:    '56, 1',
971: 1:    '1, -2'
971: 1:  ]
971: 1:}
971: 1:Scores: 127007
971: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5']')
971: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
972: 1:BoardData {
972: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
972: 1:  'expectedAnswer': '-0.5',
972: 1:  'history': [
972: 1:    {
972: 1:      'answer': '0.5',
972: 1:      'question': '1, 2',
972: 1:      'valid': true
972: 1:    },
972: 1:    {
972: 1:      'answer': '1',
972: 1:      'question': '1, 1',
972: 1:      'valid': true
972: 1:    },
972: 1:    {
972: 1:      'answer': '1',
972: 1:      'question': '5, 5',
972: 1:      'valid': true
972: 1:    },
972: 1:    {
972: 1:      'answer': '11',
972: 1:      'question': '55, 5',
972: 1:      'valid': true
972: 1:    },
972: 1:    {
972: 1:      'answer': '1.25',
972: 1:      'question': '55, 44',
972: 1:      'valid': true
972: 1:    },
972: 1:    {
972: 1:      'answer': '0',
972: 1:      'question': '0, 56',
972: 1:      'valid': true
972: 1:    },
972: 1:    {
972: 1:      'answer': '56',
972: 1:      'question': '56, 1',
972: 1:      'valid': true
972: 1:    },
972: 1:    {
972: 1:      'answer': '-0.5',
972: 1:      'question': '1, -2',
972: 1:      'valid': true
972: 1:    }
972: 1:  ],
972: 1:  'info': [
972: 1:    '✅f(1, 2) = 0.5',
972: 1:    '✅f(1, 1) = 1',
972: 1:    '✅f(5, 5) = 1',
972: 1:    '✅f(55, 5) = 11',
972: 1:    '✅f(55, 44) = 1.25',
972: 1:    '✅f(0, 56) = 0',
972: 1:    '✅f(56, 1) = 56',
972: 1:    '✅f(1, -2) = -0.5',
972: 1:    '❌f(-1, 2) = ??? != -0.5'
972: 1:  ],
972: 1:  'level': 35,
972: 1:  'nextQuestion': '-1, 2',
972: 1:  'questions': [
972: 1:    '1, 2',
972: 1:    '1, 1',
972: 1:    '5, 5',
972: 1:    '55, 5',
972: 1:    '55, 44',
972: 1:    '0, 56',
972: 1:    '56, 1',
972: 1:    '1, -2',
972: 1:    '-1, 2'
972: 1:  ]
972: 1:}
972: 1:Scores: 127028
972: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5']')
972: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
973: 1:BoardData {
973: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
973: 1:  'expectedAnswer': '0.5',
973: 1:  'history': [
973: 1:    {
973: 1:      'answer': '0.5',
973: 1:      'question': '1, 2',
973: 1:      'valid': true
973: 1:    },
973: 1:    {
973: 1:      'answer': '1',
973: 1:      'question': '1, 1',
973: 1:      'valid': true
973: 1:    },
973: 1:    {
973: 1:      'answer': '1',
973: 1:      'question': '5, 5',
973: 1:      'valid': true
973: 1:    },
973: 1:    {
973: 1:      'answer': '11',
973: 1:      'question': '55, 5',
973: 1:      'valid': true
973: 1:    },
973: 1:    {
973: 1:      'answer': '1.25',
973: 1:      'question': '55, 44',
973: 1:      'valid': true
973: 1:    },
973: 1:    {
973: 1:      'answer': '0',
973: 1:      'question': '0, 56',
973: 1:      'valid': true
973: 1:    },
973: 1:    {
973: 1:      'answer': '56',
973: 1:      'question': '56, 1',
973: 1:      'valid': true
973: 1:    },
973: 1:    {
973: 1:      'answer': '-0.5',
973: 1:      'question': '1, -2',
973: 1:      'valid': true
973: 1:    },
973: 1:    {
973: 1:      'answer': '-0.5',
973: 1:      'question': '-1, 2',
973: 1:      'valid': true
973: 1:    }
973: 1:  ],
973: 1:  'info': [
973: 1:    '✅f(1, 2) = 0.5',
973: 1:    '✅f(1, 1) = 1',
973: 1:    '✅f(5, 5) = 1',
973: 1:    '✅f(55, 5) = 11',
973: 1:    '✅f(55, 44) = 1.25',
973: 1:    '✅f(0, 56) = 0',
973: 1:    '✅f(56, 1) = 56',
973: 1:    '✅f(1, -2) = -0.5',
973: 1:    '✅f(-1, 2) = -0.5',
973: 1:    '❌f(-1, -2) = ??? != 0.5'
973: 1:  ],
973: 1:  'level': 35,
973: 1:  'nextQuestion': '-1, -2',
973: 1:  'questions': [
973: 1:    '1, 2',
973: 1:    '1, 1',
973: 1:    '5, 5',
973: 1:    '55, 5',
973: 1:    '55, 44',
973: 1:    '0, 56',
973: 1:    '56, 1',
973: 1:    '1, -2',
973: 1:    '-1, 2',
973: 1:    '-1, -2'
973: 1:  ]
973: 1:}
973: 1:Scores: 127049
973: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5']')
973: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
974: 1:BoardData {
974: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
974: 1:  'expectedAnswer': '0.001',
974: 1:  'history': [
974: 1:    {
974: 1:      'answer': '0.5',
974: 1:      'question': '1, 2',
974: 1:      'valid': true
974: 1:    },
974: 1:    {
974: 1:      'answer': '1',
974: 1:      'question': '1, 1',
974: 1:      'valid': true
974: 1:    },
974: 1:    {
974: 1:      'answer': '1',
974: 1:      'question': '5, 5',
974: 1:      'valid': true
974: 1:    },
974: 1:    {
974: 1:      'answer': '11',
974: 1:      'question': '55, 5',
974: 1:      'valid': true
974: 1:    },
974: 1:    {
974: 1:      'answer': '1.25',
974: 1:      'question': '55, 44',
974: 1:      'valid': true
974: 1:    },
974: 1:    {
974: 1:      'answer': '0',
974: 1:      'question': '0, 56',
974: 1:      'valid': true
974: 1:    },
974: 1:    {
974: 1:      'answer': '56',
974: 1:      'question': '56, 1',
974: 1:      'valid': true
974: 1:    },
974: 1:    {
974: 1:      'answer': '-0.5',
974: 1:      'question': '1, -2',
974: 1:      'valid': true
974: 1:    },
974: 1:    {
974: 1:      'answer': '-0.5',
974: 1:      'question': '-1, 2',
974: 1:      'valid': true
974: 1:    },
974: 1:    {
974: 1:      'answer': '0.5',
974: 1:      'question': '-1, -2',
974: 1:      'valid': true
974: 1:    }
974: 1:  ],
974: 1:  'info': [
974: 1:    '✅f(1, 2) = 0.5',
974: 1:    '✅f(1, 1) = 1',
974: 1:    '✅f(5, 5) = 1',
974: 1:    '✅f(55, 5) = 11',
974: 1:    '✅f(55, 44) = 1.25',
974: 1:    '✅f(0, 56) = 0',
974: 1:    '✅f(56, 1) = 56',
974: 1:    '✅f(1, -2) = -0.5',
974: 1:    '✅f(-1, 2) = -0.5',
974: 1:    '✅f(-1, -2) = 0.5',
974: 1:    '❌f(1, 1000) = ??? != 0.001'
974: 1:  ],
974: 1:  'level': 35,
974: 1:  'nextQuestion': '1, 1000',
974: 1:  'questions': [
974: 1:    '1, 2',
974: 1:    '1, 1',
974: 1:    '5, 5',
974: 1:    '55, 5',
974: 1:    '55, 44',
974: 1:    '0, 56',
974: 1:    '56, 1',
974: 1:    '1, -2',
974: 1:    '-1, 2',
974: 1:    '-1, -2',
974: 1:    '1, 1000'
974: 1:  ]
974: 1:}
974: 1:Scores: 127070
974: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001']')
974: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
975: 1:BoardData {
975: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
975: 1:  'expectedAnswer': '1.2(4)',
975: 1:  'history': [
975: 1:    {
975: 1:      'answer': '0.5',
975: 1:      'question': '1, 2',
975: 1:      'valid': true
975: 1:    },
975: 1:    {
975: 1:      'answer': '1',
975: 1:      'question': '1, 1',
975: 1:      'valid': true
975: 1:    },
975: 1:    {
975: 1:      'answer': '1',
975: 1:      'question': '5, 5',
975: 1:      'valid': true
975: 1:    },
975: 1:    {
975: 1:      'answer': '11',
975: 1:      'question': '55, 5',
975: 1:      'valid': true
975: 1:    },
975: 1:    {
975: 1:      'answer': '1.25',
975: 1:      'question': '55, 44',
975: 1:      'valid': true
975: 1:    },
975: 1:    {
975: 1:      'answer': '0',
975: 1:      'question': '0, 56',
975: 1:      'valid': true
975: 1:    },
975: 1:    {
975: 1:      'answer': '56',
975: 1:      'question': '56, 1',
975: 1:      'valid': true
975: 1:    },
975: 1:    {
975: 1:      'answer': '-0.5',
975: 1:      'question': '1, -2',
975: 1:      'valid': true
975: 1:    },
975: 1:    {
975: 1:      'answer': '-0.5',
975: 1:      'question': '-1, 2',
975: 1:      'valid': true
975: 1:    },
975: 1:    {
975: 1:      'answer': '0.5',
975: 1:      'question': '-1, -2',
975: 1:      'valid': true
975: 1:    },
975: 1:    {
975: 1:      'answer': '0.001',
975: 1:      'question': '1, 1000',
975: 1:      'valid': true
975: 1:    }
975: 1:  ],
975: 1:  'info': [
975: 1:    '✅f(1, 2) = 0.5',
975: 1:    '✅f(1, 1) = 1',
975: 1:    '✅f(5, 5) = 1',
975: 1:    '✅f(55, 5) = 11',
975: 1:    '✅f(55, 44) = 1.25',
975: 1:    '✅f(0, 56) = 0',
975: 1:    '✅f(56, 1) = 56',
975: 1:    '✅f(1, -2) = -0.5',
975: 1:    '✅f(-1, 2) = -0.5',
975: 1:    '✅f(-1, -2) = 0.5',
975: 1:    '✅f(1, 1000) = 0.001',
975: 1:    '❌f(56, 45) = ??? != 1.2(4)'
975: 1:  ],
975: 1:  'level': 35,
975: 1:  'nextQuestion': '56, 45',
975: 1:  'questions': [
975: 1:    '1, 2',
975: 1:    '1, 1',
975: 1:    '5, 5',
975: 1:    '55, 5',
975: 1:    '55, 44',
975: 1:    '0, 56',
975: 1:    '56, 1',
975: 1:    '1, -2',
975: 1:    '-1, 2',
975: 1:    '-1, -2',
975: 1:    '1, 1000',
975: 1:    '56, 45'
975: 1:  ]
975: 1:}
975: 1:Scores: 127091
975: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)']')
975: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
976: 1:BoardData {
976: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
976: 1:  'expectedAnswer': '1.00(90)',
976: 1:  'history': [
976: 1:    {
976: 1:      'answer': '0.5',
976: 1:      'question': '1, 2',
976: 1:      'valid': true
976: 1:    },
976: 1:    {
976: 1:      'answer': '1',
976: 1:      'question': '1, 1',
976: 1:      'valid': true
976: 1:    },
976: 1:    {
976: 1:      'answer': '1',
976: 1:      'question': '5, 5',
976: 1:      'valid': true
976: 1:    },
976: 1:    {
976: 1:      'answer': '11',
976: 1:      'question': '55, 5',
976: 1:      'valid': true
976: 1:    },
976: 1:    {
976: 1:      'answer': '1.25',
976: 1:      'question': '55, 44',
976: 1:      'valid': true
976: 1:    },
976: 1:    {
976: 1:      'answer': '0',
976: 1:      'question': '0, 56',
976: 1:      'valid': true
976: 1:    },
976: 1:    {
976: 1:      'answer': '56',
976: 1:      'question': '56, 1',
976: 1:      'valid': true
976: 1:    },
976: 1:    {
976: 1:      'answer': '-0.5',
976: 1:      'question': '1, -2',
976: 1:      'valid': true
976: 1:    },
976: 1:    {
976: 1:      'answer': '-0.5',
976: 1:      'question': '-1, 2',
976: 1:      'valid': true
976: 1:    },
976: 1:    {
976: 1:      'answer': '0.5',
976: 1:      'question': '-1, -2',
976: 1:      'valid': true
976: 1:    },
976: 1:    {
976: 1:      'answer': '0.001',
976: 1:      'question': '1, 1000',
976: 1:      'valid': true
976: 1:    },
976: 1:    {
976: 1:      'answer': '1.2(4)',
976: 1:      'question': '56, 45',
976: 1:      'valid': true
976: 1:    }
976: 1:  ],
976: 1:  'info': [
976: 1:    '✅f(1, 2) = 0.5',
976: 1:    '✅f(1, 1) = 1',
976: 1:    '✅f(5, 5) = 1',
976: 1:    '✅f(55, 5) = 11',
976: 1:    '✅f(55, 44) = 1.25',
976: 1:    '✅f(0, 56) = 0',
976: 1:    '✅f(56, 1) = 56',
976: 1:    '✅f(1, -2) = -0.5',
976: 1:    '✅f(-1, 2) = -0.5',
976: 1:    '✅f(-1, -2) = 0.5',
976: 1:    '✅f(1, 1000) = 0.001',
976: 1:    '✅f(56, 45) = 1.2(4)',
976: 1:    '❌f(111, 110) = ??? != 1.00(90)'
976: 1:  ],
976: 1:  'level': 35,
976: 1:  'nextQuestion': '111, 110',
976: 1:  'questions': [
976: 1:    '1, 2',
976: 1:    '1, 1',
976: 1:    '5, 5',
976: 1:    '55, 5',
976: 1:    '55, 44',
976: 1:    '0, 56',
976: 1:    '56, 1',
976: 1:    '1, -2',
976: 1:    '-1, 2',
976: 1:    '-1, -2',
976: 1:    '1, 1000',
976: 1:    '56, 45',
976: 1:    '111, 110'
976: 1:  ]
976: 1:}
976: 1:Scores: 127112
976: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)']')
976: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
977: 1:BoardData {
977: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
977: 1:  'expectedAnswer': '10.0(90)',
977: 1:  'history': [
977: 1:    {
977: 1:      'answer': '0.5',
977: 1:      'question': '1, 2',
977: 1:      'valid': true
977: 1:    },
977: 1:    {
977: 1:      'answer': '1',
977: 1:      'question': '1, 1',
977: 1:      'valid': true
977: 1:    },
977: 1:    {
977: 1:      'answer': '1',
977: 1:      'question': '5, 5',
977: 1:      'valid': true
977: 1:    },
977: 1:    {
977: 1:      'answer': '11',
977: 1:      'question': '55, 5',
977: 1:      'valid': true
977: 1:    },
977: 1:    {
977: 1:      'answer': '1.25',
977: 1:      'question': '55, 44',
977: 1:      'valid': true
977: 1:    },
977: 1:    {
977: 1:      'answer': '0',
977: 1:      'question': '0, 56',
977: 1:      'valid': true
977: 1:    },
977: 1:    {
977: 1:      'answer': '56',
977: 1:      'question': '56, 1',
977: 1:      'valid': true
977: 1:    },
977: 1:    {
977: 1:      'answer': '-0.5',
977: 1:      'question': '1, -2',
977: 1:      'valid': true
977: 1:    },
977: 1:    {
977: 1:      'answer': '-0.5',
977: 1:      'question': '-1, 2',
977: 1:      'valid': true
977: 1:    },
977: 1:    {
977: 1:      'answer': '0.5',
977: 1:      'question': '-1, -2',
977: 1:      'valid': true
977: 1:    },
977: 1:    {
977: 1:      'answer': '0.001',
977: 1:      'question': '1, 1000',
977: 1:      'valid': true
977: 1:    },
977: 1:    {
977: 1:      'answer': '1.2(4)',
977: 1:      'question': '56, 45',
977: 1:      'valid': true
977: 1:    },
977: 1:    {
977: 1:      'answer': '1.00(90)',
977: 1:      'question': '111, 110',
977: 1:      'valid': true
977: 1:    }
977: 1:  ],
977: 1:  'info': [
977: 1:    '✅f(1, 2) = 0.5',
977: 1:    '✅f(1, 1) = 1',
977: 1:    '✅f(5, 5) = 1',
977: 1:    '✅f(55, 5) = 11',
977: 1:    '✅f(55, 44) = 1.25',
977: 1:    '✅f(0, 56) = 0',
977: 1:    '✅f(56, 1) = 56',
977: 1:    '✅f(1, -2) = -0.5',
977: 1:    '✅f(-1, 2) = -0.5',
977: 1:    '✅f(-1, -2) = 0.5',
977: 1:    '✅f(1, 1000) = 0.001',
977: 1:    '✅f(56, 45) = 1.2(4)',
977: 1:    '✅f(111, 110) = 1.00(90)',
977: 1:    '❌f(111, 11) = ??? != 10.0(90)'
977: 1:  ],
977: 1:  'level': 35,
977: 1:  'nextQuestion': '111, 11',
977: 1:  'questions': [
977: 1:    '1, 2',
977: 1:    '1, 1',
977: 1:    '5, 5',
977: 1:    '55, 5',
977: 1:    '55, 44',
977: 1:    '0, 56',
977: 1:    '56, 1',
977: 1:    '1, -2',
977: 1:    '-1, 2',
977: 1:    '-1, -2',
977: 1:    '1, 1000',
977: 1:    '56, 45',
977: 1:    '111, 110',
977: 1:    '111, 11'
977: 1:  ]
977: 1:}
977: 1:Scores: 127133
977: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)']')
977: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
978: 1:BoardData {
978: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
978: 1:  'expectedAnswer': '1010.0(90)',
978: 1:  'history': [
978: 1:    {
978: 1:      'answer': '0.5',
978: 1:      'question': '1, 2',
978: 1:      'valid': true
978: 1:    },
978: 1:    {
978: 1:      'answer': '1',
978: 1:      'question': '1, 1',
978: 1:      'valid': true
978: 1:    },
978: 1:    {
978: 1:      'answer': '1',
978: 1:      'question': '5, 5',
978: 1:      'valid': true
978: 1:    },
978: 1:    {
978: 1:      'answer': '11',
978: 1:      'question': '55, 5',
978: 1:      'valid': true
978: 1:    },
978: 1:    {
978: 1:      'answer': '1.25',
978: 1:      'question': '55, 44',
978: 1:      'valid': true
978: 1:    },
978: 1:    {
978: 1:      'answer': '0',
978: 1:      'question': '0, 56',
978: 1:      'valid': true
978: 1:    },
978: 1:    {
978: 1:      'answer': '56',
978: 1:      'question': '56, 1',
978: 1:      'valid': true
978: 1:    },
978: 1:    {
978: 1:      'answer': '-0.5',
978: 1:      'question': '1, -2',
978: 1:      'valid': true
978: 1:    },
978: 1:    {
978: 1:      'answer': '-0.5',
978: 1:      'question': '-1, 2',
978: 1:      'valid': true
978: 1:    },
978: 1:    {
978: 1:      'answer': '0.5',
978: 1:      'question': '-1, -2',
978: 1:      'valid': true
978: 1:    },
978: 1:    {
978: 1:      'answer': '0.001',
978: 1:      'question': '1, 1000',
978: 1:      'valid': true
978: 1:    },
978: 1:    {
978: 1:      'answer': '1.2(4)',
978: 1:      'question': '56, 45',
978: 1:      'valid': true
978: 1:    },
978: 1:    {
978: 1:      'answer': '1.00(90)',
978: 1:      'question': '111, 110',
978: 1:      'valid': true
978: 1:    },
978: 1:    {
978: 1:      'answer': '10.0(90)',
978: 1:      'question': '111, 11',
978: 1:      'valid': true
978: 1:    }
978: 1:  ],
978: 1:  'info': [
978: 1:    '✅f(1, 2) = 0.5',
978: 1:    '✅f(1, 1) = 1',
978: 1:    '✅f(5, 5) = 1',
978: 1:    '✅f(55, 5) = 11',
978: 1:    '✅f(55, 44) = 1.25',
978: 1:    '✅f(0, 56) = 0',
978: 1:    '✅f(56, 1) = 56',
978: 1:    '✅f(1, -2) = -0.5',
978: 1:    '✅f(-1, 2) = -0.5',
978: 1:    '✅f(-1, -2) = 0.5',
978: 1:    '✅f(1, 1000) = 0.001',
978: 1:    '✅f(56, 45) = 1.2(4)',
978: 1:    '✅f(111, 110) = 1.00(90)',
978: 1:    '✅f(111, 11) = 10.0(90)',
978: 1:    '❌f(11111, 11) = ??? != 1010.0(90)'
978: 1:  ],
978: 1:  'level': 35,
978: 1:  'nextQuestion': '11111, 11',
978: 1:  'questions': [
978: 1:    '1, 2',
978: 1:    '1, 1',
978: 1:    '5, 5',
978: 1:    '55, 5',
978: 1:    '55, 44',
978: 1:    '0, 56',
978: 1:    '56, 1',
978: 1:    '1, -2',
978: 1:    '-1, 2',
978: 1:    '-1, -2',
978: 1:    '1, 1000',
978: 1:    '56, 45',
978: 1:    '111, 110',
978: 1:    '111, 11',
978: 1:    '11111, 11'
978: 1:  ]
978: 1:}
978: 1:Scores: 127154
978: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)']')
978: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
979: 1:BoardData {
979: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
979: 1:  'expectedAnswer': '0.0(495)',
979: 1:  'history': [
979: 1:    {
979: 1:      'answer': '0.5',
979: 1:      'question': '1, 2',
979: 1:      'valid': true
979: 1:    },
979: 1:    {
979: 1:      'answer': '1',
979: 1:      'question': '1, 1',
979: 1:      'valid': true
979: 1:    },
979: 1:    {
979: 1:      'answer': '1',
979: 1:      'question': '5, 5',
979: 1:      'valid': true
979: 1:    },
979: 1:    {
979: 1:      'answer': '11',
979: 1:      'question': '55, 5',
979: 1:      'valid': true
979: 1:    },
979: 1:    {
979: 1:      'answer': '1.25',
979: 1:      'question': '55, 44',
979: 1:      'valid': true
979: 1:    },
979: 1:    {
979: 1:      'answer': '0',
979: 1:      'question': '0, 56',
979: 1:      'valid': true
979: 1:    },
979: 1:    {
979: 1:      'answer': '56',
979: 1:      'question': '56, 1',
979: 1:      'valid': true
979: 1:    },
979: 1:    {
979: 1:      'answer': '-0.5',
979: 1:      'question': '1, -2',
979: 1:      'valid': true
979: 1:    },
979: 1:    {
979: 1:      'answer': '-0.5',
979: 1:      'question': '-1, 2',
979: 1:      'valid': true
979: 1:    },
979: 1:    {
979: 1:      'answer': '0.5',
979: 1:      'question': '-1, -2',
979: 1:      'valid': true
979: 1:    },
979: 1:    {
979: 1:      'answer': '0.001',
979: 1:      'question': '1, 1000',
979: 1:      'valid': true
979: 1:    },
979: 1:    {
979: 1:      'answer': '1.2(4)',
979: 1:      'question': '56, 45',
979: 1:      'valid': true
979: 1:    },
979: 1:    {
979: 1:      'answer': '1.00(90)',
979: 1:      'question': '111, 110',
979: 1:      'valid': true
979: 1:    },
979: 1:    {
979: 1:      'answer': '10.0(90)',
979: 1:      'question': '111, 11',
979: 1:      'valid': true
979: 1:    },
979: 1:    {
979: 1:      'answer': '1010.0(90)',
979: 1:      'question': '11111, 11',
979: 1:      'valid': true
979: 1:    }
979: 1:  ],
979: 1:  'info': [
979: 1:    '✅f(1, 2) = 0.5',
979: 1:    '✅f(1, 1) = 1',
979: 1:    '✅f(5, 5) = 1',
979: 1:    '✅f(55, 5) = 11',
979: 1:    '✅f(55, 44) = 1.25',
979: 1:    '✅f(0, 56) = 0',
979: 1:    '✅f(56, 1) = 56',
979: 1:    '✅f(1, -2) = -0.5',
979: 1:    '✅f(-1, 2) = -0.5',
979: 1:    '✅f(-1, -2) = 0.5',
979: 1:    '✅f(1, 1000) = 0.001',
979: 1:    '✅f(56, 45) = 1.2(4)',
979: 1:    '✅f(111, 110) = 1.00(90)',
979: 1:    '✅f(111, 11) = 10.0(90)',
979: 1:    '✅f(11111, 11) = 1010.0(90)',
979: 1:    '❌f(-11, -222) = ??? != 0.0(495)'
979: 1:  ],
979: 1:  'level': 35,
979: 1:  'nextQuestion': '-11, -222',
979: 1:  'questions': [
979: 1:    '1, 2',
979: 1:    '1, 1',
979: 1:    '5, 5',
979: 1:    '55, 5',
979: 1:    '55, 44',
979: 1:    '0, 56',
979: 1:    '56, 1',
979: 1:    '1, -2',
979: 1:    '-1, 2',
979: 1:    '-1, -2',
979: 1:    '1, 1000',
979: 1:    '56, 45',
979: 1:    '111, 110',
979: 1:    '111, 11',
979: 1:    '11111, 11',
979: 1:    '-11, -222'
979: 1:  ]
979: 1:}
979: 1:Scores: 127175
979: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)']')
979: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
980: 1:BoardData {
980: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
980: 1:  'expectedAnswer': '-5.0(45)',
980: 1:  'history': [
980: 1:    {
980: 1:      'answer': '0.5',
980: 1:      'question': '1, 2',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '1',
980: 1:      'question': '1, 1',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '1',
980: 1:      'question': '5, 5',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '11',
980: 1:      'question': '55, 5',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '1.25',
980: 1:      'question': '55, 44',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '0',
980: 1:      'question': '0, 56',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '56',
980: 1:      'question': '56, 1',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '-0.5',
980: 1:      'question': '1, -2',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '-0.5',
980: 1:      'question': '-1, 2',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '0.5',
980: 1:      'question': '-1, -2',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '0.001',
980: 1:      'question': '1, 1000',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '1.2(4)',
980: 1:      'question': '56, 45',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '1.00(90)',
980: 1:      'question': '111, 110',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '10.0(90)',
980: 1:      'question': '111, 11',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '1010.0(90)',
980: 1:      'question': '11111, 11',
980: 1:      'valid': true
980: 1:    },
980: 1:    {
980: 1:      'answer': '0.0(495)',
980: 1:      'question': '-11, -222',
980: 1:      'valid': true
980: 1:    }
980: 1:  ],
980: 1:  'info': [
980: 1:    '✅f(1, 2) = 0.5',
980: 1:    '✅f(1, 1) = 1',
980: 1:    '✅f(5, 5) = 1',
980: 1:    '✅f(55, 5) = 11',
980: 1:    '✅f(55, 44) = 1.25',
980: 1:    '✅f(0, 56) = 0',
980: 1:    '✅f(56, 1) = 56',
980: 1:    '✅f(1, -2) = -0.5',
980: 1:    '✅f(-1, 2) = -0.5',
980: 1:    '✅f(-1, -2) = 0.5',
980: 1:    '✅f(1, 1000) = 0.001',
980: 1:    '✅f(56, 45) = 1.2(4)',
980: 1:    '✅f(111, 110) = 1.00(90)',
980: 1:    '✅f(111, 11) = 10.0(90)',
980: 1:    '✅f(11111, 11) = 1010.0(90)',
980: 1:    '✅f(-11, -222) = 0.0(495)',
980: 1:    '❌f(111, -22) = ??? != -5.0(45)'
980: 1:  ],
980: 1:  'level': 35,
980: 1:  'nextQuestion': '111, -22',
980: 1:  'questions': [
980: 1:    '1, 2',
980: 1:    '1, 1',
980: 1:    '5, 5',
980: 1:    '55, 5',
980: 1:    '55, 44',
980: 1:    '0, 56',
980: 1:    '56, 1',
980: 1:    '1, -2',
980: 1:    '-1, 2',
980: 1:    '-1, -2',
980: 1:    '1, 1000',
980: 1:    '56, 45',
980: 1:    '111, 110',
980: 1:    '111, 11',
980: 1:    '11111, 11',
980: 1:    '-11, -222',
980: 1:    '111, -22'
980: 1:  ]
980: 1:}
980: 1:Scores: 127196
980: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)']')
980: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
981: 1:BoardData {
981: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
981: 1:  'expectedAnswer': '0.000(3)',
981: 1:  'history': [
981: 1:    {
981: 1:      'answer': '0.5',
981: 1:      'question': '1, 2',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '1',
981: 1:      'question': '1, 1',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '1',
981: 1:      'question': '5, 5',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '11',
981: 1:      'question': '55, 5',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '1.25',
981: 1:      'question': '55, 44',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '0',
981: 1:      'question': '0, 56',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '56',
981: 1:      'question': '56, 1',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '-0.5',
981: 1:      'question': '1, -2',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '-0.5',
981: 1:      'question': '-1, 2',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '0.5',
981: 1:      'question': '-1, -2',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '0.001',
981: 1:      'question': '1, 1000',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '1.2(4)',
981: 1:      'question': '56, 45',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '1.00(90)',
981: 1:      'question': '111, 110',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '10.0(90)',
981: 1:      'question': '111, 11',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '1010.0(90)',
981: 1:      'question': '11111, 11',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '0.0(495)',
981: 1:      'question': '-11, -222',
981: 1:      'valid': true
981: 1:    },
981: 1:    {
981: 1:      'answer': '-5.0(45)',
981: 1:      'question': '111, -22',
981: 1:      'valid': true
981: 1:    }
981: 1:  ],
981: 1:  'info': [
981: 1:    '✅f(1, 2) = 0.5',
981: 1:    '✅f(1, 1) = 1',
981: 1:    '✅f(5, 5) = 1',
981: 1:    '✅f(55, 5) = 11',
981: 1:    '✅f(55, 44) = 1.25',
981: 1:    '✅f(0, 56) = 0',
981: 1:    '✅f(56, 1) = 56',
981: 1:    '✅f(1, -2) = -0.5',
981: 1:    '✅f(-1, 2) = -0.5',
981: 1:    '✅f(-1, -2) = 0.5',
981: 1:    '✅f(1, 1000) = 0.001',
981: 1:    '✅f(56, 45) = 1.2(4)',
981: 1:    '✅f(111, 110) = 1.00(90)',
981: 1:    '✅f(111, 11) = 10.0(90)',
981: 1:    '✅f(11111, 11) = 1010.0(90)',
981: 1:    '✅f(-11, -222) = 0.0(495)',
981: 1:    '✅f(111, -22) = -5.0(45)',
981: 1:    '❌f(1, 3000) = ??? != 0.000(3)'
981: 1:  ],
981: 1:  'level': 35,
981: 1:  'nextQuestion': '1, 3000',
981: 1:  'questions': [
981: 1:    '1, 2',
981: 1:    '1, 1',
981: 1:    '5, 5',
981: 1:    '55, 5',
981: 1:    '55, 44',
981: 1:    '0, 56',
981: 1:    '56, 1',
981: 1:    '1, -2',
981: 1:    '-1, 2',
981: 1:    '-1, -2',
981: 1:    '1, 1000',
981: 1:    '56, 45',
981: 1:    '111, 110',
981: 1:    '111, 11',
981: 1:    '11111, 11',
981: 1:    '-11, -222',
981: 1:    '111, -22',
981: 1:    '1, 3000'
981: 1:  ]
981: 1:}
981: 1:Scores: 127217
981: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)']')
981: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
982: 1:BoardData {
982: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
982: 1:  'expectedAnswer': '1.1(153846)',
982: 1:  'history': [
982: 1:    {
982: 1:      'answer': '0.5',
982: 1:      'question': '1, 2',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '1',
982: 1:      'question': '1, 1',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '1',
982: 1:      'question': '5, 5',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '11',
982: 1:      'question': '55, 5',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '1.25',
982: 1:      'question': '55, 44',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '0',
982: 1:      'question': '0, 56',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '56',
982: 1:      'question': '56, 1',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '-0.5',
982: 1:      'question': '1, -2',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '-0.5',
982: 1:      'question': '-1, 2',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '0.5',
982: 1:      'question': '-1, -2',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '0.001',
982: 1:      'question': '1, 1000',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '1.2(4)',
982: 1:      'question': '56, 45',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '1.00(90)',
982: 1:      'question': '111, 110',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '10.0(90)',
982: 1:      'question': '111, 11',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '1010.0(90)',
982: 1:      'question': '11111, 11',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '0.0(495)',
982: 1:      'question': '-11, -222',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '-5.0(45)',
982: 1:      'question': '111, -22',
982: 1:      'valid': true
982: 1:    },
982: 1:    {
982: 1:      'answer': '0.000(3)',
982: 1:      'question': '1, 3000',
982: 1:      'valid': true
982: 1:    }
982: 1:  ],
982: 1:  'info': [
982: 1:    '✅f(1, 2) = 0.5',
982: 1:    '✅f(1, 1) = 1',
982: 1:    '✅f(5, 5) = 1',
982: 1:    '✅f(55, 5) = 11',
982: 1:    '✅f(55, 44) = 1.25',
982: 1:    '✅f(0, 56) = 0',
982: 1:    '✅f(56, 1) = 56',
982: 1:    '✅f(1, -2) = -0.5',
982: 1:    '✅f(-1, 2) = -0.5',
982: 1:    '✅f(-1, -2) = 0.5',
982: 1:    '✅f(1, 1000) = 0.001',
982: 1:    '✅f(56, 45) = 1.2(4)',
982: 1:    '✅f(111, 110) = 1.00(90)',
982: 1:    '✅f(111, 11) = 10.0(90)',
982: 1:    '✅f(11111, 11) = 1010.0(90)',
982: 1:    '✅f(-11, -222) = 0.0(495)',
982: 1:    '✅f(111, -22) = -5.0(45)',
982: 1:    '✅f(1, 3000) = 0.000(3)',
982: 1:    '❌f(87, 78) = ??? != 1.1(153846)'
982: 1:  ],
982: 1:  'level': 35,
982: 1:  'nextQuestion': '87, 78',
982: 1:  'questions': [
982: 1:    '1, 2',
982: 1:    '1, 1',
982: 1:    '5, 5',
982: 1:    '55, 5',
982: 1:    '55, 44',
982: 1:    '0, 56',
982: 1:    '56, 1',
982: 1:    '1, -2',
982: 1:    '-1, 2',
982: 1:    '-1, -2',
982: 1:    '1, 1000',
982: 1:    '56, 45',
982: 1:    '111, 110',
982: 1:    '111, 11',
982: 1:    '11111, 11',
982: 1:    '-11, -222',
982: 1:    '111, -22',
982: 1:    '1, 3000',
982: 1:    '87, 78'
982: 1:  ]
982: 1:}
982: 1:Scores: 127238
982: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)']')
982: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
983: 1:BoardData {
983: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
983: 1:  'expectedAnswer': '0.803(571428)',
983: 1:  'history': [
983: 1:    {
983: 1:      'answer': '0.5',
983: 1:      'question': '1, 2',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '1',
983: 1:      'question': '1, 1',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '1',
983: 1:      'question': '5, 5',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '11',
983: 1:      'question': '55, 5',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '1.25',
983: 1:      'question': '55, 44',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '0',
983: 1:      'question': '0, 56',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '56',
983: 1:      'question': '56, 1',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '-0.5',
983: 1:      'question': '1, -2',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '-0.5',
983: 1:      'question': '-1, 2',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '0.5',
983: 1:      'question': '-1, -2',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '0.001',
983: 1:      'question': '1, 1000',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '1.2(4)',
983: 1:      'question': '56, 45',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '1.00(90)',
983: 1:      'question': '111, 110',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '10.0(90)',
983: 1:      'question': '111, 11',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '1010.0(90)',
983: 1:      'question': '11111, 11',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '0.0(495)',
983: 1:      'question': '-11, -222',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '-5.0(45)',
983: 1:      'question': '111, -22',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '0.000(3)',
983: 1:      'question': '1, 3000',
983: 1:      'valid': true
983: 1:    },
983: 1:    {
983: 1:      'answer': '1.1(153846)',
983: 1:      'question': '87, 78',
983: 1:      'valid': true
983: 1:    }
983: 1:  ],
983: 1:  'info': [
983: 1:    '✅f(1, 2) = 0.5',
983: 1:    '✅f(1, 1) = 1',
983: 1:    '✅f(5, 5) = 1',
983: 1:    '✅f(55, 5) = 11',
983: 1:    '✅f(55, 44) = 1.25',
983: 1:    '✅f(0, 56) = 0',
983: 1:    '✅f(56, 1) = 56',
983: 1:    '✅f(1, -2) = -0.5',
983: 1:    '✅f(-1, 2) = -0.5',
983: 1:    '✅f(-1, -2) = 0.5',
983: 1:    '✅f(1, 1000) = 0.001',
983: 1:    '✅f(56, 45) = 1.2(4)',
983: 1:    '✅f(111, 110) = 1.00(90)',
983: 1:    '✅f(111, 11) = 10.0(90)',
983: 1:    '✅f(11111, 11) = 1010.0(90)',
983: 1:    '✅f(-11, -222) = 0.0(495)',
983: 1:    '✅f(111, -22) = -5.0(45)',
983: 1:    '✅f(1, 3000) = 0.000(3)',
983: 1:    '✅f(87, 78) = 1.1(153846)',
983: 1:    '❌f(45, 56) = ??? != 0.803(571428)'
983: 1:  ],
983: 1:  'level': 35,
983: 1:  'nextQuestion': '45, 56',
983: 1:  'questions': [
983: 1:    '1, 2',
983: 1:    '1, 1',
983: 1:    '5, 5',
983: 1:    '55, 5',
983: 1:    '55, 44',
983: 1:    '0, 56',
983: 1:    '56, 1',
983: 1:    '1, -2',
983: 1:    '-1, 2',
983: 1:    '-1, -2',
983: 1:    '1, 1000',
983: 1:    '56, 45',
983: 1:    '111, 110',
983: 1:    '111, 11',
983: 1:    '11111, 11',
983: 1:    '-11, -222',
983: 1:    '111, -22',
983: 1:    '1, 3000',
983: 1:    '87, 78',
983: 1:    '45, 56'
983: 1:  ]
983: 1:}
983: 1:Scores: 127259
983: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)', '0.803(571428)']')
983: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
984: 1:BoardData {
984: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
984: 1:  'expectedAnswer': '1.(593984962406015037)',
984: 1:  'history': [
984: 1:    {
984: 1:      'answer': '0.5',
984: 1:      'question': '1, 2',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '1',
984: 1:      'question': '1, 1',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '1',
984: 1:      'question': '5, 5',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '11',
984: 1:      'question': '55, 5',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '1.25',
984: 1:      'question': '55, 44',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '0',
984: 1:      'question': '0, 56',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '56',
984: 1:      'question': '56, 1',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '-0.5',
984: 1:      'question': '1, -2',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '-0.5',
984: 1:      'question': '-1, 2',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '0.5',
984: 1:      'question': '-1, -2',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '0.001',
984: 1:      'question': '1, 1000',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '1.2(4)',
984: 1:      'question': '56, 45',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '1.00(90)',
984: 1:      'question': '111, 110',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '10.0(90)',
984: 1:      'question': '111, 11',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '1010.0(90)',
984: 1:      'question': '11111, 11',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '0.0(495)',
984: 1:      'question': '-11, -222',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '-5.0(45)',
984: 1:      'question': '111, -22',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '0.000(3)',
984: 1:      'question': '1, 3000',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '1.1(153846)',
984: 1:      'question': '87, 78',
984: 1:      'valid': true
984: 1:    },
984: 1:    {
984: 1:      'answer': '0.803(571428)',
984: 1:      'question': '45, 56',
984: 1:      'valid': true
984: 1:    }
984: 1:  ],
984: 1:  'info': [
984: 1:    '✅f(1, 2) = 0.5',
984: 1:    '✅f(1, 1) = 1',
984: 1:    '✅f(5, 5) = 1',
984: 1:    '✅f(55, 5) = 11',
984: 1:    '✅f(55, 44) = 1.25',
984: 1:    '✅f(0, 56) = 0',
984: 1:    '✅f(56, 1) = 56',
984: 1:    '✅f(1, -2) = -0.5',
984: 1:    '✅f(-1, 2) = -0.5',
984: 1:    '✅f(-1, -2) = 0.5',
984: 1:    '✅f(1, 1000) = 0.001',
984: 1:    '✅f(56, 45) = 1.2(4)',
984: 1:    '✅f(111, 110) = 1.00(90)',
984: 1:    '✅f(111, 11) = 10.0(90)',
984: 1:    '✅f(11111, 11) = 1010.0(90)',
984: 1:    '✅f(-11, -222) = 0.0(495)',
984: 1:    '✅f(111, -22) = -5.0(45)',
984: 1:    '✅f(1, 3000) = 0.000(3)',
984: 1:    '✅f(87, 78) = 1.1(153846)',
984: 1:    '✅f(45, 56) = 0.803(571428)',
984: 1:    '❌f(212, 133) = ??? != 1.(593984962406015037)'
984: 1:  ],
984: 1:  'level': 35,
984: 1:  'nextQuestion': '212, 133',
984: 1:  'questions': [
984: 1:    '1, 2',
984: 1:    '1, 1',
984: 1:    '5, 5',
984: 1:    '55, 5',
984: 1:    '55, 44',
984: 1:    '0, 56',
984: 1:    '56, 1',
984: 1:    '1, -2',
984: 1:    '-1, 2',
984: 1:    '-1, -2',
984: 1:    '1, 1000',
984: 1:    '56, 45',
984: 1:    '111, 110',
984: 1:    '111, 11',
984: 1:    '11111, 11',
984: 1:    '-11, -222',
984: 1:    '111, -22',
984: 1:    '1, 3000',
984: 1:    '87, 78',
984: 1:    '45, 56',
984: 1:    '212, 133'
984: 1:  ]
984: 1:}
984: 1:Scores: 127280
984: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)', '0.803(571428)', '1.(593984962406015037)']')
984: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
985: 1:BoardData {
985: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
985: 1:  'expectedAnswer': '96.6(1739130434782608695652)',
985: 1:  'history': [
985: 1:    {
985: 1:      'answer': '0.5',
985: 1:      'question': '1, 2',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '1',
985: 1:      'question': '1, 1',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '1',
985: 1:      'question': '5, 5',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '11',
985: 1:      'question': '55, 5',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '1.25',
985: 1:      'question': '55, 44',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '0',
985: 1:      'question': '0, 56',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '56',
985: 1:      'question': '56, 1',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '-0.5',
985: 1:      'question': '1, -2',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '-0.5',
985: 1:      'question': '-1, 2',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '0.5',
985: 1:      'question': '-1, -2',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '0.001',
985: 1:      'question': '1, 1000',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '1.2(4)',
985: 1:      'question': '56, 45',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '1.00(90)',
985: 1:      'question': '111, 110',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '10.0(90)',
985: 1:      'question': '111, 11',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '1010.0(90)',
985: 1:      'question': '11111, 11',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '0.0(495)',
985: 1:      'question': '-11, -222',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '-5.0(45)',
985: 1:      'question': '111, -22',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '0.000(3)',
985: 1:      'question': '1, 3000',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '1.1(153846)',
985: 1:      'question': '87, 78',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '0.803(571428)',
985: 1:      'question': '45, 56',
985: 1:      'valid': true
985: 1:    },
985: 1:    {
985: 1:      'answer': '1.(593984962406015037)',
985: 1:      'question': '212, 133',
985: 1:      'valid': true
985: 1:    }
985: 1:  ],
985: 1:  'info': [
985: 1:    '✅f(1, 2) = 0.5',
985: 1:    '✅f(1, 1) = 1',
985: 1:    '✅f(5, 5) = 1',
985: 1:    '✅f(55, 5) = 11',
985: 1:    '✅f(55, 44) = 1.25',
985: 1:    '✅f(0, 56) = 0',
985: 1:    '✅f(56, 1) = 56',
985: 1:    '✅f(1, -2) = -0.5',
985: 1:    '✅f(-1, 2) = -0.5',
985: 1:    '✅f(-1, -2) = 0.5',
985: 1:    '✅f(1, 1000) = 0.001',
985: 1:    '✅f(56, 45) = 1.2(4)',
985: 1:    '✅f(111, 110) = 1.00(90)',
985: 1:    '✅f(111, 11) = 10.0(90)',
985: 1:    '✅f(11111, 11) = 1010.0(90)',
985: 1:    '✅f(-11, -222) = 0.0(495)',
985: 1:    '✅f(111, -22) = -5.0(45)',
985: 1:    '✅f(1, 3000) = 0.000(3)',
985: 1:    '✅f(87, 78) = 1.1(153846)',
985: 1:    '✅f(45, 56) = 0.803(571428)',
985: 1:    '✅f(212, 133) = 1.(593984962406015037)',
985: 1:    '❌f(11111, 115) = ??? != 96.6(1739130434782608695652)'
985: 1:  ],
985: 1:  'level': 35,
985: 1:  'nextQuestion': '11111, 115',
985: 1:  'questions': [
985: 1:    '1, 2',
985: 1:    '1, 1',
985: 1:    '5, 5',
985: 1:    '55, 5',
985: 1:    '55, 44',
985: 1:    '0, 56',
985: 1:    '56, 1',
985: 1:    '1, -2',
985: 1:    '-1, 2',
985: 1:    '-1, -2',
985: 1:    '1, 1000',
985: 1:    '56, 45',
985: 1:    '111, 110',
985: 1:    '111, 11',
985: 1:    '11111, 11',
985: 1:    '-11, -222',
985: 1:    '111, -22',
985: 1:    '1, 3000',
985: 1:    '87, 78',
985: 1:    '45, 56',
985: 1:    '212, 133',
985: 1:    '11111, 115'
985: 1:  ]
985: 1:}
985: 1:Scores: 127301
985: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)', '0.803(571428)', '1.(593984962406015037)', '96.6(1739130434782608695652)']')
985: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
986: 1:BoardData {
986: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
986: 1:  'expectedAnswer': '0.3(5652173913043478260869)',
986: 1:  'history': [
986: 1:    {
986: 1:      'answer': '0.5',
986: 1:      'question': '1, 2',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '1',
986: 1:      'question': '1, 1',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '1',
986: 1:      'question': '5, 5',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '11',
986: 1:      'question': '55, 5',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '1.25',
986: 1:      'question': '55, 44',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '0',
986: 1:      'question': '0, 56',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '56',
986: 1:      'question': '56, 1',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '-0.5',
986: 1:      'question': '1, -2',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '-0.5',
986: 1:      'question': '-1, 2',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '0.5',
986: 1:      'question': '-1, -2',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '0.001',
986: 1:      'question': '1, 1000',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '1.2(4)',
986: 1:      'question': '56, 45',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '1.00(90)',
986: 1:      'question': '111, 110',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '10.0(90)',
986: 1:      'question': '111, 11',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '1010.0(90)',
986: 1:      'question': '11111, 11',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '0.0(495)',
986: 1:      'question': '-11, -222',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '-5.0(45)',
986: 1:      'question': '111, -22',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '0.000(3)',
986: 1:      'question': '1, 3000',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '1.1(153846)',
986: 1:      'question': '87, 78',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '0.803(571428)',
986: 1:      'question': '45, 56',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '1.(593984962406015037)',
986: 1:      'question': '212, 133',
986: 1:      'valid': true
986: 1:    },
986: 1:    {
986: 1:      'answer': '96.6(1739130434782608695652)',
986: 1:      'question': '11111, 115',
986: 1:      'valid': true
986: 1:    }
986: 1:  ],
986: 1:  'info': [
986: 1:    '✅f(1, 2) = 0.5',
986: 1:    '✅f(1, 1) = 1',
986: 1:    '✅f(5, 5) = 1',
986: 1:    '✅f(55, 5) = 11',
986: 1:    '✅f(55, 44) = 1.25',
986: 1:    '✅f(0, 56) = 0',
986: 1:    '✅f(56, 1) = 56',
986: 1:    '✅f(1, -2) = -0.5',
986: 1:    '✅f(-1, 2) = -0.5',
986: 1:    '✅f(-1, -2) = 0.5',
986: 1:    '✅f(1, 1000) = 0.001',
986: 1:    '✅f(56, 45) = 1.2(4)',
986: 1:    '✅f(111, 110) = 1.00(90)',
986: 1:    '✅f(111, 11) = 10.0(90)',
986: 1:    '✅f(11111, 11) = 1010.0(90)',
986: 1:    '✅f(-11, -222) = 0.0(495)',
986: 1:    '✅f(111, -22) = -5.0(45)',
986: 1:    '✅f(1, 3000) = 0.000(3)',
986: 1:    '✅f(87, 78) = 1.1(153846)',
986: 1:    '✅f(45, 56) = 0.803(571428)',
986: 1:    '✅f(212, 133) = 1.(593984962406015037)',
986: 1:    '✅f(11111, 115) = 96.6(1739130434782608695652)',
986: 1:    '❌f(123, 345) = ??? != 0.3(5652173913043478260869)'
986: 1:  ],
986: 1:  'level': 35,
986: 1:  'nextQuestion': '123, 345',
986: 1:  'questions': [
986: 1:    '1, 2',
986: 1:    '1, 1',
986: 1:    '5, 5',
986: 1:    '55, 5',
986: 1:    '55, 44',
986: 1:    '0, 56',
986: 1:    '56, 1',
986: 1:    '1, -2',
986: 1:    '-1, 2',
986: 1:    '-1, -2',
986: 1:    '1, 1000',
986: 1:    '56, 45',
986: 1:    '111, 110',
986: 1:    '111, 11',
986: 1:    '11111, 11',
986: 1:    '-11, -222',
986: 1:    '111, -22',
986: 1:    '1, 3000',
986: 1:    '87, 78',
986: 1:    '45, 56',
986: 1:    '212, 133',
986: 1:    '11111, 115',
986: 1:    '123, 345'
986: 1:  ]
986: 1:}
986: 1:Scores: 127322
986: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)', '0.803(571428)', '1.(593984962406015037)', '96.6(1739130434782608695652)', '0.3(5652173913043478260869)']')
986: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
987: 1:BoardData {
987: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
987: 1:  'expectedAnswer': '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484',
987: 1:  'history': [
987: 1:    {
987: 1:      'answer': '0.5',
987: 1:      'question': '1, 2',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '1',
987: 1:      'question': '1, 1',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '1',
987: 1:      'question': '5, 5',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '11',
987: 1:      'question': '55, 5',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '1.25',
987: 1:      'question': '55, 44',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '0',
987: 1:      'question': '0, 56',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '56',
987: 1:      'question': '56, 1',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '-0.5',
987: 1:      'question': '1, -2',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '-0.5',
987: 1:      'question': '-1, 2',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '0.5',
987: 1:      'question': '-1, -2',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '0.001',
987: 1:      'question': '1, 1000',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '1.2(4)',
987: 1:      'question': '56, 45',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '1.00(90)',
987: 1:      'question': '111, 110',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '10.0(90)',
987: 1:      'question': '111, 11',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '1010.0(90)',
987: 1:      'question': '11111, 11',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '0.0(495)',
987: 1:      'question': '-11, -222',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '-5.0(45)',
987: 1:      'question': '111, -22',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '0.000(3)',
987: 1:      'question': '1, 3000',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '1.1(153846)',
987: 1:      'question': '87, 78',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '0.803(571428)',
987: 1:      'question': '45, 56',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '1.(593984962406015037)',
987: 1:      'question': '212, 133',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '96.6(1739130434782608695652)',
987: 1:      'question': '11111, 115',
987: 1:      'valid': true
987: 1:    },
987: 1:    {
987: 1:      'answer': '0.3(5652173913043478260869)',
987: 1:      'question': '123, 345',
987: 1:      'valid': true
987: 1:    }
987: 1:  ],
987: 1:  'info': [
987: 1:    '✅f(1, 2) = 0.5',
987: 1:    '✅f(1, 1) = 1',
987: 1:    '✅f(5, 5) = 1',
987: 1:    '✅f(55, 5) = 11',
987: 1:    '✅f(55, 44) = 1.25',
987: 1:    '✅f(0, 56) = 0',
987: 1:    '✅f(56, 1) = 56',
987: 1:    '✅f(1, -2) = -0.5',
987: 1:    '✅f(-1, 2) = -0.5',
987: 1:    '✅f(-1, -2) = 0.5',
987: 1:    '✅f(1, 1000) = 0.001',
987: 1:    '✅f(56, 45) = 1.2(4)',
987: 1:    '✅f(111, 110) = 1.00(90)',
987: 1:    '✅f(111, 11) = 10.0(90)',
987: 1:    '✅f(11111, 11) = 1010.0(90)',
987: 1:    '✅f(-11, -222) = 0.0(495)',
987: 1:    '✅f(111, -22) = -5.0(45)',
987: 1:    '✅f(1, 3000) = 0.000(3)',
987: 1:    '✅f(87, 78) = 1.1(153846)',
987: 1:    '✅f(45, 56) = 0.803(571428)',
987: 1:    '✅f(212, 133) = 1.(593984962406015037)',
987: 1:    '✅f(11111, 115) = 96.6(1739130434782608695652)',
987: 1:    '✅f(123, 345) = 0.3(5652173913043478260869)',
987: 1:    '❌f(66666666, 77727777) = ??? != 0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484'
987: 1:  ],
987: 1:  'level': 35,
987: 1:  'nextQuestion': '66666666, 77727777',
987: 1:  'questions': [
987: 1:    '1, 2',
987: 1:    '1, 1',
987: 1:    '5, 5',
987: 1:    '55, 5',
987: 1:    '55, 44',
987: 1:    '0, 56',
987: 1:    '56, 1',
987: 1:    '1, -2',
987: 1:    '-1, 2',
987: 1:    '-1, -2',
987: 1:    '1, 1000',
987: 1:    '56, 45',
987: 1:    '111, 110',
987: 1:    '111, 11',
987: 1:    '11111, 11',
987: 1:    '-11, -222',
987: 1:    '111, -22',
987: 1:    '1, 3000',
987: 1:    '87, 78',
987: 1:    '45, 56',
987: 1:    '212, 133',
987: 1:    '11111, 115',
987: 1:    '123, 345',
987: 1:    '66666666, 77727777'
987: 1:  ]
987: 1:}
987: 1:Scores: 127343
987: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)', '0.803(571428)', '1.(593984962406015037)', '96.6(1739130434782608695652)', '0.3(5652173913043478260869)', '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484']')
987: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
988: 1:BoardData {
988: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
988: 1:  'expectedAnswer': '8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847',
988: 1:  'history': [
988: 1:    {
988: 1:      'answer': '0.5',
988: 1:      'question': '1, 2',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '1',
988: 1:      'question': '1, 1',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '1',
988: 1:      'question': '5, 5',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '11',
988: 1:      'question': '55, 5',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '1.25',
988: 1:      'question': '55, 44',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '0',
988: 1:      'question': '0, 56',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '56',
988: 1:      'question': '56, 1',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '-0.5',
988: 1:      'question': '1, -2',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '-0.5',
988: 1:      'question': '-1, 2',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '0.5',
988: 1:      'question': '-1, -2',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '0.001',
988: 1:      'question': '1, 1000',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '1.2(4)',
988: 1:      'question': '56, 45',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '1.00(90)',
988: 1:      'question': '111, 110',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '10.0(90)',
988: 1:      'question': '111, 11',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '1010.0(90)',
988: 1:      'question': '11111, 11',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '0.0(495)',
988: 1:      'question': '-11, -222',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '-5.0(45)',
988: 1:      'question': '111, -22',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '0.000(3)',
988: 1:      'question': '1, 3000',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '1.1(153846)',
988: 1:      'question': '87, 78',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '0.803(571428)',
988: 1:      'question': '45, 56',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '1.(593984962406015037)',
988: 1:      'question': '212, 133',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '96.6(1739130434782608695652)',
988: 1:      'question': '11111, 115',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '0.3(5652173913043478260869)',
988: 1:      'question': '123, 345',
988: 1:      'valid': true
988: 1:    },
988: 1:    {
988: 1:      'answer': '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484',
988: 1:      'question': '66666666, 77727777',
988: 1:      'valid': true
988: 1:    }
988: 1:  ],
988: 1:  'info': [
988: 1:    '✅f(1, 2) = 0.5',
988: 1:    '✅f(1, 1) = 1',
988: 1:    '✅f(5, 5) = 1',
988: 1:    '✅f(55, 5) = 11',
988: 1:    '✅f(55, 44) = 1.25',
988: 1:    '✅f(0, 56) = 0',
988: 1:    '✅f(56, 1) = 56',
988: 1:    '✅f(1, -2) = -0.5',
988: 1:    '✅f(-1, 2) = -0.5',
988: 1:    '✅f(-1, -2) = 0.5',
988: 1:    '✅f(1, 1000) = 0.001',
988: 1:    '✅f(56, 45) = 1.2(4)',
988: 1:    '✅f(111, 110) = 1.00(90)',
988: 1:    '✅f(111, 11) = 10.0(90)',
988: 1:    '✅f(11111, 11) = 1010.0(90)',
988: 1:    '✅f(-11, -222) = 0.0(495)',
988: 1:    '✅f(111, -22) = -5.0(45)',
988: 1:    '✅f(1, 3000) = 0.000(3)',
988: 1:    '✅f(87, 78) = 1.1(153846)',
988: 1:    '✅f(45, 56) = 0.803(571428)',
988: 1:    '✅f(212, 133) = 1.(593984962406015037)',
988: 1:    '✅f(11111, 115) = 96.6(1739130434782608695652)',
988: 1:    '✅f(123, 345) = 0.3(5652173913043478260869)',
988: 1:    '✅f(66666666, 77727777) = 0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484',
988: 1:    '❌f(666666660, 77727777) = ??? != 8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847'
988: 1:  ],
988: 1:  'level': 35,
988: 1:  'nextQuestion': '666666660, 77727777',
988: 1:  'questions': [
988: 1:    '1, 2',
988: 1:    '1, 1',
988: 1:    '5, 5',
988: 1:    '55, 5',
988: 1:    '55, 44',
988: 1:    '0, 56',
988: 1:    '56, 1',
988: 1:    '1, -2',
988: 1:    '-1, 2',
988: 1:    '-1, -2',
988: 1:    '1, 1000',
988: 1:    '56, 45',
988: 1:    '111, 110',
988: 1:    '111, 11',
988: 1:    '11111, 11',
988: 1:    '-11, -222',
988: 1:    '111, -22',
988: 1:    '1, 3000',
988: 1:    '87, 78',
988: 1:    '45, 56',
988: 1:    '212, 133',
988: 1:    '11111, 115',
988: 1:    '123, 345',
988: 1:    '66666666, 77727777',
988: 1:    '666666660, 77727777'
988: 1:  ]
988: 1:}
988: 1:Scores: 127364
988: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)', '0.803(571428)', '1.(593984962406015037)', '96.6(1739130434782608695652)', '0.3(5652173913043478260869)', '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484', '8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847']')
988: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
989: 1:BoardData {
989: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
989: 1:  'expectedAnswer': '85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713',
989: 1:  'history': [
989: 1:    {
989: 1:      'answer': '0.5',
989: 1:      'question': '1, 2',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '1',
989: 1:      'question': '1, 1',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '1',
989: 1:      'question': '5, 5',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '11',
989: 1:      'question': '55, 5',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '1.25',
989: 1:      'question': '55, 44',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '0',
989: 1:      'question': '0, 56',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '56',
989: 1:      'question': '56, 1',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '-0.5',
989: 1:      'question': '1, -2',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '-0.5',
989: 1:      'question': '-1, 2',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '0.5',
989: 1:      'question': '-1, -2',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '0.001',
989: 1:      'question': '1, 1000',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '1.2(4)',
989: 1:      'question': '56, 45',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '1.00(90)',
989: 1:      'question': '111, 110',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '10.0(90)',
989: 1:      'question': '111, 11',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '1010.0(90)',
989: 1:      'question': '11111, 11',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '0.0(495)',
989: 1:      'question': '-11, -222',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '-5.0(45)',
989: 1:      'question': '111, -22',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '0.000(3)',
989: 1:      'question': '1, 3000',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '1.1(153846)',
989: 1:      'question': '87, 78',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '0.803(571428)',
989: 1:      'question': '45, 56',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '1.(593984962406015037)',
989: 1:      'question': '212, 133',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '96.6(1739130434782608695652)',
989: 1:      'question': '11111, 115',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '0.3(5652173913043478260869)',
989: 1:      'question': '123, 345',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484',
989: 1:      'question': '66666666, 77727777',
989: 1:      'valid': true
989: 1:    },
989: 1:    {
989: 1:      'answer': '8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847',
989: 1:      'question': '666666660, 77727777',
989: 1:      'valid': true
989: 1:    }
989: 1:  ],
989: 1:  'info': [
989: 1:    '✅f(1, 2) = 0.5',
989: 1:    '✅f(1, 1) = 1',
989: 1:    '✅f(5, 5) = 1',
989: 1:    '✅f(55, 5) = 11',
989: 1:    '✅f(55, 44) = 1.25',
989: 1:    '✅f(0, 56) = 0',
989: 1:    '✅f(56, 1) = 56',
989: 1:    '✅f(1, -2) = -0.5',
989: 1:    '✅f(-1, 2) = -0.5',
989: 1:    '✅f(-1, -2) = 0.5',
989: 1:    '✅f(1, 1000) = 0.001',
989: 1:    '✅f(56, 45) = 1.2(4)',
989: 1:    '✅f(111, 110) = 1.00(90)',
989: 1:    '✅f(111, 11) = 10.0(90)',
989: 1:    '✅f(11111, 11) = 1010.0(90)',
989: 1:    '✅f(-11, -222) = 0.0(495)',
989: 1:    '✅f(111, -22) = -5.0(45)',
989: 1:    '✅f(1, 3000) = 0.000(3)',
989: 1:    '✅f(87, 78) = 1.1(153846)',
989: 1:    '✅f(45, 56) = 0.803(571428)',
989: 1:    '✅f(212, 133) = 1.(593984962406015037)',
989: 1:    '✅f(11111, 115) = 96.6(1739130434782608695652)',
989: 1:    '✅f(123, 345) = 0.3(5652173913043478260869)',
989: 1:    '✅f(66666666, 77727777) = 0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484',
989: 1:    '✅f(666666660, 77727777) = 8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847',
989: 1:    '❌f(666666660, 7772777) = ??? != 85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713'
989: 1:  ],
989: 1:  'level': 35,
989: 1:  'nextQuestion': '666666660, 7772777',
989: 1:  'questions': [
989: 1:    '1, 2',
989: 1:    '1, 1',
989: 1:    '5, 5',
989: 1:    '55, 5',
989: 1:    '55, 44',
989: 1:    '0, 56',
989: 1:    '56, 1',
989: 1:    '1, -2',
989: 1:    '-1, 2',
989: 1:    '-1, -2',
989: 1:    '1, 1000',
989: 1:    '56, 45',
989: 1:    '111, 110',
989: 1:    '111, 11',
989: 1:    '11111, 11',
989: 1:    '-11, -222',
989: 1:    '111, -22',
989: 1:    '1, 3000',
989: 1:    '87, 78',
989: 1:    '45, 56',
989: 1:    '212, 133',
989: 1:    '11111, 115',
989: 1:    '123, 345',
989: 1:    '66666666, 77727777',
989: 1:    '666666660, 77727777',
989: 1:    '666666660, 7772777'
989: 1:  ]
989: 1:}
989: 1:Scores: 127385
989: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)', '0.803(571428)', '1.(593984962406015037)', '96.6(1739130434782608695652)', '0.3(5652173913043478260869)', '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484', '8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847', '85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713']')
989: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
990: 1:BoardData {
990: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
990: 1:  'expectedAnswer': '1.0(309278350515463917525773195876288659793814432989690721649484536082474226804123711340206185567010)',
990: 1:  'history': [
990: 1:    {
990: 1:      'answer': '0.5',
990: 1:      'question': '1, 2',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '1',
990: 1:      'question': '1, 1',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '1',
990: 1:      'question': '5, 5',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '11',
990: 1:      'question': '55, 5',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '1.25',
990: 1:      'question': '55, 44',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '0',
990: 1:      'question': '0, 56',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '56',
990: 1:      'question': '56, 1',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '-0.5',
990: 1:      'question': '1, -2',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '-0.5',
990: 1:      'question': '-1, 2',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '0.5',
990: 1:      'question': '-1, -2',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '0.001',
990: 1:      'question': '1, 1000',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '1.2(4)',
990: 1:      'question': '56, 45',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '1.00(90)',
990: 1:      'question': '111, 110',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '10.0(90)',
990: 1:      'question': '111, 11',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '1010.0(90)',
990: 1:      'question': '11111, 11',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '0.0(495)',
990: 1:      'question': '-11, -222',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '-5.0(45)',
990: 1:      'question': '111, -22',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '0.000(3)',
990: 1:      'question': '1, 3000',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '1.1(153846)',
990: 1:      'question': '87, 78',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '0.803(571428)',
990: 1:      'question': '45, 56',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '1.(593984962406015037)',
990: 1:      'question': '212, 133',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '96.6(1739130434782608695652)',
990: 1:      'question': '11111, 115',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '0.3(5652173913043478260869)',
990: 1:      'question': '123, 345',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484',
990: 1:      'question': '66666666, 77727777',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847',
990: 1:      'question': '666666660, 77727777',
990: 1:      'valid': true
990: 1:    },
990: 1:    {
990: 1:      'answer': '85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713',
990: 1:      'question': '666666660, 7772777',
990: 1:      'valid': true
990: 1:    }
990: 1:  ],
990: 1:  'info': [
990: 1:    '✅f(1, 2) = 0.5',
990: 1:    '✅f(1, 1) = 1',
990: 1:    '✅f(5, 5) = 1',
990: 1:    '✅f(55, 5) = 11',
990: 1:    '✅f(55, 44) = 1.25',
990: 1:    '✅f(0, 56) = 0',
990: 1:    '✅f(56, 1) = 56',
990: 1:    '✅f(1, -2) = -0.5',
990: 1:    '✅f(-1, 2) = -0.5',
990: 1:    '✅f(-1, -2) = 0.5',
990: 1:    '✅f(1, 1000) = 0.001',
990: 1:    '✅f(56, 45) = 1.2(4)',
990: 1:    '✅f(111, 110) = 1.00(90)',
990: 1:    '✅f(111, 11) = 10.0(90)',
990: 1:    '✅f(11111, 11) = 1010.0(90)',
990: 1:    '✅f(-11, -222) = 0.0(495)',
990: 1:    '✅f(111, -22) = -5.0(45)',
990: 1:    '✅f(1, 3000) = 0.000(3)',
990: 1:    '✅f(87, 78) = 1.1(153846)',
990: 1:    '✅f(45, 56) = 0.803(571428)',
990: 1:    '✅f(212, 133) = 1.(593984962406015037)',
990: 1:    '✅f(11111, 115) = 96.6(1739130434782608695652)',
990: 1:    '✅f(123, 345) = 0.3(5652173913043478260869)',
990: 1:    '✅f(66666666, 77727777) = 0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484',
990: 1:    '✅f(666666660, 77727777) = 8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847',
990: 1:    '✅f(666666660, 7772777) = 85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713',
990: 1:    '❌f(100, 97) = ??? != 1.0(309278350515463917525773195876288659793814432989690721649484536082474226804123711340206185567010)'
990: 1:  ],
990: 1:  'level': 35,
990: 1:  'nextQuestion': '100, 97',
990: 1:  'questions': [
990: 1:    '1, 2',
990: 1:    '1, 1',
990: 1:    '5, 5',
990: 1:    '55, 5',
990: 1:    '55, 44',
990: 1:    '0, 56',
990: 1:    '56, 1',
990: 1:    '1, -2',
990: 1:    '-1, 2',
990: 1:    '-1, -2',
990: 1:    '1, 1000',
990: 1:    '56, 45',
990: 1:    '111, 110',
990: 1:    '111, 11',
990: 1:    '11111, 11',
990: 1:    '-11, -222',
990: 1:    '111, -22',
990: 1:    '1, 3000',
990: 1:    '87, 78',
990: 1:    '45, 56',
990: 1:    '212, 133',
990: 1:    '11111, 115',
990: 1:    '123, 345',
990: 1:    '66666666, 77727777',
990: 1:    '666666660, 77727777',
990: 1:    '666666660, 7772777',
990: 1:    '100, 97'
990: 1:  ]
990: 1:}
990: 1:Scores: 127406
990: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)', '0.803(571428)', '1.(593984962406015037)', '96.6(1739130434782608695652)', '0.3(5652173913043478260869)', '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484', '8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847', '85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713', '1.0(309278350515463917525773195876288659793814432989690721649484536082474226804123711340206185567010)']')
990: 1:Fire Event: PassTest{complexity=60, testCount=28}
------------------------------------------
991: 1:BoardData {
991: 1:  'description': ['Write a method that divides two numbers in a column to within 100 digits. If there is a period in the result, it should be written as follows:\n212/133 = 1.(593984962406015037)\n87/78 = 1.1(153846)'],
991: 1:  'expectedAnswer': 'Div by zero error!',
991: 1:  'history': [
991: 1:    {
991: 1:      'answer': '0.5',
991: 1:      'question': '1, 2',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '1',
991: 1:      'question': '1, 1',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '1',
991: 1:      'question': '5, 5',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '11',
991: 1:      'question': '55, 5',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '1.25',
991: 1:      'question': '55, 44',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '0',
991: 1:      'question': '0, 56',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '56',
991: 1:      'question': '56, 1',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '-0.5',
991: 1:      'question': '1, -2',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '-0.5',
991: 1:      'question': '-1, 2',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '0.5',
991: 1:      'question': '-1, -2',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '0.001',
991: 1:      'question': '1, 1000',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '1.2(4)',
991: 1:      'question': '56, 45',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '1.00(90)',
991: 1:      'question': '111, 110',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '10.0(90)',
991: 1:      'question': '111, 11',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '1010.0(90)',
991: 1:      'question': '11111, 11',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '0.0(495)',
991: 1:      'question': '-11, -222',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '-5.0(45)',
991: 1:      'question': '111, -22',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '0.000(3)',
991: 1:      'question': '1, 3000',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '1.1(153846)',
991: 1:      'question': '87, 78',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '0.803(571428)',
991: 1:      'question': '45, 56',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '1.(593984962406015037)',
991: 1:      'question': '212, 133',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '96.6(1739130434782608695652)',
991: 1:      'question': '11111, 115',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '0.3(5652173913043478260869)',
991: 1:      'question': '123, 345',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484',
991: 1:      'question': '66666666, 77727777',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847',
991: 1:      'question': '666666660, 77727777',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713',
991: 1:      'question': '666666660, 7772777',
991: 1:      'valid': true
991: 1:    },
991: 1:    {
991: 1:      'answer': '1.0(309278350515463917525773195876288659793814432989690721649484536082474226804123711340206185567010)',
991: 1:      'question': '100, 97',
991: 1:      'valid': true
991: 1:    }
991: 1:  ],
991: 1:  'info': [
991: 1:    '✅f(1, 2) = 0.5',
991: 1:    '✅f(1, 1) = 1',
991: 1:    '✅f(5, 5) = 1',
991: 1:    '✅f(55, 5) = 11',
991: 1:    '✅f(55, 44) = 1.25',
991: 1:    '✅f(0, 56) = 0',
991: 1:    '✅f(56, 1) = 56',
991: 1:    '✅f(1, -2) = -0.5',
991: 1:    '✅f(-1, 2) = -0.5',
991: 1:    '✅f(-1, -2) = 0.5',
991: 1:    '✅f(1, 1000) = 0.001',
991: 1:    '✅f(56, 45) = 1.2(4)',
991: 1:    '✅f(111, 110) = 1.00(90)',
991: 1:    '✅f(111, 11) = 10.0(90)',
991: 1:    '✅f(11111, 11) = 1010.0(90)',
991: 1:    '✅f(-11, -222) = 0.0(495)',
991: 1:    '✅f(111, -22) = -5.0(45)',
991: 1:    '✅f(1, 3000) = 0.000(3)',
991: 1:    '✅f(87, 78) = 1.1(153846)',
991: 1:    '✅f(45, 56) = 0.803(571428)',
991: 1:    '✅f(212, 133) = 1.(593984962406015037)',
991: 1:    '✅f(11111, 115) = 96.6(1739130434782608695652)',
991: 1:    '✅f(123, 345) = 0.3(5652173913043478260869)',
991: 1:    '✅f(66666666, 77727777) = 0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484',
991: 1:    '✅f(666666660, 77727777) = 8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847',
991: 1:    '✅f(666666660, 7772777) = 85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713',
991: 1:    '✅f(100, 97) = 1.0(309278350515463917525773195876288659793814432989690721649484536082474226804123711340206185567010)',
991: 1:    '❌f(999, 0) = ??? != Div by zero error!'
991: 1:  ],
991: 1:  'level': 35,
991: 1:  'nextQuestion': '999, 0',
991: 1:  'questions': [
991: 1:    '1, 2',
991: 1:    '1, 1',
991: 1:    '5, 5',
991: 1:    '55, 5',
991: 1:    '55, 44',
991: 1:    '0, 56',
991: 1:    '56, 1',
991: 1:    '1, -2',
991: 1:    '-1, 2',
991: 1:    '-1, -2',
991: 1:    '1, 1000',
991: 1:    '56, 45',
991: 1:    '111, 110',
991: 1:    '111, 11',
991: 1:    '11111, 11',
991: 1:    '-11, -222',
991: 1:    '111, -22',
991: 1:    '1, 3000',
991: 1:    '87, 78',
991: 1:    '45, 56',
991: 1:    '212, 133',
991: 1:    '11111, 115',
991: 1:    '123, 345',
991: 1:    '66666666, 77727777',
991: 1:    '666666660, 77727777',
991: 1:    '666666660, 7772777',
991: 1:    '100, 97',
991: 1:    '999, 0'
991: 1:  ]
991: 1:}
991: 1:Scores: 127427
991: 1:Answer: message('['0.5', '1', '1', '11', '1.25', '0', '56', '-0.5', '-0.5', '0.5', '0.001', '1.2(4)', '1.00(90)', '10.0(90)', '1010.0(90)', '0.0(495)', '-5.0(45)', '0.000(3)', '1.1(153846)', '0.803(571428)', '1.(593984962406015037)', '96.6(1739130434782608695652)', '0.3(5652173913043478260869)', '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484', '8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847', '85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713', '1.0(309278350515463917525773195876288659793814432989690721649484536082474226804123711340206185567010)', 'Div by zero error!']')
991: 1:Fire Event: PassTest{complexity=60, testCount=28}
991: 1:Fire Event: NextAlgorithm{complexity=60, time=0}
------------------------------------------
992: 1:BoardData {
992: 1:  'description': ['Wait for next level. Please send 'message('StartNextLevel')' command.'],
992: 1:  'history': [
992: 1:    {
992: 1:      'answer': '0.5',
992: 1:      'question': '1, 2',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '1',
992: 1:      'question': '1, 1',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '1',
992: 1:      'question': '5, 5',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '11',
992: 1:      'question': '55, 5',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '1.25',
992: 1:      'question': '55, 44',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '0',
992: 1:      'question': '0, 56',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '56',
992: 1:      'question': '56, 1',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '-0.5',
992: 1:      'question': '1, -2',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '-0.5',
992: 1:      'question': '-1, 2',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '0.5',
992: 1:      'question': '-1, -2',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '0.001',
992: 1:      'question': '1, 1000',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '1.2(4)',
992: 1:      'question': '56, 45',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '1.00(90)',
992: 1:      'question': '111, 110',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '10.0(90)',
992: 1:      'question': '111, 11',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '1010.0(90)',
992: 1:      'question': '11111, 11',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '0.0(495)',
992: 1:      'question': '-11, -222',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '-5.0(45)',
992: 1:      'question': '111, -22',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '0.000(3)',
992: 1:      'question': '1, 3000',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '1.1(153846)',
992: 1:      'question': '87, 78',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '0.803(571428)',
992: 1:      'question': '45, 56',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '1.(593984962406015037)',
992: 1:      'question': '212, 133',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '96.6(1739130434782608695652)',
992: 1:      'question': '11111, 115',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '0.3(5652173913043478260869)',
992: 1:      'question': '123, 345',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484',
992: 1:      'question': '66666666, 77727777',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847',
992: 1:      'question': '666666660, 77727777',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713',
992: 1:      'question': '666666660, 7772777',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': '1.0(309278350515463917525773195876288659793814432989690721649484536082474226804123711340206185567010)',
992: 1:      'question': '100, 97',
992: 1:      'valid': true
992: 1:    },
992: 1:    {
992: 1:      'answer': 'Div by zero error!',
992: 1:      'question': '999, 0',
992: 1:      'valid': true
992: 1:    }
992: 1:  ],
992: 1:  'info': [
992: 1:    '✅f(1, 2) = 0.5',
992: 1:    '✅f(1, 1) = 1',
992: 1:    '✅f(5, 5) = 1',
992: 1:    '✅f(55, 5) = 11',
992: 1:    '✅f(55, 44) = 1.25',
992: 1:    '✅f(0, 56) = 0',
992: 1:    '✅f(56, 1) = 56',
992: 1:    '✅f(1, -2) = -0.5',
992: 1:    '✅f(-1, 2) = -0.5',
992: 1:    '✅f(-1, -2) = 0.5',
992: 1:    '✅f(1, 1000) = 0.001',
992: 1:    '✅f(56, 45) = 1.2(4)',
992: 1:    '✅f(111, 110) = 1.00(90)',
992: 1:    '✅f(111, 11) = 10.0(90)',
992: 1:    '✅f(11111, 11) = 1010.0(90)',
992: 1:    '✅f(-11, -222) = 0.0(495)',
992: 1:    '✅f(111, -22) = -5.0(45)',
992: 1:    '✅f(1, 3000) = 0.000(3)',
992: 1:    '✅f(87, 78) = 1.1(153846)',
992: 1:    '✅f(45, 56) = 0.803(571428)',
992: 1:    '✅f(212, 133) = 1.(593984962406015037)',
992: 1:    '✅f(11111, 115) = 96.6(1739130434782608695652)',
992: 1:    '✅f(123, 345) = 0.3(5652173913043478260869)',
992: 1:    '✅f(66666666, 77727777) = 0.8576942320118070532237143486041032667124906968586017840186012266888836921194851616559161340739231484',
992: 1:    '✅f(666666660, 77727777) = 8.5769423201180705322371434860410326671249069685860178401860122668888369211948516165591613407392314847',
992: 1:    '✅f(666666660, 7772777) = 85.7694309253951322673994120762759564567464112247141529983428059238030371899258141588263756955847311713',
992: 1:    '✅f(100, 97) = 1.0(309278350515463917525773195876288659793814432989690721649484536082474226804123711340206185567010)',
992: 1:    '✅f(999, 0) = Div by zero error!'
992: 1:  ],
992: 1:  'level': 35,
992: 1:  'questions': []
992: 1:}
992: 1:Scores: 135547
992: 1:Answer: message('StartNextLevel')
992: 1:PLAYER_WIN -> REMOVE_FROM_GAME
------------------------------------------
993: 1:BoardData {
993: 1:  'description': ['No more Levels. You win!'],
993: 1:  'history': [],
993: 1:  'info': [],
993: 1:  'level': 36,
993: 1:  'questions': []
993: 1:}
993: 1:Scores: 135547
993: 1:Answer: message('StartNextLevel')
------------------------------------------
994: 1:BoardData {
994: 1:  'description': ['No more Levels. You win!'],
994: 1:  'history': [],
994: 1:  'info': [],
994: 1:  'level': 36,
994: 1:  'questions': []
994: 1:}
994: 1:Scores: 135547
994: 1:Answer: message('StartNextLevel')
------------------------------------------
995: 1:BoardData {
995: 1:  'description': ['No more Levels. You win!'],
995: 1:  'history': [],
995: 1:  'info': [],
995: 1:  'level': 36,
995: 1:  'questions': []
995: 1:}
995: 1:Scores: 135547
995: 1:Answer: message('StartNextLevel')
------------------------------------------
996: 1:BoardData {
996: 1:  'description': ['No more Levels. You win!'],
996: 1:  'history': [],
996: 1:  'info': [],
996: 1:  'level': 36,
996: 1:  'questions': []
996: 1:}
996: 1:Scores: 135547
996: 1:Answer: message('StartNextLevel')
------------------------------------------
997: 1:BoardData {
997: 1:  'description': ['No more Levels. You win!'],
997: 1:  'history': [],
997: 1:  'info': [],
997: 1:  'level': 36,
997: 1:  'questions': []
997: 1:}
997: 1:Scores: 135547
997: 1:Answer: message('StartNextLevel')
------------------------------------------
998: 1:BoardData {
998: 1:  'description': ['No more Levels. You win!'],
998: 1:  'history': [],
998: 1:  'info': [],
998: 1:  'level': 36,
998: 1:  'questions': []
998: 1:}
998: 1:Scores: 135547
998: 1:Answer: message('StartNextLevel')
------------------------------------------
999: 1:BoardData {
999: 1:  'description': ['No more Levels. You win!'],
999: 1:  'history': [],
999: 1:  'info': [],
999: 1:  'level': 36,
999: 1:  'questions': []
999: 1:}
999: 1:Scores: 135547
999: 1:Answer: message('StartNextLevel')
------------------------------------------
1000: 1:BoardData {
1000: 1:  'description': ['No more Levels. You win!'],
1000: 1:  'history': [],
1000: 1:  'info': [],
1000: 1:  'level': 36,
1000: 1:  'questions': []
1000: 1:}
1000: 1:Scores: 135547
1000: 1:Answer: message('StartNextLevel')
------------------------------------------